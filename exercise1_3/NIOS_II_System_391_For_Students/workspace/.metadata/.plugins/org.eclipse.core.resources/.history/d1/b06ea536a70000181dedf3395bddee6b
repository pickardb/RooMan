/**************************************************************************
/* Subroutine to initialise the RS232 Port by writing some data
** to the internal registers.
** Call this function at the start of the program before you attempt
** to read or write to data via the RS232 port
**
** Refer to 6850 data sheet for details of registers and
***************************************************************************/
#include <stdio.h>

#define RS232_Control (*(volatile unsigned char *)(0x84000000))
#define RS232_Status (*(volatile unsigned char *)(0x84000000))
#define RS232_TxData (*(volatile unsigned char *)(0x84000002))
#define RS232_RxData (*(volatile unsigned char *)(0x84000002))
#define RS232_Baud (*(volatile unsigned char *)(0x84000004))

void Init_RS232(void)
{
 // set up 6850 Control Register to utilise a divide by 16 clock,
 // set RTS low, use 8 bits of data, no parity, 1 stop bit,
 // transmitter interrupt disabled
 // program baud rate generator to use 115k baud
	RS232_Control = 0x03;
	RS232_Baud = 0x01;	//115k baud
	RS232_Control = 0x55;
	printf("Status is %d, Control is %d \n", RS232_Status, RS232_Control);

	//RS232 Control 0x00001000_000000_1_1_000000_0_0
}
int putcharRS232(int c)
{
 // poll Tx bit in 6850 status register. Wait for it to become '1'
 // write 'c' to the 6850 TxData register to output the character
	while (!(RS232_Status&0x02)){printf("Status is %d, Control is %d \n", RS232_Status, RS232_Control);}
	RS232_TxData = c;

 return c ; // return c
}
int getcharRS232( void )
{
 // poll Rx bit in 6850 status register. Wait for it to become '1'
 // read received character from 6850 RxData register.
	while (!(RS232_Status&0x01)){}
	return RS232_RxData;
}
// the following function polls the 6850 to determine if any character
// has been received. It doesn't wait for one, or read it, it simply tests
// to see if one is available to read
int RS232TestForReceivedData(void)
{
 // Test Rx bit in 6850 serial comms chip status register
 // if RX bit is set, return TRUE, otherwise return FALSE
	return (RS232_Status&0x01);
}


int main (void){
	printf("Initializing\n");
	Init_RS232();
	printf("Status is %d, Control is %d \n", RS232_Status, RS232_Control);
	printf("Sending CAT\n");
	putcharRS232((int)"C");
	printf("Sent 'C'\n");
	int received = getcharRS232();
	printf("Received : %d \n", received);
	putcharRS232((int)"A");
	printf("Sent 'A'\n");
	received = getcharRS232();
	printf("Received : %d \n", received);
	putcharRS232((int)"T");
	printf("Sent 'T'\n");
	received = getcharRS232();
	printf("Received : %d \n", received);
	return 0;
}

