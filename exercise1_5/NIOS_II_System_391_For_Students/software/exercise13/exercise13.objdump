
exercise13.elf:     file format elf32-littlenios2
exercise13.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00010004 memsz 0x00010004 flags r-x
    LOAD off    0x00011024 vaddr 0x08010024 paddr 0x08011b3c align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00013654 vaddr 0x08013654 paddr 0x08013654 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fa0c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000045c  0800fbc8  0800fbc8  00010bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  08010024  08011b3c  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  08013654  08013654  00013654  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080137b0  080137b0  00012b3c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012b3c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d68  00000000  00000000  00012b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000259d5  00000000  00000000  000138c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009727  00000000  00000000  0003929d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b579  00000000  00000000  000429c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002588  00000000  00000000  0004df40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000354b  00000000  00000000  000504c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001709d  00000000  00000000  00053a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006aab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001380  00000000  00000000  0006aad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f42f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006f432  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006f43e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006f43f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006f440  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006f44b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006f456  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006f461  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005f  00000000  00000000  0006f46c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0006f4cb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006bb8b  00000000  00000000  00074017  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0800fbc8 l    d  .rodata	00000000 .rodata
08010024 l    d  .rwdata	00000000 .rwdata
08013654 l    d  .bss	00000000 .bss
080137b0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../exercise13_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800fd52 l     O .rodata	00000010 zeroes.4181
0800fd62 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002d24 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080048a4 l     F .text	00000008 __fp_lock
080048ac l     F .text	00000008 __fp_unlock
080048c0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08010024 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08010468 l     O .rwdata	00000020 lc_ctype_charset
08010448 l     O .rwdata	00000020 lc_message_charset
08010488 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800fd94 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007e88 l     F .text	000000fc __sprint_r.part.0
0800fec8 l     O .rodata	00000010 blanks.4125
0800feb8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a804 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800cf30 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d050 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d07c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d17c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d270 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d354 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d530 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08011b2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800d78c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d8d4 l     F .text	00000038 alt_dev_reg
08010a70 l     O .rwdata	00001060 jtag_uart_0
08011ad0 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800dbd8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800dddc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800e3fc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800eb2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800f068 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800f1a0 l     F .text	00000050 alt_get_errno
0800f1f0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080009dc g     F .text	00000018 putchar
08007360 g     F .text	00000074 _mprec_log10
0800744c g     F .text	0000008c __any_on
08009948 g     F .text	00000054 _isatty_r
0800fda0 g     O .rodata	00000028 __mprec_tinytens
0800d478 g     F .text	00000078 alt_main
080009f4 g     F .text	000000b8 _puts_r
080136b0 g     O .bss	00000100 alt_irq
0800999c g     F .text	0000005c _lseek_r
08011b3c g       *ABS*	00000000 __flash_rwdata_start
0800e56c g     F .text	0000003c alt_up_character_lcd_send_cmd
0800ba98 g     F .text	00000084 .hidden __eqdf2
080137b0 g       *ABS*	00000000 __alt_heap_start
080005d0 g     F .text	0000017c readDataFromTx
08000998 g     F .text	0000003c printf
08009a54 g     F .text	0000009c _wcrtomb_r
08007d80 g     F .text	0000005c __sseek
08004bf4 g     F .text	00000010 __sinit
0800931c g     F .text	00000154 __swbuf_r
0800566c g     F .text	0000007c _setlocale_r
08004a60 g     F .text	00000064 __sfmoreglue
0800d510 g     F .text	00000020 __malloc_unlock
080062cc g     F .text	0000015c memmove
08004bdc g     F .text	00000018 _cleanup
0800654c g     F .text	000000a8 _Balloc
0800bb1c g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800e4f8 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080098f0 g     F .text	00000058 _fstat_r
0801366c g     O .bss	00000004 errno
08007cfc g     F .text	00000008 __seofread
08013674 g     O .bss	00000004 alt_argv
08019afc g       *ABS*	00000000 _gp
0800030c g     F .text	0000005c putcharRS232
080007e0 g     F .text	00000030 reset
080108f0 g     O .rwdata	00000180 alt_fd_list
0800041c g     F .text	00000030 RS232TestForReceivedData
080009d4 g     F .text	00000008 _putchar_r
0800ecd8 g     F .text	00000090 alt_find_dev
08006194 g     F .text	00000138 memcpy
0800e708 g     F .text	00000050 alt_up_character_lcd_write_fd
08000250 g     F .text	00000060 Init_RS232
080048b4 g     F .text	0000000c _cleanup_r
0800cd58 g     F .text	000000d0 .hidden __floatsidf
0800f128 g     F .text	00000078 alt_io_redirect
0800bbfc g     F .text	000000e0 .hidden __ltdf2
0800fbc8 g       *ABS*	00000000 __DTOR_END__
08000aac g     F .text	00000014 puts
08007be0 g     F .text	00000074 __fpclassifyd
080072bc g     F .text	000000a4 __ratio
080092f8 g     F .text	00000024 __vfiprintf_internal
0800dfd8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0800096c g     F .text	0000002c _printf_r
0800a920 g     F .text	00000008 .hidden __udivsi3
0800d1cc g     F .text	000000a4 isatty
0800fdf0 g     O .rodata	000000c8 __mprec_tens
080056e8 g     F .text	0000000c __locale_charset
0800f798 g     F .text	0000008c alt_icache_flush
08013668 g     O .bss	00000004 __malloc_top_pad
08011b04 g     O .rwdata	00000004 __mb_cur_max
08005718 g     F .text	0000000c _localeconv_r
0800694c g     F .text	0000003c __i2b
08005058 g     F .text	000004a4 __sfvwrite_r
080008d8 g     F .text	00000094 configureBluetoothDongle
08007c54 g     F .text	00000054 _sbrk_r
080002b0 g     F .text	0000005c putcharBluetooth
080099f8 g     F .text	0000005c _read_r
08011b24 g     O .rwdata	00000004 alt_max_fd
08009600 g     F .text	00000100 _fclose_r
080007ac g     F .text	00000034 enterCommandMode
08004874 g     F .text	00000030 fflush
08013664 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a930 g     F .text	0000089c .hidden __adddf3
08007064 g     F .text	0000011c __b2d
0800a274 g     F .text	00000590 .hidden __umoddi3
0800d3a4 g     F .text	000000d4 lseek
08000874 g     F .text	00000034 setPassword
08011afc g     O .rwdata	00000004 _global_impure_ptr
08007640 g     F .text	000005a0 _realloc_r
080137b0 g       *ABS*	00000000 __bss_end
0800ef78 g     F .text	000000f0 alt_iic_isr_register
0800f4ac g     F .text	00000104 alt_tick
08009cb4 g     F .text	000005c0 .hidden __udivdi3
08009714 g     F .text	00000184 _fputwc_r
0800fdc8 g     O .rodata	00000028 __mprec_bigtens
08006730 g     F .text	00000104 __s2b
0800ce28 g     F .text	000000a4 .hidden __floatunsidf
08006e0c g     F .text	00000060 __mcmp
08004c14 g     F .text	00000018 __fp_lock_all
0800ef2c g     F .text	0000004c alt_ic_irq_enabled
0800f414 g     F .text	00000098 alt_alarm_stop
0801367c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
080108c8 g     O .rwdata	00000028 alt_dev_null
0800e99c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800eb10 g     F .text	0000001c alt_dcache_flush_all
08006834 g     F .text	00000068 __hi0bits
0800ccd0 g     F .text	00000088 .hidden __fixdfsi
08011b3c g       *ABS*	00000000 __ram_rwdata_end
08011b1c g     O .rwdata	00000008 alt_dev_list
0800d7dc g     F .text	000000f8 write
080074d8 g     F .text	000000a0 _putc_r
08010024 g       *ABS*	00000000 __ram_rodata_end
0800d0cc g     F .text	000000b0 fstat
0800bbfc g     F .text	000000e0 .hidden __ledf2
08006b84 g     F .text	00000140 __pow5mult
08007f9c g     F .text	0000135c ___vfiprintf_internal_r
0801365c g     O .bss	00000004 __nlocale_changed
0800a928 g     F .text	00000008 .hidden __umodsi3
080137b0 g       *ABS*	00000000 end
0800db14 g     F .text	000000c4 altera_avalon_jtag_uart_init
0800fbc8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800e470 g     F .text	00000088 alt_avalon_timer_sc_init
0800cecc g     F .text	00000064 .hidden __clzsi2
0800e1e4 g     F .text	00000218 altera_avalon_jtag_uart_write
08004c04 g     F .text	00000004 __sfp_lock_acquire
080060ac g     F .text	000000e8 memchr
0800e61c g     F .text	00000078 alt_up_character_lcd_write
08000bd4 g     F .text	00001ffc ___vfprintf_internal_r
08004d68 g     F .text	000002f0 _free_r
080004e4 g     F .text	0000005c wait
080056f4 g     F .text	00000010 __locale_mb_cur_max
0800fa00 g     F .text	00000194 __call_exitprocs
0800044c g     F .text	00000098 test
08013658 g     O .bss	00000004 __mlocale_changed
08011b08 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08013680 g     O .bss	00000004 _alt_tick_rate
08000ad8 g     F .text	00000064 rand
08006cc4 g     F .text	00000148 __lshift
08013684 g     O .bss	00000004 _alt_nticks
0800d580 g     F .text	000000fc read
0800d940 g     F .text	00000070 alt_sys_init
0800e854 g     F .text	00000088 alt_up_character_lcd_shift_display
0800f8ec g     F .text	00000114 __register_exitproc
08006988 g     F .text	000001fc __multiply
0800e8dc g     F .text	0000008c alt_up_character_lcd_erase_pos
0800de84 g     F .text	00000068 altera_avalon_jtag_uart_close
08010024 g       *ABS*	00000000 __ram_rwdata_start
0800fbc8 g       *ABS*	00000000 __ram_rodata_start
08013688 g     O .bss	00000028 __malloc_current_mallinfo
08007180 g     F .text	0000013c __d2b
0800d9b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800f6e4 g     F .text	000000b4 alt_get_fd
080094e8 g     F .text	00000054 _close_r
0800f870 g     F .text	0000007c memcmp
0800da70 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080137b0 g       *ABS*	00000000 __alt_stack_base
0800dac0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002bf4 g     F .text	00000130 __swsetup_r
0800b1cc g     F .text	000008cc .hidden __divdf3
08004ac4 g     F .text	00000118 __sfp
080073d4 g     F .text	00000078 __copybits
080104c0 g     O .rwdata	00000408 __malloc_av_
08004c10 g     F .text	00000004 __sinit_lock_release
0800bcdc g     F .text	00000724 .hidden __muldf3
08007ca8 g     F .text	00000054 __sread
0800f5d0 g     F .text	00000114 alt_find_file
0800eb7c g     F .text	000000a4 alt_dev_llist_insert
0800d4f0 g     F .text	00000020 __malloc_lock
0800d6dc g     F .text	000000b0 sbrk
0800464c g     F .text	00000228 _fflush_r
0800953c g     F .text	000000c4 _calloc_r
08013654 g       *ABS*	00000000 __bss_start
08006428 g     F .text	00000124 memset
080001f8 g     F .text	00000058 main
08013678 g     O .bss	00000004 alt_envp
08013660 g     O .bss	00000004 __malloc_max_total_mem
0800da10 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009470 g     F .text	0000001c __swbuf
08000ac0 g     F .text	00000018 srand
0800e7cc g     F .text	00000088 alt_up_character_lcd_shift_cursor
08007ddc g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08009700 g     F .text	00000014 fclose
08002f24 g     F .text	00001728 _dtoa_r
08005904 g     F .text	000007a8 _malloc_r
08009bc8 g     F .text	00000030 __ascii_wctomb
08011b28 g     O .rwdata	00000004 alt_errno
080054fc g     F .text	000000b8 _fwalk
08007578 g     F .text	000000c8 putc
0800a870 g     F .text	00000054 .hidden __divsi3
0800e5dc g     F .text	00000040 alt_up_character_lcd_open_dev
08004c44 g     F .text	00000124 _malloc_trim_r
0800fbc8 g       *ABS*	00000000 __CTOR_END__
0800e5a8 g     F .text	00000034 alt_up_character_lcd_init
08007de4 g     F .text	000000a4 strcmp
0800fbc8 g       *ABS*	00000000 __flash_rodata_start
0800fbc8 g       *ABS*	00000000 __DTOR_LIST__
0800ba98 g     F .text	00000084 .hidden __nedf2
0800d90c g     F .text	00000034 alt_irq_init
0800d67c g     F .text	00000060 alt_release_fd
0800e968 g     F .text	00000034 alt_up_character_lcd_cursor_off
0800fed8 g     O .rodata	00000100 .hidden __clz_tab
08013654 g     O .bss	00000004 _PathLocale
0800f824 g     F .text	00000014 atexit
0800948c g     F .text	0000005c _write_r
08005724 g     F .text	0000001c setlocale
080003c4 g     F .text	00000058 getcharBluetooth
08011b00 g     O .rwdata	00000004 _impure_ptr
08013670 g     O .bss	00000004 alt_argc
0800ec7c g     F .text	0000005c _do_dtors
08005710 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08007004 g     F .text	00000060 __ulp
08000810 g     F .text	00000030 setAuthenticationMode
08004c2c g     F .text	00000018 __fp_unlock_all
08011b14 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005740 g     F .text	0000000c localeconv
0800074c g     F .text	00000060 initBluetooth
08000368 g     F .text	0000005c getcharRS232
0800ed98 g     F .text	00000050 alt_ic_isr_register
08011b3c g       *ABS*	00000000 _edata
080137b0 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800deec g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800ee88 g     F .text	000000a4 alt_ic_irq_disable
08007d04 g     F .text	0000007c __swrite
08011b0c g     O .rwdata	00000004 __malloc_trim_threshold
0800f5b0 g     F .text	00000020 altera_nios2_qsys_irq_init
08005704 g     F .text	0000000c __locale_msgcharset
0800f838 g     F .text	00000038 exit
080055b4 g     F .text	000000b8 _fwalk_reent
08006e6c g     F .text	00000198 __mdiff
0800a8c4 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004c08 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800e694 g     F .text	00000074 alt_up_character_lcd_string
0800fb94 g     F .text	00000034 _exit
0800e9d0 g     F .text	00000140 alt_alarm_start
080008a8 g     F .text	00000030 exitCommandMode
08000840 g     F .text	00000034 name
08009c54 g     F .text	00000060 .hidden __muldi3
0800574c g     F .text	000001b8 __smakebuf_r
08000b3c g     F .text	00000098 strlen
0800f2bc g     F .text	00000158 open
0800bb1c g     F .text	000000e0 .hidden __gedf2
08011b10 g     O .rwdata	00000004 __wctomb
08007f84 g     F .text	00000018 __sprint_r
0800ed68 g     F .text	00000030 alt_icache_flush_all
08000540 g     F .text	00000090 writeDataToTx
0800e758 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08011b30 g     O .rwdata	00000004 alt_priority_mask
0800ede8 g     F .text	000000a0 alt_ic_irq_enable
08002bd0 g     F .text	00000024 __vfprintf_internal
08009bf8 g     F .text	0000005c _wctomb_r
0800c400 g     F .text	000008d0 .hidden __subdf3
0800689c g     F .text	000000b0 __lo0bits
08011b34 g     O .rwdata	00000008 alt_alarm_list
0800ec20 g     F .text	0000005c _do_ctors
08009af0 g     F .text	000000d8 wcrtomb
0800cf80 g     F .text	000000d0 close
0800d2d4 g     F .text	00000080 alt_load
08009898 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
08004c0c g     F .text	00000004 __sinit_lock_acquire
0800661c g     F .text	00000114 __multadd
080065f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	108dac04 	addi	r2,r2,14000
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	108dac04 	addi	r2,r2,14000
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6a6bf14 	ori	gp,gp,39676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	108d9514 	ori	r2,r2,13908

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cdec14 	ori	r3,r3,14256

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800d2d40 	call	800d2d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800d4780 	call	800d478 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:
#define MAX_RANDOM 100
#define TEST_ITERATIONS 10
#define ERROR -1

int main()
{
 80001f8:	defffe04 	addi	sp,sp,-8
 80001fc:	dfc00115 	stw	ra,4(sp)
 8000200:	df000015 	stw	fp,0(sp)
 8000204:	d839883a 	mov	fp,sp
//		}
//		i ++;
//	}
//	printf("ALL TESTS PASSED\n");

	printf("Starting Bluetooth Configuration\n");
 8000208:	01020074 	movhi	r4,2049
 800020c:	213ef204 	addi	r4,r4,-1080
 8000210:	8000aac0 	call	8000aac <puts>

	if(configureBluetoothDongle()){
 8000214:	80008d80 	call	80008d8 <configureBluetoothDongle>
 8000218:	10000426 	beq	r2,zero,800022c <main+0x34>
		printf("Configuration succeeded\n");
 800021c:	01020074 	movhi	r4,2049
 8000220:	213efb04 	addi	r4,r4,-1044
 8000224:	8000aac0 	call	8000aac <puts>
 8000228:	00000306 	br	8000238 <main+0x40>
	}else{
		printf("Configuration failed\n");
 800022c:	01020074 	movhi	r4,2049
 8000230:	213f0104 	addi	r4,r4,-1020
 8000234:	8000aac0 	call	8000aac <puts>
	}
	return 0;
 8000238:	0005883a 	mov	r2,zero
}
 800023c:	e037883a 	mov	sp,fp
 8000240:	dfc00117 	ldw	ra,4(sp)
 8000244:	df000017 	ldw	fp,0(sp)
 8000248:	dec00204 	addi	sp,sp,8
 800024c:	f800283a 	ret

08000250 <Init_RS232>:
 * to read or write to data via the RS232 port
 *
 * Refer to 6850 data sheet for details of registers
 */

void Init_RS232(void) {
 8000250:	defffe04 	addi	sp,sp,-8
 8000254:	dfc00115 	stw	ra,4(sp)
 8000258:	df000015 	stw	fp,0(sp)
 800025c:	d839883a 	mov	fp,sp
	 * Set up 6850 Control register to utilise a dive by 16 clock.
	 * set RTS low, use 8 bits of data, no parity, 1 stop bit,
	 * transmitter interrupt disabled
	 * program baud rate generator to use 115k baud
	 */
	printf("Initializing control register\n");
 8000260:	01020074 	movhi	r4,2049
 8000264:	213f0704 	addi	r4,r4,-996
 8000268:	8000aac0 	call	8000aac <puts>
	RS232_Control = 0b00000011;
 800026c:	00a10034 	movhi	r2,33792
 8000270:	10808804 	addi	r2,r2,544
 8000274:	00c000c4 	movi	r3,3
 8000278:	10c00005 	stb	r3,0(r2)
	RS232_Control = 0b10010101;
 800027c:	00a10034 	movhi	r2,33792
 8000280:	10808804 	addi	r2,r2,544
 8000284:	00ffe544 	movi	r3,-107
 8000288:	10c00005 	stb	r3,0(r2)
	RS232_Baud 	  = 0b00000001; // program for 115k baud
 800028c:	00a10034 	movhi	r2,33792
 8000290:	10808904 	addi	r2,r2,548
 8000294:	00c00044 	movi	r3,1
 8000298:	10c00005 	stb	r3,0(r2)
}
 800029c:	e037883a 	mov	sp,fp
 80002a0:	dfc00117 	ldw	ra,4(sp)
 80002a4:	df000017 	ldw	fp,0(sp)
 80002a8:	dec00204 	addi	sp,sp,8
 80002ac:	f800283a 	ret

080002b0 <putcharBluetooth>:

int putcharBluetooth(int c) {
 80002b0:	defffd04 	addi	sp,sp,-12
 80002b4:	df000215 	stw	fp,8(sp)
 80002b8:	df000204 	addi	fp,sp,8
 80002bc:	e13fff15 	stw	r4,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 80002c0:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 80002c4:	00000606 	br	80002e0 <putcharBluetooth+0x30>
		read_status_bit = Bluetooth_Status & 0b10;
 80002c8:	00a10034 	movhi	r2,33792
 80002cc:	10808804 	addi	r2,r2,544
 80002d0:	10800003 	ldbu	r2,0(r2)
 80002d4:	10803fcc 	andi	r2,r2,255
 80002d8:	1080008c 	andi	r2,r2,2
 80002dc:	e0bffe15 	stw	r2,-8(fp)

int putcharBluetooth(int c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80002e0:	e0bffe17 	ldw	r2,-8(fp)
 80002e4:	103ff826 	beq	r2,zero,80002c8 <__alt_data_end+0xfc0002c8>
		read_status_bit = Bluetooth_Status & 0b10;
	}
	Bluetooth_TxData = c;
 80002e8:	00a10034 	movhi	r2,33792
 80002ec:	10808884 	addi	r2,r2,546
 80002f0:	e0ffff17 	ldw	r3,-4(fp)
 80002f4:	10c00005 	stb	r3,0(r2)
	//printf("set char %c", c);
	return c;
 80002f8:	e0bfff17 	ldw	r2,-4(fp)
}
 80002fc:	e037883a 	mov	sp,fp
 8000300:	df000017 	ldw	fp,0(sp)
 8000304:	dec00104 	addi	sp,sp,4
 8000308:	f800283a 	ret

0800030c <putcharRS232>:

int putcharRS232(int c) {
 800030c:	defffd04 	addi	sp,sp,-12
 8000310:	df000215 	stw	fp,8(sp)
 8000314:	df000204 	addi	fp,sp,8
 8000318:	e13fff15 	stw	r4,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 800031c:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000320:	00000606 	br	800033c <putcharRS232+0x30>
		read_status_bit = RS232_Status & 0b10;
 8000324:	00a10034 	movhi	r2,33792
 8000328:	10808804 	addi	r2,r2,544
 800032c:	10800003 	ldbu	r2,0(r2)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	1080008c 	andi	r2,r2,2
 8000338:	e0bffe15 	stw	r2,-8(fp)

int putcharRS232(int c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 800033c:	e0bffe17 	ldw	r2,-8(fp)
 8000340:	103ff826 	beq	r2,zero,8000324 <__alt_data_end+0xfc000324>
		read_status_bit = RS232_Status & 0b10;
	}
	RS232_TxData = c;
 8000344:	00a10034 	movhi	r2,33792
 8000348:	10808884 	addi	r2,r2,546
 800034c:	e0ffff17 	ldw	r3,-4(fp)
 8000350:	10c00005 	stb	r3,0(r2)
	return c;
 8000354:	e0bfff17 	ldw	r2,-4(fp)
}
 8000358:	e037883a 	mov	sp,fp
 800035c:	df000017 	ldw	fp,0(sp)
 8000360:	dec00104 	addi	sp,sp,4
 8000364:	f800283a 	ret

08000368 <getcharRS232>:

int getcharRS232(void) {
 8000368:	defffd04 	addi	sp,sp,-12
 800036c:	df000215 	stw	fp,8(sp)
 8000370:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8000374:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000378:	00000606 	br	8000394 <getcharRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 800037c:	00a10034 	movhi	r2,33792
 8000380:	10808804 	addi	r2,r2,544
 8000384:	10800003 	ldbu	r2,0(r2)
 8000388:	10803fcc 	andi	r2,r2,255
 800038c:	1080004c 	andi	r2,r2,1
 8000390:	e0bffe15 	stw	r2,-8(fp)

int getcharRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000394:	e0bffe17 	ldw	r2,-8(fp)
 8000398:	103ff826 	beq	r2,zero,800037c <__alt_data_end+0xfc00037c>
		read_status_bit = RS232_Status & 0b01;
	}
	int character = RS232_RxData;
 800039c:	00a10034 	movhi	r2,33792
 80003a0:	10808884 	addi	r2,r2,546
 80003a4:	10800003 	ldbu	r2,0(r2)
 80003a8:	10803fcc 	andi	r2,r2,255
 80003ac:	e0bfff15 	stw	r2,-4(fp)
	return character;
 80003b0:	e0bfff17 	ldw	r2,-4(fp)
}
 80003b4:	e037883a 	mov	sp,fp
 80003b8:	df000017 	ldw	fp,0(sp)
 80003bc:	dec00104 	addi	sp,sp,4
 80003c0:	f800283a 	ret

080003c4 <getcharBluetooth>:

char getcharBluetooth(void) {
 80003c4:	defffd04 	addi	sp,sp,-12
 80003c8:	df000215 	stw	fp,8(sp)
 80003cc:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 80003d0:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 80003d4:	00000606 	br	80003f0 <getcharBluetooth+0x2c>
		read_status_bit = Bluetooth_Status & 0b01;
 80003d8:	00a10034 	movhi	r2,33792
 80003dc:	10808804 	addi	r2,r2,544
 80003e0:	10800003 	ldbu	r2,0(r2)
 80003e4:	10803fcc 	andi	r2,r2,255
 80003e8:	1080004c 	andi	r2,r2,1
 80003ec:	e0bffe15 	stw	r2,-8(fp)

char getcharBluetooth(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80003f0:	e0bffe17 	ldw	r2,-8(fp)
 80003f4:	103ff826 	beq	r2,zero,80003d8 <__alt_data_end+0xfc0003d8>
		read_status_bit = Bluetooth_Status & 0b01;
	}
	char character = Bluetooth_RxData;
 80003f8:	00a10034 	movhi	r2,33792
 80003fc:	10808884 	addi	r2,r2,546
 8000400:	10800003 	ldbu	r2,0(r2)
 8000404:	e0bfff05 	stb	r2,-4(fp)
	//printf("char %c", character);
	return character;
 8000408:	e0bfff03 	ldbu	r2,-4(fp)
}
 800040c:	e037883a 	mov	sp,fp
 8000410:	df000017 	ldw	fp,0(sp)
 8000414:	dec00104 	addi	sp,sp,4
 8000418:	f800283a 	ret

0800041c <RS232TestForReceivedData>:
/**
 * The following function polls the 6850 to determine if any character
 * has been received. It doesn't wait for one, or read it, it simple tests
 * to see if one is available to read
 */
int RS232TestForReceivedData(void) {
 800041c:	deffff04 	addi	sp,sp,-4
 8000420:	df000015 	stw	fp,0(sp)
 8000424:	d839883a 	mov	fp,sp
	return RS232_RxData & 0b1;
 8000428:	00a10034 	movhi	r2,33792
 800042c:	10808884 	addi	r2,r2,546
 8000430:	10800003 	ldbu	r2,0(r2)
 8000434:	10803fcc 	andi	r2,r2,255
 8000438:	1080004c 	andi	r2,r2,1
}
 800043c:	e037883a 	mov	sp,fp
 8000440:	df000017 	ldw	fp,0(sp)
 8000444:	dec00104 	addi	sp,sp,4
 8000448:	f800283a 	ret

0800044c <test>:


int test() {
 800044c:	defffc04 	addi	sp,sp,-16
 8000450:	dfc00315 	stw	ra,12(sp)
 8000454:	df000215 	stw	fp,8(sp)
 8000458:	df000204 	addi	fp,sp,8
	Init_RS232();
 800045c:	80002500 	call	8000250 <Init_RS232>
	int data = rand() % MAX_RANDOM;
 8000460:	8000ad80 	call	8000ad8 <rand>
 8000464:	00c01904 	movi	r3,100
 8000468:	10c7283a 	div	r3,r2,r3
 800046c:	18c01924 	muli	r3,r3,100
 8000470:	10c5c83a 	sub	r2,r2,r3
 8000474:	e0bffe15 	stw	r2,-8(fp)
	printf("Testing with %i\n", data);
 8000478:	01020074 	movhi	r4,2049
 800047c:	213f0f04 	addi	r4,r4,-964
 8000480:	e17ffe17 	ldw	r5,-8(fp)
 8000484:	80009980 	call	8000998 <printf>
	putcharRS232(data);
 8000488:	e13ffe17 	ldw	r4,-8(fp)
 800048c:	800030c0 	call	800030c <putcharRS232>
//	int i=0;
//	while(i<1000){
//		i++;
//	}
	//wait();
	int retrievedData = getcharRS232();			// Garbage number first
 8000490:	80003680 	call	8000368 <getcharRS232>
 8000494:	e0bfff15 	stw	r2,-4(fp)
	//retrievedData = getcharRS232();
	if (data == retrievedData) {
 8000498:	e0fffe17 	ldw	r3,-8(fp)
 800049c:	e0bfff17 	ldw	r2,-4(fp)
 80004a0:	1880051e 	bne	r3,r2,80004b8 <test+0x6c>
		printf("Test passed \n");
 80004a4:	01020074 	movhi	r4,2049
 80004a8:	213f1404 	addi	r4,r4,-944
 80004ac:	8000aac0 	call	8000aac <puts>
		return 0;
 80004b0:	0005883a 	mov	r2,zero
 80004b4:	00000606 	br	80004d0 <test+0x84>
	} else {
		printf("Something went wrong, expected: %i actual: %i \n", data, retrievedData);
 80004b8:	01020074 	movhi	r4,2049
 80004bc:	213f1804 	addi	r4,r4,-928
 80004c0:	e17ffe17 	ldw	r5,-8(fp)
 80004c4:	e1bfff17 	ldw	r6,-4(fp)
 80004c8:	80009980 	call	8000998 <printf>
		return -1;
 80004cc:	00bfffc4 	movi	r2,-1
	}
}
 80004d0:	e037883a 	mov	sp,fp
 80004d4:	dfc00117 	ldw	ra,4(sp)
 80004d8:	df000017 	ldw	fp,0(sp)
 80004dc:	dec00204 	addi	sp,sp,8
 80004e0:	f800283a 	ret

080004e4 <wait>:

void wait(){
 80004e4:	defffd04 	addi	sp,sp,-12
 80004e8:	df000215 	stw	fp,8(sp)
 80004ec:	df000204 	addi	fp,sp,8
	int i=0;
 80004f0:	e03ffe15 	stw	zero,-8(fp)
	while(i<1000){
 80004f4:	00000b06 	br	8000524 <wait+0x40>
		i++;
 80004f8:	e0bffe17 	ldw	r2,-8(fp)
 80004fc:	10800044 	addi	r2,r2,1
 8000500:	e0bffe15 	stw	r2,-8(fp)

		int j=0;
 8000504:	e03fff15 	stw	zero,-4(fp)
		while(j<1000){
 8000508:	00000306 	br	8000518 <wait+0x34>
			j++;
 800050c:	e0bfff17 	ldw	r2,-4(fp)
 8000510:	10800044 	addi	r2,r2,1
 8000514:	e0bfff15 	stw	r2,-4(fp)
	int i=0;
	while(i<1000){
		i++;

		int j=0;
		while(j<1000){
 8000518:	e0bfff17 	ldw	r2,-4(fp)
 800051c:	1080fa10 	cmplti	r2,r2,1000
 8000520:	103ffa1e 	bne	r2,zero,800050c <__alt_data_end+0xfc00050c>
	}
}

void wait(){
	int i=0;
	while(i<1000){
 8000524:	e0bffe17 	ldw	r2,-8(fp)
 8000528:	1080fa10 	cmplti	r2,r2,1000
 800052c:	103ff21e 	bne	r2,zero,80004f8 <__alt_data_end+0xfc0004f8>
		int j=0;
		while(j<1000){
			j++;
		}
	}
}
 8000530:	e037883a 	mov	sp,fp
 8000534:	df000017 	ldw	fp,0(sp)
 8000538:	dec00104 	addi	sp,sp,4
 800053c:	f800283a 	ret

08000540 <writeDataToTx>:

void writeDataToTx(char * data){
 8000540:	defffc04 	addi	sp,sp,-16
 8000544:	dfc00315 	stw	ra,12(sp)
 8000548:	df000215 	stw	fp,8(sp)
 800054c:	df000204 	addi	fp,sp,8
 8000550:	e13fff15 	stw	r4,-4(fp)
	int i;
	printf("Sending %s\n", data);
 8000554:	01020074 	movhi	r4,2049
 8000558:	213f2404 	addi	r4,r4,-880
 800055c:	e17fff17 	ldw	r5,-4(fp)
 8000560:	80009980 	call	8000998 <printf>
	for(i=0; data[i]!=NULL; i++){
 8000564:	e03ffe15 	stw	zero,-8(fp)
 8000568:	00000c06 	br	800059c <writeDataToTx+0x5c>
		// IORD_8DIRECT(Bluetooth_TxData, data[i]);
		// *Bluetooth_TxData = data[i];
		putcharBluetooth(data[i]);
 800056c:	e0bffe17 	ldw	r2,-8(fp)
 8000570:	e0ffff17 	ldw	r3,-4(fp)
 8000574:	1885883a 	add	r2,r3,r2
 8000578:	10800003 	ldbu	r2,0(r2)
 800057c:	10803fcc 	andi	r2,r2,255
 8000580:	1080201c 	xori	r2,r2,128
 8000584:	10bfe004 	addi	r2,r2,-128
 8000588:	1009883a 	mov	r4,r2
 800058c:	80002b00 	call	80002b0 <putcharBluetooth>
}

void writeDataToTx(char * data){
	int i;
	printf("Sending %s\n", data);
	for(i=0; data[i]!=NULL; i++){
 8000590:	e0bffe17 	ldw	r2,-8(fp)
 8000594:	10800044 	addi	r2,r2,1
 8000598:	e0bffe15 	stw	r2,-8(fp)
 800059c:	e0bffe17 	ldw	r2,-8(fp)
 80005a0:	e0ffff17 	ldw	r3,-4(fp)
 80005a4:	1885883a 	add	r2,r3,r2
 80005a8:	10800003 	ldbu	r2,0(r2)
 80005ac:	10803fcc 	andi	r2,r2,255
 80005b0:	1080201c 	xori	r2,r2,128
 80005b4:	10bfe004 	addi	r2,r2,-128
 80005b8:	103fec1e 	bne	r2,zero,800056c <__alt_data_end+0xfc00056c>
		// IORD_8DIRECT(Bluetooth_TxData, data[i]);
		// *Bluetooth_TxData = data[i];
		putcharBluetooth(data[i]);
	}
}
 80005bc:	e037883a 	mov	sp,fp
 80005c0:	dfc00117 	ldw	ra,4(sp)
 80005c4:	df000017 	ldw	fp,0(sp)
 80005c8:	dec00204 	addi	sp,sp,8
 80005cc:	f800283a 	ret

080005d0 <readDataFromTx>:

void readDataFromTx(){
 80005d0:	defff904 	addi	sp,sp,-28
 80005d4:	dfc00615 	stw	ra,24(sp)
 80005d8:	df000515 	stw	fp,20(sp)
 80005dc:	dc000415 	stw	r16,16(sp)
 80005e0:	df000504 	addi	fp,sp,20
 80005e4:	d815883a 	mov	r10,sp
 80005e8:	5021883a 	mov	r16,r10
	int bufferSize = 365;
 80005ec:	02805b44 	movi	r10,365
 80005f0:	e2bffc15 	stw	r10,-16(fp)
	char buffer[bufferSize];
 80005f4:	e2bffc17 	ldw	r10,-16(fp)
 80005f8:	52ffffc4 	addi	r11,r10,-1
 80005fc:	e2fffd15 	stw	r11,-12(fp)
 8000600:	5017883a 	mov	r11,r10
 8000604:	5811883a 	mov	r8,r11
 8000608:	0013883a 	mov	r9,zero
 800060c:	4016d77a 	srli	r11,r8,29
 8000610:	480a90fa 	slli	r5,r9,3
 8000614:	594ab03a 	or	r5,r11,r5
 8000618:	400890fa 	slli	r4,r8,3
 800061c:	5009883a 	mov	r4,r10
 8000620:	200d883a 	mov	r6,r4
 8000624:	000f883a 	mov	r7,zero
 8000628:	3008d77a 	srli	r4,r6,29
 800062c:	380690fa 	slli	r3,r7,3
 8000630:	20c6b03a 	or	r3,r4,r3
 8000634:	300490fa 	slli	r2,r6,3
 8000638:	5005883a 	mov	r2,r10
 800063c:	108000c4 	addi	r2,r2,3
 8000640:	1004d0ba 	srli	r2,r2,2
 8000644:	1085883a 	add	r2,r2,r2
 8000648:	1085883a 	add	r2,r2,r2
 800064c:	d8b7c83a 	sub	sp,sp,r2
 8000650:	d805883a 	mov	r2,sp
 8000654:	1005883a 	mov	r2,r2
 8000658:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for(i=0; i<bufferSize-1; i++){
 800065c:	e03ffb15 	stw	zero,-20(fp)
 8000660:	00001306 	br	80006b0 <readDataFromTx+0xe0>
		buffer[i] = getcharBluetooth();
 8000664:	80003c40 	call	80003c4 <getcharBluetooth>
 8000668:	1009883a 	mov	r4,r2
 800066c:	e0fffe17 	ldw	r3,-8(fp)
 8000670:	e0bffb17 	ldw	r2,-20(fp)
 8000674:	1885883a 	add	r2,r3,r2
 8000678:	11000005 	stb	r4,0(r2)
		if(buffer[i] == '\n'){
 800067c:	e0fffe17 	ldw	r3,-8(fp)
 8000680:	e0bffb17 	ldw	r2,-20(fp)
 8000684:	1885883a 	add	r2,r3,r2
 8000688:	10800003 	ldbu	r2,0(r2)
 800068c:	10803fcc 	andi	r2,r2,255
 8000690:	1080201c 	xori	r2,r2,128
 8000694:	10bfe004 	addi	r2,r2,-128
 8000698:	10800298 	cmpnei	r2,r2,10
 800069c:	1000011e 	bne	r2,zero,80006a4 <readDataFromTx+0xd4>
			break;
 80006a0:	00000706 	br	80006c0 <readDataFromTx+0xf0>
void readDataFromTx(){
	int bufferSize = 365;
	char buffer[bufferSize];
	int i;

	for(i=0; i<bufferSize-1; i++){
 80006a4:	e0bffb17 	ldw	r2,-20(fp)
 80006a8:	10800044 	addi	r2,r2,1
 80006ac:	e0bffb15 	stw	r2,-20(fp)
 80006b0:	e0bffc17 	ldw	r2,-16(fp)
 80006b4:	10bfffc4 	addi	r2,r2,-1
 80006b8:	e0fffb17 	ldw	r3,-20(fp)
 80006bc:	18bfe916 	blt	r3,r2,8000664 <__alt_data_end+0xfc000664>
		buffer[i] = getcharBluetooth();
		if(buffer[i] == '\n'){
			break;
		}
	}
	buffer[i] = NULL;
 80006c0:	e0fffe17 	ldw	r3,-8(fp)
 80006c4:	e0bffb17 	ldw	r2,-20(fp)
 80006c8:	1885883a 	add	r2,r3,r2
 80006cc:	10000005 	stb	zero,0(r2)

	i=0;
 80006d0:	e03ffb15 	stw	zero,-20(fp)
	while(buffer[i]!=NULL){
 80006d4:	00000c06 	br	8000708 <readDataFromTx+0x138>
		printf("%c", buffer[i]);
 80006d8:	e0fffe17 	ldw	r3,-8(fp)
 80006dc:	e0bffb17 	ldw	r2,-20(fp)
 80006e0:	1885883a 	add	r2,r3,r2
 80006e4:	10800003 	ldbu	r2,0(r2)
 80006e8:	10803fcc 	andi	r2,r2,255
 80006ec:	1080201c 	xori	r2,r2,128
 80006f0:	10bfe004 	addi	r2,r2,-128
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	80009dc0 	call	80009dc <putchar>
		i++;
 80006fc:	e0bffb17 	ldw	r2,-20(fp)
 8000700:	10800044 	addi	r2,r2,1
 8000704:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	buffer[i] = NULL;

	i=0;
	while(buffer[i]!=NULL){
 8000708:	e0fffe17 	ldw	r3,-8(fp)
 800070c:	e0bffb17 	ldw	r2,-20(fp)
 8000710:	1885883a 	add	r2,r3,r2
 8000714:	10800003 	ldbu	r2,0(r2)
 8000718:	10803fcc 	andi	r2,r2,255
 800071c:	1080201c 	xori	r2,r2,128
 8000720:	10bfe004 	addi	r2,r2,-128
 8000724:	103fec1e 	bne	r2,zero,80006d8 <__alt_data_end+0xfc0006d8>
		printf("%c", buffer[i]);
		i++;
	}
	printf("\n");
 8000728:	01000284 	movi	r4,10
 800072c:	80009dc0 	call	80009dc <putchar>
 8000730:	8037883a 	mov	sp,r16
}
 8000734:	e6ffff04 	addi	sp,fp,-4
 8000738:	dfc00217 	ldw	ra,8(sp)
 800073c:	df000117 	ldw	fp,4(sp)
 8000740:	dc000017 	ldw	r16,0(sp)
 8000744:	dec00304 	addi	sp,sp,12
 8000748:	f800283a 	ret

0800074c <initBluetooth>:

void initBluetooth(){
 800074c:	defffe04 	addi	sp,sp,-8
 8000750:	dfc00115 	stw	ra,4(sp)
 8000754:	df000015 	stw	fp,0(sp)
 8000758:	d839883a 	mov	fp,sp
	printf("Initializing bluetooth control register\n");
 800075c:	01020074 	movhi	r4,2049
 8000760:	213f2704 	addi	r4,r4,-868
 8000764:	8000aac0 	call	8000aac <puts>
	Bluetooth_Control = 0b00000011;
 8000768:	00a10034 	movhi	r2,33792
 800076c:	10808804 	addi	r2,r2,544
 8000770:	00c000c4 	movi	r3,3
 8000774:	10c00005 	stb	r3,0(r2)
	Bluetooth_Control = 0b10010101;
 8000778:	00a10034 	movhi	r2,33792
 800077c:	10808804 	addi	r2,r2,544
 8000780:	00ffe544 	movi	r3,-107
 8000784:	10c00005 	stb	r3,0(r2)
	Bluetooth_Baud = 0b00000001;
 8000788:	00a10034 	movhi	r2,33792
 800078c:	10808904 	addi	r2,r2,548
 8000790:	00c00044 	movi	r3,1
 8000794:	10c00005 	stb	r3,0(r2)
}
 8000798:	e037883a 	mov	sp,fp
 800079c:	dfc00117 	ldw	ra,4(sp)
 80007a0:	df000017 	ldw	fp,0(sp)
 80007a4:	dec00204 	addi	sp,sp,8
 80007a8:	f800283a 	ret

080007ac <enterCommandMode>:

void enterCommandMode(){
 80007ac:	defffe04 	addi	sp,sp,-8
 80007b0:	dfc00115 	stw	ra,4(sp)
 80007b4:	df000015 	stw	fp,0(sp)
 80007b8:	d839883a 	mov	fp,sp
	writeDataToTx("$$$");
 80007bc:	01020074 	movhi	r4,2049
 80007c0:	213f3104 	addi	r4,r4,-828
 80007c4:	80005400 	call	8000540 <writeDataToTx>
	getcharBluetooth(); //pull garbage value
 80007c8:	80003c40 	call	80003c4 <getcharBluetooth>
}
 80007cc:	e037883a 	mov	sp,fp
 80007d0:	dfc00117 	ldw	ra,4(sp)
 80007d4:	df000017 	ldw	fp,0(sp)
 80007d8:	dec00204 	addi	sp,sp,8
 80007dc:	f800283a 	ret

080007e0 <reset>:

void reset(){
 80007e0:	defffe04 	addi	sp,sp,-8
 80007e4:	dfc00115 	stw	ra,4(sp)
 80007e8:	df000015 	stw	fp,0(sp)
 80007ec:	d839883a 	mov	fp,sp
	writeDataToTx("SF,1\r\n");
 80007f0:	01020074 	movhi	r4,2049
 80007f4:	213f3204 	addi	r4,r4,-824
 80007f8:	80005400 	call	8000540 <writeDataToTx>
}
 80007fc:	e037883a 	mov	sp,fp
 8000800:	dfc00117 	ldw	ra,4(sp)
 8000804:	df000017 	ldw	fp,0(sp)
 8000808:	dec00204 	addi	sp,sp,8
 800080c:	f800283a 	ret

08000810 <setAuthenticationMode>:

void setAuthenticationMode(){
 8000810:	defffe04 	addi	sp,sp,-8
 8000814:	dfc00115 	stw	ra,4(sp)
 8000818:	df000015 	stw	fp,0(sp)
 800081c:	d839883a 	mov	fp,sp
	writeDataToTx("SA,4\r\n");
 8000820:	01020074 	movhi	r4,2049
 8000824:	213f3404 	addi	r4,r4,-816
 8000828:	80005400 	call	8000540 <writeDataToTx>
}
 800082c:	e037883a 	mov	sp,fp
 8000830:	dfc00117 	ldw	ra,4(sp)
 8000834:	df000017 	ldw	fp,0(sp)
 8000838:	dec00204 	addi	sp,sp,8
 800083c:	f800283a 	ret

08000840 <name>:

void name(char * newName){
 8000840:	defffd04 	addi	sp,sp,-12
 8000844:	dfc00215 	stw	ra,8(sp)
 8000848:	df000115 	stw	fp,4(sp)
 800084c:	df000104 	addi	fp,sp,4
 8000850:	e13fff15 	stw	r4,-4(fp)
	// Bluetooth_TxData = "SN," + newName + "\r\n";
	writeDataToTx("SN,group14\r\n");
 8000854:	01020074 	movhi	r4,2049
 8000858:	213f3604 	addi	r4,r4,-808
 800085c:	80005400 	call	8000540 <writeDataToTx>
}
 8000860:	e037883a 	mov	sp,fp
 8000864:	dfc00117 	ldw	ra,4(sp)
 8000868:	df000017 	ldw	fp,0(sp)
 800086c:	dec00204 	addi	sp,sp,8
 8000870:	f800283a 	ret

08000874 <setPassword>:

void setPassword(char * newPassword){
 8000874:	defffd04 	addi	sp,sp,-12
 8000878:	dfc00215 	stw	ra,8(sp)
 800087c:	df000115 	stw	fp,4(sp)
 8000880:	df000104 	addi	fp,sp,4
 8000884:	e13fff15 	stw	r4,-4(fp)
	writeDataToTx("SP,1414\r\n");
 8000888:	01020074 	movhi	r4,2049
 800088c:	213f3a04 	addi	r4,r4,-792
 8000890:	80005400 	call	8000540 <writeDataToTx>
}
 8000894:	e037883a 	mov	sp,fp
 8000898:	dfc00117 	ldw	ra,4(sp)
 800089c:	df000017 	ldw	fp,0(sp)
 80008a0:	dec00204 	addi	sp,sp,8
 80008a4:	f800283a 	ret

080008a8 <exitCommandMode>:

void exitCommandMode(){
 80008a8:	defffe04 	addi	sp,sp,-8
 80008ac:	dfc00115 	stw	ra,4(sp)
 80008b0:	df000015 	stw	fp,0(sp)
 80008b4:	d839883a 	mov	fp,sp
	writeDataToTx("---\r\n");
 80008b8:	01020074 	movhi	r4,2049
 80008bc:	213f3d04 	addi	r4,r4,-780
 80008c0:	80005400 	call	8000540 <writeDataToTx>
}
 80008c4:	e037883a 	mov	sp,fp
 80008c8:	dfc00117 	ldw	ra,4(sp)
 80008cc:	df000017 	ldw	fp,0(sp)
 80008d0:	dec00204 	addi	sp,sp,8
 80008d4:	f800283a 	ret

080008d8 <configureBluetoothDongle>:

int configureBluetoothDongle(){
 80008d8:	defffe04 	addi	sp,sp,-8
 80008dc:	dfc00115 	stw	ra,4(sp)
 80008e0:	df000015 	stw	fp,0(sp)
 80008e4:	d839883a 	mov	fp,sp

	wait();wait();
 80008e8:	80004e40 	call	80004e4 <wait>
 80008ec:	80004e40 	call	80004e4 <wait>
	initBluetooth();
 80008f0:	800074c0 	call	800074c <initBluetooth>

	wait();wait();
 80008f4:	80004e40 	call	80004e4 <wait>
 80008f8:	80004e40 	call	80004e4 <wait>
	enterCommandMode();
 80008fc:	80007ac0 	call	80007ac <enterCommandMode>
	readDataFromTx();
 8000900:	80005d00 	call	80005d0 <readDataFromTx>

	wait();wait();
 8000904:	80004e40 	call	80004e4 <wait>
 8000908:	80004e40 	call	80004e4 <wait>
	name("group14");
 800090c:	01020074 	movhi	r4,2049
 8000910:	213f3f04 	addi	r4,r4,-772
 8000914:	80008400 	call	8000840 <name>
	readDataFromTx();
 8000918:	80005d00 	call	80005d0 <readDataFromTx>

	wait();wait();
 800091c:	80004e40 	call	80004e4 <wait>
 8000920:	80004e40 	call	80004e4 <wait>
	setPassword("1414");
 8000924:	01020074 	movhi	r4,2049
 8000928:	213f4104 	addi	r4,r4,-764
 800092c:	80008740 	call	8000874 <setPassword>
	readDataFromTx();
 8000930:	80005d00 	call	80005d0 <readDataFromTx>

	wait();wait();
 8000934:	80004e40 	call	80004e4 <wait>
 8000938:	80004e40 	call	80004e4 <wait>
	setAuthenticationMode();
 800093c:	80008100 	call	8000810 <setAuthenticationMode>
	readDataFromTx();
 8000940:	80005d00 	call	80005d0 <readDataFromTx>

	wait();wait();
 8000944:	80004e40 	call	80004e4 <wait>
 8000948:	80004e40 	call	80004e4 <wait>
	exitCommandMode();
 800094c:	80008a80 	call	80008a8 <exitCommandMode>
	readDataFromTx();
 8000950:	80005d00 	call	80005d0 <readDataFromTx>

	return 1;
 8000954:	00800044 	movi	r2,1
}
 8000958:	e037883a 	mov	sp,fp
 800095c:	dfc00117 	ldw	ra,4(sp)
 8000960:	df000017 	ldw	fp,0(sp)
 8000964:	dec00204 	addi	sp,sp,8
 8000968:	f800283a 	ret

0800096c <_printf_r>:
 800096c:	defffd04 	addi	sp,sp,-12
 8000970:	dfc00015 	stw	ra,0(sp)
 8000974:	d9800115 	stw	r6,4(sp)
 8000978:	d9c00215 	stw	r7,8(sp)
 800097c:	280d883a 	mov	r6,r5
 8000980:	21400217 	ldw	r5,8(r4)
 8000984:	d9c00104 	addi	r7,sp,4
 8000988:	8000bd40 	call	8000bd4 <___vfprintf_internal_r>
 800098c:	dfc00017 	ldw	ra,0(sp)
 8000990:	dec00304 	addi	sp,sp,12
 8000994:	f800283a 	ret

08000998 <printf>:
 8000998:	defffc04 	addi	sp,sp,-16
 800099c:	dfc00015 	stw	ra,0(sp)
 80009a0:	d9400115 	stw	r5,4(sp)
 80009a4:	d9800215 	stw	r6,8(sp)
 80009a8:	d9c00315 	stw	r7,12(sp)
 80009ac:	00820074 	movhi	r2,2049
 80009b0:	1086c004 	addi	r2,r2,6912
 80009b4:	10800017 	ldw	r2,0(r2)
 80009b8:	200b883a 	mov	r5,r4
 80009bc:	d9800104 	addi	r6,sp,4
 80009c0:	11000217 	ldw	r4,8(r2)
 80009c4:	8002bd00 	call	8002bd0 <__vfprintf_internal>
 80009c8:	dfc00017 	ldw	ra,0(sp)
 80009cc:	dec00404 	addi	sp,sp,16
 80009d0:	f800283a 	ret

080009d4 <_putchar_r>:
 80009d4:	21800217 	ldw	r6,8(r4)
 80009d8:	80074d81 	jmpi	80074d8 <_putc_r>

080009dc <putchar>:
 80009dc:	00820074 	movhi	r2,2049
 80009e0:	1086c004 	addi	r2,r2,6912
 80009e4:	200b883a 	mov	r5,r4
 80009e8:	11000017 	ldw	r4,0(r2)
 80009ec:	21800217 	ldw	r6,8(r4)
 80009f0:	80074d81 	jmpi	80074d8 <_putc_r>

080009f4 <_puts_r>:
 80009f4:	defff604 	addi	sp,sp,-40
 80009f8:	dc000715 	stw	r16,28(sp)
 80009fc:	2021883a 	mov	r16,r4
 8000a00:	2809883a 	mov	r4,r5
 8000a04:	dc400815 	stw	r17,32(sp)
 8000a08:	dfc00915 	stw	ra,36(sp)
 8000a0c:	2823883a 	mov	r17,r5
 8000a10:	8000b3c0 	call	8000b3c <strlen>
 8000a14:	00c20074 	movhi	r3,2049
 8000a18:	18c6c004 	addi	r3,r3,6912
 8000a1c:	18c00017 	ldw	r3,0(r3)
 8000a20:	11000044 	addi	r4,r2,1
 8000a24:	d8800115 	stw	r2,4(sp)
 8000a28:	18c00217 	ldw	r3,8(r3)
 8000a2c:	01420074 	movhi	r5,2049
 8000a30:	297f4304 	addi	r5,r5,-756
 8000a34:	1880030b 	ldhu	r2,12(r3)
 8000a38:	d9400215 	stw	r5,8(sp)
 8000a3c:	d9000615 	stw	r4,24(sp)
 8000a40:	01400044 	movi	r5,1
 8000a44:	01000084 	movi	r4,2
 8000a48:	d9000515 	stw	r4,20(sp)
 8000a4c:	dc400015 	stw	r17,0(sp)
 8000a50:	d9400315 	stw	r5,12(sp)
 8000a54:	dec00415 	stw	sp,16(sp)
 8000a58:	1108000c 	andi	r4,r2,8192
 8000a5c:	2000061e 	bne	r4,zero,8000a78 <_puts_r+0x84>
 8000a60:	19401917 	ldw	r5,100(r3)
 8000a64:	0137ffc4 	movi	r4,-8193
 8000a68:	10880014 	ori	r2,r2,8192
 8000a6c:	2908703a 	and	r4,r5,r4
 8000a70:	1880030d 	sth	r2,12(r3)
 8000a74:	19001915 	stw	r4,100(r3)
 8000a78:	81400217 	ldw	r5,8(r16)
 8000a7c:	8009883a 	mov	r4,r16
 8000a80:	d9800404 	addi	r6,sp,16
 8000a84:	80050580 	call	8005058 <__sfvwrite_r>
 8000a88:	1000061e 	bne	r2,zero,8000aa4 <_puts_r+0xb0>
 8000a8c:	00800284 	movi	r2,10
 8000a90:	dfc00917 	ldw	ra,36(sp)
 8000a94:	dc400817 	ldw	r17,32(sp)
 8000a98:	dc000717 	ldw	r16,28(sp)
 8000a9c:	dec00a04 	addi	sp,sp,40
 8000aa0:	f800283a 	ret
 8000aa4:	00bfffc4 	movi	r2,-1
 8000aa8:	003ff906 	br	8000a90 <__alt_data_end+0xfc000a90>

08000aac <puts>:
 8000aac:	00820074 	movhi	r2,2049
 8000ab0:	1086c004 	addi	r2,r2,6912
 8000ab4:	200b883a 	mov	r5,r4
 8000ab8:	11000017 	ldw	r4,0(r2)
 8000abc:	80009f41 	jmpi	80009f4 <_puts_r>

08000ac0 <srand>:
 8000ac0:	00820074 	movhi	r2,2049
 8000ac4:	1086c004 	addi	r2,r2,6912
 8000ac8:	10800017 	ldw	r2,0(r2)
 8000acc:	11002915 	stw	r4,164(r2)
 8000ad0:	10002a15 	stw	zero,168(r2)
 8000ad4:	f800283a 	ret

08000ad8 <rand>:
 8000ad8:	00820074 	movhi	r2,2049
 8000adc:	defffe04 	addi	sp,sp,-8
 8000ae0:	1086c004 	addi	r2,r2,6912
 8000ae4:	dc000015 	stw	r16,0(sp)
 8000ae8:	14000017 	ldw	r16,0(r2)
 8000aec:	dfc00115 	stw	ra,4(sp)
 8000af0:	01932574 	movhi	r6,19605
 8000af4:	81002917 	ldw	r4,164(r16)
 8000af8:	81402a17 	ldw	r5,168(r16)
 8000afc:	01d614b4 	movhi	r7,22610
 8000b00:	319fcb44 	addi	r6,r6,32557
 8000b04:	39fd0b44 	addi	r7,r7,-3027
 8000b08:	8009c540 	call	8009c54 <__muldi3>
 8000b0c:	11000044 	addi	r4,r2,1
 8000b10:	2085803a 	cmpltu	r2,r4,r2
 8000b14:	10c7883a 	add	r3,r2,r3
 8000b18:	00a00034 	movhi	r2,32768
 8000b1c:	10bfffc4 	addi	r2,r2,-1
 8000b20:	1884703a 	and	r2,r3,r2
 8000b24:	81002915 	stw	r4,164(r16)
 8000b28:	80c02a15 	stw	r3,168(r16)
 8000b2c:	dfc00117 	ldw	ra,4(sp)
 8000b30:	dc000017 	ldw	r16,0(sp)
 8000b34:	dec00204 	addi	sp,sp,8
 8000b38:	f800283a 	ret

08000b3c <strlen>:
 8000b3c:	208000cc 	andi	r2,r4,3
 8000b40:	10002026 	beq	r2,zero,8000bc4 <strlen+0x88>
 8000b44:	20800007 	ldb	r2,0(r4)
 8000b48:	10002026 	beq	r2,zero,8000bcc <strlen+0x90>
 8000b4c:	2005883a 	mov	r2,r4
 8000b50:	00000206 	br	8000b5c <strlen+0x20>
 8000b54:	10c00007 	ldb	r3,0(r2)
 8000b58:	18001826 	beq	r3,zero,8000bbc <strlen+0x80>
 8000b5c:	10800044 	addi	r2,r2,1
 8000b60:	10c000cc 	andi	r3,r2,3
 8000b64:	183ffb1e 	bne	r3,zero,8000b54 <__alt_data_end+0xfc000b54>
 8000b68:	10c00017 	ldw	r3,0(r2)
 8000b6c:	01ffbff4 	movhi	r7,65279
 8000b70:	39ffbfc4 	addi	r7,r7,-257
 8000b74:	00ca303a 	nor	r5,zero,r3
 8000b78:	01a02074 	movhi	r6,32897
 8000b7c:	19c7883a 	add	r3,r3,r7
 8000b80:	31a02004 	addi	r6,r6,-32640
 8000b84:	1946703a 	and	r3,r3,r5
 8000b88:	1986703a 	and	r3,r3,r6
 8000b8c:	1800091e 	bne	r3,zero,8000bb4 <strlen+0x78>
 8000b90:	10800104 	addi	r2,r2,4
 8000b94:	10c00017 	ldw	r3,0(r2)
 8000b98:	19cb883a 	add	r5,r3,r7
 8000b9c:	00c6303a 	nor	r3,zero,r3
 8000ba0:	28c6703a 	and	r3,r5,r3
 8000ba4:	1986703a 	and	r3,r3,r6
 8000ba8:	183ff926 	beq	r3,zero,8000b90 <__alt_data_end+0xfc000b90>
 8000bac:	00000106 	br	8000bb4 <strlen+0x78>
 8000bb0:	10800044 	addi	r2,r2,1
 8000bb4:	10c00007 	ldb	r3,0(r2)
 8000bb8:	183ffd1e 	bne	r3,zero,8000bb0 <__alt_data_end+0xfc000bb0>
 8000bbc:	1105c83a 	sub	r2,r2,r4
 8000bc0:	f800283a 	ret
 8000bc4:	2005883a 	mov	r2,r4
 8000bc8:	003fe706 	br	8000b68 <__alt_data_end+0xfc000b68>
 8000bcc:	0005883a 	mov	r2,zero
 8000bd0:	f800283a 	ret

08000bd4 <___vfprintf_internal_r>:
 8000bd4:	defeb604 	addi	sp,sp,-1320
 8000bd8:	dfc14915 	stw	ra,1316(sp)
 8000bdc:	ddc14715 	stw	r23,1308(sp)
 8000be0:	dd814615 	stw	r22,1304(sp)
 8000be4:	282f883a 	mov	r23,r5
 8000be8:	202d883a 	mov	r22,r4
 8000bec:	d9812a15 	stw	r6,1192(sp)
 8000bf0:	d9c12d15 	stw	r7,1204(sp)
 8000bf4:	df014815 	stw	fp,1312(sp)
 8000bf8:	dd414515 	stw	r21,1300(sp)
 8000bfc:	dd014415 	stw	r20,1296(sp)
 8000c00:	dcc14315 	stw	r19,1292(sp)
 8000c04:	dc814215 	stw	r18,1288(sp)
 8000c08:	dc414115 	stw	r17,1284(sp)
 8000c0c:	dc014015 	stw	r16,1280(sp)
 8000c10:	80057180 	call	8005718 <_localeconv_r>
 8000c14:	10800017 	ldw	r2,0(r2)
 8000c18:	1009883a 	mov	r4,r2
 8000c1c:	d8813515 	stw	r2,1236(sp)
 8000c20:	8000b3c0 	call	8000b3c <strlen>
 8000c24:	d8813815 	stw	r2,1248(sp)
 8000c28:	b0000226 	beq	r22,zero,8000c34 <___vfprintf_internal_r+0x60>
 8000c2c:	b0800e17 	ldw	r2,56(r22)
 8000c30:	10010426 	beq	r2,zero,8001044 <___vfprintf_internal_r+0x470>
 8000c34:	b8c0030b 	ldhu	r3,12(r23)
 8000c38:	1908000c 	andi	r4,r3,8192
 8000c3c:	1805883a 	mov	r2,r3
 8000c40:	2000071e 	bne	r4,zero,8000c60 <___vfprintf_internal_r+0x8c>
 8000c44:	b9001917 	ldw	r4,100(r23)
 8000c48:	18880014 	ori	r2,r3,8192
 8000c4c:	00f7ffc4 	movi	r3,-8193
 8000c50:	20c8703a 	and	r4,r4,r3
 8000c54:	b880030d 	sth	r2,12(r23)
 8000c58:	1007883a 	mov	r3,r2
 8000c5c:	b9001915 	stw	r4,100(r23)
 8000c60:	1100020c 	andi	r4,r2,8
 8000c64:	2000a726 	beq	r4,zero,8000f04 <___vfprintf_internal_r+0x330>
 8000c68:	b9000417 	ldw	r4,16(r23)
 8000c6c:	2000a526 	beq	r4,zero,8000f04 <___vfprintf_internal_r+0x330>
 8000c70:	1080068c 	andi	r2,r2,26
 8000c74:	01000284 	movi	r4,10
 8000c78:	1100ab26 	beq	r2,r4,8000f28 <___vfprintf_internal_r+0x354>
 8000c7c:	dac10e04 	addi	r11,sp,1080
 8000c80:	db010dc4 	addi	r12,sp,1079
 8000c84:	d8800404 	addi	r2,sp,16
 8000c88:	05020074 	movhi	r20,2049
 8000c8c:	dac12815 	stw	r11,1184(sp)
 8000c90:	5b17c83a 	sub	r11,r11,r12
 8000c94:	a53f5484 	addi	r20,r20,-686
 8000c98:	db012915 	stw	r12,1188(sp)
 8000c9c:	d8811e15 	stw	r2,1144(sp)
 8000ca0:	d8012015 	stw	zero,1152(sp)
 8000ca4:	d8011f15 	stw	zero,1148(sp)
 8000ca8:	d8013315 	stw	zero,1228(sp)
 8000cac:	d8013715 	stw	zero,1244(sp)
 8000cb0:	d8013915 	stw	zero,1252(sp)
 8000cb4:	d8013b15 	stw	zero,1260(sp)
 8000cb8:	d8013a15 	stw	zero,1256(sp)
 8000cbc:	d8012f15 	stw	zero,1212(sp)
 8000cc0:	1011883a 	mov	r8,r2
 8000cc4:	dac13c15 	stw	r11,1264(sp)
 8000cc8:	db012a17 	ldw	r12,1192(sp)
 8000ccc:	60800007 	ldb	r2,0(r12)
 8000cd0:	1000df26 	beq	r2,zero,8001050 <___vfprintf_internal_r+0x47c>
 8000cd4:	00c00944 	movi	r3,37
 8000cd8:	10c0dd26 	beq	r2,r3,8001050 <___vfprintf_internal_r+0x47c>
 8000cdc:	6021883a 	mov	r16,r12
 8000ce0:	00000106 	br	8000ce8 <___vfprintf_internal_r+0x114>
 8000ce4:	10c08426 	beq	r2,r3,8000ef8 <___vfprintf_internal_r+0x324>
 8000ce8:	84000044 	addi	r16,r16,1
 8000cec:	80800007 	ldb	r2,0(r16)
 8000cf0:	103ffc1e 	bne	r2,zero,8000ce4 <__alt_data_end+0xfc000ce4>
 8000cf4:	dac12a17 	ldw	r11,1192(sp)
 8000cf8:	82e3c83a 	sub	r17,r16,r11
 8000cfc:	88000f26 	beq	r17,zero,8000d3c <___vfprintf_internal_r+0x168>
 8000d00:	d8c12017 	ldw	r3,1152(sp)
 8000d04:	d8811f17 	ldw	r2,1148(sp)
 8000d08:	dac12a17 	ldw	r11,1192(sp)
 8000d0c:	1c47883a 	add	r3,r3,r17
 8000d10:	10800044 	addi	r2,r2,1
 8000d14:	d8c12015 	stw	r3,1152(sp)
 8000d18:	42c00015 	stw	r11,0(r8)
 8000d1c:	44400115 	stw	r17,4(r8)
 8000d20:	d8811f15 	stw	r2,1148(sp)
 8000d24:	00c001c4 	movi	r3,7
 8000d28:	1880b416 	blt	r3,r2,8000ffc <___vfprintf_internal_r+0x428>
 8000d2c:	42000204 	addi	r8,r8,8
 8000d30:	db012f17 	ldw	r12,1212(sp)
 8000d34:	6459883a 	add	r12,r12,r17
 8000d38:	db012f15 	stw	r12,1212(sp)
 8000d3c:	80800007 	ldb	r2,0(r16)
 8000d40:	1000b526 	beq	r2,zero,8001018 <___vfprintf_internal_r+0x444>
 8000d44:	80800044 	addi	r2,r16,1
 8000d48:	84000047 	ldb	r16,1(r16)
 8000d4c:	d8012785 	stb	zero,1182(sp)
 8000d50:	000d883a 	mov	r6,zero
 8000d54:	027fffc4 	movi	r9,-1
 8000d58:	d8012e15 	stw	zero,1208(sp)
 8000d5c:	0023883a 	mov	r17,zero
 8000d60:	01001604 	movi	r4,88
 8000d64:	01400244 	movi	r5,9
 8000d68:	02800a84 	movi	r10,42
 8000d6c:	01c01b04 	movi	r7,108
 8000d70:	10c00044 	addi	r3,r2,1
 8000d74:	80bff804 	addi	r2,r16,-32
 8000d78:	2082f236 	bltu	r4,r2,8001944 <___vfprintf_internal_r+0xd70>
 8000d7c:	100490ba 	slli	r2,r2,2
 8000d80:	02c20034 	movhi	r11,2048
 8000d84:	5ac36504 	addi	r11,r11,3476
 8000d88:	12c5883a 	add	r2,r2,r11
 8000d8c:	10800017 	ldw	r2,0(r2)
 8000d90:	1000683a 	jmp	r2
 8000d94:	0800178c 	andi	zero,at,94
 8000d98:	08001944 	addi	zero,at,101
 8000d9c:	08001944 	addi	zero,at,101
 8000da0:	080017ac 	andhi	zero,at,94
 8000da4:	08001944 	addi	zero,at,101
 8000da8:	08001944 	addi	zero,at,101
 8000dac:	08001944 	addi	zero,at,101
 8000db0:	08001944 	addi	zero,at,101
 8000db4:	08001944 	addi	zero,at,101
 8000db8:	08001944 	addi	zero,at,101
 8000dbc:	08001908 	cmpgei	zero,at,100
 8000dc0:	08001934 	orhi	zero,at,100
 8000dc4:	08001944 	addi	zero,at,101
 8000dc8:	08001058 	cmpnei	zero,at,65
 8000dcc:	08001068 	cmpgeui	zero,at,65
 8000dd0:	08001944 	addi	zero,at,101
 8000dd4:	080010a8 	cmpgeui	zero,at,66
 8000dd8:	0800159c 	xori	zero,at,86
 8000ddc:	0800159c 	xori	zero,at,86
 8000de0:	0800159c 	xori	zero,at,86
 8000de4:	0800159c 	xori	zero,at,86
 8000de8:	0800159c 	xori	zero,at,86
 8000dec:	0800159c 	xori	zero,at,86
 8000df0:	0800159c 	xori	zero,at,86
 8000df4:	0800159c 	xori	zero,at,86
 8000df8:	0800159c 	xori	zero,at,86
 8000dfc:	08001944 	addi	zero,at,101
 8000e00:	08001944 	addi	zero,at,101
 8000e04:	08001944 	addi	zero,at,101
 8000e08:	08001944 	addi	zero,at,101
 8000e0c:	08001944 	addi	zero,at,101
 8000e10:	08001944 	addi	zero,at,101
 8000e14:	08001944 	addi	zero,at,101
 8000e18:	08001944 	addi	zero,at,101
 8000e1c:	08001944 	addi	zero,at,101
 8000e20:	08001944 	addi	zero,at,101
 8000e24:	080015d0 	cmplti	zero,at,87
 8000e28:	080010b8 	rdprs	zero,at,66
 8000e2c:	08001944 	addi	zero,at,101
 8000e30:	080010b8 	rdprs	zero,at,66
 8000e34:	08001944 	addi	zero,at,101
 8000e38:	08001944 	addi	zero,at,101
 8000e3c:	08001944 	addi	zero,at,101
 8000e40:	08001944 	addi	zero,at,101
 8000e44:	0800115c 	xori	zero,at,69
 8000e48:	08001944 	addi	zero,at,101
 8000e4c:	08001944 	addi	zero,at,101
 8000e50:	0800116c 	andhi	zero,at,69
 8000e54:	08001944 	addi	zero,at,101
 8000e58:	08001944 	addi	zero,at,101
 8000e5c:	08001944 	addi	zero,at,101
 8000e60:	08001944 	addi	zero,at,101
 8000e64:	08001944 	addi	zero,at,101
 8000e68:	08001568 	cmpgeui	zero,at,85
 8000e6c:	08001944 	addi	zero,at,101
 8000e70:	08001944 	addi	zero,at,101
 8000e74:	08001618 	cmpnei	zero,at,88
 8000e78:	08001944 	addi	zero,at,101
 8000e7c:	08001944 	addi	zero,at,101
 8000e80:	08001944 	addi	zero,at,101
 8000e84:	08001944 	addi	zero,at,101
 8000e88:	08001944 	addi	zero,at,101
 8000e8c:	08001944 	addi	zero,at,101
 8000e90:	08001944 	addi	zero,at,101
 8000e94:	08001944 	addi	zero,at,101
 8000e98:	08001944 	addi	zero,at,101
 8000e9c:	08001944 	addi	zero,at,101
 8000ea0:	0800180c 	andi	zero,at,96
 8000ea4:	080017bc 	xorhi	zero,at,94
 8000ea8:	080010b8 	rdprs	zero,at,66
 8000eac:	080010b8 	rdprs	zero,at,66
 8000eb0:	080010b8 	rdprs	zero,at,66
 8000eb4:	080017fc 	xorhi	zero,at,95
 8000eb8:	080017bc 	xorhi	zero,at,94
 8000ebc:	08001944 	addi	zero,at,101
 8000ec0:	08001944 	addi	zero,at,101
 8000ec4:	08001704 	addi	zero,at,92
 8000ec8:	08001944 	addi	zero,at,101
 8000ecc:	08001718 	cmpnei	zero,at,92
 8000ed0:	0800174c 	andi	zero,at,93
 8000ed4:	0800184c 	andi	zero,at,97
 8000ed8:	08001674 	orhi	zero,at,89
 8000edc:	08001944 	addi	zero,at,101
 8000ee0:	08001894 	ori	zero,at,98
 8000ee4:	08001944 	addi	zero,at,101
 8000ee8:	08001684 	addi	zero,at,90
 8000eec:	08001944 	addi	zero,at,101
 8000ef0:	08001944 	addi	zero,at,101
 8000ef4:	080016c4 	addi	zero,at,91
 8000ef8:	db012a17 	ldw	r12,1192(sp)
 8000efc:	8323c83a 	sub	r17,r16,r12
 8000f00:	003f7e06 	br	8000cfc <__alt_data_end+0xfc000cfc>
 8000f04:	b009883a 	mov	r4,r22
 8000f08:	b80b883a 	mov	r5,r23
 8000f0c:	8002bf40 	call	8002bf4 <__swsetup_r>
 8000f10:	10002d1e 	bne	r2,zero,8000fc8 <___vfprintf_internal_r+0x3f4>
 8000f14:	b8c0030b 	ldhu	r3,12(r23)
 8000f18:	01000284 	movi	r4,10
 8000f1c:	1805883a 	mov	r2,r3
 8000f20:	1080068c 	andi	r2,r2,26
 8000f24:	113f551e 	bne	r2,r4,8000c7c <__alt_data_end+0xfc000c7c>
 8000f28:	b880038b 	ldhu	r2,14(r23)
 8000f2c:	113fffcc 	andi	r4,r2,65535
 8000f30:	2120001c 	xori	r4,r4,32768
 8000f34:	21200004 	addi	r4,r4,-32768
 8000f38:	203f5016 	blt	r4,zero,8000c7c <__alt_data_end+0xfc000c7c>
 8000f3c:	bac01917 	ldw	r11,100(r23)
 8000f40:	ba800717 	ldw	r10,28(r23)
 8000f44:	ba400917 	ldw	r9,36(r23)
 8000f48:	d9812a17 	ldw	r6,1192(sp)
 8000f4c:	d9c12d17 	ldw	r7,1204(sp)
 8000f50:	02010004 	movi	r8,1024
 8000f54:	18ffff4c 	andi	r3,r3,65533
 8000f58:	d881078d 	sth	r2,1054(sp)
 8000f5c:	b009883a 	mov	r4,r22
 8000f60:	d8800404 	addi	r2,sp,16
 8000f64:	d9410404 	addi	r5,sp,1040
 8000f68:	d8c1070d 	sth	r3,1052(sp)
 8000f6c:	dac11d15 	stw	r11,1140(sp)
 8000f70:	da810b15 	stw	r10,1068(sp)
 8000f74:	da410d15 	stw	r9,1076(sp)
 8000f78:	d8810415 	stw	r2,1040(sp)
 8000f7c:	d8810815 	stw	r2,1056(sp)
 8000f80:	da010615 	stw	r8,1048(sp)
 8000f84:	da010915 	stw	r8,1060(sp)
 8000f88:	d8010a15 	stw	zero,1064(sp)
 8000f8c:	8000bd40 	call	8000bd4 <___vfprintf_internal_r>
 8000f90:	1021883a 	mov	r16,r2
 8000f94:	10000416 	blt	r2,zero,8000fa8 <___vfprintf_internal_r+0x3d4>
 8000f98:	b009883a 	mov	r4,r22
 8000f9c:	d9410404 	addi	r5,sp,1040
 8000fa0:	800464c0 	call	800464c <_fflush_r>
 8000fa4:	1006ee1e 	bne	r2,zero,8002b60 <___vfprintf_internal_r+0x1f8c>
 8000fa8:	d881070b 	ldhu	r2,1052(sp)
 8000fac:	1080100c 	andi	r2,r2,64
 8000fb0:	10000326 	beq	r2,zero,8000fc0 <___vfprintf_internal_r+0x3ec>
 8000fb4:	b880030b 	ldhu	r2,12(r23)
 8000fb8:	10801014 	ori	r2,r2,64
 8000fbc:	b880030d 	sth	r2,12(r23)
 8000fc0:	8005883a 	mov	r2,r16
 8000fc4:	00000106 	br	8000fcc <___vfprintf_internal_r+0x3f8>
 8000fc8:	00bfffc4 	movi	r2,-1
 8000fcc:	dfc14917 	ldw	ra,1316(sp)
 8000fd0:	df014817 	ldw	fp,1312(sp)
 8000fd4:	ddc14717 	ldw	r23,1308(sp)
 8000fd8:	dd814617 	ldw	r22,1304(sp)
 8000fdc:	dd414517 	ldw	r21,1300(sp)
 8000fe0:	dd014417 	ldw	r20,1296(sp)
 8000fe4:	dcc14317 	ldw	r19,1292(sp)
 8000fe8:	dc814217 	ldw	r18,1288(sp)
 8000fec:	dc414117 	ldw	r17,1284(sp)
 8000ff0:	dc014017 	ldw	r16,1280(sp)
 8000ff4:	dec14a04 	addi	sp,sp,1320
 8000ff8:	f800283a 	ret
 8000ffc:	b009883a 	mov	r4,r22
 8001000:	b80b883a 	mov	r5,r23
 8001004:	d9811e04 	addi	r6,sp,1144
 8001008:	8007f840 	call	8007f84 <__sprint_r>
 800100c:	1000081e 	bne	r2,zero,8001030 <___vfprintf_internal_r+0x45c>
 8001010:	da000404 	addi	r8,sp,16
 8001014:	003f4606 	br	8000d30 <__alt_data_end+0xfc000d30>
 8001018:	d8812017 	ldw	r2,1152(sp)
 800101c:	10000426 	beq	r2,zero,8001030 <___vfprintf_internal_r+0x45c>
 8001020:	b009883a 	mov	r4,r22
 8001024:	b80b883a 	mov	r5,r23
 8001028:	d9811e04 	addi	r6,sp,1144
 800102c:	8007f840 	call	8007f84 <__sprint_r>
 8001030:	b880030b 	ldhu	r2,12(r23)
 8001034:	1080100c 	andi	r2,r2,64
 8001038:	103fe31e 	bne	r2,zero,8000fc8 <__alt_data_end+0xfc000fc8>
 800103c:	d8812f17 	ldw	r2,1212(sp)
 8001040:	003fe206 	br	8000fcc <__alt_data_end+0xfc000fcc>
 8001044:	b009883a 	mov	r4,r22
 8001048:	8004bf40 	call	8004bf4 <__sinit>
 800104c:	003ef906 	br	8000c34 <__alt_data_end+0xfc000c34>
 8001050:	dc012a17 	ldw	r16,1192(sp)
 8001054:	003f3906 	br	8000d3c <__alt_data_end+0xfc000d3c>
 8001058:	1805883a 	mov	r2,r3
 800105c:	8c400114 	ori	r17,r17,4
 8001060:	1c000007 	ldb	r16,0(r3)
 8001064:	003f4206 	br	8000d70 <__alt_data_end+0xfc000d70>
 8001068:	1c000007 	ldb	r16,0(r3)
 800106c:	18800044 	addi	r2,r3,1
 8001070:	8286b326 	beq	r16,r10,8002b40 <___vfprintf_internal_r+0x1f6c>
 8001074:	82fff404 	addi	r11,r16,-48
 8001078:	1007883a 	mov	r3,r2
 800107c:	0013883a 	mov	r9,zero
 8001080:	2aff3c36 	bltu	r5,r11,8000d74 <__alt_data_end+0xfc000d74>
 8001084:	1c000007 	ldb	r16,0(r3)
 8001088:	4a4002a4 	muli	r9,r9,10
 800108c:	18c00044 	addi	r3,r3,1
 8001090:	5a53883a 	add	r9,r11,r9
 8001094:	82fff404 	addi	r11,r16,-48
 8001098:	2afffa2e 	bgeu	r5,r11,8001084 <__alt_data_end+0xfc001084>
 800109c:	483f350e 	bge	r9,zero,8000d74 <__alt_data_end+0xfc000d74>
 80010a0:	027fffc4 	movi	r9,-1
 80010a4:	003f3306 	br	8000d74 <__alt_data_end+0xfc000d74>
 80010a8:	8c402014 	ori	r17,r17,128
 80010ac:	1805883a 	mov	r2,r3
 80010b0:	1c000007 	ldb	r16,0(r3)
 80010b4:	003f2e06 	br	8000d70 <__alt_data_end+0xfc000d70>
 80010b8:	db012d17 	ldw	r12,1204(sp)
 80010bc:	dac12d17 	ldw	r11,1204(sp)
 80010c0:	d8c12a15 	stw	r3,1192(sp)
 80010c4:	63000017 	ldw	r12,0(r12)
 80010c8:	5ac00117 	ldw	r11,4(r11)
 80010cc:	d9812785 	stb	r6,1182(sp)
 80010d0:	6009883a 	mov	r4,r12
 80010d4:	580b883a 	mov	r5,r11
 80010d8:	db013715 	stw	r12,1244(sp)
 80010dc:	da013f15 	stw	r8,1276(sp)
 80010e0:	da413e15 	stw	r9,1272(sp)
 80010e4:	dac13915 	stw	r11,1252(sp)
 80010e8:	8007be00 	call	8007be0 <__fpclassifyd>
 80010ec:	db012d17 	ldw	r12,1204(sp)
 80010f0:	04800044 	movi	r18,1
 80010f4:	da013f17 	ldw	r8,1276(sp)
 80010f8:	64c00204 	addi	r19,r12,8
 80010fc:	da413e17 	ldw	r9,1272(sp)
 8001100:	d9013717 	ldw	r4,1244(sp)
 8001104:	d9413917 	ldw	r5,1252(sp)
 8001108:	1484581e 	bne	r2,r18,800226c <___vfprintf_internal_r+0x1698>
 800110c:	000d883a 	mov	r6,zero
 8001110:	000f883a 	mov	r7,zero
 8001114:	800bbfc0 	call	800bbfc <__ledf2>
 8001118:	da013f17 	ldw	r8,1276(sp)
 800111c:	1005ef16 	blt	r2,zero,80028dc <___vfprintf_internal_r+0x1d08>
 8001120:	dd412783 	ldbu	r21,1182(sp)
 8001124:	008011c4 	movi	r2,71
 8001128:	14053b0e 	bge	r2,r16,8002618 <___vfprintf_internal_r+0x1a44>
 800112c:	00c20074 	movhi	r3,2049
 8001130:	18ff4504 	addi	r3,r3,-748
 8001134:	d8c13115 	stw	r3,1220(sp)
 8001138:	02c000c4 	movi	r11,3
 800113c:	00bfdfc4 	movi	r2,-129
 8001140:	dac12b15 	stw	r11,1196(sp)
 8001144:	88a2703a 	and	r17,r17,r2
 8001148:	dcc12d15 	stw	r19,1204(sp)
 800114c:	5825883a 	mov	r18,r11
 8001150:	d8013215 	stw	zero,1224(sp)
 8001154:	d8013415 	stw	zero,1232(sp)
 8001158:	00003206 	br	8001224 <___vfprintf_internal_r+0x650>
 800115c:	8c400214 	ori	r17,r17,8
 8001160:	1805883a 	mov	r2,r3
 8001164:	1c000007 	ldb	r16,0(r3)
 8001168:	003f0106 	br	8000d70 <__alt_data_end+0xfc000d70>
 800116c:	8c400414 	ori	r17,r17,16
 8001170:	d8c12a15 	stw	r3,1192(sp)
 8001174:	88c0080c 	andi	r3,r17,32
 8001178:	d8812d17 	ldw	r2,1204(sp)
 800117c:	18017726 	beq	r3,zero,800175c <___vfprintf_internal_r+0xb88>
 8001180:	db012d17 	ldw	r12,1204(sp)
 8001184:	14c00017 	ldw	r19,0(r2)
 8001188:	17000117 	ldw	fp,4(r2)
 800118c:	63000204 	addi	r12,r12,8
 8001190:	db012d15 	stw	r12,1204(sp)
 8001194:	0005883a 	mov	r2,zero
 8001198:	9f06b03a 	or	r3,r19,fp
 800119c:	d8012785 	stb	zero,1182(sp)
 80011a0:	da413215 	stw	r9,1224(sp)
 80011a4:	002b883a 	mov	r21,zero
 80011a8:	48000216 	blt	r9,zero,80011b4 <___vfprintf_internal_r+0x5e0>
 80011ac:	013fdfc4 	movi	r4,-129
 80011b0:	8922703a 	and	r17,r17,r4
 80011b4:	1801ed1e 	bne	r3,zero,800196c <___vfprintf_internal_r+0xd98>
 80011b8:	4802e026 	beq	r9,zero,8001d3c <___vfprintf_internal_r+0x1168>
 80011bc:	10803fcc 	andi	r2,r2,255
 80011c0:	00c00044 	movi	r3,1
 80011c4:	10c20f26 	beq	r2,r3,8001a04 <___vfprintf_internal_r+0xe30>
 80011c8:	00c00084 	movi	r3,2
 80011cc:	10c2fd26 	beq	r2,r3,8001dc4 <___vfprintf_internal_r+0x11f0>
 80011d0:	d8c10e04 	addi	r3,sp,1080
 80011d4:	9808d0fa 	srli	r4,r19,3
 80011d8:	e00a977a 	slli	r5,fp,29
 80011dc:	e038d0fa 	srli	fp,fp,3
 80011e0:	9cc001cc 	andi	r19,r19,7
 80011e4:	98800c04 	addi	r2,r19,48
 80011e8:	18ffffc4 	addi	r3,r3,-1
 80011ec:	2926b03a 	or	r19,r5,r4
 80011f0:	18800005 	stb	r2,0(r3)
 80011f4:	9f08b03a 	or	r4,r19,fp
 80011f8:	203ff61e 	bne	r4,zero,80011d4 <__alt_data_end+0xfc0011d4>
 80011fc:	8900004c 	andi	r4,r17,1
 8001200:	d8c13115 	stw	r3,1220(sp)
 8001204:	2003791e 	bne	r4,zero,8001fec <___vfprintf_internal_r+0x1418>
 8001208:	dac12817 	ldw	r11,1184(sp)
 800120c:	58e5c83a 	sub	r18,r11,r3
 8001210:	9005883a 	mov	r2,r18
 8001214:	9240010e 	bge	r18,r9,800121c <___vfprintf_internal_r+0x648>
 8001218:	4805883a 	mov	r2,r9
 800121c:	d8812b15 	stw	r2,1196(sp)
 8001220:	d8013415 	stw	zero,1232(sp)
 8001224:	a8803fcc 	andi	r2,r21,255
 8001228:	1080201c 	xori	r2,r2,128
 800122c:	10bfe004 	addi	r2,r2,-128
 8001230:	10000326 	beq	r2,zero,8001240 <___vfprintf_internal_r+0x66c>
 8001234:	db012b17 	ldw	r12,1196(sp)
 8001238:	63000044 	addi	r12,r12,1
 800123c:	db012b15 	stw	r12,1196(sp)
 8001240:	88c0008c 	andi	r3,r17,2
 8001244:	d8c12c15 	stw	r3,1200(sp)
 8001248:	18000326 	beq	r3,zero,8001258 <___vfprintf_internal_r+0x684>
 800124c:	dac12b17 	ldw	r11,1196(sp)
 8001250:	5ac00084 	addi	r11,r11,2
 8001254:	dac12b15 	stw	r11,1196(sp)
 8001258:	8b00210c 	andi	r12,r17,132
 800125c:	db013015 	stw	r12,1216(sp)
 8001260:	6001c01e 	bne	r12,zero,8001964 <___vfprintf_internal_r+0xd90>
 8001264:	dac12e17 	ldw	r11,1208(sp)
 8001268:	db012b17 	ldw	r12,1196(sp)
 800126c:	5b39c83a 	sub	fp,r11,r12
 8001270:	0701bc0e 	bge	zero,fp,8001964 <___vfprintf_internal_r+0xd90>
 8001274:	02400404 	movi	r9,16
 8001278:	d8c12017 	ldw	r3,1152(sp)
 800127c:	d8811f17 	ldw	r2,1148(sp)
 8001280:	4f05220e 	bge	r9,fp,800270c <___vfprintf_internal_r+0x1b38>
 8001284:	01420074 	movhi	r5,2049
 8001288:	297f5884 	addi	r5,r5,-670
 800128c:	d9413615 	stw	r5,1240(sp)
 8001290:	482b883a 	mov	r21,r9
 8001294:	04c001c4 	movi	r19,7
 8001298:	00000306 	br	80012a8 <___vfprintf_internal_r+0x6d4>
 800129c:	e73ffc04 	addi	fp,fp,-16
 80012a0:	42000204 	addi	r8,r8,8
 80012a4:	af00130e 	bge	r21,fp,80012f4 <___vfprintf_internal_r+0x720>
 80012a8:	02c20074 	movhi	r11,2049
 80012ac:	18c00404 	addi	r3,r3,16
 80012b0:	10800044 	addi	r2,r2,1
 80012b4:	5aff5884 	addi	r11,r11,-670
 80012b8:	42c00015 	stw	r11,0(r8)
 80012bc:	45400115 	stw	r21,4(r8)
 80012c0:	d8c12015 	stw	r3,1152(sp)
 80012c4:	d8811f15 	stw	r2,1148(sp)
 80012c8:	98bff40e 	bge	r19,r2,800129c <__alt_data_end+0xfc00129c>
 80012cc:	b009883a 	mov	r4,r22
 80012d0:	b80b883a 	mov	r5,r23
 80012d4:	d9811e04 	addi	r6,sp,1144
 80012d8:	8007f840 	call	8007f84 <__sprint_r>
 80012dc:	103f541e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80012e0:	e73ffc04 	addi	fp,fp,-16
 80012e4:	d8c12017 	ldw	r3,1152(sp)
 80012e8:	d8811f17 	ldw	r2,1148(sp)
 80012ec:	da000404 	addi	r8,sp,16
 80012f0:	af3fed16 	blt	r21,fp,80012a8 <__alt_data_end+0xfc0012a8>
 80012f4:	db013617 	ldw	r12,1240(sp)
 80012f8:	e0c7883a 	add	r3,fp,r3
 80012fc:	10800044 	addi	r2,r2,1
 8001300:	43000015 	stw	r12,0(r8)
 8001304:	47000115 	stw	fp,4(r8)
 8001308:	d8c12015 	stw	r3,1152(sp)
 800130c:	d8811f15 	stw	r2,1148(sp)
 8001310:	010001c4 	movi	r4,7
 8001314:	2082f416 	blt	r4,r2,8001ee8 <___vfprintf_internal_r+0x1314>
 8001318:	d8812787 	ldb	r2,1182(sp)
 800131c:	42000204 	addi	r8,r8,8
 8001320:	10000c26 	beq	r2,zero,8001354 <___vfprintf_internal_r+0x780>
 8001324:	d8811f17 	ldw	r2,1148(sp)
 8001328:	d9012784 	addi	r4,sp,1182
 800132c:	18c00044 	addi	r3,r3,1
 8001330:	10800044 	addi	r2,r2,1
 8001334:	41000015 	stw	r4,0(r8)
 8001338:	01000044 	movi	r4,1
 800133c:	41000115 	stw	r4,4(r8)
 8001340:	d8c12015 	stw	r3,1152(sp)
 8001344:	d8811f15 	stw	r2,1148(sp)
 8001348:	010001c4 	movi	r4,7
 800134c:	20828d16 	blt	r4,r2,8001d84 <___vfprintf_internal_r+0x11b0>
 8001350:	42000204 	addi	r8,r8,8
 8001354:	dac12c17 	ldw	r11,1200(sp)
 8001358:	58000c26 	beq	r11,zero,800138c <___vfprintf_internal_r+0x7b8>
 800135c:	d8811f17 	ldw	r2,1148(sp)
 8001360:	d9012704 	addi	r4,sp,1180
 8001364:	18c00084 	addi	r3,r3,2
 8001368:	10800044 	addi	r2,r2,1
 800136c:	41000015 	stw	r4,0(r8)
 8001370:	01000084 	movi	r4,2
 8001374:	41000115 	stw	r4,4(r8)
 8001378:	d8c12015 	stw	r3,1152(sp)
 800137c:	d8811f15 	stw	r2,1148(sp)
 8001380:	010001c4 	movi	r4,7
 8001384:	20828716 	blt	r4,r2,8001da4 <___vfprintf_internal_r+0x11d0>
 8001388:	42000204 	addi	r8,r8,8
 800138c:	db013017 	ldw	r12,1216(sp)
 8001390:	00802004 	movi	r2,128
 8001394:	6081e926 	beq	r12,r2,8001b3c <___vfprintf_internal_r+0xf68>
 8001398:	db013217 	ldw	r12,1224(sp)
 800139c:	64abc83a 	sub	r21,r12,r18
 80013a0:	0540260e 	bge	zero,r21,800143c <___vfprintf_internal_r+0x868>
 80013a4:	07000404 	movi	fp,16
 80013a8:	d8811f17 	ldw	r2,1148(sp)
 80013ac:	e5443d0e 	bge	fp,r21,80024a4 <___vfprintf_internal_r+0x18d0>
 80013b0:	01420074 	movhi	r5,2049
 80013b4:	297f5484 	addi	r5,r5,-686
 80013b8:	d9412c15 	stw	r5,1200(sp)
 80013bc:	04c001c4 	movi	r19,7
 80013c0:	00000306 	br	80013d0 <___vfprintf_internal_r+0x7fc>
 80013c4:	ad7ffc04 	addi	r21,r21,-16
 80013c8:	42000204 	addi	r8,r8,8
 80013cc:	e540110e 	bge	fp,r21,8001414 <___vfprintf_internal_r+0x840>
 80013d0:	18c00404 	addi	r3,r3,16
 80013d4:	10800044 	addi	r2,r2,1
 80013d8:	45000015 	stw	r20,0(r8)
 80013dc:	47000115 	stw	fp,4(r8)
 80013e0:	d8c12015 	stw	r3,1152(sp)
 80013e4:	d8811f15 	stw	r2,1148(sp)
 80013e8:	98bff60e 	bge	r19,r2,80013c4 <__alt_data_end+0xfc0013c4>
 80013ec:	b009883a 	mov	r4,r22
 80013f0:	b80b883a 	mov	r5,r23
 80013f4:	d9811e04 	addi	r6,sp,1144
 80013f8:	8007f840 	call	8007f84 <__sprint_r>
 80013fc:	103f0c1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001400:	ad7ffc04 	addi	r21,r21,-16
 8001404:	d8c12017 	ldw	r3,1152(sp)
 8001408:	d8811f17 	ldw	r2,1148(sp)
 800140c:	da000404 	addi	r8,sp,16
 8001410:	e57fef16 	blt	fp,r21,80013d0 <__alt_data_end+0xfc0013d0>
 8001414:	dac12c17 	ldw	r11,1200(sp)
 8001418:	1d47883a 	add	r3,r3,r21
 800141c:	10800044 	addi	r2,r2,1
 8001420:	42c00015 	stw	r11,0(r8)
 8001424:	45400115 	stw	r21,4(r8)
 8001428:	d8c12015 	stw	r3,1152(sp)
 800142c:	d8811f15 	stw	r2,1148(sp)
 8001430:	010001c4 	movi	r4,7
 8001434:	20824b16 	blt	r4,r2,8001d64 <___vfprintf_internal_r+0x1190>
 8001438:	42000204 	addi	r8,r8,8
 800143c:	8880400c 	andi	r2,r17,256
 8001440:	1001761e 	bne	r2,zero,8001a1c <___vfprintf_internal_r+0xe48>
 8001444:	d8811f17 	ldw	r2,1148(sp)
 8001448:	db013117 	ldw	r12,1220(sp)
 800144c:	1c87883a 	add	r3,r3,r18
 8001450:	10800044 	addi	r2,r2,1
 8001454:	43000015 	stw	r12,0(r8)
 8001458:	44800115 	stw	r18,4(r8)
 800145c:	d8c12015 	stw	r3,1152(sp)
 8001460:	d8811f15 	stw	r2,1148(sp)
 8001464:	010001c4 	movi	r4,7
 8001468:	20822616 	blt	r4,r2,8001d04 <___vfprintf_internal_r+0x1130>
 800146c:	42000204 	addi	r8,r8,8
 8001470:	8c40010c 	andi	r17,r17,4
 8001474:	88003126 	beq	r17,zero,800153c <___vfprintf_internal_r+0x968>
 8001478:	db012e17 	ldw	r12,1208(sp)
 800147c:	dac12b17 	ldw	r11,1196(sp)
 8001480:	62e1c83a 	sub	r16,r12,r11
 8001484:	04002d0e 	bge	zero,r16,800153c <___vfprintf_internal_r+0x968>
 8001488:	04400404 	movi	r17,16
 800148c:	d8811f17 	ldw	r2,1148(sp)
 8001490:	8c04df0e 	bge	r17,r16,8002810 <___vfprintf_internal_r+0x1c3c>
 8001494:	01020074 	movhi	r4,2049
 8001498:	213f5884 	addi	r4,r4,-670
 800149c:	d9013615 	stw	r4,1240(sp)
 80014a0:	048001c4 	movi	r18,7
 80014a4:	00000306 	br	80014b4 <___vfprintf_internal_r+0x8e0>
 80014a8:	843ffc04 	addi	r16,r16,-16
 80014ac:	42000204 	addi	r8,r8,8
 80014b0:	8c00130e 	bge	r17,r16,8001500 <___vfprintf_internal_r+0x92c>
 80014b4:	01420074 	movhi	r5,2049
 80014b8:	18c00404 	addi	r3,r3,16
 80014bc:	10800044 	addi	r2,r2,1
 80014c0:	297f5884 	addi	r5,r5,-670
 80014c4:	41400015 	stw	r5,0(r8)
 80014c8:	44400115 	stw	r17,4(r8)
 80014cc:	d8c12015 	stw	r3,1152(sp)
 80014d0:	d8811f15 	stw	r2,1148(sp)
 80014d4:	90bff40e 	bge	r18,r2,80014a8 <__alt_data_end+0xfc0014a8>
 80014d8:	b009883a 	mov	r4,r22
 80014dc:	b80b883a 	mov	r5,r23
 80014e0:	d9811e04 	addi	r6,sp,1144
 80014e4:	8007f840 	call	8007f84 <__sprint_r>
 80014e8:	103ed11e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80014ec:	843ffc04 	addi	r16,r16,-16
 80014f0:	d8c12017 	ldw	r3,1152(sp)
 80014f4:	d8811f17 	ldw	r2,1148(sp)
 80014f8:	da000404 	addi	r8,sp,16
 80014fc:	8c3fed16 	blt	r17,r16,80014b4 <__alt_data_end+0xfc0014b4>
 8001500:	dac13617 	ldw	r11,1240(sp)
 8001504:	1c07883a 	add	r3,r3,r16
 8001508:	10800044 	addi	r2,r2,1
 800150c:	42c00015 	stw	r11,0(r8)
 8001510:	44000115 	stw	r16,4(r8)
 8001514:	d8c12015 	stw	r3,1152(sp)
 8001518:	d8811f15 	stw	r2,1148(sp)
 800151c:	010001c4 	movi	r4,7
 8001520:	2080060e 	bge	r4,r2,800153c <___vfprintf_internal_r+0x968>
 8001524:	b009883a 	mov	r4,r22
 8001528:	b80b883a 	mov	r5,r23
 800152c:	d9811e04 	addi	r6,sp,1144
 8001530:	8007f840 	call	8007f84 <__sprint_r>
 8001534:	103ebe1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001538:	d8c12017 	ldw	r3,1152(sp)
 800153c:	d8812b17 	ldw	r2,1196(sp)
 8001540:	db012e17 	ldw	r12,1208(sp)
 8001544:	1300010e 	bge	r2,r12,800154c <___vfprintf_internal_r+0x978>
 8001548:	6005883a 	mov	r2,r12
 800154c:	dac12f17 	ldw	r11,1212(sp)
 8001550:	5897883a 	add	r11,r11,r2
 8001554:	dac12f15 	stw	r11,1212(sp)
 8001558:	1801f21e 	bne	r3,zero,8001d24 <___vfprintf_internal_r+0x1150>
 800155c:	d8011f15 	stw	zero,1148(sp)
 8001560:	da000404 	addi	r8,sp,16
 8001564:	003dd806 	br	8000cc8 <__alt_data_end+0xfc000cc8>
 8001568:	8c400414 	ori	r17,r17,16
 800156c:	d8c12a15 	stw	r3,1192(sp)
 8001570:	88c0080c 	andi	r3,r17,32
 8001574:	d8812d17 	ldw	r2,1204(sp)
 8001578:	18004626 	beq	r3,zero,8001694 <___vfprintf_internal_r+0xac0>
 800157c:	dac12d17 	ldw	r11,1204(sp)
 8001580:	14c00017 	ldw	r19,0(r2)
 8001584:	17000117 	ldw	fp,4(r2)
 8001588:	5ac00204 	addi	r11,r11,8
 800158c:	dac12d15 	stw	r11,1204(sp)
 8001590:	00800044 	movi	r2,1
 8001594:	9f06b03a 	or	r3,r19,fp
 8001598:	003f0006 	br	800119c <__alt_data_end+0xfc00119c>
 800159c:	1805883a 	mov	r2,r3
 80015a0:	d8012e15 	stw	zero,1208(sp)
 80015a4:	82fff404 	addi	r11,r16,-48
 80015a8:	0019883a 	mov	r12,zero
 80015ac:	14000007 	ldb	r16,0(r2)
 80015b0:	630002a4 	muli	r12,r12,10
 80015b4:	18c00044 	addi	r3,r3,1
 80015b8:	1805883a 	mov	r2,r3
 80015bc:	62d9883a 	add	r12,r12,r11
 80015c0:	82fff404 	addi	r11,r16,-48
 80015c4:	2afff92e 	bgeu	r5,r11,80015ac <__alt_data_end+0xfc0015ac>
 80015c8:	db012e15 	stw	r12,1208(sp)
 80015cc:	003de906 	br	8000d74 <__alt_data_end+0xfc000d74>
 80015d0:	8c400414 	ori	r17,r17,16
 80015d4:	d8c12a15 	stw	r3,1192(sp)
 80015d8:	d9812785 	stb	r6,1182(sp)
 80015dc:	8880080c 	andi	r2,r17,32
 80015e0:	d8c12d17 	ldw	r3,1204(sp)
 80015e4:	10007a26 	beq	r2,zero,80017d0 <___vfprintf_internal_r+0xbfc>
 80015e8:	db012d17 	ldw	r12,1204(sp)
 80015ec:	18800117 	ldw	r2,4(r3)
 80015f0:	1cc00017 	ldw	r19,0(r3)
 80015f4:	63000204 	addi	r12,r12,8
 80015f8:	db012d15 	stw	r12,1204(sp)
 80015fc:	1039883a 	mov	fp,r2
 8001600:	10031016 	blt	r2,zero,8002244 <___vfprintf_internal_r+0x1670>
 8001604:	dd412783 	ldbu	r21,1182(sp)
 8001608:	da413215 	stw	r9,1224(sp)
 800160c:	00800044 	movi	r2,1
 8001610:	9f06b03a 	or	r3,r19,fp
 8001614:	003ee406 	br	80011a8 <__alt_data_end+0xfc0011a8>
 8001618:	03020074 	movhi	r12,2049
 800161c:	633f4804 	addi	r12,r12,-736
 8001620:	d8c12a15 	stw	r3,1192(sp)
 8001624:	d9812785 	stb	r6,1182(sp)
 8001628:	db013b15 	stw	r12,1260(sp)
 800162c:	88c0080c 	andi	r3,r17,32
 8001630:	d8812d17 	ldw	r2,1204(sp)
 8001634:	18002b26 	beq	r3,zero,80016e4 <___vfprintf_internal_r+0xb10>
 8001638:	dac12d17 	ldw	r11,1204(sp)
 800163c:	14c00017 	ldw	r19,0(r2)
 8001640:	17000117 	ldw	fp,4(r2)
 8001644:	5ac00204 	addi	r11,r11,8
 8001648:	dac12d15 	stw	r11,1204(sp)
 800164c:	8880004c 	andi	r2,r17,1
 8001650:	10025b26 	beq	r2,zero,8001fc0 <___vfprintf_internal_r+0x13ec>
 8001654:	9f06b03a 	or	r3,r19,fp
 8001658:	18037026 	beq	r3,zero,800241c <___vfprintf_internal_r+0x1848>
 800165c:	00800c04 	movi	r2,48
 8001660:	d8812705 	stb	r2,1180(sp)
 8001664:	dc012745 	stb	r16,1181(sp)
 8001668:	8c400094 	ori	r17,r17,2
 800166c:	00800084 	movi	r2,2
 8001670:	003eca06 	br	800119c <__alt_data_end+0xfc00119c>
 8001674:	8c400814 	ori	r17,r17,32
 8001678:	1805883a 	mov	r2,r3
 800167c:	1c000007 	ldb	r16,0(r3)
 8001680:	003dbb06 	br	8000d70 <__alt_data_end+0xfc000d70>
 8001684:	d8c12a15 	stw	r3,1192(sp)
 8001688:	88c0080c 	andi	r3,r17,32
 800168c:	d8812d17 	ldw	r2,1204(sp)
 8001690:	183fba1e 	bne	r3,zero,800157c <__alt_data_end+0xfc00157c>
 8001694:	88c0040c 	andi	r3,r17,16
 8001698:	18024c1e 	bne	r3,zero,8001fcc <___vfprintf_internal_r+0x13f8>
 800169c:	88c0100c 	andi	r3,r17,64
 80016a0:	18024a26 	beq	r3,zero,8001fcc <___vfprintf_internal_r+0x13f8>
 80016a4:	dac12d17 	ldw	r11,1204(sp)
 80016a8:	14c0000b 	ldhu	r19,0(r2)
 80016ac:	0039883a 	mov	fp,zero
 80016b0:	5ac00104 	addi	r11,r11,4
 80016b4:	dac12d15 	stw	r11,1204(sp)
 80016b8:	00800044 	movi	r2,1
 80016bc:	9807883a 	mov	r3,r19
 80016c0:	003eb606 	br	800119c <__alt_data_end+0xfc00119c>
 80016c4:	00820074 	movhi	r2,2049
 80016c8:	10bf4d04 	addi	r2,r2,-716
 80016cc:	d8c12a15 	stw	r3,1192(sp)
 80016d0:	d8813b15 	stw	r2,1260(sp)
 80016d4:	d9812785 	stb	r6,1182(sp)
 80016d8:	88c0080c 	andi	r3,r17,32
 80016dc:	d8812d17 	ldw	r2,1204(sp)
 80016e0:	183fd51e 	bne	r3,zero,8001638 <__alt_data_end+0xfc001638>
 80016e4:	88c0040c 	andi	r3,r17,16
 80016e8:	18034126 	beq	r3,zero,80023f0 <___vfprintf_internal_r+0x181c>
 80016ec:	db012d17 	ldw	r12,1204(sp)
 80016f0:	14c00017 	ldw	r19,0(r2)
 80016f4:	0039883a 	mov	fp,zero
 80016f8:	63000104 	addi	r12,r12,4
 80016fc:	db012d15 	stw	r12,1204(sp)
 8001700:	003fd206 	br	800164c <__alt_data_end+0xfc00164c>
 8001704:	1c000007 	ldb	r16,0(r3)
 8001708:	81c3d626 	beq	r16,r7,8002664 <___vfprintf_internal_r+0x1a90>
 800170c:	8c400414 	ori	r17,r17,16
 8001710:	1805883a 	mov	r2,r3
 8001714:	003d9606 	br	8000d70 <__alt_data_end+0xfc000d70>
 8001718:	d8c12a15 	stw	r3,1192(sp)
 800171c:	d9812785 	stb	r6,1182(sp)
 8001720:	8880080c 	andi	r2,r17,32
 8001724:	10033f26 	beq	r2,zero,8002424 <___vfprintf_internal_r+0x1850>
 8001728:	db012d17 	ldw	r12,1204(sp)
 800172c:	dac12f17 	ldw	r11,1212(sp)
 8001730:	60800017 	ldw	r2,0(r12)
 8001734:	5807d7fa 	srai	r3,r11,31
 8001738:	63000104 	addi	r12,r12,4
 800173c:	db012d15 	stw	r12,1204(sp)
 8001740:	12c00015 	stw	r11,0(r2)
 8001744:	10c00115 	stw	r3,4(r2)
 8001748:	003d5f06 	br	8000cc8 <__alt_data_end+0xfc000cc8>
 800174c:	d8c12a15 	stw	r3,1192(sp)
 8001750:	88c0080c 	andi	r3,r17,32
 8001754:	d8812d17 	ldw	r2,1204(sp)
 8001758:	183e891e 	bne	r3,zero,8001180 <__alt_data_end+0xfc001180>
 800175c:	88c0040c 	andi	r3,r17,16
 8001760:	1801ea1e 	bne	r3,zero,8001f0c <___vfprintf_internal_r+0x1338>
 8001764:	88c0100c 	andi	r3,r17,64
 8001768:	1801e826 	beq	r3,zero,8001f0c <___vfprintf_internal_r+0x1338>
 800176c:	db012d17 	ldw	r12,1204(sp)
 8001770:	14c0000b 	ldhu	r19,0(r2)
 8001774:	0039883a 	mov	fp,zero
 8001778:	63000104 	addi	r12,r12,4
 800177c:	db012d15 	stw	r12,1204(sp)
 8001780:	0005883a 	mov	r2,zero
 8001784:	9807883a 	mov	r3,r19
 8001788:	003e8406 	br	800119c <__alt_data_end+0xfc00119c>
 800178c:	30803fcc 	andi	r2,r6,255
 8001790:	1080201c 	xori	r2,r2,128
 8001794:	10bfe004 	addi	r2,r2,-128
 8001798:	10031d1e 	bne	r2,zero,8002410 <___vfprintf_internal_r+0x183c>
 800179c:	1805883a 	mov	r2,r3
 80017a0:	01800804 	movi	r6,32
 80017a4:	1c000007 	ldb	r16,0(r3)
 80017a8:	003d7106 	br	8000d70 <__alt_data_end+0xfc000d70>
 80017ac:	8c400054 	ori	r17,r17,1
 80017b0:	1805883a 	mov	r2,r3
 80017b4:	1c000007 	ldb	r16,0(r3)
 80017b8:	003d6d06 	br	8000d70 <__alt_data_end+0xfc000d70>
 80017bc:	d8c12a15 	stw	r3,1192(sp)
 80017c0:	d9812785 	stb	r6,1182(sp)
 80017c4:	8880080c 	andi	r2,r17,32
 80017c8:	d8c12d17 	ldw	r3,1204(sp)
 80017cc:	103f861e 	bne	r2,zero,80015e8 <__alt_data_end+0xfc0015e8>
 80017d0:	8880040c 	andi	r2,r17,16
 80017d4:	1001f31e 	bne	r2,zero,8001fa4 <___vfprintf_internal_r+0x13d0>
 80017d8:	8880100c 	andi	r2,r17,64
 80017dc:	1001f126 	beq	r2,zero,8001fa4 <___vfprintf_internal_r+0x13d0>
 80017e0:	1cc0000f 	ldh	r19,0(r3)
 80017e4:	db012d17 	ldw	r12,1204(sp)
 80017e8:	9839d7fa 	srai	fp,r19,31
 80017ec:	63000104 	addi	r12,r12,4
 80017f0:	db012d15 	stw	r12,1204(sp)
 80017f4:	e005883a 	mov	r2,fp
 80017f8:	003f8106 	br	8001600 <__alt_data_end+0xfc001600>
 80017fc:	8c401014 	ori	r17,r17,64
 8001800:	1805883a 	mov	r2,r3
 8001804:	1c000007 	ldb	r16,0(r3)
 8001808:	003d5906 	br	8000d70 <__alt_data_end+0xfc000d70>
 800180c:	db012d17 	ldw	r12,1204(sp)
 8001810:	d8c12a15 	stw	r3,1192(sp)
 8001814:	00c00044 	movi	r3,1
 8001818:	60800017 	ldw	r2,0(r12)
 800181c:	63000104 	addi	r12,r12,4
 8001820:	d8c12b15 	stw	r3,1196(sp)
 8001824:	d8012785 	stb	zero,1182(sp)
 8001828:	d8810405 	stb	r2,1040(sp)
 800182c:	db012d15 	stw	r12,1204(sp)
 8001830:	dac10404 	addi	r11,sp,1040
 8001834:	1825883a 	mov	r18,r3
 8001838:	d8013215 	stw	zero,1224(sp)
 800183c:	d8013415 	stw	zero,1232(sp)
 8001840:	dac13115 	stw	r11,1220(sp)
 8001844:	0005883a 	mov	r2,zero
 8001848:	003e7d06 	br	8001240 <__alt_data_end+0xfc001240>
 800184c:	db012d17 	ldw	r12,1204(sp)
 8001850:	00800c04 	movi	r2,48
 8001854:	d8812705 	stb	r2,1180(sp)
 8001858:	64c00017 	ldw	r19,0(r12)
 800185c:	00801e04 	movi	r2,120
 8001860:	d8812745 	stb	r2,1181(sp)
 8001864:	00820074 	movhi	r2,2049
 8001868:	10bf4d04 	addi	r2,r2,-716
 800186c:	63000104 	addi	r12,r12,4
 8001870:	d8c12a15 	stw	r3,1192(sp)
 8001874:	d8813b15 	stw	r2,1260(sp)
 8001878:	0039883a 	mov	fp,zero
 800187c:	8c400094 	ori	r17,r17,2
 8001880:	db012d15 	stw	r12,1204(sp)
 8001884:	00800084 	movi	r2,2
 8001888:	04001e04 	movi	r16,120
 800188c:	9807883a 	mov	r3,r19
 8001890:	003e4206 	br	800119c <__alt_data_end+0xfc00119c>
 8001894:	dac12d17 	ldw	r11,1204(sp)
 8001898:	db012d17 	ldw	r12,1204(sp)
 800189c:	d8c12a15 	stw	r3,1192(sp)
 80018a0:	5ac00017 	ldw	r11,0(r11)
 80018a4:	d8012785 	stb	zero,1182(sp)
 80018a8:	64c00104 	addi	r19,r12,4
 80018ac:	dac13115 	stw	r11,1220(sp)
 80018b0:	5803e826 	beq	r11,zero,8002854 <___vfprintf_internal_r+0x1c80>
 80018b4:	d9013117 	ldw	r4,1220(sp)
 80018b8:	48037a16 	blt	r9,zero,80026a4 <___vfprintf_internal_r+0x1ad0>
 80018bc:	480d883a 	mov	r6,r9
 80018c0:	000b883a 	mov	r5,zero
 80018c4:	da013f15 	stw	r8,1276(sp)
 80018c8:	da413e15 	stw	r9,1272(sp)
 80018cc:	80060ac0 	call	80060ac <memchr>
 80018d0:	da013f17 	ldw	r8,1276(sp)
 80018d4:	da413e17 	ldw	r9,1272(sp)
 80018d8:	10044426 	beq	r2,zero,80029ec <___vfprintf_internal_r+0x1e18>
 80018dc:	d8c13117 	ldw	r3,1220(sp)
 80018e0:	10e5c83a 	sub	r18,r2,r3
 80018e4:	4c834416 	blt	r9,r18,80025f8 <___vfprintf_internal_r+0x1a24>
 80018e8:	9005883a 	mov	r2,r18
 80018ec:	90037216 	blt	r18,zero,80026b8 <___vfprintf_internal_r+0x1ae4>
 80018f0:	dd412783 	ldbu	r21,1182(sp)
 80018f4:	d8812b15 	stw	r2,1196(sp)
 80018f8:	dcc12d15 	stw	r19,1204(sp)
 80018fc:	d8013215 	stw	zero,1224(sp)
 8001900:	d8013415 	stw	zero,1232(sp)
 8001904:	003e4706 	br	8001224 <__alt_data_end+0xfc001224>
 8001908:	dac12d17 	ldw	r11,1204(sp)
 800190c:	db012d17 	ldw	r12,1204(sp)
 8001910:	5ac00017 	ldw	r11,0(r11)
 8001914:	dac12e15 	stw	r11,1208(sp)
 8001918:	62c00104 	addi	r11,r12,4
 800191c:	db012e17 	ldw	r12,1208(sp)
 8001920:	60034a16 	blt	r12,zero,800264c <___vfprintf_internal_r+0x1a78>
 8001924:	dac12d15 	stw	r11,1204(sp)
 8001928:	1805883a 	mov	r2,r3
 800192c:	1c000007 	ldb	r16,0(r3)
 8001930:	003d0f06 	br	8000d70 <__alt_data_end+0xfc000d70>
 8001934:	1805883a 	mov	r2,r3
 8001938:	01800ac4 	movi	r6,43
 800193c:	1c000007 	ldb	r16,0(r3)
 8001940:	003d0b06 	br	8000d70 <__alt_data_end+0xfc000d70>
 8001944:	d8c12a15 	stw	r3,1192(sp)
 8001948:	d9812785 	stb	r6,1182(sp)
 800194c:	803db226 	beq	r16,zero,8001018 <__alt_data_end+0xfc001018>
 8001950:	00c00044 	movi	r3,1
 8001954:	d8c12b15 	stw	r3,1196(sp)
 8001958:	dc010405 	stb	r16,1040(sp)
 800195c:	d8012785 	stb	zero,1182(sp)
 8001960:	003fb306 	br	8001830 <__alt_data_end+0xfc001830>
 8001964:	d8c12017 	ldw	r3,1152(sp)
 8001968:	003e6d06 	br	8001320 <__alt_data_end+0xfc001320>
 800196c:	10803fcc 	andi	r2,r2,255
 8001970:	00c00044 	movi	r3,1
 8001974:	10fe141e 	bne	r2,r3,80011c8 <__alt_data_end+0xfc0011c8>
 8001978:	e000021e 	bne	fp,zero,8001984 <___vfprintf_internal_r+0xdb0>
 800197c:	00800244 	movi	r2,9
 8001980:	14c0202e 	bgeu	r2,r19,8001a04 <___vfprintf_internal_r+0xe30>
 8001984:	dc012b15 	stw	r16,1196(sp)
 8001988:	dc412c15 	stw	r17,1200(sp)
 800198c:	9821883a 	mov	r16,r19
 8001990:	e023883a 	mov	r17,fp
 8001994:	dc810e04 	addi	r18,sp,1080
 8001998:	4027883a 	mov	r19,r8
 800199c:	4839883a 	mov	fp,r9
 80019a0:	8009883a 	mov	r4,r16
 80019a4:	880b883a 	mov	r5,r17
 80019a8:	01800284 	movi	r6,10
 80019ac:	000f883a 	mov	r7,zero
 80019b0:	800a2740 	call	800a274 <__umoddi3>
 80019b4:	10800c04 	addi	r2,r2,48
 80019b8:	94bfffc4 	addi	r18,r18,-1
 80019bc:	8009883a 	mov	r4,r16
 80019c0:	880b883a 	mov	r5,r17
 80019c4:	01800284 	movi	r6,10
 80019c8:	000f883a 	mov	r7,zero
 80019cc:	90800005 	stb	r2,0(r18)
 80019d0:	8009cb40 	call	8009cb4 <__udivdi3>
 80019d4:	1021883a 	mov	r16,r2
 80019d8:	10c4b03a 	or	r2,r2,r3
 80019dc:	1823883a 	mov	r17,r3
 80019e0:	103fef1e 	bne	r2,zero,80019a0 <__alt_data_end+0xfc0019a0>
 80019e4:	dac12817 	ldw	r11,1184(sp)
 80019e8:	dc813115 	stw	r18,1220(sp)
 80019ec:	dc012b17 	ldw	r16,1196(sp)
 80019f0:	9811883a 	mov	r8,r19
 80019f4:	dc412c17 	ldw	r17,1200(sp)
 80019f8:	e013883a 	mov	r9,fp
 80019fc:	5ca5c83a 	sub	r18,r11,r18
 8001a00:	003e0306 	br	8001210 <__alt_data_end+0xfc001210>
 8001a04:	9cc00c04 	addi	r19,r19,48
 8001a08:	d8c10dc4 	addi	r3,sp,1079
 8001a0c:	dcc10dc5 	stb	r19,1079(sp)
 8001a10:	dc813c17 	ldw	r18,1264(sp)
 8001a14:	d8c13115 	stw	r3,1220(sp)
 8001a18:	003dfd06 	br	8001210 <__alt_data_end+0xfc001210>
 8001a1c:	00801944 	movi	r2,101
 8001a20:	1400710e 	bge	r2,r16,8001be8 <___vfprintf_internal_r+0x1014>
 8001a24:	d9013717 	ldw	r4,1244(sp)
 8001a28:	d9413917 	ldw	r5,1252(sp)
 8001a2c:	000d883a 	mov	r6,zero
 8001a30:	000f883a 	mov	r7,zero
 8001a34:	d8c13d15 	stw	r3,1268(sp)
 8001a38:	da013f15 	stw	r8,1276(sp)
 8001a3c:	800ba980 	call	800ba98 <__eqdf2>
 8001a40:	d8c13d17 	ldw	r3,1268(sp)
 8001a44:	da013f17 	ldw	r8,1276(sp)
 8001a48:	1000ef1e 	bne	r2,zero,8001e08 <___vfprintf_internal_r+0x1234>
 8001a4c:	d8811f17 	ldw	r2,1148(sp)
 8001a50:	01020074 	movhi	r4,2049
 8001a54:	213f5404 	addi	r4,r4,-688
 8001a58:	18c00044 	addi	r3,r3,1
 8001a5c:	10800044 	addi	r2,r2,1
 8001a60:	41000015 	stw	r4,0(r8)
 8001a64:	01000044 	movi	r4,1
 8001a68:	41000115 	stw	r4,4(r8)
 8001a6c:	d8c12015 	stw	r3,1152(sp)
 8001a70:	d8811f15 	stw	r2,1148(sp)
 8001a74:	010001c4 	movi	r4,7
 8001a78:	20828e16 	blt	r4,r2,80024b4 <___vfprintf_internal_r+0x18e0>
 8001a7c:	42000204 	addi	r8,r8,8
 8001a80:	d8812617 	ldw	r2,1176(sp)
 8001a84:	dac13317 	ldw	r11,1228(sp)
 8001a88:	12c00216 	blt	r2,r11,8001a94 <___vfprintf_internal_r+0xec0>
 8001a8c:	8880004c 	andi	r2,r17,1
 8001a90:	103e7726 	beq	r2,zero,8001470 <__alt_data_end+0xfc001470>
 8001a94:	db013817 	ldw	r12,1248(sp)
 8001a98:	d8811f17 	ldw	r2,1148(sp)
 8001a9c:	dac13517 	ldw	r11,1236(sp)
 8001aa0:	1b07883a 	add	r3,r3,r12
 8001aa4:	10800044 	addi	r2,r2,1
 8001aa8:	42c00015 	stw	r11,0(r8)
 8001aac:	43000115 	stw	r12,4(r8)
 8001ab0:	d8c12015 	stw	r3,1152(sp)
 8001ab4:	d8811f15 	stw	r2,1148(sp)
 8001ab8:	010001c4 	movi	r4,7
 8001abc:	2082ed16 	blt	r4,r2,8002674 <___vfprintf_internal_r+0x1aa0>
 8001ac0:	42000204 	addi	r8,r8,8
 8001ac4:	db013317 	ldw	r12,1228(sp)
 8001ac8:	643fffc4 	addi	r16,r12,-1
 8001acc:	043e680e 	bge	zero,r16,8001470 <__alt_data_end+0xfc001470>
 8001ad0:	04800404 	movi	r18,16
 8001ad4:	d8811f17 	ldw	r2,1148(sp)
 8001ad8:	94007e0e 	bge	r18,r16,8001cd4 <___vfprintf_internal_r+0x1100>
 8001adc:	01420074 	movhi	r5,2049
 8001ae0:	297f5484 	addi	r5,r5,-686
 8001ae4:	d9412c15 	stw	r5,1200(sp)
 8001ae8:	054001c4 	movi	r21,7
 8001aec:	00000306 	br	8001afc <___vfprintf_internal_r+0xf28>
 8001af0:	42000204 	addi	r8,r8,8
 8001af4:	843ffc04 	addi	r16,r16,-16
 8001af8:	9400790e 	bge	r18,r16,8001ce0 <___vfprintf_internal_r+0x110c>
 8001afc:	18c00404 	addi	r3,r3,16
 8001b00:	10800044 	addi	r2,r2,1
 8001b04:	45000015 	stw	r20,0(r8)
 8001b08:	44800115 	stw	r18,4(r8)
 8001b0c:	d8c12015 	stw	r3,1152(sp)
 8001b10:	d8811f15 	stw	r2,1148(sp)
 8001b14:	a8bff60e 	bge	r21,r2,8001af0 <__alt_data_end+0xfc001af0>
 8001b18:	b009883a 	mov	r4,r22
 8001b1c:	b80b883a 	mov	r5,r23
 8001b20:	d9811e04 	addi	r6,sp,1144
 8001b24:	8007f840 	call	8007f84 <__sprint_r>
 8001b28:	103d411e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001b2c:	d8c12017 	ldw	r3,1152(sp)
 8001b30:	d8811f17 	ldw	r2,1148(sp)
 8001b34:	da000404 	addi	r8,sp,16
 8001b38:	003fee06 	br	8001af4 <__alt_data_end+0xfc001af4>
 8001b3c:	dac12e17 	ldw	r11,1208(sp)
 8001b40:	db012b17 	ldw	r12,1196(sp)
 8001b44:	5b2bc83a 	sub	r21,r11,r12
 8001b48:	057e130e 	bge	zero,r21,8001398 <__alt_data_end+0xfc001398>
 8001b4c:	07000404 	movi	fp,16
 8001b50:	d8811f17 	ldw	r2,1148(sp)
 8001b54:	e543640e 	bge	fp,r21,80028e8 <___vfprintf_internal_r+0x1d14>
 8001b58:	01420074 	movhi	r5,2049
 8001b5c:	297f5484 	addi	r5,r5,-686
 8001b60:	d9412c15 	stw	r5,1200(sp)
 8001b64:	04c001c4 	movi	r19,7
 8001b68:	00000306 	br	8001b78 <___vfprintf_internal_r+0xfa4>
 8001b6c:	ad7ffc04 	addi	r21,r21,-16
 8001b70:	42000204 	addi	r8,r8,8
 8001b74:	e540110e 	bge	fp,r21,8001bbc <___vfprintf_internal_r+0xfe8>
 8001b78:	18c00404 	addi	r3,r3,16
 8001b7c:	10800044 	addi	r2,r2,1
 8001b80:	45000015 	stw	r20,0(r8)
 8001b84:	47000115 	stw	fp,4(r8)
 8001b88:	d8c12015 	stw	r3,1152(sp)
 8001b8c:	d8811f15 	stw	r2,1148(sp)
 8001b90:	98bff60e 	bge	r19,r2,8001b6c <__alt_data_end+0xfc001b6c>
 8001b94:	b009883a 	mov	r4,r22
 8001b98:	b80b883a 	mov	r5,r23
 8001b9c:	d9811e04 	addi	r6,sp,1144
 8001ba0:	8007f840 	call	8007f84 <__sprint_r>
 8001ba4:	103d221e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001ba8:	ad7ffc04 	addi	r21,r21,-16
 8001bac:	d8c12017 	ldw	r3,1152(sp)
 8001bb0:	d8811f17 	ldw	r2,1148(sp)
 8001bb4:	da000404 	addi	r8,sp,16
 8001bb8:	e57fef16 	blt	fp,r21,8001b78 <__alt_data_end+0xfc001b78>
 8001bbc:	dac12c17 	ldw	r11,1200(sp)
 8001bc0:	1d47883a 	add	r3,r3,r21
 8001bc4:	10800044 	addi	r2,r2,1
 8001bc8:	42c00015 	stw	r11,0(r8)
 8001bcc:	45400115 	stw	r21,4(r8)
 8001bd0:	d8c12015 	stw	r3,1152(sp)
 8001bd4:	d8811f15 	stw	r2,1148(sp)
 8001bd8:	010001c4 	movi	r4,7
 8001bdc:	20819116 	blt	r4,r2,8002224 <___vfprintf_internal_r+0x1650>
 8001be0:	42000204 	addi	r8,r8,8
 8001be4:	003dec06 	br	8001398 <__alt_data_end+0xfc001398>
 8001be8:	db013317 	ldw	r12,1228(sp)
 8001bec:	00800044 	movi	r2,1
 8001bf0:	18c00044 	addi	r3,r3,1
 8001bf4:	1301530e 	bge	r2,r12,8002144 <___vfprintf_internal_r+0x1570>
 8001bf8:	dc011f17 	ldw	r16,1148(sp)
 8001bfc:	dac13117 	ldw	r11,1220(sp)
 8001c00:	00800044 	movi	r2,1
 8001c04:	84000044 	addi	r16,r16,1
 8001c08:	40800115 	stw	r2,4(r8)
 8001c0c:	42c00015 	stw	r11,0(r8)
 8001c10:	d8c12015 	stw	r3,1152(sp)
 8001c14:	dc011f15 	stw	r16,1148(sp)
 8001c18:	008001c4 	movi	r2,7
 8001c1c:	14016b16 	blt	r2,r16,80021cc <___vfprintf_internal_r+0x15f8>
 8001c20:	42000204 	addi	r8,r8,8
 8001c24:	db013817 	ldw	r12,1248(sp)
 8001c28:	dac13517 	ldw	r11,1236(sp)
 8001c2c:	84000044 	addi	r16,r16,1
 8001c30:	1b07883a 	add	r3,r3,r12
 8001c34:	42c00015 	stw	r11,0(r8)
 8001c38:	43000115 	stw	r12,4(r8)
 8001c3c:	d8c12015 	stw	r3,1152(sp)
 8001c40:	dc011f15 	stw	r16,1148(sp)
 8001c44:	008001c4 	movi	r2,7
 8001c48:	14016916 	blt	r2,r16,80021f0 <___vfprintf_internal_r+0x161c>
 8001c4c:	44800204 	addi	r18,r8,8
 8001c50:	d9013717 	ldw	r4,1244(sp)
 8001c54:	d9413917 	ldw	r5,1252(sp)
 8001c58:	000d883a 	mov	r6,zero
 8001c5c:	000f883a 	mov	r7,zero
 8001c60:	d8c13d15 	stw	r3,1268(sp)
 8001c64:	800ba980 	call	800ba98 <__eqdf2>
 8001c68:	d8c13d17 	ldw	r3,1268(sp)
 8001c6c:	db013317 	ldw	r12,1228(sp)
 8001c70:	1000ae26 	beq	r2,zero,8001f2c <___vfprintf_internal_r+0x1358>
 8001c74:	dac13117 	ldw	r11,1220(sp)
 8001c78:	60bfffc4 	addi	r2,r12,-1
 8001c7c:	1887883a 	add	r3,r3,r2
 8001c80:	59000044 	addi	r4,r11,1
 8001c84:	84000044 	addi	r16,r16,1
 8001c88:	90800115 	stw	r2,4(r18)
 8001c8c:	91000015 	stw	r4,0(r18)
 8001c90:	d8c12015 	stw	r3,1152(sp)
 8001c94:	dc011f15 	stw	r16,1148(sp)
 8001c98:	008001c4 	movi	r2,7
 8001c9c:	14014216 	blt	r2,r16,80021a8 <___vfprintf_internal_r+0x15d4>
 8001ca0:	94800204 	addi	r18,r18,8
 8001ca4:	dac13a17 	ldw	r11,1256(sp)
 8001ca8:	dd4122c4 	addi	r21,sp,1163
 8001cac:	84000044 	addi	r16,r16,1
 8001cb0:	58c7883a 	add	r3,r11,r3
 8001cb4:	95400015 	stw	r21,0(r18)
 8001cb8:	92c00115 	stw	r11,4(r18)
 8001cbc:	d8c12015 	stw	r3,1152(sp)
 8001cc0:	dc011f15 	stw	r16,1148(sp)
 8001cc4:	008001c4 	movi	r2,7
 8001cc8:	14000e16 	blt	r2,r16,8001d04 <___vfprintf_internal_r+0x1130>
 8001ccc:	92000204 	addi	r8,r18,8
 8001cd0:	003de706 	br	8001470 <__alt_data_end+0xfc001470>
 8001cd4:	01020074 	movhi	r4,2049
 8001cd8:	213f5484 	addi	r4,r4,-686
 8001cdc:	d9012c15 	stw	r4,1200(sp)
 8001ce0:	dac12c17 	ldw	r11,1200(sp)
 8001ce4:	1c07883a 	add	r3,r3,r16
 8001ce8:	44000115 	stw	r16,4(r8)
 8001cec:	42c00015 	stw	r11,0(r8)
 8001cf0:	10800044 	addi	r2,r2,1
 8001cf4:	d8c12015 	stw	r3,1152(sp)
 8001cf8:	d8811f15 	stw	r2,1148(sp)
 8001cfc:	010001c4 	movi	r4,7
 8001d00:	20bdda0e 	bge	r4,r2,800146c <__alt_data_end+0xfc00146c>
 8001d04:	b009883a 	mov	r4,r22
 8001d08:	b80b883a 	mov	r5,r23
 8001d0c:	d9811e04 	addi	r6,sp,1144
 8001d10:	8007f840 	call	8007f84 <__sprint_r>
 8001d14:	103cc61e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001d18:	d8c12017 	ldw	r3,1152(sp)
 8001d1c:	da000404 	addi	r8,sp,16
 8001d20:	003dd306 	br	8001470 <__alt_data_end+0xfc001470>
 8001d24:	b009883a 	mov	r4,r22
 8001d28:	b80b883a 	mov	r5,r23
 8001d2c:	d9811e04 	addi	r6,sp,1144
 8001d30:	8007f840 	call	8007f84 <__sprint_r>
 8001d34:	103e0926 	beq	r2,zero,800155c <__alt_data_end+0xfc00155c>
 8001d38:	003cbd06 	br	8001030 <__alt_data_end+0xfc001030>
 8001d3c:	10803fcc 	andi	r2,r2,255
 8001d40:	1000651e 	bne	r2,zero,8001ed8 <___vfprintf_internal_r+0x1304>
 8001d44:	8880004c 	andi	r2,r17,1
 8001d48:	10013226 	beq	r2,zero,8002214 <___vfprintf_internal_r+0x1640>
 8001d4c:	00800c04 	movi	r2,48
 8001d50:	d8c10dc4 	addi	r3,sp,1079
 8001d54:	d8810dc5 	stb	r2,1079(sp)
 8001d58:	dc813c17 	ldw	r18,1264(sp)
 8001d5c:	d8c13115 	stw	r3,1220(sp)
 8001d60:	003d2b06 	br	8001210 <__alt_data_end+0xfc001210>
 8001d64:	b009883a 	mov	r4,r22
 8001d68:	b80b883a 	mov	r5,r23
 8001d6c:	d9811e04 	addi	r6,sp,1144
 8001d70:	8007f840 	call	8007f84 <__sprint_r>
 8001d74:	103cae1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001d78:	d8c12017 	ldw	r3,1152(sp)
 8001d7c:	da000404 	addi	r8,sp,16
 8001d80:	003dae06 	br	800143c <__alt_data_end+0xfc00143c>
 8001d84:	b009883a 	mov	r4,r22
 8001d88:	b80b883a 	mov	r5,r23
 8001d8c:	d9811e04 	addi	r6,sp,1144
 8001d90:	8007f840 	call	8007f84 <__sprint_r>
 8001d94:	103ca61e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001d98:	d8c12017 	ldw	r3,1152(sp)
 8001d9c:	da000404 	addi	r8,sp,16
 8001da0:	003d6c06 	br	8001354 <__alt_data_end+0xfc001354>
 8001da4:	b009883a 	mov	r4,r22
 8001da8:	b80b883a 	mov	r5,r23
 8001dac:	d9811e04 	addi	r6,sp,1144
 8001db0:	8007f840 	call	8007f84 <__sprint_r>
 8001db4:	103c9e1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001db8:	d8c12017 	ldw	r3,1152(sp)
 8001dbc:	da000404 	addi	r8,sp,16
 8001dc0:	003d7206 	br	800138c <__alt_data_end+0xfc00138c>
 8001dc4:	d9413b17 	ldw	r5,1260(sp)
 8001dc8:	d8c10e04 	addi	r3,sp,1080
 8001dcc:	988003cc 	andi	r2,r19,15
 8001dd0:	e008973a 	slli	r4,fp,28
 8001dd4:	2885883a 	add	r2,r5,r2
 8001dd8:	9826d13a 	srli	r19,r19,4
 8001ddc:	10800003 	ldbu	r2,0(r2)
 8001de0:	e038d13a 	srli	fp,fp,4
 8001de4:	18ffffc4 	addi	r3,r3,-1
 8001de8:	24e6b03a 	or	r19,r4,r19
 8001dec:	18800005 	stb	r2,0(r3)
 8001df0:	9f04b03a 	or	r2,r19,fp
 8001df4:	103ff51e 	bne	r2,zero,8001dcc <__alt_data_end+0xfc001dcc>
 8001df8:	db012817 	ldw	r12,1184(sp)
 8001dfc:	d8c13115 	stw	r3,1220(sp)
 8001e00:	60e5c83a 	sub	r18,r12,r3
 8001e04:	003d0206 	br	8001210 <__alt_data_end+0xfc001210>
 8001e08:	dc012617 	ldw	r16,1176(sp)
 8001e0c:	0401b10e 	bge	zero,r16,80024d4 <___vfprintf_internal_r+0x1900>
 8001e10:	db013117 	ldw	r12,1220(sp)
 8001e14:	dac13317 	ldw	r11,1228(sp)
 8001e18:	62e1883a 	add	r16,r12,r11
 8001e1c:	db013417 	ldw	r12,1232(sp)
 8001e20:	5825883a 	mov	r18,r11
 8001e24:	62c0010e 	bge	r12,r11,8001e2c <___vfprintf_internal_r+0x1258>
 8001e28:	6025883a 	mov	r18,r12
 8001e2c:	04800b0e 	bge	zero,r18,8001e5c <___vfprintf_internal_r+0x1288>
 8001e30:	d8811f17 	ldw	r2,1148(sp)
 8001e34:	dac13117 	ldw	r11,1220(sp)
 8001e38:	1c87883a 	add	r3,r3,r18
 8001e3c:	10800044 	addi	r2,r2,1
 8001e40:	42c00015 	stw	r11,0(r8)
 8001e44:	44800115 	stw	r18,4(r8)
 8001e48:	d8c12015 	stw	r3,1152(sp)
 8001e4c:	d8811f15 	stw	r2,1148(sp)
 8001e50:	010001c4 	movi	r4,7
 8001e54:	20824f16 	blt	r4,r2,8002794 <___vfprintf_internal_r+0x1bc0>
 8001e58:	42000204 	addi	r8,r8,8
 8001e5c:	90024b16 	blt	r18,zero,800278c <___vfprintf_internal_r+0x1bb8>
 8001e60:	db013417 	ldw	r12,1232(sp)
 8001e64:	64a5c83a 	sub	r18,r12,r18
 8001e68:	0480730e 	bge	zero,r18,8002038 <___vfprintf_internal_r+0x1464>
 8001e6c:	05400404 	movi	r21,16
 8001e70:	d8811f17 	ldw	r2,1148(sp)
 8001e74:	ac817d0e 	bge	r21,r18,800246c <___vfprintf_internal_r+0x1898>
 8001e78:	01420074 	movhi	r5,2049
 8001e7c:	297f5484 	addi	r5,r5,-686
 8001e80:	d9412c15 	stw	r5,1200(sp)
 8001e84:	070001c4 	movi	fp,7
 8001e88:	00000306 	br	8001e98 <___vfprintf_internal_r+0x12c4>
 8001e8c:	42000204 	addi	r8,r8,8
 8001e90:	94bffc04 	addi	r18,r18,-16
 8001e94:	ac81780e 	bge	r21,r18,8002478 <___vfprintf_internal_r+0x18a4>
 8001e98:	18c00404 	addi	r3,r3,16
 8001e9c:	10800044 	addi	r2,r2,1
 8001ea0:	45000015 	stw	r20,0(r8)
 8001ea4:	45400115 	stw	r21,4(r8)
 8001ea8:	d8c12015 	stw	r3,1152(sp)
 8001eac:	d8811f15 	stw	r2,1148(sp)
 8001eb0:	e0bff60e 	bge	fp,r2,8001e8c <__alt_data_end+0xfc001e8c>
 8001eb4:	b009883a 	mov	r4,r22
 8001eb8:	b80b883a 	mov	r5,r23
 8001ebc:	d9811e04 	addi	r6,sp,1144
 8001ec0:	8007f840 	call	8007f84 <__sprint_r>
 8001ec4:	103c5a1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001ec8:	d8c12017 	ldw	r3,1152(sp)
 8001ecc:	d8811f17 	ldw	r2,1148(sp)
 8001ed0:	da000404 	addi	r8,sp,16
 8001ed4:	003fee06 	br	8001e90 <__alt_data_end+0xfc001e90>
 8001ed8:	dac10e04 	addi	r11,sp,1080
 8001edc:	0025883a 	mov	r18,zero
 8001ee0:	dac13115 	stw	r11,1220(sp)
 8001ee4:	003cca06 	br	8001210 <__alt_data_end+0xfc001210>
 8001ee8:	b009883a 	mov	r4,r22
 8001eec:	b80b883a 	mov	r5,r23
 8001ef0:	d9811e04 	addi	r6,sp,1144
 8001ef4:	8007f840 	call	8007f84 <__sprint_r>
 8001ef8:	103c4d1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001efc:	d8c12017 	ldw	r3,1152(sp)
 8001f00:	d8812787 	ldb	r2,1182(sp)
 8001f04:	da000404 	addi	r8,sp,16
 8001f08:	003d0506 	br	8001320 <__alt_data_end+0xfc001320>
 8001f0c:	dac12d17 	ldw	r11,1204(sp)
 8001f10:	14c00017 	ldw	r19,0(r2)
 8001f14:	0039883a 	mov	fp,zero
 8001f18:	5ac00104 	addi	r11,r11,4
 8001f1c:	dac12d15 	stw	r11,1204(sp)
 8001f20:	0005883a 	mov	r2,zero
 8001f24:	9807883a 	mov	r3,r19
 8001f28:	003c9c06 	br	800119c <__alt_data_end+0xfc00119c>
 8001f2c:	657fffc4 	addi	r21,r12,-1
 8001f30:	057f5c0e 	bge	zero,r21,8001ca4 <__alt_data_end+0xfc001ca4>
 8001f34:	07000404 	movi	fp,16
 8001f38:	e5408f0e 	bge	fp,r21,8002178 <___vfprintf_internal_r+0x15a4>
 8001f3c:	01020074 	movhi	r4,2049
 8001f40:	213f5484 	addi	r4,r4,-686
 8001f44:	d9012c15 	stw	r4,1200(sp)
 8001f48:	01c001c4 	movi	r7,7
 8001f4c:	00000306 	br	8001f5c <___vfprintf_internal_r+0x1388>
 8001f50:	94800204 	addi	r18,r18,8
 8001f54:	ad7ffc04 	addi	r21,r21,-16
 8001f58:	e5408a0e 	bge	fp,r21,8002184 <___vfprintf_internal_r+0x15b0>
 8001f5c:	18c00404 	addi	r3,r3,16
 8001f60:	84000044 	addi	r16,r16,1
 8001f64:	95000015 	stw	r20,0(r18)
 8001f68:	97000115 	stw	fp,4(r18)
 8001f6c:	d8c12015 	stw	r3,1152(sp)
 8001f70:	dc011f15 	stw	r16,1148(sp)
 8001f74:	3c3ff60e 	bge	r7,r16,8001f50 <__alt_data_end+0xfc001f50>
 8001f78:	b009883a 	mov	r4,r22
 8001f7c:	b80b883a 	mov	r5,r23
 8001f80:	d9811e04 	addi	r6,sp,1144
 8001f84:	d9c13d15 	stw	r7,1268(sp)
 8001f88:	8007f840 	call	8007f84 <__sprint_r>
 8001f8c:	d9c13d17 	ldw	r7,1268(sp)
 8001f90:	103c271e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8001f94:	d8c12017 	ldw	r3,1152(sp)
 8001f98:	dc011f17 	ldw	r16,1148(sp)
 8001f9c:	dc800404 	addi	r18,sp,16
 8001fa0:	003fec06 	br	8001f54 <__alt_data_end+0xfc001f54>
 8001fa4:	1cc00017 	ldw	r19,0(r3)
 8001fa8:	dac12d17 	ldw	r11,1204(sp)
 8001fac:	9839d7fa 	srai	fp,r19,31
 8001fb0:	5ac00104 	addi	r11,r11,4
 8001fb4:	dac12d15 	stw	r11,1204(sp)
 8001fb8:	e005883a 	mov	r2,fp
 8001fbc:	003d9006 	br	8001600 <__alt_data_end+0xfc001600>
 8001fc0:	00800084 	movi	r2,2
 8001fc4:	9f06b03a 	or	r3,r19,fp
 8001fc8:	003c7406 	br	800119c <__alt_data_end+0xfc00119c>
 8001fcc:	db012d17 	ldw	r12,1204(sp)
 8001fd0:	14c00017 	ldw	r19,0(r2)
 8001fd4:	0039883a 	mov	fp,zero
 8001fd8:	63000104 	addi	r12,r12,4
 8001fdc:	db012d15 	stw	r12,1204(sp)
 8001fe0:	00800044 	movi	r2,1
 8001fe4:	9807883a 	mov	r3,r19
 8001fe8:	003c6c06 	br	800119c <__alt_data_end+0xfc00119c>
 8001fec:	10803fcc 	andi	r2,r2,255
 8001ff0:	1080201c 	xori	r2,r2,128
 8001ff4:	10bfe004 	addi	r2,r2,-128
 8001ff8:	01000c04 	movi	r4,48
 8001ffc:	1101a526 	beq	r2,r4,8002694 <___vfprintf_internal_r+0x1ac0>
 8002000:	dac13117 	ldw	r11,1220(sp)
 8002004:	db012817 	ldw	r12,1184(sp)
 8002008:	193fffc5 	stb	r4,-1(r3)
 800200c:	5affffc4 	addi	r11,r11,-1
 8002010:	dac13115 	stw	r11,1220(sp)
 8002014:	62e5c83a 	sub	r18,r12,r11
 8002018:	003c7d06 	br	8001210 <__alt_data_end+0xfc001210>
 800201c:	b009883a 	mov	r4,r22
 8002020:	b80b883a 	mov	r5,r23
 8002024:	d9811e04 	addi	r6,sp,1144
 8002028:	8007f840 	call	8007f84 <__sprint_r>
 800202c:	103c001e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002030:	d8c12017 	ldw	r3,1152(sp)
 8002034:	da000404 	addi	r8,sp,16
 8002038:	db013117 	ldw	r12,1220(sp)
 800203c:	dac13417 	ldw	r11,1232(sp)
 8002040:	d8812617 	ldw	r2,1176(sp)
 8002044:	62e5883a 	add	r18,r12,r11
 8002048:	db013317 	ldw	r12,1228(sp)
 800204c:	13000216 	blt	r2,r12,8002058 <___vfprintf_internal_r+0x1484>
 8002050:	8900004c 	andi	r4,r17,1
 8002054:	20000c26 	beq	r4,zero,8002088 <___vfprintf_internal_r+0x14b4>
 8002058:	dac13817 	ldw	r11,1248(sp)
 800205c:	d9011f17 	ldw	r4,1148(sp)
 8002060:	db013517 	ldw	r12,1236(sp)
 8002064:	1ac7883a 	add	r3,r3,r11
 8002068:	21000044 	addi	r4,r4,1
 800206c:	43000015 	stw	r12,0(r8)
 8002070:	42c00115 	stw	r11,4(r8)
 8002074:	d8c12015 	stw	r3,1152(sp)
 8002078:	d9011f15 	stw	r4,1148(sp)
 800207c:	014001c4 	movi	r5,7
 8002080:	2901cc16 	blt	r5,r4,80027b4 <___vfprintf_internal_r+0x1be0>
 8002084:	42000204 	addi	r8,r8,8
 8002088:	dac13317 	ldw	r11,1228(sp)
 800208c:	8489c83a 	sub	r4,r16,r18
 8002090:	5885c83a 	sub	r2,r11,r2
 8002094:	1021883a 	mov	r16,r2
 8002098:	2080010e 	bge	r4,r2,80020a0 <___vfprintf_internal_r+0x14cc>
 800209c:	2021883a 	mov	r16,r4
 80020a0:	04000a0e 	bge	zero,r16,80020cc <___vfprintf_internal_r+0x14f8>
 80020a4:	d9011f17 	ldw	r4,1148(sp)
 80020a8:	1c07883a 	add	r3,r3,r16
 80020ac:	44800015 	stw	r18,0(r8)
 80020b0:	21000044 	addi	r4,r4,1
 80020b4:	44000115 	stw	r16,4(r8)
 80020b8:	d8c12015 	stw	r3,1152(sp)
 80020bc:	d9011f15 	stw	r4,1148(sp)
 80020c0:	014001c4 	movi	r5,7
 80020c4:	2901d616 	blt	r5,r4,8002820 <___vfprintf_internal_r+0x1c4c>
 80020c8:	42000204 	addi	r8,r8,8
 80020cc:	8001df16 	blt	r16,zero,800284c <___vfprintf_internal_r+0x1c78>
 80020d0:	1421c83a 	sub	r16,r2,r16
 80020d4:	043ce60e 	bge	zero,r16,8001470 <__alt_data_end+0xfc001470>
 80020d8:	04800404 	movi	r18,16
 80020dc:	d8811f17 	ldw	r2,1148(sp)
 80020e0:	943efc0e 	bge	r18,r16,8001cd4 <__alt_data_end+0xfc001cd4>
 80020e4:	01420074 	movhi	r5,2049
 80020e8:	297f5484 	addi	r5,r5,-686
 80020ec:	d9412c15 	stw	r5,1200(sp)
 80020f0:	054001c4 	movi	r21,7
 80020f4:	00000306 	br	8002104 <___vfprintf_internal_r+0x1530>
 80020f8:	42000204 	addi	r8,r8,8
 80020fc:	843ffc04 	addi	r16,r16,-16
 8002100:	943ef70e 	bge	r18,r16,8001ce0 <__alt_data_end+0xfc001ce0>
 8002104:	18c00404 	addi	r3,r3,16
 8002108:	10800044 	addi	r2,r2,1
 800210c:	45000015 	stw	r20,0(r8)
 8002110:	44800115 	stw	r18,4(r8)
 8002114:	d8c12015 	stw	r3,1152(sp)
 8002118:	d8811f15 	stw	r2,1148(sp)
 800211c:	a8bff60e 	bge	r21,r2,80020f8 <__alt_data_end+0xfc0020f8>
 8002120:	b009883a 	mov	r4,r22
 8002124:	b80b883a 	mov	r5,r23
 8002128:	d9811e04 	addi	r6,sp,1144
 800212c:	8007f840 	call	8007f84 <__sprint_r>
 8002130:	103bbf1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002134:	d8c12017 	ldw	r3,1152(sp)
 8002138:	d8811f17 	ldw	r2,1148(sp)
 800213c:	da000404 	addi	r8,sp,16
 8002140:	003fee06 	br	80020fc <__alt_data_end+0xfc0020fc>
 8002144:	8888703a 	and	r4,r17,r2
 8002148:	203eab1e 	bne	r4,zero,8001bf8 <__alt_data_end+0xfc001bf8>
 800214c:	dc011f17 	ldw	r16,1148(sp)
 8002150:	db013117 	ldw	r12,1220(sp)
 8002154:	40800115 	stw	r2,4(r8)
 8002158:	84000044 	addi	r16,r16,1
 800215c:	43000015 	stw	r12,0(r8)
 8002160:	d8c12015 	stw	r3,1152(sp)
 8002164:	dc011f15 	stw	r16,1148(sp)
 8002168:	008001c4 	movi	r2,7
 800216c:	14000e16 	blt	r2,r16,80021a8 <___vfprintf_internal_r+0x15d4>
 8002170:	44800204 	addi	r18,r8,8
 8002174:	003ecb06 	br	8001ca4 <__alt_data_end+0xfc001ca4>
 8002178:	00820074 	movhi	r2,2049
 800217c:	10bf5484 	addi	r2,r2,-686
 8002180:	d8812c15 	stw	r2,1200(sp)
 8002184:	dac12c17 	ldw	r11,1200(sp)
 8002188:	1d47883a 	add	r3,r3,r21
 800218c:	84000044 	addi	r16,r16,1
 8002190:	92c00015 	stw	r11,0(r18)
 8002194:	95400115 	stw	r21,4(r18)
 8002198:	d8c12015 	stw	r3,1152(sp)
 800219c:	dc011f15 	stw	r16,1148(sp)
 80021a0:	008001c4 	movi	r2,7
 80021a4:	143ebe0e 	bge	r2,r16,8001ca0 <__alt_data_end+0xfc001ca0>
 80021a8:	b009883a 	mov	r4,r22
 80021ac:	b80b883a 	mov	r5,r23
 80021b0:	d9811e04 	addi	r6,sp,1144
 80021b4:	8007f840 	call	8007f84 <__sprint_r>
 80021b8:	103b9d1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80021bc:	d8c12017 	ldw	r3,1152(sp)
 80021c0:	dc011f17 	ldw	r16,1148(sp)
 80021c4:	dc800404 	addi	r18,sp,16
 80021c8:	003eb606 	br	8001ca4 <__alt_data_end+0xfc001ca4>
 80021cc:	b009883a 	mov	r4,r22
 80021d0:	b80b883a 	mov	r5,r23
 80021d4:	d9811e04 	addi	r6,sp,1144
 80021d8:	8007f840 	call	8007f84 <__sprint_r>
 80021dc:	103b941e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80021e0:	d8c12017 	ldw	r3,1152(sp)
 80021e4:	dc011f17 	ldw	r16,1148(sp)
 80021e8:	da000404 	addi	r8,sp,16
 80021ec:	003e8d06 	br	8001c24 <__alt_data_end+0xfc001c24>
 80021f0:	b009883a 	mov	r4,r22
 80021f4:	b80b883a 	mov	r5,r23
 80021f8:	d9811e04 	addi	r6,sp,1144
 80021fc:	8007f840 	call	8007f84 <__sprint_r>
 8002200:	103b8b1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002204:	d8c12017 	ldw	r3,1152(sp)
 8002208:	dc011f17 	ldw	r16,1148(sp)
 800220c:	dc800404 	addi	r18,sp,16
 8002210:	003e8f06 	br	8001c50 <__alt_data_end+0xfc001c50>
 8002214:	db010e04 	addi	r12,sp,1080
 8002218:	0025883a 	mov	r18,zero
 800221c:	db013115 	stw	r12,1220(sp)
 8002220:	003bfb06 	br	8001210 <__alt_data_end+0xfc001210>
 8002224:	b009883a 	mov	r4,r22
 8002228:	b80b883a 	mov	r5,r23
 800222c:	d9811e04 	addi	r6,sp,1144
 8002230:	8007f840 	call	8007f84 <__sprint_r>
 8002234:	103b7e1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002238:	d8c12017 	ldw	r3,1152(sp)
 800223c:	da000404 	addi	r8,sp,16
 8002240:	003c5506 	br	8001398 <__alt_data_end+0xfc001398>
 8002244:	04e7c83a 	sub	r19,zero,r19
 8002248:	9804c03a 	cmpne	r2,r19,zero
 800224c:	0739c83a 	sub	fp,zero,fp
 8002250:	e0b9c83a 	sub	fp,fp,r2
 8002254:	05400b44 	movi	r21,45
 8002258:	dd412785 	stb	r21,1182(sp)
 800225c:	da413215 	stw	r9,1224(sp)
 8002260:	00800044 	movi	r2,1
 8002264:	9f06b03a 	or	r3,r19,fp
 8002268:	003bcf06 	br	80011a8 <__alt_data_end+0xfc0011a8>
 800226c:	da013f15 	stw	r8,1276(sp)
 8002270:	da413e15 	stw	r9,1272(sp)
 8002274:	8007be00 	call	8007be0 <__fpclassifyd>
 8002278:	da013f17 	ldw	r8,1276(sp)
 800227c:	da413e17 	ldw	r9,1272(sp)
 8002280:	1000ce26 	beq	r2,zero,80025bc <___vfprintf_internal_r+0x19e8>
 8002284:	057ff7c4 	movi	r21,-33
 8002288:	00bfffc4 	movi	r2,-1
 800228c:	856a703a 	and	r21,r16,r21
 8002290:	4881f026 	beq	r9,r2,8002a54 <___vfprintf_internal_r+0x1e80>
 8002294:	008011c4 	movi	r2,71
 8002298:	a881e526 	beq	r21,r2,8002a30 <___vfprintf_internal_r+0x1e5c>
 800229c:	db013917 	ldw	r12,1252(sp)
 80022a0:	8ac04014 	ori	r11,r17,256
 80022a4:	dac12d15 	stw	r11,1204(sp)
 80022a8:	6001e416 	blt	r12,zero,8002a3c <___vfprintf_internal_r+0x1e68>
 80022ac:	dc813917 	ldw	r18,1252(sp)
 80022b0:	d8012b05 	stb	zero,1196(sp)
 80022b4:	00801984 	movi	r2,102
 80022b8:	80811826 	beq	r16,r2,800271c <___vfprintf_internal_r+0x1b48>
 80022bc:	00801184 	movi	r2,70
 80022c0:	80811626 	beq	r16,r2,800271c <___vfprintf_internal_r+0x1b48>
 80022c4:	00801144 	movi	r2,69
 80022c8:	a881e026 	beq	r21,r2,8002a4c <___vfprintf_internal_r+0x1e78>
 80022cc:	4839883a 	mov	fp,r9
 80022d0:	d8812604 	addi	r2,sp,1176
 80022d4:	d8800115 	stw	r2,4(sp)
 80022d8:	d9413717 	ldw	r5,1244(sp)
 80022dc:	d8812504 	addi	r2,sp,1172
 80022e0:	d8800215 	stw	r2,8(sp)
 80022e4:	d8812104 	addi	r2,sp,1156
 80022e8:	df000015 	stw	fp,0(sp)
 80022ec:	d8800315 	stw	r2,12(sp)
 80022f0:	b009883a 	mov	r4,r22
 80022f4:	900d883a 	mov	r6,r18
 80022f8:	01c00084 	movi	r7,2
 80022fc:	da013f15 	stw	r8,1276(sp)
 8002300:	da413e15 	stw	r9,1272(sp)
 8002304:	8002f240 	call	8002f24 <_dtoa_r>
 8002308:	d8813115 	stw	r2,1220(sp)
 800230c:	008019c4 	movi	r2,103
 8002310:	da013f17 	ldw	r8,1276(sp)
 8002314:	da413e17 	ldw	r9,1272(sp)
 8002318:	80800226 	beq	r16,r2,8002324 <___vfprintf_internal_r+0x1750>
 800231c:	008011c4 	movi	r2,71
 8002320:	8081101e 	bne	r16,r2,8002764 <___vfprintf_internal_r+0x1b90>
 8002324:	8880004c 	andi	r2,r17,1
 8002328:	1001df26 	beq	r2,zero,8002aa8 <___vfprintf_internal_r+0x1ed4>
 800232c:	db013117 	ldw	r12,1220(sp)
 8002330:	6715883a 	add	r10,r12,fp
 8002334:	d9013717 	ldw	r4,1244(sp)
 8002338:	900b883a 	mov	r5,r18
 800233c:	000d883a 	mov	r6,zero
 8002340:	000f883a 	mov	r7,zero
 8002344:	da013f15 	stw	r8,1276(sp)
 8002348:	da413e15 	stw	r9,1272(sp)
 800234c:	da813d15 	stw	r10,1268(sp)
 8002350:	800ba980 	call	800ba98 <__eqdf2>
 8002354:	da013f17 	ldw	r8,1276(sp)
 8002358:	da413e17 	ldw	r9,1272(sp)
 800235c:	da813d17 	ldw	r10,1268(sp)
 8002360:	10016526 	beq	r2,zero,80028f8 <___vfprintf_internal_r+0x1d24>
 8002364:	d8812117 	ldw	r2,1156(sp)
 8002368:	1280062e 	bgeu	r2,r10,8002384 <___vfprintf_internal_r+0x17b0>
 800236c:	01000c04 	movi	r4,48
 8002370:	10c00044 	addi	r3,r2,1
 8002374:	d8c12115 	stw	r3,1156(sp)
 8002378:	11000005 	stb	r4,0(r2)
 800237c:	d8812117 	ldw	r2,1156(sp)
 8002380:	12bffb36 	bltu	r2,r10,8002370 <__alt_data_end+0xfc002370>
 8002384:	db013117 	ldw	r12,1220(sp)
 8002388:	1305c83a 	sub	r2,r2,r12
 800238c:	d8813315 	stw	r2,1228(sp)
 8002390:	008011c4 	movi	r2,71
 8002394:	a8814a26 	beq	r21,r2,80028c0 <___vfprintf_internal_r+0x1cec>
 8002398:	00801944 	movi	r2,101
 800239c:	14020a0e 	bge	r2,r16,8002bc8 <___vfprintf_internal_r+0x1ff4>
 80023a0:	00801984 	movi	r2,102
 80023a4:	8081b626 	beq	r16,r2,8002a80 <___vfprintf_internal_r+0x1eac>
 80023a8:	db012617 	ldw	r12,1176(sp)
 80023ac:	db013415 	stw	r12,1232(sp)
 80023b0:	db013417 	ldw	r12,1232(sp)
 80023b4:	dac13317 	ldw	r11,1228(sp)
 80023b8:	62c1a816 	blt	r12,r11,8002a5c <___vfprintf_internal_r+0x1e88>
 80023bc:	8c40004c 	andi	r17,r17,1
 80023c0:	8801ca1e 	bne	r17,zero,8002aec <___vfprintf_internal_r+0x1f18>
 80023c4:	6005883a 	mov	r2,r12
 80023c8:	6001b516 	blt	r12,zero,8002aa0 <___vfprintf_internal_r+0x1ecc>
 80023cc:	dc813417 	ldw	r18,1232(sp)
 80023d0:	df012b07 	ldb	fp,1196(sp)
 80023d4:	e001321e 	bne	fp,zero,80028a0 <___vfprintf_internal_r+0x1ccc>
 80023d8:	dc412d17 	ldw	r17,1204(sp)
 80023dc:	dd412783 	ldbu	r21,1182(sp)
 80023e0:	d8812b15 	stw	r2,1196(sp)
 80023e4:	dcc12d15 	stw	r19,1204(sp)
 80023e8:	d8013215 	stw	zero,1224(sp)
 80023ec:	003b8d06 	br	8001224 <__alt_data_end+0xfc001224>
 80023f0:	88c0100c 	andi	r3,r17,64
 80023f4:	18008226 	beq	r3,zero,8002600 <___vfprintf_internal_r+0x1a2c>
 80023f8:	dac12d17 	ldw	r11,1204(sp)
 80023fc:	14c0000b 	ldhu	r19,0(r2)
 8002400:	0039883a 	mov	fp,zero
 8002404:	5ac00104 	addi	r11,r11,4
 8002408:	dac12d15 	stw	r11,1204(sp)
 800240c:	003c8f06 	br	800164c <__alt_data_end+0xfc00164c>
 8002410:	1c000007 	ldb	r16,0(r3)
 8002414:	1805883a 	mov	r2,r3
 8002418:	003a5506 	br	8000d70 <__alt_data_end+0xfc000d70>
 800241c:	00800084 	movi	r2,2
 8002420:	003b5e06 	br	800119c <__alt_data_end+0xfc00119c>
 8002424:	8880040c 	andi	r2,r17,16
 8002428:	1000091e 	bne	r2,zero,8002450 <___vfprintf_internal_r+0x187c>
 800242c:	8c40100c 	andi	r17,r17,64
 8002430:	88000726 	beq	r17,zero,8002450 <___vfprintf_internal_r+0x187c>
 8002434:	db012d17 	ldw	r12,1204(sp)
 8002438:	dac12f17 	ldw	r11,1212(sp)
 800243c:	60800017 	ldw	r2,0(r12)
 8002440:	63000104 	addi	r12,r12,4
 8002444:	db012d15 	stw	r12,1204(sp)
 8002448:	12c0000d 	sth	r11,0(r2)
 800244c:	003a1e06 	br	8000cc8 <__alt_data_end+0xfc000cc8>
 8002450:	db012d17 	ldw	r12,1204(sp)
 8002454:	dac12f17 	ldw	r11,1212(sp)
 8002458:	60800017 	ldw	r2,0(r12)
 800245c:	63000104 	addi	r12,r12,4
 8002460:	db012d15 	stw	r12,1204(sp)
 8002464:	12c00015 	stw	r11,0(r2)
 8002468:	003a1706 	br	8000cc8 <__alt_data_end+0xfc000cc8>
 800246c:	01020074 	movhi	r4,2049
 8002470:	213f5484 	addi	r4,r4,-686
 8002474:	d9012c15 	stw	r4,1200(sp)
 8002478:	dac12c17 	ldw	r11,1200(sp)
 800247c:	1c87883a 	add	r3,r3,r18
 8002480:	10800044 	addi	r2,r2,1
 8002484:	42c00015 	stw	r11,0(r8)
 8002488:	44800115 	stw	r18,4(r8)
 800248c:	d8c12015 	stw	r3,1152(sp)
 8002490:	d8811f15 	stw	r2,1148(sp)
 8002494:	010001c4 	movi	r4,7
 8002498:	20bee016 	blt	r4,r2,800201c <__alt_data_end+0xfc00201c>
 800249c:	42000204 	addi	r8,r8,8
 80024a0:	003ee506 	br	8002038 <__alt_data_end+0xfc002038>
 80024a4:	01020074 	movhi	r4,2049
 80024a8:	213f5484 	addi	r4,r4,-686
 80024ac:	d9012c15 	stw	r4,1200(sp)
 80024b0:	003bd806 	br	8001414 <__alt_data_end+0xfc001414>
 80024b4:	b009883a 	mov	r4,r22
 80024b8:	b80b883a 	mov	r5,r23
 80024bc:	d9811e04 	addi	r6,sp,1144
 80024c0:	8007f840 	call	8007f84 <__sprint_r>
 80024c4:	103ada1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80024c8:	d8c12017 	ldw	r3,1152(sp)
 80024cc:	da000404 	addi	r8,sp,16
 80024d0:	003d6b06 	br	8001a80 <__alt_data_end+0xfc001a80>
 80024d4:	d8811f17 	ldw	r2,1148(sp)
 80024d8:	03020074 	movhi	r12,2049
 80024dc:	01000044 	movi	r4,1
 80024e0:	18c00044 	addi	r3,r3,1
 80024e4:	10800044 	addi	r2,r2,1
 80024e8:	633f5404 	addi	r12,r12,-688
 80024ec:	41000115 	stw	r4,4(r8)
 80024f0:	43000015 	stw	r12,0(r8)
 80024f4:	d8c12015 	stw	r3,1152(sp)
 80024f8:	d8811f15 	stw	r2,1148(sp)
 80024fc:	010001c4 	movi	r4,7
 8002500:	20804916 	blt	r4,r2,8002628 <___vfprintf_internal_r+0x1a54>
 8002504:	42000204 	addi	r8,r8,8
 8002508:	8000041e 	bne	r16,zero,800251c <___vfprintf_internal_r+0x1948>
 800250c:	dac13317 	ldw	r11,1228(sp)
 8002510:	5800021e 	bne	r11,zero,800251c <___vfprintf_internal_r+0x1948>
 8002514:	8880004c 	andi	r2,r17,1
 8002518:	103bd526 	beq	r2,zero,8001470 <__alt_data_end+0xfc001470>
 800251c:	db013817 	ldw	r12,1248(sp)
 8002520:	d8811f17 	ldw	r2,1148(sp)
 8002524:	dac13517 	ldw	r11,1236(sp)
 8002528:	1b07883a 	add	r3,r3,r12
 800252c:	10800044 	addi	r2,r2,1
 8002530:	42c00015 	stw	r11,0(r8)
 8002534:	43000115 	stw	r12,4(r8)
 8002538:	d8c12015 	stw	r3,1152(sp)
 800253c:	d8811f15 	stw	r2,1148(sp)
 8002540:	010001c4 	movi	r4,7
 8002544:	20813016 	blt	r4,r2,8002a08 <___vfprintf_internal_r+0x1e34>
 8002548:	42000204 	addi	r8,r8,8
 800254c:	0421c83a 	sub	r16,zero,r16
 8002550:	0400630e 	bge	zero,r16,80026e0 <___vfprintf_internal_r+0x1b0c>
 8002554:	04800404 	movi	r18,16
 8002558:	94009f0e 	bge	r18,r16,80027d8 <___vfprintf_internal_r+0x1c04>
 800255c:	01020074 	movhi	r4,2049
 8002560:	213f5484 	addi	r4,r4,-686
 8002564:	d9012c15 	stw	r4,1200(sp)
 8002568:	054001c4 	movi	r21,7
 800256c:	00000306 	br	800257c <___vfprintf_internal_r+0x19a8>
 8002570:	42000204 	addi	r8,r8,8
 8002574:	843ffc04 	addi	r16,r16,-16
 8002578:	94009a0e 	bge	r18,r16,80027e4 <___vfprintf_internal_r+0x1c10>
 800257c:	18c00404 	addi	r3,r3,16
 8002580:	10800044 	addi	r2,r2,1
 8002584:	45000015 	stw	r20,0(r8)
 8002588:	44800115 	stw	r18,4(r8)
 800258c:	d8c12015 	stw	r3,1152(sp)
 8002590:	d8811f15 	stw	r2,1148(sp)
 8002594:	a8bff60e 	bge	r21,r2,8002570 <__alt_data_end+0xfc002570>
 8002598:	b009883a 	mov	r4,r22
 800259c:	b80b883a 	mov	r5,r23
 80025a0:	d9811e04 	addi	r6,sp,1144
 80025a4:	8007f840 	call	8007f84 <__sprint_r>
 80025a8:	103aa11e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80025ac:	d8c12017 	ldw	r3,1152(sp)
 80025b0:	d8811f17 	ldw	r2,1148(sp)
 80025b4:	da000404 	addi	r8,sp,16
 80025b8:	003fee06 	br	8002574 <__alt_data_end+0xfc002574>
 80025bc:	008011c4 	movi	r2,71
 80025c0:	1400b316 	blt	r2,r16,8002890 <___vfprintf_internal_r+0x1cbc>
 80025c4:	03020074 	movhi	r12,2049
 80025c8:	633f4604 	addi	r12,r12,-744
 80025cc:	db013115 	stw	r12,1220(sp)
 80025d0:	00c000c4 	movi	r3,3
 80025d4:	00bfdfc4 	movi	r2,-129
 80025d8:	d8c12b15 	stw	r3,1196(sp)
 80025dc:	88a2703a 	and	r17,r17,r2
 80025e0:	dd412783 	ldbu	r21,1182(sp)
 80025e4:	dcc12d15 	stw	r19,1204(sp)
 80025e8:	1825883a 	mov	r18,r3
 80025ec:	d8013215 	stw	zero,1224(sp)
 80025f0:	d8013415 	stw	zero,1232(sp)
 80025f4:	003b0b06 	br	8001224 <__alt_data_end+0xfc001224>
 80025f8:	4825883a 	mov	r18,r9
 80025fc:	003cba06 	br	80018e8 <__alt_data_end+0xfc0018e8>
 8002600:	db012d17 	ldw	r12,1204(sp)
 8002604:	14c00017 	ldw	r19,0(r2)
 8002608:	0039883a 	mov	fp,zero
 800260c:	63000104 	addi	r12,r12,4
 8002610:	db012d15 	stw	r12,1204(sp)
 8002614:	003c0d06 	br	800164c <__alt_data_end+0xfc00164c>
 8002618:	00820074 	movhi	r2,2049
 800261c:	10bf4404 	addi	r2,r2,-752
 8002620:	d8813115 	stw	r2,1220(sp)
 8002624:	003ac406 	br	8001138 <__alt_data_end+0xfc001138>
 8002628:	b009883a 	mov	r4,r22
 800262c:	b80b883a 	mov	r5,r23
 8002630:	d9811e04 	addi	r6,sp,1144
 8002634:	8007f840 	call	8007f84 <__sprint_r>
 8002638:	103a7d1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 800263c:	dc012617 	ldw	r16,1176(sp)
 8002640:	d8c12017 	ldw	r3,1152(sp)
 8002644:	da000404 	addi	r8,sp,16
 8002648:	003faf06 	br	8002508 <__alt_data_end+0xfc002508>
 800264c:	db012e17 	ldw	r12,1208(sp)
 8002650:	1805883a 	mov	r2,r3
 8002654:	dac12d15 	stw	r11,1204(sp)
 8002658:	0319c83a 	sub	r12,zero,r12
 800265c:	db012e15 	stw	r12,1208(sp)
 8002660:	003a7e06 	br	800105c <__alt_data_end+0xfc00105c>
 8002664:	18800044 	addi	r2,r3,1
 8002668:	8c400814 	ori	r17,r17,32
 800266c:	1c000047 	ldb	r16,1(r3)
 8002670:	0039bf06 	br	8000d70 <__alt_data_end+0xfc000d70>
 8002674:	b009883a 	mov	r4,r22
 8002678:	b80b883a 	mov	r5,r23
 800267c:	d9811e04 	addi	r6,sp,1144
 8002680:	8007f840 	call	8007f84 <__sprint_r>
 8002684:	103a6a1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002688:	d8c12017 	ldw	r3,1152(sp)
 800268c:	da000404 	addi	r8,sp,16
 8002690:	003d0c06 	br	8001ac4 <__alt_data_end+0xfc001ac4>
 8002694:	db012817 	ldw	r12,1184(sp)
 8002698:	d8c13117 	ldw	r3,1220(sp)
 800269c:	60e5c83a 	sub	r18,r12,r3
 80026a0:	003adb06 	br	8001210 <__alt_data_end+0xfc001210>
 80026a4:	da013f15 	stw	r8,1276(sp)
 80026a8:	8000b3c0 	call	8000b3c <strlen>
 80026ac:	1025883a 	mov	r18,r2
 80026b0:	da013f17 	ldw	r8,1276(sp)
 80026b4:	903c8e0e 	bge	r18,zero,80018f0 <__alt_data_end+0xfc0018f0>
 80026b8:	0005883a 	mov	r2,zero
 80026bc:	003c8c06 	br	80018f0 <__alt_data_end+0xfc0018f0>
 80026c0:	b009883a 	mov	r4,r22
 80026c4:	b80b883a 	mov	r5,r23
 80026c8:	d9811e04 	addi	r6,sp,1144
 80026cc:	8007f840 	call	8007f84 <__sprint_r>
 80026d0:	103a571e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80026d4:	d8c12017 	ldw	r3,1152(sp)
 80026d8:	d8811f17 	ldw	r2,1148(sp)
 80026dc:	da000404 	addi	r8,sp,16
 80026e0:	db013317 	ldw	r12,1228(sp)
 80026e4:	dac13117 	ldw	r11,1220(sp)
 80026e8:	10800044 	addi	r2,r2,1
 80026ec:	60c7883a 	add	r3,r12,r3
 80026f0:	42c00015 	stw	r11,0(r8)
 80026f4:	43000115 	stw	r12,4(r8)
 80026f8:	d8c12015 	stw	r3,1152(sp)
 80026fc:	d8811f15 	stw	r2,1148(sp)
 8002700:	010001c4 	movi	r4,7
 8002704:	20bb590e 	bge	r4,r2,800146c <__alt_data_end+0xfc00146c>
 8002708:	003d7e06 	br	8001d04 <__alt_data_end+0xfc001d04>
 800270c:	01020074 	movhi	r4,2049
 8002710:	213f5884 	addi	r4,r4,-670
 8002714:	d9013615 	stw	r4,1240(sp)
 8002718:	003af606 	br	80012f4 <__alt_data_end+0xfc0012f4>
 800271c:	d8812604 	addi	r2,sp,1176
 8002720:	d8800115 	stw	r2,4(sp)
 8002724:	d9413717 	ldw	r5,1244(sp)
 8002728:	d8812504 	addi	r2,sp,1172
 800272c:	d8800215 	stw	r2,8(sp)
 8002730:	d8812104 	addi	r2,sp,1156
 8002734:	da400015 	stw	r9,0(sp)
 8002738:	d8800315 	stw	r2,12(sp)
 800273c:	b009883a 	mov	r4,r22
 8002740:	900d883a 	mov	r6,r18
 8002744:	01c000c4 	movi	r7,3
 8002748:	da013f15 	stw	r8,1276(sp)
 800274c:	da413e15 	stw	r9,1272(sp)
 8002750:	8002f240 	call	8002f24 <_dtoa_r>
 8002754:	da413e17 	ldw	r9,1272(sp)
 8002758:	da013f17 	ldw	r8,1276(sp)
 800275c:	d8813115 	stw	r2,1220(sp)
 8002760:	4839883a 	mov	fp,r9
 8002764:	dac13117 	ldw	r11,1220(sp)
 8002768:	00801184 	movi	r2,70
 800276c:	5f15883a 	add	r10,r11,fp
 8002770:	a8bef01e 	bne	r21,r2,8002334 <__alt_data_end+0xfc002334>
 8002774:	59000007 	ldb	r4,0(r11)
 8002778:	00800c04 	movi	r2,48
 800277c:	2080e026 	beq	r4,r2,8002b00 <___vfprintf_internal_r+0x1f2c>
 8002780:	d8c12617 	ldw	r3,1176(sp)
 8002784:	50d5883a 	add	r10,r10,r3
 8002788:	003eea06 	br	8002334 <__alt_data_end+0xfc002334>
 800278c:	0025883a 	mov	r18,zero
 8002790:	003db306 	br	8001e60 <__alt_data_end+0xfc001e60>
 8002794:	b009883a 	mov	r4,r22
 8002798:	b80b883a 	mov	r5,r23
 800279c:	d9811e04 	addi	r6,sp,1144
 80027a0:	8007f840 	call	8007f84 <__sprint_r>
 80027a4:	103a221e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80027a8:	d8c12017 	ldw	r3,1152(sp)
 80027ac:	da000404 	addi	r8,sp,16
 80027b0:	003daa06 	br	8001e5c <__alt_data_end+0xfc001e5c>
 80027b4:	b009883a 	mov	r4,r22
 80027b8:	b80b883a 	mov	r5,r23
 80027bc:	d9811e04 	addi	r6,sp,1144
 80027c0:	8007f840 	call	8007f84 <__sprint_r>
 80027c4:	103a1a1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 80027c8:	d8812617 	ldw	r2,1176(sp)
 80027cc:	d8c12017 	ldw	r3,1152(sp)
 80027d0:	da000404 	addi	r8,sp,16
 80027d4:	003e2c06 	br	8002088 <__alt_data_end+0xfc002088>
 80027d8:	03020074 	movhi	r12,2049
 80027dc:	633f5484 	addi	r12,r12,-686
 80027e0:	db012c15 	stw	r12,1200(sp)
 80027e4:	dac12c17 	ldw	r11,1200(sp)
 80027e8:	1c07883a 	add	r3,r3,r16
 80027ec:	10800044 	addi	r2,r2,1
 80027f0:	42c00015 	stw	r11,0(r8)
 80027f4:	44000115 	stw	r16,4(r8)
 80027f8:	d8c12015 	stw	r3,1152(sp)
 80027fc:	d8811f15 	stw	r2,1148(sp)
 8002800:	010001c4 	movi	r4,7
 8002804:	20bfae16 	blt	r4,r2,80026c0 <__alt_data_end+0xfc0026c0>
 8002808:	42000204 	addi	r8,r8,8
 800280c:	003fb406 	br	80026e0 <__alt_data_end+0xfc0026e0>
 8002810:	03020074 	movhi	r12,2049
 8002814:	633f5884 	addi	r12,r12,-670
 8002818:	db013615 	stw	r12,1240(sp)
 800281c:	003b3806 	br	8001500 <__alt_data_end+0xfc001500>
 8002820:	b009883a 	mov	r4,r22
 8002824:	b80b883a 	mov	r5,r23
 8002828:	d9811e04 	addi	r6,sp,1144
 800282c:	8007f840 	call	8007f84 <__sprint_r>
 8002830:	1039ff1e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002834:	d8812617 	ldw	r2,1176(sp)
 8002838:	db013317 	ldw	r12,1228(sp)
 800283c:	d8c12017 	ldw	r3,1152(sp)
 8002840:	da000404 	addi	r8,sp,16
 8002844:	6085c83a 	sub	r2,r12,r2
 8002848:	003e2006 	br	80020cc <__alt_data_end+0xfc0020cc>
 800284c:	0021883a 	mov	r16,zero
 8002850:	003e1f06 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002854:	00800184 	movi	r2,6
 8002858:	1240012e 	bgeu	r2,r9,8002860 <___vfprintf_internal_r+0x1c8c>
 800285c:	1013883a 	mov	r9,r2
 8002860:	4825883a 	mov	r18,r9
 8002864:	4805883a 	mov	r2,r9
 8002868:	48009e16 	blt	r9,zero,8002ae4 <___vfprintf_internal_r+0x1f10>
 800286c:	d8812b15 	stw	r2,1196(sp)
 8002870:	00820074 	movhi	r2,2049
 8002874:	10bf5204 	addi	r2,r2,-696
 8002878:	d8813115 	stw	r2,1220(sp)
 800287c:	dcc12d15 	stw	r19,1204(sp)
 8002880:	d8013215 	stw	zero,1224(sp)
 8002884:	d8013415 	stw	zero,1232(sp)
 8002888:	0005883a 	mov	r2,zero
 800288c:	003a6c06 	br	8001240 <__alt_data_end+0xfc001240>
 8002890:	00820074 	movhi	r2,2049
 8002894:	10bf4704 	addi	r2,r2,-740
 8002898:	d8813115 	stw	r2,1220(sp)
 800289c:	003f4c06 	br	80025d0 <__alt_data_end+0xfc0025d0>
 80028a0:	00c00b44 	movi	r3,45
 80028a4:	d8812b15 	stw	r2,1196(sp)
 80028a8:	dc412d17 	ldw	r17,1204(sp)
 80028ac:	d8c12785 	stb	r3,1182(sp)
 80028b0:	dcc12d15 	stw	r19,1204(sp)
 80028b4:	d8013215 	stw	zero,1224(sp)
 80028b8:	00800b44 	movi	r2,45
 80028bc:	003a5d06 	br	8001234 <__alt_data_end+0xfc001234>
 80028c0:	d8c12617 	ldw	r3,1176(sp)
 80028c4:	00bfff44 	movi	r2,-3
 80028c8:	18800d16 	blt	r3,r2,8002900 <___vfprintf_internal_r+0x1d2c>
 80028cc:	48c00c16 	blt	r9,r3,8002900 <___vfprintf_internal_r+0x1d2c>
 80028d0:	d8c13415 	stw	r3,1232(sp)
 80028d4:	040019c4 	movi	r16,103
 80028d8:	003eb506 	br	80023b0 <__alt_data_end+0xfc0023b0>
 80028dc:	05400b44 	movi	r21,45
 80028e0:	dd412785 	stb	r21,1182(sp)
 80028e4:	003a0f06 	br	8001124 <__alt_data_end+0xfc001124>
 80028e8:	01020074 	movhi	r4,2049
 80028ec:	213f5484 	addi	r4,r4,-686
 80028f0:	d9012c15 	stw	r4,1200(sp)
 80028f4:	003cb106 	br	8001bbc <__alt_data_end+0xfc001bbc>
 80028f8:	5005883a 	mov	r2,r10
 80028fc:	003ea106 	br	8002384 <__alt_data_end+0xfc002384>
 8002900:	843fff84 	addi	r16,r16,-2
 8002904:	1f3fffc4 	addi	fp,r3,-1
 8002908:	df012615 	stw	fp,1176(sp)
 800290c:	dc0122c5 	stb	r16,1163(sp)
 8002910:	e0009516 	blt	fp,zero,8002b68 <___vfprintf_internal_r+0x1f94>
 8002914:	00800ac4 	movi	r2,43
 8002918:	d8812305 	stb	r2,1164(sp)
 800291c:	00800244 	movi	r2,9
 8002920:	1700690e 	bge	r2,fp,8002ac8 <___vfprintf_internal_r+0x1ef4>
 8002924:	dd4122c4 	addi	r21,sp,1163
 8002928:	dc012c15 	stw	r16,1200(sp)
 800292c:	8825883a 	mov	r18,r17
 8002930:	a821883a 	mov	r16,r21
 8002934:	4023883a 	mov	r17,r8
 8002938:	e009883a 	mov	r4,fp
 800293c:	01400284 	movi	r5,10
 8002940:	800a8c40 	call	800a8c4 <__modsi3>
 8002944:	10800c04 	addi	r2,r2,48
 8002948:	843fffc4 	addi	r16,r16,-1
 800294c:	e009883a 	mov	r4,fp
 8002950:	01400284 	movi	r5,10
 8002954:	80800005 	stb	r2,0(r16)
 8002958:	800a8700 	call	800a870 <__divsi3>
 800295c:	1039883a 	mov	fp,r2
 8002960:	00800244 	movi	r2,9
 8002964:	173ff416 	blt	r2,fp,8002938 <__alt_data_end+0xfc002938>
 8002968:	8811883a 	mov	r8,r17
 800296c:	e0800c04 	addi	r2,fp,48
 8002970:	9023883a 	mov	r17,r18
 8002974:	8025883a 	mov	r18,r16
 8002978:	913fffc4 	addi	r4,r18,-1
 800297c:	90bfffc5 	stb	r2,-1(r18)
 8002980:	dc012c17 	ldw	r16,1200(sp)
 8002984:	25408e2e 	bgeu	r4,r21,8002bc0 <___vfprintf_internal_r+0x1fec>
 8002988:	d9412384 	addi	r5,sp,1166
 800298c:	2c8bc83a 	sub	r5,r5,r18
 8002990:	d8c12344 	addi	r3,sp,1165
 8002994:	a94b883a 	add	r5,r21,r5
 8002998:	00000106 	br	80029a0 <___vfprintf_internal_r+0x1dcc>
 800299c:	20800003 	ldbu	r2,0(r4)
 80029a0:	18800005 	stb	r2,0(r3)
 80029a4:	18c00044 	addi	r3,r3,1
 80029a8:	21000044 	addi	r4,r4,1
 80029ac:	197ffb1e 	bne	r3,r5,800299c <__alt_data_end+0xfc00299c>
 80029b0:	d8812304 	addi	r2,sp,1164
 80029b4:	1485c83a 	sub	r2,r2,r18
 80029b8:	d8c12344 	addi	r3,sp,1165
 80029bc:	1885883a 	add	r2,r3,r2
 80029c0:	dac13317 	ldw	r11,1228(sp)
 80029c4:	156bc83a 	sub	r21,r2,r21
 80029c8:	dd413a15 	stw	r21,1256(sp)
 80029cc:	00800044 	movi	r2,1
 80029d0:	5d65883a 	add	r18,r11,r21
 80029d4:	12c0770e 	bge	r2,r11,8002bb4 <___vfprintf_internal_r+0x1fe0>
 80029d8:	94800044 	addi	r18,r18,1
 80029dc:	9005883a 	mov	r2,r18
 80029e0:	90007216 	blt	r18,zero,8002bac <___vfprintf_internal_r+0x1fd8>
 80029e4:	d8013415 	stw	zero,1232(sp)
 80029e8:	003e7906 	br	80023d0 <__alt_data_end+0xfc0023d0>
 80029ec:	da412b15 	stw	r9,1196(sp)
 80029f0:	dd412783 	ldbu	r21,1182(sp)
 80029f4:	4825883a 	mov	r18,r9
 80029f8:	dcc12d15 	stw	r19,1204(sp)
 80029fc:	d8013215 	stw	zero,1224(sp)
 8002a00:	d8013415 	stw	zero,1232(sp)
 8002a04:	003a0706 	br	8001224 <__alt_data_end+0xfc001224>
 8002a08:	b009883a 	mov	r4,r22
 8002a0c:	b80b883a 	mov	r5,r23
 8002a10:	d9811e04 	addi	r6,sp,1144
 8002a14:	8007f840 	call	8007f84 <__sprint_r>
 8002a18:	1039851e 	bne	r2,zero,8001030 <__alt_data_end+0xfc001030>
 8002a1c:	dc012617 	ldw	r16,1176(sp)
 8002a20:	d8c12017 	ldw	r3,1152(sp)
 8002a24:	d8811f17 	ldw	r2,1148(sp)
 8002a28:	da000404 	addi	r8,sp,16
 8002a2c:	003ec706 	br	800254c <__alt_data_end+0xfc00254c>
 8002a30:	483e1a1e 	bne	r9,zero,800229c <__alt_data_end+0xfc00229c>
 8002a34:	9013883a 	mov	r9,r18
 8002a38:	003e1806 	br	800229c <__alt_data_end+0xfc00229c>
 8002a3c:	00c00b44 	movi	r3,45
 8002a40:	64a0003c 	xorhi	r18,r12,32768
 8002a44:	d8c12b05 	stb	r3,1196(sp)
 8002a48:	003e1a06 	br	80022b4 <__alt_data_end+0xfc0022b4>
 8002a4c:	4f000044 	addi	fp,r9,1
 8002a50:	003e1f06 	br	80022d0 <__alt_data_end+0xfc0022d0>
 8002a54:	02400184 	movi	r9,6
 8002a58:	003e1006 	br	800229c <__alt_data_end+0xfc00229c>
 8002a5c:	d8c13417 	ldw	r3,1232(sp)
 8002a60:	00c04b0e 	bge	zero,r3,8002b90 <___vfprintf_internal_r+0x1fbc>
 8002a64:	04800044 	movi	r18,1
 8002a68:	dac13317 	ldw	r11,1228(sp)
 8002a6c:	92e5883a 	add	r18,r18,r11
 8002a70:	9005883a 	mov	r2,r18
 8002a74:	903e560e 	bge	r18,zero,80023d0 <__alt_data_end+0xfc0023d0>
 8002a78:	0005883a 	mov	r2,zero
 8002a7c:	003e5406 	br	80023d0 <__alt_data_end+0xfc0023d0>
 8002a80:	d8c12617 	ldw	r3,1176(sp)
 8002a84:	d8c13415 	stw	r3,1232(sp)
 8002a88:	00c03b0e 	bge	zero,r3,8002b78 <___vfprintf_internal_r+0x1fa4>
 8002a8c:	4800081e 	bne	r9,zero,8002ab0 <___vfprintf_internal_r+0x1edc>
 8002a90:	8c40004c 	andi	r17,r17,1
 8002a94:	8800061e 	bne	r17,zero,8002ab0 <___vfprintf_internal_r+0x1edc>
 8002a98:	1805883a 	mov	r2,r3
 8002a9c:	183e4b0e 	bge	r3,zero,80023cc <__alt_data_end+0xfc0023cc>
 8002aa0:	0005883a 	mov	r2,zero
 8002aa4:	003e4906 	br	80023cc <__alt_data_end+0xfc0023cc>
 8002aa8:	d8812117 	ldw	r2,1156(sp)
 8002aac:	003e3506 	br	8002384 <__alt_data_end+0xfc002384>
 8002ab0:	dac13417 	ldw	r11,1232(sp)
 8002ab4:	4a400044 	addi	r9,r9,1
 8002ab8:	5a65883a 	add	r18,r11,r9
 8002abc:	9005883a 	mov	r2,r18
 8002ac0:	903e430e 	bge	r18,zero,80023d0 <__alt_data_end+0xfc0023d0>
 8002ac4:	003fec06 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002ac8:	00800c04 	movi	r2,48
 8002acc:	e0c00c04 	addi	r3,fp,48
 8002ad0:	d8812345 	stb	r2,1165(sp)
 8002ad4:	d8c12385 	stb	r3,1166(sp)
 8002ad8:	d88123c4 	addi	r2,sp,1167
 8002adc:	dd4122c4 	addi	r21,sp,1163
 8002ae0:	003fb706 	br	80029c0 <__alt_data_end+0xfc0029c0>
 8002ae4:	0005883a 	mov	r2,zero
 8002ae8:	003f6006 	br	800286c <__alt_data_end+0xfc00286c>
 8002aec:	db013417 	ldw	r12,1232(sp)
 8002af0:	64800044 	addi	r18,r12,1
 8002af4:	9005883a 	mov	r2,r18
 8002af8:	903e350e 	bge	r18,zero,80023d0 <__alt_data_end+0xfc0023d0>
 8002afc:	003fde06 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002b00:	d9013717 	ldw	r4,1244(sp)
 8002b04:	900b883a 	mov	r5,r18
 8002b08:	000d883a 	mov	r6,zero
 8002b0c:	000f883a 	mov	r7,zero
 8002b10:	da013f15 	stw	r8,1276(sp)
 8002b14:	da413e15 	stw	r9,1272(sp)
 8002b18:	da813d15 	stw	r10,1268(sp)
 8002b1c:	800ba980 	call	800ba98 <__eqdf2>
 8002b20:	da013f17 	ldw	r8,1276(sp)
 8002b24:	da413e17 	ldw	r9,1272(sp)
 8002b28:	da813d17 	ldw	r10,1268(sp)
 8002b2c:	103f1426 	beq	r2,zero,8002780 <__alt_data_end+0xfc002780>
 8002b30:	00800044 	movi	r2,1
 8002b34:	1707c83a 	sub	r3,r2,fp
 8002b38:	d8c12615 	stw	r3,1176(sp)
 8002b3c:	003f1106 	br	8002784 <__alt_data_end+0xfc002784>
 8002b40:	dac12d17 	ldw	r11,1204(sp)
 8002b44:	5a400017 	ldw	r9,0(r11)
 8002b48:	5ac00104 	addi	r11,r11,4
 8002b4c:	dac12d15 	stw	r11,1204(sp)
 8002b50:	483ec60e 	bge	r9,zero,800266c <__alt_data_end+0xfc00266c>
 8002b54:	027fffc4 	movi	r9,-1
 8002b58:	1c000047 	ldb	r16,1(r3)
 8002b5c:	00388406 	br	8000d70 <__alt_data_end+0xfc000d70>
 8002b60:	043fffc4 	movi	r16,-1
 8002b64:	00391006 	br	8000fa8 <__alt_data_end+0xfc000fa8>
 8002b68:	00800b44 	movi	r2,45
 8002b6c:	0739c83a 	sub	fp,zero,fp
 8002b70:	d8812305 	stb	r2,1164(sp)
 8002b74:	003f6906 	br	800291c <__alt_data_end+0xfc00291c>
 8002b78:	4800081e 	bne	r9,zero,8002b9c <___vfprintf_internal_r+0x1fc8>
 8002b7c:	8c40004c 	andi	r17,r17,1
 8002b80:	8800061e 	bne	r17,zero,8002b9c <___vfprintf_internal_r+0x1fc8>
 8002b84:	00800044 	movi	r2,1
 8002b88:	1025883a 	mov	r18,r2
 8002b8c:	003e1006 	br	80023d0 <__alt_data_end+0xfc0023d0>
 8002b90:	04800084 	movi	r18,2
 8002b94:	90e5c83a 	sub	r18,r18,r3
 8002b98:	003fb306 	br	8002a68 <__alt_data_end+0xfc002a68>
 8002b9c:	4c800084 	addi	r18,r9,2
 8002ba0:	9005883a 	mov	r2,r18
 8002ba4:	903e0a0e 	bge	r18,zero,80023d0 <__alt_data_end+0xfc0023d0>
 8002ba8:	003fb306 	br	8002a78 <__alt_data_end+0xfc002a78>
 8002bac:	0005883a 	mov	r2,zero
 8002bb0:	003f8c06 	br	80029e4 <__alt_data_end+0xfc0029e4>
 8002bb4:	88a2703a 	and	r17,r17,r2
 8002bb8:	883f8826 	beq	r17,zero,80029dc <__alt_data_end+0xfc0029dc>
 8002bbc:	003f8606 	br	80029d8 <__alt_data_end+0xfc0029d8>
 8002bc0:	d8812344 	addi	r2,sp,1165
 8002bc4:	003f7e06 	br	80029c0 <__alt_data_end+0xfc0029c0>
 8002bc8:	d8c12617 	ldw	r3,1176(sp)
 8002bcc:	003f4d06 	br	8002904 <__alt_data_end+0xfc002904>

08002bd0 <__vfprintf_internal>:
 8002bd0:	2007883a 	mov	r3,r4
 8002bd4:	01020074 	movhi	r4,2049
 8002bd8:	2106c004 	addi	r4,r4,6912
 8002bdc:	21000017 	ldw	r4,0(r4)
 8002be0:	2805883a 	mov	r2,r5
 8002be4:	300f883a 	mov	r7,r6
 8002be8:	180b883a 	mov	r5,r3
 8002bec:	100d883a 	mov	r6,r2
 8002bf0:	8000bd41 	jmpi	8000bd4 <___vfprintf_internal_r>

08002bf4 <__swsetup_r>:
 8002bf4:	00820074 	movhi	r2,2049
 8002bf8:	defffd04 	addi	sp,sp,-12
 8002bfc:	1086c004 	addi	r2,r2,6912
 8002c00:	dc400115 	stw	r17,4(sp)
 8002c04:	2023883a 	mov	r17,r4
 8002c08:	11000017 	ldw	r4,0(r2)
 8002c0c:	dc000015 	stw	r16,0(sp)
 8002c10:	dfc00215 	stw	ra,8(sp)
 8002c14:	2821883a 	mov	r16,r5
 8002c18:	20000226 	beq	r4,zero,8002c24 <__swsetup_r+0x30>
 8002c1c:	20c00e17 	ldw	r3,56(r4)
 8002c20:	18002e26 	beq	r3,zero,8002cdc <__swsetup_r+0xe8>
 8002c24:	8080030b 	ldhu	r2,12(r16)
 8002c28:	10c0020c 	andi	r3,r2,8
 8002c2c:	100d883a 	mov	r6,r2
 8002c30:	18000f26 	beq	r3,zero,8002c70 <__swsetup_r+0x7c>
 8002c34:	80c00417 	ldw	r3,16(r16)
 8002c38:	18001526 	beq	r3,zero,8002c90 <__swsetup_r+0x9c>
 8002c3c:	1100004c 	andi	r4,r2,1
 8002c40:	20001c1e 	bne	r4,zero,8002cb4 <__swsetup_r+0xc0>
 8002c44:	1080008c 	andi	r2,r2,2
 8002c48:	1000261e 	bne	r2,zero,8002ce4 <__swsetup_r+0xf0>
 8002c4c:	80800517 	ldw	r2,20(r16)
 8002c50:	80800215 	stw	r2,8(r16)
 8002c54:	18001c26 	beq	r3,zero,8002cc8 <__swsetup_r+0xd4>
 8002c58:	0005883a 	mov	r2,zero
 8002c5c:	dfc00217 	ldw	ra,8(sp)
 8002c60:	dc400117 	ldw	r17,4(sp)
 8002c64:	dc000017 	ldw	r16,0(sp)
 8002c68:	dec00304 	addi	sp,sp,12
 8002c6c:	f800283a 	ret
 8002c70:	3080040c 	andi	r2,r6,16
 8002c74:	10001726 	beq	r2,zero,8002cd4 <__swsetup_r+0xe0>
 8002c78:	3080010c 	andi	r2,r6,4
 8002c7c:	10001b1e 	bne	r2,zero,8002cec <__swsetup_r+0xf8>
 8002c80:	80c00417 	ldw	r3,16(r16)
 8002c84:	30800214 	ori	r2,r6,8
 8002c88:	8080030d 	sth	r2,12(r16)
 8002c8c:	183feb1e 	bne	r3,zero,8002c3c <__alt_data_end+0xfc002c3c>
 8002c90:	1140a00c 	andi	r5,r2,640
 8002c94:	01008004 	movi	r4,512
 8002c98:	293fe826 	beq	r5,r4,8002c3c <__alt_data_end+0xfc002c3c>
 8002c9c:	8809883a 	mov	r4,r17
 8002ca0:	800b883a 	mov	r5,r16
 8002ca4:	800574c0 	call	800574c <__smakebuf_r>
 8002ca8:	8080030b 	ldhu	r2,12(r16)
 8002cac:	80c00417 	ldw	r3,16(r16)
 8002cb0:	003fe206 	br	8002c3c <__alt_data_end+0xfc002c3c>
 8002cb4:	80800517 	ldw	r2,20(r16)
 8002cb8:	80000215 	stw	zero,8(r16)
 8002cbc:	0085c83a 	sub	r2,zero,r2
 8002cc0:	80800615 	stw	r2,24(r16)
 8002cc4:	183fe41e 	bne	r3,zero,8002c58 <__alt_data_end+0xfc002c58>
 8002cc8:	8080030b 	ldhu	r2,12(r16)
 8002ccc:	1080200c 	andi	r2,r2,128
 8002cd0:	103fe226 	beq	r2,zero,8002c5c <__alt_data_end+0xfc002c5c>
 8002cd4:	00bfffc4 	movi	r2,-1
 8002cd8:	003fe006 	br	8002c5c <__alt_data_end+0xfc002c5c>
 8002cdc:	8004bf40 	call	8004bf4 <__sinit>
 8002ce0:	003fd006 	br	8002c24 <__alt_data_end+0xfc002c24>
 8002ce4:	0005883a 	mov	r2,zero
 8002ce8:	003fd906 	br	8002c50 <__alt_data_end+0xfc002c50>
 8002cec:	81400c17 	ldw	r5,48(r16)
 8002cf0:	28000626 	beq	r5,zero,8002d0c <__swsetup_r+0x118>
 8002cf4:	80801004 	addi	r2,r16,64
 8002cf8:	28800326 	beq	r5,r2,8002d08 <__swsetup_r+0x114>
 8002cfc:	8809883a 	mov	r4,r17
 8002d00:	8004d680 	call	8004d68 <_free_r>
 8002d04:	8180030b 	ldhu	r6,12(r16)
 8002d08:	80000c15 	stw	zero,48(r16)
 8002d0c:	80c00417 	ldw	r3,16(r16)
 8002d10:	00bff6c4 	movi	r2,-37
 8002d14:	118c703a 	and	r6,r2,r6
 8002d18:	80000115 	stw	zero,4(r16)
 8002d1c:	80c00015 	stw	r3,0(r16)
 8002d20:	003fd806 	br	8002c84 <__alt_data_end+0xfc002c84>

08002d24 <quorem>:
 8002d24:	defff704 	addi	sp,sp,-36
 8002d28:	dc800215 	stw	r18,8(sp)
 8002d2c:	20800417 	ldw	r2,16(r4)
 8002d30:	2c800417 	ldw	r18,16(r5)
 8002d34:	dfc00815 	stw	ra,32(sp)
 8002d38:	ddc00715 	stw	r23,28(sp)
 8002d3c:	dd800615 	stw	r22,24(sp)
 8002d40:	dd400515 	stw	r21,20(sp)
 8002d44:	dd000415 	stw	r20,16(sp)
 8002d48:	dcc00315 	stw	r19,12(sp)
 8002d4c:	dc400115 	stw	r17,4(sp)
 8002d50:	dc000015 	stw	r16,0(sp)
 8002d54:	14807116 	blt	r2,r18,8002f1c <quorem+0x1f8>
 8002d58:	94bfffc4 	addi	r18,r18,-1
 8002d5c:	94ad883a 	add	r22,r18,r18
 8002d60:	b5ad883a 	add	r22,r22,r22
 8002d64:	2c400504 	addi	r17,r5,20
 8002d68:	8da9883a 	add	r20,r17,r22
 8002d6c:	25400504 	addi	r21,r4,20
 8002d70:	282f883a 	mov	r23,r5
 8002d74:	adad883a 	add	r22,r21,r22
 8002d78:	a1400017 	ldw	r5,0(r20)
 8002d7c:	2021883a 	mov	r16,r4
 8002d80:	b1000017 	ldw	r4,0(r22)
 8002d84:	29400044 	addi	r5,r5,1
 8002d88:	800a9200 	call	800a920 <__udivsi3>
 8002d8c:	1027883a 	mov	r19,r2
 8002d90:	10002c26 	beq	r2,zero,8002e44 <quorem+0x120>
 8002d94:	a813883a 	mov	r9,r21
 8002d98:	8811883a 	mov	r8,r17
 8002d9c:	0009883a 	mov	r4,zero
 8002da0:	000d883a 	mov	r6,zero
 8002da4:	41c00017 	ldw	r7,0(r8)
 8002da8:	49400017 	ldw	r5,0(r9)
 8002dac:	42000104 	addi	r8,r8,4
 8002db0:	38bfffcc 	andi	r2,r7,65535
 8002db4:	14c5383a 	mul	r2,r2,r19
 8002db8:	380ed43a 	srli	r7,r7,16
 8002dbc:	28ffffcc 	andi	r3,r5,65535
 8002dc0:	2085883a 	add	r2,r4,r2
 8002dc4:	1008d43a 	srli	r4,r2,16
 8002dc8:	3ccf383a 	mul	r7,r7,r19
 8002dcc:	198d883a 	add	r6,r3,r6
 8002dd0:	10ffffcc 	andi	r3,r2,65535
 8002dd4:	30c7c83a 	sub	r3,r6,r3
 8002dd8:	280ad43a 	srli	r5,r5,16
 8002ddc:	21c9883a 	add	r4,r4,r7
 8002de0:	180dd43a 	srai	r6,r3,16
 8002de4:	20bfffcc 	andi	r2,r4,65535
 8002de8:	288bc83a 	sub	r5,r5,r2
 8002dec:	298b883a 	add	r5,r5,r6
 8002df0:	280e943a 	slli	r7,r5,16
 8002df4:	18ffffcc 	andi	r3,r3,65535
 8002df8:	2008d43a 	srli	r4,r4,16
 8002dfc:	38ceb03a 	or	r7,r7,r3
 8002e00:	49c00015 	stw	r7,0(r9)
 8002e04:	280dd43a 	srai	r6,r5,16
 8002e08:	4a400104 	addi	r9,r9,4
 8002e0c:	a23fe52e 	bgeu	r20,r8,8002da4 <__alt_data_end+0xfc002da4>
 8002e10:	b0800017 	ldw	r2,0(r22)
 8002e14:	10000b1e 	bne	r2,zero,8002e44 <quorem+0x120>
 8002e18:	b0bfff04 	addi	r2,r22,-4
 8002e1c:	a880082e 	bgeu	r21,r2,8002e40 <quorem+0x11c>
 8002e20:	b0ffff17 	ldw	r3,-4(r22)
 8002e24:	18000326 	beq	r3,zero,8002e34 <quorem+0x110>
 8002e28:	00000506 	br	8002e40 <quorem+0x11c>
 8002e2c:	10c00017 	ldw	r3,0(r2)
 8002e30:	1800031e 	bne	r3,zero,8002e40 <quorem+0x11c>
 8002e34:	10bfff04 	addi	r2,r2,-4
 8002e38:	94bfffc4 	addi	r18,r18,-1
 8002e3c:	a8bffb36 	bltu	r21,r2,8002e2c <__alt_data_end+0xfc002e2c>
 8002e40:	84800415 	stw	r18,16(r16)
 8002e44:	8009883a 	mov	r4,r16
 8002e48:	b80b883a 	mov	r5,r23
 8002e4c:	8006e0c0 	call	8006e0c <__mcmp>
 8002e50:	10002616 	blt	r2,zero,8002eec <quorem+0x1c8>
 8002e54:	9cc00044 	addi	r19,r19,1
 8002e58:	a80d883a 	mov	r6,r21
 8002e5c:	000b883a 	mov	r5,zero
 8002e60:	31000017 	ldw	r4,0(r6)
 8002e64:	88800017 	ldw	r2,0(r17)
 8002e68:	31800104 	addi	r6,r6,4
 8002e6c:	20ffffcc 	andi	r3,r4,65535
 8002e70:	194b883a 	add	r5,r3,r5
 8002e74:	10ffffcc 	andi	r3,r2,65535
 8002e78:	28c7c83a 	sub	r3,r5,r3
 8002e7c:	1004d43a 	srli	r2,r2,16
 8002e80:	2008d43a 	srli	r4,r4,16
 8002e84:	180bd43a 	srai	r5,r3,16
 8002e88:	18ffffcc 	andi	r3,r3,65535
 8002e8c:	2089c83a 	sub	r4,r4,r2
 8002e90:	2149883a 	add	r4,r4,r5
 8002e94:	2004943a 	slli	r2,r4,16
 8002e98:	8c400104 	addi	r17,r17,4
 8002e9c:	200bd43a 	srai	r5,r4,16
 8002ea0:	10c6b03a 	or	r3,r2,r3
 8002ea4:	30ffff15 	stw	r3,-4(r6)
 8002ea8:	a47fed2e 	bgeu	r20,r17,8002e60 <__alt_data_end+0xfc002e60>
 8002eac:	9485883a 	add	r2,r18,r18
 8002eb0:	1085883a 	add	r2,r2,r2
 8002eb4:	a887883a 	add	r3,r21,r2
 8002eb8:	18800017 	ldw	r2,0(r3)
 8002ebc:	10000b1e 	bne	r2,zero,8002eec <quorem+0x1c8>
 8002ec0:	18bfff04 	addi	r2,r3,-4
 8002ec4:	a880082e 	bgeu	r21,r2,8002ee8 <quorem+0x1c4>
 8002ec8:	18ffff17 	ldw	r3,-4(r3)
 8002ecc:	18000326 	beq	r3,zero,8002edc <quorem+0x1b8>
 8002ed0:	00000506 	br	8002ee8 <quorem+0x1c4>
 8002ed4:	10c00017 	ldw	r3,0(r2)
 8002ed8:	1800031e 	bne	r3,zero,8002ee8 <quorem+0x1c4>
 8002edc:	10bfff04 	addi	r2,r2,-4
 8002ee0:	94bfffc4 	addi	r18,r18,-1
 8002ee4:	a8bffb36 	bltu	r21,r2,8002ed4 <__alt_data_end+0xfc002ed4>
 8002ee8:	84800415 	stw	r18,16(r16)
 8002eec:	9805883a 	mov	r2,r19
 8002ef0:	dfc00817 	ldw	ra,32(sp)
 8002ef4:	ddc00717 	ldw	r23,28(sp)
 8002ef8:	dd800617 	ldw	r22,24(sp)
 8002efc:	dd400517 	ldw	r21,20(sp)
 8002f00:	dd000417 	ldw	r20,16(sp)
 8002f04:	dcc00317 	ldw	r19,12(sp)
 8002f08:	dc800217 	ldw	r18,8(sp)
 8002f0c:	dc400117 	ldw	r17,4(sp)
 8002f10:	dc000017 	ldw	r16,0(sp)
 8002f14:	dec00904 	addi	sp,sp,36
 8002f18:	f800283a 	ret
 8002f1c:	0005883a 	mov	r2,zero
 8002f20:	003ff306 	br	8002ef0 <__alt_data_end+0xfc002ef0>

08002f24 <_dtoa_r>:
 8002f24:	20801017 	ldw	r2,64(r4)
 8002f28:	deffde04 	addi	sp,sp,-136
 8002f2c:	dd401d15 	stw	r21,116(sp)
 8002f30:	dcc01b15 	stw	r19,108(sp)
 8002f34:	dc801a15 	stw	r18,104(sp)
 8002f38:	dc401915 	stw	r17,100(sp)
 8002f3c:	dc001815 	stw	r16,96(sp)
 8002f40:	dfc02115 	stw	ra,132(sp)
 8002f44:	df002015 	stw	fp,128(sp)
 8002f48:	ddc01f15 	stw	r23,124(sp)
 8002f4c:	dd801e15 	stw	r22,120(sp)
 8002f50:	dd001c15 	stw	r20,112(sp)
 8002f54:	d9c00315 	stw	r7,12(sp)
 8002f58:	2021883a 	mov	r16,r4
 8002f5c:	302b883a 	mov	r21,r6
 8002f60:	2825883a 	mov	r18,r5
 8002f64:	dc402417 	ldw	r17,144(sp)
 8002f68:	3027883a 	mov	r19,r6
 8002f6c:	10000826 	beq	r2,zero,8002f90 <_dtoa_r+0x6c>
 8002f70:	21801117 	ldw	r6,68(r4)
 8002f74:	00c00044 	movi	r3,1
 8002f78:	100b883a 	mov	r5,r2
 8002f7c:	1986983a 	sll	r3,r3,r6
 8002f80:	11800115 	stw	r6,4(r2)
 8002f84:	10c00215 	stw	r3,8(r2)
 8002f88:	80065f40 	call	80065f4 <_Bfree>
 8002f8c:	80001015 	stw	zero,64(r16)
 8002f90:	a8002d16 	blt	r21,zero,8003048 <_dtoa_r+0x124>
 8002f94:	88000015 	stw	zero,0(r17)
 8002f98:	a8dffc2c 	andhi	r3,r21,32752
 8002f9c:	009ffc34 	movhi	r2,32752
 8002fa0:	18801b26 	beq	r3,r2,8003010 <_dtoa_r+0xec>
 8002fa4:	9009883a 	mov	r4,r18
 8002fa8:	980b883a 	mov	r5,r19
 8002fac:	000d883a 	mov	r6,zero
 8002fb0:	000f883a 	mov	r7,zero
 8002fb4:	800ba980 	call	800ba98 <__eqdf2>
 8002fb8:	10002a1e 	bne	r2,zero,8003064 <_dtoa_r+0x140>
 8002fbc:	d8c02317 	ldw	r3,140(sp)
 8002fc0:	d9002517 	ldw	r4,148(sp)
 8002fc4:	00800044 	movi	r2,1
 8002fc8:	18800015 	stw	r2,0(r3)
 8002fcc:	2001a226 	beq	r4,zero,8003658 <_dtoa_r+0x734>
 8002fd0:	00820074 	movhi	r2,2049
 8002fd4:	10bf5444 	addi	r2,r2,-687
 8002fd8:	20800015 	stw	r2,0(r4)
 8002fdc:	10bfffc4 	addi	r2,r2,-1
 8002fe0:	dfc02117 	ldw	ra,132(sp)
 8002fe4:	df002017 	ldw	fp,128(sp)
 8002fe8:	ddc01f17 	ldw	r23,124(sp)
 8002fec:	dd801e17 	ldw	r22,120(sp)
 8002ff0:	dd401d17 	ldw	r21,116(sp)
 8002ff4:	dd001c17 	ldw	r20,112(sp)
 8002ff8:	dcc01b17 	ldw	r19,108(sp)
 8002ffc:	dc801a17 	ldw	r18,104(sp)
 8003000:	dc401917 	ldw	r17,100(sp)
 8003004:	dc001817 	ldw	r16,96(sp)
 8003008:	dec02204 	addi	sp,sp,136
 800300c:	f800283a 	ret
 8003010:	d8c02317 	ldw	r3,140(sp)
 8003014:	0089c3c4 	movi	r2,9999
 8003018:	18800015 	stw	r2,0(r3)
 800301c:	90017c26 	beq	r18,zero,8003610 <_dtoa_r+0x6ec>
 8003020:	00820074 	movhi	r2,2049
 8003024:	10bf6004 	addi	r2,r2,-640
 8003028:	d9002517 	ldw	r4,148(sp)
 800302c:	203fec26 	beq	r4,zero,8002fe0 <__alt_data_end+0xfc002fe0>
 8003030:	10c000c7 	ldb	r3,3(r2)
 8003034:	18017d1e 	bne	r3,zero,800362c <_dtoa_r+0x708>
 8003038:	10c000c4 	addi	r3,r2,3
 800303c:	d9802517 	ldw	r6,148(sp)
 8003040:	30c00015 	stw	r3,0(r6)
 8003044:	003fe606 	br	8002fe0 <__alt_data_end+0xfc002fe0>
 8003048:	04e00034 	movhi	r19,32768
 800304c:	9cffffc4 	addi	r19,r19,-1
 8003050:	00800044 	movi	r2,1
 8003054:	ace6703a 	and	r19,r21,r19
 8003058:	88800015 	stw	r2,0(r17)
 800305c:	982b883a 	mov	r21,r19
 8003060:	003fcd06 	br	8002f98 <__alt_data_end+0xfc002f98>
 8003064:	d8800204 	addi	r2,sp,8
 8003068:	a822d53a 	srli	r17,r21,20
 800306c:	d8800015 	stw	r2,0(sp)
 8003070:	8009883a 	mov	r4,r16
 8003074:	900b883a 	mov	r5,r18
 8003078:	980d883a 	mov	r6,r19
 800307c:	d9c00104 	addi	r7,sp,4
 8003080:	80071800 	call	8007180 <__d2b>
 8003084:	1039883a 	mov	fp,r2
 8003088:	88016a1e 	bne	r17,zero,8003634 <_dtoa_r+0x710>
 800308c:	dd000217 	ldw	r20,8(sp)
 8003090:	dc400117 	ldw	r17,4(sp)
 8003094:	00befbc4 	movi	r2,-1041
 8003098:	a463883a 	add	r17,r20,r17
 800309c:	8882ea16 	blt	r17,r2,8003c48 <_dtoa_r+0xd24>
 80030a0:	00bf0384 	movi	r2,-1010
 80030a4:	1445c83a 	sub	r2,r2,r17
 80030a8:	89010484 	addi	r4,r17,1042
 80030ac:	a8aa983a 	sll	r21,r21,r2
 80030b0:	9108d83a 	srl	r4,r18,r4
 80030b4:	a908b03a 	or	r4,r21,r4
 80030b8:	800ce280 	call	800ce28 <__floatunsidf>
 80030bc:	017f8434 	movhi	r5,65040
 80030c0:	01800044 	movi	r6,1
 80030c4:	1009883a 	mov	r4,r2
 80030c8:	194b883a 	add	r5,r3,r5
 80030cc:	8c7fffc4 	addi	r17,r17,-1
 80030d0:	d9800f15 	stw	r6,60(sp)
 80030d4:	000d883a 	mov	r6,zero
 80030d8:	01cffe34 	movhi	r7,16376
 80030dc:	800c4000 	call	800c400 <__subdf3>
 80030e0:	0198dbf4 	movhi	r6,25455
 80030e4:	01cff4f4 	movhi	r7,16339
 80030e8:	1009883a 	mov	r4,r2
 80030ec:	180b883a 	mov	r5,r3
 80030f0:	3190d844 	addi	r6,r6,17249
 80030f4:	39e1e9c4 	addi	r7,r7,-30809
 80030f8:	800bcdc0 	call	800bcdc <__muldf3>
 80030fc:	01a2d874 	movhi	r6,35681
 8003100:	01cff1f4 	movhi	r7,16327
 8003104:	180b883a 	mov	r5,r3
 8003108:	31b22cc4 	addi	r6,r6,-14157
 800310c:	39e28a04 	addi	r7,r7,-30168
 8003110:	1009883a 	mov	r4,r2
 8003114:	800a9300 	call	800a930 <__adddf3>
 8003118:	8809883a 	mov	r4,r17
 800311c:	102d883a 	mov	r22,r2
 8003120:	182b883a 	mov	r21,r3
 8003124:	800cd580 	call	800cd58 <__floatsidf>
 8003128:	019427f4 	movhi	r6,20639
 800312c:	01cff4f4 	movhi	r7,16339
 8003130:	1009883a 	mov	r4,r2
 8003134:	180b883a 	mov	r5,r3
 8003138:	319e7ec4 	addi	r6,r6,31227
 800313c:	39d104c4 	addi	r7,r7,17427
 8003140:	800bcdc0 	call	800bcdc <__muldf3>
 8003144:	b009883a 	mov	r4,r22
 8003148:	a80b883a 	mov	r5,r21
 800314c:	100d883a 	mov	r6,r2
 8003150:	180f883a 	mov	r7,r3
 8003154:	800a9300 	call	800a930 <__adddf3>
 8003158:	1009883a 	mov	r4,r2
 800315c:	180b883a 	mov	r5,r3
 8003160:	102d883a 	mov	r22,r2
 8003164:	182b883a 	mov	r21,r3
 8003168:	800ccd00 	call	800ccd0 <__fixdfsi>
 800316c:	b009883a 	mov	r4,r22
 8003170:	a80b883a 	mov	r5,r21
 8003174:	000d883a 	mov	r6,zero
 8003178:	000f883a 	mov	r7,zero
 800317c:	d8800515 	stw	r2,20(sp)
 8003180:	800bbfc0 	call	800bbfc <__ledf2>
 8003184:	10023116 	blt	r2,zero,8003a4c <_dtoa_r+0xb28>
 8003188:	d8c00517 	ldw	r3,20(sp)
 800318c:	00800584 	movi	r2,22
 8003190:	10c21f36 	bltu	r2,r3,8003a10 <_dtoa_r+0xaec>
 8003194:	180490fa 	slli	r2,r3,3
 8003198:	00c20074 	movhi	r3,2049
 800319c:	18ff7c04 	addi	r3,r3,-528
 80031a0:	1885883a 	add	r2,r3,r2
 80031a4:	11000017 	ldw	r4,0(r2)
 80031a8:	11400117 	ldw	r5,4(r2)
 80031ac:	900d883a 	mov	r6,r18
 80031b0:	980f883a 	mov	r7,r19
 80031b4:	800bb1c0 	call	800bb1c <__gedf2>
 80031b8:	0082a70e 	bge	zero,r2,8003c58 <_dtoa_r+0xd34>
 80031bc:	d9000517 	ldw	r4,20(sp)
 80031c0:	d8000c15 	stw	zero,48(sp)
 80031c4:	213fffc4 	addi	r4,r4,-1
 80031c8:	d9000515 	stw	r4,20(sp)
 80031cc:	a463c83a 	sub	r17,r20,r17
 80031d0:	8dbfffc4 	addi	r22,r17,-1
 80031d4:	b0021916 	blt	r22,zero,8003a3c <_dtoa_r+0xb18>
 80031d8:	d8000815 	stw	zero,32(sp)
 80031dc:	d8800517 	ldw	r2,20(sp)
 80031e0:	10020e16 	blt	r2,zero,8003a1c <_dtoa_r+0xaf8>
 80031e4:	b0ad883a 	add	r22,r22,r2
 80031e8:	d8800a15 	stw	r2,40(sp)
 80031ec:	d8000915 	stw	zero,36(sp)
 80031f0:	d8c00317 	ldw	r3,12(sp)
 80031f4:	00800244 	movi	r2,9
 80031f8:	10c11a36 	bltu	r2,r3,8003664 <_dtoa_r+0x740>
 80031fc:	00800144 	movi	r2,5
 8003200:	10c4fc0e 	bge	r2,r3,80045f4 <_dtoa_r+0x16d0>
 8003204:	18ffff04 	addi	r3,r3,-4
 8003208:	d8c00315 	stw	r3,12(sp)
 800320c:	0029883a 	mov	r20,zero
 8003210:	d9800317 	ldw	r6,12(sp)
 8003214:	008000c4 	movi	r2,3
 8003218:	3083bd26 	beq	r6,r2,8004110 <_dtoa_r+0x11ec>
 800321c:	1183670e 	bge	r2,r6,8003fbc <_dtoa_r+0x1098>
 8003220:	d8c00317 	ldw	r3,12(sp)
 8003224:	00800104 	movi	r2,4
 8003228:	1882e726 	beq	r3,r2,8003dc8 <_dtoa_r+0xea4>
 800322c:	00800144 	movi	r2,5
 8003230:	1884f21e 	bne	r3,r2,80045fc <_dtoa_r+0x16d8>
 8003234:	00800044 	movi	r2,1
 8003238:	d8800b15 	stw	r2,44(sp)
 800323c:	d8c02217 	ldw	r3,136(sp)
 8003240:	d9000517 	ldw	r4,20(sp)
 8003244:	1907883a 	add	r3,r3,r4
 8003248:	19800044 	addi	r6,r3,1
 800324c:	d8c00d15 	stw	r3,52(sp)
 8003250:	d9800615 	stw	r6,24(sp)
 8003254:	0183c30e 	bge	zero,r6,8004164 <_dtoa_r+0x1240>
 8003258:	d9800617 	ldw	r6,24(sp)
 800325c:	3023883a 	mov	r17,r6
 8003260:	80001115 	stw	zero,68(r16)
 8003264:	008005c4 	movi	r2,23
 8003268:	1184f62e 	bgeu	r2,r6,8004644 <_dtoa_r+0x1720>
 800326c:	00c00044 	movi	r3,1
 8003270:	00800104 	movi	r2,4
 8003274:	1085883a 	add	r2,r2,r2
 8003278:	11000504 	addi	r4,r2,20
 800327c:	180b883a 	mov	r5,r3
 8003280:	18c00044 	addi	r3,r3,1
 8003284:	313ffb2e 	bgeu	r6,r4,8003274 <__alt_data_end+0xfc003274>
 8003288:	81401115 	stw	r5,68(r16)
 800328c:	8009883a 	mov	r4,r16
 8003290:	800654c0 	call	800654c <_Balloc>
 8003294:	d8800715 	stw	r2,28(sp)
 8003298:	80801015 	stw	r2,64(r16)
 800329c:	00800384 	movi	r2,14
 80032a0:	1440fd36 	bltu	r2,r17,8003698 <_dtoa_r+0x774>
 80032a4:	a000fc26 	beq	r20,zero,8003698 <_dtoa_r+0x774>
 80032a8:	d8800517 	ldw	r2,20(sp)
 80032ac:	0083b90e 	bge	zero,r2,8004194 <_dtoa_r+0x1270>
 80032b0:	d8c00517 	ldw	r3,20(sp)
 80032b4:	108003cc 	andi	r2,r2,15
 80032b8:	100490fa 	slli	r2,r2,3
 80032bc:	182fd13a 	srai	r23,r3,4
 80032c0:	00c20074 	movhi	r3,2049
 80032c4:	18ff7c04 	addi	r3,r3,-528
 80032c8:	1885883a 	add	r2,r3,r2
 80032cc:	b8c0040c 	andi	r3,r23,16
 80032d0:	12c00017 	ldw	r11,0(r2)
 80032d4:	12800117 	ldw	r10,4(r2)
 80032d8:	18039726 	beq	r3,zero,8004138 <_dtoa_r+0x1214>
 80032dc:	00820074 	movhi	r2,2049
 80032e0:	10bf7204 	addi	r2,r2,-568
 80032e4:	11800817 	ldw	r6,32(r2)
 80032e8:	11c00917 	ldw	r7,36(r2)
 80032ec:	9009883a 	mov	r4,r18
 80032f0:	980b883a 	mov	r5,r19
 80032f4:	da801615 	stw	r10,88(sp)
 80032f8:	dac01515 	stw	r11,84(sp)
 80032fc:	800b1cc0 	call	800b1cc <__divdf3>
 8003300:	da801617 	ldw	r10,88(sp)
 8003304:	dac01517 	ldw	r11,84(sp)
 8003308:	bdc003cc 	andi	r23,r23,15
 800330c:	044000c4 	movi	r17,3
 8003310:	d8800e15 	stw	r2,56(sp)
 8003314:	182b883a 	mov	r21,r3
 8003318:	b8001126 	beq	r23,zero,8003360 <_dtoa_r+0x43c>
 800331c:	05020074 	movhi	r20,2049
 8003320:	a53f7204 	addi	r20,r20,-568
 8003324:	5805883a 	mov	r2,r11
 8003328:	5007883a 	mov	r3,r10
 800332c:	b980004c 	andi	r6,r23,1
 8003330:	1009883a 	mov	r4,r2
 8003334:	b82fd07a 	srai	r23,r23,1
 8003338:	180b883a 	mov	r5,r3
 800333c:	30000426 	beq	r6,zero,8003350 <_dtoa_r+0x42c>
 8003340:	a1800017 	ldw	r6,0(r20)
 8003344:	a1c00117 	ldw	r7,4(r20)
 8003348:	8c400044 	addi	r17,r17,1
 800334c:	800bcdc0 	call	800bcdc <__muldf3>
 8003350:	a5000204 	addi	r20,r20,8
 8003354:	b83ff51e 	bne	r23,zero,800332c <__alt_data_end+0xfc00332c>
 8003358:	1017883a 	mov	r11,r2
 800335c:	1815883a 	mov	r10,r3
 8003360:	d9000e17 	ldw	r4,56(sp)
 8003364:	a80b883a 	mov	r5,r21
 8003368:	580d883a 	mov	r6,r11
 800336c:	500f883a 	mov	r7,r10
 8003370:	800b1cc0 	call	800b1cc <__divdf3>
 8003374:	1029883a 	mov	r20,r2
 8003378:	182b883a 	mov	r21,r3
 800337c:	d9800c17 	ldw	r6,48(sp)
 8003380:	30000626 	beq	r6,zero,800339c <_dtoa_r+0x478>
 8003384:	a009883a 	mov	r4,r20
 8003388:	a80b883a 	mov	r5,r21
 800338c:	000d883a 	mov	r6,zero
 8003390:	01cffc34 	movhi	r7,16368
 8003394:	800bbfc0 	call	800bbfc <__ledf2>
 8003398:	10043216 	blt	r2,zero,8004464 <_dtoa_r+0x1540>
 800339c:	8809883a 	mov	r4,r17
 80033a0:	800cd580 	call	800cd58 <__floatsidf>
 80033a4:	1009883a 	mov	r4,r2
 80033a8:	180b883a 	mov	r5,r3
 80033ac:	a00d883a 	mov	r6,r20
 80033b0:	a80f883a 	mov	r7,r21
 80033b4:	800bcdc0 	call	800bcdc <__muldf3>
 80033b8:	000d883a 	mov	r6,zero
 80033bc:	1009883a 	mov	r4,r2
 80033c0:	180b883a 	mov	r5,r3
 80033c4:	01d00734 	movhi	r7,16412
 80033c8:	800a9300 	call	800a930 <__adddf3>
 80033cc:	1023883a 	mov	r17,r2
 80033d0:	d9800617 	ldw	r6,24(sp)
 80033d4:	00bf3034 	movhi	r2,64704
 80033d8:	1885883a 	add	r2,r3,r2
 80033dc:	d8800e15 	stw	r2,56(sp)
 80033e0:	30032e26 	beq	r6,zero,800409c <_dtoa_r+0x1178>
 80033e4:	d8c00517 	ldw	r3,20(sp)
 80033e8:	da800617 	ldw	r10,24(sp)
 80033ec:	d8c01215 	stw	r3,72(sp)
 80033f0:	d9000b17 	ldw	r4,44(sp)
 80033f4:	2003b026 	beq	r4,zero,80042b8 <_dtoa_r+0x1394>
 80033f8:	50bfffc4 	addi	r2,r10,-1
 80033fc:	100490fa 	slli	r2,r2,3
 8003400:	00c20074 	movhi	r3,2049
 8003404:	18ff7c04 	addi	r3,r3,-528
 8003408:	1885883a 	add	r2,r3,r2
 800340c:	11800017 	ldw	r6,0(r2)
 8003410:	11c00117 	ldw	r7,4(r2)
 8003414:	d8800717 	ldw	r2,28(sp)
 8003418:	0009883a 	mov	r4,zero
 800341c:	014ff834 	movhi	r5,16352
 8003420:	da801615 	stw	r10,88(sp)
 8003424:	15c00044 	addi	r23,r2,1
 8003428:	800b1cc0 	call	800b1cc <__divdf3>
 800342c:	d9c00e17 	ldw	r7,56(sp)
 8003430:	880d883a 	mov	r6,r17
 8003434:	1009883a 	mov	r4,r2
 8003438:	180b883a 	mov	r5,r3
 800343c:	800c4000 	call	800c400 <__subdf3>
 8003440:	a80b883a 	mov	r5,r21
 8003444:	a009883a 	mov	r4,r20
 8003448:	d8c01015 	stw	r3,64(sp)
 800344c:	d8800e15 	stw	r2,56(sp)
 8003450:	800ccd00 	call	800ccd0 <__fixdfsi>
 8003454:	1009883a 	mov	r4,r2
 8003458:	d8801715 	stw	r2,92(sp)
 800345c:	800cd580 	call	800cd58 <__floatsidf>
 8003460:	a009883a 	mov	r4,r20
 8003464:	a80b883a 	mov	r5,r21
 8003468:	100d883a 	mov	r6,r2
 800346c:	180f883a 	mov	r7,r3
 8003470:	800c4000 	call	800c400 <__subdf3>
 8003474:	da001717 	ldw	r8,92(sp)
 8003478:	1829883a 	mov	r20,r3
 800347c:	d8c00717 	ldw	r3,28(sp)
 8003480:	d9000e17 	ldw	r4,56(sp)
 8003484:	d9401017 	ldw	r5,64(sp)
 8003488:	42000c04 	addi	r8,r8,48
 800348c:	1023883a 	mov	r17,r2
 8003490:	1a000005 	stb	r8,0(r3)
 8003494:	880d883a 	mov	r6,r17
 8003498:	a00f883a 	mov	r7,r20
 800349c:	402b883a 	mov	r21,r8
 80034a0:	800bb1c0 	call	800bb1c <__gedf2>
 80034a4:	00844516 	blt	zero,r2,80045bc <_dtoa_r+0x1698>
 80034a8:	0009883a 	mov	r4,zero
 80034ac:	014ffc34 	movhi	r5,16368
 80034b0:	880d883a 	mov	r6,r17
 80034b4:	a00f883a 	mov	r7,r20
 80034b8:	800c4000 	call	800c400 <__subdf3>
 80034bc:	d9000e17 	ldw	r4,56(sp)
 80034c0:	d9401017 	ldw	r5,64(sp)
 80034c4:	100d883a 	mov	r6,r2
 80034c8:	180f883a 	mov	r7,r3
 80034cc:	800bb1c0 	call	800bb1c <__gedf2>
 80034d0:	da801617 	ldw	r10,88(sp)
 80034d4:	00843616 	blt	zero,r2,80045b0 <_dtoa_r+0x168c>
 80034d8:	00800044 	movi	r2,1
 80034dc:	12806e0e 	bge	r2,r10,8003698 <_dtoa_r+0x774>
 80034e0:	d9000717 	ldw	r4,28(sp)
 80034e4:	dd801315 	stw	r22,76(sp)
 80034e8:	dc001115 	stw	r16,68(sp)
 80034ec:	2295883a 	add	r10,r4,r10
 80034f0:	dcc01415 	stw	r19,80(sp)
 80034f4:	502d883a 	mov	r22,r10
 80034f8:	dcc01017 	ldw	r19,64(sp)
 80034fc:	b821883a 	mov	r16,r23
 8003500:	dc801015 	stw	r18,64(sp)
 8003504:	dc800e17 	ldw	r18,56(sp)
 8003508:	00000906 	br	8003530 <_dtoa_r+0x60c>
 800350c:	800c4000 	call	800c400 <__subdf3>
 8003510:	1009883a 	mov	r4,r2
 8003514:	180b883a 	mov	r5,r3
 8003518:	900d883a 	mov	r6,r18
 800351c:	980f883a 	mov	r7,r19
 8003520:	800bbfc0 	call	800bbfc <__ledf2>
 8003524:	10040e16 	blt	r2,zero,8004560 <_dtoa_r+0x163c>
 8003528:	b821883a 	mov	r16,r23
 800352c:	bd841026 	beq	r23,r22,8004570 <_dtoa_r+0x164c>
 8003530:	9009883a 	mov	r4,r18
 8003534:	980b883a 	mov	r5,r19
 8003538:	000d883a 	mov	r6,zero
 800353c:	01d00934 	movhi	r7,16420
 8003540:	800bcdc0 	call	800bcdc <__muldf3>
 8003544:	000d883a 	mov	r6,zero
 8003548:	01d00934 	movhi	r7,16420
 800354c:	8809883a 	mov	r4,r17
 8003550:	a00b883a 	mov	r5,r20
 8003554:	1025883a 	mov	r18,r2
 8003558:	1827883a 	mov	r19,r3
 800355c:	800bcdc0 	call	800bcdc <__muldf3>
 8003560:	180b883a 	mov	r5,r3
 8003564:	1009883a 	mov	r4,r2
 8003568:	1823883a 	mov	r17,r3
 800356c:	1029883a 	mov	r20,r2
 8003570:	800ccd00 	call	800ccd0 <__fixdfsi>
 8003574:	1009883a 	mov	r4,r2
 8003578:	102b883a 	mov	r21,r2
 800357c:	800cd580 	call	800cd58 <__floatsidf>
 8003580:	a009883a 	mov	r4,r20
 8003584:	880b883a 	mov	r5,r17
 8003588:	100d883a 	mov	r6,r2
 800358c:	180f883a 	mov	r7,r3
 8003590:	800c4000 	call	800c400 <__subdf3>
 8003594:	ad400c04 	addi	r21,r21,48
 8003598:	1009883a 	mov	r4,r2
 800359c:	180b883a 	mov	r5,r3
 80035a0:	900d883a 	mov	r6,r18
 80035a4:	980f883a 	mov	r7,r19
 80035a8:	85400005 	stb	r21,0(r16)
 80035ac:	1023883a 	mov	r17,r2
 80035b0:	1829883a 	mov	r20,r3
 80035b4:	800bbfc0 	call	800bbfc <__ledf2>
 80035b8:	bdc00044 	addi	r23,r23,1
 80035bc:	0009883a 	mov	r4,zero
 80035c0:	014ffc34 	movhi	r5,16368
 80035c4:	880d883a 	mov	r6,r17
 80035c8:	a00f883a 	mov	r7,r20
 80035cc:	103fcf0e 	bge	r2,zero,800350c <__alt_data_end+0xfc00350c>
 80035d0:	d9801217 	ldw	r6,72(sp)
 80035d4:	dc001117 	ldw	r16,68(sp)
 80035d8:	d9800515 	stw	r6,20(sp)
 80035dc:	8009883a 	mov	r4,r16
 80035e0:	e00b883a 	mov	r5,fp
 80035e4:	80065f40 	call	80065f4 <_Bfree>
 80035e8:	d8c00517 	ldw	r3,20(sp)
 80035ec:	d9002317 	ldw	r4,140(sp)
 80035f0:	d9802517 	ldw	r6,148(sp)
 80035f4:	b8000005 	stb	zero,0(r23)
 80035f8:	18800044 	addi	r2,r3,1
 80035fc:	20800015 	stw	r2,0(r4)
 8003600:	30027226 	beq	r6,zero,8003fcc <_dtoa_r+0x10a8>
 8003604:	35c00015 	stw	r23,0(r6)
 8003608:	d8800717 	ldw	r2,28(sp)
 800360c:	003e7406 	br	8002fe0 <__alt_data_end+0xfc002fe0>
 8003610:	00800434 	movhi	r2,16
 8003614:	10bfffc4 	addi	r2,r2,-1
 8003618:	a8aa703a 	and	r21,r21,r2
 800361c:	a83e801e 	bne	r21,zero,8003020 <__alt_data_end+0xfc003020>
 8003620:	00820074 	movhi	r2,2049
 8003624:	10bf5d04 	addi	r2,r2,-652
 8003628:	003e7f06 	br	8003028 <__alt_data_end+0xfc003028>
 800362c:	10c00204 	addi	r3,r2,8
 8003630:	003e8206 	br	800303c <__alt_data_end+0xfc00303c>
 8003634:	01400434 	movhi	r5,16
 8003638:	297fffc4 	addi	r5,r5,-1
 800363c:	994a703a 	and	r5,r19,r5
 8003640:	9009883a 	mov	r4,r18
 8003644:	8c7f0044 	addi	r17,r17,-1023
 8003648:	294ffc34 	orhi	r5,r5,16368
 800364c:	dd000217 	ldw	r20,8(sp)
 8003650:	d8000f15 	stw	zero,60(sp)
 8003654:	003e9f06 	br	80030d4 <__alt_data_end+0xfc0030d4>
 8003658:	00820074 	movhi	r2,2049
 800365c:	10bf5404 	addi	r2,r2,-688
 8003660:	003e5f06 	br	8002fe0 <__alt_data_end+0xfc002fe0>
 8003664:	80001115 	stw	zero,68(r16)
 8003668:	8009883a 	mov	r4,r16
 800366c:	000b883a 	mov	r5,zero
 8003670:	800654c0 	call	800654c <_Balloc>
 8003674:	01bfffc4 	movi	r6,-1
 8003678:	d8800715 	stw	r2,28(sp)
 800367c:	80801015 	stw	r2,64(r16)
 8003680:	00800044 	movi	r2,1
 8003684:	d9800615 	stw	r6,24(sp)
 8003688:	d8800b15 	stw	r2,44(sp)
 800368c:	d8002215 	stw	zero,136(sp)
 8003690:	d9800d15 	stw	r6,52(sp)
 8003694:	d8000315 	stw	zero,12(sp)
 8003698:	d8800117 	ldw	r2,4(sp)
 800369c:	10008e16 	blt	r2,zero,80038d8 <_dtoa_r+0x9b4>
 80036a0:	d9000517 	ldw	r4,20(sp)
 80036a4:	00c00384 	movi	r3,14
 80036a8:	19008b16 	blt	r3,r4,80038d8 <_dtoa_r+0x9b4>
 80036ac:	200490fa 	slli	r2,r4,3
 80036b0:	00c20074 	movhi	r3,2049
 80036b4:	d9802217 	ldw	r6,136(sp)
 80036b8:	18ff7c04 	addi	r3,r3,-528
 80036bc:	1885883a 	add	r2,r3,r2
 80036c0:	14400017 	ldw	r17,0(r2)
 80036c4:	15000117 	ldw	r20,4(r2)
 80036c8:	3001c716 	blt	r6,zero,8003de8 <_dtoa_r+0xec4>
 80036cc:	880d883a 	mov	r6,r17
 80036d0:	a00f883a 	mov	r7,r20
 80036d4:	9009883a 	mov	r4,r18
 80036d8:	980b883a 	mov	r5,r19
 80036dc:	800b1cc0 	call	800b1cc <__divdf3>
 80036e0:	180b883a 	mov	r5,r3
 80036e4:	1009883a 	mov	r4,r2
 80036e8:	800ccd00 	call	800ccd0 <__fixdfsi>
 80036ec:	1009883a 	mov	r4,r2
 80036f0:	102d883a 	mov	r22,r2
 80036f4:	800cd580 	call	800cd58 <__floatsidf>
 80036f8:	1009883a 	mov	r4,r2
 80036fc:	180b883a 	mov	r5,r3
 8003700:	880d883a 	mov	r6,r17
 8003704:	a00f883a 	mov	r7,r20
 8003708:	800bcdc0 	call	800bcdc <__muldf3>
 800370c:	9009883a 	mov	r4,r18
 8003710:	980b883a 	mov	r5,r19
 8003714:	100d883a 	mov	r6,r2
 8003718:	180f883a 	mov	r7,r3
 800371c:	800c4000 	call	800c400 <__subdf3>
 8003720:	d9000717 	ldw	r4,28(sp)
 8003724:	d9800617 	ldw	r6,24(sp)
 8003728:	180b883a 	mov	r5,r3
 800372c:	b0c00c04 	addi	r3,r22,48
 8003730:	20c00005 	stb	r3,0(r4)
 8003734:	25c00044 	addi	r23,r4,1
 8003738:	01000044 	movi	r4,1
 800373c:	1011883a 	mov	r8,r2
 8003740:	2807883a 	mov	r3,r5
 8003744:	31003d26 	beq	r6,r4,800383c <_dtoa_r+0x918>
 8003748:	000d883a 	mov	r6,zero
 800374c:	01d00934 	movhi	r7,16420
 8003750:	1009883a 	mov	r4,r2
 8003754:	800bcdc0 	call	800bcdc <__muldf3>
 8003758:	1009883a 	mov	r4,r2
 800375c:	180b883a 	mov	r5,r3
 8003760:	000d883a 	mov	r6,zero
 8003764:	000f883a 	mov	r7,zero
 8003768:	1027883a 	mov	r19,r2
 800376c:	182b883a 	mov	r21,r3
 8003770:	800ba980 	call	800ba98 <__eqdf2>
 8003774:	103f9926 	beq	r2,zero,80035dc <__alt_data_end+0xfc0035dc>
 8003778:	d8c00617 	ldw	r3,24(sp)
 800377c:	d9000717 	ldw	r4,28(sp)
 8003780:	b825883a 	mov	r18,r23
 8003784:	18bfffc4 	addi	r2,r3,-1
 8003788:	20ad883a 	add	r22,r4,r2
 800378c:	dc000315 	stw	r16,12(sp)
 8003790:	00000a06 	br	80037bc <_dtoa_r+0x898>
 8003794:	800bcdc0 	call	800bcdc <__muldf3>
 8003798:	1009883a 	mov	r4,r2
 800379c:	180b883a 	mov	r5,r3
 80037a0:	000d883a 	mov	r6,zero
 80037a4:	000f883a 	mov	r7,zero
 80037a8:	1027883a 	mov	r19,r2
 80037ac:	182b883a 	mov	r21,r3
 80037b0:	b825883a 	mov	r18,r23
 80037b4:	800ba980 	call	800ba98 <__eqdf2>
 80037b8:	10022626 	beq	r2,zero,8004054 <_dtoa_r+0x1130>
 80037bc:	880d883a 	mov	r6,r17
 80037c0:	a00f883a 	mov	r7,r20
 80037c4:	9809883a 	mov	r4,r19
 80037c8:	a80b883a 	mov	r5,r21
 80037cc:	800b1cc0 	call	800b1cc <__divdf3>
 80037d0:	180b883a 	mov	r5,r3
 80037d4:	1009883a 	mov	r4,r2
 80037d8:	800ccd00 	call	800ccd0 <__fixdfsi>
 80037dc:	1009883a 	mov	r4,r2
 80037e0:	1021883a 	mov	r16,r2
 80037e4:	800cd580 	call	800cd58 <__floatsidf>
 80037e8:	1009883a 	mov	r4,r2
 80037ec:	180b883a 	mov	r5,r3
 80037f0:	880d883a 	mov	r6,r17
 80037f4:	a00f883a 	mov	r7,r20
 80037f8:	800bcdc0 	call	800bcdc <__muldf3>
 80037fc:	9809883a 	mov	r4,r19
 8003800:	a80b883a 	mov	r5,r21
 8003804:	100d883a 	mov	r6,r2
 8003808:	180f883a 	mov	r7,r3
 800380c:	800c4000 	call	800c400 <__subdf3>
 8003810:	82000c04 	addi	r8,r16,48
 8003814:	92000005 	stb	r8,0(r18)
 8003818:	1009883a 	mov	r4,r2
 800381c:	180b883a 	mov	r5,r3
 8003820:	000d883a 	mov	r6,zero
 8003824:	01d00934 	movhi	r7,16420
 8003828:	1011883a 	mov	r8,r2
 800382c:	bdc00044 	addi	r23,r23,1
 8003830:	95bfd81e 	bne	r18,r22,8003794 <__alt_data_end+0xfc003794>
 8003834:	802d883a 	mov	r22,r16
 8003838:	dc000317 	ldw	r16,12(sp)
 800383c:	4009883a 	mov	r4,r8
 8003840:	180b883a 	mov	r5,r3
 8003844:	400d883a 	mov	r6,r8
 8003848:	180f883a 	mov	r7,r3
 800384c:	800a9300 	call	800a930 <__adddf3>
 8003850:	8809883a 	mov	r4,r17
 8003854:	a00b883a 	mov	r5,r20
 8003858:	100d883a 	mov	r6,r2
 800385c:	180f883a 	mov	r7,r3
 8003860:	1027883a 	mov	r19,r2
 8003864:	1825883a 	mov	r18,r3
 8003868:	800bbfc0 	call	800bbfc <__ledf2>
 800386c:	10000816 	blt	r2,zero,8003890 <_dtoa_r+0x96c>
 8003870:	8809883a 	mov	r4,r17
 8003874:	a00b883a 	mov	r5,r20
 8003878:	980d883a 	mov	r6,r19
 800387c:	900f883a 	mov	r7,r18
 8003880:	800ba980 	call	800ba98 <__eqdf2>
 8003884:	103f551e 	bne	r2,zero,80035dc <__alt_data_end+0xfc0035dc>
 8003888:	b580004c 	andi	r22,r22,1
 800388c:	b03f5326 	beq	r22,zero,80035dc <__alt_data_end+0xfc0035dc>
 8003890:	bd7fffc3 	ldbu	r21,-1(r23)
 8003894:	b8bfffc4 	addi	r2,r23,-1
 8003898:	1007883a 	mov	r3,r2
 800389c:	01400e44 	movi	r5,57
 80038a0:	d9800717 	ldw	r6,28(sp)
 80038a4:	00000506 	br	80038bc <_dtoa_r+0x998>
 80038a8:	18ffffc4 	addi	r3,r3,-1
 80038ac:	30825e26 	beq	r6,r2,8004228 <_dtoa_r+0x1304>
 80038b0:	1d400003 	ldbu	r21,0(r3)
 80038b4:	102f883a 	mov	r23,r2
 80038b8:	10bfffc4 	addi	r2,r2,-1
 80038bc:	a9003fcc 	andi	r4,r21,255
 80038c0:	2100201c 	xori	r4,r4,128
 80038c4:	213fe004 	addi	r4,r4,-128
 80038c8:	217ff726 	beq	r4,r5,80038a8 <__alt_data_end+0xfc0038a8>
 80038cc:	aa000044 	addi	r8,r21,1
 80038d0:	12000005 	stb	r8,0(r2)
 80038d4:	003f4106 	br	80035dc <__alt_data_end+0xfc0035dc>
 80038d8:	d8c00b17 	ldw	r3,44(sp)
 80038dc:	18006726 	beq	r3,zero,8003a7c <_dtoa_r+0xb58>
 80038e0:	d9000317 	ldw	r4,12(sp)
 80038e4:	00c00044 	movi	r3,1
 80038e8:	19016a0e 	bge	r3,r4,8003e94 <_dtoa_r+0xf70>
 80038ec:	d8800617 	ldw	r2,24(sp)
 80038f0:	d8c00917 	ldw	r3,36(sp)
 80038f4:	157fffc4 	addi	r21,r2,-1
 80038f8:	1d420716 	blt	r3,r21,8004118 <_dtoa_r+0x11f4>
 80038fc:	1d6bc83a 	sub	r21,r3,r21
 8003900:	d8800617 	ldw	r2,24(sp)
 8003904:	1002c716 	blt	r2,zero,8004424 <_dtoa_r+0x1500>
 8003908:	dd000817 	ldw	r20,32(sp)
 800390c:	d8800617 	ldw	r2,24(sp)
 8003910:	d9800817 	ldw	r6,32(sp)
 8003914:	8009883a 	mov	r4,r16
 8003918:	01400044 	movi	r5,1
 800391c:	308d883a 	add	r6,r6,r2
 8003920:	d9800815 	stw	r6,32(sp)
 8003924:	b0ad883a 	add	r22,r22,r2
 8003928:	800694c0 	call	800694c <__i2b>
 800392c:	1023883a 	mov	r17,r2
 8003930:	a0000826 	beq	r20,zero,8003954 <_dtoa_r+0xa30>
 8003934:	0580070e 	bge	zero,r22,8003954 <_dtoa_r+0xa30>
 8003938:	b005883a 	mov	r2,r22
 800393c:	a5812016 	blt	r20,r22,8003dc0 <_dtoa_r+0xe9c>
 8003940:	d8c00817 	ldw	r3,32(sp)
 8003944:	a0a9c83a 	sub	r20,r20,r2
 8003948:	b0adc83a 	sub	r22,r22,r2
 800394c:	1887c83a 	sub	r3,r3,r2
 8003950:	d8c00815 	stw	r3,32(sp)
 8003954:	d9000917 	ldw	r4,36(sp)
 8003958:	0100140e 	bge	zero,r4,80039ac <_dtoa_r+0xa88>
 800395c:	d9800b17 	ldw	r6,44(sp)
 8003960:	3001e526 	beq	r6,zero,80040f8 <_dtoa_r+0x11d4>
 8003964:	05400e0e 	bge	zero,r21,80039a0 <_dtoa_r+0xa7c>
 8003968:	880b883a 	mov	r5,r17
 800396c:	8009883a 	mov	r4,r16
 8003970:	a80d883a 	mov	r6,r21
 8003974:	8006b840 	call	8006b84 <__pow5mult>
 8003978:	e00d883a 	mov	r6,fp
 800397c:	8009883a 	mov	r4,r16
 8003980:	100b883a 	mov	r5,r2
 8003984:	1023883a 	mov	r17,r2
 8003988:	80069880 	call	8006988 <__multiply>
 800398c:	102f883a 	mov	r23,r2
 8003990:	e00b883a 	mov	r5,fp
 8003994:	8009883a 	mov	r4,r16
 8003998:	80065f40 	call	80065f4 <_Bfree>
 800399c:	b839883a 	mov	fp,r23
 80039a0:	d8800917 	ldw	r2,36(sp)
 80039a4:	154dc83a 	sub	r6,r2,r21
 80039a8:	3001281e 	bne	r6,zero,8003e4c <_dtoa_r+0xf28>
 80039ac:	05c00044 	movi	r23,1
 80039b0:	8009883a 	mov	r4,r16
 80039b4:	b80b883a 	mov	r5,r23
 80039b8:	800694c0 	call	800694c <__i2b>
 80039bc:	d8c00a17 	ldw	r3,40(sp)
 80039c0:	102b883a 	mov	r21,r2
 80039c4:	00c0310e 	bge	zero,r3,8003a8c <_dtoa_r+0xb68>
 80039c8:	8009883a 	mov	r4,r16
 80039cc:	100b883a 	mov	r5,r2
 80039d0:	180d883a 	mov	r6,r3
 80039d4:	8006b840 	call	8006b84 <__pow5mult>
 80039d8:	d9000317 	ldw	r4,12(sp)
 80039dc:	102b883a 	mov	r21,r2
 80039e0:	b9011f0e 	bge	r23,r4,8003e60 <_dtoa_r+0xf3c>
 80039e4:	0027883a 	mov	r19,zero
 80039e8:	a8800417 	ldw	r2,16(r21)
 80039ec:	10800104 	addi	r2,r2,4
 80039f0:	1085883a 	add	r2,r2,r2
 80039f4:	1085883a 	add	r2,r2,r2
 80039f8:	a885883a 	add	r2,r21,r2
 80039fc:	11000017 	ldw	r4,0(r2)
 8003a00:	80068340 	call	8006834 <__hi0bits>
 8003a04:	00c00804 	movi	r3,32
 8003a08:	1885c83a 	sub	r2,r3,r2
 8003a0c:	00002506 	br	8003aa4 <_dtoa_r+0xb80>
 8003a10:	01800044 	movi	r6,1
 8003a14:	d9800c15 	stw	r6,48(sp)
 8003a18:	003dec06 	br	80031cc <__alt_data_end+0xfc0031cc>
 8003a1c:	d8c00817 	ldw	r3,32(sp)
 8003a20:	d9000517 	ldw	r4,20(sp)
 8003a24:	d8000a15 	stw	zero,40(sp)
 8003a28:	1907c83a 	sub	r3,r3,r4
 8003a2c:	010dc83a 	sub	r6,zero,r4
 8003a30:	d8c00815 	stw	r3,32(sp)
 8003a34:	d9800915 	stw	r6,36(sp)
 8003a38:	003ded06 	br	80031f0 <__alt_data_end+0xfc0031f0>
 8003a3c:	05adc83a 	sub	r22,zero,r22
 8003a40:	dd800815 	stw	r22,32(sp)
 8003a44:	002d883a 	mov	r22,zero
 8003a48:	003de406 	br	80031dc <__alt_data_end+0xfc0031dc>
 8003a4c:	d9000517 	ldw	r4,20(sp)
 8003a50:	800cd580 	call	800cd58 <__floatsidf>
 8003a54:	1009883a 	mov	r4,r2
 8003a58:	180b883a 	mov	r5,r3
 8003a5c:	b00d883a 	mov	r6,r22
 8003a60:	a80f883a 	mov	r7,r21
 8003a64:	800ba980 	call	800ba98 <__eqdf2>
 8003a68:	103dc726 	beq	r2,zero,8003188 <__alt_data_end+0xfc003188>
 8003a6c:	d8800517 	ldw	r2,20(sp)
 8003a70:	10bfffc4 	addi	r2,r2,-1
 8003a74:	d8800515 	stw	r2,20(sp)
 8003a78:	003dc306 	br	8003188 <__alt_data_end+0xfc003188>
 8003a7c:	dd400917 	ldw	r21,36(sp)
 8003a80:	dd000817 	ldw	r20,32(sp)
 8003a84:	0023883a 	mov	r17,zero
 8003a88:	003fa906 	br	8003930 <__alt_data_end+0xfc003930>
 8003a8c:	d9800317 	ldw	r6,12(sp)
 8003a90:	b981670e 	bge	r23,r6,8004030 <_dtoa_r+0x110c>
 8003a94:	0027883a 	mov	r19,zero
 8003a98:	d8c00a17 	ldw	r3,40(sp)
 8003a9c:	183fd21e 	bne	r3,zero,80039e8 <__alt_data_end+0xfc0039e8>
 8003aa0:	00800044 	movi	r2,1
 8003aa4:	1585883a 	add	r2,r2,r22
 8003aa8:	108007cc 	andi	r2,r2,31
 8003aac:	10005f26 	beq	r2,zero,8003c2c <_dtoa_r+0xd08>
 8003ab0:	00c00804 	movi	r3,32
 8003ab4:	1887c83a 	sub	r3,r3,r2
 8003ab8:	01000104 	movi	r4,4
 8003abc:	20c2dd0e 	bge	r4,r3,8004634 <_dtoa_r+0x1710>
 8003ac0:	d9000817 	ldw	r4,32(sp)
 8003ac4:	00c00704 	movi	r3,28
 8003ac8:	1885c83a 	sub	r2,r3,r2
 8003acc:	2089883a 	add	r4,r4,r2
 8003ad0:	d9000815 	stw	r4,32(sp)
 8003ad4:	a0a9883a 	add	r20,r20,r2
 8003ad8:	b0ad883a 	add	r22,r22,r2
 8003adc:	d8800817 	ldw	r2,32(sp)
 8003ae0:	0080050e 	bge	zero,r2,8003af8 <_dtoa_r+0xbd4>
 8003ae4:	e00b883a 	mov	r5,fp
 8003ae8:	8009883a 	mov	r4,r16
 8003aec:	100d883a 	mov	r6,r2
 8003af0:	8006cc40 	call	8006cc4 <__lshift>
 8003af4:	1039883a 	mov	fp,r2
 8003af8:	0580050e 	bge	zero,r22,8003b10 <_dtoa_r+0xbec>
 8003afc:	a80b883a 	mov	r5,r21
 8003b00:	8009883a 	mov	r4,r16
 8003b04:	b00d883a 	mov	r6,r22
 8003b08:	8006cc40 	call	8006cc4 <__lshift>
 8003b0c:	102b883a 	mov	r21,r2
 8003b10:	d8c00c17 	ldw	r3,48(sp)
 8003b14:	1801161e 	bne	r3,zero,8003f70 <_dtoa_r+0x104c>
 8003b18:	d8c00617 	ldw	r3,24(sp)
 8003b1c:	00c12d0e 	bge	zero,r3,8003fd4 <_dtoa_r+0x10b0>
 8003b20:	d8c00b17 	ldw	r3,44(sp)
 8003b24:	1800571e 	bne	r3,zero,8003c84 <_dtoa_r+0xd60>
 8003b28:	dc800717 	ldw	r18,28(sp)
 8003b2c:	dcc00617 	ldw	r19,24(sp)
 8003b30:	9029883a 	mov	r20,r18
 8003b34:	00000206 	br	8003b40 <_dtoa_r+0xc1c>
 8003b38:	800661c0 	call	800661c <__multadd>
 8003b3c:	1039883a 	mov	fp,r2
 8003b40:	e009883a 	mov	r4,fp
 8003b44:	a80b883a 	mov	r5,r21
 8003b48:	8002d240 	call	8002d24 <quorem>
 8003b4c:	10800c04 	addi	r2,r2,48
 8003b50:	90800005 	stb	r2,0(r18)
 8003b54:	94800044 	addi	r18,r18,1
 8003b58:	9507c83a 	sub	r3,r18,r20
 8003b5c:	8009883a 	mov	r4,r16
 8003b60:	e00b883a 	mov	r5,fp
 8003b64:	01800284 	movi	r6,10
 8003b68:	000f883a 	mov	r7,zero
 8003b6c:	1cfff216 	blt	r3,r19,8003b38 <__alt_data_end+0xfc003b38>
 8003b70:	1011883a 	mov	r8,r2
 8003b74:	d8800617 	ldw	r2,24(sp)
 8003b78:	00822e0e 	bge	zero,r2,8004434 <_dtoa_r+0x1510>
 8003b7c:	d9000717 	ldw	r4,28(sp)
 8003b80:	0025883a 	mov	r18,zero
 8003b84:	20af883a 	add	r23,r4,r2
 8003b88:	e00b883a 	mov	r5,fp
 8003b8c:	01800044 	movi	r6,1
 8003b90:	8009883a 	mov	r4,r16
 8003b94:	da001715 	stw	r8,92(sp)
 8003b98:	8006cc40 	call	8006cc4 <__lshift>
 8003b9c:	1009883a 	mov	r4,r2
 8003ba0:	a80b883a 	mov	r5,r21
 8003ba4:	1039883a 	mov	fp,r2
 8003ba8:	8006e0c0 	call	8006e0c <__mcmp>
 8003bac:	da001717 	ldw	r8,92(sp)
 8003bb0:	00816e0e 	bge	zero,r2,800416c <_dtoa_r+0x1248>
 8003bb4:	b93fffc3 	ldbu	r4,-1(r23)
 8003bb8:	b8bfffc4 	addi	r2,r23,-1
 8003bbc:	1007883a 	mov	r3,r2
 8003bc0:	01800e44 	movi	r6,57
 8003bc4:	d9c00717 	ldw	r7,28(sp)
 8003bc8:	00000506 	br	8003be0 <_dtoa_r+0xcbc>
 8003bcc:	18ffffc4 	addi	r3,r3,-1
 8003bd0:	38811926 	beq	r7,r2,8004038 <_dtoa_r+0x1114>
 8003bd4:	19000003 	ldbu	r4,0(r3)
 8003bd8:	102f883a 	mov	r23,r2
 8003bdc:	10bfffc4 	addi	r2,r2,-1
 8003be0:	21403fcc 	andi	r5,r4,255
 8003be4:	2940201c 	xori	r5,r5,128
 8003be8:	297fe004 	addi	r5,r5,-128
 8003bec:	29bff726 	beq	r5,r6,8003bcc <__alt_data_end+0xfc003bcc>
 8003bf0:	21000044 	addi	r4,r4,1
 8003bf4:	11000005 	stb	r4,0(r2)
 8003bf8:	8009883a 	mov	r4,r16
 8003bfc:	a80b883a 	mov	r5,r21
 8003c00:	80065f40 	call	80065f4 <_Bfree>
 8003c04:	883e7526 	beq	r17,zero,80035dc <__alt_data_end+0xfc0035dc>
 8003c08:	90000426 	beq	r18,zero,8003c1c <_dtoa_r+0xcf8>
 8003c0c:	94400326 	beq	r18,r17,8003c1c <_dtoa_r+0xcf8>
 8003c10:	8009883a 	mov	r4,r16
 8003c14:	900b883a 	mov	r5,r18
 8003c18:	80065f40 	call	80065f4 <_Bfree>
 8003c1c:	8009883a 	mov	r4,r16
 8003c20:	880b883a 	mov	r5,r17
 8003c24:	80065f40 	call	80065f4 <_Bfree>
 8003c28:	003e6c06 	br	80035dc <__alt_data_end+0xfc0035dc>
 8003c2c:	00800704 	movi	r2,28
 8003c30:	d9800817 	ldw	r6,32(sp)
 8003c34:	a0a9883a 	add	r20,r20,r2
 8003c38:	b0ad883a 	add	r22,r22,r2
 8003c3c:	308d883a 	add	r6,r6,r2
 8003c40:	d9800815 	stw	r6,32(sp)
 8003c44:	003fa506 	br	8003adc <__alt_data_end+0xfc003adc>
 8003c48:	013efb84 	movi	r4,-1042
 8003c4c:	246bc83a 	sub	r21,r4,r17
 8003c50:	9548983a 	sll	r4,r18,r21
 8003c54:	003d1806 	br	80030b8 <__alt_data_end+0xfc0030b8>
 8003c58:	d8000c15 	stw	zero,48(sp)
 8003c5c:	003d5b06 	br	80031cc <__alt_data_end+0xfc0031cc>
 8003c60:	880b883a 	mov	r5,r17
 8003c64:	8009883a 	mov	r4,r16
 8003c68:	01800284 	movi	r6,10
 8003c6c:	000f883a 	mov	r7,zero
 8003c70:	800661c0 	call	800661c <__multadd>
 8003c74:	1023883a 	mov	r17,r2
 8003c78:	d8800d17 	ldw	r2,52(sp)
 8003c7c:	0082550e 	bge	zero,r2,80045d4 <_dtoa_r+0x16b0>
 8003c80:	d8800615 	stw	r2,24(sp)
 8003c84:	0500050e 	bge	zero,r20,8003c9c <_dtoa_r+0xd78>
 8003c88:	880b883a 	mov	r5,r17
 8003c8c:	8009883a 	mov	r4,r16
 8003c90:	a00d883a 	mov	r6,r20
 8003c94:	8006cc40 	call	8006cc4 <__lshift>
 8003c98:	1023883a 	mov	r17,r2
 8003c9c:	98016a1e 	bne	r19,zero,8004248 <_dtoa_r+0x1324>
 8003ca0:	8829883a 	mov	r20,r17
 8003ca4:	d9000617 	ldw	r4,24(sp)
 8003ca8:	dcc00717 	ldw	r19,28(sp)
 8003cac:	9480004c 	andi	r18,r18,1
 8003cb0:	20bfffc4 	addi	r2,r4,-1
 8003cb4:	9885883a 	add	r2,r19,r2
 8003cb8:	d8800415 	stw	r2,16(sp)
 8003cbc:	dc800615 	stw	r18,24(sp)
 8003cc0:	e009883a 	mov	r4,fp
 8003cc4:	a80b883a 	mov	r5,r21
 8003cc8:	8002d240 	call	8002d24 <quorem>
 8003ccc:	e009883a 	mov	r4,fp
 8003cd0:	880b883a 	mov	r5,r17
 8003cd4:	102f883a 	mov	r23,r2
 8003cd8:	8006e0c0 	call	8006e0c <__mcmp>
 8003cdc:	8009883a 	mov	r4,r16
 8003ce0:	a80b883a 	mov	r5,r21
 8003ce4:	a00d883a 	mov	r6,r20
 8003ce8:	102d883a 	mov	r22,r2
 8003cec:	8006e6c0 	call	8006e6c <__mdiff>
 8003cf0:	1007883a 	mov	r3,r2
 8003cf4:	10800317 	ldw	r2,12(r2)
 8003cf8:	bc800c04 	addi	r18,r23,48
 8003cfc:	1000971e 	bne	r2,zero,8003f5c <_dtoa_r+0x1038>
 8003d00:	180b883a 	mov	r5,r3
 8003d04:	e009883a 	mov	r4,fp
 8003d08:	d8c01515 	stw	r3,84(sp)
 8003d0c:	8006e0c0 	call	8006e0c <__mcmp>
 8003d10:	d8c01517 	ldw	r3,84(sp)
 8003d14:	8009883a 	mov	r4,r16
 8003d18:	d8801515 	stw	r2,84(sp)
 8003d1c:	180b883a 	mov	r5,r3
 8003d20:	80065f40 	call	80065f4 <_Bfree>
 8003d24:	d8801517 	ldw	r2,84(sp)
 8003d28:	1000041e 	bne	r2,zero,8003d3c <_dtoa_r+0xe18>
 8003d2c:	d9800317 	ldw	r6,12(sp)
 8003d30:	3000021e 	bne	r6,zero,8003d3c <_dtoa_r+0xe18>
 8003d34:	d8c00617 	ldw	r3,24(sp)
 8003d38:	18007626 	beq	r3,zero,8003f14 <_dtoa_r+0xff0>
 8003d3c:	b0005b16 	blt	r22,zero,8003eac <_dtoa_r+0xf88>
 8003d40:	b000041e 	bne	r22,zero,8003d54 <_dtoa_r+0xe30>
 8003d44:	d9000317 	ldw	r4,12(sp)
 8003d48:	2000021e 	bne	r4,zero,8003d54 <_dtoa_r+0xe30>
 8003d4c:	d8c00617 	ldw	r3,24(sp)
 8003d50:	18005626 	beq	r3,zero,8003eac <_dtoa_r+0xf88>
 8003d54:	00814d16 	blt	zero,r2,800428c <_dtoa_r+0x1368>
 8003d58:	d8c00417 	ldw	r3,16(sp)
 8003d5c:	9d800044 	addi	r22,r19,1
 8003d60:	9c800005 	stb	r18,0(r19)
 8003d64:	b02f883a 	mov	r23,r22
 8003d68:	98c14c26 	beq	r19,r3,800429c <_dtoa_r+0x1378>
 8003d6c:	e00b883a 	mov	r5,fp
 8003d70:	8009883a 	mov	r4,r16
 8003d74:	01800284 	movi	r6,10
 8003d78:	000f883a 	mov	r7,zero
 8003d7c:	800661c0 	call	800661c <__multadd>
 8003d80:	1039883a 	mov	fp,r2
 8003d84:	8d006d26 	beq	r17,r20,8003f3c <_dtoa_r+0x1018>
 8003d88:	880b883a 	mov	r5,r17
 8003d8c:	01800284 	movi	r6,10
 8003d90:	000f883a 	mov	r7,zero
 8003d94:	8009883a 	mov	r4,r16
 8003d98:	800661c0 	call	800661c <__multadd>
 8003d9c:	a00b883a 	mov	r5,r20
 8003da0:	8009883a 	mov	r4,r16
 8003da4:	01800284 	movi	r6,10
 8003da8:	000f883a 	mov	r7,zero
 8003dac:	1023883a 	mov	r17,r2
 8003db0:	800661c0 	call	800661c <__multadd>
 8003db4:	1029883a 	mov	r20,r2
 8003db8:	b027883a 	mov	r19,r22
 8003dbc:	003fc006 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 8003dc0:	a005883a 	mov	r2,r20
 8003dc4:	003ede06 	br	8003940 <__alt_data_end+0xfc003940>
 8003dc8:	01000044 	movi	r4,1
 8003dcc:	d9000b15 	stw	r4,44(sp)
 8003dd0:	d9802217 	ldw	r6,136(sp)
 8003dd4:	0180dc0e 	bge	zero,r6,8004148 <_dtoa_r+0x1224>
 8003dd8:	3023883a 	mov	r17,r6
 8003ddc:	d9800d15 	stw	r6,52(sp)
 8003de0:	d9800615 	stw	r6,24(sp)
 8003de4:	003d1e06 	br	8003260 <__alt_data_end+0xfc003260>
 8003de8:	d8800617 	ldw	r2,24(sp)
 8003dec:	00be3716 	blt	zero,r2,80036cc <__alt_data_end+0xfc0036cc>
 8003df0:	1000be1e 	bne	r2,zero,80040ec <_dtoa_r+0x11c8>
 8003df4:	8809883a 	mov	r4,r17
 8003df8:	a00b883a 	mov	r5,r20
 8003dfc:	000d883a 	mov	r6,zero
 8003e00:	01d00534 	movhi	r7,16404
 8003e04:	800bcdc0 	call	800bcdc <__muldf3>
 8003e08:	1009883a 	mov	r4,r2
 8003e0c:	180b883a 	mov	r5,r3
 8003e10:	900d883a 	mov	r6,r18
 8003e14:	980f883a 	mov	r7,r19
 8003e18:	800bb1c0 	call	800bb1c <__gedf2>
 8003e1c:	002b883a 	mov	r21,zero
 8003e20:	0023883a 	mov	r17,zero
 8003e24:	10007a16 	blt	r2,zero,8004010 <_dtoa_r+0x10ec>
 8003e28:	d9002217 	ldw	r4,136(sp)
 8003e2c:	ddc00717 	ldw	r23,28(sp)
 8003e30:	0108303a 	nor	r4,zero,r4
 8003e34:	d9000515 	stw	r4,20(sp)
 8003e38:	8009883a 	mov	r4,r16
 8003e3c:	a80b883a 	mov	r5,r21
 8003e40:	80065f40 	call	80065f4 <_Bfree>
 8003e44:	883f751e 	bne	r17,zero,8003c1c <__alt_data_end+0xfc003c1c>
 8003e48:	003de406 	br	80035dc <__alt_data_end+0xfc0035dc>
 8003e4c:	e00b883a 	mov	r5,fp
 8003e50:	8009883a 	mov	r4,r16
 8003e54:	8006b840 	call	8006b84 <__pow5mult>
 8003e58:	1039883a 	mov	fp,r2
 8003e5c:	003ed306 	br	80039ac <__alt_data_end+0xfc0039ac>
 8003e60:	903ee01e 	bne	r18,zero,80039e4 <__alt_data_end+0xfc0039e4>
 8003e64:	00800434 	movhi	r2,16
 8003e68:	10bfffc4 	addi	r2,r2,-1
 8003e6c:	9884703a 	and	r2,r19,r2
 8003e70:	103f081e 	bne	r2,zero,8003a94 <__alt_data_end+0xfc003a94>
 8003e74:	9cdffc2c 	andhi	r19,r19,32752
 8003e78:	983f0626 	beq	r19,zero,8003a94 <__alt_data_end+0xfc003a94>
 8003e7c:	d8800817 	ldw	r2,32(sp)
 8003e80:	b5800044 	addi	r22,r22,1
 8003e84:	04c00044 	movi	r19,1
 8003e88:	10800044 	addi	r2,r2,1
 8003e8c:	d8800815 	stw	r2,32(sp)
 8003e90:	003f0106 	br	8003a98 <__alt_data_end+0xfc003a98>
 8003e94:	d9800f17 	ldw	r6,60(sp)
 8003e98:	30016826 	beq	r6,zero,800443c <_dtoa_r+0x1518>
 8003e9c:	10810cc4 	addi	r2,r2,1075
 8003ea0:	dd400917 	ldw	r21,36(sp)
 8003ea4:	dd000817 	ldw	r20,32(sp)
 8003ea8:	003e9906 	br	8003910 <__alt_data_end+0xfc003910>
 8003eac:	9011883a 	mov	r8,r18
 8003eb0:	4007883a 	mov	r3,r8
 8003eb4:	e02d883a 	mov	r22,fp
 8003eb8:	0080100e 	bge	zero,r2,8003efc <_dtoa_r+0xfd8>
 8003ebc:	01800044 	movi	r6,1
 8003ec0:	8009883a 	mov	r4,r16
 8003ec4:	e00b883a 	mov	r5,fp
 8003ec8:	da001515 	stw	r8,84(sp)
 8003ecc:	da001715 	stw	r8,92(sp)
 8003ed0:	8006cc40 	call	8006cc4 <__lshift>
 8003ed4:	1009883a 	mov	r4,r2
 8003ed8:	a80b883a 	mov	r5,r21
 8003edc:	102d883a 	mov	r22,r2
 8003ee0:	8006e0c0 	call	8006e0c <__mcmp>
 8003ee4:	d8c01517 	ldw	r3,84(sp)
 8003ee8:	da001717 	ldw	r8,92(sp)
 8003eec:	0081a50e 	bge	zero,r2,8004584 <_dtoa_r+0x1660>
 8003ef0:	00800e44 	movi	r2,57
 8003ef4:	40817b26 	beq	r8,r2,80044e4 <_dtoa_r+0x15c0>
 8003ef8:	40c00044 	addi	r3,r8,1
 8003efc:	8825883a 	mov	r18,r17
 8003f00:	9dc00044 	addi	r23,r19,1
 8003f04:	98c00005 	stb	r3,0(r19)
 8003f08:	a023883a 	mov	r17,r20
 8003f0c:	b039883a 	mov	fp,r22
 8003f10:	003f3906 	br	8003bf8 <__alt_data_end+0xfc003bf8>
 8003f14:	00800e44 	movi	r2,57
 8003f18:	9011883a 	mov	r8,r18
 8003f1c:	90817226 	beq	r18,r2,80044e8 <_dtoa_r+0x15c4>
 8003f20:	0580010e 	bge	zero,r22,8003f28 <_dtoa_r+0x1004>
 8003f24:	ba000c44 	addi	r8,r23,49
 8003f28:	8825883a 	mov	r18,r17
 8003f2c:	9dc00044 	addi	r23,r19,1
 8003f30:	9a000005 	stb	r8,0(r19)
 8003f34:	a023883a 	mov	r17,r20
 8003f38:	003f2f06 	br	8003bf8 <__alt_data_end+0xfc003bf8>
 8003f3c:	880b883a 	mov	r5,r17
 8003f40:	8009883a 	mov	r4,r16
 8003f44:	01800284 	movi	r6,10
 8003f48:	000f883a 	mov	r7,zero
 8003f4c:	800661c0 	call	800661c <__multadd>
 8003f50:	1023883a 	mov	r17,r2
 8003f54:	1029883a 	mov	r20,r2
 8003f58:	003f9706 	br	8003db8 <__alt_data_end+0xfc003db8>
 8003f5c:	8009883a 	mov	r4,r16
 8003f60:	180b883a 	mov	r5,r3
 8003f64:	80065f40 	call	80065f4 <_Bfree>
 8003f68:	00800044 	movi	r2,1
 8003f6c:	003f7306 	br	8003d3c <__alt_data_end+0xfc003d3c>
 8003f70:	e009883a 	mov	r4,fp
 8003f74:	a80b883a 	mov	r5,r21
 8003f78:	8006e0c0 	call	8006e0c <__mcmp>
 8003f7c:	103ee60e 	bge	r2,zero,8003b18 <__alt_data_end+0xfc003b18>
 8003f80:	8009883a 	mov	r4,r16
 8003f84:	e00b883a 	mov	r5,fp
 8003f88:	01800284 	movi	r6,10
 8003f8c:	000f883a 	mov	r7,zero
 8003f90:	800661c0 	call	800661c <__multadd>
 8003f94:	d9000517 	ldw	r4,20(sp)
 8003f98:	d9800b17 	ldw	r6,44(sp)
 8003f9c:	1039883a 	mov	fp,r2
 8003fa0:	213fffc4 	addi	r4,r4,-1
 8003fa4:	d9000515 	stw	r4,20(sp)
 8003fa8:	303f2d1e 	bne	r6,zero,8003c60 <__alt_data_end+0xfc003c60>
 8003fac:	d9000d17 	ldw	r4,52(sp)
 8003fb0:	0101780e 	bge	zero,r4,8004594 <_dtoa_r+0x1670>
 8003fb4:	d9000615 	stw	r4,24(sp)
 8003fb8:	003edb06 	br	8003b28 <__alt_data_end+0xfc003b28>
 8003fbc:	00800084 	movi	r2,2
 8003fc0:	30818e1e 	bne	r6,r2,80045fc <_dtoa_r+0x16d8>
 8003fc4:	d8000b15 	stw	zero,44(sp)
 8003fc8:	003f8106 	br	8003dd0 <__alt_data_end+0xfc003dd0>
 8003fcc:	d8800717 	ldw	r2,28(sp)
 8003fd0:	003c0306 	br	8002fe0 <__alt_data_end+0xfc002fe0>
 8003fd4:	d9000317 	ldw	r4,12(sp)
 8003fd8:	00800084 	movi	r2,2
 8003fdc:	113ed00e 	bge	r2,r4,8003b20 <__alt_data_end+0xfc003b20>
 8003fe0:	d8c00617 	ldw	r3,24(sp)
 8003fe4:	183f901e 	bne	r3,zero,8003e28 <__alt_data_end+0xfc003e28>
 8003fe8:	a80b883a 	mov	r5,r21
 8003fec:	8009883a 	mov	r4,r16
 8003ff0:	01800144 	movi	r6,5
 8003ff4:	000f883a 	mov	r7,zero
 8003ff8:	800661c0 	call	800661c <__multadd>
 8003ffc:	e009883a 	mov	r4,fp
 8004000:	100b883a 	mov	r5,r2
 8004004:	102b883a 	mov	r21,r2
 8004008:	8006e0c0 	call	8006e0c <__mcmp>
 800400c:	00bf860e 	bge	zero,r2,8003e28 <__alt_data_end+0xfc003e28>
 8004010:	d9800717 	ldw	r6,28(sp)
 8004014:	00800c44 	movi	r2,49
 8004018:	30800005 	stb	r2,0(r6)
 800401c:	d8800517 	ldw	r2,20(sp)
 8004020:	35c00044 	addi	r23,r6,1
 8004024:	10800044 	addi	r2,r2,1
 8004028:	d8800515 	stw	r2,20(sp)
 800402c:	003f8206 	br	8003e38 <__alt_data_end+0xfc003e38>
 8004030:	903e981e 	bne	r18,zero,8003a94 <__alt_data_end+0xfc003a94>
 8004034:	003f8b06 	br	8003e64 <__alt_data_end+0xfc003e64>
 8004038:	d9800517 	ldw	r6,20(sp)
 800403c:	d8c00717 	ldw	r3,28(sp)
 8004040:	00800c44 	movi	r2,49
 8004044:	31800044 	addi	r6,r6,1
 8004048:	d9800515 	stw	r6,20(sp)
 800404c:	18800005 	stb	r2,0(r3)
 8004050:	003ee906 	br	8003bf8 <__alt_data_end+0xfc003bf8>
 8004054:	dc000317 	ldw	r16,12(sp)
 8004058:	003d6006 	br	80035dc <__alt_data_end+0xfc0035dc>
 800405c:	8809883a 	mov	r4,r17
 8004060:	800cd580 	call	800cd58 <__floatsidf>
 8004064:	a009883a 	mov	r4,r20
 8004068:	a80b883a 	mov	r5,r21
 800406c:	100d883a 	mov	r6,r2
 8004070:	180f883a 	mov	r7,r3
 8004074:	800bcdc0 	call	800bcdc <__muldf3>
 8004078:	1009883a 	mov	r4,r2
 800407c:	180b883a 	mov	r5,r3
 8004080:	000d883a 	mov	r6,zero
 8004084:	01d00734 	movhi	r7,16412
 8004088:	800a9300 	call	800a930 <__adddf3>
 800408c:	1023883a 	mov	r17,r2
 8004090:	00bf3034 	movhi	r2,64704
 8004094:	1885883a 	add	r2,r3,r2
 8004098:	d8800e15 	stw	r2,56(sp)
 800409c:	a009883a 	mov	r4,r20
 80040a0:	a80b883a 	mov	r5,r21
 80040a4:	000d883a 	mov	r6,zero
 80040a8:	01d00534 	movhi	r7,16404
 80040ac:	800c4000 	call	800c400 <__subdf3>
 80040b0:	d9c00e17 	ldw	r7,56(sp)
 80040b4:	1009883a 	mov	r4,r2
 80040b8:	180b883a 	mov	r5,r3
 80040bc:	880d883a 	mov	r6,r17
 80040c0:	102b883a 	mov	r21,r2
 80040c4:	1829883a 	mov	r20,r3
 80040c8:	800bb1c0 	call	800bb1c <__gedf2>
 80040cc:	00807716 	blt	zero,r2,80042ac <_dtoa_r+0x1388>
 80040d0:	d8800e17 	ldw	r2,56(sp)
 80040d4:	a809883a 	mov	r4,r21
 80040d8:	a00b883a 	mov	r5,r20
 80040dc:	11e0003c 	xorhi	r7,r2,32768
 80040e0:	880d883a 	mov	r6,r17
 80040e4:	800bbfc0 	call	800bbfc <__ledf2>
 80040e8:	103d6b0e 	bge	r2,zero,8003698 <__alt_data_end+0xfc003698>
 80040ec:	002b883a 	mov	r21,zero
 80040f0:	0023883a 	mov	r17,zero
 80040f4:	003f4c06 	br	8003e28 <__alt_data_end+0xfc003e28>
 80040f8:	d9800917 	ldw	r6,36(sp)
 80040fc:	e00b883a 	mov	r5,fp
 8004100:	8009883a 	mov	r4,r16
 8004104:	8006b840 	call	8006b84 <__pow5mult>
 8004108:	1039883a 	mov	fp,r2
 800410c:	003e2706 	br	80039ac <__alt_data_end+0xfc0039ac>
 8004110:	d8000b15 	stw	zero,44(sp)
 8004114:	003c4906 	br	800323c <__alt_data_end+0xfc00323c>
 8004118:	d9000917 	ldw	r4,36(sp)
 800411c:	d9800a17 	ldw	r6,40(sp)
 8004120:	dd400915 	stw	r21,36(sp)
 8004124:	a905c83a 	sub	r2,r21,r4
 8004128:	308d883a 	add	r6,r6,r2
 800412c:	d9800a15 	stw	r6,40(sp)
 8004130:	002b883a 	mov	r21,zero
 8004134:	003df206 	br	8003900 <__alt_data_end+0xfc003900>
 8004138:	dc800e15 	stw	r18,56(sp)
 800413c:	982b883a 	mov	r21,r19
 8004140:	04400084 	movi	r17,2
 8004144:	003c7406 	br	8003318 <__alt_data_end+0xfc003318>
 8004148:	04400044 	movi	r17,1
 800414c:	dc400d15 	stw	r17,52(sp)
 8004150:	dc400615 	stw	r17,24(sp)
 8004154:	dc402215 	stw	r17,136(sp)
 8004158:	80001115 	stw	zero,68(r16)
 800415c:	000b883a 	mov	r5,zero
 8004160:	003c4a06 	br	800328c <__alt_data_end+0xfc00328c>
 8004164:	3023883a 	mov	r17,r6
 8004168:	003ffb06 	br	8004158 <__alt_data_end+0xfc004158>
 800416c:	1000021e 	bne	r2,zero,8004178 <_dtoa_r+0x1254>
 8004170:	4200004c 	andi	r8,r8,1
 8004174:	403e8f1e 	bne	r8,zero,8003bb4 <__alt_data_end+0xfc003bb4>
 8004178:	01000c04 	movi	r4,48
 800417c:	00000106 	br	8004184 <_dtoa_r+0x1260>
 8004180:	102f883a 	mov	r23,r2
 8004184:	b8bfffc4 	addi	r2,r23,-1
 8004188:	10c00007 	ldb	r3,0(r2)
 800418c:	193ffc26 	beq	r3,r4,8004180 <__alt_data_end+0xfc004180>
 8004190:	003e9906 	br	8003bf8 <__alt_data_end+0xfc003bf8>
 8004194:	d9000517 	ldw	r4,20(sp)
 8004198:	012fc83a 	sub	r23,zero,r4
 800419c:	b800ad26 	beq	r23,zero,8004454 <_dtoa_r+0x1530>
 80041a0:	b88003cc 	andi	r2,r23,15
 80041a4:	100490fa 	slli	r2,r2,3
 80041a8:	00c20074 	movhi	r3,2049
 80041ac:	18ff7c04 	addi	r3,r3,-528
 80041b0:	1885883a 	add	r2,r3,r2
 80041b4:	11800017 	ldw	r6,0(r2)
 80041b8:	11c00117 	ldw	r7,4(r2)
 80041bc:	b82fd13a 	srai	r23,r23,4
 80041c0:	9009883a 	mov	r4,r18
 80041c4:	980b883a 	mov	r5,r19
 80041c8:	800bcdc0 	call	800bcdc <__muldf3>
 80041cc:	1029883a 	mov	r20,r2
 80041d0:	182b883a 	mov	r21,r3
 80041d4:	b800f426 	beq	r23,zero,80045a8 <_dtoa_r+0x1684>
 80041d8:	02020074 	movhi	r8,2049
 80041dc:	423f7204 	addi	r8,r8,-568
 80041e0:	8029883a 	mov	r20,r16
 80041e4:	04400084 	movi	r17,2
 80041e8:	4021883a 	mov	r16,r8
 80041ec:	b980004c 	andi	r6,r23,1
 80041f0:	1009883a 	mov	r4,r2
 80041f4:	b82fd07a 	srai	r23,r23,1
 80041f8:	180b883a 	mov	r5,r3
 80041fc:	30000426 	beq	r6,zero,8004210 <_dtoa_r+0x12ec>
 8004200:	81800017 	ldw	r6,0(r16)
 8004204:	81c00117 	ldw	r7,4(r16)
 8004208:	8c400044 	addi	r17,r17,1
 800420c:	800bcdc0 	call	800bcdc <__muldf3>
 8004210:	84000204 	addi	r16,r16,8
 8004214:	b83ff51e 	bne	r23,zero,80041ec <__alt_data_end+0xfc0041ec>
 8004218:	a021883a 	mov	r16,r20
 800421c:	182b883a 	mov	r21,r3
 8004220:	1029883a 	mov	r20,r2
 8004224:	003c5506 	br	800337c <__alt_data_end+0xfc00337c>
 8004228:	d9800517 	ldw	r6,20(sp)
 800422c:	d9000717 	ldw	r4,28(sp)
 8004230:	00c00c04 	movi	r3,48
 8004234:	31800044 	addi	r6,r6,1
 8004238:	d9800515 	stw	r6,20(sp)
 800423c:	20c00005 	stb	r3,0(r4)
 8004240:	02000c44 	movi	r8,49
 8004244:	003da206 	br	80038d0 <__alt_data_end+0xfc0038d0>
 8004248:	89400117 	ldw	r5,4(r17)
 800424c:	8009883a 	mov	r4,r16
 8004250:	800654c0 	call	800654c <_Balloc>
 8004254:	89800417 	ldw	r6,16(r17)
 8004258:	11000304 	addi	r4,r2,12
 800425c:	89400304 	addi	r5,r17,12
 8004260:	31800084 	addi	r6,r6,2
 8004264:	318d883a 	add	r6,r6,r6
 8004268:	318d883a 	add	r6,r6,r6
 800426c:	1027883a 	mov	r19,r2
 8004270:	80061940 	call	8006194 <memcpy>
 8004274:	8009883a 	mov	r4,r16
 8004278:	980b883a 	mov	r5,r19
 800427c:	01800044 	movi	r6,1
 8004280:	8006cc40 	call	8006cc4 <__lshift>
 8004284:	1029883a 	mov	r20,r2
 8004288:	003e8606 	br	8003ca4 <__alt_data_end+0xfc003ca4>
 800428c:	00800e44 	movi	r2,57
 8004290:	90809526 	beq	r18,r2,80044e8 <_dtoa_r+0x15c4>
 8004294:	92000044 	addi	r8,r18,1
 8004298:	003f2306 	br	8003f28 <__alt_data_end+0xfc003f28>
 800429c:	9011883a 	mov	r8,r18
 80042a0:	8825883a 	mov	r18,r17
 80042a4:	a023883a 	mov	r17,r20
 80042a8:	003e3706 	br	8003b88 <__alt_data_end+0xfc003b88>
 80042ac:	002b883a 	mov	r21,zero
 80042b0:	0023883a 	mov	r17,zero
 80042b4:	003f5606 	br	8004010 <__alt_data_end+0xfc004010>
 80042b8:	51bfffc4 	addi	r6,r10,-1
 80042bc:	300490fa 	slli	r2,r6,3
 80042c0:	00c20074 	movhi	r3,2049
 80042c4:	18ff7c04 	addi	r3,r3,-528
 80042c8:	1885883a 	add	r2,r3,r2
 80042cc:	d9c00e17 	ldw	r7,56(sp)
 80042d0:	11000017 	ldw	r4,0(r2)
 80042d4:	11400117 	ldw	r5,4(r2)
 80042d8:	d8800717 	ldw	r2,28(sp)
 80042dc:	d9801015 	stw	r6,64(sp)
 80042e0:	880d883a 	mov	r6,r17
 80042e4:	da801615 	stw	r10,88(sp)
 80042e8:	15c00044 	addi	r23,r2,1
 80042ec:	800bcdc0 	call	800bcdc <__muldf3>
 80042f0:	a80b883a 	mov	r5,r21
 80042f4:	a009883a 	mov	r4,r20
 80042f8:	d8c01115 	stw	r3,68(sp)
 80042fc:	d8800e15 	stw	r2,56(sp)
 8004300:	800ccd00 	call	800ccd0 <__fixdfsi>
 8004304:	1009883a 	mov	r4,r2
 8004308:	1023883a 	mov	r17,r2
 800430c:	800cd580 	call	800cd58 <__floatsidf>
 8004310:	a009883a 	mov	r4,r20
 8004314:	a80b883a 	mov	r5,r21
 8004318:	100d883a 	mov	r6,r2
 800431c:	180f883a 	mov	r7,r3
 8004320:	800c4000 	call	800c400 <__subdf3>
 8004324:	1813883a 	mov	r9,r3
 8004328:	d8c00717 	ldw	r3,28(sp)
 800432c:	8c400c04 	addi	r17,r17,48
 8004330:	1011883a 	mov	r8,r2
 8004334:	1c400005 	stb	r17,0(r3)
 8004338:	da801617 	ldw	r10,88(sp)
 800433c:	00800044 	movi	r2,1
 8004340:	50802326 	beq	r10,r2,80043d0 <_dtoa_r+0x14ac>
 8004344:	d8800717 	ldw	r2,28(sp)
 8004348:	b82b883a 	mov	r21,r23
 800434c:	dc001315 	stw	r16,76(sp)
 8004350:	12a9883a 	add	r20,r2,r10
 8004354:	4807883a 	mov	r3,r9
 8004358:	4005883a 	mov	r2,r8
 800435c:	dc801415 	stw	r18,80(sp)
 8004360:	000d883a 	mov	r6,zero
 8004364:	01d00934 	movhi	r7,16420
 8004368:	1009883a 	mov	r4,r2
 800436c:	180b883a 	mov	r5,r3
 8004370:	800bcdc0 	call	800bcdc <__muldf3>
 8004374:	180b883a 	mov	r5,r3
 8004378:	1009883a 	mov	r4,r2
 800437c:	1821883a 	mov	r16,r3
 8004380:	1025883a 	mov	r18,r2
 8004384:	800ccd00 	call	800ccd0 <__fixdfsi>
 8004388:	1009883a 	mov	r4,r2
 800438c:	1023883a 	mov	r17,r2
 8004390:	800cd580 	call	800cd58 <__floatsidf>
 8004394:	9009883a 	mov	r4,r18
 8004398:	800b883a 	mov	r5,r16
 800439c:	100d883a 	mov	r6,r2
 80043a0:	180f883a 	mov	r7,r3
 80043a4:	8c400c04 	addi	r17,r17,48
 80043a8:	800c4000 	call	800c400 <__subdf3>
 80043ac:	ad400044 	addi	r21,r21,1
 80043b0:	ac7fffc5 	stb	r17,-1(r21)
 80043b4:	ad3fea1e 	bne	r21,r20,8004360 <__alt_data_end+0xfc004360>
 80043b8:	1813883a 	mov	r9,r3
 80043bc:	d8c01017 	ldw	r3,64(sp)
 80043c0:	dc001317 	ldw	r16,76(sp)
 80043c4:	dc801417 	ldw	r18,80(sp)
 80043c8:	1011883a 	mov	r8,r2
 80043cc:	b8ef883a 	add	r23,r23,r3
 80043d0:	d9000e17 	ldw	r4,56(sp)
 80043d4:	d9401117 	ldw	r5,68(sp)
 80043d8:	000d883a 	mov	r6,zero
 80043dc:	01cff834 	movhi	r7,16352
 80043e0:	da001715 	stw	r8,92(sp)
 80043e4:	da401515 	stw	r9,84(sp)
 80043e8:	800a9300 	call	800a930 <__adddf3>
 80043ec:	da001717 	ldw	r8,92(sp)
 80043f0:	da401517 	ldw	r9,84(sp)
 80043f4:	1009883a 	mov	r4,r2
 80043f8:	400d883a 	mov	r6,r8
 80043fc:	480f883a 	mov	r7,r9
 8004400:	180b883a 	mov	r5,r3
 8004404:	800bbfc0 	call	800bbfc <__ledf2>
 8004408:	da001717 	ldw	r8,92(sp)
 800440c:	da401517 	ldw	r9,84(sp)
 8004410:	10003b0e 	bge	r2,zero,8004500 <_dtoa_r+0x15dc>
 8004414:	d9001217 	ldw	r4,72(sp)
 8004418:	bd7fffc3 	ldbu	r21,-1(r23)
 800441c:	d9000515 	stw	r4,20(sp)
 8004420:	003d1c06 	br	8003894 <__alt_data_end+0xfc003894>
 8004424:	d8c00817 	ldw	r3,32(sp)
 8004428:	18a9c83a 	sub	r20,r3,r2
 800442c:	0005883a 	mov	r2,zero
 8004430:	003d3706 	br	8003910 <__alt_data_end+0xfc003910>
 8004434:	00800044 	movi	r2,1
 8004438:	003dd006 	br	8003b7c <__alt_data_end+0xfc003b7c>
 800443c:	d8c00217 	ldw	r3,8(sp)
 8004440:	00800d84 	movi	r2,54
 8004444:	dd400917 	ldw	r21,36(sp)
 8004448:	10c5c83a 	sub	r2,r2,r3
 800444c:	dd000817 	ldw	r20,32(sp)
 8004450:	003d2f06 	br	8003910 <__alt_data_end+0xfc003910>
 8004454:	9029883a 	mov	r20,r18
 8004458:	982b883a 	mov	r21,r19
 800445c:	04400084 	movi	r17,2
 8004460:	003bc606 	br	800337c <__alt_data_end+0xfc00337c>
 8004464:	d8800617 	ldw	r2,24(sp)
 8004468:	103efc26 	beq	r2,zero,800405c <__alt_data_end+0xfc00405c>
 800446c:	d8c00d17 	ldw	r3,52(sp)
 8004470:	00fc890e 	bge	zero,r3,8003698 <__alt_data_end+0xfc003698>
 8004474:	a80b883a 	mov	r5,r21
 8004478:	a009883a 	mov	r4,r20
 800447c:	000d883a 	mov	r6,zero
 8004480:	01d00934 	movhi	r7,16420
 8004484:	800bcdc0 	call	800bcdc <__muldf3>
 8004488:	89000044 	addi	r4,r17,1
 800448c:	1029883a 	mov	r20,r2
 8004490:	182b883a 	mov	r21,r3
 8004494:	800cd580 	call	800cd58 <__floatsidf>
 8004498:	a009883a 	mov	r4,r20
 800449c:	a80b883a 	mov	r5,r21
 80044a0:	100d883a 	mov	r6,r2
 80044a4:	180f883a 	mov	r7,r3
 80044a8:	800bcdc0 	call	800bcdc <__muldf3>
 80044ac:	1009883a 	mov	r4,r2
 80044b0:	180b883a 	mov	r5,r3
 80044b4:	000d883a 	mov	r6,zero
 80044b8:	01d00734 	movhi	r7,16412
 80044bc:	800a9300 	call	800a930 <__adddf3>
 80044c0:	d9000517 	ldw	r4,20(sp)
 80044c4:	1023883a 	mov	r17,r2
 80044c8:	00bf3034 	movhi	r2,64704
 80044cc:	213fffc4 	addi	r4,r4,-1
 80044d0:	1885883a 	add	r2,r3,r2
 80044d4:	d9001215 	stw	r4,72(sp)
 80044d8:	d8800e15 	stw	r2,56(sp)
 80044dc:	da800d17 	ldw	r10,52(sp)
 80044e0:	003bc306 	br	80033f0 <__alt_data_end+0xfc0033f0>
 80044e4:	b039883a 	mov	fp,r22
 80044e8:	01000e44 	movi	r4,57
 80044ec:	8825883a 	mov	r18,r17
 80044f0:	9dc00044 	addi	r23,r19,1
 80044f4:	99000005 	stb	r4,0(r19)
 80044f8:	a023883a 	mov	r17,r20
 80044fc:	003dae06 	br	8003bb8 <__alt_data_end+0xfc003bb8>
 8004500:	d9800e17 	ldw	r6,56(sp)
 8004504:	d9c01117 	ldw	r7,68(sp)
 8004508:	0009883a 	mov	r4,zero
 800450c:	014ff834 	movhi	r5,16352
 8004510:	da001715 	stw	r8,92(sp)
 8004514:	da401515 	stw	r9,84(sp)
 8004518:	800c4000 	call	800c400 <__subdf3>
 800451c:	da001717 	ldw	r8,92(sp)
 8004520:	da401517 	ldw	r9,84(sp)
 8004524:	1009883a 	mov	r4,r2
 8004528:	180b883a 	mov	r5,r3
 800452c:	400d883a 	mov	r6,r8
 8004530:	480f883a 	mov	r7,r9
 8004534:	800bb1c0 	call	800bb1c <__gedf2>
 8004538:	00bc570e 	bge	zero,r2,8003698 <__alt_data_end+0xfc003698>
 800453c:	01000c04 	movi	r4,48
 8004540:	00000106 	br	8004548 <_dtoa_r+0x1624>
 8004544:	102f883a 	mov	r23,r2
 8004548:	b8bfffc4 	addi	r2,r23,-1
 800454c:	10c00007 	ldb	r3,0(r2)
 8004550:	193ffc26 	beq	r3,r4,8004544 <__alt_data_end+0xfc004544>
 8004554:	d9801217 	ldw	r6,72(sp)
 8004558:	d9800515 	stw	r6,20(sp)
 800455c:	003c1f06 	br	80035dc <__alt_data_end+0xfc0035dc>
 8004560:	d8801217 	ldw	r2,72(sp)
 8004564:	dc001117 	ldw	r16,68(sp)
 8004568:	d8800515 	stw	r2,20(sp)
 800456c:	003cc906 	br	8003894 <__alt_data_end+0xfc003894>
 8004570:	dd801317 	ldw	r22,76(sp)
 8004574:	dc001117 	ldw	r16,68(sp)
 8004578:	dcc01417 	ldw	r19,80(sp)
 800457c:	dc801017 	ldw	r18,64(sp)
 8004580:	003c4506 	br	8003698 <__alt_data_end+0xfc003698>
 8004584:	103e5d1e 	bne	r2,zero,8003efc <__alt_data_end+0xfc003efc>
 8004588:	4080004c 	andi	r2,r8,1
 800458c:	103e5b26 	beq	r2,zero,8003efc <__alt_data_end+0xfc003efc>
 8004590:	003e5706 	br	8003ef0 <__alt_data_end+0xfc003ef0>
 8004594:	d8c00317 	ldw	r3,12(sp)
 8004598:	00800084 	movi	r2,2
 800459c:	10c00a16 	blt	r2,r3,80045c8 <_dtoa_r+0x16a4>
 80045a0:	d9000d17 	ldw	r4,52(sp)
 80045a4:	003e8306 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 80045a8:	04400084 	movi	r17,2
 80045ac:	003b7306 	br	800337c <__alt_data_end+0xfc00337c>
 80045b0:	d9801217 	ldw	r6,72(sp)
 80045b4:	d9800515 	stw	r6,20(sp)
 80045b8:	003cb606 	br	8003894 <__alt_data_end+0xfc003894>
 80045bc:	d9001217 	ldw	r4,72(sp)
 80045c0:	d9000515 	stw	r4,20(sp)
 80045c4:	003c0506 	br	80035dc <__alt_data_end+0xfc0035dc>
 80045c8:	d9800d17 	ldw	r6,52(sp)
 80045cc:	d9800615 	stw	r6,24(sp)
 80045d0:	003e8306 	br	8003fe0 <__alt_data_end+0xfc003fe0>
 80045d4:	d9800317 	ldw	r6,12(sp)
 80045d8:	00800084 	movi	r2,2
 80045dc:	11800216 	blt	r2,r6,80045e8 <_dtoa_r+0x16c4>
 80045e0:	d8800d17 	ldw	r2,52(sp)
 80045e4:	003da606 	br	8003c80 <__alt_data_end+0xfc003c80>
 80045e8:	d8800d17 	ldw	r2,52(sp)
 80045ec:	d8800615 	stw	r2,24(sp)
 80045f0:	003e7b06 	br	8003fe0 <__alt_data_end+0xfc003fe0>
 80045f4:	05000044 	movi	r20,1
 80045f8:	003b0506 	br	8003210 <__alt_data_end+0xfc003210>
 80045fc:	8009883a 	mov	r4,r16
 8004600:	80001115 	stw	zero,68(r16)
 8004604:	000b883a 	mov	r5,zero
 8004608:	800654c0 	call	800654c <_Balloc>
 800460c:	d8800715 	stw	r2,28(sp)
 8004610:	d8c00717 	ldw	r3,28(sp)
 8004614:	00bfffc4 	movi	r2,-1
 8004618:	01000044 	movi	r4,1
 800461c:	d8800615 	stw	r2,24(sp)
 8004620:	80c01015 	stw	r3,64(r16)
 8004624:	d9000b15 	stw	r4,44(sp)
 8004628:	d8002215 	stw	zero,136(sp)
 800462c:	d8800d15 	stw	r2,52(sp)
 8004630:	003c1906 	br	8003698 <__alt_data_end+0xfc003698>
 8004634:	193d2926 	beq	r3,r4,8003adc <__alt_data_end+0xfc003adc>
 8004638:	00c00f04 	movi	r3,60
 800463c:	1885c83a 	sub	r2,r3,r2
 8004640:	003d7b06 	br	8003c30 <__alt_data_end+0xfc003c30>
 8004644:	000b883a 	mov	r5,zero
 8004648:	003b1006 	br	800328c <__alt_data_end+0xfc00328c>

0800464c <_fflush_r>:
 800464c:	defffb04 	addi	sp,sp,-20
 8004650:	dcc00315 	stw	r19,12(sp)
 8004654:	dc000015 	stw	r16,0(sp)
 8004658:	dfc00415 	stw	ra,16(sp)
 800465c:	dc800215 	stw	r18,8(sp)
 8004660:	dc400115 	stw	r17,4(sp)
 8004664:	2027883a 	mov	r19,r4
 8004668:	2821883a 	mov	r16,r5
 800466c:	20000226 	beq	r4,zero,8004678 <_fflush_r+0x2c>
 8004670:	20800e17 	ldw	r2,56(r4)
 8004674:	10005326 	beq	r2,zero,80047c4 <_fflush_r+0x178>
 8004678:	8080030b 	ldhu	r2,12(r16)
 800467c:	10ffffcc 	andi	r3,r2,65535
 8004680:	18e0001c 	xori	r3,r3,32768
 8004684:	18e00004 	addi	r3,r3,-32768
 8004688:	18002c26 	beq	r3,zero,800473c <_fflush_r+0xf0>
 800468c:	10c0020c 	andi	r3,r2,8
 8004690:	1800321e 	bne	r3,zero,800475c <_fflush_r+0x110>
 8004694:	80c00117 	ldw	r3,4(r16)
 8004698:	10820014 	ori	r2,r2,2048
 800469c:	8080030d 	sth	r2,12(r16)
 80046a0:	00c0570e 	bge	zero,r3,8004800 <_fflush_r+0x1b4>
 80046a4:	82000a17 	ldw	r8,40(r16)
 80046a8:	40002426 	beq	r8,zero,800473c <_fflush_r+0xf0>
 80046ac:	9c400017 	ldw	r17,0(r19)
 80046b0:	10c4000c 	andi	r3,r2,4096
 80046b4:	98000015 	stw	zero,0(r19)
 80046b8:	18004626 	beq	r3,zero,80047d4 <_fflush_r+0x188>
 80046bc:	81801417 	ldw	r6,80(r16)
 80046c0:	10c0010c 	andi	r3,r2,4
 80046c4:	18000626 	beq	r3,zero,80046e0 <_fflush_r+0x94>
 80046c8:	80c00117 	ldw	r3,4(r16)
 80046cc:	80800c17 	ldw	r2,48(r16)
 80046d0:	30cdc83a 	sub	r6,r6,r3
 80046d4:	10000226 	beq	r2,zero,80046e0 <_fflush_r+0x94>
 80046d8:	80800f17 	ldw	r2,60(r16)
 80046dc:	308dc83a 	sub	r6,r6,r2
 80046e0:	81400717 	ldw	r5,28(r16)
 80046e4:	9809883a 	mov	r4,r19
 80046e8:	000f883a 	mov	r7,zero
 80046ec:	403ee83a 	callr	r8
 80046f0:	00ffffc4 	movi	r3,-1
 80046f4:	10c04526 	beq	r2,r3,800480c <_fflush_r+0x1c0>
 80046f8:	80c0030b 	ldhu	r3,12(r16)
 80046fc:	81000417 	ldw	r4,16(r16)
 8004700:	80000115 	stw	zero,4(r16)
 8004704:	197dffcc 	andi	r5,r3,63487
 8004708:	8140030d 	sth	r5,12(r16)
 800470c:	81000015 	stw	r4,0(r16)
 8004710:	18c4000c 	andi	r3,r3,4096
 8004714:	18000126 	beq	r3,zero,800471c <_fflush_r+0xd0>
 8004718:	80801415 	stw	r2,80(r16)
 800471c:	81400c17 	ldw	r5,48(r16)
 8004720:	9c400015 	stw	r17,0(r19)
 8004724:	28000526 	beq	r5,zero,800473c <_fflush_r+0xf0>
 8004728:	80801004 	addi	r2,r16,64
 800472c:	28800226 	beq	r5,r2,8004738 <_fflush_r+0xec>
 8004730:	9809883a 	mov	r4,r19
 8004734:	8004d680 	call	8004d68 <_free_r>
 8004738:	80000c15 	stw	zero,48(r16)
 800473c:	0005883a 	mov	r2,zero
 8004740:	dfc00417 	ldw	ra,16(sp)
 8004744:	dcc00317 	ldw	r19,12(sp)
 8004748:	dc800217 	ldw	r18,8(sp)
 800474c:	dc400117 	ldw	r17,4(sp)
 8004750:	dc000017 	ldw	r16,0(sp)
 8004754:	dec00504 	addi	sp,sp,20
 8004758:	f800283a 	ret
 800475c:	84800417 	ldw	r18,16(r16)
 8004760:	903ff626 	beq	r18,zero,800473c <__alt_data_end+0xfc00473c>
 8004764:	84400017 	ldw	r17,0(r16)
 8004768:	108000cc 	andi	r2,r2,3
 800476c:	84800015 	stw	r18,0(r16)
 8004770:	8ca3c83a 	sub	r17,r17,r18
 8004774:	10001526 	beq	r2,zero,80047cc <_fflush_r+0x180>
 8004778:	0005883a 	mov	r2,zero
 800477c:	80800215 	stw	r2,8(r16)
 8004780:	04400316 	blt	zero,r17,8004790 <_fflush_r+0x144>
 8004784:	003fed06 	br	800473c <__alt_data_end+0xfc00473c>
 8004788:	90a5883a 	add	r18,r18,r2
 800478c:	047feb0e 	bge	zero,r17,800473c <__alt_data_end+0xfc00473c>
 8004790:	80800917 	ldw	r2,36(r16)
 8004794:	81400717 	ldw	r5,28(r16)
 8004798:	880f883a 	mov	r7,r17
 800479c:	900d883a 	mov	r6,r18
 80047a0:	9809883a 	mov	r4,r19
 80047a4:	103ee83a 	callr	r2
 80047a8:	88a3c83a 	sub	r17,r17,r2
 80047ac:	00bff616 	blt	zero,r2,8004788 <__alt_data_end+0xfc004788>
 80047b0:	80c0030b 	ldhu	r3,12(r16)
 80047b4:	00bfffc4 	movi	r2,-1
 80047b8:	18c01014 	ori	r3,r3,64
 80047bc:	80c0030d 	sth	r3,12(r16)
 80047c0:	003fdf06 	br	8004740 <__alt_data_end+0xfc004740>
 80047c4:	8004bf40 	call	8004bf4 <__sinit>
 80047c8:	003fab06 	br	8004678 <__alt_data_end+0xfc004678>
 80047cc:	80800517 	ldw	r2,20(r16)
 80047d0:	003fea06 	br	800477c <__alt_data_end+0xfc00477c>
 80047d4:	81400717 	ldw	r5,28(r16)
 80047d8:	000d883a 	mov	r6,zero
 80047dc:	9809883a 	mov	r4,r19
 80047e0:	01c00044 	movi	r7,1
 80047e4:	403ee83a 	callr	r8
 80047e8:	100d883a 	mov	r6,r2
 80047ec:	00bfffc4 	movi	r2,-1
 80047f0:	30801326 	beq	r6,r2,8004840 <_fflush_r+0x1f4>
 80047f4:	8080030b 	ldhu	r2,12(r16)
 80047f8:	82000a17 	ldw	r8,40(r16)
 80047fc:	003fb006 	br	80046c0 <__alt_data_end+0xfc0046c0>
 8004800:	80c00f17 	ldw	r3,60(r16)
 8004804:	00ffa716 	blt	zero,r3,80046a4 <__alt_data_end+0xfc0046a4>
 8004808:	003fcc06 	br	800473c <__alt_data_end+0xfc00473c>
 800480c:	98c00017 	ldw	r3,0(r19)
 8004810:	183fb926 	beq	r3,zero,80046f8 <__alt_data_end+0xfc0046f8>
 8004814:	01000744 	movi	r4,29
 8004818:	19000226 	beq	r3,r4,8004824 <_fflush_r+0x1d8>
 800481c:	01000584 	movi	r4,22
 8004820:	1900101e 	bne	r3,r4,8004864 <_fflush_r+0x218>
 8004824:	8080030b 	ldhu	r2,12(r16)
 8004828:	80c00417 	ldw	r3,16(r16)
 800482c:	80000115 	stw	zero,4(r16)
 8004830:	10bdffcc 	andi	r2,r2,63487
 8004834:	8080030d 	sth	r2,12(r16)
 8004838:	80c00015 	stw	r3,0(r16)
 800483c:	003fb706 	br	800471c <__alt_data_end+0xfc00471c>
 8004840:	98800017 	ldw	r2,0(r19)
 8004844:	103feb26 	beq	r2,zero,80047f4 <__alt_data_end+0xfc0047f4>
 8004848:	00c00744 	movi	r3,29
 800484c:	10c00226 	beq	r2,r3,8004858 <_fflush_r+0x20c>
 8004850:	00c00584 	movi	r3,22
 8004854:	10ffd61e 	bne	r2,r3,80047b0 <__alt_data_end+0xfc0047b0>
 8004858:	9c400015 	stw	r17,0(r19)
 800485c:	0005883a 	mov	r2,zero
 8004860:	003fb706 	br	8004740 <__alt_data_end+0xfc004740>
 8004864:	80c0030b 	ldhu	r3,12(r16)
 8004868:	18c01014 	ori	r3,r3,64
 800486c:	80c0030d 	sth	r3,12(r16)
 8004870:	003fb306 	br	8004740 <__alt_data_end+0xfc004740>

08004874 <fflush>:
 8004874:	20000526 	beq	r4,zero,800488c <fflush+0x18>
 8004878:	00820074 	movhi	r2,2049
 800487c:	1086c004 	addi	r2,r2,6912
 8004880:	200b883a 	mov	r5,r4
 8004884:	11000017 	ldw	r4,0(r2)
 8004888:	800464c1 	jmpi	800464c <_fflush_r>
 800488c:	00820074 	movhi	r2,2049
 8004890:	1086bf04 	addi	r2,r2,6908
 8004894:	11000017 	ldw	r4,0(r2)
 8004898:	01420034 	movhi	r5,2048
 800489c:	29519304 	addi	r5,r5,17996
 80048a0:	80055b41 	jmpi	80055b4 <_fwalk_reent>

080048a4 <__fp_lock>:
 80048a4:	0005883a 	mov	r2,zero
 80048a8:	f800283a 	ret

080048ac <__fp_unlock>:
 80048ac:	0005883a 	mov	r2,zero
 80048b0:	f800283a 	ret

080048b4 <_cleanup_r>:
 80048b4:	01420074 	movhi	r5,2049
 80048b8:	2965c004 	addi	r5,r5,-26880
 80048bc:	80054fc1 	jmpi	80054fc <_fwalk>

080048c0 <__sinit.part.1>:
 80048c0:	defff604 	addi	sp,sp,-40
 80048c4:	00c20034 	movhi	r3,2048
 80048c8:	dfc00915 	stw	ra,36(sp)
 80048cc:	df000815 	stw	fp,32(sp)
 80048d0:	ddc00715 	stw	r23,28(sp)
 80048d4:	dd800615 	stw	r22,24(sp)
 80048d8:	dd400515 	stw	r21,20(sp)
 80048dc:	dd000415 	stw	r20,16(sp)
 80048e0:	dcc00315 	stw	r19,12(sp)
 80048e4:	dc800215 	stw	r18,8(sp)
 80048e8:	dc400115 	stw	r17,4(sp)
 80048ec:	dc000015 	stw	r16,0(sp)
 80048f0:	18d22d04 	addi	r3,r3,18612
 80048f4:	24000117 	ldw	r16,4(r4)
 80048f8:	20c00f15 	stw	r3,60(r4)
 80048fc:	07000044 	movi	fp,1
 8004900:	00c000c4 	movi	r3,3
 8004904:	2080bb04 	addi	r2,r4,748
 8004908:	20c0b915 	stw	r3,740(r4)
 800490c:	27000e15 	stw	fp,56(r4)
 8004910:	2080ba15 	stw	r2,744(r4)
 8004914:	2000b815 	stw	zero,736(r4)
 8004918:	05c00204 	movi	r23,8
 800491c:	00800104 	movi	r2,4
 8004920:	2025883a 	mov	r18,r4
 8004924:	b80d883a 	mov	r6,r23
 8004928:	81001704 	addi	r4,r16,92
 800492c:	000b883a 	mov	r5,zero
 8004930:	80000015 	stw	zero,0(r16)
 8004934:	80000115 	stw	zero,4(r16)
 8004938:	80000215 	stw	zero,8(r16)
 800493c:	8080030d 	sth	r2,12(r16)
 8004940:	80001915 	stw	zero,100(r16)
 8004944:	8000038d 	sth	zero,14(r16)
 8004948:	80000415 	stw	zero,16(r16)
 800494c:	80000515 	stw	zero,20(r16)
 8004950:	80000615 	stw	zero,24(r16)
 8004954:	80064280 	call	8006428 <memset>
 8004958:	05820034 	movhi	r22,2048
 800495c:	94400217 	ldw	r17,8(r18)
 8004960:	05420034 	movhi	r21,2048
 8004964:	05020034 	movhi	r20,2048
 8004968:	04c20034 	movhi	r19,2048
 800496c:	b59f2a04 	addi	r22,r22,31912
 8004970:	ad5f4104 	addi	r21,r21,32004
 8004974:	a51f6004 	addi	r20,r20,32128
 8004978:	9cdf7704 	addi	r19,r19,32220
 800497c:	85800815 	stw	r22,32(r16)
 8004980:	85400915 	stw	r21,36(r16)
 8004984:	85000a15 	stw	r20,40(r16)
 8004988:	84c00b15 	stw	r19,44(r16)
 800498c:	84000715 	stw	r16,28(r16)
 8004990:	00800284 	movi	r2,10
 8004994:	89001704 	addi	r4,r17,92
 8004998:	b80d883a 	mov	r6,r23
 800499c:	000b883a 	mov	r5,zero
 80049a0:	88000015 	stw	zero,0(r17)
 80049a4:	88000115 	stw	zero,4(r17)
 80049a8:	88000215 	stw	zero,8(r17)
 80049ac:	8880030d 	sth	r2,12(r17)
 80049b0:	88001915 	stw	zero,100(r17)
 80049b4:	8f00038d 	sth	fp,14(r17)
 80049b8:	88000415 	stw	zero,16(r17)
 80049bc:	88000515 	stw	zero,20(r17)
 80049c0:	88000615 	stw	zero,24(r17)
 80049c4:	80064280 	call	8006428 <memset>
 80049c8:	94000317 	ldw	r16,12(r18)
 80049cc:	00800484 	movi	r2,18
 80049d0:	8c400715 	stw	r17,28(r17)
 80049d4:	8d800815 	stw	r22,32(r17)
 80049d8:	8d400915 	stw	r21,36(r17)
 80049dc:	8d000a15 	stw	r20,40(r17)
 80049e0:	8cc00b15 	stw	r19,44(r17)
 80049e4:	8080030d 	sth	r2,12(r16)
 80049e8:	00800084 	movi	r2,2
 80049ec:	80000015 	stw	zero,0(r16)
 80049f0:	80000115 	stw	zero,4(r16)
 80049f4:	80000215 	stw	zero,8(r16)
 80049f8:	80001915 	stw	zero,100(r16)
 80049fc:	8080038d 	sth	r2,14(r16)
 8004a00:	80000415 	stw	zero,16(r16)
 8004a04:	80000515 	stw	zero,20(r16)
 8004a08:	80000615 	stw	zero,24(r16)
 8004a0c:	81001704 	addi	r4,r16,92
 8004a10:	000b883a 	mov	r5,zero
 8004a14:	b80d883a 	mov	r6,r23
 8004a18:	80064280 	call	8006428 <memset>
 8004a1c:	84000715 	stw	r16,28(r16)
 8004a20:	85800815 	stw	r22,32(r16)
 8004a24:	85400915 	stw	r21,36(r16)
 8004a28:	85000a15 	stw	r20,40(r16)
 8004a2c:	84c00b15 	stw	r19,44(r16)
 8004a30:	dfc00917 	ldw	ra,36(sp)
 8004a34:	df000817 	ldw	fp,32(sp)
 8004a38:	ddc00717 	ldw	r23,28(sp)
 8004a3c:	dd800617 	ldw	r22,24(sp)
 8004a40:	dd400517 	ldw	r21,20(sp)
 8004a44:	dd000417 	ldw	r20,16(sp)
 8004a48:	dcc00317 	ldw	r19,12(sp)
 8004a4c:	dc800217 	ldw	r18,8(sp)
 8004a50:	dc400117 	ldw	r17,4(sp)
 8004a54:	dc000017 	ldw	r16,0(sp)
 8004a58:	dec00a04 	addi	sp,sp,40
 8004a5c:	f800283a 	ret

08004a60 <__sfmoreglue>:
 8004a60:	defffc04 	addi	sp,sp,-16
 8004a64:	dc400115 	stw	r17,4(sp)
 8004a68:	2c401a24 	muli	r17,r5,104
 8004a6c:	dc800215 	stw	r18,8(sp)
 8004a70:	2825883a 	mov	r18,r5
 8004a74:	89400304 	addi	r5,r17,12
 8004a78:	dc000015 	stw	r16,0(sp)
 8004a7c:	dfc00315 	stw	ra,12(sp)
 8004a80:	80059040 	call	8005904 <_malloc_r>
 8004a84:	1021883a 	mov	r16,r2
 8004a88:	10000726 	beq	r2,zero,8004aa8 <__sfmoreglue+0x48>
 8004a8c:	11000304 	addi	r4,r2,12
 8004a90:	10000015 	stw	zero,0(r2)
 8004a94:	14800115 	stw	r18,4(r2)
 8004a98:	11000215 	stw	r4,8(r2)
 8004a9c:	000b883a 	mov	r5,zero
 8004aa0:	880d883a 	mov	r6,r17
 8004aa4:	80064280 	call	8006428 <memset>
 8004aa8:	8005883a 	mov	r2,r16
 8004aac:	dfc00317 	ldw	ra,12(sp)
 8004ab0:	dc800217 	ldw	r18,8(sp)
 8004ab4:	dc400117 	ldw	r17,4(sp)
 8004ab8:	dc000017 	ldw	r16,0(sp)
 8004abc:	dec00404 	addi	sp,sp,16
 8004ac0:	f800283a 	ret

08004ac4 <__sfp>:
 8004ac4:	00820074 	movhi	r2,2049
 8004ac8:	defffb04 	addi	sp,sp,-20
 8004acc:	1086bf04 	addi	r2,r2,6908
 8004ad0:	dc800215 	stw	r18,8(sp)
 8004ad4:	14800017 	ldw	r18,0(r2)
 8004ad8:	dcc00315 	stw	r19,12(sp)
 8004adc:	dfc00415 	stw	ra,16(sp)
 8004ae0:	90800e17 	ldw	r2,56(r18)
 8004ae4:	dc400115 	stw	r17,4(sp)
 8004ae8:	dc000015 	stw	r16,0(sp)
 8004aec:	2027883a 	mov	r19,r4
 8004af0:	1000021e 	bne	r2,zero,8004afc <__sfp+0x38>
 8004af4:	9009883a 	mov	r4,r18
 8004af8:	80048c00 	call	80048c0 <__sinit.part.1>
 8004afc:	9480b804 	addi	r18,r18,736
 8004b00:	047fffc4 	movi	r17,-1
 8004b04:	91400117 	ldw	r5,4(r18)
 8004b08:	94000217 	ldw	r16,8(r18)
 8004b0c:	297fffc4 	addi	r5,r5,-1
 8004b10:	28000a16 	blt	r5,zero,8004b3c <__sfp+0x78>
 8004b14:	8080030f 	ldh	r2,12(r16)
 8004b18:	10000c26 	beq	r2,zero,8004b4c <__sfp+0x88>
 8004b1c:	80c01d04 	addi	r3,r16,116
 8004b20:	00000206 	br	8004b2c <__sfp+0x68>
 8004b24:	18bfe60f 	ldh	r2,-104(r3)
 8004b28:	10000826 	beq	r2,zero,8004b4c <__sfp+0x88>
 8004b2c:	297fffc4 	addi	r5,r5,-1
 8004b30:	1c3ffd04 	addi	r16,r3,-12
 8004b34:	18c01a04 	addi	r3,r3,104
 8004b38:	2c7ffa1e 	bne	r5,r17,8004b24 <__alt_data_end+0xfc004b24>
 8004b3c:	90800017 	ldw	r2,0(r18)
 8004b40:	10001d26 	beq	r2,zero,8004bb8 <__sfp+0xf4>
 8004b44:	1025883a 	mov	r18,r2
 8004b48:	003fee06 	br	8004b04 <__alt_data_end+0xfc004b04>
 8004b4c:	00bfffc4 	movi	r2,-1
 8004b50:	8080038d 	sth	r2,14(r16)
 8004b54:	00800044 	movi	r2,1
 8004b58:	8080030d 	sth	r2,12(r16)
 8004b5c:	80001915 	stw	zero,100(r16)
 8004b60:	80000015 	stw	zero,0(r16)
 8004b64:	80000215 	stw	zero,8(r16)
 8004b68:	80000115 	stw	zero,4(r16)
 8004b6c:	80000415 	stw	zero,16(r16)
 8004b70:	80000515 	stw	zero,20(r16)
 8004b74:	80000615 	stw	zero,24(r16)
 8004b78:	81001704 	addi	r4,r16,92
 8004b7c:	000b883a 	mov	r5,zero
 8004b80:	01800204 	movi	r6,8
 8004b84:	80064280 	call	8006428 <memset>
 8004b88:	8005883a 	mov	r2,r16
 8004b8c:	80000c15 	stw	zero,48(r16)
 8004b90:	80000d15 	stw	zero,52(r16)
 8004b94:	80001115 	stw	zero,68(r16)
 8004b98:	80001215 	stw	zero,72(r16)
 8004b9c:	dfc00417 	ldw	ra,16(sp)
 8004ba0:	dcc00317 	ldw	r19,12(sp)
 8004ba4:	dc800217 	ldw	r18,8(sp)
 8004ba8:	dc400117 	ldw	r17,4(sp)
 8004bac:	dc000017 	ldw	r16,0(sp)
 8004bb0:	dec00504 	addi	sp,sp,20
 8004bb4:	f800283a 	ret
 8004bb8:	9809883a 	mov	r4,r19
 8004bbc:	01400104 	movi	r5,4
 8004bc0:	8004a600 	call	8004a60 <__sfmoreglue>
 8004bc4:	90800015 	stw	r2,0(r18)
 8004bc8:	103fde1e 	bne	r2,zero,8004b44 <__alt_data_end+0xfc004b44>
 8004bcc:	00800304 	movi	r2,12
 8004bd0:	98800015 	stw	r2,0(r19)
 8004bd4:	0005883a 	mov	r2,zero
 8004bd8:	003ff006 	br	8004b9c <__alt_data_end+0xfc004b9c>

08004bdc <_cleanup>:
 8004bdc:	00820074 	movhi	r2,2049
 8004be0:	1086bf04 	addi	r2,r2,6908
 8004be4:	11000017 	ldw	r4,0(r2)
 8004be8:	01420074 	movhi	r5,2049
 8004bec:	2965c004 	addi	r5,r5,-26880
 8004bf0:	80054fc1 	jmpi	80054fc <_fwalk>

08004bf4 <__sinit>:
 8004bf4:	20800e17 	ldw	r2,56(r4)
 8004bf8:	10000126 	beq	r2,zero,8004c00 <__sinit+0xc>
 8004bfc:	f800283a 	ret
 8004c00:	80048c01 	jmpi	80048c0 <__sinit.part.1>

08004c04 <__sfp_lock_acquire>:
 8004c04:	f800283a 	ret

08004c08 <__sfp_lock_release>:
 8004c08:	f800283a 	ret

08004c0c <__sinit_lock_acquire>:
 8004c0c:	f800283a 	ret

08004c10 <__sinit_lock_release>:
 8004c10:	f800283a 	ret

08004c14 <__fp_lock_all>:
 8004c14:	00820074 	movhi	r2,2049
 8004c18:	1086c004 	addi	r2,r2,6912
 8004c1c:	11000017 	ldw	r4,0(r2)
 8004c20:	01420034 	movhi	r5,2048
 8004c24:	29522904 	addi	r5,r5,18596
 8004c28:	80054fc1 	jmpi	80054fc <_fwalk>

08004c2c <__fp_unlock_all>:
 8004c2c:	00820074 	movhi	r2,2049
 8004c30:	1086c004 	addi	r2,r2,6912
 8004c34:	11000017 	ldw	r4,0(r2)
 8004c38:	01420034 	movhi	r5,2048
 8004c3c:	29522b04 	addi	r5,r5,18604
 8004c40:	80054fc1 	jmpi	80054fc <_fwalk>

08004c44 <_malloc_trim_r>:
 8004c44:	defffb04 	addi	sp,sp,-20
 8004c48:	dcc00315 	stw	r19,12(sp)
 8004c4c:	04c20074 	movhi	r19,2049
 8004c50:	dc800215 	stw	r18,8(sp)
 8004c54:	dc400115 	stw	r17,4(sp)
 8004c58:	dc000015 	stw	r16,0(sp)
 8004c5c:	dfc00415 	stw	ra,16(sp)
 8004c60:	2821883a 	mov	r16,r5
 8004c64:	9cc13004 	addi	r19,r19,1216
 8004c68:	2025883a 	mov	r18,r4
 8004c6c:	800d4f00 	call	800d4f0 <__malloc_lock>
 8004c70:	98800217 	ldw	r2,8(r19)
 8004c74:	14400117 	ldw	r17,4(r2)
 8004c78:	00bfff04 	movi	r2,-4
 8004c7c:	88a2703a 	and	r17,r17,r2
 8004c80:	8c21c83a 	sub	r16,r17,r16
 8004c84:	8403fbc4 	addi	r16,r16,4079
 8004c88:	8020d33a 	srli	r16,r16,12
 8004c8c:	0083ffc4 	movi	r2,4095
 8004c90:	843fffc4 	addi	r16,r16,-1
 8004c94:	8020933a 	slli	r16,r16,12
 8004c98:	1400060e 	bge	r2,r16,8004cb4 <_malloc_trim_r+0x70>
 8004c9c:	9009883a 	mov	r4,r18
 8004ca0:	000b883a 	mov	r5,zero
 8004ca4:	8007c540 	call	8007c54 <_sbrk_r>
 8004ca8:	98c00217 	ldw	r3,8(r19)
 8004cac:	1c47883a 	add	r3,r3,r17
 8004cb0:	10c00a26 	beq	r2,r3,8004cdc <_malloc_trim_r+0x98>
 8004cb4:	9009883a 	mov	r4,r18
 8004cb8:	800d5100 	call	800d510 <__malloc_unlock>
 8004cbc:	0005883a 	mov	r2,zero
 8004cc0:	dfc00417 	ldw	ra,16(sp)
 8004cc4:	dcc00317 	ldw	r19,12(sp)
 8004cc8:	dc800217 	ldw	r18,8(sp)
 8004ccc:	dc400117 	ldw	r17,4(sp)
 8004cd0:	dc000017 	ldw	r16,0(sp)
 8004cd4:	dec00504 	addi	sp,sp,20
 8004cd8:	f800283a 	ret
 8004cdc:	9009883a 	mov	r4,r18
 8004ce0:	040bc83a 	sub	r5,zero,r16
 8004ce4:	8007c540 	call	8007c54 <_sbrk_r>
 8004ce8:	00ffffc4 	movi	r3,-1
 8004cec:	10c00d26 	beq	r2,r3,8004d24 <_malloc_trim_r+0xe0>
 8004cf0:	00c20074 	movhi	r3,2049
 8004cf4:	18cda204 	addi	r3,r3,13960
 8004cf8:	18800017 	ldw	r2,0(r3)
 8004cfc:	99000217 	ldw	r4,8(r19)
 8004d00:	8c23c83a 	sub	r17,r17,r16
 8004d04:	8c400054 	ori	r17,r17,1
 8004d08:	1421c83a 	sub	r16,r2,r16
 8004d0c:	24400115 	stw	r17,4(r4)
 8004d10:	9009883a 	mov	r4,r18
 8004d14:	1c000015 	stw	r16,0(r3)
 8004d18:	800d5100 	call	800d510 <__malloc_unlock>
 8004d1c:	00800044 	movi	r2,1
 8004d20:	003fe706 	br	8004cc0 <__alt_data_end+0xfc004cc0>
 8004d24:	9009883a 	mov	r4,r18
 8004d28:	000b883a 	mov	r5,zero
 8004d2c:	8007c540 	call	8007c54 <_sbrk_r>
 8004d30:	99000217 	ldw	r4,8(r19)
 8004d34:	014003c4 	movi	r5,15
 8004d38:	1107c83a 	sub	r3,r2,r4
 8004d3c:	28ffdd0e 	bge	r5,r3,8004cb4 <__alt_data_end+0xfc004cb4>
 8004d40:	01420074 	movhi	r5,2049
 8004d44:	2946c204 	addi	r5,r5,6920
 8004d48:	29400017 	ldw	r5,0(r5)
 8004d4c:	18c00054 	ori	r3,r3,1
 8004d50:	20c00115 	stw	r3,4(r4)
 8004d54:	00c20074 	movhi	r3,2049
 8004d58:	1145c83a 	sub	r2,r2,r5
 8004d5c:	18cda204 	addi	r3,r3,13960
 8004d60:	18800015 	stw	r2,0(r3)
 8004d64:	003fd306 	br	8004cb4 <__alt_data_end+0xfc004cb4>

08004d68 <_free_r>:
 8004d68:	28004c26 	beq	r5,zero,8004e9c <_free_r+0x134>
 8004d6c:	defffd04 	addi	sp,sp,-12
 8004d70:	dc400115 	stw	r17,4(sp)
 8004d74:	dc000015 	stw	r16,0(sp)
 8004d78:	2023883a 	mov	r17,r4
 8004d7c:	2821883a 	mov	r16,r5
 8004d80:	dfc00215 	stw	ra,8(sp)
 8004d84:	800d4f00 	call	800d4f0 <__malloc_lock>
 8004d88:	813fff17 	ldw	r4,-4(r16)
 8004d8c:	00bfff84 	movi	r2,-2
 8004d90:	02420074 	movhi	r9,2049
 8004d94:	81bffe04 	addi	r6,r16,-8
 8004d98:	2084703a 	and	r2,r4,r2
 8004d9c:	4a413004 	addi	r9,r9,1216
 8004da0:	308b883a 	add	r5,r6,r2
 8004da4:	2a000117 	ldw	r8,4(r5)
 8004da8:	49c00217 	ldw	r7,8(r9)
 8004dac:	00ffff04 	movi	r3,-4
 8004db0:	40c6703a 	and	r3,r8,r3
 8004db4:	39405326 	beq	r7,r5,8004f04 <_free_r+0x19c>
 8004db8:	28c00115 	stw	r3,4(r5)
 8004dbc:	2100004c 	andi	r4,r4,1
 8004dc0:	2000091e 	bne	r4,zero,8004de8 <_free_r+0x80>
 8004dc4:	81fffe17 	ldw	r7,-8(r16)
 8004dc8:	4a000204 	addi	r8,r9,8
 8004dcc:	31cdc83a 	sub	r6,r6,r7
 8004dd0:	31000217 	ldw	r4,8(r6)
 8004dd4:	11c5883a 	add	r2,r2,r7
 8004dd8:	22006126 	beq	r4,r8,8004f60 <_free_r+0x1f8>
 8004ddc:	31c00317 	ldw	r7,12(r6)
 8004de0:	21c00315 	stw	r7,12(r4)
 8004de4:	39000215 	stw	r4,8(r7)
 8004de8:	28c9883a 	add	r4,r5,r3
 8004dec:	21c00117 	ldw	r7,4(r4)
 8004df0:	39c0004c 	andi	r7,r7,1
 8004df4:	38000d1e 	bne	r7,zero,8004e2c <_free_r+0xc4>
 8004df8:	29000217 	ldw	r4,8(r5)
 8004dfc:	10c5883a 	add	r2,r2,r3
 8004e00:	00c20074 	movhi	r3,2049
 8004e04:	18c13204 	addi	r3,r3,1224
 8004e08:	20c07526 	beq	r4,r3,8004fe0 <_free_r+0x278>
 8004e0c:	29c00317 	ldw	r7,12(r5)
 8004e10:	11400054 	ori	r5,r2,1
 8004e14:	3087883a 	add	r3,r6,r2
 8004e18:	21c00315 	stw	r7,12(r4)
 8004e1c:	39000215 	stw	r4,8(r7)
 8004e20:	31400115 	stw	r5,4(r6)
 8004e24:	18800015 	stw	r2,0(r3)
 8004e28:	00000406 	br	8004e3c <_free_r+0xd4>
 8004e2c:	10c00054 	ori	r3,r2,1
 8004e30:	30c00115 	stw	r3,4(r6)
 8004e34:	3087883a 	add	r3,r6,r2
 8004e38:	18800015 	stw	r2,0(r3)
 8004e3c:	00c07fc4 	movi	r3,511
 8004e40:	18801736 	bltu	r3,r2,8004ea0 <_free_r+0x138>
 8004e44:	1004d0fa 	srli	r2,r2,3
 8004e48:	01400044 	movi	r5,1
 8004e4c:	49000117 	ldw	r4,4(r9)
 8004e50:	1087883a 	add	r3,r2,r2
 8004e54:	18c7883a 	add	r3,r3,r3
 8004e58:	1005d0ba 	srai	r2,r2,2
 8004e5c:	18c7883a 	add	r3,r3,r3
 8004e60:	1a47883a 	add	r3,r3,r9
 8004e64:	19c00217 	ldw	r7,8(r3)
 8004e68:	2884983a 	sll	r2,r5,r2
 8004e6c:	30c00315 	stw	r3,12(r6)
 8004e70:	31c00215 	stw	r7,8(r6)
 8004e74:	1104b03a 	or	r2,r2,r4
 8004e78:	19800215 	stw	r6,8(r3)
 8004e7c:	48800115 	stw	r2,4(r9)
 8004e80:	39800315 	stw	r6,12(r7)
 8004e84:	8809883a 	mov	r4,r17
 8004e88:	dfc00217 	ldw	ra,8(sp)
 8004e8c:	dc400117 	ldw	r17,4(sp)
 8004e90:	dc000017 	ldw	r16,0(sp)
 8004e94:	dec00304 	addi	sp,sp,12
 8004e98:	800d5101 	jmpi	800d510 <__malloc_unlock>
 8004e9c:	f800283a 	ret
 8004ea0:	1006d27a 	srli	r3,r2,9
 8004ea4:	01000104 	movi	r4,4
 8004ea8:	20c04036 	bltu	r4,r3,8004fac <_free_r+0x244>
 8004eac:	1006d1ba 	srli	r3,r2,6
 8004eb0:	19400e04 	addi	r5,r3,56
 8004eb4:	2947883a 	add	r3,r5,r5
 8004eb8:	18c7883a 	add	r3,r3,r3
 8004ebc:	18c7883a 	add	r3,r3,r3
 8004ec0:	1a49883a 	add	r4,r3,r9
 8004ec4:	20c00217 	ldw	r3,8(r4)
 8004ec8:	01c20074 	movhi	r7,2049
 8004ecc:	39c13004 	addi	r7,r7,1216
 8004ed0:	19003b26 	beq	r3,r4,8004fc0 <_free_r+0x258>
 8004ed4:	01ffff04 	movi	r7,-4
 8004ed8:	19400117 	ldw	r5,4(r3)
 8004edc:	29ca703a 	and	r5,r5,r7
 8004ee0:	1140022e 	bgeu	r2,r5,8004eec <_free_r+0x184>
 8004ee4:	18c00217 	ldw	r3,8(r3)
 8004ee8:	20fffb1e 	bne	r4,r3,8004ed8 <__alt_data_end+0xfc004ed8>
 8004eec:	18800317 	ldw	r2,12(r3)
 8004ef0:	30800315 	stw	r2,12(r6)
 8004ef4:	30c00215 	stw	r3,8(r6)
 8004ef8:	11800215 	stw	r6,8(r2)
 8004efc:	19800315 	stw	r6,12(r3)
 8004f00:	003fe006 	br	8004e84 <__alt_data_end+0xfc004e84>
 8004f04:	2100004c 	andi	r4,r4,1
 8004f08:	1885883a 	add	r2,r3,r2
 8004f0c:	2000071e 	bne	r4,zero,8004f2c <_free_r+0x1c4>
 8004f10:	817ffe17 	ldw	r5,-8(r16)
 8004f14:	314dc83a 	sub	r6,r6,r5
 8004f18:	30c00317 	ldw	r3,12(r6)
 8004f1c:	31000217 	ldw	r4,8(r6)
 8004f20:	1145883a 	add	r2,r2,r5
 8004f24:	20c00315 	stw	r3,12(r4)
 8004f28:	19000215 	stw	r4,8(r3)
 8004f2c:	10c00054 	ori	r3,r2,1
 8004f30:	30c00115 	stw	r3,4(r6)
 8004f34:	00c20074 	movhi	r3,2049
 8004f38:	18c6c304 	addi	r3,r3,6924
 8004f3c:	18c00017 	ldw	r3,0(r3)
 8004f40:	49800215 	stw	r6,8(r9)
 8004f44:	10ffcf36 	bltu	r2,r3,8004e84 <__alt_data_end+0xfc004e84>
 8004f48:	00820074 	movhi	r2,2049
 8004f4c:	108d9a04 	addi	r2,r2,13928
 8004f50:	11400017 	ldw	r5,0(r2)
 8004f54:	8809883a 	mov	r4,r17
 8004f58:	8004c440 	call	8004c44 <_malloc_trim_r>
 8004f5c:	003fc906 	br	8004e84 <__alt_data_end+0xfc004e84>
 8004f60:	28c9883a 	add	r4,r5,r3
 8004f64:	21000117 	ldw	r4,4(r4)
 8004f68:	2100004c 	andi	r4,r4,1
 8004f6c:	20000a1e 	bne	r4,zero,8004f98 <_free_r+0x230>
 8004f70:	29000317 	ldw	r4,12(r5)
 8004f74:	29400217 	ldw	r5,8(r5)
 8004f78:	10c5883a 	add	r2,r2,r3
 8004f7c:	10c00054 	ori	r3,r2,1
 8004f80:	29000315 	stw	r4,12(r5)
 8004f84:	21400215 	stw	r5,8(r4)
 8004f88:	30c00115 	stw	r3,4(r6)
 8004f8c:	308d883a 	add	r6,r6,r2
 8004f90:	30800015 	stw	r2,0(r6)
 8004f94:	003fbb06 	br	8004e84 <__alt_data_end+0xfc004e84>
 8004f98:	10c00054 	ori	r3,r2,1
 8004f9c:	30c00115 	stw	r3,4(r6)
 8004fa0:	308d883a 	add	r6,r6,r2
 8004fa4:	30800015 	stw	r2,0(r6)
 8004fa8:	003fb606 	br	8004e84 <__alt_data_end+0xfc004e84>
 8004fac:	01000504 	movi	r4,20
 8004fb0:	20c01436 	bltu	r4,r3,8005004 <_free_r+0x29c>
 8004fb4:	194016c4 	addi	r5,r3,91
 8004fb8:	2947883a 	add	r3,r5,r5
 8004fbc:	003fbe06 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 8004fc0:	280bd0ba 	srai	r5,r5,2
 8004fc4:	00800044 	movi	r2,1
 8004fc8:	39000117 	ldw	r4,4(r7)
 8004fcc:	114a983a 	sll	r5,r2,r5
 8004fd0:	1805883a 	mov	r2,r3
 8004fd4:	2908b03a 	or	r4,r5,r4
 8004fd8:	39000115 	stw	r4,4(r7)
 8004fdc:	003fc406 	br	8004ef0 <__alt_data_end+0xfc004ef0>
 8004fe0:	49800515 	stw	r6,20(r9)
 8004fe4:	49800415 	stw	r6,16(r9)
 8004fe8:	10c00054 	ori	r3,r2,1
 8004fec:	31000315 	stw	r4,12(r6)
 8004ff0:	31000215 	stw	r4,8(r6)
 8004ff4:	30c00115 	stw	r3,4(r6)
 8004ff8:	308d883a 	add	r6,r6,r2
 8004ffc:	30800015 	stw	r2,0(r6)
 8005000:	003fa006 	br	8004e84 <__alt_data_end+0xfc004e84>
 8005004:	01001504 	movi	r4,84
 8005008:	20c00436 	bltu	r4,r3,800501c <_free_r+0x2b4>
 800500c:	1006d33a 	srli	r3,r2,12
 8005010:	19401b84 	addi	r5,r3,110
 8005014:	2947883a 	add	r3,r5,r5
 8005018:	003fa706 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 800501c:	01005504 	movi	r4,340
 8005020:	20c00436 	bltu	r4,r3,8005034 <_free_r+0x2cc>
 8005024:	1006d3fa 	srli	r3,r2,15
 8005028:	19401dc4 	addi	r5,r3,119
 800502c:	2947883a 	add	r3,r5,r5
 8005030:	003fa106 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 8005034:	01015504 	movi	r4,1364
 8005038:	20c00436 	bltu	r4,r3,800504c <_free_r+0x2e4>
 800503c:	1006d4ba 	srli	r3,r2,18
 8005040:	19401f04 	addi	r5,r3,124
 8005044:	2947883a 	add	r3,r5,r5
 8005048:	003f9b06 	br	8004eb8 <__alt_data_end+0xfc004eb8>
 800504c:	00c03f04 	movi	r3,252
 8005050:	01401f84 	movi	r5,126
 8005054:	003f9806 	br	8004eb8 <__alt_data_end+0xfc004eb8>

08005058 <__sfvwrite_r>:
 8005058:	30800217 	ldw	r2,8(r6)
 800505c:	10004526 	beq	r2,zero,8005174 <__sfvwrite_r+0x11c>
 8005060:	28c0030b 	ldhu	r3,12(r5)
 8005064:	defff404 	addi	sp,sp,-48
 8005068:	dd400715 	stw	r21,28(sp)
 800506c:	dcc00515 	stw	r19,20(sp)
 8005070:	dc000215 	stw	r16,8(sp)
 8005074:	dfc00b15 	stw	ra,44(sp)
 8005078:	df000a15 	stw	fp,40(sp)
 800507c:	ddc00915 	stw	r23,36(sp)
 8005080:	dd800815 	stw	r22,32(sp)
 8005084:	dd000615 	stw	r20,24(sp)
 8005088:	dc800415 	stw	r18,16(sp)
 800508c:	dc400315 	stw	r17,12(sp)
 8005090:	1880020c 	andi	r2,r3,8
 8005094:	2821883a 	mov	r16,r5
 8005098:	202b883a 	mov	r21,r4
 800509c:	3027883a 	mov	r19,r6
 80050a0:	10002526 	beq	r2,zero,8005138 <__sfvwrite_r+0xe0>
 80050a4:	28800417 	ldw	r2,16(r5)
 80050a8:	10002326 	beq	r2,zero,8005138 <__sfvwrite_r+0xe0>
 80050ac:	1880008c 	andi	r2,r3,2
 80050b0:	9c400017 	ldw	r17,0(r19)
 80050b4:	10003126 	beq	r2,zero,800517c <__sfvwrite_r+0x124>
 80050b8:	0029883a 	mov	r20,zero
 80050bc:	0025883a 	mov	r18,zero
 80050c0:	05810004 	movi	r22,1024
 80050c4:	a00d883a 	mov	r6,r20
 80050c8:	a809883a 	mov	r4,r21
 80050cc:	90002526 	beq	r18,zero,8005164 <__sfvwrite_r+0x10c>
 80050d0:	900f883a 	mov	r7,r18
 80050d4:	81400717 	ldw	r5,28(r16)
 80050d8:	b480012e 	bgeu	r22,r18,80050e0 <__sfvwrite_r+0x88>
 80050dc:	01c10004 	movi	r7,1024
 80050e0:	80800917 	ldw	r2,36(r16)
 80050e4:	103ee83a 	callr	r2
 80050e8:	0080510e 	bge	zero,r2,8005230 <__sfvwrite_r+0x1d8>
 80050ec:	98c00217 	ldw	r3,8(r19)
 80050f0:	a0a9883a 	add	r20,r20,r2
 80050f4:	90a5c83a 	sub	r18,r18,r2
 80050f8:	1885c83a 	sub	r2,r3,r2
 80050fc:	98800215 	stw	r2,8(r19)
 8005100:	103ff01e 	bne	r2,zero,80050c4 <__alt_data_end+0xfc0050c4>
 8005104:	0005883a 	mov	r2,zero
 8005108:	dfc00b17 	ldw	ra,44(sp)
 800510c:	df000a17 	ldw	fp,40(sp)
 8005110:	ddc00917 	ldw	r23,36(sp)
 8005114:	dd800817 	ldw	r22,32(sp)
 8005118:	dd400717 	ldw	r21,28(sp)
 800511c:	dd000617 	ldw	r20,24(sp)
 8005120:	dcc00517 	ldw	r19,20(sp)
 8005124:	dc800417 	ldw	r18,16(sp)
 8005128:	dc400317 	ldw	r17,12(sp)
 800512c:	dc000217 	ldw	r16,8(sp)
 8005130:	dec00c04 	addi	sp,sp,48
 8005134:	f800283a 	ret
 8005138:	a809883a 	mov	r4,r21
 800513c:	800b883a 	mov	r5,r16
 8005140:	8002bf40 	call	8002bf4 <__swsetup_r>
 8005144:	80c0030b 	ldhu	r3,12(r16)
 8005148:	103fd826 	beq	r2,zero,80050ac <__alt_data_end+0xfc0050ac>
 800514c:	18c01014 	ori	r3,r3,64
 8005150:	80c0030d 	sth	r3,12(r16)
 8005154:	00c00244 	movi	r3,9
 8005158:	00bfffc4 	movi	r2,-1
 800515c:	a8c00015 	stw	r3,0(r21)
 8005160:	003fe906 	br	8005108 <__alt_data_end+0xfc005108>
 8005164:	8d000017 	ldw	r20,0(r17)
 8005168:	8c800117 	ldw	r18,4(r17)
 800516c:	8c400204 	addi	r17,r17,8
 8005170:	003fd406 	br	80050c4 <__alt_data_end+0xfc0050c4>
 8005174:	0005883a 	mov	r2,zero
 8005178:	f800283a 	ret
 800517c:	1880004c 	andi	r2,r3,1
 8005180:	1000301e 	bne	r2,zero,8005244 <__sfvwrite_r+0x1ec>
 8005184:	002f883a 	mov	r23,zero
 8005188:	0025883a 	mov	r18,zero
 800518c:	90001c26 	beq	r18,zero,8005200 <__sfvwrite_r+0x1a8>
 8005190:	1880800c 	andi	r2,r3,512
 8005194:	85000217 	ldw	r20,8(r16)
 8005198:	10006c26 	beq	r2,zero,800534c <__sfvwrite_r+0x2f4>
 800519c:	a02d883a 	mov	r22,r20
 80051a0:	95008536 	bltu	r18,r20,80053b8 <__sfvwrite_r+0x360>
 80051a4:	1881200c 	andi	r2,r3,1152
 80051a8:	10009d1e 	bne	r2,zero,8005420 <__sfvwrite_r+0x3c8>
 80051ac:	81000017 	ldw	r4,0(r16)
 80051b0:	a039883a 	mov	fp,r20
 80051b4:	9029883a 	mov	r20,r18
 80051b8:	b80b883a 	mov	r5,r23
 80051bc:	b00d883a 	mov	r6,r22
 80051c0:	80062cc0 	call	80062cc <memmove>
 80051c4:	80c00217 	ldw	r3,8(r16)
 80051c8:	81000017 	ldw	r4,0(r16)
 80051cc:	9005883a 	mov	r2,r18
 80051d0:	1f39c83a 	sub	fp,r3,fp
 80051d4:	258f883a 	add	r7,r4,r22
 80051d8:	87000215 	stw	fp,8(r16)
 80051dc:	81c00015 	stw	r7,0(r16)
 80051e0:	98c00217 	ldw	r3,8(r19)
 80051e4:	b8af883a 	add	r23,r23,r2
 80051e8:	90a5c83a 	sub	r18,r18,r2
 80051ec:	1d05c83a 	sub	r2,r3,r20
 80051f0:	98800215 	stw	r2,8(r19)
 80051f4:	103fc326 	beq	r2,zero,8005104 <__alt_data_end+0xfc005104>
 80051f8:	80c0030b 	ldhu	r3,12(r16)
 80051fc:	903fe41e 	bne	r18,zero,8005190 <__alt_data_end+0xfc005190>
 8005200:	8dc00017 	ldw	r23,0(r17)
 8005204:	8c800117 	ldw	r18,4(r17)
 8005208:	8c400204 	addi	r17,r17,8
 800520c:	003fdf06 	br	800518c <__alt_data_end+0xfc00518c>
 8005210:	80076400 	call	8007640 <_realloc_r>
 8005214:	102d883a 	mov	r22,r2
 8005218:	1000a01e 	bne	r2,zero,800549c <__sfvwrite_r+0x444>
 800521c:	81400417 	ldw	r5,16(r16)
 8005220:	a809883a 	mov	r4,r21
 8005224:	8004d680 	call	8004d68 <_free_r>
 8005228:	00800304 	movi	r2,12
 800522c:	a8800015 	stw	r2,0(r21)
 8005230:	80c0030b 	ldhu	r3,12(r16)
 8005234:	00bfffc4 	movi	r2,-1
 8005238:	18c01014 	ori	r3,r3,64
 800523c:	80c0030d 	sth	r3,12(r16)
 8005240:	003fb106 	br	8005108 <__alt_data_end+0xfc005108>
 8005244:	0029883a 	mov	r20,zero
 8005248:	0011883a 	mov	r8,zero
 800524c:	0039883a 	mov	fp,zero
 8005250:	0025883a 	mov	r18,zero
 8005254:	90001f26 	beq	r18,zero,80052d4 <__sfvwrite_r+0x27c>
 8005258:	40006826 	beq	r8,zero,80053fc <__sfvwrite_r+0x3a4>
 800525c:	a02f883a 	mov	r23,r20
 8005260:	9500012e 	bgeu	r18,r20,8005268 <__sfvwrite_r+0x210>
 8005264:	902f883a 	mov	r23,r18
 8005268:	81000017 	ldw	r4,0(r16)
 800526c:	80800417 	ldw	r2,16(r16)
 8005270:	b82d883a 	mov	r22,r23
 8005274:	81800217 	ldw	r6,8(r16)
 8005278:	81c00517 	ldw	r7,20(r16)
 800527c:	1100022e 	bgeu	r2,r4,8005288 <__sfvwrite_r+0x230>
 8005280:	31c7883a 	add	r3,r6,r7
 8005284:	1dc01816 	blt	r3,r23,80052e8 <__sfvwrite_r+0x290>
 8005288:	b9c03f16 	blt	r23,r7,8005388 <__sfvwrite_r+0x330>
 800528c:	80800917 	ldw	r2,36(r16)
 8005290:	81400717 	ldw	r5,28(r16)
 8005294:	a809883a 	mov	r4,r21
 8005298:	da000115 	stw	r8,4(sp)
 800529c:	e00d883a 	mov	r6,fp
 80052a0:	103ee83a 	callr	r2
 80052a4:	102d883a 	mov	r22,r2
 80052a8:	da000117 	ldw	r8,4(sp)
 80052ac:	00bfe00e 	bge	zero,r2,8005230 <__alt_data_end+0xfc005230>
 80052b0:	a5a9c83a 	sub	r20,r20,r22
 80052b4:	a0001f26 	beq	r20,zero,8005334 <__sfvwrite_r+0x2dc>
 80052b8:	98800217 	ldw	r2,8(r19)
 80052bc:	e5b9883a 	add	fp,fp,r22
 80052c0:	95a5c83a 	sub	r18,r18,r22
 80052c4:	15adc83a 	sub	r22,r2,r22
 80052c8:	9d800215 	stw	r22,8(r19)
 80052cc:	b03f8d26 	beq	r22,zero,8005104 <__alt_data_end+0xfc005104>
 80052d0:	903fe11e 	bne	r18,zero,8005258 <__alt_data_end+0xfc005258>
 80052d4:	8f000017 	ldw	fp,0(r17)
 80052d8:	8c800117 	ldw	r18,4(r17)
 80052dc:	0011883a 	mov	r8,zero
 80052e0:	8c400204 	addi	r17,r17,8
 80052e4:	003fdb06 	br	8005254 <__alt_data_end+0xfc005254>
 80052e8:	180d883a 	mov	r6,r3
 80052ec:	e00b883a 	mov	r5,fp
 80052f0:	da000115 	stw	r8,4(sp)
 80052f4:	d8c00015 	stw	r3,0(sp)
 80052f8:	80062cc0 	call	80062cc <memmove>
 80052fc:	d8c00017 	ldw	r3,0(sp)
 8005300:	80800017 	ldw	r2,0(r16)
 8005304:	a809883a 	mov	r4,r21
 8005308:	800b883a 	mov	r5,r16
 800530c:	10c5883a 	add	r2,r2,r3
 8005310:	80800015 	stw	r2,0(r16)
 8005314:	d8c00015 	stw	r3,0(sp)
 8005318:	800464c0 	call	800464c <_fflush_r>
 800531c:	d8c00017 	ldw	r3,0(sp)
 8005320:	da000117 	ldw	r8,4(sp)
 8005324:	103fc21e 	bne	r2,zero,8005230 <__alt_data_end+0xfc005230>
 8005328:	182d883a 	mov	r22,r3
 800532c:	a5a9c83a 	sub	r20,r20,r22
 8005330:	a03fe11e 	bne	r20,zero,80052b8 <__alt_data_end+0xfc0052b8>
 8005334:	a809883a 	mov	r4,r21
 8005338:	800b883a 	mov	r5,r16
 800533c:	800464c0 	call	800464c <_fflush_r>
 8005340:	103fbb1e 	bne	r2,zero,8005230 <__alt_data_end+0xfc005230>
 8005344:	0011883a 	mov	r8,zero
 8005348:	003fdb06 	br	80052b8 <__alt_data_end+0xfc0052b8>
 800534c:	81000017 	ldw	r4,0(r16)
 8005350:	80800417 	ldw	r2,16(r16)
 8005354:	1100012e 	bgeu	r2,r4,800535c <__sfvwrite_r+0x304>
 8005358:	a4805a36 	bltu	r20,r18,80054c4 <__sfvwrite_r+0x46c>
 800535c:	81c00517 	ldw	r7,20(r16)
 8005360:	91c01a36 	bltu	r18,r7,80053cc <__sfvwrite_r+0x374>
 8005364:	80800917 	ldw	r2,36(r16)
 8005368:	81400717 	ldw	r5,28(r16)
 800536c:	a809883a 	mov	r4,r21
 8005370:	b80d883a 	mov	r6,r23
 8005374:	103ee83a 	callr	r2
 8005378:	1029883a 	mov	r20,r2
 800537c:	00bfac0e 	bge	zero,r2,8005230 <__alt_data_end+0xfc005230>
 8005380:	a005883a 	mov	r2,r20
 8005384:	003f9606 	br	80051e0 <__alt_data_end+0xfc0051e0>
 8005388:	b80d883a 	mov	r6,r23
 800538c:	e00b883a 	mov	r5,fp
 8005390:	da000115 	stw	r8,4(sp)
 8005394:	80062cc0 	call	80062cc <memmove>
 8005398:	80800217 	ldw	r2,8(r16)
 800539c:	80c00017 	ldw	r3,0(r16)
 80053a0:	da000117 	ldw	r8,4(sp)
 80053a4:	15c5c83a 	sub	r2,r2,r23
 80053a8:	1def883a 	add	r23,r3,r23
 80053ac:	80800215 	stw	r2,8(r16)
 80053b0:	85c00015 	stw	r23,0(r16)
 80053b4:	003fbe06 	br	80052b0 <__alt_data_end+0xfc0052b0>
 80053b8:	81000017 	ldw	r4,0(r16)
 80053bc:	9039883a 	mov	fp,r18
 80053c0:	9029883a 	mov	r20,r18
 80053c4:	902d883a 	mov	r22,r18
 80053c8:	003f7b06 	br	80051b8 <__alt_data_end+0xfc0051b8>
 80053cc:	b80b883a 	mov	r5,r23
 80053d0:	900d883a 	mov	r6,r18
 80053d4:	80062cc0 	call	80062cc <memmove>
 80053d8:	80c00217 	ldw	r3,8(r16)
 80053dc:	80800017 	ldw	r2,0(r16)
 80053e0:	9029883a 	mov	r20,r18
 80053e4:	1c87c83a 	sub	r3,r3,r18
 80053e8:	1485883a 	add	r2,r2,r18
 80053ec:	80800015 	stw	r2,0(r16)
 80053f0:	80c00215 	stw	r3,8(r16)
 80053f4:	9005883a 	mov	r2,r18
 80053f8:	003f7906 	br	80051e0 <__alt_data_end+0xfc0051e0>
 80053fc:	e009883a 	mov	r4,fp
 8005400:	01400284 	movi	r5,10
 8005404:	900d883a 	mov	r6,r18
 8005408:	80060ac0 	call	80060ac <memchr>
 800540c:	10003826 	beq	r2,zero,80054f0 <__sfvwrite_r+0x498>
 8005410:	10800044 	addi	r2,r2,1
 8005414:	1729c83a 	sub	r20,r2,fp
 8005418:	02000044 	movi	r8,1
 800541c:	003f8f06 	br	800525c <__alt_data_end+0xfc00525c>
 8005420:	80800517 	ldw	r2,20(r16)
 8005424:	81400417 	ldw	r5,16(r16)
 8005428:	87000017 	ldw	fp,0(r16)
 800542c:	10a9883a 	add	r20,r2,r2
 8005430:	a085883a 	add	r2,r20,r2
 8005434:	1028d7fa 	srli	r20,r2,31
 8005438:	e179c83a 	sub	fp,fp,r5
 800543c:	e1000044 	addi	r4,fp,1
 8005440:	a085883a 	add	r2,r20,r2
 8005444:	1029d07a 	srai	r20,r2,1
 8005448:	2485883a 	add	r2,r4,r18
 800544c:	a00d883a 	mov	r6,r20
 8005450:	a080022e 	bgeu	r20,r2,800545c <__sfvwrite_r+0x404>
 8005454:	1029883a 	mov	r20,r2
 8005458:	100d883a 	mov	r6,r2
 800545c:	18c1000c 	andi	r3,r3,1024
 8005460:	a809883a 	mov	r4,r21
 8005464:	183f6a26 	beq	r3,zero,8005210 <__alt_data_end+0xfc005210>
 8005468:	300b883a 	mov	r5,r6
 800546c:	80059040 	call	8005904 <_malloc_r>
 8005470:	102d883a 	mov	r22,r2
 8005474:	103f6c26 	beq	r2,zero,8005228 <__alt_data_end+0xfc005228>
 8005478:	81400417 	ldw	r5,16(r16)
 800547c:	1009883a 	mov	r4,r2
 8005480:	e00d883a 	mov	r6,fp
 8005484:	80061940 	call	8006194 <memcpy>
 8005488:	8080030b 	ldhu	r2,12(r16)
 800548c:	00fedfc4 	movi	r3,-1153
 8005490:	10c4703a 	and	r2,r2,r3
 8005494:	10802014 	ori	r2,r2,128
 8005498:	8080030d 	sth	r2,12(r16)
 800549c:	b709883a 	add	r4,r22,fp
 80054a0:	a707c83a 	sub	r3,r20,fp
 80054a4:	85800415 	stw	r22,16(r16)
 80054a8:	85000515 	stw	r20,20(r16)
 80054ac:	81000015 	stw	r4,0(r16)
 80054b0:	9039883a 	mov	fp,r18
 80054b4:	80c00215 	stw	r3,8(r16)
 80054b8:	9029883a 	mov	r20,r18
 80054bc:	902d883a 	mov	r22,r18
 80054c0:	003f3d06 	br	80051b8 <__alt_data_end+0xfc0051b8>
 80054c4:	b80b883a 	mov	r5,r23
 80054c8:	a00d883a 	mov	r6,r20
 80054cc:	80062cc0 	call	80062cc <memmove>
 80054d0:	80800017 	ldw	r2,0(r16)
 80054d4:	a809883a 	mov	r4,r21
 80054d8:	800b883a 	mov	r5,r16
 80054dc:	1505883a 	add	r2,r2,r20
 80054e0:	80800015 	stw	r2,0(r16)
 80054e4:	800464c0 	call	800464c <_fflush_r>
 80054e8:	103fa526 	beq	r2,zero,8005380 <__alt_data_end+0xfc005380>
 80054ec:	003f5006 	br	8005230 <__alt_data_end+0xfc005230>
 80054f0:	95000044 	addi	r20,r18,1
 80054f4:	02000044 	movi	r8,1
 80054f8:	003f5806 	br	800525c <__alt_data_end+0xfc00525c>

080054fc <_fwalk>:
 80054fc:	defff804 	addi	sp,sp,-32
 8005500:	dd400515 	stw	r21,20(sp)
 8005504:	2540b804 	addi	r21,r4,736
 8005508:	dd800615 	stw	r22,24(sp)
 800550c:	dd000415 	stw	r20,16(sp)
 8005510:	dfc00715 	stw	ra,28(sp)
 8005514:	dcc00315 	stw	r19,12(sp)
 8005518:	dc800215 	stw	r18,8(sp)
 800551c:	dc400115 	stw	r17,4(sp)
 8005520:	dc000015 	stw	r16,0(sp)
 8005524:	2829883a 	mov	r20,r5
 8005528:	002d883a 	mov	r22,zero
 800552c:	8004c040 	call	8004c04 <__sfp_lock_acquire>
 8005530:	a8001426 	beq	r21,zero,8005584 <_fwalk+0x88>
 8005534:	04ffffc4 	movi	r19,-1
 8005538:	ac400117 	ldw	r17,4(r21)
 800553c:	ac800217 	ldw	r18,8(r21)
 8005540:	8c7fffc4 	addi	r17,r17,-1
 8005544:	88000d16 	blt	r17,zero,800557c <_fwalk+0x80>
 8005548:	94000304 	addi	r16,r18,12
 800554c:	94800384 	addi	r18,r18,14
 8005550:	80c0000f 	ldh	r3,0(r16)
 8005554:	8c7fffc4 	addi	r17,r17,-1
 8005558:	813ffd04 	addi	r4,r16,-12
 800555c:	18000426 	beq	r3,zero,8005570 <_fwalk+0x74>
 8005560:	90c0000f 	ldh	r3,0(r18)
 8005564:	1cc00226 	beq	r3,r19,8005570 <_fwalk+0x74>
 8005568:	a03ee83a 	callr	r20
 800556c:	b0acb03a 	or	r22,r22,r2
 8005570:	84001a04 	addi	r16,r16,104
 8005574:	94801a04 	addi	r18,r18,104
 8005578:	8cfff51e 	bne	r17,r19,8005550 <__alt_data_end+0xfc005550>
 800557c:	ad400017 	ldw	r21,0(r21)
 8005580:	a83fed1e 	bne	r21,zero,8005538 <__alt_data_end+0xfc005538>
 8005584:	8004c080 	call	8004c08 <__sfp_lock_release>
 8005588:	b005883a 	mov	r2,r22
 800558c:	dfc00717 	ldw	ra,28(sp)
 8005590:	dd800617 	ldw	r22,24(sp)
 8005594:	dd400517 	ldw	r21,20(sp)
 8005598:	dd000417 	ldw	r20,16(sp)
 800559c:	dcc00317 	ldw	r19,12(sp)
 80055a0:	dc800217 	ldw	r18,8(sp)
 80055a4:	dc400117 	ldw	r17,4(sp)
 80055a8:	dc000017 	ldw	r16,0(sp)
 80055ac:	dec00804 	addi	sp,sp,32
 80055b0:	f800283a 	ret

080055b4 <_fwalk_reent>:
 80055b4:	defff804 	addi	sp,sp,-32
 80055b8:	dd400515 	stw	r21,20(sp)
 80055bc:	2540b804 	addi	r21,r4,736
 80055c0:	dd800615 	stw	r22,24(sp)
 80055c4:	dd000415 	stw	r20,16(sp)
 80055c8:	dcc00315 	stw	r19,12(sp)
 80055cc:	dfc00715 	stw	ra,28(sp)
 80055d0:	dc800215 	stw	r18,8(sp)
 80055d4:	dc400115 	stw	r17,4(sp)
 80055d8:	dc000015 	stw	r16,0(sp)
 80055dc:	2027883a 	mov	r19,r4
 80055e0:	2829883a 	mov	r20,r5
 80055e4:	002d883a 	mov	r22,zero
 80055e8:	8004c040 	call	8004c04 <__sfp_lock_acquire>
 80055ec:	a8001326 	beq	r21,zero,800563c <_fwalk_reent+0x88>
 80055f0:	04bfffc4 	movi	r18,-1
 80055f4:	ac400117 	ldw	r17,4(r21)
 80055f8:	ac000217 	ldw	r16,8(r21)
 80055fc:	8c7fffc4 	addi	r17,r17,-1
 8005600:	88000c16 	blt	r17,zero,8005634 <_fwalk_reent+0x80>
 8005604:	84000304 	addi	r16,r16,12
 8005608:	80c0000f 	ldh	r3,0(r16)
 800560c:	8c7fffc4 	addi	r17,r17,-1
 8005610:	817ffd04 	addi	r5,r16,-12
 8005614:	18000526 	beq	r3,zero,800562c <_fwalk_reent+0x78>
 8005618:	80c0008f 	ldh	r3,2(r16)
 800561c:	9809883a 	mov	r4,r19
 8005620:	1c800226 	beq	r3,r18,800562c <_fwalk_reent+0x78>
 8005624:	a03ee83a 	callr	r20
 8005628:	b0acb03a 	or	r22,r22,r2
 800562c:	84001a04 	addi	r16,r16,104
 8005630:	8cbff51e 	bne	r17,r18,8005608 <__alt_data_end+0xfc005608>
 8005634:	ad400017 	ldw	r21,0(r21)
 8005638:	a83fee1e 	bne	r21,zero,80055f4 <__alt_data_end+0xfc0055f4>
 800563c:	8004c080 	call	8004c08 <__sfp_lock_release>
 8005640:	b005883a 	mov	r2,r22
 8005644:	dfc00717 	ldw	ra,28(sp)
 8005648:	dd800617 	ldw	r22,24(sp)
 800564c:	dd400517 	ldw	r21,20(sp)
 8005650:	dd000417 	ldw	r20,16(sp)
 8005654:	dcc00317 	ldw	r19,12(sp)
 8005658:	dc800217 	ldw	r18,8(sp)
 800565c:	dc400117 	ldw	r17,4(sp)
 8005660:	dc000017 	ldw	r16,0(sp)
 8005664:	dec00804 	addi	sp,sp,32
 8005668:	f800283a 	ret

0800566c <_setlocale_r>:
 800566c:	30001b26 	beq	r6,zero,80056dc <_setlocale_r+0x70>
 8005670:	01420074 	movhi	r5,2049
 8005674:	defffe04 	addi	sp,sp,-8
 8005678:	297f6204 	addi	r5,r5,-632
 800567c:	3009883a 	mov	r4,r6
 8005680:	dc000015 	stw	r16,0(sp)
 8005684:	dfc00115 	stw	ra,4(sp)
 8005688:	3021883a 	mov	r16,r6
 800568c:	8007de40 	call	8007de4 <strcmp>
 8005690:	1000061e 	bne	r2,zero,80056ac <_setlocale_r+0x40>
 8005694:	00820074 	movhi	r2,2049
 8005698:	10bf6104 	addi	r2,r2,-636
 800569c:	dfc00117 	ldw	ra,4(sp)
 80056a0:	dc000017 	ldw	r16,0(sp)
 80056a4:	dec00204 	addi	sp,sp,8
 80056a8:	f800283a 	ret
 80056ac:	01420074 	movhi	r5,2049
 80056b0:	297f6104 	addi	r5,r5,-636
 80056b4:	8009883a 	mov	r4,r16
 80056b8:	8007de40 	call	8007de4 <strcmp>
 80056bc:	103ff526 	beq	r2,zero,8005694 <__alt_data_end+0xfc005694>
 80056c0:	01420074 	movhi	r5,2049
 80056c4:	297f4c04 	addi	r5,r5,-720
 80056c8:	8009883a 	mov	r4,r16
 80056cc:	8007de40 	call	8007de4 <strcmp>
 80056d0:	103ff026 	beq	r2,zero,8005694 <__alt_data_end+0xfc005694>
 80056d4:	0005883a 	mov	r2,zero
 80056d8:	003ff006 	br	800569c <__alt_data_end+0xfc00569c>
 80056dc:	00820074 	movhi	r2,2049
 80056e0:	10bf6104 	addi	r2,r2,-636
 80056e4:	f800283a 	ret

080056e8 <__locale_charset>:
 80056e8:	00820074 	movhi	r2,2049
 80056ec:	10811a04 	addi	r2,r2,1128
 80056f0:	f800283a 	ret

080056f4 <__locale_mb_cur_max>:
 80056f4:	00820074 	movhi	r2,2049
 80056f8:	1086c104 	addi	r2,r2,6916
 80056fc:	10800017 	ldw	r2,0(r2)
 8005700:	f800283a 	ret

08005704 <__locale_msgcharset>:
 8005704:	00820074 	movhi	r2,2049
 8005708:	10811204 	addi	r2,r2,1096
 800570c:	f800283a 	ret

08005710 <__locale_cjk_lang>:
 8005710:	0005883a 	mov	r2,zero
 8005714:	f800283a 	ret

08005718 <_localeconv_r>:
 8005718:	00820074 	movhi	r2,2049
 800571c:	10812204 	addi	r2,r2,1160
 8005720:	f800283a 	ret

08005724 <setlocale>:
 8005724:	00c20074 	movhi	r3,2049
 8005728:	18c6c004 	addi	r3,r3,6912
 800572c:	2005883a 	mov	r2,r4
 8005730:	19000017 	ldw	r4,0(r3)
 8005734:	280d883a 	mov	r6,r5
 8005738:	100b883a 	mov	r5,r2
 800573c:	800566c1 	jmpi	800566c <_setlocale_r>

08005740 <localeconv>:
 8005740:	00820074 	movhi	r2,2049
 8005744:	10812204 	addi	r2,r2,1160
 8005748:	f800283a 	ret

0800574c <__smakebuf_r>:
 800574c:	2880030b 	ldhu	r2,12(r5)
 8005750:	10c0008c 	andi	r3,r2,2
 8005754:	1800401e 	bne	r3,zero,8005858 <__smakebuf_r+0x10c>
 8005758:	deffec04 	addi	sp,sp,-80
 800575c:	dc000f15 	stw	r16,60(sp)
 8005760:	2821883a 	mov	r16,r5
 8005764:	2940038f 	ldh	r5,14(r5)
 8005768:	dc401015 	stw	r17,64(sp)
 800576c:	dfc01315 	stw	ra,76(sp)
 8005770:	dcc01215 	stw	r19,72(sp)
 8005774:	dc801115 	stw	r18,68(sp)
 8005778:	2023883a 	mov	r17,r4
 800577c:	28001b16 	blt	r5,zero,80057ec <__smakebuf_r+0xa0>
 8005780:	d80d883a 	mov	r6,sp
 8005784:	80098f00 	call	80098f0 <_fstat_r>
 8005788:	10001716 	blt	r2,zero,80057e8 <__smakebuf_r+0x9c>
 800578c:	d8800117 	ldw	r2,4(sp)
 8005790:	00e00014 	movui	r3,32768
 8005794:	10bc000c 	andi	r2,r2,61440
 8005798:	10c03726 	beq	r2,r3,8005878 <__smakebuf_r+0x12c>
 800579c:	80c0030b 	ldhu	r3,12(r16)
 80057a0:	18c20014 	ori	r3,r3,2048
 80057a4:	80c0030d 	sth	r3,12(r16)
 80057a8:	00c80004 	movi	r3,8192
 80057ac:	10c03c1e 	bne	r2,r3,80058a0 <__smakebuf_r+0x154>
 80057b0:	8140038f 	ldh	r5,14(r16)
 80057b4:	8809883a 	mov	r4,r17
 80057b8:	80099480 	call	8009948 <_isatty_r>
 80057bc:	10004e26 	beq	r2,zero,80058f8 <__smakebuf_r+0x1ac>
 80057c0:	8080030b 	ldhu	r2,12(r16)
 80057c4:	04c00044 	movi	r19,1
 80057c8:	80c010c4 	addi	r3,r16,67
 80057cc:	14c4b03a 	or	r2,r2,r19
 80057d0:	8080030d 	sth	r2,12(r16)
 80057d4:	80c00015 	stw	r3,0(r16)
 80057d8:	80c00415 	stw	r3,16(r16)
 80057dc:	84c00515 	stw	r19,20(r16)
 80057e0:	04810004 	movi	r18,1024
 80057e4:	00000706 	br	8005804 <__smakebuf_r+0xb8>
 80057e8:	8080030b 	ldhu	r2,12(r16)
 80057ec:	10c0200c 	andi	r3,r2,128
 80057f0:	18001f1e 	bne	r3,zero,8005870 <__smakebuf_r+0x124>
 80057f4:	04810004 	movi	r18,1024
 80057f8:	10820014 	ori	r2,r2,2048
 80057fc:	8080030d 	sth	r2,12(r16)
 8005800:	0027883a 	mov	r19,zero
 8005804:	8809883a 	mov	r4,r17
 8005808:	900b883a 	mov	r5,r18
 800580c:	80059040 	call	8005904 <_malloc_r>
 8005810:	10002e26 	beq	r2,zero,80058cc <__smakebuf_r+0x180>
 8005814:	80c0030b 	ldhu	r3,12(r16)
 8005818:	01020034 	movhi	r4,2048
 800581c:	21122d04 	addi	r4,r4,18612
 8005820:	89000f15 	stw	r4,60(r17)
 8005824:	18c02014 	ori	r3,r3,128
 8005828:	80c0030d 	sth	r3,12(r16)
 800582c:	80800015 	stw	r2,0(r16)
 8005830:	80800415 	stw	r2,16(r16)
 8005834:	84800515 	stw	r18,20(r16)
 8005838:	98001c1e 	bne	r19,zero,80058ac <__smakebuf_r+0x160>
 800583c:	dfc01317 	ldw	ra,76(sp)
 8005840:	dcc01217 	ldw	r19,72(sp)
 8005844:	dc801117 	ldw	r18,68(sp)
 8005848:	dc401017 	ldw	r17,64(sp)
 800584c:	dc000f17 	ldw	r16,60(sp)
 8005850:	dec01404 	addi	sp,sp,80
 8005854:	f800283a 	ret
 8005858:	288010c4 	addi	r2,r5,67
 800585c:	28800015 	stw	r2,0(r5)
 8005860:	28800415 	stw	r2,16(r5)
 8005864:	00800044 	movi	r2,1
 8005868:	28800515 	stw	r2,20(r5)
 800586c:	f800283a 	ret
 8005870:	04801004 	movi	r18,64
 8005874:	003fe006 	br	80057f8 <__alt_data_end+0xfc0057f8>
 8005878:	81000a17 	ldw	r4,40(r16)
 800587c:	00c20034 	movhi	r3,2048
 8005880:	18df6004 	addi	r3,r3,32128
 8005884:	20ffc51e 	bne	r4,r3,800579c <__alt_data_end+0xfc00579c>
 8005888:	80c0030b 	ldhu	r3,12(r16)
 800588c:	01010004 	movi	r4,1024
 8005890:	81001315 	stw	r4,76(r16)
 8005894:	1906b03a 	or	r3,r3,r4
 8005898:	80c0030d 	sth	r3,12(r16)
 800589c:	003fc206 	br	80057a8 <__alt_data_end+0xfc0057a8>
 80058a0:	0027883a 	mov	r19,zero
 80058a4:	04810004 	movi	r18,1024
 80058a8:	003fd606 	br	8005804 <__alt_data_end+0xfc005804>
 80058ac:	8140038f 	ldh	r5,14(r16)
 80058b0:	8809883a 	mov	r4,r17
 80058b4:	80099480 	call	8009948 <_isatty_r>
 80058b8:	103fe026 	beq	r2,zero,800583c <__alt_data_end+0xfc00583c>
 80058bc:	8080030b 	ldhu	r2,12(r16)
 80058c0:	10800054 	ori	r2,r2,1
 80058c4:	8080030d 	sth	r2,12(r16)
 80058c8:	003fdc06 	br	800583c <__alt_data_end+0xfc00583c>
 80058cc:	8080030b 	ldhu	r2,12(r16)
 80058d0:	10c0800c 	andi	r3,r2,512
 80058d4:	183fd91e 	bne	r3,zero,800583c <__alt_data_end+0xfc00583c>
 80058d8:	10800094 	ori	r2,r2,2
 80058dc:	80c010c4 	addi	r3,r16,67
 80058e0:	8080030d 	sth	r2,12(r16)
 80058e4:	00800044 	movi	r2,1
 80058e8:	80c00015 	stw	r3,0(r16)
 80058ec:	80c00415 	stw	r3,16(r16)
 80058f0:	80800515 	stw	r2,20(r16)
 80058f4:	003fd106 	br	800583c <__alt_data_end+0xfc00583c>
 80058f8:	04c00044 	movi	r19,1
 80058fc:	04810004 	movi	r18,1024
 8005900:	003fc006 	br	8005804 <__alt_data_end+0xfc005804>

08005904 <_malloc_r>:
 8005904:	defff504 	addi	sp,sp,-44
 8005908:	dc800315 	stw	r18,12(sp)
 800590c:	dfc00a15 	stw	ra,40(sp)
 8005910:	df000915 	stw	fp,36(sp)
 8005914:	ddc00815 	stw	r23,32(sp)
 8005918:	dd800715 	stw	r22,28(sp)
 800591c:	dd400615 	stw	r21,24(sp)
 8005920:	dd000515 	stw	r20,20(sp)
 8005924:	dcc00415 	stw	r19,16(sp)
 8005928:	dc400215 	stw	r17,8(sp)
 800592c:	dc000115 	stw	r16,4(sp)
 8005930:	288002c4 	addi	r2,r5,11
 8005934:	00c00584 	movi	r3,22
 8005938:	2025883a 	mov	r18,r4
 800593c:	18802a2e 	bgeu	r3,r2,80059e8 <_malloc_r+0xe4>
 8005940:	047ffe04 	movi	r17,-8
 8005944:	1462703a 	and	r17,r2,r17
 8005948:	88009e16 	blt	r17,zero,8005bc4 <_malloc_r+0x2c0>
 800594c:	89409d36 	bltu	r17,r5,8005bc4 <_malloc_r+0x2c0>
 8005950:	800d4f00 	call	800d4f0 <__malloc_lock>
 8005954:	00807dc4 	movi	r2,503
 8005958:	14402736 	bltu	r2,r17,80059f8 <_malloc_r+0xf4>
 800595c:	8806d0fa 	srli	r3,r17,3
 8005960:	04c20074 	movhi	r19,2049
 8005964:	9cc13004 	addi	r19,r19,1216
 8005968:	18c5883a 	add	r2,r3,r3
 800596c:	1085883a 	add	r2,r2,r2
 8005970:	1085883a 	add	r2,r2,r2
 8005974:	9885883a 	add	r2,r19,r2
 8005978:	14000317 	ldw	r16,12(r2)
 800597c:	80814a26 	beq	r16,r2,8005ea8 <_malloc_r+0x5a4>
 8005980:	80c00117 	ldw	r3,4(r16)
 8005984:	81000317 	ldw	r4,12(r16)
 8005988:	00bfff04 	movi	r2,-4
 800598c:	1884703a 	and	r2,r3,r2
 8005990:	81400217 	ldw	r5,8(r16)
 8005994:	8085883a 	add	r2,r16,r2
 8005998:	10c00117 	ldw	r3,4(r2)
 800599c:	29000315 	stw	r4,12(r5)
 80059a0:	21400215 	stw	r5,8(r4)
 80059a4:	18c00054 	ori	r3,r3,1
 80059a8:	10c00115 	stw	r3,4(r2)
 80059ac:	9009883a 	mov	r4,r18
 80059b0:	800d5100 	call	800d510 <__malloc_unlock>
 80059b4:	80800204 	addi	r2,r16,8
 80059b8:	dfc00a17 	ldw	ra,40(sp)
 80059bc:	df000917 	ldw	fp,36(sp)
 80059c0:	ddc00817 	ldw	r23,32(sp)
 80059c4:	dd800717 	ldw	r22,28(sp)
 80059c8:	dd400617 	ldw	r21,24(sp)
 80059cc:	dd000517 	ldw	r20,20(sp)
 80059d0:	dcc00417 	ldw	r19,16(sp)
 80059d4:	dc800317 	ldw	r18,12(sp)
 80059d8:	dc400217 	ldw	r17,8(sp)
 80059dc:	dc000117 	ldw	r16,4(sp)
 80059e0:	dec00b04 	addi	sp,sp,44
 80059e4:	f800283a 	ret
 80059e8:	04400404 	movi	r17,16
 80059ec:	89407536 	bltu	r17,r5,8005bc4 <_malloc_r+0x2c0>
 80059f0:	800d4f00 	call	800d4f0 <__malloc_lock>
 80059f4:	003fd906 	br	800595c <__alt_data_end+0xfc00595c>
 80059f8:	8806d27a 	srli	r3,r17,9
 80059fc:	18007526 	beq	r3,zero,8005bd4 <_malloc_r+0x2d0>
 8005a00:	00800104 	movi	r2,4
 8005a04:	10c0ef36 	bltu	r2,r3,8005dc4 <_malloc_r+0x4c0>
 8005a08:	8806d1ba 	srli	r3,r17,6
 8005a0c:	19c00e04 	addi	r7,r3,56
 8005a10:	39cb883a 	add	r5,r7,r7
 8005a14:	04c20074 	movhi	r19,2049
 8005a18:	294b883a 	add	r5,r5,r5
 8005a1c:	9cc13004 	addi	r19,r19,1216
 8005a20:	294b883a 	add	r5,r5,r5
 8005a24:	994b883a 	add	r5,r19,r5
 8005a28:	2c000317 	ldw	r16,12(r5)
 8005a2c:	2c000e26 	beq	r5,r16,8005a68 <_malloc_r+0x164>
 8005a30:	80800117 	ldw	r2,4(r16)
 8005a34:	01bfff04 	movi	r6,-4
 8005a38:	010003c4 	movi	r4,15
 8005a3c:	1184703a 	and	r2,r2,r6
 8005a40:	1447c83a 	sub	r3,r2,r17
 8005a44:	20c00716 	blt	r4,r3,8005a64 <_malloc_r+0x160>
 8005a48:	1800650e 	bge	r3,zero,8005be0 <_malloc_r+0x2dc>
 8005a4c:	84000317 	ldw	r16,12(r16)
 8005a50:	2c000526 	beq	r5,r16,8005a68 <_malloc_r+0x164>
 8005a54:	80800117 	ldw	r2,4(r16)
 8005a58:	1184703a 	and	r2,r2,r6
 8005a5c:	1447c83a 	sub	r3,r2,r17
 8005a60:	20fff90e 	bge	r4,r3,8005a48 <__alt_data_end+0xfc005a48>
 8005a64:	39ffffc4 	addi	r7,r7,-1
 8005a68:	38c00044 	addi	r3,r7,1
 8005a6c:	01820074 	movhi	r6,2049
 8005a70:	9c000417 	ldw	r16,16(r19)
 8005a74:	31813004 	addi	r6,r6,1216
 8005a78:	32400204 	addi	r9,r6,8
 8005a7c:	82410326 	beq	r16,r9,8005e8c <_malloc_r+0x588>
 8005a80:	81000117 	ldw	r4,4(r16)
 8005a84:	00bfff04 	movi	r2,-4
 8005a88:	208e703a 	and	r7,r4,r2
 8005a8c:	3c45c83a 	sub	r2,r7,r17
 8005a90:	010003c4 	movi	r4,15
 8005a94:	2080ee16 	blt	r4,r2,8005e50 <_malloc_r+0x54c>
 8005a98:	32400515 	stw	r9,20(r6)
 8005a9c:	32400415 	stw	r9,16(r6)
 8005aa0:	1000510e 	bge	r2,zero,8005be8 <_malloc_r+0x2e4>
 8005aa4:	00807fc4 	movi	r2,511
 8005aa8:	11c0ce36 	bltu	r2,r7,8005de4 <_malloc_r+0x4e0>
 8005aac:	3808d0fa 	srli	r4,r7,3
 8005ab0:	01c00044 	movi	r7,1
 8005ab4:	30800117 	ldw	r2,4(r6)
 8005ab8:	210b883a 	add	r5,r4,r4
 8005abc:	294b883a 	add	r5,r5,r5
 8005ac0:	2009d0ba 	srai	r4,r4,2
 8005ac4:	294b883a 	add	r5,r5,r5
 8005ac8:	298b883a 	add	r5,r5,r6
 8005acc:	2a000217 	ldw	r8,8(r5)
 8005ad0:	3908983a 	sll	r4,r7,r4
 8005ad4:	81400315 	stw	r5,12(r16)
 8005ad8:	82000215 	stw	r8,8(r16)
 8005adc:	2088b03a 	or	r4,r4,r2
 8005ae0:	2c000215 	stw	r16,8(r5)
 8005ae4:	31000115 	stw	r4,4(r6)
 8005ae8:	44000315 	stw	r16,12(r8)
 8005aec:	1805d0ba 	srai	r2,r3,2
 8005af0:	01400044 	movi	r5,1
 8005af4:	288a983a 	sll	r5,r5,r2
 8005af8:	21404336 	bltu	r4,r5,8005c08 <_malloc_r+0x304>
 8005afc:	2144703a 	and	r2,r4,r5
 8005b00:	10000a1e 	bne	r2,zero,8005b2c <_malloc_r+0x228>
 8005b04:	00bfff04 	movi	r2,-4
 8005b08:	294b883a 	add	r5,r5,r5
 8005b0c:	1886703a 	and	r3,r3,r2
 8005b10:	2144703a 	and	r2,r4,r5
 8005b14:	18c00104 	addi	r3,r3,4
 8005b18:	1000041e 	bne	r2,zero,8005b2c <_malloc_r+0x228>
 8005b1c:	294b883a 	add	r5,r5,r5
 8005b20:	2144703a 	and	r2,r4,r5
 8005b24:	18c00104 	addi	r3,r3,4
 8005b28:	103ffc26 	beq	r2,zero,8005b1c <__alt_data_end+0xfc005b1c>
 8005b2c:	023fff04 	movi	r8,-4
 8005b30:	01c003c4 	movi	r7,15
 8005b34:	18c5883a 	add	r2,r3,r3
 8005b38:	1085883a 	add	r2,r2,r2
 8005b3c:	1085883a 	add	r2,r2,r2
 8005b40:	9895883a 	add	r10,r19,r2
 8005b44:	52c00304 	addi	r11,r10,12
 8005b48:	1819883a 	mov	r12,r3
 8005b4c:	5c000017 	ldw	r16,0(r11)
 8005b50:	59bffd04 	addi	r6,r11,-12
 8005b54:	8180041e 	bne	r16,r6,8005b68 <_malloc_r+0x264>
 8005b58:	0000ce06 	br	8005e94 <_malloc_r+0x590>
 8005b5c:	2000d70e 	bge	r4,zero,8005ebc <_malloc_r+0x5b8>
 8005b60:	84000317 	ldw	r16,12(r16)
 8005b64:	8180cb26 	beq	r16,r6,8005e94 <_malloc_r+0x590>
 8005b68:	80800117 	ldw	r2,4(r16)
 8005b6c:	1204703a 	and	r2,r2,r8
 8005b70:	1449c83a 	sub	r4,r2,r17
 8005b74:	393ff90e 	bge	r7,r4,8005b5c <__alt_data_end+0xfc005b5c>
 8005b78:	80800317 	ldw	r2,12(r16)
 8005b7c:	80c00217 	ldw	r3,8(r16)
 8005b80:	89400054 	ori	r5,r17,1
 8005b84:	81400115 	stw	r5,4(r16)
 8005b88:	18800315 	stw	r2,12(r3)
 8005b8c:	10c00215 	stw	r3,8(r2)
 8005b90:	8463883a 	add	r17,r16,r17
 8005b94:	9c400515 	stw	r17,20(r19)
 8005b98:	9c400415 	stw	r17,16(r19)
 8005b9c:	20800054 	ori	r2,r4,1
 8005ba0:	88800115 	stw	r2,4(r17)
 8005ba4:	8a400315 	stw	r9,12(r17)
 8005ba8:	8a400215 	stw	r9,8(r17)
 8005bac:	8923883a 	add	r17,r17,r4
 8005bb0:	89000015 	stw	r4,0(r17)
 8005bb4:	9009883a 	mov	r4,r18
 8005bb8:	800d5100 	call	800d510 <__malloc_unlock>
 8005bbc:	80800204 	addi	r2,r16,8
 8005bc0:	003f7d06 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005bc4:	00800304 	movi	r2,12
 8005bc8:	90800015 	stw	r2,0(r18)
 8005bcc:	0005883a 	mov	r2,zero
 8005bd0:	003f7906 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005bd4:	01401f84 	movi	r5,126
 8005bd8:	01c00fc4 	movi	r7,63
 8005bdc:	003f8d06 	br	8005a14 <__alt_data_end+0xfc005a14>
 8005be0:	81000317 	ldw	r4,12(r16)
 8005be4:	003f6a06 	br	8005990 <__alt_data_end+0xfc005990>
 8005be8:	81c5883a 	add	r2,r16,r7
 8005bec:	10c00117 	ldw	r3,4(r2)
 8005bf0:	9009883a 	mov	r4,r18
 8005bf4:	18c00054 	ori	r3,r3,1
 8005bf8:	10c00115 	stw	r3,4(r2)
 8005bfc:	800d5100 	call	800d510 <__malloc_unlock>
 8005c00:	80800204 	addi	r2,r16,8
 8005c04:	003f6c06 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005c08:	9c000217 	ldw	r16,8(r19)
 8005c0c:	00bfff04 	movi	r2,-4
 8005c10:	85800117 	ldw	r22,4(r16)
 8005c14:	b0ac703a 	and	r22,r22,r2
 8005c18:	b4400336 	bltu	r22,r17,8005c28 <_malloc_r+0x324>
 8005c1c:	b445c83a 	sub	r2,r22,r17
 8005c20:	00c003c4 	movi	r3,15
 8005c24:	18805d16 	blt	r3,r2,8005d9c <_malloc_r+0x498>
 8005c28:	05c20074 	movhi	r23,2049
 8005c2c:	00820074 	movhi	r2,2049
 8005c30:	bdc6c204 	addi	r23,r23,6920
 8005c34:	108d9a04 	addi	r2,r2,13928
 8005c38:	15400017 	ldw	r21,0(r2)
 8005c3c:	b9000017 	ldw	r4,0(r23)
 8005c40:	00ffffc4 	movi	r3,-1
 8005c44:	858d883a 	add	r6,r16,r22
 8005c48:	8d6b883a 	add	r21,r17,r21
 8005c4c:	20c0e426 	beq	r4,r3,8005fe0 <_malloc_r+0x6dc>
 8005c50:	ad4403c4 	addi	r21,r21,4111
 8005c54:	00fc0004 	movi	r3,-4096
 8005c58:	a8ea703a 	and	r21,r21,r3
 8005c5c:	9009883a 	mov	r4,r18
 8005c60:	a80b883a 	mov	r5,r21
 8005c64:	d9800015 	stw	r6,0(sp)
 8005c68:	8007c540 	call	8007c54 <_sbrk_r>
 8005c6c:	00ffffc4 	movi	r3,-1
 8005c70:	1029883a 	mov	r20,r2
 8005c74:	d9800017 	ldw	r6,0(sp)
 8005c78:	10c0a426 	beq	r2,r3,8005f0c <_malloc_r+0x608>
 8005c7c:	1180a236 	bltu	r2,r6,8005f08 <_malloc_r+0x604>
 8005c80:	07020074 	movhi	fp,2049
 8005c84:	e70da204 	addi	fp,fp,13960
 8005c88:	e0c00017 	ldw	r3,0(fp)
 8005c8c:	a8c7883a 	add	r3,r21,r3
 8005c90:	e0c00015 	stw	r3,0(fp)
 8005c94:	3500da26 	beq	r6,r20,8006000 <_malloc_r+0x6fc>
 8005c98:	b9000017 	ldw	r4,0(r23)
 8005c9c:	00bfffc4 	movi	r2,-1
 8005ca0:	2080e426 	beq	r4,r2,8006034 <_malloc_r+0x730>
 8005ca4:	a185c83a 	sub	r2,r20,r6
 8005ca8:	1885883a 	add	r2,r3,r2
 8005cac:	e0800015 	stw	r2,0(fp)
 8005cb0:	a0c001cc 	andi	r3,r20,7
 8005cb4:	1800b526 	beq	r3,zero,8005f8c <_malloc_r+0x688>
 8005cb8:	a0e9c83a 	sub	r20,r20,r3
 8005cbc:	00840204 	movi	r2,4104
 8005cc0:	a5000204 	addi	r20,r20,8
 8005cc4:	10c7c83a 	sub	r3,r2,r3
 8005cc8:	a545883a 	add	r2,r20,r21
 8005ccc:	1083ffcc 	andi	r2,r2,4095
 8005cd0:	18abc83a 	sub	r21,r3,r2
 8005cd4:	9009883a 	mov	r4,r18
 8005cd8:	a80b883a 	mov	r5,r21
 8005cdc:	8007c540 	call	8007c54 <_sbrk_r>
 8005ce0:	00ffffc4 	movi	r3,-1
 8005ce4:	10c0d026 	beq	r2,r3,8006028 <_malloc_r+0x724>
 8005ce8:	1507c83a 	sub	r3,r2,r20
 8005cec:	a8c7883a 	add	r3,r21,r3
 8005cf0:	18c00054 	ori	r3,r3,1
 8005cf4:	e0800017 	ldw	r2,0(fp)
 8005cf8:	9d000215 	stw	r20,8(r19)
 8005cfc:	a0c00115 	stw	r3,4(r20)
 8005d00:	a887883a 	add	r3,r21,r2
 8005d04:	e0c00015 	stw	r3,0(fp)
 8005d08:	84c00e26 	beq	r16,r19,8005d44 <_malloc_r+0x440>
 8005d0c:	018003c4 	movi	r6,15
 8005d10:	3580a02e 	bgeu	r6,r22,8005f94 <_malloc_r+0x690>
 8005d14:	81400117 	ldw	r5,4(r16)
 8005d18:	013ffe04 	movi	r4,-8
 8005d1c:	b0bffd04 	addi	r2,r22,-12
 8005d20:	1104703a 	and	r2,r2,r4
 8005d24:	2900004c 	andi	r4,r5,1
 8005d28:	1108b03a 	or	r4,r2,r4
 8005d2c:	81000115 	stw	r4,4(r16)
 8005d30:	01400144 	movi	r5,5
 8005d34:	8089883a 	add	r4,r16,r2
 8005d38:	21400115 	stw	r5,4(r4)
 8005d3c:	21400215 	stw	r5,8(r4)
 8005d40:	3080c036 	bltu	r6,r2,8006044 <_malloc_r+0x740>
 8005d44:	00820074 	movhi	r2,2049
 8005d48:	108d9904 	addi	r2,r2,13924
 8005d4c:	11000017 	ldw	r4,0(r2)
 8005d50:	20c0012e 	bgeu	r4,r3,8005d58 <_malloc_r+0x454>
 8005d54:	10c00015 	stw	r3,0(r2)
 8005d58:	00820074 	movhi	r2,2049
 8005d5c:	108d9804 	addi	r2,r2,13920
 8005d60:	11000017 	ldw	r4,0(r2)
 8005d64:	9c000217 	ldw	r16,8(r19)
 8005d68:	20c0012e 	bgeu	r4,r3,8005d70 <_malloc_r+0x46c>
 8005d6c:	10c00015 	stw	r3,0(r2)
 8005d70:	80c00117 	ldw	r3,4(r16)
 8005d74:	00bfff04 	movi	r2,-4
 8005d78:	1886703a 	and	r3,r3,r2
 8005d7c:	1c45c83a 	sub	r2,r3,r17
 8005d80:	1c400236 	bltu	r3,r17,8005d8c <_malloc_r+0x488>
 8005d84:	00c003c4 	movi	r3,15
 8005d88:	18800416 	blt	r3,r2,8005d9c <_malloc_r+0x498>
 8005d8c:	9009883a 	mov	r4,r18
 8005d90:	800d5100 	call	800d510 <__malloc_unlock>
 8005d94:	0005883a 	mov	r2,zero
 8005d98:	003f0706 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005d9c:	88c00054 	ori	r3,r17,1
 8005da0:	80c00115 	stw	r3,4(r16)
 8005da4:	8463883a 	add	r17,r16,r17
 8005da8:	10800054 	ori	r2,r2,1
 8005dac:	9c400215 	stw	r17,8(r19)
 8005db0:	88800115 	stw	r2,4(r17)
 8005db4:	9009883a 	mov	r4,r18
 8005db8:	800d5100 	call	800d510 <__malloc_unlock>
 8005dbc:	80800204 	addi	r2,r16,8
 8005dc0:	003efd06 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005dc4:	00800504 	movi	r2,20
 8005dc8:	10c0482e 	bgeu	r2,r3,8005eec <_malloc_r+0x5e8>
 8005dcc:	00801504 	movi	r2,84
 8005dd0:	10c06836 	bltu	r2,r3,8005f74 <_malloc_r+0x670>
 8005dd4:	8806d33a 	srli	r3,r17,12
 8005dd8:	19c01b84 	addi	r7,r3,110
 8005ddc:	39cb883a 	add	r5,r7,r7
 8005de0:	003f0c06 	br	8005a14 <__alt_data_end+0xfc005a14>
 8005de4:	3804d27a 	srli	r2,r7,9
 8005de8:	01000104 	movi	r4,4
 8005dec:	2080422e 	bgeu	r4,r2,8005ef8 <_malloc_r+0x5f4>
 8005df0:	01000504 	movi	r4,20
 8005df4:	20807c36 	bltu	r4,r2,8005fe8 <_malloc_r+0x6e4>
 8005df8:	110016c4 	addi	r4,r2,91
 8005dfc:	210b883a 	add	r5,r4,r4
 8005e00:	294b883a 	add	r5,r5,r5
 8005e04:	294b883a 	add	r5,r5,r5
 8005e08:	994b883a 	add	r5,r19,r5
 8005e0c:	28800217 	ldw	r2,8(r5)
 8005e10:	02020074 	movhi	r8,2049
 8005e14:	42013004 	addi	r8,r8,1216
 8005e18:	11406326 	beq	r2,r5,8005fa8 <_malloc_r+0x6a4>
 8005e1c:	01bfff04 	movi	r6,-4
 8005e20:	11000117 	ldw	r4,4(r2)
 8005e24:	2188703a 	and	r4,r4,r6
 8005e28:	3900022e 	bgeu	r7,r4,8005e34 <_malloc_r+0x530>
 8005e2c:	10800217 	ldw	r2,8(r2)
 8005e30:	28bffb1e 	bne	r5,r2,8005e20 <__alt_data_end+0xfc005e20>
 8005e34:	11800317 	ldw	r6,12(r2)
 8005e38:	99000117 	ldw	r4,4(r19)
 8005e3c:	81800315 	stw	r6,12(r16)
 8005e40:	80800215 	stw	r2,8(r16)
 8005e44:	34000215 	stw	r16,8(r6)
 8005e48:	14000315 	stw	r16,12(r2)
 8005e4c:	003f2706 	br	8005aec <__alt_data_end+0xfc005aec>
 8005e50:	88c00054 	ori	r3,r17,1
 8005e54:	80c00115 	stw	r3,4(r16)
 8005e58:	8463883a 	add	r17,r16,r17
 8005e5c:	34400515 	stw	r17,20(r6)
 8005e60:	34400415 	stw	r17,16(r6)
 8005e64:	10c00054 	ori	r3,r2,1
 8005e68:	8a400315 	stw	r9,12(r17)
 8005e6c:	8a400215 	stw	r9,8(r17)
 8005e70:	88c00115 	stw	r3,4(r17)
 8005e74:	88a3883a 	add	r17,r17,r2
 8005e78:	88800015 	stw	r2,0(r17)
 8005e7c:	9009883a 	mov	r4,r18
 8005e80:	800d5100 	call	800d510 <__malloc_unlock>
 8005e84:	80800204 	addi	r2,r16,8
 8005e88:	003ecb06 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005e8c:	31000117 	ldw	r4,4(r6)
 8005e90:	003f1606 	br	8005aec <__alt_data_end+0xfc005aec>
 8005e94:	63000044 	addi	r12,r12,1
 8005e98:	608000cc 	andi	r2,r12,3
 8005e9c:	5ac00204 	addi	r11,r11,8
 8005ea0:	103f2a1e 	bne	r2,zero,8005b4c <__alt_data_end+0xfc005b4c>
 8005ea4:	00002106 	br	8005f2c <_malloc_r+0x628>
 8005ea8:	80800204 	addi	r2,r16,8
 8005eac:	84000517 	ldw	r16,20(r16)
 8005eb0:	143eb31e 	bne	r2,r16,8005980 <__alt_data_end+0xfc005980>
 8005eb4:	18c00084 	addi	r3,r3,2
 8005eb8:	003eec06 	br	8005a6c <__alt_data_end+0xfc005a6c>
 8005ebc:	8085883a 	add	r2,r16,r2
 8005ec0:	10c00117 	ldw	r3,4(r2)
 8005ec4:	81000317 	ldw	r4,12(r16)
 8005ec8:	81400217 	ldw	r5,8(r16)
 8005ecc:	18c00054 	ori	r3,r3,1
 8005ed0:	10c00115 	stw	r3,4(r2)
 8005ed4:	29000315 	stw	r4,12(r5)
 8005ed8:	21400215 	stw	r5,8(r4)
 8005edc:	9009883a 	mov	r4,r18
 8005ee0:	800d5100 	call	800d510 <__malloc_unlock>
 8005ee4:	80800204 	addi	r2,r16,8
 8005ee8:	003eb306 	br	80059b8 <__alt_data_end+0xfc0059b8>
 8005eec:	19c016c4 	addi	r7,r3,91
 8005ef0:	39cb883a 	add	r5,r7,r7
 8005ef4:	003ec706 	br	8005a14 <__alt_data_end+0xfc005a14>
 8005ef8:	3804d1ba 	srli	r2,r7,6
 8005efc:	11000e04 	addi	r4,r2,56
 8005f00:	210b883a 	add	r5,r4,r4
 8005f04:	003fbe06 	br	8005e00 <__alt_data_end+0xfc005e00>
 8005f08:	84ff5d26 	beq	r16,r19,8005c80 <__alt_data_end+0xfc005c80>
 8005f0c:	9c000217 	ldw	r16,8(r19)
 8005f10:	00bfff04 	movi	r2,-4
 8005f14:	80c00117 	ldw	r3,4(r16)
 8005f18:	1886703a 	and	r3,r3,r2
 8005f1c:	003f9706 	br	8005d7c <__alt_data_end+0xfc005d7c>
 8005f20:	52800017 	ldw	r10,0(r10)
 8005f24:	18ffffc4 	addi	r3,r3,-1
 8005f28:	50805c1e 	bne	r10,r2,800609c <_malloc_r+0x798>
 8005f2c:	190000cc 	andi	r4,r3,3
 8005f30:	50bffe04 	addi	r2,r10,-8
 8005f34:	203ffa1e 	bne	r4,zero,8005f20 <__alt_data_end+0xfc005f20>
 8005f38:	98800117 	ldw	r2,4(r19)
 8005f3c:	0146303a 	nor	r3,zero,r5
 8005f40:	1884703a 	and	r2,r3,r2
 8005f44:	98800115 	stw	r2,4(r19)
 8005f48:	294b883a 	add	r5,r5,r5
 8005f4c:	117f2e36 	bltu	r2,r5,8005c08 <__alt_data_end+0xfc005c08>
 8005f50:	283f2d26 	beq	r5,zero,8005c08 <__alt_data_end+0xfc005c08>
 8005f54:	1146703a 	and	r3,r2,r5
 8005f58:	1800521e 	bne	r3,zero,80060a4 <_malloc_r+0x7a0>
 8005f5c:	6007883a 	mov	r3,r12
 8005f60:	294b883a 	add	r5,r5,r5
 8005f64:	1148703a 	and	r4,r2,r5
 8005f68:	18c00104 	addi	r3,r3,4
 8005f6c:	203ffc26 	beq	r4,zero,8005f60 <__alt_data_end+0xfc005f60>
 8005f70:	003ef006 	br	8005b34 <__alt_data_end+0xfc005b34>
 8005f74:	00805504 	movi	r2,340
 8005f78:	10c01336 	bltu	r2,r3,8005fc8 <_malloc_r+0x6c4>
 8005f7c:	8806d3fa 	srli	r3,r17,15
 8005f80:	19c01dc4 	addi	r7,r3,119
 8005f84:	39cb883a 	add	r5,r7,r7
 8005f88:	003ea206 	br	8005a14 <__alt_data_end+0xfc005a14>
 8005f8c:	00c40004 	movi	r3,4096
 8005f90:	003f4d06 	br	8005cc8 <__alt_data_end+0xfc005cc8>
 8005f94:	00800044 	movi	r2,1
 8005f98:	a0800115 	stw	r2,4(r20)
 8005f9c:	a021883a 	mov	r16,r20
 8005fa0:	0007883a 	mov	r3,zero
 8005fa4:	003f7506 	br	8005d7c <__alt_data_end+0xfc005d7c>
 8005fa8:	200bd0ba 	srai	r5,r4,2
 8005fac:	01800044 	movi	r6,1
 8005fb0:	41000117 	ldw	r4,4(r8)
 8005fb4:	314a983a 	sll	r5,r6,r5
 8005fb8:	100d883a 	mov	r6,r2
 8005fbc:	2908b03a 	or	r4,r5,r4
 8005fc0:	41000115 	stw	r4,4(r8)
 8005fc4:	003f9d06 	br	8005e3c <__alt_data_end+0xfc005e3c>
 8005fc8:	00815504 	movi	r2,1364
 8005fcc:	10c01336 	bltu	r2,r3,800601c <_malloc_r+0x718>
 8005fd0:	8806d4ba 	srli	r3,r17,18
 8005fd4:	19c01f04 	addi	r7,r3,124
 8005fd8:	39cb883a 	add	r5,r7,r7
 8005fdc:	003e8d06 	br	8005a14 <__alt_data_end+0xfc005a14>
 8005fe0:	ad400404 	addi	r21,r21,16
 8005fe4:	003f1d06 	br	8005c5c <__alt_data_end+0xfc005c5c>
 8005fe8:	01001504 	movi	r4,84
 8005fec:	20801c36 	bltu	r4,r2,8006060 <_malloc_r+0x75c>
 8005ff0:	3804d33a 	srli	r2,r7,12
 8005ff4:	11001b84 	addi	r4,r2,110
 8005ff8:	210b883a 	add	r5,r4,r4
 8005ffc:	003f8006 	br	8005e00 <__alt_data_end+0xfc005e00>
 8006000:	3083ffcc 	andi	r2,r6,4095
 8006004:	103f241e 	bne	r2,zero,8005c98 <__alt_data_end+0xfc005c98>
 8006008:	99000217 	ldw	r4,8(r19)
 800600c:	ad85883a 	add	r2,r21,r22
 8006010:	10800054 	ori	r2,r2,1
 8006014:	20800115 	stw	r2,4(r4)
 8006018:	003f4a06 	br	8005d44 <__alt_data_end+0xfc005d44>
 800601c:	01403f04 	movi	r5,252
 8006020:	01c01f84 	movi	r7,126
 8006024:	003e7b06 	br	8005a14 <__alt_data_end+0xfc005a14>
 8006028:	00c00044 	movi	r3,1
 800602c:	002b883a 	mov	r21,zero
 8006030:	003f3006 	br	8005cf4 <__alt_data_end+0xfc005cf4>
 8006034:	00820074 	movhi	r2,2049
 8006038:	1086c204 	addi	r2,r2,6920
 800603c:	15000015 	stw	r20,0(r2)
 8006040:	003f1b06 	br	8005cb0 <__alt_data_end+0xfc005cb0>
 8006044:	9009883a 	mov	r4,r18
 8006048:	81400204 	addi	r5,r16,8
 800604c:	8004d680 	call	8004d68 <_free_r>
 8006050:	00820074 	movhi	r2,2049
 8006054:	108da204 	addi	r2,r2,13960
 8006058:	10c00017 	ldw	r3,0(r2)
 800605c:	003f3906 	br	8005d44 <__alt_data_end+0xfc005d44>
 8006060:	01005504 	movi	r4,340
 8006064:	20800436 	bltu	r4,r2,8006078 <_malloc_r+0x774>
 8006068:	3804d3fa 	srli	r2,r7,15
 800606c:	11001dc4 	addi	r4,r2,119
 8006070:	210b883a 	add	r5,r4,r4
 8006074:	003f6206 	br	8005e00 <__alt_data_end+0xfc005e00>
 8006078:	01015504 	movi	r4,1364
 800607c:	20800436 	bltu	r4,r2,8006090 <_malloc_r+0x78c>
 8006080:	3804d4ba 	srli	r2,r7,18
 8006084:	11001f04 	addi	r4,r2,124
 8006088:	210b883a 	add	r5,r4,r4
 800608c:	003f5c06 	br	8005e00 <__alt_data_end+0xfc005e00>
 8006090:	01403f04 	movi	r5,252
 8006094:	01001f84 	movi	r4,126
 8006098:	003f5906 	br	8005e00 <__alt_data_end+0xfc005e00>
 800609c:	98800117 	ldw	r2,4(r19)
 80060a0:	003fa906 	br	8005f48 <__alt_data_end+0xfc005f48>
 80060a4:	6007883a 	mov	r3,r12
 80060a8:	003ea206 	br	8005b34 <__alt_data_end+0xfc005b34>

080060ac <memchr>:
 80060ac:	208000cc 	andi	r2,r4,3
 80060b0:	280f883a 	mov	r7,r5
 80060b4:	10003526 	beq	r2,zero,800618c <memchr+0xe0>
 80060b8:	30bfffc4 	addi	r2,r6,-1
 80060bc:	30001b26 	beq	r6,zero,800612c <memchr+0x80>
 80060c0:	21800003 	ldbu	r6,0(r4)
 80060c4:	28c03fcc 	andi	r3,r5,255
 80060c8:	30c01a26 	beq	r6,r3,8006134 <memchr+0x88>
 80060cc:	180d883a 	mov	r6,r3
 80060d0:	00000406 	br	80060e4 <memchr+0x38>
 80060d4:	10001526 	beq	r2,zero,800612c <memchr+0x80>
 80060d8:	20c00003 	ldbu	r3,0(r4)
 80060dc:	10bfffc4 	addi	r2,r2,-1
 80060e0:	19801426 	beq	r3,r6,8006134 <memchr+0x88>
 80060e4:	21000044 	addi	r4,r4,1
 80060e8:	20c000cc 	andi	r3,r4,3
 80060ec:	183ff91e 	bne	r3,zero,80060d4 <__alt_data_end+0xfc0060d4>
 80060f0:	024000c4 	movi	r9,3
 80060f4:	48801136 	bltu	r9,r2,800613c <memchr+0x90>
 80060f8:	10000c26 	beq	r2,zero,800612c <memchr+0x80>
 80060fc:	20c00003 	ldbu	r3,0(r4)
 8006100:	29403fcc 	andi	r5,r5,255
 8006104:	19400b26 	beq	r3,r5,8006134 <memchr+0x88>
 8006108:	20c00044 	addi	r3,r4,1
 800610c:	2085883a 	add	r2,r4,r2
 8006110:	39803fcc 	andi	r6,r7,255
 8006114:	00000306 	br	8006124 <memchr+0x78>
 8006118:	18c00044 	addi	r3,r3,1
 800611c:	197fffc3 	ldbu	r5,-1(r3)
 8006120:	29800426 	beq	r5,r6,8006134 <memchr+0x88>
 8006124:	1809883a 	mov	r4,r3
 8006128:	18bffb1e 	bne	r3,r2,8006118 <__alt_data_end+0xfc006118>
 800612c:	0005883a 	mov	r2,zero
 8006130:	f800283a 	ret
 8006134:	2005883a 	mov	r2,r4
 8006138:	f800283a 	ret
 800613c:	28c03fcc 	andi	r3,r5,255
 8006140:	1810923a 	slli	r8,r3,8
 8006144:	02ffbff4 	movhi	r11,65279
 8006148:	02a02074 	movhi	r10,32897
 800614c:	40c6b03a 	or	r3,r8,r3
 8006150:	1810943a 	slli	r8,r3,16
 8006154:	5affbfc4 	addi	r11,r11,-257
 8006158:	52a02004 	addi	r10,r10,-32640
 800615c:	40d0b03a 	or	r8,r8,r3
 8006160:	20c00017 	ldw	r3,0(r4)
 8006164:	40c6f03a 	xor	r3,r8,r3
 8006168:	1acd883a 	add	r6,r3,r11
 800616c:	00c6303a 	nor	r3,zero,r3
 8006170:	30c6703a 	and	r3,r6,r3
 8006174:	1a86703a 	and	r3,r3,r10
 8006178:	183fdf1e 	bne	r3,zero,80060f8 <__alt_data_end+0xfc0060f8>
 800617c:	10bfff04 	addi	r2,r2,-4
 8006180:	21000104 	addi	r4,r4,4
 8006184:	48bff636 	bltu	r9,r2,8006160 <__alt_data_end+0xfc006160>
 8006188:	003fdb06 	br	80060f8 <__alt_data_end+0xfc0060f8>
 800618c:	3005883a 	mov	r2,r6
 8006190:	003fd706 	br	80060f0 <__alt_data_end+0xfc0060f0>

08006194 <memcpy>:
 8006194:	deffff04 	addi	sp,sp,-4
 8006198:	dc000015 	stw	r16,0(sp)
 800619c:	00c003c4 	movi	r3,15
 80061a0:	2005883a 	mov	r2,r4
 80061a4:	1980432e 	bgeu	r3,r6,80062b4 <memcpy+0x120>
 80061a8:	2146b03a 	or	r3,r4,r5
 80061ac:	18c000cc 	andi	r3,r3,3
 80061b0:	1800421e 	bne	r3,zero,80062bc <memcpy+0x128>
 80061b4:	343ffc04 	addi	r16,r6,-16
 80061b8:	8020d13a 	srli	r16,r16,4
 80061bc:	28c00104 	addi	r3,r5,4
 80061c0:	23400104 	addi	r13,r4,4
 80061c4:	801e913a 	slli	r15,r16,4
 80061c8:	2b000204 	addi	r12,r5,8
 80061cc:	22c00204 	addi	r11,r4,8
 80061d0:	7bc00504 	addi	r15,r15,20
 80061d4:	2a800304 	addi	r10,r5,12
 80061d8:	22400304 	addi	r9,r4,12
 80061dc:	2bdf883a 	add	r15,r5,r15
 80061e0:	2811883a 	mov	r8,r5
 80061e4:	200f883a 	mov	r7,r4
 80061e8:	41000017 	ldw	r4,0(r8)
 80061ec:	39c00404 	addi	r7,r7,16
 80061f0:	18c00404 	addi	r3,r3,16
 80061f4:	393ffc15 	stw	r4,-16(r7)
 80061f8:	1bbffc17 	ldw	r14,-16(r3)
 80061fc:	6b400404 	addi	r13,r13,16
 8006200:	5ac00404 	addi	r11,r11,16
 8006204:	6bbffc15 	stw	r14,-16(r13)
 8006208:	63800017 	ldw	r14,0(r12)
 800620c:	4a400404 	addi	r9,r9,16
 8006210:	42000404 	addi	r8,r8,16
 8006214:	5bbffc15 	stw	r14,-16(r11)
 8006218:	53800017 	ldw	r14,0(r10)
 800621c:	63000404 	addi	r12,r12,16
 8006220:	52800404 	addi	r10,r10,16
 8006224:	4bbffc15 	stw	r14,-16(r9)
 8006228:	1bffef1e 	bne	r3,r15,80061e8 <__alt_data_end+0xfc0061e8>
 800622c:	81c00044 	addi	r7,r16,1
 8006230:	380e913a 	slli	r7,r7,4
 8006234:	310003cc 	andi	r4,r6,15
 8006238:	02c000c4 	movi	r11,3
 800623c:	11c7883a 	add	r3,r2,r7
 8006240:	29cb883a 	add	r5,r5,r7
 8006244:	59001f2e 	bgeu	r11,r4,80062c4 <memcpy+0x130>
 8006248:	1813883a 	mov	r9,r3
 800624c:	2811883a 	mov	r8,r5
 8006250:	200f883a 	mov	r7,r4
 8006254:	42800017 	ldw	r10,0(r8)
 8006258:	4a400104 	addi	r9,r9,4
 800625c:	39ffff04 	addi	r7,r7,-4
 8006260:	4abfff15 	stw	r10,-4(r9)
 8006264:	42000104 	addi	r8,r8,4
 8006268:	59fffa36 	bltu	r11,r7,8006254 <__alt_data_end+0xfc006254>
 800626c:	213fff04 	addi	r4,r4,-4
 8006270:	2008d0ba 	srli	r4,r4,2
 8006274:	318000cc 	andi	r6,r6,3
 8006278:	21000044 	addi	r4,r4,1
 800627c:	2109883a 	add	r4,r4,r4
 8006280:	2109883a 	add	r4,r4,r4
 8006284:	1907883a 	add	r3,r3,r4
 8006288:	290b883a 	add	r5,r5,r4
 800628c:	30000626 	beq	r6,zero,80062a8 <memcpy+0x114>
 8006290:	198d883a 	add	r6,r3,r6
 8006294:	29c00003 	ldbu	r7,0(r5)
 8006298:	18c00044 	addi	r3,r3,1
 800629c:	29400044 	addi	r5,r5,1
 80062a0:	19ffffc5 	stb	r7,-1(r3)
 80062a4:	19bffb1e 	bne	r3,r6,8006294 <__alt_data_end+0xfc006294>
 80062a8:	dc000017 	ldw	r16,0(sp)
 80062ac:	dec00104 	addi	sp,sp,4
 80062b0:	f800283a 	ret
 80062b4:	2007883a 	mov	r3,r4
 80062b8:	003ff406 	br	800628c <__alt_data_end+0xfc00628c>
 80062bc:	2007883a 	mov	r3,r4
 80062c0:	003ff306 	br	8006290 <__alt_data_end+0xfc006290>
 80062c4:	200d883a 	mov	r6,r4
 80062c8:	003ff006 	br	800628c <__alt_data_end+0xfc00628c>

080062cc <memmove>:
 80062cc:	2005883a 	mov	r2,r4
 80062d0:	29000b2e 	bgeu	r5,r4,8006300 <memmove+0x34>
 80062d4:	298f883a 	add	r7,r5,r6
 80062d8:	21c0092e 	bgeu	r4,r7,8006300 <memmove+0x34>
 80062dc:	2187883a 	add	r3,r4,r6
 80062e0:	198bc83a 	sub	r5,r3,r6
 80062e4:	30004b26 	beq	r6,zero,8006414 <memmove+0x148>
 80062e8:	39ffffc4 	addi	r7,r7,-1
 80062ec:	39000003 	ldbu	r4,0(r7)
 80062f0:	18ffffc4 	addi	r3,r3,-1
 80062f4:	19000005 	stb	r4,0(r3)
 80062f8:	197ffb1e 	bne	r3,r5,80062e8 <__alt_data_end+0xfc0062e8>
 80062fc:	f800283a 	ret
 8006300:	00c003c4 	movi	r3,15
 8006304:	1980412e 	bgeu	r3,r6,800640c <memmove+0x140>
 8006308:	1146b03a 	or	r3,r2,r5
 800630c:	18c000cc 	andi	r3,r3,3
 8006310:	1800411e 	bne	r3,zero,8006418 <memmove+0x14c>
 8006314:	33fffc04 	addi	r15,r6,-16
 8006318:	781ed13a 	srli	r15,r15,4
 800631c:	28c00104 	addi	r3,r5,4
 8006320:	13400104 	addi	r13,r2,4
 8006324:	781c913a 	slli	r14,r15,4
 8006328:	2b000204 	addi	r12,r5,8
 800632c:	12c00204 	addi	r11,r2,8
 8006330:	73800504 	addi	r14,r14,20
 8006334:	2a800304 	addi	r10,r5,12
 8006338:	12400304 	addi	r9,r2,12
 800633c:	2b9d883a 	add	r14,r5,r14
 8006340:	2811883a 	mov	r8,r5
 8006344:	100f883a 	mov	r7,r2
 8006348:	41000017 	ldw	r4,0(r8)
 800634c:	39c00404 	addi	r7,r7,16
 8006350:	18c00404 	addi	r3,r3,16
 8006354:	393ffc15 	stw	r4,-16(r7)
 8006358:	193ffc17 	ldw	r4,-16(r3)
 800635c:	6b400404 	addi	r13,r13,16
 8006360:	5ac00404 	addi	r11,r11,16
 8006364:	693ffc15 	stw	r4,-16(r13)
 8006368:	61000017 	ldw	r4,0(r12)
 800636c:	4a400404 	addi	r9,r9,16
 8006370:	42000404 	addi	r8,r8,16
 8006374:	593ffc15 	stw	r4,-16(r11)
 8006378:	51000017 	ldw	r4,0(r10)
 800637c:	63000404 	addi	r12,r12,16
 8006380:	52800404 	addi	r10,r10,16
 8006384:	493ffc15 	stw	r4,-16(r9)
 8006388:	1bbfef1e 	bne	r3,r14,8006348 <__alt_data_end+0xfc006348>
 800638c:	79000044 	addi	r4,r15,1
 8006390:	2008913a 	slli	r4,r4,4
 8006394:	328003cc 	andi	r10,r6,15
 8006398:	02c000c4 	movi	r11,3
 800639c:	1107883a 	add	r3,r2,r4
 80063a0:	290b883a 	add	r5,r5,r4
 80063a4:	5a801e2e 	bgeu	r11,r10,8006420 <memmove+0x154>
 80063a8:	1813883a 	mov	r9,r3
 80063ac:	2811883a 	mov	r8,r5
 80063b0:	500f883a 	mov	r7,r10
 80063b4:	41000017 	ldw	r4,0(r8)
 80063b8:	4a400104 	addi	r9,r9,4
 80063bc:	39ffff04 	addi	r7,r7,-4
 80063c0:	493fff15 	stw	r4,-4(r9)
 80063c4:	42000104 	addi	r8,r8,4
 80063c8:	59fffa36 	bltu	r11,r7,80063b4 <__alt_data_end+0xfc0063b4>
 80063cc:	513fff04 	addi	r4,r10,-4
 80063d0:	2008d0ba 	srli	r4,r4,2
 80063d4:	318000cc 	andi	r6,r6,3
 80063d8:	21000044 	addi	r4,r4,1
 80063dc:	2109883a 	add	r4,r4,r4
 80063e0:	2109883a 	add	r4,r4,r4
 80063e4:	1907883a 	add	r3,r3,r4
 80063e8:	290b883a 	add	r5,r5,r4
 80063ec:	30000926 	beq	r6,zero,8006414 <memmove+0x148>
 80063f0:	198d883a 	add	r6,r3,r6
 80063f4:	29c00003 	ldbu	r7,0(r5)
 80063f8:	18c00044 	addi	r3,r3,1
 80063fc:	29400044 	addi	r5,r5,1
 8006400:	19ffffc5 	stb	r7,-1(r3)
 8006404:	19bffb1e 	bne	r3,r6,80063f4 <__alt_data_end+0xfc0063f4>
 8006408:	f800283a 	ret
 800640c:	1007883a 	mov	r3,r2
 8006410:	003ff606 	br	80063ec <__alt_data_end+0xfc0063ec>
 8006414:	f800283a 	ret
 8006418:	1007883a 	mov	r3,r2
 800641c:	003ff406 	br	80063f0 <__alt_data_end+0xfc0063f0>
 8006420:	500d883a 	mov	r6,r10
 8006424:	003ff106 	br	80063ec <__alt_data_end+0xfc0063ec>

08006428 <memset>:
 8006428:	20c000cc 	andi	r3,r4,3
 800642c:	2005883a 	mov	r2,r4
 8006430:	18004326 	beq	r3,zero,8006540 <memset+0x118>
 8006434:	31ffffc4 	addi	r7,r6,-1
 8006438:	30004026 	beq	r6,zero,800653c <memset+0x114>
 800643c:	2813883a 	mov	r9,r5
 8006440:	200d883a 	mov	r6,r4
 8006444:	2007883a 	mov	r3,r4
 8006448:	00000406 	br	800645c <memset+0x34>
 800644c:	3a3fffc4 	addi	r8,r7,-1
 8006450:	31800044 	addi	r6,r6,1
 8006454:	38003926 	beq	r7,zero,800653c <memset+0x114>
 8006458:	400f883a 	mov	r7,r8
 800645c:	18c00044 	addi	r3,r3,1
 8006460:	32400005 	stb	r9,0(r6)
 8006464:	1a0000cc 	andi	r8,r3,3
 8006468:	403ff81e 	bne	r8,zero,800644c <__alt_data_end+0xfc00644c>
 800646c:	010000c4 	movi	r4,3
 8006470:	21c02d2e 	bgeu	r4,r7,8006528 <memset+0x100>
 8006474:	29803fcc 	andi	r6,r5,255
 8006478:	3008923a 	slli	r4,r6,8
 800647c:	218cb03a 	or	r6,r4,r6
 8006480:	3008943a 	slli	r4,r6,16
 8006484:	218cb03a 	or	r6,r4,r6
 8006488:	010003c4 	movi	r4,15
 800648c:	21c0182e 	bgeu	r4,r7,80064f0 <memset+0xc8>
 8006490:	3b3ffc04 	addi	r12,r7,-16
 8006494:	6018d13a 	srli	r12,r12,4
 8006498:	1a000104 	addi	r8,r3,4
 800649c:	1ac00204 	addi	r11,r3,8
 80064a0:	6008913a 	slli	r4,r12,4
 80064a4:	1a800304 	addi	r10,r3,12
 80064a8:	1813883a 	mov	r9,r3
 80064ac:	21000504 	addi	r4,r4,20
 80064b0:	1909883a 	add	r4,r3,r4
 80064b4:	49800015 	stw	r6,0(r9)
 80064b8:	41800015 	stw	r6,0(r8)
 80064bc:	59800015 	stw	r6,0(r11)
 80064c0:	51800015 	stw	r6,0(r10)
 80064c4:	42000404 	addi	r8,r8,16
 80064c8:	4a400404 	addi	r9,r9,16
 80064cc:	5ac00404 	addi	r11,r11,16
 80064d0:	52800404 	addi	r10,r10,16
 80064d4:	413ff71e 	bne	r8,r4,80064b4 <__alt_data_end+0xfc0064b4>
 80064d8:	63000044 	addi	r12,r12,1
 80064dc:	6018913a 	slli	r12,r12,4
 80064e0:	39c003cc 	andi	r7,r7,15
 80064e4:	010000c4 	movi	r4,3
 80064e8:	1b07883a 	add	r3,r3,r12
 80064ec:	21c00e2e 	bgeu	r4,r7,8006528 <memset+0x100>
 80064f0:	1813883a 	mov	r9,r3
 80064f4:	3811883a 	mov	r8,r7
 80064f8:	010000c4 	movi	r4,3
 80064fc:	49800015 	stw	r6,0(r9)
 8006500:	423fff04 	addi	r8,r8,-4
 8006504:	4a400104 	addi	r9,r9,4
 8006508:	223ffc36 	bltu	r4,r8,80064fc <__alt_data_end+0xfc0064fc>
 800650c:	393fff04 	addi	r4,r7,-4
 8006510:	2008d0ba 	srli	r4,r4,2
 8006514:	39c000cc 	andi	r7,r7,3
 8006518:	21000044 	addi	r4,r4,1
 800651c:	2109883a 	add	r4,r4,r4
 8006520:	2109883a 	add	r4,r4,r4
 8006524:	1907883a 	add	r3,r3,r4
 8006528:	38000426 	beq	r7,zero,800653c <memset+0x114>
 800652c:	19cf883a 	add	r7,r3,r7
 8006530:	19400005 	stb	r5,0(r3)
 8006534:	18c00044 	addi	r3,r3,1
 8006538:	19fffd1e 	bne	r3,r7,8006530 <__alt_data_end+0xfc006530>
 800653c:	f800283a 	ret
 8006540:	2007883a 	mov	r3,r4
 8006544:	300f883a 	mov	r7,r6
 8006548:	003fc806 	br	800646c <__alt_data_end+0xfc00646c>

0800654c <_Balloc>:
 800654c:	20801317 	ldw	r2,76(r4)
 8006550:	defffc04 	addi	sp,sp,-16
 8006554:	dc400115 	stw	r17,4(sp)
 8006558:	dc000015 	stw	r16,0(sp)
 800655c:	dfc00315 	stw	ra,12(sp)
 8006560:	dc800215 	stw	r18,8(sp)
 8006564:	2023883a 	mov	r17,r4
 8006568:	2821883a 	mov	r16,r5
 800656c:	10000f26 	beq	r2,zero,80065ac <_Balloc+0x60>
 8006570:	8407883a 	add	r3,r16,r16
 8006574:	18c7883a 	add	r3,r3,r3
 8006578:	10c7883a 	add	r3,r2,r3
 800657c:	18800017 	ldw	r2,0(r3)
 8006580:	10001126 	beq	r2,zero,80065c8 <_Balloc+0x7c>
 8006584:	11000017 	ldw	r4,0(r2)
 8006588:	19000015 	stw	r4,0(r3)
 800658c:	10000415 	stw	zero,16(r2)
 8006590:	10000315 	stw	zero,12(r2)
 8006594:	dfc00317 	ldw	ra,12(sp)
 8006598:	dc800217 	ldw	r18,8(sp)
 800659c:	dc400117 	ldw	r17,4(sp)
 80065a0:	dc000017 	ldw	r16,0(sp)
 80065a4:	dec00404 	addi	sp,sp,16
 80065a8:	f800283a 	ret
 80065ac:	01400104 	movi	r5,4
 80065b0:	01800844 	movi	r6,33
 80065b4:	800953c0 	call	800953c <_calloc_r>
 80065b8:	88801315 	stw	r2,76(r17)
 80065bc:	103fec1e 	bne	r2,zero,8006570 <__alt_data_end+0xfc006570>
 80065c0:	0005883a 	mov	r2,zero
 80065c4:	003ff306 	br	8006594 <__alt_data_end+0xfc006594>
 80065c8:	01400044 	movi	r5,1
 80065cc:	2c24983a 	sll	r18,r5,r16
 80065d0:	8809883a 	mov	r4,r17
 80065d4:	91800144 	addi	r6,r18,5
 80065d8:	318d883a 	add	r6,r6,r6
 80065dc:	318d883a 	add	r6,r6,r6
 80065e0:	800953c0 	call	800953c <_calloc_r>
 80065e4:	103ff626 	beq	r2,zero,80065c0 <__alt_data_end+0xfc0065c0>
 80065e8:	14000115 	stw	r16,4(r2)
 80065ec:	14800215 	stw	r18,8(r2)
 80065f0:	003fe606 	br	800658c <__alt_data_end+0xfc00658c>

080065f4 <_Bfree>:
 80065f4:	28000826 	beq	r5,zero,8006618 <_Bfree+0x24>
 80065f8:	28c00117 	ldw	r3,4(r5)
 80065fc:	20801317 	ldw	r2,76(r4)
 8006600:	18c7883a 	add	r3,r3,r3
 8006604:	18c7883a 	add	r3,r3,r3
 8006608:	10c5883a 	add	r2,r2,r3
 800660c:	10c00017 	ldw	r3,0(r2)
 8006610:	28c00015 	stw	r3,0(r5)
 8006614:	11400015 	stw	r5,0(r2)
 8006618:	f800283a 	ret

0800661c <__multadd>:
 800661c:	defffa04 	addi	sp,sp,-24
 8006620:	dc000115 	stw	r16,4(sp)
 8006624:	2c000417 	ldw	r16,16(r5)
 8006628:	dc800315 	stw	r18,12(sp)
 800662c:	dc400215 	stw	r17,8(sp)
 8006630:	dfc00515 	stw	ra,20(sp)
 8006634:	dcc00415 	stw	r19,16(sp)
 8006638:	2823883a 	mov	r17,r5
 800663c:	2025883a 	mov	r18,r4
 8006640:	2a400504 	addi	r9,r5,20
 8006644:	0015883a 	mov	r10,zero
 8006648:	4a000017 	ldw	r8,0(r9)
 800664c:	4a400104 	addi	r9,r9,4
 8006650:	52800044 	addi	r10,r10,1
 8006654:	40ffffcc 	andi	r3,r8,65535
 8006658:	1987383a 	mul	r3,r3,r6
 800665c:	4010d43a 	srli	r8,r8,16
 8006660:	19cf883a 	add	r7,r3,r7
 8006664:	4191383a 	mul	r8,r8,r6
 8006668:	3816d43a 	srli	r11,r7,16
 800666c:	38ffffcc 	andi	r3,r7,65535
 8006670:	5a0f883a 	add	r7,r11,r8
 8006674:	3810943a 	slli	r8,r7,16
 8006678:	380ed43a 	srli	r7,r7,16
 800667c:	40c7883a 	add	r3,r8,r3
 8006680:	48ffff15 	stw	r3,-4(r9)
 8006684:	543ff016 	blt	r10,r16,8006648 <__alt_data_end+0xfc006648>
 8006688:	38000926 	beq	r7,zero,80066b0 <__multadd+0x94>
 800668c:	88800217 	ldw	r2,8(r17)
 8006690:	80800f0e 	bge	r16,r2,80066d0 <__multadd+0xb4>
 8006694:	80800144 	addi	r2,r16,5
 8006698:	1085883a 	add	r2,r2,r2
 800669c:	1085883a 	add	r2,r2,r2
 80066a0:	8885883a 	add	r2,r17,r2
 80066a4:	11c00015 	stw	r7,0(r2)
 80066a8:	84000044 	addi	r16,r16,1
 80066ac:	8c000415 	stw	r16,16(r17)
 80066b0:	8805883a 	mov	r2,r17
 80066b4:	dfc00517 	ldw	ra,20(sp)
 80066b8:	dcc00417 	ldw	r19,16(sp)
 80066bc:	dc800317 	ldw	r18,12(sp)
 80066c0:	dc400217 	ldw	r17,8(sp)
 80066c4:	dc000117 	ldw	r16,4(sp)
 80066c8:	dec00604 	addi	sp,sp,24
 80066cc:	f800283a 	ret
 80066d0:	89400117 	ldw	r5,4(r17)
 80066d4:	9009883a 	mov	r4,r18
 80066d8:	d9c00015 	stw	r7,0(sp)
 80066dc:	29400044 	addi	r5,r5,1
 80066e0:	800654c0 	call	800654c <_Balloc>
 80066e4:	89800417 	ldw	r6,16(r17)
 80066e8:	89400304 	addi	r5,r17,12
 80066ec:	11000304 	addi	r4,r2,12
 80066f0:	31800084 	addi	r6,r6,2
 80066f4:	318d883a 	add	r6,r6,r6
 80066f8:	318d883a 	add	r6,r6,r6
 80066fc:	1027883a 	mov	r19,r2
 8006700:	80061940 	call	8006194 <memcpy>
 8006704:	89000117 	ldw	r4,4(r17)
 8006708:	90c01317 	ldw	r3,76(r18)
 800670c:	d9c00017 	ldw	r7,0(sp)
 8006710:	2109883a 	add	r4,r4,r4
 8006714:	2109883a 	add	r4,r4,r4
 8006718:	1907883a 	add	r3,r3,r4
 800671c:	18800017 	ldw	r2,0(r3)
 8006720:	88800015 	stw	r2,0(r17)
 8006724:	1c400015 	stw	r17,0(r3)
 8006728:	9823883a 	mov	r17,r19
 800672c:	003fd906 	br	8006694 <__alt_data_end+0xfc006694>

08006730 <__s2b>:
 8006730:	defff904 	addi	sp,sp,-28
 8006734:	dc400115 	stw	r17,4(sp)
 8006738:	dc000015 	stw	r16,0(sp)
 800673c:	2023883a 	mov	r17,r4
 8006740:	2821883a 	mov	r16,r5
 8006744:	39000204 	addi	r4,r7,8
 8006748:	01400244 	movi	r5,9
 800674c:	dcc00315 	stw	r19,12(sp)
 8006750:	dc800215 	stw	r18,8(sp)
 8006754:	dfc00615 	stw	ra,24(sp)
 8006758:	dd400515 	stw	r21,20(sp)
 800675c:	dd000415 	stw	r20,16(sp)
 8006760:	3825883a 	mov	r18,r7
 8006764:	3027883a 	mov	r19,r6
 8006768:	800a8700 	call	800a870 <__divsi3>
 800676c:	00c00044 	movi	r3,1
 8006770:	000b883a 	mov	r5,zero
 8006774:	1880030e 	bge	r3,r2,8006784 <__s2b+0x54>
 8006778:	18c7883a 	add	r3,r3,r3
 800677c:	29400044 	addi	r5,r5,1
 8006780:	18bffd16 	blt	r3,r2,8006778 <__alt_data_end+0xfc006778>
 8006784:	8809883a 	mov	r4,r17
 8006788:	800654c0 	call	800654c <_Balloc>
 800678c:	d8c00717 	ldw	r3,28(sp)
 8006790:	10c00515 	stw	r3,20(r2)
 8006794:	00c00044 	movi	r3,1
 8006798:	10c00415 	stw	r3,16(r2)
 800679c:	00c00244 	movi	r3,9
 80067a0:	1cc0210e 	bge	r3,r19,8006828 <__s2b+0xf8>
 80067a4:	80eb883a 	add	r21,r16,r3
 80067a8:	a829883a 	mov	r20,r21
 80067ac:	84e1883a 	add	r16,r16,r19
 80067b0:	a1c00007 	ldb	r7,0(r20)
 80067b4:	8809883a 	mov	r4,r17
 80067b8:	a5000044 	addi	r20,r20,1
 80067bc:	100b883a 	mov	r5,r2
 80067c0:	01800284 	movi	r6,10
 80067c4:	39fff404 	addi	r7,r7,-48
 80067c8:	800661c0 	call	800661c <__multadd>
 80067cc:	a43ff81e 	bne	r20,r16,80067b0 <__alt_data_end+0xfc0067b0>
 80067d0:	ace1883a 	add	r16,r21,r19
 80067d4:	843ffe04 	addi	r16,r16,-8
 80067d8:	9c800a0e 	bge	r19,r18,8006804 <__s2b+0xd4>
 80067dc:	94e5c83a 	sub	r18,r18,r19
 80067e0:	84a5883a 	add	r18,r16,r18
 80067e4:	81c00007 	ldb	r7,0(r16)
 80067e8:	8809883a 	mov	r4,r17
 80067ec:	84000044 	addi	r16,r16,1
 80067f0:	100b883a 	mov	r5,r2
 80067f4:	01800284 	movi	r6,10
 80067f8:	39fff404 	addi	r7,r7,-48
 80067fc:	800661c0 	call	800661c <__multadd>
 8006800:	84bff81e 	bne	r16,r18,80067e4 <__alt_data_end+0xfc0067e4>
 8006804:	dfc00617 	ldw	ra,24(sp)
 8006808:	dd400517 	ldw	r21,20(sp)
 800680c:	dd000417 	ldw	r20,16(sp)
 8006810:	dcc00317 	ldw	r19,12(sp)
 8006814:	dc800217 	ldw	r18,8(sp)
 8006818:	dc400117 	ldw	r17,4(sp)
 800681c:	dc000017 	ldw	r16,0(sp)
 8006820:	dec00704 	addi	sp,sp,28
 8006824:	f800283a 	ret
 8006828:	84000284 	addi	r16,r16,10
 800682c:	1827883a 	mov	r19,r3
 8006830:	003fe906 	br	80067d8 <__alt_data_end+0xfc0067d8>

08006834 <__hi0bits>:
 8006834:	20bfffec 	andhi	r2,r4,65535
 8006838:	1000141e 	bne	r2,zero,800688c <__hi0bits+0x58>
 800683c:	2008943a 	slli	r4,r4,16
 8006840:	00800404 	movi	r2,16
 8006844:	20ffc02c 	andhi	r3,r4,65280
 8006848:	1800021e 	bne	r3,zero,8006854 <__hi0bits+0x20>
 800684c:	2008923a 	slli	r4,r4,8
 8006850:	10800204 	addi	r2,r2,8
 8006854:	20fc002c 	andhi	r3,r4,61440
 8006858:	1800021e 	bne	r3,zero,8006864 <__hi0bits+0x30>
 800685c:	2008913a 	slli	r4,r4,4
 8006860:	10800104 	addi	r2,r2,4
 8006864:	20f0002c 	andhi	r3,r4,49152
 8006868:	1800031e 	bne	r3,zero,8006878 <__hi0bits+0x44>
 800686c:	2109883a 	add	r4,r4,r4
 8006870:	10800084 	addi	r2,r2,2
 8006874:	2109883a 	add	r4,r4,r4
 8006878:	20000316 	blt	r4,zero,8006888 <__hi0bits+0x54>
 800687c:	2110002c 	andhi	r4,r4,16384
 8006880:	2000041e 	bne	r4,zero,8006894 <__hi0bits+0x60>
 8006884:	00800804 	movi	r2,32
 8006888:	f800283a 	ret
 800688c:	0005883a 	mov	r2,zero
 8006890:	003fec06 	br	8006844 <__alt_data_end+0xfc006844>
 8006894:	10800044 	addi	r2,r2,1
 8006898:	f800283a 	ret

0800689c <__lo0bits>:
 800689c:	20c00017 	ldw	r3,0(r4)
 80068a0:	188001cc 	andi	r2,r3,7
 80068a4:	10000826 	beq	r2,zero,80068c8 <__lo0bits+0x2c>
 80068a8:	1880004c 	andi	r2,r3,1
 80068ac:	1000211e 	bne	r2,zero,8006934 <__lo0bits+0x98>
 80068b0:	1880008c 	andi	r2,r3,2
 80068b4:	1000211e 	bne	r2,zero,800693c <__lo0bits+0xa0>
 80068b8:	1806d0ba 	srli	r3,r3,2
 80068bc:	00800084 	movi	r2,2
 80068c0:	20c00015 	stw	r3,0(r4)
 80068c4:	f800283a 	ret
 80068c8:	18bfffcc 	andi	r2,r3,65535
 80068cc:	10001326 	beq	r2,zero,800691c <__lo0bits+0x80>
 80068d0:	0005883a 	mov	r2,zero
 80068d4:	19403fcc 	andi	r5,r3,255
 80068d8:	2800021e 	bne	r5,zero,80068e4 <__lo0bits+0x48>
 80068dc:	1806d23a 	srli	r3,r3,8
 80068e0:	10800204 	addi	r2,r2,8
 80068e4:	194003cc 	andi	r5,r3,15
 80068e8:	2800021e 	bne	r5,zero,80068f4 <__lo0bits+0x58>
 80068ec:	1806d13a 	srli	r3,r3,4
 80068f0:	10800104 	addi	r2,r2,4
 80068f4:	194000cc 	andi	r5,r3,3
 80068f8:	2800021e 	bne	r5,zero,8006904 <__lo0bits+0x68>
 80068fc:	1806d0ba 	srli	r3,r3,2
 8006900:	10800084 	addi	r2,r2,2
 8006904:	1940004c 	andi	r5,r3,1
 8006908:	2800081e 	bne	r5,zero,800692c <__lo0bits+0x90>
 800690c:	1806d07a 	srli	r3,r3,1
 8006910:	1800051e 	bne	r3,zero,8006928 <__lo0bits+0x8c>
 8006914:	00800804 	movi	r2,32
 8006918:	f800283a 	ret
 800691c:	1806d43a 	srli	r3,r3,16
 8006920:	00800404 	movi	r2,16
 8006924:	003feb06 	br	80068d4 <__alt_data_end+0xfc0068d4>
 8006928:	10800044 	addi	r2,r2,1
 800692c:	20c00015 	stw	r3,0(r4)
 8006930:	f800283a 	ret
 8006934:	0005883a 	mov	r2,zero
 8006938:	f800283a 	ret
 800693c:	1806d07a 	srli	r3,r3,1
 8006940:	00800044 	movi	r2,1
 8006944:	20c00015 	stw	r3,0(r4)
 8006948:	f800283a 	ret

0800694c <__i2b>:
 800694c:	defffd04 	addi	sp,sp,-12
 8006950:	dc000015 	stw	r16,0(sp)
 8006954:	04000044 	movi	r16,1
 8006958:	dc400115 	stw	r17,4(sp)
 800695c:	2823883a 	mov	r17,r5
 8006960:	800b883a 	mov	r5,r16
 8006964:	dfc00215 	stw	ra,8(sp)
 8006968:	800654c0 	call	800654c <_Balloc>
 800696c:	14400515 	stw	r17,20(r2)
 8006970:	14000415 	stw	r16,16(r2)
 8006974:	dfc00217 	ldw	ra,8(sp)
 8006978:	dc400117 	ldw	r17,4(sp)
 800697c:	dc000017 	ldw	r16,0(sp)
 8006980:	dec00304 	addi	sp,sp,12
 8006984:	f800283a 	ret

08006988 <__multiply>:
 8006988:	defffa04 	addi	sp,sp,-24
 800698c:	dcc00315 	stw	r19,12(sp)
 8006990:	dc800215 	stw	r18,8(sp)
 8006994:	2cc00417 	ldw	r19,16(r5)
 8006998:	34800417 	ldw	r18,16(r6)
 800699c:	dd000415 	stw	r20,16(sp)
 80069a0:	dc400115 	stw	r17,4(sp)
 80069a4:	dfc00515 	stw	ra,20(sp)
 80069a8:	dc000015 	stw	r16,0(sp)
 80069ac:	2829883a 	mov	r20,r5
 80069b0:	3023883a 	mov	r17,r6
 80069b4:	9c807016 	blt	r19,r18,8006b78 <__multiply+0x1f0>
 80069b8:	9005883a 	mov	r2,r18
 80069bc:	9825883a 	mov	r18,r19
 80069c0:	1027883a 	mov	r19,r2
 80069c4:	a0800217 	ldw	r2,8(r20)
 80069c8:	94e1883a 	add	r16,r18,r19
 80069cc:	a1400117 	ldw	r5,4(r20)
 80069d0:	1400010e 	bge	r2,r16,80069d8 <__multiply+0x50>
 80069d4:	29400044 	addi	r5,r5,1
 80069d8:	800654c0 	call	800654c <_Balloc>
 80069dc:	8417883a 	add	r11,r16,r16
 80069e0:	13000504 	addi	r12,r2,20
 80069e4:	5ad7883a 	add	r11,r11,r11
 80069e8:	62d7883a 	add	r11,r12,r11
 80069ec:	6007883a 	mov	r3,r12
 80069f0:	62c0032e 	bgeu	r12,r11,8006a00 <__multiply+0x78>
 80069f4:	18000015 	stw	zero,0(r3)
 80069f8:	18c00104 	addi	r3,r3,4
 80069fc:	1afffd36 	bltu	r3,r11,80069f4 <__alt_data_end+0xfc0069f4>
 8006a00:	9ce7883a 	add	r19,r19,r19
 8006a04:	94a5883a 	add	r18,r18,r18
 8006a08:	89800504 	addi	r6,r17,20
 8006a0c:	9ce7883a 	add	r19,r19,r19
 8006a10:	a3800504 	addi	r14,r20,20
 8006a14:	94a5883a 	add	r18,r18,r18
 8006a18:	34db883a 	add	r13,r6,r19
 8006a1c:	7495883a 	add	r10,r14,r18
 8006a20:	3340422e 	bgeu	r6,r13,8006b2c <__multiply+0x1a4>
 8006a24:	34400017 	ldw	r17,0(r6)
 8006a28:	8cbfffcc 	andi	r18,r17,65535
 8006a2c:	90001b26 	beq	r18,zero,8006a9c <__multiply+0x114>
 8006a30:	6013883a 	mov	r9,r12
 8006a34:	7023883a 	mov	r17,r14
 8006a38:	0011883a 	mov	r8,zero
 8006a3c:	88c00017 	ldw	r3,0(r17)
 8006a40:	4bc00017 	ldw	r15,0(r9)
 8006a44:	8c400104 	addi	r17,r17,4
 8006a48:	19ffffcc 	andi	r7,r3,65535
 8006a4c:	3c8f383a 	mul	r7,r7,r18
 8006a50:	1808d43a 	srli	r4,r3,16
 8006a54:	797fffcc 	andi	r5,r15,65535
 8006a58:	29cb883a 	add	r5,r5,r7
 8006a5c:	2a0b883a 	add	r5,r5,r8
 8006a60:	2489383a 	mul	r4,r4,r18
 8006a64:	7806d43a 	srli	r3,r15,16
 8006a68:	2810d43a 	srli	r8,r5,16
 8006a6c:	297fffcc 	andi	r5,r5,65535
 8006a70:	1907883a 	add	r3,r3,r4
 8006a74:	1a07883a 	add	r3,r3,r8
 8006a78:	1808943a 	slli	r4,r3,16
 8006a7c:	480f883a 	mov	r7,r9
 8006a80:	1810d43a 	srli	r8,r3,16
 8006a84:	214ab03a 	or	r5,r4,r5
 8006a88:	49400015 	stw	r5,0(r9)
 8006a8c:	4a400104 	addi	r9,r9,4
 8006a90:	8abfea36 	bltu	r17,r10,8006a3c <__alt_data_end+0xfc006a3c>
 8006a94:	3a000115 	stw	r8,4(r7)
 8006a98:	34400017 	ldw	r17,0(r6)
 8006a9c:	8822d43a 	srli	r17,r17,16
 8006aa0:	88001f26 	beq	r17,zero,8006b20 <__multiply+0x198>
 8006aa4:	60c00017 	ldw	r3,0(r12)
 8006aa8:	7013883a 	mov	r9,r14
 8006aac:	601f883a 	mov	r15,r12
 8006ab0:	1811883a 	mov	r8,r3
 8006ab4:	6027883a 	mov	r19,r12
 8006ab8:	000f883a 	mov	r7,zero
 8006abc:	00000106 	br	8006ac4 <__multiply+0x13c>
 8006ac0:	9027883a 	mov	r19,r18
 8006ac4:	4940000b 	ldhu	r5,0(r9)
 8006ac8:	4010d43a 	srli	r8,r8,16
 8006acc:	193fffcc 	andi	r4,r3,65535
 8006ad0:	2c4b383a 	mul	r5,r5,r17
 8006ad4:	7bc00104 	addi	r15,r15,4
 8006ad8:	4a400104 	addi	r9,r9,4
 8006adc:	2a0b883a 	add	r5,r5,r8
 8006ae0:	29cb883a 	add	r5,r5,r7
 8006ae4:	2806943a 	slli	r3,r5,16
 8006ae8:	9c800104 	addi	r18,r19,4
 8006aec:	280ad43a 	srli	r5,r5,16
 8006af0:	1908b03a 	or	r4,r3,r4
 8006af4:	793fff15 	stw	r4,-4(r15)
 8006af8:	48ffff17 	ldw	r3,-4(r9)
 8006afc:	92000017 	ldw	r8,0(r18)
 8006b00:	1806d43a 	srli	r3,r3,16
 8006b04:	413fffcc 	andi	r4,r8,65535
 8006b08:	1c47383a 	mul	r3,r3,r17
 8006b0c:	1907883a 	add	r3,r3,r4
 8006b10:	1947883a 	add	r3,r3,r5
 8006b14:	180ed43a 	srli	r7,r3,16
 8006b18:	4abfe936 	bltu	r9,r10,8006ac0 <__alt_data_end+0xfc006ac0>
 8006b1c:	98c00115 	stw	r3,4(r19)
 8006b20:	31800104 	addi	r6,r6,4
 8006b24:	63000104 	addi	r12,r12,4
 8006b28:	337fbe36 	bltu	r6,r13,8006a24 <__alt_data_end+0xfc006a24>
 8006b2c:	0400090e 	bge	zero,r16,8006b54 <__multiply+0x1cc>
 8006b30:	58ffff17 	ldw	r3,-4(r11)
 8006b34:	5affff04 	addi	r11,r11,-4
 8006b38:	18000326 	beq	r3,zero,8006b48 <__multiply+0x1c0>
 8006b3c:	00000506 	br	8006b54 <__multiply+0x1cc>
 8006b40:	58c00017 	ldw	r3,0(r11)
 8006b44:	1800031e 	bne	r3,zero,8006b54 <__multiply+0x1cc>
 8006b48:	843fffc4 	addi	r16,r16,-1
 8006b4c:	5affff04 	addi	r11,r11,-4
 8006b50:	803ffb1e 	bne	r16,zero,8006b40 <__alt_data_end+0xfc006b40>
 8006b54:	14000415 	stw	r16,16(r2)
 8006b58:	dfc00517 	ldw	ra,20(sp)
 8006b5c:	dd000417 	ldw	r20,16(sp)
 8006b60:	dcc00317 	ldw	r19,12(sp)
 8006b64:	dc800217 	ldw	r18,8(sp)
 8006b68:	dc400117 	ldw	r17,4(sp)
 8006b6c:	dc000017 	ldw	r16,0(sp)
 8006b70:	dec00604 	addi	sp,sp,24
 8006b74:	f800283a 	ret
 8006b78:	3029883a 	mov	r20,r6
 8006b7c:	2823883a 	mov	r17,r5
 8006b80:	003f9006 	br	80069c4 <__alt_data_end+0xfc0069c4>

08006b84 <__pow5mult>:
 8006b84:	defffa04 	addi	sp,sp,-24
 8006b88:	dcc00315 	stw	r19,12(sp)
 8006b8c:	dc800215 	stw	r18,8(sp)
 8006b90:	dc000015 	stw	r16,0(sp)
 8006b94:	dfc00515 	stw	ra,20(sp)
 8006b98:	dd000415 	stw	r20,16(sp)
 8006b9c:	dc400115 	stw	r17,4(sp)
 8006ba0:	308000cc 	andi	r2,r6,3
 8006ba4:	3021883a 	mov	r16,r6
 8006ba8:	2027883a 	mov	r19,r4
 8006bac:	2825883a 	mov	r18,r5
 8006bb0:	10002e1e 	bne	r2,zero,8006c6c <__pow5mult+0xe8>
 8006bb4:	8021d0ba 	srai	r16,r16,2
 8006bb8:	80001a26 	beq	r16,zero,8006c24 <__pow5mult+0xa0>
 8006bbc:	9c401217 	ldw	r17,72(r19)
 8006bc0:	8800061e 	bne	r17,zero,8006bdc <__pow5mult+0x58>
 8006bc4:	00003406 	br	8006c98 <__pow5mult+0x114>
 8006bc8:	8021d07a 	srai	r16,r16,1
 8006bcc:	80001526 	beq	r16,zero,8006c24 <__pow5mult+0xa0>
 8006bd0:	88800017 	ldw	r2,0(r17)
 8006bd4:	10001c26 	beq	r2,zero,8006c48 <__pow5mult+0xc4>
 8006bd8:	1023883a 	mov	r17,r2
 8006bdc:	80c0004c 	andi	r3,r16,1
 8006be0:	183ff926 	beq	r3,zero,8006bc8 <__alt_data_end+0xfc006bc8>
 8006be4:	900b883a 	mov	r5,r18
 8006be8:	880d883a 	mov	r6,r17
 8006bec:	9809883a 	mov	r4,r19
 8006bf0:	80069880 	call	8006988 <__multiply>
 8006bf4:	90001b26 	beq	r18,zero,8006c64 <__pow5mult+0xe0>
 8006bf8:	91c00117 	ldw	r7,4(r18)
 8006bfc:	98c01317 	ldw	r3,76(r19)
 8006c00:	8021d07a 	srai	r16,r16,1
 8006c04:	39cf883a 	add	r7,r7,r7
 8006c08:	39cf883a 	add	r7,r7,r7
 8006c0c:	19c7883a 	add	r3,r3,r7
 8006c10:	19000017 	ldw	r4,0(r3)
 8006c14:	91000015 	stw	r4,0(r18)
 8006c18:	1c800015 	stw	r18,0(r3)
 8006c1c:	1025883a 	mov	r18,r2
 8006c20:	803feb1e 	bne	r16,zero,8006bd0 <__alt_data_end+0xfc006bd0>
 8006c24:	9005883a 	mov	r2,r18
 8006c28:	dfc00517 	ldw	ra,20(sp)
 8006c2c:	dd000417 	ldw	r20,16(sp)
 8006c30:	dcc00317 	ldw	r19,12(sp)
 8006c34:	dc800217 	ldw	r18,8(sp)
 8006c38:	dc400117 	ldw	r17,4(sp)
 8006c3c:	dc000017 	ldw	r16,0(sp)
 8006c40:	dec00604 	addi	sp,sp,24
 8006c44:	f800283a 	ret
 8006c48:	9809883a 	mov	r4,r19
 8006c4c:	880b883a 	mov	r5,r17
 8006c50:	880d883a 	mov	r6,r17
 8006c54:	80069880 	call	8006988 <__multiply>
 8006c58:	88800015 	stw	r2,0(r17)
 8006c5c:	10000015 	stw	zero,0(r2)
 8006c60:	003fdd06 	br	8006bd8 <__alt_data_end+0xfc006bd8>
 8006c64:	1025883a 	mov	r18,r2
 8006c68:	003fd706 	br	8006bc8 <__alt_data_end+0xfc006bc8>
 8006c6c:	10bfffc4 	addi	r2,r2,-1
 8006c70:	1085883a 	add	r2,r2,r2
 8006c74:	00c20074 	movhi	r3,2049
 8006c78:	18ff6504 	addi	r3,r3,-620
 8006c7c:	1085883a 	add	r2,r2,r2
 8006c80:	1885883a 	add	r2,r3,r2
 8006c84:	11800017 	ldw	r6,0(r2)
 8006c88:	000f883a 	mov	r7,zero
 8006c8c:	800661c0 	call	800661c <__multadd>
 8006c90:	1025883a 	mov	r18,r2
 8006c94:	003fc706 	br	8006bb4 <__alt_data_end+0xfc006bb4>
 8006c98:	05000044 	movi	r20,1
 8006c9c:	9809883a 	mov	r4,r19
 8006ca0:	a00b883a 	mov	r5,r20
 8006ca4:	800654c0 	call	800654c <_Balloc>
 8006ca8:	1023883a 	mov	r17,r2
 8006cac:	00809c44 	movi	r2,625
 8006cb0:	88800515 	stw	r2,20(r17)
 8006cb4:	8d000415 	stw	r20,16(r17)
 8006cb8:	9c401215 	stw	r17,72(r19)
 8006cbc:	88000015 	stw	zero,0(r17)
 8006cc0:	003fc606 	br	8006bdc <__alt_data_end+0xfc006bdc>

08006cc4 <__lshift>:
 8006cc4:	defff904 	addi	sp,sp,-28
 8006cc8:	dd000415 	stw	r20,16(sp)
 8006ccc:	dcc00315 	stw	r19,12(sp)
 8006cd0:	3029d17a 	srai	r20,r6,5
 8006cd4:	2cc00417 	ldw	r19,16(r5)
 8006cd8:	28800217 	ldw	r2,8(r5)
 8006cdc:	dd400515 	stw	r21,20(sp)
 8006ce0:	a4e7883a 	add	r19,r20,r19
 8006ce4:	dc800215 	stw	r18,8(sp)
 8006ce8:	dc400115 	stw	r17,4(sp)
 8006cec:	dc000015 	stw	r16,0(sp)
 8006cf0:	dfc00615 	stw	ra,24(sp)
 8006cf4:	9c000044 	addi	r16,r19,1
 8006cf8:	2823883a 	mov	r17,r5
 8006cfc:	302b883a 	mov	r21,r6
 8006d00:	2025883a 	mov	r18,r4
 8006d04:	29400117 	ldw	r5,4(r5)
 8006d08:	1400030e 	bge	r2,r16,8006d18 <__lshift+0x54>
 8006d0c:	1085883a 	add	r2,r2,r2
 8006d10:	29400044 	addi	r5,r5,1
 8006d14:	143ffd16 	blt	r2,r16,8006d0c <__alt_data_end+0xfc006d0c>
 8006d18:	9009883a 	mov	r4,r18
 8006d1c:	800654c0 	call	800654c <_Balloc>
 8006d20:	11c00504 	addi	r7,r2,20
 8006d24:	0500090e 	bge	zero,r20,8006d4c <__lshift+0x88>
 8006d28:	3811883a 	mov	r8,r7
 8006d2c:	0007883a 	mov	r3,zero
 8006d30:	40000015 	stw	zero,0(r8)
 8006d34:	18c00044 	addi	r3,r3,1
 8006d38:	42000104 	addi	r8,r8,4
 8006d3c:	1d3ffc1e 	bne	r3,r20,8006d30 <__alt_data_end+0xfc006d30>
 8006d40:	18c7883a 	add	r3,r3,r3
 8006d44:	18c7883a 	add	r3,r3,r3
 8006d48:	38cf883a 	add	r7,r7,r3
 8006d4c:	89000417 	ldw	r4,16(r17)
 8006d50:	88c00504 	addi	r3,r17,20
 8006d54:	a98007cc 	andi	r6,r21,31
 8006d58:	2109883a 	add	r4,r4,r4
 8006d5c:	2109883a 	add	r4,r4,r4
 8006d60:	1909883a 	add	r4,r3,r4
 8006d64:	30002326 	beq	r6,zero,8006df4 <__lshift+0x130>
 8006d68:	01400804 	movi	r5,32
 8006d6c:	298bc83a 	sub	r5,r5,r6
 8006d70:	0013883a 	mov	r9,zero
 8006d74:	1a000017 	ldw	r8,0(r3)
 8006d78:	3815883a 	mov	r10,r7
 8006d7c:	39c00104 	addi	r7,r7,4
 8006d80:	4190983a 	sll	r8,r8,r6
 8006d84:	18c00104 	addi	r3,r3,4
 8006d88:	4a10b03a 	or	r8,r9,r8
 8006d8c:	3a3fff15 	stw	r8,-4(r7)
 8006d90:	1a3fff17 	ldw	r8,-4(r3)
 8006d94:	4152d83a 	srl	r9,r8,r5
 8006d98:	193ff636 	bltu	r3,r4,8006d74 <__alt_data_end+0xfc006d74>
 8006d9c:	52400115 	stw	r9,4(r10)
 8006da0:	48000126 	beq	r9,zero,8006da8 <__lshift+0xe4>
 8006da4:	9c000084 	addi	r16,r19,2
 8006da8:	89000117 	ldw	r4,4(r17)
 8006dac:	90c01317 	ldw	r3,76(r18)
 8006db0:	843fffc4 	addi	r16,r16,-1
 8006db4:	2109883a 	add	r4,r4,r4
 8006db8:	2109883a 	add	r4,r4,r4
 8006dbc:	1907883a 	add	r3,r3,r4
 8006dc0:	19000017 	ldw	r4,0(r3)
 8006dc4:	14000415 	stw	r16,16(r2)
 8006dc8:	89000015 	stw	r4,0(r17)
 8006dcc:	1c400015 	stw	r17,0(r3)
 8006dd0:	dfc00617 	ldw	ra,24(sp)
 8006dd4:	dd400517 	ldw	r21,20(sp)
 8006dd8:	dd000417 	ldw	r20,16(sp)
 8006ddc:	dcc00317 	ldw	r19,12(sp)
 8006de0:	dc800217 	ldw	r18,8(sp)
 8006de4:	dc400117 	ldw	r17,4(sp)
 8006de8:	dc000017 	ldw	r16,0(sp)
 8006dec:	dec00704 	addi	sp,sp,28
 8006df0:	f800283a 	ret
 8006df4:	19400017 	ldw	r5,0(r3)
 8006df8:	39c00104 	addi	r7,r7,4
 8006dfc:	18c00104 	addi	r3,r3,4
 8006e00:	397fff15 	stw	r5,-4(r7)
 8006e04:	193ffb36 	bltu	r3,r4,8006df4 <__alt_data_end+0xfc006df4>
 8006e08:	003fe706 	br	8006da8 <__alt_data_end+0xfc006da8>

08006e0c <__mcmp>:
 8006e0c:	20800417 	ldw	r2,16(r4)
 8006e10:	28c00417 	ldw	r3,16(r5)
 8006e14:	10c5c83a 	sub	r2,r2,r3
 8006e18:	1000111e 	bne	r2,zero,8006e60 <__mcmp+0x54>
 8006e1c:	18c7883a 	add	r3,r3,r3
 8006e20:	18c7883a 	add	r3,r3,r3
 8006e24:	21000504 	addi	r4,r4,20
 8006e28:	29400504 	addi	r5,r5,20
 8006e2c:	20c5883a 	add	r2,r4,r3
 8006e30:	28cb883a 	add	r5,r5,r3
 8006e34:	00000106 	br	8006e3c <__mcmp+0x30>
 8006e38:	20800a2e 	bgeu	r4,r2,8006e64 <__mcmp+0x58>
 8006e3c:	10bfff04 	addi	r2,r2,-4
 8006e40:	297fff04 	addi	r5,r5,-4
 8006e44:	11800017 	ldw	r6,0(r2)
 8006e48:	28c00017 	ldw	r3,0(r5)
 8006e4c:	30fffa26 	beq	r6,r3,8006e38 <__alt_data_end+0xfc006e38>
 8006e50:	30c00236 	bltu	r6,r3,8006e5c <__mcmp+0x50>
 8006e54:	00800044 	movi	r2,1
 8006e58:	f800283a 	ret
 8006e5c:	00bfffc4 	movi	r2,-1
 8006e60:	f800283a 	ret
 8006e64:	0005883a 	mov	r2,zero
 8006e68:	f800283a 	ret

08006e6c <__mdiff>:
 8006e6c:	defffb04 	addi	sp,sp,-20
 8006e70:	dc000015 	stw	r16,0(sp)
 8006e74:	2821883a 	mov	r16,r5
 8006e78:	dcc00315 	stw	r19,12(sp)
 8006e7c:	300b883a 	mov	r5,r6
 8006e80:	2027883a 	mov	r19,r4
 8006e84:	8009883a 	mov	r4,r16
 8006e88:	dc800215 	stw	r18,8(sp)
 8006e8c:	dfc00415 	stw	ra,16(sp)
 8006e90:	dc400115 	stw	r17,4(sp)
 8006e94:	3025883a 	mov	r18,r6
 8006e98:	8006e0c0 	call	8006e0c <__mcmp>
 8006e9c:	10005226 	beq	r2,zero,8006fe8 <__mdiff+0x17c>
 8006ea0:	10004c16 	blt	r2,zero,8006fd4 <__mdiff+0x168>
 8006ea4:	0023883a 	mov	r17,zero
 8006ea8:	81400117 	ldw	r5,4(r16)
 8006eac:	9809883a 	mov	r4,r19
 8006eb0:	800654c0 	call	800654c <_Balloc>
 8006eb4:	83400417 	ldw	r13,16(r16)
 8006eb8:	93800417 	ldw	r14,16(r18)
 8006ebc:	81000504 	addi	r4,r16,20
 8006ec0:	6b59883a 	add	r12,r13,r13
 8006ec4:	739d883a 	add	r14,r14,r14
 8006ec8:	6319883a 	add	r12,r12,r12
 8006ecc:	91800504 	addi	r6,r18,20
 8006ed0:	739d883a 	add	r14,r14,r14
 8006ed4:	14400315 	stw	r17,12(r2)
 8006ed8:	2319883a 	add	r12,r4,r12
 8006edc:	339d883a 	add	r14,r6,r14
 8006ee0:	12400504 	addi	r9,r2,20
 8006ee4:	0007883a 	mov	r3,zero
 8006ee8:	22000017 	ldw	r8,0(r4)
 8006eec:	32800017 	ldw	r10,0(r6)
 8006ef0:	4ac00104 	addi	r11,r9,4
 8006ef4:	41ffffcc 	andi	r7,r8,65535
 8006ef8:	38c7883a 	add	r3,r7,r3
 8006efc:	51ffffcc 	andi	r7,r10,65535
 8006f00:	19cfc83a 	sub	r7,r3,r7
 8006f04:	4010d43a 	srli	r8,r8,16
 8006f08:	5014d43a 	srli	r10,r10,16
 8006f0c:	3807d43a 	srai	r3,r7,16
 8006f10:	39ffffcc 	andi	r7,r7,65535
 8006f14:	4291c83a 	sub	r8,r8,r10
 8006f18:	40c7883a 	add	r3,r8,r3
 8006f1c:	1810943a 	slli	r8,r3,16
 8006f20:	31800104 	addi	r6,r6,4
 8006f24:	21000104 	addi	r4,r4,4
 8006f28:	41ceb03a 	or	r7,r8,r7
 8006f2c:	49c00015 	stw	r7,0(r9)
 8006f30:	1807d43a 	srai	r3,r3,16
 8006f34:	580b883a 	mov	r5,r11
 8006f38:	5813883a 	mov	r9,r11
 8006f3c:	33bfea36 	bltu	r6,r14,8006ee8 <__alt_data_end+0xfc006ee8>
 8006f40:	2011883a 	mov	r8,r4
 8006f44:	2300152e 	bgeu	r4,r12,8006f9c <__mdiff+0x130>
 8006f48:	21400017 	ldw	r5,0(r4)
 8006f4c:	4a400104 	addi	r9,r9,4
 8006f50:	21000104 	addi	r4,r4,4
 8006f54:	29ffffcc 	andi	r7,r5,65535
 8006f58:	38c7883a 	add	r3,r7,r3
 8006f5c:	280ad43a 	srli	r5,r5,16
 8006f60:	180dd43a 	srai	r6,r3,16
 8006f64:	19ffffcc 	andi	r7,r3,65535
 8006f68:	3147883a 	add	r3,r6,r5
 8006f6c:	180a943a 	slli	r5,r3,16
 8006f70:	1807d43a 	srai	r3,r3,16
 8006f74:	29ceb03a 	or	r7,r5,r7
 8006f78:	49ffff15 	stw	r7,-4(r9)
 8006f7c:	233ff236 	bltu	r4,r12,8006f48 <__alt_data_end+0xfc006f48>
 8006f80:	0206303a 	nor	r3,zero,r8
 8006f84:	1b07883a 	add	r3,r3,r12
 8006f88:	1806d0ba 	srli	r3,r3,2
 8006f8c:	18c00044 	addi	r3,r3,1
 8006f90:	18c7883a 	add	r3,r3,r3
 8006f94:	18c7883a 	add	r3,r3,r3
 8006f98:	58cb883a 	add	r5,r11,r3
 8006f9c:	28ffff04 	addi	r3,r5,-4
 8006fa0:	3800041e 	bne	r7,zero,8006fb4 <__mdiff+0x148>
 8006fa4:	18ffff04 	addi	r3,r3,-4
 8006fa8:	19000017 	ldw	r4,0(r3)
 8006fac:	6b7fffc4 	addi	r13,r13,-1
 8006fb0:	203ffc26 	beq	r4,zero,8006fa4 <__alt_data_end+0xfc006fa4>
 8006fb4:	13400415 	stw	r13,16(r2)
 8006fb8:	dfc00417 	ldw	ra,16(sp)
 8006fbc:	dcc00317 	ldw	r19,12(sp)
 8006fc0:	dc800217 	ldw	r18,8(sp)
 8006fc4:	dc400117 	ldw	r17,4(sp)
 8006fc8:	dc000017 	ldw	r16,0(sp)
 8006fcc:	dec00504 	addi	sp,sp,20
 8006fd0:	f800283a 	ret
 8006fd4:	8005883a 	mov	r2,r16
 8006fd8:	04400044 	movi	r17,1
 8006fdc:	9021883a 	mov	r16,r18
 8006fe0:	1025883a 	mov	r18,r2
 8006fe4:	003fb006 	br	8006ea8 <__alt_data_end+0xfc006ea8>
 8006fe8:	9809883a 	mov	r4,r19
 8006fec:	000b883a 	mov	r5,zero
 8006ff0:	800654c0 	call	800654c <_Balloc>
 8006ff4:	00c00044 	movi	r3,1
 8006ff8:	10c00415 	stw	r3,16(r2)
 8006ffc:	10000515 	stw	zero,20(r2)
 8007000:	003fed06 	br	8006fb8 <__alt_data_end+0xfc006fb8>

08007004 <__ulp>:
 8007004:	295ffc2c 	andhi	r5,r5,32752
 8007008:	00bf3034 	movhi	r2,64704
 800700c:	2887883a 	add	r3,r5,r2
 8007010:	00c0020e 	bge	zero,r3,800701c <__ulp+0x18>
 8007014:	0005883a 	mov	r2,zero
 8007018:	f800283a 	ret
 800701c:	00c7c83a 	sub	r3,zero,r3
 8007020:	180bd53a 	srai	r5,r3,20
 8007024:	008004c4 	movi	r2,19
 8007028:	11400a0e 	bge	r2,r5,8007054 <__ulp+0x50>
 800702c:	00800c84 	movi	r2,50
 8007030:	0007883a 	mov	r3,zero
 8007034:	11400516 	blt	r2,r5,800704c <__ulp+0x48>
 8007038:	00800cc4 	movi	r2,51
 800703c:	114bc83a 	sub	r5,r2,r5
 8007040:	00800044 	movi	r2,1
 8007044:	1144983a 	sll	r2,r2,r5
 8007048:	f800283a 	ret
 800704c:	00800044 	movi	r2,1
 8007050:	f800283a 	ret
 8007054:	00800234 	movhi	r2,8
 8007058:	1147d83a 	sra	r3,r2,r5
 800705c:	0005883a 	mov	r2,zero
 8007060:	f800283a 	ret

08007064 <__b2d>:
 8007064:	defffa04 	addi	sp,sp,-24
 8007068:	dc000015 	stw	r16,0(sp)
 800706c:	24000417 	ldw	r16,16(r4)
 8007070:	dc400115 	stw	r17,4(sp)
 8007074:	24400504 	addi	r17,r4,20
 8007078:	8421883a 	add	r16,r16,r16
 800707c:	8421883a 	add	r16,r16,r16
 8007080:	8c21883a 	add	r16,r17,r16
 8007084:	dc800215 	stw	r18,8(sp)
 8007088:	84bfff17 	ldw	r18,-4(r16)
 800708c:	dd000415 	stw	r20,16(sp)
 8007090:	dcc00315 	stw	r19,12(sp)
 8007094:	9009883a 	mov	r4,r18
 8007098:	2829883a 	mov	r20,r5
 800709c:	dfc00515 	stw	ra,20(sp)
 80070a0:	80068340 	call	8006834 <__hi0bits>
 80070a4:	00c00804 	movi	r3,32
 80070a8:	1887c83a 	sub	r3,r3,r2
 80070ac:	a0c00015 	stw	r3,0(r20)
 80070b0:	00c00284 	movi	r3,10
 80070b4:	84ffff04 	addi	r19,r16,-4
 80070b8:	18801216 	blt	r3,r2,8007104 <__b2d+0xa0>
 80070bc:	014002c4 	movi	r5,11
 80070c0:	2889c83a 	sub	r4,r5,r2
 80070c4:	9106d83a 	srl	r3,r18,r4
 80070c8:	18cffc34 	orhi	r3,r3,16368
 80070cc:	8cc0282e 	bgeu	r17,r19,8007170 <__b2d+0x10c>
 80070d0:	817ffe17 	ldw	r5,-8(r16)
 80070d4:	290ad83a 	srl	r5,r5,r4
 80070d8:	10800544 	addi	r2,r2,21
 80070dc:	9084983a 	sll	r2,r18,r2
 80070e0:	2884b03a 	or	r2,r5,r2
 80070e4:	dfc00517 	ldw	ra,20(sp)
 80070e8:	dd000417 	ldw	r20,16(sp)
 80070ec:	dcc00317 	ldw	r19,12(sp)
 80070f0:	dc800217 	ldw	r18,8(sp)
 80070f4:	dc400117 	ldw	r17,4(sp)
 80070f8:	dc000017 	ldw	r16,0(sp)
 80070fc:	dec00604 	addi	sp,sp,24
 8007100:	f800283a 	ret
 8007104:	113ffd44 	addi	r4,r2,-11
 8007108:	8cc00f2e 	bgeu	r17,r19,8007148 <__b2d+0xe4>
 800710c:	81bffe04 	addi	r6,r16,-8
 8007110:	817ffe17 	ldw	r5,-8(r16)
 8007114:	20001326 	beq	r4,zero,8007164 <__b2d+0x100>
 8007118:	00c00ac4 	movi	r3,43
 800711c:	1885c83a 	sub	r2,r3,r2
 8007120:	2886d83a 	srl	r3,r5,r2
 8007124:	9124983a 	sll	r18,r18,r4
 8007128:	90e4b03a 	or	r18,r18,r3
 800712c:	90cffc34 	orhi	r3,r18,16368
 8007130:	8980112e 	bgeu	r17,r6,8007178 <__b2d+0x114>
 8007134:	81bffd17 	ldw	r6,-12(r16)
 8007138:	308cd83a 	srl	r6,r6,r2
 800713c:	2904983a 	sll	r2,r5,r4
 8007140:	1184b03a 	or	r2,r2,r6
 8007144:	003fe706 	br	80070e4 <__alt_data_end+0xfc0070e4>
 8007148:	20000526 	beq	r4,zero,8007160 <__b2d+0xfc>
 800714c:	9124983a 	sll	r18,r18,r4
 8007150:	000d883a 	mov	r6,zero
 8007154:	000b883a 	mov	r5,zero
 8007158:	90cffc34 	orhi	r3,r18,16368
 800715c:	003ff706 	br	800713c <__alt_data_end+0xfc00713c>
 8007160:	000b883a 	mov	r5,zero
 8007164:	90cffc34 	orhi	r3,r18,16368
 8007168:	2805883a 	mov	r2,r5
 800716c:	003fdd06 	br	80070e4 <__alt_data_end+0xfc0070e4>
 8007170:	000b883a 	mov	r5,zero
 8007174:	003fd806 	br	80070d8 <__alt_data_end+0xfc0070d8>
 8007178:	000d883a 	mov	r6,zero
 800717c:	003fef06 	br	800713c <__alt_data_end+0xfc00713c>

08007180 <__d2b>:
 8007180:	defff704 	addi	sp,sp,-36
 8007184:	dc000215 	stw	r16,8(sp)
 8007188:	3021883a 	mov	r16,r6
 800718c:	dc400315 	stw	r17,12(sp)
 8007190:	8022907a 	slli	r17,r16,1
 8007194:	dd400715 	stw	r21,28(sp)
 8007198:	282b883a 	mov	r21,r5
 800719c:	01400044 	movi	r5,1
 80071a0:	dd000615 	stw	r20,24(sp)
 80071a4:	dcc00515 	stw	r19,20(sp)
 80071a8:	dc800415 	stw	r18,16(sp)
 80071ac:	dfc00815 	stw	ra,32(sp)
 80071b0:	3829883a 	mov	r20,r7
 80071b4:	dc800917 	ldw	r18,36(sp)
 80071b8:	8822d57a 	srli	r17,r17,21
 80071bc:	800654c0 	call	800654c <_Balloc>
 80071c0:	1027883a 	mov	r19,r2
 80071c4:	00800434 	movhi	r2,16
 80071c8:	10bfffc4 	addi	r2,r2,-1
 80071cc:	808c703a 	and	r6,r16,r2
 80071d0:	88000126 	beq	r17,zero,80071d8 <__d2b+0x58>
 80071d4:	31800434 	orhi	r6,r6,16
 80071d8:	d9800015 	stw	r6,0(sp)
 80071dc:	a8001f26 	beq	r21,zero,800725c <__d2b+0xdc>
 80071e0:	d9000104 	addi	r4,sp,4
 80071e4:	dd400115 	stw	r21,4(sp)
 80071e8:	800689c0 	call	800689c <__lo0bits>
 80071ec:	d8c00017 	ldw	r3,0(sp)
 80071f0:	1000291e 	bne	r2,zero,8007298 <__d2b+0x118>
 80071f4:	d9000117 	ldw	r4,4(sp)
 80071f8:	99000515 	stw	r4,20(r19)
 80071fc:	1820c03a 	cmpne	r16,r3,zero
 8007200:	84000044 	addi	r16,r16,1
 8007204:	98c00615 	stw	r3,24(r19)
 8007208:	9c000415 	stw	r16,16(r19)
 800720c:	88001b1e 	bne	r17,zero,800727c <__d2b+0xfc>
 8007210:	800690ba 	slli	r3,r16,2
 8007214:	10bef384 	addi	r2,r2,-1074
 8007218:	a0800015 	stw	r2,0(r20)
 800721c:	98c5883a 	add	r2,r19,r3
 8007220:	11000417 	ldw	r4,16(r2)
 8007224:	8020917a 	slli	r16,r16,5
 8007228:	80068340 	call	8006834 <__hi0bits>
 800722c:	8085c83a 	sub	r2,r16,r2
 8007230:	90800015 	stw	r2,0(r18)
 8007234:	9805883a 	mov	r2,r19
 8007238:	dfc00817 	ldw	ra,32(sp)
 800723c:	dd400717 	ldw	r21,28(sp)
 8007240:	dd000617 	ldw	r20,24(sp)
 8007244:	dcc00517 	ldw	r19,20(sp)
 8007248:	dc800417 	ldw	r18,16(sp)
 800724c:	dc400317 	ldw	r17,12(sp)
 8007250:	dc000217 	ldw	r16,8(sp)
 8007254:	dec00904 	addi	sp,sp,36
 8007258:	f800283a 	ret
 800725c:	d809883a 	mov	r4,sp
 8007260:	800689c0 	call	800689c <__lo0bits>
 8007264:	d8c00017 	ldw	r3,0(sp)
 8007268:	04000044 	movi	r16,1
 800726c:	9c000415 	stw	r16,16(r19)
 8007270:	98c00515 	stw	r3,20(r19)
 8007274:	10800804 	addi	r2,r2,32
 8007278:	883fe526 	beq	r17,zero,8007210 <__alt_data_end+0xfc007210>
 800727c:	8c7ef344 	addi	r17,r17,-1075
 8007280:	88a3883a 	add	r17,r17,r2
 8007284:	00c00d44 	movi	r3,53
 8007288:	a4400015 	stw	r17,0(r20)
 800728c:	1885c83a 	sub	r2,r3,r2
 8007290:	90800015 	stw	r2,0(r18)
 8007294:	003fe706 	br	8007234 <__alt_data_end+0xfc007234>
 8007298:	01000804 	movi	r4,32
 800729c:	2089c83a 	sub	r4,r4,r2
 80072a0:	1908983a 	sll	r4,r3,r4
 80072a4:	d9400117 	ldw	r5,4(sp)
 80072a8:	1886d83a 	srl	r3,r3,r2
 80072ac:	2148b03a 	or	r4,r4,r5
 80072b0:	99000515 	stw	r4,20(r19)
 80072b4:	d8c00015 	stw	r3,0(sp)
 80072b8:	003fd006 	br	80071fc <__alt_data_end+0xfc0071fc>

080072bc <__ratio>:
 80072bc:	defff904 	addi	sp,sp,-28
 80072c0:	dc400315 	stw	r17,12(sp)
 80072c4:	2823883a 	mov	r17,r5
 80072c8:	d9400104 	addi	r5,sp,4
 80072cc:	dfc00615 	stw	ra,24(sp)
 80072d0:	dcc00515 	stw	r19,20(sp)
 80072d4:	dc800415 	stw	r18,16(sp)
 80072d8:	2027883a 	mov	r19,r4
 80072dc:	dc000215 	stw	r16,8(sp)
 80072e0:	80070640 	call	8007064 <__b2d>
 80072e4:	8809883a 	mov	r4,r17
 80072e8:	d80b883a 	mov	r5,sp
 80072ec:	1025883a 	mov	r18,r2
 80072f0:	1821883a 	mov	r16,r3
 80072f4:	80070640 	call	8007064 <__b2d>
 80072f8:	8a400417 	ldw	r9,16(r17)
 80072fc:	9a000417 	ldw	r8,16(r19)
 8007300:	100d883a 	mov	r6,r2
 8007304:	d8800017 	ldw	r2,0(sp)
 8007308:	4251c83a 	sub	r8,r8,r9
 800730c:	4012917a 	slli	r9,r8,5
 8007310:	da000117 	ldw	r8,4(sp)
 8007314:	4091c83a 	sub	r8,r8,r2
 8007318:	4251883a 	add	r8,r8,r9
 800731c:	02000d0e 	bge	zero,r8,8007354 <__ratio+0x98>
 8007320:	4010953a 	slli	r8,r8,20
 8007324:	4421883a 	add	r16,r8,r16
 8007328:	9009883a 	mov	r4,r18
 800732c:	800b883a 	mov	r5,r16
 8007330:	180f883a 	mov	r7,r3
 8007334:	800b1cc0 	call	800b1cc <__divdf3>
 8007338:	dfc00617 	ldw	ra,24(sp)
 800733c:	dcc00517 	ldw	r19,20(sp)
 8007340:	dc800417 	ldw	r18,16(sp)
 8007344:	dc400317 	ldw	r17,12(sp)
 8007348:	dc000217 	ldw	r16,8(sp)
 800734c:	dec00704 	addi	sp,sp,28
 8007350:	f800283a 	ret
 8007354:	4010953a 	slli	r8,r8,20
 8007358:	1a07c83a 	sub	r3,r3,r8
 800735c:	003ff206 	br	8007328 <__alt_data_end+0xfc007328>

08007360 <_mprec_log10>:
 8007360:	defffe04 	addi	sp,sp,-8
 8007364:	dc000015 	stw	r16,0(sp)
 8007368:	dfc00115 	stw	ra,4(sp)
 800736c:	008005c4 	movi	r2,23
 8007370:	2021883a 	mov	r16,r4
 8007374:	11000d0e 	bge	r2,r4,80073ac <_mprec_log10+0x4c>
 8007378:	0005883a 	mov	r2,zero
 800737c:	00cffc34 	movhi	r3,16368
 8007380:	843fffc4 	addi	r16,r16,-1
 8007384:	1009883a 	mov	r4,r2
 8007388:	180b883a 	mov	r5,r3
 800738c:	000d883a 	mov	r6,zero
 8007390:	01d00934 	movhi	r7,16420
 8007394:	800bcdc0 	call	800bcdc <__muldf3>
 8007398:	803ff91e 	bne	r16,zero,8007380 <__alt_data_end+0xfc007380>
 800739c:	dfc00117 	ldw	ra,4(sp)
 80073a0:	dc000017 	ldw	r16,0(sp)
 80073a4:	dec00204 	addi	sp,sp,8
 80073a8:	f800283a 	ret
 80073ac:	202090fa 	slli	r16,r4,3
 80073b0:	00820074 	movhi	r2,2049
 80073b4:	10bf7c04 	addi	r2,r2,-528
 80073b8:	1421883a 	add	r16,r2,r16
 80073bc:	80800017 	ldw	r2,0(r16)
 80073c0:	80c00117 	ldw	r3,4(r16)
 80073c4:	dfc00117 	ldw	ra,4(sp)
 80073c8:	dc000017 	ldw	r16,0(sp)
 80073cc:	dec00204 	addi	sp,sp,8
 80073d0:	f800283a 	ret

080073d4 <__copybits>:
 80073d4:	297fffc4 	addi	r5,r5,-1
 80073d8:	280fd17a 	srai	r7,r5,5
 80073dc:	30c00417 	ldw	r3,16(r6)
 80073e0:	30800504 	addi	r2,r6,20
 80073e4:	39c00044 	addi	r7,r7,1
 80073e8:	18c7883a 	add	r3,r3,r3
 80073ec:	39cf883a 	add	r7,r7,r7
 80073f0:	18c7883a 	add	r3,r3,r3
 80073f4:	39cf883a 	add	r7,r7,r7
 80073f8:	10c7883a 	add	r3,r2,r3
 80073fc:	21cf883a 	add	r7,r4,r7
 8007400:	10c00d2e 	bgeu	r2,r3,8007438 <__copybits+0x64>
 8007404:	200b883a 	mov	r5,r4
 8007408:	12000017 	ldw	r8,0(r2)
 800740c:	29400104 	addi	r5,r5,4
 8007410:	10800104 	addi	r2,r2,4
 8007414:	2a3fff15 	stw	r8,-4(r5)
 8007418:	10fffb36 	bltu	r2,r3,8007408 <__alt_data_end+0xfc007408>
 800741c:	1985c83a 	sub	r2,r3,r6
 8007420:	10bffac4 	addi	r2,r2,-21
 8007424:	1004d0ba 	srli	r2,r2,2
 8007428:	10800044 	addi	r2,r2,1
 800742c:	1085883a 	add	r2,r2,r2
 8007430:	1085883a 	add	r2,r2,r2
 8007434:	2089883a 	add	r4,r4,r2
 8007438:	21c0032e 	bgeu	r4,r7,8007448 <__copybits+0x74>
 800743c:	20000015 	stw	zero,0(r4)
 8007440:	21000104 	addi	r4,r4,4
 8007444:	21fffd36 	bltu	r4,r7,800743c <__alt_data_end+0xfc00743c>
 8007448:	f800283a 	ret

0800744c <__any_on>:
 800744c:	20c00417 	ldw	r3,16(r4)
 8007450:	2805d17a 	srai	r2,r5,5
 8007454:	21000504 	addi	r4,r4,20
 8007458:	18800d0e 	bge	r3,r2,8007490 <__any_on+0x44>
 800745c:	18c7883a 	add	r3,r3,r3
 8007460:	18c7883a 	add	r3,r3,r3
 8007464:	20c7883a 	add	r3,r4,r3
 8007468:	20c0192e 	bgeu	r4,r3,80074d0 <__any_on+0x84>
 800746c:	18bfff17 	ldw	r2,-4(r3)
 8007470:	18ffff04 	addi	r3,r3,-4
 8007474:	1000041e 	bne	r2,zero,8007488 <__any_on+0x3c>
 8007478:	20c0142e 	bgeu	r4,r3,80074cc <__any_on+0x80>
 800747c:	18ffff04 	addi	r3,r3,-4
 8007480:	19400017 	ldw	r5,0(r3)
 8007484:	283ffc26 	beq	r5,zero,8007478 <__alt_data_end+0xfc007478>
 8007488:	00800044 	movi	r2,1
 800748c:	f800283a 	ret
 8007490:	10c00a0e 	bge	r2,r3,80074bc <__any_on+0x70>
 8007494:	1085883a 	add	r2,r2,r2
 8007498:	1085883a 	add	r2,r2,r2
 800749c:	294007cc 	andi	r5,r5,31
 80074a0:	2087883a 	add	r3,r4,r2
 80074a4:	283ff026 	beq	r5,zero,8007468 <__alt_data_end+0xfc007468>
 80074a8:	19800017 	ldw	r6,0(r3)
 80074ac:	3144d83a 	srl	r2,r6,r5
 80074b0:	114a983a 	sll	r5,r2,r5
 80074b4:	29bff41e 	bne	r5,r6,8007488 <__alt_data_end+0xfc007488>
 80074b8:	003feb06 	br	8007468 <__alt_data_end+0xfc007468>
 80074bc:	1085883a 	add	r2,r2,r2
 80074c0:	1085883a 	add	r2,r2,r2
 80074c4:	2087883a 	add	r3,r4,r2
 80074c8:	003fe706 	br	8007468 <__alt_data_end+0xfc007468>
 80074cc:	f800283a 	ret
 80074d0:	0005883a 	mov	r2,zero
 80074d4:	f800283a 	ret

080074d8 <_putc_r>:
 80074d8:	defffc04 	addi	sp,sp,-16
 80074dc:	dc000215 	stw	r16,8(sp)
 80074e0:	dfc00315 	stw	ra,12(sp)
 80074e4:	2021883a 	mov	r16,r4
 80074e8:	20000226 	beq	r4,zero,80074f4 <_putc_r+0x1c>
 80074ec:	20800e17 	ldw	r2,56(r4)
 80074f0:	10001b26 	beq	r2,zero,8007560 <_putc_r+0x88>
 80074f4:	30800217 	ldw	r2,8(r6)
 80074f8:	10bfffc4 	addi	r2,r2,-1
 80074fc:	30800215 	stw	r2,8(r6)
 8007500:	10000a16 	blt	r2,zero,800752c <_putc_r+0x54>
 8007504:	30800017 	ldw	r2,0(r6)
 8007508:	11400005 	stb	r5,0(r2)
 800750c:	30800017 	ldw	r2,0(r6)
 8007510:	10c00044 	addi	r3,r2,1
 8007514:	30c00015 	stw	r3,0(r6)
 8007518:	10800003 	ldbu	r2,0(r2)
 800751c:	dfc00317 	ldw	ra,12(sp)
 8007520:	dc000217 	ldw	r16,8(sp)
 8007524:	dec00404 	addi	sp,sp,16
 8007528:	f800283a 	ret
 800752c:	30c00617 	ldw	r3,24(r6)
 8007530:	10c00616 	blt	r2,r3,800754c <_putc_r+0x74>
 8007534:	30800017 	ldw	r2,0(r6)
 8007538:	00c00284 	movi	r3,10
 800753c:	11400005 	stb	r5,0(r2)
 8007540:	30800017 	ldw	r2,0(r6)
 8007544:	11400003 	ldbu	r5,0(r2)
 8007548:	28fff11e 	bne	r5,r3,8007510 <__alt_data_end+0xfc007510>
 800754c:	8009883a 	mov	r4,r16
 8007550:	dfc00317 	ldw	ra,12(sp)
 8007554:	dc000217 	ldw	r16,8(sp)
 8007558:	dec00404 	addi	sp,sp,16
 800755c:	800931c1 	jmpi	800931c <__swbuf_r>
 8007560:	d9400015 	stw	r5,0(sp)
 8007564:	d9800115 	stw	r6,4(sp)
 8007568:	8004bf40 	call	8004bf4 <__sinit>
 800756c:	d9800117 	ldw	r6,4(sp)
 8007570:	d9400017 	ldw	r5,0(sp)
 8007574:	003fdf06 	br	80074f4 <__alt_data_end+0xfc0074f4>

08007578 <putc>:
 8007578:	defffc04 	addi	sp,sp,-16
 800757c:	dc400115 	stw	r17,4(sp)
 8007580:	04420074 	movhi	r17,2049
 8007584:	8c46c004 	addi	r17,r17,6912
 8007588:	dc800215 	stw	r18,8(sp)
 800758c:	2025883a 	mov	r18,r4
 8007590:	89000017 	ldw	r4,0(r17)
 8007594:	dc000015 	stw	r16,0(sp)
 8007598:	dfc00315 	stw	ra,12(sp)
 800759c:	2821883a 	mov	r16,r5
 80075a0:	20000226 	beq	r4,zero,80075ac <putc+0x34>
 80075a4:	20c00e17 	ldw	r3,56(r4)
 80075a8:	18001a26 	beq	r3,zero,8007614 <putc+0x9c>
 80075ac:	80800217 	ldw	r2,8(r16)
 80075b0:	10bfffc4 	addi	r2,r2,-1
 80075b4:	80800215 	stw	r2,8(r16)
 80075b8:	10000c16 	blt	r2,zero,80075ec <putc+0x74>
 80075bc:	80800017 	ldw	r2,0(r16)
 80075c0:	14800005 	stb	r18,0(r2)
 80075c4:	80800017 	ldw	r2,0(r16)
 80075c8:	10c00044 	addi	r3,r2,1
 80075cc:	80c00015 	stw	r3,0(r16)
 80075d0:	10800003 	ldbu	r2,0(r2)
 80075d4:	dfc00317 	ldw	ra,12(sp)
 80075d8:	dc800217 	ldw	r18,8(sp)
 80075dc:	dc400117 	ldw	r17,4(sp)
 80075e0:	dc000017 	ldw	r16,0(sp)
 80075e4:	dec00404 	addi	sp,sp,16
 80075e8:	f800283a 	ret
 80075ec:	80c00617 	ldw	r3,24(r16)
 80075f0:	10c00a16 	blt	r2,r3,800761c <putc+0xa4>
 80075f4:	80800017 	ldw	r2,0(r16)
 80075f8:	00c00284 	movi	r3,10
 80075fc:	14800005 	stb	r18,0(r2)
 8007600:	80800017 	ldw	r2,0(r16)
 8007604:	11400003 	ldbu	r5,0(r2)
 8007608:	28ffef1e 	bne	r5,r3,80075c8 <__alt_data_end+0xfc0075c8>
 800760c:	89000017 	ldw	r4,0(r17)
 8007610:	00000406 	br	8007624 <putc+0xac>
 8007614:	8004bf40 	call	8004bf4 <__sinit>
 8007618:	003fe406 	br	80075ac <__alt_data_end+0xfc0075ac>
 800761c:	89000017 	ldw	r4,0(r17)
 8007620:	900b883a 	mov	r5,r18
 8007624:	800d883a 	mov	r6,r16
 8007628:	dfc00317 	ldw	ra,12(sp)
 800762c:	dc800217 	ldw	r18,8(sp)
 8007630:	dc400117 	ldw	r17,4(sp)
 8007634:	dc000017 	ldw	r16,0(sp)
 8007638:	dec00404 	addi	sp,sp,16
 800763c:	800931c1 	jmpi	800931c <__swbuf_r>

08007640 <_realloc_r>:
 8007640:	defff604 	addi	sp,sp,-40
 8007644:	dcc00315 	stw	r19,12(sp)
 8007648:	dc400115 	stw	r17,4(sp)
 800764c:	dfc00915 	stw	ra,36(sp)
 8007650:	df000815 	stw	fp,32(sp)
 8007654:	ddc00715 	stw	r23,28(sp)
 8007658:	dd800615 	stw	r22,24(sp)
 800765c:	dd400515 	stw	r21,20(sp)
 8007660:	dd000415 	stw	r20,16(sp)
 8007664:	dc800215 	stw	r18,8(sp)
 8007668:	dc000015 	stw	r16,0(sp)
 800766c:	2827883a 	mov	r19,r5
 8007670:	3023883a 	mov	r17,r6
 8007674:	2800bf26 	beq	r5,zero,8007974 <_realloc_r+0x334>
 8007678:	2025883a 	mov	r18,r4
 800767c:	800d4f00 	call	800d4f0 <__malloc_lock>
 8007680:	98ffff17 	ldw	r3,-4(r19)
 8007684:	01bfff04 	movi	r6,-4
 8007688:	890002c4 	addi	r4,r17,11
 800768c:	01c00584 	movi	r7,22
 8007690:	9d7ffe04 	addi	r21,r19,-8
 8007694:	19a0703a 	and	r16,r3,r6
 8007698:	39003f2e 	bgeu	r7,r4,8007798 <_realloc_r+0x158>
 800769c:	053ffe04 	movi	r20,-8
 80076a0:	2528703a 	and	r20,r4,r20
 80076a4:	a00f883a 	mov	r7,r20
 80076a8:	a0008216 	blt	r20,zero,80078b4 <_realloc_r+0x274>
 80076ac:	a4408136 	bltu	r20,r17,80078b4 <_realloc_r+0x274>
 80076b0:	81c03c0e 	bge	r16,r7,80077a4 <_realloc_r+0x164>
 80076b4:	07020074 	movhi	fp,2049
 80076b8:	e7013004 	addi	fp,fp,1216
 80076bc:	e1000217 	ldw	r4,8(fp)
 80076c0:	ac05883a 	add	r2,r21,r16
 80076c4:	2080bf26 	beq	r4,r2,80079c4 <_realloc_r+0x384>
 80076c8:	11000117 	ldw	r4,4(r2)
 80076cc:	023fff84 	movi	r8,-2
 80076d0:	2210703a 	and	r8,r4,r8
 80076d4:	1211883a 	add	r8,r2,r8
 80076d8:	41400117 	ldw	r5,4(r8)
 80076dc:	2940004c 	andi	r5,r5,1
 80076e0:	28004a1e 	bne	r5,zero,800780c <_realloc_r+0x1cc>
 80076e4:	017fff04 	movi	r5,-4
 80076e8:	2148703a 	and	r4,r4,r5
 80076ec:	2409883a 	add	r4,r4,r16
 80076f0:	21c0ad0e 	bge	r4,r7,80079a8 <_realloc_r+0x368>
 80076f4:	18c0004c 	andi	r3,r3,1
 80076f8:	18007f1e 	bne	r3,zero,80078f8 <_realloc_r+0x2b8>
 80076fc:	9dfffe17 	ldw	r23,-8(r19)
 8007700:	adefc83a 	sub	r23,r21,r23
 8007704:	bd800117 	ldw	r22,4(r23)
 8007708:	b14a703a 	and	r5,r22,r5
 800770c:	216d883a 	add	r22,r4,r5
 8007710:	b1c04516 	blt	r22,r7,8007828 <_realloc_r+0x1e8>
 8007714:	10c00317 	ldw	r3,12(r2)
 8007718:	10800217 	ldw	r2,8(r2)
 800771c:	81bfff04 	addi	r6,r16,-4
 8007720:	bc400204 	addi	r17,r23,8
 8007724:	10c00315 	stw	r3,12(r2)
 8007728:	18800215 	stw	r2,8(r3)
 800772c:	b9400217 	ldw	r5,8(r23)
 8007730:	b8c00317 	ldw	r3,12(r23)
 8007734:	00800904 	movi	r2,36
 8007738:	28c00315 	stw	r3,12(r5)
 800773c:	19400215 	stw	r5,8(r3)
 8007740:	1180ef36 	bltu	r2,r6,8007b00 <_realloc_r+0x4c0>
 8007744:	008004c4 	movi	r2,19
 8007748:	1180da2e 	bgeu	r2,r6,8007ab4 <_realloc_r+0x474>
 800774c:	98800017 	ldw	r2,0(r19)
 8007750:	b8800215 	stw	r2,8(r23)
 8007754:	98800117 	ldw	r2,4(r19)
 8007758:	b8800315 	stw	r2,12(r23)
 800775c:	008006c4 	movi	r2,27
 8007760:	1180fc2e 	bgeu	r2,r6,8007b54 <_realloc_r+0x514>
 8007764:	98800217 	ldw	r2,8(r19)
 8007768:	b8800415 	stw	r2,16(r23)
 800776c:	98800317 	ldw	r2,12(r19)
 8007770:	b8800515 	stw	r2,20(r23)
 8007774:	00800904 	movi	r2,36
 8007778:	3080421e 	bne	r6,r2,8007884 <_realloc_r+0x244>
 800777c:	98800417 	ldw	r2,16(r19)
 8007780:	9cc00604 	addi	r19,r19,24
 8007784:	b8c00804 	addi	r3,r23,32
 8007788:	b8800615 	stw	r2,24(r23)
 800778c:	98bfff17 	ldw	r2,-4(r19)
 8007790:	b8800715 	stw	r2,28(r23)
 8007794:	00003d06 	br	800788c <_realloc_r+0x24c>
 8007798:	01c00404 	movi	r7,16
 800779c:	3829883a 	mov	r20,r7
 80077a0:	003fc206 	br	80076ac <__alt_data_end+0xfc0076ac>
 80077a4:	9823883a 	mov	r17,r19
 80077a8:	850fc83a 	sub	r7,r16,r20
 80077ac:	008003c4 	movi	r2,15
 80077b0:	18c0004c 	andi	r3,r3,1
 80077b4:	11c04336 	bltu	r2,r7,80078c4 <_realloc_r+0x284>
 80077b8:	1c06b03a 	or	r3,r3,r16
 80077bc:	a8c00115 	stw	r3,4(r21)
 80077c0:	ac21883a 	add	r16,r21,r16
 80077c4:	80c00117 	ldw	r3,4(r16)
 80077c8:	18c00054 	ori	r3,r3,1
 80077cc:	80c00115 	stw	r3,4(r16)
 80077d0:	9009883a 	mov	r4,r18
 80077d4:	800d5100 	call	800d510 <__malloc_unlock>
 80077d8:	8805883a 	mov	r2,r17
 80077dc:	dfc00917 	ldw	ra,36(sp)
 80077e0:	df000817 	ldw	fp,32(sp)
 80077e4:	ddc00717 	ldw	r23,28(sp)
 80077e8:	dd800617 	ldw	r22,24(sp)
 80077ec:	dd400517 	ldw	r21,20(sp)
 80077f0:	dd000417 	ldw	r20,16(sp)
 80077f4:	dcc00317 	ldw	r19,12(sp)
 80077f8:	dc800217 	ldw	r18,8(sp)
 80077fc:	dc400117 	ldw	r17,4(sp)
 8007800:	dc000017 	ldw	r16,0(sp)
 8007804:	dec00a04 	addi	sp,sp,40
 8007808:	f800283a 	ret
 800780c:	18c0004c 	andi	r3,r3,1
 8007810:	1800391e 	bne	r3,zero,80078f8 <_realloc_r+0x2b8>
 8007814:	9dfffe17 	ldw	r23,-8(r19)
 8007818:	00bfff04 	movi	r2,-4
 800781c:	adefc83a 	sub	r23,r21,r23
 8007820:	b9400117 	ldw	r5,4(r23)
 8007824:	288a703a 	and	r5,r5,r2
 8007828:	2c2d883a 	add	r22,r5,r16
 800782c:	b1c03216 	blt	r22,r7,80078f8 <_realloc_r+0x2b8>
 8007830:	b8800317 	ldw	r2,12(r23)
 8007834:	b8c00217 	ldw	r3,8(r23)
 8007838:	81bfff04 	addi	r6,r16,-4
 800783c:	01000904 	movi	r4,36
 8007840:	18800315 	stw	r2,12(r3)
 8007844:	10c00215 	stw	r3,8(r2)
 8007848:	bc400204 	addi	r17,r23,8
 800784c:	2180ac36 	bltu	r4,r6,8007b00 <_realloc_r+0x4c0>
 8007850:	008004c4 	movi	r2,19
 8007854:	1180972e 	bgeu	r2,r6,8007ab4 <_realloc_r+0x474>
 8007858:	98800017 	ldw	r2,0(r19)
 800785c:	b8800215 	stw	r2,8(r23)
 8007860:	98800117 	ldw	r2,4(r19)
 8007864:	b8800315 	stw	r2,12(r23)
 8007868:	008006c4 	movi	r2,27
 800786c:	1180b92e 	bgeu	r2,r6,8007b54 <_realloc_r+0x514>
 8007870:	98800217 	ldw	r2,8(r19)
 8007874:	b8800415 	stw	r2,16(r23)
 8007878:	98800317 	ldw	r2,12(r19)
 800787c:	b8800515 	stw	r2,20(r23)
 8007880:	313fbe26 	beq	r6,r4,800777c <__alt_data_end+0xfc00777c>
 8007884:	b8c00604 	addi	r3,r23,24
 8007888:	9cc00404 	addi	r19,r19,16
 800788c:	98800017 	ldw	r2,0(r19)
 8007890:	b021883a 	mov	r16,r22
 8007894:	b82b883a 	mov	r21,r23
 8007898:	18800015 	stw	r2,0(r3)
 800789c:	98800117 	ldw	r2,4(r19)
 80078a0:	18800115 	stw	r2,4(r3)
 80078a4:	98800217 	ldw	r2,8(r19)
 80078a8:	18800215 	stw	r2,8(r3)
 80078ac:	b8c00117 	ldw	r3,4(r23)
 80078b0:	003fbd06 	br	80077a8 <__alt_data_end+0xfc0077a8>
 80078b4:	00800304 	movi	r2,12
 80078b8:	90800015 	stw	r2,0(r18)
 80078bc:	0005883a 	mov	r2,zero
 80078c0:	003fc606 	br	80077dc <__alt_data_end+0xfc0077dc>
 80078c4:	1d06b03a 	or	r3,r3,r20
 80078c8:	ad0b883a 	add	r5,r21,r20
 80078cc:	a8c00115 	stw	r3,4(r21)
 80078d0:	38800054 	ori	r2,r7,1
 80078d4:	28800115 	stw	r2,4(r5)
 80078d8:	29cf883a 	add	r7,r5,r7
 80078dc:	38800117 	ldw	r2,4(r7)
 80078e0:	9009883a 	mov	r4,r18
 80078e4:	29400204 	addi	r5,r5,8
 80078e8:	10800054 	ori	r2,r2,1
 80078ec:	38800115 	stw	r2,4(r7)
 80078f0:	8004d680 	call	8004d68 <_free_r>
 80078f4:	003fb606 	br	80077d0 <__alt_data_end+0xfc0077d0>
 80078f8:	880b883a 	mov	r5,r17
 80078fc:	9009883a 	mov	r4,r18
 8007900:	80059040 	call	8005904 <_malloc_r>
 8007904:	1023883a 	mov	r17,r2
 8007908:	1000aa26 	beq	r2,zero,8007bb4 <_realloc_r+0x574>
 800790c:	98ffff17 	ldw	r3,-4(r19)
 8007910:	113ffe04 	addi	r4,r2,-8
 8007914:	00bfff84 	movi	r2,-2
 8007918:	1884703a 	and	r2,r3,r2
 800791c:	a885883a 	add	r2,r21,r2
 8007920:	20808626 	beq	r4,r2,8007b3c <_realloc_r+0x4fc>
 8007924:	81bfff04 	addi	r6,r16,-4
 8007928:	00800904 	movi	r2,36
 800792c:	11807036 	bltu	r2,r6,8007af0 <_realloc_r+0x4b0>
 8007930:	00c004c4 	movi	r3,19
 8007934:	19805636 	bltu	r3,r6,8007a90 <_realloc_r+0x450>
 8007938:	8805883a 	mov	r2,r17
 800793c:	9807883a 	mov	r3,r19
 8007940:	19000017 	ldw	r4,0(r3)
 8007944:	11000015 	stw	r4,0(r2)
 8007948:	19000117 	ldw	r4,4(r3)
 800794c:	11000115 	stw	r4,4(r2)
 8007950:	18c00217 	ldw	r3,8(r3)
 8007954:	10c00215 	stw	r3,8(r2)
 8007958:	980b883a 	mov	r5,r19
 800795c:	9009883a 	mov	r4,r18
 8007960:	8004d680 	call	8004d68 <_free_r>
 8007964:	9009883a 	mov	r4,r18
 8007968:	800d5100 	call	800d510 <__malloc_unlock>
 800796c:	8805883a 	mov	r2,r17
 8007970:	003f9a06 	br	80077dc <__alt_data_end+0xfc0077dc>
 8007974:	300b883a 	mov	r5,r6
 8007978:	dfc00917 	ldw	ra,36(sp)
 800797c:	df000817 	ldw	fp,32(sp)
 8007980:	ddc00717 	ldw	r23,28(sp)
 8007984:	dd800617 	ldw	r22,24(sp)
 8007988:	dd400517 	ldw	r21,20(sp)
 800798c:	dd000417 	ldw	r20,16(sp)
 8007990:	dcc00317 	ldw	r19,12(sp)
 8007994:	dc800217 	ldw	r18,8(sp)
 8007998:	dc400117 	ldw	r17,4(sp)
 800799c:	dc000017 	ldw	r16,0(sp)
 80079a0:	dec00a04 	addi	sp,sp,40
 80079a4:	80059041 	jmpi	8005904 <_malloc_r>
 80079a8:	11400317 	ldw	r5,12(r2)
 80079ac:	10800217 	ldw	r2,8(r2)
 80079b0:	9823883a 	mov	r17,r19
 80079b4:	2021883a 	mov	r16,r4
 80079b8:	11400315 	stw	r5,12(r2)
 80079bc:	28800215 	stw	r2,8(r5)
 80079c0:	003f7906 	br	80077a8 <__alt_data_end+0xfc0077a8>
 80079c4:	21000117 	ldw	r4,4(r4)
 80079c8:	00bfff04 	movi	r2,-4
 80079cc:	a1800404 	addi	r6,r20,16
 80079d0:	2088703a 	and	r4,r4,r2
 80079d4:	2409883a 	add	r4,r4,r16
 80079d8:	2180380e 	bge	r4,r6,8007abc <_realloc_r+0x47c>
 80079dc:	18c0004c 	andi	r3,r3,1
 80079e0:	183fc51e 	bne	r3,zero,80078f8 <__alt_data_end+0xfc0078f8>
 80079e4:	9dfffe17 	ldw	r23,-8(r19)
 80079e8:	adefc83a 	sub	r23,r21,r23
 80079ec:	b9400117 	ldw	r5,4(r23)
 80079f0:	288a703a 	and	r5,r5,r2
 80079f4:	216d883a 	add	r22,r4,r5
 80079f8:	b1bf8b16 	blt	r22,r6,8007828 <__alt_data_end+0xfc007828>
 80079fc:	b8800317 	ldw	r2,12(r23)
 8007a00:	b8c00217 	ldw	r3,8(r23)
 8007a04:	81bfff04 	addi	r6,r16,-4
 8007a08:	01000904 	movi	r4,36
 8007a0c:	18800315 	stw	r2,12(r3)
 8007a10:	10c00215 	stw	r3,8(r2)
 8007a14:	bc400204 	addi	r17,r23,8
 8007a18:	21805a36 	bltu	r4,r6,8007b84 <_realloc_r+0x544>
 8007a1c:	008004c4 	movi	r2,19
 8007a20:	1180562e 	bgeu	r2,r6,8007b7c <_realloc_r+0x53c>
 8007a24:	98800017 	ldw	r2,0(r19)
 8007a28:	b8800215 	stw	r2,8(r23)
 8007a2c:	98800117 	ldw	r2,4(r19)
 8007a30:	b8800315 	stw	r2,12(r23)
 8007a34:	008006c4 	movi	r2,27
 8007a38:	11805636 	bltu	r2,r6,8007b94 <_realloc_r+0x554>
 8007a3c:	b8800404 	addi	r2,r23,16
 8007a40:	9cc00204 	addi	r19,r19,8
 8007a44:	98c00017 	ldw	r3,0(r19)
 8007a48:	10c00015 	stw	r3,0(r2)
 8007a4c:	98c00117 	ldw	r3,4(r19)
 8007a50:	10c00115 	stw	r3,4(r2)
 8007a54:	98c00217 	ldw	r3,8(r19)
 8007a58:	10c00215 	stw	r3,8(r2)
 8007a5c:	bd07883a 	add	r3,r23,r20
 8007a60:	b505c83a 	sub	r2,r22,r20
 8007a64:	e0c00215 	stw	r3,8(fp)
 8007a68:	10800054 	ori	r2,r2,1
 8007a6c:	18800115 	stw	r2,4(r3)
 8007a70:	b8800117 	ldw	r2,4(r23)
 8007a74:	9009883a 	mov	r4,r18
 8007a78:	1080004c 	andi	r2,r2,1
 8007a7c:	a0a8b03a 	or	r20,r20,r2
 8007a80:	bd000115 	stw	r20,4(r23)
 8007a84:	800d5100 	call	800d510 <__malloc_unlock>
 8007a88:	8805883a 	mov	r2,r17
 8007a8c:	003f5306 	br	80077dc <__alt_data_end+0xfc0077dc>
 8007a90:	98c00017 	ldw	r3,0(r19)
 8007a94:	88c00015 	stw	r3,0(r17)
 8007a98:	98c00117 	ldw	r3,4(r19)
 8007a9c:	88c00115 	stw	r3,4(r17)
 8007aa0:	00c006c4 	movi	r3,27
 8007aa4:	19801d36 	bltu	r3,r6,8007b1c <_realloc_r+0x4dc>
 8007aa8:	88800204 	addi	r2,r17,8
 8007aac:	98c00204 	addi	r3,r19,8
 8007ab0:	003fa306 	br	8007940 <__alt_data_end+0xfc007940>
 8007ab4:	8807883a 	mov	r3,r17
 8007ab8:	003f7406 	br	800788c <__alt_data_end+0xfc00788c>
 8007abc:	ad2b883a 	add	r21,r21,r20
 8007ac0:	2505c83a 	sub	r2,r4,r20
 8007ac4:	e5400215 	stw	r21,8(fp)
 8007ac8:	10800054 	ori	r2,r2,1
 8007acc:	a8800115 	stw	r2,4(r21)
 8007ad0:	98bfff17 	ldw	r2,-4(r19)
 8007ad4:	9009883a 	mov	r4,r18
 8007ad8:	1080004c 	andi	r2,r2,1
 8007adc:	a0a8b03a 	or	r20,r20,r2
 8007ae0:	9d3fff15 	stw	r20,-4(r19)
 8007ae4:	800d5100 	call	800d510 <__malloc_unlock>
 8007ae8:	9805883a 	mov	r2,r19
 8007aec:	003f3b06 	br	80077dc <__alt_data_end+0xfc0077dc>
 8007af0:	8809883a 	mov	r4,r17
 8007af4:	980b883a 	mov	r5,r19
 8007af8:	80062cc0 	call	80062cc <memmove>
 8007afc:	003f9606 	br	8007958 <__alt_data_end+0xfc007958>
 8007b00:	8809883a 	mov	r4,r17
 8007b04:	980b883a 	mov	r5,r19
 8007b08:	80062cc0 	call	80062cc <memmove>
 8007b0c:	b8c00117 	ldw	r3,4(r23)
 8007b10:	b021883a 	mov	r16,r22
 8007b14:	b82b883a 	mov	r21,r23
 8007b18:	003f2306 	br	80077a8 <__alt_data_end+0xfc0077a8>
 8007b1c:	98c00217 	ldw	r3,8(r19)
 8007b20:	88c00215 	stw	r3,8(r17)
 8007b24:	98c00317 	ldw	r3,12(r19)
 8007b28:	88c00315 	stw	r3,12(r17)
 8007b2c:	30800c26 	beq	r6,r2,8007b60 <_realloc_r+0x520>
 8007b30:	88800404 	addi	r2,r17,16
 8007b34:	98c00404 	addi	r3,r19,16
 8007b38:	003f8106 	br	8007940 <__alt_data_end+0xfc007940>
 8007b3c:	893fff17 	ldw	r4,-4(r17)
 8007b40:	00bfff04 	movi	r2,-4
 8007b44:	9823883a 	mov	r17,r19
 8007b48:	2084703a 	and	r2,r4,r2
 8007b4c:	80a1883a 	add	r16,r16,r2
 8007b50:	003f1506 	br	80077a8 <__alt_data_end+0xfc0077a8>
 8007b54:	b8c00404 	addi	r3,r23,16
 8007b58:	9cc00204 	addi	r19,r19,8
 8007b5c:	003f4b06 	br	800788c <__alt_data_end+0xfc00788c>
 8007b60:	99000417 	ldw	r4,16(r19)
 8007b64:	88800604 	addi	r2,r17,24
 8007b68:	98c00604 	addi	r3,r19,24
 8007b6c:	89000415 	stw	r4,16(r17)
 8007b70:	99000517 	ldw	r4,20(r19)
 8007b74:	89000515 	stw	r4,20(r17)
 8007b78:	003f7106 	br	8007940 <__alt_data_end+0xfc007940>
 8007b7c:	8805883a 	mov	r2,r17
 8007b80:	003fb006 	br	8007a44 <__alt_data_end+0xfc007a44>
 8007b84:	8809883a 	mov	r4,r17
 8007b88:	980b883a 	mov	r5,r19
 8007b8c:	80062cc0 	call	80062cc <memmove>
 8007b90:	003fb206 	br	8007a5c <__alt_data_end+0xfc007a5c>
 8007b94:	98800217 	ldw	r2,8(r19)
 8007b98:	b8800415 	stw	r2,16(r23)
 8007b9c:	98800317 	ldw	r2,12(r19)
 8007ba0:	b8800515 	stw	r2,20(r23)
 8007ba4:	31000726 	beq	r6,r4,8007bc4 <_realloc_r+0x584>
 8007ba8:	b8800604 	addi	r2,r23,24
 8007bac:	9cc00404 	addi	r19,r19,16
 8007bb0:	003fa406 	br	8007a44 <__alt_data_end+0xfc007a44>
 8007bb4:	9009883a 	mov	r4,r18
 8007bb8:	800d5100 	call	800d510 <__malloc_unlock>
 8007bbc:	0005883a 	mov	r2,zero
 8007bc0:	003f0606 	br	80077dc <__alt_data_end+0xfc0077dc>
 8007bc4:	98c00417 	ldw	r3,16(r19)
 8007bc8:	9cc00604 	addi	r19,r19,24
 8007bcc:	b8800804 	addi	r2,r23,32
 8007bd0:	b8c00615 	stw	r3,24(r23)
 8007bd4:	98ffff17 	ldw	r3,-4(r19)
 8007bd8:	b8c00715 	stw	r3,28(r23)
 8007bdc:	003f9906 	br	8007a44 <__alt_data_end+0xfc007a44>

08007be0 <__fpclassifyd>:
 8007be0:	00a00034 	movhi	r2,32768
 8007be4:	10bfffc4 	addi	r2,r2,-1
 8007be8:	2884703a 	and	r2,r5,r2
 8007bec:	10000726 	beq	r2,zero,8007c0c <__fpclassifyd+0x2c>
 8007bf0:	00fffc34 	movhi	r3,65520
 8007bf4:	019ff834 	movhi	r6,32736
 8007bf8:	28c7883a 	add	r3,r5,r3
 8007bfc:	31bfffc4 	addi	r6,r6,-1
 8007c00:	30c00536 	bltu	r6,r3,8007c18 <__fpclassifyd+0x38>
 8007c04:	00800104 	movi	r2,4
 8007c08:	f800283a 	ret
 8007c0c:	2000021e 	bne	r4,zero,8007c18 <__fpclassifyd+0x38>
 8007c10:	00800084 	movi	r2,2
 8007c14:	f800283a 	ret
 8007c18:	00dffc34 	movhi	r3,32752
 8007c1c:	019ff834 	movhi	r6,32736
 8007c20:	28cb883a 	add	r5,r5,r3
 8007c24:	31bfffc4 	addi	r6,r6,-1
 8007c28:	317ff62e 	bgeu	r6,r5,8007c04 <__alt_data_end+0xfc007c04>
 8007c2c:	01400434 	movhi	r5,16
 8007c30:	297fffc4 	addi	r5,r5,-1
 8007c34:	28800236 	bltu	r5,r2,8007c40 <__fpclassifyd+0x60>
 8007c38:	008000c4 	movi	r2,3
 8007c3c:	f800283a 	ret
 8007c40:	10c00226 	beq	r2,r3,8007c4c <__fpclassifyd+0x6c>
 8007c44:	0005883a 	mov	r2,zero
 8007c48:	f800283a 	ret
 8007c4c:	2005003a 	cmpeq	r2,r4,zero
 8007c50:	f800283a 	ret

08007c54 <_sbrk_r>:
 8007c54:	defffd04 	addi	sp,sp,-12
 8007c58:	dc000015 	stw	r16,0(sp)
 8007c5c:	04020074 	movhi	r16,2049
 8007c60:	dc400115 	stw	r17,4(sp)
 8007c64:	840d9b04 	addi	r16,r16,13932
 8007c68:	2023883a 	mov	r17,r4
 8007c6c:	2809883a 	mov	r4,r5
 8007c70:	dfc00215 	stw	ra,8(sp)
 8007c74:	80000015 	stw	zero,0(r16)
 8007c78:	800d6dc0 	call	800d6dc <sbrk>
 8007c7c:	00ffffc4 	movi	r3,-1
 8007c80:	10c00526 	beq	r2,r3,8007c98 <_sbrk_r+0x44>
 8007c84:	dfc00217 	ldw	ra,8(sp)
 8007c88:	dc400117 	ldw	r17,4(sp)
 8007c8c:	dc000017 	ldw	r16,0(sp)
 8007c90:	dec00304 	addi	sp,sp,12
 8007c94:	f800283a 	ret
 8007c98:	80c00017 	ldw	r3,0(r16)
 8007c9c:	183ff926 	beq	r3,zero,8007c84 <__alt_data_end+0xfc007c84>
 8007ca0:	88c00015 	stw	r3,0(r17)
 8007ca4:	003ff706 	br	8007c84 <__alt_data_end+0xfc007c84>

08007ca8 <__sread>:
 8007ca8:	defffe04 	addi	sp,sp,-8
 8007cac:	dc000015 	stw	r16,0(sp)
 8007cb0:	2821883a 	mov	r16,r5
 8007cb4:	2940038f 	ldh	r5,14(r5)
 8007cb8:	dfc00115 	stw	ra,4(sp)
 8007cbc:	80099f80 	call	80099f8 <_read_r>
 8007cc0:	10000716 	blt	r2,zero,8007ce0 <__sread+0x38>
 8007cc4:	80c01417 	ldw	r3,80(r16)
 8007cc8:	1887883a 	add	r3,r3,r2
 8007ccc:	80c01415 	stw	r3,80(r16)
 8007cd0:	dfc00117 	ldw	ra,4(sp)
 8007cd4:	dc000017 	ldw	r16,0(sp)
 8007cd8:	dec00204 	addi	sp,sp,8
 8007cdc:	f800283a 	ret
 8007ce0:	80c0030b 	ldhu	r3,12(r16)
 8007ce4:	18fbffcc 	andi	r3,r3,61439
 8007ce8:	80c0030d 	sth	r3,12(r16)
 8007cec:	dfc00117 	ldw	ra,4(sp)
 8007cf0:	dc000017 	ldw	r16,0(sp)
 8007cf4:	dec00204 	addi	sp,sp,8
 8007cf8:	f800283a 	ret

08007cfc <__seofread>:
 8007cfc:	0005883a 	mov	r2,zero
 8007d00:	f800283a 	ret

08007d04 <__swrite>:
 8007d04:	2880030b 	ldhu	r2,12(r5)
 8007d08:	defffb04 	addi	sp,sp,-20
 8007d0c:	dcc00315 	stw	r19,12(sp)
 8007d10:	dc800215 	stw	r18,8(sp)
 8007d14:	dc400115 	stw	r17,4(sp)
 8007d18:	dc000015 	stw	r16,0(sp)
 8007d1c:	dfc00415 	stw	ra,16(sp)
 8007d20:	10c0400c 	andi	r3,r2,256
 8007d24:	2821883a 	mov	r16,r5
 8007d28:	2027883a 	mov	r19,r4
 8007d2c:	3025883a 	mov	r18,r6
 8007d30:	3823883a 	mov	r17,r7
 8007d34:	18000526 	beq	r3,zero,8007d4c <__swrite+0x48>
 8007d38:	2940038f 	ldh	r5,14(r5)
 8007d3c:	000d883a 	mov	r6,zero
 8007d40:	01c00084 	movi	r7,2
 8007d44:	800999c0 	call	800999c <_lseek_r>
 8007d48:	8080030b 	ldhu	r2,12(r16)
 8007d4c:	8140038f 	ldh	r5,14(r16)
 8007d50:	10bbffcc 	andi	r2,r2,61439
 8007d54:	9809883a 	mov	r4,r19
 8007d58:	900d883a 	mov	r6,r18
 8007d5c:	880f883a 	mov	r7,r17
 8007d60:	8080030d 	sth	r2,12(r16)
 8007d64:	dfc00417 	ldw	ra,16(sp)
 8007d68:	dcc00317 	ldw	r19,12(sp)
 8007d6c:	dc800217 	ldw	r18,8(sp)
 8007d70:	dc400117 	ldw	r17,4(sp)
 8007d74:	dc000017 	ldw	r16,0(sp)
 8007d78:	dec00504 	addi	sp,sp,20
 8007d7c:	800948c1 	jmpi	800948c <_write_r>

08007d80 <__sseek>:
 8007d80:	defffe04 	addi	sp,sp,-8
 8007d84:	dc000015 	stw	r16,0(sp)
 8007d88:	2821883a 	mov	r16,r5
 8007d8c:	2940038f 	ldh	r5,14(r5)
 8007d90:	dfc00115 	stw	ra,4(sp)
 8007d94:	800999c0 	call	800999c <_lseek_r>
 8007d98:	00ffffc4 	movi	r3,-1
 8007d9c:	10c00826 	beq	r2,r3,8007dc0 <__sseek+0x40>
 8007da0:	80c0030b 	ldhu	r3,12(r16)
 8007da4:	80801415 	stw	r2,80(r16)
 8007da8:	18c40014 	ori	r3,r3,4096
 8007dac:	80c0030d 	sth	r3,12(r16)
 8007db0:	dfc00117 	ldw	ra,4(sp)
 8007db4:	dc000017 	ldw	r16,0(sp)
 8007db8:	dec00204 	addi	sp,sp,8
 8007dbc:	f800283a 	ret
 8007dc0:	80c0030b 	ldhu	r3,12(r16)
 8007dc4:	18fbffcc 	andi	r3,r3,61439
 8007dc8:	80c0030d 	sth	r3,12(r16)
 8007dcc:	dfc00117 	ldw	ra,4(sp)
 8007dd0:	dc000017 	ldw	r16,0(sp)
 8007dd4:	dec00204 	addi	sp,sp,8
 8007dd8:	f800283a 	ret

08007ddc <__sclose>:
 8007ddc:	2940038f 	ldh	r5,14(r5)
 8007de0:	80094e81 	jmpi	80094e8 <_close_r>

08007de4 <strcmp>:
 8007de4:	2144b03a 	or	r2,r4,r5
 8007de8:	108000cc 	andi	r2,r2,3
 8007dec:	1000171e 	bne	r2,zero,8007e4c <strcmp+0x68>
 8007df0:	20800017 	ldw	r2,0(r4)
 8007df4:	28c00017 	ldw	r3,0(r5)
 8007df8:	10c0141e 	bne	r2,r3,8007e4c <strcmp+0x68>
 8007dfc:	027fbff4 	movhi	r9,65279
 8007e00:	4a7fbfc4 	addi	r9,r9,-257
 8007e04:	0086303a 	nor	r3,zero,r2
 8007e08:	02202074 	movhi	r8,32897
 8007e0c:	1245883a 	add	r2,r2,r9
 8007e10:	42202004 	addi	r8,r8,-32640
 8007e14:	10c4703a 	and	r2,r2,r3
 8007e18:	1204703a 	and	r2,r2,r8
 8007e1c:	10000226 	beq	r2,zero,8007e28 <strcmp+0x44>
 8007e20:	00001706 	br	8007e80 <strcmp+0x9c>
 8007e24:	1000161e 	bne	r2,zero,8007e80 <strcmp+0x9c>
 8007e28:	21000104 	addi	r4,r4,4
 8007e2c:	20c00017 	ldw	r3,0(r4)
 8007e30:	29400104 	addi	r5,r5,4
 8007e34:	29800017 	ldw	r6,0(r5)
 8007e38:	1a4f883a 	add	r7,r3,r9
 8007e3c:	00c4303a 	nor	r2,zero,r3
 8007e40:	3884703a 	and	r2,r7,r2
 8007e44:	1204703a 	and	r2,r2,r8
 8007e48:	19bff626 	beq	r3,r6,8007e24 <__alt_data_end+0xfc007e24>
 8007e4c:	20800007 	ldb	r2,0(r4)
 8007e50:	1000051e 	bne	r2,zero,8007e68 <strcmp+0x84>
 8007e54:	00000606 	br	8007e70 <strcmp+0x8c>
 8007e58:	21000044 	addi	r4,r4,1
 8007e5c:	20800007 	ldb	r2,0(r4)
 8007e60:	29400044 	addi	r5,r5,1
 8007e64:	10000226 	beq	r2,zero,8007e70 <strcmp+0x8c>
 8007e68:	28c00007 	ldb	r3,0(r5)
 8007e6c:	10fffa26 	beq	r2,r3,8007e58 <__alt_data_end+0xfc007e58>
 8007e70:	20800003 	ldbu	r2,0(r4)
 8007e74:	28c00003 	ldbu	r3,0(r5)
 8007e78:	10c5c83a 	sub	r2,r2,r3
 8007e7c:	f800283a 	ret
 8007e80:	0005883a 	mov	r2,zero
 8007e84:	f800283a 	ret

08007e88 <__sprint_r.part.0>:
 8007e88:	28801917 	ldw	r2,100(r5)
 8007e8c:	defff604 	addi	sp,sp,-40
 8007e90:	dd400515 	stw	r21,20(sp)
 8007e94:	dcc00315 	stw	r19,12(sp)
 8007e98:	dfc00915 	stw	ra,36(sp)
 8007e9c:	df000815 	stw	fp,32(sp)
 8007ea0:	ddc00715 	stw	r23,28(sp)
 8007ea4:	dd800615 	stw	r22,24(sp)
 8007ea8:	dd000415 	stw	r20,16(sp)
 8007eac:	dc800215 	stw	r18,8(sp)
 8007eb0:	dc400115 	stw	r17,4(sp)
 8007eb4:	dc000015 	stw	r16,0(sp)
 8007eb8:	1088000c 	andi	r2,r2,8192
 8007ebc:	2827883a 	mov	r19,r5
 8007ec0:	302b883a 	mov	r21,r6
 8007ec4:	10002d26 	beq	r2,zero,8007f7c <__sprint_r.part.0+0xf4>
 8007ec8:	30800217 	ldw	r2,8(r6)
 8007ecc:	35800017 	ldw	r22,0(r6)
 8007ed0:	10002826 	beq	r2,zero,8007f74 <__sprint_r.part.0+0xec>
 8007ed4:	2029883a 	mov	r20,r4
 8007ed8:	b5c00104 	addi	r23,r22,4
 8007edc:	04bfffc4 	movi	r18,-1
 8007ee0:	bc400017 	ldw	r17,0(r23)
 8007ee4:	b4000017 	ldw	r16,0(r22)
 8007ee8:	0039883a 	mov	fp,zero
 8007eec:	8822d0ba 	srli	r17,r17,2
 8007ef0:	04400316 	blt	zero,r17,8007f00 <__sprint_r.part.0+0x78>
 8007ef4:	00001706 	br	8007f54 <__sprint_r.part.0+0xcc>
 8007ef8:	84000104 	addi	r16,r16,4
 8007efc:	8f001526 	beq	r17,fp,8007f54 <__sprint_r.part.0+0xcc>
 8007f00:	81400017 	ldw	r5,0(r16)
 8007f04:	a009883a 	mov	r4,r20
 8007f08:	980d883a 	mov	r6,r19
 8007f0c:	80097140 	call	8009714 <_fputwc_r>
 8007f10:	e7000044 	addi	fp,fp,1
 8007f14:	14bff81e 	bne	r2,r18,8007ef8 <__alt_data_end+0xfc007ef8>
 8007f18:	9005883a 	mov	r2,r18
 8007f1c:	a8000215 	stw	zero,8(r21)
 8007f20:	a8000115 	stw	zero,4(r21)
 8007f24:	dfc00917 	ldw	ra,36(sp)
 8007f28:	df000817 	ldw	fp,32(sp)
 8007f2c:	ddc00717 	ldw	r23,28(sp)
 8007f30:	dd800617 	ldw	r22,24(sp)
 8007f34:	dd400517 	ldw	r21,20(sp)
 8007f38:	dd000417 	ldw	r20,16(sp)
 8007f3c:	dcc00317 	ldw	r19,12(sp)
 8007f40:	dc800217 	ldw	r18,8(sp)
 8007f44:	dc400117 	ldw	r17,4(sp)
 8007f48:	dc000017 	ldw	r16,0(sp)
 8007f4c:	dec00a04 	addi	sp,sp,40
 8007f50:	f800283a 	ret
 8007f54:	a8c00217 	ldw	r3,8(r21)
 8007f58:	8c63883a 	add	r17,r17,r17
 8007f5c:	8c63883a 	add	r17,r17,r17
 8007f60:	1c45c83a 	sub	r2,r3,r17
 8007f64:	a8800215 	stw	r2,8(r21)
 8007f68:	b5800204 	addi	r22,r22,8
 8007f6c:	bdc00204 	addi	r23,r23,8
 8007f70:	103fdb1e 	bne	r2,zero,8007ee0 <__alt_data_end+0xfc007ee0>
 8007f74:	0005883a 	mov	r2,zero
 8007f78:	003fe806 	br	8007f1c <__alt_data_end+0xfc007f1c>
 8007f7c:	80050580 	call	8005058 <__sfvwrite_r>
 8007f80:	003fe606 	br	8007f1c <__alt_data_end+0xfc007f1c>

08007f84 <__sprint_r>:
 8007f84:	30c00217 	ldw	r3,8(r6)
 8007f88:	18000126 	beq	r3,zero,8007f90 <__sprint_r+0xc>
 8007f8c:	8007e881 	jmpi	8007e88 <__sprint_r.part.0>
 8007f90:	30000115 	stw	zero,4(r6)
 8007f94:	0005883a 	mov	r2,zero
 8007f98:	f800283a 	ret

08007f9c <___vfiprintf_internal_r>:
 8007f9c:	defeca04 	addi	sp,sp,-1240
 8007fa0:	dd813215 	stw	r22,1224(sp)
 8007fa4:	dd013015 	stw	r20,1216(sp)
 8007fa8:	dfc13515 	stw	ra,1236(sp)
 8007fac:	df013415 	stw	fp,1232(sp)
 8007fb0:	ddc13315 	stw	r23,1228(sp)
 8007fb4:	dd413115 	stw	r21,1220(sp)
 8007fb8:	dcc12f15 	stw	r19,1212(sp)
 8007fbc:	dc812e15 	stw	r18,1208(sp)
 8007fc0:	dc412d15 	stw	r17,1204(sp)
 8007fc4:	dc012c15 	stw	r16,1200(sp)
 8007fc8:	d9012015 	stw	r4,1152(sp)
 8007fcc:	d9c12115 	stw	r7,1156(sp)
 8007fd0:	2829883a 	mov	r20,r5
 8007fd4:	302d883a 	mov	r22,r6
 8007fd8:	20000226 	beq	r4,zero,8007fe4 <___vfiprintf_internal_r+0x48>
 8007fdc:	20800e17 	ldw	r2,56(r4)
 8007fe0:	1001d326 	beq	r2,zero,8008730 <___vfiprintf_internal_r+0x794>
 8007fe4:	a0c0030b 	ldhu	r3,12(r20)
 8007fe8:	1908000c 	andi	r4,r3,8192
 8007fec:	1805883a 	mov	r2,r3
 8007ff0:	2000071e 	bne	r4,zero,8008010 <___vfiprintf_internal_r+0x74>
 8007ff4:	a1001917 	ldw	r4,100(r20)
 8007ff8:	18880014 	ori	r2,r3,8192
 8007ffc:	00f7ffc4 	movi	r3,-8193
 8008000:	20c8703a 	and	r4,r4,r3
 8008004:	a080030d 	sth	r2,12(r20)
 8008008:	1007883a 	mov	r3,r2
 800800c:	a1001915 	stw	r4,100(r20)
 8008010:	1100020c 	andi	r4,r2,8
 8008014:	20018926 	beq	r4,zero,800863c <___vfiprintf_internal_r+0x6a0>
 8008018:	a1000417 	ldw	r4,16(r20)
 800801c:	20018726 	beq	r4,zero,800863c <___vfiprintf_internal_r+0x6a0>
 8008020:	1080068c 	andi	r2,r2,26
 8008024:	01000284 	movi	r4,10
 8008028:	11018d26 	beq	r2,r4,8008660 <___vfiprintf_internal_r+0x6c4>
 800802c:	da810a04 	addi	r10,sp,1064
 8008030:	dac109c4 	addi	r11,sp,1063
 8008034:	07020074 	movhi	fp,2049
 8008038:	05c20074 	movhi	r23,2049
 800803c:	da811e15 	stw	r10,1144(sp)
 8008040:	52d5c83a 	sub	r10,r10,r11
 8008044:	e73fb204 	addi	fp,fp,-312
 8008048:	bdffae04 	addi	r23,r23,-328
 800804c:	dac11f15 	stw	r11,1148(sp)
 8008050:	dec11a15 	stw	sp,1128(sp)
 8008054:	d8011c15 	stw	zero,1136(sp)
 8008058:	d8011b15 	stw	zero,1132(sp)
 800805c:	d8012615 	stw	zero,1176(sp)
 8008060:	d8012215 	stw	zero,1160(sp)
 8008064:	da812715 	stw	r10,1180(sp)
 8008068:	d811883a 	mov	r8,sp
 800806c:	b021883a 	mov	r16,r22
 8008070:	80800007 	ldb	r2,0(r16)
 8008074:	10039c26 	beq	r2,zero,8008ee8 <___vfiprintf_internal_r+0xf4c>
 8008078:	01000944 	movi	r4,37
 800807c:	11039a26 	beq	r2,r4,8008ee8 <___vfiprintf_internal_r+0xf4c>
 8008080:	8005883a 	mov	r2,r16
 8008084:	00000106 	br	800808c <___vfiprintf_internal_r+0xf0>
 8008088:	19000326 	beq	r3,r4,8008098 <___vfiprintf_internal_r+0xfc>
 800808c:	10800044 	addi	r2,r2,1
 8008090:	10c00007 	ldb	r3,0(r2)
 8008094:	183ffc1e 	bne	r3,zero,8008088 <__alt_data_end+0xfc008088>
 8008098:	1425c83a 	sub	r18,r2,r16
 800809c:	1023883a 	mov	r17,r2
 80080a0:	90001026 	beq	r18,zero,80080e4 <___vfiprintf_internal_r+0x148>
 80080a4:	d8c11c17 	ldw	r3,1136(sp)
 80080a8:	d8811b17 	ldw	r2,1132(sp)
 80080ac:	44000015 	stw	r16,0(r8)
 80080b0:	90c7883a 	add	r3,r18,r3
 80080b4:	10800044 	addi	r2,r2,1
 80080b8:	44800115 	stw	r18,4(r8)
 80080bc:	d8c11c15 	stw	r3,1136(sp)
 80080c0:	d8811b15 	stw	r2,1132(sp)
 80080c4:	010001c4 	movi	r4,7
 80080c8:	2080750e 	bge	r4,r2,80082a0 <___vfiprintf_internal_r+0x304>
 80080cc:	18039d1e 	bne	r3,zero,8008f44 <___vfiprintf_internal_r+0xfa8>
 80080d0:	dac12217 	ldw	r11,1160(sp)
 80080d4:	d8011b15 	stw	zero,1132(sp)
 80080d8:	d811883a 	mov	r8,sp
 80080dc:	5c97883a 	add	r11,r11,r18
 80080e0:	dac12215 	stw	r11,1160(sp)
 80080e4:	88800007 	ldb	r2,0(r17)
 80080e8:	1002e026 	beq	r2,zero,8008c6c <___vfiprintf_internal_r+0xcd0>
 80080ec:	88c00047 	ldb	r3,1(r17)
 80080f0:	8c000044 	addi	r16,r17,1
 80080f4:	d8011d85 	stb	zero,1142(sp)
 80080f8:	000d883a 	mov	r6,zero
 80080fc:	027fffc4 	movi	r9,-1
 8008100:	0027883a 	mov	r19,zero
 8008104:	002b883a 	mov	r21,zero
 8008108:	01001604 	movi	r4,88
 800810c:	01400244 	movi	r5,9
 8008110:	03000a84 	movi	r12,42
 8008114:	01c01b04 	movi	r7,108
 8008118:	84000044 	addi	r16,r16,1
 800811c:	18bff804 	addi	r2,r3,-32
 8008120:	20825f36 	bltu	r4,r2,8008aa0 <___vfiprintf_internal_r+0xb04>
 8008124:	100490ba 	slli	r2,r2,2
 8008128:	02820074 	movhi	r10,2049
 800812c:	52a04f04 	addi	r10,r10,-32452
 8008130:	1285883a 	add	r2,r2,r10
 8008134:	10800017 	ldw	r2,0(r2)
 8008138:	1000683a 	jmp	r2
 800813c:	08008910 	cmplti	zero,at,548
 8008140:	08008aa0 	cmpeqi	zero,at,554
 8008144:	08008aa0 	cmpeqi	zero,at,554
 8008148:	08008a94 	ori	zero,at,554
 800814c:	08008aa0 	cmpeqi	zero,at,554
 8008150:	08008aa0 	cmpeqi	zero,at,554
 8008154:	08008aa0 	cmpeqi	zero,at,554
 8008158:	08008aa0 	cmpeqi	zero,at,554
 800815c:	08008aa0 	cmpeqi	zero,at,554
 8008160:	08008aa0 	cmpeqi	zero,at,554
 8008164:	08008a6c 	andhi	zero,at,553
 8008168:	08008a88 	cmpgei	zero,at,554
 800816c:	08008aa0 	cmpeqi	zero,at,554
 8008170:	08008740 	call	800874 <__alt_mem_sdram-0x77ff78c>
 8008174:	080088a0 	cmpeqi	zero,at,546
 8008178:	08008aa0 	cmpeqi	zero,at,554
 800817c:	08008824 	muli	zero,at,544
 8008180:	08008830 	cmpltui	zero,at,544
 8008184:	08008830 	cmpltui	zero,at,544
 8008188:	08008830 	cmpltui	zero,at,544
 800818c:	08008830 	cmpltui	zero,at,544
 8008190:	08008830 	cmpltui	zero,at,544
 8008194:	08008830 	cmpltui	zero,at,544
 8008198:	08008830 	cmpltui	zero,at,544
 800819c:	08008830 	cmpltui	zero,at,544
 80081a0:	08008830 	cmpltui	zero,at,544
 80081a4:	08008aa0 	cmpeqi	zero,at,554
 80081a8:	08008aa0 	cmpeqi	zero,at,554
 80081ac:	08008aa0 	cmpeqi	zero,at,554
 80081b0:	08008aa0 	cmpeqi	zero,at,554
 80081b4:	08008aa0 	cmpeqi	zero,at,554
 80081b8:	08008aa0 	cmpeqi	zero,at,554
 80081bc:	08008aa0 	cmpeqi	zero,at,554
 80081c0:	08008aa0 	cmpeqi	zero,at,554
 80081c4:	08008aa0 	cmpeqi	zero,at,554
 80081c8:	08008aa0 	cmpeqi	zero,at,554
 80081cc:	0800885c 	xori	zero,at,545
 80081d0:	08008aa0 	cmpeqi	zero,at,554
 80081d4:	08008aa0 	cmpeqi	zero,at,554
 80081d8:	08008aa0 	cmpeqi	zero,at,554
 80081dc:	08008aa0 	cmpeqi	zero,at,554
 80081e0:	08008aa0 	cmpeqi	zero,at,554
 80081e4:	08008aa0 	cmpeqi	zero,at,554
 80081e8:	08008aa0 	cmpeqi	zero,at,554
 80081ec:	08008aa0 	cmpeqi	zero,at,554
 80081f0:	08008aa0 	cmpeqi	zero,at,554
 80081f4:	08008aa0 	cmpeqi	zero,at,554
 80081f8:	080082f0 	cmpltui	zero,at,523
 80081fc:	08008aa0 	cmpeqi	zero,at,554
 8008200:	08008aa0 	cmpeqi	zero,at,554
 8008204:	08008aa0 	cmpeqi	zero,at,554
 8008208:	08008aa0 	cmpeqi	zero,at,554
 800820c:	08008aa0 	cmpeqi	zero,at,554
 8008210:	080082b4 	orhi	zero,at,522
 8008214:	08008aa0 	cmpeqi	zero,at,554
 8008218:	08008aa0 	cmpeqi	zero,at,554
 800821c:	0800879c 	xori	zero,at,542
 8008220:	08008aa0 	cmpeqi	zero,at,554
 8008224:	08008aa0 	cmpeqi	zero,at,554
 8008228:	08008aa0 	cmpeqi	zero,at,554
 800822c:	08008aa0 	cmpeqi	zero,at,554
 8008230:	08008aa0 	cmpeqi	zero,at,554
 8008234:	08008aa0 	cmpeqi	zero,at,554
 8008238:	08008aa0 	cmpeqi	zero,at,554
 800823c:	08008aa0 	cmpeqi	zero,at,554
 8008240:	08008aa0 	cmpeqi	zero,at,554
 8008244:	08008aa0 	cmpeqi	zero,at,554
 8008248:	080087f4 	orhi	zero,at,543
 800824c:	0800898c 	andi	zero,at,550
 8008250:	08008aa0 	cmpeqi	zero,at,554
 8008254:	08008aa0 	cmpeqi	zero,at,554
 8008258:	08008aa0 	cmpeqi	zero,at,554
 800825c:	08008a14 	ori	zero,at,552
 8008260:	0800898c 	andi	zero,at,550
 8008264:	08008aa0 	cmpeqi	zero,at,554
 8008268:	08008aa0 	cmpeqi	zero,at,554
 800826c:	08008a20 	cmpeqi	zero,at,552
 8008270:	08008aa0 	cmpeqi	zero,at,554
 8008274:	080088e0 	cmpeqi	zero,at,547
 8008278:	080082f4 	orhi	zero,at,523
 800827c:	080089c8 	cmpgei	zero,at,551
 8008280:	08008a08 	cmpgei	zero,at,552
 8008284:	08008aa0 	cmpeqi	zero,at,554
 8008288:	0800892c 	andhi	zero,at,548
 800828c:	08008aa0 	cmpeqi	zero,at,554
 8008290:	080082b8 	rdprs	zero,at,522
 8008294:	08008aa0 	cmpeqi	zero,at,554
 8008298:	08008aa0 	cmpeqi	zero,at,554
 800829c:	08008a30 	cmpltui	zero,at,552
 80082a0:	42000204 	addi	r8,r8,8
 80082a4:	dac12217 	ldw	r11,1160(sp)
 80082a8:	5c97883a 	add	r11,r11,r18
 80082ac:	dac12215 	stw	r11,1160(sp)
 80082b0:	003f8c06 	br	80080e4 <__alt_data_end+0xfc0080e4>
 80082b4:	ad400414 	ori	r21,r21,16
 80082b8:	a880080c 	andi	r2,r21,32
 80082bc:	10012f1e 	bne	r2,zero,800877c <___vfiprintf_internal_r+0x7e0>
 80082c0:	a880040c 	andi	r2,r21,16
 80082c4:	1001ff1e 	bne	r2,zero,8008ac4 <___vfiprintf_internal_r+0xb28>
 80082c8:	a880100c 	andi	r2,r21,64
 80082cc:	1001fd26 	beq	r2,zero,8008ac4 <___vfiprintf_internal_r+0xb28>
 80082d0:	da812117 	ldw	r10,1156(sp)
 80082d4:	002d883a 	mov	r22,zero
 80082d8:	00800044 	movi	r2,1
 80082dc:	5480000b 	ldhu	r18,0(r10)
 80082e0:	52800104 	addi	r10,r10,4
 80082e4:	da812115 	stw	r10,1156(sp)
 80082e8:	9009883a 	mov	r4,r18
 80082ec:	00000a06 	br	8008318 <___vfiprintf_internal_r+0x37c>
 80082f0:	ad400414 	ori	r21,r21,16
 80082f4:	a880080c 	andi	r2,r21,32
 80082f8:	10011426 	beq	r2,zero,800874c <___vfiprintf_internal_r+0x7b0>
 80082fc:	da812117 	ldw	r10,1156(sp)
 8008300:	0005883a 	mov	r2,zero
 8008304:	54800017 	ldw	r18,0(r10)
 8008308:	55800117 	ldw	r22,4(r10)
 800830c:	52800204 	addi	r10,r10,8
 8008310:	da812115 	stw	r10,1156(sp)
 8008314:	9588b03a 	or	r4,r18,r22
 8008318:	d8011d85 	stb	zero,1142(sp)
 800831c:	4823883a 	mov	r17,r9
 8008320:	0019883a 	mov	r12,zero
 8008324:	48000216 	blt	r9,zero,8008330 <___vfiprintf_internal_r+0x394>
 8008328:	00ffdfc4 	movi	r3,-129
 800832c:	a8ea703a 	and	r21,r21,r3
 8008330:	2002221e 	bne	r4,zero,8008bbc <___vfiprintf_internal_r+0xc20>
 8008334:	4802c726 	beq	r9,zero,8008e54 <___vfiprintf_internal_r+0xeb8>
 8008338:	10803fcc 	andi	r2,r2,255
 800833c:	00c00044 	movi	r3,1
 8008340:	10c24426 	beq	r2,r3,8008c54 <___vfiprintf_internal_r+0xcb8>
 8008344:	00c00084 	movi	r3,2
 8008348:	10c2cc26 	beq	r2,r3,8008e7c <___vfiprintf_internal_r+0xee0>
 800834c:	d8c10a04 	addi	r3,sp,1064
 8008350:	9008d0fa 	srli	r4,r18,3
 8008354:	b00a977a 	slli	r5,r22,29
 8008358:	b02cd0fa 	srli	r22,r22,3
 800835c:	948001cc 	andi	r18,r18,7
 8008360:	90800c04 	addi	r2,r18,48
 8008364:	18ffffc4 	addi	r3,r3,-1
 8008368:	2924b03a 	or	r18,r5,r4
 800836c:	18800005 	stb	r2,0(r3)
 8008370:	9588b03a 	or	r4,r18,r22
 8008374:	203ff61e 	bne	r4,zero,8008350 <__alt_data_end+0xfc008350>
 8008378:	a900004c 	andi	r4,r21,1
 800837c:	d8c12415 	stw	r3,1168(sp)
 8008380:	2002fb1e 	bne	r4,zero,8008f70 <___vfiprintf_internal_r+0xfd4>
 8008384:	da811e17 	ldw	r10,1144(sp)
 8008388:	50e3c83a 	sub	r17,r10,r3
 800838c:	8825883a 	mov	r18,r17
 8008390:	8a40010e 	bge	r17,r9,8008398 <___vfiprintf_internal_r+0x3fc>
 8008394:	4825883a 	mov	r18,r9
 8008398:	63003fcc 	andi	r12,r12,255
 800839c:	6300201c 	xori	r12,r12,128
 80083a0:	633fe004 	addi	r12,r12,-128
 80083a4:	60000126 	beq	r12,zero,80083ac <___vfiprintf_internal_r+0x410>
 80083a8:	94800044 	addi	r18,r18,1
 80083ac:	ab80008c 	andi	r14,r21,2
 80083b0:	70000126 	beq	r14,zero,80083b8 <___vfiprintf_internal_r+0x41c>
 80083b4:	94800084 	addi	r18,r18,2
 80083b8:	ad80210c 	andi	r22,r21,132
 80083bc:	b001df1e 	bne	r22,zero,8008b3c <___vfiprintf_internal_r+0xba0>
 80083c0:	9c8fc83a 	sub	r7,r19,r18
 80083c4:	01c1dd0e 	bge	zero,r7,8008b3c <___vfiprintf_internal_r+0xba0>
 80083c8:	03000404 	movi	r12,16
 80083cc:	d8811c17 	ldw	r2,1136(sp)
 80083d0:	61c3920e 	bge	r12,r7,800921c <___vfiprintf_internal_r+0x1280>
 80083d4:	02820074 	movhi	r10,2049
 80083d8:	52bfb204 	addi	r10,r10,-312
 80083dc:	dc012915 	stw	r16,1188(sp)
 80083e0:	d9811b17 	ldw	r6,1132(sp)
 80083e4:	da812315 	stw	r10,1164(sp)
 80083e8:	00c001c4 	movi	r3,7
 80083ec:	da412515 	stw	r9,1172(sp)
 80083f0:	db812815 	stw	r14,1184(sp)
 80083f4:	3821883a 	mov	r16,r7
 80083f8:	00000506 	br	8008410 <___vfiprintf_internal_r+0x474>
 80083fc:	31400084 	addi	r5,r6,2
 8008400:	42000204 	addi	r8,r8,8
 8008404:	200d883a 	mov	r6,r4
 8008408:	843ffc04 	addi	r16,r16,-16
 800840c:	64000d0e 	bge	r12,r16,8008444 <___vfiprintf_internal_r+0x4a8>
 8008410:	10800404 	addi	r2,r2,16
 8008414:	31000044 	addi	r4,r6,1
 8008418:	47000015 	stw	fp,0(r8)
 800841c:	43000115 	stw	r12,4(r8)
 8008420:	d8811c15 	stw	r2,1136(sp)
 8008424:	d9011b15 	stw	r4,1132(sp)
 8008428:	193ff40e 	bge	r3,r4,80083fc <__alt_data_end+0xfc0083fc>
 800842c:	1001b51e 	bne	r2,zero,8008b04 <___vfiprintf_internal_r+0xb68>
 8008430:	843ffc04 	addi	r16,r16,-16
 8008434:	000d883a 	mov	r6,zero
 8008438:	01400044 	movi	r5,1
 800843c:	d811883a 	mov	r8,sp
 8008440:	643ff316 	blt	r12,r16,8008410 <__alt_data_end+0xfc008410>
 8008444:	800f883a 	mov	r7,r16
 8008448:	da412517 	ldw	r9,1172(sp)
 800844c:	db812817 	ldw	r14,1184(sp)
 8008450:	dc012917 	ldw	r16,1188(sp)
 8008454:	dac12317 	ldw	r11,1164(sp)
 8008458:	3887883a 	add	r3,r7,r2
 800845c:	41c00115 	stw	r7,4(r8)
 8008460:	42c00015 	stw	r11,0(r8)
 8008464:	d8c11c15 	stw	r3,1136(sp)
 8008468:	d9411b15 	stw	r5,1132(sp)
 800846c:	008001c4 	movi	r2,7
 8008470:	11429316 	blt	r2,r5,8008ec0 <___vfiprintf_internal_r+0xf24>
 8008474:	d9011d87 	ldb	r4,1142(sp)
 8008478:	42000204 	addi	r8,r8,8
 800847c:	28800044 	addi	r2,r5,1
 8008480:	2001b31e 	bne	r4,zero,8008b50 <___vfiprintf_internal_r+0xbb4>
 8008484:	70000c26 	beq	r14,zero,80084b8 <___vfiprintf_internal_r+0x51c>
 8008488:	d9011d04 	addi	r4,sp,1140
 800848c:	18c00084 	addi	r3,r3,2
 8008490:	41000015 	stw	r4,0(r8)
 8008494:	01000084 	movi	r4,2
 8008498:	41000115 	stw	r4,4(r8)
 800849c:	d8c11c15 	stw	r3,1136(sp)
 80084a0:	d8811b15 	stw	r2,1132(sp)
 80084a4:	010001c4 	movi	r4,7
 80084a8:	20826516 	blt	r4,r2,8008e40 <___vfiprintf_internal_r+0xea4>
 80084ac:	100b883a 	mov	r5,r2
 80084b0:	42000204 	addi	r8,r8,8
 80084b4:	10800044 	addi	r2,r2,1
 80084b8:	01002004 	movi	r4,128
 80084bc:	b1021a26 	beq	r22,r4,8008d28 <___vfiprintf_internal_r+0xd8c>
 80084c0:	4c6dc83a 	sub	r22,r9,r17
 80084c4:	0580230e 	bge	zero,r22,8008554 <___vfiprintf_internal_r+0x5b8>
 80084c8:	01c00404 	movi	r7,16
 80084cc:	3d83300e 	bge	r7,r22,8009190 <___vfiprintf_internal_r+0x11f4>
 80084d0:	00820074 	movhi	r2,2049
 80084d4:	10bfae04 	addi	r2,r2,-328
 80084d8:	d8812315 	stw	r2,1164(sp)
 80084dc:	030001c4 	movi	r12,7
 80084e0:	00000506 	br	80084f8 <___vfiprintf_internal_r+0x55c>
 80084e4:	28800084 	addi	r2,r5,2
 80084e8:	42000204 	addi	r8,r8,8
 80084ec:	200b883a 	mov	r5,r4
 80084f0:	b5bffc04 	addi	r22,r22,-16
 80084f4:	3d800d0e 	bge	r7,r22,800852c <___vfiprintf_internal_r+0x590>
 80084f8:	18c00404 	addi	r3,r3,16
 80084fc:	29000044 	addi	r4,r5,1
 8008500:	45c00015 	stw	r23,0(r8)
 8008504:	41c00115 	stw	r7,4(r8)
 8008508:	d8c11c15 	stw	r3,1136(sp)
 800850c:	d9011b15 	stw	r4,1132(sp)
 8008510:	613ff40e 	bge	r12,r4,80084e4 <__alt_data_end+0xfc0084e4>
 8008514:	18019b1e 	bne	r3,zero,8008b84 <___vfiprintf_internal_r+0xbe8>
 8008518:	b5bffc04 	addi	r22,r22,-16
 800851c:	000b883a 	mov	r5,zero
 8008520:	00800044 	movi	r2,1
 8008524:	d811883a 	mov	r8,sp
 8008528:	3dbff316 	blt	r7,r22,80084f8 <__alt_data_end+0xfc0084f8>
 800852c:	da812317 	ldw	r10,1164(sp)
 8008530:	1d87883a 	add	r3,r3,r22
 8008534:	45800115 	stw	r22,4(r8)
 8008538:	42800015 	stw	r10,0(r8)
 800853c:	d8c11c15 	stw	r3,1136(sp)
 8008540:	d8811b15 	stw	r2,1132(sp)
 8008544:	010001c4 	movi	r4,7
 8008548:	2081dd16 	blt	r4,r2,8008cc0 <___vfiprintf_internal_r+0xd24>
 800854c:	42000204 	addi	r8,r8,8
 8008550:	10800044 	addi	r2,r2,1
 8008554:	da812417 	ldw	r10,1168(sp)
 8008558:	1c47883a 	add	r3,r3,r17
 800855c:	44400115 	stw	r17,4(r8)
 8008560:	42800015 	stw	r10,0(r8)
 8008564:	d8c11c15 	stw	r3,1136(sp)
 8008568:	d8811b15 	stw	r2,1132(sp)
 800856c:	010001c4 	movi	r4,7
 8008570:	2081dc0e 	bge	r4,r2,8008ce4 <___vfiprintf_internal_r+0xd48>
 8008574:	1802611e 	bne	r3,zero,8008efc <___vfiprintf_internal_r+0xf60>
 8008578:	d8011b15 	stw	zero,1132(sp)
 800857c:	aac0010c 	andi	r11,r21,4
 8008580:	58002726 	beq	r11,zero,8008620 <___vfiprintf_internal_r+0x684>
 8008584:	9ca3c83a 	sub	r17,r19,r18
 8008588:	d811883a 	mov	r8,sp
 800858c:	0443510e 	bge	zero,r17,80092d4 <___vfiprintf_internal_r+0x1338>
 8008590:	01c00404 	movi	r7,16
 8008594:	3c43320e 	bge	r7,r17,8009260 <___vfiprintf_internal_r+0x12c4>
 8008598:	00820074 	movhi	r2,2049
 800859c:	10bfb204 	addi	r2,r2,-312
 80085a0:	d9011b17 	ldw	r4,1132(sp)
 80085a4:	d8812315 	stw	r2,1164(sp)
 80085a8:	382d883a 	mov	r22,r7
 80085ac:	054001c4 	movi	r21,7
 80085b0:	00000506 	br	80085c8 <___vfiprintf_internal_r+0x62c>
 80085b4:	21400084 	addi	r5,r4,2
 80085b8:	42000204 	addi	r8,r8,8
 80085bc:	1009883a 	mov	r4,r2
 80085c0:	8c7ffc04 	addi	r17,r17,-16
 80085c4:	b4400d0e 	bge	r22,r17,80085fc <___vfiprintf_internal_r+0x660>
 80085c8:	18c00404 	addi	r3,r3,16
 80085cc:	20800044 	addi	r2,r4,1
 80085d0:	47000015 	stw	fp,0(r8)
 80085d4:	45800115 	stw	r22,4(r8)
 80085d8:	d8c11c15 	stw	r3,1136(sp)
 80085dc:	d8811b15 	stw	r2,1132(sp)
 80085e0:	a8bff40e 	bge	r21,r2,80085b4 <__alt_data_end+0xfc0085b4>
 80085e4:	1801ac1e 	bne	r3,zero,8008c98 <___vfiprintf_internal_r+0xcfc>
 80085e8:	8c7ffc04 	addi	r17,r17,-16
 80085ec:	0009883a 	mov	r4,zero
 80085f0:	01400044 	movi	r5,1
 80085f4:	d811883a 	mov	r8,sp
 80085f8:	b47ff316 	blt	r22,r17,80085c8 <__alt_data_end+0xfc0085c8>
 80085fc:	da812317 	ldw	r10,1164(sp)
 8008600:	1c47883a 	add	r3,r3,r17
 8008604:	44400115 	stw	r17,4(r8)
 8008608:	42800015 	stw	r10,0(r8)
 800860c:	d8c11c15 	stw	r3,1136(sp)
 8008610:	d9411b15 	stw	r5,1132(sp)
 8008614:	008001c4 	movi	r2,7
 8008618:	1141b70e 	bge	r2,r5,8008cf8 <___vfiprintf_internal_r+0xd5c>
 800861c:	1802cf1e 	bne	r3,zero,800915c <___vfiprintf_internal_r+0x11c0>
 8008620:	94c2ca16 	blt	r18,r19,800914c <___vfiprintf_internal_r+0x11b0>
 8008624:	dac12217 	ldw	r11,1160(sp)
 8008628:	5c97883a 	add	r11,r11,r18
 800862c:	dac12215 	stw	r11,1160(sp)
 8008630:	d8011b15 	stw	zero,1132(sp)
 8008634:	d811883a 	mov	r8,sp
 8008638:	003e8d06 	br	8008070 <__alt_data_end+0xfc008070>
 800863c:	d9012017 	ldw	r4,1152(sp)
 8008640:	a00b883a 	mov	r5,r20
 8008644:	8002bf40 	call	8002bf4 <__swsetup_r>
 8008648:	10002c1e 	bne	r2,zero,80086fc <___vfiprintf_internal_r+0x760>
 800864c:	a0c0030b 	ldhu	r3,12(r20)
 8008650:	01000284 	movi	r4,10
 8008654:	1805883a 	mov	r2,r3
 8008658:	1080068c 	andi	r2,r2,26
 800865c:	113e731e 	bne	r2,r4,800802c <__alt_data_end+0xfc00802c>
 8008660:	a080038b 	ldhu	r2,14(r20)
 8008664:	113fffcc 	andi	r4,r2,65535
 8008668:	2120001c 	xori	r4,r4,32768
 800866c:	21200004 	addi	r4,r4,-32768
 8008670:	203e6e16 	blt	r4,zero,800802c <__alt_data_end+0xfc00802c>
 8008674:	a3001917 	ldw	r12,100(r20)
 8008678:	a2c00717 	ldw	r11,28(r20)
 800867c:	a2800917 	ldw	r10,36(r20)
 8008680:	d9012017 	ldw	r4,1152(sp)
 8008684:	d9c12117 	ldw	r7,1156(sp)
 8008688:	02410004 	movi	r9,1024
 800868c:	18ffff4c 	andi	r3,r3,65533
 8008690:	da4b883a 	add	r5,sp,r9
 8008694:	b00d883a 	mov	r6,r22
 8008698:	d8c1030d 	sth	r3,1036(sp)
 800869c:	db011915 	stw	r12,1124(sp)
 80086a0:	d881038d 	sth	r2,1038(sp)
 80086a4:	dac10715 	stw	r11,1052(sp)
 80086a8:	da810915 	stw	r10,1060(sp)
 80086ac:	dec10015 	stw	sp,1024(sp)
 80086b0:	dec10415 	stw	sp,1040(sp)
 80086b4:	da410215 	stw	r9,1032(sp)
 80086b8:	da410515 	stw	r9,1044(sp)
 80086bc:	d8010615 	stw	zero,1048(sp)
 80086c0:	8007f9c0 	call	8007f9c <___vfiprintf_internal_r>
 80086c4:	1021883a 	mov	r16,r2
 80086c8:	10000416 	blt	r2,zero,80086dc <___vfiprintf_internal_r+0x740>
 80086cc:	d9012017 	ldw	r4,1152(sp)
 80086d0:	d9410004 	addi	r5,sp,1024
 80086d4:	800464c0 	call	800464c <_fflush_r>
 80086d8:	1002fc1e 	bne	r2,zero,80092cc <___vfiprintf_internal_r+0x1330>
 80086dc:	d881030b 	ldhu	r2,1036(sp)
 80086e0:	1080100c 	andi	r2,r2,64
 80086e4:	10000326 	beq	r2,zero,80086f4 <___vfiprintf_internal_r+0x758>
 80086e8:	a080030b 	ldhu	r2,12(r20)
 80086ec:	10801014 	ori	r2,r2,64
 80086f0:	a080030d 	sth	r2,12(r20)
 80086f4:	8005883a 	mov	r2,r16
 80086f8:	00000106 	br	8008700 <___vfiprintf_internal_r+0x764>
 80086fc:	00bfffc4 	movi	r2,-1
 8008700:	dfc13517 	ldw	ra,1236(sp)
 8008704:	df013417 	ldw	fp,1232(sp)
 8008708:	ddc13317 	ldw	r23,1228(sp)
 800870c:	dd813217 	ldw	r22,1224(sp)
 8008710:	dd413117 	ldw	r21,1220(sp)
 8008714:	dd013017 	ldw	r20,1216(sp)
 8008718:	dcc12f17 	ldw	r19,1212(sp)
 800871c:	dc812e17 	ldw	r18,1208(sp)
 8008720:	dc412d17 	ldw	r17,1204(sp)
 8008724:	dc012c17 	ldw	r16,1200(sp)
 8008728:	dec13604 	addi	sp,sp,1240
 800872c:	f800283a 	ret
 8008730:	8004bf40 	call	8004bf4 <__sinit>
 8008734:	003e2b06 	br	8007fe4 <__alt_data_end+0xfc007fe4>
 8008738:	04e7c83a 	sub	r19,zero,r19
 800873c:	d8812115 	stw	r2,1156(sp)
 8008740:	ad400114 	ori	r21,r21,4
 8008744:	80c00007 	ldb	r3,0(r16)
 8008748:	003e7306 	br	8008118 <__alt_data_end+0xfc008118>
 800874c:	a880040c 	andi	r2,r21,16
 8008750:	1000e41e 	bne	r2,zero,8008ae4 <___vfiprintf_internal_r+0xb48>
 8008754:	a880100c 	andi	r2,r21,64
 8008758:	1000e226 	beq	r2,zero,8008ae4 <___vfiprintf_internal_r+0xb48>
 800875c:	da812117 	ldw	r10,1156(sp)
 8008760:	002d883a 	mov	r22,zero
 8008764:	0005883a 	mov	r2,zero
 8008768:	5480000b 	ldhu	r18,0(r10)
 800876c:	52800104 	addi	r10,r10,4
 8008770:	da812115 	stw	r10,1156(sp)
 8008774:	9009883a 	mov	r4,r18
 8008778:	003ee706 	br	8008318 <__alt_data_end+0xfc008318>
 800877c:	da812117 	ldw	r10,1156(sp)
 8008780:	00800044 	movi	r2,1
 8008784:	54800017 	ldw	r18,0(r10)
 8008788:	55800117 	ldw	r22,4(r10)
 800878c:	52800204 	addi	r10,r10,8
 8008790:	da812115 	stw	r10,1156(sp)
 8008794:	9588b03a 	or	r4,r18,r22
 8008798:	003edf06 	br	8008318 <__alt_data_end+0xfc008318>
 800879c:	02c20074 	movhi	r11,2049
 80087a0:	5aff4804 	addi	r11,r11,-736
 80087a4:	d9811d85 	stb	r6,1142(sp)
 80087a8:	dac12615 	stw	r11,1176(sp)
 80087ac:	a900080c 	andi	r4,r21,32
 80087b0:	d8812117 	ldw	r2,1156(sp)
 80087b4:	2000a526 	beq	r4,zero,8008a4c <___vfiprintf_internal_r+0xab0>
 80087b8:	da812117 	ldw	r10,1156(sp)
 80087bc:	14800017 	ldw	r18,0(r2)
 80087c0:	15800117 	ldw	r22,4(r2)
 80087c4:	52800204 	addi	r10,r10,8
 80087c8:	da812115 	stw	r10,1156(sp)
 80087cc:	a880004c 	andi	r2,r21,1
 80087d0:	1001d926 	beq	r2,zero,8008f38 <___vfiprintf_internal_r+0xf9c>
 80087d4:	9588b03a 	or	r4,r18,r22
 80087d8:	20024426 	beq	r4,zero,80090ec <___vfiprintf_internal_r+0x1150>
 80087dc:	00800c04 	movi	r2,48
 80087e0:	d8811d05 	stb	r2,1140(sp)
 80087e4:	d8c11d45 	stb	r3,1141(sp)
 80087e8:	ad400094 	ori	r21,r21,2
 80087ec:	00800084 	movi	r2,2
 80087f0:	003ec906 	br	8008318 <__alt_data_end+0xfc008318>
 80087f4:	da812117 	ldw	r10,1156(sp)
 80087f8:	04800044 	movi	r18,1
 80087fc:	dac10004 	addi	r11,sp,1024
 8008800:	50800017 	ldw	r2,0(r10)
 8008804:	52800104 	addi	r10,r10,4
 8008808:	d8011d85 	stb	zero,1142(sp)
 800880c:	d8810005 	stb	r2,1024(sp)
 8008810:	da812115 	stw	r10,1156(sp)
 8008814:	9023883a 	mov	r17,r18
 8008818:	dac12415 	stw	r11,1168(sp)
 800881c:	0013883a 	mov	r9,zero
 8008820:	003ee206 	br	80083ac <__alt_data_end+0xfc0083ac>
 8008824:	ad402014 	ori	r21,r21,128
 8008828:	80c00007 	ldb	r3,0(r16)
 800882c:	003e3a06 	br	8008118 <__alt_data_end+0xfc008118>
 8008830:	8015883a 	mov	r10,r16
 8008834:	0027883a 	mov	r19,zero
 8008838:	18bff404 	addi	r2,r3,-48
 800883c:	50c00007 	ldb	r3,0(r10)
 8008840:	9cc002a4 	muli	r19,r19,10
 8008844:	84000044 	addi	r16,r16,1
 8008848:	8015883a 	mov	r10,r16
 800884c:	98a7883a 	add	r19,r19,r2
 8008850:	18bff404 	addi	r2,r3,-48
 8008854:	28bff92e 	bgeu	r5,r2,800883c <__alt_data_end+0xfc00883c>
 8008858:	003e3006 	br	800811c <__alt_data_end+0xfc00811c>
 800885c:	ad400414 	ori	r21,r21,16
 8008860:	d9811d85 	stb	r6,1142(sp)
 8008864:	a880080c 	andi	r2,r21,32
 8008868:	d8c12117 	ldw	r3,1156(sp)
 800886c:	10004b26 	beq	r2,zero,800899c <___vfiprintf_internal_r+0xa00>
 8008870:	da812117 	ldw	r10,1156(sp)
 8008874:	18800117 	ldw	r2,4(r3)
 8008878:	1c800017 	ldw	r18,0(r3)
 800887c:	52800204 	addi	r10,r10,8
 8008880:	da812115 	stw	r10,1156(sp)
 8008884:	102d883a 	mov	r22,r2
 8008888:	1001f116 	blt	r2,zero,8009050 <___vfiprintf_internal_r+0x10b4>
 800888c:	db011d83 	ldbu	r12,1142(sp)
 8008890:	4823883a 	mov	r17,r9
 8008894:	00800044 	movi	r2,1
 8008898:	9588b03a 	or	r4,r18,r22
 800889c:	003ea106 	br	8008324 <__alt_data_end+0xfc008324>
 80088a0:	80c00007 	ldb	r3,0(r16)
 80088a4:	82800044 	addi	r10,r16,1
 80088a8:	1b027f26 	beq	r3,r12,80092a8 <___vfiprintf_internal_r+0x130c>
 80088ac:	18bff404 	addi	r2,r3,-48
 80088b0:	5021883a 	mov	r16,r10
 80088b4:	0013883a 	mov	r9,zero
 80088b8:	28be1836 	bltu	r5,r2,800811c <__alt_data_end+0xfc00811c>
 80088bc:	80c00007 	ldb	r3,0(r16)
 80088c0:	4a4002a4 	muli	r9,r9,10
 80088c4:	84000044 	addi	r16,r16,1
 80088c8:	1253883a 	add	r9,r2,r9
 80088cc:	18bff404 	addi	r2,r3,-48
 80088d0:	28bffa2e 	bgeu	r5,r2,80088bc <__alt_data_end+0xfc0088bc>
 80088d4:	483e110e 	bge	r9,zero,800811c <__alt_data_end+0xfc00811c>
 80088d8:	027fffc4 	movi	r9,-1
 80088dc:	003e0f06 	br	800811c <__alt_data_end+0xfc00811c>
 80088e0:	d9811d85 	stb	r6,1142(sp)
 80088e4:	a880080c 	andi	r2,r21,32
 80088e8:	1001ee26 	beq	r2,zero,80090a4 <___vfiprintf_internal_r+0x1108>
 80088ec:	da812117 	ldw	r10,1156(sp)
 80088f0:	dac12217 	ldw	r11,1160(sp)
 80088f4:	50800017 	ldw	r2,0(r10)
 80088f8:	5807d7fa 	srai	r3,r11,31
 80088fc:	52800104 	addi	r10,r10,4
 8008900:	da812115 	stw	r10,1156(sp)
 8008904:	12c00015 	stw	r11,0(r2)
 8008908:	10c00115 	stw	r3,4(r2)
 800890c:	003dd806 	br	8008070 <__alt_data_end+0xfc008070>
 8008910:	30803fcc 	andi	r2,r6,255
 8008914:	1080201c 	xori	r2,r2,128
 8008918:	10bfe004 	addi	r2,r2,-128
 800891c:	1001df1e 	bne	r2,zero,800909c <___vfiprintf_internal_r+0x1100>
 8008920:	01800804 	movi	r6,32
 8008924:	80c00007 	ldb	r3,0(r16)
 8008928:	003dfb06 	br	8008118 <__alt_data_end+0xfc008118>
 800892c:	da812117 	ldw	r10,1156(sp)
 8008930:	dac12117 	ldw	r11,1156(sp)
 8008934:	d8011d85 	stb	zero,1142(sp)
 8008938:	52800017 	ldw	r10,0(r10)
 800893c:	5d800104 	addi	r22,r11,4
 8008940:	da812415 	stw	r10,1168(sp)
 8008944:	50023b26 	beq	r10,zero,8009234 <___vfiprintf_internal_r+0x1298>
 8008948:	d9012417 	ldw	r4,1168(sp)
 800894c:	48021f16 	blt	r9,zero,80091cc <___vfiprintf_internal_r+0x1230>
 8008950:	480d883a 	mov	r6,r9
 8008954:	000b883a 	mov	r5,zero
 8008958:	da012a15 	stw	r8,1192(sp)
 800895c:	da412b15 	stw	r9,1196(sp)
 8008960:	80060ac0 	call	80060ac <memchr>
 8008964:	da012a17 	ldw	r8,1192(sp)
 8008968:	da412b17 	ldw	r9,1196(sp)
 800896c:	10024726 	beq	r2,zero,800928c <___vfiprintf_internal_r+0x12f0>
 8008970:	d8c12417 	ldw	r3,1168(sp)
 8008974:	10e3c83a 	sub	r17,r2,r3
 8008978:	4c41f616 	blt	r9,r17,8009154 <___vfiprintf_internal_r+0x11b8>
 800897c:	db011d83 	ldbu	r12,1142(sp)
 8008980:	dd812115 	stw	r22,1156(sp)
 8008984:	0013883a 	mov	r9,zero
 8008988:	003e8006 	br	800838c <__alt_data_end+0xfc00838c>
 800898c:	d9811d85 	stb	r6,1142(sp)
 8008990:	a880080c 	andi	r2,r21,32
 8008994:	d8c12117 	ldw	r3,1156(sp)
 8008998:	103fb51e 	bne	r2,zero,8008870 <__alt_data_end+0xfc008870>
 800899c:	a880040c 	andi	r2,r21,16
 80089a0:	10015e1e 	bne	r2,zero,8008f1c <___vfiprintf_internal_r+0xf80>
 80089a4:	a880100c 	andi	r2,r21,64
 80089a8:	10015c26 	beq	r2,zero,8008f1c <___vfiprintf_internal_r+0xf80>
 80089ac:	1c80000f 	ldh	r18,0(r3)
 80089b0:	da812117 	ldw	r10,1156(sp)
 80089b4:	902dd7fa 	srai	r22,r18,31
 80089b8:	52800104 	addi	r10,r10,4
 80089bc:	da812115 	stw	r10,1156(sp)
 80089c0:	b005883a 	mov	r2,r22
 80089c4:	003fb006 	br	8008888 <__alt_data_end+0xfc008888>
 80089c8:	da812117 	ldw	r10,1156(sp)
 80089cc:	00800c04 	movi	r2,48
 80089d0:	02c20074 	movhi	r11,2049
 80089d4:	54800017 	ldw	r18,0(r10)
 80089d8:	d8811d05 	stb	r2,1140(sp)
 80089dc:	52800104 	addi	r10,r10,4
 80089e0:	00801e04 	movi	r2,120
 80089e4:	5aff4d04 	addi	r11,r11,-716
 80089e8:	d8811d45 	stb	r2,1141(sp)
 80089ec:	002d883a 	mov	r22,zero
 80089f0:	ad400094 	ori	r21,r21,2
 80089f4:	da812115 	stw	r10,1156(sp)
 80089f8:	dac12615 	stw	r11,1176(sp)
 80089fc:	00800084 	movi	r2,2
 8008a00:	9009883a 	mov	r4,r18
 8008a04:	003e4406 	br	8008318 <__alt_data_end+0xfc008318>
 8008a08:	ad400814 	ori	r21,r21,32
 8008a0c:	80c00007 	ldb	r3,0(r16)
 8008a10:	003dc106 	br	8008118 <__alt_data_end+0xfc008118>
 8008a14:	ad401014 	ori	r21,r21,64
 8008a18:	80c00007 	ldb	r3,0(r16)
 8008a1c:	003dbe06 	br	8008118 <__alt_data_end+0xfc008118>
 8008a20:	80c00007 	ldb	r3,0(r16)
 8008a24:	19c1de26 	beq	r3,r7,80091a0 <___vfiprintf_internal_r+0x1204>
 8008a28:	ad400414 	ori	r21,r21,16
 8008a2c:	003dba06 	br	8008118 <__alt_data_end+0xfc008118>
 8008a30:	00820074 	movhi	r2,2049
 8008a34:	10bf4d04 	addi	r2,r2,-716
 8008a38:	d8812615 	stw	r2,1176(sp)
 8008a3c:	d9811d85 	stb	r6,1142(sp)
 8008a40:	a900080c 	andi	r4,r21,32
 8008a44:	d8812117 	ldw	r2,1156(sp)
 8008a48:	203f5b1e 	bne	r4,zero,80087b8 <__alt_data_end+0xfc0087b8>
 8008a4c:	a900040c 	andi	r4,r21,16
 8008a50:	2001a826 	beq	r4,zero,80090f4 <___vfiprintf_internal_r+0x1158>
 8008a54:	dac12117 	ldw	r11,1156(sp)
 8008a58:	14800017 	ldw	r18,0(r2)
 8008a5c:	002d883a 	mov	r22,zero
 8008a60:	5ac00104 	addi	r11,r11,4
 8008a64:	dac12115 	stw	r11,1156(sp)
 8008a68:	003f5806 	br	80087cc <__alt_data_end+0xfc0087cc>
 8008a6c:	da812117 	ldw	r10,1156(sp)
 8008a70:	54c00017 	ldw	r19,0(r10)
 8008a74:	50800104 	addi	r2,r10,4
 8008a78:	983f2f16 	blt	r19,zero,8008738 <__alt_data_end+0xfc008738>
 8008a7c:	d8812115 	stw	r2,1156(sp)
 8008a80:	80c00007 	ldb	r3,0(r16)
 8008a84:	003da406 	br	8008118 <__alt_data_end+0xfc008118>
 8008a88:	01800ac4 	movi	r6,43
 8008a8c:	80c00007 	ldb	r3,0(r16)
 8008a90:	003da106 	br	8008118 <__alt_data_end+0xfc008118>
 8008a94:	ad400054 	ori	r21,r21,1
 8008a98:	80c00007 	ldb	r3,0(r16)
 8008a9c:	003d9e06 	br	8008118 <__alt_data_end+0xfc008118>
 8008aa0:	d9811d85 	stb	r6,1142(sp)
 8008aa4:	18007126 	beq	r3,zero,8008c6c <___vfiprintf_internal_r+0xcd0>
 8008aa8:	04800044 	movi	r18,1
 8008aac:	d8c10005 	stb	r3,1024(sp)
 8008ab0:	d8c10004 	addi	r3,sp,1024
 8008ab4:	d8011d85 	stb	zero,1142(sp)
 8008ab8:	9023883a 	mov	r17,r18
 8008abc:	d8c12415 	stw	r3,1168(sp)
 8008ac0:	003f5606 	br	800881c <__alt_data_end+0xfc00881c>
 8008ac4:	dac12117 	ldw	r11,1156(sp)
 8008ac8:	002d883a 	mov	r22,zero
 8008acc:	00800044 	movi	r2,1
 8008ad0:	5c800017 	ldw	r18,0(r11)
 8008ad4:	5ac00104 	addi	r11,r11,4
 8008ad8:	dac12115 	stw	r11,1156(sp)
 8008adc:	9009883a 	mov	r4,r18
 8008ae0:	003e0d06 	br	8008318 <__alt_data_end+0xfc008318>
 8008ae4:	dac12117 	ldw	r11,1156(sp)
 8008ae8:	002d883a 	mov	r22,zero
 8008aec:	0005883a 	mov	r2,zero
 8008af0:	5c800017 	ldw	r18,0(r11)
 8008af4:	5ac00104 	addi	r11,r11,4
 8008af8:	dac12115 	stw	r11,1156(sp)
 8008afc:	9009883a 	mov	r4,r18
 8008b00:	003e0506 	br	8008318 <__alt_data_end+0xfc008318>
 8008b04:	d9012017 	ldw	r4,1152(sp)
 8008b08:	a00b883a 	mov	r5,r20
 8008b0c:	d9811a04 	addi	r6,sp,1128
 8008b10:	d8c12a15 	stw	r3,1192(sp)
 8008b14:	db012b15 	stw	r12,1196(sp)
 8008b18:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008b1c:	d8c12a17 	ldw	r3,1192(sp)
 8008b20:	db012b17 	ldw	r12,1196(sp)
 8008b24:	1000571e 	bne	r2,zero,8008c84 <___vfiprintf_internal_r+0xce8>
 8008b28:	d9811b17 	ldw	r6,1132(sp)
 8008b2c:	d8811c17 	ldw	r2,1136(sp)
 8008b30:	d811883a 	mov	r8,sp
 8008b34:	31400044 	addi	r5,r6,1
 8008b38:	003e3306 	br	8008408 <__alt_data_end+0xfc008408>
 8008b3c:	d9411b17 	ldw	r5,1132(sp)
 8008b40:	d8c11c17 	ldw	r3,1136(sp)
 8008b44:	28800044 	addi	r2,r5,1
 8008b48:	d9011d87 	ldb	r4,1142(sp)
 8008b4c:	203e4d26 	beq	r4,zero,8008484 <__alt_data_end+0xfc008484>
 8008b50:	01000044 	movi	r4,1
 8008b54:	d9411d84 	addi	r5,sp,1142
 8008b58:	1907883a 	add	r3,r3,r4
 8008b5c:	41400015 	stw	r5,0(r8)
 8008b60:	41000115 	stw	r4,4(r8)
 8008b64:	d8c11c15 	stw	r3,1136(sp)
 8008b68:	d8811b15 	stw	r2,1132(sp)
 8008b6c:	014001c4 	movi	r5,7
 8008b70:	2880aa16 	blt	r5,r2,8008e1c <___vfiprintf_internal_r+0xe80>
 8008b74:	100b883a 	mov	r5,r2
 8008b78:	42000204 	addi	r8,r8,8
 8008b7c:	10800044 	addi	r2,r2,1
 8008b80:	003e4006 	br	8008484 <__alt_data_end+0xfc008484>
 8008b84:	d9012017 	ldw	r4,1152(sp)
 8008b88:	a00b883a 	mov	r5,r20
 8008b8c:	d9811a04 	addi	r6,sp,1128
 8008b90:	d9c12a15 	stw	r7,1192(sp)
 8008b94:	db012b15 	stw	r12,1196(sp)
 8008b98:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008b9c:	d9c12a17 	ldw	r7,1192(sp)
 8008ba0:	db012b17 	ldw	r12,1196(sp)
 8008ba4:	1000371e 	bne	r2,zero,8008c84 <___vfiprintf_internal_r+0xce8>
 8008ba8:	d9411b17 	ldw	r5,1132(sp)
 8008bac:	d8c11c17 	ldw	r3,1136(sp)
 8008bb0:	d811883a 	mov	r8,sp
 8008bb4:	28800044 	addi	r2,r5,1
 8008bb8:	003e4d06 	br	80084f0 <__alt_data_end+0xfc0084f0>
 8008bbc:	10803fcc 	andi	r2,r2,255
 8008bc0:	00c00044 	movi	r3,1
 8008bc4:	10fddf1e 	bne	r2,r3,8008344 <__alt_data_end+0xfc008344>
 8008bc8:	b000021e 	bne	r22,zero,8008bd4 <___vfiprintf_internal_r+0xc38>
 8008bcc:	00800244 	movi	r2,9
 8008bd0:	1480202e 	bgeu	r2,r18,8008c54 <___vfiprintf_internal_r+0xcb8>
 8008bd4:	dc012515 	stw	r16,1172(sp)
 8008bd8:	dc410a04 	addi	r17,sp,1064
 8008bdc:	9021883a 	mov	r16,r18
 8008be0:	da012415 	stw	r8,1168(sp)
 8008be4:	b025883a 	mov	r18,r22
 8008be8:	da412315 	stw	r9,1164(sp)
 8008bec:	602d883a 	mov	r22,r12
 8008bf0:	8009883a 	mov	r4,r16
 8008bf4:	900b883a 	mov	r5,r18
 8008bf8:	01800284 	movi	r6,10
 8008bfc:	000f883a 	mov	r7,zero
 8008c00:	800a2740 	call	800a274 <__umoddi3>
 8008c04:	10800c04 	addi	r2,r2,48
 8008c08:	8c7fffc4 	addi	r17,r17,-1
 8008c0c:	8009883a 	mov	r4,r16
 8008c10:	900b883a 	mov	r5,r18
 8008c14:	01800284 	movi	r6,10
 8008c18:	000f883a 	mov	r7,zero
 8008c1c:	88800005 	stb	r2,0(r17)
 8008c20:	8009cb40 	call	8009cb4 <__udivdi3>
 8008c24:	1021883a 	mov	r16,r2
 8008c28:	10c4b03a 	or	r2,r2,r3
 8008c2c:	1825883a 	mov	r18,r3
 8008c30:	103fef1e 	bne	r2,zero,8008bf0 <__alt_data_end+0xfc008bf0>
 8008c34:	da811e17 	ldw	r10,1144(sp)
 8008c38:	da012417 	ldw	r8,1168(sp)
 8008c3c:	da412317 	ldw	r9,1164(sp)
 8008c40:	dc412415 	stw	r17,1168(sp)
 8008c44:	b019883a 	mov	r12,r22
 8008c48:	dc012517 	ldw	r16,1172(sp)
 8008c4c:	5463c83a 	sub	r17,r10,r17
 8008c50:	003dce06 	br	800838c <__alt_data_end+0xfc00838c>
 8008c54:	94800c04 	addi	r18,r18,48
 8008c58:	d8c109c4 	addi	r3,sp,1063
 8008c5c:	dc8109c5 	stb	r18,1063(sp)
 8008c60:	dc412717 	ldw	r17,1180(sp)
 8008c64:	d8c12415 	stw	r3,1168(sp)
 8008c68:	003dc806 	br	800838c <__alt_data_end+0xfc00838c>
 8008c6c:	d8811c17 	ldw	r2,1136(sp)
 8008c70:	10000426 	beq	r2,zero,8008c84 <___vfiprintf_internal_r+0xce8>
 8008c74:	d9012017 	ldw	r4,1152(sp)
 8008c78:	a00b883a 	mov	r5,r20
 8008c7c:	d9811a04 	addi	r6,sp,1128
 8008c80:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008c84:	a080030b 	ldhu	r2,12(r20)
 8008c88:	1080100c 	andi	r2,r2,64
 8008c8c:	103e9b1e 	bne	r2,zero,80086fc <__alt_data_end+0xfc0086fc>
 8008c90:	d8812217 	ldw	r2,1160(sp)
 8008c94:	003e9a06 	br	8008700 <__alt_data_end+0xfc008700>
 8008c98:	d9012017 	ldw	r4,1152(sp)
 8008c9c:	a00b883a 	mov	r5,r20
 8008ca0:	d9811a04 	addi	r6,sp,1128
 8008ca4:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008ca8:	103ff61e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008cac:	d9011b17 	ldw	r4,1132(sp)
 8008cb0:	d8c11c17 	ldw	r3,1136(sp)
 8008cb4:	d811883a 	mov	r8,sp
 8008cb8:	21400044 	addi	r5,r4,1
 8008cbc:	003e4006 	br	80085c0 <__alt_data_end+0xfc0085c0>
 8008cc0:	1800d61e 	bne	r3,zero,800901c <___vfiprintf_internal_r+0x1080>
 8008cc4:	dac12417 	ldw	r11,1168(sp)
 8008cc8:	00800044 	movi	r2,1
 8008ccc:	dc400115 	stw	r17,4(sp)
 8008cd0:	dac00015 	stw	r11,0(sp)
 8008cd4:	dc411c15 	stw	r17,1136(sp)
 8008cd8:	d8811b15 	stw	r2,1132(sp)
 8008cdc:	8807883a 	mov	r3,r17
 8008ce0:	d811883a 	mov	r8,sp
 8008ce4:	42000204 	addi	r8,r8,8
 8008ce8:	aac0010c 	andi	r11,r21,4
 8008cec:	58000226 	beq	r11,zero,8008cf8 <___vfiprintf_internal_r+0xd5c>
 8008cf0:	9ca3c83a 	sub	r17,r19,r18
 8008cf4:	047e2616 	blt	zero,r17,8008590 <__alt_data_end+0xfc008590>
 8008cf8:	94c0010e 	bge	r18,r19,8008d00 <___vfiprintf_internal_r+0xd64>
 8008cfc:	9825883a 	mov	r18,r19
 8008d00:	da812217 	ldw	r10,1160(sp)
 8008d04:	5495883a 	add	r10,r10,r18
 8008d08:	da812215 	stw	r10,1160(sp)
 8008d0c:	183e4826 	beq	r3,zero,8008630 <__alt_data_end+0xfc008630>
 8008d10:	d9012017 	ldw	r4,1152(sp)
 8008d14:	a00b883a 	mov	r5,r20
 8008d18:	d9811a04 	addi	r6,sp,1128
 8008d1c:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008d20:	103e4326 	beq	r2,zero,8008630 <__alt_data_end+0xfc008630>
 8008d24:	003fd706 	br	8008c84 <__alt_data_end+0xfc008c84>
 8008d28:	9cadc83a 	sub	r22,r19,r18
 8008d2c:	05bde40e 	bge	zero,r22,80084c0 <__alt_data_end+0xfc0084c0>
 8008d30:	03000404 	movi	r12,16
 8008d34:	6581500e 	bge	r12,r22,8009278 <___vfiprintf_internal_r+0x12dc>
 8008d38:	00820074 	movhi	r2,2049
 8008d3c:	10bfae04 	addi	r2,r2,-328
 8008d40:	d8812315 	stw	r2,1164(sp)
 8008d44:	8005883a 	mov	r2,r16
 8008d48:	038001c4 	movi	r14,7
 8008d4c:	b021883a 	mov	r16,r22
 8008d50:	da412515 	stw	r9,1172(sp)
 8008d54:	102d883a 	mov	r22,r2
 8008d58:	00000506 	br	8008d70 <___vfiprintf_internal_r+0xdd4>
 8008d5c:	29000084 	addi	r4,r5,2
 8008d60:	42000204 	addi	r8,r8,8
 8008d64:	100b883a 	mov	r5,r2
 8008d68:	843ffc04 	addi	r16,r16,-16
 8008d6c:	64000d0e 	bge	r12,r16,8008da4 <___vfiprintf_internal_r+0xe08>
 8008d70:	18c00404 	addi	r3,r3,16
 8008d74:	28800044 	addi	r2,r5,1
 8008d78:	45c00015 	stw	r23,0(r8)
 8008d7c:	43000115 	stw	r12,4(r8)
 8008d80:	d8c11c15 	stw	r3,1136(sp)
 8008d84:	d8811b15 	stw	r2,1132(sp)
 8008d88:	70bff40e 	bge	r14,r2,8008d5c <__alt_data_end+0xfc008d5c>
 8008d8c:	1800151e 	bne	r3,zero,8008de4 <___vfiprintf_internal_r+0xe48>
 8008d90:	843ffc04 	addi	r16,r16,-16
 8008d94:	000b883a 	mov	r5,zero
 8008d98:	01000044 	movi	r4,1
 8008d9c:	d811883a 	mov	r8,sp
 8008da0:	643ff316 	blt	r12,r16,8008d70 <__alt_data_end+0xfc008d70>
 8008da4:	da412517 	ldw	r9,1172(sp)
 8008da8:	b005883a 	mov	r2,r22
 8008dac:	802d883a 	mov	r22,r16
 8008db0:	1021883a 	mov	r16,r2
 8008db4:	da812317 	ldw	r10,1164(sp)
 8008db8:	1d87883a 	add	r3,r3,r22
 8008dbc:	45800115 	stw	r22,4(r8)
 8008dc0:	42800015 	stw	r10,0(r8)
 8008dc4:	d8c11c15 	stw	r3,1136(sp)
 8008dc8:	d9011b15 	stw	r4,1132(sp)
 8008dcc:	008001c4 	movi	r2,7
 8008dd0:	11008d16 	blt	r2,r4,8009008 <___vfiprintf_internal_r+0x106c>
 8008dd4:	42000204 	addi	r8,r8,8
 8008dd8:	20800044 	addi	r2,r4,1
 8008ddc:	200b883a 	mov	r5,r4
 8008de0:	003db706 	br	80084c0 <__alt_data_end+0xfc0084c0>
 8008de4:	d9012017 	ldw	r4,1152(sp)
 8008de8:	a00b883a 	mov	r5,r20
 8008dec:	d9811a04 	addi	r6,sp,1128
 8008df0:	db012b15 	stw	r12,1196(sp)
 8008df4:	db812a15 	stw	r14,1192(sp)
 8008df8:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008dfc:	db012b17 	ldw	r12,1196(sp)
 8008e00:	db812a17 	ldw	r14,1192(sp)
 8008e04:	103f9f1e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008e08:	d9411b17 	ldw	r5,1132(sp)
 8008e0c:	d8c11c17 	ldw	r3,1136(sp)
 8008e10:	d811883a 	mov	r8,sp
 8008e14:	29000044 	addi	r4,r5,1
 8008e18:	003fd306 	br	8008d68 <__alt_data_end+0xfc008d68>
 8008e1c:	18006c1e 	bne	r3,zero,8008fd0 <___vfiprintf_internal_r+0x1034>
 8008e20:	70004f26 	beq	r14,zero,8008f60 <___vfiprintf_internal_r+0xfc4>
 8008e24:	d8811d04 	addi	r2,sp,1140
 8008e28:	00c00084 	movi	r3,2
 8008e2c:	d8800015 	stw	r2,0(sp)
 8008e30:	d8c00115 	stw	r3,4(sp)
 8008e34:	2005883a 	mov	r2,r4
 8008e38:	d811883a 	mov	r8,sp
 8008e3c:	003d9b06 	br	80084ac <__alt_data_end+0xfc0084ac>
 8008e40:	1800571e 	bne	r3,zero,8008fa0 <___vfiprintf_internal_r+0x1004>
 8008e44:	000b883a 	mov	r5,zero
 8008e48:	00800044 	movi	r2,1
 8008e4c:	d811883a 	mov	r8,sp
 8008e50:	003d9906 	br	80084b8 <__alt_data_end+0xfc0084b8>
 8008e54:	10803fcc 	andi	r2,r2,255
 8008e58:	1000251e 	bne	r2,zero,8008ef0 <___vfiprintf_internal_r+0xf54>
 8008e5c:	a880004c 	andi	r2,r21,1
 8008e60:	10007826 	beq	r2,zero,8009044 <___vfiprintf_internal_r+0x10a8>
 8008e64:	00800c04 	movi	r2,48
 8008e68:	d8c109c4 	addi	r3,sp,1063
 8008e6c:	d88109c5 	stb	r2,1063(sp)
 8008e70:	dc412717 	ldw	r17,1180(sp)
 8008e74:	d8c12415 	stw	r3,1168(sp)
 8008e78:	003d4406 	br	800838c <__alt_data_end+0xfc00838c>
 8008e7c:	d9012617 	ldw	r4,1176(sp)
 8008e80:	dc410a04 	addi	r17,sp,1064
 8008e84:	908003cc 	andi	r2,r18,15
 8008e88:	b006973a 	slli	r3,r22,28
 8008e8c:	2085883a 	add	r2,r4,r2
 8008e90:	9024d13a 	srli	r18,r18,4
 8008e94:	10800003 	ldbu	r2,0(r2)
 8008e98:	b02cd13a 	srli	r22,r22,4
 8008e9c:	8c7fffc4 	addi	r17,r17,-1
 8008ea0:	1ca4b03a 	or	r18,r3,r18
 8008ea4:	88800005 	stb	r2,0(r17)
 8008ea8:	9584b03a 	or	r2,r18,r22
 8008eac:	103ff51e 	bne	r2,zero,8008e84 <__alt_data_end+0xfc008e84>
 8008eb0:	dac11e17 	ldw	r11,1144(sp)
 8008eb4:	dc412415 	stw	r17,1168(sp)
 8008eb8:	5c63c83a 	sub	r17,r11,r17
 8008ebc:	003d3306 	br	800838c <__alt_data_end+0xfc00838c>
 8008ec0:	1800941e 	bne	r3,zero,8009114 <___vfiprintf_internal_r+0x1178>
 8008ec4:	d8811d87 	ldb	r2,1142(sp)
 8008ec8:	10006b26 	beq	r2,zero,8009078 <___vfiprintf_internal_r+0x10dc>
 8008ecc:	00c00044 	movi	r3,1
 8008ed0:	d9011d84 	addi	r4,sp,1142
 8008ed4:	1805883a 	mov	r2,r3
 8008ed8:	d9000015 	stw	r4,0(sp)
 8008edc:	d8c00115 	stw	r3,4(sp)
 8008ee0:	d811883a 	mov	r8,sp
 8008ee4:	003f2306 	br	8008b74 <__alt_data_end+0xfc008b74>
 8008ee8:	8023883a 	mov	r17,r16
 8008eec:	003c7d06 	br	80080e4 <__alt_data_end+0xfc0080e4>
 8008ef0:	da810a04 	addi	r10,sp,1064
 8008ef4:	da812415 	stw	r10,1168(sp)
 8008ef8:	003d2406 	br	800838c <__alt_data_end+0xfc00838c>
 8008efc:	d9012017 	ldw	r4,1152(sp)
 8008f00:	a00b883a 	mov	r5,r20
 8008f04:	d9811a04 	addi	r6,sp,1128
 8008f08:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008f0c:	103f5d1e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008f10:	d8c11c17 	ldw	r3,1136(sp)
 8008f14:	d811883a 	mov	r8,sp
 8008f18:	003f7306 	br	8008ce8 <__alt_data_end+0xfc008ce8>
 8008f1c:	1c800017 	ldw	r18,0(r3)
 8008f20:	dac12117 	ldw	r11,1156(sp)
 8008f24:	902dd7fa 	srai	r22,r18,31
 8008f28:	5ac00104 	addi	r11,r11,4
 8008f2c:	dac12115 	stw	r11,1156(sp)
 8008f30:	b005883a 	mov	r2,r22
 8008f34:	003e5406 	br	8008888 <__alt_data_end+0xfc008888>
 8008f38:	00800084 	movi	r2,2
 8008f3c:	9588b03a 	or	r4,r18,r22
 8008f40:	003cf506 	br	8008318 <__alt_data_end+0xfc008318>
 8008f44:	d9012017 	ldw	r4,1152(sp)
 8008f48:	a00b883a 	mov	r5,r20
 8008f4c:	d9811a04 	addi	r6,sp,1128
 8008f50:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008f54:	103f4b1e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008f58:	d811883a 	mov	r8,sp
 8008f5c:	003cd106 	br	80082a4 <__alt_data_end+0xfc0082a4>
 8008f60:	000b883a 	mov	r5,zero
 8008f64:	2005883a 	mov	r2,r4
 8008f68:	d811883a 	mov	r8,sp
 8008f6c:	003d5206 	br	80084b8 <__alt_data_end+0xfc0084b8>
 8008f70:	10803fcc 	andi	r2,r2,255
 8008f74:	1080201c 	xori	r2,r2,128
 8008f78:	10bfe004 	addi	r2,r2,-128
 8008f7c:	01000c04 	movi	r4,48
 8008f80:	11008e26 	beq	r2,r4,80091bc <___vfiprintf_internal_r+0x1220>
 8008f84:	da812417 	ldw	r10,1168(sp)
 8008f88:	dac11e17 	ldw	r11,1144(sp)
 8008f8c:	193fffc5 	stb	r4,-1(r3)
 8008f90:	52bfffc4 	addi	r10,r10,-1
 8008f94:	da812415 	stw	r10,1168(sp)
 8008f98:	5aa3c83a 	sub	r17,r11,r10
 8008f9c:	003cfb06 	br	800838c <__alt_data_end+0xfc00838c>
 8008fa0:	d9012017 	ldw	r4,1152(sp)
 8008fa4:	a00b883a 	mov	r5,r20
 8008fa8:	d9811a04 	addi	r6,sp,1128
 8008fac:	da412b15 	stw	r9,1196(sp)
 8008fb0:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008fb4:	da412b17 	ldw	r9,1196(sp)
 8008fb8:	103f321e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008fbc:	d9411b17 	ldw	r5,1132(sp)
 8008fc0:	d8c11c17 	ldw	r3,1136(sp)
 8008fc4:	d811883a 	mov	r8,sp
 8008fc8:	28800044 	addi	r2,r5,1
 8008fcc:	003d3a06 	br	80084b8 <__alt_data_end+0xfc0084b8>
 8008fd0:	d9012017 	ldw	r4,1152(sp)
 8008fd4:	a00b883a 	mov	r5,r20
 8008fd8:	d9811a04 	addi	r6,sp,1128
 8008fdc:	da412b15 	stw	r9,1196(sp)
 8008fe0:	db812a15 	stw	r14,1192(sp)
 8008fe4:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8008fe8:	da412b17 	ldw	r9,1196(sp)
 8008fec:	db812a17 	ldw	r14,1192(sp)
 8008ff0:	103f241e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008ff4:	d9411b17 	ldw	r5,1132(sp)
 8008ff8:	d8c11c17 	ldw	r3,1136(sp)
 8008ffc:	d811883a 	mov	r8,sp
 8009000:	28800044 	addi	r2,r5,1
 8009004:	003d1f06 	br	8008484 <__alt_data_end+0xfc008484>
 8009008:	1800781e 	bne	r3,zero,80091ec <___vfiprintf_internal_r+0x1250>
 800900c:	000b883a 	mov	r5,zero
 8009010:	00800044 	movi	r2,1
 8009014:	d811883a 	mov	r8,sp
 8009018:	003d2906 	br	80084c0 <__alt_data_end+0xfc0084c0>
 800901c:	d9012017 	ldw	r4,1152(sp)
 8009020:	a00b883a 	mov	r5,r20
 8009024:	d9811a04 	addi	r6,sp,1128
 8009028:	8007e880 	call	8007e88 <__sprint_r.part.0>
 800902c:	103f151e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8009030:	d8811b17 	ldw	r2,1132(sp)
 8009034:	d8c11c17 	ldw	r3,1136(sp)
 8009038:	d811883a 	mov	r8,sp
 800903c:	10800044 	addi	r2,r2,1
 8009040:	003d4406 	br	8008554 <__alt_data_end+0xfc008554>
 8009044:	dac10a04 	addi	r11,sp,1064
 8009048:	dac12415 	stw	r11,1168(sp)
 800904c:	003ccf06 	br	800838c <__alt_data_end+0xfc00838c>
 8009050:	04a5c83a 	sub	r18,zero,r18
 8009054:	9004c03a 	cmpne	r2,r18,zero
 8009058:	05adc83a 	sub	r22,zero,r22
 800905c:	b0adc83a 	sub	r22,r22,r2
 8009060:	03000b44 	movi	r12,45
 8009064:	db011d85 	stb	r12,1142(sp)
 8009068:	4823883a 	mov	r17,r9
 800906c:	00800044 	movi	r2,1
 8009070:	9588b03a 	or	r4,r18,r22
 8009074:	003cab06 	br	8008324 <__alt_data_end+0xfc008324>
 8009078:	000b883a 	mov	r5,zero
 800907c:	00800044 	movi	r2,1
 8009080:	d811883a 	mov	r8,sp
 8009084:	703d0c26 	beq	r14,zero,80084b8 <__alt_data_end+0xfc0084b8>
 8009088:	00c00084 	movi	r3,2
 800908c:	d9011d04 	addi	r4,sp,1140
 8009090:	d9000015 	stw	r4,0(sp)
 8009094:	d8c00115 	stw	r3,4(sp)
 8009098:	003d0406 	br	80084ac <__alt_data_end+0xfc0084ac>
 800909c:	80c00007 	ldb	r3,0(r16)
 80090a0:	003c1d06 	br	8008118 <__alt_data_end+0xfc008118>
 80090a4:	a880040c 	andi	r2,r21,16
 80090a8:	1000091e 	bne	r2,zero,80090d0 <___vfiprintf_internal_r+0x1134>
 80090ac:	aac0100c 	andi	r11,r21,64
 80090b0:	58000726 	beq	r11,zero,80090d0 <___vfiprintf_internal_r+0x1134>
 80090b4:	da812117 	ldw	r10,1156(sp)
 80090b8:	dac12217 	ldw	r11,1160(sp)
 80090bc:	50800017 	ldw	r2,0(r10)
 80090c0:	52800104 	addi	r10,r10,4
 80090c4:	da812115 	stw	r10,1156(sp)
 80090c8:	12c0000d 	sth	r11,0(r2)
 80090cc:	003be806 	br	8008070 <__alt_data_end+0xfc008070>
 80090d0:	da812117 	ldw	r10,1156(sp)
 80090d4:	dac12217 	ldw	r11,1160(sp)
 80090d8:	50800017 	ldw	r2,0(r10)
 80090dc:	52800104 	addi	r10,r10,4
 80090e0:	da812115 	stw	r10,1156(sp)
 80090e4:	12c00015 	stw	r11,0(r2)
 80090e8:	003be106 	br	8008070 <__alt_data_end+0xfc008070>
 80090ec:	00800084 	movi	r2,2
 80090f0:	003c8906 	br	8008318 <__alt_data_end+0xfc008318>
 80090f4:	a900100c 	andi	r4,r21,64
 80090f8:	20001f26 	beq	r4,zero,8009178 <___vfiprintf_internal_r+0x11dc>
 80090fc:	da812117 	ldw	r10,1156(sp)
 8009100:	1480000b 	ldhu	r18,0(r2)
 8009104:	002d883a 	mov	r22,zero
 8009108:	52800104 	addi	r10,r10,4
 800910c:	da812115 	stw	r10,1156(sp)
 8009110:	003dae06 	br	80087cc <__alt_data_end+0xfc0087cc>
 8009114:	d9012017 	ldw	r4,1152(sp)
 8009118:	a00b883a 	mov	r5,r20
 800911c:	d9811a04 	addi	r6,sp,1128
 8009120:	da412b15 	stw	r9,1196(sp)
 8009124:	db812a15 	stw	r14,1192(sp)
 8009128:	8007e880 	call	8007e88 <__sprint_r.part.0>
 800912c:	da412b17 	ldw	r9,1196(sp)
 8009130:	db812a17 	ldw	r14,1192(sp)
 8009134:	103ed31e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8009138:	d9411b17 	ldw	r5,1132(sp)
 800913c:	d8c11c17 	ldw	r3,1136(sp)
 8009140:	d811883a 	mov	r8,sp
 8009144:	28800044 	addi	r2,r5,1
 8009148:	003e7f06 	br	8008b48 <__alt_data_end+0xfc008b48>
 800914c:	9825883a 	mov	r18,r19
 8009150:	003d3406 	br	8008624 <__alt_data_end+0xfc008624>
 8009154:	4823883a 	mov	r17,r9
 8009158:	003e0806 	br	800897c <__alt_data_end+0xfc00897c>
 800915c:	d9012017 	ldw	r4,1152(sp)
 8009160:	a00b883a 	mov	r5,r20
 8009164:	d9811a04 	addi	r6,sp,1128
 8009168:	8007e880 	call	8007e88 <__sprint_r.part.0>
 800916c:	103ec51e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8009170:	d8c11c17 	ldw	r3,1136(sp)
 8009174:	003ee006 	br	8008cf8 <__alt_data_end+0xfc008cf8>
 8009178:	dac12117 	ldw	r11,1156(sp)
 800917c:	14800017 	ldw	r18,0(r2)
 8009180:	002d883a 	mov	r22,zero
 8009184:	5ac00104 	addi	r11,r11,4
 8009188:	dac12115 	stw	r11,1156(sp)
 800918c:	003d8f06 	br	80087cc <__alt_data_end+0xfc0087cc>
 8009190:	02c20074 	movhi	r11,2049
 8009194:	5affae04 	addi	r11,r11,-328
 8009198:	dac12315 	stw	r11,1164(sp)
 800919c:	003ce306 	br	800852c <__alt_data_end+0xfc00852c>
 80091a0:	80c00043 	ldbu	r3,1(r16)
 80091a4:	ad400814 	ori	r21,r21,32
 80091a8:	84000044 	addi	r16,r16,1
 80091ac:	18c03fcc 	andi	r3,r3,255
 80091b0:	18c0201c 	xori	r3,r3,128
 80091b4:	18ffe004 	addi	r3,r3,-128
 80091b8:	003bd706 	br	8008118 <__alt_data_end+0xfc008118>
 80091bc:	dac11e17 	ldw	r11,1144(sp)
 80091c0:	d8c12417 	ldw	r3,1168(sp)
 80091c4:	58e3c83a 	sub	r17,r11,r3
 80091c8:	003c7006 	br	800838c <__alt_data_end+0xfc00838c>
 80091cc:	da012a15 	stw	r8,1192(sp)
 80091d0:	8000b3c0 	call	8000b3c <strlen>
 80091d4:	1023883a 	mov	r17,r2
 80091d8:	db011d83 	ldbu	r12,1142(sp)
 80091dc:	dd812115 	stw	r22,1156(sp)
 80091e0:	0013883a 	mov	r9,zero
 80091e4:	da012a17 	ldw	r8,1192(sp)
 80091e8:	003c6806 	br	800838c <__alt_data_end+0xfc00838c>
 80091ec:	d9012017 	ldw	r4,1152(sp)
 80091f0:	a00b883a 	mov	r5,r20
 80091f4:	d9811a04 	addi	r6,sp,1128
 80091f8:	da412b15 	stw	r9,1196(sp)
 80091fc:	8007e880 	call	8007e88 <__sprint_r.part.0>
 8009200:	da412b17 	ldw	r9,1196(sp)
 8009204:	103e9f1e 	bne	r2,zero,8008c84 <__alt_data_end+0xfc008c84>
 8009208:	d9411b17 	ldw	r5,1132(sp)
 800920c:	d8c11c17 	ldw	r3,1136(sp)
 8009210:	d811883a 	mov	r8,sp
 8009214:	28800044 	addi	r2,r5,1
 8009218:	003ca906 	br	80084c0 <__alt_data_end+0xfc0084c0>
 800921c:	d9411b17 	ldw	r5,1132(sp)
 8009220:	01020074 	movhi	r4,2049
 8009224:	213fb204 	addi	r4,r4,-312
 8009228:	d9012315 	stw	r4,1164(sp)
 800922c:	29400044 	addi	r5,r5,1
 8009230:	003c8806 	br	8008454 <__alt_data_end+0xfc008454>
 8009234:	00800184 	movi	r2,6
 8009238:	1240012e 	bgeu	r2,r9,8009240 <___vfiprintf_internal_r+0x12a4>
 800923c:	1013883a 	mov	r9,r2
 8009240:	4823883a 	mov	r17,r9
 8009244:	4825883a 	mov	r18,r9
 8009248:	48001516 	blt	r9,zero,80092a0 <___vfiprintf_internal_r+0x1304>
 800924c:	00820074 	movhi	r2,2049
 8009250:	10bf5204 	addi	r2,r2,-696
 8009254:	dd812115 	stw	r22,1156(sp)
 8009258:	d8812415 	stw	r2,1168(sp)
 800925c:	003d6f06 	br	800881c <__alt_data_end+0xfc00881c>
 8009260:	d9411b17 	ldw	r5,1132(sp)
 8009264:	02c20074 	movhi	r11,2049
 8009268:	5affb204 	addi	r11,r11,-312
 800926c:	dac12315 	stw	r11,1164(sp)
 8009270:	29400044 	addi	r5,r5,1
 8009274:	003ce106 	br	80085fc <__alt_data_end+0xfc0085fc>
 8009278:	01020074 	movhi	r4,2049
 800927c:	213fae04 	addi	r4,r4,-328
 8009280:	d9012315 	stw	r4,1164(sp)
 8009284:	1009883a 	mov	r4,r2
 8009288:	003eca06 	br	8008db4 <__alt_data_end+0xfc008db4>
 800928c:	4823883a 	mov	r17,r9
 8009290:	db011d83 	ldbu	r12,1142(sp)
 8009294:	dd812115 	stw	r22,1156(sp)
 8009298:	0013883a 	mov	r9,zero
 800929c:	003c3b06 	br	800838c <__alt_data_end+0xfc00838c>
 80092a0:	0025883a 	mov	r18,zero
 80092a4:	003fe906 	br	800924c <__alt_data_end+0xfc00924c>
 80092a8:	dac12117 	ldw	r11,1156(sp)
 80092ac:	8005883a 	mov	r2,r16
 80092b0:	5021883a 	mov	r16,r10
 80092b4:	5a400017 	ldw	r9,0(r11)
 80092b8:	58c00104 	addi	r3,r11,4
 80092bc:	d8c12115 	stw	r3,1156(sp)
 80092c0:	48000a16 	blt	r9,zero,80092ec <___vfiprintf_internal_r+0x1350>
 80092c4:	10c00047 	ldb	r3,1(r2)
 80092c8:	003b9306 	br	8008118 <__alt_data_end+0xfc008118>
 80092cc:	043fffc4 	movi	r16,-1
 80092d0:	003d0206 	br	80086dc <__alt_data_end+0xfc0086dc>
 80092d4:	94c0010e 	bge	r18,r19,80092dc <___vfiprintf_internal_r+0x1340>
 80092d8:	9825883a 	mov	r18,r19
 80092dc:	da812217 	ldw	r10,1160(sp)
 80092e0:	5495883a 	add	r10,r10,r18
 80092e4:	da812215 	stw	r10,1160(sp)
 80092e8:	003cd106 	br	8008630 <__alt_data_end+0xfc008630>
 80092ec:	027fffc4 	movi	r9,-1
 80092f0:	10c00047 	ldb	r3,1(r2)
 80092f4:	003b8806 	br	8008118 <__alt_data_end+0xfc008118>

080092f8 <__vfiprintf_internal>:
 80092f8:	2007883a 	mov	r3,r4
 80092fc:	01020074 	movhi	r4,2049
 8009300:	2106c004 	addi	r4,r4,6912
 8009304:	21000017 	ldw	r4,0(r4)
 8009308:	2805883a 	mov	r2,r5
 800930c:	300f883a 	mov	r7,r6
 8009310:	180b883a 	mov	r5,r3
 8009314:	100d883a 	mov	r6,r2
 8009318:	8007f9c1 	jmpi	8007f9c <___vfiprintf_internal_r>

0800931c <__swbuf_r>:
 800931c:	defffc04 	addi	sp,sp,-16
 8009320:	dc800215 	stw	r18,8(sp)
 8009324:	dc400115 	stw	r17,4(sp)
 8009328:	dc000015 	stw	r16,0(sp)
 800932c:	dfc00315 	stw	ra,12(sp)
 8009330:	2025883a 	mov	r18,r4
 8009334:	2823883a 	mov	r17,r5
 8009338:	3021883a 	mov	r16,r6
 800933c:	20000226 	beq	r4,zero,8009348 <__swbuf_r+0x2c>
 8009340:	20800e17 	ldw	r2,56(r4)
 8009344:	10004126 	beq	r2,zero,800944c <__swbuf_r+0x130>
 8009348:	80c00617 	ldw	r3,24(r16)
 800934c:	8180030b 	ldhu	r6,12(r16)
 8009350:	80c00215 	stw	r3,8(r16)
 8009354:	30c0020c 	andi	r3,r6,8
 8009358:	18003526 	beq	r3,zero,8009430 <__swbuf_r+0x114>
 800935c:	80c00417 	ldw	r3,16(r16)
 8009360:	18003326 	beq	r3,zero,8009430 <__swbuf_r+0x114>
 8009364:	3088000c 	andi	r2,r6,8192
 8009368:	8c403fcc 	andi	r17,r17,255
 800936c:	10001726 	beq	r2,zero,80093cc <__swbuf_r+0xb0>
 8009370:	80800017 	ldw	r2,0(r16)
 8009374:	81000517 	ldw	r4,20(r16)
 8009378:	10c7c83a 	sub	r3,r2,r3
 800937c:	19001d0e 	bge	r3,r4,80093f4 <__swbuf_r+0xd8>
 8009380:	18c00044 	addi	r3,r3,1
 8009384:	81400217 	ldw	r5,8(r16)
 8009388:	11000044 	addi	r4,r2,1
 800938c:	81000015 	stw	r4,0(r16)
 8009390:	297fffc4 	addi	r5,r5,-1
 8009394:	81400215 	stw	r5,8(r16)
 8009398:	14400005 	stb	r17,0(r2)
 800939c:	80800517 	ldw	r2,20(r16)
 80093a0:	10c01d26 	beq	r2,r3,8009418 <__swbuf_r+0xfc>
 80093a4:	8080030b 	ldhu	r2,12(r16)
 80093a8:	1080004c 	andi	r2,r2,1
 80093ac:	1000181e 	bne	r2,zero,8009410 <__swbuf_r+0xf4>
 80093b0:	8805883a 	mov	r2,r17
 80093b4:	dfc00317 	ldw	ra,12(sp)
 80093b8:	dc800217 	ldw	r18,8(sp)
 80093bc:	dc400117 	ldw	r17,4(sp)
 80093c0:	dc000017 	ldw	r16,0(sp)
 80093c4:	dec00404 	addi	sp,sp,16
 80093c8:	f800283a 	ret
 80093cc:	81001917 	ldw	r4,100(r16)
 80093d0:	00b7ffc4 	movi	r2,-8193
 80093d4:	31880014 	ori	r6,r6,8192
 80093d8:	2084703a 	and	r2,r4,r2
 80093dc:	80801915 	stw	r2,100(r16)
 80093e0:	80800017 	ldw	r2,0(r16)
 80093e4:	81000517 	ldw	r4,20(r16)
 80093e8:	8180030d 	sth	r6,12(r16)
 80093ec:	10c7c83a 	sub	r3,r2,r3
 80093f0:	193fe316 	blt	r3,r4,8009380 <__alt_data_end+0xfc009380>
 80093f4:	9009883a 	mov	r4,r18
 80093f8:	800b883a 	mov	r5,r16
 80093fc:	800464c0 	call	800464c <_fflush_r>
 8009400:	1000091e 	bne	r2,zero,8009428 <__swbuf_r+0x10c>
 8009404:	80800017 	ldw	r2,0(r16)
 8009408:	00c00044 	movi	r3,1
 800940c:	003fdd06 	br	8009384 <__alt_data_end+0xfc009384>
 8009410:	00800284 	movi	r2,10
 8009414:	88bfe61e 	bne	r17,r2,80093b0 <__alt_data_end+0xfc0093b0>
 8009418:	9009883a 	mov	r4,r18
 800941c:	800b883a 	mov	r5,r16
 8009420:	800464c0 	call	800464c <_fflush_r>
 8009424:	103fe226 	beq	r2,zero,80093b0 <__alt_data_end+0xfc0093b0>
 8009428:	00bfffc4 	movi	r2,-1
 800942c:	003fe106 	br	80093b4 <__alt_data_end+0xfc0093b4>
 8009430:	9009883a 	mov	r4,r18
 8009434:	800b883a 	mov	r5,r16
 8009438:	8002bf40 	call	8002bf4 <__swsetup_r>
 800943c:	1000051e 	bne	r2,zero,8009454 <__swbuf_r+0x138>
 8009440:	8180030b 	ldhu	r6,12(r16)
 8009444:	80c00417 	ldw	r3,16(r16)
 8009448:	003fc606 	br	8009364 <__alt_data_end+0xfc009364>
 800944c:	8004bf40 	call	8004bf4 <__sinit>
 8009450:	003fbd06 	br	8009348 <__alt_data_end+0xfc009348>
 8009454:	80c0030b 	ldhu	r3,12(r16)
 8009458:	00bfffc4 	movi	r2,-1
 800945c:	18c01014 	ori	r3,r3,64
 8009460:	80c0030d 	sth	r3,12(r16)
 8009464:	00c00244 	movi	r3,9
 8009468:	90c00015 	stw	r3,0(r18)
 800946c:	003fd106 	br	80093b4 <__alt_data_end+0xfc0093b4>

08009470 <__swbuf>:
 8009470:	00c20074 	movhi	r3,2049
 8009474:	18c6c004 	addi	r3,r3,6912
 8009478:	2005883a 	mov	r2,r4
 800947c:	19000017 	ldw	r4,0(r3)
 8009480:	280d883a 	mov	r6,r5
 8009484:	100b883a 	mov	r5,r2
 8009488:	800931c1 	jmpi	800931c <__swbuf_r>

0800948c <_write_r>:
 800948c:	defffd04 	addi	sp,sp,-12
 8009490:	dc000015 	stw	r16,0(sp)
 8009494:	04020074 	movhi	r16,2049
 8009498:	dc400115 	stw	r17,4(sp)
 800949c:	840d9b04 	addi	r16,r16,13932
 80094a0:	2023883a 	mov	r17,r4
 80094a4:	2809883a 	mov	r4,r5
 80094a8:	300b883a 	mov	r5,r6
 80094ac:	380d883a 	mov	r6,r7
 80094b0:	dfc00215 	stw	ra,8(sp)
 80094b4:	80000015 	stw	zero,0(r16)
 80094b8:	800d7dc0 	call	800d7dc <write>
 80094bc:	00ffffc4 	movi	r3,-1
 80094c0:	10c00526 	beq	r2,r3,80094d8 <_write_r+0x4c>
 80094c4:	dfc00217 	ldw	ra,8(sp)
 80094c8:	dc400117 	ldw	r17,4(sp)
 80094cc:	dc000017 	ldw	r16,0(sp)
 80094d0:	dec00304 	addi	sp,sp,12
 80094d4:	f800283a 	ret
 80094d8:	80c00017 	ldw	r3,0(r16)
 80094dc:	183ff926 	beq	r3,zero,80094c4 <__alt_data_end+0xfc0094c4>
 80094e0:	88c00015 	stw	r3,0(r17)
 80094e4:	003ff706 	br	80094c4 <__alt_data_end+0xfc0094c4>

080094e8 <_close_r>:
 80094e8:	defffd04 	addi	sp,sp,-12
 80094ec:	dc000015 	stw	r16,0(sp)
 80094f0:	04020074 	movhi	r16,2049
 80094f4:	dc400115 	stw	r17,4(sp)
 80094f8:	840d9b04 	addi	r16,r16,13932
 80094fc:	2023883a 	mov	r17,r4
 8009500:	2809883a 	mov	r4,r5
 8009504:	dfc00215 	stw	ra,8(sp)
 8009508:	80000015 	stw	zero,0(r16)
 800950c:	800cf800 	call	800cf80 <close>
 8009510:	00ffffc4 	movi	r3,-1
 8009514:	10c00526 	beq	r2,r3,800952c <_close_r+0x44>
 8009518:	dfc00217 	ldw	ra,8(sp)
 800951c:	dc400117 	ldw	r17,4(sp)
 8009520:	dc000017 	ldw	r16,0(sp)
 8009524:	dec00304 	addi	sp,sp,12
 8009528:	f800283a 	ret
 800952c:	80c00017 	ldw	r3,0(r16)
 8009530:	183ff926 	beq	r3,zero,8009518 <__alt_data_end+0xfc009518>
 8009534:	88c00015 	stw	r3,0(r17)
 8009538:	003ff706 	br	8009518 <__alt_data_end+0xfc009518>

0800953c <_calloc_r>:
 800953c:	298b383a 	mul	r5,r5,r6
 8009540:	defffe04 	addi	sp,sp,-8
 8009544:	dc000015 	stw	r16,0(sp)
 8009548:	dfc00115 	stw	ra,4(sp)
 800954c:	80059040 	call	8005904 <_malloc_r>
 8009550:	1021883a 	mov	r16,r2
 8009554:	10002826 	beq	r2,zero,80095f8 <_calloc_r+0xbc>
 8009558:	11bfff17 	ldw	r6,-4(r2)
 800955c:	00bfff04 	movi	r2,-4
 8009560:	00c00904 	movi	r3,36
 8009564:	308c703a 	and	r6,r6,r2
 8009568:	308d883a 	add	r6,r6,r2
 800956c:	19801436 	bltu	r3,r6,80095c0 <_calloc_r+0x84>
 8009570:	008004c4 	movi	r2,19
 8009574:	11800936 	bltu	r2,r6,800959c <_calloc_r+0x60>
 8009578:	8005883a 	mov	r2,r16
 800957c:	10000015 	stw	zero,0(r2)
 8009580:	10000115 	stw	zero,4(r2)
 8009584:	10000215 	stw	zero,8(r2)
 8009588:	8005883a 	mov	r2,r16
 800958c:	dfc00117 	ldw	ra,4(sp)
 8009590:	dc000017 	ldw	r16,0(sp)
 8009594:	dec00204 	addi	sp,sp,8
 8009598:	f800283a 	ret
 800959c:	80000015 	stw	zero,0(r16)
 80095a0:	80000115 	stw	zero,4(r16)
 80095a4:	008006c4 	movi	r2,27
 80095a8:	11800d2e 	bgeu	r2,r6,80095e0 <_calloc_r+0xa4>
 80095ac:	80000215 	stw	zero,8(r16)
 80095b0:	80000315 	stw	zero,12(r16)
 80095b4:	30c00c26 	beq	r6,r3,80095e8 <_calloc_r+0xac>
 80095b8:	80800404 	addi	r2,r16,16
 80095bc:	003fef06 	br	800957c <__alt_data_end+0xfc00957c>
 80095c0:	8009883a 	mov	r4,r16
 80095c4:	000b883a 	mov	r5,zero
 80095c8:	80064280 	call	8006428 <memset>
 80095cc:	8005883a 	mov	r2,r16
 80095d0:	dfc00117 	ldw	ra,4(sp)
 80095d4:	dc000017 	ldw	r16,0(sp)
 80095d8:	dec00204 	addi	sp,sp,8
 80095dc:	f800283a 	ret
 80095e0:	80800204 	addi	r2,r16,8
 80095e4:	003fe506 	br	800957c <__alt_data_end+0xfc00957c>
 80095e8:	80000415 	stw	zero,16(r16)
 80095ec:	80800604 	addi	r2,r16,24
 80095f0:	80000515 	stw	zero,20(r16)
 80095f4:	003fe106 	br	800957c <__alt_data_end+0xfc00957c>
 80095f8:	0005883a 	mov	r2,zero
 80095fc:	003fe306 	br	800958c <__alt_data_end+0xfc00958c>

08009600 <_fclose_r>:
 8009600:	28003226 	beq	r5,zero,80096cc <_fclose_r+0xcc>
 8009604:	defffc04 	addi	sp,sp,-16
 8009608:	dc400115 	stw	r17,4(sp)
 800960c:	2023883a 	mov	r17,r4
 8009610:	dc000015 	stw	r16,0(sp)
 8009614:	dfc00315 	stw	ra,12(sp)
 8009618:	dc800215 	stw	r18,8(sp)
 800961c:	2821883a 	mov	r16,r5
 8009620:	8004c040 	call	8004c04 <__sfp_lock_acquire>
 8009624:	88000226 	beq	r17,zero,8009630 <_fclose_r+0x30>
 8009628:	88800e17 	ldw	r2,56(r17)
 800962c:	10002926 	beq	r2,zero,80096d4 <_fclose_r+0xd4>
 8009630:	8080030f 	ldh	r2,12(r16)
 8009634:	10002226 	beq	r2,zero,80096c0 <_fclose_r+0xc0>
 8009638:	8809883a 	mov	r4,r17
 800963c:	800b883a 	mov	r5,r16
 8009640:	800464c0 	call	800464c <_fflush_r>
 8009644:	1025883a 	mov	r18,r2
 8009648:	80800b17 	ldw	r2,44(r16)
 800964c:	10000426 	beq	r2,zero,8009660 <_fclose_r+0x60>
 8009650:	81400717 	ldw	r5,28(r16)
 8009654:	8809883a 	mov	r4,r17
 8009658:	103ee83a 	callr	r2
 800965c:	10002616 	blt	r2,zero,80096f8 <_fclose_r+0xf8>
 8009660:	8080030b 	ldhu	r2,12(r16)
 8009664:	1080200c 	andi	r2,r2,128
 8009668:	10001f1e 	bne	r2,zero,80096e8 <_fclose_r+0xe8>
 800966c:	81400c17 	ldw	r5,48(r16)
 8009670:	28000526 	beq	r5,zero,8009688 <_fclose_r+0x88>
 8009674:	80801004 	addi	r2,r16,64
 8009678:	28800226 	beq	r5,r2,8009684 <_fclose_r+0x84>
 800967c:	8809883a 	mov	r4,r17
 8009680:	8004d680 	call	8004d68 <_free_r>
 8009684:	80000c15 	stw	zero,48(r16)
 8009688:	81401117 	ldw	r5,68(r16)
 800968c:	28000326 	beq	r5,zero,800969c <_fclose_r+0x9c>
 8009690:	8809883a 	mov	r4,r17
 8009694:	8004d680 	call	8004d68 <_free_r>
 8009698:	80001115 	stw	zero,68(r16)
 800969c:	8000030d 	sth	zero,12(r16)
 80096a0:	8004c080 	call	8004c08 <__sfp_lock_release>
 80096a4:	9005883a 	mov	r2,r18
 80096a8:	dfc00317 	ldw	ra,12(sp)
 80096ac:	dc800217 	ldw	r18,8(sp)
 80096b0:	dc400117 	ldw	r17,4(sp)
 80096b4:	dc000017 	ldw	r16,0(sp)
 80096b8:	dec00404 	addi	sp,sp,16
 80096bc:	f800283a 	ret
 80096c0:	8004c080 	call	8004c08 <__sfp_lock_release>
 80096c4:	0005883a 	mov	r2,zero
 80096c8:	003ff706 	br	80096a8 <__alt_data_end+0xfc0096a8>
 80096cc:	0005883a 	mov	r2,zero
 80096d0:	f800283a 	ret
 80096d4:	8809883a 	mov	r4,r17
 80096d8:	8004bf40 	call	8004bf4 <__sinit>
 80096dc:	8080030f 	ldh	r2,12(r16)
 80096e0:	103fd51e 	bne	r2,zero,8009638 <__alt_data_end+0xfc009638>
 80096e4:	003ff606 	br	80096c0 <__alt_data_end+0xfc0096c0>
 80096e8:	81400417 	ldw	r5,16(r16)
 80096ec:	8809883a 	mov	r4,r17
 80096f0:	8004d680 	call	8004d68 <_free_r>
 80096f4:	003fdd06 	br	800966c <__alt_data_end+0xfc00966c>
 80096f8:	04bfffc4 	movi	r18,-1
 80096fc:	003fd806 	br	8009660 <__alt_data_end+0xfc009660>

08009700 <fclose>:
 8009700:	00820074 	movhi	r2,2049
 8009704:	1086c004 	addi	r2,r2,6912
 8009708:	200b883a 	mov	r5,r4
 800970c:	11000017 	ldw	r4,0(r2)
 8009710:	80096001 	jmpi	8009600 <_fclose_r>

08009714 <_fputwc_r>:
 8009714:	3080030b 	ldhu	r2,12(r6)
 8009718:	defff804 	addi	sp,sp,-32
 800971c:	dcc00415 	stw	r19,16(sp)
 8009720:	dc800315 	stw	r18,12(sp)
 8009724:	dc000115 	stw	r16,4(sp)
 8009728:	dfc00715 	stw	ra,28(sp)
 800972c:	dd400615 	stw	r21,24(sp)
 8009730:	dd000515 	stw	r20,20(sp)
 8009734:	dc400215 	stw	r17,8(sp)
 8009738:	10c8000c 	andi	r3,r2,8192
 800973c:	3021883a 	mov	r16,r6
 8009740:	2027883a 	mov	r19,r4
 8009744:	2825883a 	mov	r18,r5
 8009748:	1800051e 	bne	r3,zero,8009760 <_fputwc_r+0x4c>
 800974c:	30c01917 	ldw	r3,100(r6)
 8009750:	10880014 	ori	r2,r2,8192
 8009754:	3080030d 	sth	r2,12(r6)
 8009758:	18880014 	ori	r2,r3,8192
 800975c:	30801915 	stw	r2,100(r6)
 8009760:	80056f40 	call	80056f4 <__locale_mb_cur_max>
 8009764:	00c00044 	movi	r3,1
 8009768:	10c03e26 	beq	r2,r3,8009864 <_fputwc_r+0x150>
 800976c:	9809883a 	mov	r4,r19
 8009770:	d80b883a 	mov	r5,sp
 8009774:	900d883a 	mov	r6,r18
 8009778:	81c01704 	addi	r7,r16,92
 800977c:	8009a540 	call	8009a54 <_wcrtomb_r>
 8009780:	1029883a 	mov	r20,r2
 8009784:	00bfffc4 	movi	r2,-1
 8009788:	a0802026 	beq	r20,r2,800980c <_fputwc_r+0xf8>
 800978c:	d9400003 	ldbu	r5,0(sp)
 8009790:	a0001c26 	beq	r20,zero,8009804 <_fputwc_r+0xf0>
 8009794:	0023883a 	mov	r17,zero
 8009798:	05400284 	movi	r21,10
 800979c:	00000906 	br	80097c4 <_fputwc_r+0xb0>
 80097a0:	80800017 	ldw	r2,0(r16)
 80097a4:	11400005 	stb	r5,0(r2)
 80097a8:	80c00017 	ldw	r3,0(r16)
 80097ac:	18c00044 	addi	r3,r3,1
 80097b0:	80c00015 	stw	r3,0(r16)
 80097b4:	8c400044 	addi	r17,r17,1
 80097b8:	dc45883a 	add	r2,sp,r17
 80097bc:	8d00112e 	bgeu	r17,r20,8009804 <_fputwc_r+0xf0>
 80097c0:	11400003 	ldbu	r5,0(r2)
 80097c4:	80c00217 	ldw	r3,8(r16)
 80097c8:	18ffffc4 	addi	r3,r3,-1
 80097cc:	80c00215 	stw	r3,8(r16)
 80097d0:	183ff30e 	bge	r3,zero,80097a0 <__alt_data_end+0xfc0097a0>
 80097d4:	80800617 	ldw	r2,24(r16)
 80097d8:	18801916 	blt	r3,r2,8009840 <_fputwc_r+0x12c>
 80097dc:	80800017 	ldw	r2,0(r16)
 80097e0:	11400005 	stb	r5,0(r2)
 80097e4:	80800017 	ldw	r2,0(r16)
 80097e8:	10c00003 	ldbu	r3,0(r2)
 80097ec:	10800044 	addi	r2,r2,1
 80097f0:	1d402326 	beq	r3,r21,8009880 <_fputwc_r+0x16c>
 80097f4:	80800015 	stw	r2,0(r16)
 80097f8:	8c400044 	addi	r17,r17,1
 80097fc:	dc45883a 	add	r2,sp,r17
 8009800:	8d3fef36 	bltu	r17,r20,80097c0 <__alt_data_end+0xfc0097c0>
 8009804:	9005883a 	mov	r2,r18
 8009808:	00000406 	br	800981c <_fputwc_r+0x108>
 800980c:	80c0030b 	ldhu	r3,12(r16)
 8009810:	a005883a 	mov	r2,r20
 8009814:	18c01014 	ori	r3,r3,64
 8009818:	80c0030d 	sth	r3,12(r16)
 800981c:	dfc00717 	ldw	ra,28(sp)
 8009820:	dd400617 	ldw	r21,24(sp)
 8009824:	dd000517 	ldw	r20,20(sp)
 8009828:	dcc00417 	ldw	r19,16(sp)
 800982c:	dc800317 	ldw	r18,12(sp)
 8009830:	dc400217 	ldw	r17,8(sp)
 8009834:	dc000117 	ldw	r16,4(sp)
 8009838:	dec00804 	addi	sp,sp,32
 800983c:	f800283a 	ret
 8009840:	9809883a 	mov	r4,r19
 8009844:	29403fcc 	andi	r5,r5,255
 8009848:	800d883a 	mov	r6,r16
 800984c:	800931c0 	call	800931c <__swbuf_r>
 8009850:	10bfffe0 	cmpeqi	r2,r2,-1
 8009854:	10803fcc 	andi	r2,r2,255
 8009858:	103fd626 	beq	r2,zero,80097b4 <__alt_data_end+0xfc0097b4>
 800985c:	00bfffc4 	movi	r2,-1
 8009860:	003fee06 	br	800981c <__alt_data_end+0xfc00981c>
 8009864:	90ffffc4 	addi	r3,r18,-1
 8009868:	01003f84 	movi	r4,254
 800986c:	20ffbf36 	bltu	r4,r3,800976c <__alt_data_end+0xfc00976c>
 8009870:	900b883a 	mov	r5,r18
 8009874:	dc800005 	stb	r18,0(sp)
 8009878:	1029883a 	mov	r20,r2
 800987c:	003fc506 	br	8009794 <__alt_data_end+0xfc009794>
 8009880:	9809883a 	mov	r4,r19
 8009884:	a80b883a 	mov	r5,r21
 8009888:	800d883a 	mov	r6,r16
 800988c:	800931c0 	call	800931c <__swbuf_r>
 8009890:	10bfffe0 	cmpeqi	r2,r2,-1
 8009894:	003fef06 	br	8009854 <__alt_data_end+0xfc009854>

08009898 <fputwc>:
 8009898:	defffc04 	addi	sp,sp,-16
 800989c:	dc000115 	stw	r16,4(sp)
 80098a0:	04020074 	movhi	r16,2049
 80098a4:	8406c004 	addi	r16,r16,6912
 80098a8:	dc400215 	stw	r17,8(sp)
 80098ac:	2023883a 	mov	r17,r4
 80098b0:	81000017 	ldw	r4,0(r16)
 80098b4:	dfc00315 	stw	ra,12(sp)
 80098b8:	280d883a 	mov	r6,r5
 80098bc:	20000626 	beq	r4,zero,80098d8 <fputwc+0x40>
 80098c0:	20800e17 	ldw	r2,56(r4)
 80098c4:	1000041e 	bne	r2,zero,80098d8 <fputwc+0x40>
 80098c8:	d9400015 	stw	r5,0(sp)
 80098cc:	8004bf40 	call	8004bf4 <__sinit>
 80098d0:	81000017 	ldw	r4,0(r16)
 80098d4:	d9800017 	ldw	r6,0(sp)
 80098d8:	880b883a 	mov	r5,r17
 80098dc:	dfc00317 	ldw	ra,12(sp)
 80098e0:	dc400217 	ldw	r17,8(sp)
 80098e4:	dc000117 	ldw	r16,4(sp)
 80098e8:	dec00404 	addi	sp,sp,16
 80098ec:	80097141 	jmpi	8009714 <_fputwc_r>

080098f0 <_fstat_r>:
 80098f0:	defffd04 	addi	sp,sp,-12
 80098f4:	dc000015 	stw	r16,0(sp)
 80098f8:	04020074 	movhi	r16,2049
 80098fc:	dc400115 	stw	r17,4(sp)
 8009900:	840d9b04 	addi	r16,r16,13932
 8009904:	2023883a 	mov	r17,r4
 8009908:	2809883a 	mov	r4,r5
 800990c:	300b883a 	mov	r5,r6
 8009910:	dfc00215 	stw	ra,8(sp)
 8009914:	80000015 	stw	zero,0(r16)
 8009918:	800d0cc0 	call	800d0cc <fstat>
 800991c:	00ffffc4 	movi	r3,-1
 8009920:	10c00526 	beq	r2,r3,8009938 <_fstat_r+0x48>
 8009924:	dfc00217 	ldw	ra,8(sp)
 8009928:	dc400117 	ldw	r17,4(sp)
 800992c:	dc000017 	ldw	r16,0(sp)
 8009930:	dec00304 	addi	sp,sp,12
 8009934:	f800283a 	ret
 8009938:	80c00017 	ldw	r3,0(r16)
 800993c:	183ff926 	beq	r3,zero,8009924 <__alt_data_end+0xfc009924>
 8009940:	88c00015 	stw	r3,0(r17)
 8009944:	003ff706 	br	8009924 <__alt_data_end+0xfc009924>

08009948 <_isatty_r>:
 8009948:	defffd04 	addi	sp,sp,-12
 800994c:	dc000015 	stw	r16,0(sp)
 8009950:	04020074 	movhi	r16,2049
 8009954:	dc400115 	stw	r17,4(sp)
 8009958:	840d9b04 	addi	r16,r16,13932
 800995c:	2023883a 	mov	r17,r4
 8009960:	2809883a 	mov	r4,r5
 8009964:	dfc00215 	stw	ra,8(sp)
 8009968:	80000015 	stw	zero,0(r16)
 800996c:	800d1cc0 	call	800d1cc <isatty>
 8009970:	00ffffc4 	movi	r3,-1
 8009974:	10c00526 	beq	r2,r3,800998c <_isatty_r+0x44>
 8009978:	dfc00217 	ldw	ra,8(sp)
 800997c:	dc400117 	ldw	r17,4(sp)
 8009980:	dc000017 	ldw	r16,0(sp)
 8009984:	dec00304 	addi	sp,sp,12
 8009988:	f800283a 	ret
 800998c:	80c00017 	ldw	r3,0(r16)
 8009990:	183ff926 	beq	r3,zero,8009978 <__alt_data_end+0xfc009978>
 8009994:	88c00015 	stw	r3,0(r17)
 8009998:	003ff706 	br	8009978 <__alt_data_end+0xfc009978>

0800999c <_lseek_r>:
 800999c:	defffd04 	addi	sp,sp,-12
 80099a0:	dc000015 	stw	r16,0(sp)
 80099a4:	04020074 	movhi	r16,2049
 80099a8:	dc400115 	stw	r17,4(sp)
 80099ac:	840d9b04 	addi	r16,r16,13932
 80099b0:	2023883a 	mov	r17,r4
 80099b4:	2809883a 	mov	r4,r5
 80099b8:	300b883a 	mov	r5,r6
 80099bc:	380d883a 	mov	r6,r7
 80099c0:	dfc00215 	stw	ra,8(sp)
 80099c4:	80000015 	stw	zero,0(r16)
 80099c8:	800d3a40 	call	800d3a4 <lseek>
 80099cc:	00ffffc4 	movi	r3,-1
 80099d0:	10c00526 	beq	r2,r3,80099e8 <_lseek_r+0x4c>
 80099d4:	dfc00217 	ldw	ra,8(sp)
 80099d8:	dc400117 	ldw	r17,4(sp)
 80099dc:	dc000017 	ldw	r16,0(sp)
 80099e0:	dec00304 	addi	sp,sp,12
 80099e4:	f800283a 	ret
 80099e8:	80c00017 	ldw	r3,0(r16)
 80099ec:	183ff926 	beq	r3,zero,80099d4 <__alt_data_end+0xfc0099d4>
 80099f0:	88c00015 	stw	r3,0(r17)
 80099f4:	003ff706 	br	80099d4 <__alt_data_end+0xfc0099d4>

080099f8 <_read_r>:
 80099f8:	defffd04 	addi	sp,sp,-12
 80099fc:	dc000015 	stw	r16,0(sp)
 8009a00:	04020074 	movhi	r16,2049
 8009a04:	dc400115 	stw	r17,4(sp)
 8009a08:	840d9b04 	addi	r16,r16,13932
 8009a0c:	2023883a 	mov	r17,r4
 8009a10:	2809883a 	mov	r4,r5
 8009a14:	300b883a 	mov	r5,r6
 8009a18:	380d883a 	mov	r6,r7
 8009a1c:	dfc00215 	stw	ra,8(sp)
 8009a20:	80000015 	stw	zero,0(r16)
 8009a24:	800d5800 	call	800d580 <read>
 8009a28:	00ffffc4 	movi	r3,-1
 8009a2c:	10c00526 	beq	r2,r3,8009a44 <_read_r+0x4c>
 8009a30:	dfc00217 	ldw	ra,8(sp)
 8009a34:	dc400117 	ldw	r17,4(sp)
 8009a38:	dc000017 	ldw	r16,0(sp)
 8009a3c:	dec00304 	addi	sp,sp,12
 8009a40:	f800283a 	ret
 8009a44:	80c00017 	ldw	r3,0(r16)
 8009a48:	183ff926 	beq	r3,zero,8009a30 <__alt_data_end+0xfc009a30>
 8009a4c:	88c00015 	stw	r3,0(r17)
 8009a50:	003ff706 	br	8009a30 <__alt_data_end+0xfc009a30>

08009a54 <_wcrtomb_r>:
 8009a54:	defff604 	addi	sp,sp,-40
 8009a58:	00820074 	movhi	r2,2049
 8009a5c:	dc800815 	stw	r18,32(sp)
 8009a60:	dc400715 	stw	r17,28(sp)
 8009a64:	dc000615 	stw	r16,24(sp)
 8009a68:	1086c404 	addi	r2,r2,6928
 8009a6c:	dfc00915 	stw	ra,36(sp)
 8009a70:	2021883a 	mov	r16,r4
 8009a74:	3823883a 	mov	r17,r7
 8009a78:	14800017 	ldw	r18,0(r2)
 8009a7c:	28001426 	beq	r5,zero,8009ad0 <_wcrtomb_r+0x7c>
 8009a80:	d9400415 	stw	r5,16(sp)
 8009a84:	d9800515 	stw	r6,20(sp)
 8009a88:	80056e80 	call	80056e8 <__locale_charset>
 8009a8c:	d9400417 	ldw	r5,16(sp)
 8009a90:	d9800517 	ldw	r6,20(sp)
 8009a94:	8009883a 	mov	r4,r16
 8009a98:	dc400015 	stw	r17,0(sp)
 8009a9c:	100f883a 	mov	r7,r2
 8009aa0:	903ee83a 	callr	r18
 8009aa4:	00ffffc4 	movi	r3,-1
 8009aa8:	10c0031e 	bne	r2,r3,8009ab8 <_wcrtomb_r+0x64>
 8009aac:	88000015 	stw	zero,0(r17)
 8009ab0:	00c02284 	movi	r3,138
 8009ab4:	80c00015 	stw	r3,0(r16)
 8009ab8:	dfc00917 	ldw	ra,36(sp)
 8009abc:	dc800817 	ldw	r18,32(sp)
 8009ac0:	dc400717 	ldw	r17,28(sp)
 8009ac4:	dc000617 	ldw	r16,24(sp)
 8009ac8:	dec00a04 	addi	sp,sp,40
 8009acc:	f800283a 	ret
 8009ad0:	80056e80 	call	80056e8 <__locale_charset>
 8009ad4:	8009883a 	mov	r4,r16
 8009ad8:	dc400015 	stw	r17,0(sp)
 8009adc:	d9400104 	addi	r5,sp,4
 8009ae0:	000d883a 	mov	r6,zero
 8009ae4:	100f883a 	mov	r7,r2
 8009ae8:	903ee83a 	callr	r18
 8009aec:	003fed06 	br	8009aa4 <__alt_data_end+0xfc009aa4>

08009af0 <wcrtomb>:
 8009af0:	defff504 	addi	sp,sp,-44
 8009af4:	dc400515 	stw	r17,20(sp)
 8009af8:	dc000415 	stw	r16,16(sp)
 8009afc:	dfc00a15 	stw	ra,40(sp)
 8009b00:	dd400915 	stw	r21,36(sp)
 8009b04:	dd000815 	stw	r20,32(sp)
 8009b08:	dcc00715 	stw	r19,28(sp)
 8009b0c:	dc800615 	stw	r18,24(sp)
 8009b10:	2021883a 	mov	r16,r4
 8009b14:	3023883a 	mov	r17,r6
 8009b18:	20001d26 	beq	r4,zero,8009b90 <wcrtomb+0xa0>
 8009b1c:	04820074 	movhi	r18,2049
 8009b20:	9486c004 	addi	r18,r18,6912
 8009b24:	00820074 	movhi	r2,2049
 8009b28:	95400017 	ldw	r21,0(r18)
 8009b2c:	1086c404 	addi	r2,r2,6928
 8009b30:	15000017 	ldw	r20,0(r2)
 8009b34:	2827883a 	mov	r19,r5
 8009b38:	80056e80 	call	80056e8 <__locale_charset>
 8009b3c:	a809883a 	mov	r4,r21
 8009b40:	dc400015 	stw	r17,0(sp)
 8009b44:	800b883a 	mov	r5,r16
 8009b48:	980d883a 	mov	r6,r19
 8009b4c:	100f883a 	mov	r7,r2
 8009b50:	a03ee83a 	callr	r20
 8009b54:	00ffffc4 	movi	r3,-1
 8009b58:	10c0041e 	bne	r2,r3,8009b6c <wcrtomb+0x7c>
 8009b5c:	90c00017 	ldw	r3,0(r18)
 8009b60:	01002284 	movi	r4,138
 8009b64:	88000015 	stw	zero,0(r17)
 8009b68:	19000015 	stw	r4,0(r3)
 8009b6c:	dfc00a17 	ldw	ra,40(sp)
 8009b70:	dd400917 	ldw	r21,36(sp)
 8009b74:	dd000817 	ldw	r20,32(sp)
 8009b78:	dcc00717 	ldw	r19,28(sp)
 8009b7c:	dc800617 	ldw	r18,24(sp)
 8009b80:	dc400517 	ldw	r17,20(sp)
 8009b84:	dc000417 	ldw	r16,16(sp)
 8009b88:	dec00b04 	addi	sp,sp,44
 8009b8c:	f800283a 	ret
 8009b90:	04820074 	movhi	r18,2049
 8009b94:	9486c004 	addi	r18,r18,6912
 8009b98:	00820074 	movhi	r2,2049
 8009b9c:	94c00017 	ldw	r19,0(r18)
 8009ba0:	1086c404 	addi	r2,r2,6928
 8009ba4:	14000017 	ldw	r16,0(r2)
 8009ba8:	80056e80 	call	80056e8 <__locale_charset>
 8009bac:	9809883a 	mov	r4,r19
 8009bb0:	dc400015 	stw	r17,0(sp)
 8009bb4:	d9400104 	addi	r5,sp,4
 8009bb8:	000d883a 	mov	r6,zero
 8009bbc:	100f883a 	mov	r7,r2
 8009bc0:	803ee83a 	callr	r16
 8009bc4:	003fe306 	br	8009b54 <__alt_data_end+0xfc009b54>

08009bc8 <__ascii_wctomb>:
 8009bc8:	28000526 	beq	r5,zero,8009be0 <__ascii_wctomb+0x18>
 8009bcc:	00803fc4 	movi	r2,255
 8009bd0:	11800536 	bltu	r2,r6,8009be8 <__ascii_wctomb+0x20>
 8009bd4:	29800005 	stb	r6,0(r5)
 8009bd8:	00800044 	movi	r2,1
 8009bdc:	f800283a 	ret
 8009be0:	0005883a 	mov	r2,zero
 8009be4:	f800283a 	ret
 8009be8:	00802284 	movi	r2,138
 8009bec:	20800015 	stw	r2,0(r4)
 8009bf0:	00bfffc4 	movi	r2,-1
 8009bf4:	f800283a 	ret

08009bf8 <_wctomb_r>:
 8009bf8:	00820074 	movhi	r2,2049
 8009bfc:	defff904 	addi	sp,sp,-28
 8009c00:	1086c404 	addi	r2,r2,6928
 8009c04:	dfc00615 	stw	ra,24(sp)
 8009c08:	dc400515 	stw	r17,20(sp)
 8009c0c:	dc000415 	stw	r16,16(sp)
 8009c10:	3823883a 	mov	r17,r7
 8009c14:	14000017 	ldw	r16,0(r2)
 8009c18:	d9000115 	stw	r4,4(sp)
 8009c1c:	d9400215 	stw	r5,8(sp)
 8009c20:	d9800315 	stw	r6,12(sp)
 8009c24:	80056e80 	call	80056e8 <__locale_charset>
 8009c28:	d9000117 	ldw	r4,4(sp)
 8009c2c:	d9400217 	ldw	r5,8(sp)
 8009c30:	d9800317 	ldw	r6,12(sp)
 8009c34:	dc400015 	stw	r17,0(sp)
 8009c38:	100f883a 	mov	r7,r2
 8009c3c:	803ee83a 	callr	r16
 8009c40:	dfc00617 	ldw	ra,24(sp)
 8009c44:	dc400517 	ldw	r17,20(sp)
 8009c48:	dc000417 	ldw	r16,16(sp)
 8009c4c:	dec00704 	addi	sp,sp,28
 8009c50:	f800283a 	ret

08009c54 <__muldi3>:
 8009c54:	223fffcc 	andi	r8,r4,65535
 8009c58:	2012d43a 	srli	r9,r4,16
 8009c5c:	32bfffcc 	andi	r10,r6,65535
 8009c60:	3006d43a 	srli	r3,r6,16
 8009c64:	5217383a 	mul	r11,r10,r8
 8009c68:	5255383a 	mul	r10,r10,r9
 8009c6c:	1a05383a 	mul	r2,r3,r8
 8009c70:	5810d43a 	srli	r8,r11,16
 8009c74:	5085883a 	add	r2,r10,r2
 8009c78:	1205883a 	add	r2,r2,r8
 8009c7c:	1a51383a 	mul	r8,r3,r9
 8009c80:	1280022e 	bgeu	r2,r10,8009c8c <__muldi3+0x38>
 8009c84:	00c00074 	movhi	r3,1
 8009c88:	40d1883a 	add	r8,r8,r3
 8009c8c:	1006d43a 	srli	r3,r2,16
 8009c90:	21cf383a 	mul	r7,r4,r7
 8009c94:	314b383a 	mul	r5,r6,r5
 8009c98:	1004943a 	slli	r2,r2,16
 8009c9c:	40c7883a 	add	r3,r8,r3
 8009ca0:	5affffcc 	andi	r11,r11,65535
 8009ca4:	3949883a 	add	r4,r7,r5
 8009ca8:	12c5883a 	add	r2,r2,r11
 8009cac:	20c7883a 	add	r3,r4,r3
 8009cb0:	f800283a 	ret

08009cb4 <__udivdi3>:
 8009cb4:	defff504 	addi	sp,sp,-44
 8009cb8:	dcc00415 	stw	r19,16(sp)
 8009cbc:	dc000115 	stw	r16,4(sp)
 8009cc0:	dfc00a15 	stw	ra,40(sp)
 8009cc4:	df000915 	stw	fp,36(sp)
 8009cc8:	ddc00815 	stw	r23,32(sp)
 8009ccc:	dd800715 	stw	r22,28(sp)
 8009cd0:	dd400615 	stw	r21,24(sp)
 8009cd4:	dd000515 	stw	r20,20(sp)
 8009cd8:	dc800315 	stw	r18,12(sp)
 8009cdc:	dc400215 	stw	r17,8(sp)
 8009ce0:	2027883a 	mov	r19,r4
 8009ce4:	2821883a 	mov	r16,r5
 8009ce8:	3800421e 	bne	r7,zero,8009df4 <__udivdi3+0x140>
 8009cec:	3025883a 	mov	r18,r6
 8009cf0:	2023883a 	mov	r17,r4
 8009cf4:	2980542e 	bgeu	r5,r6,8009e48 <__udivdi3+0x194>
 8009cf8:	00bfffd4 	movui	r2,65535
 8009cfc:	282d883a 	mov	r22,r5
 8009d00:	1180a836 	bltu	r2,r6,8009fa4 <__udivdi3+0x2f0>
 8009d04:	00803fc4 	movi	r2,255
 8009d08:	1181422e 	bgeu	r2,r6,800a214 <__udivdi3+0x560>
 8009d0c:	00800204 	movi	r2,8
 8009d10:	1007883a 	mov	r3,r2
 8009d14:	3084d83a 	srl	r2,r6,r2
 8009d18:	01020074 	movhi	r4,2049
 8009d1c:	213fb604 	addi	r4,r4,-296
 8009d20:	2085883a 	add	r2,r4,r2
 8009d24:	10800003 	ldbu	r2,0(r2)
 8009d28:	10c7883a 	add	r3,r2,r3
 8009d2c:	00800804 	movi	r2,32
 8009d30:	10c5c83a 	sub	r2,r2,r3
 8009d34:	10000526 	beq	r2,zero,8009d4c <__udivdi3+0x98>
 8009d38:	80a0983a 	sll	r16,r16,r2
 8009d3c:	98c6d83a 	srl	r3,r19,r3
 8009d40:	30a4983a 	sll	r18,r6,r2
 8009d44:	98a2983a 	sll	r17,r19,r2
 8009d48:	80ecb03a 	or	r22,r16,r3
 8009d4c:	902ad43a 	srli	r21,r18,16
 8009d50:	b009883a 	mov	r4,r22
 8009d54:	953fffcc 	andi	r20,r18,65535
 8009d58:	a80b883a 	mov	r5,r21
 8009d5c:	800a9280 	call	800a928 <__umodsi3>
 8009d60:	b009883a 	mov	r4,r22
 8009d64:	a80b883a 	mov	r5,r21
 8009d68:	1027883a 	mov	r19,r2
 8009d6c:	800a9200 	call	800a920 <__udivsi3>
 8009d70:	1021883a 	mov	r16,r2
 8009d74:	8806d43a 	srli	r3,r17,16
 8009d78:	9804943a 	slli	r2,r19,16
 8009d7c:	8527383a 	mul	r19,r16,r20
 8009d80:	10c4b03a 	or	r2,r2,r3
 8009d84:	14c0052e 	bgeu	r2,r19,8009d9c <__udivdi3+0xe8>
 8009d88:	1485883a 	add	r2,r2,r18
 8009d8c:	80ffffc4 	addi	r3,r16,-1
 8009d90:	14800136 	bltu	r2,r18,8009d98 <__udivdi3+0xe4>
 8009d94:	14c13436 	bltu	r2,r19,800a268 <__udivdi3+0x5b4>
 8009d98:	1821883a 	mov	r16,r3
 8009d9c:	14e7c83a 	sub	r19,r2,r19
 8009da0:	9809883a 	mov	r4,r19
 8009da4:	a80b883a 	mov	r5,r21
 8009da8:	800a9280 	call	800a928 <__umodsi3>
 8009dac:	102d883a 	mov	r22,r2
 8009db0:	9809883a 	mov	r4,r19
 8009db4:	a80b883a 	mov	r5,r21
 8009db8:	800a9200 	call	800a920 <__udivsi3>
 8009dbc:	b02c943a 	slli	r22,r22,16
 8009dc0:	1529383a 	mul	r20,r2,r20
 8009dc4:	8c7fffcc 	andi	r17,r17,65535
 8009dc8:	b462b03a 	or	r17,r22,r17
 8009dcc:	8d00052e 	bgeu	r17,r20,8009de4 <__udivdi3+0x130>
 8009dd0:	8ca3883a 	add	r17,r17,r18
 8009dd4:	10ffffc4 	addi	r3,r2,-1
 8009dd8:	8c80f636 	bltu	r17,r18,800a1b4 <__udivdi3+0x500>
 8009ddc:	8d00f52e 	bgeu	r17,r20,800a1b4 <__udivdi3+0x500>
 8009de0:	10bfff84 	addi	r2,r2,-2
 8009de4:	8020943a 	slli	r16,r16,16
 8009de8:	0007883a 	mov	r3,zero
 8009dec:	1404b03a 	or	r2,r2,r16
 8009df0:	00005b06 	br	8009f60 <__udivdi3+0x2ac>
 8009df4:	29c05836 	bltu	r5,r7,8009f58 <__udivdi3+0x2a4>
 8009df8:	00bfffd4 	movui	r2,65535
 8009dfc:	11c0642e 	bgeu	r2,r7,8009f90 <__udivdi3+0x2dc>
 8009e00:	00804034 	movhi	r2,256
 8009e04:	10bfffc4 	addi	r2,r2,-1
 8009e08:	11c0f32e 	bgeu	r2,r7,800a1d8 <__udivdi3+0x524>
 8009e0c:	00c00604 	movi	r3,24
 8009e10:	180b883a 	mov	r5,r3
 8009e14:	38c6d83a 	srl	r3,r7,r3
 8009e18:	00820074 	movhi	r2,2049
 8009e1c:	10bfb604 	addi	r2,r2,-296
 8009e20:	10c7883a 	add	r3,r2,r3
 8009e24:	18c00003 	ldbu	r3,0(r3)
 8009e28:	01000804 	movi	r4,32
 8009e2c:	1947883a 	add	r3,r3,r5
 8009e30:	20e5c83a 	sub	r18,r4,r3
 8009e34:	9000661e 	bne	r18,zero,8009fd0 <__udivdi3+0x31c>
 8009e38:	3c00f936 	bltu	r7,r16,800a220 <__udivdi3+0x56c>
 8009e3c:	9985403a 	cmpgeu	r2,r19,r6
 8009e40:	0007883a 	mov	r3,zero
 8009e44:	00004606 	br	8009f60 <__udivdi3+0x2ac>
 8009e48:	3000041e 	bne	r6,zero,8009e5c <__udivdi3+0x1a8>
 8009e4c:	01000044 	movi	r4,1
 8009e50:	000b883a 	mov	r5,zero
 8009e54:	800a9200 	call	800a920 <__udivsi3>
 8009e58:	1025883a 	mov	r18,r2
 8009e5c:	00bfffd4 	movui	r2,65535
 8009e60:	1480562e 	bgeu	r2,r18,8009fbc <__udivdi3+0x308>
 8009e64:	00804034 	movhi	r2,256
 8009e68:	10bfffc4 	addi	r2,r2,-1
 8009e6c:	1480e32e 	bgeu	r2,r18,800a1fc <__udivdi3+0x548>
 8009e70:	00800604 	movi	r2,24
 8009e74:	1007883a 	mov	r3,r2
 8009e78:	9084d83a 	srl	r2,r18,r2
 8009e7c:	01020074 	movhi	r4,2049
 8009e80:	213fb604 	addi	r4,r4,-296
 8009e84:	2085883a 	add	r2,r4,r2
 8009e88:	10800003 	ldbu	r2,0(r2)
 8009e8c:	10c5883a 	add	r2,r2,r3
 8009e90:	00c00804 	movi	r3,32
 8009e94:	1887c83a 	sub	r3,r3,r2
 8009e98:	1800911e 	bne	r3,zero,800a0e0 <__udivdi3+0x42c>
 8009e9c:	9028d43a 	srli	r20,r18,16
 8009ea0:	84a1c83a 	sub	r16,r16,r18
 8009ea4:	957fffcc 	andi	r21,r18,65535
 8009ea8:	00c00044 	movi	r3,1
 8009eac:	8009883a 	mov	r4,r16
 8009eb0:	a00b883a 	mov	r5,r20
 8009eb4:	d8c00015 	stw	r3,0(sp)
 8009eb8:	800a9280 	call	800a928 <__umodsi3>
 8009ebc:	8009883a 	mov	r4,r16
 8009ec0:	a00b883a 	mov	r5,r20
 8009ec4:	1027883a 	mov	r19,r2
 8009ec8:	800a9200 	call	800a920 <__udivsi3>
 8009ecc:	1021883a 	mov	r16,r2
 8009ed0:	880cd43a 	srli	r6,r17,16
 8009ed4:	9804943a 	slli	r2,r19,16
 8009ed8:	8567383a 	mul	r19,r16,r21
 8009edc:	d8c00017 	ldw	r3,0(sp)
 8009ee0:	1188b03a 	or	r4,r2,r6
 8009ee4:	24c0052e 	bgeu	r4,r19,8009efc <__udivdi3+0x248>
 8009ee8:	2489883a 	add	r4,r4,r18
 8009eec:	80bfffc4 	addi	r2,r16,-1
 8009ef0:	24800136 	bltu	r4,r18,8009ef8 <__udivdi3+0x244>
 8009ef4:	24c0d936 	bltu	r4,r19,800a25c <__udivdi3+0x5a8>
 8009ef8:	1021883a 	mov	r16,r2
 8009efc:	24e7c83a 	sub	r19,r4,r19
 8009f00:	9809883a 	mov	r4,r19
 8009f04:	a00b883a 	mov	r5,r20
 8009f08:	d8c00015 	stw	r3,0(sp)
 8009f0c:	800a9280 	call	800a928 <__umodsi3>
 8009f10:	102d883a 	mov	r22,r2
 8009f14:	9809883a 	mov	r4,r19
 8009f18:	a00b883a 	mov	r5,r20
 8009f1c:	800a9200 	call	800a920 <__udivsi3>
 8009f20:	b02c943a 	slli	r22,r22,16
 8009f24:	156b383a 	mul	r21,r2,r21
 8009f28:	8c7fffcc 	andi	r17,r17,65535
 8009f2c:	b462b03a 	or	r17,r22,r17
 8009f30:	d8c00017 	ldw	r3,0(sp)
 8009f34:	8d40052e 	bgeu	r17,r21,8009f4c <__udivdi3+0x298>
 8009f38:	8ca3883a 	add	r17,r17,r18
 8009f3c:	113fffc4 	addi	r4,r2,-1
 8009f40:	8c809a36 	bltu	r17,r18,800a1ac <__udivdi3+0x4f8>
 8009f44:	8d40992e 	bgeu	r17,r21,800a1ac <__udivdi3+0x4f8>
 8009f48:	10bfff84 	addi	r2,r2,-2
 8009f4c:	8020943a 	slli	r16,r16,16
 8009f50:	1404b03a 	or	r2,r2,r16
 8009f54:	00000206 	br	8009f60 <__udivdi3+0x2ac>
 8009f58:	0007883a 	mov	r3,zero
 8009f5c:	0005883a 	mov	r2,zero
 8009f60:	dfc00a17 	ldw	ra,40(sp)
 8009f64:	df000917 	ldw	fp,36(sp)
 8009f68:	ddc00817 	ldw	r23,32(sp)
 8009f6c:	dd800717 	ldw	r22,28(sp)
 8009f70:	dd400617 	ldw	r21,24(sp)
 8009f74:	dd000517 	ldw	r20,20(sp)
 8009f78:	dcc00417 	ldw	r19,16(sp)
 8009f7c:	dc800317 	ldw	r18,12(sp)
 8009f80:	dc400217 	ldw	r17,8(sp)
 8009f84:	dc000117 	ldw	r16,4(sp)
 8009f88:	dec00b04 	addi	sp,sp,44
 8009f8c:	f800283a 	ret
 8009f90:	00803fc4 	movi	r2,255
 8009f94:	11c0932e 	bgeu	r2,r7,800a1e4 <__udivdi3+0x530>
 8009f98:	00c00204 	movi	r3,8
 8009f9c:	180b883a 	mov	r5,r3
 8009fa0:	003f9c06 	br	8009e14 <__alt_data_end+0xfc009e14>
 8009fa4:	00804034 	movhi	r2,256
 8009fa8:	10bfffc4 	addi	r2,r2,-1
 8009fac:	1180902e 	bgeu	r2,r6,800a1f0 <__udivdi3+0x53c>
 8009fb0:	00800604 	movi	r2,24
 8009fb4:	1007883a 	mov	r3,r2
 8009fb8:	003f5606 	br	8009d14 <__alt_data_end+0xfc009d14>
 8009fbc:	00803fc4 	movi	r2,255
 8009fc0:	1480912e 	bgeu	r2,r18,800a208 <__udivdi3+0x554>
 8009fc4:	00800204 	movi	r2,8
 8009fc8:	1007883a 	mov	r3,r2
 8009fcc:	003faa06 	br	8009e78 <__alt_data_end+0xfc009e78>
 8009fd0:	30eed83a 	srl	r23,r6,r3
 8009fd4:	3c8e983a 	sll	r7,r7,r18
 8009fd8:	80f8d83a 	srl	fp,r16,r3
 8009fdc:	98c6d83a 	srl	r3,r19,r3
 8009fe0:	3deeb03a 	or	r23,r7,r23
 8009fe4:	b828d43a 	srli	r20,r23,16
 8009fe8:	84a0983a 	sll	r16,r16,r18
 8009fec:	e009883a 	mov	r4,fp
 8009ff0:	a00b883a 	mov	r5,r20
 8009ff4:	80e2b03a 	or	r17,r16,r3
 8009ff8:	34aa983a 	sll	r21,r6,r18
 8009ffc:	800a9280 	call	800a928 <__umodsi3>
 800a000:	e009883a 	mov	r4,fp
 800a004:	a00b883a 	mov	r5,r20
 800a008:	102d883a 	mov	r22,r2
 800a00c:	800a9200 	call	800a920 <__udivsi3>
 800a010:	1021883a 	mov	r16,r2
 800a014:	bf3fffcc 	andi	fp,r23,65535
 800a018:	b004943a 	slli	r2,r22,16
 800a01c:	8808d43a 	srli	r4,r17,16
 800a020:	872d383a 	mul	r22,r16,fp
 800a024:	1104b03a 	or	r2,r2,r4
 800a028:	1580042e 	bgeu	r2,r22,800a03c <__udivdi3+0x388>
 800a02c:	15c5883a 	add	r2,r2,r23
 800a030:	80ffffc4 	addi	r3,r16,-1
 800a034:	15c0812e 	bgeu	r2,r23,800a23c <__udivdi3+0x588>
 800a038:	1821883a 	mov	r16,r3
 800a03c:	15adc83a 	sub	r22,r2,r22
 800a040:	b009883a 	mov	r4,r22
 800a044:	a00b883a 	mov	r5,r20
 800a048:	800a9280 	call	800a928 <__umodsi3>
 800a04c:	a00b883a 	mov	r5,r20
 800a050:	b009883a 	mov	r4,r22
 800a054:	d8800015 	stw	r2,0(sp)
 800a058:	800a9200 	call	800a920 <__udivsi3>
 800a05c:	d8c00017 	ldw	r3,0(sp)
 800a060:	170b383a 	mul	r5,r2,fp
 800a064:	8c7fffcc 	andi	r17,r17,65535
 800a068:	1806943a 	slli	r3,r3,16
 800a06c:	1c46b03a 	or	r3,r3,r17
 800a070:	1940042e 	bgeu	r3,r5,800a084 <__udivdi3+0x3d0>
 800a074:	1dc7883a 	add	r3,r3,r23
 800a078:	113fffc4 	addi	r4,r2,-1
 800a07c:	1dc06b2e 	bgeu	r3,r23,800a22c <__udivdi3+0x578>
 800a080:	2005883a 	mov	r2,r4
 800a084:	8020943a 	slli	r16,r16,16
 800a088:	a9ffffcc 	andi	r7,r21,65535
 800a08c:	a82ad43a 	srli	r21,r21,16
 800a090:	1404b03a 	or	r2,r2,r16
 800a094:	113fffcc 	andi	r4,r2,65535
 800a098:	100cd43a 	srli	r6,r2,16
 800a09c:	21d3383a 	mul	r9,r4,r7
 800a0a0:	2549383a 	mul	r4,r4,r21
 800a0a4:	31cf383a 	mul	r7,r6,r7
 800a0a8:	4810d43a 	srli	r8,r9,16
 800a0ac:	1947c83a 	sub	r3,r3,r5
 800a0b0:	3909883a 	add	r4,r7,r4
 800a0b4:	2209883a 	add	r4,r4,r8
 800a0b8:	354d383a 	mul	r6,r6,r21
 800a0bc:	21c0022e 	bgeu	r4,r7,800a0c8 <__udivdi3+0x414>
 800a0c0:	01400074 	movhi	r5,1
 800a0c4:	314d883a 	add	r6,r6,r5
 800a0c8:	202ad43a 	srli	r21,r4,16
 800a0cc:	354d883a 	add	r6,r6,r21
 800a0d0:	19803f36 	bltu	r3,r6,800a1d0 <__udivdi3+0x51c>
 800a0d4:	19803926 	beq	r3,r6,800a1bc <__udivdi3+0x508>
 800a0d8:	0007883a 	mov	r3,zero
 800a0dc:	003fa006 	br	8009f60 <__alt_data_end+0xfc009f60>
 800a0e0:	90e4983a 	sll	r18,r18,r3
 800a0e4:	80aad83a 	srl	r21,r16,r2
 800a0e8:	80e0983a 	sll	r16,r16,r3
 800a0ec:	9028d43a 	srli	r20,r18,16
 800a0f0:	9884d83a 	srl	r2,r19,r2
 800a0f4:	a809883a 	mov	r4,r21
 800a0f8:	a00b883a 	mov	r5,r20
 800a0fc:	80acb03a 	or	r22,r16,r2
 800a100:	98e2983a 	sll	r17,r19,r3
 800a104:	800a9280 	call	800a928 <__umodsi3>
 800a108:	a809883a 	mov	r4,r21
 800a10c:	a00b883a 	mov	r5,r20
 800a110:	1021883a 	mov	r16,r2
 800a114:	800a9200 	call	800a920 <__udivsi3>
 800a118:	957fffcc 	andi	r21,r18,65535
 800a11c:	8020943a 	slli	r16,r16,16
 800a120:	b00ad43a 	srli	r5,r22,16
 800a124:	1567383a 	mul	r19,r2,r21
 800a128:	102f883a 	mov	r23,r2
 800a12c:	8148b03a 	or	r4,r16,r5
 800a130:	24c0062e 	bgeu	r4,r19,800a14c <__udivdi3+0x498>
 800a134:	2489883a 	add	r4,r4,r18
 800a138:	10bfffc4 	addi	r2,r2,-1
 800a13c:	24804536 	bltu	r4,r18,800a254 <__udivdi3+0x5a0>
 800a140:	24c0442e 	bgeu	r4,r19,800a254 <__udivdi3+0x5a0>
 800a144:	bdffff84 	addi	r23,r23,-2
 800a148:	2489883a 	add	r4,r4,r18
 800a14c:	24e7c83a 	sub	r19,r4,r19
 800a150:	9809883a 	mov	r4,r19
 800a154:	a00b883a 	mov	r5,r20
 800a158:	800a9280 	call	800a928 <__umodsi3>
 800a15c:	1021883a 	mov	r16,r2
 800a160:	9809883a 	mov	r4,r19
 800a164:	a00b883a 	mov	r5,r20
 800a168:	800a9200 	call	800a920 <__udivsi3>
 800a16c:	8020943a 	slli	r16,r16,16
 800a170:	1007883a 	mov	r3,r2
 800a174:	1545383a 	mul	r2,r2,r21
 800a178:	b13fffcc 	andi	r4,r22,65535
 800a17c:	8108b03a 	or	r4,r16,r4
 800a180:	2080062e 	bgeu	r4,r2,800a19c <__udivdi3+0x4e8>
 800a184:	2489883a 	add	r4,r4,r18
 800a188:	197fffc4 	addi	r5,r3,-1
 800a18c:	24802f36 	bltu	r4,r18,800a24c <__udivdi3+0x598>
 800a190:	20802e2e 	bgeu	r4,r2,800a24c <__udivdi3+0x598>
 800a194:	18ffff84 	addi	r3,r3,-2
 800a198:	2489883a 	add	r4,r4,r18
 800a19c:	b82e943a 	slli	r23,r23,16
 800a1a0:	20a1c83a 	sub	r16,r4,r2
 800a1a4:	1dc6b03a 	or	r3,r3,r23
 800a1a8:	003f4006 	br	8009eac <__alt_data_end+0xfc009eac>
 800a1ac:	2005883a 	mov	r2,r4
 800a1b0:	003f6606 	br	8009f4c <__alt_data_end+0xfc009f4c>
 800a1b4:	1805883a 	mov	r2,r3
 800a1b8:	003f0a06 	br	8009de4 <__alt_data_end+0xfc009de4>
 800a1bc:	2006943a 	slli	r3,r4,16
 800a1c0:	9c88983a 	sll	r4,r19,r18
 800a1c4:	4a7fffcc 	andi	r9,r9,65535
 800a1c8:	1a47883a 	add	r3,r3,r9
 800a1cc:	20ffc22e 	bgeu	r4,r3,800a0d8 <__alt_data_end+0xfc00a0d8>
 800a1d0:	10bfffc4 	addi	r2,r2,-1
 800a1d4:	003fc006 	br	800a0d8 <__alt_data_end+0xfc00a0d8>
 800a1d8:	00c00404 	movi	r3,16
 800a1dc:	180b883a 	mov	r5,r3
 800a1e0:	003f0c06 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a1e4:	0007883a 	mov	r3,zero
 800a1e8:	000b883a 	mov	r5,zero
 800a1ec:	003f0906 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a1f0:	00800404 	movi	r2,16
 800a1f4:	1007883a 	mov	r3,r2
 800a1f8:	003ec606 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a1fc:	00800404 	movi	r2,16
 800a200:	1007883a 	mov	r3,r2
 800a204:	003f1c06 	br	8009e78 <__alt_data_end+0xfc009e78>
 800a208:	0005883a 	mov	r2,zero
 800a20c:	0007883a 	mov	r3,zero
 800a210:	003f1906 	br	8009e78 <__alt_data_end+0xfc009e78>
 800a214:	0005883a 	mov	r2,zero
 800a218:	0007883a 	mov	r3,zero
 800a21c:	003ebd06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a220:	0007883a 	mov	r3,zero
 800a224:	00800044 	movi	r2,1
 800a228:	003f4d06 	br	8009f60 <__alt_data_end+0xfc009f60>
 800a22c:	197f942e 	bgeu	r3,r5,800a080 <__alt_data_end+0xfc00a080>
 800a230:	10bfff84 	addi	r2,r2,-2
 800a234:	1dc7883a 	add	r3,r3,r23
 800a238:	003f9206 	br	800a084 <__alt_data_end+0xfc00a084>
 800a23c:	15bf7e2e 	bgeu	r2,r22,800a038 <__alt_data_end+0xfc00a038>
 800a240:	843fff84 	addi	r16,r16,-2
 800a244:	15c5883a 	add	r2,r2,r23
 800a248:	003f7c06 	br	800a03c <__alt_data_end+0xfc00a03c>
 800a24c:	2807883a 	mov	r3,r5
 800a250:	003fd206 	br	800a19c <__alt_data_end+0xfc00a19c>
 800a254:	102f883a 	mov	r23,r2
 800a258:	003fbc06 	br	800a14c <__alt_data_end+0xfc00a14c>
 800a25c:	843fff84 	addi	r16,r16,-2
 800a260:	2489883a 	add	r4,r4,r18
 800a264:	003f2506 	br	8009efc <__alt_data_end+0xfc009efc>
 800a268:	843fff84 	addi	r16,r16,-2
 800a26c:	1485883a 	add	r2,r2,r18
 800a270:	003eca06 	br	8009d9c <__alt_data_end+0xfc009d9c>

0800a274 <__umoddi3>:
 800a274:	defff404 	addi	sp,sp,-48
 800a278:	ddc00915 	stw	r23,36(sp)
 800a27c:	dc400315 	stw	r17,12(sp)
 800a280:	dc000215 	stw	r16,8(sp)
 800a284:	dfc00b15 	stw	ra,44(sp)
 800a288:	df000a15 	stw	fp,40(sp)
 800a28c:	dd800815 	stw	r22,32(sp)
 800a290:	dd400715 	stw	r21,28(sp)
 800a294:	dd000615 	stw	r20,24(sp)
 800a298:	dcc00515 	stw	r19,20(sp)
 800a29c:	dc800415 	stw	r18,16(sp)
 800a2a0:	2021883a 	mov	r16,r4
 800a2a4:	2823883a 	mov	r17,r5
 800a2a8:	282f883a 	mov	r23,r5
 800a2ac:	3800381e 	bne	r7,zero,800a390 <__umoddi3+0x11c>
 800a2b0:	3027883a 	mov	r19,r6
 800a2b4:	2029883a 	mov	r20,r4
 800a2b8:	29804e2e 	bgeu	r5,r6,800a3f4 <__umoddi3+0x180>
 800a2bc:	00bfffd4 	movui	r2,65535
 800a2c0:	11809c36 	bltu	r2,r6,800a534 <__umoddi3+0x2c0>
 800a2c4:	00803fc4 	movi	r2,255
 800a2c8:	11813b2e 	bgeu	r2,r6,800a7b8 <__umoddi3+0x544>
 800a2cc:	01400204 	movi	r5,8
 800a2d0:	2805883a 	mov	r2,r5
 800a2d4:	314ad83a 	srl	r5,r6,r5
 800a2d8:	00c20074 	movhi	r3,2049
 800a2dc:	18ffb604 	addi	r3,r3,-296
 800a2e0:	194b883a 	add	r5,r3,r5
 800a2e4:	29000003 	ldbu	r4,0(r5)
 800a2e8:	2089883a 	add	r4,r4,r2
 800a2ec:	00800804 	movi	r2,32
 800a2f0:	1105c83a 	sub	r2,r2,r4
 800a2f4:	1000ec26 	beq	r2,zero,800a6a8 <__umoddi3+0x434>
 800a2f8:	88a2983a 	sll	r17,r17,r2
 800a2fc:	8108d83a 	srl	r4,r16,r4
 800a300:	30a6983a 	sll	r19,r6,r2
 800a304:	80a8983a 	sll	r20,r16,r2
 800a308:	1025883a 	mov	r18,r2
 800a30c:	892eb03a 	or	r23,r17,r4
 800a310:	982cd43a 	srli	r22,r19,16
 800a314:	b809883a 	mov	r4,r23
 800a318:	9d7fffcc 	andi	r21,r19,65535
 800a31c:	b00b883a 	mov	r5,r22
 800a320:	800a9280 	call	800a928 <__umodsi3>
 800a324:	b809883a 	mov	r4,r23
 800a328:	b00b883a 	mov	r5,r22
 800a32c:	1021883a 	mov	r16,r2
 800a330:	800a9200 	call	800a920 <__udivsi3>
 800a334:	8020943a 	slli	r16,r16,16
 800a338:	a00cd43a 	srli	r6,r20,16
 800a33c:	1545383a 	mul	r2,r2,r21
 800a340:	8188b03a 	or	r4,r16,r6
 800a344:	2080042e 	bgeu	r4,r2,800a358 <__umoddi3+0xe4>
 800a348:	24c9883a 	add	r4,r4,r19
 800a34c:	24c00236 	bltu	r4,r19,800a358 <__umoddi3+0xe4>
 800a350:	2080012e 	bgeu	r4,r2,800a358 <__umoddi3+0xe4>
 800a354:	24c9883a 	add	r4,r4,r19
 800a358:	20a3c83a 	sub	r17,r4,r2
 800a35c:	8809883a 	mov	r4,r17
 800a360:	b00b883a 	mov	r5,r22
 800a364:	800a9280 	call	800a928 <__umodsi3>
 800a368:	8809883a 	mov	r4,r17
 800a36c:	b00b883a 	mov	r5,r22
 800a370:	1021883a 	mov	r16,r2
 800a374:	800a9200 	call	800a920 <__udivsi3>
 800a378:	8006943a 	slli	r3,r16,16
 800a37c:	1545383a 	mul	r2,r2,r21
 800a380:	a13fffcc 	andi	r4,r20,65535
 800a384:	1906b03a 	or	r3,r3,r4
 800a388:	1880532e 	bgeu	r3,r2,800a4d8 <__umoddi3+0x264>
 800a38c:	00004e06 	br	800a4c8 <__umoddi3+0x254>
 800a390:	29c05536 	bltu	r5,r7,800a4e8 <__umoddi3+0x274>
 800a394:	00bfffd4 	movui	r2,65535
 800a398:	11c0612e 	bgeu	r2,r7,800a520 <__umoddi3+0x2ac>
 800a39c:	00804034 	movhi	r2,256
 800a3a0:	10bfffc4 	addi	r2,r2,-1
 800a3a4:	11c0f82e 	bgeu	r2,r7,800a788 <__umoddi3+0x514>
 800a3a8:	01400604 	movi	r5,24
 800a3ac:	282b883a 	mov	r21,r5
 800a3b0:	394ad83a 	srl	r5,r7,r5
 800a3b4:	00c20074 	movhi	r3,2049
 800a3b8:	18ffb604 	addi	r3,r3,-296
 800a3bc:	194b883a 	add	r5,r3,r5
 800a3c0:	28800003 	ldbu	r2,0(r5)
 800a3c4:	00c00804 	movi	r3,32
 800a3c8:	156b883a 	add	r21,r2,r21
 800a3cc:	1d69c83a 	sub	r20,r3,r21
 800a3d0:	a000631e 	bne	r20,zero,800a560 <__umoddi3+0x2ec>
 800a3d4:	3c400136 	bltu	r7,r17,800a3dc <__umoddi3+0x168>
 800a3d8:	81810436 	bltu	r16,r6,800a7ec <__umoddi3+0x578>
 800a3dc:	8185c83a 	sub	r2,r16,r6
 800a3e0:	89e3c83a 	sub	r17,r17,r7
 800a3e4:	8087803a 	cmpltu	r3,r16,r2
 800a3e8:	88efc83a 	sub	r23,r17,r3
 800a3ec:	b807883a 	mov	r3,r23
 800a3f0:	00003f06 	br	800a4f0 <__umoddi3+0x27c>
 800a3f4:	3000041e 	bne	r6,zero,800a408 <__umoddi3+0x194>
 800a3f8:	01000044 	movi	r4,1
 800a3fc:	000b883a 	mov	r5,zero
 800a400:	800a9200 	call	800a920 <__udivsi3>
 800a404:	1027883a 	mov	r19,r2
 800a408:	00bfffd4 	movui	r2,65535
 800a40c:	14c04f2e 	bgeu	r2,r19,800a54c <__umoddi3+0x2d8>
 800a410:	00804034 	movhi	r2,256
 800a414:	10bfffc4 	addi	r2,r2,-1
 800a418:	14c0e42e 	bgeu	r2,r19,800a7ac <__umoddi3+0x538>
 800a41c:	00800604 	movi	r2,24
 800a420:	1007883a 	mov	r3,r2
 800a424:	9884d83a 	srl	r2,r19,r2
 800a428:	01020074 	movhi	r4,2049
 800a42c:	213fb604 	addi	r4,r4,-296
 800a430:	2085883a 	add	r2,r4,r2
 800a434:	11000003 	ldbu	r4,0(r2)
 800a438:	00800804 	movi	r2,32
 800a43c:	20c7883a 	add	r3,r4,r3
 800a440:	10c5c83a 	sub	r2,r2,r3
 800a444:	10009a1e 	bne	r2,zero,800a6b0 <__umoddi3+0x43c>
 800a448:	982cd43a 	srli	r22,r19,16
 800a44c:	8ce3c83a 	sub	r17,r17,r19
 800a450:	9c3fffcc 	andi	r16,r19,65535
 800a454:	0025883a 	mov	r18,zero
 800a458:	8809883a 	mov	r4,r17
 800a45c:	b00b883a 	mov	r5,r22
 800a460:	800a9280 	call	800a928 <__umodsi3>
 800a464:	8809883a 	mov	r4,r17
 800a468:	b00b883a 	mov	r5,r22
 800a46c:	102b883a 	mov	r21,r2
 800a470:	800a9200 	call	800a920 <__udivsi3>
 800a474:	a806943a 	slli	r3,r21,16
 800a478:	a008d43a 	srli	r4,r20,16
 800a47c:	1405383a 	mul	r2,r2,r16
 800a480:	190cb03a 	or	r6,r3,r4
 800a484:	3080032e 	bgeu	r6,r2,800a494 <__umoddi3+0x220>
 800a488:	34cd883a 	add	r6,r6,r19
 800a48c:	34c00136 	bltu	r6,r19,800a494 <__umoddi3+0x220>
 800a490:	3080d436 	bltu	r6,r2,800a7e4 <__umoddi3+0x570>
 800a494:	30abc83a 	sub	r21,r6,r2
 800a498:	a809883a 	mov	r4,r21
 800a49c:	b00b883a 	mov	r5,r22
 800a4a0:	800a9280 	call	800a928 <__umodsi3>
 800a4a4:	1023883a 	mov	r17,r2
 800a4a8:	a809883a 	mov	r4,r21
 800a4ac:	b00b883a 	mov	r5,r22
 800a4b0:	800a9200 	call	800a920 <__udivsi3>
 800a4b4:	8822943a 	slli	r17,r17,16
 800a4b8:	1405383a 	mul	r2,r2,r16
 800a4bc:	a13fffcc 	andi	r4,r20,65535
 800a4c0:	8906b03a 	or	r3,r17,r4
 800a4c4:	1880042e 	bgeu	r3,r2,800a4d8 <__umoddi3+0x264>
 800a4c8:	1cc7883a 	add	r3,r3,r19
 800a4cc:	1cc00236 	bltu	r3,r19,800a4d8 <__umoddi3+0x264>
 800a4d0:	1880012e 	bgeu	r3,r2,800a4d8 <__umoddi3+0x264>
 800a4d4:	1cc7883a 	add	r3,r3,r19
 800a4d8:	1887c83a 	sub	r3,r3,r2
 800a4dc:	1c84d83a 	srl	r2,r3,r18
 800a4e0:	0007883a 	mov	r3,zero
 800a4e4:	00000206 	br	800a4f0 <__umoddi3+0x27c>
 800a4e8:	2005883a 	mov	r2,r4
 800a4ec:	2807883a 	mov	r3,r5
 800a4f0:	dfc00b17 	ldw	ra,44(sp)
 800a4f4:	df000a17 	ldw	fp,40(sp)
 800a4f8:	ddc00917 	ldw	r23,36(sp)
 800a4fc:	dd800817 	ldw	r22,32(sp)
 800a500:	dd400717 	ldw	r21,28(sp)
 800a504:	dd000617 	ldw	r20,24(sp)
 800a508:	dcc00517 	ldw	r19,20(sp)
 800a50c:	dc800417 	ldw	r18,16(sp)
 800a510:	dc400317 	ldw	r17,12(sp)
 800a514:	dc000217 	ldw	r16,8(sp)
 800a518:	dec00c04 	addi	sp,sp,48
 800a51c:	f800283a 	ret
 800a520:	00803fc4 	movi	r2,255
 800a524:	11c0952e 	bgeu	r2,r7,800a77c <__umoddi3+0x508>
 800a528:	01400204 	movi	r5,8
 800a52c:	282b883a 	mov	r21,r5
 800a530:	003f9f06 	br	800a3b0 <__alt_data_end+0xfc00a3b0>
 800a534:	00804034 	movhi	r2,256
 800a538:	10bfffc4 	addi	r2,r2,-1
 800a53c:	1180952e 	bgeu	r2,r6,800a794 <__umoddi3+0x520>
 800a540:	01400604 	movi	r5,24
 800a544:	2805883a 	mov	r2,r5
 800a548:	003f6206 	br	800a2d4 <__alt_data_end+0xfc00a2d4>
 800a54c:	00803fc4 	movi	r2,255
 800a550:	14c0932e 	bgeu	r2,r19,800a7a0 <__umoddi3+0x52c>
 800a554:	00800204 	movi	r2,8
 800a558:	1007883a 	mov	r3,r2
 800a55c:	003fb106 	br	800a424 <__alt_data_end+0xfc00a424>
 800a560:	3548d83a 	srl	r4,r6,r21
 800a564:	3d0e983a 	sll	r7,r7,r20
 800a568:	8d10983a 	sll	r8,r17,r20
 800a56c:	8d6cd83a 	srl	r22,r17,r21
 800a570:	3922b03a 	or	r17,r7,r4
 800a574:	882ed43a 	srli	r23,r17,16
 800a578:	8564d83a 	srl	r18,r16,r21
 800a57c:	b009883a 	mov	r4,r22
 800a580:	b80b883a 	mov	r5,r23
 800a584:	44a4b03a 	or	r18,r8,r18
 800a588:	3526983a 	sll	r19,r6,r20
 800a58c:	800a9280 	call	800a928 <__umodsi3>
 800a590:	b009883a 	mov	r4,r22
 800a594:	b80b883a 	mov	r5,r23
 800a598:	1039883a 	mov	fp,r2
 800a59c:	800a9200 	call	800a920 <__udivsi3>
 800a5a0:	102d883a 	mov	r22,r2
 800a5a4:	8a3fffcc 	andi	r8,r17,65535
 800a5a8:	e004943a 	slli	r2,fp,16
 800a5ac:	900cd43a 	srli	r6,r18,16
 800a5b0:	b239383a 	mul	fp,r22,r8
 800a5b4:	8520983a 	sll	r16,r16,r20
 800a5b8:	118ab03a 	or	r5,r2,r6
 800a5bc:	2f00042e 	bgeu	r5,fp,800a5d0 <__umoddi3+0x35c>
 800a5c0:	2c4b883a 	add	r5,r5,r17
 800a5c4:	b0bfffc4 	addi	r2,r22,-1
 800a5c8:	2c40822e 	bgeu	r5,r17,800a7d4 <__umoddi3+0x560>
 800a5cc:	102d883a 	mov	r22,r2
 800a5d0:	2f39c83a 	sub	fp,r5,fp
 800a5d4:	e009883a 	mov	r4,fp
 800a5d8:	b80b883a 	mov	r5,r23
 800a5dc:	da000115 	stw	r8,4(sp)
 800a5e0:	800a9280 	call	800a928 <__umodsi3>
 800a5e4:	e009883a 	mov	r4,fp
 800a5e8:	b80b883a 	mov	r5,r23
 800a5ec:	d8800015 	stw	r2,0(sp)
 800a5f0:	800a9200 	call	800a920 <__udivsi3>
 800a5f4:	d9800017 	ldw	r6,0(sp)
 800a5f8:	da000117 	ldw	r8,4(sp)
 800a5fc:	94bfffcc 	andi	r18,r18,65535
 800a600:	300c943a 	slli	r6,r6,16
 800a604:	1209383a 	mul	r4,r2,r8
 800a608:	3490b03a 	or	r8,r6,r18
 800a60c:	4100042e 	bgeu	r8,r4,800a620 <__umoddi3+0x3ac>
 800a610:	4451883a 	add	r8,r8,r17
 800a614:	10ffffc4 	addi	r3,r2,-1
 800a618:	44406a2e 	bgeu	r8,r17,800a7c4 <__umoddi3+0x550>
 800a61c:	1805883a 	mov	r2,r3
 800a620:	b012943a 	slli	r9,r22,16
 800a624:	9abfffcc 	andi	r10,r19,65535
 800a628:	980ed43a 	srli	r7,r19,16
 800a62c:	124ab03a 	or	r5,r2,r9
 800a630:	2a7fffcc 	andi	r9,r5,65535
 800a634:	280ad43a 	srli	r5,r5,16
 800a638:	4a8d383a 	mul	r6,r9,r10
 800a63c:	49d3383a 	mul	r9,r9,r7
 800a640:	2a95383a 	mul	r10,r5,r10
 800a644:	3004d43a 	srli	r2,r6,16
 800a648:	4111c83a 	sub	r8,r8,r4
 800a64c:	5253883a 	add	r9,r10,r9
 800a650:	4893883a 	add	r9,r9,r2
 800a654:	29cb383a 	mul	r5,r5,r7
 800a658:	4a80022e 	bgeu	r9,r10,800a664 <__umoddi3+0x3f0>
 800a65c:	00800074 	movhi	r2,1
 800a660:	288b883a 	add	r5,r5,r2
 800a664:	4808d43a 	srli	r4,r9,16
 800a668:	4812943a 	slli	r9,r9,16
 800a66c:	31bfffcc 	andi	r6,r6,65535
 800a670:	290b883a 	add	r5,r5,r4
 800a674:	498d883a 	add	r6,r9,r6
 800a678:	41403a36 	bltu	r8,r5,800a764 <__umoddi3+0x4f0>
 800a67c:	41405d26 	beq	r8,r5,800a7f4 <__umoddi3+0x580>
 800a680:	4149c83a 	sub	r4,r8,r5
 800a684:	300f883a 	mov	r7,r6
 800a688:	81cfc83a 	sub	r7,r16,r7
 800a68c:	81c7803a 	cmpltu	r3,r16,r7
 800a690:	20c7c83a 	sub	r3,r4,r3
 800a694:	1d44983a 	sll	r2,r3,r21
 800a698:	3d0ed83a 	srl	r7,r7,r20
 800a69c:	1d06d83a 	srl	r3,r3,r20
 800a6a0:	11c4b03a 	or	r2,r2,r7
 800a6a4:	003f9206 	br	800a4f0 <__alt_data_end+0xfc00a4f0>
 800a6a8:	0025883a 	mov	r18,zero
 800a6ac:	003f1806 	br	800a310 <__alt_data_end+0xfc00a310>
 800a6b0:	98a6983a 	sll	r19,r19,r2
 800a6b4:	88e8d83a 	srl	r20,r17,r3
 800a6b8:	80c6d83a 	srl	r3,r16,r3
 800a6bc:	982cd43a 	srli	r22,r19,16
 800a6c0:	88a2983a 	sll	r17,r17,r2
 800a6c4:	a009883a 	mov	r4,r20
 800a6c8:	b00b883a 	mov	r5,r22
 800a6cc:	88eab03a 	or	r21,r17,r3
 800a6d0:	1025883a 	mov	r18,r2
 800a6d4:	800a9280 	call	800a928 <__umodsi3>
 800a6d8:	a009883a 	mov	r4,r20
 800a6dc:	b00b883a 	mov	r5,r22
 800a6e0:	1023883a 	mov	r17,r2
 800a6e4:	800a9200 	call	800a920 <__udivsi3>
 800a6e8:	9f3fffcc 	andi	fp,r19,65535
 800a6ec:	8822943a 	slli	r17,r17,16
 800a6f0:	a80ad43a 	srli	r5,r21,16
 800a6f4:	1705383a 	mul	r2,r2,fp
 800a6f8:	84a8983a 	sll	r20,r16,r18
 800a6fc:	8948b03a 	or	r4,r17,r5
 800a700:	2080042e 	bgeu	r4,r2,800a714 <__umoddi3+0x4a0>
 800a704:	24c9883a 	add	r4,r4,r19
 800a708:	24c00236 	bltu	r4,r19,800a714 <__umoddi3+0x4a0>
 800a70c:	2080012e 	bgeu	r4,r2,800a714 <__umoddi3+0x4a0>
 800a710:	24c9883a 	add	r4,r4,r19
 800a714:	20afc83a 	sub	r23,r4,r2
 800a718:	b809883a 	mov	r4,r23
 800a71c:	b00b883a 	mov	r5,r22
 800a720:	800a9280 	call	800a928 <__umodsi3>
 800a724:	1023883a 	mov	r17,r2
 800a728:	b809883a 	mov	r4,r23
 800a72c:	b00b883a 	mov	r5,r22
 800a730:	800a9200 	call	800a920 <__udivsi3>
 800a734:	8822943a 	slli	r17,r17,16
 800a738:	1705383a 	mul	r2,r2,fp
 800a73c:	a93fffcc 	andi	r4,r21,65535
 800a740:	8908b03a 	or	r4,r17,r4
 800a744:	2080042e 	bgeu	r4,r2,800a758 <__umoddi3+0x4e4>
 800a748:	24c9883a 	add	r4,r4,r19
 800a74c:	24c00236 	bltu	r4,r19,800a758 <__umoddi3+0x4e4>
 800a750:	2080012e 	bgeu	r4,r2,800a758 <__umoddi3+0x4e4>
 800a754:	24c9883a 	add	r4,r4,r19
 800a758:	20a3c83a 	sub	r17,r4,r2
 800a75c:	e021883a 	mov	r16,fp
 800a760:	003f3d06 	br	800a458 <__alt_data_end+0xfc00a458>
 800a764:	34cfc83a 	sub	r7,r6,r19
 800a768:	2c4bc83a 	sub	r5,r5,r17
 800a76c:	31cd803a 	cmpltu	r6,r6,r7
 800a770:	298dc83a 	sub	r6,r5,r6
 800a774:	4189c83a 	sub	r4,r8,r6
 800a778:	003fc306 	br	800a688 <__alt_data_end+0xfc00a688>
 800a77c:	000b883a 	mov	r5,zero
 800a780:	002b883a 	mov	r21,zero
 800a784:	003f0a06 	br	800a3b0 <__alt_data_end+0xfc00a3b0>
 800a788:	01400404 	movi	r5,16
 800a78c:	282b883a 	mov	r21,r5
 800a790:	003f0706 	br	800a3b0 <__alt_data_end+0xfc00a3b0>
 800a794:	01400404 	movi	r5,16
 800a798:	2805883a 	mov	r2,r5
 800a79c:	003ecd06 	br	800a2d4 <__alt_data_end+0xfc00a2d4>
 800a7a0:	0005883a 	mov	r2,zero
 800a7a4:	0007883a 	mov	r3,zero
 800a7a8:	003f1e06 	br	800a424 <__alt_data_end+0xfc00a424>
 800a7ac:	00800404 	movi	r2,16
 800a7b0:	1007883a 	mov	r3,r2
 800a7b4:	003f1b06 	br	800a424 <__alt_data_end+0xfc00a424>
 800a7b8:	000b883a 	mov	r5,zero
 800a7bc:	0005883a 	mov	r2,zero
 800a7c0:	003ec406 	br	800a2d4 <__alt_data_end+0xfc00a2d4>
 800a7c4:	413f952e 	bgeu	r8,r4,800a61c <__alt_data_end+0xfc00a61c>
 800a7c8:	10bfff84 	addi	r2,r2,-2
 800a7cc:	4451883a 	add	r8,r8,r17
 800a7d0:	003f9306 	br	800a620 <__alt_data_end+0xfc00a620>
 800a7d4:	2f3f7d2e 	bgeu	r5,fp,800a5cc <__alt_data_end+0xfc00a5cc>
 800a7d8:	b5bfff84 	addi	r22,r22,-2
 800a7dc:	2c4b883a 	add	r5,r5,r17
 800a7e0:	003f7b06 	br	800a5d0 <__alt_data_end+0xfc00a5d0>
 800a7e4:	34cd883a 	add	r6,r6,r19
 800a7e8:	003f2a06 	br	800a494 <__alt_data_end+0xfc00a494>
 800a7ec:	8005883a 	mov	r2,r16
 800a7f0:	003efe06 	br	800a3ec <__alt_data_end+0xfc00a3ec>
 800a7f4:	81bfdb36 	bltu	r16,r6,800a764 <__alt_data_end+0xfc00a764>
 800a7f8:	300f883a 	mov	r7,r6
 800a7fc:	0009883a 	mov	r4,zero
 800a800:	003fa106 	br	800a688 <__alt_data_end+0xfc00a688>

0800a804 <udivmodsi4>:
 800a804:	2900182e 	bgeu	r5,r4,800a868 <udivmodsi4+0x64>
 800a808:	28001716 	blt	r5,zero,800a868 <udivmodsi4+0x64>
 800a80c:	00800804 	movi	r2,32
 800a810:	00c00044 	movi	r3,1
 800a814:	00000206 	br	800a820 <udivmodsi4+0x1c>
 800a818:	10001126 	beq	r2,zero,800a860 <udivmodsi4+0x5c>
 800a81c:	28000516 	blt	r5,zero,800a834 <udivmodsi4+0x30>
 800a820:	294b883a 	add	r5,r5,r5
 800a824:	10bfffc4 	addi	r2,r2,-1
 800a828:	18c7883a 	add	r3,r3,r3
 800a82c:	293ffa36 	bltu	r5,r4,800a818 <__alt_data_end+0xfc00a818>
 800a830:	18000b26 	beq	r3,zero,800a860 <udivmodsi4+0x5c>
 800a834:	0005883a 	mov	r2,zero
 800a838:	21400236 	bltu	r4,r5,800a844 <udivmodsi4+0x40>
 800a83c:	2149c83a 	sub	r4,r4,r5
 800a840:	10c4b03a 	or	r2,r2,r3
 800a844:	1806d07a 	srli	r3,r3,1
 800a848:	280ad07a 	srli	r5,r5,1
 800a84c:	183ffa1e 	bne	r3,zero,800a838 <__alt_data_end+0xfc00a838>
 800a850:	3000011e 	bne	r6,zero,800a858 <udivmodsi4+0x54>
 800a854:	f800283a 	ret
 800a858:	2005883a 	mov	r2,r4
 800a85c:	f800283a 	ret
 800a860:	0005883a 	mov	r2,zero
 800a864:	003ffa06 	br	800a850 <__alt_data_end+0xfc00a850>
 800a868:	00c00044 	movi	r3,1
 800a86c:	003ff106 	br	800a834 <__alt_data_end+0xfc00a834>

0800a870 <__divsi3>:
 800a870:	defffe04 	addi	sp,sp,-8
 800a874:	dfc00115 	stw	ra,4(sp)
 800a878:	dc000015 	stw	r16,0(sp)
 800a87c:	20000b16 	blt	r4,zero,800a8ac <__divsi3+0x3c>
 800a880:	0021883a 	mov	r16,zero
 800a884:	28000c16 	blt	r5,zero,800a8b8 <__divsi3+0x48>
 800a888:	000d883a 	mov	r6,zero
 800a88c:	800a8040 	call	800a804 <udivmodsi4>
 800a890:	0407c83a 	sub	r3,zero,r16
 800a894:	1884f03a 	xor	r2,r3,r2
 800a898:	1405883a 	add	r2,r2,r16
 800a89c:	dfc00117 	ldw	ra,4(sp)
 800a8a0:	dc000017 	ldw	r16,0(sp)
 800a8a4:	dec00204 	addi	sp,sp,8
 800a8a8:	f800283a 	ret
 800a8ac:	0109c83a 	sub	r4,zero,r4
 800a8b0:	04000044 	movi	r16,1
 800a8b4:	283ff40e 	bge	r5,zero,800a888 <__alt_data_end+0xfc00a888>
 800a8b8:	014bc83a 	sub	r5,zero,r5
 800a8bc:	8400005c 	xori	r16,r16,1
 800a8c0:	003ff106 	br	800a888 <__alt_data_end+0xfc00a888>

0800a8c4 <__modsi3>:
 800a8c4:	defffd04 	addi	sp,sp,-12
 800a8c8:	dfc00215 	stw	ra,8(sp)
 800a8cc:	dc400115 	stw	r17,4(sp)
 800a8d0:	dc000015 	stw	r16,0(sp)
 800a8d4:	20000c16 	blt	r4,zero,800a908 <__modsi3+0x44>
 800a8d8:	0023883a 	mov	r17,zero
 800a8dc:	0021883a 	mov	r16,zero
 800a8e0:	28000d16 	blt	r5,zero,800a918 <__modsi3+0x54>
 800a8e4:	01800044 	movi	r6,1
 800a8e8:	800a8040 	call	800a804 <udivmodsi4>
 800a8ec:	1404f03a 	xor	r2,r2,r16
 800a8f0:	8885883a 	add	r2,r17,r2
 800a8f4:	dfc00217 	ldw	ra,8(sp)
 800a8f8:	dc400117 	ldw	r17,4(sp)
 800a8fc:	dc000017 	ldw	r16,0(sp)
 800a900:	dec00304 	addi	sp,sp,12
 800a904:	f800283a 	ret
 800a908:	0109c83a 	sub	r4,zero,r4
 800a90c:	04400044 	movi	r17,1
 800a910:	043fffc4 	movi	r16,-1
 800a914:	283ff30e 	bge	r5,zero,800a8e4 <__alt_data_end+0xfc00a8e4>
 800a918:	014bc83a 	sub	r5,zero,r5
 800a91c:	003ff106 	br	800a8e4 <__alt_data_end+0xfc00a8e4>

0800a920 <__udivsi3>:
 800a920:	000d883a 	mov	r6,zero
 800a924:	800a8041 	jmpi	800a804 <udivmodsi4>

0800a928 <__umodsi3>:
 800a928:	01800044 	movi	r6,1
 800a92c:	800a8041 	jmpi	800a804 <udivmodsi4>

0800a930 <__adddf3>:
 800a930:	02000434 	movhi	r8,16
 800a934:	423fffc4 	addi	r8,r8,-1
 800a938:	defffb04 	addi	sp,sp,-20
 800a93c:	2a12703a 	and	r9,r5,r8
 800a940:	2806d7fa 	srli	r3,r5,31
 800a944:	3a10703a 	and	r8,r7,r8
 800a948:	3804d53a 	srli	r2,r7,20
 800a94c:	3014d77a 	srli	r10,r6,29
 800a950:	dc000015 	stw	r16,0(sp)
 800a954:	481290fa 	slli	r9,r9,3
 800a958:	2820d53a 	srli	r16,r5,20
 800a95c:	401090fa 	slli	r8,r8,3
 800a960:	200ad77a 	srli	r5,r4,29
 800a964:	380ed7fa 	srli	r7,r7,31
 800a968:	dc800215 	stw	r18,8(sp)
 800a96c:	dc400115 	stw	r17,4(sp)
 800a970:	dfc00415 	stw	ra,16(sp)
 800a974:	dcc00315 	stw	r19,12(sp)
 800a978:	1c803fcc 	andi	r18,r3,255
 800a97c:	8401ffcc 	andi	r16,r16,2047
 800a980:	494ab03a 	or	r5,r9,r5
 800a984:	202290fa 	slli	r17,r4,3
 800a988:	1081ffcc 	andi	r2,r2,2047
 800a98c:	4290b03a 	or	r8,r8,r10
 800a990:	300c90fa 	slli	r6,r6,3
 800a994:	91c07026 	beq	r18,r7,800ab58 <__adddf3+0x228>
 800a998:	8087c83a 	sub	r3,r16,r2
 800a99c:	00c0b30e 	bge	zero,r3,800ac6c <__adddf3+0x33c>
 800a9a0:	10002a1e 	bne	r2,zero,800aa4c <__adddf3+0x11c>
 800a9a4:	4184b03a 	or	r2,r8,r6
 800a9a8:	1000991e 	bne	r2,zero,800ac10 <__adddf3+0x2e0>
 800a9ac:	888001cc 	andi	r2,r17,7
 800a9b0:	10005b26 	beq	r2,zero,800ab20 <__adddf3+0x1f0>
 800a9b4:	88c003cc 	andi	r3,r17,15
 800a9b8:	00800104 	movi	r2,4
 800a9bc:	18805826 	beq	r3,r2,800ab20 <__adddf3+0x1f0>
 800a9c0:	89800104 	addi	r6,r17,4
 800a9c4:	3463803a 	cmpltu	r17,r6,r17
 800a9c8:	2c4b883a 	add	r5,r5,r17
 800a9cc:	2880202c 	andhi	r2,r5,128
 800a9d0:	9007883a 	mov	r3,r18
 800a9d4:	3023883a 	mov	r17,r6
 800a9d8:	10005426 	beq	r2,zero,800ab2c <__adddf3+0x1fc>
 800a9dc:	84000044 	addi	r16,r16,1
 800a9e0:	0081ffc4 	movi	r2,2047
 800a9e4:	8080c126 	beq	r16,r2,800acec <__adddf3+0x3bc>
 800a9e8:	013fe034 	movhi	r4,65408
 800a9ec:	213fffc4 	addi	r4,r4,-1
 800a9f0:	290a703a 	and	r5,r5,r4
 800a9f4:	2804977a 	slli	r2,r5,29
 800a9f8:	280a927a 	slli	r5,r5,9
 800a9fc:	8822d0fa 	srli	r17,r17,3
 800aa00:	8401ffcc 	andi	r16,r16,2047
 800aa04:	2808d33a 	srli	r4,r5,12
 800aa08:	1444b03a 	or	r2,r2,r17
 800aa0c:	8401ffcc 	andi	r16,r16,2047
 800aa10:	800a953a 	slli	r5,r16,20
 800aa14:	18c03fcc 	andi	r3,r3,255
 800aa18:	04000434 	movhi	r16,16
 800aa1c:	180697fa 	slli	r3,r3,31
 800aa20:	843fffc4 	addi	r16,r16,-1
 800aa24:	2420703a 	and	r16,r4,r16
 800aa28:	8160b03a 	or	r16,r16,r5
 800aa2c:	80c6b03a 	or	r3,r16,r3
 800aa30:	dfc00417 	ldw	ra,16(sp)
 800aa34:	dcc00317 	ldw	r19,12(sp)
 800aa38:	dc800217 	ldw	r18,8(sp)
 800aa3c:	dc400117 	ldw	r17,4(sp)
 800aa40:	dc000017 	ldw	r16,0(sp)
 800aa44:	dec00504 	addi	sp,sp,20
 800aa48:	f800283a 	ret
 800aa4c:	0081ffc4 	movi	r2,2047
 800aa50:	80bfd626 	beq	r16,r2,800a9ac <__alt_data_end+0xfc00a9ac>
 800aa54:	42002034 	orhi	r8,r8,128
 800aa58:	00800e04 	movi	r2,56
 800aa5c:	10c0a616 	blt	r2,r3,800acf8 <__adddf3+0x3c8>
 800aa60:	008007c4 	movi	r2,31
 800aa64:	10c0c916 	blt	r2,r3,800ad8c <__adddf3+0x45c>
 800aa68:	00800804 	movi	r2,32
 800aa6c:	10c5c83a 	sub	r2,r2,r3
 800aa70:	408e983a 	sll	r7,r8,r2
 800aa74:	30c8d83a 	srl	r4,r6,r3
 800aa78:	3084983a 	sll	r2,r6,r2
 800aa7c:	40c6d83a 	srl	r3,r8,r3
 800aa80:	390cb03a 	or	r6,r7,r4
 800aa84:	1004c03a 	cmpne	r2,r2,zero
 800aa88:	308cb03a 	or	r6,r6,r2
 800aa8c:	898dc83a 	sub	r6,r17,r6
 800aa90:	89a3803a 	cmpltu	r17,r17,r6
 800aa94:	28cbc83a 	sub	r5,r5,r3
 800aa98:	2c4bc83a 	sub	r5,r5,r17
 800aa9c:	3023883a 	mov	r17,r6
 800aaa0:	2880202c 	andhi	r2,r5,128
 800aaa4:	10006d26 	beq	r2,zero,800ac5c <__adddf3+0x32c>
 800aaa8:	04c02034 	movhi	r19,128
 800aaac:	9cffffc4 	addi	r19,r19,-1
 800aab0:	2ce6703a 	and	r19,r5,r19
 800aab4:	98007e26 	beq	r19,zero,800acb0 <__adddf3+0x380>
 800aab8:	9809883a 	mov	r4,r19
 800aabc:	800cecc0 	call	800cecc <__clzsi2>
 800aac0:	10fffe04 	addi	r3,r2,-8
 800aac4:	010007c4 	movi	r4,31
 800aac8:	20c07f16 	blt	r4,r3,800acc8 <__adddf3+0x398>
 800aacc:	01400a04 	movi	r5,40
 800aad0:	2885c83a 	sub	r2,r5,r2
 800aad4:	888ad83a 	srl	r5,r17,r2
 800aad8:	98e6983a 	sll	r19,r19,r3
 800aadc:	88e2983a 	sll	r17,r17,r3
 800aae0:	2ce6b03a 	or	r19,r5,r19
 800aae4:	1c007c16 	blt	r3,r16,800acd8 <__adddf3+0x3a8>
 800aae8:	1c21c83a 	sub	r16,r3,r16
 800aaec:	81400044 	addi	r5,r16,1
 800aaf0:	00c007c4 	movi	r3,31
 800aaf4:	19409816 	blt	r3,r5,800ad58 <__adddf3+0x428>
 800aaf8:	1c21c83a 	sub	r16,r3,r16
 800aafc:	8c08983a 	sll	r4,r17,r16
 800ab00:	8946d83a 	srl	r3,r17,r5
 800ab04:	9c20983a 	sll	r16,r19,r16
 800ab08:	2008c03a 	cmpne	r4,r4,zero
 800ab0c:	994ad83a 	srl	r5,r19,r5
 800ab10:	1c06b03a 	or	r3,r3,r16
 800ab14:	1922b03a 	or	r17,r3,r4
 800ab18:	0021883a 	mov	r16,zero
 800ab1c:	003fa306 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ab20:	2880202c 	andhi	r2,r5,128
 800ab24:	9007883a 	mov	r3,r18
 800ab28:	103fac1e 	bne	r2,zero,800a9dc <__alt_data_end+0xfc00a9dc>
 800ab2c:	2804977a 	slli	r2,r5,29
 800ab30:	8822d0fa 	srli	r17,r17,3
 800ab34:	0101ffc4 	movi	r4,2047
 800ab38:	280ad0fa 	srli	r5,r5,3
 800ab3c:	1444b03a 	or	r2,r2,r17
 800ab40:	81002c26 	beq	r16,r4,800abf4 <__adddf3+0x2c4>
 800ab44:	8120703a 	and	r16,r16,r4
 800ab48:	01000434 	movhi	r4,16
 800ab4c:	213fffc4 	addi	r4,r4,-1
 800ab50:	2908703a 	and	r4,r5,r4
 800ab54:	003fad06 	br	800aa0c <__alt_data_end+0xfc00aa0c>
 800ab58:	8089c83a 	sub	r4,r16,r2
 800ab5c:	01006a0e 	bge	zero,r4,800ad08 <__adddf3+0x3d8>
 800ab60:	10003326 	beq	r2,zero,800ac30 <__adddf3+0x300>
 800ab64:	0081ffc4 	movi	r2,2047
 800ab68:	80bf9026 	beq	r16,r2,800a9ac <__alt_data_end+0xfc00a9ac>
 800ab6c:	42002034 	orhi	r8,r8,128
 800ab70:	00800e04 	movi	r2,56
 800ab74:	1100b116 	blt	r2,r4,800ae3c <__adddf3+0x50c>
 800ab78:	008007c4 	movi	r2,31
 800ab7c:	1100e216 	blt	r2,r4,800af08 <__adddf3+0x5d8>
 800ab80:	00800804 	movi	r2,32
 800ab84:	1105c83a 	sub	r2,r2,r4
 800ab88:	4092983a 	sll	r9,r8,r2
 800ab8c:	310ed83a 	srl	r7,r6,r4
 800ab90:	3084983a 	sll	r2,r6,r2
 800ab94:	4110d83a 	srl	r8,r8,r4
 800ab98:	49ccb03a 	or	r6,r9,r7
 800ab9c:	1004c03a 	cmpne	r2,r2,zero
 800aba0:	308cb03a 	or	r6,r6,r2
 800aba4:	344d883a 	add	r6,r6,r17
 800aba8:	3463803a 	cmpltu	r17,r6,r17
 800abac:	414b883a 	add	r5,r8,r5
 800abb0:	2c4b883a 	add	r5,r5,r17
 800abb4:	3023883a 	mov	r17,r6
 800abb8:	2880202c 	andhi	r2,r5,128
 800abbc:	10002726 	beq	r2,zero,800ac5c <__adddf3+0x32c>
 800abc0:	84000044 	addi	r16,r16,1
 800abc4:	0081ffc4 	movi	r2,2047
 800abc8:	8080ae26 	beq	r16,r2,800ae84 <__adddf3+0x554>
 800abcc:	00bfe034 	movhi	r2,65408
 800abd0:	10bfffc4 	addi	r2,r2,-1
 800abd4:	288a703a 	and	r5,r5,r2
 800abd8:	880cd07a 	srli	r6,r17,1
 800abdc:	280897fa 	slli	r4,r5,31
 800abe0:	88c0004c 	andi	r3,r17,1
 800abe4:	30e2b03a 	or	r17,r6,r3
 800abe8:	280ad07a 	srli	r5,r5,1
 800abec:	8922b03a 	or	r17,r17,r4
 800abf0:	003f6e06 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800abf4:	1148b03a 	or	r4,r2,r5
 800abf8:	20003c26 	beq	r4,zero,800acec <__adddf3+0x3bc>
 800abfc:	29000234 	orhi	r4,r5,8
 800ac00:	01400434 	movhi	r5,16
 800ac04:	297fffc4 	addi	r5,r5,-1
 800ac08:	2148703a 	and	r4,r4,r5
 800ac0c:	003f7f06 	br	800aa0c <__alt_data_end+0xfc00aa0c>
 800ac10:	18ffffc4 	addi	r3,r3,-1
 800ac14:	18004d1e 	bne	r3,zero,800ad4c <__adddf3+0x41c>
 800ac18:	898dc83a 	sub	r6,r17,r6
 800ac1c:	89a3803a 	cmpltu	r17,r17,r6
 800ac20:	2a0bc83a 	sub	r5,r5,r8
 800ac24:	2c4bc83a 	sub	r5,r5,r17
 800ac28:	3023883a 	mov	r17,r6
 800ac2c:	003f9c06 	br	800aaa0 <__alt_data_end+0xfc00aaa0>
 800ac30:	4184b03a 	or	r2,r8,r6
 800ac34:	103f5d26 	beq	r2,zero,800a9ac <__alt_data_end+0xfc00a9ac>
 800ac38:	213fffc4 	addi	r4,r4,-1
 800ac3c:	203fd926 	beq	r4,zero,800aba4 <__alt_data_end+0xfc00aba4>
 800ac40:	0081ffc4 	movi	r2,2047
 800ac44:	80bfca1e 	bne	r16,r2,800ab70 <__alt_data_end+0xfc00ab70>
 800ac48:	003f5806 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ac4c:	10c8b03a 	or	r4,r2,r3
 800ac50:	20008b26 	beq	r4,zero,800ae80 <__adddf3+0x550>
 800ac54:	100b883a 	mov	r5,r2
 800ac58:	1823883a 	mov	r17,r3
 800ac5c:	888001cc 	andi	r2,r17,7
 800ac60:	103f541e 	bne	r2,zero,800a9b4 <__alt_data_end+0xfc00a9b4>
 800ac64:	9007883a 	mov	r3,r18
 800ac68:	003fb006 	br	800ab2c <__alt_data_end+0xfc00ab2c>
 800ac6c:	1800531e 	bne	r3,zero,800adbc <__adddf3+0x48c>
 800ac70:	80800044 	addi	r2,r16,1
 800ac74:	1081ffcc 	andi	r2,r2,2047
 800ac78:	00c00044 	movi	r3,1
 800ac7c:	1880990e 	bge	r3,r2,800aee4 <__adddf3+0x5b4>
 800ac80:	8985c83a 	sub	r2,r17,r6
 800ac84:	8887803a 	cmpltu	r3,r17,r2
 800ac88:	2a27c83a 	sub	r19,r5,r8
 800ac8c:	98e7c83a 	sub	r19,r19,r3
 800ac90:	98c0202c 	andhi	r3,r19,128
 800ac94:	18006226 	beq	r3,zero,800ae20 <__adddf3+0x4f0>
 800ac98:	3463c83a 	sub	r17,r6,r17
 800ac9c:	4151c83a 	sub	r8,r8,r5
 800aca0:	344d803a 	cmpltu	r6,r6,r17
 800aca4:	41a7c83a 	sub	r19,r8,r6
 800aca8:	3825883a 	mov	r18,r7
 800acac:	983f821e 	bne	r19,zero,800aab8 <__alt_data_end+0xfc00aab8>
 800acb0:	8809883a 	mov	r4,r17
 800acb4:	800cecc0 	call	800cecc <__clzsi2>
 800acb8:	10800804 	addi	r2,r2,32
 800acbc:	10fffe04 	addi	r3,r2,-8
 800acc0:	010007c4 	movi	r4,31
 800acc4:	20ff810e 	bge	r4,r3,800aacc <__alt_data_end+0xfc00aacc>
 800acc8:	14fff604 	addi	r19,r2,-40
 800accc:	8ce6983a 	sll	r19,r17,r19
 800acd0:	0023883a 	mov	r17,zero
 800acd4:	1c3f840e 	bge	r3,r16,800aae8 <__alt_data_end+0xfc00aae8>
 800acd8:	017fe034 	movhi	r5,65408
 800acdc:	297fffc4 	addi	r5,r5,-1
 800ace0:	80e1c83a 	sub	r16,r16,r3
 800ace4:	994a703a 	and	r5,r19,r5
 800ace8:	003f3006 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800acec:	0009883a 	mov	r4,zero
 800acf0:	0005883a 	mov	r2,zero
 800acf4:	003f4506 	br	800aa0c <__alt_data_end+0xfc00aa0c>
 800acf8:	418cb03a 	or	r6,r8,r6
 800acfc:	300cc03a 	cmpne	r6,r6,zero
 800ad00:	0007883a 	mov	r3,zero
 800ad04:	003f6106 	br	800aa8c <__alt_data_end+0xfc00aa8c>
 800ad08:	2000921e 	bne	r4,zero,800af54 <__adddf3+0x624>
 800ad0c:	80800044 	addi	r2,r16,1
 800ad10:	11c1ffcc 	andi	r7,r2,2047
 800ad14:	01000044 	movi	r4,1
 800ad18:	21c0610e 	bge	r4,r7,800aea0 <__adddf3+0x570>
 800ad1c:	0101ffc4 	movi	r4,2047
 800ad20:	1100a326 	beq	r2,r4,800afb0 <__adddf3+0x680>
 800ad24:	344d883a 	add	r6,r6,r17
 800ad28:	3463803a 	cmpltu	r17,r6,r17
 800ad2c:	414b883a 	add	r5,r8,r5
 800ad30:	2c4b883a 	add	r5,r5,r17
 800ad34:	282297fa 	slli	r17,r5,31
 800ad38:	300cd07a 	srli	r6,r6,1
 800ad3c:	280ad07a 	srli	r5,r5,1
 800ad40:	1021883a 	mov	r16,r2
 800ad44:	89a2b03a 	or	r17,r17,r6
 800ad48:	003f1806 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ad4c:	0081ffc4 	movi	r2,2047
 800ad50:	80bf411e 	bne	r16,r2,800aa58 <__alt_data_end+0xfc00aa58>
 800ad54:	003f1506 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ad58:	80bff844 	addi	r2,r16,-31
 800ad5c:	00c00804 	movi	r3,32
 800ad60:	9884d83a 	srl	r2,r19,r2
 800ad64:	28c04a26 	beq	r5,r3,800ae90 <__adddf3+0x560>
 800ad68:	00c00fc4 	movi	r3,63
 800ad6c:	1c21c83a 	sub	r16,r3,r16
 800ad70:	9c26983a 	sll	r19,r19,r16
 800ad74:	9c62b03a 	or	r17,r19,r17
 800ad78:	8822c03a 	cmpne	r17,r17,zero
 800ad7c:	88a2b03a 	or	r17,r17,r2
 800ad80:	000b883a 	mov	r5,zero
 800ad84:	0021883a 	mov	r16,zero
 800ad88:	003fb406 	br	800ac5c <__alt_data_end+0xfc00ac5c>
 800ad8c:	18bff804 	addi	r2,r3,-32
 800ad90:	01000804 	movi	r4,32
 800ad94:	4084d83a 	srl	r2,r8,r2
 800ad98:	19003f26 	beq	r3,r4,800ae98 <__adddf3+0x568>
 800ad9c:	01001004 	movi	r4,64
 800ada0:	20c7c83a 	sub	r3,r4,r3
 800ada4:	40d0983a 	sll	r8,r8,r3
 800ada8:	418cb03a 	or	r6,r8,r6
 800adac:	300cc03a 	cmpne	r6,r6,zero
 800adb0:	308cb03a 	or	r6,r6,r2
 800adb4:	0007883a 	mov	r3,zero
 800adb8:	003f3406 	br	800aa8c <__alt_data_end+0xfc00aa8c>
 800adbc:	80002326 	beq	r16,zero,800ae4c <__adddf3+0x51c>
 800adc0:	0101ffc4 	movi	r4,2047
 800adc4:	11005e26 	beq	r2,r4,800af40 <__adddf3+0x610>
 800adc8:	00c7c83a 	sub	r3,zero,r3
 800adcc:	29402034 	orhi	r5,r5,128
 800add0:	01000e04 	movi	r4,56
 800add4:	20c07216 	blt	r4,r3,800afa0 <__adddf3+0x670>
 800add8:	010007c4 	movi	r4,31
 800addc:	20c0ce16 	blt	r4,r3,800b118 <__adddf3+0x7e8>
 800ade0:	01000804 	movi	r4,32
 800ade4:	20c9c83a 	sub	r4,r4,r3
 800ade8:	2914983a 	sll	r10,r5,r4
 800adec:	88d2d83a 	srl	r9,r17,r3
 800adf0:	8908983a 	sll	r4,r17,r4
 800adf4:	28c6d83a 	srl	r3,r5,r3
 800adf8:	5262b03a 	or	r17,r10,r9
 800adfc:	2008c03a 	cmpne	r4,r4,zero
 800ae00:	8922b03a 	or	r17,r17,r4
 800ae04:	3463c83a 	sub	r17,r6,r17
 800ae08:	40c7c83a 	sub	r3,r8,r3
 800ae0c:	344d803a 	cmpltu	r6,r6,r17
 800ae10:	198bc83a 	sub	r5,r3,r6
 800ae14:	1021883a 	mov	r16,r2
 800ae18:	3825883a 	mov	r18,r7
 800ae1c:	003f2006 	br	800aaa0 <__alt_data_end+0xfc00aaa0>
 800ae20:	9886b03a 	or	r3,r19,r2
 800ae24:	1800141e 	bne	r3,zero,800ae78 <__adddf3+0x548>
 800ae28:	0007883a 	mov	r3,zero
 800ae2c:	000b883a 	mov	r5,zero
 800ae30:	0023883a 	mov	r17,zero
 800ae34:	0021883a 	mov	r16,zero
 800ae38:	003f3c06 	br	800ab2c <__alt_data_end+0xfc00ab2c>
 800ae3c:	418cb03a 	or	r6,r8,r6
 800ae40:	300cc03a 	cmpne	r6,r6,zero
 800ae44:	0011883a 	mov	r8,zero
 800ae48:	003f5606 	br	800aba4 <__alt_data_end+0xfc00aba4>
 800ae4c:	2c48b03a 	or	r4,r5,r17
 800ae50:	20003b26 	beq	r4,zero,800af40 <__adddf3+0x610>
 800ae54:	00c6303a 	nor	r3,zero,r3
 800ae58:	1800371e 	bne	r3,zero,800af38 <__adddf3+0x608>
 800ae5c:	3463c83a 	sub	r17,r6,r17
 800ae60:	414bc83a 	sub	r5,r8,r5
 800ae64:	344d803a 	cmpltu	r6,r6,r17
 800ae68:	298bc83a 	sub	r5,r5,r6
 800ae6c:	1021883a 	mov	r16,r2
 800ae70:	3825883a 	mov	r18,r7
 800ae74:	003f0a06 	br	800aaa0 <__alt_data_end+0xfc00aaa0>
 800ae78:	1023883a 	mov	r17,r2
 800ae7c:	003f0d06 	br	800aab4 <__alt_data_end+0xfc00aab4>
 800ae80:	0007883a 	mov	r3,zero
 800ae84:	000b883a 	mov	r5,zero
 800ae88:	0023883a 	mov	r17,zero
 800ae8c:	003f2706 	br	800ab2c <__alt_data_end+0xfc00ab2c>
 800ae90:	0027883a 	mov	r19,zero
 800ae94:	003fb706 	br	800ad74 <__alt_data_end+0xfc00ad74>
 800ae98:	0011883a 	mov	r8,zero
 800ae9c:	003fc206 	br	800ada8 <__alt_data_end+0xfc00ada8>
 800aea0:	2c44b03a 	or	r2,r5,r17
 800aea4:	8000871e 	bne	r16,zero,800b0c4 <__adddf3+0x794>
 800aea8:	1000b126 	beq	r2,zero,800b170 <__adddf3+0x840>
 800aeac:	4184b03a 	or	r2,r8,r6
 800aeb0:	103ebe26 	beq	r2,zero,800a9ac <__alt_data_end+0xfc00a9ac>
 800aeb4:	3445883a 	add	r2,r6,r17
 800aeb8:	1463803a 	cmpltu	r17,r2,r17
 800aebc:	414b883a 	add	r5,r8,r5
 800aec0:	2c4b883a 	add	r5,r5,r17
 800aec4:	28c0202c 	andhi	r3,r5,128
 800aec8:	1023883a 	mov	r17,r2
 800aecc:	183f6326 	beq	r3,zero,800ac5c <__alt_data_end+0xfc00ac5c>
 800aed0:	00bfe034 	movhi	r2,65408
 800aed4:	10bfffc4 	addi	r2,r2,-1
 800aed8:	2021883a 	mov	r16,r4
 800aedc:	288a703a 	and	r5,r5,r2
 800aee0:	003eb206 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800aee4:	2c44b03a 	or	r2,r5,r17
 800aee8:	8000251e 	bne	r16,zero,800af80 <__adddf3+0x650>
 800aeec:	10004b1e 	bne	r2,zero,800b01c <__adddf3+0x6ec>
 800aef0:	4184b03a 	or	r2,r8,r6
 800aef4:	103fe226 	beq	r2,zero,800ae80 <__alt_data_end+0xfc00ae80>
 800aef8:	400b883a 	mov	r5,r8
 800aefc:	3023883a 	mov	r17,r6
 800af00:	3825883a 	mov	r18,r7
 800af04:	003ea906 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800af08:	20bff804 	addi	r2,r4,-32
 800af0c:	01c00804 	movi	r7,32
 800af10:	4084d83a 	srl	r2,r8,r2
 800af14:	21c07e26 	beq	r4,r7,800b110 <__adddf3+0x7e0>
 800af18:	01c01004 	movi	r7,64
 800af1c:	3909c83a 	sub	r4,r7,r4
 800af20:	4110983a 	sll	r8,r8,r4
 800af24:	418cb03a 	or	r6,r8,r6
 800af28:	300cc03a 	cmpne	r6,r6,zero
 800af2c:	308cb03a 	or	r6,r6,r2
 800af30:	0011883a 	mov	r8,zero
 800af34:	003f1b06 	br	800aba4 <__alt_data_end+0xfc00aba4>
 800af38:	0101ffc4 	movi	r4,2047
 800af3c:	113fa41e 	bne	r2,r4,800add0 <__alt_data_end+0xfc00add0>
 800af40:	400b883a 	mov	r5,r8
 800af44:	3023883a 	mov	r17,r6
 800af48:	1021883a 	mov	r16,r2
 800af4c:	3825883a 	mov	r18,r7
 800af50:	003e9606 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800af54:	80001a1e 	bne	r16,zero,800afc0 <__adddf3+0x690>
 800af58:	2c4eb03a 	or	r7,r5,r17
 800af5c:	38005526 	beq	r7,zero,800b0b4 <__adddf3+0x784>
 800af60:	0108303a 	nor	r4,zero,r4
 800af64:	2000511e 	bne	r4,zero,800b0ac <__adddf3+0x77c>
 800af68:	89a3883a 	add	r17,r17,r6
 800af6c:	414b883a 	add	r5,r8,r5
 800af70:	898d803a 	cmpltu	r6,r17,r6
 800af74:	298b883a 	add	r5,r5,r6
 800af78:	1021883a 	mov	r16,r2
 800af7c:	003f0e06 	br	800abb8 <__alt_data_end+0xfc00abb8>
 800af80:	1000341e 	bne	r2,zero,800b054 <__adddf3+0x724>
 800af84:	4184b03a 	or	r2,r8,r6
 800af88:	10006f26 	beq	r2,zero,800b148 <__adddf3+0x818>
 800af8c:	400b883a 	mov	r5,r8
 800af90:	3023883a 	mov	r17,r6
 800af94:	3825883a 	mov	r18,r7
 800af98:	0401ffc4 	movi	r16,2047
 800af9c:	003e8306 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800afa0:	2c62b03a 	or	r17,r5,r17
 800afa4:	8822c03a 	cmpne	r17,r17,zero
 800afa8:	0007883a 	mov	r3,zero
 800afac:	003f9506 	br	800ae04 <__alt_data_end+0xfc00ae04>
 800afb0:	1021883a 	mov	r16,r2
 800afb4:	000b883a 	mov	r5,zero
 800afb8:	0023883a 	mov	r17,zero
 800afbc:	003edb06 	br	800ab2c <__alt_data_end+0xfc00ab2c>
 800afc0:	01c1ffc4 	movi	r7,2047
 800afc4:	11c03b26 	beq	r2,r7,800b0b4 <__adddf3+0x784>
 800afc8:	0109c83a 	sub	r4,zero,r4
 800afcc:	29402034 	orhi	r5,r5,128
 800afd0:	01c00e04 	movi	r7,56
 800afd4:	39006216 	blt	r7,r4,800b160 <__adddf3+0x830>
 800afd8:	01c007c4 	movi	r7,31
 800afdc:	39006b16 	blt	r7,r4,800b18c <__adddf3+0x85c>
 800afe0:	01c00804 	movi	r7,32
 800afe4:	390fc83a 	sub	r7,r7,r4
 800afe8:	29d4983a 	sll	r10,r5,r7
 800afec:	8912d83a 	srl	r9,r17,r4
 800aff0:	89ce983a 	sll	r7,r17,r7
 800aff4:	2908d83a 	srl	r4,r5,r4
 800aff8:	5262b03a 	or	r17,r10,r9
 800affc:	380ac03a 	cmpne	r5,r7,zero
 800b000:	8962b03a 	or	r17,r17,r5
 800b004:	89a3883a 	add	r17,r17,r6
 800b008:	2211883a 	add	r8,r4,r8
 800b00c:	898d803a 	cmpltu	r6,r17,r6
 800b010:	418b883a 	add	r5,r8,r6
 800b014:	1021883a 	mov	r16,r2
 800b018:	003ee706 	br	800abb8 <__alt_data_end+0xfc00abb8>
 800b01c:	4184b03a 	or	r2,r8,r6
 800b020:	103e6226 	beq	r2,zero,800a9ac <__alt_data_end+0xfc00a9ac>
 800b024:	8987c83a 	sub	r3,r17,r6
 800b028:	88c9803a 	cmpltu	r4,r17,r3
 800b02c:	2a05c83a 	sub	r2,r5,r8
 800b030:	1105c83a 	sub	r2,r2,r4
 800b034:	1100202c 	andhi	r4,r2,128
 800b038:	203f0426 	beq	r4,zero,800ac4c <__alt_data_end+0xfc00ac4c>
 800b03c:	3463c83a 	sub	r17,r6,r17
 800b040:	414bc83a 	sub	r5,r8,r5
 800b044:	344d803a 	cmpltu	r6,r6,r17
 800b048:	298bc83a 	sub	r5,r5,r6
 800b04c:	3825883a 	mov	r18,r7
 800b050:	003e5606 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800b054:	4184b03a 	or	r2,r8,r6
 800b058:	10002b26 	beq	r2,zero,800b108 <__adddf3+0x7d8>
 800b05c:	2804d0fa 	srli	r2,r5,3
 800b060:	8822d0fa 	srli	r17,r17,3
 800b064:	280a977a 	slli	r5,r5,29
 800b068:	10c0022c 	andhi	r3,r2,8
 800b06c:	2c62b03a 	or	r17,r5,r17
 800b070:	18000826 	beq	r3,zero,800b094 <__adddf3+0x764>
 800b074:	4008d0fa 	srli	r4,r8,3
 800b078:	20c0022c 	andhi	r3,r4,8
 800b07c:	1800051e 	bne	r3,zero,800b094 <__adddf3+0x764>
 800b080:	300cd0fa 	srli	r6,r6,3
 800b084:	4010977a 	slli	r8,r8,29
 800b088:	2005883a 	mov	r2,r4
 800b08c:	3825883a 	mov	r18,r7
 800b090:	41a2b03a 	or	r17,r8,r6
 800b094:	880ad77a 	srli	r5,r17,29
 800b098:	100490fa 	slli	r2,r2,3
 800b09c:	882290fa 	slli	r17,r17,3
 800b0a0:	0401ffc4 	movi	r16,2047
 800b0a4:	288ab03a 	or	r5,r5,r2
 800b0a8:	003e4006 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800b0ac:	01c1ffc4 	movi	r7,2047
 800b0b0:	11ffc71e 	bne	r2,r7,800afd0 <__alt_data_end+0xfc00afd0>
 800b0b4:	400b883a 	mov	r5,r8
 800b0b8:	3023883a 	mov	r17,r6
 800b0bc:	1021883a 	mov	r16,r2
 800b0c0:	003e3a06 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800b0c4:	10002d26 	beq	r2,zero,800b17c <__adddf3+0x84c>
 800b0c8:	4184b03a 	or	r2,r8,r6
 800b0cc:	10000e26 	beq	r2,zero,800b108 <__adddf3+0x7d8>
 800b0d0:	2804d0fa 	srli	r2,r5,3
 800b0d4:	8822d0fa 	srli	r17,r17,3
 800b0d8:	280a977a 	slli	r5,r5,29
 800b0dc:	10c0022c 	andhi	r3,r2,8
 800b0e0:	2c62b03a 	or	r17,r5,r17
 800b0e4:	183feb26 	beq	r3,zero,800b094 <__alt_data_end+0xfc00b094>
 800b0e8:	4008d0fa 	srli	r4,r8,3
 800b0ec:	20c0022c 	andhi	r3,r4,8
 800b0f0:	183fe81e 	bne	r3,zero,800b094 <__alt_data_end+0xfc00b094>
 800b0f4:	300cd0fa 	srli	r6,r6,3
 800b0f8:	4010977a 	slli	r8,r8,29
 800b0fc:	2005883a 	mov	r2,r4
 800b100:	41a2b03a 	or	r17,r8,r6
 800b104:	003fe306 	br	800b094 <__alt_data_end+0xfc00b094>
 800b108:	0401ffc4 	movi	r16,2047
 800b10c:	003e2706 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800b110:	0011883a 	mov	r8,zero
 800b114:	003f8306 	br	800af24 <__alt_data_end+0xfc00af24>
 800b118:	193ff804 	addi	r4,r3,-32
 800b11c:	02400804 	movi	r9,32
 800b120:	2908d83a 	srl	r4,r5,r4
 800b124:	1a402526 	beq	r3,r9,800b1bc <__adddf3+0x88c>
 800b128:	02401004 	movi	r9,64
 800b12c:	48c7c83a 	sub	r3,r9,r3
 800b130:	28ca983a 	sll	r5,r5,r3
 800b134:	2c62b03a 	or	r17,r5,r17
 800b138:	8822c03a 	cmpne	r17,r17,zero
 800b13c:	8922b03a 	or	r17,r17,r4
 800b140:	0007883a 	mov	r3,zero
 800b144:	003f2f06 	br	800ae04 <__alt_data_end+0xfc00ae04>
 800b148:	01402034 	movhi	r5,128
 800b14c:	0007883a 	mov	r3,zero
 800b150:	297fffc4 	addi	r5,r5,-1
 800b154:	047ffe04 	movi	r17,-8
 800b158:	0401ffc4 	movi	r16,2047
 800b15c:	003e7306 	br	800ab2c <__alt_data_end+0xfc00ab2c>
 800b160:	2c62b03a 	or	r17,r5,r17
 800b164:	8822c03a 	cmpne	r17,r17,zero
 800b168:	0009883a 	mov	r4,zero
 800b16c:	003fa506 	br	800b004 <__alt_data_end+0xfc00b004>
 800b170:	400b883a 	mov	r5,r8
 800b174:	3023883a 	mov	r17,r6
 800b178:	003e0c06 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800b17c:	400b883a 	mov	r5,r8
 800b180:	3023883a 	mov	r17,r6
 800b184:	0401ffc4 	movi	r16,2047
 800b188:	003e0806 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800b18c:	21fff804 	addi	r7,r4,-32
 800b190:	02400804 	movi	r9,32
 800b194:	29ced83a 	srl	r7,r5,r7
 800b198:	22400a26 	beq	r4,r9,800b1c4 <__adddf3+0x894>
 800b19c:	02401004 	movi	r9,64
 800b1a0:	4909c83a 	sub	r4,r9,r4
 800b1a4:	290a983a 	sll	r5,r5,r4
 800b1a8:	2c62b03a 	or	r17,r5,r17
 800b1ac:	8822c03a 	cmpne	r17,r17,zero
 800b1b0:	89e2b03a 	or	r17,r17,r7
 800b1b4:	0009883a 	mov	r4,zero
 800b1b8:	003f9206 	br	800b004 <__alt_data_end+0xfc00b004>
 800b1bc:	000b883a 	mov	r5,zero
 800b1c0:	003fdc06 	br	800b134 <__alt_data_end+0xfc00b134>
 800b1c4:	000b883a 	mov	r5,zero
 800b1c8:	003ff706 	br	800b1a8 <__alt_data_end+0xfc00b1a8>

0800b1cc <__divdf3>:
 800b1cc:	defff204 	addi	sp,sp,-56
 800b1d0:	dd000815 	stw	r20,32(sp)
 800b1d4:	2828d53a 	srli	r20,r5,20
 800b1d8:	dd800a15 	stw	r22,40(sp)
 800b1dc:	282cd7fa 	srli	r22,r5,31
 800b1e0:	dc000415 	stw	r16,16(sp)
 800b1e4:	04000434 	movhi	r16,16
 800b1e8:	df000c15 	stw	fp,48(sp)
 800b1ec:	dcc00715 	stw	r19,28(sp)
 800b1f0:	dc800615 	stw	r18,24(sp)
 800b1f4:	dc400515 	stw	r17,20(sp)
 800b1f8:	843fffc4 	addi	r16,r16,-1
 800b1fc:	dfc00d15 	stw	ra,52(sp)
 800b200:	ddc00b15 	stw	r23,44(sp)
 800b204:	dd400915 	stw	r21,36(sp)
 800b208:	a501ffcc 	andi	r20,r20,2047
 800b20c:	2025883a 	mov	r18,r4
 800b210:	2027883a 	mov	r19,r4
 800b214:	2c22703a 	and	r17,r5,r16
 800b218:	b7003fcc 	andi	fp,r22,255
 800b21c:	a0005e26 	beq	r20,zero,800b398 <__divdf3+0x1cc>
 800b220:	0081ffc4 	movi	r2,2047
 800b224:	a0803526 	beq	r20,r2,800b2fc <__divdf3+0x130>
 800b228:	8c000434 	orhi	r16,r17,16
 800b22c:	2004d77a 	srli	r2,r4,29
 800b230:	802090fa 	slli	r16,r16,3
 800b234:	202690fa 	slli	r19,r4,3
 800b238:	a53f0044 	addi	r20,r20,-1023
 800b23c:	80a2b03a 	or	r17,r16,r2
 800b240:	0025883a 	mov	r18,zero
 800b244:	0011883a 	mov	r8,zero
 800b248:	380ad53a 	srli	r5,r7,20
 800b24c:	382ed7fa 	srli	r23,r7,31
 800b250:	04000434 	movhi	r16,16
 800b254:	843fffc4 	addi	r16,r16,-1
 800b258:	2941ffcc 	andi	r5,r5,2047
 800b25c:	302b883a 	mov	r21,r6
 800b260:	3c20703a 	and	r16,r7,r16
 800b264:	ba403fcc 	andi	r9,r23,255
 800b268:	28006726 	beq	r5,zero,800b408 <__divdf3+0x23c>
 800b26c:	0081ffc4 	movi	r2,2047
 800b270:	28805f26 	beq	r5,r2,800b3f0 <__divdf3+0x224>
 800b274:	84000434 	orhi	r16,r16,16
 800b278:	3004d77a 	srli	r2,r6,29
 800b27c:	802090fa 	slli	r16,r16,3
 800b280:	302a90fa 	slli	r21,r6,3
 800b284:	297f0044 	addi	r5,r5,-1023
 800b288:	80a0b03a 	or	r16,r16,r2
 800b28c:	000f883a 	mov	r7,zero
 800b290:	3c86b03a 	or	r3,r7,r18
 800b294:	180690ba 	slli	r3,r3,2
 800b298:	00820074 	movhi	r2,2049
 800b29c:	10acaf04 	addi	r2,r2,-19780
 800b2a0:	1887883a 	add	r3,r3,r2
 800b2a4:	18c00017 	ldw	r3,0(r3)
 800b2a8:	b5c8f03a 	xor	r4,r22,r23
 800b2ac:	200d883a 	mov	r6,r4
 800b2b0:	24803fcc 	andi	r18,r4,255
 800b2b4:	a169c83a 	sub	r20,r20,r5
 800b2b8:	1800683a 	jmp	r3
 800b2bc:	0800b504 	addi	zero,at,724
 800b2c0:	0800b334 	orhi	zero,at,716
 800b2c4:	0800b4c8 	cmpgei	zero,at,723
 800b2c8:	0800b318 	cmpnei	zero,at,716
 800b2cc:	0800b4c8 	cmpgei	zero,at,723
 800b2d0:	0800b49c 	xori	zero,at,722
 800b2d4:	0800b4c8 	cmpgei	zero,at,723
 800b2d8:	0800b318 	cmpnei	zero,at,716
 800b2dc:	0800b334 	orhi	zero,at,716
 800b2e0:	0800b334 	orhi	zero,at,716
 800b2e4:	0800b49c 	xori	zero,at,722
 800b2e8:	0800b318 	cmpnei	zero,at,716
 800b2ec:	0800b328 	cmpgeui	zero,at,716
 800b2f0:	0800b328 	cmpgeui	zero,at,716
 800b2f4:	0800b328 	cmpgeui	zero,at,716
 800b2f8:	0800b4d8 	cmpnei	zero,at,723
 800b2fc:	8904b03a 	or	r2,r17,r4
 800b300:	1000631e 	bne	r2,zero,800b490 <__divdf3+0x2c4>
 800b304:	04800204 	movi	r18,8
 800b308:	0023883a 	mov	r17,zero
 800b30c:	0027883a 	mov	r19,zero
 800b310:	02000084 	movi	r8,2
 800b314:	003fcc06 	br	800b248 <__alt_data_end+0xfc00b248>
 800b318:	8023883a 	mov	r17,r16
 800b31c:	a827883a 	mov	r19,r21
 800b320:	4839883a 	mov	fp,r9
 800b324:	3811883a 	mov	r8,r7
 800b328:	00800084 	movi	r2,2
 800b32c:	40812a1e 	bne	r8,r2,800b7d8 <__divdf3+0x60c>
 800b330:	e025883a 	mov	r18,fp
 800b334:	9180004c 	andi	r6,r18,1
 800b338:	0101ffc4 	movi	r4,2047
 800b33c:	000b883a 	mov	r5,zero
 800b340:	0027883a 	mov	r19,zero
 800b344:	2008953a 	slli	r4,r4,20
 800b348:	30c03fcc 	andi	r3,r6,255
 800b34c:	04000434 	movhi	r16,16
 800b350:	180697fa 	slli	r3,r3,31
 800b354:	843fffc4 	addi	r16,r16,-1
 800b358:	2c20703a 	and	r16,r5,r16
 800b35c:	8120b03a 	or	r16,r16,r4
 800b360:	80c6b03a 	or	r3,r16,r3
 800b364:	9805883a 	mov	r2,r19
 800b368:	dfc00d17 	ldw	ra,52(sp)
 800b36c:	df000c17 	ldw	fp,48(sp)
 800b370:	ddc00b17 	ldw	r23,44(sp)
 800b374:	dd800a17 	ldw	r22,40(sp)
 800b378:	dd400917 	ldw	r21,36(sp)
 800b37c:	dd000817 	ldw	r20,32(sp)
 800b380:	dcc00717 	ldw	r19,28(sp)
 800b384:	dc800617 	ldw	r18,24(sp)
 800b388:	dc400517 	ldw	r17,20(sp)
 800b38c:	dc000417 	ldw	r16,16(sp)
 800b390:	dec00e04 	addi	sp,sp,56
 800b394:	f800283a 	ret
 800b398:	8904b03a 	or	r2,r17,r4
 800b39c:	10003726 	beq	r2,zero,800b47c <__divdf3+0x2b0>
 800b3a0:	88011c26 	beq	r17,zero,800b814 <__divdf3+0x648>
 800b3a4:	8809883a 	mov	r4,r17
 800b3a8:	d9800315 	stw	r6,12(sp)
 800b3ac:	d9c00115 	stw	r7,4(sp)
 800b3b0:	800cecc0 	call	800cecc <__clzsi2>
 800b3b4:	d9800317 	ldw	r6,12(sp)
 800b3b8:	d9c00117 	ldw	r7,4(sp)
 800b3bc:	1007883a 	mov	r3,r2
 800b3c0:	01000a04 	movi	r4,40
 800b3c4:	1cfffe04 	addi	r19,r3,-8
 800b3c8:	20c9c83a 	sub	r4,r4,r3
 800b3cc:	8cca983a 	sll	r5,r17,r19
 800b3d0:	9108d83a 	srl	r4,r18,r4
 800b3d4:	94e6983a 	sll	r19,r18,r19
 800b3d8:	2162b03a 	or	r17,r4,r5
 800b3dc:	053f0344 	movi	r20,-1011
 800b3e0:	a0e9c83a 	sub	r20,r20,r3
 800b3e4:	0025883a 	mov	r18,zero
 800b3e8:	0011883a 	mov	r8,zero
 800b3ec:	003f9606 	br	800b248 <__alt_data_end+0xfc00b248>
 800b3f0:	8184b03a 	or	r2,r16,r6
 800b3f4:	10001f1e 	bne	r2,zero,800b474 <__divdf3+0x2a8>
 800b3f8:	0021883a 	mov	r16,zero
 800b3fc:	002b883a 	mov	r21,zero
 800b400:	01c00084 	movi	r7,2
 800b404:	003fa206 	br	800b290 <__alt_data_end+0xfc00b290>
 800b408:	8184b03a 	or	r2,r16,r6
 800b40c:	10001526 	beq	r2,zero,800b464 <__divdf3+0x298>
 800b410:	80010c26 	beq	r16,zero,800b844 <__divdf3+0x678>
 800b414:	8009883a 	mov	r4,r16
 800b418:	d9800315 	stw	r6,12(sp)
 800b41c:	da000215 	stw	r8,8(sp)
 800b420:	da400015 	stw	r9,0(sp)
 800b424:	800cecc0 	call	800cecc <__clzsi2>
 800b428:	d9800317 	ldw	r6,12(sp)
 800b42c:	da000217 	ldw	r8,8(sp)
 800b430:	da400017 	ldw	r9,0(sp)
 800b434:	1007883a 	mov	r3,r2
 800b438:	01000a04 	movi	r4,40
 800b43c:	1d7ffe04 	addi	r21,r3,-8
 800b440:	20c9c83a 	sub	r4,r4,r3
 800b444:	8560983a 	sll	r16,r16,r21
 800b448:	3108d83a 	srl	r4,r6,r4
 800b44c:	356a983a 	sll	r21,r6,r21
 800b450:	2420b03a 	or	r16,r4,r16
 800b454:	017f0344 	movi	r5,-1011
 800b458:	28cbc83a 	sub	r5,r5,r3
 800b45c:	000f883a 	mov	r7,zero
 800b460:	003f8b06 	br	800b290 <__alt_data_end+0xfc00b290>
 800b464:	0021883a 	mov	r16,zero
 800b468:	002b883a 	mov	r21,zero
 800b46c:	01c00044 	movi	r7,1
 800b470:	003f8706 	br	800b290 <__alt_data_end+0xfc00b290>
 800b474:	01c000c4 	movi	r7,3
 800b478:	003f8506 	br	800b290 <__alt_data_end+0xfc00b290>
 800b47c:	04800104 	movi	r18,4
 800b480:	0023883a 	mov	r17,zero
 800b484:	0027883a 	mov	r19,zero
 800b488:	02000044 	movi	r8,1
 800b48c:	003f6e06 	br	800b248 <__alt_data_end+0xfc00b248>
 800b490:	04800304 	movi	r18,12
 800b494:	020000c4 	movi	r8,3
 800b498:	003f6b06 	br	800b248 <__alt_data_end+0xfc00b248>
 800b49c:	01400434 	movhi	r5,16
 800b4a0:	000d883a 	mov	r6,zero
 800b4a4:	297fffc4 	addi	r5,r5,-1
 800b4a8:	04ffffc4 	movi	r19,-1
 800b4ac:	0101ffc4 	movi	r4,2047
 800b4b0:	003fa406 	br	800b344 <__alt_data_end+0xfc00b344>
 800b4b4:	043f0084 	movi	r16,-1022
 800b4b8:	8521c83a 	sub	r16,r16,r20
 800b4bc:	00800e04 	movi	r2,56
 800b4c0:	1401200e 	bge	r2,r16,800b944 <__divdf3+0x778>
 800b4c4:	9180004c 	andi	r6,r18,1
 800b4c8:	0009883a 	mov	r4,zero
 800b4cc:	000b883a 	mov	r5,zero
 800b4d0:	0027883a 	mov	r19,zero
 800b4d4:	003f9b06 	br	800b344 <__alt_data_end+0xfc00b344>
 800b4d8:	8880022c 	andhi	r2,r17,8
 800b4dc:	1000c726 	beq	r2,zero,800b7fc <__divdf3+0x630>
 800b4e0:	8080022c 	andhi	r2,r16,8
 800b4e4:	1000c51e 	bne	r2,zero,800b7fc <__divdf3+0x630>
 800b4e8:	00800434 	movhi	r2,16
 800b4ec:	81400234 	orhi	r5,r16,8
 800b4f0:	10bfffc4 	addi	r2,r2,-1
 800b4f4:	b80d883a 	mov	r6,r23
 800b4f8:	288a703a 	and	r5,r5,r2
 800b4fc:	a827883a 	mov	r19,r21
 800b500:	003fea06 	br	800b4ac <__alt_data_end+0xfc00b4ac>
 800b504:	8440ea36 	bltu	r16,r17,800b8b0 <__divdf3+0x6e4>
 800b508:	8c00e826 	beq	r17,r16,800b8ac <__divdf3+0x6e0>
 800b50c:	a53fffc4 	addi	r20,r20,-1
 800b510:	882d883a 	mov	r22,r17
 800b514:	000d883a 	mov	r6,zero
 800b518:	a804d63a 	srli	r2,r21,24
 800b51c:	8020923a 	slli	r16,r16,8
 800b520:	b009883a 	mov	r4,r22
 800b524:	d9800315 	stw	r6,12(sp)
 800b528:	1420b03a 	or	r16,r2,r16
 800b52c:	802ed43a 	srli	r23,r16,16
 800b530:	873fffcc 	andi	fp,r16,65535
 800b534:	a82a923a 	slli	r21,r21,8
 800b538:	b80b883a 	mov	r5,r23
 800b53c:	800a9200 	call	800a920 <__udivsi3>
 800b540:	b009883a 	mov	r4,r22
 800b544:	b80b883a 	mov	r5,r23
 800b548:	1023883a 	mov	r17,r2
 800b54c:	800a9280 	call	800a928 <__umodsi3>
 800b550:	1004943a 	slli	r2,r2,16
 800b554:	9808d43a 	srli	r4,r19,16
 800b558:	8f2d383a 	mul	r22,r17,fp
 800b55c:	d9800317 	ldw	r6,12(sp)
 800b560:	1106b03a 	or	r3,r2,r4
 800b564:	1d80062e 	bgeu	r3,r22,800b580 <__divdf3+0x3b4>
 800b568:	1c07883a 	add	r3,r3,r16
 800b56c:	88bfffc4 	addi	r2,r17,-1
 800b570:	1c00dc36 	bltu	r3,r16,800b8e4 <__divdf3+0x718>
 800b574:	1d80db2e 	bgeu	r3,r22,800b8e4 <__divdf3+0x718>
 800b578:	8c7fff84 	addi	r17,r17,-2
 800b57c:	1c07883a 	add	r3,r3,r16
 800b580:	1dadc83a 	sub	r22,r3,r22
 800b584:	b009883a 	mov	r4,r22
 800b588:	b80b883a 	mov	r5,r23
 800b58c:	d9800315 	stw	r6,12(sp)
 800b590:	800a9200 	call	800a920 <__udivsi3>
 800b594:	b009883a 	mov	r4,r22
 800b598:	b80b883a 	mov	r5,r23
 800b59c:	d8800015 	stw	r2,0(sp)
 800b5a0:	800a9280 	call	800a928 <__umodsi3>
 800b5a4:	da400017 	ldw	r9,0(sp)
 800b5a8:	1004943a 	slli	r2,r2,16
 800b5ac:	9cffffcc 	andi	r19,r19,65535
 800b5b0:	4f07383a 	mul	r3,r9,fp
 800b5b4:	14c8b03a 	or	r4,r2,r19
 800b5b8:	d9800317 	ldw	r6,12(sp)
 800b5bc:	20c0062e 	bgeu	r4,r3,800b5d8 <__divdf3+0x40c>
 800b5c0:	2409883a 	add	r4,r4,r16
 800b5c4:	48bfffc4 	addi	r2,r9,-1
 800b5c8:	2400c436 	bltu	r4,r16,800b8dc <__divdf3+0x710>
 800b5cc:	20c0c32e 	bgeu	r4,r3,800b8dc <__divdf3+0x710>
 800b5d0:	4a7fff84 	addi	r9,r9,-2
 800b5d4:	2409883a 	add	r4,r4,r16
 800b5d8:	8822943a 	slli	r17,r17,16
 800b5dc:	a80ed43a 	srli	r7,r21,16
 800b5e0:	aa3fffcc 	andi	r8,r21,65535
 800b5e4:	4c62b03a 	or	r17,r9,r17
 800b5e8:	8816d43a 	srli	r11,r17,16
 800b5ec:	897fffcc 	andi	r5,r17,65535
 800b5f0:	2a15383a 	mul	r10,r5,r8
 800b5f4:	5a19383a 	mul	r12,r11,r8
 800b5f8:	29cb383a 	mul	r5,r5,r7
 800b5fc:	5012d43a 	srli	r9,r10,16
 800b600:	20c5c83a 	sub	r2,r4,r3
 800b604:	614b883a 	add	r5,r12,r5
 800b608:	2a4b883a 	add	r5,r5,r9
 800b60c:	59c7383a 	mul	r3,r11,r7
 800b610:	2b00022e 	bgeu	r5,r12,800b61c <__divdf3+0x450>
 800b614:	01000074 	movhi	r4,1
 800b618:	1907883a 	add	r3,r3,r4
 800b61c:	2808d43a 	srli	r4,r5,16
 800b620:	280a943a 	slli	r5,r5,16
 800b624:	54ffffcc 	andi	r19,r10,65535
 800b628:	1907883a 	add	r3,r3,r4
 800b62c:	2ccb883a 	add	r5,r5,r19
 800b630:	10c09336 	bltu	r2,r3,800b880 <__divdf3+0x6b4>
 800b634:	10c0ad26 	beq	r2,r3,800b8ec <__divdf3+0x720>
 800b638:	10c7c83a 	sub	r3,r2,r3
 800b63c:	3167c83a 	sub	r19,r6,r5
 800b640:	34ed803a 	cmpltu	r22,r6,r19
 800b644:	1dadc83a 	sub	r22,r3,r22
 800b648:	b400b226 	beq	r22,r16,800b914 <__divdf3+0x748>
 800b64c:	b009883a 	mov	r4,r22
 800b650:	b80b883a 	mov	r5,r23
 800b654:	d9c00115 	stw	r7,4(sp)
 800b658:	da000215 	stw	r8,8(sp)
 800b65c:	800a9200 	call	800a920 <__udivsi3>
 800b660:	b009883a 	mov	r4,r22
 800b664:	b80b883a 	mov	r5,r23
 800b668:	d8800315 	stw	r2,12(sp)
 800b66c:	800a9280 	call	800a928 <__umodsi3>
 800b670:	d9800317 	ldw	r6,12(sp)
 800b674:	1004943a 	slli	r2,r2,16
 800b678:	9808d43a 	srli	r4,r19,16
 800b67c:	372d383a 	mul	r22,r6,fp
 800b680:	d9c00117 	ldw	r7,4(sp)
 800b684:	1106b03a 	or	r3,r2,r4
 800b688:	da000217 	ldw	r8,8(sp)
 800b68c:	1d80062e 	bgeu	r3,r22,800b6a8 <__divdf3+0x4dc>
 800b690:	1c07883a 	add	r3,r3,r16
 800b694:	30bfffc4 	addi	r2,r6,-1
 800b698:	1c00a036 	bltu	r3,r16,800b91c <__divdf3+0x750>
 800b69c:	1d809f2e 	bgeu	r3,r22,800b91c <__divdf3+0x750>
 800b6a0:	31bfff84 	addi	r6,r6,-2
 800b6a4:	1c07883a 	add	r3,r3,r16
 800b6a8:	1dadc83a 	sub	r22,r3,r22
 800b6ac:	b009883a 	mov	r4,r22
 800b6b0:	b80b883a 	mov	r5,r23
 800b6b4:	d9800315 	stw	r6,12(sp)
 800b6b8:	d9c00115 	stw	r7,4(sp)
 800b6bc:	da000215 	stw	r8,8(sp)
 800b6c0:	800a9200 	call	800a920 <__udivsi3>
 800b6c4:	b009883a 	mov	r4,r22
 800b6c8:	b80b883a 	mov	r5,r23
 800b6cc:	d8800015 	stw	r2,0(sp)
 800b6d0:	800a9280 	call	800a928 <__umodsi3>
 800b6d4:	da400017 	ldw	r9,0(sp)
 800b6d8:	1004943a 	slli	r2,r2,16
 800b6dc:	993fffcc 	andi	r4,r19,65535
 800b6e0:	4f39383a 	mul	fp,r9,fp
 800b6e4:	1106b03a 	or	r3,r2,r4
 800b6e8:	d9800317 	ldw	r6,12(sp)
 800b6ec:	d9c00117 	ldw	r7,4(sp)
 800b6f0:	da000217 	ldw	r8,8(sp)
 800b6f4:	1f00062e 	bgeu	r3,fp,800b710 <__divdf3+0x544>
 800b6f8:	1c07883a 	add	r3,r3,r16
 800b6fc:	48bfffc4 	addi	r2,r9,-1
 800b700:	1c008836 	bltu	r3,r16,800b924 <__divdf3+0x758>
 800b704:	1f00872e 	bgeu	r3,fp,800b924 <__divdf3+0x758>
 800b708:	4a7fff84 	addi	r9,r9,-2
 800b70c:	1c07883a 	add	r3,r3,r16
 800b710:	3008943a 	slli	r4,r6,16
 800b714:	1f07c83a 	sub	r3,r3,fp
 800b718:	4926b03a 	or	r19,r9,r4
 800b71c:	993fffcc 	andi	r4,r19,65535
 800b720:	980cd43a 	srli	r6,r19,16
 800b724:	220b383a 	mul	r5,r4,r8
 800b728:	21c5383a 	mul	r2,r4,r7
 800b72c:	3211383a 	mul	r8,r6,r8
 800b730:	2808d43a 	srli	r4,r5,16
 800b734:	31cf383a 	mul	r7,r6,r7
 800b738:	4085883a 	add	r2,r8,r2
 800b73c:	1105883a 	add	r2,r2,r4
 800b740:	1200022e 	bgeu	r2,r8,800b74c <__divdf3+0x580>
 800b744:	01000074 	movhi	r4,1
 800b748:	390f883a 	add	r7,r7,r4
 800b74c:	1008d43a 	srli	r4,r2,16
 800b750:	1004943a 	slli	r2,r2,16
 800b754:	297fffcc 	andi	r5,r5,65535
 800b758:	390f883a 	add	r7,r7,r4
 800b75c:	1145883a 	add	r2,r2,r5
 800b760:	19c06536 	bltu	r3,r7,800b8f8 <__divdf3+0x72c>
 800b764:	19c09f26 	beq	r3,r7,800b9e4 <__divdf3+0x818>
 800b768:	9cc00054 	ori	r19,r19,1
 800b76c:	a100ffc4 	addi	r4,r20,1023
 800b770:	013f500e 	bge	zero,r4,800b4b4 <__alt_data_end+0xfc00b4b4>
 800b774:	988001cc 	andi	r2,r19,7
 800b778:	10000726 	beq	r2,zero,800b798 <__divdf3+0x5cc>
 800b77c:	98c003cc 	andi	r3,r19,15
 800b780:	00800104 	movi	r2,4
 800b784:	18800426 	beq	r3,r2,800b798 <__divdf3+0x5cc>
 800b788:	9885883a 	add	r2,r19,r2
 800b78c:	14e1803a 	cmpltu	r16,r2,r19
 800b790:	8c23883a 	add	r17,r17,r16
 800b794:	1027883a 	mov	r19,r2
 800b798:	8880402c 	andhi	r2,r17,256
 800b79c:	10000426 	beq	r2,zero,800b7b0 <__divdf3+0x5e4>
 800b7a0:	00bfc034 	movhi	r2,65280
 800b7a4:	10bfffc4 	addi	r2,r2,-1
 800b7a8:	a1010004 	addi	r4,r20,1024
 800b7ac:	88a2703a 	and	r17,r17,r2
 800b7b0:	0081ff84 	movi	r2,2046
 800b7b4:	113edf16 	blt	r2,r4,800b334 <__alt_data_end+0xfc00b334>
 800b7b8:	9826d0fa 	srli	r19,r19,3
 800b7bc:	8804977a 	slli	r2,r17,29
 800b7c0:	8820927a 	slli	r16,r17,9
 800b7c4:	2101ffcc 	andi	r4,r4,2047
 800b7c8:	14e6b03a 	or	r19,r2,r19
 800b7cc:	800ad33a 	srli	r5,r16,12
 800b7d0:	9180004c 	andi	r6,r18,1
 800b7d4:	003edb06 	br	800b344 <__alt_data_end+0xfc00b344>
 800b7d8:	008000c4 	movi	r2,3
 800b7dc:	4080a826 	beq	r8,r2,800ba80 <__divdf3+0x8b4>
 800b7e0:	00800044 	movi	r2,1
 800b7e4:	4080551e 	bne	r8,r2,800b93c <__divdf3+0x770>
 800b7e8:	e00d883a 	mov	r6,fp
 800b7ec:	0009883a 	mov	r4,zero
 800b7f0:	000b883a 	mov	r5,zero
 800b7f4:	0027883a 	mov	r19,zero
 800b7f8:	003ed206 	br	800b344 <__alt_data_end+0xfc00b344>
 800b7fc:	00800434 	movhi	r2,16
 800b800:	89400234 	orhi	r5,r17,8
 800b804:	10bfffc4 	addi	r2,r2,-1
 800b808:	b00d883a 	mov	r6,r22
 800b80c:	288a703a 	and	r5,r5,r2
 800b810:	003f2606 	br	800b4ac <__alt_data_end+0xfc00b4ac>
 800b814:	d9800315 	stw	r6,12(sp)
 800b818:	d9c00115 	stw	r7,4(sp)
 800b81c:	800cecc0 	call	800cecc <__clzsi2>
 800b820:	10c00804 	addi	r3,r2,32
 800b824:	010009c4 	movi	r4,39
 800b828:	d9800317 	ldw	r6,12(sp)
 800b82c:	d9c00117 	ldw	r7,4(sp)
 800b830:	20fee30e 	bge	r4,r3,800b3c0 <__alt_data_end+0xfc00b3c0>
 800b834:	117ffe04 	addi	r5,r2,-8
 800b838:	9162983a 	sll	r17,r18,r5
 800b83c:	0027883a 	mov	r19,zero
 800b840:	003ee606 	br	800b3dc <__alt_data_end+0xfc00b3dc>
 800b844:	3009883a 	mov	r4,r6
 800b848:	d9800315 	stw	r6,12(sp)
 800b84c:	da000215 	stw	r8,8(sp)
 800b850:	da400015 	stw	r9,0(sp)
 800b854:	800cecc0 	call	800cecc <__clzsi2>
 800b858:	10c00804 	addi	r3,r2,32
 800b85c:	010009c4 	movi	r4,39
 800b860:	d9800317 	ldw	r6,12(sp)
 800b864:	da000217 	ldw	r8,8(sp)
 800b868:	da400017 	ldw	r9,0(sp)
 800b86c:	20fef20e 	bge	r4,r3,800b438 <__alt_data_end+0xfc00b438>
 800b870:	10bffe04 	addi	r2,r2,-8
 800b874:	a8a0983a 	sll	r16,r21,r2
 800b878:	002b883a 	mov	r21,zero
 800b87c:	003ef506 	br	800b454 <__alt_data_end+0xfc00b454>
 800b880:	354d883a 	add	r6,r6,r21
 800b884:	3549803a 	cmpltu	r4,r6,r21
 800b888:	2409883a 	add	r4,r4,r16
 800b88c:	2089883a 	add	r4,r4,r2
 800b890:	88bfffc4 	addi	r2,r17,-1
 800b894:	81000c2e 	bgeu	r16,r4,800b8c8 <__divdf3+0x6fc>
 800b898:	20c04436 	bltu	r4,r3,800b9ac <__divdf3+0x7e0>
 800b89c:	19006f26 	beq	r3,r4,800ba5c <__divdf3+0x890>
 800b8a0:	20c7c83a 	sub	r3,r4,r3
 800b8a4:	1023883a 	mov	r17,r2
 800b8a8:	003f6406 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b8ac:	9d7f1736 	bltu	r19,r21,800b50c <__alt_data_end+0xfc00b50c>
 800b8b0:	9806d07a 	srli	r3,r19,1
 800b8b4:	880497fa 	slli	r2,r17,31
 800b8b8:	980c97fa 	slli	r6,r19,31
 800b8bc:	882cd07a 	srli	r22,r17,1
 800b8c0:	18a6b03a 	or	r19,r3,r2
 800b8c4:	003f1406 	br	800b518 <__alt_data_end+0xfc00b518>
 800b8c8:	243ff51e 	bne	r4,r16,800b8a0 <__alt_data_end+0xfc00b8a0>
 800b8cc:	357ff22e 	bgeu	r6,r21,800b898 <__alt_data_end+0xfc00b898>
 800b8d0:	80c7c83a 	sub	r3,r16,r3
 800b8d4:	1023883a 	mov	r17,r2
 800b8d8:	003f5806 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b8dc:	1013883a 	mov	r9,r2
 800b8e0:	003f3d06 	br	800b5d8 <__alt_data_end+0xfc00b5d8>
 800b8e4:	1023883a 	mov	r17,r2
 800b8e8:	003f2506 	br	800b580 <__alt_data_end+0xfc00b580>
 800b8ec:	317fe436 	bltu	r6,r5,800b880 <__alt_data_end+0xfc00b880>
 800b8f0:	0007883a 	mov	r3,zero
 800b8f4:	003f5106 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b8f8:	1c07883a 	add	r3,r3,r16
 800b8fc:	993fffc4 	addi	r4,r19,-1
 800b900:	1c000a2e 	bgeu	r3,r16,800b92c <__divdf3+0x760>
 800b904:	2027883a 	mov	r19,r4
 800b908:	19ff971e 	bne	r3,r7,800b768 <__alt_data_end+0xfc00b768>
 800b90c:	a8bf961e 	bne	r21,r2,800b768 <__alt_data_end+0xfc00b768>
 800b910:	003f9606 	br	800b76c <__alt_data_end+0xfc00b76c>
 800b914:	04ffffc4 	movi	r19,-1
 800b918:	003f9406 	br	800b76c <__alt_data_end+0xfc00b76c>
 800b91c:	100d883a 	mov	r6,r2
 800b920:	003f6106 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800b924:	1013883a 	mov	r9,r2
 800b928:	003f7906 	br	800b710 <__alt_data_end+0xfc00b710>
 800b92c:	19c02636 	bltu	r3,r7,800b9c8 <__divdf3+0x7fc>
 800b930:	38c04d26 	beq	r7,r3,800ba68 <__divdf3+0x89c>
 800b934:	2027883a 	mov	r19,r4
 800b938:	003f8b06 	br	800b768 <__alt_data_end+0xfc00b768>
 800b93c:	e025883a 	mov	r18,fp
 800b940:	003f8a06 	br	800b76c <__alt_data_end+0xfc00b76c>
 800b944:	008007c4 	movi	r2,31
 800b948:	14002a16 	blt	r2,r16,800b9f4 <__divdf3+0x828>
 800b94c:	a5010784 	addi	r20,r20,1054
 800b950:	8d04983a 	sll	r2,r17,r20
 800b954:	9c06d83a 	srl	r3,r19,r16
 800b958:	9d28983a 	sll	r20,r19,r20
 800b95c:	8c20d83a 	srl	r16,r17,r16
 800b960:	1886b03a 	or	r3,r3,r2
 800b964:	a004c03a 	cmpne	r2,r20,zero
 800b968:	1884b03a 	or	r2,r3,r2
 800b96c:	10c001cc 	andi	r3,r2,7
 800b970:	18000726 	beq	r3,zero,800b990 <__divdf3+0x7c4>
 800b974:	110003cc 	andi	r4,r2,15
 800b978:	00c00104 	movi	r3,4
 800b97c:	20c00426 	beq	r4,r3,800b990 <__divdf3+0x7c4>
 800b980:	10c00104 	addi	r3,r2,4
 800b984:	1885803a 	cmpltu	r2,r3,r2
 800b988:	80a1883a 	add	r16,r16,r2
 800b98c:	1805883a 	mov	r2,r3
 800b990:	80c0202c 	andhi	r3,r16,128
 800b994:	18002d26 	beq	r3,zero,800ba4c <__divdf3+0x880>
 800b998:	9180004c 	andi	r6,r18,1
 800b99c:	01000044 	movi	r4,1
 800b9a0:	000b883a 	mov	r5,zero
 800b9a4:	0027883a 	mov	r19,zero
 800b9a8:	003e6606 	br	800b344 <__alt_data_end+0xfc00b344>
 800b9ac:	354d883a 	add	r6,r6,r21
 800b9b0:	356d803a 	cmpltu	r22,r6,r21
 800b9b4:	b42d883a 	add	r22,r22,r16
 800b9b8:	b12d883a 	add	r22,r22,r4
 800b9bc:	8c7fff84 	addi	r17,r17,-2
 800b9c0:	b0c7c83a 	sub	r3,r22,r3
 800b9c4:	003f1d06 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b9c8:	ad4b883a 	add	r5,r21,r21
 800b9cc:	2d6b803a 	cmpltu	r21,r5,r21
 800b9d0:	ac2b883a 	add	r21,r21,r16
 800b9d4:	1d47883a 	add	r3,r3,r21
 800b9d8:	993fff84 	addi	r4,r19,-2
 800b9dc:	282b883a 	mov	r21,r5
 800b9e0:	003fc806 	br	800b904 <__alt_data_end+0xfc00b904>
 800b9e4:	103fc41e 	bne	r2,zero,800b8f8 <__alt_data_end+0xfc00b8f8>
 800b9e8:	002b883a 	mov	r21,zero
 800b9ec:	a8bf5e1e 	bne	r21,r2,800b768 <__alt_data_end+0xfc00b768>
 800b9f0:	003f5e06 	br	800b76c <__alt_data_end+0xfc00b76c>
 800b9f4:	00bef884 	movi	r2,-1054
 800b9f8:	1505c83a 	sub	r2,r2,r20
 800b9fc:	00c00804 	movi	r3,32
 800ba00:	8884d83a 	srl	r2,r17,r2
 800ba04:	80c01c26 	beq	r16,r3,800ba78 <__divdf3+0x8ac>
 800ba08:	a0c10f84 	addi	r3,r20,1086
 800ba0c:	88c6983a 	sll	r3,r17,r3
 800ba10:	1cc6b03a 	or	r3,r3,r19
 800ba14:	1806c03a 	cmpne	r3,r3,zero
 800ba18:	1884b03a 	or	r2,r3,r2
 800ba1c:	140001cc 	andi	r16,r2,7
 800ba20:	8000061e 	bne	r16,zero,800ba3c <__divdf3+0x870>
 800ba24:	000b883a 	mov	r5,zero
 800ba28:	1004d0fa 	srli	r2,r2,3
 800ba2c:	9180004c 	andi	r6,r18,1
 800ba30:	0009883a 	mov	r4,zero
 800ba34:	1426b03a 	or	r19,r2,r16
 800ba38:	003e4206 	br	800b344 <__alt_data_end+0xfc00b344>
 800ba3c:	110003cc 	andi	r4,r2,15
 800ba40:	00c00104 	movi	r3,4
 800ba44:	0021883a 	mov	r16,zero
 800ba48:	20ffcd1e 	bne	r4,r3,800b980 <__alt_data_end+0xfc00b980>
 800ba4c:	800a927a 	slli	r5,r16,9
 800ba50:	8020977a 	slli	r16,r16,29
 800ba54:	280ad33a 	srli	r5,r5,12
 800ba58:	003ff306 	br	800ba28 <__alt_data_end+0xfc00ba28>
 800ba5c:	317fd336 	bltu	r6,r5,800b9ac <__alt_data_end+0xfc00b9ac>
 800ba60:	1023883a 	mov	r17,r2
 800ba64:	003fa206 	br	800b8f0 <__alt_data_end+0xfc00b8f0>
 800ba68:	a8bfd736 	bltu	r21,r2,800b9c8 <__alt_data_end+0xfc00b9c8>
 800ba6c:	2027883a 	mov	r19,r4
 800ba70:	a8bf3d1e 	bne	r21,r2,800b768 <__alt_data_end+0xfc00b768>
 800ba74:	003f3d06 	br	800b76c <__alt_data_end+0xfc00b76c>
 800ba78:	0007883a 	mov	r3,zero
 800ba7c:	003fe406 	br	800ba10 <__alt_data_end+0xfc00ba10>
 800ba80:	00800434 	movhi	r2,16
 800ba84:	89400234 	orhi	r5,r17,8
 800ba88:	10bfffc4 	addi	r2,r2,-1
 800ba8c:	e00d883a 	mov	r6,fp
 800ba90:	288a703a 	and	r5,r5,r2
 800ba94:	003e8506 	br	800b4ac <__alt_data_end+0xfc00b4ac>

0800ba98 <__eqdf2>:
 800ba98:	2804d53a 	srli	r2,r5,20
 800ba9c:	3806d53a 	srli	r3,r7,20
 800baa0:	02000434 	movhi	r8,16
 800baa4:	423fffc4 	addi	r8,r8,-1
 800baa8:	1081ffcc 	andi	r2,r2,2047
 800baac:	0241ffc4 	movi	r9,2047
 800bab0:	2a14703a 	and	r10,r5,r8
 800bab4:	18c1ffcc 	andi	r3,r3,2047
 800bab8:	3a10703a 	and	r8,r7,r8
 800babc:	280ad7fa 	srli	r5,r5,31
 800bac0:	380ed7fa 	srli	r7,r7,31
 800bac4:	12400f26 	beq	r2,r9,800bb04 <__eqdf2+0x6c>
 800bac8:	0241ffc4 	movi	r9,2047
 800bacc:	1a400326 	beq	r3,r9,800badc <__eqdf2+0x44>
 800bad0:	10c00526 	beq	r2,r3,800bae8 <__eqdf2+0x50>
 800bad4:	00800044 	movi	r2,1
 800bad8:	f800283a 	ret
 800badc:	4192b03a 	or	r9,r8,r6
 800bae0:	483ffc1e 	bne	r9,zero,800bad4 <__alt_data_end+0xfc00bad4>
 800bae4:	10fffb1e 	bne	r2,r3,800bad4 <__alt_data_end+0xfc00bad4>
 800bae8:	523ffa1e 	bne	r10,r8,800bad4 <__alt_data_end+0xfc00bad4>
 800baec:	21bff91e 	bne	r4,r6,800bad4 <__alt_data_end+0xfc00bad4>
 800baf0:	29c00826 	beq	r5,r7,800bb14 <__eqdf2+0x7c>
 800baf4:	103ff71e 	bne	r2,zero,800bad4 <__alt_data_end+0xfc00bad4>
 800baf8:	5104b03a 	or	r2,r10,r4
 800bafc:	1004c03a 	cmpne	r2,r2,zero
 800bb00:	f800283a 	ret
 800bb04:	5112b03a 	or	r9,r10,r4
 800bb08:	483fef26 	beq	r9,zero,800bac8 <__alt_data_end+0xfc00bac8>
 800bb0c:	00800044 	movi	r2,1
 800bb10:	f800283a 	ret
 800bb14:	0005883a 	mov	r2,zero
 800bb18:	f800283a 	ret

0800bb1c <__gedf2>:
 800bb1c:	2804d53a 	srli	r2,r5,20
 800bb20:	3806d53a 	srli	r3,r7,20
 800bb24:	02000434 	movhi	r8,16
 800bb28:	423fffc4 	addi	r8,r8,-1
 800bb2c:	0241ffc4 	movi	r9,2047
 800bb30:	1081ffcc 	andi	r2,r2,2047
 800bb34:	2a14703a 	and	r10,r5,r8
 800bb38:	1a46703a 	and	r3,r3,r9
 800bb3c:	3a10703a 	and	r8,r7,r8
 800bb40:	280ad7fa 	srli	r5,r5,31
 800bb44:	380ed7fa 	srli	r7,r7,31
 800bb48:	12400b26 	beq	r2,r9,800bb78 <__gedf2+0x5c>
 800bb4c:	1a401626 	beq	r3,r9,800bba8 <__gedf2+0x8c>
 800bb50:	10000c1e 	bne	r2,zero,800bb84 <__gedf2+0x68>
 800bb54:	5112b03a 	or	r9,r10,r4
 800bb58:	4813003a 	cmpeq	r9,r9,zero
 800bb5c:	4817883a 	mov	r11,r9
 800bb60:	18000c1e 	bne	r3,zero,800bb94 <__gedf2+0x78>
 800bb64:	4198b03a 	or	r12,r8,r6
 800bb68:	60000a1e 	bne	r12,zero,800bb94 <__gedf2+0x78>
 800bb6c:	48001326 	beq	r9,zero,800bbbc <__gedf2+0xa0>
 800bb70:	0005883a 	mov	r2,zero
 800bb74:	f800283a 	ret
 800bb78:	5112b03a 	or	r9,r10,r4
 800bb7c:	4800191e 	bne	r9,zero,800bbe4 <__gedf2+0xc8>
 800bb80:	18800926 	beq	r3,r2,800bba8 <__gedf2+0x8c>
 800bb84:	18000b1e 	bne	r3,zero,800bbb4 <__gedf2+0x98>
 800bb88:	4192b03a 	or	r9,r8,r6
 800bb8c:	0017883a 	mov	r11,zero
 800bb90:	48000a26 	beq	r9,zero,800bbbc <__gedf2+0xa0>
 800bb94:	39c03fcc 	andi	r7,r7,255
 800bb98:	58000726 	beq	r11,zero,800bbb8 <__gedf2+0x9c>
 800bb9c:	3800081e 	bne	r7,zero,800bbc0 <__gedf2+0xa4>
 800bba0:	00bfffc4 	movi	r2,-1
 800bba4:	f800283a 	ret
 800bba8:	4192b03a 	or	r9,r8,r6
 800bbac:	48000d1e 	bne	r9,zero,800bbe4 <__gedf2+0xc8>
 800bbb0:	103fe826 	beq	r2,zero,800bb54 <__alt_data_end+0xfc00bb54>
 800bbb4:	39c03fcc 	andi	r7,r7,255
 800bbb8:	29c00326 	beq	r5,r7,800bbc8 <__gedf2+0xac>
 800bbbc:	283ff81e 	bne	r5,zero,800bba0 <__alt_data_end+0xfc00bba0>
 800bbc0:	00800044 	movi	r2,1
 800bbc4:	f800283a 	ret
 800bbc8:	18bffc16 	blt	r3,r2,800bbbc <__alt_data_end+0xfc00bbbc>
 800bbcc:	10c00316 	blt	r2,r3,800bbdc <__gedf2+0xc0>
 800bbd0:	42bffa36 	bltu	r8,r10,800bbbc <__alt_data_end+0xfc00bbbc>
 800bbd4:	52000526 	beq	r10,r8,800bbec <__gedf2+0xd0>
 800bbd8:	523fe52e 	bgeu	r10,r8,800bb70 <__alt_data_end+0xfc00bb70>
 800bbdc:	283ff026 	beq	r5,zero,800bba0 <__alt_data_end+0xfc00bba0>
 800bbe0:	003ff706 	br	800bbc0 <__alt_data_end+0xfc00bbc0>
 800bbe4:	00bfff84 	movi	r2,-2
 800bbe8:	f800283a 	ret
 800bbec:	313ff336 	bltu	r6,r4,800bbbc <__alt_data_end+0xfc00bbbc>
 800bbf0:	21bfdf2e 	bgeu	r4,r6,800bb70 <__alt_data_end+0xfc00bb70>
 800bbf4:	283fea26 	beq	r5,zero,800bba0 <__alt_data_end+0xfc00bba0>
 800bbf8:	003ff106 	br	800bbc0 <__alt_data_end+0xfc00bbc0>

0800bbfc <__ledf2>:
 800bbfc:	2804d53a 	srli	r2,r5,20
 800bc00:	3810d53a 	srli	r8,r7,20
 800bc04:	00c00434 	movhi	r3,16
 800bc08:	18ffffc4 	addi	r3,r3,-1
 800bc0c:	0241ffc4 	movi	r9,2047
 800bc10:	1081ffcc 	andi	r2,r2,2047
 800bc14:	28d4703a 	and	r10,r5,r3
 800bc18:	4250703a 	and	r8,r8,r9
 800bc1c:	38c6703a 	and	r3,r7,r3
 800bc20:	280ad7fa 	srli	r5,r5,31
 800bc24:	380ed7fa 	srli	r7,r7,31
 800bc28:	12400b26 	beq	r2,r9,800bc58 <__ledf2+0x5c>
 800bc2c:	42401926 	beq	r8,r9,800bc94 <__ledf2+0x98>
 800bc30:	10000c1e 	bne	r2,zero,800bc64 <__ledf2+0x68>
 800bc34:	5112b03a 	or	r9,r10,r4
 800bc38:	4813003a 	cmpeq	r9,r9,zero
 800bc3c:	4817883a 	mov	r11,r9
 800bc40:	40000f26 	beq	r8,zero,800bc80 <__ledf2+0x84>
 800bc44:	39c03fcc 	andi	r7,r7,255
 800bc48:	58001826 	beq	r11,zero,800bcac <__ledf2+0xb0>
 800bc4c:	38000a1e 	bne	r7,zero,800bc78 <__ledf2+0x7c>
 800bc50:	00bfffc4 	movi	r2,-1
 800bc54:	f800283a 	ret
 800bc58:	5112b03a 	or	r9,r10,r4
 800bc5c:	48000f1e 	bne	r9,zero,800bc9c <__ledf2+0xa0>
 800bc60:	40800c26 	beq	r8,r2,800bc94 <__ledf2+0x98>
 800bc64:	4000101e 	bne	r8,zero,800bca8 <__ledf2+0xac>
 800bc68:	1992b03a 	or	r9,r3,r6
 800bc6c:	0017883a 	mov	r11,zero
 800bc70:	483ff41e 	bne	r9,zero,800bc44 <__alt_data_end+0xfc00bc44>
 800bc74:	283ff61e 	bne	r5,zero,800bc50 <__alt_data_end+0xfc00bc50>
 800bc78:	00800044 	movi	r2,1
 800bc7c:	f800283a 	ret
 800bc80:	1998b03a 	or	r12,r3,r6
 800bc84:	603fef1e 	bne	r12,zero,800bc44 <__alt_data_end+0xfc00bc44>
 800bc88:	483ffa26 	beq	r9,zero,800bc74 <__alt_data_end+0xfc00bc74>
 800bc8c:	0005883a 	mov	r2,zero
 800bc90:	f800283a 	ret
 800bc94:	1992b03a 	or	r9,r3,r6
 800bc98:	48000226 	beq	r9,zero,800bca4 <__ledf2+0xa8>
 800bc9c:	00800084 	movi	r2,2
 800bca0:	f800283a 	ret
 800bca4:	103fe326 	beq	r2,zero,800bc34 <__alt_data_end+0xfc00bc34>
 800bca8:	39c03fcc 	andi	r7,r7,255
 800bcac:	29fff11e 	bne	r5,r7,800bc74 <__alt_data_end+0xfc00bc74>
 800bcb0:	40bff016 	blt	r8,r2,800bc74 <__alt_data_end+0xfc00bc74>
 800bcb4:	12000316 	blt	r2,r8,800bcc4 <__ledf2+0xc8>
 800bcb8:	1abfee36 	bltu	r3,r10,800bc74 <__alt_data_end+0xfc00bc74>
 800bcbc:	50c00326 	beq	r10,r3,800bccc <__ledf2+0xd0>
 800bcc0:	50fff22e 	bgeu	r10,r3,800bc8c <__alt_data_end+0xfc00bc8c>
 800bcc4:	283fe226 	beq	r5,zero,800bc50 <__alt_data_end+0xfc00bc50>
 800bcc8:	003feb06 	br	800bc78 <__alt_data_end+0xfc00bc78>
 800bccc:	313fe936 	bltu	r6,r4,800bc74 <__alt_data_end+0xfc00bc74>
 800bcd0:	21bfee2e 	bgeu	r4,r6,800bc8c <__alt_data_end+0xfc00bc8c>
 800bcd4:	283fde26 	beq	r5,zero,800bc50 <__alt_data_end+0xfc00bc50>
 800bcd8:	003fe706 	br	800bc78 <__alt_data_end+0xfc00bc78>

0800bcdc <__muldf3>:
 800bcdc:	defff204 	addi	sp,sp,-56
 800bce0:	2804d53a 	srli	r2,r5,20
 800bce4:	dd800a15 	stw	r22,40(sp)
 800bce8:	282cd7fa 	srli	r22,r5,31
 800bcec:	dc000415 	stw	r16,16(sp)
 800bcf0:	04000434 	movhi	r16,16
 800bcf4:	df000c15 	stw	fp,48(sp)
 800bcf8:	dd000815 	stw	r20,32(sp)
 800bcfc:	dcc00715 	stw	r19,28(sp)
 800bd00:	dc800615 	stw	r18,24(sp)
 800bd04:	dc400515 	stw	r17,20(sp)
 800bd08:	843fffc4 	addi	r16,r16,-1
 800bd0c:	dfc00d15 	stw	ra,52(sp)
 800bd10:	ddc00b15 	stw	r23,44(sp)
 800bd14:	dd400915 	stw	r21,36(sp)
 800bd18:	1501ffcc 	andi	r20,r2,2047
 800bd1c:	2023883a 	mov	r17,r4
 800bd20:	2025883a 	mov	r18,r4
 800bd24:	2c20703a 	and	r16,r5,r16
 800bd28:	b027883a 	mov	r19,r22
 800bd2c:	b7003fcc 	andi	fp,r22,255
 800bd30:	a0005926 	beq	r20,zero,800be98 <__muldf3+0x1bc>
 800bd34:	0081ffc4 	movi	r2,2047
 800bd38:	a0803426 	beq	r20,r2,800be0c <__muldf3+0x130>
 800bd3c:	84000434 	orhi	r16,r16,16
 800bd40:	2004d77a 	srli	r2,r4,29
 800bd44:	802090fa 	slli	r16,r16,3
 800bd48:	202490fa 	slli	r18,r4,3
 800bd4c:	a53f0044 	addi	r20,r20,-1023
 800bd50:	80a0b03a 	or	r16,r16,r2
 800bd54:	002b883a 	mov	r21,zero
 800bd58:	0015883a 	mov	r10,zero
 800bd5c:	3812d53a 	srli	r9,r7,20
 800bd60:	3806d7fa 	srli	r3,r7,31
 800bd64:	02000434 	movhi	r8,16
 800bd68:	423fffc4 	addi	r8,r8,-1
 800bd6c:	4941ffcc 	andi	r5,r9,2047
 800bd70:	302f883a 	mov	r23,r6
 800bd74:	3a22703a 	and	r17,r7,r8
 800bd78:	1ac03fcc 	andi	r11,r3,255
 800bd7c:	28006226 	beq	r5,zero,800bf08 <__muldf3+0x22c>
 800bd80:	0081ffc4 	movi	r2,2047
 800bd84:	28805a26 	beq	r5,r2,800bef0 <__muldf3+0x214>
 800bd88:	8a000434 	orhi	r8,r17,16
 800bd8c:	3004d77a 	srli	r2,r6,29
 800bd90:	401090fa 	slli	r8,r8,3
 800bd94:	302e90fa 	slli	r23,r6,3
 800bd98:	297f0044 	addi	r5,r5,-1023
 800bd9c:	40a2b03a 	or	r17,r8,r2
 800bda0:	0013883a 	mov	r9,zero
 800bda4:	4d4cb03a 	or	r6,r9,r21
 800bda8:	300c90ba 	slli	r6,r6,2
 800bdac:	02020074 	movhi	r8,2049
 800bdb0:	422f7304 	addi	r8,r8,-16948
 800bdb4:	320d883a 	add	r6,r6,r8
 800bdb8:	31800017 	ldw	r6,0(r6)
 800bdbc:	a14b883a 	add	r5,r20,r5
 800bdc0:	1dacf03a 	xor	r22,r3,r22
 800bdc4:	2b000044 	addi	r12,r5,1
 800bdc8:	3000683a 	jmp	r6
 800bdcc:	0800c008 	cmpgei	zero,at,768
 800bdd0:	0800bff4 	orhi	zero,at,767
 800bdd4:	0800bff4 	orhi	zero,at,767
 800bdd8:	0800bfe0 	cmpeqi	zero,at,767
 800bddc:	0800be28 	cmpgeui	zero,at,760
 800bde0:	0800be28 	cmpgeui	zero,at,760
 800bde4:	0800bfc8 	cmpgei	zero,at,767
 800bde8:	0800bfe0 	cmpeqi	zero,at,767
 800bdec:	0800be28 	cmpgeui	zero,at,760
 800bdf0:	0800bfc8 	cmpgei	zero,at,767
 800bdf4:	0800be28 	cmpgeui	zero,at,760
 800bdf8:	0800bfe0 	cmpeqi	zero,at,767
 800bdfc:	0800be2c 	andhi	zero,at,760
 800be00:	0800be2c 	andhi	zero,at,760
 800be04:	0800be2c 	andhi	zero,at,760
 800be08:	0800c204 	addi	zero,at,776
 800be0c:	8104b03a 	or	r2,r16,r4
 800be10:	10006a1e 	bne	r2,zero,800bfbc <__muldf3+0x2e0>
 800be14:	05400204 	movi	r21,8
 800be18:	0021883a 	mov	r16,zero
 800be1c:	0025883a 	mov	r18,zero
 800be20:	02800084 	movi	r10,2
 800be24:	003fcd06 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800be28:	b039883a 	mov	fp,r22
 800be2c:	00800084 	movi	r2,2
 800be30:	50804e1e 	bne	r10,r2,800bf6c <__muldf3+0x290>
 800be34:	e4c0004c 	andi	r19,fp,1
 800be38:	0101ffc4 	movi	r4,2047
 800be3c:	0021883a 	mov	r16,zero
 800be40:	0025883a 	mov	r18,zero
 800be44:	2008953a 	slli	r4,r4,20
 800be48:	98c03fcc 	andi	r3,r19,255
 800be4c:	01400434 	movhi	r5,16
 800be50:	297fffc4 	addi	r5,r5,-1
 800be54:	180697fa 	slli	r3,r3,31
 800be58:	8160703a 	and	r16,r16,r5
 800be5c:	8120b03a 	or	r16,r16,r4
 800be60:	80c6b03a 	or	r3,r16,r3
 800be64:	9005883a 	mov	r2,r18
 800be68:	dfc00d17 	ldw	ra,52(sp)
 800be6c:	df000c17 	ldw	fp,48(sp)
 800be70:	ddc00b17 	ldw	r23,44(sp)
 800be74:	dd800a17 	ldw	r22,40(sp)
 800be78:	dd400917 	ldw	r21,36(sp)
 800be7c:	dd000817 	ldw	r20,32(sp)
 800be80:	dcc00717 	ldw	r19,28(sp)
 800be84:	dc800617 	ldw	r18,24(sp)
 800be88:	dc400517 	ldw	r17,20(sp)
 800be8c:	dc000417 	ldw	r16,16(sp)
 800be90:	dec00e04 	addi	sp,sp,56
 800be94:	f800283a 	ret
 800be98:	8104b03a 	or	r2,r16,r4
 800be9c:	10004226 	beq	r2,zero,800bfa8 <__muldf3+0x2cc>
 800bea0:	8000f926 	beq	r16,zero,800c288 <__muldf3+0x5ac>
 800bea4:	8009883a 	mov	r4,r16
 800bea8:	d9800315 	stw	r6,12(sp)
 800beac:	d9c00015 	stw	r7,0(sp)
 800beb0:	800cecc0 	call	800cecc <__clzsi2>
 800beb4:	d9800317 	ldw	r6,12(sp)
 800beb8:	d9c00017 	ldw	r7,0(sp)
 800bebc:	1007883a 	mov	r3,r2
 800bec0:	01000a04 	movi	r4,40
 800bec4:	18bffe04 	addi	r2,r3,-8
 800bec8:	20c9c83a 	sub	r4,r4,r3
 800becc:	80a0983a 	sll	r16,r16,r2
 800bed0:	8908d83a 	srl	r4,r17,r4
 800bed4:	88a4983a 	sll	r18,r17,r2
 800bed8:	2420b03a 	or	r16,r4,r16
 800bedc:	017f0344 	movi	r5,-1011
 800bee0:	28e9c83a 	sub	r20,r5,r3
 800bee4:	002b883a 	mov	r21,zero
 800bee8:	0015883a 	mov	r10,zero
 800beec:	003f9b06 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800bef0:	8984b03a 	or	r2,r17,r6
 800bef4:	10002a1e 	bne	r2,zero,800bfa0 <__muldf3+0x2c4>
 800bef8:	0023883a 	mov	r17,zero
 800befc:	002f883a 	mov	r23,zero
 800bf00:	02400084 	movi	r9,2
 800bf04:	003fa706 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800bf08:	8984b03a 	or	r2,r17,r6
 800bf0c:	10002026 	beq	r2,zero,800bf90 <__muldf3+0x2b4>
 800bf10:	8800cc26 	beq	r17,zero,800c244 <__muldf3+0x568>
 800bf14:	8809883a 	mov	r4,r17
 800bf18:	d8c00215 	stw	r3,8(sp)
 800bf1c:	d9800315 	stw	r6,12(sp)
 800bf20:	da800015 	stw	r10,0(sp)
 800bf24:	dac00115 	stw	r11,4(sp)
 800bf28:	800cecc0 	call	800cecc <__clzsi2>
 800bf2c:	d8c00217 	ldw	r3,8(sp)
 800bf30:	d9800317 	ldw	r6,12(sp)
 800bf34:	da800017 	ldw	r10,0(sp)
 800bf38:	dac00117 	ldw	r11,4(sp)
 800bf3c:	1009883a 	mov	r4,r2
 800bf40:	01400a04 	movi	r5,40
 800bf44:	25fffe04 	addi	r23,r4,-8
 800bf48:	290bc83a 	sub	r5,r5,r4
 800bf4c:	8dd0983a 	sll	r8,r17,r23
 800bf50:	314ad83a 	srl	r5,r6,r5
 800bf54:	35ee983a 	sll	r23,r6,r23
 800bf58:	2a22b03a 	or	r17,r5,r8
 800bf5c:	017f0344 	movi	r5,-1011
 800bf60:	290bc83a 	sub	r5,r5,r4
 800bf64:	0013883a 	mov	r9,zero
 800bf68:	003f8e06 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800bf6c:	008000c4 	movi	r2,3
 800bf70:	50811d26 	beq	r10,r2,800c3e8 <__muldf3+0x70c>
 800bf74:	00800044 	movi	r2,1
 800bf78:	5080e01e 	bne	r10,r2,800c2fc <__muldf3+0x620>
 800bf7c:	e0a6703a 	and	r19,fp,r2
 800bf80:	0009883a 	mov	r4,zero
 800bf84:	0021883a 	mov	r16,zero
 800bf88:	0025883a 	mov	r18,zero
 800bf8c:	003fad06 	br	800be44 <__alt_data_end+0xfc00be44>
 800bf90:	0023883a 	mov	r17,zero
 800bf94:	002f883a 	mov	r23,zero
 800bf98:	02400044 	movi	r9,1
 800bf9c:	003f8106 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800bfa0:	024000c4 	movi	r9,3
 800bfa4:	003f7f06 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800bfa8:	05400104 	movi	r21,4
 800bfac:	0021883a 	mov	r16,zero
 800bfb0:	0025883a 	mov	r18,zero
 800bfb4:	02800044 	movi	r10,1
 800bfb8:	003f6806 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800bfbc:	05400304 	movi	r21,12
 800bfc0:	028000c4 	movi	r10,3
 800bfc4:	003f6506 	br	800bd5c <__alt_data_end+0xfc00bd5c>
 800bfc8:	04000434 	movhi	r16,16
 800bfcc:	0027883a 	mov	r19,zero
 800bfd0:	843fffc4 	addi	r16,r16,-1
 800bfd4:	04bfffc4 	movi	r18,-1
 800bfd8:	0101ffc4 	movi	r4,2047
 800bfdc:	003f9906 	br	800be44 <__alt_data_end+0xfc00be44>
 800bfe0:	8821883a 	mov	r16,r17
 800bfe4:	b825883a 	mov	r18,r23
 800bfe8:	5839883a 	mov	fp,r11
 800bfec:	4815883a 	mov	r10,r9
 800bff0:	003f8e06 	br	800be2c <__alt_data_end+0xfc00be2c>
 800bff4:	8821883a 	mov	r16,r17
 800bff8:	b825883a 	mov	r18,r23
 800bffc:	b039883a 	mov	fp,r22
 800c000:	4815883a 	mov	r10,r9
 800c004:	003f8906 	br	800be2c <__alt_data_end+0xfc00be2c>
 800c008:	b80cd43a 	srli	r6,r23,16
 800c00c:	9006d43a 	srli	r3,r18,16
 800c010:	90bfffcc 	andi	r2,r18,65535
 800c014:	bdffffcc 	andi	r23,r23,65535
 800c018:	b891383a 	mul	r8,r23,r2
 800c01c:	b8c9383a 	mul	r4,r23,r3
 800c020:	309b383a 	mul	r13,r6,r2
 800c024:	400ed43a 	srli	r7,r8,16
 800c028:	30df383a 	mul	r15,r6,r3
 800c02c:	235b883a 	add	r13,r4,r13
 800c030:	69db883a 	add	r13,r13,r7
 800c034:	6900022e 	bgeu	r13,r4,800c040 <__muldf3+0x364>
 800c038:	01000074 	movhi	r4,1
 800c03c:	791f883a 	add	r15,r15,r4
 800c040:	8828d43a 	srli	r20,r17,16
 800c044:	8c7fffcc 	andi	r17,r17,65535
 800c048:	888f383a 	mul	r7,r17,r2
 800c04c:	88d3383a 	mul	r9,r17,r3
 800c050:	a0a5383a 	mul	r18,r20,r2
 800c054:	3816d43a 	srli	r11,r7,16
 800c058:	6814943a 	slli	r10,r13,16
 800c05c:	4ca5883a 	add	r18,r9,r18
 800c060:	423fffcc 	andi	r8,r8,65535
 800c064:	92e5883a 	add	r18,r18,r11
 800c068:	6808d43a 	srli	r4,r13,16
 800c06c:	5215883a 	add	r10,r10,r8
 800c070:	a0c7383a 	mul	r3,r20,r3
 800c074:	9240022e 	bgeu	r18,r9,800c080 <__muldf3+0x3a4>
 800c078:	00800074 	movhi	r2,1
 800c07c:	1887883a 	add	r3,r3,r2
 800c080:	802ad43a 	srli	r21,r16,16
 800c084:	80bfffcc 	andi	r2,r16,65535
 800c088:	b893383a 	mul	r9,r23,r2
 800c08c:	3091383a 	mul	r8,r6,r2
 800c090:	bd6f383a 	mul	r23,r23,r21
 800c094:	9026943a 	slli	r19,r18,16
 800c098:	481ad43a 	srli	r13,r9,16
 800c09c:	9024d43a 	srli	r18,r18,16
 800c0a0:	39ffffcc 	andi	r7,r7,65535
 800c0a4:	ba11883a 	add	r8,r23,r8
 800c0a8:	99e7883a 	add	r19,r19,r7
 800c0ac:	4351883a 	add	r8,r8,r13
 800c0b0:	1c97883a 	add	r11,r3,r18
 800c0b4:	354d383a 	mul	r6,r6,r21
 800c0b8:	9925883a 	add	r18,r19,r4
 800c0bc:	45c0022e 	bgeu	r8,r23,800c0c8 <__muldf3+0x3ec>
 800c0c0:	00c00074 	movhi	r3,1
 800c0c4:	30cd883a 	add	r6,r6,r3
 800c0c8:	8889383a 	mul	r4,r17,r2
 800c0cc:	8d63383a 	mul	r17,r17,r21
 800c0d0:	a085383a 	mul	r2,r20,r2
 800c0d4:	200ed43a 	srli	r7,r4,16
 800c0d8:	401cd43a 	srli	r14,r8,16
 800c0dc:	401a943a 	slli	r13,r8,16
 800c0e0:	8885883a 	add	r2,r17,r2
 800c0e4:	4a3fffcc 	andi	r8,r9,65535
 800c0e8:	11c5883a 	add	r2,r2,r7
 800c0ec:	339d883a 	add	r14,r6,r14
 800c0f0:	6a11883a 	add	r8,r13,r8
 800c0f4:	a561383a 	mul	r16,r20,r21
 800c0f8:	1440022e 	bgeu	r2,r17,800c104 <__muldf3+0x428>
 800c0fc:	00c00074 	movhi	r3,1
 800c100:	80e1883a 	add	r16,r16,r3
 800c104:	1006943a 	slli	r3,r2,16
 800c108:	213fffcc 	andi	r4,r4,65535
 800c10c:	93db883a 	add	r13,r18,r15
 800c110:	1909883a 	add	r4,r3,r4
 800c114:	22c7883a 	add	r3,r4,r11
 800c118:	6cd3803a 	cmpltu	r9,r13,r19
 800c11c:	6a09883a 	add	r4,r13,r8
 800c120:	1a5b883a 	add	r13,r3,r9
 800c124:	2211803a 	cmpltu	r8,r4,r8
 800c128:	734d883a 	add	r6,r14,r13
 800c12c:	100ed43a 	srli	r7,r2,16
 800c130:	6a53803a 	cmpltu	r9,r13,r9
 800c134:	3205883a 	add	r2,r6,r8
 800c138:	1ac7803a 	cmpltu	r3,r3,r11
 800c13c:	1211803a 	cmpltu	r8,r2,r8
 800c140:	48c6b03a 	or	r3,r9,r3
 800c144:	338d803a 	cmpltu	r6,r6,r14
 800c148:	19c7883a 	add	r3,r3,r7
 800c14c:	418cb03a 	or	r6,r8,r6
 800c150:	1987883a 	add	r3,r3,r6
 800c154:	2024927a 	slli	r18,r4,9
 800c158:	1c07883a 	add	r3,r3,r16
 800c15c:	1806927a 	slli	r3,r3,9
 800c160:	1020d5fa 	srli	r16,r2,23
 800c164:	2008d5fa 	srli	r4,r4,23
 800c168:	9294b03a 	or	r10,r18,r10
 800c16c:	1004927a 	slli	r2,r2,9
 800c170:	5024c03a 	cmpne	r18,r10,zero
 800c174:	1c20b03a 	or	r16,r3,r16
 800c178:	9108b03a 	or	r4,r18,r4
 800c17c:	80c0402c 	andhi	r3,r16,256
 800c180:	20a4b03a 	or	r18,r4,r2
 800c184:	18000726 	beq	r3,zero,800c1a4 <__muldf3+0x4c8>
 800c188:	9006d07a 	srli	r3,r18,1
 800c18c:	800897fa 	slli	r4,r16,31
 800c190:	9080004c 	andi	r2,r18,1
 800c194:	8020d07a 	srli	r16,r16,1
 800c198:	10c4b03a 	or	r2,r2,r3
 800c19c:	1124b03a 	or	r18,r2,r4
 800c1a0:	600b883a 	mov	r5,r12
 800c1a4:	2900ffc4 	addi	r4,r5,1023
 800c1a8:	01004b0e 	bge	zero,r4,800c2d8 <__muldf3+0x5fc>
 800c1ac:	908001cc 	andi	r2,r18,7
 800c1b0:	10000726 	beq	r2,zero,800c1d0 <__muldf3+0x4f4>
 800c1b4:	90c003cc 	andi	r3,r18,15
 800c1b8:	00800104 	movi	r2,4
 800c1bc:	18800426 	beq	r3,r2,800c1d0 <__muldf3+0x4f4>
 800c1c0:	9087883a 	add	r3,r18,r2
 800c1c4:	1c85803a 	cmpltu	r2,r3,r18
 800c1c8:	80a1883a 	add	r16,r16,r2
 800c1cc:	1825883a 	mov	r18,r3
 800c1d0:	8080402c 	andhi	r2,r16,256
 800c1d4:	10000426 	beq	r2,zero,800c1e8 <__muldf3+0x50c>
 800c1d8:	00bfc034 	movhi	r2,65280
 800c1dc:	10bfffc4 	addi	r2,r2,-1
 800c1e0:	29010004 	addi	r4,r5,1024
 800c1e4:	80a0703a 	and	r16,r16,r2
 800c1e8:	0081ff84 	movi	r2,2046
 800c1ec:	1100320e 	bge	r2,r4,800c2b8 <__muldf3+0x5dc>
 800c1f0:	b4c0004c 	andi	r19,r22,1
 800c1f4:	0101ffc4 	movi	r4,2047
 800c1f8:	0021883a 	mov	r16,zero
 800c1fc:	0025883a 	mov	r18,zero
 800c200:	003f1006 	br	800be44 <__alt_data_end+0xfc00be44>
 800c204:	8080022c 	andhi	r2,r16,8
 800c208:	10000926 	beq	r2,zero,800c230 <__muldf3+0x554>
 800c20c:	8880022c 	andhi	r2,r17,8
 800c210:	1000071e 	bne	r2,zero,800c230 <__muldf3+0x554>
 800c214:	00800434 	movhi	r2,16
 800c218:	8c000234 	orhi	r16,r17,8
 800c21c:	10bfffc4 	addi	r2,r2,-1
 800c220:	1827883a 	mov	r19,r3
 800c224:	80a0703a 	and	r16,r16,r2
 800c228:	b825883a 	mov	r18,r23
 800c22c:	003f6a06 	br	800bfd8 <__alt_data_end+0xfc00bfd8>
 800c230:	00800434 	movhi	r2,16
 800c234:	84000234 	orhi	r16,r16,8
 800c238:	10bfffc4 	addi	r2,r2,-1
 800c23c:	80a0703a 	and	r16,r16,r2
 800c240:	003f6506 	br	800bfd8 <__alt_data_end+0xfc00bfd8>
 800c244:	3009883a 	mov	r4,r6
 800c248:	d8c00215 	stw	r3,8(sp)
 800c24c:	d9800315 	stw	r6,12(sp)
 800c250:	da800015 	stw	r10,0(sp)
 800c254:	dac00115 	stw	r11,4(sp)
 800c258:	800cecc0 	call	800cecc <__clzsi2>
 800c25c:	11000804 	addi	r4,r2,32
 800c260:	014009c4 	movi	r5,39
 800c264:	d8c00217 	ldw	r3,8(sp)
 800c268:	d9800317 	ldw	r6,12(sp)
 800c26c:	da800017 	ldw	r10,0(sp)
 800c270:	dac00117 	ldw	r11,4(sp)
 800c274:	293f320e 	bge	r5,r4,800bf40 <__alt_data_end+0xfc00bf40>
 800c278:	10bffe04 	addi	r2,r2,-8
 800c27c:	b8a2983a 	sll	r17,r23,r2
 800c280:	002f883a 	mov	r23,zero
 800c284:	003f3506 	br	800bf5c <__alt_data_end+0xfc00bf5c>
 800c288:	d9800315 	stw	r6,12(sp)
 800c28c:	d9c00015 	stw	r7,0(sp)
 800c290:	800cecc0 	call	800cecc <__clzsi2>
 800c294:	10c00804 	addi	r3,r2,32
 800c298:	010009c4 	movi	r4,39
 800c29c:	d9800317 	ldw	r6,12(sp)
 800c2a0:	d9c00017 	ldw	r7,0(sp)
 800c2a4:	20ff060e 	bge	r4,r3,800bec0 <__alt_data_end+0xfc00bec0>
 800c2a8:	10bffe04 	addi	r2,r2,-8
 800c2ac:	88a0983a 	sll	r16,r17,r2
 800c2b0:	0025883a 	mov	r18,zero
 800c2b4:	003f0906 	br	800bedc <__alt_data_end+0xfc00bedc>
 800c2b8:	9004d0fa 	srli	r2,r18,3
 800c2bc:	8024977a 	slli	r18,r16,29
 800c2c0:	8020927a 	slli	r16,r16,9
 800c2c4:	2101ffcc 	andi	r4,r4,2047
 800c2c8:	90a4b03a 	or	r18,r18,r2
 800c2cc:	8020d33a 	srli	r16,r16,12
 800c2d0:	b4c0004c 	andi	r19,r22,1
 800c2d4:	003edb06 	br	800be44 <__alt_data_end+0xfc00be44>
 800c2d8:	00ff0084 	movi	r3,-1022
 800c2dc:	1947c83a 	sub	r3,r3,r5
 800c2e0:	00800e04 	movi	r2,56
 800c2e4:	10c0080e 	bge	r2,r3,800c308 <__muldf3+0x62c>
 800c2e8:	b4c0004c 	andi	r19,r22,1
 800c2ec:	0009883a 	mov	r4,zero
 800c2f0:	0021883a 	mov	r16,zero
 800c2f4:	0025883a 	mov	r18,zero
 800c2f8:	003ed206 	br	800be44 <__alt_data_end+0xfc00be44>
 800c2fc:	600b883a 	mov	r5,r12
 800c300:	e02d883a 	mov	r22,fp
 800c304:	003fa706 	br	800c1a4 <__alt_data_end+0xfc00c1a4>
 800c308:	008007c4 	movi	r2,31
 800c30c:	10c01816 	blt	r2,r3,800c370 <__muldf3+0x694>
 800c310:	29410784 	addi	r5,r5,1054
 800c314:	8144983a 	sll	r2,r16,r5
 800c318:	90c8d83a 	srl	r4,r18,r3
 800c31c:	914a983a 	sll	r5,r18,r5
 800c320:	80c6d83a 	srl	r3,r16,r3
 800c324:	2088b03a 	or	r4,r4,r2
 800c328:	2804c03a 	cmpne	r2,r5,zero
 800c32c:	2084b03a 	or	r2,r4,r2
 800c330:	110001cc 	andi	r4,r2,7
 800c334:	20000726 	beq	r4,zero,800c354 <__muldf3+0x678>
 800c338:	114003cc 	andi	r5,r2,15
 800c33c:	01000104 	movi	r4,4
 800c340:	29000426 	beq	r5,r4,800c354 <__muldf3+0x678>
 800c344:	11000104 	addi	r4,r2,4
 800c348:	2085803a 	cmpltu	r2,r4,r2
 800c34c:	1887883a 	add	r3,r3,r2
 800c350:	2005883a 	mov	r2,r4
 800c354:	1900202c 	andhi	r4,r3,128
 800c358:	20001826 	beq	r4,zero,800c3bc <__muldf3+0x6e0>
 800c35c:	b4c0004c 	andi	r19,r22,1
 800c360:	01000044 	movi	r4,1
 800c364:	0021883a 	mov	r16,zero
 800c368:	0025883a 	mov	r18,zero
 800c36c:	003eb506 	br	800be44 <__alt_data_end+0xfc00be44>
 800c370:	00bef884 	movi	r2,-1054
 800c374:	1145c83a 	sub	r2,r2,r5
 800c378:	8088d83a 	srl	r4,r16,r2
 800c37c:	00800804 	movi	r2,32
 800c380:	18801726 	beq	r3,r2,800c3e0 <__muldf3+0x704>
 800c384:	28810f84 	addi	r2,r5,1086
 800c388:	8084983a 	sll	r2,r16,r2
 800c38c:	1484b03a 	or	r2,r2,r18
 800c390:	1004c03a 	cmpne	r2,r2,zero
 800c394:	1104b03a 	or	r2,r2,r4
 800c398:	10c001cc 	andi	r3,r2,7
 800c39c:	18000b1e 	bne	r3,zero,800c3cc <__muldf3+0x6f0>
 800c3a0:	0021883a 	mov	r16,zero
 800c3a4:	1004d0fa 	srli	r2,r2,3
 800c3a8:	b4c0004c 	andi	r19,r22,1
 800c3ac:	0009883a 	mov	r4,zero
 800c3b0:	10e4b03a 	or	r18,r2,r3
 800c3b4:	003ea306 	br	800be44 <__alt_data_end+0xfc00be44>
 800c3b8:	0007883a 	mov	r3,zero
 800c3bc:	1820927a 	slli	r16,r3,9
 800c3c0:	1806977a 	slli	r3,r3,29
 800c3c4:	8020d33a 	srli	r16,r16,12
 800c3c8:	003ff606 	br	800c3a4 <__alt_data_end+0xfc00c3a4>
 800c3cc:	110003cc 	andi	r4,r2,15
 800c3d0:	00c00104 	movi	r3,4
 800c3d4:	20fff826 	beq	r4,r3,800c3b8 <__alt_data_end+0xfc00c3b8>
 800c3d8:	0007883a 	mov	r3,zero
 800c3dc:	003fd906 	br	800c344 <__alt_data_end+0xfc00c344>
 800c3e0:	0005883a 	mov	r2,zero
 800c3e4:	003fe906 	br	800c38c <__alt_data_end+0xfc00c38c>
 800c3e8:	00800434 	movhi	r2,16
 800c3ec:	84000234 	orhi	r16,r16,8
 800c3f0:	10bfffc4 	addi	r2,r2,-1
 800c3f4:	e4c0004c 	andi	r19,fp,1
 800c3f8:	80a0703a 	and	r16,r16,r2
 800c3fc:	003ef606 	br	800bfd8 <__alt_data_end+0xfc00bfd8>

0800c400 <__subdf3>:
 800c400:	00c00434 	movhi	r3,16
 800c404:	18ffffc4 	addi	r3,r3,-1
 800c408:	defffb04 	addi	sp,sp,-20
 800c40c:	28d2703a 	and	r9,r5,r3
 800c410:	3814d53a 	srli	r10,r7,20
 800c414:	38c6703a 	and	r3,r7,r3
 800c418:	3004d77a 	srli	r2,r6,29
 800c41c:	dc800215 	stw	r18,8(sp)
 800c420:	dc000015 	stw	r16,0(sp)
 800c424:	2824d7fa 	srli	r18,r5,31
 800c428:	2820d53a 	srli	r16,r5,20
 800c42c:	481290fa 	slli	r9,r9,3
 800c430:	200ad77a 	srli	r5,r4,29
 800c434:	180690fa 	slli	r3,r3,3
 800c438:	dc400115 	stw	r17,4(sp)
 800c43c:	dfc00415 	stw	ra,16(sp)
 800c440:	202290fa 	slli	r17,r4,3
 800c444:	dcc00315 	stw	r19,12(sp)
 800c448:	5281ffcc 	andi	r10,r10,2047
 800c44c:	0101ffc4 	movi	r4,2047
 800c450:	9011883a 	mov	r8,r18
 800c454:	8401ffcc 	andi	r16,r16,2047
 800c458:	94803fcc 	andi	r18,r18,255
 800c45c:	494ab03a 	or	r5,r9,r5
 800c460:	380ed7fa 	srli	r7,r7,31
 800c464:	1886b03a 	or	r3,r3,r2
 800c468:	300c90fa 	slli	r6,r6,3
 800c46c:	51009026 	beq	r10,r4,800c6b0 <__subdf3+0x2b0>
 800c470:	39c0005c 	xori	r7,r7,1
 800c474:	8285c83a 	sub	r2,r16,r10
 800c478:	91c06f26 	beq	r18,r7,800c638 <__subdf3+0x238>
 800c47c:	0080b10e 	bge	zero,r2,800c744 <__subdf3+0x344>
 800c480:	50002a1e 	bne	r10,zero,800c52c <__subdf3+0x12c>
 800c484:	1988b03a 	or	r4,r3,r6
 800c488:	2000941e 	bne	r4,zero,800c6dc <__subdf3+0x2dc>
 800c48c:	888001cc 	andi	r2,r17,7
 800c490:	10005b26 	beq	r2,zero,800c600 <__subdf3+0x200>
 800c494:	88c003cc 	andi	r3,r17,15
 800c498:	00800104 	movi	r2,4
 800c49c:	18805826 	beq	r3,r2,800c600 <__subdf3+0x200>
 800c4a0:	88c00104 	addi	r3,r17,4
 800c4a4:	1c63803a 	cmpltu	r17,r3,r17
 800c4a8:	2c4b883a 	add	r5,r5,r17
 800c4ac:	2880202c 	andhi	r2,r5,128
 800c4b0:	9200004c 	andi	r8,r18,1
 800c4b4:	1823883a 	mov	r17,r3
 800c4b8:	10005426 	beq	r2,zero,800c60c <__subdf3+0x20c>
 800c4bc:	84000044 	addi	r16,r16,1
 800c4c0:	0081ffc4 	movi	r2,2047
 800c4c4:	8080bf26 	beq	r16,r2,800c7c4 <__subdf3+0x3c4>
 800c4c8:	013fe034 	movhi	r4,65408
 800c4cc:	213fffc4 	addi	r4,r4,-1
 800c4d0:	290a703a 	and	r5,r5,r4
 800c4d4:	2804977a 	slli	r2,r5,29
 800c4d8:	280a927a 	slli	r5,r5,9
 800c4dc:	8822d0fa 	srli	r17,r17,3
 800c4e0:	8401ffcc 	andi	r16,r16,2047
 800c4e4:	2808d33a 	srli	r4,r5,12
 800c4e8:	1444b03a 	or	r2,r2,r17
 800c4ec:	8401ffcc 	andi	r16,r16,2047
 800c4f0:	800a953a 	slli	r5,r16,20
 800c4f4:	40c03fcc 	andi	r3,r8,255
 800c4f8:	04000434 	movhi	r16,16
 800c4fc:	180697fa 	slli	r3,r3,31
 800c500:	843fffc4 	addi	r16,r16,-1
 800c504:	2420703a 	and	r16,r4,r16
 800c508:	8160b03a 	or	r16,r16,r5
 800c50c:	80c6b03a 	or	r3,r16,r3
 800c510:	dfc00417 	ldw	ra,16(sp)
 800c514:	dcc00317 	ldw	r19,12(sp)
 800c518:	dc800217 	ldw	r18,8(sp)
 800c51c:	dc400117 	ldw	r17,4(sp)
 800c520:	dc000017 	ldw	r16,0(sp)
 800c524:	dec00504 	addi	sp,sp,20
 800c528:	f800283a 	ret
 800c52c:	0101ffc4 	movi	r4,2047
 800c530:	813fd626 	beq	r16,r4,800c48c <__alt_data_end+0xfc00c48c>
 800c534:	18c02034 	orhi	r3,r3,128
 800c538:	01000e04 	movi	r4,56
 800c53c:	2080a416 	blt	r4,r2,800c7d0 <__subdf3+0x3d0>
 800c540:	010007c4 	movi	r4,31
 800c544:	2080c716 	blt	r4,r2,800c864 <__subdf3+0x464>
 800c548:	01000804 	movi	r4,32
 800c54c:	2089c83a 	sub	r4,r4,r2
 800c550:	1910983a 	sll	r8,r3,r4
 800c554:	308ed83a 	srl	r7,r6,r2
 800c558:	3108983a 	sll	r4,r6,r4
 800c55c:	1884d83a 	srl	r2,r3,r2
 800c560:	41ccb03a 	or	r6,r8,r7
 800c564:	2008c03a 	cmpne	r4,r4,zero
 800c568:	310cb03a 	or	r6,r6,r4
 800c56c:	898dc83a 	sub	r6,r17,r6
 800c570:	89a3803a 	cmpltu	r17,r17,r6
 800c574:	288bc83a 	sub	r5,r5,r2
 800c578:	2c4bc83a 	sub	r5,r5,r17
 800c57c:	3023883a 	mov	r17,r6
 800c580:	2880202c 	andhi	r2,r5,128
 800c584:	10006b26 	beq	r2,zero,800c734 <__subdf3+0x334>
 800c588:	04c02034 	movhi	r19,128
 800c58c:	9cffffc4 	addi	r19,r19,-1
 800c590:	2ce6703a 	and	r19,r5,r19
 800c594:	98007c26 	beq	r19,zero,800c788 <__subdf3+0x388>
 800c598:	9809883a 	mov	r4,r19
 800c59c:	800cecc0 	call	800cecc <__clzsi2>
 800c5a0:	10fffe04 	addi	r3,r2,-8
 800c5a4:	010007c4 	movi	r4,31
 800c5a8:	20c07d16 	blt	r4,r3,800c7a0 <__subdf3+0x3a0>
 800c5ac:	01400a04 	movi	r5,40
 800c5b0:	2885c83a 	sub	r2,r5,r2
 800c5b4:	888ad83a 	srl	r5,r17,r2
 800c5b8:	98e6983a 	sll	r19,r19,r3
 800c5bc:	88e2983a 	sll	r17,r17,r3
 800c5c0:	2ce6b03a 	or	r19,r5,r19
 800c5c4:	1c007a16 	blt	r3,r16,800c7b0 <__subdf3+0x3b0>
 800c5c8:	1c21c83a 	sub	r16,r3,r16
 800c5cc:	81400044 	addi	r5,r16,1
 800c5d0:	00c007c4 	movi	r3,31
 800c5d4:	19409616 	blt	r3,r5,800c830 <__subdf3+0x430>
 800c5d8:	1c21c83a 	sub	r16,r3,r16
 800c5dc:	8c08983a 	sll	r4,r17,r16
 800c5e0:	8946d83a 	srl	r3,r17,r5
 800c5e4:	9c20983a 	sll	r16,r19,r16
 800c5e8:	2008c03a 	cmpne	r4,r4,zero
 800c5ec:	994ad83a 	srl	r5,r19,r5
 800c5f0:	1c06b03a 	or	r3,r3,r16
 800c5f4:	1922b03a 	or	r17,r3,r4
 800c5f8:	0021883a 	mov	r16,zero
 800c5fc:	003fa306 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c600:	2880202c 	andhi	r2,r5,128
 800c604:	9200004c 	andi	r8,r18,1
 800c608:	103fac1e 	bne	r2,zero,800c4bc <__alt_data_end+0xfc00c4bc>
 800c60c:	2804977a 	slli	r2,r5,29
 800c610:	8822d0fa 	srli	r17,r17,3
 800c614:	00c1ffc4 	movi	r3,2047
 800c618:	280ad0fa 	srli	r5,r5,3
 800c61c:	1444b03a 	or	r2,r2,r17
 800c620:	80c02726 	beq	r16,r3,800c6c0 <__subdf3+0x2c0>
 800c624:	01000434 	movhi	r4,16
 800c628:	213fffc4 	addi	r4,r4,-1
 800c62c:	80e0703a 	and	r16,r16,r3
 800c630:	2908703a 	and	r4,r5,r4
 800c634:	003fad06 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c638:	0080690e 	bge	zero,r2,800c7e0 <__subdf3+0x3e0>
 800c63c:	50002f26 	beq	r10,zero,800c6fc <__subdf3+0x2fc>
 800c640:	0101ffc4 	movi	r4,2047
 800c644:	813f9126 	beq	r16,r4,800c48c <__alt_data_end+0xfc00c48c>
 800c648:	18c02034 	orhi	r3,r3,128
 800c64c:	01000e04 	movi	r4,56
 800c650:	2080b00e 	bge	r4,r2,800c914 <__subdf3+0x514>
 800c654:	198cb03a 	or	r6,r3,r6
 800c658:	300ec03a 	cmpne	r7,r6,zero
 800c65c:	0005883a 	mov	r2,zero
 800c660:	3c4f883a 	add	r7,r7,r17
 800c664:	3c63803a 	cmpltu	r17,r7,r17
 800c668:	114b883a 	add	r5,r2,r5
 800c66c:	2c4b883a 	add	r5,r5,r17
 800c670:	3823883a 	mov	r17,r7
 800c674:	2880202c 	andhi	r2,r5,128
 800c678:	10002e26 	beq	r2,zero,800c734 <__subdf3+0x334>
 800c67c:	84000044 	addi	r16,r16,1
 800c680:	0081ffc4 	movi	r2,2047
 800c684:	8080de26 	beq	r16,r2,800ca00 <__subdf3+0x600>
 800c688:	00bfe034 	movhi	r2,65408
 800c68c:	10bfffc4 	addi	r2,r2,-1
 800c690:	288a703a 	and	r5,r5,r2
 800c694:	880cd07a 	srli	r6,r17,1
 800c698:	280897fa 	slli	r4,r5,31
 800c69c:	88c0004c 	andi	r3,r17,1
 800c6a0:	30e2b03a 	or	r17,r6,r3
 800c6a4:	280ad07a 	srli	r5,r5,1
 800c6a8:	8922b03a 	or	r17,r17,r4
 800c6ac:	003f7706 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c6b0:	1984b03a 	or	r2,r3,r6
 800c6b4:	103f6e26 	beq	r2,zero,800c470 <__alt_data_end+0xfc00c470>
 800c6b8:	39c03fcc 	andi	r7,r7,255
 800c6bc:	003f6d06 	br	800c474 <__alt_data_end+0xfc00c474>
 800c6c0:	1146b03a 	or	r3,r2,r5
 800c6c4:	18003f26 	beq	r3,zero,800c7c4 <__subdf3+0x3c4>
 800c6c8:	00c00434 	movhi	r3,16
 800c6cc:	29000234 	orhi	r4,r5,8
 800c6d0:	18ffffc4 	addi	r3,r3,-1
 800c6d4:	20c8703a 	and	r4,r4,r3
 800c6d8:	003f8406 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c6dc:	10bfffc4 	addi	r2,r2,-1
 800c6e0:	1000501e 	bne	r2,zero,800c824 <__subdf3+0x424>
 800c6e4:	898fc83a 	sub	r7,r17,r6
 800c6e8:	89e3803a 	cmpltu	r17,r17,r7
 800c6ec:	28cbc83a 	sub	r5,r5,r3
 800c6f0:	2c4bc83a 	sub	r5,r5,r17
 800c6f4:	3823883a 	mov	r17,r7
 800c6f8:	003fa106 	br	800c580 <__alt_data_end+0xfc00c580>
 800c6fc:	1988b03a 	or	r4,r3,r6
 800c700:	203f6226 	beq	r4,zero,800c48c <__alt_data_end+0xfc00c48c>
 800c704:	10bfffc4 	addi	r2,r2,-1
 800c708:	10009b1e 	bne	r2,zero,800c978 <__subdf3+0x578>
 800c70c:	344d883a 	add	r6,r6,r17
 800c710:	3463803a 	cmpltu	r17,r6,r17
 800c714:	194b883a 	add	r5,r3,r5
 800c718:	2c4b883a 	add	r5,r5,r17
 800c71c:	3023883a 	mov	r17,r6
 800c720:	003fd406 	br	800c674 <__alt_data_end+0xfc00c674>
 800c724:	1106b03a 	or	r3,r2,r4
 800c728:	1800b426 	beq	r3,zero,800c9fc <__subdf3+0x5fc>
 800c72c:	100b883a 	mov	r5,r2
 800c730:	2023883a 	mov	r17,r4
 800c734:	888001cc 	andi	r2,r17,7
 800c738:	103f561e 	bne	r2,zero,800c494 <__alt_data_end+0xfc00c494>
 800c73c:	9200004c 	andi	r8,r18,1
 800c740:	003fb206 	br	800c60c <__alt_data_end+0xfc00c60c>
 800c744:	1000531e 	bne	r2,zero,800c894 <__subdf3+0x494>
 800c748:	80800044 	addi	r2,r16,1
 800c74c:	1081ffcc 	andi	r2,r2,2047
 800c750:	01000044 	movi	r4,1
 800c754:	2080a00e 	bge	r4,r2,800c9d8 <__subdf3+0x5d8>
 800c758:	8985c83a 	sub	r2,r17,r6
 800c75c:	8889803a 	cmpltu	r4,r17,r2
 800c760:	28e7c83a 	sub	r19,r5,r3
 800c764:	9927c83a 	sub	r19,r19,r4
 800c768:	9900202c 	andhi	r4,r19,128
 800c76c:	20006226 	beq	r4,zero,800c8f8 <__subdf3+0x4f8>
 800c770:	3463c83a 	sub	r17,r6,r17
 800c774:	194bc83a 	sub	r5,r3,r5
 800c778:	344d803a 	cmpltu	r6,r6,r17
 800c77c:	29a7c83a 	sub	r19,r5,r6
 800c780:	3825883a 	mov	r18,r7
 800c784:	983f841e 	bne	r19,zero,800c598 <__alt_data_end+0xfc00c598>
 800c788:	8809883a 	mov	r4,r17
 800c78c:	800cecc0 	call	800cecc <__clzsi2>
 800c790:	10800804 	addi	r2,r2,32
 800c794:	10fffe04 	addi	r3,r2,-8
 800c798:	010007c4 	movi	r4,31
 800c79c:	20ff830e 	bge	r4,r3,800c5ac <__alt_data_end+0xfc00c5ac>
 800c7a0:	14fff604 	addi	r19,r2,-40
 800c7a4:	8ce6983a 	sll	r19,r17,r19
 800c7a8:	0023883a 	mov	r17,zero
 800c7ac:	1c3f860e 	bge	r3,r16,800c5c8 <__alt_data_end+0xfc00c5c8>
 800c7b0:	017fe034 	movhi	r5,65408
 800c7b4:	297fffc4 	addi	r5,r5,-1
 800c7b8:	80e1c83a 	sub	r16,r16,r3
 800c7bc:	994a703a 	and	r5,r19,r5
 800c7c0:	003f3206 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c7c4:	0009883a 	mov	r4,zero
 800c7c8:	0005883a 	mov	r2,zero
 800c7cc:	003f4706 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c7d0:	198cb03a 	or	r6,r3,r6
 800c7d4:	300cc03a 	cmpne	r6,r6,zero
 800c7d8:	0005883a 	mov	r2,zero
 800c7dc:	003f6306 	br	800c56c <__alt_data_end+0xfc00c56c>
 800c7e0:	10009d1e 	bne	r2,zero,800ca58 <__subdf3+0x658>
 800c7e4:	81c00044 	addi	r7,r16,1
 800c7e8:	3881ffcc 	andi	r2,r7,2047
 800c7ec:	02400044 	movi	r9,1
 800c7f0:	4880680e 	bge	r9,r2,800c994 <__subdf3+0x594>
 800c7f4:	0081ffc4 	movi	r2,2047
 800c7f8:	3880ae26 	beq	r7,r2,800cab4 <__subdf3+0x6b4>
 800c7fc:	344d883a 	add	r6,r6,r17
 800c800:	3463803a 	cmpltu	r17,r6,r17
 800c804:	194b883a 	add	r5,r3,r5
 800c808:	2c4b883a 	add	r5,r5,r17
 800c80c:	282297fa 	slli	r17,r5,31
 800c810:	300cd07a 	srli	r6,r6,1
 800c814:	280ad07a 	srli	r5,r5,1
 800c818:	3821883a 	mov	r16,r7
 800c81c:	89a2b03a 	or	r17,r17,r6
 800c820:	003f1a06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c824:	0101ffc4 	movi	r4,2047
 800c828:	813f431e 	bne	r16,r4,800c538 <__alt_data_end+0xfc00c538>
 800c82c:	003f1706 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c830:	80bff844 	addi	r2,r16,-31
 800c834:	00c00804 	movi	r3,32
 800c838:	9884d83a 	srl	r2,r19,r2
 800c83c:	28c05126 	beq	r5,r3,800c984 <__subdf3+0x584>
 800c840:	00c00fc4 	movi	r3,63
 800c844:	1c21c83a 	sub	r16,r3,r16
 800c848:	9c26983a 	sll	r19,r19,r16
 800c84c:	9c62b03a 	or	r17,r19,r17
 800c850:	8822c03a 	cmpne	r17,r17,zero
 800c854:	88a2b03a 	or	r17,r17,r2
 800c858:	000b883a 	mov	r5,zero
 800c85c:	0021883a 	mov	r16,zero
 800c860:	003fb406 	br	800c734 <__alt_data_end+0xfc00c734>
 800c864:	113ff804 	addi	r4,r2,-32
 800c868:	01c00804 	movi	r7,32
 800c86c:	1908d83a 	srl	r4,r3,r4
 800c870:	11c04626 	beq	r2,r7,800c98c <__subdf3+0x58c>
 800c874:	01c01004 	movi	r7,64
 800c878:	3885c83a 	sub	r2,r7,r2
 800c87c:	1884983a 	sll	r2,r3,r2
 800c880:	118cb03a 	or	r6,r2,r6
 800c884:	300cc03a 	cmpne	r6,r6,zero
 800c888:	310cb03a 	or	r6,r6,r4
 800c88c:	0005883a 	mov	r2,zero
 800c890:	003f3606 	br	800c56c <__alt_data_end+0xfc00c56c>
 800c894:	80002b26 	beq	r16,zero,800c944 <__subdf3+0x544>
 800c898:	0101ffc4 	movi	r4,2047
 800c89c:	51006926 	beq	r10,r4,800ca44 <__subdf3+0x644>
 800c8a0:	0085c83a 	sub	r2,zero,r2
 800c8a4:	29402034 	orhi	r5,r5,128
 800c8a8:	01000e04 	movi	r4,56
 800c8ac:	20807d16 	blt	r4,r2,800caa4 <__subdf3+0x6a4>
 800c8b0:	010007c4 	movi	r4,31
 800c8b4:	2080d916 	blt	r4,r2,800cc1c <__subdf3+0x81c>
 800c8b8:	01000804 	movi	r4,32
 800c8bc:	2089c83a 	sub	r4,r4,r2
 800c8c0:	2912983a 	sll	r9,r5,r4
 800c8c4:	8890d83a 	srl	r8,r17,r2
 800c8c8:	8908983a 	sll	r4,r17,r4
 800c8cc:	2884d83a 	srl	r2,r5,r2
 800c8d0:	4a22b03a 	or	r17,r9,r8
 800c8d4:	2008c03a 	cmpne	r4,r4,zero
 800c8d8:	8922b03a 	or	r17,r17,r4
 800c8dc:	3463c83a 	sub	r17,r6,r17
 800c8e0:	1885c83a 	sub	r2,r3,r2
 800c8e4:	344d803a 	cmpltu	r6,r6,r17
 800c8e8:	118bc83a 	sub	r5,r2,r6
 800c8ec:	5021883a 	mov	r16,r10
 800c8f0:	3825883a 	mov	r18,r7
 800c8f4:	003f2206 	br	800c580 <__alt_data_end+0xfc00c580>
 800c8f8:	9886b03a 	or	r3,r19,r2
 800c8fc:	18001c1e 	bne	r3,zero,800c970 <__subdf3+0x570>
 800c900:	0011883a 	mov	r8,zero
 800c904:	000b883a 	mov	r5,zero
 800c908:	0023883a 	mov	r17,zero
 800c90c:	0021883a 	mov	r16,zero
 800c910:	003f3e06 	br	800c60c <__alt_data_end+0xfc00c60c>
 800c914:	010007c4 	movi	r4,31
 800c918:	20803c16 	blt	r4,r2,800ca0c <__subdf3+0x60c>
 800c91c:	01000804 	movi	r4,32
 800c920:	2089c83a 	sub	r4,r4,r2
 800c924:	1912983a 	sll	r9,r3,r4
 800c928:	308ed83a 	srl	r7,r6,r2
 800c92c:	3108983a 	sll	r4,r6,r4
 800c930:	1884d83a 	srl	r2,r3,r2
 800c934:	49ceb03a 	or	r7,r9,r7
 800c938:	2008c03a 	cmpne	r4,r4,zero
 800c93c:	390eb03a 	or	r7,r7,r4
 800c940:	003f4706 	br	800c660 <__alt_data_end+0xfc00c660>
 800c944:	2c48b03a 	or	r4,r5,r17
 800c948:	20003e26 	beq	r4,zero,800ca44 <__subdf3+0x644>
 800c94c:	0084303a 	nor	r2,zero,r2
 800c950:	10003a1e 	bne	r2,zero,800ca3c <__subdf3+0x63c>
 800c954:	3463c83a 	sub	r17,r6,r17
 800c958:	194bc83a 	sub	r5,r3,r5
 800c95c:	344d803a 	cmpltu	r6,r6,r17
 800c960:	298bc83a 	sub	r5,r5,r6
 800c964:	5021883a 	mov	r16,r10
 800c968:	3825883a 	mov	r18,r7
 800c96c:	003f0406 	br	800c580 <__alt_data_end+0xfc00c580>
 800c970:	1023883a 	mov	r17,r2
 800c974:	003f0706 	br	800c594 <__alt_data_end+0xfc00c594>
 800c978:	0101ffc4 	movi	r4,2047
 800c97c:	813f331e 	bne	r16,r4,800c64c <__alt_data_end+0xfc00c64c>
 800c980:	003ec206 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c984:	0027883a 	mov	r19,zero
 800c988:	003fb006 	br	800c84c <__alt_data_end+0xfc00c84c>
 800c98c:	0005883a 	mov	r2,zero
 800c990:	003fbb06 	br	800c880 <__alt_data_end+0xfc00c880>
 800c994:	2c44b03a 	or	r2,r5,r17
 800c998:	80008b1e 	bne	r16,zero,800cbc8 <__subdf3+0x7c8>
 800c99c:	1000b526 	beq	r2,zero,800cc74 <__subdf3+0x874>
 800c9a0:	1984b03a 	or	r2,r3,r6
 800c9a4:	103eb926 	beq	r2,zero,800c48c <__alt_data_end+0xfc00c48c>
 800c9a8:	3449883a 	add	r4,r6,r17
 800c9ac:	2463803a 	cmpltu	r17,r4,r17
 800c9b0:	194b883a 	add	r5,r3,r5
 800c9b4:	2c4b883a 	add	r5,r5,r17
 800c9b8:	2880202c 	andhi	r2,r5,128
 800c9bc:	2023883a 	mov	r17,r4
 800c9c0:	103f5c26 	beq	r2,zero,800c734 <__alt_data_end+0xfc00c734>
 800c9c4:	00bfe034 	movhi	r2,65408
 800c9c8:	10bfffc4 	addi	r2,r2,-1
 800c9cc:	4821883a 	mov	r16,r9
 800c9d0:	288a703a 	and	r5,r5,r2
 800c9d4:	003ead06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c9d8:	2c44b03a 	or	r2,r5,r17
 800c9dc:	8000291e 	bne	r16,zero,800ca84 <__subdf3+0x684>
 800c9e0:	10004f1e 	bne	r2,zero,800cb20 <__subdf3+0x720>
 800c9e4:	1984b03a 	or	r2,r3,r6
 800c9e8:	10000426 	beq	r2,zero,800c9fc <__subdf3+0x5fc>
 800c9ec:	180b883a 	mov	r5,r3
 800c9f0:	3023883a 	mov	r17,r6
 800c9f4:	3825883a 	mov	r18,r7
 800c9f8:	003ea406 	br	800c48c <__alt_data_end+0xfc00c48c>
 800c9fc:	0011883a 	mov	r8,zero
 800ca00:	000b883a 	mov	r5,zero
 800ca04:	0023883a 	mov	r17,zero
 800ca08:	003f0006 	br	800c60c <__alt_data_end+0xfc00c60c>
 800ca0c:	11fff804 	addi	r7,r2,-32
 800ca10:	19c8d83a 	srl	r4,r3,r7
 800ca14:	01c00804 	movi	r7,32
 800ca18:	11c07e26 	beq	r2,r7,800cc14 <__subdf3+0x814>
 800ca1c:	01c01004 	movi	r7,64
 800ca20:	3885c83a 	sub	r2,r7,r2
 800ca24:	1884983a 	sll	r2,r3,r2
 800ca28:	118cb03a 	or	r6,r2,r6
 800ca2c:	300ec03a 	cmpne	r7,r6,zero
 800ca30:	390eb03a 	or	r7,r7,r4
 800ca34:	0005883a 	mov	r2,zero
 800ca38:	003f0906 	br	800c660 <__alt_data_end+0xfc00c660>
 800ca3c:	0101ffc4 	movi	r4,2047
 800ca40:	513f991e 	bne	r10,r4,800c8a8 <__alt_data_end+0xfc00c8a8>
 800ca44:	180b883a 	mov	r5,r3
 800ca48:	3023883a 	mov	r17,r6
 800ca4c:	5021883a 	mov	r16,r10
 800ca50:	3825883a 	mov	r18,r7
 800ca54:	003e8d06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800ca58:	80001a1e 	bne	r16,zero,800cac4 <__subdf3+0x6c4>
 800ca5c:	2c48b03a 	or	r4,r5,r17
 800ca60:	20005526 	beq	r4,zero,800cbb8 <__subdf3+0x7b8>
 800ca64:	0084303a 	nor	r2,zero,r2
 800ca68:	1000511e 	bne	r2,zero,800cbb0 <__subdf3+0x7b0>
 800ca6c:	89a3883a 	add	r17,r17,r6
 800ca70:	194b883a 	add	r5,r3,r5
 800ca74:	898d803a 	cmpltu	r6,r17,r6
 800ca78:	298b883a 	add	r5,r5,r6
 800ca7c:	5021883a 	mov	r16,r10
 800ca80:	003efc06 	br	800c674 <__alt_data_end+0xfc00c674>
 800ca84:	1000341e 	bne	r2,zero,800cb58 <__subdf3+0x758>
 800ca88:	1984b03a 	or	r2,r3,r6
 800ca8c:	10006f26 	beq	r2,zero,800cc4c <__subdf3+0x84c>
 800ca90:	180b883a 	mov	r5,r3
 800ca94:	3023883a 	mov	r17,r6
 800ca98:	3825883a 	mov	r18,r7
 800ca9c:	0401ffc4 	movi	r16,2047
 800caa0:	003e7a06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800caa4:	2c62b03a 	or	r17,r5,r17
 800caa8:	8822c03a 	cmpne	r17,r17,zero
 800caac:	0005883a 	mov	r2,zero
 800cab0:	003f8a06 	br	800c8dc <__alt_data_end+0xfc00c8dc>
 800cab4:	3821883a 	mov	r16,r7
 800cab8:	000b883a 	mov	r5,zero
 800cabc:	0023883a 	mov	r17,zero
 800cac0:	003ed206 	br	800c60c <__alt_data_end+0xfc00c60c>
 800cac4:	0101ffc4 	movi	r4,2047
 800cac8:	51003b26 	beq	r10,r4,800cbb8 <__subdf3+0x7b8>
 800cacc:	0085c83a 	sub	r2,zero,r2
 800cad0:	29402034 	orhi	r5,r5,128
 800cad4:	01000e04 	movi	r4,56
 800cad8:	20806216 	blt	r4,r2,800cc64 <__subdf3+0x864>
 800cadc:	010007c4 	movi	r4,31
 800cae0:	20806b16 	blt	r4,r2,800cc90 <__subdf3+0x890>
 800cae4:	01000804 	movi	r4,32
 800cae8:	2089c83a 	sub	r4,r4,r2
 800caec:	2912983a 	sll	r9,r5,r4
 800caf0:	888ed83a 	srl	r7,r17,r2
 800caf4:	8908983a 	sll	r4,r17,r4
 800caf8:	2884d83a 	srl	r2,r5,r2
 800cafc:	49e2b03a 	or	r17,r9,r7
 800cb00:	2008c03a 	cmpne	r4,r4,zero
 800cb04:	8922b03a 	or	r17,r17,r4
 800cb08:	89a3883a 	add	r17,r17,r6
 800cb0c:	10c5883a 	add	r2,r2,r3
 800cb10:	898d803a 	cmpltu	r6,r17,r6
 800cb14:	118b883a 	add	r5,r2,r6
 800cb18:	5021883a 	mov	r16,r10
 800cb1c:	003ed506 	br	800c674 <__alt_data_end+0xfc00c674>
 800cb20:	1984b03a 	or	r2,r3,r6
 800cb24:	103e5926 	beq	r2,zero,800c48c <__alt_data_end+0xfc00c48c>
 800cb28:	8989c83a 	sub	r4,r17,r6
 800cb2c:	8911803a 	cmpltu	r8,r17,r4
 800cb30:	28c5c83a 	sub	r2,r5,r3
 800cb34:	1205c83a 	sub	r2,r2,r8
 800cb38:	1200202c 	andhi	r8,r2,128
 800cb3c:	403ef926 	beq	r8,zero,800c724 <__alt_data_end+0xfc00c724>
 800cb40:	3463c83a 	sub	r17,r6,r17
 800cb44:	194bc83a 	sub	r5,r3,r5
 800cb48:	344d803a 	cmpltu	r6,r6,r17
 800cb4c:	298bc83a 	sub	r5,r5,r6
 800cb50:	3825883a 	mov	r18,r7
 800cb54:	003e4d06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800cb58:	1984b03a 	or	r2,r3,r6
 800cb5c:	10002b26 	beq	r2,zero,800cc0c <__subdf3+0x80c>
 800cb60:	2808d0fa 	srli	r4,r5,3
 800cb64:	8822d0fa 	srli	r17,r17,3
 800cb68:	280a977a 	slli	r5,r5,29
 800cb6c:	2080022c 	andhi	r2,r4,8
 800cb70:	2c62b03a 	or	r17,r5,r17
 800cb74:	10000826 	beq	r2,zero,800cb98 <__subdf3+0x798>
 800cb78:	1810d0fa 	srli	r8,r3,3
 800cb7c:	4080022c 	andhi	r2,r8,8
 800cb80:	1000051e 	bne	r2,zero,800cb98 <__subdf3+0x798>
 800cb84:	300cd0fa 	srli	r6,r6,3
 800cb88:	1804977a 	slli	r2,r3,29
 800cb8c:	4009883a 	mov	r4,r8
 800cb90:	3825883a 	mov	r18,r7
 800cb94:	11a2b03a 	or	r17,r2,r6
 800cb98:	880ad77a 	srli	r5,r17,29
 800cb9c:	200890fa 	slli	r4,r4,3
 800cba0:	882290fa 	slli	r17,r17,3
 800cba4:	0401ffc4 	movi	r16,2047
 800cba8:	290ab03a 	or	r5,r5,r4
 800cbac:	003e3706 	br	800c48c <__alt_data_end+0xfc00c48c>
 800cbb0:	0101ffc4 	movi	r4,2047
 800cbb4:	513fc71e 	bne	r10,r4,800cad4 <__alt_data_end+0xfc00cad4>
 800cbb8:	180b883a 	mov	r5,r3
 800cbbc:	3023883a 	mov	r17,r6
 800cbc0:	5021883a 	mov	r16,r10
 800cbc4:	003e3106 	br	800c48c <__alt_data_end+0xfc00c48c>
 800cbc8:	10002d26 	beq	r2,zero,800cc80 <__subdf3+0x880>
 800cbcc:	1984b03a 	or	r2,r3,r6
 800cbd0:	10000e26 	beq	r2,zero,800cc0c <__subdf3+0x80c>
 800cbd4:	2808d0fa 	srli	r4,r5,3
 800cbd8:	8822d0fa 	srli	r17,r17,3
 800cbdc:	280a977a 	slli	r5,r5,29
 800cbe0:	2080022c 	andhi	r2,r4,8
 800cbe4:	2c62b03a 	or	r17,r5,r17
 800cbe8:	103feb26 	beq	r2,zero,800cb98 <__alt_data_end+0xfc00cb98>
 800cbec:	180ed0fa 	srli	r7,r3,3
 800cbf0:	3880022c 	andhi	r2,r7,8
 800cbf4:	103fe81e 	bne	r2,zero,800cb98 <__alt_data_end+0xfc00cb98>
 800cbf8:	300cd0fa 	srli	r6,r6,3
 800cbfc:	1804977a 	slli	r2,r3,29
 800cc00:	3809883a 	mov	r4,r7
 800cc04:	11a2b03a 	or	r17,r2,r6
 800cc08:	003fe306 	br	800cb98 <__alt_data_end+0xfc00cb98>
 800cc0c:	0401ffc4 	movi	r16,2047
 800cc10:	003e1e06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800cc14:	0005883a 	mov	r2,zero
 800cc18:	003f8306 	br	800ca28 <__alt_data_end+0xfc00ca28>
 800cc1c:	113ff804 	addi	r4,r2,-32
 800cc20:	02000804 	movi	r8,32
 800cc24:	2908d83a 	srl	r4,r5,r4
 800cc28:	12002526 	beq	r2,r8,800ccc0 <__subdf3+0x8c0>
 800cc2c:	02001004 	movi	r8,64
 800cc30:	4085c83a 	sub	r2,r8,r2
 800cc34:	288a983a 	sll	r5,r5,r2
 800cc38:	2c62b03a 	or	r17,r5,r17
 800cc3c:	8822c03a 	cmpne	r17,r17,zero
 800cc40:	8922b03a 	or	r17,r17,r4
 800cc44:	0005883a 	mov	r2,zero
 800cc48:	003f2406 	br	800c8dc <__alt_data_end+0xfc00c8dc>
 800cc4c:	01402034 	movhi	r5,128
 800cc50:	0011883a 	mov	r8,zero
 800cc54:	297fffc4 	addi	r5,r5,-1
 800cc58:	047ffe04 	movi	r17,-8
 800cc5c:	0401ffc4 	movi	r16,2047
 800cc60:	003e6a06 	br	800c60c <__alt_data_end+0xfc00c60c>
 800cc64:	2c62b03a 	or	r17,r5,r17
 800cc68:	8822c03a 	cmpne	r17,r17,zero
 800cc6c:	0005883a 	mov	r2,zero
 800cc70:	003fa506 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800cc74:	180b883a 	mov	r5,r3
 800cc78:	3023883a 	mov	r17,r6
 800cc7c:	003e0306 	br	800c48c <__alt_data_end+0xfc00c48c>
 800cc80:	180b883a 	mov	r5,r3
 800cc84:	3023883a 	mov	r17,r6
 800cc88:	0401ffc4 	movi	r16,2047
 800cc8c:	003dff06 	br	800c48c <__alt_data_end+0xfc00c48c>
 800cc90:	113ff804 	addi	r4,r2,-32
 800cc94:	01c00804 	movi	r7,32
 800cc98:	2908d83a 	srl	r4,r5,r4
 800cc9c:	11c00a26 	beq	r2,r7,800ccc8 <__subdf3+0x8c8>
 800cca0:	01c01004 	movi	r7,64
 800cca4:	3885c83a 	sub	r2,r7,r2
 800cca8:	288a983a 	sll	r5,r5,r2
 800ccac:	2c62b03a 	or	r17,r5,r17
 800ccb0:	8822c03a 	cmpne	r17,r17,zero
 800ccb4:	8922b03a 	or	r17,r17,r4
 800ccb8:	0005883a 	mov	r2,zero
 800ccbc:	003f9206 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800ccc0:	000b883a 	mov	r5,zero
 800ccc4:	003fdc06 	br	800cc38 <__alt_data_end+0xfc00cc38>
 800ccc8:	000b883a 	mov	r5,zero
 800cccc:	003ff706 	br	800ccac <__alt_data_end+0xfc00ccac>

0800ccd0 <__fixdfsi>:
 800ccd0:	2806d53a 	srli	r3,r5,20
 800ccd4:	00800434 	movhi	r2,16
 800ccd8:	10bfffc4 	addi	r2,r2,-1
 800ccdc:	18c1ffcc 	andi	r3,r3,2047
 800cce0:	0180ff84 	movi	r6,1022
 800cce4:	2884703a 	and	r2,r5,r2
 800cce8:	280ad7fa 	srli	r5,r5,31
 800ccec:	30c0130e 	bge	r6,r3,800cd3c <__fixdfsi+0x6c>
 800ccf0:	01810744 	movi	r6,1053
 800ccf4:	30c00d16 	blt	r6,r3,800cd2c <__fixdfsi+0x5c>
 800ccf8:	01810cc4 	movi	r6,1075
 800ccfc:	30cdc83a 	sub	r6,r6,r3
 800cd00:	01c007c4 	movi	r7,31
 800cd04:	10800434 	orhi	r2,r2,16
 800cd08:	39800e0e 	bge	r7,r6,800cd44 <__fixdfsi+0x74>
 800cd0c:	010104c4 	movi	r4,1043
 800cd10:	20c7c83a 	sub	r3,r4,r3
 800cd14:	10c6d83a 	srl	r3,r2,r3
 800cd18:	29403fcc 	andi	r5,r5,255
 800cd1c:	0145c83a 	sub	r2,zero,r5
 800cd20:	1884f03a 	xor	r2,r3,r2
 800cd24:	1145883a 	add	r2,r2,r5
 800cd28:	f800283a 	ret
 800cd2c:	00a00034 	movhi	r2,32768
 800cd30:	10bfffc4 	addi	r2,r2,-1
 800cd34:	2885883a 	add	r2,r5,r2
 800cd38:	f800283a 	ret
 800cd3c:	0005883a 	mov	r2,zero
 800cd40:	f800283a 	ret
 800cd44:	18fefb44 	addi	r3,r3,-1043
 800cd48:	2188d83a 	srl	r4,r4,r6
 800cd4c:	10c6983a 	sll	r3,r2,r3
 800cd50:	20c6b03a 	or	r3,r4,r3
 800cd54:	003ff006 	br	800cd18 <__alt_data_end+0xfc00cd18>

0800cd58 <__floatsidf>:
 800cd58:	defffd04 	addi	sp,sp,-12
 800cd5c:	dc400115 	stw	r17,4(sp)
 800cd60:	dfc00215 	stw	ra,8(sp)
 800cd64:	dc000015 	stw	r16,0(sp)
 800cd68:	2023883a 	mov	r17,r4
 800cd6c:	20001426 	beq	r4,zero,800cdc0 <__floatsidf+0x68>
 800cd70:	2020d7fa 	srli	r16,r4,31
 800cd74:	80000126 	beq	r16,zero,800cd7c <__floatsidf+0x24>
 800cd78:	0123c83a 	sub	r17,zero,r4
 800cd7c:	8809883a 	mov	r4,r17
 800cd80:	800cecc0 	call	800cecc <__clzsi2>
 800cd84:	01410784 	movi	r5,1054
 800cd88:	00c00284 	movi	r3,10
 800cd8c:	288bc83a 	sub	r5,r5,r2
 800cd90:	18801c16 	blt	r3,r2,800ce04 <__floatsidf+0xac>
 800cd94:	00c002c4 	movi	r3,11
 800cd98:	1887c83a 	sub	r3,r3,r2
 800cd9c:	88c8d83a 	srl	r4,r17,r3
 800cda0:	00c00434 	movhi	r3,16
 800cda4:	18ffffc4 	addi	r3,r3,-1
 800cda8:	10800544 	addi	r2,r2,21
 800cdac:	20c8703a 	and	r4,r4,r3
 800cdb0:	8884983a 	sll	r2,r17,r2
 800cdb4:	28c1ffcc 	andi	r3,r5,2047
 800cdb8:	800d883a 	mov	r6,r16
 800cdbc:	00000406 	br	800cdd0 <__floatsidf+0x78>
 800cdc0:	000d883a 	mov	r6,zero
 800cdc4:	0007883a 	mov	r3,zero
 800cdc8:	0009883a 	mov	r4,zero
 800cdcc:	0005883a 	mov	r2,zero
 800cdd0:	180a953a 	slli	r5,r3,20
 800cdd4:	31803fcc 	andi	r6,r6,255
 800cdd8:	00c00434 	movhi	r3,16
 800cddc:	300c97fa 	slli	r6,r6,31
 800cde0:	18ffffc4 	addi	r3,r3,-1
 800cde4:	20c6703a 	and	r3,r4,r3
 800cde8:	1946b03a 	or	r3,r3,r5
 800cdec:	1986b03a 	or	r3,r3,r6
 800cdf0:	dfc00217 	ldw	ra,8(sp)
 800cdf4:	dc400117 	ldw	r17,4(sp)
 800cdf8:	dc000017 	ldw	r16,0(sp)
 800cdfc:	dec00304 	addi	sp,sp,12
 800ce00:	f800283a 	ret
 800ce04:	10fffd44 	addi	r3,r2,-11
 800ce08:	88c8983a 	sll	r4,r17,r3
 800ce0c:	00800434 	movhi	r2,16
 800ce10:	10bfffc4 	addi	r2,r2,-1
 800ce14:	2088703a 	and	r4,r4,r2
 800ce18:	28c1ffcc 	andi	r3,r5,2047
 800ce1c:	800d883a 	mov	r6,r16
 800ce20:	0005883a 	mov	r2,zero
 800ce24:	003fea06 	br	800cdd0 <__alt_data_end+0xfc00cdd0>

0800ce28 <__floatunsidf>:
 800ce28:	defffe04 	addi	sp,sp,-8
 800ce2c:	dc000015 	stw	r16,0(sp)
 800ce30:	dfc00115 	stw	ra,4(sp)
 800ce34:	2021883a 	mov	r16,r4
 800ce38:	20001026 	beq	r4,zero,800ce7c <__floatunsidf+0x54>
 800ce3c:	800cecc0 	call	800cecc <__clzsi2>
 800ce40:	01410784 	movi	r5,1054
 800ce44:	100d883a 	mov	r6,r2
 800ce48:	288bc83a 	sub	r5,r5,r2
 800ce4c:	00800284 	movi	r2,10
 800ce50:	11801616 	blt	r2,r6,800ceac <__floatunsidf+0x84>
 800ce54:	008002c4 	movi	r2,11
 800ce58:	1185c83a 	sub	r2,r2,r6
 800ce5c:	8084d83a 	srl	r2,r16,r2
 800ce60:	00c00434 	movhi	r3,16
 800ce64:	31c00544 	addi	r7,r6,21
 800ce68:	18ffffc4 	addi	r3,r3,-1
 800ce6c:	81e0983a 	sll	r16,r16,r7
 800ce70:	10cc703a 	and	r6,r2,r3
 800ce74:	2941ffcc 	andi	r5,r5,2047
 800ce78:	00000206 	br	800ce84 <__floatunsidf+0x5c>
 800ce7c:	000b883a 	mov	r5,zero
 800ce80:	000d883a 	mov	r6,zero
 800ce84:	280a953a 	slli	r5,r5,20
 800ce88:	00c00434 	movhi	r3,16
 800ce8c:	18ffffc4 	addi	r3,r3,-1
 800ce90:	30c6703a 	and	r3,r6,r3
 800ce94:	8005883a 	mov	r2,r16
 800ce98:	1946b03a 	or	r3,r3,r5
 800ce9c:	dfc00117 	ldw	ra,4(sp)
 800cea0:	dc000017 	ldw	r16,0(sp)
 800cea4:	dec00204 	addi	sp,sp,8
 800cea8:	f800283a 	ret
 800ceac:	31bffd44 	addi	r6,r6,-11
 800ceb0:	818c983a 	sll	r6,r16,r6
 800ceb4:	00800434 	movhi	r2,16
 800ceb8:	10bfffc4 	addi	r2,r2,-1
 800cebc:	2941ffcc 	andi	r5,r5,2047
 800cec0:	0021883a 	mov	r16,zero
 800cec4:	308c703a 	and	r6,r6,r2
 800cec8:	003fee06 	br	800ce84 <__alt_data_end+0xfc00ce84>

0800cecc <__clzsi2>:
 800cecc:	00bfffd4 	movui	r2,65535
 800ced0:	11000b36 	bltu	r2,r4,800cf00 <__clzsi2+0x34>
 800ced4:	00803fc4 	movi	r2,255
 800ced8:	1100122e 	bgeu	r2,r4,800cf24 <__clzsi2+0x58>
 800cedc:	00c00204 	movi	r3,8
 800cee0:	01400604 	movi	r5,24
 800cee4:	20c8d83a 	srl	r4,r4,r3
 800cee8:	00820074 	movhi	r2,2049
 800ceec:	10bfb604 	addi	r2,r2,-296
 800cef0:	1109883a 	add	r4,r2,r4
 800cef4:	20800003 	ldbu	r2,0(r4)
 800cef8:	2885c83a 	sub	r2,r5,r2
 800cefc:	f800283a 	ret
 800cf00:	00804034 	movhi	r2,256
 800cf04:	10bfffc4 	addi	r2,r2,-1
 800cf08:	11000336 	bltu	r2,r4,800cf18 <__clzsi2+0x4c>
 800cf0c:	00c00404 	movi	r3,16
 800cf10:	180b883a 	mov	r5,r3
 800cf14:	003ff306 	br	800cee4 <__alt_data_end+0xfc00cee4>
 800cf18:	00c00604 	movi	r3,24
 800cf1c:	01400204 	movi	r5,8
 800cf20:	003ff006 	br	800cee4 <__alt_data_end+0xfc00cee4>
 800cf24:	0007883a 	mov	r3,zero
 800cf28:	01400804 	movi	r5,32
 800cf2c:	003fed06 	br	800cee4 <__alt_data_end+0xfc00cee4>

0800cf30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cf30:	defffe04 	addi	sp,sp,-8
 800cf34:	dfc00115 	stw	ra,4(sp)
 800cf38:	df000015 	stw	fp,0(sp)
 800cf3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cf40:	00820074 	movhi	r2,2049
 800cf44:	1086ca04 	addi	r2,r2,6952
 800cf48:	10800017 	ldw	r2,0(r2)
 800cf4c:	10000526 	beq	r2,zero,800cf64 <alt_get_errno+0x34>
 800cf50:	00820074 	movhi	r2,2049
 800cf54:	1086ca04 	addi	r2,r2,6952
 800cf58:	10800017 	ldw	r2,0(r2)
 800cf5c:	103ee83a 	callr	r2
 800cf60:	00000206 	br	800cf6c <alt_get_errno+0x3c>
 800cf64:	00820074 	movhi	r2,2049
 800cf68:	108d9b04 	addi	r2,r2,13932
}
 800cf6c:	e037883a 	mov	sp,fp
 800cf70:	dfc00117 	ldw	ra,4(sp)
 800cf74:	df000017 	ldw	fp,0(sp)
 800cf78:	dec00204 	addi	sp,sp,8
 800cf7c:	f800283a 	ret

0800cf80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800cf80:	defffb04 	addi	sp,sp,-20
 800cf84:	dfc00415 	stw	ra,16(sp)
 800cf88:	df000315 	stw	fp,12(sp)
 800cf8c:	df000304 	addi	fp,sp,12
 800cf90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800cf94:	e0bfff17 	ldw	r2,-4(fp)
 800cf98:	10000616 	blt	r2,zero,800cfb4 <close+0x34>
 800cf9c:	e0bfff17 	ldw	r2,-4(fp)
 800cfa0:	10c00324 	muli	r3,r2,12
 800cfa4:	00820074 	movhi	r2,2049
 800cfa8:	10823c04 	addi	r2,r2,2288
 800cfac:	1885883a 	add	r2,r3,r2
 800cfb0:	00000106 	br	800cfb8 <close+0x38>
 800cfb4:	0005883a 	mov	r2,zero
 800cfb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800cfbc:	e0bffd17 	ldw	r2,-12(fp)
 800cfc0:	10001926 	beq	r2,zero,800d028 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800cfc4:	e0bffd17 	ldw	r2,-12(fp)
 800cfc8:	10800017 	ldw	r2,0(r2)
 800cfcc:	10800417 	ldw	r2,16(r2)
 800cfd0:	10000626 	beq	r2,zero,800cfec <close+0x6c>
 800cfd4:	e0bffd17 	ldw	r2,-12(fp)
 800cfd8:	10800017 	ldw	r2,0(r2)
 800cfdc:	10800417 	ldw	r2,16(r2)
 800cfe0:	e13ffd17 	ldw	r4,-12(fp)
 800cfe4:	103ee83a 	callr	r2
 800cfe8:	00000106 	br	800cff0 <close+0x70>
 800cfec:	0005883a 	mov	r2,zero
 800cff0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cff4:	e13fff17 	ldw	r4,-4(fp)
 800cff8:	800d67c0 	call	800d67c <alt_release_fd>
    if (rval < 0)
 800cffc:	e0bffe17 	ldw	r2,-8(fp)
 800d000:	1000070e 	bge	r2,zero,800d020 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800d004:	800cf300 	call	800cf30 <alt_get_errno>
 800d008:	1007883a 	mov	r3,r2
 800d00c:	e0bffe17 	ldw	r2,-8(fp)
 800d010:	0085c83a 	sub	r2,zero,r2
 800d014:	18800015 	stw	r2,0(r3)
      return -1;
 800d018:	00bfffc4 	movi	r2,-1
 800d01c:	00000706 	br	800d03c <close+0xbc>
    }
    return 0;
 800d020:	0005883a 	mov	r2,zero
 800d024:	00000506 	br	800d03c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d028:	800cf300 	call	800cf30 <alt_get_errno>
 800d02c:	1007883a 	mov	r3,r2
 800d030:	00801444 	movi	r2,81
 800d034:	18800015 	stw	r2,0(r3)
    return -1;
 800d038:	00bfffc4 	movi	r2,-1
  }
}
 800d03c:	e037883a 	mov	sp,fp
 800d040:	dfc00117 	ldw	ra,4(sp)
 800d044:	df000017 	ldw	fp,0(sp)
 800d048:	dec00204 	addi	sp,sp,8
 800d04c:	f800283a 	ret

0800d050 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d050:	defffc04 	addi	sp,sp,-16
 800d054:	df000315 	stw	fp,12(sp)
 800d058:	df000304 	addi	fp,sp,12
 800d05c:	e13ffd15 	stw	r4,-12(fp)
 800d060:	e17ffe15 	stw	r5,-8(fp)
 800d064:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d068:	e0bfff17 	ldw	r2,-4(fp)
}
 800d06c:	e037883a 	mov	sp,fp
 800d070:	df000017 	ldw	fp,0(sp)
 800d074:	dec00104 	addi	sp,sp,4
 800d078:	f800283a 	ret

0800d07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d07c:	defffe04 	addi	sp,sp,-8
 800d080:	dfc00115 	stw	ra,4(sp)
 800d084:	df000015 	stw	fp,0(sp)
 800d088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d08c:	00820074 	movhi	r2,2049
 800d090:	1086ca04 	addi	r2,r2,6952
 800d094:	10800017 	ldw	r2,0(r2)
 800d098:	10000526 	beq	r2,zero,800d0b0 <alt_get_errno+0x34>
 800d09c:	00820074 	movhi	r2,2049
 800d0a0:	1086ca04 	addi	r2,r2,6952
 800d0a4:	10800017 	ldw	r2,0(r2)
 800d0a8:	103ee83a 	callr	r2
 800d0ac:	00000206 	br	800d0b8 <alt_get_errno+0x3c>
 800d0b0:	00820074 	movhi	r2,2049
 800d0b4:	108d9b04 	addi	r2,r2,13932
}
 800d0b8:	e037883a 	mov	sp,fp
 800d0bc:	dfc00117 	ldw	ra,4(sp)
 800d0c0:	df000017 	ldw	fp,0(sp)
 800d0c4:	dec00204 	addi	sp,sp,8
 800d0c8:	f800283a 	ret

0800d0cc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d0cc:	defffb04 	addi	sp,sp,-20
 800d0d0:	dfc00415 	stw	ra,16(sp)
 800d0d4:	df000315 	stw	fp,12(sp)
 800d0d8:	df000304 	addi	fp,sp,12
 800d0dc:	e13ffe15 	stw	r4,-8(fp)
 800d0e0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d0e4:	e0bffe17 	ldw	r2,-8(fp)
 800d0e8:	10000616 	blt	r2,zero,800d104 <fstat+0x38>
 800d0ec:	e0bffe17 	ldw	r2,-8(fp)
 800d0f0:	10c00324 	muli	r3,r2,12
 800d0f4:	00820074 	movhi	r2,2049
 800d0f8:	10823c04 	addi	r2,r2,2288
 800d0fc:	1885883a 	add	r2,r3,r2
 800d100:	00000106 	br	800d108 <fstat+0x3c>
 800d104:	0005883a 	mov	r2,zero
 800d108:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d10c:	e0bffd17 	ldw	r2,-12(fp)
 800d110:	10001026 	beq	r2,zero,800d154 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d114:	e0bffd17 	ldw	r2,-12(fp)
 800d118:	10800017 	ldw	r2,0(r2)
 800d11c:	10800817 	ldw	r2,32(r2)
 800d120:	10000726 	beq	r2,zero,800d140 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800d124:	e0bffd17 	ldw	r2,-12(fp)
 800d128:	10800017 	ldw	r2,0(r2)
 800d12c:	10800817 	ldw	r2,32(r2)
 800d130:	e13ffd17 	ldw	r4,-12(fp)
 800d134:	e17fff17 	ldw	r5,-4(fp)
 800d138:	103ee83a 	callr	r2
 800d13c:	00000a06 	br	800d168 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d140:	e0bfff17 	ldw	r2,-4(fp)
 800d144:	00c80004 	movi	r3,8192
 800d148:	10c00115 	stw	r3,4(r2)
      return 0;
 800d14c:	0005883a 	mov	r2,zero
 800d150:	00000506 	br	800d168 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d154:	800d07c0 	call	800d07c <alt_get_errno>
 800d158:	1007883a 	mov	r3,r2
 800d15c:	00801444 	movi	r2,81
 800d160:	18800015 	stw	r2,0(r3)
    return -1;
 800d164:	00bfffc4 	movi	r2,-1
  }
}
 800d168:	e037883a 	mov	sp,fp
 800d16c:	dfc00117 	ldw	ra,4(sp)
 800d170:	df000017 	ldw	fp,0(sp)
 800d174:	dec00204 	addi	sp,sp,8
 800d178:	f800283a 	ret

0800d17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d17c:	defffe04 	addi	sp,sp,-8
 800d180:	dfc00115 	stw	ra,4(sp)
 800d184:	df000015 	stw	fp,0(sp)
 800d188:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d18c:	00820074 	movhi	r2,2049
 800d190:	1086ca04 	addi	r2,r2,6952
 800d194:	10800017 	ldw	r2,0(r2)
 800d198:	10000526 	beq	r2,zero,800d1b0 <alt_get_errno+0x34>
 800d19c:	00820074 	movhi	r2,2049
 800d1a0:	1086ca04 	addi	r2,r2,6952
 800d1a4:	10800017 	ldw	r2,0(r2)
 800d1a8:	103ee83a 	callr	r2
 800d1ac:	00000206 	br	800d1b8 <alt_get_errno+0x3c>
 800d1b0:	00820074 	movhi	r2,2049
 800d1b4:	108d9b04 	addi	r2,r2,13932
}
 800d1b8:	e037883a 	mov	sp,fp
 800d1bc:	dfc00117 	ldw	ra,4(sp)
 800d1c0:	df000017 	ldw	fp,0(sp)
 800d1c4:	dec00204 	addi	sp,sp,8
 800d1c8:	f800283a 	ret

0800d1cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d1cc:	deffed04 	addi	sp,sp,-76
 800d1d0:	dfc01215 	stw	ra,72(sp)
 800d1d4:	df001115 	stw	fp,68(sp)
 800d1d8:	df001104 	addi	fp,sp,68
 800d1dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d1e0:	e0bfff17 	ldw	r2,-4(fp)
 800d1e4:	10000616 	blt	r2,zero,800d200 <isatty+0x34>
 800d1e8:	e0bfff17 	ldw	r2,-4(fp)
 800d1ec:	10c00324 	muli	r3,r2,12
 800d1f0:	00820074 	movhi	r2,2049
 800d1f4:	10823c04 	addi	r2,r2,2288
 800d1f8:	1885883a 	add	r2,r3,r2
 800d1fc:	00000106 	br	800d204 <isatty+0x38>
 800d200:	0005883a 	mov	r2,zero
 800d204:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d208:	e0bfef17 	ldw	r2,-68(fp)
 800d20c:	10000e26 	beq	r2,zero,800d248 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d210:	e0bfef17 	ldw	r2,-68(fp)
 800d214:	10800017 	ldw	r2,0(r2)
 800d218:	10800817 	ldw	r2,32(r2)
 800d21c:	1000021e 	bne	r2,zero,800d228 <isatty+0x5c>
    {
      return 1;
 800d220:	00800044 	movi	r2,1
 800d224:	00000d06 	br	800d25c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d228:	e0bff004 	addi	r2,fp,-64
 800d22c:	e13fff17 	ldw	r4,-4(fp)
 800d230:	100b883a 	mov	r5,r2
 800d234:	800d0cc0 	call	800d0cc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d238:	e0bff117 	ldw	r2,-60(fp)
 800d23c:	10880020 	cmpeqi	r2,r2,8192
 800d240:	10803fcc 	andi	r2,r2,255
 800d244:	00000506 	br	800d25c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d248:	800d17c0 	call	800d17c <alt_get_errno>
 800d24c:	1007883a 	mov	r3,r2
 800d250:	00801444 	movi	r2,81
 800d254:	18800015 	stw	r2,0(r3)
    return 0;
 800d258:	0005883a 	mov	r2,zero
  }
}
 800d25c:	e037883a 	mov	sp,fp
 800d260:	dfc00117 	ldw	ra,4(sp)
 800d264:	df000017 	ldw	fp,0(sp)
 800d268:	dec00204 	addi	sp,sp,8
 800d26c:	f800283a 	ret

0800d270 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d270:	defffc04 	addi	sp,sp,-16
 800d274:	df000315 	stw	fp,12(sp)
 800d278:	df000304 	addi	fp,sp,12
 800d27c:	e13ffd15 	stw	r4,-12(fp)
 800d280:	e17ffe15 	stw	r5,-8(fp)
 800d284:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d288:	e0fffe17 	ldw	r3,-8(fp)
 800d28c:	e0bffd17 	ldw	r2,-12(fp)
 800d290:	18800c26 	beq	r3,r2,800d2c4 <alt_load_section+0x54>
  {
    while( to != end )
 800d294:	00000806 	br	800d2b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d298:	e0bffe17 	ldw	r2,-8(fp)
 800d29c:	10c00104 	addi	r3,r2,4
 800d2a0:	e0fffe15 	stw	r3,-8(fp)
 800d2a4:	e0fffd17 	ldw	r3,-12(fp)
 800d2a8:	19000104 	addi	r4,r3,4
 800d2ac:	e13ffd15 	stw	r4,-12(fp)
 800d2b0:	18c00017 	ldw	r3,0(r3)
 800d2b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d2b8:	e0fffe17 	ldw	r3,-8(fp)
 800d2bc:	e0bfff17 	ldw	r2,-4(fp)
 800d2c0:	18bff51e 	bne	r3,r2,800d298 <__alt_data_end+0xfc00d298>
    {
      *to++ = *from++;
    }
  }
}
 800d2c4:	e037883a 	mov	sp,fp
 800d2c8:	df000017 	ldw	fp,0(sp)
 800d2cc:	dec00104 	addi	sp,sp,4
 800d2d0:	f800283a 	ret

0800d2d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d2d4:	defffe04 	addi	sp,sp,-8
 800d2d8:	dfc00115 	stw	ra,4(sp)
 800d2dc:	df000015 	stw	fp,0(sp)
 800d2e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d2e4:	01020074 	movhi	r4,2049
 800d2e8:	2106cf04 	addi	r4,r4,6972
 800d2ec:	01420074 	movhi	r5,2049
 800d2f0:	29400904 	addi	r5,r5,36
 800d2f4:	01820074 	movhi	r6,2049
 800d2f8:	3186cf04 	addi	r6,r6,6972
 800d2fc:	800d2700 	call	800d270 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d300:	01020034 	movhi	r4,2048
 800d304:	21000804 	addi	r4,r4,32
 800d308:	01420034 	movhi	r5,2048
 800d30c:	29400804 	addi	r5,r5,32
 800d310:	01820034 	movhi	r6,2048
 800d314:	31806f04 	addi	r6,r6,444
 800d318:	800d2700 	call	800d270 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d31c:	01020074 	movhi	r4,2049
 800d320:	213ef204 	addi	r4,r4,-1080
 800d324:	01420074 	movhi	r5,2049
 800d328:	297ef204 	addi	r5,r5,-1080
 800d32c:	01820074 	movhi	r6,2049
 800d330:	31800904 	addi	r6,r6,36
 800d334:	800d2700 	call	800d270 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d338:	800eb100 	call	800eb10 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d33c:	800ed680 	call	800ed68 <alt_icache_flush_all>
}
 800d340:	e037883a 	mov	sp,fp
 800d344:	dfc00117 	ldw	ra,4(sp)
 800d348:	df000017 	ldw	fp,0(sp)
 800d34c:	dec00204 	addi	sp,sp,8
 800d350:	f800283a 	ret

0800d354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d354:	defffe04 	addi	sp,sp,-8
 800d358:	dfc00115 	stw	ra,4(sp)
 800d35c:	df000015 	stw	fp,0(sp)
 800d360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d364:	00820074 	movhi	r2,2049
 800d368:	1086ca04 	addi	r2,r2,6952
 800d36c:	10800017 	ldw	r2,0(r2)
 800d370:	10000526 	beq	r2,zero,800d388 <alt_get_errno+0x34>
 800d374:	00820074 	movhi	r2,2049
 800d378:	1086ca04 	addi	r2,r2,6952
 800d37c:	10800017 	ldw	r2,0(r2)
 800d380:	103ee83a 	callr	r2
 800d384:	00000206 	br	800d390 <alt_get_errno+0x3c>
 800d388:	00820074 	movhi	r2,2049
 800d38c:	108d9b04 	addi	r2,r2,13932
}
 800d390:	e037883a 	mov	sp,fp
 800d394:	dfc00117 	ldw	ra,4(sp)
 800d398:	df000017 	ldw	fp,0(sp)
 800d39c:	dec00204 	addi	sp,sp,8
 800d3a0:	f800283a 	ret

0800d3a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d3a4:	defff904 	addi	sp,sp,-28
 800d3a8:	dfc00615 	stw	ra,24(sp)
 800d3ac:	df000515 	stw	fp,20(sp)
 800d3b0:	df000504 	addi	fp,sp,20
 800d3b4:	e13ffd15 	stw	r4,-12(fp)
 800d3b8:	e17ffe15 	stw	r5,-8(fp)
 800d3bc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d3c0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d3c4:	e0bffd17 	ldw	r2,-12(fp)
 800d3c8:	10000616 	blt	r2,zero,800d3e4 <lseek+0x40>
 800d3cc:	e0bffd17 	ldw	r2,-12(fp)
 800d3d0:	10c00324 	muli	r3,r2,12
 800d3d4:	00820074 	movhi	r2,2049
 800d3d8:	10823c04 	addi	r2,r2,2288
 800d3dc:	1885883a 	add	r2,r3,r2
 800d3e0:	00000106 	br	800d3e8 <lseek+0x44>
 800d3e4:	0005883a 	mov	r2,zero
 800d3e8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d3ec:	e0bffc17 	ldw	r2,-16(fp)
 800d3f0:	10001026 	beq	r2,zero,800d434 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d3f4:	e0bffc17 	ldw	r2,-16(fp)
 800d3f8:	10800017 	ldw	r2,0(r2)
 800d3fc:	10800717 	ldw	r2,28(r2)
 800d400:	10000926 	beq	r2,zero,800d428 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d404:	e0bffc17 	ldw	r2,-16(fp)
 800d408:	10800017 	ldw	r2,0(r2)
 800d40c:	10800717 	ldw	r2,28(r2)
 800d410:	e13ffc17 	ldw	r4,-16(fp)
 800d414:	e17ffe17 	ldw	r5,-8(fp)
 800d418:	e1bfff17 	ldw	r6,-4(fp)
 800d41c:	103ee83a 	callr	r2
 800d420:	e0bffb15 	stw	r2,-20(fp)
 800d424:	00000506 	br	800d43c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d428:	00bfde84 	movi	r2,-134
 800d42c:	e0bffb15 	stw	r2,-20(fp)
 800d430:	00000206 	br	800d43c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d434:	00bfebc4 	movi	r2,-81
 800d438:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d43c:	e0bffb17 	ldw	r2,-20(fp)
 800d440:	1000070e 	bge	r2,zero,800d460 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800d444:	800d3540 	call	800d354 <alt_get_errno>
 800d448:	1007883a 	mov	r3,r2
 800d44c:	e0bffb17 	ldw	r2,-20(fp)
 800d450:	0085c83a 	sub	r2,zero,r2
 800d454:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d458:	00bfffc4 	movi	r2,-1
 800d45c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d460:	e0bffb17 	ldw	r2,-20(fp)
}
 800d464:	e037883a 	mov	sp,fp
 800d468:	dfc00117 	ldw	ra,4(sp)
 800d46c:	df000017 	ldw	fp,0(sp)
 800d470:	dec00204 	addi	sp,sp,8
 800d474:	f800283a 	ret

0800d478 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d478:	defffd04 	addi	sp,sp,-12
 800d47c:	dfc00215 	stw	ra,8(sp)
 800d480:	df000115 	stw	fp,4(sp)
 800d484:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d488:	0009883a 	mov	r4,zero
 800d48c:	800d90c0 	call	800d90c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d490:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d494:	800d9400 	call	800d940 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d498:	01020074 	movhi	r4,2049
 800d49c:	213ff904 	addi	r4,r4,-28
 800d4a0:	01420074 	movhi	r5,2049
 800d4a4:	297ff904 	addi	r5,r5,-28
 800d4a8:	01820074 	movhi	r6,2049
 800d4ac:	31bff904 	addi	r6,r6,-28
 800d4b0:	800f1280 	call	800f128 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d4b4:	800ec200 	call	800ec20 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d4b8:	01020074 	movhi	r4,2049
 800d4bc:	213b1f04 	addi	r4,r4,-4996
 800d4c0:	800f8240 	call	800f824 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d4c4:	d126dd17 	ldw	r4,-25740(gp)
 800d4c8:	d0e6de17 	ldw	r3,-25736(gp)
 800d4cc:	d0a6df17 	ldw	r2,-25732(gp)
 800d4d0:	180b883a 	mov	r5,r3
 800d4d4:	100d883a 	mov	r6,r2
 800d4d8:	80001f80 	call	80001f8 <main>
 800d4dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d4e0:	01000044 	movi	r4,1
 800d4e4:	800cf800 	call	800cf80 <close>
  exit (result);
 800d4e8:	e13fff17 	ldw	r4,-4(fp)
 800d4ec:	800f8380 	call	800f838 <exit>

0800d4f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d4f0:	defffe04 	addi	sp,sp,-8
 800d4f4:	df000115 	stw	fp,4(sp)
 800d4f8:	df000104 	addi	fp,sp,4
 800d4fc:	e13fff15 	stw	r4,-4(fp)
}
 800d500:	e037883a 	mov	sp,fp
 800d504:	df000017 	ldw	fp,0(sp)
 800d508:	dec00104 	addi	sp,sp,4
 800d50c:	f800283a 	ret

0800d510 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d510:	defffe04 	addi	sp,sp,-8
 800d514:	df000115 	stw	fp,4(sp)
 800d518:	df000104 	addi	fp,sp,4
 800d51c:	e13fff15 	stw	r4,-4(fp)
}
 800d520:	e037883a 	mov	sp,fp
 800d524:	df000017 	ldw	fp,0(sp)
 800d528:	dec00104 	addi	sp,sp,4
 800d52c:	f800283a 	ret

0800d530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d530:	defffe04 	addi	sp,sp,-8
 800d534:	dfc00115 	stw	ra,4(sp)
 800d538:	df000015 	stw	fp,0(sp)
 800d53c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d540:	00820074 	movhi	r2,2049
 800d544:	1086ca04 	addi	r2,r2,6952
 800d548:	10800017 	ldw	r2,0(r2)
 800d54c:	10000526 	beq	r2,zero,800d564 <alt_get_errno+0x34>
 800d550:	00820074 	movhi	r2,2049
 800d554:	1086ca04 	addi	r2,r2,6952
 800d558:	10800017 	ldw	r2,0(r2)
 800d55c:	103ee83a 	callr	r2
 800d560:	00000206 	br	800d56c <alt_get_errno+0x3c>
 800d564:	00820074 	movhi	r2,2049
 800d568:	108d9b04 	addi	r2,r2,13932
}
 800d56c:	e037883a 	mov	sp,fp
 800d570:	dfc00117 	ldw	ra,4(sp)
 800d574:	df000017 	ldw	fp,0(sp)
 800d578:	dec00204 	addi	sp,sp,8
 800d57c:	f800283a 	ret

0800d580 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d580:	defff904 	addi	sp,sp,-28
 800d584:	dfc00615 	stw	ra,24(sp)
 800d588:	df000515 	stw	fp,20(sp)
 800d58c:	df000504 	addi	fp,sp,20
 800d590:	e13ffd15 	stw	r4,-12(fp)
 800d594:	e17ffe15 	stw	r5,-8(fp)
 800d598:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d59c:	e0bffd17 	ldw	r2,-12(fp)
 800d5a0:	10000616 	blt	r2,zero,800d5bc <read+0x3c>
 800d5a4:	e0bffd17 	ldw	r2,-12(fp)
 800d5a8:	10c00324 	muli	r3,r2,12
 800d5ac:	00820074 	movhi	r2,2049
 800d5b0:	10823c04 	addi	r2,r2,2288
 800d5b4:	1885883a 	add	r2,r3,r2
 800d5b8:	00000106 	br	800d5c0 <read+0x40>
 800d5bc:	0005883a 	mov	r2,zero
 800d5c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d5c4:	e0bffb17 	ldw	r2,-20(fp)
 800d5c8:	10002226 	beq	r2,zero,800d654 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d5cc:	e0bffb17 	ldw	r2,-20(fp)
 800d5d0:	10800217 	ldw	r2,8(r2)
 800d5d4:	108000cc 	andi	r2,r2,3
 800d5d8:	10800060 	cmpeqi	r2,r2,1
 800d5dc:	1000181e 	bne	r2,zero,800d640 <read+0xc0>
        (fd->dev->read))
 800d5e0:	e0bffb17 	ldw	r2,-20(fp)
 800d5e4:	10800017 	ldw	r2,0(r2)
 800d5e8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d5ec:	10001426 	beq	r2,zero,800d640 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d5f0:	e0bffb17 	ldw	r2,-20(fp)
 800d5f4:	10800017 	ldw	r2,0(r2)
 800d5f8:	10800517 	ldw	r2,20(r2)
 800d5fc:	e0ffff17 	ldw	r3,-4(fp)
 800d600:	e13ffb17 	ldw	r4,-20(fp)
 800d604:	e17ffe17 	ldw	r5,-8(fp)
 800d608:	180d883a 	mov	r6,r3
 800d60c:	103ee83a 	callr	r2
 800d610:	e0bffc15 	stw	r2,-16(fp)
 800d614:	e0bffc17 	ldw	r2,-16(fp)
 800d618:	1000070e 	bge	r2,zero,800d638 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800d61c:	800d5300 	call	800d530 <alt_get_errno>
 800d620:	1007883a 	mov	r3,r2
 800d624:	e0bffc17 	ldw	r2,-16(fp)
 800d628:	0085c83a 	sub	r2,zero,r2
 800d62c:	18800015 	stw	r2,0(r3)
          return -1;
 800d630:	00bfffc4 	movi	r2,-1
 800d634:	00000c06 	br	800d668 <read+0xe8>
        }
        return rval;
 800d638:	e0bffc17 	ldw	r2,-16(fp)
 800d63c:	00000a06 	br	800d668 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d640:	800d5300 	call	800d530 <alt_get_errno>
 800d644:	1007883a 	mov	r3,r2
 800d648:	00800344 	movi	r2,13
 800d64c:	18800015 	stw	r2,0(r3)
 800d650:	00000406 	br	800d664 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d654:	800d5300 	call	800d530 <alt_get_errno>
 800d658:	1007883a 	mov	r3,r2
 800d65c:	00801444 	movi	r2,81
 800d660:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d664:	00bfffc4 	movi	r2,-1
}
 800d668:	e037883a 	mov	sp,fp
 800d66c:	dfc00117 	ldw	ra,4(sp)
 800d670:	df000017 	ldw	fp,0(sp)
 800d674:	dec00204 	addi	sp,sp,8
 800d678:	f800283a 	ret

0800d67c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d67c:	defffe04 	addi	sp,sp,-8
 800d680:	df000115 	stw	fp,4(sp)
 800d684:	df000104 	addi	fp,sp,4
 800d688:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d68c:	e0bfff17 	ldw	r2,-4(fp)
 800d690:	108000d0 	cmplti	r2,r2,3
 800d694:	10000d1e 	bne	r2,zero,800d6cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d698:	00820074 	movhi	r2,2049
 800d69c:	10823c04 	addi	r2,r2,2288
 800d6a0:	e0ffff17 	ldw	r3,-4(fp)
 800d6a4:	18c00324 	muli	r3,r3,12
 800d6a8:	10c5883a 	add	r2,r2,r3
 800d6ac:	10800204 	addi	r2,r2,8
 800d6b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d6b4:	00820074 	movhi	r2,2049
 800d6b8:	10823c04 	addi	r2,r2,2288
 800d6bc:	e0ffff17 	ldw	r3,-4(fp)
 800d6c0:	18c00324 	muli	r3,r3,12
 800d6c4:	10c5883a 	add	r2,r2,r3
 800d6c8:	10000015 	stw	zero,0(r2)
  }
}
 800d6cc:	e037883a 	mov	sp,fp
 800d6d0:	df000017 	ldw	fp,0(sp)
 800d6d4:	dec00104 	addi	sp,sp,4
 800d6d8:	f800283a 	ret

0800d6dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d6dc:	defff904 	addi	sp,sp,-28
 800d6e0:	df000615 	stw	fp,24(sp)
 800d6e4:	df000604 	addi	fp,sp,24
 800d6e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d6ec:	0005303a 	rdctl	r2,status
 800d6f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d6f4:	e0fffc17 	ldw	r3,-16(fp)
 800d6f8:	00bfff84 	movi	r2,-2
 800d6fc:	1884703a 	and	r2,r3,r2
 800d700:	1001703a 	wrctl	status,r2
  
  return context;
 800d704:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d708:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d70c:	d0a00c17 	ldw	r2,-32720(gp)
 800d710:	10c000c4 	addi	r3,r2,3
 800d714:	00bfff04 	movi	r2,-4
 800d718:	1884703a 	and	r2,r3,r2
 800d71c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d720:	d0e00c17 	ldw	r3,-32720(gp)
 800d724:	e0bfff17 	ldw	r2,-4(fp)
 800d728:	1887883a 	add	r3,r3,r2
 800d72c:	00830034 	movhi	r2,3072
 800d730:	10800004 	addi	r2,r2,0
 800d734:	10c0062e 	bgeu	r2,r3,800d750 <sbrk+0x74>
 800d738:	e0bffa17 	ldw	r2,-24(fp)
 800d73c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d740:	e0bffd17 	ldw	r2,-12(fp)
 800d744:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d748:	00bfffc4 	movi	r2,-1
 800d74c:	00000b06 	br	800d77c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800d750:	d0a00c17 	ldw	r2,-32720(gp)
 800d754:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800d758:	d0e00c17 	ldw	r3,-32720(gp)
 800d75c:	e0bfff17 	ldw	r2,-4(fp)
 800d760:	1885883a 	add	r2,r3,r2
 800d764:	d0a00c15 	stw	r2,-32720(gp)
 800d768:	e0bffa17 	ldw	r2,-24(fp)
 800d76c:	e0bffe15 	stw	r2,-8(fp)
 800d770:	e0bffe17 	ldw	r2,-8(fp)
 800d774:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d778:	e0bffb17 	ldw	r2,-20(fp)
} 
 800d77c:	e037883a 	mov	sp,fp
 800d780:	df000017 	ldw	fp,0(sp)
 800d784:	dec00104 	addi	sp,sp,4
 800d788:	f800283a 	ret

0800d78c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d78c:	defffe04 	addi	sp,sp,-8
 800d790:	dfc00115 	stw	ra,4(sp)
 800d794:	df000015 	stw	fp,0(sp)
 800d798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d79c:	00820074 	movhi	r2,2049
 800d7a0:	1086ca04 	addi	r2,r2,6952
 800d7a4:	10800017 	ldw	r2,0(r2)
 800d7a8:	10000526 	beq	r2,zero,800d7c0 <alt_get_errno+0x34>
 800d7ac:	00820074 	movhi	r2,2049
 800d7b0:	1086ca04 	addi	r2,r2,6952
 800d7b4:	10800017 	ldw	r2,0(r2)
 800d7b8:	103ee83a 	callr	r2
 800d7bc:	00000206 	br	800d7c8 <alt_get_errno+0x3c>
 800d7c0:	00820074 	movhi	r2,2049
 800d7c4:	108d9b04 	addi	r2,r2,13932
}
 800d7c8:	e037883a 	mov	sp,fp
 800d7cc:	dfc00117 	ldw	ra,4(sp)
 800d7d0:	df000017 	ldw	fp,0(sp)
 800d7d4:	dec00204 	addi	sp,sp,8
 800d7d8:	f800283a 	ret

0800d7dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d7dc:	defff904 	addi	sp,sp,-28
 800d7e0:	dfc00615 	stw	ra,24(sp)
 800d7e4:	df000515 	stw	fp,20(sp)
 800d7e8:	df000504 	addi	fp,sp,20
 800d7ec:	e13ffd15 	stw	r4,-12(fp)
 800d7f0:	e17ffe15 	stw	r5,-8(fp)
 800d7f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d7f8:	e0bffd17 	ldw	r2,-12(fp)
 800d7fc:	10000616 	blt	r2,zero,800d818 <write+0x3c>
 800d800:	e0bffd17 	ldw	r2,-12(fp)
 800d804:	10c00324 	muli	r3,r2,12
 800d808:	00820074 	movhi	r2,2049
 800d80c:	10823c04 	addi	r2,r2,2288
 800d810:	1885883a 	add	r2,r3,r2
 800d814:	00000106 	br	800d81c <write+0x40>
 800d818:	0005883a 	mov	r2,zero
 800d81c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d820:	e0bffb17 	ldw	r2,-20(fp)
 800d824:	10002126 	beq	r2,zero,800d8ac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d828:	e0bffb17 	ldw	r2,-20(fp)
 800d82c:	10800217 	ldw	r2,8(r2)
 800d830:	108000cc 	andi	r2,r2,3
 800d834:	10001826 	beq	r2,zero,800d898 <write+0xbc>
 800d838:	e0bffb17 	ldw	r2,-20(fp)
 800d83c:	10800017 	ldw	r2,0(r2)
 800d840:	10800617 	ldw	r2,24(r2)
 800d844:	10001426 	beq	r2,zero,800d898 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d848:	e0bffb17 	ldw	r2,-20(fp)
 800d84c:	10800017 	ldw	r2,0(r2)
 800d850:	10800617 	ldw	r2,24(r2)
 800d854:	e0ffff17 	ldw	r3,-4(fp)
 800d858:	e13ffb17 	ldw	r4,-20(fp)
 800d85c:	e17ffe17 	ldw	r5,-8(fp)
 800d860:	180d883a 	mov	r6,r3
 800d864:	103ee83a 	callr	r2
 800d868:	e0bffc15 	stw	r2,-16(fp)
 800d86c:	e0bffc17 	ldw	r2,-16(fp)
 800d870:	1000070e 	bge	r2,zero,800d890 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800d874:	800d78c0 	call	800d78c <alt_get_errno>
 800d878:	1007883a 	mov	r3,r2
 800d87c:	e0bffc17 	ldw	r2,-16(fp)
 800d880:	0085c83a 	sub	r2,zero,r2
 800d884:	18800015 	stw	r2,0(r3)
        return -1;
 800d888:	00bfffc4 	movi	r2,-1
 800d88c:	00000c06 	br	800d8c0 <write+0xe4>
      }
      return rval;
 800d890:	e0bffc17 	ldw	r2,-16(fp)
 800d894:	00000a06 	br	800d8c0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d898:	800d78c0 	call	800d78c <alt_get_errno>
 800d89c:	1007883a 	mov	r3,r2
 800d8a0:	00800344 	movi	r2,13
 800d8a4:	18800015 	stw	r2,0(r3)
 800d8a8:	00000406 	br	800d8bc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d8ac:	800d78c0 	call	800d78c <alt_get_errno>
 800d8b0:	1007883a 	mov	r3,r2
 800d8b4:	00801444 	movi	r2,81
 800d8b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d8bc:	00bfffc4 	movi	r2,-1
}
 800d8c0:	e037883a 	mov	sp,fp
 800d8c4:	dfc00117 	ldw	ra,4(sp)
 800d8c8:	df000017 	ldw	fp,0(sp)
 800d8cc:	dec00204 	addi	sp,sp,8
 800d8d0:	f800283a 	ret

0800d8d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800d8d4:	defffd04 	addi	sp,sp,-12
 800d8d8:	dfc00215 	stw	ra,8(sp)
 800d8dc:	df000115 	stw	fp,4(sp)
 800d8e0:	df000104 	addi	fp,sp,4
 800d8e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800d8e8:	e13fff17 	ldw	r4,-4(fp)
 800d8ec:	01420074 	movhi	r5,2049
 800d8f0:	2946c704 	addi	r5,r5,6940
 800d8f4:	800eb7c0 	call	800eb7c <alt_dev_llist_insert>
}
 800d8f8:	e037883a 	mov	sp,fp
 800d8fc:	dfc00117 	ldw	ra,4(sp)
 800d900:	df000017 	ldw	fp,0(sp)
 800d904:	dec00204 	addi	sp,sp,8
 800d908:	f800283a 	ret

0800d90c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d90c:	defffd04 	addi	sp,sp,-12
 800d910:	dfc00215 	stw	ra,8(sp)
 800d914:	df000115 	stw	fp,4(sp)
 800d918:	df000104 	addi	fp,sp,4
 800d91c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800d920:	800f5b00 	call	800f5b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d924:	00800044 	movi	r2,1
 800d928:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d92c:	e037883a 	mov	sp,fp
 800d930:	dfc00117 	ldw	ra,4(sp)
 800d934:	df000017 	ldw	fp,0(sp)
 800d938:	dec00204 	addi	sp,sp,8
 800d93c:	f800283a 	ret

0800d940 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d940:	defffe04 	addi	sp,sp,-8
 800d944:	dfc00115 	stw	ra,4(sp)
 800d948:	df000015 	stw	fp,0(sp)
 800d94c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800d950:	01082004 	movi	r4,8320
 800d954:	000b883a 	mov	r5,zero
 800d958:	01800104 	movi	r6,4
 800d95c:	01c0fa04 	movi	r7,1000
 800d960:	800e4700 	call	800e470 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d964:	01020074 	movhi	r4,2049
 800d968:	2102a604 	addi	r4,r4,2712
 800d96c:	000b883a 	mov	r5,zero
 800d970:	01800144 	movi	r6,5
 800d974:	800db140 	call	800db14 <altera_avalon_jtag_uart_init>
 800d978:	01020074 	movhi	r4,2049
 800d97c:	21029c04 	addi	r4,r4,2672
 800d980:	800d8d40 	call	800d8d4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800d984:	01020074 	movhi	r4,2049
 800d988:	2106b404 	addi	r4,r4,6864
 800d98c:	800e5a80 	call	800e5a8 <alt_up_character_lcd_init>
 800d990:	01020074 	movhi	r4,2049
 800d994:	2106b404 	addi	r4,r4,6864
 800d998:	800d8d40 	call	800d8d4 <alt_dev_reg>
}
 800d99c:	e037883a 	mov	sp,fp
 800d9a0:	dfc00117 	ldw	ra,4(sp)
 800d9a4:	df000017 	ldw	fp,0(sp)
 800d9a8:	dec00204 	addi	sp,sp,8
 800d9ac:	f800283a 	ret

0800d9b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d9b0:	defffa04 	addi	sp,sp,-24
 800d9b4:	dfc00515 	stw	ra,20(sp)
 800d9b8:	df000415 	stw	fp,16(sp)
 800d9bc:	df000404 	addi	fp,sp,16
 800d9c0:	e13ffd15 	stw	r4,-12(fp)
 800d9c4:	e17ffe15 	stw	r5,-8(fp)
 800d9c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d9cc:	e0bffd17 	ldw	r2,-12(fp)
 800d9d0:	10800017 	ldw	r2,0(r2)
 800d9d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800d9d8:	e0bffc17 	ldw	r2,-16(fp)
 800d9dc:	10c00a04 	addi	r3,r2,40
 800d9e0:	e0bffd17 	ldw	r2,-12(fp)
 800d9e4:	10800217 	ldw	r2,8(r2)
 800d9e8:	1809883a 	mov	r4,r3
 800d9ec:	e17ffe17 	ldw	r5,-8(fp)
 800d9f0:	e1bfff17 	ldw	r6,-4(fp)
 800d9f4:	100f883a 	mov	r7,r2
 800d9f8:	800dfd80 	call	800dfd8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800d9fc:	e037883a 	mov	sp,fp
 800da00:	dfc00117 	ldw	ra,4(sp)
 800da04:	df000017 	ldw	fp,0(sp)
 800da08:	dec00204 	addi	sp,sp,8
 800da0c:	f800283a 	ret

0800da10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800da10:	defffa04 	addi	sp,sp,-24
 800da14:	dfc00515 	stw	ra,20(sp)
 800da18:	df000415 	stw	fp,16(sp)
 800da1c:	df000404 	addi	fp,sp,16
 800da20:	e13ffd15 	stw	r4,-12(fp)
 800da24:	e17ffe15 	stw	r5,-8(fp)
 800da28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800da2c:	e0bffd17 	ldw	r2,-12(fp)
 800da30:	10800017 	ldw	r2,0(r2)
 800da34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800da38:	e0bffc17 	ldw	r2,-16(fp)
 800da3c:	10c00a04 	addi	r3,r2,40
 800da40:	e0bffd17 	ldw	r2,-12(fp)
 800da44:	10800217 	ldw	r2,8(r2)
 800da48:	1809883a 	mov	r4,r3
 800da4c:	e17ffe17 	ldw	r5,-8(fp)
 800da50:	e1bfff17 	ldw	r6,-4(fp)
 800da54:	100f883a 	mov	r7,r2
 800da58:	800e1e40 	call	800e1e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800da5c:	e037883a 	mov	sp,fp
 800da60:	dfc00117 	ldw	ra,4(sp)
 800da64:	df000017 	ldw	fp,0(sp)
 800da68:	dec00204 	addi	sp,sp,8
 800da6c:	f800283a 	ret

0800da70 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800da70:	defffc04 	addi	sp,sp,-16
 800da74:	dfc00315 	stw	ra,12(sp)
 800da78:	df000215 	stw	fp,8(sp)
 800da7c:	df000204 	addi	fp,sp,8
 800da80:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800da84:	e0bfff17 	ldw	r2,-4(fp)
 800da88:	10800017 	ldw	r2,0(r2)
 800da8c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800da90:	e0bffe17 	ldw	r2,-8(fp)
 800da94:	10c00a04 	addi	r3,r2,40
 800da98:	e0bfff17 	ldw	r2,-4(fp)
 800da9c:	10800217 	ldw	r2,8(r2)
 800daa0:	1809883a 	mov	r4,r3
 800daa4:	100b883a 	mov	r5,r2
 800daa8:	800de840 	call	800de84 <altera_avalon_jtag_uart_close>
}
 800daac:	e037883a 	mov	sp,fp
 800dab0:	dfc00117 	ldw	ra,4(sp)
 800dab4:	df000017 	ldw	fp,0(sp)
 800dab8:	dec00204 	addi	sp,sp,8
 800dabc:	f800283a 	ret

0800dac0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800dac0:	defffa04 	addi	sp,sp,-24
 800dac4:	dfc00515 	stw	ra,20(sp)
 800dac8:	df000415 	stw	fp,16(sp)
 800dacc:	df000404 	addi	fp,sp,16
 800dad0:	e13ffd15 	stw	r4,-12(fp)
 800dad4:	e17ffe15 	stw	r5,-8(fp)
 800dad8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800dadc:	e0bffd17 	ldw	r2,-12(fp)
 800dae0:	10800017 	ldw	r2,0(r2)
 800dae4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800dae8:	e0bffc17 	ldw	r2,-16(fp)
 800daec:	10800a04 	addi	r2,r2,40
 800daf0:	1009883a 	mov	r4,r2
 800daf4:	e17ffe17 	ldw	r5,-8(fp)
 800daf8:	e1bfff17 	ldw	r6,-4(fp)
 800dafc:	800deec0 	call	800deec <altera_avalon_jtag_uart_ioctl>
}
 800db00:	e037883a 	mov	sp,fp
 800db04:	dfc00117 	ldw	ra,4(sp)
 800db08:	df000017 	ldw	fp,0(sp)
 800db0c:	dec00204 	addi	sp,sp,8
 800db10:	f800283a 	ret

0800db14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800db14:	defffa04 	addi	sp,sp,-24
 800db18:	dfc00515 	stw	ra,20(sp)
 800db1c:	df000415 	stw	fp,16(sp)
 800db20:	df000404 	addi	fp,sp,16
 800db24:	e13ffd15 	stw	r4,-12(fp)
 800db28:	e17ffe15 	stw	r5,-8(fp)
 800db2c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800db30:	e0bffd17 	ldw	r2,-12(fp)
 800db34:	00c00044 	movi	r3,1
 800db38:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800db3c:	e0bffd17 	ldw	r2,-12(fp)
 800db40:	10800017 	ldw	r2,0(r2)
 800db44:	10800104 	addi	r2,r2,4
 800db48:	1007883a 	mov	r3,r2
 800db4c:	e0bffd17 	ldw	r2,-12(fp)
 800db50:	10800817 	ldw	r2,32(r2)
 800db54:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800db58:	e0fffe17 	ldw	r3,-8(fp)
 800db5c:	e0bfff17 	ldw	r2,-4(fp)
 800db60:	d8000015 	stw	zero,0(sp)
 800db64:	1809883a 	mov	r4,r3
 800db68:	100b883a 	mov	r5,r2
 800db6c:	01820074 	movhi	r6,2049
 800db70:	31b6f604 	addi	r6,r6,-9256
 800db74:	e1fffd17 	ldw	r7,-12(fp)
 800db78:	800ed980 	call	800ed98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800db7c:	e0bffd17 	ldw	r2,-12(fp)
 800db80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800db84:	e0bffd17 	ldw	r2,-12(fp)
 800db88:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800db8c:	00820074 	movhi	r2,2049
 800db90:	108da004 	addi	r2,r2,13952
 800db94:	10800017 	ldw	r2,0(r2)
 800db98:	1809883a 	mov	r4,r3
 800db9c:	100b883a 	mov	r5,r2
 800dba0:	01820074 	movhi	r6,2049
 800dba4:	31b77704 	addi	r6,r6,-8740
 800dba8:	e1fffd17 	ldw	r7,-12(fp)
 800dbac:	800e9d00 	call	800e9d0 <alt_alarm_start>
 800dbb0:	1000040e 	bge	r2,zero,800dbc4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800dbb4:	e0fffd17 	ldw	r3,-12(fp)
 800dbb8:	00a00034 	movhi	r2,32768
 800dbbc:	10bfffc4 	addi	r2,r2,-1
 800dbc0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800dbc4:	e037883a 	mov	sp,fp
 800dbc8:	dfc00117 	ldw	ra,4(sp)
 800dbcc:	df000017 	ldw	fp,0(sp)
 800dbd0:	dec00204 	addi	sp,sp,8
 800dbd4:	f800283a 	ret

0800dbd8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800dbd8:	defff804 	addi	sp,sp,-32
 800dbdc:	df000715 	stw	fp,28(sp)
 800dbe0:	df000704 	addi	fp,sp,28
 800dbe4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800dbe8:	e0bfff17 	ldw	r2,-4(fp)
 800dbec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800dbf0:	e0bffb17 	ldw	r2,-20(fp)
 800dbf4:	10800017 	ldw	r2,0(r2)
 800dbf8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800dbfc:	e0bffc17 	ldw	r2,-16(fp)
 800dc00:	10800104 	addi	r2,r2,4
 800dc04:	10800037 	ldwio	r2,0(r2)
 800dc08:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800dc0c:	e0bffd17 	ldw	r2,-12(fp)
 800dc10:	1080c00c 	andi	r2,r2,768
 800dc14:	1000011e 	bne	r2,zero,800dc1c <altera_avalon_jtag_uart_irq+0x44>
      break;
 800dc18:	00006c06 	br	800ddcc <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800dc1c:	e0bffd17 	ldw	r2,-12(fp)
 800dc20:	1080400c 	andi	r2,r2,256
 800dc24:	10003426 	beq	r2,zero,800dcf8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800dc28:	00800074 	movhi	r2,1
 800dc2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dc30:	e0bffb17 	ldw	r2,-20(fp)
 800dc34:	10800a17 	ldw	r2,40(r2)
 800dc38:	10800044 	addi	r2,r2,1
 800dc3c:	1081ffcc 	andi	r2,r2,2047
 800dc40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800dc44:	e0bffb17 	ldw	r2,-20(fp)
 800dc48:	10c00b17 	ldw	r3,44(r2)
 800dc4c:	e0bffe17 	ldw	r2,-8(fp)
 800dc50:	1880011e 	bne	r3,r2,800dc58 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800dc54:	00001606 	br	800dcb0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800dc58:	e0bffc17 	ldw	r2,-16(fp)
 800dc5c:	10800037 	ldwio	r2,0(r2)
 800dc60:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800dc64:	e0bff917 	ldw	r2,-28(fp)
 800dc68:	10a0000c 	andi	r2,r2,32768
 800dc6c:	1000011e 	bne	r2,zero,800dc74 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800dc70:	00000f06 	br	800dcb0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800dc74:	e0bffb17 	ldw	r2,-20(fp)
 800dc78:	10800a17 	ldw	r2,40(r2)
 800dc7c:	e0fff917 	ldw	r3,-28(fp)
 800dc80:	1809883a 	mov	r4,r3
 800dc84:	e0fffb17 	ldw	r3,-20(fp)
 800dc88:	1885883a 	add	r2,r3,r2
 800dc8c:	10800e04 	addi	r2,r2,56
 800dc90:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dc94:	e0bffb17 	ldw	r2,-20(fp)
 800dc98:	10800a17 	ldw	r2,40(r2)
 800dc9c:	10800044 	addi	r2,r2,1
 800dca0:	10c1ffcc 	andi	r3,r2,2047
 800dca4:	e0bffb17 	ldw	r2,-20(fp)
 800dca8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800dcac:	003fe006 	br	800dc30 <__alt_data_end+0xfc00dc30>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800dcb0:	e0bff917 	ldw	r2,-28(fp)
 800dcb4:	10bfffec 	andhi	r2,r2,65535
 800dcb8:	10000f26 	beq	r2,zero,800dcf8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800dcbc:	e0bffb17 	ldw	r2,-20(fp)
 800dcc0:	10c00817 	ldw	r3,32(r2)
 800dcc4:	00bfff84 	movi	r2,-2
 800dcc8:	1886703a 	and	r3,r3,r2
 800dccc:	e0bffb17 	ldw	r2,-20(fp)
 800dcd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800dcd4:	e0bffc17 	ldw	r2,-16(fp)
 800dcd8:	10800104 	addi	r2,r2,4
 800dcdc:	1007883a 	mov	r3,r2
 800dce0:	e0bffb17 	ldw	r2,-20(fp)
 800dce4:	10800817 	ldw	r2,32(r2)
 800dce8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800dcec:	e0bffc17 	ldw	r2,-16(fp)
 800dcf0:	10800104 	addi	r2,r2,4
 800dcf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800dcf8:	e0bffd17 	ldw	r2,-12(fp)
 800dcfc:	1080800c 	andi	r2,r2,512
 800dd00:	10003126 	beq	r2,zero,800ddc8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800dd04:	e0bffd17 	ldw	r2,-12(fp)
 800dd08:	1004d43a 	srli	r2,r2,16
 800dd0c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800dd10:	00001406 	br	800dd64 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800dd14:	e0bffc17 	ldw	r2,-16(fp)
 800dd18:	e0fffb17 	ldw	r3,-20(fp)
 800dd1c:	18c00d17 	ldw	r3,52(r3)
 800dd20:	e13ffb17 	ldw	r4,-20(fp)
 800dd24:	20c7883a 	add	r3,r4,r3
 800dd28:	18c20e04 	addi	r3,r3,2104
 800dd2c:	18c00003 	ldbu	r3,0(r3)
 800dd30:	18c03fcc 	andi	r3,r3,255
 800dd34:	18c0201c 	xori	r3,r3,128
 800dd38:	18ffe004 	addi	r3,r3,-128
 800dd3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dd40:	e0bffb17 	ldw	r2,-20(fp)
 800dd44:	10800d17 	ldw	r2,52(r2)
 800dd48:	10800044 	addi	r2,r2,1
 800dd4c:	10c1ffcc 	andi	r3,r2,2047
 800dd50:	e0bffb17 	ldw	r2,-20(fp)
 800dd54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800dd58:	e0bffa17 	ldw	r2,-24(fp)
 800dd5c:	10bfffc4 	addi	r2,r2,-1
 800dd60:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800dd64:	e0bffa17 	ldw	r2,-24(fp)
 800dd68:	10000526 	beq	r2,zero,800dd80 <altera_avalon_jtag_uart_irq+0x1a8>
 800dd6c:	e0bffb17 	ldw	r2,-20(fp)
 800dd70:	10c00d17 	ldw	r3,52(r2)
 800dd74:	e0bffb17 	ldw	r2,-20(fp)
 800dd78:	10800c17 	ldw	r2,48(r2)
 800dd7c:	18bfe51e 	bne	r3,r2,800dd14 <__alt_data_end+0xfc00dd14>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800dd80:	e0bffa17 	ldw	r2,-24(fp)
 800dd84:	10001026 	beq	r2,zero,800ddc8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800dd88:	e0bffb17 	ldw	r2,-20(fp)
 800dd8c:	10c00817 	ldw	r3,32(r2)
 800dd90:	00bfff44 	movi	r2,-3
 800dd94:	1886703a 	and	r3,r3,r2
 800dd98:	e0bffb17 	ldw	r2,-20(fp)
 800dd9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800dda0:	e0bffb17 	ldw	r2,-20(fp)
 800dda4:	10800017 	ldw	r2,0(r2)
 800dda8:	10800104 	addi	r2,r2,4
 800ddac:	1007883a 	mov	r3,r2
 800ddb0:	e0bffb17 	ldw	r2,-20(fp)
 800ddb4:	10800817 	ldw	r2,32(r2)
 800ddb8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800ddbc:	e0bffc17 	ldw	r2,-16(fp)
 800ddc0:	10800104 	addi	r2,r2,4
 800ddc4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800ddc8:	003f8c06 	br	800dbfc <__alt_data_end+0xfc00dbfc>
}
 800ddcc:	e037883a 	mov	sp,fp
 800ddd0:	df000017 	ldw	fp,0(sp)
 800ddd4:	dec00104 	addi	sp,sp,4
 800ddd8:	f800283a 	ret

0800dddc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800dddc:	defff804 	addi	sp,sp,-32
 800dde0:	df000715 	stw	fp,28(sp)
 800dde4:	df000704 	addi	fp,sp,28
 800dde8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800ddec:	e0bffb17 	ldw	r2,-20(fp)
 800ddf0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800ddf4:	e0bff917 	ldw	r2,-28(fp)
 800ddf8:	10800017 	ldw	r2,0(r2)
 800ddfc:	10800104 	addi	r2,r2,4
 800de00:	10800037 	ldwio	r2,0(r2)
 800de04:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800de08:	e0bffa17 	ldw	r2,-24(fp)
 800de0c:	1081000c 	andi	r2,r2,1024
 800de10:	10000b26 	beq	r2,zero,800de40 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800de14:	e0bff917 	ldw	r2,-28(fp)
 800de18:	10800017 	ldw	r2,0(r2)
 800de1c:	10800104 	addi	r2,r2,4
 800de20:	1007883a 	mov	r3,r2
 800de24:	e0bff917 	ldw	r2,-28(fp)
 800de28:	10800817 	ldw	r2,32(r2)
 800de2c:	10810014 	ori	r2,r2,1024
 800de30:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800de34:	e0bff917 	ldw	r2,-28(fp)
 800de38:	10000915 	stw	zero,36(r2)
 800de3c:	00000a06 	br	800de68 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800de40:	e0bff917 	ldw	r2,-28(fp)
 800de44:	10c00917 	ldw	r3,36(r2)
 800de48:	00a00034 	movhi	r2,32768
 800de4c:	10bfff04 	addi	r2,r2,-4
 800de50:	10c00536 	bltu	r2,r3,800de68 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800de54:	e0bff917 	ldw	r2,-28(fp)
 800de58:	10800917 	ldw	r2,36(r2)
 800de5c:	10c00044 	addi	r3,r2,1
 800de60:	e0bff917 	ldw	r2,-28(fp)
 800de64:	10c00915 	stw	r3,36(r2)
 800de68:	00820074 	movhi	r2,2049
 800de6c:	108da004 	addi	r2,r2,13952
 800de70:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800de74:	e037883a 	mov	sp,fp
 800de78:	df000017 	ldw	fp,0(sp)
 800de7c:	dec00104 	addi	sp,sp,4
 800de80:	f800283a 	ret

0800de84 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800de84:	defffd04 	addi	sp,sp,-12
 800de88:	df000215 	stw	fp,8(sp)
 800de8c:	df000204 	addi	fp,sp,8
 800de90:	e13ffe15 	stw	r4,-8(fp)
 800de94:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800de98:	00000506 	br	800deb0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800de9c:	e0bfff17 	ldw	r2,-4(fp)
 800dea0:	1090000c 	andi	r2,r2,16384
 800dea4:	10000226 	beq	r2,zero,800deb0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800dea8:	00bffd44 	movi	r2,-11
 800deac:	00000b06 	br	800dedc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800deb0:	e0bffe17 	ldw	r2,-8(fp)
 800deb4:	10c00d17 	ldw	r3,52(r2)
 800deb8:	e0bffe17 	ldw	r2,-8(fp)
 800debc:	10800c17 	ldw	r2,48(r2)
 800dec0:	18800526 	beq	r3,r2,800ded8 <altera_avalon_jtag_uart_close+0x54>
 800dec4:	e0bffe17 	ldw	r2,-8(fp)
 800dec8:	10c00917 	ldw	r3,36(r2)
 800decc:	e0bffe17 	ldw	r2,-8(fp)
 800ded0:	10800117 	ldw	r2,4(r2)
 800ded4:	18bff136 	bltu	r3,r2,800de9c <__alt_data_end+0xfc00de9c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800ded8:	0005883a 	mov	r2,zero
}
 800dedc:	e037883a 	mov	sp,fp
 800dee0:	df000017 	ldw	fp,0(sp)
 800dee4:	dec00104 	addi	sp,sp,4
 800dee8:	f800283a 	ret

0800deec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800deec:	defffa04 	addi	sp,sp,-24
 800def0:	df000515 	stw	fp,20(sp)
 800def4:	df000504 	addi	fp,sp,20
 800def8:	e13ffd15 	stw	r4,-12(fp)
 800defc:	e17ffe15 	stw	r5,-8(fp)
 800df00:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800df04:	00bff9c4 	movi	r2,-25
 800df08:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800df0c:	e0bffe17 	ldw	r2,-8(fp)
 800df10:	10da8060 	cmpeqi	r3,r2,27137
 800df14:	1800031e 	bne	r3,zero,800df24 <altera_avalon_jtag_uart_ioctl+0x38>
 800df18:	109a80a0 	cmpeqi	r2,r2,27138
 800df1c:	1000191e 	bne	r2,zero,800df84 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800df20:	00002806 	br	800dfc4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800df24:	e0bffd17 	ldw	r2,-12(fp)
 800df28:	10c00117 	ldw	r3,4(r2)
 800df2c:	00a00034 	movhi	r2,32768
 800df30:	10bfffc4 	addi	r2,r2,-1
 800df34:	18801226 	beq	r3,r2,800df80 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800df38:	e0bfff17 	ldw	r2,-4(fp)
 800df3c:	10800017 	ldw	r2,0(r2)
 800df40:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800df44:	e0bffc17 	ldw	r2,-16(fp)
 800df48:	10800090 	cmplti	r2,r2,2
 800df4c:	1000061e 	bne	r2,zero,800df68 <altera_avalon_jtag_uart_ioctl+0x7c>
 800df50:	e0fffc17 	ldw	r3,-16(fp)
 800df54:	00a00034 	movhi	r2,32768
 800df58:	10bfffc4 	addi	r2,r2,-1
 800df5c:	18800226 	beq	r3,r2,800df68 <altera_avalon_jtag_uart_ioctl+0x7c>
 800df60:	e0bffc17 	ldw	r2,-16(fp)
 800df64:	00000206 	br	800df70 <altera_avalon_jtag_uart_ioctl+0x84>
 800df68:	00a00034 	movhi	r2,32768
 800df6c:	10bfff84 	addi	r2,r2,-2
 800df70:	e0fffd17 	ldw	r3,-12(fp)
 800df74:	18800115 	stw	r2,4(r3)
      rc = 0;
 800df78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800df7c:	00001106 	br	800dfc4 <altera_avalon_jtag_uart_ioctl+0xd8>
 800df80:	00001006 	br	800dfc4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800df84:	e0bffd17 	ldw	r2,-12(fp)
 800df88:	10c00117 	ldw	r3,4(r2)
 800df8c:	00a00034 	movhi	r2,32768
 800df90:	10bfffc4 	addi	r2,r2,-1
 800df94:	18800a26 	beq	r3,r2,800dfc0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800df98:	e0bffd17 	ldw	r2,-12(fp)
 800df9c:	10c00917 	ldw	r3,36(r2)
 800dfa0:	e0bffd17 	ldw	r2,-12(fp)
 800dfa4:	10800117 	ldw	r2,4(r2)
 800dfa8:	1885803a 	cmpltu	r2,r3,r2
 800dfac:	10c03fcc 	andi	r3,r2,255
 800dfb0:	e0bfff17 	ldw	r2,-4(fp)
 800dfb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800dfb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800dfbc:	00000006 	br	800dfc0 <altera_avalon_jtag_uart_ioctl+0xd4>
 800dfc0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800dfc4:	e0bffb17 	ldw	r2,-20(fp)
}
 800dfc8:	e037883a 	mov	sp,fp
 800dfcc:	df000017 	ldw	fp,0(sp)
 800dfd0:	dec00104 	addi	sp,sp,4
 800dfd4:	f800283a 	ret

0800dfd8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800dfd8:	defff304 	addi	sp,sp,-52
 800dfdc:	dfc00c15 	stw	ra,48(sp)
 800dfe0:	df000b15 	stw	fp,44(sp)
 800dfe4:	df000b04 	addi	fp,sp,44
 800dfe8:	e13ffc15 	stw	r4,-16(fp)
 800dfec:	e17ffd15 	stw	r5,-12(fp)
 800dff0:	e1bffe15 	stw	r6,-8(fp)
 800dff4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800dff8:	e0bffd17 	ldw	r2,-12(fp)
 800dffc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e000:	00004906 	br	800e128 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e004:	e0bffc17 	ldw	r2,-16(fp)
 800e008:	10800a17 	ldw	r2,40(r2)
 800e00c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e010:	e0bffc17 	ldw	r2,-16(fp)
 800e014:	10800b17 	ldw	r2,44(r2)
 800e018:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800e01c:	e0fff717 	ldw	r3,-36(fp)
 800e020:	e0bff817 	ldw	r2,-32(fp)
 800e024:	18800536 	bltu	r3,r2,800e03c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e028:	e0fff717 	ldw	r3,-36(fp)
 800e02c:	e0bff817 	ldw	r2,-32(fp)
 800e030:	1885c83a 	sub	r2,r3,r2
 800e034:	e0bff615 	stw	r2,-40(fp)
 800e038:	00000406 	br	800e04c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e03c:	00c20004 	movi	r3,2048
 800e040:	e0bff817 	ldw	r2,-32(fp)
 800e044:	1885c83a 	sub	r2,r3,r2
 800e048:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e04c:	e0bff617 	ldw	r2,-40(fp)
 800e050:	1000011e 	bne	r2,zero,800e058 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800e054:	00001d06 	br	800e0cc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800e058:	e0fffe17 	ldw	r3,-8(fp)
 800e05c:	e0bff617 	ldw	r2,-40(fp)
 800e060:	1880022e 	bgeu	r3,r2,800e06c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800e064:	e0bffe17 	ldw	r2,-8(fp)
 800e068:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e06c:	e0bff817 	ldw	r2,-32(fp)
 800e070:	10800e04 	addi	r2,r2,56
 800e074:	e0fffc17 	ldw	r3,-16(fp)
 800e078:	1885883a 	add	r2,r3,r2
 800e07c:	e13ff517 	ldw	r4,-44(fp)
 800e080:	100b883a 	mov	r5,r2
 800e084:	e1bff617 	ldw	r6,-40(fp)
 800e088:	80061940 	call	8006194 <memcpy>
      ptr   += n;
 800e08c:	e0fff517 	ldw	r3,-44(fp)
 800e090:	e0bff617 	ldw	r2,-40(fp)
 800e094:	1885883a 	add	r2,r3,r2
 800e098:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e09c:	e0fffe17 	ldw	r3,-8(fp)
 800e0a0:	e0bff617 	ldw	r2,-40(fp)
 800e0a4:	1885c83a 	sub	r2,r3,r2
 800e0a8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e0ac:	e0fff817 	ldw	r3,-32(fp)
 800e0b0:	e0bff617 	ldw	r2,-40(fp)
 800e0b4:	1885883a 	add	r2,r3,r2
 800e0b8:	10c1ffcc 	andi	r3,r2,2047
 800e0bc:	e0bffc17 	ldw	r2,-16(fp)
 800e0c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e0c4:	e0bffe17 	ldw	r2,-8(fp)
 800e0c8:	00bfce16 	blt	zero,r2,800e004 <__alt_data_end+0xfc00e004>

    /* If we read any data then return it */
    if (ptr != buffer)
 800e0cc:	e0fff517 	ldw	r3,-44(fp)
 800e0d0:	e0bffd17 	ldw	r2,-12(fp)
 800e0d4:	18800126 	beq	r3,r2,800e0dc <altera_avalon_jtag_uart_read+0x104>
      break;
 800e0d8:	00001506 	br	800e130 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e0dc:	e0bfff17 	ldw	r2,-4(fp)
 800e0e0:	1090000c 	andi	r2,r2,16384
 800e0e4:	10000126 	beq	r2,zero,800e0ec <altera_avalon_jtag_uart_read+0x114>
      break;
 800e0e8:	00001106 	br	800e130 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e0ec:	0001883a 	nop
 800e0f0:	e0bffc17 	ldw	r2,-16(fp)
 800e0f4:	10c00a17 	ldw	r3,40(r2)
 800e0f8:	e0bff717 	ldw	r2,-36(fp)
 800e0fc:	1880051e 	bne	r3,r2,800e114 <altera_avalon_jtag_uart_read+0x13c>
 800e100:	e0bffc17 	ldw	r2,-16(fp)
 800e104:	10c00917 	ldw	r3,36(r2)
 800e108:	e0bffc17 	ldw	r2,-16(fp)
 800e10c:	10800117 	ldw	r2,4(r2)
 800e110:	18bff736 	bltu	r3,r2,800e0f0 <__alt_data_end+0xfc00e0f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e114:	e0bffc17 	ldw	r2,-16(fp)
 800e118:	10c00a17 	ldw	r3,40(r2)
 800e11c:	e0bff717 	ldw	r2,-36(fp)
 800e120:	1880011e 	bne	r3,r2,800e128 <altera_avalon_jtag_uart_read+0x150>
      break;
 800e124:	00000206 	br	800e130 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e128:	e0bffe17 	ldw	r2,-8(fp)
 800e12c:	00bfb516 	blt	zero,r2,800e004 <__alt_data_end+0xfc00e004>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e130:	e0fff517 	ldw	r3,-44(fp)
 800e134:	e0bffd17 	ldw	r2,-12(fp)
 800e138:	18801826 	beq	r3,r2,800e19c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e13c:	0005303a 	rdctl	r2,status
 800e140:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e144:	e0fffa17 	ldw	r3,-24(fp)
 800e148:	00bfff84 	movi	r2,-2
 800e14c:	1884703a 	and	r2,r3,r2
 800e150:	1001703a 	wrctl	status,r2
  
  return context;
 800e154:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e158:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e15c:	e0bffc17 	ldw	r2,-16(fp)
 800e160:	10800817 	ldw	r2,32(r2)
 800e164:	10c00054 	ori	r3,r2,1
 800e168:	e0bffc17 	ldw	r2,-16(fp)
 800e16c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e170:	e0bffc17 	ldw	r2,-16(fp)
 800e174:	10800017 	ldw	r2,0(r2)
 800e178:	10800104 	addi	r2,r2,4
 800e17c:	1007883a 	mov	r3,r2
 800e180:	e0bffc17 	ldw	r2,-16(fp)
 800e184:	10800817 	ldw	r2,32(r2)
 800e188:	18800035 	stwio	r2,0(r3)
 800e18c:	e0bff917 	ldw	r2,-28(fp)
 800e190:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e194:	e0bffb17 	ldw	r2,-20(fp)
 800e198:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e19c:	e0fff517 	ldw	r3,-44(fp)
 800e1a0:	e0bffd17 	ldw	r2,-12(fp)
 800e1a4:	18800426 	beq	r3,r2,800e1b8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800e1a8:	e0fff517 	ldw	r3,-44(fp)
 800e1ac:	e0bffd17 	ldw	r2,-12(fp)
 800e1b0:	1885c83a 	sub	r2,r3,r2
 800e1b4:	00000606 	br	800e1d0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800e1b8:	e0bfff17 	ldw	r2,-4(fp)
 800e1bc:	1090000c 	andi	r2,r2,16384
 800e1c0:	10000226 	beq	r2,zero,800e1cc <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800e1c4:	00bffd44 	movi	r2,-11
 800e1c8:	00000106 	br	800e1d0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800e1cc:	00bffec4 	movi	r2,-5
}
 800e1d0:	e037883a 	mov	sp,fp
 800e1d4:	dfc00117 	ldw	ra,4(sp)
 800e1d8:	df000017 	ldw	fp,0(sp)
 800e1dc:	dec00204 	addi	sp,sp,8
 800e1e0:	f800283a 	ret

0800e1e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e1e4:	defff304 	addi	sp,sp,-52
 800e1e8:	dfc00c15 	stw	ra,48(sp)
 800e1ec:	df000b15 	stw	fp,44(sp)
 800e1f0:	df000b04 	addi	fp,sp,44
 800e1f4:	e13ffc15 	stw	r4,-16(fp)
 800e1f8:	e17ffd15 	stw	r5,-12(fp)
 800e1fc:	e1bffe15 	stw	r6,-8(fp)
 800e200:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e204:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e208:	e0bffd17 	ldw	r2,-12(fp)
 800e20c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e210:	00003806 	br	800e2f4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e214:	e0bffc17 	ldw	r2,-16(fp)
 800e218:	10800c17 	ldw	r2,48(r2)
 800e21c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800e220:	e0bffc17 	ldw	r2,-16(fp)
 800e224:	10800d17 	ldw	r2,52(r2)
 800e228:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800e22c:	e0fff817 	ldw	r3,-32(fp)
 800e230:	e0bff517 	ldw	r2,-44(fp)
 800e234:	1880062e 	bgeu	r3,r2,800e250 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e238:	e0fff517 	ldw	r3,-44(fp)
 800e23c:	e0bff817 	ldw	r2,-32(fp)
 800e240:	1885c83a 	sub	r2,r3,r2
 800e244:	10bfffc4 	addi	r2,r2,-1
 800e248:	e0bff615 	stw	r2,-40(fp)
 800e24c:	00000b06 	br	800e27c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e250:	e0bff517 	ldw	r2,-44(fp)
 800e254:	10000526 	beq	r2,zero,800e26c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e258:	00c20004 	movi	r3,2048
 800e25c:	e0bff817 	ldw	r2,-32(fp)
 800e260:	1885c83a 	sub	r2,r3,r2
 800e264:	e0bff615 	stw	r2,-40(fp)
 800e268:	00000406 	br	800e27c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e26c:	00c1ffc4 	movi	r3,2047
 800e270:	e0bff817 	ldw	r2,-32(fp)
 800e274:	1885c83a 	sub	r2,r3,r2
 800e278:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e27c:	e0bff617 	ldw	r2,-40(fp)
 800e280:	1000011e 	bne	r2,zero,800e288 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800e284:	00001d06 	br	800e2fc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800e288:	e0fffe17 	ldw	r3,-8(fp)
 800e28c:	e0bff617 	ldw	r2,-40(fp)
 800e290:	1880022e 	bgeu	r3,r2,800e29c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800e294:	e0bffe17 	ldw	r2,-8(fp)
 800e298:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e29c:	e0bff817 	ldw	r2,-32(fp)
 800e2a0:	10820e04 	addi	r2,r2,2104
 800e2a4:	e0fffc17 	ldw	r3,-16(fp)
 800e2a8:	1885883a 	add	r2,r3,r2
 800e2ac:	1009883a 	mov	r4,r2
 800e2b0:	e17ffd17 	ldw	r5,-12(fp)
 800e2b4:	e1bff617 	ldw	r6,-40(fp)
 800e2b8:	80061940 	call	8006194 <memcpy>
      ptr   += n;
 800e2bc:	e0fffd17 	ldw	r3,-12(fp)
 800e2c0:	e0bff617 	ldw	r2,-40(fp)
 800e2c4:	1885883a 	add	r2,r3,r2
 800e2c8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800e2cc:	e0fffe17 	ldw	r3,-8(fp)
 800e2d0:	e0bff617 	ldw	r2,-40(fp)
 800e2d4:	1885c83a 	sub	r2,r3,r2
 800e2d8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e2dc:	e0fff817 	ldw	r3,-32(fp)
 800e2e0:	e0bff617 	ldw	r2,-40(fp)
 800e2e4:	1885883a 	add	r2,r3,r2
 800e2e8:	10c1ffcc 	andi	r3,r2,2047
 800e2ec:	e0bffc17 	ldw	r2,-16(fp)
 800e2f0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e2f4:	e0bffe17 	ldw	r2,-8(fp)
 800e2f8:	00bfc616 	blt	zero,r2,800e214 <__alt_data_end+0xfc00e214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e2fc:	0005303a 	rdctl	r2,status
 800e300:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e304:	e0fffa17 	ldw	r3,-24(fp)
 800e308:	00bfff84 	movi	r2,-2
 800e30c:	1884703a 	and	r2,r3,r2
 800e310:	1001703a 	wrctl	status,r2
  
  return context;
 800e314:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e318:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e31c:	e0bffc17 	ldw	r2,-16(fp)
 800e320:	10800817 	ldw	r2,32(r2)
 800e324:	10c00094 	ori	r3,r2,2
 800e328:	e0bffc17 	ldw	r2,-16(fp)
 800e32c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e330:	e0bffc17 	ldw	r2,-16(fp)
 800e334:	10800017 	ldw	r2,0(r2)
 800e338:	10800104 	addi	r2,r2,4
 800e33c:	1007883a 	mov	r3,r2
 800e340:	e0bffc17 	ldw	r2,-16(fp)
 800e344:	10800817 	ldw	r2,32(r2)
 800e348:	18800035 	stwio	r2,0(r3)
 800e34c:	e0bff917 	ldw	r2,-28(fp)
 800e350:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e354:	e0bffb17 	ldw	r2,-20(fp)
 800e358:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e35c:	e0bffe17 	ldw	r2,-8(fp)
 800e360:	0080120e 	bge	zero,r2,800e3ac <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800e364:	e0bfff17 	ldw	r2,-4(fp)
 800e368:	1090000c 	andi	r2,r2,16384
 800e36c:	10000126 	beq	r2,zero,800e374 <altera_avalon_jtag_uart_write+0x190>
        break;
 800e370:	00001006 	br	800e3b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e374:	0001883a 	nop
 800e378:	e0bffc17 	ldw	r2,-16(fp)
 800e37c:	10c00d17 	ldw	r3,52(r2)
 800e380:	e0bff517 	ldw	r2,-44(fp)
 800e384:	1880051e 	bne	r3,r2,800e39c <altera_avalon_jtag_uart_write+0x1b8>
 800e388:	e0bffc17 	ldw	r2,-16(fp)
 800e38c:	10c00917 	ldw	r3,36(r2)
 800e390:	e0bffc17 	ldw	r2,-16(fp)
 800e394:	10800117 	ldw	r2,4(r2)
 800e398:	18bff736 	bltu	r3,r2,800e378 <__alt_data_end+0xfc00e378>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e39c:	e0bffc17 	ldw	r2,-16(fp)
 800e3a0:	10800917 	ldw	r2,36(r2)
 800e3a4:	10000126 	beq	r2,zero,800e3ac <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800e3a8:	00000206 	br	800e3b4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800e3ac:	e0bffe17 	ldw	r2,-8(fp)
 800e3b0:	00bf9716 	blt	zero,r2,800e210 <__alt_data_end+0xfc00e210>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e3b4:	e0fffd17 	ldw	r3,-12(fp)
 800e3b8:	e0bff717 	ldw	r2,-36(fp)
 800e3bc:	18800426 	beq	r3,r2,800e3d0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800e3c0:	e0fffd17 	ldw	r3,-12(fp)
 800e3c4:	e0bff717 	ldw	r2,-36(fp)
 800e3c8:	1885c83a 	sub	r2,r3,r2
 800e3cc:	00000606 	br	800e3e8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800e3d0:	e0bfff17 	ldw	r2,-4(fp)
 800e3d4:	1090000c 	andi	r2,r2,16384
 800e3d8:	10000226 	beq	r2,zero,800e3e4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800e3dc:	00bffd44 	movi	r2,-11
 800e3e0:	00000106 	br	800e3e8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800e3e4:	00bffec4 	movi	r2,-5
}
 800e3e8:	e037883a 	mov	sp,fp
 800e3ec:	dfc00117 	ldw	ra,4(sp)
 800e3f0:	df000017 	ldw	fp,0(sp)
 800e3f4:	dec00204 	addi	sp,sp,8
 800e3f8:	f800283a 	ret

0800e3fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800e3fc:	defffa04 	addi	sp,sp,-24
 800e400:	dfc00515 	stw	ra,20(sp)
 800e404:	df000415 	stw	fp,16(sp)
 800e408:	df000404 	addi	fp,sp,16
 800e40c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800e410:	0007883a 	mov	r3,zero
 800e414:	e0bfff17 	ldw	r2,-4(fp)
 800e418:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800e41c:	e0bfff17 	ldw	r2,-4(fp)
 800e420:	10800104 	addi	r2,r2,4
 800e424:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e428:	0005303a 	rdctl	r2,status
 800e42c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e430:	e0fffd17 	ldw	r3,-12(fp)
 800e434:	00bfff84 	movi	r2,-2
 800e438:	1884703a 	and	r2,r3,r2
 800e43c:	1001703a 	wrctl	status,r2
  
  return context;
 800e440:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800e444:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800e448:	800f4ac0 	call	800f4ac <alt_tick>
 800e44c:	e0bffc17 	ldw	r2,-16(fp)
 800e450:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e454:	e0bffe17 	ldw	r2,-8(fp)
 800e458:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800e45c:	e037883a 	mov	sp,fp
 800e460:	dfc00117 	ldw	ra,4(sp)
 800e464:	df000017 	ldw	fp,0(sp)
 800e468:	dec00204 	addi	sp,sp,8
 800e46c:	f800283a 	ret

0800e470 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800e470:	defff804 	addi	sp,sp,-32
 800e474:	dfc00715 	stw	ra,28(sp)
 800e478:	df000615 	stw	fp,24(sp)
 800e47c:	df000604 	addi	fp,sp,24
 800e480:	e13ffc15 	stw	r4,-16(fp)
 800e484:	e17ffd15 	stw	r5,-12(fp)
 800e488:	e1bffe15 	stw	r6,-8(fp)
 800e48c:	e1ffff15 	stw	r7,-4(fp)
 800e490:	e0bfff17 	ldw	r2,-4(fp)
 800e494:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800e498:	00820074 	movhi	r2,2049
 800e49c:	108da004 	addi	r2,r2,13952
 800e4a0:	10800017 	ldw	r2,0(r2)
 800e4a4:	1000041e 	bne	r2,zero,800e4b8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800e4a8:	00820074 	movhi	r2,2049
 800e4ac:	108da004 	addi	r2,r2,13952
 800e4b0:	e0fffb17 	ldw	r3,-20(fp)
 800e4b4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800e4b8:	e0bffc17 	ldw	r2,-16(fp)
 800e4bc:	10800104 	addi	r2,r2,4
 800e4c0:	00c001c4 	movi	r3,7
 800e4c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800e4c8:	d8000015 	stw	zero,0(sp)
 800e4cc:	e13ffd17 	ldw	r4,-12(fp)
 800e4d0:	e17ffe17 	ldw	r5,-8(fp)
 800e4d4:	01820074 	movhi	r6,2049
 800e4d8:	31b8ff04 	addi	r6,r6,-7172
 800e4dc:	e1fffc17 	ldw	r7,-16(fp)
 800e4e0:	800ed980 	call	800ed98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800e4e4:	e037883a 	mov	sp,fp
 800e4e8:	dfc00117 	ldw	ra,4(sp)
 800e4ec:	df000017 	ldw	fp,0(sp)
 800e4f0:	dec00204 	addi	sp,sp,8
 800e4f4:	f800283a 	ret

0800e4f8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800e4f8:	defffc04 	addi	sp,sp,-16
 800e4fc:	df000315 	stw	fp,12(sp)
 800e500:	df000304 	addi	fp,sp,12
 800e504:	e13ffe15 	stw	r4,-8(fp)
 800e508:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800e50c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800e510:	e0bfff17 	ldw	r2,-4(fp)
 800e514:	1000061e 	bne	r2,zero,800e530 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800e518:	e0bffe17 	ldw	r2,-8(fp)
 800e51c:	1007883a 	mov	r3,r2
 800e520:	e0bffd03 	ldbu	r2,-12(fp)
 800e524:	1884b03a 	or	r2,r3,r2
 800e528:	e0bffd05 	stb	r2,-12(fp)
 800e52c:	00000806 	br	800e550 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800e530:	e0bffe17 	ldw	r2,-8(fp)
 800e534:	1007883a 	mov	r3,r2
 800e538:	e0bffd03 	ldbu	r2,-12(fp)
 800e53c:	1884b03a 	or	r2,r3,r2
 800e540:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800e544:	e0bffd03 	ldbu	r2,-12(fp)
 800e548:	10801014 	ori	r2,r2,64
 800e54c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800e550:	e0fffd03 	ldbu	r3,-12(fp)
 800e554:	00bfe004 	movi	r2,-128
 800e558:	1884b03a 	or	r2,r3,r2
}
 800e55c:	e037883a 	mov	sp,fp
 800e560:	df000017 	ldw	fp,0(sp)
 800e564:	dec00104 	addi	sp,sp,4
 800e568:	f800283a 	ret

0800e56c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800e56c:	defffd04 	addi	sp,sp,-12
 800e570:	df000215 	stw	fp,8(sp)
 800e574:	df000204 	addi	fp,sp,8
 800e578:	e13ffe15 	stw	r4,-8(fp)
 800e57c:	2805883a 	mov	r2,r5
 800e580:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800e584:	e0bffe17 	ldw	r2,-8(fp)
 800e588:	10800a17 	ldw	r2,40(r2)
 800e58c:	1007883a 	mov	r3,r2
 800e590:	e0bfff03 	ldbu	r2,-4(fp)
 800e594:	18800025 	stbio	r2,0(r3)
}
 800e598:	e037883a 	mov	sp,fp
 800e59c:	df000017 	ldw	fp,0(sp)
 800e5a0:	dec00104 	addi	sp,sp,4
 800e5a4:	f800283a 	ret

0800e5a8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800e5a8:	defffe04 	addi	sp,sp,-8
 800e5ac:	df000115 	stw	fp,4(sp)
 800e5b0:	df000104 	addi	fp,sp,4
 800e5b4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800e5b8:	e0bfff17 	ldw	r2,-4(fp)
 800e5bc:	10800a17 	ldw	r2,40(r2)
 800e5c0:	1007883a 	mov	r3,r2
 800e5c4:	00800044 	movi	r2,1
 800e5c8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800e5cc:	e037883a 	mov	sp,fp
 800e5d0:	df000017 	ldw	fp,0(sp)
 800e5d4:	dec00104 	addi	sp,sp,4
 800e5d8:	f800283a 	ret

0800e5dc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800e5dc:	defffc04 	addi	sp,sp,-16
 800e5e0:	dfc00315 	stw	ra,12(sp)
 800e5e4:	df000215 	stw	fp,8(sp)
 800e5e8:	df000204 	addi	fp,sp,8
 800e5ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800e5f0:	e13fff17 	ldw	r4,-4(fp)
 800e5f4:	01420074 	movhi	r5,2049
 800e5f8:	2946c704 	addi	r5,r5,6940
 800e5fc:	800ecd80 	call	800ecd8 <alt_find_dev>
 800e600:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800e604:	e0bffe17 	ldw	r2,-8(fp)
}
 800e608:	e037883a 	mov	sp,fp
 800e60c:	dfc00117 	ldw	ra,4(sp)
 800e610:	df000017 	ldw	fp,0(sp)
 800e614:	dec00204 	addi	sp,sp,8
 800e618:	f800283a 	ret

0800e61c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800e61c:	defffb04 	addi	sp,sp,-20
 800e620:	df000415 	stw	fp,16(sp)
 800e624:	df000404 	addi	fp,sp,16
 800e628:	e13ffd15 	stw	r4,-12(fp)
 800e62c:	e17ffe15 	stw	r5,-8(fp)
 800e630:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800e634:	e03ffc15 	stw	zero,-16(fp)
 800e638:	00000f06 	br	800e678 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800e63c:	e0bffd17 	ldw	r2,-12(fp)
 800e640:	10800a17 	ldw	r2,40(r2)
 800e644:	10800044 	addi	r2,r2,1
 800e648:	1009883a 	mov	r4,r2
 800e64c:	e0fffe17 	ldw	r3,-8(fp)
 800e650:	e0bffc17 	ldw	r2,-16(fp)
 800e654:	1885883a 	add	r2,r3,r2
 800e658:	10800003 	ldbu	r2,0(r2)
 800e65c:	10803fcc 	andi	r2,r2,255
 800e660:	1080201c 	xori	r2,r2,128
 800e664:	10bfe004 	addi	r2,r2,-128
 800e668:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800e66c:	e0bffc17 	ldw	r2,-16(fp)
 800e670:	10800044 	addi	r2,r2,1
 800e674:	e0bffc15 	stw	r2,-16(fp)
 800e678:	e0fffc17 	ldw	r3,-16(fp)
 800e67c:	e0bfff17 	ldw	r2,-4(fp)
 800e680:	18bfee36 	bltu	r3,r2,800e63c <__alt_data_end+0xfc00e63c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800e684:	e037883a 	mov	sp,fp
 800e688:	df000017 	ldw	fp,0(sp)
 800e68c:	dec00104 	addi	sp,sp,4
 800e690:	f800283a 	ret

0800e694 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800e694:	defffd04 	addi	sp,sp,-12
 800e698:	df000215 	stw	fp,8(sp)
 800e69c:	df000204 	addi	fp,sp,8
 800e6a0:	e13ffe15 	stw	r4,-8(fp)
 800e6a4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800e6a8:	00000d06 	br	800e6e0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800e6ac:	e0bffe17 	ldw	r2,-8(fp)
 800e6b0:	10800a17 	ldw	r2,40(r2)
 800e6b4:	10800044 	addi	r2,r2,1
 800e6b8:	1007883a 	mov	r3,r2
 800e6bc:	e0bfff17 	ldw	r2,-4(fp)
 800e6c0:	10800003 	ldbu	r2,0(r2)
 800e6c4:	10803fcc 	andi	r2,r2,255
 800e6c8:	1080201c 	xori	r2,r2,128
 800e6cc:	10bfe004 	addi	r2,r2,-128
 800e6d0:	18800025 	stbio	r2,0(r3)
		++ptr;
 800e6d4:	e0bfff17 	ldw	r2,-4(fp)
 800e6d8:	10800044 	addi	r2,r2,1
 800e6dc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800e6e0:	e0bfff17 	ldw	r2,-4(fp)
 800e6e4:	10800003 	ldbu	r2,0(r2)
 800e6e8:	10803fcc 	andi	r2,r2,255
 800e6ec:	1080201c 	xori	r2,r2,128
 800e6f0:	10bfe004 	addi	r2,r2,-128
 800e6f4:	103fed1e 	bne	r2,zero,800e6ac <__alt_data_end+0xfc00e6ac>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800e6f8:	e037883a 	mov	sp,fp
 800e6fc:	df000017 	ldw	fp,0(sp)
 800e700:	dec00104 	addi	sp,sp,4
 800e704:	f800283a 	ret

0800e708 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800e708:	defffb04 	addi	sp,sp,-20
 800e70c:	dfc00415 	stw	ra,16(sp)
 800e710:	df000315 	stw	fp,12(sp)
 800e714:	df000304 	addi	fp,sp,12
 800e718:	e13ffd15 	stw	r4,-12(fp)
 800e71c:	e17ffe15 	stw	r5,-8(fp)
 800e720:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800e724:	e0bffd17 	ldw	r2,-12(fp)
 800e728:	10c00017 	ldw	r3,0(r2)
 800e72c:	e0bfff17 	ldw	r2,-4(fp)
 800e730:	1809883a 	mov	r4,r3
 800e734:	e17ffe17 	ldw	r5,-8(fp)
 800e738:	100d883a 	mov	r6,r2
 800e73c:	800e61c0 	call	800e61c <alt_up_character_lcd_write>
	return 0;
 800e740:	0005883a 	mov	r2,zero
}
 800e744:	e037883a 	mov	sp,fp
 800e748:	dfc00117 	ldw	ra,4(sp)
 800e74c:	df000017 	ldw	fp,0(sp)
 800e750:	dec00204 	addi	sp,sp,8
 800e754:	f800283a 	ret

0800e758 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800e758:	defffa04 	addi	sp,sp,-24
 800e75c:	dfc00515 	stw	ra,20(sp)
 800e760:	df000415 	stw	fp,16(sp)
 800e764:	df000404 	addi	fp,sp,16
 800e768:	e13ffd15 	stw	r4,-12(fp)
 800e76c:	e17ffe15 	stw	r5,-8(fp)
 800e770:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800e774:	e0bffe17 	ldw	r2,-8(fp)
 800e778:	10800a28 	cmpgeui	r2,r2,40
 800e77c:	1000031e 	bne	r2,zero,800e78c <alt_up_character_lcd_set_cursor_pos+0x34>
 800e780:	e0bfff17 	ldw	r2,-4(fp)
 800e784:	108000b0 	cmpltui	r2,r2,2
 800e788:	1000021e 	bne	r2,zero,800e794 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800e78c:	00bfffc4 	movi	r2,-1
 800e790:	00000906 	br	800e7b8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800e794:	e13ffe17 	ldw	r4,-8(fp)
 800e798:	e17fff17 	ldw	r5,-4(fp)
 800e79c:	800e4f80 	call	800e4f8 <get_DDRAM_addr>
 800e7a0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800e7a4:	e0bffc03 	ldbu	r2,-16(fp)
 800e7a8:	e13ffd17 	ldw	r4,-12(fp)
 800e7ac:	100b883a 	mov	r5,r2
 800e7b0:	800e56c0 	call	800e56c <alt_up_character_lcd_send_cmd>
	return 0;
 800e7b4:	0005883a 	mov	r2,zero
}
 800e7b8:	e037883a 	mov	sp,fp
 800e7bc:	dfc00117 	ldw	ra,4(sp)
 800e7c0:	df000017 	ldw	fp,0(sp)
 800e7c4:	dec00204 	addi	sp,sp,8
 800e7c8:	f800283a 	ret

0800e7cc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800e7cc:	defffb04 	addi	sp,sp,-20
 800e7d0:	dfc00415 	stw	ra,16(sp)
 800e7d4:	df000315 	stw	fp,12(sp)
 800e7d8:	df000304 	addi	fp,sp,12
 800e7dc:	e13ffe15 	stw	r4,-8(fp)
 800e7e0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800e7e4:	e0bfff17 	ldw	r2,-4(fp)
 800e7e8:	1000011e 	bne	r2,zero,800e7f0 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800e7ec:	00001406 	br	800e840 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800e7f0:	e0bfff17 	ldw	r2,-4(fp)
 800e7f4:	0080020e 	bge	zero,r2,800e800 <alt_up_character_lcd_shift_cursor+0x34>
 800e7f8:	00800504 	movi	r2,20
 800e7fc:	00000106 	br	800e804 <alt_up_character_lcd_shift_cursor+0x38>
 800e800:	00800404 	movi	r2,16
 800e804:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800e808:	e0bfff17 	ldw	r2,-4(fp)
 800e80c:	1000010e 	bge	r2,zero,800e814 <alt_up_character_lcd_shift_cursor+0x48>
 800e810:	0085c83a 	sub	r2,zero,r2
 800e814:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e818:	00000406 	br	800e82c <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800e81c:	e0bffd43 	ldbu	r2,-11(fp)
 800e820:	e13ffe17 	ldw	r4,-8(fp)
 800e824:	100b883a 	mov	r5,r2
 800e828:	800e56c0 	call	800e56c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e82c:	e0bffd03 	ldbu	r2,-12(fp)
 800e830:	10ffffc4 	addi	r3,r2,-1
 800e834:	e0fffd05 	stb	r3,-12(fp)
 800e838:	10803fcc 	andi	r2,r2,255
 800e83c:	103ff71e 	bne	r2,zero,800e81c <__alt_data_end+0xfc00e81c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800e840:	e037883a 	mov	sp,fp
 800e844:	dfc00117 	ldw	ra,4(sp)
 800e848:	df000017 	ldw	fp,0(sp)
 800e84c:	dec00204 	addi	sp,sp,8
 800e850:	f800283a 	ret

0800e854 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800e854:	defffb04 	addi	sp,sp,-20
 800e858:	dfc00415 	stw	ra,16(sp)
 800e85c:	df000315 	stw	fp,12(sp)
 800e860:	df000304 	addi	fp,sp,12
 800e864:	e13ffe15 	stw	r4,-8(fp)
 800e868:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800e86c:	e0bfff17 	ldw	r2,-4(fp)
 800e870:	1000011e 	bne	r2,zero,800e878 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800e874:	00001406 	br	800e8c8 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800e878:	e0bfff17 	ldw	r2,-4(fp)
 800e87c:	0080020e 	bge	zero,r2,800e888 <alt_up_character_lcd_shift_display+0x34>
 800e880:	00800704 	movi	r2,28
 800e884:	00000106 	br	800e88c <alt_up_character_lcd_shift_display+0x38>
 800e888:	00800604 	movi	r2,24
 800e88c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800e890:	e0bfff17 	ldw	r2,-4(fp)
 800e894:	1000010e 	bge	r2,zero,800e89c <alt_up_character_lcd_shift_display+0x48>
 800e898:	0085c83a 	sub	r2,zero,r2
 800e89c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e8a0:	00000406 	br	800e8b4 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800e8a4:	e0bffd43 	ldbu	r2,-11(fp)
 800e8a8:	e13ffe17 	ldw	r4,-8(fp)
 800e8ac:	100b883a 	mov	r5,r2
 800e8b0:	800e56c0 	call	800e56c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e8b4:	e0bffd03 	ldbu	r2,-12(fp)
 800e8b8:	10ffffc4 	addi	r3,r2,-1
 800e8bc:	e0fffd05 	stb	r3,-12(fp)
 800e8c0:	10803fcc 	andi	r2,r2,255
 800e8c4:	103ff71e 	bne	r2,zero,800e8a4 <__alt_data_end+0xfc00e8a4>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800e8c8:	e037883a 	mov	sp,fp
 800e8cc:	dfc00117 	ldw	ra,4(sp)
 800e8d0:	df000017 	ldw	fp,0(sp)
 800e8d4:	dec00204 	addi	sp,sp,8
 800e8d8:	f800283a 	ret

0800e8dc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800e8dc:	defffa04 	addi	sp,sp,-24
 800e8e0:	dfc00515 	stw	ra,20(sp)
 800e8e4:	df000415 	stw	fp,16(sp)
 800e8e8:	df000404 	addi	fp,sp,16
 800e8ec:	e13ffd15 	stw	r4,-12(fp)
 800e8f0:	e17ffe15 	stw	r5,-8(fp)
 800e8f4:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800e8f8:	e0bffe17 	ldw	r2,-8(fp)
 800e8fc:	10800a28 	cmpgeui	r2,r2,40
 800e900:	1000031e 	bne	r2,zero,800e910 <alt_up_character_lcd_erase_pos+0x34>
 800e904:	e0bfff17 	ldw	r2,-4(fp)
 800e908:	108000b0 	cmpltui	r2,r2,2
 800e90c:	1000021e 	bne	r2,zero,800e918 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800e910:	00bfffc4 	movi	r2,-1
 800e914:	00000f06 	br	800e954 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800e918:	e13ffe17 	ldw	r4,-8(fp)
 800e91c:	e17fff17 	ldw	r5,-4(fp)
 800e920:	800e4f80 	call	800e4f8 <get_DDRAM_addr>
 800e924:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800e928:	e0bffc03 	ldbu	r2,-16(fp)
 800e92c:	e13ffd17 	ldw	r4,-12(fp)
 800e930:	100b883a 	mov	r5,r2
 800e934:	800e56c0 	call	800e56c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800e938:	e0bffd17 	ldw	r2,-12(fp)
 800e93c:	10800a17 	ldw	r2,40(r2)
 800e940:	10800044 	addi	r2,r2,1
 800e944:	1007883a 	mov	r3,r2
 800e948:	00800084 	movi	r2,2
 800e94c:	18800025 	stbio	r2,0(r3)
	return 0;
 800e950:	0005883a 	mov	r2,zero
}
 800e954:	e037883a 	mov	sp,fp
 800e958:	dfc00117 	ldw	ra,4(sp)
 800e95c:	df000017 	ldw	fp,0(sp)
 800e960:	dec00204 	addi	sp,sp,8
 800e964:	f800283a 	ret

0800e968 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800e968:	defffd04 	addi	sp,sp,-12
 800e96c:	dfc00215 	stw	ra,8(sp)
 800e970:	df000115 	stw	fp,4(sp)
 800e974:	df000104 	addi	fp,sp,4
 800e978:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800e97c:	e13fff17 	ldw	r4,-4(fp)
 800e980:	01400304 	movi	r5,12
 800e984:	800e56c0 	call	800e56c <alt_up_character_lcd_send_cmd>
}
 800e988:	e037883a 	mov	sp,fp
 800e98c:	dfc00117 	ldw	ra,4(sp)
 800e990:	df000017 	ldw	fp,0(sp)
 800e994:	dec00204 	addi	sp,sp,8
 800e998:	f800283a 	ret

0800e99c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800e99c:	defffd04 	addi	sp,sp,-12
 800e9a0:	dfc00215 	stw	ra,8(sp)
 800e9a4:	df000115 	stw	fp,4(sp)
 800e9a8:	df000104 	addi	fp,sp,4
 800e9ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800e9b0:	e13fff17 	ldw	r4,-4(fp)
 800e9b4:	014003c4 	movi	r5,15
 800e9b8:	800e56c0 	call	800e56c <alt_up_character_lcd_send_cmd>
}
 800e9bc:	e037883a 	mov	sp,fp
 800e9c0:	dfc00117 	ldw	ra,4(sp)
 800e9c4:	df000017 	ldw	fp,0(sp)
 800e9c8:	dec00204 	addi	sp,sp,8
 800e9cc:	f800283a 	ret

0800e9d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e9d0:	defff504 	addi	sp,sp,-44
 800e9d4:	df000a15 	stw	fp,40(sp)
 800e9d8:	df000a04 	addi	fp,sp,40
 800e9dc:	e13ffc15 	stw	r4,-16(fp)
 800e9e0:	e17ffd15 	stw	r5,-12(fp)
 800e9e4:	e1bffe15 	stw	r6,-8(fp)
 800e9e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e9ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e9f0:	00820074 	movhi	r2,2049
 800e9f4:	108da004 	addi	r2,r2,13952
 800e9f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800e9fc:	10003f26 	beq	r2,zero,800eafc <alt_alarm_start+0x12c>
  {
    if (alarm)
 800ea00:	e0bffc17 	ldw	r2,-16(fp)
 800ea04:	10003b26 	beq	r2,zero,800eaf4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800ea08:	e0bffc17 	ldw	r2,-16(fp)
 800ea0c:	e0fffe17 	ldw	r3,-8(fp)
 800ea10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ea14:	e0bffc17 	ldw	r2,-16(fp)
 800ea18:	e0ffff17 	ldw	r3,-4(fp)
 800ea1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea20:	0005303a 	rdctl	r2,status
 800ea24:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea28:	e0fff817 	ldw	r3,-32(fp)
 800ea2c:	00bfff84 	movi	r2,-2
 800ea30:	1884703a 	and	r2,r3,r2
 800ea34:	1001703a 	wrctl	status,r2
  
  return context;
 800ea38:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800ea3c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ea40:	00820074 	movhi	r2,2049
 800ea44:	108da104 	addi	r2,r2,13956
 800ea48:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800ea4c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800ea50:	e0fffd17 	ldw	r3,-12(fp)
 800ea54:	e0bff617 	ldw	r2,-40(fp)
 800ea58:	1885883a 	add	r2,r3,r2
 800ea5c:	10c00044 	addi	r3,r2,1
 800ea60:	e0bffc17 	ldw	r2,-16(fp)
 800ea64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800ea68:	e0bffc17 	ldw	r2,-16(fp)
 800ea6c:	10c00217 	ldw	r3,8(r2)
 800ea70:	e0bff617 	ldw	r2,-40(fp)
 800ea74:	1880042e 	bgeu	r3,r2,800ea88 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800ea78:	e0bffc17 	ldw	r2,-16(fp)
 800ea7c:	00c00044 	movi	r3,1
 800ea80:	10c00405 	stb	r3,16(r2)
 800ea84:	00000206 	br	800ea90 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800ea88:	e0bffc17 	ldw	r2,-16(fp)
 800ea8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800ea90:	e0fffc17 	ldw	r3,-16(fp)
 800ea94:	00820074 	movhi	r2,2049
 800ea98:	1086cd04 	addi	r2,r2,6964
 800ea9c:	e0bff915 	stw	r2,-28(fp)
 800eaa0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800eaa4:	e0bffa17 	ldw	r2,-24(fp)
 800eaa8:	e0fff917 	ldw	r3,-28(fp)
 800eaac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800eab0:	e0bff917 	ldw	r2,-28(fp)
 800eab4:	10c00017 	ldw	r3,0(r2)
 800eab8:	e0bffa17 	ldw	r2,-24(fp)
 800eabc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800eac0:	e0bff917 	ldw	r2,-28(fp)
 800eac4:	10800017 	ldw	r2,0(r2)
 800eac8:	e0fffa17 	ldw	r3,-24(fp)
 800eacc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ead0:	e0bff917 	ldw	r2,-28(fp)
 800ead4:	e0fffa17 	ldw	r3,-24(fp)
 800ead8:	10c00015 	stw	r3,0(r2)
 800eadc:	e0bff717 	ldw	r2,-36(fp)
 800eae0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eae4:	e0bffb17 	ldw	r2,-20(fp)
 800eae8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800eaec:	0005883a 	mov	r2,zero
 800eaf0:	00000306 	br	800eb00 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800eaf4:	00bffa84 	movi	r2,-22
 800eaf8:	00000106 	br	800eb00 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800eafc:	00bfde84 	movi	r2,-134
  }
}
 800eb00:	e037883a 	mov	sp,fp
 800eb04:	df000017 	ldw	fp,0(sp)
 800eb08:	dec00104 	addi	sp,sp,4
 800eb0c:	f800283a 	ret

0800eb10 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800eb10:	deffff04 	addi	sp,sp,-4
 800eb14:	df000015 	stw	fp,0(sp)
 800eb18:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800eb1c:	e037883a 	mov	sp,fp
 800eb20:	df000017 	ldw	fp,0(sp)
 800eb24:	dec00104 	addi	sp,sp,4
 800eb28:	f800283a 	ret

0800eb2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb2c:	defffe04 	addi	sp,sp,-8
 800eb30:	dfc00115 	stw	ra,4(sp)
 800eb34:	df000015 	stw	fp,0(sp)
 800eb38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb3c:	00820074 	movhi	r2,2049
 800eb40:	1086ca04 	addi	r2,r2,6952
 800eb44:	10800017 	ldw	r2,0(r2)
 800eb48:	10000526 	beq	r2,zero,800eb60 <alt_get_errno+0x34>
 800eb4c:	00820074 	movhi	r2,2049
 800eb50:	1086ca04 	addi	r2,r2,6952
 800eb54:	10800017 	ldw	r2,0(r2)
 800eb58:	103ee83a 	callr	r2
 800eb5c:	00000206 	br	800eb68 <alt_get_errno+0x3c>
 800eb60:	00820074 	movhi	r2,2049
 800eb64:	108d9b04 	addi	r2,r2,13932
}
 800eb68:	e037883a 	mov	sp,fp
 800eb6c:	dfc00117 	ldw	ra,4(sp)
 800eb70:	df000017 	ldw	fp,0(sp)
 800eb74:	dec00204 	addi	sp,sp,8
 800eb78:	f800283a 	ret

0800eb7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800eb7c:	defffa04 	addi	sp,sp,-24
 800eb80:	dfc00515 	stw	ra,20(sp)
 800eb84:	df000415 	stw	fp,16(sp)
 800eb88:	df000404 	addi	fp,sp,16
 800eb8c:	e13ffe15 	stw	r4,-8(fp)
 800eb90:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800eb94:	e0bffe17 	ldw	r2,-8(fp)
 800eb98:	10000326 	beq	r2,zero,800eba8 <alt_dev_llist_insert+0x2c>
 800eb9c:	e0bffe17 	ldw	r2,-8(fp)
 800eba0:	10800217 	ldw	r2,8(r2)
 800eba4:	1000061e 	bne	r2,zero,800ebc0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800eba8:	800eb2c0 	call	800eb2c <alt_get_errno>
 800ebac:	1007883a 	mov	r3,r2
 800ebb0:	00800584 	movi	r2,22
 800ebb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800ebb8:	00bffa84 	movi	r2,-22
 800ebbc:	00001306 	br	800ec0c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800ebc0:	e0bffe17 	ldw	r2,-8(fp)
 800ebc4:	e0ffff17 	ldw	r3,-4(fp)
 800ebc8:	e0fffc15 	stw	r3,-16(fp)
 800ebcc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800ebd0:	e0bffd17 	ldw	r2,-12(fp)
 800ebd4:	e0fffc17 	ldw	r3,-16(fp)
 800ebd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ebdc:	e0bffc17 	ldw	r2,-16(fp)
 800ebe0:	10c00017 	ldw	r3,0(r2)
 800ebe4:	e0bffd17 	ldw	r2,-12(fp)
 800ebe8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800ebec:	e0bffc17 	ldw	r2,-16(fp)
 800ebf0:	10800017 	ldw	r2,0(r2)
 800ebf4:	e0fffd17 	ldw	r3,-12(fp)
 800ebf8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ebfc:	e0bffc17 	ldw	r2,-16(fp)
 800ec00:	e0fffd17 	ldw	r3,-12(fp)
 800ec04:	10c00015 	stw	r3,0(r2)

  return 0;  
 800ec08:	0005883a 	mov	r2,zero
}
 800ec0c:	e037883a 	mov	sp,fp
 800ec10:	dfc00117 	ldw	ra,4(sp)
 800ec14:	df000017 	ldw	fp,0(sp)
 800ec18:	dec00204 	addi	sp,sp,8
 800ec1c:	f800283a 	ret

0800ec20 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800ec20:	defffd04 	addi	sp,sp,-12
 800ec24:	dfc00215 	stw	ra,8(sp)
 800ec28:	df000115 	stw	fp,4(sp)
 800ec2c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800ec30:	00820074 	movhi	r2,2049
 800ec34:	10bef104 	addi	r2,r2,-1084
 800ec38:	e0bfff15 	stw	r2,-4(fp)
 800ec3c:	00000606 	br	800ec58 <_do_ctors+0x38>
        (*ctor) (); 
 800ec40:	e0bfff17 	ldw	r2,-4(fp)
 800ec44:	10800017 	ldw	r2,0(r2)
 800ec48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800ec4c:	e0bfff17 	ldw	r2,-4(fp)
 800ec50:	10bfff04 	addi	r2,r2,-4
 800ec54:	e0bfff15 	stw	r2,-4(fp)
 800ec58:	e0ffff17 	ldw	r3,-4(fp)
 800ec5c:	00820074 	movhi	r2,2049
 800ec60:	10bef204 	addi	r2,r2,-1080
 800ec64:	18bff62e 	bgeu	r3,r2,800ec40 <__alt_data_end+0xfc00ec40>
        (*ctor) (); 
}
 800ec68:	e037883a 	mov	sp,fp
 800ec6c:	dfc00117 	ldw	ra,4(sp)
 800ec70:	df000017 	ldw	fp,0(sp)
 800ec74:	dec00204 	addi	sp,sp,8
 800ec78:	f800283a 	ret

0800ec7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800ec7c:	defffd04 	addi	sp,sp,-12
 800ec80:	dfc00215 	stw	ra,8(sp)
 800ec84:	df000115 	stw	fp,4(sp)
 800ec88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ec8c:	00820074 	movhi	r2,2049
 800ec90:	10bef104 	addi	r2,r2,-1084
 800ec94:	e0bfff15 	stw	r2,-4(fp)
 800ec98:	00000606 	br	800ecb4 <_do_dtors+0x38>
        (*dtor) (); 
 800ec9c:	e0bfff17 	ldw	r2,-4(fp)
 800eca0:	10800017 	ldw	r2,0(r2)
 800eca4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800eca8:	e0bfff17 	ldw	r2,-4(fp)
 800ecac:	10bfff04 	addi	r2,r2,-4
 800ecb0:	e0bfff15 	stw	r2,-4(fp)
 800ecb4:	e0ffff17 	ldw	r3,-4(fp)
 800ecb8:	00820074 	movhi	r2,2049
 800ecbc:	10bef204 	addi	r2,r2,-1080
 800ecc0:	18bff62e 	bgeu	r3,r2,800ec9c <__alt_data_end+0xfc00ec9c>
        (*dtor) (); 
}
 800ecc4:	e037883a 	mov	sp,fp
 800ecc8:	dfc00117 	ldw	ra,4(sp)
 800eccc:	df000017 	ldw	fp,0(sp)
 800ecd0:	dec00204 	addi	sp,sp,8
 800ecd4:	f800283a 	ret

0800ecd8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800ecd8:	defffa04 	addi	sp,sp,-24
 800ecdc:	dfc00515 	stw	ra,20(sp)
 800ece0:	df000415 	stw	fp,16(sp)
 800ece4:	df000404 	addi	fp,sp,16
 800ece8:	e13ffe15 	stw	r4,-8(fp)
 800ecec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800ecf0:	e0bfff17 	ldw	r2,-4(fp)
 800ecf4:	10800017 	ldw	r2,0(r2)
 800ecf8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800ecfc:	e13ffe17 	ldw	r4,-8(fp)
 800ed00:	8000b3c0 	call	8000b3c <strlen>
 800ed04:	10800044 	addi	r2,r2,1
 800ed08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ed0c:	00000d06 	br	800ed44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800ed10:	e0bffc17 	ldw	r2,-16(fp)
 800ed14:	10c00217 	ldw	r3,8(r2)
 800ed18:	e0bffd17 	ldw	r2,-12(fp)
 800ed1c:	1809883a 	mov	r4,r3
 800ed20:	e17ffe17 	ldw	r5,-8(fp)
 800ed24:	100d883a 	mov	r6,r2
 800ed28:	800f8700 	call	800f870 <memcmp>
 800ed2c:	1000021e 	bne	r2,zero,800ed38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800ed30:	e0bffc17 	ldw	r2,-16(fp)
 800ed34:	00000706 	br	800ed54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800ed38:	e0bffc17 	ldw	r2,-16(fp)
 800ed3c:	10800017 	ldw	r2,0(r2)
 800ed40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ed44:	e0fffc17 	ldw	r3,-16(fp)
 800ed48:	e0bfff17 	ldw	r2,-4(fp)
 800ed4c:	18bff01e 	bne	r3,r2,800ed10 <__alt_data_end+0xfc00ed10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800ed50:	0005883a 	mov	r2,zero
}
 800ed54:	e037883a 	mov	sp,fp
 800ed58:	dfc00117 	ldw	ra,4(sp)
 800ed5c:	df000017 	ldw	fp,0(sp)
 800ed60:	dec00204 	addi	sp,sp,8
 800ed64:	f800283a 	ret

0800ed68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800ed68:	defffe04 	addi	sp,sp,-8
 800ed6c:	dfc00115 	stw	ra,4(sp)
 800ed70:	df000015 	stw	fp,0(sp)
 800ed74:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800ed78:	0009883a 	mov	r4,zero
 800ed7c:	01440004 	movi	r5,4096
 800ed80:	800f7980 	call	800f798 <alt_icache_flush>
#endif
}
 800ed84:	e037883a 	mov	sp,fp
 800ed88:	dfc00117 	ldw	ra,4(sp)
 800ed8c:	df000017 	ldw	fp,0(sp)
 800ed90:	dec00204 	addi	sp,sp,8
 800ed94:	f800283a 	ret

0800ed98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ed98:	defff904 	addi	sp,sp,-28
 800ed9c:	dfc00615 	stw	ra,24(sp)
 800eda0:	df000515 	stw	fp,20(sp)
 800eda4:	df000504 	addi	fp,sp,20
 800eda8:	e13ffc15 	stw	r4,-16(fp)
 800edac:	e17ffd15 	stw	r5,-12(fp)
 800edb0:	e1bffe15 	stw	r6,-8(fp)
 800edb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800edb8:	e0800217 	ldw	r2,8(fp)
 800edbc:	d8800015 	stw	r2,0(sp)
 800edc0:	e13ffc17 	ldw	r4,-16(fp)
 800edc4:	e17ffd17 	ldw	r5,-12(fp)
 800edc8:	e1bffe17 	ldw	r6,-8(fp)
 800edcc:	e1ffff17 	ldw	r7,-4(fp)
 800edd0:	800ef780 	call	800ef78 <alt_iic_isr_register>
}  
 800edd4:	e037883a 	mov	sp,fp
 800edd8:	dfc00117 	ldw	ra,4(sp)
 800eddc:	df000017 	ldw	fp,0(sp)
 800ede0:	dec00204 	addi	sp,sp,8
 800ede4:	f800283a 	ret

0800ede8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800ede8:	defff904 	addi	sp,sp,-28
 800edec:	df000615 	stw	fp,24(sp)
 800edf0:	df000604 	addi	fp,sp,24
 800edf4:	e13ffe15 	stw	r4,-8(fp)
 800edf8:	e17fff15 	stw	r5,-4(fp)
 800edfc:	e0bfff17 	ldw	r2,-4(fp)
 800ee00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ee04:	0005303a 	rdctl	r2,status
 800ee08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ee0c:	e0fffb17 	ldw	r3,-20(fp)
 800ee10:	00bfff84 	movi	r2,-2
 800ee14:	1884703a 	and	r2,r3,r2
 800ee18:	1001703a 	wrctl	status,r2
  
  return context;
 800ee1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800ee20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800ee24:	e0bffa17 	ldw	r2,-24(fp)
 800ee28:	00c00044 	movi	r3,1
 800ee2c:	1884983a 	sll	r2,r3,r2
 800ee30:	1007883a 	mov	r3,r2
 800ee34:	00820074 	movhi	r2,2049
 800ee38:	108d9f04 	addi	r2,r2,13948
 800ee3c:	10800017 	ldw	r2,0(r2)
 800ee40:	1886b03a 	or	r3,r3,r2
 800ee44:	00820074 	movhi	r2,2049
 800ee48:	108d9f04 	addi	r2,r2,13948
 800ee4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800ee50:	00820074 	movhi	r2,2049
 800ee54:	108d9f04 	addi	r2,r2,13948
 800ee58:	10800017 	ldw	r2,0(r2)
 800ee5c:	100170fa 	wrctl	ienable,r2
 800ee60:	e0bffc17 	ldw	r2,-16(fp)
 800ee64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ee68:	e0bffd17 	ldw	r2,-12(fp)
 800ee6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800ee70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800ee74:	0001883a 	nop
}
 800ee78:	e037883a 	mov	sp,fp
 800ee7c:	df000017 	ldw	fp,0(sp)
 800ee80:	dec00104 	addi	sp,sp,4
 800ee84:	f800283a 	ret

0800ee88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800ee88:	defff904 	addi	sp,sp,-28
 800ee8c:	df000615 	stw	fp,24(sp)
 800ee90:	df000604 	addi	fp,sp,24
 800ee94:	e13ffe15 	stw	r4,-8(fp)
 800ee98:	e17fff15 	stw	r5,-4(fp)
 800ee9c:	e0bfff17 	ldw	r2,-4(fp)
 800eea0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eea4:	0005303a 	rdctl	r2,status
 800eea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eeac:	e0fffb17 	ldw	r3,-20(fp)
 800eeb0:	00bfff84 	movi	r2,-2
 800eeb4:	1884703a 	and	r2,r3,r2
 800eeb8:	1001703a 	wrctl	status,r2
  
  return context;
 800eebc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800eec0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800eec4:	e0bffa17 	ldw	r2,-24(fp)
 800eec8:	00c00044 	movi	r3,1
 800eecc:	1884983a 	sll	r2,r3,r2
 800eed0:	0084303a 	nor	r2,zero,r2
 800eed4:	1007883a 	mov	r3,r2
 800eed8:	00820074 	movhi	r2,2049
 800eedc:	108d9f04 	addi	r2,r2,13948
 800eee0:	10800017 	ldw	r2,0(r2)
 800eee4:	1886703a 	and	r3,r3,r2
 800eee8:	00820074 	movhi	r2,2049
 800eeec:	108d9f04 	addi	r2,r2,13948
 800eef0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800eef4:	00820074 	movhi	r2,2049
 800eef8:	108d9f04 	addi	r2,r2,13948
 800eefc:	10800017 	ldw	r2,0(r2)
 800ef00:	100170fa 	wrctl	ienable,r2
 800ef04:	e0bffc17 	ldw	r2,-16(fp)
 800ef08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ef0c:	e0bffd17 	ldw	r2,-12(fp)
 800ef10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800ef14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800ef18:	0001883a 	nop
}
 800ef1c:	e037883a 	mov	sp,fp
 800ef20:	df000017 	ldw	fp,0(sp)
 800ef24:	dec00104 	addi	sp,sp,4
 800ef28:	f800283a 	ret

0800ef2c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800ef2c:	defffc04 	addi	sp,sp,-16
 800ef30:	df000315 	stw	fp,12(sp)
 800ef34:	df000304 	addi	fp,sp,12
 800ef38:	e13ffe15 	stw	r4,-8(fp)
 800ef3c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800ef40:	000530fa 	rdctl	r2,ienable
 800ef44:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800ef48:	e0bfff17 	ldw	r2,-4(fp)
 800ef4c:	00c00044 	movi	r3,1
 800ef50:	1884983a 	sll	r2,r3,r2
 800ef54:	1007883a 	mov	r3,r2
 800ef58:	e0bffd17 	ldw	r2,-12(fp)
 800ef5c:	1884703a 	and	r2,r3,r2
 800ef60:	1004c03a 	cmpne	r2,r2,zero
 800ef64:	10803fcc 	andi	r2,r2,255
}
 800ef68:	e037883a 	mov	sp,fp
 800ef6c:	df000017 	ldw	fp,0(sp)
 800ef70:	dec00104 	addi	sp,sp,4
 800ef74:	f800283a 	ret

0800ef78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ef78:	defff504 	addi	sp,sp,-44
 800ef7c:	dfc00a15 	stw	ra,40(sp)
 800ef80:	df000915 	stw	fp,36(sp)
 800ef84:	df000904 	addi	fp,sp,36
 800ef88:	e13ffc15 	stw	r4,-16(fp)
 800ef8c:	e17ffd15 	stw	r5,-12(fp)
 800ef90:	e1bffe15 	stw	r6,-8(fp)
 800ef94:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800ef98:	00bffa84 	movi	r2,-22
 800ef9c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800efa0:	e0bffd17 	ldw	r2,-12(fp)
 800efa4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800efa8:	e0bff817 	ldw	r2,-32(fp)
 800efac:	10800808 	cmpgei	r2,r2,32
 800efb0:	1000271e 	bne	r2,zero,800f050 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800efb4:	0005303a 	rdctl	r2,status
 800efb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800efbc:	e0fffa17 	ldw	r3,-24(fp)
 800efc0:	00bfff84 	movi	r2,-2
 800efc4:	1884703a 	and	r2,r3,r2
 800efc8:	1001703a 	wrctl	status,r2
  
  return context;
 800efcc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800efd0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800efd4:	00820074 	movhi	r2,2049
 800efd8:	108dac04 	addi	r2,r2,14000
 800efdc:	e0fff817 	ldw	r3,-32(fp)
 800efe0:	180690fa 	slli	r3,r3,3
 800efe4:	10c5883a 	add	r2,r2,r3
 800efe8:	e0fffe17 	ldw	r3,-8(fp)
 800efec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800eff0:	00820074 	movhi	r2,2049
 800eff4:	108dac04 	addi	r2,r2,14000
 800eff8:	e0fff817 	ldw	r3,-32(fp)
 800effc:	180690fa 	slli	r3,r3,3
 800f000:	10c5883a 	add	r2,r2,r3
 800f004:	10800104 	addi	r2,r2,4
 800f008:	e0ffff17 	ldw	r3,-4(fp)
 800f00c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800f010:	e0bffe17 	ldw	r2,-8(fp)
 800f014:	10000526 	beq	r2,zero,800f02c <alt_iic_isr_register+0xb4>
 800f018:	e0bff817 	ldw	r2,-32(fp)
 800f01c:	e13ffc17 	ldw	r4,-16(fp)
 800f020:	100b883a 	mov	r5,r2
 800f024:	800ede80 	call	800ede8 <alt_ic_irq_enable>
 800f028:	00000406 	br	800f03c <alt_iic_isr_register+0xc4>
 800f02c:	e0bff817 	ldw	r2,-32(fp)
 800f030:	e13ffc17 	ldw	r4,-16(fp)
 800f034:	100b883a 	mov	r5,r2
 800f038:	800ee880 	call	800ee88 <alt_ic_irq_disable>
 800f03c:	e0bff715 	stw	r2,-36(fp)
 800f040:	e0bff917 	ldw	r2,-28(fp)
 800f044:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f048:	e0bffb17 	ldw	r2,-20(fp)
 800f04c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800f050:	e0bff717 	ldw	r2,-36(fp)
}
 800f054:	e037883a 	mov	sp,fp
 800f058:	dfc00117 	ldw	ra,4(sp)
 800f05c:	df000017 	ldw	fp,0(sp)
 800f060:	dec00204 	addi	sp,sp,8
 800f064:	f800283a 	ret

0800f068 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800f068:	defff904 	addi	sp,sp,-28
 800f06c:	dfc00615 	stw	ra,24(sp)
 800f070:	df000515 	stw	fp,20(sp)
 800f074:	df000504 	addi	fp,sp,20
 800f078:	e13ffc15 	stw	r4,-16(fp)
 800f07c:	e17ffd15 	stw	r5,-12(fp)
 800f080:	e1bffe15 	stw	r6,-8(fp)
 800f084:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800f088:	e13ffd17 	ldw	r4,-12(fp)
 800f08c:	e17ffe17 	ldw	r5,-8(fp)
 800f090:	e1bfff17 	ldw	r6,-4(fp)
 800f094:	800f2bc0 	call	800f2bc <open>
 800f098:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800f09c:	e0bffb17 	ldw	r2,-20(fp)
 800f0a0:	10001c16 	blt	r2,zero,800f114 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800f0a4:	00820074 	movhi	r2,2049
 800f0a8:	10823c04 	addi	r2,r2,2288
 800f0ac:	e0fffb17 	ldw	r3,-20(fp)
 800f0b0:	18c00324 	muli	r3,r3,12
 800f0b4:	10c5883a 	add	r2,r2,r3
 800f0b8:	10c00017 	ldw	r3,0(r2)
 800f0bc:	e0bffc17 	ldw	r2,-16(fp)
 800f0c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800f0c4:	00820074 	movhi	r2,2049
 800f0c8:	10823c04 	addi	r2,r2,2288
 800f0cc:	e0fffb17 	ldw	r3,-20(fp)
 800f0d0:	18c00324 	muli	r3,r3,12
 800f0d4:	10c5883a 	add	r2,r2,r3
 800f0d8:	10800104 	addi	r2,r2,4
 800f0dc:	10c00017 	ldw	r3,0(r2)
 800f0e0:	e0bffc17 	ldw	r2,-16(fp)
 800f0e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800f0e8:	00820074 	movhi	r2,2049
 800f0ec:	10823c04 	addi	r2,r2,2288
 800f0f0:	e0fffb17 	ldw	r3,-20(fp)
 800f0f4:	18c00324 	muli	r3,r3,12
 800f0f8:	10c5883a 	add	r2,r2,r3
 800f0fc:	10800204 	addi	r2,r2,8
 800f100:	10c00017 	ldw	r3,0(r2)
 800f104:	e0bffc17 	ldw	r2,-16(fp)
 800f108:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f10c:	e13ffb17 	ldw	r4,-20(fp)
 800f110:	800d67c0 	call	800d67c <alt_release_fd>
  }
} 
 800f114:	e037883a 	mov	sp,fp
 800f118:	dfc00117 	ldw	ra,4(sp)
 800f11c:	df000017 	ldw	fp,0(sp)
 800f120:	dec00204 	addi	sp,sp,8
 800f124:	f800283a 	ret

0800f128 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f128:	defffb04 	addi	sp,sp,-20
 800f12c:	dfc00415 	stw	ra,16(sp)
 800f130:	df000315 	stw	fp,12(sp)
 800f134:	df000304 	addi	fp,sp,12
 800f138:	e13ffd15 	stw	r4,-12(fp)
 800f13c:	e17ffe15 	stw	r5,-8(fp)
 800f140:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f144:	01020074 	movhi	r4,2049
 800f148:	21023f04 	addi	r4,r4,2300
 800f14c:	e17ffd17 	ldw	r5,-12(fp)
 800f150:	01800044 	movi	r6,1
 800f154:	01c07fc4 	movi	r7,511
 800f158:	800f0680 	call	800f068 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f15c:	01020074 	movhi	r4,2049
 800f160:	21023c04 	addi	r4,r4,2288
 800f164:	e17ffe17 	ldw	r5,-8(fp)
 800f168:	000d883a 	mov	r6,zero
 800f16c:	01c07fc4 	movi	r7,511
 800f170:	800f0680 	call	800f068 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f174:	01020074 	movhi	r4,2049
 800f178:	21024204 	addi	r4,r4,2312
 800f17c:	e17fff17 	ldw	r5,-4(fp)
 800f180:	01800044 	movi	r6,1
 800f184:	01c07fc4 	movi	r7,511
 800f188:	800f0680 	call	800f068 <alt_open_fd>
}  
 800f18c:	e037883a 	mov	sp,fp
 800f190:	dfc00117 	ldw	ra,4(sp)
 800f194:	df000017 	ldw	fp,0(sp)
 800f198:	dec00204 	addi	sp,sp,8
 800f19c:	f800283a 	ret

0800f1a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f1a0:	defffe04 	addi	sp,sp,-8
 800f1a4:	dfc00115 	stw	ra,4(sp)
 800f1a8:	df000015 	stw	fp,0(sp)
 800f1ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f1b0:	00820074 	movhi	r2,2049
 800f1b4:	1086ca04 	addi	r2,r2,6952
 800f1b8:	10800017 	ldw	r2,0(r2)
 800f1bc:	10000526 	beq	r2,zero,800f1d4 <alt_get_errno+0x34>
 800f1c0:	00820074 	movhi	r2,2049
 800f1c4:	1086ca04 	addi	r2,r2,6952
 800f1c8:	10800017 	ldw	r2,0(r2)
 800f1cc:	103ee83a 	callr	r2
 800f1d0:	00000206 	br	800f1dc <alt_get_errno+0x3c>
 800f1d4:	00820074 	movhi	r2,2049
 800f1d8:	108d9b04 	addi	r2,r2,13932
}
 800f1dc:	e037883a 	mov	sp,fp
 800f1e0:	dfc00117 	ldw	ra,4(sp)
 800f1e4:	df000017 	ldw	fp,0(sp)
 800f1e8:	dec00204 	addi	sp,sp,8
 800f1ec:	f800283a 	ret

0800f1f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800f1f0:	defffd04 	addi	sp,sp,-12
 800f1f4:	df000215 	stw	fp,8(sp)
 800f1f8:	df000204 	addi	fp,sp,8
 800f1fc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800f200:	e0bfff17 	ldw	r2,-4(fp)
 800f204:	10800217 	ldw	r2,8(r2)
 800f208:	10d00034 	orhi	r3,r2,16384
 800f20c:	e0bfff17 	ldw	r2,-4(fp)
 800f210:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f214:	e03ffe15 	stw	zero,-8(fp)
 800f218:	00001d06 	br	800f290 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f21c:	00820074 	movhi	r2,2049
 800f220:	10823c04 	addi	r2,r2,2288
 800f224:	e0fffe17 	ldw	r3,-8(fp)
 800f228:	18c00324 	muli	r3,r3,12
 800f22c:	10c5883a 	add	r2,r2,r3
 800f230:	10c00017 	ldw	r3,0(r2)
 800f234:	e0bfff17 	ldw	r2,-4(fp)
 800f238:	10800017 	ldw	r2,0(r2)
 800f23c:	1880111e 	bne	r3,r2,800f284 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f240:	00820074 	movhi	r2,2049
 800f244:	10823c04 	addi	r2,r2,2288
 800f248:	e0fffe17 	ldw	r3,-8(fp)
 800f24c:	18c00324 	muli	r3,r3,12
 800f250:	10c5883a 	add	r2,r2,r3
 800f254:	10800204 	addi	r2,r2,8
 800f258:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f25c:	1000090e 	bge	r2,zero,800f284 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800f260:	e0bffe17 	ldw	r2,-8(fp)
 800f264:	10c00324 	muli	r3,r2,12
 800f268:	00820074 	movhi	r2,2049
 800f26c:	10823c04 	addi	r2,r2,2288
 800f270:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f274:	e0bfff17 	ldw	r2,-4(fp)
 800f278:	18800226 	beq	r3,r2,800f284 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800f27c:	00bffcc4 	movi	r2,-13
 800f280:	00000a06 	br	800f2ac <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f284:	e0bffe17 	ldw	r2,-8(fp)
 800f288:	10800044 	addi	r2,r2,1
 800f28c:	e0bffe15 	stw	r2,-8(fp)
 800f290:	00820074 	movhi	r2,2049
 800f294:	1086c904 	addi	r2,r2,6948
 800f298:	10800017 	ldw	r2,0(r2)
 800f29c:	1007883a 	mov	r3,r2
 800f2a0:	e0bffe17 	ldw	r2,-8(fp)
 800f2a4:	18bfdd2e 	bgeu	r3,r2,800f21c <__alt_data_end+0xfc00f21c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800f2a8:	0005883a 	mov	r2,zero
}
 800f2ac:	e037883a 	mov	sp,fp
 800f2b0:	df000017 	ldw	fp,0(sp)
 800f2b4:	dec00104 	addi	sp,sp,4
 800f2b8:	f800283a 	ret

0800f2bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800f2bc:	defff604 	addi	sp,sp,-40
 800f2c0:	dfc00915 	stw	ra,36(sp)
 800f2c4:	df000815 	stw	fp,32(sp)
 800f2c8:	df000804 	addi	fp,sp,32
 800f2cc:	e13ffd15 	stw	r4,-12(fp)
 800f2d0:	e17ffe15 	stw	r5,-8(fp)
 800f2d4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800f2d8:	00bfffc4 	movi	r2,-1
 800f2dc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800f2e0:	00bffb44 	movi	r2,-19
 800f2e4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800f2e8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800f2ec:	e13ffd17 	ldw	r4,-12(fp)
 800f2f0:	01420074 	movhi	r5,2049
 800f2f4:	2946c704 	addi	r5,r5,6940
 800f2f8:	800ecd80 	call	800ecd8 <alt_find_dev>
 800f2fc:	e0bff815 	stw	r2,-32(fp)
 800f300:	e0bff817 	ldw	r2,-32(fp)
 800f304:	1000051e 	bne	r2,zero,800f31c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800f308:	e13ffd17 	ldw	r4,-12(fp)
 800f30c:	800f5d00 	call	800f5d0 <alt_find_file>
 800f310:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800f314:	00800044 	movi	r2,1
 800f318:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800f31c:	e0bff817 	ldw	r2,-32(fp)
 800f320:	10002926 	beq	r2,zero,800f3c8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800f324:	e13ff817 	ldw	r4,-32(fp)
 800f328:	800f6e40 	call	800f6e4 <alt_get_fd>
 800f32c:	e0bff915 	stw	r2,-28(fp)
 800f330:	e0bff917 	ldw	r2,-28(fp)
 800f334:	1000030e 	bge	r2,zero,800f344 <open+0x88>
    {
      status = index;
 800f338:	e0bff917 	ldw	r2,-28(fp)
 800f33c:	e0bffa15 	stw	r2,-24(fp)
 800f340:	00002306 	br	800f3d0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 800f344:	e0bff917 	ldw	r2,-28(fp)
 800f348:	10c00324 	muli	r3,r2,12
 800f34c:	00820074 	movhi	r2,2049
 800f350:	10823c04 	addi	r2,r2,2288
 800f354:	1885883a 	add	r2,r3,r2
 800f358:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800f35c:	e0fffe17 	ldw	r3,-8(fp)
 800f360:	00900034 	movhi	r2,16384
 800f364:	10bfffc4 	addi	r2,r2,-1
 800f368:	1886703a 	and	r3,r3,r2
 800f36c:	e0bffc17 	ldw	r2,-16(fp)
 800f370:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800f374:	e0bffb17 	ldw	r2,-20(fp)
 800f378:	1000051e 	bne	r2,zero,800f390 <open+0xd4>
 800f37c:	e13ffc17 	ldw	r4,-16(fp)
 800f380:	800f1f00 	call	800f1f0 <alt_file_locked>
 800f384:	e0bffa15 	stw	r2,-24(fp)
 800f388:	e0bffa17 	ldw	r2,-24(fp)
 800f38c:	10001016 	blt	r2,zero,800f3d0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800f390:	e0bff817 	ldw	r2,-32(fp)
 800f394:	10800317 	ldw	r2,12(r2)
 800f398:	10000826 	beq	r2,zero,800f3bc <open+0x100>
 800f39c:	e0bff817 	ldw	r2,-32(fp)
 800f3a0:	10800317 	ldw	r2,12(r2)
 800f3a4:	e13ffc17 	ldw	r4,-16(fp)
 800f3a8:	e17ffd17 	ldw	r5,-12(fp)
 800f3ac:	e1bffe17 	ldw	r6,-8(fp)
 800f3b0:	e1ffff17 	ldw	r7,-4(fp)
 800f3b4:	103ee83a 	callr	r2
 800f3b8:	00000106 	br	800f3c0 <open+0x104>
 800f3bc:	0005883a 	mov	r2,zero
 800f3c0:	e0bffa15 	stw	r2,-24(fp)
 800f3c4:	00000206 	br	800f3d0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800f3c8:	00bffb44 	movi	r2,-19
 800f3cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800f3d0:	e0bffa17 	ldw	r2,-24(fp)
 800f3d4:	1000090e 	bge	r2,zero,800f3fc <open+0x140>
  {
    alt_release_fd (index);  
 800f3d8:	e13ff917 	ldw	r4,-28(fp)
 800f3dc:	800d67c0 	call	800d67c <alt_release_fd>
    ALT_ERRNO = -status;
 800f3e0:	800f1a00 	call	800f1a0 <alt_get_errno>
 800f3e4:	1007883a 	mov	r3,r2
 800f3e8:	e0bffa17 	ldw	r2,-24(fp)
 800f3ec:	0085c83a 	sub	r2,zero,r2
 800f3f0:	18800015 	stw	r2,0(r3)
    return -1;
 800f3f4:	00bfffc4 	movi	r2,-1
 800f3f8:	00000106 	br	800f400 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 800f3fc:	e0bff917 	ldw	r2,-28(fp)
}
 800f400:	e037883a 	mov	sp,fp
 800f404:	dfc00117 	ldw	ra,4(sp)
 800f408:	df000017 	ldw	fp,0(sp)
 800f40c:	dec00204 	addi	sp,sp,8
 800f410:	f800283a 	ret

0800f414 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800f414:	defffa04 	addi	sp,sp,-24
 800f418:	df000515 	stw	fp,20(sp)
 800f41c:	df000504 	addi	fp,sp,20
 800f420:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f424:	0005303a 	rdctl	r2,status
 800f428:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f42c:	e0fffc17 	ldw	r3,-16(fp)
 800f430:	00bfff84 	movi	r2,-2
 800f434:	1884703a 	and	r2,r3,r2
 800f438:	1001703a 	wrctl	status,r2
  
  return context;
 800f43c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800f440:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800f444:	e0bfff17 	ldw	r2,-4(fp)
 800f448:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800f44c:	e0bffd17 	ldw	r2,-12(fp)
 800f450:	10800017 	ldw	r2,0(r2)
 800f454:	e0fffd17 	ldw	r3,-12(fp)
 800f458:	18c00117 	ldw	r3,4(r3)
 800f45c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800f460:	e0bffd17 	ldw	r2,-12(fp)
 800f464:	10800117 	ldw	r2,4(r2)
 800f468:	e0fffd17 	ldw	r3,-12(fp)
 800f46c:	18c00017 	ldw	r3,0(r3)
 800f470:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800f474:	e0bffd17 	ldw	r2,-12(fp)
 800f478:	e0fffd17 	ldw	r3,-12(fp)
 800f47c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800f480:	e0bffd17 	ldw	r2,-12(fp)
 800f484:	e0fffd17 	ldw	r3,-12(fp)
 800f488:	10c00015 	stw	r3,0(r2)
 800f48c:	e0bffb17 	ldw	r2,-20(fp)
 800f490:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f494:	e0bffe17 	ldw	r2,-8(fp)
 800f498:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800f49c:	e037883a 	mov	sp,fp
 800f4a0:	df000017 	ldw	fp,0(sp)
 800f4a4:	dec00104 	addi	sp,sp,4
 800f4a8:	f800283a 	ret

0800f4ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800f4ac:	defffb04 	addi	sp,sp,-20
 800f4b0:	dfc00415 	stw	ra,16(sp)
 800f4b4:	df000315 	stw	fp,12(sp)
 800f4b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800f4bc:	d0a00e17 	ldw	r2,-32712(gp)
 800f4c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800f4c4:	d0a6e217 	ldw	r2,-25720(gp)
 800f4c8:	10800044 	addi	r2,r2,1
 800f4cc:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f4d0:	00002e06 	br	800f58c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800f4d4:	e0bffd17 	ldw	r2,-12(fp)
 800f4d8:	10800017 	ldw	r2,0(r2)
 800f4dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800f4e0:	e0bffd17 	ldw	r2,-12(fp)
 800f4e4:	10800403 	ldbu	r2,16(r2)
 800f4e8:	10803fcc 	andi	r2,r2,255
 800f4ec:	10000426 	beq	r2,zero,800f500 <alt_tick+0x54>
 800f4f0:	d0a6e217 	ldw	r2,-25720(gp)
 800f4f4:	1000021e 	bne	r2,zero,800f500 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800f4f8:	e0bffd17 	ldw	r2,-12(fp)
 800f4fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800f500:	e0bffd17 	ldw	r2,-12(fp)
 800f504:	10800217 	ldw	r2,8(r2)
 800f508:	d0e6e217 	ldw	r3,-25720(gp)
 800f50c:	18801d36 	bltu	r3,r2,800f584 <alt_tick+0xd8>
 800f510:	e0bffd17 	ldw	r2,-12(fp)
 800f514:	10800403 	ldbu	r2,16(r2)
 800f518:	10803fcc 	andi	r2,r2,255
 800f51c:	1000191e 	bne	r2,zero,800f584 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800f520:	e0bffd17 	ldw	r2,-12(fp)
 800f524:	10800317 	ldw	r2,12(r2)
 800f528:	e0fffd17 	ldw	r3,-12(fp)
 800f52c:	18c00517 	ldw	r3,20(r3)
 800f530:	1809883a 	mov	r4,r3
 800f534:	103ee83a 	callr	r2
 800f538:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800f53c:	e0bfff17 	ldw	r2,-4(fp)
 800f540:	1000031e 	bne	r2,zero,800f550 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800f544:	e13ffd17 	ldw	r4,-12(fp)
 800f548:	800f4140 	call	800f414 <alt_alarm_stop>
 800f54c:	00000d06 	br	800f584 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800f550:	e0bffd17 	ldw	r2,-12(fp)
 800f554:	10c00217 	ldw	r3,8(r2)
 800f558:	e0bfff17 	ldw	r2,-4(fp)
 800f55c:	1887883a 	add	r3,r3,r2
 800f560:	e0bffd17 	ldw	r2,-12(fp)
 800f564:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800f568:	e0bffd17 	ldw	r2,-12(fp)
 800f56c:	10c00217 	ldw	r3,8(r2)
 800f570:	d0a6e217 	ldw	r2,-25720(gp)
 800f574:	1880032e 	bgeu	r3,r2,800f584 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800f578:	e0bffd17 	ldw	r2,-12(fp)
 800f57c:	00c00044 	movi	r3,1
 800f580:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800f584:	e0bffe17 	ldw	r2,-8(fp)
 800f588:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f58c:	e0fffd17 	ldw	r3,-12(fp)
 800f590:	d0a00e04 	addi	r2,gp,-32712
 800f594:	18bfcf1e 	bne	r3,r2,800f4d4 <__alt_data_end+0xfc00f4d4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800f598:	0001883a 	nop
}
 800f59c:	e037883a 	mov	sp,fp
 800f5a0:	dfc00117 	ldw	ra,4(sp)
 800f5a4:	df000017 	ldw	fp,0(sp)
 800f5a8:	dec00204 	addi	sp,sp,8
 800f5ac:	f800283a 	ret

0800f5b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800f5b0:	deffff04 	addi	sp,sp,-4
 800f5b4:	df000015 	stw	fp,0(sp)
 800f5b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800f5bc:	000170fa 	wrctl	ienable,zero
}
 800f5c0:	e037883a 	mov	sp,fp
 800f5c4:	df000017 	ldw	fp,0(sp)
 800f5c8:	dec00104 	addi	sp,sp,4
 800f5cc:	f800283a 	ret

0800f5d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800f5d0:	defffb04 	addi	sp,sp,-20
 800f5d4:	dfc00415 	stw	ra,16(sp)
 800f5d8:	df000315 	stw	fp,12(sp)
 800f5dc:	df000304 	addi	fp,sp,12
 800f5e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800f5e4:	00820074 	movhi	r2,2049
 800f5e8:	1086c504 	addi	r2,r2,6932
 800f5ec:	10800017 	ldw	r2,0(r2)
 800f5f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f5f4:	00003106 	br	800f6bc <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800f5f8:	e0bffd17 	ldw	r2,-12(fp)
 800f5fc:	10800217 	ldw	r2,8(r2)
 800f600:	1009883a 	mov	r4,r2
 800f604:	8000b3c0 	call	8000b3c <strlen>
 800f608:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800f60c:	e0bffd17 	ldw	r2,-12(fp)
 800f610:	10c00217 	ldw	r3,8(r2)
 800f614:	e0bffe17 	ldw	r2,-8(fp)
 800f618:	10bfffc4 	addi	r2,r2,-1
 800f61c:	1885883a 	add	r2,r3,r2
 800f620:	10800003 	ldbu	r2,0(r2)
 800f624:	10803fcc 	andi	r2,r2,255
 800f628:	1080201c 	xori	r2,r2,128
 800f62c:	10bfe004 	addi	r2,r2,-128
 800f630:	10800bd8 	cmpnei	r2,r2,47
 800f634:	1000031e 	bne	r2,zero,800f644 <alt_find_file+0x74>
    {
      len -= 1;
 800f638:	e0bffe17 	ldw	r2,-8(fp)
 800f63c:	10bfffc4 	addi	r2,r2,-1
 800f640:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f644:	e0bffe17 	ldw	r2,-8(fp)
 800f648:	e0ffff17 	ldw	r3,-4(fp)
 800f64c:	1885883a 	add	r2,r3,r2
 800f650:	10800003 	ldbu	r2,0(r2)
 800f654:	10803fcc 	andi	r2,r2,255
 800f658:	1080201c 	xori	r2,r2,128
 800f65c:	10bfe004 	addi	r2,r2,-128
 800f660:	10800be0 	cmpeqi	r2,r2,47
 800f664:	1000081e 	bne	r2,zero,800f688 <alt_find_file+0xb8>
 800f668:	e0bffe17 	ldw	r2,-8(fp)
 800f66c:	e0ffff17 	ldw	r3,-4(fp)
 800f670:	1885883a 	add	r2,r3,r2
 800f674:	10800003 	ldbu	r2,0(r2)
 800f678:	10803fcc 	andi	r2,r2,255
 800f67c:	1080201c 	xori	r2,r2,128
 800f680:	10bfe004 	addi	r2,r2,-128
 800f684:	10000a1e 	bne	r2,zero,800f6b0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800f688:	e0bffd17 	ldw	r2,-12(fp)
 800f68c:	10c00217 	ldw	r3,8(r2)
 800f690:	e0bffe17 	ldw	r2,-8(fp)
 800f694:	1809883a 	mov	r4,r3
 800f698:	e17fff17 	ldw	r5,-4(fp)
 800f69c:	100d883a 	mov	r6,r2
 800f6a0:	800f8700 	call	800f870 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f6a4:	1000021e 	bne	r2,zero,800f6b0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800f6a8:	e0bffd17 	ldw	r2,-12(fp)
 800f6ac:	00000806 	br	800f6d0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800f6b0:	e0bffd17 	ldw	r2,-12(fp)
 800f6b4:	10800017 	ldw	r2,0(r2)
 800f6b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f6bc:	e0fffd17 	ldw	r3,-12(fp)
 800f6c0:	00820074 	movhi	r2,2049
 800f6c4:	1086c504 	addi	r2,r2,6932
 800f6c8:	18bfcb1e 	bne	r3,r2,800f5f8 <__alt_data_end+0xfc00f5f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800f6cc:	0005883a 	mov	r2,zero
}
 800f6d0:	e037883a 	mov	sp,fp
 800f6d4:	dfc00117 	ldw	ra,4(sp)
 800f6d8:	df000017 	ldw	fp,0(sp)
 800f6dc:	dec00204 	addi	sp,sp,8
 800f6e0:	f800283a 	ret

0800f6e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800f6e4:	defffc04 	addi	sp,sp,-16
 800f6e8:	df000315 	stw	fp,12(sp)
 800f6ec:	df000304 	addi	fp,sp,12
 800f6f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800f6f4:	00bffa04 	movi	r2,-24
 800f6f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f6fc:	e03ffd15 	stw	zero,-12(fp)
 800f700:	00001d06 	br	800f778 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800f704:	00820074 	movhi	r2,2049
 800f708:	10823c04 	addi	r2,r2,2288
 800f70c:	e0fffd17 	ldw	r3,-12(fp)
 800f710:	18c00324 	muli	r3,r3,12
 800f714:	10c5883a 	add	r2,r2,r3
 800f718:	10800017 	ldw	r2,0(r2)
 800f71c:	1000131e 	bne	r2,zero,800f76c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800f720:	00820074 	movhi	r2,2049
 800f724:	10823c04 	addi	r2,r2,2288
 800f728:	e0fffd17 	ldw	r3,-12(fp)
 800f72c:	18c00324 	muli	r3,r3,12
 800f730:	10c5883a 	add	r2,r2,r3
 800f734:	e0ffff17 	ldw	r3,-4(fp)
 800f738:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800f73c:	00820074 	movhi	r2,2049
 800f740:	1086c904 	addi	r2,r2,6948
 800f744:	10c00017 	ldw	r3,0(r2)
 800f748:	e0bffd17 	ldw	r2,-12(fp)
 800f74c:	1880040e 	bge	r3,r2,800f760 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800f750:	00820074 	movhi	r2,2049
 800f754:	1086c904 	addi	r2,r2,6948
 800f758:	e0fffd17 	ldw	r3,-12(fp)
 800f75c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800f760:	e0bffd17 	ldw	r2,-12(fp)
 800f764:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800f768:	00000606 	br	800f784 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f76c:	e0bffd17 	ldw	r2,-12(fp)
 800f770:	10800044 	addi	r2,r2,1
 800f774:	e0bffd15 	stw	r2,-12(fp)
 800f778:	e0bffd17 	ldw	r2,-12(fp)
 800f77c:	10800810 	cmplti	r2,r2,32
 800f780:	103fe01e 	bne	r2,zero,800f704 <__alt_data_end+0xfc00f704>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800f784:	e0bffe17 	ldw	r2,-8(fp)
}
 800f788:	e037883a 	mov	sp,fp
 800f78c:	df000017 	ldw	fp,0(sp)
 800f790:	dec00104 	addi	sp,sp,4
 800f794:	f800283a 	ret

0800f798 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800f798:	defffb04 	addi	sp,sp,-20
 800f79c:	df000415 	stw	fp,16(sp)
 800f7a0:	df000404 	addi	fp,sp,16
 800f7a4:	e13ffe15 	stw	r4,-8(fp)
 800f7a8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800f7ac:	e0bfff17 	ldw	r2,-4(fp)
 800f7b0:	10840070 	cmpltui	r2,r2,4097
 800f7b4:	1000021e 	bne	r2,zero,800f7c0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800f7b8:	00840004 	movi	r2,4096
 800f7bc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800f7c0:	e0fffe17 	ldw	r3,-8(fp)
 800f7c4:	e0bfff17 	ldw	r2,-4(fp)
 800f7c8:	1885883a 	add	r2,r3,r2
 800f7cc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800f7d0:	e0bffe17 	ldw	r2,-8(fp)
 800f7d4:	e0bffc15 	stw	r2,-16(fp)
 800f7d8:	00000506 	br	800f7f0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800f7dc:	e0bffc17 	ldw	r2,-16(fp)
 800f7e0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800f7e4:	e0bffc17 	ldw	r2,-16(fp)
 800f7e8:	10800804 	addi	r2,r2,32
 800f7ec:	e0bffc15 	stw	r2,-16(fp)
 800f7f0:	e0fffc17 	ldw	r3,-16(fp)
 800f7f4:	e0bffd17 	ldw	r2,-12(fp)
 800f7f8:	18bff836 	bltu	r3,r2,800f7dc <__alt_data_end+0xfc00f7dc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800f7fc:	e0bffe17 	ldw	r2,-8(fp)
 800f800:	108007cc 	andi	r2,r2,31
 800f804:	10000226 	beq	r2,zero,800f810 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800f808:	e0bffc17 	ldw	r2,-16(fp)
 800f80c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800f810:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800f814:	e037883a 	mov	sp,fp
 800f818:	df000017 	ldw	fp,0(sp)
 800f81c:	dec00104 	addi	sp,sp,4
 800f820:	f800283a 	ret

0800f824 <atexit>:
 800f824:	200b883a 	mov	r5,r4
 800f828:	000d883a 	mov	r6,zero
 800f82c:	0009883a 	mov	r4,zero
 800f830:	000f883a 	mov	r7,zero
 800f834:	800f8ec1 	jmpi	800f8ec <__register_exitproc>

0800f838 <exit>:
 800f838:	defffe04 	addi	sp,sp,-8
 800f83c:	000b883a 	mov	r5,zero
 800f840:	dc000015 	stw	r16,0(sp)
 800f844:	dfc00115 	stw	ra,4(sp)
 800f848:	2021883a 	mov	r16,r4
 800f84c:	800fa000 	call	800fa00 <__call_exitprocs>
 800f850:	00820074 	movhi	r2,2049
 800f854:	1086bf04 	addi	r2,r2,6908
 800f858:	11000017 	ldw	r4,0(r2)
 800f85c:	20800f17 	ldw	r2,60(r4)
 800f860:	10000126 	beq	r2,zero,800f868 <exit+0x30>
 800f864:	103ee83a 	callr	r2
 800f868:	8009883a 	mov	r4,r16
 800f86c:	800fb940 	call	800fb94 <_exit>

0800f870 <memcmp>:
 800f870:	01c000c4 	movi	r7,3
 800f874:	3980192e 	bgeu	r7,r6,800f8dc <memcmp+0x6c>
 800f878:	2144b03a 	or	r2,r4,r5
 800f87c:	11c4703a 	and	r2,r2,r7
 800f880:	10000f26 	beq	r2,zero,800f8c0 <memcmp+0x50>
 800f884:	20800003 	ldbu	r2,0(r4)
 800f888:	28c00003 	ldbu	r3,0(r5)
 800f88c:	10c0151e 	bne	r2,r3,800f8e4 <memcmp+0x74>
 800f890:	31bfff84 	addi	r6,r6,-2
 800f894:	01ffffc4 	movi	r7,-1
 800f898:	00000406 	br	800f8ac <memcmp+0x3c>
 800f89c:	20800003 	ldbu	r2,0(r4)
 800f8a0:	28c00003 	ldbu	r3,0(r5)
 800f8a4:	31bfffc4 	addi	r6,r6,-1
 800f8a8:	10c00e1e 	bne	r2,r3,800f8e4 <memcmp+0x74>
 800f8ac:	21000044 	addi	r4,r4,1
 800f8b0:	29400044 	addi	r5,r5,1
 800f8b4:	31fff91e 	bne	r6,r7,800f89c <__alt_data_end+0xfc00f89c>
 800f8b8:	0005883a 	mov	r2,zero
 800f8bc:	f800283a 	ret
 800f8c0:	20c00017 	ldw	r3,0(r4)
 800f8c4:	28800017 	ldw	r2,0(r5)
 800f8c8:	1880041e 	bne	r3,r2,800f8dc <memcmp+0x6c>
 800f8cc:	31bfff04 	addi	r6,r6,-4
 800f8d0:	21000104 	addi	r4,r4,4
 800f8d4:	29400104 	addi	r5,r5,4
 800f8d8:	39bff936 	bltu	r7,r6,800f8c0 <__alt_data_end+0xfc00f8c0>
 800f8dc:	303fe91e 	bne	r6,zero,800f884 <__alt_data_end+0xfc00f884>
 800f8e0:	003ff506 	br	800f8b8 <__alt_data_end+0xfc00f8b8>
 800f8e4:	10c5c83a 	sub	r2,r2,r3
 800f8e8:	f800283a 	ret

0800f8ec <__register_exitproc>:
 800f8ec:	00820074 	movhi	r2,2049
 800f8f0:	defffa04 	addi	sp,sp,-24
 800f8f4:	1086bf04 	addi	r2,r2,6908
 800f8f8:	dc000315 	stw	r16,12(sp)
 800f8fc:	14000017 	ldw	r16,0(r2)
 800f900:	dc400415 	stw	r17,16(sp)
 800f904:	dfc00515 	stw	ra,20(sp)
 800f908:	80805217 	ldw	r2,328(r16)
 800f90c:	2023883a 	mov	r17,r4
 800f910:	10003626 	beq	r2,zero,800f9ec <__register_exitproc+0x100>
 800f914:	10c00117 	ldw	r3,4(r2)
 800f918:	010007c4 	movi	r4,31
 800f91c:	20c00e16 	blt	r4,r3,800f958 <__register_exitproc+0x6c>
 800f920:	1a400044 	addi	r9,r3,1
 800f924:	8800211e 	bne	r17,zero,800f9ac <__register_exitproc+0xc0>
 800f928:	18c00084 	addi	r3,r3,2
 800f92c:	18c7883a 	add	r3,r3,r3
 800f930:	18c7883a 	add	r3,r3,r3
 800f934:	12400115 	stw	r9,4(r2)
 800f938:	10c7883a 	add	r3,r2,r3
 800f93c:	19400015 	stw	r5,0(r3)
 800f940:	0005883a 	mov	r2,zero
 800f944:	dfc00517 	ldw	ra,20(sp)
 800f948:	dc400417 	ldw	r17,16(sp)
 800f94c:	dc000317 	ldw	r16,12(sp)
 800f950:	dec00604 	addi	sp,sp,24
 800f954:	f800283a 	ret
 800f958:	00800034 	movhi	r2,0
 800f95c:	10800004 	addi	r2,r2,0
 800f960:	10002526 	beq	r2,zero,800f9f8 <__register_exitproc+0x10c>
 800f964:	01006404 	movi	r4,400
 800f968:	d9400015 	stw	r5,0(sp)
 800f96c:	d9800115 	stw	r6,4(sp)
 800f970:	d9c00215 	stw	r7,8(sp)
 800f974:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800f978:	d9400017 	ldw	r5,0(sp)
 800f97c:	d9800117 	ldw	r6,4(sp)
 800f980:	d9c00217 	ldw	r7,8(sp)
 800f984:	10001c26 	beq	r2,zero,800f9f8 <__register_exitproc+0x10c>
 800f988:	80c05217 	ldw	r3,328(r16)
 800f98c:	10000115 	stw	zero,4(r2)
 800f990:	02400044 	movi	r9,1
 800f994:	10c00015 	stw	r3,0(r2)
 800f998:	80805215 	stw	r2,328(r16)
 800f99c:	10006215 	stw	zero,392(r2)
 800f9a0:	10006315 	stw	zero,396(r2)
 800f9a4:	0007883a 	mov	r3,zero
 800f9a8:	883fdf26 	beq	r17,zero,800f928 <__alt_data_end+0xfc00f928>
 800f9ac:	18d1883a 	add	r8,r3,r3
 800f9b0:	4211883a 	add	r8,r8,r8
 800f9b4:	1211883a 	add	r8,r2,r8
 800f9b8:	41802215 	stw	r6,136(r8)
 800f9bc:	01000044 	movi	r4,1
 800f9c0:	11806217 	ldw	r6,392(r2)
 800f9c4:	20c8983a 	sll	r4,r4,r3
 800f9c8:	310cb03a 	or	r6,r6,r4
 800f9cc:	11806215 	stw	r6,392(r2)
 800f9d0:	41c04215 	stw	r7,264(r8)
 800f9d4:	01800084 	movi	r6,2
 800f9d8:	89bfd31e 	bne	r17,r6,800f928 <__alt_data_end+0xfc00f928>
 800f9dc:	11806317 	ldw	r6,396(r2)
 800f9e0:	3108b03a 	or	r4,r6,r4
 800f9e4:	11006315 	stw	r4,396(r2)
 800f9e8:	003fcf06 	br	800f928 <__alt_data_end+0xfc00f928>
 800f9ec:	80805304 	addi	r2,r16,332
 800f9f0:	80805215 	stw	r2,328(r16)
 800f9f4:	003fc706 	br	800f914 <__alt_data_end+0xfc00f914>
 800f9f8:	00bfffc4 	movi	r2,-1
 800f9fc:	003fd106 	br	800f944 <__alt_data_end+0xfc00f944>

0800fa00 <__call_exitprocs>:
 800fa00:	00820074 	movhi	r2,2049
 800fa04:	1086bf04 	addi	r2,r2,6908
 800fa08:	10800017 	ldw	r2,0(r2)
 800fa0c:	defff404 	addi	sp,sp,-48
 800fa10:	dd800815 	stw	r22,32(sp)
 800fa14:	d8800015 	stw	r2,0(sp)
 800fa18:	10805204 	addi	r2,r2,328
 800fa1c:	dd000615 	stw	r20,24(sp)
 800fa20:	dc800415 	stw	r18,16(sp)
 800fa24:	dfc00b15 	stw	ra,44(sp)
 800fa28:	df000a15 	stw	fp,40(sp)
 800fa2c:	ddc00915 	stw	r23,36(sp)
 800fa30:	dd400715 	stw	r21,28(sp)
 800fa34:	dcc00515 	stw	r19,20(sp)
 800fa38:	dc400315 	stw	r17,12(sp)
 800fa3c:	dc000215 	stw	r16,8(sp)
 800fa40:	2025883a 	mov	r18,r4
 800fa44:	2829883a 	mov	r20,r5
 800fa48:	d8800115 	stw	r2,4(sp)
 800fa4c:	05bfffc4 	movi	r22,-1
 800fa50:	d8800017 	ldw	r2,0(sp)
 800fa54:	14c05217 	ldw	r19,328(r2)
 800fa58:	98001d26 	beq	r19,zero,800fad0 <__call_exitprocs+0xd0>
 800fa5c:	dd400117 	ldw	r21,4(sp)
 800fa60:	98800117 	ldw	r2,4(r19)
 800fa64:	173fffc4 	addi	fp,r2,-1
 800fa68:	e0000d16 	blt	fp,zero,800faa0 <__call_exitprocs+0xa0>
 800fa6c:	14000044 	addi	r16,r2,1
 800fa70:	8421883a 	add	r16,r16,r16
 800fa74:	8421883a 	add	r16,r16,r16
 800fa78:	84402004 	addi	r17,r16,128
 800fa7c:	9c63883a 	add	r17,r19,r17
 800fa80:	9c21883a 	add	r16,r19,r16
 800fa84:	a0001e26 	beq	r20,zero,800fb00 <__call_exitprocs+0x100>
 800fa88:	80804017 	ldw	r2,256(r16)
 800fa8c:	15001c26 	beq	r2,r20,800fb00 <__call_exitprocs+0x100>
 800fa90:	e73fffc4 	addi	fp,fp,-1
 800fa94:	843fff04 	addi	r16,r16,-4
 800fa98:	8c7fff04 	addi	r17,r17,-4
 800fa9c:	e5bff91e 	bne	fp,r22,800fa84 <__alt_data_end+0xfc00fa84>
 800faa0:	00800034 	movhi	r2,0
 800faa4:	10800004 	addi	r2,r2,0
 800faa8:	10000926 	beq	r2,zero,800fad0 <__call_exitprocs+0xd0>
 800faac:	98800117 	ldw	r2,4(r19)
 800fab0:	1000311e 	bne	r2,zero,800fb78 <__call_exitprocs+0x178>
 800fab4:	98800017 	ldw	r2,0(r19)
 800fab8:	10003426 	beq	r2,zero,800fb8c <__call_exitprocs+0x18c>
 800fabc:	9809883a 	mov	r4,r19
 800fac0:	a8800015 	stw	r2,0(r21)
 800fac4:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800fac8:	acc00017 	ldw	r19,0(r21)
 800facc:	983fe41e 	bne	r19,zero,800fa60 <__alt_data_end+0xfc00fa60>
 800fad0:	dfc00b17 	ldw	ra,44(sp)
 800fad4:	df000a17 	ldw	fp,40(sp)
 800fad8:	ddc00917 	ldw	r23,36(sp)
 800fadc:	dd800817 	ldw	r22,32(sp)
 800fae0:	dd400717 	ldw	r21,28(sp)
 800fae4:	dd000617 	ldw	r20,24(sp)
 800fae8:	dcc00517 	ldw	r19,20(sp)
 800faec:	dc800417 	ldw	r18,16(sp)
 800faf0:	dc400317 	ldw	r17,12(sp)
 800faf4:	dc000217 	ldw	r16,8(sp)
 800faf8:	dec00c04 	addi	sp,sp,48
 800fafc:	f800283a 	ret
 800fb00:	98800117 	ldw	r2,4(r19)
 800fb04:	80c00017 	ldw	r3,0(r16)
 800fb08:	10bfffc4 	addi	r2,r2,-1
 800fb0c:	17001526 	beq	r2,fp,800fb64 <__call_exitprocs+0x164>
 800fb10:	80000015 	stw	zero,0(r16)
 800fb14:	183fde26 	beq	r3,zero,800fa90 <__alt_data_end+0xfc00fa90>
 800fb18:	00800044 	movi	r2,1
 800fb1c:	1708983a 	sll	r4,r2,fp
 800fb20:	98806217 	ldw	r2,392(r19)
 800fb24:	9dc00117 	ldw	r23,4(r19)
 800fb28:	2084703a 	and	r2,r4,r2
 800fb2c:	1000061e 	bne	r2,zero,800fb48 <__call_exitprocs+0x148>
 800fb30:	183ee83a 	callr	r3
 800fb34:	98800117 	ldw	r2,4(r19)
 800fb38:	15ffc51e 	bne	r2,r23,800fa50 <__alt_data_end+0xfc00fa50>
 800fb3c:	a8800017 	ldw	r2,0(r21)
 800fb40:	14ffd326 	beq	r2,r19,800fa90 <__alt_data_end+0xfc00fa90>
 800fb44:	003fc206 	br	800fa50 <__alt_data_end+0xfc00fa50>
 800fb48:	98806317 	ldw	r2,396(r19)
 800fb4c:	2084703a 	and	r2,r4,r2
 800fb50:	1000061e 	bne	r2,zero,800fb6c <__call_exitprocs+0x16c>
 800fb54:	89400017 	ldw	r5,0(r17)
 800fb58:	9009883a 	mov	r4,r18
 800fb5c:	183ee83a 	callr	r3
 800fb60:	003ff406 	br	800fb34 <__alt_data_end+0xfc00fb34>
 800fb64:	9f000115 	stw	fp,4(r19)
 800fb68:	003fea06 	br	800fb14 <__alt_data_end+0xfc00fb14>
 800fb6c:	89000017 	ldw	r4,0(r17)
 800fb70:	183ee83a 	callr	r3
 800fb74:	003fef06 	br	800fb34 <__alt_data_end+0xfc00fb34>
 800fb78:	98800017 	ldw	r2,0(r19)
 800fb7c:	982b883a 	mov	r21,r19
 800fb80:	1027883a 	mov	r19,r2
 800fb84:	983fb61e 	bne	r19,zero,800fa60 <__alt_data_end+0xfc00fa60>
 800fb88:	003fd106 	br	800fad0 <__alt_data_end+0xfc00fad0>
 800fb8c:	0005883a 	mov	r2,zero
 800fb90:	003ffa06 	br	800fb7c <__alt_data_end+0xfc00fb7c>

0800fb94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800fb94:	defffd04 	addi	sp,sp,-12
 800fb98:	df000215 	stw	fp,8(sp)
 800fb9c:	df000204 	addi	fp,sp,8
 800fba0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800fba4:	0001883a 	nop
 800fba8:	e0bfff17 	ldw	r2,-4(fp)
 800fbac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800fbb0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800fbb4:	10000226 	beq	r2,zero,800fbc0 <_exit+0x2c>
    ALT_SIM_FAIL();
 800fbb8:	002af070 	cmpltui	zero,zero,43969
 800fbbc:	00000106 	br	800fbc4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800fbc0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800fbc4:	003fff06 	br	800fbc4 <__alt_data_end+0xfc00fbc4>
