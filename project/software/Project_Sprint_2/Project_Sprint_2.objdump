
Project_Sprint_2.elf:     file format elf32-littlenios2
Project_Sprint_2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00005a18 memsz 0x00005a18 flags r-x
    LOAD off    0x00006a38 vaddr 0x08005a38 paddr 0x080074d0 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00008f68 vaddr 0x08008f68 paddr 0x08008f68 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005814  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  08005a38  080074d0  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  08008f68  08008f68  00008f68  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080090b8  080090b8  000084d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000084d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000970  00000000  00000000  000084f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016687  00000000  00000000  00008e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f68  00000000  00000000  0001f4ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000067bd  00000000  00000000  00025457  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000016c4  00000000  00000000  0002bc14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022d6  00000000  00000000  0002d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004410  00000000  00000000  0002f5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000339c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  000339e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000363f5  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036404  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036405  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00036406  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00036411  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003641c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00036427  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  00036432  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  00036458  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006f74b  00000000  00000000  0003afa4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080059d0 l    d  .rodata	00000000 .rodata
08005a38 l    d  .rwdata	00000000 .rwdata
08008f68 l    d  .bss	00000000 .bss
080090b8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Project_Sprint_2_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
08005a38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08001cd4 l     F .text	00000008 __fp_lock
08001cdc l     F .text	00000008 __fp_unlock
08001cf0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
08002d38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08002e58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08002e84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08002f84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08003078 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800315c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003338 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080074c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08003594 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080036dc l     F .text	00000038 alt_dev_reg
0800640c l     O .rwdata	00001060 jtag_uart_0
0800746c l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080039e0 l     F .text	00000204 altera_avalon_jtag_uart_irq
08003be4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08004204 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08004934 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08004e70 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08004fa8 l     F .text	00000050 alt_get_errno
08004ff8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08002c2c g     F .text	00000054 _isatty_r
08003280 g     F .text	00000078 alt_main
0800022c g     F .text	000000b8 _puts_r
08008fb8 g     O .bss	00000100 alt_irq
08002c80 g     F .text	0000005c _lseek_r
080074d0 g       *ABS*	00000000 __flash_rwdata_start
08004374 g     F .text	0000003c alt_up_character_lcd_send_cmd
080090b8 g       *ABS*	00000000 __alt_heap_start
080029ac g     F .text	0000005c __sseek
08002024 g     F .text	00000010 __sinit
08001e90 g     F .text	00000064 __sfmoreglue
08003318 g     F .text	00000020 __malloc_unlock
080011fc g     F .text	0000015c memmove
0800200c g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
08004300 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002bd4 g     F .text	00000058 _fstat_r
08008f74 g     O .bss	00000004 errno
08002928 g     F .text	00000008 __seofread
08008f7c g     O .bss	00000004 alt_argv
0800f498 g       *ABS*	00000000 _gp
0800628c g     O .rwdata	00000180 alt_fd_list
08004ae0 g     F .text	00000090 alt_find_dev
080010c4 g     F .text	00000138 memcpy
08004510 g     F .text	00000050 alt_up_character_lcd_write_fd
08001ce4 g     F .text	0000000c _cleanup_r
08004f30 g     F .text	00000078 alt_io_redirect
080059d0 g       *ABS*	00000000 __DTOR_END__
080002e4 g     F .text	00000014 puts
08003de0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08002fd4 g     F .text	000000a4 isatty
080055a0 g     F .text	0000008c alt_icache_flush
08008f70 g     O .bss	00000004 __malloc_top_pad
08000390 g     F .text	000004a4 __sfvwrite_r
080018f8 g     F .text	00000054 _sbrk_r
08002cdc g     F .text	0000005c _read_r
080074b8 g     O .rwdata	00000004 alt_max_fd
08002ac0 g     F .text	00000100 _fclose_r
08001ca4 g     F .text	00000030 fflush
08008f6c g     O .bss	00000004 __malloc_max_sbrked_mem
080031ac g     F .text	000000d4 lseek
08007498 g     O .rwdata	00000004 _global_impure_ptr
08001358 g     F .text	000005a0 _realloc_r
080090b8 g       *ABS*	00000000 __bss_end
08004d80 g     F .text	000000f0 alt_iic_isr_register
080052b4 g     F .text	00000104 alt_tick
08002044 g     F .text	00000018 __fp_lock_all
08004d34 g     F .text	0000004c alt_ic_irq_enabled
0800521c g     F .text	00000098 alt_alarm_stop
08008f84 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08006264 g     O .rwdata	00000028 alt_dev_null
080047a4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08004918 g     F .text	0000001c alt_dcache_flush_all
080074d0 g       *ABS*	00000000 __ram_rwdata_end
080074b0 g     O .rwdata	00000008 alt_dev_list
080035e4 g     F .text	000000f8 write
08005a38 g       *ABS*	00000000 __ram_rodata_end
08002ed4 g     F .text	000000b0 fstat
080090b8 g       *ABS*	00000000 end
0800391c g     F .text	000000c4 altera_avalon_jtag_uart_init
080059d0 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08004278 g     F .text	00000088 alt_avalon_timer_sc_init
08003fec g     F .text	00000218 altera_avalon_jtag_uart_write
08002034 g     F .text	00000004 __sfp_lock_acquire
08000fdc g     F .text	000000e8 memchr
08004424 g     F .text	00000078 alt_up_character_lcd_write
08002198 g     F .text	000002f0 _free_r
08005808 g     F .text	00000194 __call_exitprocs
080074a0 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08008f88 g     O .bss	00000004 _alt_tick_rate
08008f8c g     O .bss	00000004 _alt_nticks
08003388 g     F .text	000000fc read
08003748 g     F .text	00000070 alt_sys_init
0800465c g     F .text	00000088 alt_up_character_lcd_shift_display
080056f4 g     F .text	00000114 __register_exitproc
080046e4 g     F .text	0000008c alt_up_character_lcd_erase_pos
08003c8c g     F .text	00000068 altera_avalon_jtag_uart_close
08005a38 g       *ABS*	00000000 __ram_rwdata_start
080059d0 g       *ABS*	00000000 __ram_rodata_start
08008f90 g     O .bss	00000028 __malloc_current_mallinfo
080037b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080054ec g     F .text	000000b4 alt_get_fd
08002a6c g     F .text	00000054 _close_r
08005678 g     F .text	0000007c memcmp
08003878 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080090b8 g       *ABS*	00000000 __alt_stack_base
080038c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800194c g     F .text	00000130 __swsetup_r
08001ef4 g     F .text	00000118 __sfp
08005e5c g     O .rwdata	00000408 __malloc_av_
08002040 g     F .text	00000004 __sinit_lock_release
080028d4 g     F .text	00000054 __sread
080053d8 g     F .text	00000114 alt_find_file
08004984 g     F .text	000000a4 alt_dev_llist_insert
080032f8 g     F .text	00000020 __malloc_lock
080034e4 g     F .text	000000b0 sbrk
08001a7c g     F .text	00000228 _fflush_r
08008f68 g       *ABS*	00000000 __bss_start
080027b0 g     F .text	00000124 memset
080001f8 g     F .text	00000034 main
08008f80 g     O .bss	00000004 alt_envp
08008f68 g     O .bss	00000004 __malloc_max_total_mem
08003818 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080045d4 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08002a08 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08002bc0 g     F .text	00000014 fclose
08000834 g     F .text	000007a8 _malloc_r
080074bc g     O .rwdata	00000004 alt_errno
08002488 g     F .text	000000b8 _fwalk
080043e4 g     F .text	00000040 alt_up_character_lcd_open_dev
08002074 g     F .text	00000124 _malloc_trim_r
080059d0 g       *ABS*	00000000 __CTOR_END__
080043b0 g     F .text	00000034 alt_up_character_lcd_init
080059d0 g       *ABS*	00000000 __flash_rodata_start
080059d0 g       *ABS*	00000000 __DTOR_LIST__
08003714 g     F .text	00000034 alt_irq_init
08003484 g     F .text	00000060 alt_release_fd
08004770 g     F .text	00000034 alt_up_character_lcd_cursor_off
0800562c g     F .text	00000014 atexit
08002a10 g     F .text	0000005c _write_r
0800749c g     O .rwdata	00000004 _impure_ptr
08008f78 g     O .bss	00000004 alt_argc
08004a84 g     F .text	0000005c _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
0800205c g     F .text	00000018 __fp_unlock_all
080074a8 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004ba0 g     F .text	00000050 alt_ic_isr_register
080074d0 g       *ABS*	00000000 _edata
080090b8 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
08003cf4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08004c90 g     F .text	000000a4 alt_ic_irq_disable
08002930 g     F .text	0000007c __swrite
080074a4 g     O .rwdata	00000004 __malloc_trim_threshold
080053b8 g     F .text	00000020 altera_nios2_qsys_irq_init
08005640 g     F .text	00000038 exit
08002540 g     F .text	000000b8 _fwalk_reent
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08002038 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800449c g     F .text	00000074 alt_up_character_lcd_string
0800599c g     F .text	00000034 _exit
080047d8 g     F .text	00000140 alt_alarm_start
080025f8 g     F .text	000001b8 __smakebuf_r
080002f8 g     F .text	00000098 strlen
080050c4 g     F .text	00000158 open
08004b70 g     F .text	00000030 alt_icache_flush_all
08004560 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080074c4 g     O .rwdata	00000004 alt_priority_mask
08004bf0 g     F .text	000000a0 alt_ic_irq_enable
080074c8 g     O .rwdata	00000008 alt_alarm_list
08004a28 g     F .text	0000005c _do_ctors
08002d88 g     F .text	000000d0 close
080030dc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0800203c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10a3ee04 	addi	r2,r2,-28744
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10a3ee04 	addi	r2,r2,-28744
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001c8:	d6bd2614 	ori	gp,gp,62616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d0:	10a3da14 	ori	r2,r2,36712

    movhi r3, %hi(__bss_end)
 80001d4:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001d8:	18e42e14 	ori	r3,r3,37048

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80030dc0 	call	80030dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80032800 	call	8003280 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:
 */

#include <stdio.h>

int main()
{
 80001f8:	defffe04 	addi	sp,sp,-8
 80001fc:	dfc00115 	stw	ra,4(sp)
 8000200:	df000015 	stw	fp,0(sp)
 8000204:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 8000208:	01020034 	movhi	r4,2048
 800020c:	21167404 	addi	r4,r4,22992
 8000210:	80002e40 	call	80002e4 <puts>

  return 0;
 8000214:	0005883a 	mov	r2,zero
}
 8000218:	e037883a 	mov	sp,fp
 800021c:	dfc00117 	ldw	ra,4(sp)
 8000220:	df000017 	ldw	fp,0(sp)
 8000224:	dec00204 	addi	sp,sp,8
 8000228:	f800283a 	ret

0800022c <_puts_r>:
 800022c:	defff604 	addi	sp,sp,-40
 8000230:	dc000715 	stw	r16,28(sp)
 8000234:	2021883a 	mov	r16,r4
 8000238:	2809883a 	mov	r4,r5
 800023c:	dc400815 	stw	r17,32(sp)
 8000240:	dfc00915 	stw	ra,36(sp)
 8000244:	2823883a 	mov	r17,r5
 8000248:	80002f80 	call	80002f8 <strlen>
 800024c:	00c20034 	movhi	r3,2048
 8000250:	18dd2704 	addi	r3,r3,29852
 8000254:	18c00017 	ldw	r3,0(r3)
 8000258:	11000044 	addi	r4,r2,1
 800025c:	d8800115 	stw	r2,4(sp)
 8000260:	18c00217 	ldw	r3,8(r3)
 8000264:	01420034 	movhi	r5,2048
 8000268:	29567904 	addi	r5,r5,23012
 800026c:	1880030b 	ldhu	r2,12(r3)
 8000270:	d9400215 	stw	r5,8(sp)
 8000274:	d9000615 	stw	r4,24(sp)
 8000278:	01400044 	movi	r5,1
 800027c:	01000084 	movi	r4,2
 8000280:	d9000515 	stw	r4,20(sp)
 8000284:	dc400015 	stw	r17,0(sp)
 8000288:	d9400315 	stw	r5,12(sp)
 800028c:	dec00415 	stw	sp,16(sp)
 8000290:	1108000c 	andi	r4,r2,8192
 8000294:	2000061e 	bne	r4,zero,80002b0 <_puts_r+0x84>
 8000298:	19401917 	ldw	r5,100(r3)
 800029c:	0137ffc4 	movi	r4,-8193
 80002a0:	10880014 	ori	r2,r2,8192
 80002a4:	2908703a 	and	r4,r5,r4
 80002a8:	1880030d 	sth	r2,12(r3)
 80002ac:	19001915 	stw	r4,100(r3)
 80002b0:	81400217 	ldw	r5,8(r16)
 80002b4:	8009883a 	mov	r4,r16
 80002b8:	d9800404 	addi	r6,sp,16
 80002bc:	80003900 	call	8000390 <__sfvwrite_r>
 80002c0:	1000061e 	bne	r2,zero,80002dc <_puts_r+0xb0>
 80002c4:	00800284 	movi	r2,10
 80002c8:	dfc00917 	ldw	ra,36(sp)
 80002cc:	dc400817 	ldw	r17,32(sp)
 80002d0:	dc000717 	ldw	r16,28(sp)
 80002d4:	dec00a04 	addi	sp,sp,40
 80002d8:	f800283a 	ret
 80002dc:	00bfffc4 	movi	r2,-1
 80002e0:	003ff906 	br	80002c8 <__alt_data_end+0xfc0002c8>

080002e4 <puts>:
 80002e4:	00820034 	movhi	r2,2048
 80002e8:	109d2704 	addi	r2,r2,29852
 80002ec:	200b883a 	mov	r5,r4
 80002f0:	11000017 	ldw	r4,0(r2)
 80002f4:	800022c1 	jmpi	800022c <_puts_r>

080002f8 <strlen>:
 80002f8:	208000cc 	andi	r2,r4,3
 80002fc:	10002026 	beq	r2,zero,8000380 <strlen+0x88>
 8000300:	20800007 	ldb	r2,0(r4)
 8000304:	10002026 	beq	r2,zero,8000388 <strlen+0x90>
 8000308:	2005883a 	mov	r2,r4
 800030c:	00000206 	br	8000318 <strlen+0x20>
 8000310:	10c00007 	ldb	r3,0(r2)
 8000314:	18001826 	beq	r3,zero,8000378 <strlen+0x80>
 8000318:	10800044 	addi	r2,r2,1
 800031c:	10c000cc 	andi	r3,r2,3
 8000320:	183ffb1e 	bne	r3,zero,8000310 <__alt_data_end+0xfc000310>
 8000324:	10c00017 	ldw	r3,0(r2)
 8000328:	01ffbff4 	movhi	r7,65279
 800032c:	39ffbfc4 	addi	r7,r7,-257
 8000330:	00ca303a 	nor	r5,zero,r3
 8000334:	01a02074 	movhi	r6,32897
 8000338:	19c7883a 	add	r3,r3,r7
 800033c:	31a02004 	addi	r6,r6,-32640
 8000340:	1946703a 	and	r3,r3,r5
 8000344:	1986703a 	and	r3,r3,r6
 8000348:	1800091e 	bne	r3,zero,8000370 <strlen+0x78>
 800034c:	10800104 	addi	r2,r2,4
 8000350:	10c00017 	ldw	r3,0(r2)
 8000354:	19cb883a 	add	r5,r3,r7
 8000358:	00c6303a 	nor	r3,zero,r3
 800035c:	28c6703a 	and	r3,r5,r3
 8000360:	1986703a 	and	r3,r3,r6
 8000364:	183ff926 	beq	r3,zero,800034c <__alt_data_end+0xfc00034c>
 8000368:	00000106 	br	8000370 <strlen+0x78>
 800036c:	10800044 	addi	r2,r2,1
 8000370:	10c00007 	ldb	r3,0(r2)
 8000374:	183ffd1e 	bne	r3,zero,800036c <__alt_data_end+0xfc00036c>
 8000378:	1105c83a 	sub	r2,r2,r4
 800037c:	f800283a 	ret
 8000380:	2005883a 	mov	r2,r4
 8000384:	003fe706 	br	8000324 <__alt_data_end+0xfc000324>
 8000388:	0005883a 	mov	r2,zero
 800038c:	f800283a 	ret

08000390 <__sfvwrite_r>:
 8000390:	30800217 	ldw	r2,8(r6)
 8000394:	10004526 	beq	r2,zero,80004ac <__sfvwrite_r+0x11c>
 8000398:	28c0030b 	ldhu	r3,12(r5)
 800039c:	defff404 	addi	sp,sp,-48
 80003a0:	dd400715 	stw	r21,28(sp)
 80003a4:	dcc00515 	stw	r19,20(sp)
 80003a8:	dc000215 	stw	r16,8(sp)
 80003ac:	dfc00b15 	stw	ra,44(sp)
 80003b0:	df000a15 	stw	fp,40(sp)
 80003b4:	ddc00915 	stw	r23,36(sp)
 80003b8:	dd800815 	stw	r22,32(sp)
 80003bc:	dd000615 	stw	r20,24(sp)
 80003c0:	dc800415 	stw	r18,16(sp)
 80003c4:	dc400315 	stw	r17,12(sp)
 80003c8:	1880020c 	andi	r2,r3,8
 80003cc:	2821883a 	mov	r16,r5
 80003d0:	202b883a 	mov	r21,r4
 80003d4:	3027883a 	mov	r19,r6
 80003d8:	10002526 	beq	r2,zero,8000470 <__sfvwrite_r+0xe0>
 80003dc:	28800417 	ldw	r2,16(r5)
 80003e0:	10002326 	beq	r2,zero,8000470 <__sfvwrite_r+0xe0>
 80003e4:	1880008c 	andi	r2,r3,2
 80003e8:	9c400017 	ldw	r17,0(r19)
 80003ec:	10003126 	beq	r2,zero,80004b4 <__sfvwrite_r+0x124>
 80003f0:	0029883a 	mov	r20,zero
 80003f4:	0025883a 	mov	r18,zero
 80003f8:	05810004 	movi	r22,1024
 80003fc:	a00d883a 	mov	r6,r20
 8000400:	a809883a 	mov	r4,r21
 8000404:	90002526 	beq	r18,zero,800049c <__sfvwrite_r+0x10c>
 8000408:	900f883a 	mov	r7,r18
 800040c:	81400717 	ldw	r5,28(r16)
 8000410:	b480012e 	bgeu	r22,r18,8000418 <__sfvwrite_r+0x88>
 8000414:	01c10004 	movi	r7,1024
 8000418:	80800917 	ldw	r2,36(r16)
 800041c:	103ee83a 	callr	r2
 8000420:	0080510e 	bge	zero,r2,8000568 <__sfvwrite_r+0x1d8>
 8000424:	98c00217 	ldw	r3,8(r19)
 8000428:	a0a9883a 	add	r20,r20,r2
 800042c:	90a5c83a 	sub	r18,r18,r2
 8000430:	1885c83a 	sub	r2,r3,r2
 8000434:	98800215 	stw	r2,8(r19)
 8000438:	103ff01e 	bne	r2,zero,80003fc <__alt_data_end+0xfc0003fc>
 800043c:	0005883a 	mov	r2,zero
 8000440:	dfc00b17 	ldw	ra,44(sp)
 8000444:	df000a17 	ldw	fp,40(sp)
 8000448:	ddc00917 	ldw	r23,36(sp)
 800044c:	dd800817 	ldw	r22,32(sp)
 8000450:	dd400717 	ldw	r21,28(sp)
 8000454:	dd000617 	ldw	r20,24(sp)
 8000458:	dcc00517 	ldw	r19,20(sp)
 800045c:	dc800417 	ldw	r18,16(sp)
 8000460:	dc400317 	ldw	r17,12(sp)
 8000464:	dc000217 	ldw	r16,8(sp)
 8000468:	dec00c04 	addi	sp,sp,48
 800046c:	f800283a 	ret
 8000470:	a809883a 	mov	r4,r21
 8000474:	800b883a 	mov	r5,r16
 8000478:	800194c0 	call	800194c <__swsetup_r>
 800047c:	80c0030b 	ldhu	r3,12(r16)
 8000480:	103fd826 	beq	r2,zero,80003e4 <__alt_data_end+0xfc0003e4>
 8000484:	18c01014 	ori	r3,r3,64
 8000488:	80c0030d 	sth	r3,12(r16)
 800048c:	00c00244 	movi	r3,9
 8000490:	00bfffc4 	movi	r2,-1
 8000494:	a8c00015 	stw	r3,0(r21)
 8000498:	003fe906 	br	8000440 <__alt_data_end+0xfc000440>
 800049c:	8d000017 	ldw	r20,0(r17)
 80004a0:	8c800117 	ldw	r18,4(r17)
 80004a4:	8c400204 	addi	r17,r17,8
 80004a8:	003fd406 	br	80003fc <__alt_data_end+0xfc0003fc>
 80004ac:	0005883a 	mov	r2,zero
 80004b0:	f800283a 	ret
 80004b4:	1880004c 	andi	r2,r3,1
 80004b8:	1000301e 	bne	r2,zero,800057c <__sfvwrite_r+0x1ec>
 80004bc:	002f883a 	mov	r23,zero
 80004c0:	0025883a 	mov	r18,zero
 80004c4:	90001c26 	beq	r18,zero,8000538 <__sfvwrite_r+0x1a8>
 80004c8:	1880800c 	andi	r2,r3,512
 80004cc:	85000217 	ldw	r20,8(r16)
 80004d0:	10006c26 	beq	r2,zero,8000684 <__sfvwrite_r+0x2f4>
 80004d4:	a02d883a 	mov	r22,r20
 80004d8:	95008536 	bltu	r18,r20,80006f0 <__sfvwrite_r+0x360>
 80004dc:	1881200c 	andi	r2,r3,1152
 80004e0:	10009d1e 	bne	r2,zero,8000758 <__sfvwrite_r+0x3c8>
 80004e4:	81000017 	ldw	r4,0(r16)
 80004e8:	a039883a 	mov	fp,r20
 80004ec:	9029883a 	mov	r20,r18
 80004f0:	b80b883a 	mov	r5,r23
 80004f4:	b00d883a 	mov	r6,r22
 80004f8:	80011fc0 	call	80011fc <memmove>
 80004fc:	80c00217 	ldw	r3,8(r16)
 8000500:	81000017 	ldw	r4,0(r16)
 8000504:	9005883a 	mov	r2,r18
 8000508:	1f39c83a 	sub	fp,r3,fp
 800050c:	258f883a 	add	r7,r4,r22
 8000510:	87000215 	stw	fp,8(r16)
 8000514:	81c00015 	stw	r7,0(r16)
 8000518:	98c00217 	ldw	r3,8(r19)
 800051c:	b8af883a 	add	r23,r23,r2
 8000520:	90a5c83a 	sub	r18,r18,r2
 8000524:	1d05c83a 	sub	r2,r3,r20
 8000528:	98800215 	stw	r2,8(r19)
 800052c:	103fc326 	beq	r2,zero,800043c <__alt_data_end+0xfc00043c>
 8000530:	80c0030b 	ldhu	r3,12(r16)
 8000534:	903fe41e 	bne	r18,zero,80004c8 <__alt_data_end+0xfc0004c8>
 8000538:	8dc00017 	ldw	r23,0(r17)
 800053c:	8c800117 	ldw	r18,4(r17)
 8000540:	8c400204 	addi	r17,r17,8
 8000544:	003fdf06 	br	80004c4 <__alt_data_end+0xfc0004c4>
 8000548:	80013580 	call	8001358 <_realloc_r>
 800054c:	102d883a 	mov	r22,r2
 8000550:	1000a01e 	bne	r2,zero,80007d4 <__sfvwrite_r+0x444>
 8000554:	81400417 	ldw	r5,16(r16)
 8000558:	a809883a 	mov	r4,r21
 800055c:	80021980 	call	8002198 <_free_r>
 8000560:	00800304 	movi	r2,12
 8000564:	a8800015 	stw	r2,0(r21)
 8000568:	80c0030b 	ldhu	r3,12(r16)
 800056c:	00bfffc4 	movi	r2,-1
 8000570:	18c01014 	ori	r3,r3,64
 8000574:	80c0030d 	sth	r3,12(r16)
 8000578:	003fb106 	br	8000440 <__alt_data_end+0xfc000440>
 800057c:	0029883a 	mov	r20,zero
 8000580:	0011883a 	mov	r8,zero
 8000584:	0039883a 	mov	fp,zero
 8000588:	0025883a 	mov	r18,zero
 800058c:	90001f26 	beq	r18,zero,800060c <__sfvwrite_r+0x27c>
 8000590:	40006826 	beq	r8,zero,8000734 <__sfvwrite_r+0x3a4>
 8000594:	a02f883a 	mov	r23,r20
 8000598:	9500012e 	bgeu	r18,r20,80005a0 <__sfvwrite_r+0x210>
 800059c:	902f883a 	mov	r23,r18
 80005a0:	81000017 	ldw	r4,0(r16)
 80005a4:	80800417 	ldw	r2,16(r16)
 80005a8:	b82d883a 	mov	r22,r23
 80005ac:	81800217 	ldw	r6,8(r16)
 80005b0:	81c00517 	ldw	r7,20(r16)
 80005b4:	1100022e 	bgeu	r2,r4,80005c0 <__sfvwrite_r+0x230>
 80005b8:	31c7883a 	add	r3,r6,r7
 80005bc:	1dc01816 	blt	r3,r23,8000620 <__sfvwrite_r+0x290>
 80005c0:	b9c03f16 	blt	r23,r7,80006c0 <__sfvwrite_r+0x330>
 80005c4:	80800917 	ldw	r2,36(r16)
 80005c8:	81400717 	ldw	r5,28(r16)
 80005cc:	a809883a 	mov	r4,r21
 80005d0:	da000115 	stw	r8,4(sp)
 80005d4:	e00d883a 	mov	r6,fp
 80005d8:	103ee83a 	callr	r2
 80005dc:	102d883a 	mov	r22,r2
 80005e0:	da000117 	ldw	r8,4(sp)
 80005e4:	00bfe00e 	bge	zero,r2,8000568 <__alt_data_end+0xfc000568>
 80005e8:	a5a9c83a 	sub	r20,r20,r22
 80005ec:	a0001f26 	beq	r20,zero,800066c <__sfvwrite_r+0x2dc>
 80005f0:	98800217 	ldw	r2,8(r19)
 80005f4:	e5b9883a 	add	fp,fp,r22
 80005f8:	95a5c83a 	sub	r18,r18,r22
 80005fc:	15adc83a 	sub	r22,r2,r22
 8000600:	9d800215 	stw	r22,8(r19)
 8000604:	b03f8d26 	beq	r22,zero,800043c <__alt_data_end+0xfc00043c>
 8000608:	903fe11e 	bne	r18,zero,8000590 <__alt_data_end+0xfc000590>
 800060c:	8f000017 	ldw	fp,0(r17)
 8000610:	8c800117 	ldw	r18,4(r17)
 8000614:	0011883a 	mov	r8,zero
 8000618:	8c400204 	addi	r17,r17,8
 800061c:	003fdb06 	br	800058c <__alt_data_end+0xfc00058c>
 8000620:	180d883a 	mov	r6,r3
 8000624:	e00b883a 	mov	r5,fp
 8000628:	da000115 	stw	r8,4(sp)
 800062c:	d8c00015 	stw	r3,0(sp)
 8000630:	80011fc0 	call	80011fc <memmove>
 8000634:	d8c00017 	ldw	r3,0(sp)
 8000638:	80800017 	ldw	r2,0(r16)
 800063c:	a809883a 	mov	r4,r21
 8000640:	800b883a 	mov	r5,r16
 8000644:	10c5883a 	add	r2,r2,r3
 8000648:	80800015 	stw	r2,0(r16)
 800064c:	d8c00015 	stw	r3,0(sp)
 8000650:	8001a7c0 	call	8001a7c <_fflush_r>
 8000654:	d8c00017 	ldw	r3,0(sp)
 8000658:	da000117 	ldw	r8,4(sp)
 800065c:	103fc21e 	bne	r2,zero,8000568 <__alt_data_end+0xfc000568>
 8000660:	182d883a 	mov	r22,r3
 8000664:	a5a9c83a 	sub	r20,r20,r22
 8000668:	a03fe11e 	bne	r20,zero,80005f0 <__alt_data_end+0xfc0005f0>
 800066c:	a809883a 	mov	r4,r21
 8000670:	800b883a 	mov	r5,r16
 8000674:	8001a7c0 	call	8001a7c <_fflush_r>
 8000678:	103fbb1e 	bne	r2,zero,8000568 <__alt_data_end+0xfc000568>
 800067c:	0011883a 	mov	r8,zero
 8000680:	003fdb06 	br	80005f0 <__alt_data_end+0xfc0005f0>
 8000684:	81000017 	ldw	r4,0(r16)
 8000688:	80800417 	ldw	r2,16(r16)
 800068c:	1100012e 	bgeu	r2,r4,8000694 <__sfvwrite_r+0x304>
 8000690:	a4805a36 	bltu	r20,r18,80007fc <__sfvwrite_r+0x46c>
 8000694:	81c00517 	ldw	r7,20(r16)
 8000698:	91c01a36 	bltu	r18,r7,8000704 <__sfvwrite_r+0x374>
 800069c:	80800917 	ldw	r2,36(r16)
 80006a0:	81400717 	ldw	r5,28(r16)
 80006a4:	a809883a 	mov	r4,r21
 80006a8:	b80d883a 	mov	r6,r23
 80006ac:	103ee83a 	callr	r2
 80006b0:	1029883a 	mov	r20,r2
 80006b4:	00bfac0e 	bge	zero,r2,8000568 <__alt_data_end+0xfc000568>
 80006b8:	a005883a 	mov	r2,r20
 80006bc:	003f9606 	br	8000518 <__alt_data_end+0xfc000518>
 80006c0:	b80d883a 	mov	r6,r23
 80006c4:	e00b883a 	mov	r5,fp
 80006c8:	da000115 	stw	r8,4(sp)
 80006cc:	80011fc0 	call	80011fc <memmove>
 80006d0:	80800217 	ldw	r2,8(r16)
 80006d4:	80c00017 	ldw	r3,0(r16)
 80006d8:	da000117 	ldw	r8,4(sp)
 80006dc:	15c5c83a 	sub	r2,r2,r23
 80006e0:	1def883a 	add	r23,r3,r23
 80006e4:	80800215 	stw	r2,8(r16)
 80006e8:	85c00015 	stw	r23,0(r16)
 80006ec:	003fbe06 	br	80005e8 <__alt_data_end+0xfc0005e8>
 80006f0:	81000017 	ldw	r4,0(r16)
 80006f4:	9039883a 	mov	fp,r18
 80006f8:	9029883a 	mov	r20,r18
 80006fc:	902d883a 	mov	r22,r18
 8000700:	003f7b06 	br	80004f0 <__alt_data_end+0xfc0004f0>
 8000704:	b80b883a 	mov	r5,r23
 8000708:	900d883a 	mov	r6,r18
 800070c:	80011fc0 	call	80011fc <memmove>
 8000710:	80c00217 	ldw	r3,8(r16)
 8000714:	80800017 	ldw	r2,0(r16)
 8000718:	9029883a 	mov	r20,r18
 800071c:	1c87c83a 	sub	r3,r3,r18
 8000720:	1485883a 	add	r2,r2,r18
 8000724:	80800015 	stw	r2,0(r16)
 8000728:	80c00215 	stw	r3,8(r16)
 800072c:	9005883a 	mov	r2,r18
 8000730:	003f7906 	br	8000518 <__alt_data_end+0xfc000518>
 8000734:	e009883a 	mov	r4,fp
 8000738:	01400284 	movi	r5,10
 800073c:	900d883a 	mov	r6,r18
 8000740:	8000fdc0 	call	8000fdc <memchr>
 8000744:	10003826 	beq	r2,zero,8000828 <__sfvwrite_r+0x498>
 8000748:	10800044 	addi	r2,r2,1
 800074c:	1729c83a 	sub	r20,r2,fp
 8000750:	02000044 	movi	r8,1
 8000754:	003f8f06 	br	8000594 <__alt_data_end+0xfc000594>
 8000758:	80800517 	ldw	r2,20(r16)
 800075c:	81400417 	ldw	r5,16(r16)
 8000760:	87000017 	ldw	fp,0(r16)
 8000764:	10a9883a 	add	r20,r2,r2
 8000768:	a085883a 	add	r2,r20,r2
 800076c:	1028d7fa 	srli	r20,r2,31
 8000770:	e179c83a 	sub	fp,fp,r5
 8000774:	e1000044 	addi	r4,fp,1
 8000778:	a085883a 	add	r2,r20,r2
 800077c:	1029d07a 	srai	r20,r2,1
 8000780:	2485883a 	add	r2,r4,r18
 8000784:	a00d883a 	mov	r6,r20
 8000788:	a080022e 	bgeu	r20,r2,8000794 <__sfvwrite_r+0x404>
 800078c:	1029883a 	mov	r20,r2
 8000790:	100d883a 	mov	r6,r2
 8000794:	18c1000c 	andi	r3,r3,1024
 8000798:	a809883a 	mov	r4,r21
 800079c:	183f6a26 	beq	r3,zero,8000548 <__alt_data_end+0xfc000548>
 80007a0:	300b883a 	mov	r5,r6
 80007a4:	80008340 	call	8000834 <_malloc_r>
 80007a8:	102d883a 	mov	r22,r2
 80007ac:	103f6c26 	beq	r2,zero,8000560 <__alt_data_end+0xfc000560>
 80007b0:	81400417 	ldw	r5,16(r16)
 80007b4:	1009883a 	mov	r4,r2
 80007b8:	e00d883a 	mov	r6,fp
 80007bc:	80010c40 	call	80010c4 <memcpy>
 80007c0:	8080030b 	ldhu	r2,12(r16)
 80007c4:	00fedfc4 	movi	r3,-1153
 80007c8:	10c4703a 	and	r2,r2,r3
 80007cc:	10802014 	ori	r2,r2,128
 80007d0:	8080030d 	sth	r2,12(r16)
 80007d4:	b709883a 	add	r4,r22,fp
 80007d8:	a707c83a 	sub	r3,r20,fp
 80007dc:	85800415 	stw	r22,16(r16)
 80007e0:	85000515 	stw	r20,20(r16)
 80007e4:	81000015 	stw	r4,0(r16)
 80007e8:	9039883a 	mov	fp,r18
 80007ec:	80c00215 	stw	r3,8(r16)
 80007f0:	9029883a 	mov	r20,r18
 80007f4:	902d883a 	mov	r22,r18
 80007f8:	003f3d06 	br	80004f0 <__alt_data_end+0xfc0004f0>
 80007fc:	b80b883a 	mov	r5,r23
 8000800:	a00d883a 	mov	r6,r20
 8000804:	80011fc0 	call	80011fc <memmove>
 8000808:	80800017 	ldw	r2,0(r16)
 800080c:	a809883a 	mov	r4,r21
 8000810:	800b883a 	mov	r5,r16
 8000814:	1505883a 	add	r2,r2,r20
 8000818:	80800015 	stw	r2,0(r16)
 800081c:	8001a7c0 	call	8001a7c <_fflush_r>
 8000820:	103fa526 	beq	r2,zero,80006b8 <__alt_data_end+0xfc0006b8>
 8000824:	003f5006 	br	8000568 <__alt_data_end+0xfc000568>
 8000828:	95000044 	addi	r20,r18,1
 800082c:	02000044 	movi	r8,1
 8000830:	003f5806 	br	8000594 <__alt_data_end+0xfc000594>

08000834 <_malloc_r>:
 8000834:	defff504 	addi	sp,sp,-44
 8000838:	dc800315 	stw	r18,12(sp)
 800083c:	dfc00a15 	stw	ra,40(sp)
 8000840:	df000915 	stw	fp,36(sp)
 8000844:	ddc00815 	stw	r23,32(sp)
 8000848:	dd800715 	stw	r22,28(sp)
 800084c:	dd400615 	stw	r21,24(sp)
 8000850:	dd000515 	stw	r20,20(sp)
 8000854:	dcc00415 	stw	r19,16(sp)
 8000858:	dc400215 	stw	r17,8(sp)
 800085c:	dc000115 	stw	r16,4(sp)
 8000860:	288002c4 	addi	r2,r5,11
 8000864:	00c00584 	movi	r3,22
 8000868:	2025883a 	mov	r18,r4
 800086c:	18802a2e 	bgeu	r3,r2,8000918 <_malloc_r+0xe4>
 8000870:	047ffe04 	movi	r17,-8
 8000874:	1462703a 	and	r17,r2,r17
 8000878:	88009e16 	blt	r17,zero,8000af4 <_malloc_r+0x2c0>
 800087c:	89409d36 	bltu	r17,r5,8000af4 <_malloc_r+0x2c0>
 8000880:	80032f80 	call	80032f8 <__malloc_lock>
 8000884:	00807dc4 	movi	r2,503
 8000888:	14402736 	bltu	r2,r17,8000928 <_malloc_r+0xf4>
 800088c:	8806d0fa 	srli	r3,r17,3
 8000890:	04c20034 	movhi	r19,2048
 8000894:	9cd79704 	addi	r19,r19,24156
 8000898:	18c5883a 	add	r2,r3,r3
 800089c:	1085883a 	add	r2,r2,r2
 80008a0:	1085883a 	add	r2,r2,r2
 80008a4:	9885883a 	add	r2,r19,r2
 80008a8:	14000317 	ldw	r16,12(r2)
 80008ac:	80814a26 	beq	r16,r2,8000dd8 <_malloc_r+0x5a4>
 80008b0:	80c00117 	ldw	r3,4(r16)
 80008b4:	81000317 	ldw	r4,12(r16)
 80008b8:	00bfff04 	movi	r2,-4
 80008bc:	1884703a 	and	r2,r3,r2
 80008c0:	81400217 	ldw	r5,8(r16)
 80008c4:	8085883a 	add	r2,r16,r2
 80008c8:	10c00117 	ldw	r3,4(r2)
 80008cc:	29000315 	stw	r4,12(r5)
 80008d0:	21400215 	stw	r5,8(r4)
 80008d4:	18c00054 	ori	r3,r3,1
 80008d8:	10c00115 	stw	r3,4(r2)
 80008dc:	9009883a 	mov	r4,r18
 80008e0:	80033180 	call	8003318 <__malloc_unlock>
 80008e4:	80800204 	addi	r2,r16,8
 80008e8:	dfc00a17 	ldw	ra,40(sp)
 80008ec:	df000917 	ldw	fp,36(sp)
 80008f0:	ddc00817 	ldw	r23,32(sp)
 80008f4:	dd800717 	ldw	r22,28(sp)
 80008f8:	dd400617 	ldw	r21,24(sp)
 80008fc:	dd000517 	ldw	r20,20(sp)
 8000900:	dcc00417 	ldw	r19,16(sp)
 8000904:	dc800317 	ldw	r18,12(sp)
 8000908:	dc400217 	ldw	r17,8(sp)
 800090c:	dc000117 	ldw	r16,4(sp)
 8000910:	dec00b04 	addi	sp,sp,44
 8000914:	f800283a 	ret
 8000918:	04400404 	movi	r17,16
 800091c:	89407536 	bltu	r17,r5,8000af4 <_malloc_r+0x2c0>
 8000920:	80032f80 	call	80032f8 <__malloc_lock>
 8000924:	003fd906 	br	800088c <__alt_data_end+0xfc00088c>
 8000928:	8806d27a 	srli	r3,r17,9
 800092c:	18007526 	beq	r3,zero,8000b04 <_malloc_r+0x2d0>
 8000930:	00800104 	movi	r2,4
 8000934:	10c0ef36 	bltu	r2,r3,8000cf4 <_malloc_r+0x4c0>
 8000938:	8806d1ba 	srli	r3,r17,6
 800093c:	19c00e04 	addi	r7,r3,56
 8000940:	39cb883a 	add	r5,r7,r7
 8000944:	04c20034 	movhi	r19,2048
 8000948:	294b883a 	add	r5,r5,r5
 800094c:	9cd79704 	addi	r19,r19,24156
 8000950:	294b883a 	add	r5,r5,r5
 8000954:	994b883a 	add	r5,r19,r5
 8000958:	2c000317 	ldw	r16,12(r5)
 800095c:	2c000e26 	beq	r5,r16,8000998 <_malloc_r+0x164>
 8000960:	80800117 	ldw	r2,4(r16)
 8000964:	01bfff04 	movi	r6,-4
 8000968:	010003c4 	movi	r4,15
 800096c:	1184703a 	and	r2,r2,r6
 8000970:	1447c83a 	sub	r3,r2,r17
 8000974:	20c00716 	blt	r4,r3,8000994 <_malloc_r+0x160>
 8000978:	1800650e 	bge	r3,zero,8000b10 <_malloc_r+0x2dc>
 800097c:	84000317 	ldw	r16,12(r16)
 8000980:	2c000526 	beq	r5,r16,8000998 <_malloc_r+0x164>
 8000984:	80800117 	ldw	r2,4(r16)
 8000988:	1184703a 	and	r2,r2,r6
 800098c:	1447c83a 	sub	r3,r2,r17
 8000990:	20fff90e 	bge	r4,r3,8000978 <__alt_data_end+0xfc000978>
 8000994:	39ffffc4 	addi	r7,r7,-1
 8000998:	38c00044 	addi	r3,r7,1
 800099c:	01820034 	movhi	r6,2048
 80009a0:	9c000417 	ldw	r16,16(r19)
 80009a4:	31979704 	addi	r6,r6,24156
 80009a8:	32400204 	addi	r9,r6,8
 80009ac:	82410326 	beq	r16,r9,8000dbc <_malloc_r+0x588>
 80009b0:	81000117 	ldw	r4,4(r16)
 80009b4:	00bfff04 	movi	r2,-4
 80009b8:	208e703a 	and	r7,r4,r2
 80009bc:	3c45c83a 	sub	r2,r7,r17
 80009c0:	010003c4 	movi	r4,15
 80009c4:	2080ee16 	blt	r4,r2,8000d80 <_malloc_r+0x54c>
 80009c8:	32400515 	stw	r9,20(r6)
 80009cc:	32400415 	stw	r9,16(r6)
 80009d0:	1000510e 	bge	r2,zero,8000b18 <_malloc_r+0x2e4>
 80009d4:	00807fc4 	movi	r2,511
 80009d8:	11c0ce36 	bltu	r2,r7,8000d14 <_malloc_r+0x4e0>
 80009dc:	3808d0fa 	srli	r4,r7,3
 80009e0:	01c00044 	movi	r7,1
 80009e4:	30800117 	ldw	r2,4(r6)
 80009e8:	210b883a 	add	r5,r4,r4
 80009ec:	294b883a 	add	r5,r5,r5
 80009f0:	2009d0ba 	srai	r4,r4,2
 80009f4:	294b883a 	add	r5,r5,r5
 80009f8:	298b883a 	add	r5,r5,r6
 80009fc:	2a000217 	ldw	r8,8(r5)
 8000a00:	3908983a 	sll	r4,r7,r4
 8000a04:	81400315 	stw	r5,12(r16)
 8000a08:	82000215 	stw	r8,8(r16)
 8000a0c:	2088b03a 	or	r4,r4,r2
 8000a10:	2c000215 	stw	r16,8(r5)
 8000a14:	31000115 	stw	r4,4(r6)
 8000a18:	44000315 	stw	r16,12(r8)
 8000a1c:	1805d0ba 	srai	r2,r3,2
 8000a20:	01400044 	movi	r5,1
 8000a24:	288a983a 	sll	r5,r5,r2
 8000a28:	21404336 	bltu	r4,r5,8000b38 <_malloc_r+0x304>
 8000a2c:	2144703a 	and	r2,r4,r5
 8000a30:	10000a1e 	bne	r2,zero,8000a5c <_malloc_r+0x228>
 8000a34:	00bfff04 	movi	r2,-4
 8000a38:	294b883a 	add	r5,r5,r5
 8000a3c:	1886703a 	and	r3,r3,r2
 8000a40:	2144703a 	and	r2,r4,r5
 8000a44:	18c00104 	addi	r3,r3,4
 8000a48:	1000041e 	bne	r2,zero,8000a5c <_malloc_r+0x228>
 8000a4c:	294b883a 	add	r5,r5,r5
 8000a50:	2144703a 	and	r2,r4,r5
 8000a54:	18c00104 	addi	r3,r3,4
 8000a58:	103ffc26 	beq	r2,zero,8000a4c <__alt_data_end+0xfc000a4c>
 8000a5c:	023fff04 	movi	r8,-4
 8000a60:	01c003c4 	movi	r7,15
 8000a64:	18c5883a 	add	r2,r3,r3
 8000a68:	1085883a 	add	r2,r2,r2
 8000a6c:	1085883a 	add	r2,r2,r2
 8000a70:	9895883a 	add	r10,r19,r2
 8000a74:	52c00304 	addi	r11,r10,12
 8000a78:	1819883a 	mov	r12,r3
 8000a7c:	5c000017 	ldw	r16,0(r11)
 8000a80:	59bffd04 	addi	r6,r11,-12
 8000a84:	8180041e 	bne	r16,r6,8000a98 <_malloc_r+0x264>
 8000a88:	0000ce06 	br	8000dc4 <_malloc_r+0x590>
 8000a8c:	2000d70e 	bge	r4,zero,8000dec <_malloc_r+0x5b8>
 8000a90:	84000317 	ldw	r16,12(r16)
 8000a94:	8180cb26 	beq	r16,r6,8000dc4 <_malloc_r+0x590>
 8000a98:	80800117 	ldw	r2,4(r16)
 8000a9c:	1204703a 	and	r2,r2,r8
 8000aa0:	1449c83a 	sub	r4,r2,r17
 8000aa4:	393ff90e 	bge	r7,r4,8000a8c <__alt_data_end+0xfc000a8c>
 8000aa8:	80800317 	ldw	r2,12(r16)
 8000aac:	80c00217 	ldw	r3,8(r16)
 8000ab0:	89400054 	ori	r5,r17,1
 8000ab4:	81400115 	stw	r5,4(r16)
 8000ab8:	18800315 	stw	r2,12(r3)
 8000abc:	10c00215 	stw	r3,8(r2)
 8000ac0:	8463883a 	add	r17,r16,r17
 8000ac4:	9c400515 	stw	r17,20(r19)
 8000ac8:	9c400415 	stw	r17,16(r19)
 8000acc:	20800054 	ori	r2,r4,1
 8000ad0:	88800115 	stw	r2,4(r17)
 8000ad4:	8a400315 	stw	r9,12(r17)
 8000ad8:	8a400215 	stw	r9,8(r17)
 8000adc:	8923883a 	add	r17,r17,r4
 8000ae0:	89000015 	stw	r4,0(r17)
 8000ae4:	9009883a 	mov	r4,r18
 8000ae8:	80033180 	call	8003318 <__malloc_unlock>
 8000aec:	80800204 	addi	r2,r16,8
 8000af0:	003f7d06 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000af4:	00800304 	movi	r2,12
 8000af8:	90800015 	stw	r2,0(r18)
 8000afc:	0005883a 	mov	r2,zero
 8000b00:	003f7906 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000b04:	01401f84 	movi	r5,126
 8000b08:	01c00fc4 	movi	r7,63
 8000b0c:	003f8d06 	br	8000944 <__alt_data_end+0xfc000944>
 8000b10:	81000317 	ldw	r4,12(r16)
 8000b14:	003f6a06 	br	80008c0 <__alt_data_end+0xfc0008c0>
 8000b18:	81c5883a 	add	r2,r16,r7
 8000b1c:	10c00117 	ldw	r3,4(r2)
 8000b20:	9009883a 	mov	r4,r18
 8000b24:	18c00054 	ori	r3,r3,1
 8000b28:	10c00115 	stw	r3,4(r2)
 8000b2c:	80033180 	call	8003318 <__malloc_unlock>
 8000b30:	80800204 	addi	r2,r16,8
 8000b34:	003f6c06 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000b38:	9c000217 	ldw	r16,8(r19)
 8000b3c:	00bfff04 	movi	r2,-4
 8000b40:	85800117 	ldw	r22,4(r16)
 8000b44:	b0ac703a 	and	r22,r22,r2
 8000b48:	b4400336 	bltu	r22,r17,8000b58 <_malloc_r+0x324>
 8000b4c:	b445c83a 	sub	r2,r22,r17
 8000b50:	00c003c4 	movi	r3,15
 8000b54:	18805d16 	blt	r3,r2,8000ccc <_malloc_r+0x498>
 8000b58:	05c20034 	movhi	r23,2048
 8000b5c:	00820074 	movhi	r2,2049
 8000b60:	bddd2804 	addi	r23,r23,29856
 8000b64:	10a3dc04 	addi	r2,r2,-28816
 8000b68:	15400017 	ldw	r21,0(r2)
 8000b6c:	b9000017 	ldw	r4,0(r23)
 8000b70:	00ffffc4 	movi	r3,-1
 8000b74:	858d883a 	add	r6,r16,r22
 8000b78:	8d6b883a 	add	r21,r17,r21
 8000b7c:	20c0e426 	beq	r4,r3,8000f10 <_malloc_r+0x6dc>
 8000b80:	ad4403c4 	addi	r21,r21,4111
 8000b84:	00fc0004 	movi	r3,-4096
 8000b88:	a8ea703a 	and	r21,r21,r3
 8000b8c:	9009883a 	mov	r4,r18
 8000b90:	a80b883a 	mov	r5,r21
 8000b94:	d9800015 	stw	r6,0(sp)
 8000b98:	80018f80 	call	80018f8 <_sbrk_r>
 8000b9c:	00ffffc4 	movi	r3,-1
 8000ba0:	1029883a 	mov	r20,r2
 8000ba4:	d9800017 	ldw	r6,0(sp)
 8000ba8:	10c0a426 	beq	r2,r3,8000e3c <_malloc_r+0x608>
 8000bac:	1180a236 	bltu	r2,r6,8000e38 <_malloc_r+0x604>
 8000bb0:	07020074 	movhi	fp,2049
 8000bb4:	e723e404 	addi	fp,fp,-28784
 8000bb8:	e0c00017 	ldw	r3,0(fp)
 8000bbc:	a8c7883a 	add	r3,r21,r3
 8000bc0:	e0c00015 	stw	r3,0(fp)
 8000bc4:	3500da26 	beq	r6,r20,8000f30 <_malloc_r+0x6fc>
 8000bc8:	b9000017 	ldw	r4,0(r23)
 8000bcc:	00bfffc4 	movi	r2,-1
 8000bd0:	2080e426 	beq	r4,r2,8000f64 <_malloc_r+0x730>
 8000bd4:	a185c83a 	sub	r2,r20,r6
 8000bd8:	1885883a 	add	r2,r3,r2
 8000bdc:	e0800015 	stw	r2,0(fp)
 8000be0:	a0c001cc 	andi	r3,r20,7
 8000be4:	1800b526 	beq	r3,zero,8000ebc <_malloc_r+0x688>
 8000be8:	a0e9c83a 	sub	r20,r20,r3
 8000bec:	00840204 	movi	r2,4104
 8000bf0:	a5000204 	addi	r20,r20,8
 8000bf4:	10c7c83a 	sub	r3,r2,r3
 8000bf8:	a545883a 	add	r2,r20,r21
 8000bfc:	1083ffcc 	andi	r2,r2,4095
 8000c00:	18abc83a 	sub	r21,r3,r2
 8000c04:	9009883a 	mov	r4,r18
 8000c08:	a80b883a 	mov	r5,r21
 8000c0c:	80018f80 	call	80018f8 <_sbrk_r>
 8000c10:	00ffffc4 	movi	r3,-1
 8000c14:	10c0d026 	beq	r2,r3,8000f58 <_malloc_r+0x724>
 8000c18:	1507c83a 	sub	r3,r2,r20
 8000c1c:	a8c7883a 	add	r3,r21,r3
 8000c20:	18c00054 	ori	r3,r3,1
 8000c24:	e0800017 	ldw	r2,0(fp)
 8000c28:	9d000215 	stw	r20,8(r19)
 8000c2c:	a0c00115 	stw	r3,4(r20)
 8000c30:	a887883a 	add	r3,r21,r2
 8000c34:	e0c00015 	stw	r3,0(fp)
 8000c38:	84c00e26 	beq	r16,r19,8000c74 <_malloc_r+0x440>
 8000c3c:	018003c4 	movi	r6,15
 8000c40:	3580a02e 	bgeu	r6,r22,8000ec4 <_malloc_r+0x690>
 8000c44:	81400117 	ldw	r5,4(r16)
 8000c48:	013ffe04 	movi	r4,-8
 8000c4c:	b0bffd04 	addi	r2,r22,-12
 8000c50:	1104703a 	and	r2,r2,r4
 8000c54:	2900004c 	andi	r4,r5,1
 8000c58:	1108b03a 	or	r4,r2,r4
 8000c5c:	81000115 	stw	r4,4(r16)
 8000c60:	01400144 	movi	r5,5
 8000c64:	8089883a 	add	r4,r16,r2
 8000c68:	21400115 	stw	r5,4(r4)
 8000c6c:	21400215 	stw	r5,8(r4)
 8000c70:	3080c036 	bltu	r6,r2,8000f74 <_malloc_r+0x740>
 8000c74:	00820074 	movhi	r2,2049
 8000c78:	10a3db04 	addi	r2,r2,-28820
 8000c7c:	11000017 	ldw	r4,0(r2)
 8000c80:	20c0012e 	bgeu	r4,r3,8000c88 <_malloc_r+0x454>
 8000c84:	10c00015 	stw	r3,0(r2)
 8000c88:	00820074 	movhi	r2,2049
 8000c8c:	10a3da04 	addi	r2,r2,-28824
 8000c90:	11000017 	ldw	r4,0(r2)
 8000c94:	9c000217 	ldw	r16,8(r19)
 8000c98:	20c0012e 	bgeu	r4,r3,8000ca0 <_malloc_r+0x46c>
 8000c9c:	10c00015 	stw	r3,0(r2)
 8000ca0:	80c00117 	ldw	r3,4(r16)
 8000ca4:	00bfff04 	movi	r2,-4
 8000ca8:	1886703a 	and	r3,r3,r2
 8000cac:	1c45c83a 	sub	r2,r3,r17
 8000cb0:	1c400236 	bltu	r3,r17,8000cbc <_malloc_r+0x488>
 8000cb4:	00c003c4 	movi	r3,15
 8000cb8:	18800416 	blt	r3,r2,8000ccc <_malloc_r+0x498>
 8000cbc:	9009883a 	mov	r4,r18
 8000cc0:	80033180 	call	8003318 <__malloc_unlock>
 8000cc4:	0005883a 	mov	r2,zero
 8000cc8:	003f0706 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000ccc:	88c00054 	ori	r3,r17,1
 8000cd0:	80c00115 	stw	r3,4(r16)
 8000cd4:	8463883a 	add	r17,r16,r17
 8000cd8:	10800054 	ori	r2,r2,1
 8000cdc:	9c400215 	stw	r17,8(r19)
 8000ce0:	88800115 	stw	r2,4(r17)
 8000ce4:	9009883a 	mov	r4,r18
 8000ce8:	80033180 	call	8003318 <__malloc_unlock>
 8000cec:	80800204 	addi	r2,r16,8
 8000cf0:	003efd06 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000cf4:	00800504 	movi	r2,20
 8000cf8:	10c0482e 	bgeu	r2,r3,8000e1c <_malloc_r+0x5e8>
 8000cfc:	00801504 	movi	r2,84
 8000d00:	10c06836 	bltu	r2,r3,8000ea4 <_malloc_r+0x670>
 8000d04:	8806d33a 	srli	r3,r17,12
 8000d08:	19c01b84 	addi	r7,r3,110
 8000d0c:	39cb883a 	add	r5,r7,r7
 8000d10:	003f0c06 	br	8000944 <__alt_data_end+0xfc000944>
 8000d14:	3804d27a 	srli	r2,r7,9
 8000d18:	01000104 	movi	r4,4
 8000d1c:	2080422e 	bgeu	r4,r2,8000e28 <_malloc_r+0x5f4>
 8000d20:	01000504 	movi	r4,20
 8000d24:	20807c36 	bltu	r4,r2,8000f18 <_malloc_r+0x6e4>
 8000d28:	110016c4 	addi	r4,r2,91
 8000d2c:	210b883a 	add	r5,r4,r4
 8000d30:	294b883a 	add	r5,r5,r5
 8000d34:	294b883a 	add	r5,r5,r5
 8000d38:	994b883a 	add	r5,r19,r5
 8000d3c:	28800217 	ldw	r2,8(r5)
 8000d40:	02020034 	movhi	r8,2048
 8000d44:	42179704 	addi	r8,r8,24156
 8000d48:	11406326 	beq	r2,r5,8000ed8 <_malloc_r+0x6a4>
 8000d4c:	01bfff04 	movi	r6,-4
 8000d50:	11000117 	ldw	r4,4(r2)
 8000d54:	2188703a 	and	r4,r4,r6
 8000d58:	3900022e 	bgeu	r7,r4,8000d64 <_malloc_r+0x530>
 8000d5c:	10800217 	ldw	r2,8(r2)
 8000d60:	28bffb1e 	bne	r5,r2,8000d50 <__alt_data_end+0xfc000d50>
 8000d64:	11800317 	ldw	r6,12(r2)
 8000d68:	99000117 	ldw	r4,4(r19)
 8000d6c:	81800315 	stw	r6,12(r16)
 8000d70:	80800215 	stw	r2,8(r16)
 8000d74:	34000215 	stw	r16,8(r6)
 8000d78:	14000315 	stw	r16,12(r2)
 8000d7c:	003f2706 	br	8000a1c <__alt_data_end+0xfc000a1c>
 8000d80:	88c00054 	ori	r3,r17,1
 8000d84:	80c00115 	stw	r3,4(r16)
 8000d88:	8463883a 	add	r17,r16,r17
 8000d8c:	34400515 	stw	r17,20(r6)
 8000d90:	34400415 	stw	r17,16(r6)
 8000d94:	10c00054 	ori	r3,r2,1
 8000d98:	8a400315 	stw	r9,12(r17)
 8000d9c:	8a400215 	stw	r9,8(r17)
 8000da0:	88c00115 	stw	r3,4(r17)
 8000da4:	88a3883a 	add	r17,r17,r2
 8000da8:	88800015 	stw	r2,0(r17)
 8000dac:	9009883a 	mov	r4,r18
 8000db0:	80033180 	call	8003318 <__malloc_unlock>
 8000db4:	80800204 	addi	r2,r16,8
 8000db8:	003ecb06 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000dbc:	31000117 	ldw	r4,4(r6)
 8000dc0:	003f1606 	br	8000a1c <__alt_data_end+0xfc000a1c>
 8000dc4:	63000044 	addi	r12,r12,1
 8000dc8:	608000cc 	andi	r2,r12,3
 8000dcc:	5ac00204 	addi	r11,r11,8
 8000dd0:	103f2a1e 	bne	r2,zero,8000a7c <__alt_data_end+0xfc000a7c>
 8000dd4:	00002106 	br	8000e5c <_malloc_r+0x628>
 8000dd8:	80800204 	addi	r2,r16,8
 8000ddc:	84000517 	ldw	r16,20(r16)
 8000de0:	143eb31e 	bne	r2,r16,80008b0 <__alt_data_end+0xfc0008b0>
 8000de4:	18c00084 	addi	r3,r3,2
 8000de8:	003eec06 	br	800099c <__alt_data_end+0xfc00099c>
 8000dec:	8085883a 	add	r2,r16,r2
 8000df0:	10c00117 	ldw	r3,4(r2)
 8000df4:	81000317 	ldw	r4,12(r16)
 8000df8:	81400217 	ldw	r5,8(r16)
 8000dfc:	18c00054 	ori	r3,r3,1
 8000e00:	10c00115 	stw	r3,4(r2)
 8000e04:	29000315 	stw	r4,12(r5)
 8000e08:	21400215 	stw	r5,8(r4)
 8000e0c:	9009883a 	mov	r4,r18
 8000e10:	80033180 	call	8003318 <__malloc_unlock>
 8000e14:	80800204 	addi	r2,r16,8
 8000e18:	003eb306 	br	80008e8 <__alt_data_end+0xfc0008e8>
 8000e1c:	19c016c4 	addi	r7,r3,91
 8000e20:	39cb883a 	add	r5,r7,r7
 8000e24:	003ec706 	br	8000944 <__alt_data_end+0xfc000944>
 8000e28:	3804d1ba 	srli	r2,r7,6
 8000e2c:	11000e04 	addi	r4,r2,56
 8000e30:	210b883a 	add	r5,r4,r4
 8000e34:	003fbe06 	br	8000d30 <__alt_data_end+0xfc000d30>
 8000e38:	84ff5d26 	beq	r16,r19,8000bb0 <__alt_data_end+0xfc000bb0>
 8000e3c:	9c000217 	ldw	r16,8(r19)
 8000e40:	00bfff04 	movi	r2,-4
 8000e44:	80c00117 	ldw	r3,4(r16)
 8000e48:	1886703a 	and	r3,r3,r2
 8000e4c:	003f9706 	br	8000cac <__alt_data_end+0xfc000cac>
 8000e50:	52800017 	ldw	r10,0(r10)
 8000e54:	18ffffc4 	addi	r3,r3,-1
 8000e58:	50805c1e 	bne	r10,r2,8000fcc <_malloc_r+0x798>
 8000e5c:	190000cc 	andi	r4,r3,3
 8000e60:	50bffe04 	addi	r2,r10,-8
 8000e64:	203ffa1e 	bne	r4,zero,8000e50 <__alt_data_end+0xfc000e50>
 8000e68:	98800117 	ldw	r2,4(r19)
 8000e6c:	0146303a 	nor	r3,zero,r5
 8000e70:	1884703a 	and	r2,r3,r2
 8000e74:	98800115 	stw	r2,4(r19)
 8000e78:	294b883a 	add	r5,r5,r5
 8000e7c:	117f2e36 	bltu	r2,r5,8000b38 <__alt_data_end+0xfc000b38>
 8000e80:	283f2d26 	beq	r5,zero,8000b38 <__alt_data_end+0xfc000b38>
 8000e84:	1146703a 	and	r3,r2,r5
 8000e88:	1800521e 	bne	r3,zero,8000fd4 <_malloc_r+0x7a0>
 8000e8c:	6007883a 	mov	r3,r12
 8000e90:	294b883a 	add	r5,r5,r5
 8000e94:	1148703a 	and	r4,r2,r5
 8000e98:	18c00104 	addi	r3,r3,4
 8000e9c:	203ffc26 	beq	r4,zero,8000e90 <__alt_data_end+0xfc000e90>
 8000ea0:	003ef006 	br	8000a64 <__alt_data_end+0xfc000a64>
 8000ea4:	00805504 	movi	r2,340
 8000ea8:	10c01336 	bltu	r2,r3,8000ef8 <_malloc_r+0x6c4>
 8000eac:	8806d3fa 	srli	r3,r17,15
 8000eb0:	19c01dc4 	addi	r7,r3,119
 8000eb4:	39cb883a 	add	r5,r7,r7
 8000eb8:	003ea206 	br	8000944 <__alt_data_end+0xfc000944>
 8000ebc:	00c40004 	movi	r3,4096
 8000ec0:	003f4d06 	br	8000bf8 <__alt_data_end+0xfc000bf8>
 8000ec4:	00800044 	movi	r2,1
 8000ec8:	a0800115 	stw	r2,4(r20)
 8000ecc:	a021883a 	mov	r16,r20
 8000ed0:	0007883a 	mov	r3,zero
 8000ed4:	003f7506 	br	8000cac <__alt_data_end+0xfc000cac>
 8000ed8:	200bd0ba 	srai	r5,r4,2
 8000edc:	01800044 	movi	r6,1
 8000ee0:	41000117 	ldw	r4,4(r8)
 8000ee4:	314a983a 	sll	r5,r6,r5
 8000ee8:	100d883a 	mov	r6,r2
 8000eec:	2908b03a 	or	r4,r5,r4
 8000ef0:	41000115 	stw	r4,4(r8)
 8000ef4:	003f9d06 	br	8000d6c <__alt_data_end+0xfc000d6c>
 8000ef8:	00815504 	movi	r2,1364
 8000efc:	10c01336 	bltu	r2,r3,8000f4c <_malloc_r+0x718>
 8000f00:	8806d4ba 	srli	r3,r17,18
 8000f04:	19c01f04 	addi	r7,r3,124
 8000f08:	39cb883a 	add	r5,r7,r7
 8000f0c:	003e8d06 	br	8000944 <__alt_data_end+0xfc000944>
 8000f10:	ad400404 	addi	r21,r21,16
 8000f14:	003f1d06 	br	8000b8c <__alt_data_end+0xfc000b8c>
 8000f18:	01001504 	movi	r4,84
 8000f1c:	20801c36 	bltu	r4,r2,8000f90 <_malloc_r+0x75c>
 8000f20:	3804d33a 	srli	r2,r7,12
 8000f24:	11001b84 	addi	r4,r2,110
 8000f28:	210b883a 	add	r5,r4,r4
 8000f2c:	003f8006 	br	8000d30 <__alt_data_end+0xfc000d30>
 8000f30:	3083ffcc 	andi	r2,r6,4095
 8000f34:	103f241e 	bne	r2,zero,8000bc8 <__alt_data_end+0xfc000bc8>
 8000f38:	99000217 	ldw	r4,8(r19)
 8000f3c:	ad85883a 	add	r2,r21,r22
 8000f40:	10800054 	ori	r2,r2,1
 8000f44:	20800115 	stw	r2,4(r4)
 8000f48:	003f4a06 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000f4c:	01403f04 	movi	r5,252
 8000f50:	01c01f84 	movi	r7,126
 8000f54:	003e7b06 	br	8000944 <__alt_data_end+0xfc000944>
 8000f58:	00c00044 	movi	r3,1
 8000f5c:	002b883a 	mov	r21,zero
 8000f60:	003f3006 	br	8000c24 <__alt_data_end+0xfc000c24>
 8000f64:	00820034 	movhi	r2,2048
 8000f68:	109d2804 	addi	r2,r2,29856
 8000f6c:	15000015 	stw	r20,0(r2)
 8000f70:	003f1b06 	br	8000be0 <__alt_data_end+0xfc000be0>
 8000f74:	9009883a 	mov	r4,r18
 8000f78:	81400204 	addi	r5,r16,8
 8000f7c:	80021980 	call	8002198 <_free_r>
 8000f80:	00820074 	movhi	r2,2049
 8000f84:	10a3e404 	addi	r2,r2,-28784
 8000f88:	10c00017 	ldw	r3,0(r2)
 8000f8c:	003f3906 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000f90:	01005504 	movi	r4,340
 8000f94:	20800436 	bltu	r4,r2,8000fa8 <_malloc_r+0x774>
 8000f98:	3804d3fa 	srli	r2,r7,15
 8000f9c:	11001dc4 	addi	r4,r2,119
 8000fa0:	210b883a 	add	r5,r4,r4
 8000fa4:	003f6206 	br	8000d30 <__alt_data_end+0xfc000d30>
 8000fa8:	01015504 	movi	r4,1364
 8000fac:	20800436 	bltu	r4,r2,8000fc0 <_malloc_r+0x78c>
 8000fb0:	3804d4ba 	srli	r2,r7,18
 8000fb4:	11001f04 	addi	r4,r2,124
 8000fb8:	210b883a 	add	r5,r4,r4
 8000fbc:	003f5c06 	br	8000d30 <__alt_data_end+0xfc000d30>
 8000fc0:	01403f04 	movi	r5,252
 8000fc4:	01001f84 	movi	r4,126
 8000fc8:	003f5906 	br	8000d30 <__alt_data_end+0xfc000d30>
 8000fcc:	98800117 	ldw	r2,4(r19)
 8000fd0:	003fa906 	br	8000e78 <__alt_data_end+0xfc000e78>
 8000fd4:	6007883a 	mov	r3,r12
 8000fd8:	003ea206 	br	8000a64 <__alt_data_end+0xfc000a64>

08000fdc <memchr>:
 8000fdc:	208000cc 	andi	r2,r4,3
 8000fe0:	280f883a 	mov	r7,r5
 8000fe4:	10003526 	beq	r2,zero,80010bc <memchr+0xe0>
 8000fe8:	30bfffc4 	addi	r2,r6,-1
 8000fec:	30001b26 	beq	r6,zero,800105c <memchr+0x80>
 8000ff0:	21800003 	ldbu	r6,0(r4)
 8000ff4:	28c03fcc 	andi	r3,r5,255
 8000ff8:	30c01a26 	beq	r6,r3,8001064 <memchr+0x88>
 8000ffc:	180d883a 	mov	r6,r3
 8001000:	00000406 	br	8001014 <memchr+0x38>
 8001004:	10001526 	beq	r2,zero,800105c <memchr+0x80>
 8001008:	20c00003 	ldbu	r3,0(r4)
 800100c:	10bfffc4 	addi	r2,r2,-1
 8001010:	19801426 	beq	r3,r6,8001064 <memchr+0x88>
 8001014:	21000044 	addi	r4,r4,1
 8001018:	20c000cc 	andi	r3,r4,3
 800101c:	183ff91e 	bne	r3,zero,8001004 <__alt_data_end+0xfc001004>
 8001020:	024000c4 	movi	r9,3
 8001024:	48801136 	bltu	r9,r2,800106c <memchr+0x90>
 8001028:	10000c26 	beq	r2,zero,800105c <memchr+0x80>
 800102c:	20c00003 	ldbu	r3,0(r4)
 8001030:	29403fcc 	andi	r5,r5,255
 8001034:	19400b26 	beq	r3,r5,8001064 <memchr+0x88>
 8001038:	20c00044 	addi	r3,r4,1
 800103c:	2085883a 	add	r2,r4,r2
 8001040:	39803fcc 	andi	r6,r7,255
 8001044:	00000306 	br	8001054 <memchr+0x78>
 8001048:	18c00044 	addi	r3,r3,1
 800104c:	197fffc3 	ldbu	r5,-1(r3)
 8001050:	29800426 	beq	r5,r6,8001064 <memchr+0x88>
 8001054:	1809883a 	mov	r4,r3
 8001058:	18bffb1e 	bne	r3,r2,8001048 <__alt_data_end+0xfc001048>
 800105c:	0005883a 	mov	r2,zero
 8001060:	f800283a 	ret
 8001064:	2005883a 	mov	r2,r4
 8001068:	f800283a 	ret
 800106c:	28c03fcc 	andi	r3,r5,255
 8001070:	1810923a 	slli	r8,r3,8
 8001074:	02ffbff4 	movhi	r11,65279
 8001078:	02a02074 	movhi	r10,32897
 800107c:	40c6b03a 	or	r3,r8,r3
 8001080:	1810943a 	slli	r8,r3,16
 8001084:	5affbfc4 	addi	r11,r11,-257
 8001088:	52a02004 	addi	r10,r10,-32640
 800108c:	40d0b03a 	or	r8,r8,r3
 8001090:	20c00017 	ldw	r3,0(r4)
 8001094:	40c6f03a 	xor	r3,r8,r3
 8001098:	1acd883a 	add	r6,r3,r11
 800109c:	00c6303a 	nor	r3,zero,r3
 80010a0:	30c6703a 	and	r3,r6,r3
 80010a4:	1a86703a 	and	r3,r3,r10
 80010a8:	183fdf1e 	bne	r3,zero,8001028 <__alt_data_end+0xfc001028>
 80010ac:	10bfff04 	addi	r2,r2,-4
 80010b0:	21000104 	addi	r4,r4,4
 80010b4:	48bff636 	bltu	r9,r2,8001090 <__alt_data_end+0xfc001090>
 80010b8:	003fdb06 	br	8001028 <__alt_data_end+0xfc001028>
 80010bc:	3005883a 	mov	r2,r6
 80010c0:	003fd706 	br	8001020 <__alt_data_end+0xfc001020>

080010c4 <memcpy>:
 80010c4:	deffff04 	addi	sp,sp,-4
 80010c8:	dc000015 	stw	r16,0(sp)
 80010cc:	00c003c4 	movi	r3,15
 80010d0:	2005883a 	mov	r2,r4
 80010d4:	1980432e 	bgeu	r3,r6,80011e4 <memcpy+0x120>
 80010d8:	2146b03a 	or	r3,r4,r5
 80010dc:	18c000cc 	andi	r3,r3,3
 80010e0:	1800421e 	bne	r3,zero,80011ec <memcpy+0x128>
 80010e4:	343ffc04 	addi	r16,r6,-16
 80010e8:	8020d13a 	srli	r16,r16,4
 80010ec:	28c00104 	addi	r3,r5,4
 80010f0:	23400104 	addi	r13,r4,4
 80010f4:	801e913a 	slli	r15,r16,4
 80010f8:	2b000204 	addi	r12,r5,8
 80010fc:	22c00204 	addi	r11,r4,8
 8001100:	7bc00504 	addi	r15,r15,20
 8001104:	2a800304 	addi	r10,r5,12
 8001108:	22400304 	addi	r9,r4,12
 800110c:	2bdf883a 	add	r15,r5,r15
 8001110:	2811883a 	mov	r8,r5
 8001114:	200f883a 	mov	r7,r4
 8001118:	41000017 	ldw	r4,0(r8)
 800111c:	39c00404 	addi	r7,r7,16
 8001120:	18c00404 	addi	r3,r3,16
 8001124:	393ffc15 	stw	r4,-16(r7)
 8001128:	1bbffc17 	ldw	r14,-16(r3)
 800112c:	6b400404 	addi	r13,r13,16
 8001130:	5ac00404 	addi	r11,r11,16
 8001134:	6bbffc15 	stw	r14,-16(r13)
 8001138:	63800017 	ldw	r14,0(r12)
 800113c:	4a400404 	addi	r9,r9,16
 8001140:	42000404 	addi	r8,r8,16
 8001144:	5bbffc15 	stw	r14,-16(r11)
 8001148:	53800017 	ldw	r14,0(r10)
 800114c:	63000404 	addi	r12,r12,16
 8001150:	52800404 	addi	r10,r10,16
 8001154:	4bbffc15 	stw	r14,-16(r9)
 8001158:	1bffef1e 	bne	r3,r15,8001118 <__alt_data_end+0xfc001118>
 800115c:	81c00044 	addi	r7,r16,1
 8001160:	380e913a 	slli	r7,r7,4
 8001164:	310003cc 	andi	r4,r6,15
 8001168:	02c000c4 	movi	r11,3
 800116c:	11c7883a 	add	r3,r2,r7
 8001170:	29cb883a 	add	r5,r5,r7
 8001174:	59001f2e 	bgeu	r11,r4,80011f4 <memcpy+0x130>
 8001178:	1813883a 	mov	r9,r3
 800117c:	2811883a 	mov	r8,r5
 8001180:	200f883a 	mov	r7,r4
 8001184:	42800017 	ldw	r10,0(r8)
 8001188:	4a400104 	addi	r9,r9,4
 800118c:	39ffff04 	addi	r7,r7,-4
 8001190:	4abfff15 	stw	r10,-4(r9)
 8001194:	42000104 	addi	r8,r8,4
 8001198:	59fffa36 	bltu	r11,r7,8001184 <__alt_data_end+0xfc001184>
 800119c:	213fff04 	addi	r4,r4,-4
 80011a0:	2008d0ba 	srli	r4,r4,2
 80011a4:	318000cc 	andi	r6,r6,3
 80011a8:	21000044 	addi	r4,r4,1
 80011ac:	2109883a 	add	r4,r4,r4
 80011b0:	2109883a 	add	r4,r4,r4
 80011b4:	1907883a 	add	r3,r3,r4
 80011b8:	290b883a 	add	r5,r5,r4
 80011bc:	30000626 	beq	r6,zero,80011d8 <memcpy+0x114>
 80011c0:	198d883a 	add	r6,r3,r6
 80011c4:	29c00003 	ldbu	r7,0(r5)
 80011c8:	18c00044 	addi	r3,r3,1
 80011cc:	29400044 	addi	r5,r5,1
 80011d0:	19ffffc5 	stb	r7,-1(r3)
 80011d4:	19bffb1e 	bne	r3,r6,80011c4 <__alt_data_end+0xfc0011c4>
 80011d8:	dc000017 	ldw	r16,0(sp)
 80011dc:	dec00104 	addi	sp,sp,4
 80011e0:	f800283a 	ret
 80011e4:	2007883a 	mov	r3,r4
 80011e8:	003ff406 	br	80011bc <__alt_data_end+0xfc0011bc>
 80011ec:	2007883a 	mov	r3,r4
 80011f0:	003ff306 	br	80011c0 <__alt_data_end+0xfc0011c0>
 80011f4:	200d883a 	mov	r6,r4
 80011f8:	003ff006 	br	80011bc <__alt_data_end+0xfc0011bc>

080011fc <memmove>:
 80011fc:	2005883a 	mov	r2,r4
 8001200:	29000b2e 	bgeu	r5,r4,8001230 <memmove+0x34>
 8001204:	298f883a 	add	r7,r5,r6
 8001208:	21c0092e 	bgeu	r4,r7,8001230 <memmove+0x34>
 800120c:	2187883a 	add	r3,r4,r6
 8001210:	198bc83a 	sub	r5,r3,r6
 8001214:	30004b26 	beq	r6,zero,8001344 <memmove+0x148>
 8001218:	39ffffc4 	addi	r7,r7,-1
 800121c:	39000003 	ldbu	r4,0(r7)
 8001220:	18ffffc4 	addi	r3,r3,-1
 8001224:	19000005 	stb	r4,0(r3)
 8001228:	197ffb1e 	bne	r3,r5,8001218 <__alt_data_end+0xfc001218>
 800122c:	f800283a 	ret
 8001230:	00c003c4 	movi	r3,15
 8001234:	1980412e 	bgeu	r3,r6,800133c <memmove+0x140>
 8001238:	1146b03a 	or	r3,r2,r5
 800123c:	18c000cc 	andi	r3,r3,3
 8001240:	1800411e 	bne	r3,zero,8001348 <memmove+0x14c>
 8001244:	33fffc04 	addi	r15,r6,-16
 8001248:	781ed13a 	srli	r15,r15,4
 800124c:	28c00104 	addi	r3,r5,4
 8001250:	13400104 	addi	r13,r2,4
 8001254:	781c913a 	slli	r14,r15,4
 8001258:	2b000204 	addi	r12,r5,8
 800125c:	12c00204 	addi	r11,r2,8
 8001260:	73800504 	addi	r14,r14,20
 8001264:	2a800304 	addi	r10,r5,12
 8001268:	12400304 	addi	r9,r2,12
 800126c:	2b9d883a 	add	r14,r5,r14
 8001270:	2811883a 	mov	r8,r5
 8001274:	100f883a 	mov	r7,r2
 8001278:	41000017 	ldw	r4,0(r8)
 800127c:	39c00404 	addi	r7,r7,16
 8001280:	18c00404 	addi	r3,r3,16
 8001284:	393ffc15 	stw	r4,-16(r7)
 8001288:	193ffc17 	ldw	r4,-16(r3)
 800128c:	6b400404 	addi	r13,r13,16
 8001290:	5ac00404 	addi	r11,r11,16
 8001294:	693ffc15 	stw	r4,-16(r13)
 8001298:	61000017 	ldw	r4,0(r12)
 800129c:	4a400404 	addi	r9,r9,16
 80012a0:	42000404 	addi	r8,r8,16
 80012a4:	593ffc15 	stw	r4,-16(r11)
 80012a8:	51000017 	ldw	r4,0(r10)
 80012ac:	63000404 	addi	r12,r12,16
 80012b0:	52800404 	addi	r10,r10,16
 80012b4:	493ffc15 	stw	r4,-16(r9)
 80012b8:	1bbfef1e 	bne	r3,r14,8001278 <__alt_data_end+0xfc001278>
 80012bc:	79000044 	addi	r4,r15,1
 80012c0:	2008913a 	slli	r4,r4,4
 80012c4:	328003cc 	andi	r10,r6,15
 80012c8:	02c000c4 	movi	r11,3
 80012cc:	1107883a 	add	r3,r2,r4
 80012d0:	290b883a 	add	r5,r5,r4
 80012d4:	5a801e2e 	bgeu	r11,r10,8001350 <memmove+0x154>
 80012d8:	1813883a 	mov	r9,r3
 80012dc:	2811883a 	mov	r8,r5
 80012e0:	500f883a 	mov	r7,r10
 80012e4:	41000017 	ldw	r4,0(r8)
 80012e8:	4a400104 	addi	r9,r9,4
 80012ec:	39ffff04 	addi	r7,r7,-4
 80012f0:	493fff15 	stw	r4,-4(r9)
 80012f4:	42000104 	addi	r8,r8,4
 80012f8:	59fffa36 	bltu	r11,r7,80012e4 <__alt_data_end+0xfc0012e4>
 80012fc:	513fff04 	addi	r4,r10,-4
 8001300:	2008d0ba 	srli	r4,r4,2
 8001304:	318000cc 	andi	r6,r6,3
 8001308:	21000044 	addi	r4,r4,1
 800130c:	2109883a 	add	r4,r4,r4
 8001310:	2109883a 	add	r4,r4,r4
 8001314:	1907883a 	add	r3,r3,r4
 8001318:	290b883a 	add	r5,r5,r4
 800131c:	30000926 	beq	r6,zero,8001344 <memmove+0x148>
 8001320:	198d883a 	add	r6,r3,r6
 8001324:	29c00003 	ldbu	r7,0(r5)
 8001328:	18c00044 	addi	r3,r3,1
 800132c:	29400044 	addi	r5,r5,1
 8001330:	19ffffc5 	stb	r7,-1(r3)
 8001334:	19bffb1e 	bne	r3,r6,8001324 <__alt_data_end+0xfc001324>
 8001338:	f800283a 	ret
 800133c:	1007883a 	mov	r3,r2
 8001340:	003ff606 	br	800131c <__alt_data_end+0xfc00131c>
 8001344:	f800283a 	ret
 8001348:	1007883a 	mov	r3,r2
 800134c:	003ff406 	br	8001320 <__alt_data_end+0xfc001320>
 8001350:	500d883a 	mov	r6,r10
 8001354:	003ff106 	br	800131c <__alt_data_end+0xfc00131c>

08001358 <_realloc_r>:
 8001358:	defff604 	addi	sp,sp,-40
 800135c:	dcc00315 	stw	r19,12(sp)
 8001360:	dc400115 	stw	r17,4(sp)
 8001364:	dfc00915 	stw	ra,36(sp)
 8001368:	df000815 	stw	fp,32(sp)
 800136c:	ddc00715 	stw	r23,28(sp)
 8001370:	dd800615 	stw	r22,24(sp)
 8001374:	dd400515 	stw	r21,20(sp)
 8001378:	dd000415 	stw	r20,16(sp)
 800137c:	dc800215 	stw	r18,8(sp)
 8001380:	dc000015 	stw	r16,0(sp)
 8001384:	2827883a 	mov	r19,r5
 8001388:	3023883a 	mov	r17,r6
 800138c:	2800bf26 	beq	r5,zero,800168c <_realloc_r+0x334>
 8001390:	2025883a 	mov	r18,r4
 8001394:	80032f80 	call	80032f8 <__malloc_lock>
 8001398:	98ffff17 	ldw	r3,-4(r19)
 800139c:	01bfff04 	movi	r6,-4
 80013a0:	890002c4 	addi	r4,r17,11
 80013a4:	01c00584 	movi	r7,22
 80013a8:	9d7ffe04 	addi	r21,r19,-8
 80013ac:	19a0703a 	and	r16,r3,r6
 80013b0:	39003f2e 	bgeu	r7,r4,80014b0 <_realloc_r+0x158>
 80013b4:	053ffe04 	movi	r20,-8
 80013b8:	2528703a 	and	r20,r4,r20
 80013bc:	a00f883a 	mov	r7,r20
 80013c0:	a0008216 	blt	r20,zero,80015cc <_realloc_r+0x274>
 80013c4:	a4408136 	bltu	r20,r17,80015cc <_realloc_r+0x274>
 80013c8:	81c03c0e 	bge	r16,r7,80014bc <_realloc_r+0x164>
 80013cc:	07020034 	movhi	fp,2048
 80013d0:	e7179704 	addi	fp,fp,24156
 80013d4:	e1000217 	ldw	r4,8(fp)
 80013d8:	ac05883a 	add	r2,r21,r16
 80013dc:	2080bf26 	beq	r4,r2,80016dc <_realloc_r+0x384>
 80013e0:	11000117 	ldw	r4,4(r2)
 80013e4:	023fff84 	movi	r8,-2
 80013e8:	2210703a 	and	r8,r4,r8
 80013ec:	1211883a 	add	r8,r2,r8
 80013f0:	41400117 	ldw	r5,4(r8)
 80013f4:	2940004c 	andi	r5,r5,1
 80013f8:	28004a1e 	bne	r5,zero,8001524 <_realloc_r+0x1cc>
 80013fc:	017fff04 	movi	r5,-4
 8001400:	2148703a 	and	r4,r4,r5
 8001404:	2409883a 	add	r4,r4,r16
 8001408:	21c0ad0e 	bge	r4,r7,80016c0 <_realloc_r+0x368>
 800140c:	18c0004c 	andi	r3,r3,1
 8001410:	18007f1e 	bne	r3,zero,8001610 <_realloc_r+0x2b8>
 8001414:	9dfffe17 	ldw	r23,-8(r19)
 8001418:	adefc83a 	sub	r23,r21,r23
 800141c:	bd800117 	ldw	r22,4(r23)
 8001420:	b14a703a 	and	r5,r22,r5
 8001424:	216d883a 	add	r22,r4,r5
 8001428:	b1c04516 	blt	r22,r7,8001540 <_realloc_r+0x1e8>
 800142c:	10c00317 	ldw	r3,12(r2)
 8001430:	10800217 	ldw	r2,8(r2)
 8001434:	81bfff04 	addi	r6,r16,-4
 8001438:	bc400204 	addi	r17,r23,8
 800143c:	10c00315 	stw	r3,12(r2)
 8001440:	18800215 	stw	r2,8(r3)
 8001444:	b9400217 	ldw	r5,8(r23)
 8001448:	b8c00317 	ldw	r3,12(r23)
 800144c:	00800904 	movi	r2,36
 8001450:	28c00315 	stw	r3,12(r5)
 8001454:	19400215 	stw	r5,8(r3)
 8001458:	1180ef36 	bltu	r2,r6,8001818 <_realloc_r+0x4c0>
 800145c:	008004c4 	movi	r2,19
 8001460:	1180da2e 	bgeu	r2,r6,80017cc <_realloc_r+0x474>
 8001464:	98800017 	ldw	r2,0(r19)
 8001468:	b8800215 	stw	r2,8(r23)
 800146c:	98800117 	ldw	r2,4(r19)
 8001470:	b8800315 	stw	r2,12(r23)
 8001474:	008006c4 	movi	r2,27
 8001478:	1180fc2e 	bgeu	r2,r6,800186c <_realloc_r+0x514>
 800147c:	98800217 	ldw	r2,8(r19)
 8001480:	b8800415 	stw	r2,16(r23)
 8001484:	98800317 	ldw	r2,12(r19)
 8001488:	b8800515 	stw	r2,20(r23)
 800148c:	00800904 	movi	r2,36
 8001490:	3080421e 	bne	r6,r2,800159c <_realloc_r+0x244>
 8001494:	98800417 	ldw	r2,16(r19)
 8001498:	9cc00604 	addi	r19,r19,24
 800149c:	b8c00804 	addi	r3,r23,32
 80014a0:	b8800615 	stw	r2,24(r23)
 80014a4:	98bfff17 	ldw	r2,-4(r19)
 80014a8:	b8800715 	stw	r2,28(r23)
 80014ac:	00003d06 	br	80015a4 <_realloc_r+0x24c>
 80014b0:	01c00404 	movi	r7,16
 80014b4:	3829883a 	mov	r20,r7
 80014b8:	003fc206 	br	80013c4 <__alt_data_end+0xfc0013c4>
 80014bc:	9823883a 	mov	r17,r19
 80014c0:	850fc83a 	sub	r7,r16,r20
 80014c4:	008003c4 	movi	r2,15
 80014c8:	18c0004c 	andi	r3,r3,1
 80014cc:	11c04336 	bltu	r2,r7,80015dc <_realloc_r+0x284>
 80014d0:	1c06b03a 	or	r3,r3,r16
 80014d4:	a8c00115 	stw	r3,4(r21)
 80014d8:	ac21883a 	add	r16,r21,r16
 80014dc:	80c00117 	ldw	r3,4(r16)
 80014e0:	18c00054 	ori	r3,r3,1
 80014e4:	80c00115 	stw	r3,4(r16)
 80014e8:	9009883a 	mov	r4,r18
 80014ec:	80033180 	call	8003318 <__malloc_unlock>
 80014f0:	8805883a 	mov	r2,r17
 80014f4:	dfc00917 	ldw	ra,36(sp)
 80014f8:	df000817 	ldw	fp,32(sp)
 80014fc:	ddc00717 	ldw	r23,28(sp)
 8001500:	dd800617 	ldw	r22,24(sp)
 8001504:	dd400517 	ldw	r21,20(sp)
 8001508:	dd000417 	ldw	r20,16(sp)
 800150c:	dcc00317 	ldw	r19,12(sp)
 8001510:	dc800217 	ldw	r18,8(sp)
 8001514:	dc400117 	ldw	r17,4(sp)
 8001518:	dc000017 	ldw	r16,0(sp)
 800151c:	dec00a04 	addi	sp,sp,40
 8001520:	f800283a 	ret
 8001524:	18c0004c 	andi	r3,r3,1
 8001528:	1800391e 	bne	r3,zero,8001610 <_realloc_r+0x2b8>
 800152c:	9dfffe17 	ldw	r23,-8(r19)
 8001530:	00bfff04 	movi	r2,-4
 8001534:	adefc83a 	sub	r23,r21,r23
 8001538:	b9400117 	ldw	r5,4(r23)
 800153c:	288a703a 	and	r5,r5,r2
 8001540:	2c2d883a 	add	r22,r5,r16
 8001544:	b1c03216 	blt	r22,r7,8001610 <_realloc_r+0x2b8>
 8001548:	b8800317 	ldw	r2,12(r23)
 800154c:	b8c00217 	ldw	r3,8(r23)
 8001550:	81bfff04 	addi	r6,r16,-4
 8001554:	01000904 	movi	r4,36
 8001558:	18800315 	stw	r2,12(r3)
 800155c:	10c00215 	stw	r3,8(r2)
 8001560:	bc400204 	addi	r17,r23,8
 8001564:	2180ac36 	bltu	r4,r6,8001818 <_realloc_r+0x4c0>
 8001568:	008004c4 	movi	r2,19
 800156c:	1180972e 	bgeu	r2,r6,80017cc <_realloc_r+0x474>
 8001570:	98800017 	ldw	r2,0(r19)
 8001574:	b8800215 	stw	r2,8(r23)
 8001578:	98800117 	ldw	r2,4(r19)
 800157c:	b8800315 	stw	r2,12(r23)
 8001580:	008006c4 	movi	r2,27
 8001584:	1180b92e 	bgeu	r2,r6,800186c <_realloc_r+0x514>
 8001588:	98800217 	ldw	r2,8(r19)
 800158c:	b8800415 	stw	r2,16(r23)
 8001590:	98800317 	ldw	r2,12(r19)
 8001594:	b8800515 	stw	r2,20(r23)
 8001598:	313fbe26 	beq	r6,r4,8001494 <__alt_data_end+0xfc001494>
 800159c:	b8c00604 	addi	r3,r23,24
 80015a0:	9cc00404 	addi	r19,r19,16
 80015a4:	98800017 	ldw	r2,0(r19)
 80015a8:	b021883a 	mov	r16,r22
 80015ac:	b82b883a 	mov	r21,r23
 80015b0:	18800015 	stw	r2,0(r3)
 80015b4:	98800117 	ldw	r2,4(r19)
 80015b8:	18800115 	stw	r2,4(r3)
 80015bc:	98800217 	ldw	r2,8(r19)
 80015c0:	18800215 	stw	r2,8(r3)
 80015c4:	b8c00117 	ldw	r3,4(r23)
 80015c8:	003fbd06 	br	80014c0 <__alt_data_end+0xfc0014c0>
 80015cc:	00800304 	movi	r2,12
 80015d0:	90800015 	stw	r2,0(r18)
 80015d4:	0005883a 	mov	r2,zero
 80015d8:	003fc606 	br	80014f4 <__alt_data_end+0xfc0014f4>
 80015dc:	1d06b03a 	or	r3,r3,r20
 80015e0:	ad0b883a 	add	r5,r21,r20
 80015e4:	a8c00115 	stw	r3,4(r21)
 80015e8:	38800054 	ori	r2,r7,1
 80015ec:	28800115 	stw	r2,4(r5)
 80015f0:	29cf883a 	add	r7,r5,r7
 80015f4:	38800117 	ldw	r2,4(r7)
 80015f8:	9009883a 	mov	r4,r18
 80015fc:	29400204 	addi	r5,r5,8
 8001600:	10800054 	ori	r2,r2,1
 8001604:	38800115 	stw	r2,4(r7)
 8001608:	80021980 	call	8002198 <_free_r>
 800160c:	003fb606 	br	80014e8 <__alt_data_end+0xfc0014e8>
 8001610:	880b883a 	mov	r5,r17
 8001614:	9009883a 	mov	r4,r18
 8001618:	80008340 	call	8000834 <_malloc_r>
 800161c:	1023883a 	mov	r17,r2
 8001620:	1000aa26 	beq	r2,zero,80018cc <_realloc_r+0x574>
 8001624:	98ffff17 	ldw	r3,-4(r19)
 8001628:	113ffe04 	addi	r4,r2,-8
 800162c:	00bfff84 	movi	r2,-2
 8001630:	1884703a 	and	r2,r3,r2
 8001634:	a885883a 	add	r2,r21,r2
 8001638:	20808626 	beq	r4,r2,8001854 <_realloc_r+0x4fc>
 800163c:	81bfff04 	addi	r6,r16,-4
 8001640:	00800904 	movi	r2,36
 8001644:	11807036 	bltu	r2,r6,8001808 <_realloc_r+0x4b0>
 8001648:	00c004c4 	movi	r3,19
 800164c:	19805636 	bltu	r3,r6,80017a8 <_realloc_r+0x450>
 8001650:	8805883a 	mov	r2,r17
 8001654:	9807883a 	mov	r3,r19
 8001658:	19000017 	ldw	r4,0(r3)
 800165c:	11000015 	stw	r4,0(r2)
 8001660:	19000117 	ldw	r4,4(r3)
 8001664:	11000115 	stw	r4,4(r2)
 8001668:	18c00217 	ldw	r3,8(r3)
 800166c:	10c00215 	stw	r3,8(r2)
 8001670:	980b883a 	mov	r5,r19
 8001674:	9009883a 	mov	r4,r18
 8001678:	80021980 	call	8002198 <_free_r>
 800167c:	9009883a 	mov	r4,r18
 8001680:	80033180 	call	8003318 <__malloc_unlock>
 8001684:	8805883a 	mov	r2,r17
 8001688:	003f9a06 	br	80014f4 <__alt_data_end+0xfc0014f4>
 800168c:	300b883a 	mov	r5,r6
 8001690:	dfc00917 	ldw	ra,36(sp)
 8001694:	df000817 	ldw	fp,32(sp)
 8001698:	ddc00717 	ldw	r23,28(sp)
 800169c:	dd800617 	ldw	r22,24(sp)
 80016a0:	dd400517 	ldw	r21,20(sp)
 80016a4:	dd000417 	ldw	r20,16(sp)
 80016a8:	dcc00317 	ldw	r19,12(sp)
 80016ac:	dc800217 	ldw	r18,8(sp)
 80016b0:	dc400117 	ldw	r17,4(sp)
 80016b4:	dc000017 	ldw	r16,0(sp)
 80016b8:	dec00a04 	addi	sp,sp,40
 80016bc:	80008341 	jmpi	8000834 <_malloc_r>
 80016c0:	11400317 	ldw	r5,12(r2)
 80016c4:	10800217 	ldw	r2,8(r2)
 80016c8:	9823883a 	mov	r17,r19
 80016cc:	2021883a 	mov	r16,r4
 80016d0:	11400315 	stw	r5,12(r2)
 80016d4:	28800215 	stw	r2,8(r5)
 80016d8:	003f7906 	br	80014c0 <__alt_data_end+0xfc0014c0>
 80016dc:	21000117 	ldw	r4,4(r4)
 80016e0:	00bfff04 	movi	r2,-4
 80016e4:	a1800404 	addi	r6,r20,16
 80016e8:	2088703a 	and	r4,r4,r2
 80016ec:	2409883a 	add	r4,r4,r16
 80016f0:	2180380e 	bge	r4,r6,80017d4 <_realloc_r+0x47c>
 80016f4:	18c0004c 	andi	r3,r3,1
 80016f8:	183fc51e 	bne	r3,zero,8001610 <__alt_data_end+0xfc001610>
 80016fc:	9dfffe17 	ldw	r23,-8(r19)
 8001700:	adefc83a 	sub	r23,r21,r23
 8001704:	b9400117 	ldw	r5,4(r23)
 8001708:	288a703a 	and	r5,r5,r2
 800170c:	216d883a 	add	r22,r4,r5
 8001710:	b1bf8b16 	blt	r22,r6,8001540 <__alt_data_end+0xfc001540>
 8001714:	b8800317 	ldw	r2,12(r23)
 8001718:	b8c00217 	ldw	r3,8(r23)
 800171c:	81bfff04 	addi	r6,r16,-4
 8001720:	01000904 	movi	r4,36
 8001724:	18800315 	stw	r2,12(r3)
 8001728:	10c00215 	stw	r3,8(r2)
 800172c:	bc400204 	addi	r17,r23,8
 8001730:	21805a36 	bltu	r4,r6,800189c <_realloc_r+0x544>
 8001734:	008004c4 	movi	r2,19
 8001738:	1180562e 	bgeu	r2,r6,8001894 <_realloc_r+0x53c>
 800173c:	98800017 	ldw	r2,0(r19)
 8001740:	b8800215 	stw	r2,8(r23)
 8001744:	98800117 	ldw	r2,4(r19)
 8001748:	b8800315 	stw	r2,12(r23)
 800174c:	008006c4 	movi	r2,27
 8001750:	11805636 	bltu	r2,r6,80018ac <_realloc_r+0x554>
 8001754:	b8800404 	addi	r2,r23,16
 8001758:	9cc00204 	addi	r19,r19,8
 800175c:	98c00017 	ldw	r3,0(r19)
 8001760:	10c00015 	stw	r3,0(r2)
 8001764:	98c00117 	ldw	r3,4(r19)
 8001768:	10c00115 	stw	r3,4(r2)
 800176c:	98c00217 	ldw	r3,8(r19)
 8001770:	10c00215 	stw	r3,8(r2)
 8001774:	bd07883a 	add	r3,r23,r20
 8001778:	b505c83a 	sub	r2,r22,r20
 800177c:	e0c00215 	stw	r3,8(fp)
 8001780:	10800054 	ori	r2,r2,1
 8001784:	18800115 	stw	r2,4(r3)
 8001788:	b8800117 	ldw	r2,4(r23)
 800178c:	9009883a 	mov	r4,r18
 8001790:	1080004c 	andi	r2,r2,1
 8001794:	a0a8b03a 	or	r20,r20,r2
 8001798:	bd000115 	stw	r20,4(r23)
 800179c:	80033180 	call	8003318 <__malloc_unlock>
 80017a0:	8805883a 	mov	r2,r17
 80017a4:	003f5306 	br	80014f4 <__alt_data_end+0xfc0014f4>
 80017a8:	98c00017 	ldw	r3,0(r19)
 80017ac:	88c00015 	stw	r3,0(r17)
 80017b0:	98c00117 	ldw	r3,4(r19)
 80017b4:	88c00115 	stw	r3,4(r17)
 80017b8:	00c006c4 	movi	r3,27
 80017bc:	19801d36 	bltu	r3,r6,8001834 <_realloc_r+0x4dc>
 80017c0:	88800204 	addi	r2,r17,8
 80017c4:	98c00204 	addi	r3,r19,8
 80017c8:	003fa306 	br	8001658 <__alt_data_end+0xfc001658>
 80017cc:	8807883a 	mov	r3,r17
 80017d0:	003f7406 	br	80015a4 <__alt_data_end+0xfc0015a4>
 80017d4:	ad2b883a 	add	r21,r21,r20
 80017d8:	2505c83a 	sub	r2,r4,r20
 80017dc:	e5400215 	stw	r21,8(fp)
 80017e0:	10800054 	ori	r2,r2,1
 80017e4:	a8800115 	stw	r2,4(r21)
 80017e8:	98bfff17 	ldw	r2,-4(r19)
 80017ec:	9009883a 	mov	r4,r18
 80017f0:	1080004c 	andi	r2,r2,1
 80017f4:	a0a8b03a 	or	r20,r20,r2
 80017f8:	9d3fff15 	stw	r20,-4(r19)
 80017fc:	80033180 	call	8003318 <__malloc_unlock>
 8001800:	9805883a 	mov	r2,r19
 8001804:	003f3b06 	br	80014f4 <__alt_data_end+0xfc0014f4>
 8001808:	8809883a 	mov	r4,r17
 800180c:	980b883a 	mov	r5,r19
 8001810:	80011fc0 	call	80011fc <memmove>
 8001814:	003f9606 	br	8001670 <__alt_data_end+0xfc001670>
 8001818:	8809883a 	mov	r4,r17
 800181c:	980b883a 	mov	r5,r19
 8001820:	80011fc0 	call	80011fc <memmove>
 8001824:	b8c00117 	ldw	r3,4(r23)
 8001828:	b021883a 	mov	r16,r22
 800182c:	b82b883a 	mov	r21,r23
 8001830:	003f2306 	br	80014c0 <__alt_data_end+0xfc0014c0>
 8001834:	98c00217 	ldw	r3,8(r19)
 8001838:	88c00215 	stw	r3,8(r17)
 800183c:	98c00317 	ldw	r3,12(r19)
 8001840:	88c00315 	stw	r3,12(r17)
 8001844:	30800c26 	beq	r6,r2,8001878 <_realloc_r+0x520>
 8001848:	88800404 	addi	r2,r17,16
 800184c:	98c00404 	addi	r3,r19,16
 8001850:	003f8106 	br	8001658 <__alt_data_end+0xfc001658>
 8001854:	893fff17 	ldw	r4,-4(r17)
 8001858:	00bfff04 	movi	r2,-4
 800185c:	9823883a 	mov	r17,r19
 8001860:	2084703a 	and	r2,r4,r2
 8001864:	80a1883a 	add	r16,r16,r2
 8001868:	003f1506 	br	80014c0 <__alt_data_end+0xfc0014c0>
 800186c:	b8c00404 	addi	r3,r23,16
 8001870:	9cc00204 	addi	r19,r19,8
 8001874:	003f4b06 	br	80015a4 <__alt_data_end+0xfc0015a4>
 8001878:	99000417 	ldw	r4,16(r19)
 800187c:	88800604 	addi	r2,r17,24
 8001880:	98c00604 	addi	r3,r19,24
 8001884:	89000415 	stw	r4,16(r17)
 8001888:	99000517 	ldw	r4,20(r19)
 800188c:	89000515 	stw	r4,20(r17)
 8001890:	003f7106 	br	8001658 <__alt_data_end+0xfc001658>
 8001894:	8805883a 	mov	r2,r17
 8001898:	003fb006 	br	800175c <__alt_data_end+0xfc00175c>
 800189c:	8809883a 	mov	r4,r17
 80018a0:	980b883a 	mov	r5,r19
 80018a4:	80011fc0 	call	80011fc <memmove>
 80018a8:	003fb206 	br	8001774 <__alt_data_end+0xfc001774>
 80018ac:	98800217 	ldw	r2,8(r19)
 80018b0:	b8800415 	stw	r2,16(r23)
 80018b4:	98800317 	ldw	r2,12(r19)
 80018b8:	b8800515 	stw	r2,20(r23)
 80018bc:	31000726 	beq	r6,r4,80018dc <_realloc_r+0x584>
 80018c0:	b8800604 	addi	r2,r23,24
 80018c4:	9cc00404 	addi	r19,r19,16
 80018c8:	003fa406 	br	800175c <__alt_data_end+0xfc00175c>
 80018cc:	9009883a 	mov	r4,r18
 80018d0:	80033180 	call	8003318 <__malloc_unlock>
 80018d4:	0005883a 	mov	r2,zero
 80018d8:	003f0606 	br	80014f4 <__alt_data_end+0xfc0014f4>
 80018dc:	98c00417 	ldw	r3,16(r19)
 80018e0:	9cc00604 	addi	r19,r19,24
 80018e4:	b8800804 	addi	r2,r23,32
 80018e8:	b8c00615 	stw	r3,24(r23)
 80018ec:	98ffff17 	ldw	r3,-4(r19)
 80018f0:	b8c00715 	stw	r3,28(r23)
 80018f4:	003f9906 	br	800175c <__alt_data_end+0xfc00175c>

080018f8 <_sbrk_r>:
 80018f8:	defffd04 	addi	sp,sp,-12
 80018fc:	dc000015 	stw	r16,0(sp)
 8001900:	04020074 	movhi	r16,2049
 8001904:	dc400115 	stw	r17,4(sp)
 8001908:	8423dd04 	addi	r16,r16,-28812
 800190c:	2023883a 	mov	r17,r4
 8001910:	2809883a 	mov	r4,r5
 8001914:	dfc00215 	stw	ra,8(sp)
 8001918:	80000015 	stw	zero,0(r16)
 800191c:	80034e40 	call	80034e4 <sbrk>
 8001920:	00ffffc4 	movi	r3,-1
 8001924:	10c00526 	beq	r2,r3,800193c <_sbrk_r+0x44>
 8001928:	dfc00217 	ldw	ra,8(sp)
 800192c:	dc400117 	ldw	r17,4(sp)
 8001930:	dc000017 	ldw	r16,0(sp)
 8001934:	dec00304 	addi	sp,sp,12
 8001938:	f800283a 	ret
 800193c:	80c00017 	ldw	r3,0(r16)
 8001940:	183ff926 	beq	r3,zero,8001928 <__alt_data_end+0xfc001928>
 8001944:	88c00015 	stw	r3,0(r17)
 8001948:	003ff706 	br	8001928 <__alt_data_end+0xfc001928>

0800194c <__swsetup_r>:
 800194c:	00820034 	movhi	r2,2048
 8001950:	defffd04 	addi	sp,sp,-12
 8001954:	109d2704 	addi	r2,r2,29852
 8001958:	dc400115 	stw	r17,4(sp)
 800195c:	2023883a 	mov	r17,r4
 8001960:	11000017 	ldw	r4,0(r2)
 8001964:	dc000015 	stw	r16,0(sp)
 8001968:	dfc00215 	stw	ra,8(sp)
 800196c:	2821883a 	mov	r16,r5
 8001970:	20000226 	beq	r4,zero,800197c <__swsetup_r+0x30>
 8001974:	20c00e17 	ldw	r3,56(r4)
 8001978:	18002e26 	beq	r3,zero,8001a34 <__swsetup_r+0xe8>
 800197c:	8080030b 	ldhu	r2,12(r16)
 8001980:	10c0020c 	andi	r3,r2,8
 8001984:	100d883a 	mov	r6,r2
 8001988:	18000f26 	beq	r3,zero,80019c8 <__swsetup_r+0x7c>
 800198c:	80c00417 	ldw	r3,16(r16)
 8001990:	18001526 	beq	r3,zero,80019e8 <__swsetup_r+0x9c>
 8001994:	1100004c 	andi	r4,r2,1
 8001998:	20001c1e 	bne	r4,zero,8001a0c <__swsetup_r+0xc0>
 800199c:	1080008c 	andi	r2,r2,2
 80019a0:	1000261e 	bne	r2,zero,8001a3c <__swsetup_r+0xf0>
 80019a4:	80800517 	ldw	r2,20(r16)
 80019a8:	80800215 	stw	r2,8(r16)
 80019ac:	18001c26 	beq	r3,zero,8001a20 <__swsetup_r+0xd4>
 80019b0:	0005883a 	mov	r2,zero
 80019b4:	dfc00217 	ldw	ra,8(sp)
 80019b8:	dc400117 	ldw	r17,4(sp)
 80019bc:	dc000017 	ldw	r16,0(sp)
 80019c0:	dec00304 	addi	sp,sp,12
 80019c4:	f800283a 	ret
 80019c8:	3080040c 	andi	r2,r6,16
 80019cc:	10001726 	beq	r2,zero,8001a2c <__swsetup_r+0xe0>
 80019d0:	3080010c 	andi	r2,r6,4
 80019d4:	10001b1e 	bne	r2,zero,8001a44 <__swsetup_r+0xf8>
 80019d8:	80c00417 	ldw	r3,16(r16)
 80019dc:	30800214 	ori	r2,r6,8
 80019e0:	8080030d 	sth	r2,12(r16)
 80019e4:	183feb1e 	bne	r3,zero,8001994 <__alt_data_end+0xfc001994>
 80019e8:	1140a00c 	andi	r5,r2,640
 80019ec:	01008004 	movi	r4,512
 80019f0:	293fe826 	beq	r5,r4,8001994 <__alt_data_end+0xfc001994>
 80019f4:	8809883a 	mov	r4,r17
 80019f8:	800b883a 	mov	r5,r16
 80019fc:	80025f80 	call	80025f8 <__smakebuf_r>
 8001a00:	8080030b 	ldhu	r2,12(r16)
 8001a04:	80c00417 	ldw	r3,16(r16)
 8001a08:	003fe206 	br	8001994 <__alt_data_end+0xfc001994>
 8001a0c:	80800517 	ldw	r2,20(r16)
 8001a10:	80000215 	stw	zero,8(r16)
 8001a14:	0085c83a 	sub	r2,zero,r2
 8001a18:	80800615 	stw	r2,24(r16)
 8001a1c:	183fe41e 	bne	r3,zero,80019b0 <__alt_data_end+0xfc0019b0>
 8001a20:	8080030b 	ldhu	r2,12(r16)
 8001a24:	1080200c 	andi	r2,r2,128
 8001a28:	103fe226 	beq	r2,zero,80019b4 <__alt_data_end+0xfc0019b4>
 8001a2c:	00bfffc4 	movi	r2,-1
 8001a30:	003fe006 	br	80019b4 <__alt_data_end+0xfc0019b4>
 8001a34:	80020240 	call	8002024 <__sinit>
 8001a38:	003fd006 	br	800197c <__alt_data_end+0xfc00197c>
 8001a3c:	0005883a 	mov	r2,zero
 8001a40:	003fd906 	br	80019a8 <__alt_data_end+0xfc0019a8>
 8001a44:	81400c17 	ldw	r5,48(r16)
 8001a48:	28000626 	beq	r5,zero,8001a64 <__swsetup_r+0x118>
 8001a4c:	80801004 	addi	r2,r16,64
 8001a50:	28800326 	beq	r5,r2,8001a60 <__swsetup_r+0x114>
 8001a54:	8809883a 	mov	r4,r17
 8001a58:	80021980 	call	8002198 <_free_r>
 8001a5c:	8180030b 	ldhu	r6,12(r16)
 8001a60:	80000c15 	stw	zero,48(r16)
 8001a64:	80c00417 	ldw	r3,16(r16)
 8001a68:	00bff6c4 	movi	r2,-37
 8001a6c:	118c703a 	and	r6,r2,r6
 8001a70:	80000115 	stw	zero,4(r16)
 8001a74:	80c00015 	stw	r3,0(r16)
 8001a78:	003fd806 	br	80019dc <__alt_data_end+0xfc0019dc>

08001a7c <_fflush_r>:
 8001a7c:	defffb04 	addi	sp,sp,-20
 8001a80:	dcc00315 	stw	r19,12(sp)
 8001a84:	dc000015 	stw	r16,0(sp)
 8001a88:	dfc00415 	stw	ra,16(sp)
 8001a8c:	dc800215 	stw	r18,8(sp)
 8001a90:	dc400115 	stw	r17,4(sp)
 8001a94:	2027883a 	mov	r19,r4
 8001a98:	2821883a 	mov	r16,r5
 8001a9c:	20000226 	beq	r4,zero,8001aa8 <_fflush_r+0x2c>
 8001aa0:	20800e17 	ldw	r2,56(r4)
 8001aa4:	10005326 	beq	r2,zero,8001bf4 <_fflush_r+0x178>
 8001aa8:	8080030b 	ldhu	r2,12(r16)
 8001aac:	10ffffcc 	andi	r3,r2,65535
 8001ab0:	18e0001c 	xori	r3,r3,32768
 8001ab4:	18e00004 	addi	r3,r3,-32768
 8001ab8:	18002c26 	beq	r3,zero,8001b6c <_fflush_r+0xf0>
 8001abc:	10c0020c 	andi	r3,r2,8
 8001ac0:	1800321e 	bne	r3,zero,8001b8c <_fflush_r+0x110>
 8001ac4:	80c00117 	ldw	r3,4(r16)
 8001ac8:	10820014 	ori	r2,r2,2048
 8001acc:	8080030d 	sth	r2,12(r16)
 8001ad0:	00c0570e 	bge	zero,r3,8001c30 <_fflush_r+0x1b4>
 8001ad4:	82000a17 	ldw	r8,40(r16)
 8001ad8:	40002426 	beq	r8,zero,8001b6c <_fflush_r+0xf0>
 8001adc:	9c400017 	ldw	r17,0(r19)
 8001ae0:	10c4000c 	andi	r3,r2,4096
 8001ae4:	98000015 	stw	zero,0(r19)
 8001ae8:	18004626 	beq	r3,zero,8001c04 <_fflush_r+0x188>
 8001aec:	81801417 	ldw	r6,80(r16)
 8001af0:	10c0010c 	andi	r3,r2,4
 8001af4:	18000626 	beq	r3,zero,8001b10 <_fflush_r+0x94>
 8001af8:	80c00117 	ldw	r3,4(r16)
 8001afc:	80800c17 	ldw	r2,48(r16)
 8001b00:	30cdc83a 	sub	r6,r6,r3
 8001b04:	10000226 	beq	r2,zero,8001b10 <_fflush_r+0x94>
 8001b08:	80800f17 	ldw	r2,60(r16)
 8001b0c:	308dc83a 	sub	r6,r6,r2
 8001b10:	81400717 	ldw	r5,28(r16)
 8001b14:	9809883a 	mov	r4,r19
 8001b18:	000f883a 	mov	r7,zero
 8001b1c:	403ee83a 	callr	r8
 8001b20:	00ffffc4 	movi	r3,-1
 8001b24:	10c04526 	beq	r2,r3,8001c3c <_fflush_r+0x1c0>
 8001b28:	80c0030b 	ldhu	r3,12(r16)
 8001b2c:	81000417 	ldw	r4,16(r16)
 8001b30:	80000115 	stw	zero,4(r16)
 8001b34:	197dffcc 	andi	r5,r3,63487
 8001b38:	8140030d 	sth	r5,12(r16)
 8001b3c:	81000015 	stw	r4,0(r16)
 8001b40:	18c4000c 	andi	r3,r3,4096
 8001b44:	18000126 	beq	r3,zero,8001b4c <_fflush_r+0xd0>
 8001b48:	80801415 	stw	r2,80(r16)
 8001b4c:	81400c17 	ldw	r5,48(r16)
 8001b50:	9c400015 	stw	r17,0(r19)
 8001b54:	28000526 	beq	r5,zero,8001b6c <_fflush_r+0xf0>
 8001b58:	80801004 	addi	r2,r16,64
 8001b5c:	28800226 	beq	r5,r2,8001b68 <_fflush_r+0xec>
 8001b60:	9809883a 	mov	r4,r19
 8001b64:	80021980 	call	8002198 <_free_r>
 8001b68:	80000c15 	stw	zero,48(r16)
 8001b6c:	0005883a 	mov	r2,zero
 8001b70:	dfc00417 	ldw	ra,16(sp)
 8001b74:	dcc00317 	ldw	r19,12(sp)
 8001b78:	dc800217 	ldw	r18,8(sp)
 8001b7c:	dc400117 	ldw	r17,4(sp)
 8001b80:	dc000017 	ldw	r16,0(sp)
 8001b84:	dec00504 	addi	sp,sp,20
 8001b88:	f800283a 	ret
 8001b8c:	84800417 	ldw	r18,16(r16)
 8001b90:	903ff626 	beq	r18,zero,8001b6c <__alt_data_end+0xfc001b6c>
 8001b94:	84400017 	ldw	r17,0(r16)
 8001b98:	108000cc 	andi	r2,r2,3
 8001b9c:	84800015 	stw	r18,0(r16)
 8001ba0:	8ca3c83a 	sub	r17,r17,r18
 8001ba4:	10001526 	beq	r2,zero,8001bfc <_fflush_r+0x180>
 8001ba8:	0005883a 	mov	r2,zero
 8001bac:	80800215 	stw	r2,8(r16)
 8001bb0:	04400316 	blt	zero,r17,8001bc0 <_fflush_r+0x144>
 8001bb4:	003fed06 	br	8001b6c <__alt_data_end+0xfc001b6c>
 8001bb8:	90a5883a 	add	r18,r18,r2
 8001bbc:	047feb0e 	bge	zero,r17,8001b6c <__alt_data_end+0xfc001b6c>
 8001bc0:	80800917 	ldw	r2,36(r16)
 8001bc4:	81400717 	ldw	r5,28(r16)
 8001bc8:	880f883a 	mov	r7,r17
 8001bcc:	900d883a 	mov	r6,r18
 8001bd0:	9809883a 	mov	r4,r19
 8001bd4:	103ee83a 	callr	r2
 8001bd8:	88a3c83a 	sub	r17,r17,r2
 8001bdc:	00bff616 	blt	zero,r2,8001bb8 <__alt_data_end+0xfc001bb8>
 8001be0:	80c0030b 	ldhu	r3,12(r16)
 8001be4:	00bfffc4 	movi	r2,-1
 8001be8:	18c01014 	ori	r3,r3,64
 8001bec:	80c0030d 	sth	r3,12(r16)
 8001bf0:	003fdf06 	br	8001b70 <__alt_data_end+0xfc001b70>
 8001bf4:	80020240 	call	8002024 <__sinit>
 8001bf8:	003fab06 	br	8001aa8 <__alt_data_end+0xfc001aa8>
 8001bfc:	80800517 	ldw	r2,20(r16)
 8001c00:	003fea06 	br	8001bac <__alt_data_end+0xfc001bac>
 8001c04:	81400717 	ldw	r5,28(r16)
 8001c08:	000d883a 	mov	r6,zero
 8001c0c:	9809883a 	mov	r4,r19
 8001c10:	01c00044 	movi	r7,1
 8001c14:	403ee83a 	callr	r8
 8001c18:	100d883a 	mov	r6,r2
 8001c1c:	00bfffc4 	movi	r2,-1
 8001c20:	30801326 	beq	r6,r2,8001c70 <_fflush_r+0x1f4>
 8001c24:	8080030b 	ldhu	r2,12(r16)
 8001c28:	82000a17 	ldw	r8,40(r16)
 8001c2c:	003fb006 	br	8001af0 <__alt_data_end+0xfc001af0>
 8001c30:	80c00f17 	ldw	r3,60(r16)
 8001c34:	00ffa716 	blt	zero,r3,8001ad4 <__alt_data_end+0xfc001ad4>
 8001c38:	003fcc06 	br	8001b6c <__alt_data_end+0xfc001b6c>
 8001c3c:	98c00017 	ldw	r3,0(r19)
 8001c40:	183fb926 	beq	r3,zero,8001b28 <__alt_data_end+0xfc001b28>
 8001c44:	01000744 	movi	r4,29
 8001c48:	19000226 	beq	r3,r4,8001c54 <_fflush_r+0x1d8>
 8001c4c:	01000584 	movi	r4,22
 8001c50:	1900101e 	bne	r3,r4,8001c94 <_fflush_r+0x218>
 8001c54:	8080030b 	ldhu	r2,12(r16)
 8001c58:	80c00417 	ldw	r3,16(r16)
 8001c5c:	80000115 	stw	zero,4(r16)
 8001c60:	10bdffcc 	andi	r2,r2,63487
 8001c64:	8080030d 	sth	r2,12(r16)
 8001c68:	80c00015 	stw	r3,0(r16)
 8001c6c:	003fb706 	br	8001b4c <__alt_data_end+0xfc001b4c>
 8001c70:	98800017 	ldw	r2,0(r19)
 8001c74:	103feb26 	beq	r2,zero,8001c24 <__alt_data_end+0xfc001c24>
 8001c78:	00c00744 	movi	r3,29
 8001c7c:	10c00226 	beq	r2,r3,8001c88 <_fflush_r+0x20c>
 8001c80:	00c00584 	movi	r3,22
 8001c84:	10ffd61e 	bne	r2,r3,8001be0 <__alt_data_end+0xfc001be0>
 8001c88:	9c400015 	stw	r17,0(r19)
 8001c8c:	0005883a 	mov	r2,zero
 8001c90:	003fb706 	br	8001b70 <__alt_data_end+0xfc001b70>
 8001c94:	80c0030b 	ldhu	r3,12(r16)
 8001c98:	18c01014 	ori	r3,r3,64
 8001c9c:	80c0030d 	sth	r3,12(r16)
 8001ca0:	003fb306 	br	8001b70 <__alt_data_end+0xfc001b70>

08001ca4 <fflush>:
 8001ca4:	20000526 	beq	r4,zero,8001cbc <fflush+0x18>
 8001ca8:	00820034 	movhi	r2,2048
 8001cac:	109d2704 	addi	r2,r2,29852
 8001cb0:	200b883a 	mov	r5,r4
 8001cb4:	11000017 	ldw	r4,0(r2)
 8001cb8:	8001a7c1 	jmpi	8001a7c <_fflush_r>
 8001cbc:	00820034 	movhi	r2,2048
 8001cc0:	109d2604 	addi	r2,r2,29848
 8001cc4:	11000017 	ldw	r4,0(r2)
 8001cc8:	01420034 	movhi	r5,2048
 8001ccc:	29469f04 	addi	r5,r5,6780
 8001cd0:	80025401 	jmpi	8002540 <_fwalk_reent>

08001cd4 <__fp_lock>:
 8001cd4:	0005883a 	mov	r2,zero
 8001cd8:	f800283a 	ret

08001cdc <__fp_unlock>:
 8001cdc:	0005883a 	mov	r2,zero
 8001ce0:	f800283a 	ret

08001ce4 <_cleanup_r>:
 8001ce4:	01420034 	movhi	r5,2048
 8001ce8:	294af004 	addi	r5,r5,11200
 8001cec:	80024881 	jmpi	8002488 <_fwalk>

08001cf0 <__sinit.part.1>:
 8001cf0:	defff604 	addi	sp,sp,-40
 8001cf4:	00c20034 	movhi	r3,2048
 8001cf8:	dfc00915 	stw	ra,36(sp)
 8001cfc:	df000815 	stw	fp,32(sp)
 8001d00:	ddc00715 	stw	r23,28(sp)
 8001d04:	dd800615 	stw	r22,24(sp)
 8001d08:	dd400515 	stw	r21,20(sp)
 8001d0c:	dd000415 	stw	r20,16(sp)
 8001d10:	dcc00315 	stw	r19,12(sp)
 8001d14:	dc800215 	stw	r18,8(sp)
 8001d18:	dc400115 	stw	r17,4(sp)
 8001d1c:	dc000015 	stw	r16,0(sp)
 8001d20:	18c73904 	addi	r3,r3,7396
 8001d24:	24000117 	ldw	r16,4(r4)
 8001d28:	20c00f15 	stw	r3,60(r4)
 8001d2c:	07000044 	movi	fp,1
 8001d30:	00c000c4 	movi	r3,3
 8001d34:	2080bb04 	addi	r2,r4,748
 8001d38:	20c0b915 	stw	r3,740(r4)
 8001d3c:	27000e15 	stw	fp,56(r4)
 8001d40:	2080ba15 	stw	r2,744(r4)
 8001d44:	2000b815 	stw	zero,736(r4)
 8001d48:	05c00204 	movi	r23,8
 8001d4c:	00800104 	movi	r2,4
 8001d50:	2025883a 	mov	r18,r4
 8001d54:	b80d883a 	mov	r6,r23
 8001d58:	81001704 	addi	r4,r16,92
 8001d5c:	000b883a 	mov	r5,zero
 8001d60:	80000015 	stw	zero,0(r16)
 8001d64:	80000115 	stw	zero,4(r16)
 8001d68:	80000215 	stw	zero,8(r16)
 8001d6c:	8080030d 	sth	r2,12(r16)
 8001d70:	80001915 	stw	zero,100(r16)
 8001d74:	8000038d 	sth	zero,14(r16)
 8001d78:	80000415 	stw	zero,16(r16)
 8001d7c:	80000515 	stw	zero,20(r16)
 8001d80:	80000615 	stw	zero,24(r16)
 8001d84:	80027b00 	call	80027b0 <memset>
 8001d88:	05820034 	movhi	r22,2048
 8001d8c:	94400217 	ldw	r17,8(r18)
 8001d90:	05420034 	movhi	r21,2048
 8001d94:	05020034 	movhi	r20,2048
 8001d98:	04c20034 	movhi	r19,2048
 8001d9c:	b58a3504 	addi	r22,r22,10452
 8001da0:	ad4a4c04 	addi	r21,r21,10544
 8001da4:	a50a6b04 	addi	r20,r20,10668
 8001da8:	9cca8204 	addi	r19,r19,10760
 8001dac:	85800815 	stw	r22,32(r16)
 8001db0:	85400915 	stw	r21,36(r16)
 8001db4:	85000a15 	stw	r20,40(r16)
 8001db8:	84c00b15 	stw	r19,44(r16)
 8001dbc:	84000715 	stw	r16,28(r16)
 8001dc0:	00800284 	movi	r2,10
 8001dc4:	89001704 	addi	r4,r17,92
 8001dc8:	b80d883a 	mov	r6,r23
 8001dcc:	000b883a 	mov	r5,zero
 8001dd0:	88000015 	stw	zero,0(r17)
 8001dd4:	88000115 	stw	zero,4(r17)
 8001dd8:	88000215 	stw	zero,8(r17)
 8001ddc:	8880030d 	sth	r2,12(r17)
 8001de0:	88001915 	stw	zero,100(r17)
 8001de4:	8f00038d 	sth	fp,14(r17)
 8001de8:	88000415 	stw	zero,16(r17)
 8001dec:	88000515 	stw	zero,20(r17)
 8001df0:	88000615 	stw	zero,24(r17)
 8001df4:	80027b00 	call	80027b0 <memset>
 8001df8:	94000317 	ldw	r16,12(r18)
 8001dfc:	00800484 	movi	r2,18
 8001e00:	8c400715 	stw	r17,28(r17)
 8001e04:	8d800815 	stw	r22,32(r17)
 8001e08:	8d400915 	stw	r21,36(r17)
 8001e0c:	8d000a15 	stw	r20,40(r17)
 8001e10:	8cc00b15 	stw	r19,44(r17)
 8001e14:	8080030d 	sth	r2,12(r16)
 8001e18:	00800084 	movi	r2,2
 8001e1c:	80000015 	stw	zero,0(r16)
 8001e20:	80000115 	stw	zero,4(r16)
 8001e24:	80000215 	stw	zero,8(r16)
 8001e28:	80001915 	stw	zero,100(r16)
 8001e2c:	8080038d 	sth	r2,14(r16)
 8001e30:	80000415 	stw	zero,16(r16)
 8001e34:	80000515 	stw	zero,20(r16)
 8001e38:	80000615 	stw	zero,24(r16)
 8001e3c:	81001704 	addi	r4,r16,92
 8001e40:	000b883a 	mov	r5,zero
 8001e44:	b80d883a 	mov	r6,r23
 8001e48:	80027b00 	call	80027b0 <memset>
 8001e4c:	84000715 	stw	r16,28(r16)
 8001e50:	85800815 	stw	r22,32(r16)
 8001e54:	85400915 	stw	r21,36(r16)
 8001e58:	85000a15 	stw	r20,40(r16)
 8001e5c:	84c00b15 	stw	r19,44(r16)
 8001e60:	dfc00917 	ldw	ra,36(sp)
 8001e64:	df000817 	ldw	fp,32(sp)
 8001e68:	ddc00717 	ldw	r23,28(sp)
 8001e6c:	dd800617 	ldw	r22,24(sp)
 8001e70:	dd400517 	ldw	r21,20(sp)
 8001e74:	dd000417 	ldw	r20,16(sp)
 8001e78:	dcc00317 	ldw	r19,12(sp)
 8001e7c:	dc800217 	ldw	r18,8(sp)
 8001e80:	dc400117 	ldw	r17,4(sp)
 8001e84:	dc000017 	ldw	r16,0(sp)
 8001e88:	dec00a04 	addi	sp,sp,40
 8001e8c:	f800283a 	ret

08001e90 <__sfmoreglue>:
 8001e90:	defffc04 	addi	sp,sp,-16
 8001e94:	dc400115 	stw	r17,4(sp)
 8001e98:	2c401a24 	muli	r17,r5,104
 8001e9c:	dc800215 	stw	r18,8(sp)
 8001ea0:	2825883a 	mov	r18,r5
 8001ea4:	89400304 	addi	r5,r17,12
 8001ea8:	dc000015 	stw	r16,0(sp)
 8001eac:	dfc00315 	stw	ra,12(sp)
 8001eb0:	80008340 	call	8000834 <_malloc_r>
 8001eb4:	1021883a 	mov	r16,r2
 8001eb8:	10000726 	beq	r2,zero,8001ed8 <__sfmoreglue+0x48>
 8001ebc:	11000304 	addi	r4,r2,12
 8001ec0:	10000015 	stw	zero,0(r2)
 8001ec4:	14800115 	stw	r18,4(r2)
 8001ec8:	11000215 	stw	r4,8(r2)
 8001ecc:	000b883a 	mov	r5,zero
 8001ed0:	880d883a 	mov	r6,r17
 8001ed4:	80027b00 	call	80027b0 <memset>
 8001ed8:	8005883a 	mov	r2,r16
 8001edc:	dfc00317 	ldw	ra,12(sp)
 8001ee0:	dc800217 	ldw	r18,8(sp)
 8001ee4:	dc400117 	ldw	r17,4(sp)
 8001ee8:	dc000017 	ldw	r16,0(sp)
 8001eec:	dec00404 	addi	sp,sp,16
 8001ef0:	f800283a 	ret

08001ef4 <__sfp>:
 8001ef4:	00820034 	movhi	r2,2048
 8001ef8:	defffb04 	addi	sp,sp,-20
 8001efc:	109d2604 	addi	r2,r2,29848
 8001f00:	dc800215 	stw	r18,8(sp)
 8001f04:	14800017 	ldw	r18,0(r2)
 8001f08:	dcc00315 	stw	r19,12(sp)
 8001f0c:	dfc00415 	stw	ra,16(sp)
 8001f10:	90800e17 	ldw	r2,56(r18)
 8001f14:	dc400115 	stw	r17,4(sp)
 8001f18:	dc000015 	stw	r16,0(sp)
 8001f1c:	2027883a 	mov	r19,r4
 8001f20:	1000021e 	bne	r2,zero,8001f2c <__sfp+0x38>
 8001f24:	9009883a 	mov	r4,r18
 8001f28:	8001cf00 	call	8001cf0 <__sinit.part.1>
 8001f2c:	9480b804 	addi	r18,r18,736
 8001f30:	047fffc4 	movi	r17,-1
 8001f34:	91400117 	ldw	r5,4(r18)
 8001f38:	94000217 	ldw	r16,8(r18)
 8001f3c:	297fffc4 	addi	r5,r5,-1
 8001f40:	28000a16 	blt	r5,zero,8001f6c <__sfp+0x78>
 8001f44:	8080030f 	ldh	r2,12(r16)
 8001f48:	10000c26 	beq	r2,zero,8001f7c <__sfp+0x88>
 8001f4c:	80c01d04 	addi	r3,r16,116
 8001f50:	00000206 	br	8001f5c <__sfp+0x68>
 8001f54:	18bfe60f 	ldh	r2,-104(r3)
 8001f58:	10000826 	beq	r2,zero,8001f7c <__sfp+0x88>
 8001f5c:	297fffc4 	addi	r5,r5,-1
 8001f60:	1c3ffd04 	addi	r16,r3,-12
 8001f64:	18c01a04 	addi	r3,r3,104
 8001f68:	2c7ffa1e 	bne	r5,r17,8001f54 <__alt_data_end+0xfc001f54>
 8001f6c:	90800017 	ldw	r2,0(r18)
 8001f70:	10001d26 	beq	r2,zero,8001fe8 <__sfp+0xf4>
 8001f74:	1025883a 	mov	r18,r2
 8001f78:	003fee06 	br	8001f34 <__alt_data_end+0xfc001f34>
 8001f7c:	00bfffc4 	movi	r2,-1
 8001f80:	8080038d 	sth	r2,14(r16)
 8001f84:	00800044 	movi	r2,1
 8001f88:	8080030d 	sth	r2,12(r16)
 8001f8c:	80001915 	stw	zero,100(r16)
 8001f90:	80000015 	stw	zero,0(r16)
 8001f94:	80000215 	stw	zero,8(r16)
 8001f98:	80000115 	stw	zero,4(r16)
 8001f9c:	80000415 	stw	zero,16(r16)
 8001fa0:	80000515 	stw	zero,20(r16)
 8001fa4:	80000615 	stw	zero,24(r16)
 8001fa8:	81001704 	addi	r4,r16,92
 8001fac:	000b883a 	mov	r5,zero
 8001fb0:	01800204 	movi	r6,8
 8001fb4:	80027b00 	call	80027b0 <memset>
 8001fb8:	8005883a 	mov	r2,r16
 8001fbc:	80000c15 	stw	zero,48(r16)
 8001fc0:	80000d15 	stw	zero,52(r16)
 8001fc4:	80001115 	stw	zero,68(r16)
 8001fc8:	80001215 	stw	zero,72(r16)
 8001fcc:	dfc00417 	ldw	ra,16(sp)
 8001fd0:	dcc00317 	ldw	r19,12(sp)
 8001fd4:	dc800217 	ldw	r18,8(sp)
 8001fd8:	dc400117 	ldw	r17,4(sp)
 8001fdc:	dc000017 	ldw	r16,0(sp)
 8001fe0:	dec00504 	addi	sp,sp,20
 8001fe4:	f800283a 	ret
 8001fe8:	9809883a 	mov	r4,r19
 8001fec:	01400104 	movi	r5,4
 8001ff0:	8001e900 	call	8001e90 <__sfmoreglue>
 8001ff4:	90800015 	stw	r2,0(r18)
 8001ff8:	103fde1e 	bne	r2,zero,8001f74 <__alt_data_end+0xfc001f74>
 8001ffc:	00800304 	movi	r2,12
 8002000:	98800015 	stw	r2,0(r19)
 8002004:	0005883a 	mov	r2,zero
 8002008:	003ff006 	br	8001fcc <__alt_data_end+0xfc001fcc>

0800200c <_cleanup>:
 800200c:	00820034 	movhi	r2,2048
 8002010:	109d2604 	addi	r2,r2,29848
 8002014:	11000017 	ldw	r4,0(r2)
 8002018:	01420034 	movhi	r5,2048
 800201c:	294af004 	addi	r5,r5,11200
 8002020:	80024881 	jmpi	8002488 <_fwalk>

08002024 <__sinit>:
 8002024:	20800e17 	ldw	r2,56(r4)
 8002028:	10000126 	beq	r2,zero,8002030 <__sinit+0xc>
 800202c:	f800283a 	ret
 8002030:	8001cf01 	jmpi	8001cf0 <__sinit.part.1>

08002034 <__sfp_lock_acquire>:
 8002034:	f800283a 	ret

08002038 <__sfp_lock_release>:
 8002038:	f800283a 	ret

0800203c <__sinit_lock_acquire>:
 800203c:	f800283a 	ret

08002040 <__sinit_lock_release>:
 8002040:	f800283a 	ret

08002044 <__fp_lock_all>:
 8002044:	00820034 	movhi	r2,2048
 8002048:	109d2704 	addi	r2,r2,29852
 800204c:	11000017 	ldw	r4,0(r2)
 8002050:	01420034 	movhi	r5,2048
 8002054:	29473504 	addi	r5,r5,7380
 8002058:	80024881 	jmpi	8002488 <_fwalk>

0800205c <__fp_unlock_all>:
 800205c:	00820034 	movhi	r2,2048
 8002060:	109d2704 	addi	r2,r2,29852
 8002064:	11000017 	ldw	r4,0(r2)
 8002068:	01420034 	movhi	r5,2048
 800206c:	29473704 	addi	r5,r5,7388
 8002070:	80024881 	jmpi	8002488 <_fwalk>

08002074 <_malloc_trim_r>:
 8002074:	defffb04 	addi	sp,sp,-20
 8002078:	dcc00315 	stw	r19,12(sp)
 800207c:	04c20034 	movhi	r19,2048
 8002080:	dc800215 	stw	r18,8(sp)
 8002084:	dc400115 	stw	r17,4(sp)
 8002088:	dc000015 	stw	r16,0(sp)
 800208c:	dfc00415 	stw	ra,16(sp)
 8002090:	2821883a 	mov	r16,r5
 8002094:	9cd79704 	addi	r19,r19,24156
 8002098:	2025883a 	mov	r18,r4
 800209c:	80032f80 	call	80032f8 <__malloc_lock>
 80020a0:	98800217 	ldw	r2,8(r19)
 80020a4:	14400117 	ldw	r17,4(r2)
 80020a8:	00bfff04 	movi	r2,-4
 80020ac:	88a2703a 	and	r17,r17,r2
 80020b0:	8c21c83a 	sub	r16,r17,r16
 80020b4:	8403fbc4 	addi	r16,r16,4079
 80020b8:	8020d33a 	srli	r16,r16,12
 80020bc:	0083ffc4 	movi	r2,4095
 80020c0:	843fffc4 	addi	r16,r16,-1
 80020c4:	8020933a 	slli	r16,r16,12
 80020c8:	1400060e 	bge	r2,r16,80020e4 <_malloc_trim_r+0x70>
 80020cc:	9009883a 	mov	r4,r18
 80020d0:	000b883a 	mov	r5,zero
 80020d4:	80018f80 	call	80018f8 <_sbrk_r>
 80020d8:	98c00217 	ldw	r3,8(r19)
 80020dc:	1c47883a 	add	r3,r3,r17
 80020e0:	10c00a26 	beq	r2,r3,800210c <_malloc_trim_r+0x98>
 80020e4:	9009883a 	mov	r4,r18
 80020e8:	80033180 	call	8003318 <__malloc_unlock>
 80020ec:	0005883a 	mov	r2,zero
 80020f0:	dfc00417 	ldw	ra,16(sp)
 80020f4:	dcc00317 	ldw	r19,12(sp)
 80020f8:	dc800217 	ldw	r18,8(sp)
 80020fc:	dc400117 	ldw	r17,4(sp)
 8002100:	dc000017 	ldw	r16,0(sp)
 8002104:	dec00504 	addi	sp,sp,20
 8002108:	f800283a 	ret
 800210c:	9009883a 	mov	r4,r18
 8002110:	040bc83a 	sub	r5,zero,r16
 8002114:	80018f80 	call	80018f8 <_sbrk_r>
 8002118:	00ffffc4 	movi	r3,-1
 800211c:	10c00d26 	beq	r2,r3,8002154 <_malloc_trim_r+0xe0>
 8002120:	00c20074 	movhi	r3,2049
 8002124:	18e3e404 	addi	r3,r3,-28784
 8002128:	18800017 	ldw	r2,0(r3)
 800212c:	99000217 	ldw	r4,8(r19)
 8002130:	8c23c83a 	sub	r17,r17,r16
 8002134:	8c400054 	ori	r17,r17,1
 8002138:	1421c83a 	sub	r16,r2,r16
 800213c:	24400115 	stw	r17,4(r4)
 8002140:	9009883a 	mov	r4,r18
 8002144:	1c000015 	stw	r16,0(r3)
 8002148:	80033180 	call	8003318 <__malloc_unlock>
 800214c:	00800044 	movi	r2,1
 8002150:	003fe706 	br	80020f0 <__alt_data_end+0xfc0020f0>
 8002154:	9009883a 	mov	r4,r18
 8002158:	000b883a 	mov	r5,zero
 800215c:	80018f80 	call	80018f8 <_sbrk_r>
 8002160:	99000217 	ldw	r4,8(r19)
 8002164:	014003c4 	movi	r5,15
 8002168:	1107c83a 	sub	r3,r2,r4
 800216c:	28ffdd0e 	bge	r5,r3,80020e4 <__alt_data_end+0xfc0020e4>
 8002170:	01420034 	movhi	r5,2048
 8002174:	295d2804 	addi	r5,r5,29856
 8002178:	29400017 	ldw	r5,0(r5)
 800217c:	18c00054 	ori	r3,r3,1
 8002180:	20c00115 	stw	r3,4(r4)
 8002184:	00c20074 	movhi	r3,2049
 8002188:	1145c83a 	sub	r2,r2,r5
 800218c:	18e3e404 	addi	r3,r3,-28784
 8002190:	18800015 	stw	r2,0(r3)
 8002194:	003fd306 	br	80020e4 <__alt_data_end+0xfc0020e4>

08002198 <_free_r>:
 8002198:	28004c26 	beq	r5,zero,80022cc <_free_r+0x134>
 800219c:	defffd04 	addi	sp,sp,-12
 80021a0:	dc400115 	stw	r17,4(sp)
 80021a4:	dc000015 	stw	r16,0(sp)
 80021a8:	2023883a 	mov	r17,r4
 80021ac:	2821883a 	mov	r16,r5
 80021b0:	dfc00215 	stw	ra,8(sp)
 80021b4:	80032f80 	call	80032f8 <__malloc_lock>
 80021b8:	813fff17 	ldw	r4,-4(r16)
 80021bc:	00bfff84 	movi	r2,-2
 80021c0:	02420034 	movhi	r9,2048
 80021c4:	81bffe04 	addi	r6,r16,-8
 80021c8:	2084703a 	and	r2,r4,r2
 80021cc:	4a579704 	addi	r9,r9,24156
 80021d0:	308b883a 	add	r5,r6,r2
 80021d4:	2a000117 	ldw	r8,4(r5)
 80021d8:	49c00217 	ldw	r7,8(r9)
 80021dc:	00ffff04 	movi	r3,-4
 80021e0:	40c6703a 	and	r3,r8,r3
 80021e4:	39405326 	beq	r7,r5,8002334 <_free_r+0x19c>
 80021e8:	28c00115 	stw	r3,4(r5)
 80021ec:	2100004c 	andi	r4,r4,1
 80021f0:	2000091e 	bne	r4,zero,8002218 <_free_r+0x80>
 80021f4:	81fffe17 	ldw	r7,-8(r16)
 80021f8:	4a000204 	addi	r8,r9,8
 80021fc:	31cdc83a 	sub	r6,r6,r7
 8002200:	31000217 	ldw	r4,8(r6)
 8002204:	11c5883a 	add	r2,r2,r7
 8002208:	22006126 	beq	r4,r8,8002390 <_free_r+0x1f8>
 800220c:	31c00317 	ldw	r7,12(r6)
 8002210:	21c00315 	stw	r7,12(r4)
 8002214:	39000215 	stw	r4,8(r7)
 8002218:	28c9883a 	add	r4,r5,r3
 800221c:	21c00117 	ldw	r7,4(r4)
 8002220:	39c0004c 	andi	r7,r7,1
 8002224:	38000d1e 	bne	r7,zero,800225c <_free_r+0xc4>
 8002228:	29000217 	ldw	r4,8(r5)
 800222c:	10c5883a 	add	r2,r2,r3
 8002230:	00c20034 	movhi	r3,2048
 8002234:	18d79904 	addi	r3,r3,24164
 8002238:	20c07526 	beq	r4,r3,8002410 <_free_r+0x278>
 800223c:	29c00317 	ldw	r7,12(r5)
 8002240:	11400054 	ori	r5,r2,1
 8002244:	3087883a 	add	r3,r6,r2
 8002248:	21c00315 	stw	r7,12(r4)
 800224c:	39000215 	stw	r4,8(r7)
 8002250:	31400115 	stw	r5,4(r6)
 8002254:	18800015 	stw	r2,0(r3)
 8002258:	00000406 	br	800226c <_free_r+0xd4>
 800225c:	10c00054 	ori	r3,r2,1
 8002260:	30c00115 	stw	r3,4(r6)
 8002264:	3087883a 	add	r3,r6,r2
 8002268:	18800015 	stw	r2,0(r3)
 800226c:	00c07fc4 	movi	r3,511
 8002270:	18801736 	bltu	r3,r2,80022d0 <_free_r+0x138>
 8002274:	1004d0fa 	srli	r2,r2,3
 8002278:	01400044 	movi	r5,1
 800227c:	49000117 	ldw	r4,4(r9)
 8002280:	1087883a 	add	r3,r2,r2
 8002284:	18c7883a 	add	r3,r3,r3
 8002288:	1005d0ba 	srai	r2,r2,2
 800228c:	18c7883a 	add	r3,r3,r3
 8002290:	1a47883a 	add	r3,r3,r9
 8002294:	19c00217 	ldw	r7,8(r3)
 8002298:	2884983a 	sll	r2,r5,r2
 800229c:	30c00315 	stw	r3,12(r6)
 80022a0:	31c00215 	stw	r7,8(r6)
 80022a4:	1104b03a 	or	r2,r2,r4
 80022a8:	19800215 	stw	r6,8(r3)
 80022ac:	48800115 	stw	r2,4(r9)
 80022b0:	39800315 	stw	r6,12(r7)
 80022b4:	8809883a 	mov	r4,r17
 80022b8:	dfc00217 	ldw	ra,8(sp)
 80022bc:	dc400117 	ldw	r17,4(sp)
 80022c0:	dc000017 	ldw	r16,0(sp)
 80022c4:	dec00304 	addi	sp,sp,12
 80022c8:	80033181 	jmpi	8003318 <__malloc_unlock>
 80022cc:	f800283a 	ret
 80022d0:	1006d27a 	srli	r3,r2,9
 80022d4:	01000104 	movi	r4,4
 80022d8:	20c04036 	bltu	r4,r3,80023dc <_free_r+0x244>
 80022dc:	1006d1ba 	srli	r3,r2,6
 80022e0:	19400e04 	addi	r5,r3,56
 80022e4:	2947883a 	add	r3,r5,r5
 80022e8:	18c7883a 	add	r3,r3,r3
 80022ec:	18c7883a 	add	r3,r3,r3
 80022f0:	1a49883a 	add	r4,r3,r9
 80022f4:	20c00217 	ldw	r3,8(r4)
 80022f8:	01c20034 	movhi	r7,2048
 80022fc:	39d79704 	addi	r7,r7,24156
 8002300:	19003b26 	beq	r3,r4,80023f0 <_free_r+0x258>
 8002304:	01ffff04 	movi	r7,-4
 8002308:	19400117 	ldw	r5,4(r3)
 800230c:	29ca703a 	and	r5,r5,r7
 8002310:	1140022e 	bgeu	r2,r5,800231c <_free_r+0x184>
 8002314:	18c00217 	ldw	r3,8(r3)
 8002318:	20fffb1e 	bne	r4,r3,8002308 <__alt_data_end+0xfc002308>
 800231c:	18800317 	ldw	r2,12(r3)
 8002320:	30800315 	stw	r2,12(r6)
 8002324:	30c00215 	stw	r3,8(r6)
 8002328:	11800215 	stw	r6,8(r2)
 800232c:	19800315 	stw	r6,12(r3)
 8002330:	003fe006 	br	80022b4 <__alt_data_end+0xfc0022b4>
 8002334:	2100004c 	andi	r4,r4,1
 8002338:	1885883a 	add	r2,r3,r2
 800233c:	2000071e 	bne	r4,zero,800235c <_free_r+0x1c4>
 8002340:	817ffe17 	ldw	r5,-8(r16)
 8002344:	314dc83a 	sub	r6,r6,r5
 8002348:	30c00317 	ldw	r3,12(r6)
 800234c:	31000217 	ldw	r4,8(r6)
 8002350:	1145883a 	add	r2,r2,r5
 8002354:	20c00315 	stw	r3,12(r4)
 8002358:	19000215 	stw	r4,8(r3)
 800235c:	10c00054 	ori	r3,r2,1
 8002360:	30c00115 	stw	r3,4(r6)
 8002364:	00c20034 	movhi	r3,2048
 8002368:	18dd2904 	addi	r3,r3,29860
 800236c:	18c00017 	ldw	r3,0(r3)
 8002370:	49800215 	stw	r6,8(r9)
 8002374:	10ffcf36 	bltu	r2,r3,80022b4 <__alt_data_end+0xfc0022b4>
 8002378:	00820074 	movhi	r2,2049
 800237c:	10a3dc04 	addi	r2,r2,-28816
 8002380:	11400017 	ldw	r5,0(r2)
 8002384:	8809883a 	mov	r4,r17
 8002388:	80020740 	call	8002074 <_malloc_trim_r>
 800238c:	003fc906 	br	80022b4 <__alt_data_end+0xfc0022b4>
 8002390:	28c9883a 	add	r4,r5,r3
 8002394:	21000117 	ldw	r4,4(r4)
 8002398:	2100004c 	andi	r4,r4,1
 800239c:	20000a1e 	bne	r4,zero,80023c8 <_free_r+0x230>
 80023a0:	29000317 	ldw	r4,12(r5)
 80023a4:	29400217 	ldw	r5,8(r5)
 80023a8:	10c5883a 	add	r2,r2,r3
 80023ac:	10c00054 	ori	r3,r2,1
 80023b0:	29000315 	stw	r4,12(r5)
 80023b4:	21400215 	stw	r5,8(r4)
 80023b8:	30c00115 	stw	r3,4(r6)
 80023bc:	308d883a 	add	r6,r6,r2
 80023c0:	30800015 	stw	r2,0(r6)
 80023c4:	003fbb06 	br	80022b4 <__alt_data_end+0xfc0022b4>
 80023c8:	10c00054 	ori	r3,r2,1
 80023cc:	30c00115 	stw	r3,4(r6)
 80023d0:	308d883a 	add	r6,r6,r2
 80023d4:	30800015 	stw	r2,0(r6)
 80023d8:	003fb606 	br	80022b4 <__alt_data_end+0xfc0022b4>
 80023dc:	01000504 	movi	r4,20
 80023e0:	20c01436 	bltu	r4,r3,8002434 <_free_r+0x29c>
 80023e4:	194016c4 	addi	r5,r3,91
 80023e8:	2947883a 	add	r3,r5,r5
 80023ec:	003fbe06 	br	80022e8 <__alt_data_end+0xfc0022e8>
 80023f0:	280bd0ba 	srai	r5,r5,2
 80023f4:	00800044 	movi	r2,1
 80023f8:	39000117 	ldw	r4,4(r7)
 80023fc:	114a983a 	sll	r5,r2,r5
 8002400:	1805883a 	mov	r2,r3
 8002404:	2908b03a 	or	r4,r5,r4
 8002408:	39000115 	stw	r4,4(r7)
 800240c:	003fc406 	br	8002320 <__alt_data_end+0xfc002320>
 8002410:	49800515 	stw	r6,20(r9)
 8002414:	49800415 	stw	r6,16(r9)
 8002418:	10c00054 	ori	r3,r2,1
 800241c:	31000315 	stw	r4,12(r6)
 8002420:	31000215 	stw	r4,8(r6)
 8002424:	30c00115 	stw	r3,4(r6)
 8002428:	308d883a 	add	r6,r6,r2
 800242c:	30800015 	stw	r2,0(r6)
 8002430:	003fa006 	br	80022b4 <__alt_data_end+0xfc0022b4>
 8002434:	01001504 	movi	r4,84
 8002438:	20c00436 	bltu	r4,r3,800244c <_free_r+0x2b4>
 800243c:	1006d33a 	srli	r3,r2,12
 8002440:	19401b84 	addi	r5,r3,110
 8002444:	2947883a 	add	r3,r5,r5
 8002448:	003fa706 	br	80022e8 <__alt_data_end+0xfc0022e8>
 800244c:	01005504 	movi	r4,340
 8002450:	20c00436 	bltu	r4,r3,8002464 <_free_r+0x2cc>
 8002454:	1006d3fa 	srli	r3,r2,15
 8002458:	19401dc4 	addi	r5,r3,119
 800245c:	2947883a 	add	r3,r5,r5
 8002460:	003fa106 	br	80022e8 <__alt_data_end+0xfc0022e8>
 8002464:	01015504 	movi	r4,1364
 8002468:	20c00436 	bltu	r4,r3,800247c <_free_r+0x2e4>
 800246c:	1006d4ba 	srli	r3,r2,18
 8002470:	19401f04 	addi	r5,r3,124
 8002474:	2947883a 	add	r3,r5,r5
 8002478:	003f9b06 	br	80022e8 <__alt_data_end+0xfc0022e8>
 800247c:	00c03f04 	movi	r3,252
 8002480:	01401f84 	movi	r5,126
 8002484:	003f9806 	br	80022e8 <__alt_data_end+0xfc0022e8>

08002488 <_fwalk>:
 8002488:	defff804 	addi	sp,sp,-32
 800248c:	dd400515 	stw	r21,20(sp)
 8002490:	2540b804 	addi	r21,r4,736
 8002494:	dd800615 	stw	r22,24(sp)
 8002498:	dd000415 	stw	r20,16(sp)
 800249c:	dfc00715 	stw	ra,28(sp)
 80024a0:	dcc00315 	stw	r19,12(sp)
 80024a4:	dc800215 	stw	r18,8(sp)
 80024a8:	dc400115 	stw	r17,4(sp)
 80024ac:	dc000015 	stw	r16,0(sp)
 80024b0:	2829883a 	mov	r20,r5
 80024b4:	002d883a 	mov	r22,zero
 80024b8:	80020340 	call	8002034 <__sfp_lock_acquire>
 80024bc:	a8001426 	beq	r21,zero,8002510 <_fwalk+0x88>
 80024c0:	04ffffc4 	movi	r19,-1
 80024c4:	ac400117 	ldw	r17,4(r21)
 80024c8:	ac800217 	ldw	r18,8(r21)
 80024cc:	8c7fffc4 	addi	r17,r17,-1
 80024d0:	88000d16 	blt	r17,zero,8002508 <_fwalk+0x80>
 80024d4:	94000304 	addi	r16,r18,12
 80024d8:	94800384 	addi	r18,r18,14
 80024dc:	80c0000f 	ldh	r3,0(r16)
 80024e0:	8c7fffc4 	addi	r17,r17,-1
 80024e4:	813ffd04 	addi	r4,r16,-12
 80024e8:	18000426 	beq	r3,zero,80024fc <_fwalk+0x74>
 80024ec:	90c0000f 	ldh	r3,0(r18)
 80024f0:	1cc00226 	beq	r3,r19,80024fc <_fwalk+0x74>
 80024f4:	a03ee83a 	callr	r20
 80024f8:	b0acb03a 	or	r22,r22,r2
 80024fc:	84001a04 	addi	r16,r16,104
 8002500:	94801a04 	addi	r18,r18,104
 8002504:	8cfff51e 	bne	r17,r19,80024dc <__alt_data_end+0xfc0024dc>
 8002508:	ad400017 	ldw	r21,0(r21)
 800250c:	a83fed1e 	bne	r21,zero,80024c4 <__alt_data_end+0xfc0024c4>
 8002510:	80020380 	call	8002038 <__sfp_lock_release>
 8002514:	b005883a 	mov	r2,r22
 8002518:	dfc00717 	ldw	ra,28(sp)
 800251c:	dd800617 	ldw	r22,24(sp)
 8002520:	dd400517 	ldw	r21,20(sp)
 8002524:	dd000417 	ldw	r20,16(sp)
 8002528:	dcc00317 	ldw	r19,12(sp)
 800252c:	dc800217 	ldw	r18,8(sp)
 8002530:	dc400117 	ldw	r17,4(sp)
 8002534:	dc000017 	ldw	r16,0(sp)
 8002538:	dec00804 	addi	sp,sp,32
 800253c:	f800283a 	ret

08002540 <_fwalk_reent>:
 8002540:	defff804 	addi	sp,sp,-32
 8002544:	dd400515 	stw	r21,20(sp)
 8002548:	2540b804 	addi	r21,r4,736
 800254c:	dd800615 	stw	r22,24(sp)
 8002550:	dd000415 	stw	r20,16(sp)
 8002554:	dcc00315 	stw	r19,12(sp)
 8002558:	dfc00715 	stw	ra,28(sp)
 800255c:	dc800215 	stw	r18,8(sp)
 8002560:	dc400115 	stw	r17,4(sp)
 8002564:	dc000015 	stw	r16,0(sp)
 8002568:	2027883a 	mov	r19,r4
 800256c:	2829883a 	mov	r20,r5
 8002570:	002d883a 	mov	r22,zero
 8002574:	80020340 	call	8002034 <__sfp_lock_acquire>
 8002578:	a8001326 	beq	r21,zero,80025c8 <_fwalk_reent+0x88>
 800257c:	04bfffc4 	movi	r18,-1
 8002580:	ac400117 	ldw	r17,4(r21)
 8002584:	ac000217 	ldw	r16,8(r21)
 8002588:	8c7fffc4 	addi	r17,r17,-1
 800258c:	88000c16 	blt	r17,zero,80025c0 <_fwalk_reent+0x80>
 8002590:	84000304 	addi	r16,r16,12
 8002594:	80c0000f 	ldh	r3,0(r16)
 8002598:	8c7fffc4 	addi	r17,r17,-1
 800259c:	817ffd04 	addi	r5,r16,-12
 80025a0:	18000526 	beq	r3,zero,80025b8 <_fwalk_reent+0x78>
 80025a4:	80c0008f 	ldh	r3,2(r16)
 80025a8:	9809883a 	mov	r4,r19
 80025ac:	1c800226 	beq	r3,r18,80025b8 <_fwalk_reent+0x78>
 80025b0:	a03ee83a 	callr	r20
 80025b4:	b0acb03a 	or	r22,r22,r2
 80025b8:	84001a04 	addi	r16,r16,104
 80025bc:	8cbff51e 	bne	r17,r18,8002594 <__alt_data_end+0xfc002594>
 80025c0:	ad400017 	ldw	r21,0(r21)
 80025c4:	a83fee1e 	bne	r21,zero,8002580 <__alt_data_end+0xfc002580>
 80025c8:	80020380 	call	8002038 <__sfp_lock_release>
 80025cc:	b005883a 	mov	r2,r22
 80025d0:	dfc00717 	ldw	ra,28(sp)
 80025d4:	dd800617 	ldw	r22,24(sp)
 80025d8:	dd400517 	ldw	r21,20(sp)
 80025dc:	dd000417 	ldw	r20,16(sp)
 80025e0:	dcc00317 	ldw	r19,12(sp)
 80025e4:	dc800217 	ldw	r18,8(sp)
 80025e8:	dc400117 	ldw	r17,4(sp)
 80025ec:	dc000017 	ldw	r16,0(sp)
 80025f0:	dec00804 	addi	sp,sp,32
 80025f4:	f800283a 	ret

080025f8 <__smakebuf_r>:
 80025f8:	2880030b 	ldhu	r2,12(r5)
 80025fc:	10c0008c 	andi	r3,r2,2
 8002600:	1800401e 	bne	r3,zero,8002704 <__smakebuf_r+0x10c>
 8002604:	deffec04 	addi	sp,sp,-80
 8002608:	dc000f15 	stw	r16,60(sp)
 800260c:	2821883a 	mov	r16,r5
 8002610:	2940038f 	ldh	r5,14(r5)
 8002614:	dc401015 	stw	r17,64(sp)
 8002618:	dfc01315 	stw	ra,76(sp)
 800261c:	dcc01215 	stw	r19,72(sp)
 8002620:	dc801115 	stw	r18,68(sp)
 8002624:	2023883a 	mov	r17,r4
 8002628:	28001b16 	blt	r5,zero,8002698 <__smakebuf_r+0xa0>
 800262c:	d80d883a 	mov	r6,sp
 8002630:	8002bd40 	call	8002bd4 <_fstat_r>
 8002634:	10001716 	blt	r2,zero,8002694 <__smakebuf_r+0x9c>
 8002638:	d8800117 	ldw	r2,4(sp)
 800263c:	00e00014 	movui	r3,32768
 8002640:	10bc000c 	andi	r2,r2,61440
 8002644:	10c03726 	beq	r2,r3,8002724 <__smakebuf_r+0x12c>
 8002648:	80c0030b 	ldhu	r3,12(r16)
 800264c:	18c20014 	ori	r3,r3,2048
 8002650:	80c0030d 	sth	r3,12(r16)
 8002654:	00c80004 	movi	r3,8192
 8002658:	10c03c1e 	bne	r2,r3,800274c <__smakebuf_r+0x154>
 800265c:	8140038f 	ldh	r5,14(r16)
 8002660:	8809883a 	mov	r4,r17
 8002664:	8002c2c0 	call	8002c2c <_isatty_r>
 8002668:	10004e26 	beq	r2,zero,80027a4 <__smakebuf_r+0x1ac>
 800266c:	8080030b 	ldhu	r2,12(r16)
 8002670:	04c00044 	movi	r19,1
 8002674:	80c010c4 	addi	r3,r16,67
 8002678:	14c4b03a 	or	r2,r2,r19
 800267c:	8080030d 	sth	r2,12(r16)
 8002680:	80c00015 	stw	r3,0(r16)
 8002684:	80c00415 	stw	r3,16(r16)
 8002688:	84c00515 	stw	r19,20(r16)
 800268c:	04810004 	movi	r18,1024
 8002690:	00000706 	br	80026b0 <__smakebuf_r+0xb8>
 8002694:	8080030b 	ldhu	r2,12(r16)
 8002698:	10c0200c 	andi	r3,r2,128
 800269c:	18001f1e 	bne	r3,zero,800271c <__smakebuf_r+0x124>
 80026a0:	04810004 	movi	r18,1024
 80026a4:	10820014 	ori	r2,r2,2048
 80026a8:	8080030d 	sth	r2,12(r16)
 80026ac:	0027883a 	mov	r19,zero
 80026b0:	8809883a 	mov	r4,r17
 80026b4:	900b883a 	mov	r5,r18
 80026b8:	80008340 	call	8000834 <_malloc_r>
 80026bc:	10002e26 	beq	r2,zero,8002778 <__smakebuf_r+0x180>
 80026c0:	80c0030b 	ldhu	r3,12(r16)
 80026c4:	01020034 	movhi	r4,2048
 80026c8:	21073904 	addi	r4,r4,7396
 80026cc:	89000f15 	stw	r4,60(r17)
 80026d0:	18c02014 	ori	r3,r3,128
 80026d4:	80c0030d 	sth	r3,12(r16)
 80026d8:	80800015 	stw	r2,0(r16)
 80026dc:	80800415 	stw	r2,16(r16)
 80026e0:	84800515 	stw	r18,20(r16)
 80026e4:	98001c1e 	bne	r19,zero,8002758 <__smakebuf_r+0x160>
 80026e8:	dfc01317 	ldw	ra,76(sp)
 80026ec:	dcc01217 	ldw	r19,72(sp)
 80026f0:	dc801117 	ldw	r18,68(sp)
 80026f4:	dc401017 	ldw	r17,64(sp)
 80026f8:	dc000f17 	ldw	r16,60(sp)
 80026fc:	dec01404 	addi	sp,sp,80
 8002700:	f800283a 	ret
 8002704:	288010c4 	addi	r2,r5,67
 8002708:	28800015 	stw	r2,0(r5)
 800270c:	28800415 	stw	r2,16(r5)
 8002710:	00800044 	movi	r2,1
 8002714:	28800515 	stw	r2,20(r5)
 8002718:	f800283a 	ret
 800271c:	04801004 	movi	r18,64
 8002720:	003fe006 	br	80026a4 <__alt_data_end+0xfc0026a4>
 8002724:	81000a17 	ldw	r4,40(r16)
 8002728:	00c20034 	movhi	r3,2048
 800272c:	18ca6b04 	addi	r3,r3,10668
 8002730:	20ffc51e 	bne	r4,r3,8002648 <__alt_data_end+0xfc002648>
 8002734:	80c0030b 	ldhu	r3,12(r16)
 8002738:	01010004 	movi	r4,1024
 800273c:	81001315 	stw	r4,76(r16)
 8002740:	1906b03a 	or	r3,r3,r4
 8002744:	80c0030d 	sth	r3,12(r16)
 8002748:	003fc206 	br	8002654 <__alt_data_end+0xfc002654>
 800274c:	0027883a 	mov	r19,zero
 8002750:	04810004 	movi	r18,1024
 8002754:	003fd606 	br	80026b0 <__alt_data_end+0xfc0026b0>
 8002758:	8140038f 	ldh	r5,14(r16)
 800275c:	8809883a 	mov	r4,r17
 8002760:	8002c2c0 	call	8002c2c <_isatty_r>
 8002764:	103fe026 	beq	r2,zero,80026e8 <__alt_data_end+0xfc0026e8>
 8002768:	8080030b 	ldhu	r2,12(r16)
 800276c:	10800054 	ori	r2,r2,1
 8002770:	8080030d 	sth	r2,12(r16)
 8002774:	003fdc06 	br	80026e8 <__alt_data_end+0xfc0026e8>
 8002778:	8080030b 	ldhu	r2,12(r16)
 800277c:	10c0800c 	andi	r3,r2,512
 8002780:	183fd91e 	bne	r3,zero,80026e8 <__alt_data_end+0xfc0026e8>
 8002784:	10800094 	ori	r2,r2,2
 8002788:	80c010c4 	addi	r3,r16,67
 800278c:	8080030d 	sth	r2,12(r16)
 8002790:	00800044 	movi	r2,1
 8002794:	80c00015 	stw	r3,0(r16)
 8002798:	80c00415 	stw	r3,16(r16)
 800279c:	80800515 	stw	r2,20(r16)
 80027a0:	003fd106 	br	80026e8 <__alt_data_end+0xfc0026e8>
 80027a4:	04c00044 	movi	r19,1
 80027a8:	04810004 	movi	r18,1024
 80027ac:	003fc006 	br	80026b0 <__alt_data_end+0xfc0026b0>

080027b0 <memset>:
 80027b0:	20c000cc 	andi	r3,r4,3
 80027b4:	2005883a 	mov	r2,r4
 80027b8:	18004326 	beq	r3,zero,80028c8 <memset+0x118>
 80027bc:	31ffffc4 	addi	r7,r6,-1
 80027c0:	30004026 	beq	r6,zero,80028c4 <memset+0x114>
 80027c4:	2813883a 	mov	r9,r5
 80027c8:	200d883a 	mov	r6,r4
 80027cc:	2007883a 	mov	r3,r4
 80027d0:	00000406 	br	80027e4 <memset+0x34>
 80027d4:	3a3fffc4 	addi	r8,r7,-1
 80027d8:	31800044 	addi	r6,r6,1
 80027dc:	38003926 	beq	r7,zero,80028c4 <memset+0x114>
 80027e0:	400f883a 	mov	r7,r8
 80027e4:	18c00044 	addi	r3,r3,1
 80027e8:	32400005 	stb	r9,0(r6)
 80027ec:	1a0000cc 	andi	r8,r3,3
 80027f0:	403ff81e 	bne	r8,zero,80027d4 <__alt_data_end+0xfc0027d4>
 80027f4:	010000c4 	movi	r4,3
 80027f8:	21c02d2e 	bgeu	r4,r7,80028b0 <memset+0x100>
 80027fc:	29803fcc 	andi	r6,r5,255
 8002800:	3008923a 	slli	r4,r6,8
 8002804:	218cb03a 	or	r6,r4,r6
 8002808:	3008943a 	slli	r4,r6,16
 800280c:	218cb03a 	or	r6,r4,r6
 8002810:	010003c4 	movi	r4,15
 8002814:	21c0182e 	bgeu	r4,r7,8002878 <memset+0xc8>
 8002818:	3b3ffc04 	addi	r12,r7,-16
 800281c:	6018d13a 	srli	r12,r12,4
 8002820:	1a000104 	addi	r8,r3,4
 8002824:	1ac00204 	addi	r11,r3,8
 8002828:	6008913a 	slli	r4,r12,4
 800282c:	1a800304 	addi	r10,r3,12
 8002830:	1813883a 	mov	r9,r3
 8002834:	21000504 	addi	r4,r4,20
 8002838:	1909883a 	add	r4,r3,r4
 800283c:	49800015 	stw	r6,0(r9)
 8002840:	41800015 	stw	r6,0(r8)
 8002844:	59800015 	stw	r6,0(r11)
 8002848:	51800015 	stw	r6,0(r10)
 800284c:	42000404 	addi	r8,r8,16
 8002850:	4a400404 	addi	r9,r9,16
 8002854:	5ac00404 	addi	r11,r11,16
 8002858:	52800404 	addi	r10,r10,16
 800285c:	413ff71e 	bne	r8,r4,800283c <__alt_data_end+0xfc00283c>
 8002860:	63000044 	addi	r12,r12,1
 8002864:	6018913a 	slli	r12,r12,4
 8002868:	39c003cc 	andi	r7,r7,15
 800286c:	010000c4 	movi	r4,3
 8002870:	1b07883a 	add	r3,r3,r12
 8002874:	21c00e2e 	bgeu	r4,r7,80028b0 <memset+0x100>
 8002878:	1813883a 	mov	r9,r3
 800287c:	3811883a 	mov	r8,r7
 8002880:	010000c4 	movi	r4,3
 8002884:	49800015 	stw	r6,0(r9)
 8002888:	423fff04 	addi	r8,r8,-4
 800288c:	4a400104 	addi	r9,r9,4
 8002890:	223ffc36 	bltu	r4,r8,8002884 <__alt_data_end+0xfc002884>
 8002894:	393fff04 	addi	r4,r7,-4
 8002898:	2008d0ba 	srli	r4,r4,2
 800289c:	39c000cc 	andi	r7,r7,3
 80028a0:	21000044 	addi	r4,r4,1
 80028a4:	2109883a 	add	r4,r4,r4
 80028a8:	2109883a 	add	r4,r4,r4
 80028ac:	1907883a 	add	r3,r3,r4
 80028b0:	38000426 	beq	r7,zero,80028c4 <memset+0x114>
 80028b4:	19cf883a 	add	r7,r3,r7
 80028b8:	19400005 	stb	r5,0(r3)
 80028bc:	18c00044 	addi	r3,r3,1
 80028c0:	19fffd1e 	bne	r3,r7,80028b8 <__alt_data_end+0xfc0028b8>
 80028c4:	f800283a 	ret
 80028c8:	2007883a 	mov	r3,r4
 80028cc:	300f883a 	mov	r7,r6
 80028d0:	003fc806 	br	80027f4 <__alt_data_end+0xfc0027f4>

080028d4 <__sread>:
 80028d4:	defffe04 	addi	sp,sp,-8
 80028d8:	dc000015 	stw	r16,0(sp)
 80028dc:	2821883a 	mov	r16,r5
 80028e0:	2940038f 	ldh	r5,14(r5)
 80028e4:	dfc00115 	stw	ra,4(sp)
 80028e8:	8002cdc0 	call	8002cdc <_read_r>
 80028ec:	10000716 	blt	r2,zero,800290c <__sread+0x38>
 80028f0:	80c01417 	ldw	r3,80(r16)
 80028f4:	1887883a 	add	r3,r3,r2
 80028f8:	80c01415 	stw	r3,80(r16)
 80028fc:	dfc00117 	ldw	ra,4(sp)
 8002900:	dc000017 	ldw	r16,0(sp)
 8002904:	dec00204 	addi	sp,sp,8
 8002908:	f800283a 	ret
 800290c:	80c0030b 	ldhu	r3,12(r16)
 8002910:	18fbffcc 	andi	r3,r3,61439
 8002914:	80c0030d 	sth	r3,12(r16)
 8002918:	dfc00117 	ldw	ra,4(sp)
 800291c:	dc000017 	ldw	r16,0(sp)
 8002920:	dec00204 	addi	sp,sp,8
 8002924:	f800283a 	ret

08002928 <__seofread>:
 8002928:	0005883a 	mov	r2,zero
 800292c:	f800283a 	ret

08002930 <__swrite>:
 8002930:	2880030b 	ldhu	r2,12(r5)
 8002934:	defffb04 	addi	sp,sp,-20
 8002938:	dcc00315 	stw	r19,12(sp)
 800293c:	dc800215 	stw	r18,8(sp)
 8002940:	dc400115 	stw	r17,4(sp)
 8002944:	dc000015 	stw	r16,0(sp)
 8002948:	dfc00415 	stw	ra,16(sp)
 800294c:	10c0400c 	andi	r3,r2,256
 8002950:	2821883a 	mov	r16,r5
 8002954:	2027883a 	mov	r19,r4
 8002958:	3025883a 	mov	r18,r6
 800295c:	3823883a 	mov	r17,r7
 8002960:	18000526 	beq	r3,zero,8002978 <__swrite+0x48>
 8002964:	2940038f 	ldh	r5,14(r5)
 8002968:	000d883a 	mov	r6,zero
 800296c:	01c00084 	movi	r7,2
 8002970:	8002c800 	call	8002c80 <_lseek_r>
 8002974:	8080030b 	ldhu	r2,12(r16)
 8002978:	8140038f 	ldh	r5,14(r16)
 800297c:	10bbffcc 	andi	r2,r2,61439
 8002980:	9809883a 	mov	r4,r19
 8002984:	900d883a 	mov	r6,r18
 8002988:	880f883a 	mov	r7,r17
 800298c:	8080030d 	sth	r2,12(r16)
 8002990:	dfc00417 	ldw	ra,16(sp)
 8002994:	dcc00317 	ldw	r19,12(sp)
 8002998:	dc800217 	ldw	r18,8(sp)
 800299c:	dc400117 	ldw	r17,4(sp)
 80029a0:	dc000017 	ldw	r16,0(sp)
 80029a4:	dec00504 	addi	sp,sp,20
 80029a8:	8002a101 	jmpi	8002a10 <_write_r>

080029ac <__sseek>:
 80029ac:	defffe04 	addi	sp,sp,-8
 80029b0:	dc000015 	stw	r16,0(sp)
 80029b4:	2821883a 	mov	r16,r5
 80029b8:	2940038f 	ldh	r5,14(r5)
 80029bc:	dfc00115 	stw	ra,4(sp)
 80029c0:	8002c800 	call	8002c80 <_lseek_r>
 80029c4:	00ffffc4 	movi	r3,-1
 80029c8:	10c00826 	beq	r2,r3,80029ec <__sseek+0x40>
 80029cc:	80c0030b 	ldhu	r3,12(r16)
 80029d0:	80801415 	stw	r2,80(r16)
 80029d4:	18c40014 	ori	r3,r3,4096
 80029d8:	80c0030d 	sth	r3,12(r16)
 80029dc:	dfc00117 	ldw	ra,4(sp)
 80029e0:	dc000017 	ldw	r16,0(sp)
 80029e4:	dec00204 	addi	sp,sp,8
 80029e8:	f800283a 	ret
 80029ec:	80c0030b 	ldhu	r3,12(r16)
 80029f0:	18fbffcc 	andi	r3,r3,61439
 80029f4:	80c0030d 	sth	r3,12(r16)
 80029f8:	dfc00117 	ldw	ra,4(sp)
 80029fc:	dc000017 	ldw	r16,0(sp)
 8002a00:	dec00204 	addi	sp,sp,8
 8002a04:	f800283a 	ret

08002a08 <__sclose>:
 8002a08:	2940038f 	ldh	r5,14(r5)
 8002a0c:	8002a6c1 	jmpi	8002a6c <_close_r>

08002a10 <_write_r>:
 8002a10:	defffd04 	addi	sp,sp,-12
 8002a14:	dc000015 	stw	r16,0(sp)
 8002a18:	04020074 	movhi	r16,2049
 8002a1c:	dc400115 	stw	r17,4(sp)
 8002a20:	8423dd04 	addi	r16,r16,-28812
 8002a24:	2023883a 	mov	r17,r4
 8002a28:	2809883a 	mov	r4,r5
 8002a2c:	300b883a 	mov	r5,r6
 8002a30:	380d883a 	mov	r6,r7
 8002a34:	dfc00215 	stw	ra,8(sp)
 8002a38:	80000015 	stw	zero,0(r16)
 8002a3c:	80035e40 	call	80035e4 <write>
 8002a40:	00ffffc4 	movi	r3,-1
 8002a44:	10c00526 	beq	r2,r3,8002a5c <_write_r+0x4c>
 8002a48:	dfc00217 	ldw	ra,8(sp)
 8002a4c:	dc400117 	ldw	r17,4(sp)
 8002a50:	dc000017 	ldw	r16,0(sp)
 8002a54:	dec00304 	addi	sp,sp,12
 8002a58:	f800283a 	ret
 8002a5c:	80c00017 	ldw	r3,0(r16)
 8002a60:	183ff926 	beq	r3,zero,8002a48 <__alt_data_end+0xfc002a48>
 8002a64:	88c00015 	stw	r3,0(r17)
 8002a68:	003ff706 	br	8002a48 <__alt_data_end+0xfc002a48>

08002a6c <_close_r>:
 8002a6c:	defffd04 	addi	sp,sp,-12
 8002a70:	dc000015 	stw	r16,0(sp)
 8002a74:	04020074 	movhi	r16,2049
 8002a78:	dc400115 	stw	r17,4(sp)
 8002a7c:	8423dd04 	addi	r16,r16,-28812
 8002a80:	2023883a 	mov	r17,r4
 8002a84:	2809883a 	mov	r4,r5
 8002a88:	dfc00215 	stw	ra,8(sp)
 8002a8c:	80000015 	stw	zero,0(r16)
 8002a90:	8002d880 	call	8002d88 <close>
 8002a94:	00ffffc4 	movi	r3,-1
 8002a98:	10c00526 	beq	r2,r3,8002ab0 <_close_r+0x44>
 8002a9c:	dfc00217 	ldw	ra,8(sp)
 8002aa0:	dc400117 	ldw	r17,4(sp)
 8002aa4:	dc000017 	ldw	r16,0(sp)
 8002aa8:	dec00304 	addi	sp,sp,12
 8002aac:	f800283a 	ret
 8002ab0:	80c00017 	ldw	r3,0(r16)
 8002ab4:	183ff926 	beq	r3,zero,8002a9c <__alt_data_end+0xfc002a9c>
 8002ab8:	88c00015 	stw	r3,0(r17)
 8002abc:	003ff706 	br	8002a9c <__alt_data_end+0xfc002a9c>

08002ac0 <_fclose_r>:
 8002ac0:	28003226 	beq	r5,zero,8002b8c <_fclose_r+0xcc>
 8002ac4:	defffc04 	addi	sp,sp,-16
 8002ac8:	dc400115 	stw	r17,4(sp)
 8002acc:	2023883a 	mov	r17,r4
 8002ad0:	dc000015 	stw	r16,0(sp)
 8002ad4:	dfc00315 	stw	ra,12(sp)
 8002ad8:	dc800215 	stw	r18,8(sp)
 8002adc:	2821883a 	mov	r16,r5
 8002ae0:	80020340 	call	8002034 <__sfp_lock_acquire>
 8002ae4:	88000226 	beq	r17,zero,8002af0 <_fclose_r+0x30>
 8002ae8:	88800e17 	ldw	r2,56(r17)
 8002aec:	10002926 	beq	r2,zero,8002b94 <_fclose_r+0xd4>
 8002af0:	8080030f 	ldh	r2,12(r16)
 8002af4:	10002226 	beq	r2,zero,8002b80 <_fclose_r+0xc0>
 8002af8:	8809883a 	mov	r4,r17
 8002afc:	800b883a 	mov	r5,r16
 8002b00:	8001a7c0 	call	8001a7c <_fflush_r>
 8002b04:	1025883a 	mov	r18,r2
 8002b08:	80800b17 	ldw	r2,44(r16)
 8002b0c:	10000426 	beq	r2,zero,8002b20 <_fclose_r+0x60>
 8002b10:	81400717 	ldw	r5,28(r16)
 8002b14:	8809883a 	mov	r4,r17
 8002b18:	103ee83a 	callr	r2
 8002b1c:	10002616 	blt	r2,zero,8002bb8 <_fclose_r+0xf8>
 8002b20:	8080030b 	ldhu	r2,12(r16)
 8002b24:	1080200c 	andi	r2,r2,128
 8002b28:	10001f1e 	bne	r2,zero,8002ba8 <_fclose_r+0xe8>
 8002b2c:	81400c17 	ldw	r5,48(r16)
 8002b30:	28000526 	beq	r5,zero,8002b48 <_fclose_r+0x88>
 8002b34:	80801004 	addi	r2,r16,64
 8002b38:	28800226 	beq	r5,r2,8002b44 <_fclose_r+0x84>
 8002b3c:	8809883a 	mov	r4,r17
 8002b40:	80021980 	call	8002198 <_free_r>
 8002b44:	80000c15 	stw	zero,48(r16)
 8002b48:	81401117 	ldw	r5,68(r16)
 8002b4c:	28000326 	beq	r5,zero,8002b5c <_fclose_r+0x9c>
 8002b50:	8809883a 	mov	r4,r17
 8002b54:	80021980 	call	8002198 <_free_r>
 8002b58:	80001115 	stw	zero,68(r16)
 8002b5c:	8000030d 	sth	zero,12(r16)
 8002b60:	80020380 	call	8002038 <__sfp_lock_release>
 8002b64:	9005883a 	mov	r2,r18
 8002b68:	dfc00317 	ldw	ra,12(sp)
 8002b6c:	dc800217 	ldw	r18,8(sp)
 8002b70:	dc400117 	ldw	r17,4(sp)
 8002b74:	dc000017 	ldw	r16,0(sp)
 8002b78:	dec00404 	addi	sp,sp,16
 8002b7c:	f800283a 	ret
 8002b80:	80020380 	call	8002038 <__sfp_lock_release>
 8002b84:	0005883a 	mov	r2,zero
 8002b88:	003ff706 	br	8002b68 <__alt_data_end+0xfc002b68>
 8002b8c:	0005883a 	mov	r2,zero
 8002b90:	f800283a 	ret
 8002b94:	8809883a 	mov	r4,r17
 8002b98:	80020240 	call	8002024 <__sinit>
 8002b9c:	8080030f 	ldh	r2,12(r16)
 8002ba0:	103fd51e 	bne	r2,zero,8002af8 <__alt_data_end+0xfc002af8>
 8002ba4:	003ff606 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002ba8:	81400417 	ldw	r5,16(r16)
 8002bac:	8809883a 	mov	r4,r17
 8002bb0:	80021980 	call	8002198 <_free_r>
 8002bb4:	003fdd06 	br	8002b2c <__alt_data_end+0xfc002b2c>
 8002bb8:	04bfffc4 	movi	r18,-1
 8002bbc:	003fd806 	br	8002b20 <__alt_data_end+0xfc002b20>

08002bc0 <fclose>:
 8002bc0:	00820034 	movhi	r2,2048
 8002bc4:	109d2704 	addi	r2,r2,29852
 8002bc8:	200b883a 	mov	r5,r4
 8002bcc:	11000017 	ldw	r4,0(r2)
 8002bd0:	8002ac01 	jmpi	8002ac0 <_fclose_r>

08002bd4 <_fstat_r>:
 8002bd4:	defffd04 	addi	sp,sp,-12
 8002bd8:	dc000015 	stw	r16,0(sp)
 8002bdc:	04020074 	movhi	r16,2049
 8002be0:	dc400115 	stw	r17,4(sp)
 8002be4:	8423dd04 	addi	r16,r16,-28812
 8002be8:	2023883a 	mov	r17,r4
 8002bec:	2809883a 	mov	r4,r5
 8002bf0:	300b883a 	mov	r5,r6
 8002bf4:	dfc00215 	stw	ra,8(sp)
 8002bf8:	80000015 	stw	zero,0(r16)
 8002bfc:	8002ed40 	call	8002ed4 <fstat>
 8002c00:	00ffffc4 	movi	r3,-1
 8002c04:	10c00526 	beq	r2,r3,8002c1c <_fstat_r+0x48>
 8002c08:	dfc00217 	ldw	ra,8(sp)
 8002c0c:	dc400117 	ldw	r17,4(sp)
 8002c10:	dc000017 	ldw	r16,0(sp)
 8002c14:	dec00304 	addi	sp,sp,12
 8002c18:	f800283a 	ret
 8002c1c:	80c00017 	ldw	r3,0(r16)
 8002c20:	183ff926 	beq	r3,zero,8002c08 <__alt_data_end+0xfc002c08>
 8002c24:	88c00015 	stw	r3,0(r17)
 8002c28:	003ff706 	br	8002c08 <__alt_data_end+0xfc002c08>

08002c2c <_isatty_r>:
 8002c2c:	defffd04 	addi	sp,sp,-12
 8002c30:	dc000015 	stw	r16,0(sp)
 8002c34:	04020074 	movhi	r16,2049
 8002c38:	dc400115 	stw	r17,4(sp)
 8002c3c:	8423dd04 	addi	r16,r16,-28812
 8002c40:	2023883a 	mov	r17,r4
 8002c44:	2809883a 	mov	r4,r5
 8002c48:	dfc00215 	stw	ra,8(sp)
 8002c4c:	80000015 	stw	zero,0(r16)
 8002c50:	8002fd40 	call	8002fd4 <isatty>
 8002c54:	00ffffc4 	movi	r3,-1
 8002c58:	10c00526 	beq	r2,r3,8002c70 <_isatty_r+0x44>
 8002c5c:	dfc00217 	ldw	ra,8(sp)
 8002c60:	dc400117 	ldw	r17,4(sp)
 8002c64:	dc000017 	ldw	r16,0(sp)
 8002c68:	dec00304 	addi	sp,sp,12
 8002c6c:	f800283a 	ret
 8002c70:	80c00017 	ldw	r3,0(r16)
 8002c74:	183ff926 	beq	r3,zero,8002c5c <__alt_data_end+0xfc002c5c>
 8002c78:	88c00015 	stw	r3,0(r17)
 8002c7c:	003ff706 	br	8002c5c <__alt_data_end+0xfc002c5c>

08002c80 <_lseek_r>:
 8002c80:	defffd04 	addi	sp,sp,-12
 8002c84:	dc000015 	stw	r16,0(sp)
 8002c88:	04020074 	movhi	r16,2049
 8002c8c:	dc400115 	stw	r17,4(sp)
 8002c90:	8423dd04 	addi	r16,r16,-28812
 8002c94:	2023883a 	mov	r17,r4
 8002c98:	2809883a 	mov	r4,r5
 8002c9c:	300b883a 	mov	r5,r6
 8002ca0:	380d883a 	mov	r6,r7
 8002ca4:	dfc00215 	stw	ra,8(sp)
 8002ca8:	80000015 	stw	zero,0(r16)
 8002cac:	80031ac0 	call	80031ac <lseek>
 8002cb0:	00ffffc4 	movi	r3,-1
 8002cb4:	10c00526 	beq	r2,r3,8002ccc <_lseek_r+0x4c>
 8002cb8:	dfc00217 	ldw	ra,8(sp)
 8002cbc:	dc400117 	ldw	r17,4(sp)
 8002cc0:	dc000017 	ldw	r16,0(sp)
 8002cc4:	dec00304 	addi	sp,sp,12
 8002cc8:	f800283a 	ret
 8002ccc:	80c00017 	ldw	r3,0(r16)
 8002cd0:	183ff926 	beq	r3,zero,8002cb8 <__alt_data_end+0xfc002cb8>
 8002cd4:	88c00015 	stw	r3,0(r17)
 8002cd8:	003ff706 	br	8002cb8 <__alt_data_end+0xfc002cb8>

08002cdc <_read_r>:
 8002cdc:	defffd04 	addi	sp,sp,-12
 8002ce0:	dc000015 	stw	r16,0(sp)
 8002ce4:	04020074 	movhi	r16,2049
 8002ce8:	dc400115 	stw	r17,4(sp)
 8002cec:	8423dd04 	addi	r16,r16,-28812
 8002cf0:	2023883a 	mov	r17,r4
 8002cf4:	2809883a 	mov	r4,r5
 8002cf8:	300b883a 	mov	r5,r6
 8002cfc:	380d883a 	mov	r6,r7
 8002d00:	dfc00215 	stw	ra,8(sp)
 8002d04:	80000015 	stw	zero,0(r16)
 8002d08:	80033880 	call	8003388 <read>
 8002d0c:	00ffffc4 	movi	r3,-1
 8002d10:	10c00526 	beq	r2,r3,8002d28 <_read_r+0x4c>
 8002d14:	dfc00217 	ldw	ra,8(sp)
 8002d18:	dc400117 	ldw	r17,4(sp)
 8002d1c:	dc000017 	ldw	r16,0(sp)
 8002d20:	dec00304 	addi	sp,sp,12
 8002d24:	f800283a 	ret
 8002d28:	80c00017 	ldw	r3,0(r16)
 8002d2c:	183ff926 	beq	r3,zero,8002d14 <__alt_data_end+0xfc002d14>
 8002d30:	88c00015 	stw	r3,0(r17)
 8002d34:	003ff706 	br	8002d14 <__alt_data_end+0xfc002d14>

08002d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002d38:	defffe04 	addi	sp,sp,-8
 8002d3c:	dfc00115 	stw	ra,4(sp)
 8002d40:	df000015 	stw	fp,0(sp)
 8002d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002d48:	00820034 	movhi	r2,2048
 8002d4c:	109d2f04 	addi	r2,r2,29884
 8002d50:	10800017 	ldw	r2,0(r2)
 8002d54:	10000526 	beq	r2,zero,8002d6c <alt_get_errno+0x34>
 8002d58:	00820034 	movhi	r2,2048
 8002d5c:	109d2f04 	addi	r2,r2,29884
 8002d60:	10800017 	ldw	r2,0(r2)
 8002d64:	103ee83a 	callr	r2
 8002d68:	00000206 	br	8002d74 <alt_get_errno+0x3c>
 8002d6c:	00820074 	movhi	r2,2049
 8002d70:	10a3dd04 	addi	r2,r2,-28812
}
 8002d74:	e037883a 	mov	sp,fp
 8002d78:	dfc00117 	ldw	ra,4(sp)
 8002d7c:	df000017 	ldw	fp,0(sp)
 8002d80:	dec00204 	addi	sp,sp,8
 8002d84:	f800283a 	ret

08002d88 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8002d88:	defffb04 	addi	sp,sp,-20
 8002d8c:	dfc00415 	stw	ra,16(sp)
 8002d90:	df000315 	stw	fp,12(sp)
 8002d94:	df000304 	addi	fp,sp,12
 8002d98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8002d9c:	e0bfff17 	ldw	r2,-4(fp)
 8002da0:	10000616 	blt	r2,zero,8002dbc <close+0x34>
 8002da4:	e0bfff17 	ldw	r2,-4(fp)
 8002da8:	10c00324 	muli	r3,r2,12
 8002dac:	00820034 	movhi	r2,2048
 8002db0:	1098a304 	addi	r2,r2,25228
 8002db4:	1885883a 	add	r2,r3,r2
 8002db8:	00000106 	br	8002dc0 <close+0x38>
 8002dbc:	0005883a 	mov	r2,zero
 8002dc0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8002dc4:	e0bffd17 	ldw	r2,-12(fp)
 8002dc8:	10001926 	beq	r2,zero,8002e30 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8002dcc:	e0bffd17 	ldw	r2,-12(fp)
 8002dd0:	10800017 	ldw	r2,0(r2)
 8002dd4:	10800417 	ldw	r2,16(r2)
 8002dd8:	10000626 	beq	r2,zero,8002df4 <close+0x6c>
 8002ddc:	e0bffd17 	ldw	r2,-12(fp)
 8002de0:	10800017 	ldw	r2,0(r2)
 8002de4:	10800417 	ldw	r2,16(r2)
 8002de8:	e13ffd17 	ldw	r4,-12(fp)
 8002dec:	103ee83a 	callr	r2
 8002df0:	00000106 	br	8002df8 <close+0x70>
 8002df4:	0005883a 	mov	r2,zero
 8002df8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8002dfc:	e13fff17 	ldw	r4,-4(fp)
 8002e00:	80034840 	call	8003484 <alt_release_fd>
    if (rval < 0)
 8002e04:	e0bffe17 	ldw	r2,-8(fp)
 8002e08:	1000070e 	bge	r2,zero,8002e28 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8002e0c:	8002d380 	call	8002d38 <alt_get_errno>
 8002e10:	1007883a 	mov	r3,r2
 8002e14:	e0bffe17 	ldw	r2,-8(fp)
 8002e18:	0085c83a 	sub	r2,zero,r2
 8002e1c:	18800015 	stw	r2,0(r3)
      return -1;
 8002e20:	00bfffc4 	movi	r2,-1
 8002e24:	00000706 	br	8002e44 <close+0xbc>
    }
    return 0;
 8002e28:	0005883a 	mov	r2,zero
 8002e2c:	00000506 	br	8002e44 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8002e30:	8002d380 	call	8002d38 <alt_get_errno>
 8002e34:	1007883a 	mov	r3,r2
 8002e38:	00801444 	movi	r2,81
 8002e3c:	18800015 	stw	r2,0(r3)
    return -1;
 8002e40:	00bfffc4 	movi	r2,-1
  }
}
 8002e44:	e037883a 	mov	sp,fp
 8002e48:	dfc00117 	ldw	ra,4(sp)
 8002e4c:	df000017 	ldw	fp,0(sp)
 8002e50:	dec00204 	addi	sp,sp,8
 8002e54:	f800283a 	ret

08002e58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8002e58:	defffc04 	addi	sp,sp,-16
 8002e5c:	df000315 	stw	fp,12(sp)
 8002e60:	df000304 	addi	fp,sp,12
 8002e64:	e13ffd15 	stw	r4,-12(fp)
 8002e68:	e17ffe15 	stw	r5,-8(fp)
 8002e6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8002e70:	e0bfff17 	ldw	r2,-4(fp)
}
 8002e74:	e037883a 	mov	sp,fp
 8002e78:	df000017 	ldw	fp,0(sp)
 8002e7c:	dec00104 	addi	sp,sp,4
 8002e80:	f800283a 	ret

08002e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002e84:	defffe04 	addi	sp,sp,-8
 8002e88:	dfc00115 	stw	ra,4(sp)
 8002e8c:	df000015 	stw	fp,0(sp)
 8002e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002e94:	00820034 	movhi	r2,2048
 8002e98:	109d2f04 	addi	r2,r2,29884
 8002e9c:	10800017 	ldw	r2,0(r2)
 8002ea0:	10000526 	beq	r2,zero,8002eb8 <alt_get_errno+0x34>
 8002ea4:	00820034 	movhi	r2,2048
 8002ea8:	109d2f04 	addi	r2,r2,29884
 8002eac:	10800017 	ldw	r2,0(r2)
 8002eb0:	103ee83a 	callr	r2
 8002eb4:	00000206 	br	8002ec0 <alt_get_errno+0x3c>
 8002eb8:	00820074 	movhi	r2,2049
 8002ebc:	10a3dd04 	addi	r2,r2,-28812
}
 8002ec0:	e037883a 	mov	sp,fp
 8002ec4:	dfc00117 	ldw	ra,4(sp)
 8002ec8:	df000017 	ldw	fp,0(sp)
 8002ecc:	dec00204 	addi	sp,sp,8
 8002ed0:	f800283a 	ret

08002ed4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8002ed4:	defffb04 	addi	sp,sp,-20
 8002ed8:	dfc00415 	stw	ra,16(sp)
 8002edc:	df000315 	stw	fp,12(sp)
 8002ee0:	df000304 	addi	fp,sp,12
 8002ee4:	e13ffe15 	stw	r4,-8(fp)
 8002ee8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8002eec:	e0bffe17 	ldw	r2,-8(fp)
 8002ef0:	10000616 	blt	r2,zero,8002f0c <fstat+0x38>
 8002ef4:	e0bffe17 	ldw	r2,-8(fp)
 8002ef8:	10c00324 	muli	r3,r2,12
 8002efc:	00820034 	movhi	r2,2048
 8002f00:	1098a304 	addi	r2,r2,25228
 8002f04:	1885883a 	add	r2,r3,r2
 8002f08:	00000106 	br	8002f10 <fstat+0x3c>
 8002f0c:	0005883a 	mov	r2,zero
 8002f10:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8002f14:	e0bffd17 	ldw	r2,-12(fp)
 8002f18:	10001026 	beq	r2,zero,8002f5c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8002f1c:	e0bffd17 	ldw	r2,-12(fp)
 8002f20:	10800017 	ldw	r2,0(r2)
 8002f24:	10800817 	ldw	r2,32(r2)
 8002f28:	10000726 	beq	r2,zero,8002f48 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8002f2c:	e0bffd17 	ldw	r2,-12(fp)
 8002f30:	10800017 	ldw	r2,0(r2)
 8002f34:	10800817 	ldw	r2,32(r2)
 8002f38:	e13ffd17 	ldw	r4,-12(fp)
 8002f3c:	e17fff17 	ldw	r5,-4(fp)
 8002f40:	103ee83a 	callr	r2
 8002f44:	00000a06 	br	8002f70 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8002f48:	e0bfff17 	ldw	r2,-4(fp)
 8002f4c:	00c80004 	movi	r3,8192
 8002f50:	10c00115 	stw	r3,4(r2)
      return 0;
 8002f54:	0005883a 	mov	r2,zero
 8002f58:	00000506 	br	8002f70 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8002f5c:	8002e840 	call	8002e84 <alt_get_errno>
 8002f60:	1007883a 	mov	r3,r2
 8002f64:	00801444 	movi	r2,81
 8002f68:	18800015 	stw	r2,0(r3)
    return -1;
 8002f6c:	00bfffc4 	movi	r2,-1
  }
}
 8002f70:	e037883a 	mov	sp,fp
 8002f74:	dfc00117 	ldw	ra,4(sp)
 8002f78:	df000017 	ldw	fp,0(sp)
 8002f7c:	dec00204 	addi	sp,sp,8
 8002f80:	f800283a 	ret

08002f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002f84:	defffe04 	addi	sp,sp,-8
 8002f88:	dfc00115 	stw	ra,4(sp)
 8002f8c:	df000015 	stw	fp,0(sp)
 8002f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002f94:	00820034 	movhi	r2,2048
 8002f98:	109d2f04 	addi	r2,r2,29884
 8002f9c:	10800017 	ldw	r2,0(r2)
 8002fa0:	10000526 	beq	r2,zero,8002fb8 <alt_get_errno+0x34>
 8002fa4:	00820034 	movhi	r2,2048
 8002fa8:	109d2f04 	addi	r2,r2,29884
 8002fac:	10800017 	ldw	r2,0(r2)
 8002fb0:	103ee83a 	callr	r2
 8002fb4:	00000206 	br	8002fc0 <alt_get_errno+0x3c>
 8002fb8:	00820074 	movhi	r2,2049
 8002fbc:	10a3dd04 	addi	r2,r2,-28812
}
 8002fc0:	e037883a 	mov	sp,fp
 8002fc4:	dfc00117 	ldw	ra,4(sp)
 8002fc8:	df000017 	ldw	fp,0(sp)
 8002fcc:	dec00204 	addi	sp,sp,8
 8002fd0:	f800283a 	ret

08002fd4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8002fd4:	deffed04 	addi	sp,sp,-76
 8002fd8:	dfc01215 	stw	ra,72(sp)
 8002fdc:	df001115 	stw	fp,68(sp)
 8002fe0:	df001104 	addi	fp,sp,68
 8002fe4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8002fe8:	e0bfff17 	ldw	r2,-4(fp)
 8002fec:	10000616 	blt	r2,zero,8003008 <isatty+0x34>
 8002ff0:	e0bfff17 	ldw	r2,-4(fp)
 8002ff4:	10c00324 	muli	r3,r2,12
 8002ff8:	00820034 	movhi	r2,2048
 8002ffc:	1098a304 	addi	r2,r2,25228
 8003000:	1885883a 	add	r2,r3,r2
 8003004:	00000106 	br	800300c <isatty+0x38>
 8003008:	0005883a 	mov	r2,zero
 800300c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8003010:	e0bfef17 	ldw	r2,-68(fp)
 8003014:	10000e26 	beq	r2,zero,8003050 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003018:	e0bfef17 	ldw	r2,-68(fp)
 800301c:	10800017 	ldw	r2,0(r2)
 8003020:	10800817 	ldw	r2,32(r2)
 8003024:	1000021e 	bne	r2,zero,8003030 <isatty+0x5c>
    {
      return 1;
 8003028:	00800044 	movi	r2,1
 800302c:	00000d06 	br	8003064 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8003030:	e0bff004 	addi	r2,fp,-64
 8003034:	e13fff17 	ldw	r4,-4(fp)
 8003038:	100b883a 	mov	r5,r2
 800303c:	8002ed40 	call	8002ed4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8003040:	e0bff117 	ldw	r2,-60(fp)
 8003044:	10880020 	cmpeqi	r2,r2,8192
 8003048:	10803fcc 	andi	r2,r2,255
 800304c:	00000506 	br	8003064 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003050:	8002f840 	call	8002f84 <alt_get_errno>
 8003054:	1007883a 	mov	r3,r2
 8003058:	00801444 	movi	r2,81
 800305c:	18800015 	stw	r2,0(r3)
    return 0;
 8003060:	0005883a 	mov	r2,zero
  }
}
 8003064:	e037883a 	mov	sp,fp
 8003068:	dfc00117 	ldw	ra,4(sp)
 800306c:	df000017 	ldw	fp,0(sp)
 8003070:	dec00204 	addi	sp,sp,8
 8003074:	f800283a 	ret

08003078 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003078:	defffc04 	addi	sp,sp,-16
 800307c:	df000315 	stw	fp,12(sp)
 8003080:	df000304 	addi	fp,sp,12
 8003084:	e13ffd15 	stw	r4,-12(fp)
 8003088:	e17ffe15 	stw	r5,-8(fp)
 800308c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8003090:	e0fffe17 	ldw	r3,-8(fp)
 8003094:	e0bffd17 	ldw	r2,-12(fp)
 8003098:	18800c26 	beq	r3,r2,80030cc <alt_load_section+0x54>
  {
    while( to != end )
 800309c:	00000806 	br	80030c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80030a0:	e0bffe17 	ldw	r2,-8(fp)
 80030a4:	10c00104 	addi	r3,r2,4
 80030a8:	e0fffe15 	stw	r3,-8(fp)
 80030ac:	e0fffd17 	ldw	r3,-12(fp)
 80030b0:	19000104 	addi	r4,r3,4
 80030b4:	e13ffd15 	stw	r4,-12(fp)
 80030b8:	18c00017 	ldw	r3,0(r3)
 80030bc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80030c0:	e0fffe17 	ldw	r3,-8(fp)
 80030c4:	e0bfff17 	ldw	r2,-4(fp)
 80030c8:	18bff51e 	bne	r3,r2,80030a0 <__alt_data_end+0xfc0030a0>
    {
      *to++ = *from++;
    }
  }
}
 80030cc:	e037883a 	mov	sp,fp
 80030d0:	df000017 	ldw	fp,0(sp)
 80030d4:	dec00104 	addi	sp,sp,4
 80030d8:	f800283a 	ret

080030dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80030dc:	defffe04 	addi	sp,sp,-8
 80030e0:	dfc00115 	stw	ra,4(sp)
 80030e4:	df000015 	stw	fp,0(sp)
 80030e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80030ec:	01020034 	movhi	r4,2048
 80030f0:	211d3404 	addi	r4,r4,29904
 80030f4:	01420034 	movhi	r5,2048
 80030f8:	29568e04 	addi	r5,r5,23096
 80030fc:	01820034 	movhi	r6,2048
 8003100:	319d3404 	addi	r6,r6,29904
 8003104:	80030780 	call	8003078 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003108:	01020034 	movhi	r4,2048
 800310c:	21000804 	addi	r4,r4,32
 8003110:	01420034 	movhi	r5,2048
 8003114:	29400804 	addi	r5,r5,32
 8003118:	01820034 	movhi	r6,2048
 800311c:	31806f04 	addi	r6,r6,444
 8003120:	80030780 	call	8003078 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003124:	01020034 	movhi	r4,2048
 8003128:	21167404 	addi	r4,r4,22992
 800312c:	01420034 	movhi	r5,2048
 8003130:	29567404 	addi	r5,r5,22992
 8003134:	01820034 	movhi	r6,2048
 8003138:	31968e04 	addi	r6,r6,23096
 800313c:	80030780 	call	8003078 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8003140:	80049180 	call	8004918 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003144:	8004b700 	call	8004b70 <alt_icache_flush_all>
}
 8003148:	e037883a 	mov	sp,fp
 800314c:	dfc00117 	ldw	ra,4(sp)
 8003150:	df000017 	ldw	fp,0(sp)
 8003154:	dec00204 	addi	sp,sp,8
 8003158:	f800283a 	ret

0800315c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800315c:	defffe04 	addi	sp,sp,-8
 8003160:	dfc00115 	stw	ra,4(sp)
 8003164:	df000015 	stw	fp,0(sp)
 8003168:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800316c:	00820034 	movhi	r2,2048
 8003170:	109d2f04 	addi	r2,r2,29884
 8003174:	10800017 	ldw	r2,0(r2)
 8003178:	10000526 	beq	r2,zero,8003190 <alt_get_errno+0x34>
 800317c:	00820034 	movhi	r2,2048
 8003180:	109d2f04 	addi	r2,r2,29884
 8003184:	10800017 	ldw	r2,0(r2)
 8003188:	103ee83a 	callr	r2
 800318c:	00000206 	br	8003198 <alt_get_errno+0x3c>
 8003190:	00820074 	movhi	r2,2049
 8003194:	10a3dd04 	addi	r2,r2,-28812
}
 8003198:	e037883a 	mov	sp,fp
 800319c:	dfc00117 	ldw	ra,4(sp)
 80031a0:	df000017 	ldw	fp,0(sp)
 80031a4:	dec00204 	addi	sp,sp,8
 80031a8:	f800283a 	ret

080031ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80031ac:	defff904 	addi	sp,sp,-28
 80031b0:	dfc00615 	stw	ra,24(sp)
 80031b4:	df000515 	stw	fp,20(sp)
 80031b8:	df000504 	addi	fp,sp,20
 80031bc:	e13ffd15 	stw	r4,-12(fp)
 80031c0:	e17ffe15 	stw	r5,-8(fp)
 80031c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80031c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80031cc:	e0bffd17 	ldw	r2,-12(fp)
 80031d0:	10000616 	blt	r2,zero,80031ec <lseek+0x40>
 80031d4:	e0bffd17 	ldw	r2,-12(fp)
 80031d8:	10c00324 	muli	r3,r2,12
 80031dc:	00820034 	movhi	r2,2048
 80031e0:	1098a304 	addi	r2,r2,25228
 80031e4:	1885883a 	add	r2,r3,r2
 80031e8:	00000106 	br	80031f0 <lseek+0x44>
 80031ec:	0005883a 	mov	r2,zero
 80031f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80031f4:	e0bffc17 	ldw	r2,-16(fp)
 80031f8:	10001026 	beq	r2,zero,800323c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80031fc:	e0bffc17 	ldw	r2,-16(fp)
 8003200:	10800017 	ldw	r2,0(r2)
 8003204:	10800717 	ldw	r2,28(r2)
 8003208:	10000926 	beq	r2,zero,8003230 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800320c:	e0bffc17 	ldw	r2,-16(fp)
 8003210:	10800017 	ldw	r2,0(r2)
 8003214:	10800717 	ldw	r2,28(r2)
 8003218:	e13ffc17 	ldw	r4,-16(fp)
 800321c:	e17ffe17 	ldw	r5,-8(fp)
 8003220:	e1bfff17 	ldw	r6,-4(fp)
 8003224:	103ee83a 	callr	r2
 8003228:	e0bffb15 	stw	r2,-20(fp)
 800322c:	00000506 	br	8003244 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8003230:	00bfde84 	movi	r2,-134
 8003234:	e0bffb15 	stw	r2,-20(fp)
 8003238:	00000206 	br	8003244 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800323c:	00bfebc4 	movi	r2,-81
 8003240:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8003244:	e0bffb17 	ldw	r2,-20(fp)
 8003248:	1000070e 	bge	r2,zero,8003268 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800324c:	800315c0 	call	800315c <alt_get_errno>
 8003250:	1007883a 	mov	r3,r2
 8003254:	e0bffb17 	ldw	r2,-20(fp)
 8003258:	0085c83a 	sub	r2,zero,r2
 800325c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8003260:	00bfffc4 	movi	r2,-1
 8003264:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8003268:	e0bffb17 	ldw	r2,-20(fp)
}
 800326c:	e037883a 	mov	sp,fp
 8003270:	dfc00117 	ldw	ra,4(sp)
 8003274:	df000017 	ldw	fp,0(sp)
 8003278:	dec00204 	addi	sp,sp,8
 800327c:	f800283a 	ret

08003280 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003280:	defffd04 	addi	sp,sp,-12
 8003284:	dfc00215 	stw	ra,8(sp)
 8003288:	df000115 	stw	fp,4(sp)
 800328c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8003290:	0009883a 	mov	r4,zero
 8003294:	80037140 	call	8003714 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8003298:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800329c:	80037480 	call	8003748 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80032a0:	01020034 	movhi	r4,2048
 80032a4:	21167e04 	addi	r4,r4,23032
 80032a8:	01420034 	movhi	r5,2048
 80032ac:	29567e04 	addi	r5,r5,23032
 80032b0:	01820034 	movhi	r6,2048
 80032b4:	31967e04 	addi	r6,r6,23032
 80032b8:	8004f300 	call	8004f30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80032bc:	8004a280 	call	8004a28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80032c0:	01020034 	movhi	r4,2048
 80032c4:	2112a104 	addi	r4,r4,19076
 80032c8:	800562c0 	call	800562c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80032cc:	d126b817 	ldw	r4,-25888(gp)
 80032d0:	d0e6b917 	ldw	r3,-25884(gp)
 80032d4:	d0a6ba17 	ldw	r2,-25880(gp)
 80032d8:	180b883a 	mov	r5,r3
 80032dc:	100d883a 	mov	r6,r2
 80032e0:	80001f80 	call	80001f8 <main>
 80032e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80032e8:	01000044 	movi	r4,1
 80032ec:	8002d880 	call	8002d88 <close>
  exit (result);
 80032f0:	e13fff17 	ldw	r4,-4(fp)
 80032f4:	80056400 	call	8005640 <exit>

080032f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80032f8:	defffe04 	addi	sp,sp,-8
 80032fc:	df000115 	stw	fp,4(sp)
 8003300:	df000104 	addi	fp,sp,4
 8003304:	e13fff15 	stw	r4,-4(fp)
}
 8003308:	e037883a 	mov	sp,fp
 800330c:	df000017 	ldw	fp,0(sp)
 8003310:	dec00104 	addi	sp,sp,4
 8003314:	f800283a 	ret

08003318 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8003318:	defffe04 	addi	sp,sp,-8
 800331c:	df000115 	stw	fp,4(sp)
 8003320:	df000104 	addi	fp,sp,4
 8003324:	e13fff15 	stw	r4,-4(fp)
}
 8003328:	e037883a 	mov	sp,fp
 800332c:	df000017 	ldw	fp,0(sp)
 8003330:	dec00104 	addi	sp,sp,4
 8003334:	f800283a 	ret

08003338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003338:	defffe04 	addi	sp,sp,-8
 800333c:	dfc00115 	stw	ra,4(sp)
 8003340:	df000015 	stw	fp,0(sp)
 8003344:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003348:	00820034 	movhi	r2,2048
 800334c:	109d2f04 	addi	r2,r2,29884
 8003350:	10800017 	ldw	r2,0(r2)
 8003354:	10000526 	beq	r2,zero,800336c <alt_get_errno+0x34>
 8003358:	00820034 	movhi	r2,2048
 800335c:	109d2f04 	addi	r2,r2,29884
 8003360:	10800017 	ldw	r2,0(r2)
 8003364:	103ee83a 	callr	r2
 8003368:	00000206 	br	8003374 <alt_get_errno+0x3c>
 800336c:	00820074 	movhi	r2,2049
 8003370:	10a3dd04 	addi	r2,r2,-28812
}
 8003374:	e037883a 	mov	sp,fp
 8003378:	dfc00117 	ldw	ra,4(sp)
 800337c:	df000017 	ldw	fp,0(sp)
 8003380:	dec00204 	addi	sp,sp,8
 8003384:	f800283a 	ret

08003388 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8003388:	defff904 	addi	sp,sp,-28
 800338c:	dfc00615 	stw	ra,24(sp)
 8003390:	df000515 	stw	fp,20(sp)
 8003394:	df000504 	addi	fp,sp,20
 8003398:	e13ffd15 	stw	r4,-12(fp)
 800339c:	e17ffe15 	stw	r5,-8(fp)
 80033a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80033a4:	e0bffd17 	ldw	r2,-12(fp)
 80033a8:	10000616 	blt	r2,zero,80033c4 <read+0x3c>
 80033ac:	e0bffd17 	ldw	r2,-12(fp)
 80033b0:	10c00324 	muli	r3,r2,12
 80033b4:	00820034 	movhi	r2,2048
 80033b8:	1098a304 	addi	r2,r2,25228
 80033bc:	1885883a 	add	r2,r3,r2
 80033c0:	00000106 	br	80033c8 <read+0x40>
 80033c4:	0005883a 	mov	r2,zero
 80033c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80033cc:	e0bffb17 	ldw	r2,-20(fp)
 80033d0:	10002226 	beq	r2,zero,800345c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80033d4:	e0bffb17 	ldw	r2,-20(fp)
 80033d8:	10800217 	ldw	r2,8(r2)
 80033dc:	108000cc 	andi	r2,r2,3
 80033e0:	10800060 	cmpeqi	r2,r2,1
 80033e4:	1000181e 	bne	r2,zero,8003448 <read+0xc0>
        (fd->dev->read))
 80033e8:	e0bffb17 	ldw	r2,-20(fp)
 80033ec:	10800017 	ldw	r2,0(r2)
 80033f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80033f4:	10001426 	beq	r2,zero,8003448 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80033f8:	e0bffb17 	ldw	r2,-20(fp)
 80033fc:	10800017 	ldw	r2,0(r2)
 8003400:	10800517 	ldw	r2,20(r2)
 8003404:	e0ffff17 	ldw	r3,-4(fp)
 8003408:	e13ffb17 	ldw	r4,-20(fp)
 800340c:	e17ffe17 	ldw	r5,-8(fp)
 8003410:	180d883a 	mov	r6,r3
 8003414:	103ee83a 	callr	r2
 8003418:	e0bffc15 	stw	r2,-16(fp)
 800341c:	e0bffc17 	ldw	r2,-16(fp)
 8003420:	1000070e 	bge	r2,zero,8003440 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8003424:	80033380 	call	8003338 <alt_get_errno>
 8003428:	1007883a 	mov	r3,r2
 800342c:	e0bffc17 	ldw	r2,-16(fp)
 8003430:	0085c83a 	sub	r2,zero,r2
 8003434:	18800015 	stw	r2,0(r3)
          return -1;
 8003438:	00bfffc4 	movi	r2,-1
 800343c:	00000c06 	br	8003470 <read+0xe8>
        }
        return rval;
 8003440:	e0bffc17 	ldw	r2,-16(fp)
 8003444:	00000a06 	br	8003470 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8003448:	80033380 	call	8003338 <alt_get_errno>
 800344c:	1007883a 	mov	r3,r2
 8003450:	00800344 	movi	r2,13
 8003454:	18800015 	stw	r2,0(r3)
 8003458:	00000406 	br	800346c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800345c:	80033380 	call	8003338 <alt_get_errno>
 8003460:	1007883a 	mov	r3,r2
 8003464:	00801444 	movi	r2,81
 8003468:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800346c:	00bfffc4 	movi	r2,-1
}
 8003470:	e037883a 	mov	sp,fp
 8003474:	dfc00117 	ldw	ra,4(sp)
 8003478:	df000017 	ldw	fp,0(sp)
 800347c:	dec00204 	addi	sp,sp,8
 8003480:	f800283a 	ret

08003484 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8003484:	defffe04 	addi	sp,sp,-8
 8003488:	df000115 	stw	fp,4(sp)
 800348c:	df000104 	addi	fp,sp,4
 8003490:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003494:	e0bfff17 	ldw	r2,-4(fp)
 8003498:	108000d0 	cmplti	r2,r2,3
 800349c:	10000d1e 	bne	r2,zero,80034d4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80034a0:	00820034 	movhi	r2,2048
 80034a4:	1098a304 	addi	r2,r2,25228
 80034a8:	e0ffff17 	ldw	r3,-4(fp)
 80034ac:	18c00324 	muli	r3,r3,12
 80034b0:	10c5883a 	add	r2,r2,r3
 80034b4:	10800204 	addi	r2,r2,8
 80034b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80034bc:	00820034 	movhi	r2,2048
 80034c0:	1098a304 	addi	r2,r2,25228
 80034c4:	e0ffff17 	ldw	r3,-4(fp)
 80034c8:	18c00324 	muli	r3,r3,12
 80034cc:	10c5883a 	add	r2,r2,r3
 80034d0:	10000015 	stw	zero,0(r2)
  }
}
 80034d4:	e037883a 	mov	sp,fp
 80034d8:	df000017 	ldw	fp,0(sp)
 80034dc:	dec00104 	addi	sp,sp,4
 80034e0:	f800283a 	ret

080034e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80034e4:	defff904 	addi	sp,sp,-28
 80034e8:	df000615 	stw	fp,24(sp)
 80034ec:	df000604 	addi	fp,sp,24
 80034f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80034f4:	0005303a 	rdctl	r2,status
 80034f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80034fc:	e0fffc17 	ldw	r3,-16(fp)
 8003500:	00bfff84 	movi	r2,-2
 8003504:	1884703a 	and	r2,r3,r2
 8003508:	1001703a 	wrctl	status,r2
  
  return context;
 800350c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8003510:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8003514:	d0a00a17 	ldw	r2,-32728(gp)
 8003518:	10c000c4 	addi	r3,r2,3
 800351c:	00bfff04 	movi	r2,-4
 8003520:	1884703a 	and	r2,r3,r2
 8003524:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8003528:	d0e00a17 	ldw	r3,-32728(gp)
 800352c:	e0bfff17 	ldw	r2,-4(fp)
 8003530:	1887883a 	add	r3,r3,r2
 8003534:	00830034 	movhi	r2,3072
 8003538:	10800004 	addi	r2,r2,0
 800353c:	10c0062e 	bgeu	r2,r3,8003558 <sbrk+0x74>
 8003540:	e0bffa17 	ldw	r2,-24(fp)
 8003544:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003548:	e0bffd17 	ldw	r2,-12(fp)
 800354c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8003550:	00bfffc4 	movi	r2,-1
 8003554:	00000b06 	br	8003584 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8003558:	d0a00a17 	ldw	r2,-32728(gp)
 800355c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8003560:	d0e00a17 	ldw	r3,-32728(gp)
 8003564:	e0bfff17 	ldw	r2,-4(fp)
 8003568:	1885883a 	add	r2,r3,r2
 800356c:	d0a00a15 	stw	r2,-32728(gp)
 8003570:	e0bffa17 	ldw	r2,-24(fp)
 8003574:	e0bffe15 	stw	r2,-8(fp)
 8003578:	e0bffe17 	ldw	r2,-8(fp)
 800357c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8003580:	e0bffb17 	ldw	r2,-20(fp)
} 
 8003584:	e037883a 	mov	sp,fp
 8003588:	df000017 	ldw	fp,0(sp)
 800358c:	dec00104 	addi	sp,sp,4
 8003590:	f800283a 	ret

08003594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003594:	defffe04 	addi	sp,sp,-8
 8003598:	dfc00115 	stw	ra,4(sp)
 800359c:	df000015 	stw	fp,0(sp)
 80035a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80035a4:	00820034 	movhi	r2,2048
 80035a8:	109d2f04 	addi	r2,r2,29884
 80035ac:	10800017 	ldw	r2,0(r2)
 80035b0:	10000526 	beq	r2,zero,80035c8 <alt_get_errno+0x34>
 80035b4:	00820034 	movhi	r2,2048
 80035b8:	109d2f04 	addi	r2,r2,29884
 80035bc:	10800017 	ldw	r2,0(r2)
 80035c0:	103ee83a 	callr	r2
 80035c4:	00000206 	br	80035d0 <alt_get_errno+0x3c>
 80035c8:	00820074 	movhi	r2,2049
 80035cc:	10a3dd04 	addi	r2,r2,-28812
}
 80035d0:	e037883a 	mov	sp,fp
 80035d4:	dfc00117 	ldw	ra,4(sp)
 80035d8:	df000017 	ldw	fp,0(sp)
 80035dc:	dec00204 	addi	sp,sp,8
 80035e0:	f800283a 	ret

080035e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80035e4:	defff904 	addi	sp,sp,-28
 80035e8:	dfc00615 	stw	ra,24(sp)
 80035ec:	df000515 	stw	fp,20(sp)
 80035f0:	df000504 	addi	fp,sp,20
 80035f4:	e13ffd15 	stw	r4,-12(fp)
 80035f8:	e17ffe15 	stw	r5,-8(fp)
 80035fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003600:	e0bffd17 	ldw	r2,-12(fp)
 8003604:	10000616 	blt	r2,zero,8003620 <write+0x3c>
 8003608:	e0bffd17 	ldw	r2,-12(fp)
 800360c:	10c00324 	muli	r3,r2,12
 8003610:	00820034 	movhi	r2,2048
 8003614:	1098a304 	addi	r2,r2,25228
 8003618:	1885883a 	add	r2,r3,r2
 800361c:	00000106 	br	8003624 <write+0x40>
 8003620:	0005883a 	mov	r2,zero
 8003624:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8003628:	e0bffb17 	ldw	r2,-20(fp)
 800362c:	10002126 	beq	r2,zero,80036b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8003630:	e0bffb17 	ldw	r2,-20(fp)
 8003634:	10800217 	ldw	r2,8(r2)
 8003638:	108000cc 	andi	r2,r2,3
 800363c:	10001826 	beq	r2,zero,80036a0 <write+0xbc>
 8003640:	e0bffb17 	ldw	r2,-20(fp)
 8003644:	10800017 	ldw	r2,0(r2)
 8003648:	10800617 	ldw	r2,24(r2)
 800364c:	10001426 	beq	r2,zero,80036a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8003650:	e0bffb17 	ldw	r2,-20(fp)
 8003654:	10800017 	ldw	r2,0(r2)
 8003658:	10800617 	ldw	r2,24(r2)
 800365c:	e0ffff17 	ldw	r3,-4(fp)
 8003660:	e13ffb17 	ldw	r4,-20(fp)
 8003664:	e17ffe17 	ldw	r5,-8(fp)
 8003668:	180d883a 	mov	r6,r3
 800366c:	103ee83a 	callr	r2
 8003670:	e0bffc15 	stw	r2,-16(fp)
 8003674:	e0bffc17 	ldw	r2,-16(fp)
 8003678:	1000070e 	bge	r2,zero,8003698 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800367c:	80035940 	call	8003594 <alt_get_errno>
 8003680:	1007883a 	mov	r3,r2
 8003684:	e0bffc17 	ldw	r2,-16(fp)
 8003688:	0085c83a 	sub	r2,zero,r2
 800368c:	18800015 	stw	r2,0(r3)
        return -1;
 8003690:	00bfffc4 	movi	r2,-1
 8003694:	00000c06 	br	80036c8 <write+0xe4>
      }
      return rval;
 8003698:	e0bffc17 	ldw	r2,-16(fp)
 800369c:	00000a06 	br	80036c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80036a0:	80035940 	call	8003594 <alt_get_errno>
 80036a4:	1007883a 	mov	r3,r2
 80036a8:	00800344 	movi	r2,13
 80036ac:	18800015 	stw	r2,0(r3)
 80036b0:	00000406 	br	80036c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80036b4:	80035940 	call	8003594 <alt_get_errno>
 80036b8:	1007883a 	mov	r3,r2
 80036bc:	00801444 	movi	r2,81
 80036c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80036c4:	00bfffc4 	movi	r2,-1
}
 80036c8:	e037883a 	mov	sp,fp
 80036cc:	dfc00117 	ldw	ra,4(sp)
 80036d0:	df000017 	ldw	fp,0(sp)
 80036d4:	dec00204 	addi	sp,sp,8
 80036d8:	f800283a 	ret

080036dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80036dc:	defffd04 	addi	sp,sp,-12
 80036e0:	dfc00215 	stw	ra,8(sp)
 80036e4:	df000115 	stw	fp,4(sp)
 80036e8:	df000104 	addi	fp,sp,4
 80036ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80036f0:	e13fff17 	ldw	r4,-4(fp)
 80036f4:	01420034 	movhi	r5,2048
 80036f8:	295d2c04 	addi	r5,r5,29872
 80036fc:	80049840 	call	8004984 <alt_dev_llist_insert>
}
 8003700:	e037883a 	mov	sp,fp
 8003704:	dfc00117 	ldw	ra,4(sp)
 8003708:	df000017 	ldw	fp,0(sp)
 800370c:	dec00204 	addi	sp,sp,8
 8003710:	f800283a 	ret

08003714 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003714:	defffd04 	addi	sp,sp,-12
 8003718:	dfc00215 	stw	ra,8(sp)
 800371c:	df000115 	stw	fp,4(sp)
 8003720:	df000104 	addi	fp,sp,4
 8003724:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8003728:	80053b80 	call	80053b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800372c:	00800044 	movi	r2,1
 8003730:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003734:	e037883a 	mov	sp,fp
 8003738:	dfc00117 	ldw	ra,4(sp)
 800373c:	df000017 	ldw	fp,0(sp)
 8003740:	dec00204 	addi	sp,sp,8
 8003744:	f800283a 	ret

08003748 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003748:	defffe04 	addi	sp,sp,-8
 800374c:	dfc00115 	stw	ra,4(sp)
 8003750:	df000015 	stw	fp,0(sp)
 8003754:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8003758:	01082004 	movi	r4,8320
 800375c:	000b883a 	mov	r5,zero
 8003760:	01800104 	movi	r6,4
 8003764:	01c0fa04 	movi	r7,1000
 8003768:	80042780 	call	8004278 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800376c:	01020034 	movhi	r4,2048
 8003770:	21190d04 	addi	r4,r4,25652
 8003774:	000b883a 	mov	r5,zero
 8003778:	01800144 	movi	r6,5
 800377c:	800391c0 	call	800391c <altera_avalon_jtag_uart_init>
 8003780:	01020034 	movhi	r4,2048
 8003784:	21190304 	addi	r4,r4,25612
 8003788:	80036dc0 	call	80036dc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800378c:	01020034 	movhi	r4,2048
 8003790:	211d1b04 	addi	r4,r4,29804
 8003794:	80043b00 	call	80043b0 <alt_up_character_lcd_init>
 8003798:	01020034 	movhi	r4,2048
 800379c:	211d1b04 	addi	r4,r4,29804
 80037a0:	80036dc0 	call	80036dc <alt_dev_reg>
}
 80037a4:	e037883a 	mov	sp,fp
 80037a8:	dfc00117 	ldw	ra,4(sp)
 80037ac:	df000017 	ldw	fp,0(sp)
 80037b0:	dec00204 	addi	sp,sp,8
 80037b4:	f800283a 	ret

080037b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80037b8:	defffa04 	addi	sp,sp,-24
 80037bc:	dfc00515 	stw	ra,20(sp)
 80037c0:	df000415 	stw	fp,16(sp)
 80037c4:	df000404 	addi	fp,sp,16
 80037c8:	e13ffd15 	stw	r4,-12(fp)
 80037cc:	e17ffe15 	stw	r5,-8(fp)
 80037d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80037d4:	e0bffd17 	ldw	r2,-12(fp)
 80037d8:	10800017 	ldw	r2,0(r2)
 80037dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80037e0:	e0bffc17 	ldw	r2,-16(fp)
 80037e4:	10c00a04 	addi	r3,r2,40
 80037e8:	e0bffd17 	ldw	r2,-12(fp)
 80037ec:	10800217 	ldw	r2,8(r2)
 80037f0:	1809883a 	mov	r4,r3
 80037f4:	e17ffe17 	ldw	r5,-8(fp)
 80037f8:	e1bfff17 	ldw	r6,-4(fp)
 80037fc:	100f883a 	mov	r7,r2
 8003800:	8003de00 	call	8003de0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003804:	e037883a 	mov	sp,fp
 8003808:	dfc00117 	ldw	ra,4(sp)
 800380c:	df000017 	ldw	fp,0(sp)
 8003810:	dec00204 	addi	sp,sp,8
 8003814:	f800283a 	ret

08003818 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003818:	defffa04 	addi	sp,sp,-24
 800381c:	dfc00515 	stw	ra,20(sp)
 8003820:	df000415 	stw	fp,16(sp)
 8003824:	df000404 	addi	fp,sp,16
 8003828:	e13ffd15 	stw	r4,-12(fp)
 800382c:	e17ffe15 	stw	r5,-8(fp)
 8003830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003834:	e0bffd17 	ldw	r2,-12(fp)
 8003838:	10800017 	ldw	r2,0(r2)
 800383c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003840:	e0bffc17 	ldw	r2,-16(fp)
 8003844:	10c00a04 	addi	r3,r2,40
 8003848:	e0bffd17 	ldw	r2,-12(fp)
 800384c:	10800217 	ldw	r2,8(r2)
 8003850:	1809883a 	mov	r4,r3
 8003854:	e17ffe17 	ldw	r5,-8(fp)
 8003858:	e1bfff17 	ldw	r6,-4(fp)
 800385c:	100f883a 	mov	r7,r2
 8003860:	8003fec0 	call	8003fec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003864:	e037883a 	mov	sp,fp
 8003868:	dfc00117 	ldw	ra,4(sp)
 800386c:	df000017 	ldw	fp,0(sp)
 8003870:	dec00204 	addi	sp,sp,8
 8003874:	f800283a 	ret

08003878 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003878:	defffc04 	addi	sp,sp,-16
 800387c:	dfc00315 	stw	ra,12(sp)
 8003880:	df000215 	stw	fp,8(sp)
 8003884:	df000204 	addi	fp,sp,8
 8003888:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800388c:	e0bfff17 	ldw	r2,-4(fp)
 8003890:	10800017 	ldw	r2,0(r2)
 8003894:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003898:	e0bffe17 	ldw	r2,-8(fp)
 800389c:	10c00a04 	addi	r3,r2,40
 80038a0:	e0bfff17 	ldw	r2,-4(fp)
 80038a4:	10800217 	ldw	r2,8(r2)
 80038a8:	1809883a 	mov	r4,r3
 80038ac:	100b883a 	mov	r5,r2
 80038b0:	8003c8c0 	call	8003c8c <altera_avalon_jtag_uart_close>
}
 80038b4:	e037883a 	mov	sp,fp
 80038b8:	dfc00117 	ldw	ra,4(sp)
 80038bc:	df000017 	ldw	fp,0(sp)
 80038c0:	dec00204 	addi	sp,sp,8
 80038c4:	f800283a 	ret

080038c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80038c8:	defffa04 	addi	sp,sp,-24
 80038cc:	dfc00515 	stw	ra,20(sp)
 80038d0:	df000415 	stw	fp,16(sp)
 80038d4:	df000404 	addi	fp,sp,16
 80038d8:	e13ffd15 	stw	r4,-12(fp)
 80038dc:	e17ffe15 	stw	r5,-8(fp)
 80038e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80038e4:	e0bffd17 	ldw	r2,-12(fp)
 80038e8:	10800017 	ldw	r2,0(r2)
 80038ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80038f0:	e0bffc17 	ldw	r2,-16(fp)
 80038f4:	10800a04 	addi	r2,r2,40
 80038f8:	1009883a 	mov	r4,r2
 80038fc:	e17ffe17 	ldw	r5,-8(fp)
 8003900:	e1bfff17 	ldw	r6,-4(fp)
 8003904:	8003cf40 	call	8003cf4 <altera_avalon_jtag_uart_ioctl>
}
 8003908:	e037883a 	mov	sp,fp
 800390c:	dfc00117 	ldw	ra,4(sp)
 8003910:	df000017 	ldw	fp,0(sp)
 8003914:	dec00204 	addi	sp,sp,8
 8003918:	f800283a 	ret

0800391c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800391c:	defffa04 	addi	sp,sp,-24
 8003920:	dfc00515 	stw	ra,20(sp)
 8003924:	df000415 	stw	fp,16(sp)
 8003928:	df000404 	addi	fp,sp,16
 800392c:	e13ffd15 	stw	r4,-12(fp)
 8003930:	e17ffe15 	stw	r5,-8(fp)
 8003934:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003938:	e0bffd17 	ldw	r2,-12(fp)
 800393c:	00c00044 	movi	r3,1
 8003940:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003944:	e0bffd17 	ldw	r2,-12(fp)
 8003948:	10800017 	ldw	r2,0(r2)
 800394c:	10800104 	addi	r2,r2,4
 8003950:	1007883a 	mov	r3,r2
 8003954:	e0bffd17 	ldw	r2,-12(fp)
 8003958:	10800817 	ldw	r2,32(r2)
 800395c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003960:	e0fffe17 	ldw	r3,-8(fp)
 8003964:	e0bfff17 	ldw	r2,-4(fp)
 8003968:	d8000015 	stw	zero,0(sp)
 800396c:	1809883a 	mov	r4,r3
 8003970:	100b883a 	mov	r5,r2
 8003974:	01820034 	movhi	r6,2048
 8003978:	318e7804 	addi	r6,r6,14816
 800397c:	e1fffd17 	ldw	r7,-12(fp)
 8003980:	8004ba00 	call	8004ba0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003984:	e0bffd17 	ldw	r2,-12(fp)
 8003988:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800398c:	e0bffd17 	ldw	r2,-12(fp)
 8003990:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003994:	00820074 	movhi	r2,2049
 8003998:	10a3e204 	addi	r2,r2,-28792
 800399c:	10800017 	ldw	r2,0(r2)
 80039a0:	1809883a 	mov	r4,r3
 80039a4:	100b883a 	mov	r5,r2
 80039a8:	01820034 	movhi	r6,2048
 80039ac:	318ef904 	addi	r6,r6,15332
 80039b0:	e1fffd17 	ldw	r7,-12(fp)
 80039b4:	80047d80 	call	80047d8 <alt_alarm_start>
 80039b8:	1000040e 	bge	r2,zero,80039cc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80039bc:	e0fffd17 	ldw	r3,-12(fp)
 80039c0:	00a00034 	movhi	r2,32768
 80039c4:	10bfffc4 	addi	r2,r2,-1
 80039c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80039cc:	e037883a 	mov	sp,fp
 80039d0:	dfc00117 	ldw	ra,4(sp)
 80039d4:	df000017 	ldw	fp,0(sp)
 80039d8:	dec00204 	addi	sp,sp,8
 80039dc:	f800283a 	ret

080039e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80039e0:	defff804 	addi	sp,sp,-32
 80039e4:	df000715 	stw	fp,28(sp)
 80039e8:	df000704 	addi	fp,sp,28
 80039ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80039f0:	e0bfff17 	ldw	r2,-4(fp)
 80039f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80039f8:	e0bffb17 	ldw	r2,-20(fp)
 80039fc:	10800017 	ldw	r2,0(r2)
 8003a00:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003a04:	e0bffc17 	ldw	r2,-16(fp)
 8003a08:	10800104 	addi	r2,r2,4
 8003a0c:	10800037 	ldwio	r2,0(r2)
 8003a10:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003a14:	e0bffd17 	ldw	r2,-12(fp)
 8003a18:	1080c00c 	andi	r2,r2,768
 8003a1c:	1000011e 	bne	r2,zero,8003a24 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8003a20:	00006c06 	br	8003bd4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003a24:	e0bffd17 	ldw	r2,-12(fp)
 8003a28:	1080400c 	andi	r2,r2,256
 8003a2c:	10003426 	beq	r2,zero,8003b00 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003a30:	00800074 	movhi	r2,1
 8003a34:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003a38:	e0bffb17 	ldw	r2,-20(fp)
 8003a3c:	10800a17 	ldw	r2,40(r2)
 8003a40:	10800044 	addi	r2,r2,1
 8003a44:	1081ffcc 	andi	r2,r2,2047
 8003a48:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8003a4c:	e0bffb17 	ldw	r2,-20(fp)
 8003a50:	10c00b17 	ldw	r3,44(r2)
 8003a54:	e0bffe17 	ldw	r2,-8(fp)
 8003a58:	1880011e 	bne	r3,r2,8003a60 <altera_avalon_jtag_uart_irq+0x80>
          break;
 8003a5c:	00001606 	br	8003ab8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003a60:	e0bffc17 	ldw	r2,-16(fp)
 8003a64:	10800037 	ldwio	r2,0(r2)
 8003a68:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003a6c:	e0bff917 	ldw	r2,-28(fp)
 8003a70:	10a0000c 	andi	r2,r2,32768
 8003a74:	1000011e 	bne	r2,zero,8003a7c <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8003a78:	00000f06 	br	8003ab8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003a7c:	e0bffb17 	ldw	r2,-20(fp)
 8003a80:	10800a17 	ldw	r2,40(r2)
 8003a84:	e0fff917 	ldw	r3,-28(fp)
 8003a88:	1809883a 	mov	r4,r3
 8003a8c:	e0fffb17 	ldw	r3,-20(fp)
 8003a90:	1885883a 	add	r2,r3,r2
 8003a94:	10800e04 	addi	r2,r2,56
 8003a98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003a9c:	e0bffb17 	ldw	r2,-20(fp)
 8003aa0:	10800a17 	ldw	r2,40(r2)
 8003aa4:	10800044 	addi	r2,r2,1
 8003aa8:	10c1ffcc 	andi	r3,r2,2047
 8003aac:	e0bffb17 	ldw	r2,-20(fp)
 8003ab0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003ab4:	003fe006 	br	8003a38 <__alt_data_end+0xfc003a38>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003ab8:	e0bff917 	ldw	r2,-28(fp)
 8003abc:	10bfffec 	andhi	r2,r2,65535
 8003ac0:	10000f26 	beq	r2,zero,8003b00 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003ac4:	e0bffb17 	ldw	r2,-20(fp)
 8003ac8:	10c00817 	ldw	r3,32(r2)
 8003acc:	00bfff84 	movi	r2,-2
 8003ad0:	1886703a 	and	r3,r3,r2
 8003ad4:	e0bffb17 	ldw	r2,-20(fp)
 8003ad8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003adc:	e0bffc17 	ldw	r2,-16(fp)
 8003ae0:	10800104 	addi	r2,r2,4
 8003ae4:	1007883a 	mov	r3,r2
 8003ae8:	e0bffb17 	ldw	r2,-20(fp)
 8003aec:	10800817 	ldw	r2,32(r2)
 8003af0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003af4:	e0bffc17 	ldw	r2,-16(fp)
 8003af8:	10800104 	addi	r2,r2,4
 8003afc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003b00:	e0bffd17 	ldw	r2,-12(fp)
 8003b04:	1080800c 	andi	r2,r2,512
 8003b08:	10003126 	beq	r2,zero,8003bd0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003b0c:	e0bffd17 	ldw	r2,-12(fp)
 8003b10:	1004d43a 	srli	r2,r2,16
 8003b14:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003b18:	00001406 	br	8003b6c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003b1c:	e0bffc17 	ldw	r2,-16(fp)
 8003b20:	e0fffb17 	ldw	r3,-20(fp)
 8003b24:	18c00d17 	ldw	r3,52(r3)
 8003b28:	e13ffb17 	ldw	r4,-20(fp)
 8003b2c:	20c7883a 	add	r3,r4,r3
 8003b30:	18c20e04 	addi	r3,r3,2104
 8003b34:	18c00003 	ldbu	r3,0(r3)
 8003b38:	18c03fcc 	andi	r3,r3,255
 8003b3c:	18c0201c 	xori	r3,r3,128
 8003b40:	18ffe004 	addi	r3,r3,-128
 8003b44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003b48:	e0bffb17 	ldw	r2,-20(fp)
 8003b4c:	10800d17 	ldw	r2,52(r2)
 8003b50:	10800044 	addi	r2,r2,1
 8003b54:	10c1ffcc 	andi	r3,r2,2047
 8003b58:	e0bffb17 	ldw	r2,-20(fp)
 8003b5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003b60:	e0bffa17 	ldw	r2,-24(fp)
 8003b64:	10bfffc4 	addi	r2,r2,-1
 8003b68:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003b6c:	e0bffa17 	ldw	r2,-24(fp)
 8003b70:	10000526 	beq	r2,zero,8003b88 <altera_avalon_jtag_uart_irq+0x1a8>
 8003b74:	e0bffb17 	ldw	r2,-20(fp)
 8003b78:	10c00d17 	ldw	r3,52(r2)
 8003b7c:	e0bffb17 	ldw	r2,-20(fp)
 8003b80:	10800c17 	ldw	r2,48(r2)
 8003b84:	18bfe51e 	bne	r3,r2,8003b1c <__alt_data_end+0xfc003b1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003b88:	e0bffa17 	ldw	r2,-24(fp)
 8003b8c:	10001026 	beq	r2,zero,8003bd0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003b90:	e0bffb17 	ldw	r2,-20(fp)
 8003b94:	10c00817 	ldw	r3,32(r2)
 8003b98:	00bfff44 	movi	r2,-3
 8003b9c:	1886703a 	and	r3,r3,r2
 8003ba0:	e0bffb17 	ldw	r2,-20(fp)
 8003ba4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003ba8:	e0bffb17 	ldw	r2,-20(fp)
 8003bac:	10800017 	ldw	r2,0(r2)
 8003bb0:	10800104 	addi	r2,r2,4
 8003bb4:	1007883a 	mov	r3,r2
 8003bb8:	e0bffb17 	ldw	r2,-20(fp)
 8003bbc:	10800817 	ldw	r2,32(r2)
 8003bc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003bc4:	e0bffc17 	ldw	r2,-16(fp)
 8003bc8:	10800104 	addi	r2,r2,4
 8003bcc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003bd0:	003f8c06 	br	8003a04 <__alt_data_end+0xfc003a04>
}
 8003bd4:	e037883a 	mov	sp,fp
 8003bd8:	df000017 	ldw	fp,0(sp)
 8003bdc:	dec00104 	addi	sp,sp,4
 8003be0:	f800283a 	ret

08003be4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003be4:	defff804 	addi	sp,sp,-32
 8003be8:	df000715 	stw	fp,28(sp)
 8003bec:	df000704 	addi	fp,sp,28
 8003bf0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003bf4:	e0bffb17 	ldw	r2,-20(fp)
 8003bf8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003bfc:	e0bff917 	ldw	r2,-28(fp)
 8003c00:	10800017 	ldw	r2,0(r2)
 8003c04:	10800104 	addi	r2,r2,4
 8003c08:	10800037 	ldwio	r2,0(r2)
 8003c0c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003c10:	e0bffa17 	ldw	r2,-24(fp)
 8003c14:	1081000c 	andi	r2,r2,1024
 8003c18:	10000b26 	beq	r2,zero,8003c48 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003c1c:	e0bff917 	ldw	r2,-28(fp)
 8003c20:	10800017 	ldw	r2,0(r2)
 8003c24:	10800104 	addi	r2,r2,4
 8003c28:	1007883a 	mov	r3,r2
 8003c2c:	e0bff917 	ldw	r2,-28(fp)
 8003c30:	10800817 	ldw	r2,32(r2)
 8003c34:	10810014 	ori	r2,r2,1024
 8003c38:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8003c3c:	e0bff917 	ldw	r2,-28(fp)
 8003c40:	10000915 	stw	zero,36(r2)
 8003c44:	00000a06 	br	8003c70 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003c48:	e0bff917 	ldw	r2,-28(fp)
 8003c4c:	10c00917 	ldw	r3,36(r2)
 8003c50:	00a00034 	movhi	r2,32768
 8003c54:	10bfff04 	addi	r2,r2,-4
 8003c58:	10c00536 	bltu	r2,r3,8003c70 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8003c5c:	e0bff917 	ldw	r2,-28(fp)
 8003c60:	10800917 	ldw	r2,36(r2)
 8003c64:	10c00044 	addi	r3,r2,1
 8003c68:	e0bff917 	ldw	r2,-28(fp)
 8003c6c:	10c00915 	stw	r3,36(r2)
 8003c70:	00820074 	movhi	r2,2049
 8003c74:	10a3e204 	addi	r2,r2,-28792
 8003c78:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8003c7c:	e037883a 	mov	sp,fp
 8003c80:	df000017 	ldw	fp,0(sp)
 8003c84:	dec00104 	addi	sp,sp,4
 8003c88:	f800283a 	ret

08003c8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8003c8c:	defffd04 	addi	sp,sp,-12
 8003c90:	df000215 	stw	fp,8(sp)
 8003c94:	df000204 	addi	fp,sp,8
 8003c98:	e13ffe15 	stw	r4,-8(fp)
 8003c9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003ca0:	00000506 	br	8003cb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8003ca4:	e0bfff17 	ldw	r2,-4(fp)
 8003ca8:	1090000c 	andi	r2,r2,16384
 8003cac:	10000226 	beq	r2,zero,8003cb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8003cb0:	00bffd44 	movi	r2,-11
 8003cb4:	00000b06 	br	8003ce4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003cb8:	e0bffe17 	ldw	r2,-8(fp)
 8003cbc:	10c00d17 	ldw	r3,52(r2)
 8003cc0:	e0bffe17 	ldw	r2,-8(fp)
 8003cc4:	10800c17 	ldw	r2,48(r2)
 8003cc8:	18800526 	beq	r3,r2,8003ce0 <altera_avalon_jtag_uart_close+0x54>
 8003ccc:	e0bffe17 	ldw	r2,-8(fp)
 8003cd0:	10c00917 	ldw	r3,36(r2)
 8003cd4:	e0bffe17 	ldw	r2,-8(fp)
 8003cd8:	10800117 	ldw	r2,4(r2)
 8003cdc:	18bff136 	bltu	r3,r2,8003ca4 <__alt_data_end+0xfc003ca4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8003ce0:	0005883a 	mov	r2,zero
}
 8003ce4:	e037883a 	mov	sp,fp
 8003ce8:	df000017 	ldw	fp,0(sp)
 8003cec:	dec00104 	addi	sp,sp,4
 8003cf0:	f800283a 	ret

08003cf4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8003cf4:	defffa04 	addi	sp,sp,-24
 8003cf8:	df000515 	stw	fp,20(sp)
 8003cfc:	df000504 	addi	fp,sp,20
 8003d00:	e13ffd15 	stw	r4,-12(fp)
 8003d04:	e17ffe15 	stw	r5,-8(fp)
 8003d08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8003d0c:	00bff9c4 	movi	r2,-25
 8003d10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8003d14:	e0bffe17 	ldw	r2,-8(fp)
 8003d18:	10da8060 	cmpeqi	r3,r2,27137
 8003d1c:	1800031e 	bne	r3,zero,8003d2c <altera_avalon_jtag_uart_ioctl+0x38>
 8003d20:	109a80a0 	cmpeqi	r2,r2,27138
 8003d24:	1000191e 	bne	r2,zero,8003d8c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8003d28:	00002806 	br	8003dcc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8003d2c:	e0bffd17 	ldw	r2,-12(fp)
 8003d30:	10c00117 	ldw	r3,4(r2)
 8003d34:	00a00034 	movhi	r2,32768
 8003d38:	10bfffc4 	addi	r2,r2,-1
 8003d3c:	18801226 	beq	r3,r2,8003d88 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8003d40:	e0bfff17 	ldw	r2,-4(fp)
 8003d44:	10800017 	ldw	r2,0(r2)
 8003d48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8003d4c:	e0bffc17 	ldw	r2,-16(fp)
 8003d50:	10800090 	cmplti	r2,r2,2
 8003d54:	1000061e 	bne	r2,zero,8003d70 <altera_avalon_jtag_uart_ioctl+0x7c>
 8003d58:	e0fffc17 	ldw	r3,-16(fp)
 8003d5c:	00a00034 	movhi	r2,32768
 8003d60:	10bfffc4 	addi	r2,r2,-1
 8003d64:	18800226 	beq	r3,r2,8003d70 <altera_avalon_jtag_uart_ioctl+0x7c>
 8003d68:	e0bffc17 	ldw	r2,-16(fp)
 8003d6c:	00000206 	br	8003d78 <altera_avalon_jtag_uart_ioctl+0x84>
 8003d70:	00a00034 	movhi	r2,32768
 8003d74:	10bfff84 	addi	r2,r2,-2
 8003d78:	e0fffd17 	ldw	r3,-12(fp)
 8003d7c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8003d80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003d84:	00001106 	br	8003dcc <altera_avalon_jtag_uart_ioctl+0xd8>
 8003d88:	00001006 	br	8003dcc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8003d8c:	e0bffd17 	ldw	r2,-12(fp)
 8003d90:	10c00117 	ldw	r3,4(r2)
 8003d94:	00a00034 	movhi	r2,32768
 8003d98:	10bfffc4 	addi	r2,r2,-1
 8003d9c:	18800a26 	beq	r3,r2,8003dc8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8003da0:	e0bffd17 	ldw	r2,-12(fp)
 8003da4:	10c00917 	ldw	r3,36(r2)
 8003da8:	e0bffd17 	ldw	r2,-12(fp)
 8003dac:	10800117 	ldw	r2,4(r2)
 8003db0:	1885803a 	cmpltu	r2,r3,r2
 8003db4:	10c03fcc 	andi	r3,r2,255
 8003db8:	e0bfff17 	ldw	r2,-4(fp)
 8003dbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8003dc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003dc4:	00000006 	br	8003dc8 <altera_avalon_jtag_uart_ioctl+0xd4>
 8003dc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8003dcc:	e0bffb17 	ldw	r2,-20(fp)
}
 8003dd0:	e037883a 	mov	sp,fp
 8003dd4:	df000017 	ldw	fp,0(sp)
 8003dd8:	dec00104 	addi	sp,sp,4
 8003ddc:	f800283a 	ret

08003de0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8003de0:	defff304 	addi	sp,sp,-52
 8003de4:	dfc00c15 	stw	ra,48(sp)
 8003de8:	df000b15 	stw	fp,44(sp)
 8003dec:	df000b04 	addi	fp,sp,44
 8003df0:	e13ffc15 	stw	r4,-16(fp)
 8003df4:	e17ffd15 	stw	r5,-12(fp)
 8003df8:	e1bffe15 	stw	r6,-8(fp)
 8003dfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8003e00:	e0bffd17 	ldw	r2,-12(fp)
 8003e04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003e08:	00004906 	br	8003f30 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8003e0c:	e0bffc17 	ldw	r2,-16(fp)
 8003e10:	10800a17 	ldw	r2,40(r2)
 8003e14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8003e18:	e0bffc17 	ldw	r2,-16(fp)
 8003e1c:	10800b17 	ldw	r2,44(r2)
 8003e20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8003e24:	e0fff717 	ldw	r3,-36(fp)
 8003e28:	e0bff817 	ldw	r2,-32(fp)
 8003e2c:	18800536 	bltu	r3,r2,8003e44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8003e30:	e0fff717 	ldw	r3,-36(fp)
 8003e34:	e0bff817 	ldw	r2,-32(fp)
 8003e38:	1885c83a 	sub	r2,r3,r2
 8003e3c:	e0bff615 	stw	r2,-40(fp)
 8003e40:	00000406 	br	8003e54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8003e44:	00c20004 	movi	r3,2048
 8003e48:	e0bff817 	ldw	r2,-32(fp)
 8003e4c:	1885c83a 	sub	r2,r3,r2
 8003e50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8003e54:	e0bff617 	ldw	r2,-40(fp)
 8003e58:	1000011e 	bne	r2,zero,8003e60 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8003e5c:	00001d06 	br	8003ed4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8003e60:	e0fffe17 	ldw	r3,-8(fp)
 8003e64:	e0bff617 	ldw	r2,-40(fp)
 8003e68:	1880022e 	bgeu	r3,r2,8003e74 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8003e6c:	e0bffe17 	ldw	r2,-8(fp)
 8003e70:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8003e74:	e0bff817 	ldw	r2,-32(fp)
 8003e78:	10800e04 	addi	r2,r2,56
 8003e7c:	e0fffc17 	ldw	r3,-16(fp)
 8003e80:	1885883a 	add	r2,r3,r2
 8003e84:	e13ff517 	ldw	r4,-44(fp)
 8003e88:	100b883a 	mov	r5,r2
 8003e8c:	e1bff617 	ldw	r6,-40(fp)
 8003e90:	80010c40 	call	80010c4 <memcpy>
      ptr   += n;
 8003e94:	e0fff517 	ldw	r3,-44(fp)
 8003e98:	e0bff617 	ldw	r2,-40(fp)
 8003e9c:	1885883a 	add	r2,r3,r2
 8003ea0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8003ea4:	e0fffe17 	ldw	r3,-8(fp)
 8003ea8:	e0bff617 	ldw	r2,-40(fp)
 8003eac:	1885c83a 	sub	r2,r3,r2
 8003eb0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003eb4:	e0fff817 	ldw	r3,-32(fp)
 8003eb8:	e0bff617 	ldw	r2,-40(fp)
 8003ebc:	1885883a 	add	r2,r3,r2
 8003ec0:	10c1ffcc 	andi	r3,r2,2047
 8003ec4:	e0bffc17 	ldw	r2,-16(fp)
 8003ec8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8003ecc:	e0bffe17 	ldw	r2,-8(fp)
 8003ed0:	00bfce16 	blt	zero,r2,8003e0c <__alt_data_end+0xfc003e0c>

    /* If we read any data then return it */
    if (ptr != buffer)
 8003ed4:	e0fff517 	ldw	r3,-44(fp)
 8003ed8:	e0bffd17 	ldw	r2,-12(fp)
 8003edc:	18800126 	beq	r3,r2,8003ee4 <altera_avalon_jtag_uart_read+0x104>
      break;
 8003ee0:	00001506 	br	8003f38 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8003ee4:	e0bfff17 	ldw	r2,-4(fp)
 8003ee8:	1090000c 	andi	r2,r2,16384
 8003eec:	10000126 	beq	r2,zero,8003ef4 <altera_avalon_jtag_uart_read+0x114>
      break;
 8003ef0:	00001106 	br	8003f38 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8003ef4:	0001883a 	nop
 8003ef8:	e0bffc17 	ldw	r2,-16(fp)
 8003efc:	10c00a17 	ldw	r3,40(r2)
 8003f00:	e0bff717 	ldw	r2,-36(fp)
 8003f04:	1880051e 	bne	r3,r2,8003f1c <altera_avalon_jtag_uart_read+0x13c>
 8003f08:	e0bffc17 	ldw	r2,-16(fp)
 8003f0c:	10c00917 	ldw	r3,36(r2)
 8003f10:	e0bffc17 	ldw	r2,-16(fp)
 8003f14:	10800117 	ldw	r2,4(r2)
 8003f18:	18bff736 	bltu	r3,r2,8003ef8 <__alt_data_end+0xfc003ef8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8003f1c:	e0bffc17 	ldw	r2,-16(fp)
 8003f20:	10c00a17 	ldw	r3,40(r2)
 8003f24:	e0bff717 	ldw	r2,-36(fp)
 8003f28:	1880011e 	bne	r3,r2,8003f30 <altera_avalon_jtag_uart_read+0x150>
      break;
 8003f2c:	00000206 	br	8003f38 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003f30:	e0bffe17 	ldw	r2,-8(fp)
 8003f34:	00bfb516 	blt	zero,r2,8003e0c <__alt_data_end+0xfc003e0c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8003f38:	e0fff517 	ldw	r3,-44(fp)
 8003f3c:	e0bffd17 	ldw	r2,-12(fp)
 8003f40:	18801826 	beq	r3,r2,8003fa4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003f44:	0005303a 	rdctl	r2,status
 8003f48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003f4c:	e0fffa17 	ldw	r3,-24(fp)
 8003f50:	00bfff84 	movi	r2,-2
 8003f54:	1884703a 	and	r2,r3,r2
 8003f58:	1001703a 	wrctl	status,r2
  
  return context;
 8003f5c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8003f60:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003f64:	e0bffc17 	ldw	r2,-16(fp)
 8003f68:	10800817 	ldw	r2,32(r2)
 8003f6c:	10c00054 	ori	r3,r2,1
 8003f70:	e0bffc17 	ldw	r2,-16(fp)
 8003f74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003f78:	e0bffc17 	ldw	r2,-16(fp)
 8003f7c:	10800017 	ldw	r2,0(r2)
 8003f80:	10800104 	addi	r2,r2,4
 8003f84:	1007883a 	mov	r3,r2
 8003f88:	e0bffc17 	ldw	r2,-16(fp)
 8003f8c:	10800817 	ldw	r2,32(r2)
 8003f90:	18800035 	stwio	r2,0(r3)
 8003f94:	e0bff917 	ldw	r2,-28(fp)
 8003f98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003f9c:	e0bffb17 	ldw	r2,-20(fp)
 8003fa0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8003fa4:	e0fff517 	ldw	r3,-44(fp)
 8003fa8:	e0bffd17 	ldw	r2,-12(fp)
 8003fac:	18800426 	beq	r3,r2,8003fc0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8003fb0:	e0fff517 	ldw	r3,-44(fp)
 8003fb4:	e0bffd17 	ldw	r2,-12(fp)
 8003fb8:	1885c83a 	sub	r2,r3,r2
 8003fbc:	00000606 	br	8003fd8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8003fc0:	e0bfff17 	ldw	r2,-4(fp)
 8003fc4:	1090000c 	andi	r2,r2,16384
 8003fc8:	10000226 	beq	r2,zero,8003fd4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8003fcc:	00bffd44 	movi	r2,-11
 8003fd0:	00000106 	br	8003fd8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8003fd4:	00bffec4 	movi	r2,-5
}
 8003fd8:	e037883a 	mov	sp,fp
 8003fdc:	dfc00117 	ldw	ra,4(sp)
 8003fe0:	df000017 	ldw	fp,0(sp)
 8003fe4:	dec00204 	addi	sp,sp,8
 8003fe8:	f800283a 	ret

08003fec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8003fec:	defff304 	addi	sp,sp,-52
 8003ff0:	dfc00c15 	stw	ra,48(sp)
 8003ff4:	df000b15 	stw	fp,44(sp)
 8003ff8:	df000b04 	addi	fp,sp,44
 8003ffc:	e13ffc15 	stw	r4,-16(fp)
 8004000:	e17ffd15 	stw	r5,-12(fp)
 8004004:	e1bffe15 	stw	r6,-8(fp)
 8004008:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800400c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8004010:	e0bffd17 	ldw	r2,-12(fp)
 8004014:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004018:	00003806 	br	80040fc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800401c:	e0bffc17 	ldw	r2,-16(fp)
 8004020:	10800c17 	ldw	r2,48(r2)
 8004024:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8004028:	e0bffc17 	ldw	r2,-16(fp)
 800402c:	10800d17 	ldw	r2,52(r2)
 8004030:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004034:	e0fff817 	ldw	r3,-32(fp)
 8004038:	e0bff517 	ldw	r2,-44(fp)
 800403c:	1880062e 	bgeu	r3,r2,8004058 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004040:	e0fff517 	ldw	r3,-44(fp)
 8004044:	e0bff817 	ldw	r2,-32(fp)
 8004048:	1885c83a 	sub	r2,r3,r2
 800404c:	10bfffc4 	addi	r2,r2,-1
 8004050:	e0bff615 	stw	r2,-40(fp)
 8004054:	00000b06 	br	8004084 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8004058:	e0bff517 	ldw	r2,-44(fp)
 800405c:	10000526 	beq	r2,zero,8004074 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004060:	00c20004 	movi	r3,2048
 8004064:	e0bff817 	ldw	r2,-32(fp)
 8004068:	1885c83a 	sub	r2,r3,r2
 800406c:	e0bff615 	stw	r2,-40(fp)
 8004070:	00000406 	br	8004084 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004074:	00c1ffc4 	movi	r3,2047
 8004078:	e0bff817 	ldw	r2,-32(fp)
 800407c:	1885c83a 	sub	r2,r3,r2
 8004080:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004084:	e0bff617 	ldw	r2,-40(fp)
 8004088:	1000011e 	bne	r2,zero,8004090 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800408c:	00001d06 	br	8004104 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8004090:	e0fffe17 	ldw	r3,-8(fp)
 8004094:	e0bff617 	ldw	r2,-40(fp)
 8004098:	1880022e 	bgeu	r3,r2,80040a4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800409c:	e0bffe17 	ldw	r2,-8(fp)
 80040a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80040a4:	e0bff817 	ldw	r2,-32(fp)
 80040a8:	10820e04 	addi	r2,r2,2104
 80040ac:	e0fffc17 	ldw	r3,-16(fp)
 80040b0:	1885883a 	add	r2,r3,r2
 80040b4:	1009883a 	mov	r4,r2
 80040b8:	e17ffd17 	ldw	r5,-12(fp)
 80040bc:	e1bff617 	ldw	r6,-40(fp)
 80040c0:	80010c40 	call	80010c4 <memcpy>
      ptr   += n;
 80040c4:	e0fffd17 	ldw	r3,-12(fp)
 80040c8:	e0bff617 	ldw	r2,-40(fp)
 80040cc:	1885883a 	add	r2,r3,r2
 80040d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80040d4:	e0fffe17 	ldw	r3,-8(fp)
 80040d8:	e0bff617 	ldw	r2,-40(fp)
 80040dc:	1885c83a 	sub	r2,r3,r2
 80040e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80040e4:	e0fff817 	ldw	r3,-32(fp)
 80040e8:	e0bff617 	ldw	r2,-40(fp)
 80040ec:	1885883a 	add	r2,r3,r2
 80040f0:	10c1ffcc 	andi	r3,r2,2047
 80040f4:	e0bffc17 	ldw	r2,-16(fp)
 80040f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80040fc:	e0bffe17 	ldw	r2,-8(fp)
 8004100:	00bfc616 	blt	zero,r2,800401c <__alt_data_end+0xfc00401c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004104:	0005303a 	rdctl	r2,status
 8004108:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800410c:	e0fffa17 	ldw	r3,-24(fp)
 8004110:	00bfff84 	movi	r2,-2
 8004114:	1884703a 	and	r2,r3,r2
 8004118:	1001703a 	wrctl	status,r2
  
  return context;
 800411c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004120:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004124:	e0bffc17 	ldw	r2,-16(fp)
 8004128:	10800817 	ldw	r2,32(r2)
 800412c:	10c00094 	ori	r3,r2,2
 8004130:	e0bffc17 	ldw	r2,-16(fp)
 8004134:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004138:	e0bffc17 	ldw	r2,-16(fp)
 800413c:	10800017 	ldw	r2,0(r2)
 8004140:	10800104 	addi	r2,r2,4
 8004144:	1007883a 	mov	r3,r2
 8004148:	e0bffc17 	ldw	r2,-16(fp)
 800414c:	10800817 	ldw	r2,32(r2)
 8004150:	18800035 	stwio	r2,0(r3)
 8004154:	e0bff917 	ldw	r2,-28(fp)
 8004158:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800415c:	e0bffb17 	ldw	r2,-20(fp)
 8004160:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004164:	e0bffe17 	ldw	r2,-8(fp)
 8004168:	0080120e 	bge	zero,r2,80041b4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800416c:	e0bfff17 	ldw	r2,-4(fp)
 8004170:	1090000c 	andi	r2,r2,16384
 8004174:	10000126 	beq	r2,zero,800417c <altera_avalon_jtag_uart_write+0x190>
        break;
 8004178:	00001006 	br	80041bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800417c:	0001883a 	nop
 8004180:	e0bffc17 	ldw	r2,-16(fp)
 8004184:	10c00d17 	ldw	r3,52(r2)
 8004188:	e0bff517 	ldw	r2,-44(fp)
 800418c:	1880051e 	bne	r3,r2,80041a4 <altera_avalon_jtag_uart_write+0x1b8>
 8004190:	e0bffc17 	ldw	r2,-16(fp)
 8004194:	10c00917 	ldw	r3,36(r2)
 8004198:	e0bffc17 	ldw	r2,-16(fp)
 800419c:	10800117 	ldw	r2,4(r2)
 80041a0:	18bff736 	bltu	r3,r2,8004180 <__alt_data_end+0xfc004180>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80041a4:	e0bffc17 	ldw	r2,-16(fp)
 80041a8:	10800917 	ldw	r2,36(r2)
 80041ac:	10000126 	beq	r2,zero,80041b4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 80041b0:	00000206 	br	80041bc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 80041b4:	e0bffe17 	ldw	r2,-8(fp)
 80041b8:	00bf9716 	blt	zero,r2,8004018 <__alt_data_end+0xfc004018>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80041bc:	e0fffd17 	ldw	r3,-12(fp)
 80041c0:	e0bff717 	ldw	r2,-36(fp)
 80041c4:	18800426 	beq	r3,r2,80041d8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80041c8:	e0fffd17 	ldw	r3,-12(fp)
 80041cc:	e0bff717 	ldw	r2,-36(fp)
 80041d0:	1885c83a 	sub	r2,r3,r2
 80041d4:	00000606 	br	80041f0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 80041d8:	e0bfff17 	ldw	r2,-4(fp)
 80041dc:	1090000c 	andi	r2,r2,16384
 80041e0:	10000226 	beq	r2,zero,80041ec <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 80041e4:	00bffd44 	movi	r2,-11
 80041e8:	00000106 	br	80041f0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80041ec:	00bffec4 	movi	r2,-5
}
 80041f0:	e037883a 	mov	sp,fp
 80041f4:	dfc00117 	ldw	ra,4(sp)
 80041f8:	df000017 	ldw	fp,0(sp)
 80041fc:	dec00204 	addi	sp,sp,8
 8004200:	f800283a 	ret

08004204 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8004204:	defffa04 	addi	sp,sp,-24
 8004208:	dfc00515 	stw	ra,20(sp)
 800420c:	df000415 	stw	fp,16(sp)
 8004210:	df000404 	addi	fp,sp,16
 8004214:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8004218:	0007883a 	mov	r3,zero
 800421c:	e0bfff17 	ldw	r2,-4(fp)
 8004220:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8004224:	e0bfff17 	ldw	r2,-4(fp)
 8004228:	10800104 	addi	r2,r2,4
 800422c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004230:	0005303a 	rdctl	r2,status
 8004234:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004238:	e0fffd17 	ldw	r3,-12(fp)
 800423c:	00bfff84 	movi	r2,-2
 8004240:	1884703a 	and	r2,r3,r2
 8004244:	1001703a 	wrctl	status,r2
  
  return context;
 8004248:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800424c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8004250:	80052b40 	call	80052b4 <alt_tick>
 8004254:	e0bffc17 	ldw	r2,-16(fp)
 8004258:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800425c:	e0bffe17 	ldw	r2,-8(fp)
 8004260:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8004264:	e037883a 	mov	sp,fp
 8004268:	dfc00117 	ldw	ra,4(sp)
 800426c:	df000017 	ldw	fp,0(sp)
 8004270:	dec00204 	addi	sp,sp,8
 8004274:	f800283a 	ret

08004278 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8004278:	defff804 	addi	sp,sp,-32
 800427c:	dfc00715 	stw	ra,28(sp)
 8004280:	df000615 	stw	fp,24(sp)
 8004284:	df000604 	addi	fp,sp,24
 8004288:	e13ffc15 	stw	r4,-16(fp)
 800428c:	e17ffd15 	stw	r5,-12(fp)
 8004290:	e1bffe15 	stw	r6,-8(fp)
 8004294:	e1ffff15 	stw	r7,-4(fp)
 8004298:	e0bfff17 	ldw	r2,-4(fp)
 800429c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80042a0:	00820074 	movhi	r2,2049
 80042a4:	10a3e204 	addi	r2,r2,-28792
 80042a8:	10800017 	ldw	r2,0(r2)
 80042ac:	1000041e 	bne	r2,zero,80042c0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 80042b0:	00820074 	movhi	r2,2049
 80042b4:	10a3e204 	addi	r2,r2,-28792
 80042b8:	e0fffb17 	ldw	r3,-20(fp)
 80042bc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80042c0:	e0bffc17 	ldw	r2,-16(fp)
 80042c4:	10800104 	addi	r2,r2,4
 80042c8:	00c001c4 	movi	r3,7
 80042cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80042d0:	d8000015 	stw	zero,0(sp)
 80042d4:	e13ffd17 	ldw	r4,-12(fp)
 80042d8:	e17ffe17 	ldw	r5,-8(fp)
 80042dc:	01820034 	movhi	r6,2048
 80042e0:	31908104 	addi	r6,r6,16900
 80042e4:	e1fffc17 	ldw	r7,-16(fp)
 80042e8:	8004ba00 	call	8004ba0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80042ec:	e037883a 	mov	sp,fp
 80042f0:	dfc00117 	ldw	ra,4(sp)
 80042f4:	df000017 	ldw	fp,0(sp)
 80042f8:	dec00204 	addi	sp,sp,8
 80042fc:	f800283a 	ret

08004300 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8004300:	defffc04 	addi	sp,sp,-16
 8004304:	df000315 	stw	fp,12(sp)
 8004308:	df000304 	addi	fp,sp,12
 800430c:	e13ffe15 	stw	r4,-8(fp)
 8004310:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8004314:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 8004318:	e0bfff17 	ldw	r2,-4(fp)
 800431c:	1000061e 	bne	r2,zero,8004338 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8004320:	e0bffe17 	ldw	r2,-8(fp)
 8004324:	1007883a 	mov	r3,r2
 8004328:	e0bffd03 	ldbu	r2,-12(fp)
 800432c:	1884b03a 	or	r2,r3,r2
 8004330:	e0bffd05 	stb	r2,-12(fp)
 8004334:	00000806 	br	8004358 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 8004338:	e0bffe17 	ldw	r2,-8(fp)
 800433c:	1007883a 	mov	r3,r2
 8004340:	e0bffd03 	ldbu	r2,-12(fp)
 8004344:	1884b03a 	or	r2,r3,r2
 8004348:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800434c:	e0bffd03 	ldbu	r2,-12(fp)
 8004350:	10801014 	ori	r2,r2,64
 8004354:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 8004358:	e0fffd03 	ldbu	r3,-12(fp)
 800435c:	00bfe004 	movi	r2,-128
 8004360:	1884b03a 	or	r2,r3,r2
}
 8004364:	e037883a 	mov	sp,fp
 8004368:	df000017 	ldw	fp,0(sp)
 800436c:	dec00104 	addi	sp,sp,4
 8004370:	f800283a 	ret

08004374 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8004374:	defffd04 	addi	sp,sp,-12
 8004378:	df000215 	stw	fp,8(sp)
 800437c:	df000204 	addi	fp,sp,8
 8004380:	e13ffe15 	stw	r4,-8(fp)
 8004384:	2805883a 	mov	r2,r5
 8004388:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800438c:	e0bffe17 	ldw	r2,-8(fp)
 8004390:	10800a17 	ldw	r2,40(r2)
 8004394:	1007883a 	mov	r3,r2
 8004398:	e0bfff03 	ldbu	r2,-4(fp)
 800439c:	18800025 	stbio	r2,0(r3)
}
 80043a0:	e037883a 	mov	sp,fp
 80043a4:	df000017 	ldw	fp,0(sp)
 80043a8:	dec00104 	addi	sp,sp,4
 80043ac:	f800283a 	ret

080043b0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 80043b0:	defffe04 	addi	sp,sp,-8
 80043b4:	df000115 	stw	fp,4(sp)
 80043b8:	df000104 	addi	fp,sp,4
 80043bc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80043c0:	e0bfff17 	ldw	r2,-4(fp)
 80043c4:	10800a17 	ldw	r2,40(r2)
 80043c8:	1007883a 	mov	r3,r2
 80043cc:	00800044 	movi	r2,1
 80043d0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 80043d4:	e037883a 	mov	sp,fp
 80043d8:	df000017 	ldw	fp,0(sp)
 80043dc:	dec00104 	addi	sp,sp,4
 80043e0:	f800283a 	ret

080043e4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 80043e4:	defffc04 	addi	sp,sp,-16
 80043e8:	dfc00315 	stw	ra,12(sp)
 80043ec:	df000215 	stw	fp,8(sp)
 80043f0:	df000204 	addi	fp,sp,8
 80043f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 80043f8:	e13fff17 	ldw	r4,-4(fp)
 80043fc:	01420034 	movhi	r5,2048
 8004400:	295d2c04 	addi	r5,r5,29872
 8004404:	8004ae00 	call	8004ae0 <alt_find_dev>
 8004408:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800440c:	e0bffe17 	ldw	r2,-8(fp)
}
 8004410:	e037883a 	mov	sp,fp
 8004414:	dfc00117 	ldw	ra,4(sp)
 8004418:	df000017 	ldw	fp,0(sp)
 800441c:	dec00204 	addi	sp,sp,8
 8004420:	f800283a 	ret

08004424 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8004424:	defffb04 	addi	sp,sp,-20
 8004428:	df000415 	stw	fp,16(sp)
 800442c:	df000404 	addi	fp,sp,16
 8004430:	e13ffd15 	stw	r4,-12(fp)
 8004434:	e17ffe15 	stw	r5,-8(fp)
 8004438:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800443c:	e03ffc15 	stw	zero,-16(fp)
 8004440:	00000f06 	br	8004480 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8004444:	e0bffd17 	ldw	r2,-12(fp)
 8004448:	10800a17 	ldw	r2,40(r2)
 800444c:	10800044 	addi	r2,r2,1
 8004450:	1009883a 	mov	r4,r2
 8004454:	e0fffe17 	ldw	r3,-8(fp)
 8004458:	e0bffc17 	ldw	r2,-16(fp)
 800445c:	1885883a 	add	r2,r3,r2
 8004460:	10800003 	ldbu	r2,0(r2)
 8004464:	10803fcc 	andi	r2,r2,255
 8004468:	1080201c 	xori	r2,r2,128
 800446c:	10bfe004 	addi	r2,r2,-128
 8004470:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8004474:	e0bffc17 	ldw	r2,-16(fp)
 8004478:	10800044 	addi	r2,r2,1
 800447c:	e0bffc15 	stw	r2,-16(fp)
 8004480:	e0fffc17 	ldw	r3,-16(fp)
 8004484:	e0bfff17 	ldw	r2,-4(fp)
 8004488:	18bfee36 	bltu	r3,r2,8004444 <__alt_data_end+0xfc004444>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800448c:	e037883a 	mov	sp,fp
 8004490:	df000017 	ldw	fp,0(sp)
 8004494:	dec00104 	addi	sp,sp,4
 8004498:	f800283a 	ret

0800449c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800449c:	defffd04 	addi	sp,sp,-12
 80044a0:	df000215 	stw	fp,8(sp)
 80044a4:	df000204 	addi	fp,sp,8
 80044a8:	e13ffe15 	stw	r4,-8(fp)
 80044ac:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 80044b0:	00000d06 	br	80044e8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 80044b4:	e0bffe17 	ldw	r2,-8(fp)
 80044b8:	10800a17 	ldw	r2,40(r2)
 80044bc:	10800044 	addi	r2,r2,1
 80044c0:	1007883a 	mov	r3,r2
 80044c4:	e0bfff17 	ldw	r2,-4(fp)
 80044c8:	10800003 	ldbu	r2,0(r2)
 80044cc:	10803fcc 	andi	r2,r2,255
 80044d0:	1080201c 	xori	r2,r2,128
 80044d4:	10bfe004 	addi	r2,r2,-128
 80044d8:	18800025 	stbio	r2,0(r3)
		++ptr;
 80044dc:	e0bfff17 	ldw	r2,-4(fp)
 80044e0:	10800044 	addi	r2,r2,1
 80044e4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 80044e8:	e0bfff17 	ldw	r2,-4(fp)
 80044ec:	10800003 	ldbu	r2,0(r2)
 80044f0:	10803fcc 	andi	r2,r2,255
 80044f4:	1080201c 	xori	r2,r2,128
 80044f8:	10bfe004 	addi	r2,r2,-128
 80044fc:	103fed1e 	bne	r2,zero,80044b4 <__alt_data_end+0xfc0044b4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8004500:	e037883a 	mov	sp,fp
 8004504:	df000017 	ldw	fp,0(sp)
 8004508:	dec00104 	addi	sp,sp,4
 800450c:	f800283a 	ret

08004510 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8004510:	defffb04 	addi	sp,sp,-20
 8004514:	dfc00415 	stw	ra,16(sp)
 8004518:	df000315 	stw	fp,12(sp)
 800451c:	df000304 	addi	fp,sp,12
 8004520:	e13ffd15 	stw	r4,-12(fp)
 8004524:	e17ffe15 	stw	r5,-8(fp)
 8004528:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800452c:	e0bffd17 	ldw	r2,-12(fp)
 8004530:	10c00017 	ldw	r3,0(r2)
 8004534:	e0bfff17 	ldw	r2,-4(fp)
 8004538:	1809883a 	mov	r4,r3
 800453c:	e17ffe17 	ldw	r5,-8(fp)
 8004540:	100d883a 	mov	r6,r2
 8004544:	80044240 	call	8004424 <alt_up_character_lcd_write>
	return 0;
 8004548:	0005883a 	mov	r2,zero
}
 800454c:	e037883a 	mov	sp,fp
 8004550:	dfc00117 	ldw	ra,4(sp)
 8004554:	df000017 	ldw	fp,0(sp)
 8004558:	dec00204 	addi	sp,sp,8
 800455c:	f800283a 	ret

08004560 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8004560:	defffa04 	addi	sp,sp,-24
 8004564:	dfc00515 	stw	ra,20(sp)
 8004568:	df000415 	stw	fp,16(sp)
 800456c:	df000404 	addi	fp,sp,16
 8004570:	e13ffd15 	stw	r4,-12(fp)
 8004574:	e17ffe15 	stw	r5,-8(fp)
 8004578:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800457c:	e0bffe17 	ldw	r2,-8(fp)
 8004580:	10800a28 	cmpgeui	r2,r2,40
 8004584:	1000031e 	bne	r2,zero,8004594 <alt_up_character_lcd_set_cursor_pos+0x34>
 8004588:	e0bfff17 	ldw	r2,-4(fp)
 800458c:	108000b0 	cmpltui	r2,r2,2
 8004590:	1000021e 	bne	r2,zero,800459c <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8004594:	00bfffc4 	movi	r2,-1
 8004598:	00000906 	br	80045c0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800459c:	e13ffe17 	ldw	r4,-8(fp)
 80045a0:	e17fff17 	ldw	r5,-4(fp)
 80045a4:	80043000 	call	8004300 <get_DDRAM_addr>
 80045a8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 80045ac:	e0bffc03 	ldbu	r2,-16(fp)
 80045b0:	e13ffd17 	ldw	r4,-12(fp)
 80045b4:	100b883a 	mov	r5,r2
 80045b8:	80043740 	call	8004374 <alt_up_character_lcd_send_cmd>
	return 0;
 80045bc:	0005883a 	mov	r2,zero
}
 80045c0:	e037883a 	mov	sp,fp
 80045c4:	dfc00117 	ldw	ra,4(sp)
 80045c8:	df000017 	ldw	fp,0(sp)
 80045cc:	dec00204 	addi	sp,sp,8
 80045d0:	f800283a 	ret

080045d4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80045d4:	defffb04 	addi	sp,sp,-20
 80045d8:	dfc00415 	stw	ra,16(sp)
 80045dc:	df000315 	stw	fp,12(sp)
 80045e0:	df000304 	addi	fp,sp,12
 80045e4:	e13ffe15 	stw	r4,-8(fp)
 80045e8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 80045ec:	e0bfff17 	ldw	r2,-4(fp)
 80045f0:	1000011e 	bne	r2,zero,80045f8 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 80045f4:	00001406 	br	8004648 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80045f8:	e0bfff17 	ldw	r2,-4(fp)
 80045fc:	0080020e 	bge	zero,r2,8004608 <alt_up_character_lcd_shift_cursor+0x34>
 8004600:	00800504 	movi	r2,20
 8004604:	00000106 	br	800460c <alt_up_character_lcd_shift_cursor+0x38>
 8004608:	00800404 	movi	r2,16
 800460c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8004610:	e0bfff17 	ldw	r2,-4(fp)
 8004614:	1000010e 	bge	r2,zero,800461c <alt_up_character_lcd_shift_cursor+0x48>
 8004618:	0085c83a 	sub	r2,zero,r2
 800461c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8004620:	00000406 	br	8004634 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8004624:	e0bffd43 	ldbu	r2,-11(fp)
 8004628:	e13ffe17 	ldw	r4,-8(fp)
 800462c:	100b883a 	mov	r5,r2
 8004630:	80043740 	call	8004374 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8004634:	e0bffd03 	ldbu	r2,-12(fp)
 8004638:	10ffffc4 	addi	r3,r2,-1
 800463c:	e0fffd05 	stb	r3,-12(fp)
 8004640:	10803fcc 	andi	r2,r2,255
 8004644:	103ff71e 	bne	r2,zero,8004624 <__alt_data_end+0xfc004624>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8004648:	e037883a 	mov	sp,fp
 800464c:	dfc00117 	ldw	ra,4(sp)
 8004650:	df000017 	ldw	fp,0(sp)
 8004654:	dec00204 	addi	sp,sp,8
 8004658:	f800283a 	ret

0800465c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800465c:	defffb04 	addi	sp,sp,-20
 8004660:	dfc00415 	stw	ra,16(sp)
 8004664:	df000315 	stw	fp,12(sp)
 8004668:	df000304 	addi	fp,sp,12
 800466c:	e13ffe15 	stw	r4,-8(fp)
 8004670:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8004674:	e0bfff17 	ldw	r2,-4(fp)
 8004678:	1000011e 	bne	r2,zero,8004680 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800467c:	00001406 	br	80046d0 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8004680:	e0bfff17 	ldw	r2,-4(fp)
 8004684:	0080020e 	bge	zero,r2,8004690 <alt_up_character_lcd_shift_display+0x34>
 8004688:	00800704 	movi	r2,28
 800468c:	00000106 	br	8004694 <alt_up_character_lcd_shift_display+0x38>
 8004690:	00800604 	movi	r2,24
 8004694:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8004698:	e0bfff17 	ldw	r2,-4(fp)
 800469c:	1000010e 	bge	r2,zero,80046a4 <alt_up_character_lcd_shift_display+0x48>
 80046a0:	0085c83a 	sub	r2,zero,r2
 80046a4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80046a8:	00000406 	br	80046bc <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80046ac:	e0bffd43 	ldbu	r2,-11(fp)
 80046b0:	e13ffe17 	ldw	r4,-8(fp)
 80046b4:	100b883a 	mov	r5,r2
 80046b8:	80043740 	call	8004374 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80046bc:	e0bffd03 	ldbu	r2,-12(fp)
 80046c0:	10ffffc4 	addi	r3,r2,-1
 80046c4:	e0fffd05 	stb	r3,-12(fp)
 80046c8:	10803fcc 	andi	r2,r2,255
 80046cc:	103ff71e 	bne	r2,zero,80046ac <__alt_data_end+0xfc0046ac>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80046d0:	e037883a 	mov	sp,fp
 80046d4:	dfc00117 	ldw	ra,4(sp)
 80046d8:	df000017 	ldw	fp,0(sp)
 80046dc:	dec00204 	addi	sp,sp,8
 80046e0:	f800283a 	ret

080046e4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 80046e4:	defffa04 	addi	sp,sp,-24
 80046e8:	dfc00515 	stw	ra,20(sp)
 80046ec:	df000415 	stw	fp,16(sp)
 80046f0:	df000404 	addi	fp,sp,16
 80046f4:	e13ffd15 	stw	r4,-12(fp)
 80046f8:	e17ffe15 	stw	r5,-8(fp)
 80046fc:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8004700:	e0bffe17 	ldw	r2,-8(fp)
 8004704:	10800a28 	cmpgeui	r2,r2,40
 8004708:	1000031e 	bne	r2,zero,8004718 <alt_up_character_lcd_erase_pos+0x34>
 800470c:	e0bfff17 	ldw	r2,-4(fp)
 8004710:	108000b0 	cmpltui	r2,r2,2
 8004714:	1000021e 	bne	r2,zero,8004720 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8004718:	00bfffc4 	movi	r2,-1
 800471c:	00000f06 	br	800475c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8004720:	e13ffe17 	ldw	r4,-8(fp)
 8004724:	e17fff17 	ldw	r5,-4(fp)
 8004728:	80043000 	call	8004300 <get_DDRAM_addr>
 800472c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8004730:	e0bffc03 	ldbu	r2,-16(fp)
 8004734:	e13ffd17 	ldw	r4,-12(fp)
 8004738:	100b883a 	mov	r5,r2
 800473c:	80043740 	call	8004374 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8004740:	e0bffd17 	ldw	r2,-12(fp)
 8004744:	10800a17 	ldw	r2,40(r2)
 8004748:	10800044 	addi	r2,r2,1
 800474c:	1007883a 	mov	r3,r2
 8004750:	00800084 	movi	r2,2
 8004754:	18800025 	stbio	r2,0(r3)
	return 0;
 8004758:	0005883a 	mov	r2,zero
}
 800475c:	e037883a 	mov	sp,fp
 8004760:	dfc00117 	ldw	ra,4(sp)
 8004764:	df000017 	ldw	fp,0(sp)
 8004768:	dec00204 	addi	sp,sp,8
 800476c:	f800283a 	ret

08004770 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8004770:	defffd04 	addi	sp,sp,-12
 8004774:	dfc00215 	stw	ra,8(sp)
 8004778:	df000115 	stw	fp,4(sp)
 800477c:	df000104 	addi	fp,sp,4
 8004780:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8004784:	e13fff17 	ldw	r4,-4(fp)
 8004788:	01400304 	movi	r5,12
 800478c:	80043740 	call	8004374 <alt_up_character_lcd_send_cmd>
}
 8004790:	e037883a 	mov	sp,fp
 8004794:	dfc00117 	ldw	ra,4(sp)
 8004798:	df000017 	ldw	fp,0(sp)
 800479c:	dec00204 	addi	sp,sp,8
 80047a0:	f800283a 	ret

080047a4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 80047a4:	defffd04 	addi	sp,sp,-12
 80047a8:	dfc00215 	stw	ra,8(sp)
 80047ac:	df000115 	stw	fp,4(sp)
 80047b0:	df000104 	addi	fp,sp,4
 80047b4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 80047b8:	e13fff17 	ldw	r4,-4(fp)
 80047bc:	014003c4 	movi	r5,15
 80047c0:	80043740 	call	8004374 <alt_up_character_lcd_send_cmd>
}
 80047c4:	e037883a 	mov	sp,fp
 80047c8:	dfc00117 	ldw	ra,4(sp)
 80047cc:	df000017 	ldw	fp,0(sp)
 80047d0:	dec00204 	addi	sp,sp,8
 80047d4:	f800283a 	ret

080047d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80047d8:	defff504 	addi	sp,sp,-44
 80047dc:	df000a15 	stw	fp,40(sp)
 80047e0:	df000a04 	addi	fp,sp,40
 80047e4:	e13ffc15 	stw	r4,-16(fp)
 80047e8:	e17ffd15 	stw	r5,-12(fp)
 80047ec:	e1bffe15 	stw	r6,-8(fp)
 80047f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80047f4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80047f8:	00820074 	movhi	r2,2049
 80047fc:	10a3e204 	addi	r2,r2,-28792
 8004800:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8004804:	10003f26 	beq	r2,zero,8004904 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8004808:	e0bffc17 	ldw	r2,-16(fp)
 800480c:	10003b26 	beq	r2,zero,80048fc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8004810:	e0bffc17 	ldw	r2,-16(fp)
 8004814:	e0fffe17 	ldw	r3,-8(fp)
 8004818:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800481c:	e0bffc17 	ldw	r2,-16(fp)
 8004820:	e0ffff17 	ldw	r3,-4(fp)
 8004824:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004828:	0005303a 	rdctl	r2,status
 800482c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004830:	e0fff817 	ldw	r3,-32(fp)
 8004834:	00bfff84 	movi	r2,-2
 8004838:	1884703a 	and	r2,r3,r2
 800483c:	1001703a 	wrctl	status,r2
  
  return context;
 8004840:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8004844:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004848:	00820074 	movhi	r2,2049
 800484c:	10a3e304 	addi	r2,r2,-28788
 8004850:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8004854:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8004858:	e0fffd17 	ldw	r3,-12(fp)
 800485c:	e0bff617 	ldw	r2,-40(fp)
 8004860:	1885883a 	add	r2,r3,r2
 8004864:	10c00044 	addi	r3,r2,1
 8004868:	e0bffc17 	ldw	r2,-16(fp)
 800486c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8004870:	e0bffc17 	ldw	r2,-16(fp)
 8004874:	10c00217 	ldw	r3,8(r2)
 8004878:	e0bff617 	ldw	r2,-40(fp)
 800487c:	1880042e 	bgeu	r3,r2,8004890 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8004880:	e0bffc17 	ldw	r2,-16(fp)
 8004884:	00c00044 	movi	r3,1
 8004888:	10c00405 	stb	r3,16(r2)
 800488c:	00000206 	br	8004898 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8004890:	e0bffc17 	ldw	r2,-16(fp)
 8004894:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8004898:	e0fffc17 	ldw	r3,-16(fp)
 800489c:	00820034 	movhi	r2,2048
 80048a0:	109d3204 	addi	r2,r2,29896
 80048a4:	e0bff915 	stw	r2,-28(fp)
 80048a8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80048ac:	e0bffa17 	ldw	r2,-24(fp)
 80048b0:	e0fff917 	ldw	r3,-28(fp)
 80048b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80048b8:	e0bff917 	ldw	r2,-28(fp)
 80048bc:	10c00017 	ldw	r3,0(r2)
 80048c0:	e0bffa17 	ldw	r2,-24(fp)
 80048c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80048c8:	e0bff917 	ldw	r2,-28(fp)
 80048cc:	10800017 	ldw	r2,0(r2)
 80048d0:	e0fffa17 	ldw	r3,-24(fp)
 80048d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80048d8:	e0bff917 	ldw	r2,-28(fp)
 80048dc:	e0fffa17 	ldw	r3,-24(fp)
 80048e0:	10c00015 	stw	r3,0(r2)
 80048e4:	e0bff717 	ldw	r2,-36(fp)
 80048e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80048ec:	e0bffb17 	ldw	r2,-20(fp)
 80048f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80048f4:	0005883a 	mov	r2,zero
 80048f8:	00000306 	br	8004908 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 80048fc:	00bffa84 	movi	r2,-22
 8004900:	00000106 	br	8004908 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8004904:	00bfde84 	movi	r2,-134
  }
}
 8004908:	e037883a 	mov	sp,fp
 800490c:	df000017 	ldw	fp,0(sp)
 8004910:	dec00104 	addi	sp,sp,4
 8004914:	f800283a 	ret

08004918 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8004918:	deffff04 	addi	sp,sp,-4
 800491c:	df000015 	stw	fp,0(sp)
 8004920:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004924:	e037883a 	mov	sp,fp
 8004928:	df000017 	ldw	fp,0(sp)
 800492c:	dec00104 	addi	sp,sp,4
 8004930:	f800283a 	ret

08004934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004934:	defffe04 	addi	sp,sp,-8
 8004938:	dfc00115 	stw	ra,4(sp)
 800493c:	df000015 	stw	fp,0(sp)
 8004940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004944:	00820034 	movhi	r2,2048
 8004948:	109d2f04 	addi	r2,r2,29884
 800494c:	10800017 	ldw	r2,0(r2)
 8004950:	10000526 	beq	r2,zero,8004968 <alt_get_errno+0x34>
 8004954:	00820034 	movhi	r2,2048
 8004958:	109d2f04 	addi	r2,r2,29884
 800495c:	10800017 	ldw	r2,0(r2)
 8004960:	103ee83a 	callr	r2
 8004964:	00000206 	br	8004970 <alt_get_errno+0x3c>
 8004968:	00820074 	movhi	r2,2049
 800496c:	10a3dd04 	addi	r2,r2,-28812
}
 8004970:	e037883a 	mov	sp,fp
 8004974:	dfc00117 	ldw	ra,4(sp)
 8004978:	df000017 	ldw	fp,0(sp)
 800497c:	dec00204 	addi	sp,sp,8
 8004980:	f800283a 	ret

08004984 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8004984:	defffa04 	addi	sp,sp,-24
 8004988:	dfc00515 	stw	ra,20(sp)
 800498c:	df000415 	stw	fp,16(sp)
 8004990:	df000404 	addi	fp,sp,16
 8004994:	e13ffe15 	stw	r4,-8(fp)
 8004998:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800499c:	e0bffe17 	ldw	r2,-8(fp)
 80049a0:	10000326 	beq	r2,zero,80049b0 <alt_dev_llist_insert+0x2c>
 80049a4:	e0bffe17 	ldw	r2,-8(fp)
 80049a8:	10800217 	ldw	r2,8(r2)
 80049ac:	1000061e 	bne	r2,zero,80049c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80049b0:	80049340 	call	8004934 <alt_get_errno>
 80049b4:	1007883a 	mov	r3,r2
 80049b8:	00800584 	movi	r2,22
 80049bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80049c0:	00bffa84 	movi	r2,-22
 80049c4:	00001306 	br	8004a14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80049c8:	e0bffe17 	ldw	r2,-8(fp)
 80049cc:	e0ffff17 	ldw	r3,-4(fp)
 80049d0:	e0fffc15 	stw	r3,-16(fp)
 80049d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80049d8:	e0bffd17 	ldw	r2,-12(fp)
 80049dc:	e0fffc17 	ldw	r3,-16(fp)
 80049e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80049e4:	e0bffc17 	ldw	r2,-16(fp)
 80049e8:	10c00017 	ldw	r3,0(r2)
 80049ec:	e0bffd17 	ldw	r2,-12(fp)
 80049f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80049f4:	e0bffc17 	ldw	r2,-16(fp)
 80049f8:	10800017 	ldw	r2,0(r2)
 80049fc:	e0fffd17 	ldw	r3,-12(fp)
 8004a00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004a04:	e0bffc17 	ldw	r2,-16(fp)
 8004a08:	e0fffd17 	ldw	r3,-12(fp)
 8004a0c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8004a10:	0005883a 	mov	r2,zero
}
 8004a14:	e037883a 	mov	sp,fp
 8004a18:	dfc00117 	ldw	ra,4(sp)
 8004a1c:	df000017 	ldw	fp,0(sp)
 8004a20:	dec00204 	addi	sp,sp,8
 8004a24:	f800283a 	ret

08004a28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8004a28:	defffd04 	addi	sp,sp,-12
 8004a2c:	dfc00215 	stw	ra,8(sp)
 8004a30:	df000115 	stw	fp,4(sp)
 8004a34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004a38:	00820034 	movhi	r2,2048
 8004a3c:	10967304 	addi	r2,r2,22988
 8004a40:	e0bfff15 	stw	r2,-4(fp)
 8004a44:	00000606 	br	8004a60 <_do_ctors+0x38>
        (*ctor) (); 
 8004a48:	e0bfff17 	ldw	r2,-4(fp)
 8004a4c:	10800017 	ldw	r2,0(r2)
 8004a50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004a54:	e0bfff17 	ldw	r2,-4(fp)
 8004a58:	10bfff04 	addi	r2,r2,-4
 8004a5c:	e0bfff15 	stw	r2,-4(fp)
 8004a60:	e0ffff17 	ldw	r3,-4(fp)
 8004a64:	00820034 	movhi	r2,2048
 8004a68:	10967404 	addi	r2,r2,22992
 8004a6c:	18bff62e 	bgeu	r3,r2,8004a48 <__alt_data_end+0xfc004a48>
        (*ctor) (); 
}
 8004a70:	e037883a 	mov	sp,fp
 8004a74:	dfc00117 	ldw	ra,4(sp)
 8004a78:	df000017 	ldw	fp,0(sp)
 8004a7c:	dec00204 	addi	sp,sp,8
 8004a80:	f800283a 	ret

08004a84 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004a84:	defffd04 	addi	sp,sp,-12
 8004a88:	dfc00215 	stw	ra,8(sp)
 8004a8c:	df000115 	stw	fp,4(sp)
 8004a90:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004a94:	00820034 	movhi	r2,2048
 8004a98:	10967304 	addi	r2,r2,22988
 8004a9c:	e0bfff15 	stw	r2,-4(fp)
 8004aa0:	00000606 	br	8004abc <_do_dtors+0x38>
        (*dtor) (); 
 8004aa4:	e0bfff17 	ldw	r2,-4(fp)
 8004aa8:	10800017 	ldw	r2,0(r2)
 8004aac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004ab0:	e0bfff17 	ldw	r2,-4(fp)
 8004ab4:	10bfff04 	addi	r2,r2,-4
 8004ab8:	e0bfff15 	stw	r2,-4(fp)
 8004abc:	e0ffff17 	ldw	r3,-4(fp)
 8004ac0:	00820034 	movhi	r2,2048
 8004ac4:	10967404 	addi	r2,r2,22992
 8004ac8:	18bff62e 	bgeu	r3,r2,8004aa4 <__alt_data_end+0xfc004aa4>
        (*dtor) (); 
}
 8004acc:	e037883a 	mov	sp,fp
 8004ad0:	dfc00117 	ldw	ra,4(sp)
 8004ad4:	df000017 	ldw	fp,0(sp)
 8004ad8:	dec00204 	addi	sp,sp,8
 8004adc:	f800283a 	ret

08004ae0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004ae0:	defffa04 	addi	sp,sp,-24
 8004ae4:	dfc00515 	stw	ra,20(sp)
 8004ae8:	df000415 	stw	fp,16(sp)
 8004aec:	df000404 	addi	fp,sp,16
 8004af0:	e13ffe15 	stw	r4,-8(fp)
 8004af4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004af8:	e0bfff17 	ldw	r2,-4(fp)
 8004afc:	10800017 	ldw	r2,0(r2)
 8004b00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004b04:	e13ffe17 	ldw	r4,-8(fp)
 8004b08:	80002f80 	call	80002f8 <strlen>
 8004b0c:	10800044 	addi	r2,r2,1
 8004b10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004b14:	00000d06 	br	8004b4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004b18:	e0bffc17 	ldw	r2,-16(fp)
 8004b1c:	10c00217 	ldw	r3,8(r2)
 8004b20:	e0bffd17 	ldw	r2,-12(fp)
 8004b24:	1809883a 	mov	r4,r3
 8004b28:	e17ffe17 	ldw	r5,-8(fp)
 8004b2c:	100d883a 	mov	r6,r2
 8004b30:	80056780 	call	8005678 <memcmp>
 8004b34:	1000021e 	bne	r2,zero,8004b40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004b38:	e0bffc17 	ldw	r2,-16(fp)
 8004b3c:	00000706 	br	8004b5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004b40:	e0bffc17 	ldw	r2,-16(fp)
 8004b44:	10800017 	ldw	r2,0(r2)
 8004b48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004b4c:	e0fffc17 	ldw	r3,-16(fp)
 8004b50:	e0bfff17 	ldw	r2,-4(fp)
 8004b54:	18bff01e 	bne	r3,r2,8004b18 <__alt_data_end+0xfc004b18>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004b58:	0005883a 	mov	r2,zero
}
 8004b5c:	e037883a 	mov	sp,fp
 8004b60:	dfc00117 	ldw	ra,4(sp)
 8004b64:	df000017 	ldw	fp,0(sp)
 8004b68:	dec00204 	addi	sp,sp,8
 8004b6c:	f800283a 	ret

08004b70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8004b70:	defffe04 	addi	sp,sp,-8
 8004b74:	dfc00115 	stw	ra,4(sp)
 8004b78:	df000015 	stw	fp,0(sp)
 8004b7c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8004b80:	0009883a 	mov	r4,zero
 8004b84:	01440004 	movi	r5,4096
 8004b88:	80055a00 	call	80055a0 <alt_icache_flush>
#endif
}
 8004b8c:	e037883a 	mov	sp,fp
 8004b90:	dfc00117 	ldw	ra,4(sp)
 8004b94:	df000017 	ldw	fp,0(sp)
 8004b98:	dec00204 	addi	sp,sp,8
 8004b9c:	f800283a 	ret

08004ba0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004ba0:	defff904 	addi	sp,sp,-28
 8004ba4:	dfc00615 	stw	ra,24(sp)
 8004ba8:	df000515 	stw	fp,20(sp)
 8004bac:	df000504 	addi	fp,sp,20
 8004bb0:	e13ffc15 	stw	r4,-16(fp)
 8004bb4:	e17ffd15 	stw	r5,-12(fp)
 8004bb8:	e1bffe15 	stw	r6,-8(fp)
 8004bbc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8004bc0:	e0800217 	ldw	r2,8(fp)
 8004bc4:	d8800015 	stw	r2,0(sp)
 8004bc8:	e13ffc17 	ldw	r4,-16(fp)
 8004bcc:	e17ffd17 	ldw	r5,-12(fp)
 8004bd0:	e1bffe17 	ldw	r6,-8(fp)
 8004bd4:	e1ffff17 	ldw	r7,-4(fp)
 8004bd8:	8004d800 	call	8004d80 <alt_iic_isr_register>
}  
 8004bdc:	e037883a 	mov	sp,fp
 8004be0:	dfc00117 	ldw	ra,4(sp)
 8004be4:	df000017 	ldw	fp,0(sp)
 8004be8:	dec00204 	addi	sp,sp,8
 8004bec:	f800283a 	ret

08004bf0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8004bf0:	defff904 	addi	sp,sp,-28
 8004bf4:	df000615 	stw	fp,24(sp)
 8004bf8:	df000604 	addi	fp,sp,24
 8004bfc:	e13ffe15 	stw	r4,-8(fp)
 8004c00:	e17fff15 	stw	r5,-4(fp)
 8004c04:	e0bfff17 	ldw	r2,-4(fp)
 8004c08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c0c:	0005303a 	rdctl	r2,status
 8004c10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c14:	e0fffb17 	ldw	r3,-20(fp)
 8004c18:	00bfff84 	movi	r2,-2
 8004c1c:	1884703a 	and	r2,r3,r2
 8004c20:	1001703a 	wrctl	status,r2
  
  return context;
 8004c24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004c28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8004c2c:	e0bffa17 	ldw	r2,-24(fp)
 8004c30:	00c00044 	movi	r3,1
 8004c34:	1884983a 	sll	r2,r3,r2
 8004c38:	1007883a 	mov	r3,r2
 8004c3c:	00820074 	movhi	r2,2049
 8004c40:	10a3e104 	addi	r2,r2,-28796
 8004c44:	10800017 	ldw	r2,0(r2)
 8004c48:	1886b03a 	or	r3,r3,r2
 8004c4c:	00820074 	movhi	r2,2049
 8004c50:	10a3e104 	addi	r2,r2,-28796
 8004c54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004c58:	00820074 	movhi	r2,2049
 8004c5c:	10a3e104 	addi	r2,r2,-28796
 8004c60:	10800017 	ldw	r2,0(r2)
 8004c64:	100170fa 	wrctl	ienable,r2
 8004c68:	e0bffc17 	ldw	r2,-16(fp)
 8004c6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004c70:	e0bffd17 	ldw	r2,-12(fp)
 8004c74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004c78:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8004c7c:	0001883a 	nop
}
 8004c80:	e037883a 	mov	sp,fp
 8004c84:	df000017 	ldw	fp,0(sp)
 8004c88:	dec00104 	addi	sp,sp,4
 8004c8c:	f800283a 	ret

08004c90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8004c90:	defff904 	addi	sp,sp,-28
 8004c94:	df000615 	stw	fp,24(sp)
 8004c98:	df000604 	addi	fp,sp,24
 8004c9c:	e13ffe15 	stw	r4,-8(fp)
 8004ca0:	e17fff15 	stw	r5,-4(fp)
 8004ca4:	e0bfff17 	ldw	r2,-4(fp)
 8004ca8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004cac:	0005303a 	rdctl	r2,status
 8004cb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004cb4:	e0fffb17 	ldw	r3,-20(fp)
 8004cb8:	00bfff84 	movi	r2,-2
 8004cbc:	1884703a 	and	r2,r3,r2
 8004cc0:	1001703a 	wrctl	status,r2
  
  return context;
 8004cc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004cc8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8004ccc:	e0bffa17 	ldw	r2,-24(fp)
 8004cd0:	00c00044 	movi	r3,1
 8004cd4:	1884983a 	sll	r2,r3,r2
 8004cd8:	0084303a 	nor	r2,zero,r2
 8004cdc:	1007883a 	mov	r3,r2
 8004ce0:	00820074 	movhi	r2,2049
 8004ce4:	10a3e104 	addi	r2,r2,-28796
 8004ce8:	10800017 	ldw	r2,0(r2)
 8004cec:	1886703a 	and	r3,r3,r2
 8004cf0:	00820074 	movhi	r2,2049
 8004cf4:	10a3e104 	addi	r2,r2,-28796
 8004cf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004cfc:	00820074 	movhi	r2,2049
 8004d00:	10a3e104 	addi	r2,r2,-28796
 8004d04:	10800017 	ldw	r2,0(r2)
 8004d08:	100170fa 	wrctl	ienable,r2
 8004d0c:	e0bffc17 	ldw	r2,-16(fp)
 8004d10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004d14:	e0bffd17 	ldw	r2,-12(fp)
 8004d18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004d1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8004d20:	0001883a 	nop
}
 8004d24:	e037883a 	mov	sp,fp
 8004d28:	df000017 	ldw	fp,0(sp)
 8004d2c:	dec00104 	addi	sp,sp,4
 8004d30:	f800283a 	ret

08004d34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8004d34:	defffc04 	addi	sp,sp,-16
 8004d38:	df000315 	stw	fp,12(sp)
 8004d3c:	df000304 	addi	fp,sp,12
 8004d40:	e13ffe15 	stw	r4,-8(fp)
 8004d44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8004d48:	000530fa 	rdctl	r2,ienable
 8004d4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8004d50:	e0bfff17 	ldw	r2,-4(fp)
 8004d54:	00c00044 	movi	r3,1
 8004d58:	1884983a 	sll	r2,r3,r2
 8004d5c:	1007883a 	mov	r3,r2
 8004d60:	e0bffd17 	ldw	r2,-12(fp)
 8004d64:	1884703a 	and	r2,r3,r2
 8004d68:	1004c03a 	cmpne	r2,r2,zero
 8004d6c:	10803fcc 	andi	r2,r2,255
}
 8004d70:	e037883a 	mov	sp,fp
 8004d74:	df000017 	ldw	fp,0(sp)
 8004d78:	dec00104 	addi	sp,sp,4
 8004d7c:	f800283a 	ret

08004d80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004d80:	defff504 	addi	sp,sp,-44
 8004d84:	dfc00a15 	stw	ra,40(sp)
 8004d88:	df000915 	stw	fp,36(sp)
 8004d8c:	df000904 	addi	fp,sp,36
 8004d90:	e13ffc15 	stw	r4,-16(fp)
 8004d94:	e17ffd15 	stw	r5,-12(fp)
 8004d98:	e1bffe15 	stw	r6,-8(fp)
 8004d9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8004da0:	00bffa84 	movi	r2,-22
 8004da4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8004da8:	e0bffd17 	ldw	r2,-12(fp)
 8004dac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8004db0:	e0bff817 	ldw	r2,-32(fp)
 8004db4:	10800808 	cmpgei	r2,r2,32
 8004db8:	1000271e 	bne	r2,zero,8004e58 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004dbc:	0005303a 	rdctl	r2,status
 8004dc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004dc4:	e0fffa17 	ldw	r3,-24(fp)
 8004dc8:	00bfff84 	movi	r2,-2
 8004dcc:	1884703a 	and	r2,r3,r2
 8004dd0:	1001703a 	wrctl	status,r2
  
  return context;
 8004dd4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8004dd8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8004ddc:	00820074 	movhi	r2,2049
 8004de0:	10a3ee04 	addi	r2,r2,-28744
 8004de4:	e0fff817 	ldw	r3,-32(fp)
 8004de8:	180690fa 	slli	r3,r3,3
 8004dec:	10c5883a 	add	r2,r2,r3
 8004df0:	e0fffe17 	ldw	r3,-8(fp)
 8004df4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8004df8:	00820074 	movhi	r2,2049
 8004dfc:	10a3ee04 	addi	r2,r2,-28744
 8004e00:	e0fff817 	ldw	r3,-32(fp)
 8004e04:	180690fa 	slli	r3,r3,3
 8004e08:	10c5883a 	add	r2,r2,r3
 8004e0c:	10800104 	addi	r2,r2,4
 8004e10:	e0ffff17 	ldw	r3,-4(fp)
 8004e14:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8004e18:	e0bffe17 	ldw	r2,-8(fp)
 8004e1c:	10000526 	beq	r2,zero,8004e34 <alt_iic_isr_register+0xb4>
 8004e20:	e0bff817 	ldw	r2,-32(fp)
 8004e24:	e13ffc17 	ldw	r4,-16(fp)
 8004e28:	100b883a 	mov	r5,r2
 8004e2c:	8004bf00 	call	8004bf0 <alt_ic_irq_enable>
 8004e30:	00000406 	br	8004e44 <alt_iic_isr_register+0xc4>
 8004e34:	e0bff817 	ldw	r2,-32(fp)
 8004e38:	e13ffc17 	ldw	r4,-16(fp)
 8004e3c:	100b883a 	mov	r5,r2
 8004e40:	8004c900 	call	8004c90 <alt_ic_irq_disable>
 8004e44:	e0bff715 	stw	r2,-36(fp)
 8004e48:	e0bff917 	ldw	r2,-28(fp)
 8004e4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004e50:	e0bffb17 	ldw	r2,-20(fp)
 8004e54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8004e58:	e0bff717 	ldw	r2,-36(fp)
}
 8004e5c:	e037883a 	mov	sp,fp
 8004e60:	dfc00117 	ldw	ra,4(sp)
 8004e64:	df000017 	ldw	fp,0(sp)
 8004e68:	dec00204 	addi	sp,sp,8
 8004e6c:	f800283a 	ret

08004e70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8004e70:	defff904 	addi	sp,sp,-28
 8004e74:	dfc00615 	stw	ra,24(sp)
 8004e78:	df000515 	stw	fp,20(sp)
 8004e7c:	df000504 	addi	fp,sp,20
 8004e80:	e13ffc15 	stw	r4,-16(fp)
 8004e84:	e17ffd15 	stw	r5,-12(fp)
 8004e88:	e1bffe15 	stw	r6,-8(fp)
 8004e8c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8004e90:	e13ffd17 	ldw	r4,-12(fp)
 8004e94:	e17ffe17 	ldw	r5,-8(fp)
 8004e98:	e1bfff17 	ldw	r6,-4(fp)
 8004e9c:	80050c40 	call	80050c4 <open>
 8004ea0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8004ea4:	e0bffb17 	ldw	r2,-20(fp)
 8004ea8:	10001c16 	blt	r2,zero,8004f1c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8004eac:	00820034 	movhi	r2,2048
 8004eb0:	1098a304 	addi	r2,r2,25228
 8004eb4:	e0fffb17 	ldw	r3,-20(fp)
 8004eb8:	18c00324 	muli	r3,r3,12
 8004ebc:	10c5883a 	add	r2,r2,r3
 8004ec0:	10c00017 	ldw	r3,0(r2)
 8004ec4:	e0bffc17 	ldw	r2,-16(fp)
 8004ec8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8004ecc:	00820034 	movhi	r2,2048
 8004ed0:	1098a304 	addi	r2,r2,25228
 8004ed4:	e0fffb17 	ldw	r3,-20(fp)
 8004ed8:	18c00324 	muli	r3,r3,12
 8004edc:	10c5883a 	add	r2,r2,r3
 8004ee0:	10800104 	addi	r2,r2,4
 8004ee4:	10c00017 	ldw	r3,0(r2)
 8004ee8:	e0bffc17 	ldw	r2,-16(fp)
 8004eec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8004ef0:	00820034 	movhi	r2,2048
 8004ef4:	1098a304 	addi	r2,r2,25228
 8004ef8:	e0fffb17 	ldw	r3,-20(fp)
 8004efc:	18c00324 	muli	r3,r3,12
 8004f00:	10c5883a 	add	r2,r2,r3
 8004f04:	10800204 	addi	r2,r2,8
 8004f08:	10c00017 	ldw	r3,0(r2)
 8004f0c:	e0bffc17 	ldw	r2,-16(fp)
 8004f10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8004f14:	e13ffb17 	ldw	r4,-20(fp)
 8004f18:	80034840 	call	8003484 <alt_release_fd>
  }
} 
 8004f1c:	e037883a 	mov	sp,fp
 8004f20:	dfc00117 	ldw	ra,4(sp)
 8004f24:	df000017 	ldw	fp,0(sp)
 8004f28:	dec00204 	addi	sp,sp,8
 8004f2c:	f800283a 	ret

08004f30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8004f30:	defffb04 	addi	sp,sp,-20
 8004f34:	dfc00415 	stw	ra,16(sp)
 8004f38:	df000315 	stw	fp,12(sp)
 8004f3c:	df000304 	addi	fp,sp,12
 8004f40:	e13ffd15 	stw	r4,-12(fp)
 8004f44:	e17ffe15 	stw	r5,-8(fp)
 8004f48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8004f4c:	01020034 	movhi	r4,2048
 8004f50:	2118a604 	addi	r4,r4,25240
 8004f54:	e17ffd17 	ldw	r5,-12(fp)
 8004f58:	01800044 	movi	r6,1
 8004f5c:	01c07fc4 	movi	r7,511
 8004f60:	8004e700 	call	8004e70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8004f64:	01020034 	movhi	r4,2048
 8004f68:	2118a304 	addi	r4,r4,25228
 8004f6c:	e17ffe17 	ldw	r5,-8(fp)
 8004f70:	000d883a 	mov	r6,zero
 8004f74:	01c07fc4 	movi	r7,511
 8004f78:	8004e700 	call	8004e70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8004f7c:	01020034 	movhi	r4,2048
 8004f80:	2118a904 	addi	r4,r4,25252
 8004f84:	e17fff17 	ldw	r5,-4(fp)
 8004f88:	01800044 	movi	r6,1
 8004f8c:	01c07fc4 	movi	r7,511
 8004f90:	8004e700 	call	8004e70 <alt_open_fd>
}  
 8004f94:	e037883a 	mov	sp,fp
 8004f98:	dfc00117 	ldw	ra,4(sp)
 8004f9c:	df000017 	ldw	fp,0(sp)
 8004fa0:	dec00204 	addi	sp,sp,8
 8004fa4:	f800283a 	ret

08004fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004fa8:	defffe04 	addi	sp,sp,-8
 8004fac:	dfc00115 	stw	ra,4(sp)
 8004fb0:	df000015 	stw	fp,0(sp)
 8004fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004fb8:	00820034 	movhi	r2,2048
 8004fbc:	109d2f04 	addi	r2,r2,29884
 8004fc0:	10800017 	ldw	r2,0(r2)
 8004fc4:	10000526 	beq	r2,zero,8004fdc <alt_get_errno+0x34>
 8004fc8:	00820034 	movhi	r2,2048
 8004fcc:	109d2f04 	addi	r2,r2,29884
 8004fd0:	10800017 	ldw	r2,0(r2)
 8004fd4:	103ee83a 	callr	r2
 8004fd8:	00000206 	br	8004fe4 <alt_get_errno+0x3c>
 8004fdc:	00820074 	movhi	r2,2049
 8004fe0:	10a3dd04 	addi	r2,r2,-28812
}
 8004fe4:	e037883a 	mov	sp,fp
 8004fe8:	dfc00117 	ldw	ra,4(sp)
 8004fec:	df000017 	ldw	fp,0(sp)
 8004ff0:	dec00204 	addi	sp,sp,8
 8004ff4:	f800283a 	ret

08004ff8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8004ff8:	defffd04 	addi	sp,sp,-12
 8004ffc:	df000215 	stw	fp,8(sp)
 8005000:	df000204 	addi	fp,sp,8
 8005004:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8005008:	e0bfff17 	ldw	r2,-4(fp)
 800500c:	10800217 	ldw	r2,8(r2)
 8005010:	10d00034 	orhi	r3,r2,16384
 8005014:	e0bfff17 	ldw	r2,-4(fp)
 8005018:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800501c:	e03ffe15 	stw	zero,-8(fp)
 8005020:	00001d06 	br	8005098 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005024:	00820034 	movhi	r2,2048
 8005028:	1098a304 	addi	r2,r2,25228
 800502c:	e0fffe17 	ldw	r3,-8(fp)
 8005030:	18c00324 	muli	r3,r3,12
 8005034:	10c5883a 	add	r2,r2,r3
 8005038:	10c00017 	ldw	r3,0(r2)
 800503c:	e0bfff17 	ldw	r2,-4(fp)
 8005040:	10800017 	ldw	r2,0(r2)
 8005044:	1880111e 	bne	r3,r2,800508c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005048:	00820034 	movhi	r2,2048
 800504c:	1098a304 	addi	r2,r2,25228
 8005050:	e0fffe17 	ldw	r3,-8(fp)
 8005054:	18c00324 	muli	r3,r3,12
 8005058:	10c5883a 	add	r2,r2,r3
 800505c:	10800204 	addi	r2,r2,8
 8005060:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005064:	1000090e 	bge	r2,zero,800508c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8005068:	e0bffe17 	ldw	r2,-8(fp)
 800506c:	10c00324 	muli	r3,r2,12
 8005070:	00820034 	movhi	r2,2048
 8005074:	1098a304 	addi	r2,r2,25228
 8005078:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800507c:	e0bfff17 	ldw	r2,-4(fp)
 8005080:	18800226 	beq	r3,r2,800508c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8005084:	00bffcc4 	movi	r2,-13
 8005088:	00000a06 	br	80050b4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800508c:	e0bffe17 	ldw	r2,-8(fp)
 8005090:	10800044 	addi	r2,r2,1
 8005094:	e0bffe15 	stw	r2,-8(fp)
 8005098:	00820034 	movhi	r2,2048
 800509c:	109d2e04 	addi	r2,r2,29880
 80050a0:	10800017 	ldw	r2,0(r2)
 80050a4:	1007883a 	mov	r3,r2
 80050a8:	e0bffe17 	ldw	r2,-8(fp)
 80050ac:	18bfdd2e 	bgeu	r3,r2,8005024 <__alt_data_end+0xfc005024>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80050b0:	0005883a 	mov	r2,zero
}
 80050b4:	e037883a 	mov	sp,fp
 80050b8:	df000017 	ldw	fp,0(sp)
 80050bc:	dec00104 	addi	sp,sp,4
 80050c0:	f800283a 	ret

080050c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80050c4:	defff604 	addi	sp,sp,-40
 80050c8:	dfc00915 	stw	ra,36(sp)
 80050cc:	df000815 	stw	fp,32(sp)
 80050d0:	df000804 	addi	fp,sp,32
 80050d4:	e13ffd15 	stw	r4,-12(fp)
 80050d8:	e17ffe15 	stw	r5,-8(fp)
 80050dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80050e0:	00bfffc4 	movi	r2,-1
 80050e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80050e8:	00bffb44 	movi	r2,-19
 80050ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80050f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80050f4:	e13ffd17 	ldw	r4,-12(fp)
 80050f8:	01420034 	movhi	r5,2048
 80050fc:	295d2c04 	addi	r5,r5,29872
 8005100:	8004ae00 	call	8004ae0 <alt_find_dev>
 8005104:	e0bff815 	stw	r2,-32(fp)
 8005108:	e0bff817 	ldw	r2,-32(fp)
 800510c:	1000051e 	bne	r2,zero,8005124 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8005110:	e13ffd17 	ldw	r4,-12(fp)
 8005114:	80053d80 	call	80053d8 <alt_find_file>
 8005118:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800511c:	00800044 	movi	r2,1
 8005120:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8005124:	e0bff817 	ldw	r2,-32(fp)
 8005128:	10002926 	beq	r2,zero,80051d0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800512c:	e13ff817 	ldw	r4,-32(fp)
 8005130:	80054ec0 	call	80054ec <alt_get_fd>
 8005134:	e0bff915 	stw	r2,-28(fp)
 8005138:	e0bff917 	ldw	r2,-28(fp)
 800513c:	1000030e 	bge	r2,zero,800514c <open+0x88>
    {
      status = index;
 8005140:	e0bff917 	ldw	r2,-28(fp)
 8005144:	e0bffa15 	stw	r2,-24(fp)
 8005148:	00002306 	br	80051d8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 800514c:	e0bff917 	ldw	r2,-28(fp)
 8005150:	10c00324 	muli	r3,r2,12
 8005154:	00820034 	movhi	r2,2048
 8005158:	1098a304 	addi	r2,r2,25228
 800515c:	1885883a 	add	r2,r3,r2
 8005160:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8005164:	e0fffe17 	ldw	r3,-8(fp)
 8005168:	00900034 	movhi	r2,16384
 800516c:	10bfffc4 	addi	r2,r2,-1
 8005170:	1886703a 	and	r3,r3,r2
 8005174:	e0bffc17 	ldw	r2,-16(fp)
 8005178:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800517c:	e0bffb17 	ldw	r2,-20(fp)
 8005180:	1000051e 	bne	r2,zero,8005198 <open+0xd4>
 8005184:	e13ffc17 	ldw	r4,-16(fp)
 8005188:	8004ff80 	call	8004ff8 <alt_file_locked>
 800518c:	e0bffa15 	stw	r2,-24(fp)
 8005190:	e0bffa17 	ldw	r2,-24(fp)
 8005194:	10001016 	blt	r2,zero,80051d8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8005198:	e0bff817 	ldw	r2,-32(fp)
 800519c:	10800317 	ldw	r2,12(r2)
 80051a0:	10000826 	beq	r2,zero,80051c4 <open+0x100>
 80051a4:	e0bff817 	ldw	r2,-32(fp)
 80051a8:	10800317 	ldw	r2,12(r2)
 80051ac:	e13ffc17 	ldw	r4,-16(fp)
 80051b0:	e17ffd17 	ldw	r5,-12(fp)
 80051b4:	e1bffe17 	ldw	r6,-8(fp)
 80051b8:	e1ffff17 	ldw	r7,-4(fp)
 80051bc:	103ee83a 	callr	r2
 80051c0:	00000106 	br	80051c8 <open+0x104>
 80051c4:	0005883a 	mov	r2,zero
 80051c8:	e0bffa15 	stw	r2,-24(fp)
 80051cc:	00000206 	br	80051d8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80051d0:	00bffb44 	movi	r2,-19
 80051d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80051d8:	e0bffa17 	ldw	r2,-24(fp)
 80051dc:	1000090e 	bge	r2,zero,8005204 <open+0x140>
  {
    alt_release_fd (index);  
 80051e0:	e13ff917 	ldw	r4,-28(fp)
 80051e4:	80034840 	call	8003484 <alt_release_fd>
    ALT_ERRNO = -status;
 80051e8:	8004fa80 	call	8004fa8 <alt_get_errno>
 80051ec:	1007883a 	mov	r3,r2
 80051f0:	e0bffa17 	ldw	r2,-24(fp)
 80051f4:	0085c83a 	sub	r2,zero,r2
 80051f8:	18800015 	stw	r2,0(r3)
    return -1;
 80051fc:	00bfffc4 	movi	r2,-1
 8005200:	00000106 	br	8005208 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8005204:	e0bff917 	ldw	r2,-28(fp)
}
 8005208:	e037883a 	mov	sp,fp
 800520c:	dfc00117 	ldw	ra,4(sp)
 8005210:	df000017 	ldw	fp,0(sp)
 8005214:	dec00204 	addi	sp,sp,8
 8005218:	f800283a 	ret

0800521c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800521c:	defffa04 	addi	sp,sp,-24
 8005220:	df000515 	stw	fp,20(sp)
 8005224:	df000504 	addi	fp,sp,20
 8005228:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800522c:	0005303a 	rdctl	r2,status
 8005230:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005234:	e0fffc17 	ldw	r3,-16(fp)
 8005238:	00bfff84 	movi	r2,-2
 800523c:	1884703a 	and	r2,r3,r2
 8005240:	1001703a 	wrctl	status,r2
  
  return context;
 8005244:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8005248:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800524c:	e0bfff17 	ldw	r2,-4(fp)
 8005250:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8005254:	e0bffd17 	ldw	r2,-12(fp)
 8005258:	10800017 	ldw	r2,0(r2)
 800525c:	e0fffd17 	ldw	r3,-12(fp)
 8005260:	18c00117 	ldw	r3,4(r3)
 8005264:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8005268:	e0bffd17 	ldw	r2,-12(fp)
 800526c:	10800117 	ldw	r2,4(r2)
 8005270:	e0fffd17 	ldw	r3,-12(fp)
 8005274:	18c00017 	ldw	r3,0(r3)
 8005278:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800527c:	e0bffd17 	ldw	r2,-12(fp)
 8005280:	e0fffd17 	ldw	r3,-12(fp)
 8005284:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8005288:	e0bffd17 	ldw	r2,-12(fp)
 800528c:	e0fffd17 	ldw	r3,-12(fp)
 8005290:	10c00015 	stw	r3,0(r2)
 8005294:	e0bffb17 	ldw	r2,-20(fp)
 8005298:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800529c:	e0bffe17 	ldw	r2,-8(fp)
 80052a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80052a4:	e037883a 	mov	sp,fp
 80052a8:	df000017 	ldw	fp,0(sp)
 80052ac:	dec00104 	addi	sp,sp,4
 80052b0:	f800283a 	ret

080052b4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80052b4:	defffb04 	addi	sp,sp,-20
 80052b8:	dfc00415 	stw	ra,16(sp)
 80052bc:	df000315 	stw	fp,12(sp)
 80052c0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80052c4:	d0a00c17 	ldw	r2,-32720(gp)
 80052c8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80052cc:	d0a6bd17 	ldw	r2,-25868(gp)
 80052d0:	10800044 	addi	r2,r2,1
 80052d4:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80052d8:	00002e06 	br	8005394 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80052dc:	e0bffd17 	ldw	r2,-12(fp)
 80052e0:	10800017 	ldw	r2,0(r2)
 80052e4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80052e8:	e0bffd17 	ldw	r2,-12(fp)
 80052ec:	10800403 	ldbu	r2,16(r2)
 80052f0:	10803fcc 	andi	r2,r2,255
 80052f4:	10000426 	beq	r2,zero,8005308 <alt_tick+0x54>
 80052f8:	d0a6bd17 	ldw	r2,-25868(gp)
 80052fc:	1000021e 	bne	r2,zero,8005308 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8005300:	e0bffd17 	ldw	r2,-12(fp)
 8005304:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8005308:	e0bffd17 	ldw	r2,-12(fp)
 800530c:	10800217 	ldw	r2,8(r2)
 8005310:	d0e6bd17 	ldw	r3,-25868(gp)
 8005314:	18801d36 	bltu	r3,r2,800538c <alt_tick+0xd8>
 8005318:	e0bffd17 	ldw	r2,-12(fp)
 800531c:	10800403 	ldbu	r2,16(r2)
 8005320:	10803fcc 	andi	r2,r2,255
 8005324:	1000191e 	bne	r2,zero,800538c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8005328:	e0bffd17 	ldw	r2,-12(fp)
 800532c:	10800317 	ldw	r2,12(r2)
 8005330:	e0fffd17 	ldw	r3,-12(fp)
 8005334:	18c00517 	ldw	r3,20(r3)
 8005338:	1809883a 	mov	r4,r3
 800533c:	103ee83a 	callr	r2
 8005340:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8005344:	e0bfff17 	ldw	r2,-4(fp)
 8005348:	1000031e 	bne	r2,zero,8005358 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800534c:	e13ffd17 	ldw	r4,-12(fp)
 8005350:	800521c0 	call	800521c <alt_alarm_stop>
 8005354:	00000d06 	br	800538c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8005358:	e0bffd17 	ldw	r2,-12(fp)
 800535c:	10c00217 	ldw	r3,8(r2)
 8005360:	e0bfff17 	ldw	r2,-4(fp)
 8005364:	1887883a 	add	r3,r3,r2
 8005368:	e0bffd17 	ldw	r2,-12(fp)
 800536c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8005370:	e0bffd17 	ldw	r2,-12(fp)
 8005374:	10c00217 	ldw	r3,8(r2)
 8005378:	d0a6bd17 	ldw	r2,-25868(gp)
 800537c:	1880032e 	bgeu	r3,r2,800538c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8005380:	e0bffd17 	ldw	r2,-12(fp)
 8005384:	00c00044 	movi	r3,1
 8005388:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800538c:	e0bffe17 	ldw	r2,-8(fp)
 8005390:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8005394:	e0fffd17 	ldw	r3,-12(fp)
 8005398:	d0a00c04 	addi	r2,gp,-32720
 800539c:	18bfcf1e 	bne	r3,r2,80052dc <__alt_data_end+0xfc0052dc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80053a0:	0001883a 	nop
}
 80053a4:	e037883a 	mov	sp,fp
 80053a8:	dfc00117 	ldw	ra,4(sp)
 80053ac:	df000017 	ldw	fp,0(sp)
 80053b0:	dec00204 	addi	sp,sp,8
 80053b4:	f800283a 	ret

080053b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80053b8:	deffff04 	addi	sp,sp,-4
 80053bc:	df000015 	stw	fp,0(sp)
 80053c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80053c4:	000170fa 	wrctl	ienable,zero
}
 80053c8:	e037883a 	mov	sp,fp
 80053cc:	df000017 	ldw	fp,0(sp)
 80053d0:	dec00104 	addi	sp,sp,4
 80053d4:	f800283a 	ret

080053d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80053d8:	defffb04 	addi	sp,sp,-20
 80053dc:	dfc00415 	stw	ra,16(sp)
 80053e0:	df000315 	stw	fp,12(sp)
 80053e4:	df000304 	addi	fp,sp,12
 80053e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80053ec:	00820034 	movhi	r2,2048
 80053f0:	109d2a04 	addi	r2,r2,29864
 80053f4:	10800017 	ldw	r2,0(r2)
 80053f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80053fc:	00003106 	br	80054c4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8005400:	e0bffd17 	ldw	r2,-12(fp)
 8005404:	10800217 	ldw	r2,8(r2)
 8005408:	1009883a 	mov	r4,r2
 800540c:	80002f80 	call	80002f8 <strlen>
 8005410:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8005414:	e0bffd17 	ldw	r2,-12(fp)
 8005418:	10c00217 	ldw	r3,8(r2)
 800541c:	e0bffe17 	ldw	r2,-8(fp)
 8005420:	10bfffc4 	addi	r2,r2,-1
 8005424:	1885883a 	add	r2,r3,r2
 8005428:	10800003 	ldbu	r2,0(r2)
 800542c:	10803fcc 	andi	r2,r2,255
 8005430:	1080201c 	xori	r2,r2,128
 8005434:	10bfe004 	addi	r2,r2,-128
 8005438:	10800bd8 	cmpnei	r2,r2,47
 800543c:	1000031e 	bne	r2,zero,800544c <alt_find_file+0x74>
    {
      len -= 1;
 8005440:	e0bffe17 	ldw	r2,-8(fp)
 8005444:	10bfffc4 	addi	r2,r2,-1
 8005448:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800544c:	e0bffe17 	ldw	r2,-8(fp)
 8005450:	e0ffff17 	ldw	r3,-4(fp)
 8005454:	1885883a 	add	r2,r3,r2
 8005458:	10800003 	ldbu	r2,0(r2)
 800545c:	10803fcc 	andi	r2,r2,255
 8005460:	1080201c 	xori	r2,r2,128
 8005464:	10bfe004 	addi	r2,r2,-128
 8005468:	10800be0 	cmpeqi	r2,r2,47
 800546c:	1000081e 	bne	r2,zero,8005490 <alt_find_file+0xb8>
 8005470:	e0bffe17 	ldw	r2,-8(fp)
 8005474:	e0ffff17 	ldw	r3,-4(fp)
 8005478:	1885883a 	add	r2,r3,r2
 800547c:	10800003 	ldbu	r2,0(r2)
 8005480:	10803fcc 	andi	r2,r2,255
 8005484:	1080201c 	xori	r2,r2,128
 8005488:	10bfe004 	addi	r2,r2,-128
 800548c:	10000a1e 	bne	r2,zero,80054b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8005490:	e0bffd17 	ldw	r2,-12(fp)
 8005494:	10c00217 	ldw	r3,8(r2)
 8005498:	e0bffe17 	ldw	r2,-8(fp)
 800549c:	1809883a 	mov	r4,r3
 80054a0:	e17fff17 	ldw	r5,-4(fp)
 80054a4:	100d883a 	mov	r6,r2
 80054a8:	80056780 	call	8005678 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80054ac:	1000021e 	bne	r2,zero,80054b8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80054b0:	e0bffd17 	ldw	r2,-12(fp)
 80054b4:	00000806 	br	80054d8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80054b8:	e0bffd17 	ldw	r2,-12(fp)
 80054bc:	10800017 	ldw	r2,0(r2)
 80054c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80054c4:	e0fffd17 	ldw	r3,-12(fp)
 80054c8:	00820034 	movhi	r2,2048
 80054cc:	109d2a04 	addi	r2,r2,29864
 80054d0:	18bfcb1e 	bne	r3,r2,8005400 <__alt_data_end+0xfc005400>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80054d4:	0005883a 	mov	r2,zero
}
 80054d8:	e037883a 	mov	sp,fp
 80054dc:	dfc00117 	ldw	ra,4(sp)
 80054e0:	df000017 	ldw	fp,0(sp)
 80054e4:	dec00204 	addi	sp,sp,8
 80054e8:	f800283a 	ret

080054ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80054ec:	defffc04 	addi	sp,sp,-16
 80054f0:	df000315 	stw	fp,12(sp)
 80054f4:	df000304 	addi	fp,sp,12
 80054f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80054fc:	00bffa04 	movi	r2,-24
 8005500:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005504:	e03ffd15 	stw	zero,-12(fp)
 8005508:	00001d06 	br	8005580 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800550c:	00820034 	movhi	r2,2048
 8005510:	1098a304 	addi	r2,r2,25228
 8005514:	e0fffd17 	ldw	r3,-12(fp)
 8005518:	18c00324 	muli	r3,r3,12
 800551c:	10c5883a 	add	r2,r2,r3
 8005520:	10800017 	ldw	r2,0(r2)
 8005524:	1000131e 	bne	r2,zero,8005574 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8005528:	00820034 	movhi	r2,2048
 800552c:	1098a304 	addi	r2,r2,25228
 8005530:	e0fffd17 	ldw	r3,-12(fp)
 8005534:	18c00324 	muli	r3,r3,12
 8005538:	10c5883a 	add	r2,r2,r3
 800553c:	e0ffff17 	ldw	r3,-4(fp)
 8005540:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8005544:	00820034 	movhi	r2,2048
 8005548:	109d2e04 	addi	r2,r2,29880
 800554c:	10c00017 	ldw	r3,0(r2)
 8005550:	e0bffd17 	ldw	r2,-12(fp)
 8005554:	1880040e 	bge	r3,r2,8005568 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8005558:	00820034 	movhi	r2,2048
 800555c:	109d2e04 	addi	r2,r2,29880
 8005560:	e0fffd17 	ldw	r3,-12(fp)
 8005564:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8005568:	e0bffd17 	ldw	r2,-12(fp)
 800556c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8005570:	00000606 	br	800558c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005574:	e0bffd17 	ldw	r2,-12(fp)
 8005578:	10800044 	addi	r2,r2,1
 800557c:	e0bffd15 	stw	r2,-12(fp)
 8005580:	e0bffd17 	ldw	r2,-12(fp)
 8005584:	10800810 	cmplti	r2,r2,32
 8005588:	103fe01e 	bne	r2,zero,800550c <__alt_data_end+0xfc00550c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800558c:	e0bffe17 	ldw	r2,-8(fp)
}
 8005590:	e037883a 	mov	sp,fp
 8005594:	df000017 	ldw	fp,0(sp)
 8005598:	dec00104 	addi	sp,sp,4
 800559c:	f800283a 	ret

080055a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80055a0:	defffb04 	addi	sp,sp,-20
 80055a4:	df000415 	stw	fp,16(sp)
 80055a8:	df000404 	addi	fp,sp,16
 80055ac:	e13ffe15 	stw	r4,-8(fp)
 80055b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80055b4:	e0bfff17 	ldw	r2,-4(fp)
 80055b8:	10840070 	cmpltui	r2,r2,4097
 80055bc:	1000021e 	bne	r2,zero,80055c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80055c0:	00840004 	movi	r2,4096
 80055c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80055c8:	e0fffe17 	ldw	r3,-8(fp)
 80055cc:	e0bfff17 	ldw	r2,-4(fp)
 80055d0:	1885883a 	add	r2,r3,r2
 80055d4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80055d8:	e0bffe17 	ldw	r2,-8(fp)
 80055dc:	e0bffc15 	stw	r2,-16(fp)
 80055e0:	00000506 	br	80055f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80055e4:	e0bffc17 	ldw	r2,-16(fp)
 80055e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80055ec:	e0bffc17 	ldw	r2,-16(fp)
 80055f0:	10800804 	addi	r2,r2,32
 80055f4:	e0bffc15 	stw	r2,-16(fp)
 80055f8:	e0fffc17 	ldw	r3,-16(fp)
 80055fc:	e0bffd17 	ldw	r2,-12(fp)
 8005600:	18bff836 	bltu	r3,r2,80055e4 <__alt_data_end+0xfc0055e4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8005604:	e0bffe17 	ldw	r2,-8(fp)
 8005608:	108007cc 	andi	r2,r2,31
 800560c:	10000226 	beq	r2,zero,8005618 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8005610:	e0bffc17 	ldw	r2,-16(fp)
 8005614:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8005618:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800561c:	e037883a 	mov	sp,fp
 8005620:	df000017 	ldw	fp,0(sp)
 8005624:	dec00104 	addi	sp,sp,4
 8005628:	f800283a 	ret

0800562c <atexit>:
 800562c:	200b883a 	mov	r5,r4
 8005630:	000d883a 	mov	r6,zero
 8005634:	0009883a 	mov	r4,zero
 8005638:	000f883a 	mov	r7,zero
 800563c:	80056f41 	jmpi	80056f4 <__register_exitproc>

08005640 <exit>:
 8005640:	defffe04 	addi	sp,sp,-8
 8005644:	000b883a 	mov	r5,zero
 8005648:	dc000015 	stw	r16,0(sp)
 800564c:	dfc00115 	stw	ra,4(sp)
 8005650:	2021883a 	mov	r16,r4
 8005654:	80058080 	call	8005808 <__call_exitprocs>
 8005658:	00820034 	movhi	r2,2048
 800565c:	109d2604 	addi	r2,r2,29848
 8005660:	11000017 	ldw	r4,0(r2)
 8005664:	20800f17 	ldw	r2,60(r4)
 8005668:	10000126 	beq	r2,zero,8005670 <exit+0x30>
 800566c:	103ee83a 	callr	r2
 8005670:	8009883a 	mov	r4,r16
 8005674:	800599c0 	call	800599c <_exit>

08005678 <memcmp>:
 8005678:	01c000c4 	movi	r7,3
 800567c:	3980192e 	bgeu	r7,r6,80056e4 <memcmp+0x6c>
 8005680:	2144b03a 	or	r2,r4,r5
 8005684:	11c4703a 	and	r2,r2,r7
 8005688:	10000f26 	beq	r2,zero,80056c8 <memcmp+0x50>
 800568c:	20800003 	ldbu	r2,0(r4)
 8005690:	28c00003 	ldbu	r3,0(r5)
 8005694:	10c0151e 	bne	r2,r3,80056ec <memcmp+0x74>
 8005698:	31bfff84 	addi	r6,r6,-2
 800569c:	01ffffc4 	movi	r7,-1
 80056a0:	00000406 	br	80056b4 <memcmp+0x3c>
 80056a4:	20800003 	ldbu	r2,0(r4)
 80056a8:	28c00003 	ldbu	r3,0(r5)
 80056ac:	31bfffc4 	addi	r6,r6,-1
 80056b0:	10c00e1e 	bne	r2,r3,80056ec <memcmp+0x74>
 80056b4:	21000044 	addi	r4,r4,1
 80056b8:	29400044 	addi	r5,r5,1
 80056bc:	31fff91e 	bne	r6,r7,80056a4 <__alt_data_end+0xfc0056a4>
 80056c0:	0005883a 	mov	r2,zero
 80056c4:	f800283a 	ret
 80056c8:	20c00017 	ldw	r3,0(r4)
 80056cc:	28800017 	ldw	r2,0(r5)
 80056d0:	1880041e 	bne	r3,r2,80056e4 <memcmp+0x6c>
 80056d4:	31bfff04 	addi	r6,r6,-4
 80056d8:	21000104 	addi	r4,r4,4
 80056dc:	29400104 	addi	r5,r5,4
 80056e0:	39bff936 	bltu	r7,r6,80056c8 <__alt_data_end+0xfc0056c8>
 80056e4:	303fe91e 	bne	r6,zero,800568c <__alt_data_end+0xfc00568c>
 80056e8:	003ff506 	br	80056c0 <__alt_data_end+0xfc0056c0>
 80056ec:	10c5c83a 	sub	r2,r2,r3
 80056f0:	f800283a 	ret

080056f4 <__register_exitproc>:
 80056f4:	00820034 	movhi	r2,2048
 80056f8:	defffa04 	addi	sp,sp,-24
 80056fc:	109d2604 	addi	r2,r2,29848
 8005700:	dc000315 	stw	r16,12(sp)
 8005704:	14000017 	ldw	r16,0(r2)
 8005708:	dc400415 	stw	r17,16(sp)
 800570c:	dfc00515 	stw	ra,20(sp)
 8005710:	80805217 	ldw	r2,328(r16)
 8005714:	2023883a 	mov	r17,r4
 8005718:	10003626 	beq	r2,zero,80057f4 <__register_exitproc+0x100>
 800571c:	10c00117 	ldw	r3,4(r2)
 8005720:	010007c4 	movi	r4,31
 8005724:	20c00e16 	blt	r4,r3,8005760 <__register_exitproc+0x6c>
 8005728:	1a400044 	addi	r9,r3,1
 800572c:	8800211e 	bne	r17,zero,80057b4 <__register_exitproc+0xc0>
 8005730:	18c00084 	addi	r3,r3,2
 8005734:	18c7883a 	add	r3,r3,r3
 8005738:	18c7883a 	add	r3,r3,r3
 800573c:	12400115 	stw	r9,4(r2)
 8005740:	10c7883a 	add	r3,r2,r3
 8005744:	19400015 	stw	r5,0(r3)
 8005748:	0005883a 	mov	r2,zero
 800574c:	dfc00517 	ldw	ra,20(sp)
 8005750:	dc400417 	ldw	r17,16(sp)
 8005754:	dc000317 	ldw	r16,12(sp)
 8005758:	dec00604 	addi	sp,sp,24
 800575c:	f800283a 	ret
 8005760:	00800034 	movhi	r2,0
 8005764:	10800004 	addi	r2,r2,0
 8005768:	10002526 	beq	r2,zero,8005800 <__register_exitproc+0x10c>
 800576c:	01006404 	movi	r4,400
 8005770:	d9400015 	stw	r5,0(sp)
 8005774:	d9800115 	stw	r6,4(sp)
 8005778:	d9c00215 	stw	r7,8(sp)
 800577c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8005780:	d9400017 	ldw	r5,0(sp)
 8005784:	d9800117 	ldw	r6,4(sp)
 8005788:	d9c00217 	ldw	r7,8(sp)
 800578c:	10001c26 	beq	r2,zero,8005800 <__register_exitproc+0x10c>
 8005790:	80c05217 	ldw	r3,328(r16)
 8005794:	10000115 	stw	zero,4(r2)
 8005798:	02400044 	movi	r9,1
 800579c:	10c00015 	stw	r3,0(r2)
 80057a0:	80805215 	stw	r2,328(r16)
 80057a4:	10006215 	stw	zero,392(r2)
 80057a8:	10006315 	stw	zero,396(r2)
 80057ac:	0007883a 	mov	r3,zero
 80057b0:	883fdf26 	beq	r17,zero,8005730 <__alt_data_end+0xfc005730>
 80057b4:	18d1883a 	add	r8,r3,r3
 80057b8:	4211883a 	add	r8,r8,r8
 80057bc:	1211883a 	add	r8,r2,r8
 80057c0:	41802215 	stw	r6,136(r8)
 80057c4:	01000044 	movi	r4,1
 80057c8:	11806217 	ldw	r6,392(r2)
 80057cc:	20c8983a 	sll	r4,r4,r3
 80057d0:	310cb03a 	or	r6,r6,r4
 80057d4:	11806215 	stw	r6,392(r2)
 80057d8:	41c04215 	stw	r7,264(r8)
 80057dc:	01800084 	movi	r6,2
 80057e0:	89bfd31e 	bne	r17,r6,8005730 <__alt_data_end+0xfc005730>
 80057e4:	11806317 	ldw	r6,396(r2)
 80057e8:	3108b03a 	or	r4,r6,r4
 80057ec:	11006315 	stw	r4,396(r2)
 80057f0:	003fcf06 	br	8005730 <__alt_data_end+0xfc005730>
 80057f4:	80805304 	addi	r2,r16,332
 80057f8:	80805215 	stw	r2,328(r16)
 80057fc:	003fc706 	br	800571c <__alt_data_end+0xfc00571c>
 8005800:	00bfffc4 	movi	r2,-1
 8005804:	003fd106 	br	800574c <__alt_data_end+0xfc00574c>

08005808 <__call_exitprocs>:
 8005808:	00820034 	movhi	r2,2048
 800580c:	109d2604 	addi	r2,r2,29848
 8005810:	10800017 	ldw	r2,0(r2)
 8005814:	defff404 	addi	sp,sp,-48
 8005818:	dd800815 	stw	r22,32(sp)
 800581c:	d8800015 	stw	r2,0(sp)
 8005820:	10805204 	addi	r2,r2,328
 8005824:	dd000615 	stw	r20,24(sp)
 8005828:	dc800415 	stw	r18,16(sp)
 800582c:	dfc00b15 	stw	ra,44(sp)
 8005830:	df000a15 	stw	fp,40(sp)
 8005834:	ddc00915 	stw	r23,36(sp)
 8005838:	dd400715 	stw	r21,28(sp)
 800583c:	dcc00515 	stw	r19,20(sp)
 8005840:	dc400315 	stw	r17,12(sp)
 8005844:	dc000215 	stw	r16,8(sp)
 8005848:	2025883a 	mov	r18,r4
 800584c:	2829883a 	mov	r20,r5
 8005850:	d8800115 	stw	r2,4(sp)
 8005854:	05bfffc4 	movi	r22,-1
 8005858:	d8800017 	ldw	r2,0(sp)
 800585c:	14c05217 	ldw	r19,328(r2)
 8005860:	98001d26 	beq	r19,zero,80058d8 <__call_exitprocs+0xd0>
 8005864:	dd400117 	ldw	r21,4(sp)
 8005868:	98800117 	ldw	r2,4(r19)
 800586c:	173fffc4 	addi	fp,r2,-1
 8005870:	e0000d16 	blt	fp,zero,80058a8 <__call_exitprocs+0xa0>
 8005874:	14000044 	addi	r16,r2,1
 8005878:	8421883a 	add	r16,r16,r16
 800587c:	8421883a 	add	r16,r16,r16
 8005880:	84402004 	addi	r17,r16,128
 8005884:	9c63883a 	add	r17,r19,r17
 8005888:	9c21883a 	add	r16,r19,r16
 800588c:	a0001e26 	beq	r20,zero,8005908 <__call_exitprocs+0x100>
 8005890:	80804017 	ldw	r2,256(r16)
 8005894:	15001c26 	beq	r2,r20,8005908 <__call_exitprocs+0x100>
 8005898:	e73fffc4 	addi	fp,fp,-1
 800589c:	843fff04 	addi	r16,r16,-4
 80058a0:	8c7fff04 	addi	r17,r17,-4
 80058a4:	e5bff91e 	bne	fp,r22,800588c <__alt_data_end+0xfc00588c>
 80058a8:	00800034 	movhi	r2,0
 80058ac:	10800004 	addi	r2,r2,0
 80058b0:	10000926 	beq	r2,zero,80058d8 <__call_exitprocs+0xd0>
 80058b4:	98800117 	ldw	r2,4(r19)
 80058b8:	1000311e 	bne	r2,zero,8005980 <__call_exitprocs+0x178>
 80058bc:	98800017 	ldw	r2,0(r19)
 80058c0:	10003426 	beq	r2,zero,8005994 <__call_exitprocs+0x18c>
 80058c4:	9809883a 	mov	r4,r19
 80058c8:	a8800015 	stw	r2,0(r21)
 80058cc:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80058d0:	acc00017 	ldw	r19,0(r21)
 80058d4:	983fe41e 	bne	r19,zero,8005868 <__alt_data_end+0xfc005868>
 80058d8:	dfc00b17 	ldw	ra,44(sp)
 80058dc:	df000a17 	ldw	fp,40(sp)
 80058e0:	ddc00917 	ldw	r23,36(sp)
 80058e4:	dd800817 	ldw	r22,32(sp)
 80058e8:	dd400717 	ldw	r21,28(sp)
 80058ec:	dd000617 	ldw	r20,24(sp)
 80058f0:	dcc00517 	ldw	r19,20(sp)
 80058f4:	dc800417 	ldw	r18,16(sp)
 80058f8:	dc400317 	ldw	r17,12(sp)
 80058fc:	dc000217 	ldw	r16,8(sp)
 8005900:	dec00c04 	addi	sp,sp,48
 8005904:	f800283a 	ret
 8005908:	98800117 	ldw	r2,4(r19)
 800590c:	80c00017 	ldw	r3,0(r16)
 8005910:	10bfffc4 	addi	r2,r2,-1
 8005914:	17001526 	beq	r2,fp,800596c <__call_exitprocs+0x164>
 8005918:	80000015 	stw	zero,0(r16)
 800591c:	183fde26 	beq	r3,zero,8005898 <__alt_data_end+0xfc005898>
 8005920:	00800044 	movi	r2,1
 8005924:	1708983a 	sll	r4,r2,fp
 8005928:	98806217 	ldw	r2,392(r19)
 800592c:	9dc00117 	ldw	r23,4(r19)
 8005930:	2084703a 	and	r2,r4,r2
 8005934:	1000061e 	bne	r2,zero,8005950 <__call_exitprocs+0x148>
 8005938:	183ee83a 	callr	r3
 800593c:	98800117 	ldw	r2,4(r19)
 8005940:	15ffc51e 	bne	r2,r23,8005858 <__alt_data_end+0xfc005858>
 8005944:	a8800017 	ldw	r2,0(r21)
 8005948:	14ffd326 	beq	r2,r19,8005898 <__alt_data_end+0xfc005898>
 800594c:	003fc206 	br	8005858 <__alt_data_end+0xfc005858>
 8005950:	98806317 	ldw	r2,396(r19)
 8005954:	2084703a 	and	r2,r4,r2
 8005958:	1000061e 	bne	r2,zero,8005974 <__call_exitprocs+0x16c>
 800595c:	89400017 	ldw	r5,0(r17)
 8005960:	9009883a 	mov	r4,r18
 8005964:	183ee83a 	callr	r3
 8005968:	003ff406 	br	800593c <__alt_data_end+0xfc00593c>
 800596c:	9f000115 	stw	fp,4(r19)
 8005970:	003fea06 	br	800591c <__alt_data_end+0xfc00591c>
 8005974:	89000017 	ldw	r4,0(r17)
 8005978:	183ee83a 	callr	r3
 800597c:	003fef06 	br	800593c <__alt_data_end+0xfc00593c>
 8005980:	98800017 	ldw	r2,0(r19)
 8005984:	982b883a 	mov	r21,r19
 8005988:	1027883a 	mov	r19,r2
 800598c:	983fb61e 	bne	r19,zero,8005868 <__alt_data_end+0xfc005868>
 8005990:	003fd106 	br	80058d8 <__alt_data_end+0xfc0058d8>
 8005994:	0005883a 	mov	r2,zero
 8005998:	003ffa06 	br	8005984 <__alt_data_end+0xfc005984>

0800599c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800599c:	defffd04 	addi	sp,sp,-12
 80059a0:	df000215 	stw	fp,8(sp)
 80059a4:	df000204 	addi	fp,sp,8
 80059a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80059ac:	0001883a 	nop
 80059b0:	e0bfff17 	ldw	r2,-4(fp)
 80059b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80059b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80059bc:	10000226 	beq	r2,zero,80059c8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80059c0:	002af070 	cmpltui	zero,zero,43969
 80059c4:	00000106 	br	80059cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80059c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80059cc:	003fff06 	br	80059cc <__alt_data_end+0xfc0059cc>
