
Display_project.elf:     file format elf32-littlenios2
Display_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00020494 memsz 0x00020494 flags r-x
    LOAD off    0x000214b4 vaddr 0x080204b4 paddr 0x08021fcc align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00023ae4 vaddr 0x08023ae4 paddr 0x08023ae4 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000157a0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ab58  0801595c  0801595c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  080204b4  08021fcc  000214b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  08023ae4  08023ae4  00023ae4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08023d40  08023d40  00022fcc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00022fcc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e20  00000000  00000000  00022ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029c49  00000000  00000000  00023e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a245  00000000  00000000  0004da59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d2ef  00000000  00000000  00057c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f40  00000000  00000000  00064f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004109  00000000  00000000  00067ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b5e2  00000000  00000000  0006bfd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000875bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014c8  00000000  00000000  00087610  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008c9ca  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008c9cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008c9d9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008c9da  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008c9db  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008c9e6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008c9f1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0008c9fc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  0008ca07  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0008ca4d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006f74b  00000000  00000000  00091599  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0801595c l    d  .rodata	00000000 .rodata
080204b4 l    d  .rwdata	00000000 .rwdata
08023ae4 l    d  .bss	00000000 .bss
08023d40 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Display_project_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080202a2 l     O .rodata	00000010 zeroes.4166
080202b2 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
080202c2 l     O .rodata	00000010 zeroes.4181
080202d2 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08008b80 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800a700 l     F .text	00000008 __fp_lock
0800a708 l     F .text	00000008 __fp_unlock
0800a71c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
080208bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08020d00 l     O .rwdata	00000020 lc_ctype_charset
08020ce0 l     O .rwdata	00000020 lc_message_charset
08020d20 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08020304 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08020428 l     O .rodata	00000010 zeroes.4110
08020438 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0800e718 l     F .text	000000fc __sprint_r.part.0
08020458 l     O .rodata	00000010 blanks.4125
08020448 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08011034 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
08012b48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08012c68 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08012c94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08013064 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08013158 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801323c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08013418 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08021fc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
080136a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080137ec l     F .text	00000038 alt_dev_reg
08020f00 l     O .rwdata	00001060 jtag_uart_0
08021f60 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08013b14 l     F .text	00000204 altera_avalon_jtag_uart_irq
08013d18 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08014338 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08014b90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08014dfc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
08014f34 l     F .text	00000050 alt_get_errno
08014f84 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080004a0 g     F .text	00000054 sign
0800480c g     F .text	00000018 putchar
0800ca14 g     F .text	00000074 _mprec_log10
0800cb00 g     F .text	0000008c __any_on
080101d8 g     F .text	00000054 _isatty_r
08020310 g     O .rodata	00000028 __mprec_tinytens
08013360 g     F .text	00000078 alt_main
08004824 g     F .text	000000b8 _puts_r
08023c40 g     O .bss	00000100 alt_irq
0801022c g     F .text	0000005c _lseek_r
08021fcc g       *ABS*	00000000 __flash_rwdata_start
080144a8 g     F .text	0000003c alt_up_character_lcd_send_cmd
08011a2c g     F .text	00000084 .hidden __eqdf2
08000304 g     F .text	0000007c ProgramPalette
08023ae8 g     O .bss	00000004 curr_room_num
08023d40 g       *ABS*	00000000 __alt_heap_start
080013cc g     F .text	0000017c readDataFromTx
08000914 g     F .text	000001b0 OutGraphicsCharFont2
080047c8 g     F .text	0000003c printf
08015bf6 g     O .rodata	00000a64 Font10x14
080102e4 g     F .text	0000009c _wcrtomb_r
0800d3e0 g     F .text	0000005c __sseek
0800aa50 g     F .text	00000010 __sinit
0800fbac g     F .text	00000154 __swbuf_r
0800b4c8 g     F .text	0000007c _setlocale_r
08000d44 g     F .text	00000030 WaitForTouch
0800a8bc g     F .text	00000064 __sfmoreglue
080133f8 g     F .text	00000020 __malloc_unlock
08001ae0 g     F .text	00000064 Wifi_Send_Sms
08023b1c g     O .bss	00000004 altera_avalon_timer_ts_freq
0800105c g     F .text	0000002c SendRangeRequest
0800b980 g     F .text	0000015c memmove
0800aa38 g     F .text	00000018 _cleanup
0800bc00 g     F .text	000000a8 _Balloc
08003c50 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08014434 g     F .text	00000074 get_DDRAM_addr
08000ac4 g     F .text	00000148 DrawString
08000000 g     F .entry	0000001c __reset
08002438 g     F .text	00000060 waitForInterrupt
08001a60 g     F .text	00000050 Wifi_Print_Response
08000020 g       *ABS*	00000000 __flash_exceptions_start
08010180 g     F .text	00000058 _fstat_r
08023af8 g     O .bss	00000004 errno
080031c0 g     F .text	000001f4 floor
0800d35c g     F .text	00000008 __seofread
0800d6b0 g     F .text	00001068 ___svfiprintf_internal_r
08023b10 g     O .bss	00000004 alt_argv
08029f8c g       *ABS*	00000000 _gp
08013674 g     F .text	00000030 usleep
08000ed0 g     F .text	00000060 putcharRS232
080015dc g     F .text	00000030 reset
08020d80 g     O .rwdata	00000180 alt_fd_list
08000fe8 g     F .text	00000030 RS232TestForReceivedData
08004804 g     F .text	00000008 _putchar_r
08014d3c g     F .text	00000090 alt_find_dev
0800b848 g     F .text	00000138 memcpy
08014644 g     F .text	00000050 alt_up_character_lcd_write_fd
08000e70 g     F .text	00000060 Init_RS232
0800a710 g     F .text	0000000c _cleanup_r
08003e98 g     F .text	000000d0 .hidden __floatsidf
08001c44 g     F .text	00000660 InfoDisplay
08014ebc g     F .text	00000078 alt_io_redirect
08003d30 g     F .text	000000e0 .hidden __ltdf2
0801595c g       *ABS*	00000000 __DTOR_END__
080048dc g     F .text	00000014 puts
080027c4 g     F .text	00000208 InfoChoice
0800d294 g     F .text	00000074 __fpclassifyd
0800c970 g     F .text	000000a4 __ratio
0800fb88 g     F .text	00000024 __vfiprintf_internal
08013f14 g     F .text	0000020c altera_avalon_jtag_uart_read
08003fcc g     F .text	00000014 malloc
0800479c g     F .text	0000002c _printf_r
08011150 g     F .text	00000008 .hidden __udivsi3
080130b4 g     F .text	000000a4 isatty
08020360 g     O .rodata	000000c8 __mprec_tens
080029cc g     F .text	000000e4 PrintNumbers
0801a6ec g     O .rodata	00005794 Font38x59
0800b544 g     F .text	0000000c __locale_charset
08000380 g     F .text	00000090 DrawHorizontalLine
0801552c g     F .text	0000008c alt_icache_flush
080022a4 g     F .text	00000060 RequestCloseDisplay
08023af4 g     O .bss	00000004 __malloc_top_pad
08021f9c g     O .rwdata	00000004 __mb_cur_max
0800b574 g     F .text	0000000c _localeconv_r
0800c000 g     F .text	0000003c __i2b
0800aeb4 g     F .text	000004a4 __sfvwrite_r
08001724 g     F .text	00000094 configureBluetoothDongle
080048f0 g     F .text	00000054 _sbrk_r
0800122c g     F .text	0000005c putcharBluetooth
08010288 g     F .text	0000005c _read_r
08021fb4 g     O .rwdata	00000004 alt_max_fd
0800fe90 g     F .text	00000100 _fclose_r
080015a8 g     F .text	00000034 enterCommandMode
0800a6d0 g     F .text	00000030 fflush
08023af0 g     O .bss	00000004 __malloc_max_sbrked_mem
080033b4 g     F .text	0000089c .hidden __adddf3
0800c718 g     F .text	0000011c __b2d
08010aa4 g     F .text	00000590 .hidden __umoddi3
0801328c g     F .text	000000d4 lseek
08001670 g     F .text	00000034 setPassword
08021f94 g     O .rwdata	00000004 _global_impure_ptr
0800ccf4 g     F .text	000005a0 _realloc_r
08002364 g     F .text	000000d4 BaseChoice
08023d40 g       *ABS*	00000000 __bss_end
08012f74 g     F .text	000000f0 alt_iic_isr_register
08015240 g     F .text	00000104 alt_tick
080104e4 g     F .text	000005c0 .hidden __udivdi3
0800ffa4 g     F .text	00000184 _fputwc_r
08020338 g     O .rodata	00000028 __mprec_bigtens
0800bde4 g     F .text	00000104 __s2b
08012aa4 g     F .text	000000a4 .hidden __floatunsidf
08001990 g     F .text	00000048 Wifi_Get_Char
0800c4c0 g     F .text	00000060 __mcmp
08000cac g     F .text	00000064 Init_Touch
0800aa70 g     F .text	00000018 __fp_lock_all
08012f28 g     F .text	0000004c alt_ic_irq_enabled
080151a8 g     F .text	00000098 alt_alarm_stop
0801665a g     O .rodata	0000140a Font16x27
08023b08 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08020d58 g     O .rwdata	00000028 alt_dev_null
08000768 g     F .text	000001ac OutGraphicsCharFont1
080148d8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08014b74 g     F .text	0000001c alt_dcache_flush_all
0800bee8 g     F .text	00000068 __hi0bits
080018f4 g     F .text	0000004c Wifi_Init
08003e10 g     F .text	00000088 .hidden __fixdfsi
08001018 g     F .text	00000044 GetRangeData
08021fcc g       *ABS*	00000000 __ram_rwdata_end
08021fac g     O .rwdata	00000008 alt_dev_list
080136f4 g     F .text	000000f8 write
0800cb8c g     F .text	000000a0 _putc_r
08000410 g     F .text	00000090 DrawVerticalLine
080204b4 g       *ABS*	00000000 __ram_rodata_end
08012ce4 g     F .text	000000b0 fstat
08003d30 g     F .text	000000e0 .hidden __ledf2
08000d10 g     F .text	00000034 ScreenTouched
0800c238 g     F .text	00000140 __pow5mult
0800e82c g     F .text	0000135c ___vfiprintf_internal_r
08023b04 g     O .bss	00000004 __nlocale_changed
08011158 g     F .text	00000008 .hidden __umodsi3
08023d40 g       *ABS*	00000000 end
08013a50 g     F .text	000000c4 altera_avalon_jtag_uart_init
0801595c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
080143ac g     F .text	00000088 alt_avalon_timer_sc_init
08003f68 g     F .text	00000064 .hidden __clzsi2
08014120 g     F .text	00000218 altera_avalon_jtag_uart_write
0800aa60 g     F .text	00000004 __sfp_lock_acquire
0800b760 g     F .text	000000e8 memchr
08014558 g     F .text	00000078 alt_up_character_lcd_write
08006a30 g     F .text	00001ffc ___vfprintf_internal_r
08004944 g     F .text	00000058 _sprintf_r
080017f8 g     F .text	00000058 timer_0_ISR
08001850 g     F .text	00000088 Init_ISR
0800abc4 g     F .text	000002f0 _free_r
080012e0 g     F .text	0000005c wait
0800b550 g     F .text	00000010 __locale_mb_cur_max
08015794 g     F .text	00000194 __call_exitprocs
08023b00 g     O .bss	00000004 __mlocale_changed
08001200 g     F .text	0000002c SendSolved
08021f8c g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08023b20 g     O .bss	00000004 _alt_tick_rate
0800c378 g     F .text	00000148 __lshift
08000d74 g     F .text	000000fc GetBasePress
08023b24 g     O .bss	00000004 _alt_nticks
08013468 g     F .text	000000fc read
08013858 g     F .text	00000094 alt_sys_init
08014790 g     F .text	00000088 alt_up_character_lcd_shift_display
0800d4e8 g     F .text	000001c8 __ssprint_r
08015680 g     F .text	00000114 __register_exitproc
08002304 g     F .text	00000060 RequestOpenDisplay
0800c03c g     F .text	000001fc __multiply
08014818 g     F .text	0000008c alt_up_character_lcd_erase_pos
08013dc0 g     F .text	00000068 altera_avalon_jtag_uart_close
080204b4 g       *ABS*	00000000 __ram_rwdata_start
0801595c g       *ABS*	00000000 __ram_rodata_start
08023b28 g     O .bss	00000028 __malloc_current_mallinfo
0800c834 g     F .text	0000013c __d2b
08023b50 g     O .bss	000000f0 roomArray
080138ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08015478 g     F .text	000000b4 alt_get_fd
08014a4c g     F .text	00000128 alt_busy_sleep
0800fd78 g     F .text	00000054 _close_r
08015604 g     F .text	0000007c memcmp
080139ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08023d40 g       *ABS*	00000000 __alt_stack_base
080139fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08000600 g     F .text	00000084 DrawRect
08008a50 g     F .text	00000130 __swsetup_r
080010b4 g     F .text	0000002c CloseServo
08011160 g     F .text	000008cc .hidden __divdf3
0800a920 g     F .text	00000118 __sfp
0800ca88 g     F .text	00000078 __copybits
080204b4 g     O .rwdata	00000408 __malloc_av_
0800aa6c g     F .text	00000004 __sinit_lock_release
08011ab0 g     F .text	00000724 .hidden __muldf3
0800d308 g     F .text	00000054 __sread
08015364 g     F .text	00000114 alt_find_file
08014be0 g     F .text	000000a4 alt_dev_llist_insert
080133d8 g     F .text	00000020 __malloc_lock
080135c4 g     F .text	000000b0 sbrk
08004aa0 g     F .text	00001f90 ___svfprintf_internal_r
0800a4a8 g     F .text	00000228 _fflush_r
0800fdcc g     F .text	000000c4 _calloc_r
08002498 g     F .text	0000032c InfoSelect
08023ae4 g       *ABS*	00000000 __bss_start
080004f4 g     F .text	000000a0 DrawBresenhamLine
0800badc g     F .text	00000124 memset
08003188 g     F .text	00000038 main
08023b14 g     O .bss	00000004 alt_envp
08023aec g     O .bss	00000004 __malloc_max_total_mem
0801394c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800fd00 g     F .text	0000001c __swbuf
08000f30 g     F .text	00000060 getbitRS232
08000274 g     F .text	00000090 ReadAPixel
08014708 g     F .text	00000088 alt_up_character_lcd_shift_cursor
0800d43c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800ff90 g     F .text	00000014 fclose
08023ae4 g     O .bss	00000004 auto_approve
08008d80 g     F .text	00001728 _dtoa_r
08002ab0 g     F .text	00000100 InitRoomArray
08003ff4 g     F .text	000007a8 _malloc_r
08010458 g     F .text	00000030 __ascii_wctomb
08021fb8 g     O .rwdata	00000004 alt_errno
08002bb0 g     F .text	000005d8 RunDisplay
0800b358 g     F .text	000000b8 _fwalk
0800cc2c g     F .text	000000c8 putc
080110a0 g     F .text	00000054 .hidden __divsi3
08014518 g     F .text	00000040 alt_up_character_lcd_open_dev
0800aaa0 g     F .text	00000124 _malloc_trim_r
0801595c g       *ABS*	00000000 __CTOR_END__
080144e4 g     F .text	00000034 alt_up_character_lcd_init
0800d444 g     F .text	000000a4 strcmp
0801595c g       *ABS*	00000000 __flash_rodata_start
0801595c g       *ABS*	00000000 __DTOR_LIST__
08011a2c g     F .text	00000084 .hidden __nedf2
08013824 g     F .text	00000034 alt_irq_init
08013564 g     F .text	00000060 alt_release_fd
0800499c g     F .text	0000006c sprintf
080148a4 g     F .text	00000034 alt_up_character_lcd_cursor_off
0802015c g     O .rodata	00000100 .hidden __clz_tab
08023afc g     O .bss	00000004 _PathLocale
080155b8 g     F .text	00000014 atexit
0800fd1c g     F .text	0000005c _write_r
0800b580 g     F .text	0000001c setlocale
08001288 g     F .text	00000058 getcharBluetooth
080010e0 g     F .text	0000002c TurnOnLights
08001b44 g     F .text	00000100 BaseDisplay
08021f98 g     O .rwdata	00000004 _impure_ptr
08023b0c g     O .bss	00000004 alt_argc
080001f8 g     F .text	0000007c WriteAPixel
08023b18 g     O .bss	00000004 altera_avalon_timer_ts_base
08014ce0 g     F .text	0000005c _do_dtors
0800b56c g     F .text	00000008 __locale_cjk_lang
080018d8 g     F .text	0000001c sendAndGetTemp
08001170 g     F .text	00000090 GetTemp
0801595c g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0800c6b8 g     F .text	00000060 __ulp
08001ab0 g     F .text	00000030 Wifi_For_Received_Data
0800160c g     F .text	00000030 setAuthenticationMode
0800aa88 g     F .text	00000018 __fp_unlock_all
08000594 g     F .text	0000006c DrawFillRect
08021fa4 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800b59c g     F .text	0000000c localeconv
08001548 g     F .text	00000060 initBluetooth
08000f90 g     F .text	00000058 getcharRS232
08012d94 g     F .text	00000050 alt_ic_isr_register
08021fcc g       *ABS*	00000000 _edata
08023d40 g       *ABS*	00000000 _end
08001088 g     F .text	0000002c OpenServo
080001bc g       *ABS*	00000000 __ram_exceptions_end
08013e28 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08001940 g     F .text	00000050 Wifi_Send_Char
08012e84 g     F .text	000000a4 alt_ic_irq_disable
0800d364 g     F .text	0000007c __swrite
08021f90 g     O .rwdata	00000004 __malloc_trim_threshold
08015344 g     F .text	00000020 altera_nios2_qsys_irq_init
0800b560 g     F .text	0000000c __locale_msgcharset
080155cc g     F .text	00000038 exit
08001138 g     F .text	00000038 sendTempRequest
0800b410 g     F .text	000000b8 _fwalk_reent
0800c520 g     F .text	00000198 __mdiff
0800110c g     F .text	0000002c TurnOffLights
080110f4 g     F .text	0000005c .hidden __modsi3
080017b8 g     F .text	00000040 configureMasterBluetoothDongle
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800aa64 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080145d0 g     F .text	00000074 alt_up_character_lcd_string
08017a64 g     O .rodata	00002c88 Font22x40
08000c64 g     F .text	00000048 getCharTouch
08015928 g     F .text	00000034 _exit
0801490c g     F .text	00000140 alt_alarm_start
080016f4 g     F .text	00000030 exitCommandMode
0800163c g     F .text	00000034 name
0800b5a8 g     F .text	000001b8 __smakebuf_r
08004a08 g     F .text	00000098 strlen
08015050 g     F .text	00000158 open
08003c50 g     F .text	000000e0 .hidden __gedf2
08000684 g     F .text	000000e4 DrawFillRectBorder
08021fa0 g     O .rwdata	00000004 __wctomb
0800e814 g     F .text	00000018 __sprint_r
08014dcc g     F .text	00000030 alt_icache_flush_all
0800133c g     F .text	00000090 writeDataToTx
08014694 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08021fbc g     O .rwdata	00000004 alt_priority_mask
08012de4 g     F .text	000000a0 alt_ic_irq_enable
08008a2c g     F .text	00000024 __vfprintf_internal
08010488 g     F .text	0000005c _wctomb_r
080121d4 g     F .text	000008d0 .hidden __subdf3
0800bf50 g     F .text	000000b0 __lo0bits
08021fc4 g     O .rwdata	00000008 alt_alarm_list
08014c84 g     F .text	0000005c _do_ctors
08010380 g     F .text	000000d8 wcrtomb
08012b98 g     F .text	000000d0 close
080019d8 g     F .text	00000088 Wifi_Send_String
08000c0c g     F .text	00000058 putCharTouch
080016a4 g     F .text	00000050 AttemptBluetoothConnection
080131bc g     F .text	00000080 alt_load
08010128 g     F .text	00000058 fputwc
08003fe0 g     F .text	00000014 free
0800aa68 g     F .text	00000004 __sinit_lock_acquire
0800bcd0 g     F .text	00000114 __multadd
0800bca8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	108f1004 	addi	r2,r2,15424
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	108f1004 	addi	r2,r2,15424
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6a7e314 	ori	gp,gp,40844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	108eb914 	ori	r2,r2,15076

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cf5014 	ori	r3,r3,15680

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80131bc0 	call	80131bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80133600 	call	8013360 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <WriteAPixel>:
 * This function waits for a touch screen release event and returns X,Y coord
 *****************************************************************************/


void WriteAPixel(int x, int y, int Colour)
{
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 8000210:	0001883a 	nop
 8000214:	00a10034 	movhi	r2,33792
 8000218:	1080000b 	ldhu	r2,0(r2)
 800021c:	10bfffcc 	andi	r2,r2,65535
 8000220:	1080004c 	andi	r2,r2,1
 8000224:	103ffb26 	beq	r2,zero,8000214 <__alt_data_end+0xfc000214>
	GraphicsX1Reg = x; // write coords to x1, y1
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10800084 	addi	r2,r2,2
 8000230:	e0fffd17 	ldw	r3,-12(fp)
 8000234:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0fffe17 	ldw	r3,-8(fp)
 8000244:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour; // set pixel colour
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10800384 	addi	r2,r2,14
 8000250:	e0ffff17 	ldw	r3,-4(fp)
 8000254:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel; // give graphics "write pixel" command
 8000258:	00a10034 	movhi	r2,33792
 800025c:	00c00284 	movi	r3,10
 8000260:	10c0000d 	sth	r3,0(r2)
}
 8000264:	e037883a 	mov	sp,fp
 8000268:	df000017 	ldw	fp,0(sp)
 800026c:	dec00104 	addi	sp,sp,4
 8000270:	f800283a 	ret

08000274 <ReadAPixel>:
/*********************************************************************************************
 * This function read a single pixel from the x,y coords specified and returns its colour
 * Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 *********************************************************************************************/
int ReadAPixel(int x, int y)
{
 8000274:	defffd04 	addi	sp,sp,-12
 8000278:	df000215 	stw	fp,8(sp)
 800027c:	df000204 	addi	fp,sp,8
 8000280:	e13ffe15 	stw	r4,-8(fp)
 8000284:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 8000288:	0001883a 	nop
 800028c:	00a10034 	movhi	r2,33792
 8000290:	1080000b 	ldhu	r2,0(r2)
 8000294:	10bfffcc 	andi	r2,r2,65535
 8000298:	1080004c 	andi	r2,r2,1
 800029c:	103ffb26 	beq	r2,zero,800028c <__alt_data_end+0xfc00028c>
	GraphicsX1Reg = x; // write coords to x1, y1
 80002a0:	00a10034 	movhi	r2,33792
 80002a4:	10800084 	addi	r2,r2,2
 80002a8:	e0fffe17 	ldw	r3,-8(fp)
 80002ac:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10800104 	addi	r2,r2,4
 80002b8:	e0ffff17 	ldw	r3,-4(fp)
 80002bc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel; // give graphics a "get pixel" command
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	00c002c4 	movi	r3,11
 80002c8:	10c0000d 	sth	r3,0(r2)
	WAIT_FOR_GRAPHICS; // is graphics done reading pixel
 80002cc:	0001883a 	nop
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	1080000b 	ldhu	r2,0(r2)
 80002d8:	10bfffcc 	andi	r2,r2,65535
 80002dc:	1080004c 	andi	r2,r2,1
 80002e0:	103ffb26 	beq	r2,zero,80002d0 <__alt_data_end+0xfc0002d0>
	return (int)(GraphicsColourReg) ; // return the palette number (colour)
 80002e4:	00a10034 	movhi	r2,33792
 80002e8:	10800384 	addi	r2,r2,14
 80002ec:	1080000b 	ldhu	r2,0(r2)
 80002f0:	10bfffcc 	andi	r2,r2,65535
}
 80002f4:	e037883a 	mov	sp,fp
 80002f8:	df000017 	ldw	fp,0(sp)
 80002fc:	dec00104 	addi	sp,sp,4
 8000300:	f800283a 	ret

08000304 <ProgramPalette>:
 ** subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 **
 ************************************************************************************/
void ProgramPalette(int PaletteNumber, int RGB)
{
 8000304:	defffd04 	addi	sp,sp,-12
 8000308:	df000215 	stw	fp,8(sp)
 800030c:	df000204 	addi	fp,sp,8
 8000310:	e13ffe15 	stw	r4,-8(fp)
 8000314:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000318:	0001883a 	nop
 800031c:	00a10034 	movhi	r2,33792
 8000320:	1080000b 	ldhu	r2,0(r2)
 8000324:	10bfffcc 	andi	r2,r2,65535
 8000328:	1080004c 	andi	r2,r2,1
 800032c:	103ffb26 	beq	r2,zero,800031c <__alt_data_end+0xfc00031c>
	GraphicsColourReg = PaletteNumber;
 8000330:	00a10034 	movhi	r2,33792
 8000334:	10800384 	addi	r2,r2,14
 8000338:	e0fffe17 	ldw	r3,-8(fp)
 800033c:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16 ; // program red value in ls.8 bit of X1 reg
 8000340:	00a10034 	movhi	r2,33792
 8000344:	10800084 	addi	r2,r2,2
 8000348:	e0ffff17 	ldw	r3,-4(fp)
 800034c:	1807d43a 	srai	r3,r3,16
 8000350:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB ; // program green and blue into ls 16 bit of Y1 reg
 8000354:	00a10034 	movhi	r2,33792
 8000358:	10800104 	addi	r2,r2,4
 800035c:	e0ffff17 	ldw	r3,-4(fp)
 8000360:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour; // issue command
 8000364:	00a10034 	movhi	r2,33792
 8000368:	00c00404 	movi	r3,16
 800036c:	10c0000d 	sth	r3,0(r2)
}
 8000370:	e037883a 	mov	sp,fp
 8000374:	df000017 	ldw	fp,0(sp)
 8000378:	dec00104 	addi	sp,sp,4
 800037c:	f800283a 	ret

08000380 <DrawHorizontalLine>:
/*********************************************************************************************
This function draw a horizontal line, 1 pixel at a time starting at the x,y coords specified
 *********************************************************************************************/
void DrawHorizontalLine(int x1, int x2, int y, int Colour)
{
 8000380:	defffb04 	addi	sp,sp,-20
 8000384:	df000415 	stw	fp,16(sp)
 8000388:	df000404 	addi	fp,sp,16
 800038c:	e13ffc15 	stw	r4,-16(fp)
 8000390:	e17ffd15 	stw	r5,-12(fp)
 8000394:	e1bffe15 	stw	r6,-8(fp)
 8000398:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 800039c:	0001883a 	nop
 80003a0:	00a10034 	movhi	r2,33792
 80003a4:	1080000b 	ldhu	r2,0(r2)
 80003a8:	10bfffcc 	andi	r2,r2,65535
 80003ac:	1080004c 	andi	r2,r2,1
 80003b0:	103ffb26 	beq	r2,zero,80003a0 <__alt_data_end+0xfc0003a0>

	GraphicsX1Reg = x1;
 80003b4:	00a10034 	movhi	r2,33792
 80003b8:	10800084 	addi	r2,r2,2
 80003bc:	e0fffc17 	ldw	r3,-16(fp)
 80003c0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 80003c4:	00a10034 	movhi	r2,33792
 80003c8:	10800184 	addi	r2,r2,6
 80003cc:	e0fffd17 	ldw	r3,-12(fp)
 80003d0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80003d4:	00a10034 	movhi	r2,33792
 80003d8:	10800104 	addi	r2,r2,4
 80003dc:	e0fffe17 	ldw	r3,-8(fp)
 80003e0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 80003e4:	00a10034 	movhi	r2,33792
 80003e8:	10800384 	addi	r2,r2,14
 80003ec:	e0ffff17 	ldw	r3,-4(fp)
 80003f0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 80003f4:	00a10034 	movhi	r2,33792
 80003f8:	00c00044 	movi	r3,1
 80003fc:	10c0000d 	sth	r3,0(r2)
}
 8000400:	e037883a 	mov	sp,fp
 8000404:	df000017 	ldw	fp,0(sp)
 8000408:	dec00104 	addi	sp,sp,4
 800040c:	f800283a 	ret

08000410 <DrawVerticalLine>:

/*********************************************************************************************
This function draw a vertical line, 1 pixel at a time starting at the x,y coords specified
 *********************************************************************************************/
void DrawVerticalLine(int y1, int y2, int x, int Colour)
{
 8000410:	defffb04 	addi	sp,sp,-20
 8000414:	df000415 	stw	fp,16(sp)
 8000418:	df000404 	addi	fp,sp,16
 800041c:	e13ffc15 	stw	r4,-16(fp)
 8000420:	e17ffd15 	stw	r5,-12(fp)
 8000424:	e1bffe15 	stw	r6,-8(fp)
 8000428:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 800042c:	0001883a 	nop
 8000430:	00a10034 	movhi	r2,33792
 8000434:	1080000b 	ldhu	r2,0(r2)
 8000438:	10bfffcc 	andi	r2,r2,65535
 800043c:	1080004c 	andi	r2,r2,1
 8000440:	103ffb26 	beq	r2,zero,8000430 <__alt_data_end+0xfc000430>

	GraphicsY1Reg = y1;
 8000444:	00a10034 	movhi	r2,33792
 8000448:	10800104 	addi	r2,r2,4
 800044c:	e0fffc17 	ldw	r3,-16(fp)
 8000450:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000454:	00a10034 	movhi	r2,33792
 8000458:	10800204 	addi	r2,r2,8
 800045c:	e0fffd17 	ldw	r3,-12(fp)
 8000460:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = x;
 8000464:	00a10034 	movhi	r2,33792
 8000468:	10800084 	addi	r2,r2,2
 800046c:	e0fffe17 	ldw	r3,-8(fp)
 8000470:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000474:	00a10034 	movhi	r2,33792
 8000478:	10800384 	addi	r2,r2,14
 800047c:	e0ffff17 	ldw	r3,-4(fp)
 8000480:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000484:	00a10034 	movhi	r2,33792
 8000488:	00c00084 	movi	r3,2
 800048c:	10c0000d 	sth	r3,0(r2)
}
 8000490:	e037883a 	mov	sp,fp
 8000494:	df000017 	ldw	fp,0(sp)
 8000498:	dec00104 	addi	sp,sp,4
 800049c:	f800283a 	ret

080004a0 <sign>:

int sign (int n1, int n2){
 80004a0:	defffd04 	addi	sp,sp,-12
 80004a4:	df000215 	stw	fp,8(sp)
 80004a8:	df000204 	addi	fp,sp,8
 80004ac:	e13ffe15 	stw	r4,-8(fp)
 80004b0:	e17fff15 	stw	r5,-4(fp)
	if(n2-n1>0){
 80004b4:	e0ffff17 	ldw	r3,-4(fp)
 80004b8:	e0bffe17 	ldw	r2,-8(fp)
 80004bc:	1885c83a 	sub	r2,r3,r2
 80004c0:	0080020e 	bge	zero,r2,80004cc <sign+0x2c>
		return 1;
 80004c4:	00800044 	movi	r2,1
 80004c8:	00000606 	br	80004e4 <sign+0x44>
	}
	else if (n2==n1){
 80004cc:	e0ffff17 	ldw	r3,-4(fp)
 80004d0:	e0bffe17 	ldw	r2,-8(fp)
 80004d4:	1880021e 	bne	r3,r2,80004e0 <sign+0x40>
		return 0;
 80004d8:	0005883a 	mov	r2,zero
 80004dc:	00000106 	br	80004e4 <sign+0x44>
	}
	else {
		return -1;
 80004e0:	00bfffc4 	movi	r2,-1
	}
}
 80004e4:	e037883a 	mov	sp,fp
 80004e8:	df000017 	ldw	fp,0(sp)
 80004ec:	dec00104 	addi	sp,sp,4
 80004f0:	f800283a 	ret

080004f4 <DrawBresenhamLine>:

/*******************************************************************************
 ** Implementation of Bresenhams line drawing algorithm
 *******************************************************************************/
void DrawBresenhamLine(int x1, int x2, int y1, int y2, int Colour)
{
 80004f4:	defffb04 	addi	sp,sp,-20
 80004f8:	df000415 	stw	fp,16(sp)
 80004fc:	df000404 	addi	fp,sp,16
 8000500:	e13ffc15 	stw	r4,-16(fp)
 8000504:	e17ffd15 	stw	r5,-12(fp)
 8000508:	e1bffe15 	stw	r6,-8(fp)
 800050c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000510:	0001883a 	nop
 8000514:	00a10034 	movhi	r2,33792
 8000518:	1080000b 	ldhu	r2,0(r2)
 800051c:	10bfffcc 	andi	r2,r2,65535
 8000520:	1080004c 	andi	r2,r2,1
 8000524:	103ffb26 	beq	r2,zero,8000514 <__alt_data_end+0xfc000514>

	GraphicsX1Reg = x1;
 8000528:	00a10034 	movhi	r2,33792
 800052c:	10800084 	addi	r2,r2,2
 8000530:	e0fffc17 	ldw	r3,-16(fp)
 8000534:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000538:	00a10034 	movhi	r2,33792
 800053c:	10800184 	addi	r2,r2,6
 8000540:	e0fffd17 	ldw	r3,-12(fp)
 8000544:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000548:	00a10034 	movhi	r2,33792
 800054c:	10800104 	addi	r2,r2,4
 8000550:	e0fffe17 	ldw	r3,-8(fp)
 8000554:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000558:	00a10034 	movhi	r2,33792
 800055c:	10800204 	addi	r2,r2,8
 8000560:	e0ffff17 	ldw	r3,-4(fp)
 8000564:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000568:	00a10034 	movhi	r2,33792
 800056c:	10800384 	addi	r2,r2,14
 8000570:	e0c00117 	ldw	r3,4(fp)
 8000574:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 8000578:	00a10034 	movhi	r2,33792
 800057c:	00c000c4 	movi	r3,3
 8000580:	10c0000d 	sth	r3,0(r2)
}
 8000584:	e037883a 	mov	sp,fp
 8000588:	df000017 	ldw	fp,0(sp)
 800058c:	dec00104 	addi	sp,sp,4
 8000590:	f800283a 	ret

08000594 <DrawFillRect>:

void DrawFillRect(int x1, int x2, int y1, int y2, int colour){
 8000594:	defff904 	addi	sp,sp,-28
 8000598:	dfc00615 	stw	ra,24(sp)
 800059c:	df000515 	stw	fp,20(sp)
 80005a0:	df000504 	addi	fp,sp,20
 80005a4:	e13ffc15 	stw	r4,-16(fp)
 80005a8:	e17ffd15 	stw	r5,-12(fp)
 80005ac:	e1bffe15 	stw	r6,-8(fp)
 80005b0:	e1ffff15 	stw	r7,-4(fp)
	int j;
	for(j=y1;j<+y2;j++){
 80005b4:	e0bffe17 	ldw	r2,-8(fp)
 80005b8:	e0bffb15 	stw	r2,-20(fp)
 80005bc:	00000806 	br	80005e0 <DrawFillRect+0x4c>
		DrawHorizontalLine(x1,x2,j,colour);
 80005c0:	e13ffc17 	ldw	r4,-16(fp)
 80005c4:	e17ffd17 	ldw	r5,-12(fp)
 80005c8:	e1bffb17 	ldw	r6,-20(fp)
 80005cc:	e1c00217 	ldw	r7,8(fp)
 80005d0:	80003800 	call	8000380 <DrawHorizontalLine>
	GraphicsCommandReg = DrawLine;
}

void DrawFillRect(int x1, int x2, int y1, int y2, int colour){
	int j;
	for(j=y1;j<+y2;j++){
 80005d4:	e0bffb17 	ldw	r2,-20(fp)
 80005d8:	10800044 	addi	r2,r2,1
 80005dc:	e0bffb15 	stw	r2,-20(fp)
 80005e0:	e0fffb17 	ldw	r3,-20(fp)
 80005e4:	e0bfff17 	ldw	r2,-4(fp)
 80005e8:	18bff516 	blt	r3,r2,80005c0 <__alt_data_end+0xfc0005c0>
		DrawHorizontalLine(x1,x2,j,colour);
	}
}
 80005ec:	e037883a 	mov	sp,fp
 80005f0:	dfc00117 	ldw	ra,4(sp)
 80005f4:	df000017 	ldw	fp,0(sp)
 80005f8:	dec00204 	addi	sp,sp,8
 80005fc:	f800283a 	ret

08000600 <DrawRect>:

void DrawRect(int x1, int x2, int y1, int y2, int borderColour){
 8000600:	defffa04 	addi	sp,sp,-24
 8000604:	dfc00515 	stw	ra,20(sp)
 8000608:	df000415 	stw	fp,16(sp)
 800060c:	df000404 	addi	fp,sp,16
 8000610:	e13ffc15 	stw	r4,-16(fp)
 8000614:	e17ffd15 	stw	r5,-12(fp)
 8000618:	e1bffe15 	stw	r6,-8(fp)
 800061c:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1,x2,y1,borderColour);
 8000620:	e13ffc17 	ldw	r4,-16(fp)
 8000624:	e17ffd17 	ldw	r5,-12(fp)
 8000628:	e1bffe17 	ldw	r6,-8(fp)
 800062c:	e1c00217 	ldw	r7,8(fp)
 8000630:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawHorizontalLine(x1,x2,y2,borderColour);
 8000634:	e13ffc17 	ldw	r4,-16(fp)
 8000638:	e17ffd17 	ldw	r5,-12(fp)
 800063c:	e1bfff17 	ldw	r6,-4(fp)
 8000640:	e1c00217 	ldw	r7,8(fp)
 8000644:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawVerticalLine(y1,y2,x1,borderColour);
 8000648:	e13ffe17 	ldw	r4,-8(fp)
 800064c:	e17fff17 	ldw	r5,-4(fp)
 8000650:	e1bffc17 	ldw	r6,-16(fp)
 8000654:	e1c00217 	ldw	r7,8(fp)
 8000658:	80004100 	call	8000410 <DrawVerticalLine>
	DrawVerticalLine(y1,y2,x2,borderColour);
 800065c:	e13ffe17 	ldw	r4,-8(fp)
 8000660:	e17fff17 	ldw	r5,-4(fp)
 8000664:	e1bffd17 	ldw	r6,-12(fp)
 8000668:	e1c00217 	ldw	r7,8(fp)
 800066c:	80004100 	call	8000410 <DrawVerticalLine>
}
 8000670:	e037883a 	mov	sp,fp
 8000674:	dfc00117 	ldw	ra,4(sp)
 8000678:	df000017 	ldw	fp,0(sp)
 800067c:	dec00204 	addi	sp,sp,8
 8000680:	f800283a 	ret

08000684 <DrawFillRectBorder>:

void DrawFillRectBorder(int x1, int x2, int y1, int y2, int colour, int borderColour){
 8000684:	defff804 	addi	sp,sp,-32
 8000688:	dfc00715 	stw	ra,28(sp)
 800068c:	df000615 	stw	fp,24(sp)
 8000690:	df000604 	addi	fp,sp,24
 8000694:	e13ffc15 	stw	r4,-16(fp)
 8000698:	e17ffd15 	stw	r5,-12(fp)
 800069c:	e1bffe15 	stw	r6,-8(fp)
 80006a0:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1,x2,y1,borderColour);
 80006a4:	e13ffc17 	ldw	r4,-16(fp)
 80006a8:	e17ffd17 	ldw	r5,-12(fp)
 80006ac:	e1bffe17 	ldw	r6,-8(fp)
 80006b0:	e1c00317 	ldw	r7,12(fp)
 80006b4:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawHorizontalLine(x1,x2,y2,borderColour);
 80006b8:	e13ffc17 	ldw	r4,-16(fp)
 80006bc:	e17ffd17 	ldw	r5,-12(fp)
 80006c0:	e1bfff17 	ldw	r6,-4(fp)
 80006c4:	e1c00317 	ldw	r7,12(fp)
 80006c8:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawVerticalLine(y1,y2,x1,borderColour);
 80006cc:	e13ffe17 	ldw	r4,-8(fp)
 80006d0:	e17fff17 	ldw	r5,-4(fp)
 80006d4:	e1bffc17 	ldw	r6,-16(fp)
 80006d8:	e1c00317 	ldw	r7,12(fp)
 80006dc:	80004100 	call	8000410 <DrawVerticalLine>
	DrawVerticalLine(y1,y2,x2,borderColour);
 80006e0:	e13ffe17 	ldw	r4,-8(fp)
 80006e4:	e17fff17 	ldw	r5,-4(fp)
 80006e8:	e1bffd17 	ldw	r6,-12(fp)
 80006ec:	e1c00317 	ldw	r7,12(fp)
 80006f0:	80004100 	call	8000410 <DrawVerticalLine>
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
 80006f4:	e0bffc17 	ldw	r2,-16(fp)
 80006f8:	10800044 	addi	r2,r2,1
 80006fc:	e0bffa15 	stw	r2,-24(fp)
 8000700:	00001106 	br	8000748 <DrawFillRectBorder+0xc4>
		for(j=y1+1;j<+y2;j++){
 8000704:	e0bffe17 	ldw	r2,-8(fp)
 8000708:	10800044 	addi	r2,r2,1
 800070c:	e0bffb15 	stw	r2,-20(fp)
 8000710:	00000706 	br	8000730 <DrawFillRectBorder+0xac>
			WriteAPixel(i,j,colour);
 8000714:	e13ffa17 	ldw	r4,-24(fp)
 8000718:	e17ffb17 	ldw	r5,-20(fp)
 800071c:	e1800217 	ldw	r6,8(fp)
 8000720:	80001f80 	call	80001f8 <WriteAPixel>
	DrawVerticalLine(y1,y2,x1,borderColour);
	DrawVerticalLine(y1,y2,x2,borderColour);
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
		for(j=y1+1;j<+y2;j++){
 8000724:	e0bffb17 	ldw	r2,-20(fp)
 8000728:	10800044 	addi	r2,r2,1
 800072c:	e0bffb15 	stw	r2,-20(fp)
 8000730:	e0fffb17 	ldw	r3,-20(fp)
 8000734:	e0bfff17 	ldw	r2,-4(fp)
 8000738:	18bff616 	blt	r3,r2,8000714 <__alt_data_end+0xfc000714>
	DrawHorizontalLine(x1,x2,y2,borderColour);
	DrawVerticalLine(y1,y2,x1,borderColour);
	DrawVerticalLine(y1,y2,x2,borderColour);
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
 800073c:	e0bffa17 	ldw	r2,-24(fp)
 8000740:	10800044 	addi	r2,r2,1
 8000744:	e0bffa15 	stw	r2,-24(fp)
 8000748:	e0fffa17 	ldw	r3,-24(fp)
 800074c:	e0bffd17 	ldw	r2,-12(fp)
 8000750:	18bfec16 	blt	r3,r2,8000704 <__alt_data_end+0xfc000704>
		for(j=y1+1;j<+y2;j++){
			WriteAPixel(i,j,colour);
		}
	}
}
 8000754:	e037883a 	mov	sp,fp
 8000758:	dfc00117 	ldw	ra,4(sp)
 800075c:	df000017 	ldw	fp,0(sp)
 8000760:	dec00204 	addi	sp,sp,8
 8000764:	f800283a 	ret

08000768 <OutGraphicsCharFont1>:
 ** e.g. writing a space character with Erase set to true will set all pixels in the
 ** character to the background colour
 **
 *************************************************************************************************/
void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 8000768:	defff204 	addi	sp,sp,-56
 800076c:	dfc00d15 	stw	ra,52(sp)
 8000770:	df000c15 	stw	fp,48(sp)
 8000774:	ddc00b15 	stw	r23,44(sp)
 8000778:	dd800a15 	stw	r22,40(sp)
 800077c:	dd400915 	stw	r21,36(sp)
 8000780:	dd000815 	stw	r20,32(sp)
 8000784:	dcc00715 	stw	r19,28(sp)
 8000788:	dc800615 	stw	r18,24(sp)
 800078c:	dc400515 	stw	r17,20(sp)
 8000790:	dc000415 	stw	r16,16(sp)
 8000794:	df000c04 	addi	fp,sp,48
 8000798:	e13ff415 	stw	r4,-48(fp)
 800079c:	e17ff515 	stw	r5,-44(fp)
 80007a0:	e1bff615 	stw	r6,-40(fp)
 80007a4:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 80007a8:	e53ff417 	ldw	r20,-48(fp)
 80007ac:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 80007b0:	e0bff617 	ldw	r2,-40(fp)
 80007b4:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 80007b8:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 80007bc:	e0bff417 	ldw	r2,-48(fp)
 80007c0:	10bfffcc 	andi	r2,r2,65535
 80007c4:	10a0001c 	xori	r2,r2,32768
 80007c8:	10a00004 	addi	r2,r2,-32768
 80007cc:	1080c808 	cmpgei	r2,r2,800
 80007d0:	1000061e 	bne	r2,zero,80007ec <OutGraphicsCharFont1+0x84>
 80007d4:	e0bff517 	ldw	r2,-44(fp)
 80007d8:	10bfffcc 	andi	r2,r2,65535
 80007dc:	10a0001c 	xori	r2,r2,32768
 80007e0:	10a00004 	addi	r2,r2,-32768
 80007e4:	10807810 	cmplti	r2,r2,480
 80007e8:	1000011e 	bne	r2,zero,80007f0 <OutGraphicsCharFont1+0x88>
		return ;
 80007ec:	00003c06 	br	80008e0 <OutGraphicsCharFont1+0x178>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 80007f0:	8805883a 	mov	r2,r17
 80007f4:	10bfffcc 	andi	r2,r2,65535
 80007f8:	10a0001c 	xori	r2,r2,32768
 80007fc:	10a00004 	addi	r2,r2,-32768
 8000800:	10800810 	cmplti	r2,r2,32
 8000804:	1000361e 	bne	r2,zero,80008e0 <OutGraphicsCharFont1+0x178>
 8000808:	8805883a 	mov	r2,r17
 800080c:	10bfffcc 	andi	r2,r2,65535
 8000810:	10a0001c 	xori	r2,r2,32768
 8000814:	10a00004 	addi	r2,r2,-32768
 8000818:	10801fc8 	cmpgei	r2,r2,127
 800081c:	1000301e 	bne	r2,zero,80008e0 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 8000820:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++) {
 8000824:	0021883a 	mov	r16,zero
 8000828:	00002706 	br	80008c8 <OutGraphicsCharFont1+0x160>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 800082c:	00820074 	movhi	r2,2049
 8000830:	10965704 	addi	r2,r2,22876
 8000834:	88c001e4 	muli	r3,r17,7
 8000838:	1c07883a 	add	r3,r3,r16
 800083c:	10c5883a 	add	r2,r2,r3
 8000840:	10800003 	ldbu	r2,0(r2)
 8000844:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 8000848:	04c00404 	movi	r19,16
			for(column = 0; (char)(column) < (char)(5); column ++) {
 800084c:	0025883a 	mov	r18,zero
 8000850:	00001606 	br	80008ac <OutGraphicsCharFont1+0x144>
				// if a pixel in the character display it
				if((pixels & BitMask))
 8000854:	b4c4703a 	and	r2,r22,r19
 8000858:	10000926 	beq	r2,zero,8000880 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX+column, theY+row, theColour) ;
 800085c:	a489883a 	add	r4,r20,r18
 8000860:	ac07883a 	add	r3,r21,r16
 8000864:	b8803fcc 	andi	r2,r23,255
 8000868:	1080201c 	xori	r2,r2,128
 800086c:	10bfe004 	addi	r2,r2,-128
 8000870:	180b883a 	mov	r5,r3
 8000874:	100d883a 	mov	r6,r2
 8000878:	80001f80 	call	80001f8 <WriteAPixel>
 800087c:	00000906 	br	80008a4 <OutGraphicsCharFont1+0x13c>
				else {
					if(Erase == 1)
 8000880:	e0800317 	ldw	r2,12(fp)
 8000884:	10800058 	cmpnei	r2,r2,1
 8000888:	1000061e 	bne	r2,zero,80008a4 <OutGraphicsCharFont1+0x13c>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 800088c:	a487883a 	add	r3,r20,r18
 8000890:	ac05883a 	add	r2,r21,r16
 8000894:	1809883a 	mov	r4,r3
 8000898:	100b883a 	mov	r5,r2
 800089c:	e1bff717 	ldw	r6,-36(fp)
 80008a0:	80001f80 	call	80001f8 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 80008a4:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;
			for(column = 0; (char)(column) < (char)(5); column ++) {
 80008a8:	94800044 	addi	r18,r18,1
 80008ac:	9005883a 	mov	r2,r18
 80008b0:	10803fcc 	andi	r2,r2,255
 80008b4:	1080201c 	xori	r2,r2,128
 80008b8:	10bfe004 	addi	r2,r2,-128
 80008bc:	10800150 	cmplti	r2,r2,5
 80008c0:	103fe41e 	bne	r2,zero,8000854 <__alt_data_end+0xfc000854>
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
		return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
 80008c4:	84000044 	addi	r16,r16,1
 80008c8:	8005883a 	mov	r2,r16
 80008cc:	10803fcc 	andi	r2,r2,255
 80008d0:	1080201c 	xori	r2,r2,128
 80008d4:	10bfe004 	addi	r2,r2,-128
 80008d8:	108001d0 	cmplti	r2,r2,7
 80008dc:	103fd31e 	bne	r2,zero,800082c <__alt_data_end+0xfc00082c>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 80008e0:	e6fff804 	addi	sp,fp,-32
 80008e4:	dfc00917 	ldw	ra,36(sp)
 80008e8:	df000817 	ldw	fp,32(sp)
 80008ec:	ddc00717 	ldw	r23,28(sp)
 80008f0:	dd800617 	ldw	r22,24(sp)
 80008f4:	dd400517 	ldw	r21,20(sp)
 80008f8:	dd000417 	ldw	r20,16(sp)
 80008fc:	dcc00317 	ldw	r19,12(sp)
 8000900:	dc800217 	ldw	r18,8(sp)
 8000904:	dc400117 	ldw	r17,4(sp)
 8000908:	dc000017 	ldw	r16,0(sp)
 800090c:	dec00a04 	addi	sp,sp,40
 8000910:	f800283a 	ret

08000914 <OutGraphicsCharFont2>:

void OutGraphicsCharFont2(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 8000914:	defff204 	addi	sp,sp,-56
 8000918:	dfc00d15 	stw	ra,52(sp)
 800091c:	df000c15 	stw	fp,48(sp)
 8000920:	ddc00b15 	stw	r23,44(sp)
 8000924:	dd800a15 	stw	r22,40(sp)
 8000928:	dd400915 	stw	r21,36(sp)
 800092c:	dd000815 	stw	r20,32(sp)
 8000930:	dcc00715 	stw	r19,28(sp)
 8000934:	dc800615 	stw	r18,24(sp)
 8000938:	dc400515 	stw	r17,20(sp)
 800093c:	dc000415 	stw	r16,16(sp)
 8000940:	df000c04 	addi	fp,sp,48
 8000944:	e13ff415 	stw	r4,-48(fp)
 8000948:	e17ff515 	stw	r5,-44(fp)
 800094c:	e1bff615 	stw	r6,-40(fp)
 8000950:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 8000954:	e53ff417 	ldw	r20,-48(fp)
 8000958:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 800095c:	e0bff617 	ldw	r2,-40(fp)
 8000960:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 8000964:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 8000968:	e0bff417 	ldw	r2,-48(fp)
 800096c:	10bfffcc 	andi	r2,r2,65535
 8000970:	10a0001c 	xori	r2,r2,32768
 8000974:	10a00004 	addi	r2,r2,-32768
 8000978:	1080c808 	cmpgei	r2,r2,800
 800097c:	1000061e 	bne	r2,zero,8000998 <OutGraphicsCharFont2+0x84>
 8000980:	e0bff517 	ldw	r2,-44(fp)
 8000984:	10bfffcc 	andi	r2,r2,65535
 8000988:	10a0001c 	xori	r2,r2,32768
 800098c:	10a00004 	addi	r2,r2,-32768
 8000990:	10807810 	cmplti	r2,r2,480
 8000994:	1000011e 	bne	r2,zero,800099c <OutGraphicsCharFont2+0x88>
		return ;
 8000998:	00003d06 	br	8000a90 <OutGraphicsCharFont2+0x17c>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 800099c:	8805883a 	mov	r2,r17
 80009a0:	10bfffcc 	andi	r2,r2,65535
 80009a4:	10a0001c 	xori	r2,r2,32768
 80009a8:	10a00004 	addi	r2,r2,-32768
 80009ac:	10800810 	cmplti	r2,r2,32
 80009b0:	1000371e 	bne	r2,zero,8000a90 <OutGraphicsCharFont2+0x17c>
 80009b4:	8805883a 	mov	r2,r17
 80009b8:	10bfffcc 	andi	r2,r2,65535
 80009bc:	10a0001c 	xori	r2,r2,32768
 80009c0:	10a00004 	addi	r2,r2,-32768
 80009c4:	10801fc8 	cmpgei	r2,r2,127
 80009c8:	1000311e 	bne	r2,zero,8000a90 <OutGraphicsCharFont2+0x17c>
		theC = theC - 0x20 ;
 80009cc:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(14); row ++) {
 80009d0:	0021883a 	mov	r16,zero
 80009d4:	00002806 	br	8000a78 <OutGraphicsCharFont2+0x164>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font10x14[theC][row] ;
 80009d8:	00820074 	movhi	r2,2049
 80009dc:	1096fd84 	addi	r2,r2,23542
 80009e0:	88c003a4 	muli	r3,r17,14
 80009e4:	1c07883a 	add	r3,r3,r16
 80009e8:	18c7883a 	add	r3,r3,r3
 80009ec:	10c5883a 	add	r2,r2,r3
 80009f0:	1080000b 	ldhu	r2,0(r2)
 80009f4:	15bfffcc 	andi	r22,r2,65535
			BitMask = 1 << 9 ;
 80009f8:	04c08004 	movi	r19,512
			for(column = 0; (char)(column) < (char)(10); column ++) {
 80009fc:	0025883a 	mov	r18,zero
 8000a00:	00001606 	br	8000a5c <OutGraphicsCharFont2+0x148>
				// if a pixel in the character display it
				if((pixels & BitMask))
 8000a04:	b4c4703a 	and	r2,r22,r19
 8000a08:	10000926 	beq	r2,zero,8000a30 <OutGraphicsCharFont2+0x11c>
					WriteAPixel(theX+column, theY+row, theColour) ;
 8000a0c:	a489883a 	add	r4,r20,r18
 8000a10:	ac07883a 	add	r3,r21,r16
 8000a14:	b8803fcc 	andi	r2,r23,255
 8000a18:	1080201c 	xori	r2,r2,128
 8000a1c:	10bfe004 	addi	r2,r2,-128
 8000a20:	180b883a 	mov	r5,r3
 8000a24:	100d883a 	mov	r6,r2
 8000a28:	80001f80 	call	80001f8 <WriteAPixel>
 8000a2c:	00000906 	br	8000a54 <OutGraphicsCharFont2+0x140>
				else {
					if(Erase == 1)
 8000a30:	e0800317 	ldw	r2,12(fp)
 8000a34:	10800058 	cmpnei	r2,r2,1
 8000a38:	1000061e 	bne	r2,zero,8000a54 <OutGraphicsCharFont2+0x140>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8000a3c:	a487883a 	add	r3,r20,r18
 8000a40:	ac05883a 	add	r2,r21,r16
 8000a44:	1809883a 	mov	r4,r3
 8000a48:	100b883a 	mov	r5,r2
 8000a4c:	e1bff717 	ldw	r6,-36(fp)
 8000a50:	80001f80 	call	80001f8 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 8000a54:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(14); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font10x14[theC][row] ;
			BitMask = 1 << 9 ;
			for(column = 0; (char)(column) < (char)(10); column ++) {
 8000a58:	94800044 	addi	r18,r18,1
 8000a5c:	9005883a 	mov	r2,r18
 8000a60:	10803fcc 	andi	r2,r2,255
 8000a64:	1080201c 	xori	r2,r2,128
 8000a68:	10bfe004 	addi	r2,r2,-128
 8000a6c:	10800290 	cmplti	r2,r2,10
 8000a70:	103fe41e 	bne	r2,zero,8000a04 <__alt_data_end+0xfc000a04>
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
		return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(14); row ++) {
 8000a74:	84000044 	addi	r16,r16,1
 8000a78:	8005883a 	mov	r2,r16
 8000a7c:	10803fcc 	andi	r2,r2,255
 8000a80:	1080201c 	xori	r2,r2,128
 8000a84:	10bfe004 	addi	r2,r2,-128
 8000a88:	10800390 	cmplti	r2,r2,14
 8000a8c:	103fd21e 	bne	r2,zero,80009d8 <__alt_data_end+0xfc0009d8>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000a90:	e6fff804 	addi	sp,fp,-32
 8000a94:	dfc00917 	ldw	ra,36(sp)
 8000a98:	df000817 	ldw	fp,32(sp)
 8000a9c:	ddc00717 	ldw	r23,28(sp)
 8000aa0:	dd800617 	ldw	r22,24(sp)
 8000aa4:	dd400517 	ldw	r21,20(sp)
 8000aa8:	dd000417 	ldw	r20,16(sp)
 8000aac:	dcc00317 	ldw	r19,12(sp)
 8000ab0:	dc800217 	ldw	r18,8(sp)
 8000ab4:	dc400117 	ldw	r17,4(sp)
 8000ab8:	dc000017 	ldw	r16,0(sp)
 8000abc:	dec00a04 	addi	sp,sp,40
 8000ac0:	f800283a 	ret

08000ac4 <DrawString>:
/*
 * Fucntion to Draw a string of a given font size
 * Takes in a position, color background color, string, and font size
 *
 */
void DrawString(int x,int y, int colour, int background, char* string, int font, int erase){
 8000ac4:	defff704 	addi	sp,sp,-36
 8000ac8:	dfc00815 	stw	ra,32(sp)
 8000acc:	df000715 	stw	fp,28(sp)
 8000ad0:	df000704 	addi	fp,sp,28
 8000ad4:	e13ffc15 	stw	r4,-16(fp)
 8000ad8:	e17ffd15 	stw	r5,-12(fp)
 8000adc:	e1bffe15 	stw	r6,-8(fp)
 8000ae0:	e1ffff15 	stw	r7,-4(fp)
	int i;
	if(font==1){
 8000ae4:	e0800317 	ldw	r2,12(fp)
 8000ae8:	10800058 	cmpnei	r2,r2,1
 8000aec:	1000201e 	bne	r2,zero,8000b70 <DrawString+0xac>
		for(i=0; string[i] != '\0';i++){
 8000af0:	e03ffb15 	stw	zero,-20(fp)
 8000af4:	00001506 	br	8000b4c <DrawString+0x88>
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
 8000af8:	e0bffb17 	ldw	r2,-20(fp)
 8000afc:	e0c00217 	ldw	r3,8(fp)
 8000b00:	1885883a 	add	r2,r3,r2
 8000b04:	10800003 	ldbu	r2,0(r2)
 8000b08:	10803fcc 	andi	r2,r2,255
 8000b0c:	1080201c 	xori	r2,r2,128
 8000b10:	10bfe004 	addi	r2,r2,-128
 8000b14:	d8800015 	stw	r2,0(sp)
 8000b18:	e0800417 	ldw	r2,16(fp)
 8000b1c:	d8800115 	stw	r2,4(sp)
 8000b20:	e13ffc17 	ldw	r4,-16(fp)
 8000b24:	e17ffd17 	ldw	r5,-12(fp)
 8000b28:	e1bffe17 	ldw	r6,-8(fp)
 8000b2c:	e1ffff17 	ldw	r7,-4(fp)
 8000b30:	80007680 	call	8000768 <OutGraphicsCharFont1>
			x += 10;
 8000b34:	e0bffc17 	ldw	r2,-16(fp)
 8000b38:	10800284 	addi	r2,r2,10
 8000b3c:	e0bffc15 	stw	r2,-16(fp)
 *
 */
void DrawString(int x,int y, int colour, int background, char* string, int font, int erase){
	int i;
	if(font==1){
		for(i=0; string[i] != '\0';i++){
 8000b40:	e0bffb17 	ldw	r2,-20(fp)
 8000b44:	10800044 	addi	r2,r2,1
 8000b48:	e0bffb15 	stw	r2,-20(fp)
 8000b4c:	e0bffb17 	ldw	r2,-20(fp)
 8000b50:	e0c00217 	ldw	r3,8(fp)
 8000b54:	1885883a 	add	r2,r3,r2
 8000b58:	10800003 	ldbu	r2,0(r2)
 8000b5c:	10803fcc 	andi	r2,r2,255
 8000b60:	1080201c 	xori	r2,r2,128
 8000b64:	10bfe004 	addi	r2,r2,-128
 8000b68:	103fe31e 	bne	r2,zero,8000af8 <__alt_data_end+0xfc000af8>
 8000b6c:	00002206 	br	8000bf8 <DrawString+0x134>
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
	else if (font ==2){
 8000b70:	e0800317 	ldw	r2,12(fp)
 8000b74:	10800098 	cmpnei	r2,r2,2
 8000b78:	10001f1e 	bne	r2,zero,8000bf8 <DrawString+0x134>
		for(i=0; string[i] != '\0';i++){
 8000b7c:	e03ffb15 	stw	zero,-20(fp)
 8000b80:	00001506 	br	8000bd8 <DrawString+0x114>
			OutGraphicsCharFont2(x,y,colour,background,string[i],erase);
 8000b84:	e0bffb17 	ldw	r2,-20(fp)
 8000b88:	e0c00217 	ldw	r3,8(fp)
 8000b8c:	1885883a 	add	r2,r3,r2
 8000b90:	10800003 	ldbu	r2,0(r2)
 8000b94:	10803fcc 	andi	r2,r2,255
 8000b98:	1080201c 	xori	r2,r2,128
 8000b9c:	10bfe004 	addi	r2,r2,-128
 8000ba0:	d8800015 	stw	r2,0(sp)
 8000ba4:	e0800417 	ldw	r2,16(fp)
 8000ba8:	d8800115 	stw	r2,4(sp)
 8000bac:	e13ffc17 	ldw	r4,-16(fp)
 8000bb0:	e17ffd17 	ldw	r5,-12(fp)
 8000bb4:	e1bffe17 	ldw	r6,-8(fp)
 8000bb8:	e1ffff17 	ldw	r7,-4(fp)
 8000bbc:	80009140 	call	8000914 <OutGraphicsCharFont2>
			x += 10;
 8000bc0:	e0bffc17 	ldw	r2,-16(fp)
 8000bc4:	10800284 	addi	r2,r2,10
 8000bc8:	e0bffc15 	stw	r2,-16(fp)
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
	else if (font ==2){
		for(i=0; string[i] != '\0';i++){
 8000bcc:	e0bffb17 	ldw	r2,-20(fp)
 8000bd0:	10800044 	addi	r2,r2,1
 8000bd4:	e0bffb15 	stw	r2,-20(fp)
 8000bd8:	e0bffb17 	ldw	r2,-20(fp)
 8000bdc:	e0c00217 	ldw	r3,8(fp)
 8000be0:	1885883a 	add	r2,r3,r2
 8000be4:	10800003 	ldbu	r2,0(r2)
 8000be8:	10803fcc 	andi	r2,r2,255
 8000bec:	1080201c 	xori	r2,r2,128
 8000bf0:	10bfe004 	addi	r2,r2,-128
 8000bf4:	103fe31e 	bne	r2,zero,8000b84 <__alt_data_end+0xfc000b84>
			OutGraphicsCharFont2(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
}
 8000bf8:	e037883a 	mov	sp,fp
 8000bfc:	dfc00117 	ldw	ra,4(sp)
 8000c00:	df000017 	ldw	fp,0(sp)
 8000c04:	dec00204 	addi	sp,sp,8
 8000c08:	f800283a 	ret

08000c0c <putCharTouch>:

/*******************************************************************************************
 * This function writes a single pixel to the x,y coords specified using the specified colour
 * Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 ********************************************************************************************/
int putCharTouch(char c){
 8000c0c:	defffe04 	addi	sp,sp,-8
 8000c10:	df000115 	stw	fp,4(sp)
 8000c14:	df000104 	addi	fp,sp,4
 8000c18:	2005883a 	mov	r2,r4
 8000c1c:	e0bfff05 	stb	r2,-4(fp)
	// Wait for TX bit in status register to turn 1 (means transmit is empty)
	while((Touchscreen_Status & 0x02) != 0x02);
 8000c20:	0001883a 	nop
 8000c24:	00a10034 	movhi	r2,33792
 8000c28:	10808c04 	addi	r2,r2,560
 8000c2c:	10800003 	ldbu	r2,0(r2)
 8000c30:	10803fcc 	andi	r2,r2,255
 8000c34:	1080008c 	andi	r2,r2,2
 8000c38:	103ffa26 	beq	r2,zero,8000c24 <__alt_data_end+0xfc000c24>
	// Send the data to TX (reduce to 8 bits)
	Touchscreen_TxData = c;
 8000c3c:	00a10034 	movhi	r2,33792
 8000c40:	10808c84 	addi	r2,r2,562
 8000c44:	e0ffff03 	ldbu	r3,-4(fp)
 8000c48:	10c00005 	stb	r3,0(r2)
	return c & 0xFF;
 8000c4c:	e0bfff07 	ldb	r2,-4(fp)
 8000c50:	10803fcc 	andi	r2,r2,255
}
 8000c54:	e037883a 	mov	sp,fp
 8000c58:	df000017 	ldw	fp,0(sp)
 8000c5c:	dec00104 	addi	sp,sp,4
 8000c60:	f800283a 	ret

08000c64 <getCharTouch>:

int getCharTouch(void)
{
 8000c64:	deffff04 	addi	sp,sp,-4
 8000c68:	df000015 	stw	fp,0(sp)
 8000c6c:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received character from 6850 RxData register.
	while ((Touchscreen_Status & 0x01) != 0x01);
 8000c70:	0001883a 	nop
 8000c74:	00a10034 	movhi	r2,33792
 8000c78:	10808c04 	addi	r2,r2,560
 8000c7c:	10800003 	ldbu	r2,0(r2)
 8000c80:	10803fcc 	andi	r2,r2,255
 8000c84:	1080004c 	andi	r2,r2,1
 8000c88:	103ffa26 	beq	r2,zero,8000c74 <__alt_data_end+0xfc000c74>
	return Touchscreen_RxData;
 8000c8c:	00a10034 	movhi	r2,33792
 8000c90:	10808c84 	addi	r2,r2,562
 8000c94:	10800003 	ldbu	r2,0(r2)
 8000c98:	10803fcc 	andi	r2,r2,255
}
 8000c9c:	e037883a 	mov	sp,fp
 8000ca0:	df000017 	ldw	fp,0(sp)
 8000ca4:	dec00104 	addi	sp,sp,4
 8000ca8:	f800283a 	ret

08000cac <Init_Touch>:

/*****************************************************************************
 ** Initialise touch screen controller
 *****************************************************************************/
void Init_Touch(void)
{
 8000cac:	defffe04 	addi	sp,sp,-8
 8000cb0:	dfc00115 	stw	ra,4(sp)
 8000cb4:	df000015 	stw	fp,0(sp)
 8000cb8:	d839883a 	mov	fp,sp
	// Program 6850 and baud rate generator to communicate with touchscreen
	// send touchscreen controller an "enable touch" command

	// Divide by 16 clock, RTS Low, 8 bits of data, no parity,
	// 1 stop bit, transmitter interrupt disabled
	Touchscreen_Control = 0x15;
 8000cbc:	00a10034 	movhi	r2,33792
 8000cc0:	10808c04 	addi	r2,r2,560
 8000cc4:	00c00544 	movi	r3,21
 8000cc8:	10c00005 	stb	r3,0(r2)
	// 9600 BAUD
	Touchscreen_Baud = 0x05;
 8000ccc:	00a10034 	movhi	r2,33792
 8000cd0:	10808d04 	addi	r2,r2,564
 8000cd4:	00c00144 	movi	r3,5
 8000cd8:	10c00005 	stb	r3,0(r2)

	// slight delay to process
	usleep(10000);
 8000cdc:	0109c404 	movi	r4,10000
 8000ce0:	80136740 	call	8013674 <usleep>

	// Send TOUCH_ENABLE command
	putCharTouch(0x55);
 8000ce4:	01001544 	movi	r4,85
 8000ce8:	8000c0c0 	call	8000c0c <putCharTouch>
	putCharTouch(0x01);
 8000cec:	01000044 	movi	r4,1
 8000cf0:	8000c0c0 	call	8000c0c <putCharTouch>
	putCharTouch(0x12);
 8000cf4:	01000484 	movi	r4,18
 8000cf8:	8000c0c0 	call	8000c0c <putCharTouch>

}
 8000cfc:	e037883a 	mov	sp,fp
 8000d00:	dfc00117 	ldw	ra,4(sp)
 8000d04:	df000017 	ldw	fp,0(sp)
 8000d08:	dec00204 	addi	sp,sp,8
 8000d0c:	f800283a 	ret

08000d10 <ScreenTouched>:

/*****************************************************************************
 ** test if screen touched
 *****************************************************************************/
int ScreenTouched( void )
{
 8000d10:	deffff04 	addi	sp,sp,-4
 8000d14:	df000015 	stw	fp,0(sp)
 8000d18:	d839883a 	mov	fp,sp
	// return TRUE if any data received from 6850 connected to touchscreen
	// or FALSE otherwise

	return (Touchscreen_RxData == 0x80);
 8000d1c:	00a10034 	movhi	r2,33792
 8000d20:	10808c84 	addi	r2,r2,562
 8000d24:	10800003 	ldbu	r2,0(r2)
 8000d28:	10803fcc 	andi	r2,r2,255
 8000d2c:	10802020 	cmpeqi	r2,r2,128
 8000d30:	10803fcc 	andi	r2,r2,255
}
 8000d34:	e037883a 	mov	sp,fp
 8000d38:	df000017 	ldw	fp,0(sp)
 8000d3c:	dec00104 	addi	sp,sp,4
 8000d40:	f800283a 	ret

08000d44 <WaitForTouch>:

/*****************************************************************************
 ** wait for screen to be touched
 *****************************************************************************/
void WaitForTouch()
{
 8000d44:	defffe04 	addi	sp,sp,-8
 8000d48:	dfc00115 	stw	ra,4(sp)
 8000d4c:	df000015 	stw	fp,0(sp)
 8000d50:	d839883a 	mov	fp,sp
	while(!ScreenTouched()){
 8000d54:	0001883a 	nop
 8000d58:	8000d100 	call	8000d10 <ScreenTouched>
 8000d5c:	103ffe26 	beq	r2,zero,8000d58 <__alt_data_end+0xfc000d58>
	}
}
 8000d60:	e037883a 	mov	sp,fp
 8000d64:	dfc00117 	ldw	ra,4(sp)
 8000d68:	df000017 	ldw	fp,0(sp)
 8000d6c:	dec00204 	addi	sp,sp,8
 8000d70:	f800283a 	ret

08000d74 <GetBasePress>:

/*****************************************************************************
 * This function waits for a touch screen press event and returns X,Y coord
 *****************************************************************************/

Point GetBasePress(void){
 8000d74:	defff704 	addi	sp,sp,-36
 8000d78:	dfc00815 	stw	ra,32(sp)
 8000d7c:	df000715 	stw	fp,28(sp)
 8000d80:	df000704 	addi	fp,sp,28
	Point p1;
	int packets[4];
	char command;

	//Wait for the touchscreen to return 0x80
	WaitForTouch();
 8000d84:	8000d440 	call	8000d44 <WaitForTouch>

	//Get the 4 ints for the position
	int i;
	for(i = 0; i < 4; i++){
 8000d88:	e03ff915 	stw	zero,-28(fp)
 8000d8c:	00000c06 	br	8000dc0 <GetBasePress+0x4c>
		packets[i] = getCharTouch();
 8000d90:	8000c640 	call	8000c64 <getCharTouch>
 8000d94:	1007883a 	mov	r3,r2
 8000d98:	e0bff917 	ldw	r2,-28(fp)
 8000d9c:	1085883a 	add	r2,r2,r2
 8000da0:	1085883a 	add	r2,r2,r2
 8000da4:	e13ff904 	addi	r4,fp,-28
 8000da8:	2085883a 	add	r2,r4,r2
 8000dac:	10800304 	addi	r2,r2,12
 8000db0:	10c00015 	stw	r3,0(r2)
	//Wait for the touchscreen to return 0x80
	WaitForTouch();

	//Get the 4 ints for the position
	int i;
	for(i = 0; i < 4; i++){
 8000db4:	e0bff917 	ldw	r2,-28(fp)
 8000db8:	10800044 	addi	r2,r2,1
 8000dbc:	e0bff915 	stw	r2,-28(fp)
 8000dc0:	e0bff917 	ldw	r2,-28(fp)
 8000dc4:	10800110 	cmplti	r2,r2,4
 8000dc8:	103ff11e 	bne	r2,zero,8000d90 <__alt_data_end+0xfc000d90>
		packets[i] = getCharTouch();
	}

	//combine the two packets for each int into the actual position value
	p1.x = (packets[1] << 7) | packets[0];
 8000dcc:	e0bffd17 	ldw	r2,-12(fp)
 8000dd0:	100691fa 	slli	r3,r2,7
 8000dd4:	e0bffc17 	ldw	r2,-16(fp)
 8000dd8:	1884b03a 	or	r2,r3,r2
 8000ddc:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (packets[3] << 7) | packets[2];
 8000de0:	e0bfff17 	ldw	r2,-4(fp)
 8000de4:	100691fa 	slli	r3,r2,7
 8000de8:	e0bffe17 	ldw	r2,-8(fp)
 8000dec:	1884b03a 	or	r2,r3,r2
 8000df0:	e0bffb15 	stw	r2,-20(fp)

	// Map from resolution to pixel
	p1.x = p1.x * 799 / 4095;
 8000df4:	e0bffa17 	ldw	r2,-24(fp)
 8000df8:	10c0c7e4 	muli	r3,r2,799
 8000dfc:	0083ffc4 	movi	r2,4095
 8000e00:	1885283a 	div	r2,r3,r2
 8000e04:	e0bffa15 	stw	r2,-24(fp)
	p1.y = p1.y  * 479 / 4095;
 8000e08:	e0bffb17 	ldw	r2,-20(fp)
 8000e0c:	10c077e4 	muli	r3,r2,479
 8000e10:	0083ffc4 	movi	r2,4095
 8000e14:	1885283a 	div	r2,r3,r2
 8000e18:	e0bffb15 	stw	r2,-20(fp)

	printf("x = %d ", p1.x);
 8000e1c:	e0bffa17 	ldw	r2,-24(fp)
 8000e20:	010200b4 	movhi	r4,2050
 8000e24:	213fa004 	addi	r4,r4,-384
 8000e28:	100b883a 	mov	r5,r2
 8000e2c:	80047c80 	call	80047c8 <printf>
	printf("y = %d\n", p1.y);
 8000e30:	e0bffb17 	ldw	r2,-20(fp)
 8000e34:	010200b4 	movhi	r4,2050
 8000e38:	213fa204 	addi	r4,r4,-376
 8000e3c:	100b883a 	mov	r5,r2
 8000e40:	80047c80 	call	80047c8 <printf>


	return p1;
 8000e44:	e0bffa17 	ldw	r2,-24(fp)
 8000e48:	e0fffb17 	ldw	r3,-20(fp)
 8000e4c:	1009883a 	mov	r4,r2
 8000e50:	180b883a 	mov	r5,r3
}
 8000e54:	2005883a 	mov	r2,r4
 8000e58:	2807883a 	mov	r3,r5
 8000e5c:	e037883a 	mov	sp,fp
 8000e60:	dfc00117 	ldw	ra,4(sp)
 8000e64:	df000017 	ldw	fp,0(sp)
 8000e68:	dec00204 	addi	sp,sp,8
 8000e6c:	f800283a 	ret

08000e70 <Init_RS232>:
#define occupiedMessage '5'
#define freeMessage '2'
#define requestRoomMessage '3'
#define lightChangeMessage 'L'

void Init_RS232(void) {
 8000e70:	defffe04 	addi	sp,sp,-8
 8000e74:	dfc00115 	stw	ra,4(sp)
 8000e78:	df000015 	stw	fp,0(sp)
 8000e7c:	d839883a 	mov	fp,sp
	 * Set up 6850 Control register to utilise a dive by 16 clock.
	 * set RTS low, use 8 bits of data, no parity, 1 stop bit,
	 * transmitter interrupt disabled
	 * program baud rate generator to use 115k baud
	 */
	printf("Initializing control register\n");
 8000e80:	010200b4 	movhi	r4,2050
 8000e84:	213fa404 	addi	r4,r4,-368
 8000e88:	80048dc0 	call	80048dc <puts>
	RS232_Control = 0b00000011;
 8000e8c:	00a10034 	movhi	r2,33792
 8000e90:	10808004 	addi	r2,r2,512
 8000e94:	00c000c4 	movi	r3,3
 8000e98:	10c00005 	stb	r3,0(r2)
	RS232_Control = 0b10010101;
 8000e9c:	00a10034 	movhi	r2,33792
 8000ea0:	10808004 	addi	r2,r2,512
 8000ea4:	00ffe544 	movi	r3,-107
 8000ea8:	10c00005 	stb	r3,0(r2)
	RS232_Baud 	  = 0b00000111; // program for 9600 baud
 8000eac:	00a10034 	movhi	r2,33792
 8000eb0:	10808104 	addi	r2,r2,516
 8000eb4:	00c001c4 	movi	r3,7
 8000eb8:	10c00005 	stb	r3,0(r2)
}
 8000ebc:	e037883a 	mov	sp,fp
 8000ec0:	dfc00117 	ldw	ra,4(sp)
 8000ec4:	df000017 	ldw	fp,0(sp)
 8000ec8:	dec00204 	addi	sp,sp,8
 8000ecc:	f800283a 	ret

08000ed0 <putcharRS232>:


int putcharRS232(char c) {
 8000ed0:	defffd04 	addi	sp,sp,-12
 8000ed4:	df000215 	stw	fp,8(sp)
 8000ed8:	df000204 	addi	fp,sp,8
 8000edc:	2005883a 	mov	r2,r4
 8000ee0:	e0bfff05 	stb	r2,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 8000ee4:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000ee8:	00000606 	br	8000f04 <putcharRS232+0x34>
		read_status_bit = RS232_Status & 0b10;
 8000eec:	00a10034 	movhi	r2,33792
 8000ef0:	10808004 	addi	r2,r2,512
 8000ef4:	10800003 	ldbu	r2,0(r2)
 8000ef8:	10803fcc 	andi	r2,r2,255
 8000efc:	1080008c 	andi	r2,r2,2
 8000f00:	e0bffe15 	stw	r2,-8(fp)

int putcharRS232(char c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000f04:	e0bffe17 	ldw	r2,-8(fp)
 8000f08:	103ff826 	beq	r2,zero,8000eec <__alt_data_end+0xfc000eec>
		read_status_bit = RS232_Status & 0b10;
	}
	RS232_TxData = c;
 8000f0c:	00a10034 	movhi	r2,33792
 8000f10:	10808084 	addi	r2,r2,514
 8000f14:	e0ffff03 	ldbu	r3,-4(fp)
 8000f18:	10c00005 	stb	r3,0(r2)
	return c;
 8000f1c:	e0bfff07 	ldb	r2,-4(fp)
}
 8000f20:	e037883a 	mov	sp,fp
 8000f24:	df000017 	ldw	fp,0(sp)
 8000f28:	dec00104 	addi	sp,sp,4
 8000f2c:	f800283a 	ret

08000f30 <getbitRS232>:

int getbitRS232(void) {
 8000f30:	defffd04 	addi	sp,sp,-12
 8000f34:	df000215 	stw	fp,8(sp)
 8000f38:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8000f3c:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000f40:	00000606 	br	8000f5c <getbitRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 8000f44:	00a10034 	movhi	r2,33792
 8000f48:	10808004 	addi	r2,r2,512
 8000f4c:	10800003 	ldbu	r2,0(r2)
 8000f50:	10803fcc 	andi	r2,r2,255
 8000f54:	1080004c 	andi	r2,r2,1
 8000f58:	e0bffe15 	stw	r2,-8(fp)

int getbitRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000f5c:	e0bffe17 	ldw	r2,-8(fp)
 8000f60:	103ff826 	beq	r2,zero,8000f44 <__alt_data_end+0xfc000f44>
		read_status_bit = RS232_Status & 0b01;
	}
	int character = RS232_RxData & 0b00000001;
 8000f64:	00a10034 	movhi	r2,33792
 8000f68:	10808084 	addi	r2,r2,514
 8000f6c:	10800003 	ldbu	r2,0(r2)
 8000f70:	10803fcc 	andi	r2,r2,255
 8000f74:	1080004c 	andi	r2,r2,1
 8000f78:	e0bfff15 	stw	r2,-4(fp)
	return character;
 8000f7c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000f80:	e037883a 	mov	sp,fp
 8000f84:	df000017 	ldw	fp,0(sp)
 8000f88:	dec00104 	addi	sp,sp,4
 8000f8c:	f800283a 	ret

08000f90 <getcharRS232>:

char getcharRS232(void) {
 8000f90:	defffd04 	addi	sp,sp,-12
 8000f94:	df000215 	stw	fp,8(sp)
 8000f98:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8000f9c:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000fa0:	00000606 	br	8000fbc <getcharRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 8000fa4:	00a10034 	movhi	r2,33792
 8000fa8:	10808004 	addi	r2,r2,512
 8000fac:	10800003 	ldbu	r2,0(r2)
 8000fb0:	10803fcc 	andi	r2,r2,255
 8000fb4:	1080004c 	andi	r2,r2,1
 8000fb8:	e0bffe15 	stw	r2,-8(fp)

char getcharRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000fbc:	e0bffe17 	ldw	r2,-8(fp)
 8000fc0:	103ff826 	beq	r2,zero,8000fa4 <__alt_data_end+0xfc000fa4>
		read_status_bit = RS232_Status & 0b01;
	}
	char character = RS232_RxData;
 8000fc4:	00a10034 	movhi	r2,33792
 8000fc8:	10808084 	addi	r2,r2,514
 8000fcc:	10800003 	ldbu	r2,0(r2)
 8000fd0:	e0bfff05 	stb	r2,-4(fp)
	return character;
 8000fd4:	e0bfff03 	ldbu	r2,-4(fp)
}
 8000fd8:	e037883a 	mov	sp,fp
 8000fdc:	df000017 	ldw	fp,0(sp)
 8000fe0:	dec00104 	addi	sp,sp,4
 8000fe4:	f800283a 	ret

08000fe8 <RS232TestForReceivedData>:

int RS232TestForReceivedData(void) {
 8000fe8:	deffff04 	addi	sp,sp,-4
 8000fec:	df000015 	stw	fp,0(sp)
 8000ff0:	d839883a 	mov	fp,sp
	return RS232_Status & 0b1;
 8000ff4:	00a10034 	movhi	r2,33792
 8000ff8:	10808004 	addi	r2,r2,512
 8000ffc:	10800003 	ldbu	r2,0(r2)
 8001000:	10803fcc 	andi	r2,r2,255
 8001004:	1080004c 	andi	r2,r2,1
}
 8001008:	e037883a 	mov	sp,fp
 800100c:	df000017 	ldw	fp,0(sp)
 8001010:	dec00104 	addi	sp,sp,4
 8001014:	f800283a 	ret

08001018 <GetRangeData>:

int GetRangeData(void) {
 8001018:	defffd04 	addi	sp,sp,-12
 800101c:	dfc00215 	stw	ra,8(sp)
 8001020:	df000115 	stw	fp,4(sp)
 8001024:	df000104 	addi	fp,sp,4
	char received_data;
	received_data = getcharRS232();
 8001028:	8000f900 	call	8000f90 <getcharRS232>
 800102c:	e0bfff05 	stb	r2,-4(fp)
	if(received_data=='5'){
 8001030:	e0bfff07 	ldb	r2,-4(fp)
 8001034:	10800d58 	cmpnei	r2,r2,53
 8001038:	1000021e 	bne	r2,zero,8001044 <GetRangeData+0x2c>
		return 1;
 800103c:	00800044 	movi	r2,1
 8001040:	00000106 	br	8001048 <GetRangeData+0x30>
	}
	return 0;
 8001044:	0005883a 	mov	r2,zero
}
 8001048:	e037883a 	mov	sp,fp
 800104c:	dfc00117 	ldw	ra,4(sp)
 8001050:	df000017 	ldw	fp,0(sp)
 8001054:	dec00204 	addi	sp,sp,8
 8001058:	f800283a 	ret

0800105c <SendRangeRequest>:
void SendRangeRequest(void){
 800105c:	defffe04 	addi	sp,sp,-8
 8001060:	dfc00115 	stw	ra,4(sp)
 8001064:	df000015 	stw	fp,0(sp)
 8001068:	d839883a 	mov	fp,sp
	putcharRS232(updateRoomStatusCommand);
 800106c:	01001884 	movi	r4,98
 8001070:	8000ed00 	call	8000ed0 <putcharRS232>
}
 8001074:	e037883a 	mov	sp,fp
 8001078:	dfc00117 	ldw	ra,4(sp)
 800107c:	df000017 	ldw	fp,0(sp)
 8001080:	dec00204 	addi	sp,sp,8
 8001084:	f800283a 	ret

08001088 <OpenServo>:
void OpenServo(void) {
 8001088:	defffe04 	addi	sp,sp,-8
 800108c:	dfc00115 	stw	ra,4(sp)
 8001090:	df000015 	stw	fp,0(sp)
 8001094:	d839883a 	mov	fp,sp
	putcharRS232(doorOpenCommand);
 8001098:	01001944 	movi	r4,101
 800109c:	8000ed00 	call	8000ed0 <putcharRS232>
}
 80010a0:	e037883a 	mov	sp,fp
 80010a4:	dfc00117 	ldw	ra,4(sp)
 80010a8:	df000017 	ldw	fp,0(sp)
 80010ac:	dec00204 	addi	sp,sp,8
 80010b0:	f800283a 	ret

080010b4 <CloseServo>:

void CloseServo(void) {
 80010b4:	defffe04 	addi	sp,sp,-8
 80010b8:	dfc00115 	stw	ra,4(sp)
 80010bc:	df000015 	stw	fp,0(sp)
 80010c0:	d839883a 	mov	fp,sp
	putcharRS232(doorCloseCommand);
 80010c4:	01001984 	movi	r4,102
 80010c8:	8000ed00 	call	8000ed0 <putcharRS232>
}
 80010cc:	e037883a 	mov	sp,fp
 80010d0:	dfc00117 	ldw	ra,4(sp)
 80010d4:	df000017 	ldw	fp,0(sp)
 80010d8:	dec00204 	addi	sp,sp,8
 80010dc:	f800283a 	ret

080010e0 <TurnOnLights>:

void TurnOnLights(void) {
 80010e0:	defffe04 	addi	sp,sp,-8
 80010e4:	dfc00115 	stw	ra,4(sp)
 80010e8:	df000015 	stw	fp,0(sp)
 80010ec:	d839883a 	mov	fp,sp
	putcharRS232(lightOnCommand);
 80010f0:	010018c4 	movi	r4,99
 80010f4:	8000ed00 	call	8000ed0 <putcharRS232>
}
 80010f8:	e037883a 	mov	sp,fp
 80010fc:	dfc00117 	ldw	ra,4(sp)
 8001100:	df000017 	ldw	fp,0(sp)
 8001104:	dec00204 	addi	sp,sp,8
 8001108:	f800283a 	ret

0800110c <TurnOffLights>:

void TurnOffLights(void) {
 800110c:	defffe04 	addi	sp,sp,-8
 8001110:	dfc00115 	stw	ra,4(sp)
 8001114:	df000015 	stw	fp,0(sp)
 8001118:	d839883a 	mov	fp,sp
	putcharRS232(lightOffCommand);
 800111c:	01001904 	movi	r4,100
 8001120:	8000ed00 	call	8000ed0 <putcharRS232>
}
 8001124:	e037883a 	mov	sp,fp
 8001128:	dfc00117 	ldw	ra,4(sp)
 800112c:	df000017 	ldw	fp,0(sp)
 8001130:	dec00204 	addi	sp,sp,8
 8001134:	f800283a 	ret

08001138 <sendTempRequest>:

void sendTempRequest(void){
 8001138:	defffe04 	addi	sp,sp,-8
 800113c:	dfc00115 	stw	ra,4(sp)
 8001140:	df000015 	stw	fp,0(sp)
 8001144:	d839883a 	mov	fp,sp
	printf("Sending Temp Request\n");
 8001148:	010200b4 	movhi	r4,2050
 800114c:	213fac04 	addi	r4,r4,-336
 8001150:	80048dc0 	call	80048dc <puts>
	putcharRS232(tempRequestCommand);
 8001154:	01001a04 	movi	r4,104
 8001158:	8000ed00 	call	8000ed0 <putcharRS232>
}
 800115c:	e037883a 	mov	sp,fp
 8001160:	dfc00117 	ldw	ra,4(sp)
 8001164:	df000017 	ldw	fp,0(sp)
 8001168:	dec00204 	addi	sp,sp,8
 800116c:	f800283a 	ret

08001170 <GetTemp>:

int GetTemp(void){
 8001170:	defffc04 	addi	sp,sp,-16
 8001174:	dfc00315 	stw	ra,12(sp)
 8001178:	df000215 	stw	fp,8(sp)
 800117c:	df000204 	addi	fp,sp,8
	printf("\nGetting temp\n");
 8001180:	010200b4 	movhi	r4,2050
 8001184:	213fb204 	addi	r4,r4,-312
 8001188:	80048dc0 	call	80048dc <puts>
	int tens = getcharRS232()-48;
 800118c:	8000f900 	call	8000f90 <getcharRS232>
 8001190:	10803fcc 	andi	r2,r2,255
 8001194:	1080201c 	xori	r2,r2,128
 8001198:	10bfe004 	addi	r2,r2,-128
 800119c:	10bff404 	addi	r2,r2,-48
 80011a0:	e0bffe15 	stw	r2,-8(fp)
	//printf("tens is %d\n",tens);
	int ones = getcharRS232()-48;
 80011a4:	8000f900 	call	8000f90 <getcharRS232>
 80011a8:	10803fcc 	andi	r2,r2,255
 80011ac:	1080201c 	xori	r2,r2,128
 80011b0:	10bfe004 	addi	r2,r2,-128
 80011b4:	10bff404 	addi	r2,r2,-48
 80011b8:	e0bfff15 	stw	r2,-4(fp)
	//printf("ones is %d\n",ones);
	printf("Temp is %d\n\n",10*tens+ones);
 80011bc:	e0bffe17 	ldw	r2,-8(fp)
 80011c0:	10c002a4 	muli	r3,r2,10
 80011c4:	e0bfff17 	ldw	r2,-4(fp)
 80011c8:	1885883a 	add	r2,r3,r2
 80011cc:	010200b4 	movhi	r4,2050
 80011d0:	213fb604 	addi	r4,r4,-296
 80011d4:	100b883a 	mov	r5,r2
 80011d8:	80047c80 	call	80047c8 <printf>
	return 10*tens+ones;
 80011dc:	e0bffe17 	ldw	r2,-8(fp)
 80011e0:	10c002a4 	muli	r3,r2,10
 80011e4:	e0bfff17 	ldw	r2,-4(fp)
 80011e8:	1885883a 	add	r2,r3,r2
}
 80011ec:	e037883a 	mov	sp,fp
 80011f0:	dfc00117 	ldw	ra,4(sp)
 80011f4:	df000017 	ldw	fp,0(sp)
 80011f8:	dec00204 	addi	sp,sp,8
 80011fc:	f800283a 	ret

08001200 <SendSolved>:

void SendSolved (void){
 8001200:	defffe04 	addi	sp,sp,-8
 8001204:	dfc00115 	stw	ra,4(sp)
 8001208:	df000015 	stw	fp,0(sp)
 800120c:	d839883a 	mov	fp,sp
	putcharRS232(solvedCommand);
 8001210:	01001844 	movi	r4,97
 8001214:	8000ed00 	call	8000ed0 <putcharRS232>
}
 8001218:	e037883a 	mov	sp,fp
 800121c:	dfc00117 	ldw	ra,4(sp)
 8001220:	df000017 	ldw	fp,0(sp)
 8001224:	dec00204 	addi	sp,sp,8
 8001228:	f800283a 	ret

0800122c <putcharBluetooth>:
 * to read or write to data via the RS232 port
 *
 * Refer to 6850 data sheet for details of registers
 */

int putcharBluetooth(int c) {
 800122c:	defffd04 	addi	sp,sp,-12
 8001230:	df000215 	stw	fp,8(sp)
 8001234:	df000204 	addi	fp,sp,8
 8001238:	e13fff15 	stw	r4,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 800123c:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8001240:	00000606 	br	800125c <putcharBluetooth+0x30>
		read_status_bit = RS232_Status & 0b10;
 8001244:	00a10034 	movhi	r2,33792
 8001248:	10808004 	addi	r2,r2,512
 800124c:	10800003 	ldbu	r2,0(r2)
 8001250:	10803fcc 	andi	r2,r2,255
 8001254:	1080008c 	andi	r2,r2,2
 8001258:	e0bffe15 	stw	r2,-8(fp)

int putcharBluetooth(int c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 800125c:	e0bffe17 	ldw	r2,-8(fp)
 8001260:	103ff826 	beq	r2,zero,8001244 <__alt_data_end+0xfc001244>
		read_status_bit = RS232_Status & 0b10;
	}
	RS232_TxData = c;
 8001264:	00a10034 	movhi	r2,33792
 8001268:	10808084 	addi	r2,r2,514
 800126c:	e0ffff17 	ldw	r3,-4(fp)
 8001270:	10c00005 	stb	r3,0(r2)
	//printf("set char %c", c);
	return c;
 8001274:	e0bfff17 	ldw	r2,-4(fp)
}
 8001278:	e037883a 	mov	sp,fp
 800127c:	df000017 	ldw	fp,0(sp)
 8001280:	dec00104 	addi	sp,sp,4
 8001284:	f800283a 	ret

08001288 <getcharBluetooth>:

char getcharBluetooth(void) {
 8001288:	defffd04 	addi	sp,sp,-12
 800128c:	df000215 	stw	fp,8(sp)
 8001290:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8001294:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8001298:	00000606 	br	80012b4 <getcharBluetooth+0x2c>
		read_status_bit = RS232_Status & 0b01;
 800129c:	00a10034 	movhi	r2,33792
 80012a0:	10808004 	addi	r2,r2,512
 80012a4:	10800003 	ldbu	r2,0(r2)
 80012a8:	10803fcc 	andi	r2,r2,255
 80012ac:	1080004c 	andi	r2,r2,1
 80012b0:	e0bffe15 	stw	r2,-8(fp)

char getcharBluetooth(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80012b4:	e0bffe17 	ldw	r2,-8(fp)
 80012b8:	103ff826 	beq	r2,zero,800129c <__alt_data_end+0xfc00129c>
		read_status_bit = RS232_Status & 0b01;
	}
	char character = RS232_RxData;
 80012bc:	00a10034 	movhi	r2,33792
 80012c0:	10808084 	addi	r2,r2,514
 80012c4:	10800003 	ldbu	r2,0(r2)
 80012c8:	e0bfff05 	stb	r2,-4(fp)
	//printf("char %c", character);
	return character;
 80012cc:	e0bfff03 	ldbu	r2,-4(fp)
}
 80012d0:	e037883a 	mov	sp,fp
 80012d4:	df000017 	ldw	fp,0(sp)
 80012d8:	dec00104 	addi	sp,sp,4
 80012dc:	f800283a 	ret

080012e0 <wait>:

void wait(){
 80012e0:	defffd04 	addi	sp,sp,-12
 80012e4:	df000215 	stw	fp,8(sp)
 80012e8:	df000204 	addi	fp,sp,8
	int i=0;
 80012ec:	e03ffe15 	stw	zero,-8(fp)
	while(i<1000){
 80012f0:	00000b06 	br	8001320 <wait+0x40>
		i++;
 80012f4:	e0bffe17 	ldw	r2,-8(fp)
 80012f8:	10800044 	addi	r2,r2,1
 80012fc:	e0bffe15 	stw	r2,-8(fp)

		int j=0;
 8001300:	e03fff15 	stw	zero,-4(fp)
		while(j<1000){
 8001304:	00000306 	br	8001314 <wait+0x34>
			j++;
 8001308:	e0bfff17 	ldw	r2,-4(fp)
 800130c:	10800044 	addi	r2,r2,1
 8001310:	e0bfff15 	stw	r2,-4(fp)
	int i=0;
	while(i<1000){
		i++;

		int j=0;
		while(j<1000){
 8001314:	e0bfff17 	ldw	r2,-4(fp)
 8001318:	1080fa10 	cmplti	r2,r2,1000
 800131c:	103ffa1e 	bne	r2,zero,8001308 <__alt_data_end+0xfc001308>
	return character;
}

void wait(){
	int i=0;
	while(i<1000){
 8001320:	e0bffe17 	ldw	r2,-8(fp)
 8001324:	1080fa10 	cmplti	r2,r2,1000
 8001328:	103ff21e 	bne	r2,zero,80012f4 <__alt_data_end+0xfc0012f4>
		int j=0;
		while(j<1000){
			j++;
		}
	}
}
 800132c:	e037883a 	mov	sp,fp
 8001330:	df000017 	ldw	fp,0(sp)
 8001334:	dec00104 	addi	sp,sp,4
 8001338:	f800283a 	ret

0800133c <writeDataToTx>:

void writeDataToTx(char * data){
 800133c:	defffc04 	addi	sp,sp,-16
 8001340:	dfc00315 	stw	ra,12(sp)
 8001344:	df000215 	stw	fp,8(sp)
 8001348:	df000204 	addi	fp,sp,8
 800134c:	e13fff15 	stw	r4,-4(fp)
	int i;
	printf("Sending %s\n", data);
 8001350:	010200b4 	movhi	r4,2050
 8001354:	213fba04 	addi	r4,r4,-280
 8001358:	e17fff17 	ldw	r5,-4(fp)
 800135c:	80047c80 	call	80047c8 <printf>
	for(i=0; data[i]!=NULL; i++){
 8001360:	e03ffe15 	stw	zero,-8(fp)
 8001364:	00000c06 	br	8001398 <writeDataToTx+0x5c>
		// IORD_8DIRECT(RS232_TxData, data[i]);
		// *RS232_TxData = data[i];
		putcharBluetooth(data[i]);
 8001368:	e0bffe17 	ldw	r2,-8(fp)
 800136c:	e0ffff17 	ldw	r3,-4(fp)
 8001370:	1885883a 	add	r2,r3,r2
 8001374:	10800003 	ldbu	r2,0(r2)
 8001378:	10803fcc 	andi	r2,r2,255
 800137c:	1080201c 	xori	r2,r2,128
 8001380:	10bfe004 	addi	r2,r2,-128
 8001384:	1009883a 	mov	r4,r2
 8001388:	800122c0 	call	800122c <putcharBluetooth>
}

void writeDataToTx(char * data){
	int i;
	printf("Sending %s\n", data);
	for(i=0; data[i]!=NULL; i++){
 800138c:	e0bffe17 	ldw	r2,-8(fp)
 8001390:	10800044 	addi	r2,r2,1
 8001394:	e0bffe15 	stw	r2,-8(fp)
 8001398:	e0bffe17 	ldw	r2,-8(fp)
 800139c:	e0ffff17 	ldw	r3,-4(fp)
 80013a0:	1885883a 	add	r2,r3,r2
 80013a4:	10800003 	ldbu	r2,0(r2)
 80013a8:	10803fcc 	andi	r2,r2,255
 80013ac:	1080201c 	xori	r2,r2,128
 80013b0:	10bfe004 	addi	r2,r2,-128
 80013b4:	103fec1e 	bne	r2,zero,8001368 <__alt_data_end+0xfc001368>
		// IORD_8DIRECT(RS232_TxData, data[i]);
		// *RS232_TxData = data[i];
		putcharBluetooth(data[i]);
	}
}
 80013b8:	e037883a 	mov	sp,fp
 80013bc:	dfc00117 	ldw	ra,4(sp)
 80013c0:	df000017 	ldw	fp,0(sp)
 80013c4:	dec00204 	addi	sp,sp,8
 80013c8:	f800283a 	ret

080013cc <readDataFromTx>:

void readDataFromTx(){
 80013cc:	defff904 	addi	sp,sp,-28
 80013d0:	dfc00615 	stw	ra,24(sp)
 80013d4:	df000515 	stw	fp,20(sp)
 80013d8:	dc000415 	stw	r16,16(sp)
 80013dc:	df000504 	addi	fp,sp,20
 80013e0:	d815883a 	mov	r10,sp
 80013e4:	5021883a 	mov	r16,r10
	int bufferSize = 365;
 80013e8:	02805b44 	movi	r10,365
 80013ec:	e2bffc15 	stw	r10,-16(fp)
	char buffer[bufferSize];
 80013f0:	e2bffc17 	ldw	r10,-16(fp)
 80013f4:	52ffffc4 	addi	r11,r10,-1
 80013f8:	e2fffd15 	stw	r11,-12(fp)
 80013fc:	5017883a 	mov	r11,r10
 8001400:	5811883a 	mov	r8,r11
 8001404:	0013883a 	mov	r9,zero
 8001408:	4016d77a 	srli	r11,r8,29
 800140c:	480a90fa 	slli	r5,r9,3
 8001410:	594ab03a 	or	r5,r11,r5
 8001414:	400890fa 	slli	r4,r8,3
 8001418:	5009883a 	mov	r4,r10
 800141c:	200d883a 	mov	r6,r4
 8001420:	000f883a 	mov	r7,zero
 8001424:	3008d77a 	srli	r4,r6,29
 8001428:	380690fa 	slli	r3,r7,3
 800142c:	20c6b03a 	or	r3,r4,r3
 8001430:	300490fa 	slli	r2,r6,3
 8001434:	5005883a 	mov	r2,r10
 8001438:	108000c4 	addi	r2,r2,3
 800143c:	1004d0ba 	srli	r2,r2,2
 8001440:	1085883a 	add	r2,r2,r2
 8001444:	1085883a 	add	r2,r2,r2
 8001448:	d8b7c83a 	sub	sp,sp,r2
 800144c:	d805883a 	mov	r2,sp
 8001450:	1005883a 	mov	r2,r2
 8001454:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for(i=0; i<bufferSize-1; i++){
 8001458:	e03ffb15 	stw	zero,-20(fp)
 800145c:	00001306 	br	80014ac <readDataFromTx+0xe0>
		buffer[i] = getcharBluetooth();
 8001460:	80012880 	call	8001288 <getcharBluetooth>
 8001464:	1009883a 	mov	r4,r2
 8001468:	e0fffe17 	ldw	r3,-8(fp)
 800146c:	e0bffb17 	ldw	r2,-20(fp)
 8001470:	1885883a 	add	r2,r3,r2
 8001474:	11000005 	stb	r4,0(r2)
		if(buffer[i] == '\n'){
 8001478:	e0fffe17 	ldw	r3,-8(fp)
 800147c:	e0bffb17 	ldw	r2,-20(fp)
 8001480:	1885883a 	add	r2,r3,r2
 8001484:	10800003 	ldbu	r2,0(r2)
 8001488:	10803fcc 	andi	r2,r2,255
 800148c:	1080201c 	xori	r2,r2,128
 8001490:	10bfe004 	addi	r2,r2,-128
 8001494:	10800298 	cmpnei	r2,r2,10
 8001498:	1000011e 	bne	r2,zero,80014a0 <readDataFromTx+0xd4>
			break;
 800149c:	00000706 	br	80014bc <readDataFromTx+0xf0>
void readDataFromTx(){
	int bufferSize = 365;
	char buffer[bufferSize];
	int i;

	for(i=0; i<bufferSize-1; i++){
 80014a0:	e0bffb17 	ldw	r2,-20(fp)
 80014a4:	10800044 	addi	r2,r2,1
 80014a8:	e0bffb15 	stw	r2,-20(fp)
 80014ac:	e0bffc17 	ldw	r2,-16(fp)
 80014b0:	10bfffc4 	addi	r2,r2,-1
 80014b4:	e0fffb17 	ldw	r3,-20(fp)
 80014b8:	18bfe916 	blt	r3,r2,8001460 <__alt_data_end+0xfc001460>
		buffer[i] = getcharBluetooth();
		if(buffer[i] == '\n'){
			break;
		}
	}
	buffer[i] = NULL;
 80014bc:	e0fffe17 	ldw	r3,-8(fp)
 80014c0:	e0bffb17 	ldw	r2,-20(fp)
 80014c4:	1885883a 	add	r2,r3,r2
 80014c8:	10000005 	stb	zero,0(r2)

	i=0;
 80014cc:	e03ffb15 	stw	zero,-20(fp)
	while(buffer[i]!=NULL){
 80014d0:	00000c06 	br	8001504 <readDataFromTx+0x138>
		printf("%c", buffer[i]);
 80014d4:	e0fffe17 	ldw	r3,-8(fp)
 80014d8:	e0bffb17 	ldw	r2,-20(fp)
 80014dc:	1885883a 	add	r2,r3,r2
 80014e0:	10800003 	ldbu	r2,0(r2)
 80014e4:	10803fcc 	andi	r2,r2,255
 80014e8:	1080201c 	xori	r2,r2,128
 80014ec:	10bfe004 	addi	r2,r2,-128
 80014f0:	1009883a 	mov	r4,r2
 80014f4:	800480c0 	call	800480c <putchar>
		i++;
 80014f8:	e0bffb17 	ldw	r2,-20(fp)
 80014fc:	10800044 	addi	r2,r2,1
 8001500:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	buffer[i] = NULL;

	i=0;
	while(buffer[i]!=NULL){
 8001504:	e0fffe17 	ldw	r3,-8(fp)
 8001508:	e0bffb17 	ldw	r2,-20(fp)
 800150c:	1885883a 	add	r2,r3,r2
 8001510:	10800003 	ldbu	r2,0(r2)
 8001514:	10803fcc 	andi	r2,r2,255
 8001518:	1080201c 	xori	r2,r2,128
 800151c:	10bfe004 	addi	r2,r2,-128
 8001520:	103fec1e 	bne	r2,zero,80014d4 <__alt_data_end+0xfc0014d4>
		printf("%c", buffer[i]);
		i++;
	}
	printf("\n");
 8001524:	01000284 	movi	r4,10
 8001528:	800480c0 	call	800480c <putchar>
 800152c:	8037883a 	mov	sp,r16
}
 8001530:	e6ffff04 	addi	sp,fp,-4
 8001534:	dfc00217 	ldw	ra,8(sp)
 8001538:	df000117 	ldw	fp,4(sp)
 800153c:	dc000017 	ldw	r16,0(sp)
 8001540:	dec00304 	addi	sp,sp,12
 8001544:	f800283a 	ret

08001548 <initBluetooth>:

void initBluetooth(){
 8001548:	defffe04 	addi	sp,sp,-8
 800154c:	dfc00115 	stw	ra,4(sp)
 8001550:	df000015 	stw	fp,0(sp)
 8001554:	d839883a 	mov	fp,sp
	printf("Initializing bluetooth control register\n");
 8001558:	010200b4 	movhi	r4,2050
 800155c:	213fbd04 	addi	r4,r4,-268
 8001560:	80048dc0 	call	80048dc <puts>
	RS232_Control = 0b00000011;
 8001564:	00a10034 	movhi	r2,33792
 8001568:	10808004 	addi	r2,r2,512
 800156c:	00c000c4 	movi	r3,3
 8001570:	10c00005 	stb	r3,0(r2)
	RS232_Control = 0b10010101;
 8001574:	00a10034 	movhi	r2,33792
 8001578:	10808004 	addi	r2,r2,512
 800157c:	00ffe544 	movi	r3,-107
 8001580:	10c00005 	stb	r3,0(r2)
	RS232_Baud = 0b00000001;
 8001584:	00a10034 	movhi	r2,33792
 8001588:	10808104 	addi	r2,r2,516
 800158c:	00c00044 	movi	r3,1
 8001590:	10c00005 	stb	r3,0(r2)
}
 8001594:	e037883a 	mov	sp,fp
 8001598:	dfc00117 	ldw	ra,4(sp)
 800159c:	df000017 	ldw	fp,0(sp)
 80015a0:	dec00204 	addi	sp,sp,8
 80015a4:	f800283a 	ret

080015a8 <enterCommandMode>:

void enterCommandMode(){
 80015a8:	defffe04 	addi	sp,sp,-8
 80015ac:	dfc00115 	stw	ra,4(sp)
 80015b0:	df000015 	stw	fp,0(sp)
 80015b4:	d839883a 	mov	fp,sp
	writeDataToTx("$$$");
 80015b8:	010200b4 	movhi	r4,2050
 80015bc:	213fc704 	addi	r4,r4,-228
 80015c0:	800133c0 	call	800133c <writeDataToTx>
	getcharBluetooth(); //pull garbage value
 80015c4:	80012880 	call	8001288 <getcharBluetooth>
}
 80015c8:	e037883a 	mov	sp,fp
 80015cc:	dfc00117 	ldw	ra,4(sp)
 80015d0:	df000017 	ldw	fp,0(sp)
 80015d4:	dec00204 	addi	sp,sp,8
 80015d8:	f800283a 	ret

080015dc <reset>:

void reset(){
 80015dc:	defffe04 	addi	sp,sp,-8
 80015e0:	dfc00115 	stw	ra,4(sp)
 80015e4:	df000015 	stw	fp,0(sp)
 80015e8:	d839883a 	mov	fp,sp
	writeDataToTx("SF,1\r\n");
 80015ec:	010200b4 	movhi	r4,2050
 80015f0:	213fc804 	addi	r4,r4,-224
 80015f4:	800133c0 	call	800133c <writeDataToTx>
}
 80015f8:	e037883a 	mov	sp,fp
 80015fc:	dfc00117 	ldw	ra,4(sp)
 8001600:	df000017 	ldw	fp,0(sp)
 8001604:	dec00204 	addi	sp,sp,8
 8001608:	f800283a 	ret

0800160c <setAuthenticationMode>:

void setAuthenticationMode(){
 800160c:	defffe04 	addi	sp,sp,-8
 8001610:	dfc00115 	stw	ra,4(sp)
 8001614:	df000015 	stw	fp,0(sp)
 8001618:	d839883a 	mov	fp,sp
	writeDataToTx("SA,4\r\n");
 800161c:	010200b4 	movhi	r4,2050
 8001620:	213fca04 	addi	r4,r4,-216
 8001624:	800133c0 	call	800133c <writeDataToTx>
}
 8001628:	e037883a 	mov	sp,fp
 800162c:	dfc00117 	ldw	ra,4(sp)
 8001630:	df000017 	ldw	fp,0(sp)
 8001634:	dec00204 	addi	sp,sp,8
 8001638:	f800283a 	ret

0800163c <name>:

void name(char * newName){
 800163c:	defffd04 	addi	sp,sp,-12
 8001640:	dfc00215 	stw	ra,8(sp)
 8001644:	df000115 	stw	fp,4(sp)
 8001648:	df000104 	addi	fp,sp,4
 800164c:	e13fff15 	stw	r4,-4(fp)
	// RS232_TxData = "SN," + newName + "\r\n";
	writeDataToTx("SN,group14-Slave\r\n");
 8001650:	010200b4 	movhi	r4,2050
 8001654:	213fcc04 	addi	r4,r4,-208
 8001658:	800133c0 	call	800133c <writeDataToTx>
}
 800165c:	e037883a 	mov	sp,fp
 8001660:	dfc00117 	ldw	ra,4(sp)
 8001664:	df000017 	ldw	fp,0(sp)
 8001668:	dec00204 	addi	sp,sp,8
 800166c:	f800283a 	ret

08001670 <setPassword>:

void setPassword(char * newPassword){
 8001670:	defffd04 	addi	sp,sp,-12
 8001674:	dfc00215 	stw	ra,8(sp)
 8001678:	df000115 	stw	fp,4(sp)
 800167c:	df000104 	addi	fp,sp,4
 8001680:	e13fff15 	stw	r4,-4(fp)
	writeDataToTx("SP,1414\r\n");
 8001684:	010200b4 	movhi	r4,2050
 8001688:	213fd104 	addi	r4,r4,-188
 800168c:	800133c0 	call	800133c <writeDataToTx>
}
 8001690:	e037883a 	mov	sp,fp
 8001694:	dfc00117 	ldw	ra,4(sp)
 8001698:	df000017 	ldw	fp,0(sp)
 800169c:	dec00204 	addi	sp,sp,8
 80016a0:	f800283a 	ret

080016a4 <AttemptBluetoothConnection>:

void AttemptBluetoothConnection(){
 80016a4:	defffe04 	addi	sp,sp,-8
 80016a8:	dfc00115 	stw	ra,4(sp)
 80016ac:	df000015 	stw	fp,0(sp)
 80016b0:	d839883a 	mov	fp,sp
	wait();wait();
 80016b4:	80012e00 	call	80012e0 <wait>
 80016b8:	80012e00 	call	80012e0 <wait>
	initBluetooth();
 80016bc:	80015480 	call	8001548 <initBluetooth>

	wait();wait();
 80016c0:	80012e00 	call	80012e0 <wait>
 80016c4:	80012e00 	call	80012e0 <wait>
	enterCommandMode();
 80016c8:	80015a80 	call	80015a8 <enterCommandMode>

	wait();wait();
 80016cc:	80012e00 	call	80012e0 <wait>
 80016d0:	80012e00 	call	80012e0 <wait>
	writeDataToTx("C\r\n");
 80016d4:	010200b4 	movhi	r4,2050
 80016d8:	213fd404 	addi	r4,r4,-176
 80016dc:	800133c0 	call	800133c <writeDataToTx>
}
 80016e0:	e037883a 	mov	sp,fp
 80016e4:	dfc00117 	ldw	ra,4(sp)
 80016e8:	df000017 	ldw	fp,0(sp)
 80016ec:	dec00204 	addi	sp,sp,8
 80016f0:	f800283a 	ret

080016f4 <exitCommandMode>:

void exitCommandMode(){
 80016f4:	defffe04 	addi	sp,sp,-8
 80016f8:	dfc00115 	stw	ra,4(sp)
 80016fc:	df000015 	stw	fp,0(sp)
 8001700:	d839883a 	mov	fp,sp
	writeDataToTx("---\r\n");
 8001704:	010200b4 	movhi	r4,2050
 8001708:	213fd504 	addi	r4,r4,-172
 800170c:	800133c0 	call	800133c <writeDataToTx>
}
 8001710:	e037883a 	mov	sp,fp
 8001714:	dfc00117 	ldw	ra,4(sp)
 8001718:	df000017 	ldw	fp,0(sp)
 800171c:	dec00204 	addi	sp,sp,8
 8001720:	f800283a 	ret

08001724 <configureBluetoothDongle>:

int configureBluetoothDongle(){
 8001724:	defffe04 	addi	sp,sp,-8
 8001728:	dfc00115 	stw	ra,4(sp)
 800172c:	df000015 	stw	fp,0(sp)
 8001730:	d839883a 	mov	fp,sp

	wait();wait();
 8001734:	80012e00 	call	80012e0 <wait>
 8001738:	80012e00 	call	80012e0 <wait>
	initBluetooth();
 800173c:	80015480 	call	8001548 <initBluetooth>

	wait();wait();
 8001740:	80012e00 	call	80012e0 <wait>
 8001744:	80012e00 	call	80012e0 <wait>
	enterCommandMode();
 8001748:	80015a80 	call	80015a8 <enterCommandMode>
	readDataFromTx();
 800174c:	80013cc0 	call	80013cc <readDataFromTx>

	wait();wait();
 8001750:	80012e00 	call	80012e0 <wait>
 8001754:	80012e00 	call	80012e0 <wait>
	name("group14");
 8001758:	010200b4 	movhi	r4,2050
 800175c:	213fd704 	addi	r4,r4,-164
 8001760:	800163c0 	call	800163c <name>
	readDataFromTx();
 8001764:	80013cc0 	call	80013cc <readDataFromTx>

	wait();wait();
 8001768:	80012e00 	call	80012e0 <wait>
 800176c:	80012e00 	call	80012e0 <wait>
	setPassword("1414");
 8001770:	010200b4 	movhi	r4,2050
 8001774:	213fd904 	addi	r4,r4,-156
 8001778:	80016700 	call	8001670 <setPassword>
	readDataFromTx();
 800177c:	80013cc0 	call	80013cc <readDataFromTx>

	wait();wait();
 8001780:	80012e00 	call	80012e0 <wait>
 8001784:	80012e00 	call	80012e0 <wait>
	setAuthenticationMode();
 8001788:	800160c0 	call	800160c <setAuthenticationMode>
	readDataFromTx();
 800178c:	80013cc0 	call	80013cc <readDataFromTx>

	wait();wait();
 8001790:	80012e00 	call	80012e0 <wait>
 8001794:	80012e00 	call	80012e0 <wait>
	exitCommandMode();
 8001798:	80016f40 	call	80016f4 <exitCommandMode>
	readDataFromTx();
 800179c:	80013cc0 	call	80013cc <readDataFromTx>

	return 1;
 80017a0:	00800044 	movi	r2,1
}
 80017a4:	e037883a 	mov	sp,fp
 80017a8:	dfc00117 	ldw	ra,4(sp)
 80017ac:	df000017 	ldw	fp,0(sp)
 80017b0:	dec00204 	addi	sp,sp,8
 80017b4:	f800283a 	ret

080017b8 <configureMasterBluetoothDongle>:

void configureMasterBluetoothDongle(){
 80017b8:	defffe04 	addi	sp,sp,-8
 80017bc:	dfc00115 	stw	ra,4(sp)
 80017c0:	df000015 	stw	fp,0(sp)
 80017c4:	d839883a 	mov	fp,sp
	wait();wait();
 80017c8:	80012e00 	call	80012e0 <wait>
 80017cc:	80012e00 	call	80012e0 <wait>
	initBluetooth();
 80017d0:	80015480 	call	8001548 <initBluetooth>

	wait();wait();
 80017d4:	80012e00 	call	80012e0 <wait>
 80017d8:	80012e00 	call	80012e0 <wait>
	enterCommandMode();
 80017dc:	80015a80 	call	80015a8 <enterCommandMode>
	readDataFromTx();
 80017e0:	80013cc0 	call	80013cc <readDataFromTx>
}
 80017e4:	e037883a 	mov	sp,fp
 80017e8:	dfc00117 	ldw	ra,4(sp)
 80017ec:	df000017 	ldw	fp,0(sp)
 80017f0:	dec00204 	addi	sp,sp,8
 80017f4:	f800283a 	ret

080017f8 <timer_0_ISR>:
#include "altera_avalon_timer_regs.h"

int curr_room_num;

void timer_0_ISR(void* context, alt_u32 id)
{
 80017f8:	defffc04 	addi	sp,sp,-16
 80017fc:	dfc00315 	stw	ra,12(sp)
 8001800:	df000215 	stw	fp,8(sp)
 8001804:	df000204 	addi	fp,sp,8
 8001808:	e13ffe15 	stw	r4,-8(fp)
 800180c:	e17fff15 	stw	r5,-4(fp)
	printf("\nStarting Interruppt\n");
 8001810:	010200b4 	movhi	r4,2050
 8001814:	213fdb04 	addi	r4,r4,-148
 8001818:	80048dc0 	call	80048dc <puts>
   // clear irq status in order to prevent retriggering
   IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 800181c:	0007883a 	mov	r3,zero
 8001820:	00882004 	movi	r2,8320
 8001824:	10c00035 	stwio	r3,0(r2)

   	SendRangeRequest();
 8001828:	800105c0 	call	800105c <SendRangeRequest>
   	sendTempRequest();
 800182c:	80011380 	call	8001138 <sendTempRequest>

   printf("Finished Interrupt\n\n");
 8001830:	010200b4 	movhi	r4,2050
 8001834:	213fe104 	addi	r4,r4,-124
 8001838:	80048dc0 	call	80048dc <puts>

}
 800183c:	e037883a 	mov	sp,fp
 8001840:	dfc00117 	ldw	ra,4(sp)
 8001844:	df000017 	ldw	fp,0(sp)
 8001848:	dec00204 	addi	sp,sp,8
 800184c:	f800283a 	ret

08001850 <Init_ISR>:

void Init_ISR(void){
 8001850:	defffd04 	addi	sp,sp,-12
 8001854:	dfc00215 	stw	ra,8(sp)
 8001858:	df000115 	stw	fp,4(sp)
 800185c:	df000104 	addi	fp,sp,4
	printf("INIT ISR \n");
 8001860:	010200b4 	movhi	r4,2050
 8001864:	213fe604 	addi	r4,r4,-104
 8001868:	80048dc0 	call	80048dc <puts>

	//Timer Initialization
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0003);
 800186c:	00c000c4 	movi	r3,3
 8001870:	00882104 	movi	r2,8324
 8001874:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 8001878:	0007883a 	mov	r3,zero
 800187c:	00882004 	movi	r2,8320
 8001880:	10c00035 	stwio	r3,0(r2)

	//Period = X second * 50000000
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0x9f00);
 8001884:	00e7c014 	movui	r3,40704
 8001888:	00882204 	movi	r2,8328
 800188c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x5000);
 8001890:	00d40004 	movi	r3,20480
 8001894:	00882304 	movi	r2,8332
 8001898:	10c00035 	stwio	r3,0(r2)

	//Register ISR for timer event
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, timer_0_ISR, NULL, 0);
 800189c:	d8000015 	stw	zero,0(sp)
 80018a0:	0009883a 	mov	r4,zero
 80018a4:	01400104 	movi	r5,4
 80018a8:	01820034 	movhi	r6,2048
 80018ac:	3185fe04 	addi	r6,r6,6136
 80018b0:	000f883a 	mov	r7,zero
 80018b4:	8012d940 	call	8012d94 <alt_ic_isr_register>

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x0007);
 80018b8:	00c001c4 	movi	r3,7
 80018bc:	00882104 	movi	r2,8324
 80018c0:	10c00035 	stwio	r3,0(r2)
}
 80018c4:	e037883a 	mov	sp,fp
 80018c8:	dfc00117 	ldw	ra,4(sp)
 80018cc:	df000017 	ldw	fp,0(sp)
 80018d0:	dec00204 	addi	sp,sp,8
 80018d4:	f800283a 	ret

080018d8 <sendAndGetTemp>:

void sendAndGetTemp (void){
 80018d8:	deffff04 	addi	sp,sp,-4
 80018dc:	df000015 	stw	fp,0(sp)
 80018e0:	d839883a 	mov	fp,sp
		else if (roomArray[k].requested == 1 && roomArray[k].in_use==0) {
			RequestOpenDisplay(k +1);
		}
	}
	PrintNumbers(curr_room_num);*/
}
 80018e4:	e037883a 	mov	sp,fp
 80018e8:	df000017 	ldw	fp,0(sp)
 80018ec:	dec00104 	addi	sp,sp,4
 80018f0:	f800283a 	ret

080018f4 <Wifi_Init>:
#define Wifi_TxData (*(volatile unsigned char *)(0x84000212))
#define Wifi_RxData (*(volatile unsigned char *)(0x84000212))
#define Wifi_Baud (*(volatile unsigned char *)(0x84000214))

// Wi-Fi and baud rate initialization 
void Wifi_Init(void) {
 80018f4:	deffff04 	addi	sp,sp,-4
 80018f8:	df000015 	stw	fp,0(sp)
 80018fc:	d839883a 	mov	fp,sp

	Wifi_Control = 0x03;	// Reset the wifi control 
 8001900:	00a10034 	movhi	r2,33792
 8001904:	10808404 	addi	r2,r2,528
 8001908:	00c000c4 	movi	r3,3
 800190c:	10c00005 	stb	r3,0(r2)
	Wifi_Control = 0x15;	// Setup the wifi control 
 8001910:	00a10034 	movhi	r2,33792
 8001914:	10808404 	addi	r2,r2,528
 8001918:	00c00544 	movi	r3,21
 800191c:	10c00005 	stb	r3,0(r2)
	Wifi_Baud = 0x01;	// Program baud rate generator to use 115k baud.
 8001920:	00a10034 	movhi	r2,33792
 8001924:	10808504 	addi	r2,r2,532
 8001928:	00c00044 	movi	r3,1
 800192c:	10c00005 	stb	r3,0(r2)


}
 8001930:	e037883a 	mov	sp,fp
 8001934:	df000017 	ldw	fp,0(sp)
 8001938:	dec00104 	addi	sp,sp,4
 800193c:	f800283a 	ret

08001940 <Wifi_Send_Char>:

// Sends a single character to the Wi-Fi chip.
int Wifi_Send_Char(int char_data) {
 8001940:	defffe04 	addi	sp,sp,-8
 8001944:	df000115 	stw	fp,4(sp)
 8001948:	df000104 	addi	fp,sp,4
 800194c:	e13fff15 	stw	r4,-4(fp)
	// Poll Tx bit in Wi-Fi status register and await for it to become '1'
	while (!(0x02 & Wifi_Status)) {
 8001950:	0001883a 	nop
 8001954:	00a10034 	movhi	r2,33792
 8001958:	10808404 	addi	r2,r2,528
 800195c:	10800003 	ldbu	r2,0(r2)
 8001960:	1080008c 	andi	r2,r2,2
 8001964:	10803fcc 	andi	r2,r2,255
 8001968:	103ffa26 	beq	r2,zero,8001954 <__alt_data_end+0xfc001954>
	};

	// Write the character to the Wi-Fi TxData register.
	Wifi_TxData = char_data;
 800196c:	00a10034 	movhi	r2,33792
 8001970:	10808484 	addi	r2,r2,530
 8001974:	e0ffff17 	ldw	r3,-4(fp)
 8001978:	10c00005 	stb	r3,0(r2)
	return char_data;
 800197c:	e0bfff17 	ldw	r2,-4(fp)
}
 8001980:	e037883a 	mov	sp,fp
 8001984:	df000017 	ldw	fp,0(sp)
 8001988:	dec00104 	addi	sp,sp,4
 800198c:	f800283a 	ret

08001990 <Wifi_Get_Char>:

// Reads the received character from Wi-Fi RxData register.
int Wifi_Get_Char(void) {
 8001990:	deffff04 	addi	sp,sp,-4
 8001994:	df000015 	stw	fp,0(sp)
 8001998:	d839883a 	mov	fp,sp
	// Poll RX bit in Wi-Fi status register and await for it to become '1'
	while (!(0x01 & Wifi_Status)) {
 800199c:	0001883a 	nop
 80019a0:	00a10034 	movhi	r2,33792
 80019a4:	10808404 	addi	r2,r2,528
 80019a8:	10800003 	ldbu	r2,0(r2)
 80019ac:	1080004c 	andi	r2,r2,1
 80019b0:	10803fcc 	andi	r2,r2,255
 80019b4:	103ffa26 	beq	r2,zero,80019a0 <__alt_data_end+0xfc0019a0>
	};
	return (int) Wifi_RxData;
 80019b8:	00a10034 	movhi	r2,33792
 80019bc:	10808484 	addi	r2,r2,530
 80019c0:	10800003 	ldbu	r2,0(r2)
 80019c4:	10803fcc 	andi	r2,r2,255
}
 80019c8:	e037883a 	mov	sp,fp
 80019cc:	df000017 	ldw	fp,0(sp)
 80019d0:	dec00104 	addi	sp,sp,4
 80019d4:	f800283a 	ret

080019d8 <Wifi_Send_String>:
// Sends the string command to the Wi-Fi chip 
void Wifi_Send_String(char command[]) {
 80019d8:	defffb04 	addi	sp,sp,-20
 80019dc:	dfc00415 	stw	ra,16(sp)
 80019e0:	df000315 	stw	fp,12(sp)
 80019e4:	dc000215 	stw	r16,8(sp)
 80019e8:	df000304 	addi	fp,sp,12
 80019ec:	e13ffe15 	stw	r4,-8(fp)
	
	int i;
	// Send the whole string command by sending each character
	for (i = 0; i < strlen(command); i++) {
 80019f0:	e03ffd15 	stw	zero,-12(fp)
 80019f4:	00000c06 	br	8001a28 <Wifi_Send_String+0x50>
		Wifi_Send_Char(command[i]);
 80019f8:	e0bffd17 	ldw	r2,-12(fp)
 80019fc:	e0fffe17 	ldw	r3,-8(fp)
 8001a00:	1885883a 	add	r2,r3,r2
 8001a04:	10800003 	ldbu	r2,0(r2)
 8001a08:	10803fcc 	andi	r2,r2,255
 8001a0c:	1080201c 	xori	r2,r2,128
 8001a10:	10bfe004 	addi	r2,r2,-128
 8001a14:	1009883a 	mov	r4,r2
 8001a18:	80019400 	call	8001940 <Wifi_Send_Char>
// Sends the string command to the Wi-Fi chip 
void Wifi_Send_String(char command[]) {
	
	int i;
	// Send the whole string command by sending each character
	for (i = 0; i < strlen(command); i++) {
 8001a1c:	e0bffd17 	ldw	r2,-12(fp)
 8001a20:	10800044 	addi	r2,r2,1
 8001a24:	e0bffd15 	stw	r2,-12(fp)
 8001a28:	e43ffd17 	ldw	r16,-12(fp)
 8001a2c:	e13ffe17 	ldw	r4,-8(fp)
 8001a30:	8004a080 	call	8004a08 <strlen>
 8001a34:	80bff036 	bltu	r16,r2,80019f8 <__alt_data_end+0xfc0019f8>
		Wifi_Send_Char(command[i]);
	}

	// Send the termination flags, without them the Wi-Fi chip won't know when
	// the command ends and when the next command starts.
	Wifi_Send_Char('\r');
 8001a38:	01000344 	movi	r4,13
 8001a3c:	80019400 	call	8001940 <Wifi_Send_Char>
	Wifi_Send_Char('\n');
 8001a40:	01000284 	movi	r4,10
 8001a44:	80019400 	call	8001940 <Wifi_Send_Char>
}
 8001a48:	e6ffff04 	addi	sp,fp,-4
 8001a4c:	dfc00217 	ldw	ra,8(sp)
 8001a50:	df000117 	ldw	fp,4(sp)
 8001a54:	dc000017 	ldw	r16,0(sp)
 8001a58:	dec00304 	addi	sp,sp,12
 8001a5c:	f800283a 	ret

08001a60 <Wifi_Print_Response>:

 // Receives a string form the Wi-Fi chip by polling until we reach a newline 
void Wifi_Print_Response(){
 8001a60:	defffd04 	addi	sp,sp,-12
 8001a64:	dfc00215 	stw	ra,8(sp)
 8001a68:	df000115 	stw	fp,4(sp)
 8001a6c:	df000104 	addi	fp,sp,4
	char response;
	while(response != '\n'){
 8001a70:	00000506 	br	8001a88 <Wifi_Print_Response+0x28>
		response = (char)Wifi_Get_Char();
 8001a74:	80019900 	call	8001990 <Wifi_Get_Char>
 8001a78:	e0bfff05 	stb	r2,-4(fp)
		printf("%c", response);
 8001a7c:	e0bfff07 	ldb	r2,-4(fp)
 8001a80:	1009883a 	mov	r4,r2
 8001a84:	800480c0 	call	800480c <putchar>
}

 // Receives a string form the Wi-Fi chip by polling until we reach a newline 
void Wifi_Print_Response(){
	char response;
	while(response != '\n'){
 8001a88:	e0bfff07 	ldb	r2,-4(fp)
 8001a8c:	10800298 	cmpnei	r2,r2,10
 8001a90:	103ff81e 	bne	r2,zero,8001a74 <__alt_data_end+0xfc001a74>
		response = (char)Wifi_Get_Char();
		printf("%c", response);
	}
	printf("\n");
 8001a94:	01000284 	movi	r4,10
 8001a98:	800480c0 	call	800480c <putchar>
}
 8001a9c:	e037883a 	mov	sp,fp
 8001aa0:	dfc00117 	ldw	ra,4(sp)
 8001aa4:	df000017 	ldw	fp,0(sp)
 8001aa8:	dec00204 	addi	sp,sp,8
 8001aac:	f800283a 	ret

08001ab0 <Wifi_For_Received_Data>:


// Polls the Wi-Fi to determine if any character has been received. 
int Wifi_For_Received_Data(void) {
 8001ab0:	deffff04 	addi	sp,sp,-4
 8001ab4:	df000015 	stw	fp,0(sp)
 8001ab8:	d839883a 	mov	fp,sp
	// Test Rx bit in the Wi-Fi status register
	// if RX bit is set, return TRUE, otherwise return FALSE
	return 0x01 & Wifi_Status;
 8001abc:	00a10034 	movhi	r2,33792
 8001ac0:	10808404 	addi	r2,r2,528
 8001ac4:	10800003 	ldbu	r2,0(r2)
 8001ac8:	10803fcc 	andi	r2,r2,255
 8001acc:	1080004c 	andi	r2,r2,1
}
 8001ad0:	e037883a 	mov	sp,fp
 8001ad4:	df000017 	ldw	fp,0(sp)
 8001ad8:	dec00104 	addi	sp,sp,4
 8001adc:	f800283a 	ret

08001ae0 <Wifi_Send_Sms>:

/*
 * Activates the file saved in the Wi-Fi chip and checks for connectivity, if everything is fine, sends the message to the Wi-Fi
 * which is then will be sent to the admin's phone 
 */
void Wifi_Send_Sms(char message[]) {
 8001ae0:	defffd04 	addi	sp,sp,-12
 8001ae4:	dfc00215 	stw	ra,8(sp)
 8001ae8:	df000115 	stw	fp,4(sp)
 8001aec:	df000104 	addi	fp,sp,4
 8001af0:	e13fff15 	stw	r4,-4(fp)
	printf("Sending sms \n");
 8001af4:	010200b4 	movhi	r4,2050
 8001af8:	213fe904 	addi	r4,r4,-92
 8001afc:	80048dc0 	call	80048dc <puts>
	
	//Wi-Fi configuration file
	Wifi_Send_String("dofile(\"project2.lua\")");
 8001b00:	010200b4 	movhi	r4,2050
 8001b04:	213fed04 	addi	r4,r4,-76
 8001b08:	80019d80 	call	80019d8 <Wifi_Send_String>
	Wifi_Send_String("check_wifi()");
 8001b0c:	010200b4 	movhi	r4,2050
 8001b10:	213ff304 	addi	r4,r4,-52
 8001b14:	80019d80 	call	80019d8 <Wifi_Send_String>
	Wifi_Send_String(message);
 8001b18:	e13fff17 	ldw	r4,-4(fp)
 8001b1c:	80019d80 	call	80019d8 <Wifi_Send_String>
	
	printf("sms sent \n");
 8001b20:	010200b4 	movhi	r4,2050
 8001b24:	213ff704 	addi	r4,r4,-36
 8001b28:	80048dc0 	call	80048dc <puts>
	Wifi_Print_Response();
 8001b2c:	8001a600 	call	8001a60 <Wifi_Print_Response>
}
 8001b30:	e037883a 	mov	sp,fp
 8001b34:	dfc00117 	ldw	ra,4(sp)
 8001b38:	df000017 	ldw	fp,0(sp)
 8001b3c:	dec00204 	addi	sp,sp,8
 8001b40:	f800283a 	ret

08001b44 <BaseDisplay>:
int auto_approve = 0;

/*
 * Display The room selection column on the left hand side of the screen
 */
void BaseDisplay(void) {
 8001b44:	defff904 	addi	sp,sp,-28
 8001b48:	dfc00615 	stw	ra,24(sp)
 8001b4c:	df000515 	stw	fp,20(sp)
 8001b50:	df000504 	addi	fp,sp,20
	int i;
	char* roomString;

	for (i = 0; i < 800; i++)
 8001b54:	e03ffe15 	stw	zero,-8(fp)
 8001b58:	00000806 	br	8001b7c <BaseDisplay+0x38>
		DrawHorizontalLine(0, 800, i, TEAL);
 8001b5c:	0009883a 	mov	r4,zero
 8001b60:	0140c804 	movi	r5,800
 8001b64:	e1bffe17 	ldw	r6,-8(fp)
 8001b68:	01c00384 	movi	r7,14
 8001b6c:	80003800 	call	8000380 <DrawHorizontalLine>
 */
void BaseDisplay(void) {
	int i;
	char* roomString;

	for (i = 0; i < 800; i++)
 8001b70:	e0bffe17 	ldw	r2,-8(fp)
 8001b74:	10800044 	addi	r2,r2,1
 8001b78:	e0bffe15 	stw	r2,-8(fp)
 8001b7c:	e0bffe17 	ldw	r2,-8(fp)
 8001b80:	1080c810 	cmplti	r2,r2,800
 8001b84:	103ff51e 	bne	r2,zero,8001b5c <__alt_data_end+0xfc001b5c>
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001b88:	00800044 	movi	r2,1
 8001b8c:	e0bffe15 	stw	r2,-8(fp)
 8001b90:	00002106 	br	8001c18 <BaseDisplay+0xd4>
		sprintf(roomString, "Room %d", i);
 8001b94:	e13fff17 	ldw	r4,-4(fp)
 8001b98:	014200b4 	movhi	r5,2050
 8001b9c:	297ffa04 	addi	r5,r5,-24
 8001ba0:	e1bffe17 	ldw	r6,-8(fp)
 8001ba4:	800499c0 	call	800499c <sprintf>
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
 8001ba8:	e0bffe17 	ldw	r2,-8(fp)
 8001bac:	10c00a24 	muli	r3,r2,40
 8001bb0:	e0bffe17 	ldw	r2,-8(fp)
 8001bb4:	10800044 	addi	r2,r2,1
 8001bb8:	10800a24 	muli	r2,r2,40
 8001bbc:	d8000015 	stw	zero,0(sp)
 8001bc0:	01001904 	movi	r4,100
 8001bc4:	01404b04 	movi	r5,300
 8001bc8:	180d883a 	mov	r6,r3
 8001bcc:	100f883a 	mov	r7,r2
 8001bd0:	80006000 	call	8000600 <DrawRect>
		DrawString(105, 40 * i + 40 / 4, BLACK, TEAL, roomString, 2, 1);
 8001bd4:	e0bffe17 	ldw	r2,-8(fp)
 8001bd8:	10800a24 	muli	r2,r2,40
 8001bdc:	10c00284 	addi	r3,r2,10
 8001be0:	e0bfff17 	ldw	r2,-4(fp)
 8001be4:	d8800015 	stw	r2,0(sp)
 8001be8:	00800084 	movi	r2,2
 8001bec:	d8800115 	stw	r2,4(sp)
 8001bf0:	00800044 	movi	r2,1
 8001bf4:	d8800215 	stw	r2,8(sp)
 8001bf8:	01001a44 	movi	r4,105
 8001bfc:	180b883a 	mov	r5,r3
 8001c00:	000d883a 	mov	r6,zero
 8001c04:	01c00384 	movi	r7,14
 8001c08:	8000ac40 	call	8000ac4 <DrawString>
	int i;
	char* roomString;

	for (i = 0; i < 800; i++)
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001c0c:	e0bffe17 	ldw	r2,-8(fp)
 8001c10:	10800044 	addi	r2,r2,1
 8001c14:	e0bffe15 	stw	r2,-8(fp)
 8001c18:	e0bffe17 	ldw	r2,-8(fp)
 8001c1c:	108002d0 	cmplti	r2,r2,11
 8001c20:	103fdc1e 	bne	r2,zero,8001b94 <__alt_data_end+0xfc001b94>
		sprintf(roomString, "Room %d", i);
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
		DrawString(105, 40 * i + 40 / 4, BLACK, TEAL, roomString, 2, 1);
	}
	printf("Base Displayed \n");
 8001c24:	010200b4 	movhi	r4,2050
 8001c28:	213ffc04 	addi	r4,r4,-16
 8001c2c:	80048dc0 	call	80048dc <puts>
}
 8001c30:	e037883a 	mov	sp,fp
 8001c34:	dfc00117 	ldw	ra,4(sp)
 8001c38:	df000017 	ldw	fp,0(sp)
 8001c3c:	dec00204 	addi	sp,sp,8
 8001c40:	f800283a 	ret

08001c44 <InfoDisplay>:

/*
 * Full Room status Display. Base display on the left, and room status on the right
 * Takes in the current room number and info about that room and displays it on the screen
 */
void InfoDisplay(int room_num, int lights, int door, int occupied, int in_use, int temp) {
 8001c44:	defff504 	addi	sp,sp,-44
 8001c48:	dfc00a15 	stw	ra,40(sp)
 8001c4c:	df000915 	stw	fp,36(sp)
 8001c50:	df000904 	addi	fp,sp,36
 8001c54:	e13ffc15 	stw	r4,-16(fp)
 8001c58:	e17ffd15 	stw	r5,-12(fp)
 8001c5c:	e1bffe15 	stw	r6,-8(fp)
 8001c60:	e1ffff15 	stw	r7,-4(fp)
	int i;

	//Cover Last Data
	for (i = 0; i < 480; i++)
 8001c64:	e03ffa15 	stw	zero,-24(fp)
 8001c68:	00000806 	br	8001c8c <InfoDisplay+0x48>
		DrawHorizontalLine(0, 800, i, TEAL);
 8001c6c:	0009883a 	mov	r4,zero
 8001c70:	0140c804 	movi	r5,800
 8001c74:	e1bffa17 	ldw	r6,-24(fp)
 8001c78:	01c00384 	movi	r7,14
 8001c7c:	80003800 	call	8000380 <DrawHorizontalLine>
 */
void InfoDisplay(int room_num, int lights, int door, int occupied, int in_use, int temp) {
	int i;

	//Cover Last Data
	for (i = 0; i < 480; i++)
 8001c80:	e0bffa17 	ldw	r2,-24(fp)
 8001c84:	10800044 	addi	r2,r2,1
 8001c88:	e0bffa15 	stw	r2,-24(fp)
 8001c8c:	e0bffa17 	ldw	r2,-24(fp)
 8001c90:	10807810 	cmplti	r2,r2,480
 8001c94:	103ff51e 	bne	r2,zero,8001c6c <__alt_data_end+0xfc001c6c>
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001c98:	00800044 	movi	r2,1
 8001c9c:	e0bffa15 	stw	r2,-24(fp)
 8001ca0:	00000e06 	br	8001cdc <InfoDisplay+0x98>
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
 8001ca4:	e0bffa17 	ldw	r2,-24(fp)
 8001ca8:	10c00a24 	muli	r3,r2,40
 8001cac:	e0bffa17 	ldw	r2,-24(fp)
 8001cb0:	10800044 	addi	r2,r2,1
 8001cb4:	10800a24 	muli	r2,r2,40
 8001cb8:	d8000015 	stw	zero,0(sp)
 8001cbc:	01001904 	movi	r4,100
 8001cc0:	01404b04 	movi	r5,300
 8001cc4:	180d883a 	mov	r6,r3
 8001cc8:	100f883a 	mov	r7,r2
 8001ccc:	80006000 	call	8000600 <DrawRect>
	int i;

	//Cover Last Data
	for (i = 0; i < 480; i++)
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001cd0:	e0bffa17 	ldw	r2,-24(fp)
 8001cd4:	10800044 	addi	r2,r2,1
 8001cd8:	e0bffa15 	stw	r2,-24(fp)
 8001cdc:	e0bffa17 	ldw	r2,-24(fp)
 8001ce0:	108002d0 	cmplti	r2,r2,11
 8001ce4:	103fef1e 	bne	r2,zero,8001ca4 <__alt_data_end+0xfc001ca4>
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
	}
	//Change Colour of selected Room
	DrawFillRect(101, 299, 40 * room_num + 1, 40 * (room_num + 1) - 1, NAVY);
 8001ce8:	e0bffc17 	ldw	r2,-16(fp)
 8001cec:	10800a24 	muli	r2,r2,40
 8001cf0:	11800044 	addi	r6,r2,1
 8001cf4:	e0bffc17 	ldw	r2,-16(fp)
 8001cf8:	10800044 	addi	r2,r2,1
 8001cfc:	10800a24 	muli	r2,r2,40
 8001d00:	10ffffc4 	addi	r3,r2,-1
 8001d04:	008003c4 	movi	r2,15
 8001d08:	d8800015 	stw	r2,0(sp)
 8001d0c:	01001944 	movi	r4,101
 8001d10:	01404ac4 	movi	r5,299
 8001d14:	180f883a 	mov	r7,r3
 8001d18:	80005940 	call	8000594 <DrawFillRect>

	char* roomDeetsString;
	sprintf(roomDeetsString, "Room %d Details & Options", room_num);
 8001d1c:	e13ffb17 	ldw	r4,-20(fp)
 8001d20:	014200b4 	movhi	r5,2050
 8001d24:	29400004 	addi	r5,r5,0
 8001d28:	e1bffc17 	ldw	r6,-16(fp)
 8001d2c:	800499c0 	call	800499c <sprintf>
	DrawRect(350, 750, 40, 40 * 11, BLACK);
 8001d30:	d8000015 	stw	zero,0(sp)
 8001d34:	01005784 	movi	r4,350
 8001d38:	0140bb84 	movi	r5,750
 8001d3c:	01800a04 	movi	r6,40
 8001d40:	01c06e04 	movi	r7,440
 8001d44:	80006000 	call	8000600 <DrawRect>
	DrawString(360, 40 * 1.25, BLACK, TEAL, roomDeetsString, 2, 1);
 8001d48:	e0bffb17 	ldw	r2,-20(fp)
 8001d4c:	d8800015 	stw	r2,0(sp)
 8001d50:	00800084 	movi	r2,2
 8001d54:	d8800115 	stw	r2,4(sp)
 8001d58:	00800044 	movi	r2,1
 8001d5c:	d8800215 	stw	r2,8(sp)
 8001d60:	01005a04 	movi	r4,360
 8001d64:	01400c84 	movi	r5,50
 8001d68:	000d883a 	mov	r6,zero
 8001d6c:	01c00384 	movi	r7,14
 8001d70:	8000ac40 	call	8000ac4 <DrawString>
	DrawString(400, 40 * 2.25 - 14, BLACK, TEAL, "In Use: ", 2, 1);
 8001d74:	008200b4 	movhi	r2,2050
 8001d78:	10800704 	addi	r2,r2,28
 8001d7c:	d8800015 	stw	r2,0(sp)
 8001d80:	00800084 	movi	r2,2
 8001d84:	d8800115 	stw	r2,4(sp)
 8001d88:	00800044 	movi	r2,1
 8001d8c:	d8800215 	stw	r2,8(sp)
 8001d90:	01006404 	movi	r4,400
 8001d94:	01401304 	movi	r5,76
 8001d98:	000d883a 	mov	r6,zero
 8001d9c:	01c00384 	movi	r7,14
 8001da0:	8000ac40 	call	8000ac4 <DrawString>

	if (in_use) {
 8001da4:	e0800217 	ldw	r2,8(fp)
 8001da8:	10000d26 	beq	r2,zero,8001de0 <InfoDisplay+0x19c>
		DrawString(530, 40 * 2.25 - 14, GREEN, TEAL, "YES", 2, 1);
 8001dac:	008200b4 	movhi	r2,2050
 8001db0:	10800a04 	addi	r2,r2,40
 8001db4:	d8800015 	stw	r2,0(sp)
 8001db8:	00800084 	movi	r2,2
 8001dbc:	d8800115 	stw	r2,4(sp)
 8001dc0:	00800044 	movi	r2,1
 8001dc4:	d8800215 	stw	r2,8(sp)
 8001dc8:	01008484 	movi	r4,530
 8001dcc:	01401304 	movi	r5,76
 8001dd0:	01800304 	movi	r6,12
 8001dd4:	01c00384 	movi	r7,14
 8001dd8:	8000ac40 	call	8000ac4 <DrawString>
 8001ddc:	00000c06 	br	8001e10 <InfoDisplay+0x1cc>
	} else {
		DrawString(530, 40 * 2.25 - 14, CRIMSON, TEAL, "NO", 2, 1);
 8001de0:	008200b4 	movhi	r2,2050
 8001de4:	10800b04 	addi	r2,r2,44
 8001de8:	d8800015 	stw	r2,0(sp)
 8001dec:	00800084 	movi	r2,2
 8001df0:	d8800115 	stw	r2,4(sp)
 8001df4:	00800044 	movi	r2,1
 8001df8:	d8800215 	stw	r2,8(sp)
 8001dfc:	01008484 	movi	r4,530
 8001e00:	01401304 	movi	r5,76
 8001e04:	018004c4 	movi	r6,19
 8001e08:	01c00384 	movi	r7,14
 8001e0c:	8000ac40 	call	8000ac4 <DrawString>

	}
	DrawString(400, 40 * 3.25 - 14, BLACK, TEAL, "Occupied: ", 2, 1);
 8001e10:	008200b4 	movhi	r2,2050
 8001e14:	10800c04 	addi	r2,r2,48
 8001e18:	d8800015 	stw	r2,0(sp)
 8001e1c:	00800084 	movi	r2,2
 8001e20:	d8800115 	stw	r2,4(sp)
 8001e24:	00800044 	movi	r2,1
 8001e28:	d8800215 	stw	r2,8(sp)
 8001e2c:	01006404 	movi	r4,400
 8001e30:	01401d04 	movi	r5,116
 8001e34:	000d883a 	mov	r6,zero
 8001e38:	01c00384 	movi	r7,14
 8001e3c:	8000ac40 	call	8000ac4 <DrawString>
	if (occupied) {
 8001e40:	e0bfff17 	ldw	r2,-4(fp)
 8001e44:	10000d26 	beq	r2,zero,8001e7c <InfoDisplay+0x238>
		DrawString(530, 40 * 3.25 - 14, GREEN, TEAL, "YES", 2, 1);
 8001e48:	008200b4 	movhi	r2,2050
 8001e4c:	10800a04 	addi	r2,r2,40
 8001e50:	d8800015 	stw	r2,0(sp)
 8001e54:	00800084 	movi	r2,2
 8001e58:	d8800115 	stw	r2,4(sp)
 8001e5c:	00800044 	movi	r2,1
 8001e60:	d8800215 	stw	r2,8(sp)
 8001e64:	01008484 	movi	r4,530
 8001e68:	01401d04 	movi	r5,116
 8001e6c:	01800304 	movi	r6,12
 8001e70:	01c00384 	movi	r7,14
 8001e74:	8000ac40 	call	8000ac4 <DrawString>
 8001e78:	00000c06 	br	8001eac <InfoDisplay+0x268>
	} else {
		DrawString(530, 40 * 3.25 - 14, CRIMSON, TEAL, "NO", 2, 1);
 8001e7c:	008200b4 	movhi	r2,2050
 8001e80:	10800b04 	addi	r2,r2,44
 8001e84:	d8800015 	stw	r2,0(sp)
 8001e88:	00800084 	movi	r2,2
 8001e8c:	d8800115 	stw	r2,4(sp)
 8001e90:	00800044 	movi	r2,1
 8001e94:	d8800215 	stw	r2,8(sp)
 8001e98:	01008484 	movi	r4,530
 8001e9c:	01401d04 	movi	r5,116
 8001ea0:	018004c4 	movi	r6,19
 8001ea4:	01c00384 	movi	r7,14
 8001ea8:	8000ac40 	call	8000ac4 <DrawString>
	}

	DrawString(400, 40 * 4.25 - 14, BLACK, TEAL, "Lights: ", 2, 1);
 8001eac:	008200b4 	movhi	r2,2050
 8001eb0:	10800f04 	addi	r2,r2,60
 8001eb4:	d8800015 	stw	r2,0(sp)
 8001eb8:	00800084 	movi	r2,2
 8001ebc:	d8800115 	stw	r2,4(sp)
 8001ec0:	00800044 	movi	r2,1
 8001ec4:	d8800215 	stw	r2,8(sp)
 8001ec8:	01006404 	movi	r4,400
 8001ecc:	01402704 	movi	r5,156
 8001ed0:	000d883a 	mov	r6,zero
 8001ed4:	01c00384 	movi	r7,14
 8001ed8:	8000ac40 	call	8000ac4 <DrawString>
	if (lights) {
 8001edc:	e0bffd17 	ldw	r2,-12(fp)
 8001ee0:	10000d26 	beq	r2,zero,8001f18 <InfoDisplay+0x2d4>
		DrawString(530, 40 * 4.25 - 14, GREEN, TEAL, "ON", 2, 1);
 8001ee4:	008200b4 	movhi	r2,2050
 8001ee8:	10801204 	addi	r2,r2,72
 8001eec:	d8800015 	stw	r2,0(sp)
 8001ef0:	00800084 	movi	r2,2
 8001ef4:	d8800115 	stw	r2,4(sp)
 8001ef8:	00800044 	movi	r2,1
 8001efc:	d8800215 	stw	r2,8(sp)
 8001f00:	01008484 	movi	r4,530
 8001f04:	01402704 	movi	r5,156
 8001f08:	01800304 	movi	r6,12
 8001f0c:	01c00384 	movi	r7,14
 8001f10:	8000ac40 	call	8000ac4 <DrawString>
 8001f14:	00000c06 	br	8001f48 <InfoDisplay+0x304>
	} else {
		DrawString(530, 40 * 4.25 - 14, CRIMSON, TEAL, "OFF", 2, 1);
 8001f18:	008200b4 	movhi	r2,2050
 8001f1c:	10801304 	addi	r2,r2,76
 8001f20:	d8800015 	stw	r2,0(sp)
 8001f24:	00800084 	movi	r2,2
 8001f28:	d8800115 	stw	r2,4(sp)
 8001f2c:	00800044 	movi	r2,1
 8001f30:	d8800215 	stw	r2,8(sp)
 8001f34:	01008484 	movi	r4,530
 8001f38:	01402704 	movi	r5,156
 8001f3c:	018004c4 	movi	r6,19
 8001f40:	01c00384 	movi	r7,14
 8001f44:	8000ac40 	call	8000ac4 <DrawString>
	}

	DrawString(400, 40 * 5.25 - 14, BLACK, TEAL, "Door: ", 2, 1);
 8001f48:	008200b4 	movhi	r2,2050
 8001f4c:	10801404 	addi	r2,r2,80
 8001f50:	d8800015 	stw	r2,0(sp)
 8001f54:	00800084 	movi	r2,2
 8001f58:	d8800115 	stw	r2,4(sp)
 8001f5c:	00800044 	movi	r2,1
 8001f60:	d8800215 	stw	r2,8(sp)
 8001f64:	01006404 	movi	r4,400
 8001f68:	01403104 	movi	r5,196
 8001f6c:	000d883a 	mov	r6,zero
 8001f70:	01c00384 	movi	r7,14
 8001f74:	8000ac40 	call	8000ac4 <DrawString>
	if (door) {
 8001f78:	e0bffe17 	ldw	r2,-8(fp)
 8001f7c:	10000d26 	beq	r2,zero,8001fb4 <InfoDisplay+0x370>
		DrawString(530, 40 * 5.25 - 14, GREEN, TEAL, "UNLOCKED", 2, 1);
 8001f80:	008200b4 	movhi	r2,2050
 8001f84:	10801604 	addi	r2,r2,88
 8001f88:	d8800015 	stw	r2,0(sp)
 8001f8c:	00800084 	movi	r2,2
 8001f90:	d8800115 	stw	r2,4(sp)
 8001f94:	00800044 	movi	r2,1
 8001f98:	d8800215 	stw	r2,8(sp)
 8001f9c:	01008484 	movi	r4,530
 8001fa0:	01403104 	movi	r5,196
 8001fa4:	01800304 	movi	r6,12
 8001fa8:	01c00384 	movi	r7,14
 8001fac:	8000ac40 	call	8000ac4 <DrawString>
 8001fb0:	00000c06 	br	8001fe4 <InfoDisplay+0x3a0>
	} else {
		DrawString(530, 40 * 5.25 - 14, CRIMSON, TEAL, "LOCKED", 2, 1);
 8001fb4:	008200b4 	movhi	r2,2050
 8001fb8:	10801904 	addi	r2,r2,100
 8001fbc:	d8800015 	stw	r2,0(sp)
 8001fc0:	00800084 	movi	r2,2
 8001fc4:	d8800115 	stw	r2,4(sp)
 8001fc8:	00800044 	movi	r2,1
 8001fcc:	d8800215 	stw	r2,8(sp)
 8001fd0:	01008484 	movi	r4,530
 8001fd4:	01403104 	movi	r5,196
 8001fd8:	018004c4 	movi	r6,19
 8001fdc:	01c00384 	movi	r7,14
 8001fe0:	8000ac40 	call	8000ac4 <DrawString>
	}

	DrawString(400, 40 * 6.25 - 14, BLACK, TEAL, "Lights: ", 2, 1);
 8001fe4:	008200b4 	movhi	r2,2050
 8001fe8:	10800f04 	addi	r2,r2,60
 8001fec:	d8800015 	stw	r2,0(sp)
 8001ff0:	00800084 	movi	r2,2
 8001ff4:	d8800115 	stw	r2,4(sp)
 8001ff8:	00800044 	movi	r2,1
 8001ffc:	d8800215 	stw	r2,8(sp)
 8002000:	01006404 	movi	r4,400
 8002004:	01403b04 	movi	r5,236
 8002008:	000d883a 	mov	r6,zero
 800200c:	01c00384 	movi	r7,14
 8002010:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(480, 560, 40 * 6.25 - 34, 40 * 7.25 - 24, CRIMSON);
 8002014:	008004c4 	movi	r2,19
 8002018:	d8800015 	stw	r2,0(sp)
 800201c:	01007804 	movi	r4,480
 8002020:	01408c04 	movi	r5,560
 8002024:	01803604 	movi	r6,216
 8002028:	01c04284 	movi	r7,266
 800202c:	80005940 	call	8000594 <DrawFillRect>
	DrawString(490, 40 * 6.25 - 14, BLACK, CRIMSON, "OFF", 2, 1);
 8002030:	008200b4 	movhi	r2,2050
 8002034:	10801304 	addi	r2,r2,76
 8002038:	d8800015 	stw	r2,0(sp)
 800203c:	00800084 	movi	r2,2
 8002040:	d8800115 	stw	r2,4(sp)
 8002044:	00800044 	movi	r2,1
 8002048:	d8800215 	stw	r2,8(sp)
 800204c:	01007a84 	movi	r4,490
 8002050:	01403b04 	movi	r5,236
 8002054:	000d883a 	mov	r6,zero
 8002058:	01c004c4 	movi	r7,19
 800205c:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(570, 650, 40 * 6.25 - 34, 40 * 7.25 - 24, GREEN);
 8002060:	00800304 	movi	r2,12
 8002064:	d8800015 	stw	r2,0(sp)
 8002068:	01008e84 	movi	r4,570
 800206c:	0140a284 	movi	r5,650
 8002070:	01803604 	movi	r6,216
 8002074:	01c04284 	movi	r7,266
 8002078:	80005940 	call	8000594 <DrawFillRect>
	DrawString(580, 40 * 6.25 - 14, BLACK, GREEN, "ON", 2, 1);
 800207c:	008200b4 	movhi	r2,2050
 8002080:	10801204 	addi	r2,r2,72
 8002084:	d8800015 	stw	r2,0(sp)
 8002088:	00800084 	movi	r2,2
 800208c:	d8800115 	stw	r2,4(sp)
 8002090:	00800044 	movi	r2,1
 8002094:	d8800215 	stw	r2,8(sp)
 8002098:	01009104 	movi	r4,580
 800209c:	01403b04 	movi	r5,236
 80020a0:	000d883a 	mov	r6,zero
 80020a4:	01c00304 	movi	r7,12
 80020a8:	8000ac40 	call	8000ac4 <DrawString>

	DrawString(400, 40 * 7.75 - 14, BLACK, TEAL, "Door: ", 2, 1);
 80020ac:	008200b4 	movhi	r2,2050
 80020b0:	10801404 	addi	r2,r2,80
 80020b4:	d8800015 	stw	r2,0(sp)
 80020b8:	00800084 	movi	r2,2
 80020bc:	d8800115 	stw	r2,4(sp)
 80020c0:	00800044 	movi	r2,1
 80020c4:	d8800215 	stw	r2,8(sp)
 80020c8:	01006404 	movi	r4,400
 80020cc:	01404a04 	movi	r5,296
 80020d0:	000d883a 	mov	r6,zero
 80020d4:	01c00384 	movi	r7,14
 80020d8:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(480, 560, 40 * 7.75 - 34, 40 * 8.75 - 24, CRIMSON);
 80020dc:	008004c4 	movi	r2,19
 80020e0:	d8800015 	stw	r2,0(sp)
 80020e4:	01007804 	movi	r4,480
 80020e8:	01408c04 	movi	r5,560
 80020ec:	01804504 	movi	r6,276
 80020f0:	01c05184 	movi	r7,326
 80020f4:	80005940 	call	8000594 <DrawFillRect>
	DrawString(490, 40 * 7.75 - 14, BLACK, CRIMSON, "LOCK", 2, 1);
 80020f8:	008200b4 	movhi	r2,2050
 80020fc:	10801b04 	addi	r2,r2,108
 8002100:	d8800015 	stw	r2,0(sp)
 8002104:	00800084 	movi	r2,2
 8002108:	d8800115 	stw	r2,4(sp)
 800210c:	00800044 	movi	r2,1
 8002110:	d8800215 	stw	r2,8(sp)
 8002114:	01007a84 	movi	r4,490
 8002118:	01404a04 	movi	r5,296
 800211c:	000d883a 	mov	r6,zero
 8002120:	01c004c4 	movi	r7,19
 8002124:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(570, 650, 40 * 7.75 - 34, 40 * 8.75 - 24, GREEN);
 8002128:	00800304 	movi	r2,12
 800212c:	d8800015 	stw	r2,0(sp)
 8002130:	01008e84 	movi	r4,570
 8002134:	0140a284 	movi	r5,650
 8002138:	01804504 	movi	r6,276
 800213c:	01c05184 	movi	r7,326
 8002140:	80005940 	call	8000594 <DrawFillRect>
	DrawString(580, 40 * 7.75 - 14, BLACK, GREEN, "UNLOCK", 2, 1);
 8002144:	008200b4 	movhi	r2,2050
 8002148:	10801d04 	addi	r2,r2,116
 800214c:	d8800015 	stw	r2,0(sp)
 8002150:	00800084 	movi	r2,2
 8002154:	d8800115 	stw	r2,4(sp)
 8002158:	00800044 	movi	r2,1
 800215c:	d8800215 	stw	r2,8(sp)
 8002160:	01009104 	movi	r4,580
 8002164:	01404a04 	movi	r5,296
 8002168:	000d883a 	mov	r6,zero
 800216c:	01c00304 	movi	r7,12
 8002170:	8000ac40 	call	8000ac4 <DrawString>

	if(temp>0){
 8002174:	e0800317 	ldw	r2,12(fp)
 8002178:	00801c0e 	bge	zero,r2,80021ec <InfoDisplay+0x5a8>
		DrawString(400,40*8.5+12,BLACK,TEAL,"Temperature:",2,1);
 800217c:	008200b4 	movhi	r2,2050
 8002180:	10801f04 	addi	r2,r2,124
 8002184:	d8800015 	stw	r2,0(sp)
 8002188:	00800084 	movi	r2,2
 800218c:	d8800115 	stw	r2,4(sp)
 8002190:	00800044 	movi	r2,1
 8002194:	d8800215 	stw	r2,8(sp)
 8002198:	01006404 	movi	r4,400
 800219c:	01405804 	movi	r5,352
 80021a0:	000d883a 	mov	r6,zero
 80021a4:	01c00384 	movi	r7,14
 80021a8:	8000ac40 	call	8000ac4 <DrawString>
		sprintf(roomDeetsString, "%d", temp);
 80021ac:	e13ffb17 	ldw	r4,-20(fp)
 80021b0:	014200b4 	movhi	r5,2050
 80021b4:	29402304 	addi	r5,r5,140
 80021b8:	e1800317 	ldw	r6,12(fp)
 80021bc:	800499c0 	call	800499c <sprintf>
		DrawString(530,40*8.5+12,BLACK,TEAL,roomDeetsString,2,1);
 80021c0:	e0bffb17 	ldw	r2,-20(fp)
 80021c4:	d8800015 	stw	r2,0(sp)
 80021c8:	00800084 	movi	r2,2
 80021cc:	d8800115 	stw	r2,4(sp)
 80021d0:	00800044 	movi	r2,1
 80021d4:	d8800215 	stw	r2,8(sp)
 80021d8:	01008484 	movi	r4,530
 80021dc:	01405804 	movi	r5,352
 80021e0:	000d883a 	mov	r6,zero
 80021e4:	01c00384 	movi	r7,14
 80021e8:	8000ac40 	call	8000ac4 <DrawString>
	}


	if(auto_approve){
 80021ec:	d0a6d617 	ldw	r2,-25768(gp)
 80021f0:	10001426 	beq	r2,zero,8002244 <InfoDisplay+0x600>
		DrawFillRect(480,650,40*9.5,40*10.5,GREEN);
 80021f4:	00800304 	movi	r2,12
 80021f8:	d8800015 	stw	r2,0(sp)
 80021fc:	01007804 	movi	r4,480
 8002200:	0140a284 	movi	r5,650
 8002204:	01805f04 	movi	r6,380
 8002208:	01c06904 	movi	r7,420
 800220c:	80005940 	call	8000594 <DrawFillRect>
		DrawString(505,40*9.5+12,BLACK,GREEN,"Auto-Approve",2,1);
 8002210:	008200b4 	movhi	r2,2050
 8002214:	10802404 	addi	r2,r2,144
 8002218:	d8800015 	stw	r2,0(sp)
 800221c:	00800084 	movi	r2,2
 8002220:	d8800115 	stw	r2,4(sp)
 8002224:	00800044 	movi	r2,1
 8002228:	d8800215 	stw	r2,8(sp)
 800222c:	01007e44 	movi	r4,505
 8002230:	01406204 	movi	r5,392
 8002234:	000d883a 	mov	r6,zero
 8002238:	01c00304 	movi	r7,12
 800223c:	8000ac40 	call	8000ac4 <DrawString>
 8002240:	00001306 	br	8002290 <InfoDisplay+0x64c>
	}
	else{
		DrawFillRect(480,650,40*9.5,40*10.5,CRIMSON);
 8002244:	008004c4 	movi	r2,19
 8002248:	d8800015 	stw	r2,0(sp)
 800224c:	01007804 	movi	r4,480
 8002250:	0140a284 	movi	r5,650
 8002254:	01805f04 	movi	r6,380
 8002258:	01c06904 	movi	r7,420
 800225c:	80005940 	call	8000594 <DrawFillRect>
		DrawString(505,40*9.5+12,BLACK,CRIMSON,"Auto-Approve",2,1);
 8002260:	008200b4 	movhi	r2,2050
 8002264:	10802404 	addi	r2,r2,144
 8002268:	d8800015 	stw	r2,0(sp)
 800226c:	00800084 	movi	r2,2
 8002270:	d8800115 	stw	r2,4(sp)
 8002274:	00800044 	movi	r2,1
 8002278:	d8800215 	stw	r2,8(sp)
 800227c:	01007e44 	movi	r4,505
 8002280:	01406204 	movi	r5,392
 8002284:	000d883a 	mov	r6,zero
 8002288:	01c004c4 	movi	r7,19
 800228c:	8000ac40 	call	8000ac4 <DrawString>
	}

}
 8002290:	e037883a 	mov	sp,fp
 8002294:	dfc00117 	ldw	ra,4(sp)
 8002298:	df000017 	ldw	fp,0(sp)
 800229c:	dec00204 	addi	sp,sp,8
 80022a0:	f800283a 	ret

080022a4 <RequestCloseDisplay>:

/*
 * Draws a small Red square next to the given room number
 */
void RequestCloseDisplay(int room_num) {
 80022a4:	defffc04 	addi	sp,sp,-16
 80022a8:	dfc00315 	stw	ra,12(sp)
 80022ac:	df000215 	stw	fp,8(sp)
 80022b0:	df000204 	addi	fp,sp,8
 80022b4:	e13fff15 	stw	r4,-4(fp)

	DrawFillRect(315, 335, 40 * room_num + 10, 40 * (room_num + 1) - 10, RED);
 80022b8:	e0bfff17 	ldw	r2,-4(fp)
 80022bc:	10800a24 	muli	r2,r2,40
 80022c0:	11800284 	addi	r6,r2,10
 80022c4:	e0bfff17 	ldw	r2,-4(fp)
 80022c8:	10800044 	addi	r2,r2,1
 80022cc:	10800a24 	muli	r2,r2,40
 80022d0:	10fffd84 	addi	r3,r2,-10
 80022d4:	00800084 	movi	r2,2
 80022d8:	d8800015 	stw	r2,0(sp)
 80022dc:	01004ec4 	movi	r4,315
 80022e0:	014053c4 	movi	r5,335
 80022e4:	180f883a 	mov	r7,r3
 80022e8:	80005940 	call	8000594 <DrawFillRect>
	return;
 80022ec:	0001883a 	nop

}
 80022f0:	e037883a 	mov	sp,fp
 80022f4:	dfc00117 	ldw	ra,4(sp)
 80022f8:	df000017 	ldw	fp,0(sp)
 80022fc:	dec00204 	addi	sp,sp,8
 8002300:	f800283a 	ret

08002304 <RequestOpenDisplay>:

/*
 * Draws a small green square next to the given room number
 */
void RequestOpenDisplay(int room_num) {
 8002304:	defffc04 	addi	sp,sp,-16
 8002308:	dfc00315 	stw	ra,12(sp)
 800230c:	df000215 	stw	fp,8(sp)
 8002310:	df000204 	addi	fp,sp,8
 8002314:	e13fff15 	stw	r4,-4(fp)

	DrawFillRect(315, 335, 40 * room_num + 10, 40 * (room_num + 1) - 10, GREEN);
 8002318:	e0bfff17 	ldw	r2,-4(fp)
 800231c:	10800a24 	muli	r2,r2,40
 8002320:	11800284 	addi	r6,r2,10
 8002324:	e0bfff17 	ldw	r2,-4(fp)
 8002328:	10800044 	addi	r2,r2,1
 800232c:	10800a24 	muli	r2,r2,40
 8002330:	10fffd84 	addi	r3,r2,-10
 8002334:	00800304 	movi	r2,12
 8002338:	d8800015 	stw	r2,0(sp)
 800233c:	01004ec4 	movi	r4,315
 8002340:	014053c4 	movi	r5,335
 8002344:	180f883a 	mov	r7,r3
 8002348:	80005940 	call	8000594 <DrawFillRect>
	return;
 800234c:	0001883a 	nop

}
 8002350:	e037883a 	mov	sp,fp
 8002354:	dfc00117 	ldw	ra,4(sp)
 8002358:	df000017 	ldw	fp,0(sp)
 800235c:	dec00204 	addi	sp,sp,8
 8002360:	f800283a 	ret

08002364 <BaseChoice>:

/*
 * A function to check where the user has pressed after the base display.
 * If the user selects a room, it returns the appropriate room number
 */
int BaseChoice(void) {
 8002364:	defffc04 	addi	sp,sp,-16
 8002368:	dfc00315 	stw	ra,12(sp)
 800236c:	df000215 	stw	fp,8(sp)
 8002370:	df000204 	addi	fp,sp,8
	Point p1;
	while (1) {
		printf("Base Choice\n");
 8002374:	010200b4 	movhi	r4,2050
 8002378:	21002804 	addi	r4,r4,160
 800237c:	80048dc0 	call	80048dc <puts>
		p1 = GetBasePress();
 8002380:	8000d740 	call	8000d74 <GetBasePress>
 8002384:	1009883a 	mov	r4,r2
 8002388:	180b883a 	mov	r5,r3
 800238c:	e13ffe15 	stw	r4,-8(fp)
 8002390:	e17fff15 	stw	r5,-4(fp)
		if (p1.x >= 100 && p1.x <= 300 && p1.y >= 40 && p1.y <= 440) {
 8002394:	e0bffe17 	ldw	r2,-8(fp)
 8002398:	10801910 	cmplti	r2,r2,100
 800239c:	1000201e 	bne	r2,zero,8002420 <BaseChoice+0xbc>
 80023a0:	e0bffe17 	ldw	r2,-8(fp)
 80023a4:	10804b48 	cmpgei	r2,r2,301
 80023a8:	10001d1e 	bne	r2,zero,8002420 <BaseChoice+0xbc>
 80023ac:	e0bfff17 	ldw	r2,-4(fp)
 80023b0:	10800a10 	cmplti	r2,r2,40
 80023b4:	10001a1e 	bne	r2,zero,8002420 <BaseChoice+0xbc>
 80023b8:	e0bfff17 	ldw	r2,-4(fp)
 80023bc:	10806e48 	cmpgei	r2,r2,441
 80023c0:	1000171e 	bne	r2,zero,8002420 <BaseChoice+0xbc>
			printf("Chose room# %d\n", p1.y / 40);
 80023c4:	e0ffff17 	ldw	r3,-4(fp)
 80023c8:	00800a04 	movi	r2,40
 80023cc:	1885283a 	div	r2,r3,r2
 80023d0:	010200b4 	movhi	r4,2050
 80023d4:	21002b04 	addi	r4,r4,172
 80023d8:	100b883a 	mov	r5,r2
 80023dc:	80047c80 	call	80047c8 <printf>
			return floor(p1.y / 40);
 80023e0:	e0ffff17 	ldw	r3,-4(fp)
 80023e4:	00800a04 	movi	r2,40
 80023e8:	1885283a 	div	r2,r3,r2
 80023ec:	1009883a 	mov	r4,r2
 80023f0:	8003e980 	call	8003e98 <__floatsidf>
 80023f4:	100b883a 	mov	r5,r2
 80023f8:	180d883a 	mov	r6,r3
 80023fc:	2809883a 	mov	r4,r5
 8002400:	300b883a 	mov	r5,r6
 8002404:	80031c00 	call	80031c0 <floor>
 8002408:	100b883a 	mov	r5,r2
 800240c:	180d883a 	mov	r6,r3
 8002410:	2809883a 	mov	r4,r5
 8002414:	300b883a 	mov	r5,r6
 8002418:	8003e100 	call	8003e10 <__fixdfsi>
 800241c:	00000106 	br	8002424 <BaseChoice+0xc0>
		}
	}
 8002420:	003fd406 	br	8002374 <__alt_data_end+0xfc002374>
	return -1;
}
 8002424:	e037883a 	mov	sp,fp
 8002428:	dfc00117 	ldw	ra,4(sp)
 800242c:	df000017 	ldw	fp,0(sp)
 8002430:	dec00204 	addi	sp,sp,8
 8002434:	f800283a 	ret

08002438 <waitForInterrupt>:

/*
 * A function which waits for either the screen to be touched or receive a serial command
 * upon receving a command or touch data, it returns the command/data
 */
char waitForInterrupt (void){
 8002438:	defffd04 	addi	sp,sp,-12
 800243c:	dfc00215 	stw	ra,8(sp)
 8002440:	df000115 	stw	fp,4(sp)
 8002444:	df000104 	addi	fp,sp,4
	char received_data;
	while(!ScreenTouched()){
 8002448:	00000b06 	br	8002478 <waitForInterrupt+0x40>
		if(RS232TestForReceivedData()){
 800244c:	8000fe80 	call	8000fe8 <RS232TestForReceivedData>
 8002450:	10000926 	beq	r2,zero,8002478 <waitForInterrupt+0x40>
			//delay_double(0.1);
			received_data = getcharRS232();
 8002454:	8000f900 	call	8000f90 <getcharRS232>
 8002458:	e0bfff05 	stb	r2,-4(fp)
			printf("Received: %c\n", received_data);
 800245c:	e0bfff07 	ldb	r2,-4(fp)
 8002460:	010200b4 	movhi	r4,2050
 8002464:	21002f04 	addi	r4,r4,188
 8002468:	100b883a 	mov	r5,r2
 800246c:	80047c80 	call	80047c8 <printf>
			return received_data;
 8002470:	e0bfff03 	ldbu	r2,-4(fp)
 8002474:	00000306 	br	8002484 <waitForInterrupt+0x4c>
 * A function which waits for either the screen to be touched or receive a serial command
 * upon receving a command or touch data, it returns the command/data
 */
char waitForInterrupt (void){
	char received_data;
	while(!ScreenTouched()){
 8002478:	8000d100 	call	8000d10 <ScreenTouched>
 800247c:	103ff326 	beq	r2,zero,800244c <__alt_data_end+0xfc00244c>
			received_data = getcharRS232();
			printf("Received: %c\n", received_data);
			return received_data;
		}
	}
	return 0;
 8002480:	0005883a 	mov	r2,zero
}
 8002484:	e037883a 	mov	sp,fp
 8002488:	dfc00117 	ldw	ra,4(sp)
 800248c:	df000017 	ldw	fp,0(sp)
 8002490:	dec00204 	addi	sp,sp,8
 8002494:	f800283a 	ret

08002498 <InfoSelect>:
/*
 * A function to check where the user has pressed on the room status screen
 * Returns the room number if pressed, or a specific command for certain button presses
 */

int InfoSelect (Point p1){
 8002498:	defffc04 	addi	sp,sp,-16
 800249c:	dfc00315 	stw	ra,12(sp)
 80024a0:	df000215 	stw	fp,8(sp)
 80024a4:	df000204 	addi	fp,sp,8
 80024a8:	e13ffe15 	stw	r4,-8(fp)
 80024ac:	e17fff15 	stw	r5,-4(fp)
	if (p1.x >= 100 && p1.x <= 300 && p1.y >= 40 && p1.y <= 440) {
 80024b0:	e0bffe17 	ldw	r2,-8(fp)
 80024b4:	10801910 	cmplti	r2,r2,100
 80024b8:	1000211e 	bne	r2,zero,8002540 <InfoSelect+0xa8>
 80024bc:	e0bffe17 	ldw	r2,-8(fp)
 80024c0:	10804b48 	cmpgei	r2,r2,301
 80024c4:	10001e1e 	bne	r2,zero,8002540 <InfoSelect+0xa8>
 80024c8:	e0bfff17 	ldw	r2,-4(fp)
 80024cc:	10800a10 	cmplti	r2,r2,40
 80024d0:	10001b1e 	bne	r2,zero,8002540 <InfoSelect+0xa8>
 80024d4:	e0bfff17 	ldw	r2,-4(fp)
 80024d8:	10806e48 	cmpgei	r2,r2,441
 80024dc:	1000181e 	bne	r2,zero,8002540 <InfoSelect+0xa8>
		printf("Chose room# %d\n", (p1.y) / 40);
 80024e0:	e0ffff17 	ldw	r3,-4(fp)
 80024e4:	00800a04 	movi	r2,40
 80024e8:	1885283a 	div	r2,r3,r2
 80024ec:	010200b4 	movhi	r4,2050
 80024f0:	21002b04 	addi	r4,r4,172
 80024f4:	100b883a 	mov	r5,r2
 80024f8:	80047c80 	call	80047c8 <printf>
		return floor((p1.y - 10) / 40);
 80024fc:	e0bfff17 	ldw	r2,-4(fp)
 8002500:	10fffd84 	addi	r3,r2,-10
 8002504:	00800a04 	movi	r2,40
 8002508:	1885283a 	div	r2,r3,r2
 800250c:	1009883a 	mov	r4,r2
 8002510:	8003e980 	call	8003e98 <__floatsidf>
 8002514:	100b883a 	mov	r5,r2
 8002518:	180d883a 	mov	r6,r3
 800251c:	2809883a 	mov	r4,r5
 8002520:	300b883a 	mov	r5,r6
 8002524:	80031c00 	call	80031c0 <floor>
 8002528:	100b883a 	mov	r5,r2
 800252c:	180d883a 	mov	r6,r3
 8002530:	2809883a 	mov	r4,r5
 8002534:	300b883a 	mov	r5,r6
 8002538:	8003e100 	call	8003e10 <__fixdfsi>
 800253c:	00009c06 	br	80027b0 <InfoSelect+0x318>
	} else if (p1.x >= 480 && p1.x <= 560 && p1.y <= 40 * 7.25 - 24
 8002540:	e0bffe17 	ldw	r2,-8(fp)
 8002544:	10807810 	cmplti	r2,r2,480
 8002548:	10001f1e 	bne	r2,zero,80025c8 <InfoSelect+0x130>
 800254c:	e0bffe17 	ldw	r2,-8(fp)
 8002550:	10808c48 	cmpgei	r2,r2,561
 8002554:	10001c1e 	bne	r2,zero,80025c8 <InfoSelect+0x130>
 8002558:	e0bfff17 	ldw	r2,-4(fp)
 800255c:	1009883a 	mov	r4,r2
 8002560:	8003e980 	call	8003e98 <__floatsidf>
 8002564:	100b883a 	mov	r5,r2
 8002568:	180d883a 	mov	r6,r3
 800256c:	2809883a 	mov	r4,r5
 8002570:	300b883a 	mov	r5,r6
 8002574:	000d883a 	mov	r6,zero
 8002578:	01d01c74 	movhi	r7,16497
 800257c:	39e80004 	addi	r7,r7,-24576
 8002580:	8003d300 	call	8003d30 <__ledf2>
 8002584:	00801016 	blt	zero,r2,80025c8 <InfoSelect+0x130>
			&& p1.y >= 40 * 6.25 - 34) {
 8002588:	e0bfff17 	ldw	r2,-4(fp)
 800258c:	1009883a 	mov	r4,r2
 8002590:	8003e980 	call	8003e98 <__floatsidf>
 8002594:	100b883a 	mov	r5,r2
 8002598:	180d883a 	mov	r6,r3
 800259c:	2809883a 	mov	r4,r5
 80025a0:	300b883a 	mov	r5,r6
 80025a4:	000d883a 	mov	r6,zero
 80025a8:	01d01af4 	movhi	r7,16491
 80025ac:	8003c500 	call	8003c50 <__gedf2>
 80025b0:	10000516 	blt	r2,zero,80025c8 <InfoSelect+0x130>
		//Lights off Function
		printf("Turning Lights Off\n");
 80025b4:	010200b4 	movhi	r4,2050
 80025b8:	21003304 	addi	r4,r4,204
 80025bc:	80048dc0 	call	80048dc <puts>
		return LIGHTS_OFF;
 80025c0:	008002c4 	movi	r2,11
 80025c4:	00007a06 	br	80027b0 <InfoSelect+0x318>
	} else if (p1.x >= 570 && p1.x <= 650 && p1.y <= 40 * 7.25 - 24
 80025c8:	e0bffe17 	ldw	r2,-8(fp)
 80025cc:	10808e90 	cmplti	r2,r2,570
 80025d0:	10001f1e 	bne	r2,zero,8002650 <InfoSelect+0x1b8>
 80025d4:	e0bffe17 	ldw	r2,-8(fp)
 80025d8:	1080a2c8 	cmpgei	r2,r2,651
 80025dc:	10001c1e 	bne	r2,zero,8002650 <InfoSelect+0x1b8>
 80025e0:	e0bfff17 	ldw	r2,-4(fp)
 80025e4:	1009883a 	mov	r4,r2
 80025e8:	8003e980 	call	8003e98 <__floatsidf>
 80025ec:	100b883a 	mov	r5,r2
 80025f0:	180d883a 	mov	r6,r3
 80025f4:	2809883a 	mov	r4,r5
 80025f8:	300b883a 	mov	r5,r6
 80025fc:	000d883a 	mov	r6,zero
 8002600:	01d01c74 	movhi	r7,16497
 8002604:	39e80004 	addi	r7,r7,-24576
 8002608:	8003d300 	call	8003d30 <__ledf2>
 800260c:	00801016 	blt	zero,r2,8002650 <InfoSelect+0x1b8>
			&& p1.y >= 40 * 6.25 - 34) {
 8002610:	e0bfff17 	ldw	r2,-4(fp)
 8002614:	1009883a 	mov	r4,r2
 8002618:	8003e980 	call	8003e98 <__floatsidf>
 800261c:	100b883a 	mov	r5,r2
 8002620:	180d883a 	mov	r6,r3
 8002624:	2809883a 	mov	r4,r5
 8002628:	300b883a 	mov	r5,r6
 800262c:	000d883a 	mov	r6,zero
 8002630:	01d01af4 	movhi	r7,16491
 8002634:	8003c500 	call	8003c50 <__gedf2>
 8002638:	10000516 	blt	r2,zero,8002650 <InfoSelect+0x1b8>
		//Lights on function
		printf("Turning Lights On\n");
 800263c:	010200b4 	movhi	r4,2050
 8002640:	21003804 	addi	r4,r4,224
 8002644:	80048dc0 	call	80048dc <puts>
		return LIGHTS_ON;
 8002648:	00800304 	movi	r2,12
 800264c:	00005806 	br	80027b0 <InfoSelect+0x318>
	} else if (p1.x >= 480 && p1.x <= 560 && p1.y <= 40 * 8.75 - 24
 8002650:	e0bffe17 	ldw	r2,-8(fp)
 8002654:	10807810 	cmplti	r2,r2,480
 8002658:	1000201e 	bne	r2,zero,80026dc <InfoSelect+0x244>
 800265c:	e0bffe17 	ldw	r2,-8(fp)
 8002660:	10808c48 	cmpgei	r2,r2,561
 8002664:	10001d1e 	bne	r2,zero,80026dc <InfoSelect+0x244>
 8002668:	e0bfff17 	ldw	r2,-4(fp)
 800266c:	1009883a 	mov	r4,r2
 8002670:	8003e980 	call	8003e98 <__floatsidf>
 8002674:	100b883a 	mov	r5,r2
 8002678:	180d883a 	mov	r6,r3
 800267c:	2809883a 	mov	r4,r5
 8002680:	300b883a 	mov	r5,r6
 8002684:	000d883a 	mov	r6,zero
 8002688:	01d01d34 	movhi	r7,16500
 800268c:	39d80004 	addi	r7,r7,24576
 8002690:	8003d300 	call	8003d30 <__ledf2>
 8002694:	00801116 	blt	zero,r2,80026dc <InfoSelect+0x244>
			&& p1.y >= 40 * 7.75 - 34) {
 8002698:	e0bfff17 	ldw	r2,-4(fp)
 800269c:	1009883a 	mov	r4,r2
 80026a0:	8003e980 	call	8003e98 <__floatsidf>
 80026a4:	100b883a 	mov	r5,r2
 80026a8:	180d883a 	mov	r6,r3
 80026ac:	2809883a 	mov	r4,r5
 80026b0:	300b883a 	mov	r5,r6
 80026b4:	000d883a 	mov	r6,zero
 80026b8:	01d01c74 	movhi	r7,16497
 80026bc:	39d00004 	addi	r7,r7,16384
 80026c0:	8003c500 	call	8003c50 <__gedf2>
 80026c4:	10000516 	blt	r2,zero,80026dc <InfoSelect+0x244>
		//Door lock Function
		printf("Locking Door\n");
 80026c8:	010200b4 	movhi	r4,2050
 80026cc:	21003d04 	addi	r4,r4,244
 80026d0:	80048dc0 	call	80048dc <puts>
		return LOCK_DOOR;
 80026d4:	00800344 	movi	r2,13
 80026d8:	00003506 	br	80027b0 <InfoSelect+0x318>
	} else if (p1.x >= 570 && p1.x <= 650 && p1.y <= 40 * 8.75 - 24
 80026dc:	e0bffe17 	ldw	r2,-8(fp)
 80026e0:	10808e90 	cmplti	r2,r2,570
 80026e4:	1000201e 	bne	r2,zero,8002768 <InfoSelect+0x2d0>
 80026e8:	e0bffe17 	ldw	r2,-8(fp)
 80026ec:	1080a2c8 	cmpgei	r2,r2,651
 80026f0:	10001d1e 	bne	r2,zero,8002768 <InfoSelect+0x2d0>
 80026f4:	e0bfff17 	ldw	r2,-4(fp)
 80026f8:	1009883a 	mov	r4,r2
 80026fc:	8003e980 	call	8003e98 <__floatsidf>
 8002700:	100b883a 	mov	r5,r2
 8002704:	180d883a 	mov	r6,r3
 8002708:	2809883a 	mov	r4,r5
 800270c:	300b883a 	mov	r5,r6
 8002710:	000d883a 	mov	r6,zero
 8002714:	01d01d34 	movhi	r7,16500
 8002718:	39d80004 	addi	r7,r7,24576
 800271c:	8003d300 	call	8003d30 <__ledf2>
 8002720:	00801116 	blt	zero,r2,8002768 <InfoSelect+0x2d0>
			&& p1.y >= 40 * 7.75 - 34) {
 8002724:	e0bfff17 	ldw	r2,-4(fp)
 8002728:	1009883a 	mov	r4,r2
 800272c:	8003e980 	call	8003e98 <__floatsidf>
 8002730:	100b883a 	mov	r5,r2
 8002734:	180d883a 	mov	r6,r3
 8002738:	2809883a 	mov	r4,r5
 800273c:	300b883a 	mov	r5,r6
 8002740:	000d883a 	mov	r6,zero
 8002744:	01d01c74 	movhi	r7,16497
 8002748:	39d00004 	addi	r7,r7,16384
 800274c:	8003c500 	call	8003c50 <__gedf2>
 8002750:	10000516 	blt	r2,zero,8002768 <InfoSelect+0x2d0>
		//Door unlock function
		printf("Unlocking door\n");
 8002754:	010200b4 	movhi	r4,2050
 8002758:	21004104 	addi	r4,r4,260
 800275c:	80048dc0 	call	80048dc <puts>
		return UNLOCK_DOOR;
 8002760:	00800384 	movi	r2,14
 8002764:	00001206 	br	80027b0 <InfoSelect+0x318>
	}
	else if (p1.x>=480 && p1.x<=650 && p1.y >= 40*9 && p1.y <= 40*10){
 8002768:	e0bffe17 	ldw	r2,-8(fp)
 800276c:	10807810 	cmplti	r2,r2,480
 8002770:	10000e1e 	bne	r2,zero,80027ac <InfoSelect+0x314>
 8002774:	e0bffe17 	ldw	r2,-8(fp)
 8002778:	1080a2c8 	cmpgei	r2,r2,651
 800277c:	10000b1e 	bne	r2,zero,80027ac <InfoSelect+0x314>
 8002780:	e0bfff17 	ldw	r2,-4(fp)
 8002784:	10805a10 	cmplti	r2,r2,360
 8002788:	1000081e 	bne	r2,zero,80027ac <InfoSelect+0x314>
 800278c:	e0bfff17 	ldw	r2,-4(fp)
 8002790:	10806448 	cmpgei	r2,r2,401
 8002794:	1000051e 	bne	r2,zero,80027ac <InfoSelect+0x314>
		printf("Toggle Auto Approve\n");
 8002798:	010200b4 	movhi	r4,2050
 800279c:	21004504 	addi	r4,r4,276
 80027a0:	80048dc0 	call	80048dc <puts>
		return AUTO_APPROVE;
 80027a4:	008003c4 	movi	r2,15
 80027a8:	00000106 	br	80027b0 <InfoSelect+0x318>
	}
	return 0;
 80027ac:	0005883a 	mov	r2,zero
}
 80027b0:	e037883a 	mov	sp,fp
 80027b4:	dfc00117 	ldw	ra,4(sp)
 80027b8:	df000017 	ldw	fp,0(sp)
 80027bc:	dec00204 	addi	sp,sp,8
 80027c0:	f800283a 	ret

080027c4 <InfoChoice>:
/*
 * Calls wait for interrupt, and receives the returned command
 * Determines the correct command to execute and returns a corresponding command
 * to the main loop which will execute the command
 */
int InfoChoice( int room_num) {
 80027c4:	defff704 	addi	sp,sp,-36
 80027c8:	dfc00815 	stw	ra,32(sp)
 80027cc:	df000715 	stw	fp,28(sp)
 80027d0:	dc000615 	stw	r16,24(sp)
 80027d4:	df000704 	addi	fp,sp,28
 80027d8:	e13ffe15 	stw	r4,-8(fp)
	Point p1;
	char command;
	int ret;
	char *message = (char*)malloc(100 * sizeof(char));
 80027dc:	01001904 	movi	r4,100
 80027e0:	8003fcc0 	call	8003fcc <malloc>
 80027e4:	e0bff915 	stw	r2,-28(fp)
	while (1) {
		//printf("Info Choice\n");
		command = waitForInterrupt();
 80027e8:	80024380 	call	8002438 <waitForInterrupt>
 80027ec:	e0bffa05 	stb	r2,-24(fp)
		if(command==0){
 80027f0:	e0bffa07 	ldb	r2,-24(fp)
 80027f4:	10000d1e 	bne	r2,zero,800282c <InfoChoice+0x68>
			p1 = GetBasePress();
 80027f8:	8000d740 	call	8000d74 <GetBasePress>
 80027fc:	1009883a 	mov	r4,r2
 8002800:	180b883a 	mov	r5,r3
 8002804:	e13ffc15 	stw	r4,-16(fp)
 8002808:	e17ffd15 	stw	r5,-12(fp)
			ret = InfoSelect(p1);
 800280c:	e13ffc17 	ldw	r4,-16(fp)
 8002810:	e17ffd17 	ldw	r5,-12(fp)
 8002814:	80024980 	call	8002498 <InfoSelect>
 8002818:	e0bffb15 	stw	r2,-20(fp)
			if(ret)return ret;
 800281c:	e0bffb17 	ldw	r2,-20(fp)
 8002820:	10006326 	beq	r2,zero,80029b0 <InfoChoice+0x1ec>
 8002824:	e0bffb17 	ldw	r2,-20(fp)
 8002828:	00006206 	br	80029b4 <InfoChoice+0x1f0>
		}
		else if(command=='t'){
 800282c:	e0bffa07 	ldb	r2,-24(fp)
 8002830:	10801d18 	cmpnei	r2,r2,116
 8002834:	10000b1e 	bne	r2,zero,8002864 <InfoChoice+0xa0>
			//TempReadingFunction
			roomArray[room_num-1].temp = GetTemp();
 8002838:	e0bffe17 	ldw	r2,-8(fp)
 800283c:	143fffc4 	addi	r16,r2,-1
 8002840:	80011700 	call	8001170 <GetTemp>
 8002844:	1009883a 	mov	r4,r2
 8002848:	008200b4 	movhi	r2,2050
 800284c:	108ed404 	addi	r2,r2,15184
 8002850:	80c00624 	muli	r3,r16,24
 8002854:	10c5883a 	add	r2,r2,r3
 8002858:	11000015 	stw	r4,0(r2)
			return 99;
 800285c:	008018c4 	movi	r2,99
 8002860:	00005406 	br	80029b4 <InfoChoice+0x1f0>
		}
		else if(command=='5'){
 8002864:	e0bffa07 	ldb	r2,-24(fp)
 8002868:	10800d58 	cmpnei	r2,r2,53
 800286c:	10000a1e 	bne	r2,zero,8002898 <InfoChoice+0xd4>
			//Room is occupied
			roomArray[room_num-1].occupied = 1;
 8002870:	e0bffe17 	ldw	r2,-8(fp)
 8002874:	10ffffc4 	addi	r3,r2,-1
 8002878:	008200b4 	movhi	r2,2050
 800287c:	108ed404 	addi	r2,r2,15184
 8002880:	18c00624 	muli	r3,r3,24
 8002884:	10c5883a 	add	r2,r2,r3
 8002888:	10800504 	addi	r2,r2,20
 800288c:	00c00044 	movi	r3,1
 8002890:	10c00015 	stw	r3,0(r2)
 8002894:	00004606 	br	80029b0 <InfoChoice+0x1ec>
		}
		else if(command=='2'){
 8002898:	e0bffa07 	ldb	r2,-24(fp)
 800289c:	10800c98 	cmpnei	r2,r2,50
 80028a0:	1000091e 	bne	r2,zero,80028c8 <InfoChoice+0x104>
			//Room is free
			roomArray[room_num-1].occupied = 0;
 80028a4:	e0bffe17 	ldw	r2,-8(fp)
 80028a8:	10ffffc4 	addi	r3,r2,-1
 80028ac:	008200b4 	movhi	r2,2050
 80028b0:	108ed404 	addi	r2,r2,15184
 80028b4:	18c00624 	muli	r3,r3,24
 80028b8:	10c5883a 	add	r2,r2,r3
 80028bc:	10800504 	addi	r2,r2,20
 80028c0:	10000015 	stw	zero,0(r2)
 80028c4:	00003a06 	br	80029b0 <InfoChoice+0x1ec>
		}
		// If the request a room button was pressed   
		else if (command=='3'){
 80028c8:	e0bffa07 	ldb	r2,-24(fp)
 80028cc:	10800cd8 	cmpnei	r2,r2,51
 80028d0:	1000261e 	bne	r2,zero,800296c <InfoChoice+0x1a8>
			roomArray[curr_room_num-1].requested = 1;
 80028d4:	d0a6d717 	ldw	r2,-25764(gp)
 80028d8:	10ffffc4 	addi	r3,r2,-1
 80028dc:	008200b4 	movhi	r2,2050
 80028e0:	108ed404 	addi	r2,r2,15184
 80028e4:	18c00624 	muli	r3,r3,24
 80028e8:	10c5883a 	add	r2,r2,r3
 80028ec:	10800304 	addi	r2,r2,12
 80028f0:	00c00044 	movi	r3,1
 80028f4:	10c00015 	stw	r3,0(r2)
			//sprintf(message, "send_sms(\"The room requested: %d\")", curr_room_num);	// Customizes the message to specify which room was requested
			//Wifi_Send_Sms(message);								// Sends the message through Wi-Fi chip
			if(auto_approve && roomArray[curr_room_num-1].in_use == 0){
 80028f8:	d0a6d617 	ldw	r2,-25768(gp)
 80028fc:	10000b26 	beq	r2,zero,800292c <InfoChoice+0x168>
 8002900:	d0a6d717 	ldw	r2,-25764(gp)
 8002904:	10ffffc4 	addi	r3,r2,-1
 8002908:	008200b4 	movhi	r2,2050
 800290c:	108ed404 	addi	r2,r2,15184
 8002910:	18c00624 	muli	r3,r3,24
 8002914:	10c5883a 	add	r2,r2,r3
 8002918:	10800404 	addi	r2,r2,16
 800291c:	10800017 	ldw	r2,0(r2)
 8002920:	1000021e 	bne	r2,zero,800292c <InfoChoice+0x168>
				return UNLOCK_DOOR;
 8002924:	00800384 	movi	r2,14
 8002928:	00002206 	br	80029b4 <InfoChoice+0x1f0>
			}
			else if(auto_approve && roomArray[room_num-1].in_use == 1){
 800292c:	d0a6d617 	ldw	r2,-25768(gp)
 8002930:	10000c26 	beq	r2,zero,8002964 <InfoChoice+0x1a0>
 8002934:	e0bffe17 	ldw	r2,-8(fp)
 8002938:	10ffffc4 	addi	r3,r2,-1
 800293c:	008200b4 	movhi	r2,2050
 8002940:	108ed404 	addi	r2,r2,15184
 8002944:	18c00624 	muli	r3,r3,24
 8002948:	10c5883a 	add	r2,r2,r3
 800294c:	10800404 	addi	r2,r2,16
 8002950:	10800017 	ldw	r2,0(r2)
 8002954:	10800058 	cmpnei	r2,r2,1
 8002958:	1000021e 	bne	r2,zero,8002964 <InfoChoice+0x1a0>
				return LOCK_DOOR;
 800295c:	00800344 	movi	r2,13
 8002960:	00001406 	br	80029b4 <InfoChoice+0x1f0>
			}
			return 99;
 8002964:	008018c4 	movi	r2,99
 8002968:	00001206 	br	80029b4 <InfoChoice+0x1f0>
		}
		else if (command == 'L'){
 800296c:	e0bffa07 	ldb	r2,-24(fp)
 8002970:	10801318 	cmpnei	r2,r2,76
 8002974:	10000e1e 	bne	r2,zero,80029b0 <InfoChoice+0x1ec>
			if(roomArray[0].lights){
 8002978:	008200b4 	movhi	r2,2050
 800297c:	108ed404 	addi	r2,r2,15184
 8002980:	10800117 	ldw	r2,4(r2)
 8002984:	10000426 	beq	r2,zero,8002998 <InfoChoice+0x1d4>
				roomArray[0].lights = 0;
 8002988:	008200b4 	movhi	r2,2050
 800298c:	108ed404 	addi	r2,r2,15184
 8002990:	10000115 	stw	zero,4(r2)
 8002994:	00000406 	br	80029a8 <InfoChoice+0x1e4>
			}
			else{
				roomArray[0].lights = 1;
 8002998:	008200b4 	movhi	r2,2050
 800299c:	108ed404 	addi	r2,r2,15184
 80029a0:	00c00044 	movi	r3,1
 80029a4:	10c00115 	stw	r3,4(r2)
			}
			return 99;
 80029a8:	008018c4 	movi	r2,99
 80029ac:	00000106 	br	80029b4 <InfoChoice+0x1f0>
		}

	}
 80029b0:	003f8d06 	br	80027e8 <__alt_data_end+0xfc0027e8>
	return -1;
}
 80029b4:	e6ffff04 	addi	sp,fp,-4
 80029b8:	dfc00217 	ldw	ra,8(sp)
 80029bc:	df000117 	ldw	fp,4(sp)
 80029c0:	dc000017 	ldw	r16,0(sp)
 80029c4:	dec00304 	addi	sp,sp,12
 80029c8:	f800283a 	ret

080029cc <PrintNumbers>:

/*
 * Prints the room numbers on top of the left hand room select column,
 * with the selected room having a different background
 */
void PrintNumbers(int room_num) {
 80029cc:	defff804 	addi	sp,sp,-32
 80029d0:	dfc00715 	stw	ra,28(sp)
 80029d4:	df000615 	stw	fp,24(sp)
 80029d8:	df000604 	addi	fp,sp,24
 80029dc:	e13fff15 	stw	r4,-4(fp)
	int j;
	char* roomString = NULL;
 80029e0:	e03ffe15 	stw	zero,-8(fp)
	for (j = 1; j <= 10; j++) {
 80029e4:	00800044 	movi	r2,1
 80029e8:	e0bffd15 	stw	r2,-12(fp)
 80029ec:	00002806 	br	8002a90 <PrintNumbers+0xc4>
		sprintf(roomString, "Room %d", j);
 80029f0:	e13ffe17 	ldw	r4,-8(fp)
 80029f4:	014200b4 	movhi	r5,2050
 80029f8:	297ffa04 	addi	r5,r5,-24
 80029fc:	e1bffd17 	ldw	r6,-12(fp)
 8002a00:	800499c0 	call	800499c <sprintf>
		if (j == room_num) {
 8002a04:	e0fffd17 	ldw	r3,-12(fp)
 8002a08:	e0bfff17 	ldw	r2,-4(fp)
 8002a0c:	18800f1e 	bne	r3,r2,8002a4c <PrintNumbers+0x80>
			DrawString(105, 40 * j + 40 / 4, BLACK, NAVY, roomString, 2, 1);
 8002a10:	e0bffd17 	ldw	r2,-12(fp)
 8002a14:	10800a24 	muli	r2,r2,40
 8002a18:	10c00284 	addi	r3,r2,10
 8002a1c:	e0bffe17 	ldw	r2,-8(fp)
 8002a20:	d8800015 	stw	r2,0(sp)
 8002a24:	00800084 	movi	r2,2
 8002a28:	d8800115 	stw	r2,4(sp)
 8002a2c:	00800044 	movi	r2,1
 8002a30:	d8800215 	stw	r2,8(sp)
 8002a34:	01001a44 	movi	r4,105
 8002a38:	180b883a 	mov	r5,r3
 8002a3c:	000d883a 	mov	r6,zero
 8002a40:	01c003c4 	movi	r7,15
 8002a44:	8000ac40 	call	8000ac4 <DrawString>
 8002a48:	00000e06 	br	8002a84 <PrintNumbers+0xb8>

		} else {
			DrawString(105, 40 * j + 40 / 4, BLACK, TEAL, roomString, 2, 1);
 8002a4c:	e0bffd17 	ldw	r2,-12(fp)
 8002a50:	10800a24 	muli	r2,r2,40
 8002a54:	10c00284 	addi	r3,r2,10
 8002a58:	e0bffe17 	ldw	r2,-8(fp)
 8002a5c:	d8800015 	stw	r2,0(sp)
 8002a60:	00800084 	movi	r2,2
 8002a64:	d8800115 	stw	r2,4(sp)
 8002a68:	00800044 	movi	r2,1
 8002a6c:	d8800215 	stw	r2,8(sp)
 8002a70:	01001a44 	movi	r4,105
 8002a74:	180b883a 	mov	r5,r3
 8002a78:	000d883a 	mov	r6,zero
 8002a7c:	01c00384 	movi	r7,14
 8002a80:	8000ac40 	call	8000ac4 <DrawString>
 * with the selected room having a different background
 */
void PrintNumbers(int room_num) {
	int j;
	char* roomString = NULL;
	for (j = 1; j <= 10; j++) {
 8002a84:	e0bffd17 	ldw	r2,-12(fp)
 8002a88:	10800044 	addi	r2,r2,1
 8002a8c:	e0bffd15 	stw	r2,-12(fp)
 8002a90:	e0bffd17 	ldw	r2,-12(fp)
 8002a94:	108002d0 	cmplti	r2,r2,11
 8002a98:	103fd51e 	bne	r2,zero,80029f0 <__alt_data_end+0xfc0029f0>

		} else {
			DrawString(105, 40 * j + 40 / 4, BLACK, TEAL, roomString, 2, 1);
		}
	}
}
 8002a9c:	e037883a 	mov	sp,fp
 8002aa0:	dfc00117 	ldw	ra,4(sp)
 8002aa4:	df000017 	ldw	fp,0(sp)
 8002aa8:	dec00204 	addi	sp,sp,8
 8002aac:	f800283a 	ret

08002ab0 <InitRoomArray>:

/*
 * Initializes all the values in the room data array.
 * Also hardcodes requests into room 3 and 4 for testing and demo purposes
 */
void InitRoomArray(void){
 8002ab0:	defffe04 	addi	sp,sp,-8
 8002ab4:	df000115 	stw	fp,4(sp)
 8002ab8:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < 10; i++) {
 8002abc:	e03fff15 	stw	zero,-4(fp)
 8002ac0:	00002c06 	br	8002b74 <InitRoomArray+0xc4>
		roomArray[i].lights = 0;
 8002ac4:	008200b4 	movhi	r2,2050
 8002ac8:	108ed404 	addi	r2,r2,15184
 8002acc:	e0ffff17 	ldw	r3,-4(fp)
 8002ad0:	18c00624 	muli	r3,r3,24
 8002ad4:	10c5883a 	add	r2,r2,r3
 8002ad8:	10800104 	addi	r2,r2,4
 8002adc:	10000015 	stw	zero,0(r2)
		roomArray[i].door = 0;
 8002ae0:	008200b4 	movhi	r2,2050
 8002ae4:	108ed404 	addi	r2,r2,15184
 8002ae8:	e0ffff17 	ldw	r3,-4(fp)
 8002aec:	18c00624 	muli	r3,r3,24
 8002af0:	10c5883a 	add	r2,r2,r3
 8002af4:	10800204 	addi	r2,r2,8
 8002af8:	10000015 	stw	zero,0(r2)
		roomArray[i].requested = 0;
 8002afc:	008200b4 	movhi	r2,2050
 8002b00:	108ed404 	addi	r2,r2,15184
 8002b04:	e0ffff17 	ldw	r3,-4(fp)
 8002b08:	18c00624 	muli	r3,r3,24
 8002b0c:	10c5883a 	add	r2,r2,r3
 8002b10:	10800304 	addi	r2,r2,12
 8002b14:	10000015 	stw	zero,0(r2)
		roomArray[i].in_use = 0;
 8002b18:	008200b4 	movhi	r2,2050
 8002b1c:	108ed404 	addi	r2,r2,15184
 8002b20:	e0ffff17 	ldw	r3,-4(fp)
 8002b24:	18c00624 	muli	r3,r3,24
 8002b28:	10c5883a 	add	r2,r2,r3
 8002b2c:	10800404 	addi	r2,r2,16
 8002b30:	10000015 	stw	zero,0(r2)
		roomArray[i].occupied = 0;
 8002b34:	008200b4 	movhi	r2,2050
 8002b38:	108ed404 	addi	r2,r2,15184
 8002b3c:	e0ffff17 	ldw	r3,-4(fp)
 8002b40:	18c00624 	muli	r3,r3,24
 8002b44:	10c5883a 	add	r2,r2,r3
 8002b48:	10800504 	addi	r2,r2,20
 8002b4c:	10000015 	stw	zero,0(r2)
		roomArray[i].temp = 0;
 8002b50:	008200b4 	movhi	r2,2050
 8002b54:	108ed404 	addi	r2,r2,15184
 8002b58:	e0ffff17 	ldw	r3,-4(fp)
 8002b5c:	18c00624 	muli	r3,r3,24
 8002b60:	10c5883a 	add	r2,r2,r3
 8002b64:	10000015 	stw	zero,0(r2)
 * Initializes all the values in the room data array.
 * Also hardcodes requests into room 3 and 4 for testing and demo purposes
 */
void InitRoomArray(void){
	int i;
	for (i = 0; i < 10; i++) {
 8002b68:	e0bfff17 	ldw	r2,-4(fp)
 8002b6c:	10800044 	addi	r2,r2,1
 8002b70:	e0bfff15 	stw	r2,-4(fp)
 8002b74:	e0bfff17 	ldw	r2,-4(fp)
 8002b78:	10800290 	cmplti	r2,r2,10
 8002b7c:	103fd11e 	bne	r2,zero,8002ac4 <__alt_data_end+0xfc002ac4>
		roomArray[i].requested = 0;
		roomArray[i].in_use = 0;
		roomArray[i].occupied = 0;
		roomArray[i].temp = 0;
	}
	roomArray[3].requested = 1;
 8002b80:	008200b4 	movhi	r2,2050
 8002b84:	108ed404 	addi	r2,r2,15184
 8002b88:	00c00044 	movi	r3,1
 8002b8c:	10c01515 	stw	r3,84(r2)
	roomArray[4].requested = 1;
 8002b90:	008200b4 	movhi	r2,2050
 8002b94:	108ed404 	addi	r2,r2,15184
 8002b98:	00c00044 	movi	r3,1
 8002b9c:	10c01b15 	stw	r3,108(r2)
}
 8002ba0:	e037883a 	mov	sp,fp
 8002ba4:	df000017 	ldw	fp,0(sp)
 8002ba8:	dec00104 	addi	sp,sp,4
 8002bac:	f800283a 	ret

08002bb0 <RunDisplay>:
 * Main loop to run the program.
 * Starts off initialzing all the serial outputs and bluetooth
 * Continues into the display and gets the users touchscreen press
 * Executes the commands returned from InfoChoice() and updates the roomArray as necessary
 */
void RunDisplay(void) {
 8002bb0:	defffa04 	addi	sp,sp,-24
 8002bb4:	dfc00515 	stw	ra,20(sp)
 8002bb8:	df000415 	stw	fp,16(sp)
 8002bbc:	df000404 	addi	fp,sp,16

	int last_room_num;
	int k;

	// Initialization of all internal and external components
	AttemptBluetoothConnection();
 8002bc0:	80016a40 	call	80016a4 <AttemptBluetoothConnection>
	InitRoomArray();
 8002bc4:	8002ab00 	call	8002ab0 <InitRoomArray>
	Init_Touch();
 8002bc8:	8000cac0 	call	8000cac <Init_Touch>
	//Wifi_Init();
	Init_ISR();
 8002bcc:	80018500 	call	8001850 <Init_ISR>

	BaseDisplay();
 8002bd0:	8001b440 	call	8001b44 <BaseDisplay>
	last_room_num = BaseChoice();
 8002bd4:	80023640 	call	8002364 <BaseChoice>
 8002bd8:	e0bffe15 	stw	r2,-8(fp)


	while (1) {
		if (last_room_num >= 1 && last_room_num <= 10) {
 8002bdc:	e0bffe17 	ldw	r2,-8(fp)
 8002be0:	0080060e 	bge	zero,r2,8002bfc <RunDisplay+0x4c>
 8002be4:	e0bffe17 	ldw	r2,-8(fp)
 8002be8:	108002c8 	cmpgei	r2,r2,11
 8002bec:	1000031e 	bne	r2,zero,8002bfc <RunDisplay+0x4c>
			curr_room_num = last_room_num;
 8002bf0:	e0bffe17 	ldw	r2,-8(fp)
 8002bf4:	d0a6d715 	stw	r2,-25764(gp)
 8002bf8:	0000f806 	br	8002fdc <RunDisplay+0x42c>
		}
		else if (last_room_num == ERROR) {
 8002bfc:	e0bffe17 	ldw	r2,-8(fp)
 8002c00:	10bfffd8 	cmpnei	r2,r2,-1
 8002c04:	1000041e 	bne	r2,zero,8002c18 <RunDisplay+0x68>
			printf("Error, my dude\n");
 8002c08:	010200b4 	movhi	r4,2050
 8002c0c:	21004a04 	addi	r4,r4,296
 8002c10:	80048dc0 	call	80048dc <puts>
 8002c14:	0000f106 	br	8002fdc <RunDisplay+0x42c>
		}
		else if (last_room_num == LIGHTS_OFF) {
 8002c18:	e0bffe17 	ldw	r2,-8(fp)
 8002c1c:	108002d8 	cmpnei	r2,r2,11
 8002c20:	10000d1e 	bne	r2,zero,8002c58 <RunDisplay+0xa8>
			roomArray[curr_room_num - 1].lights = 0;
 8002c24:	d0a6d717 	ldw	r2,-25764(gp)
 8002c28:	10ffffc4 	addi	r3,r2,-1
 8002c2c:	008200b4 	movhi	r2,2050
 8002c30:	108ed404 	addi	r2,r2,15184
 8002c34:	18c00624 	muli	r3,r3,24
 8002c38:	10c5883a 	add	r2,r2,r3
 8002c3c:	10800104 	addi	r2,r2,4
 8002c40:	10000015 	stw	zero,0(r2)
			if (curr_room_num == 1) {
 8002c44:	d0a6d717 	ldw	r2,-25764(gp)
 8002c48:	10800058 	cmpnei	r2,r2,1
 8002c4c:	1000e31e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
				TurnOffLights();
 8002c50:	800110c0 	call	800110c <TurnOffLights>
 8002c54:	0000e106 	br	8002fdc <RunDisplay+0x42c>
			}
		}
		else if (last_room_num == LIGHTS_ON) {
 8002c58:	e0bffe17 	ldw	r2,-8(fp)
 8002c5c:	10800318 	cmpnei	r2,r2,12
 8002c60:	10000e1e 	bne	r2,zero,8002c9c <RunDisplay+0xec>
			roomArray[curr_room_num - 1].lights = 1;
 8002c64:	d0a6d717 	ldw	r2,-25764(gp)
 8002c68:	10ffffc4 	addi	r3,r2,-1
 8002c6c:	008200b4 	movhi	r2,2050
 8002c70:	108ed404 	addi	r2,r2,15184
 8002c74:	18c00624 	muli	r3,r3,24
 8002c78:	10c5883a 	add	r2,r2,r3
 8002c7c:	10800104 	addi	r2,r2,4
 8002c80:	00c00044 	movi	r3,1
 8002c84:	10c00015 	stw	r3,0(r2)
			if (curr_room_num == 1) {
 8002c88:	d0a6d717 	ldw	r2,-25764(gp)
 8002c8c:	10800058 	cmpnei	r2,r2,1
 8002c90:	1000d21e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
				TurnOnLights();
 8002c94:	80010e00 	call	80010e0 <TurnOnLights>
 8002c98:	0000d006 	br	8002fdc <RunDisplay+0x42c>
			}
		}
		else if (last_room_num == LOCK_DOOR) {
 8002c9c:	e0bffe17 	ldw	r2,-8(fp)
 8002ca0:	10800358 	cmpnei	r2,r2,13
 8002ca4:	1000581e 	bne	r2,zero,8002e08 <RunDisplay+0x258>
			roomArray[curr_room_num - 1].door = 0;
 8002ca8:	d0a6d717 	ldw	r2,-25764(gp)
 8002cac:	10ffffc4 	addi	r3,r2,-1
 8002cb0:	008200b4 	movhi	r2,2050
 8002cb4:	108ed404 	addi	r2,r2,15184
 8002cb8:	18c00624 	muli	r3,r3,24
 8002cbc:	10c5883a 	add	r2,r2,r3
 8002cc0:	10800204 	addi	r2,r2,8
 8002cc4:	10000015 	stw	zero,0(r2)
			if (curr_room_num == 1) {
 8002cc8:	d0a6d717 	ldw	r2,-25764(gp)
 8002ccc:	10800058 	cmpnei	r2,r2,1
 8002cd0:	1000011e 	bne	r2,zero,8002cd8 <RunDisplay+0x128>
				CloseServo();
 8002cd4:	80010b40 	call	80010b4 <CloseServo>
			}
			if (roomArray[curr_room_num - 1].in_use==0 && roomArray[curr_room_num - 1].requested ) {
 8002cd8:	d0a6d717 	ldw	r2,-25764(gp)
 8002cdc:	10ffffc4 	addi	r3,r2,-1
 8002ce0:	008200b4 	movhi	r2,2050
 8002ce4:	108ed404 	addi	r2,r2,15184
 8002ce8:	18c00624 	muli	r3,r3,24
 8002cec:	10c5883a 	add	r2,r2,r3
 8002cf0:	10800404 	addi	r2,r2,16
 8002cf4:	10800017 	ldw	r2,0(r2)
 8002cf8:	1000121e 	bne	r2,zero,8002d44 <RunDisplay+0x194>
 8002cfc:	d0a6d717 	ldw	r2,-25764(gp)
 8002d00:	10ffffc4 	addi	r3,r2,-1
 8002d04:	008200b4 	movhi	r2,2050
 8002d08:	108ed404 	addi	r2,r2,15184
 8002d0c:	18c00624 	muli	r3,r3,24
 8002d10:	10c5883a 	add	r2,r2,r3
 8002d14:	10800304 	addi	r2,r2,12
 8002d18:	10800017 	ldw	r2,0(r2)
 8002d1c:	10000926 	beq	r2,zero,8002d44 <RunDisplay+0x194>
				roomArray[curr_room_num - 1].requested = 0;
 8002d20:	d0a6d717 	ldw	r2,-25764(gp)
 8002d24:	10ffffc4 	addi	r3,r2,-1
 8002d28:	008200b4 	movhi	r2,2050
 8002d2c:	108ed404 	addi	r2,r2,15184
 8002d30:	18c00624 	muli	r3,r3,24
 8002d34:	10c5883a 	add	r2,r2,r3
 8002d38:	10800304 	addi	r2,r2,12
 8002d3c:	10000015 	stw	zero,0(r2)
 8002d40:	0000a606 	br	8002fdc <RunDisplay+0x42c>
			}
			else if (roomArray[curr_room_num - 1].in_use==1 && roomArray[curr_room_num - 1].requested ) {
 8002d44:	d0a6d717 	ldw	r2,-25764(gp)
 8002d48:	10ffffc4 	addi	r3,r2,-1
 8002d4c:	008200b4 	movhi	r2,2050
 8002d50:	108ed404 	addi	r2,r2,15184
 8002d54:	18c00624 	muli	r3,r3,24
 8002d58:	10c5883a 	add	r2,r2,r3
 8002d5c:	10800404 	addi	r2,r2,16
 8002d60:	10800017 	ldw	r2,0(r2)
 8002d64:	10800058 	cmpnei	r2,r2,1
 8002d68:	10009c1e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
 8002d6c:	d0a6d717 	ldw	r2,-25764(gp)
 8002d70:	10ffffc4 	addi	r3,r2,-1
 8002d74:	008200b4 	movhi	r2,2050
 8002d78:	108ed404 	addi	r2,r2,15184
 8002d7c:	18c00624 	muli	r3,r3,24
 8002d80:	10c5883a 	add	r2,r2,r3
 8002d84:	10800304 	addi	r2,r2,12
 8002d88:	10800017 	ldw	r2,0(r2)
 8002d8c:	10009326 	beq	r2,zero,8002fdc <RunDisplay+0x42c>
				roomArray[curr_room_num - 1].requested = 0;
 8002d90:	d0a6d717 	ldw	r2,-25764(gp)
 8002d94:	10ffffc4 	addi	r3,r2,-1
 8002d98:	008200b4 	movhi	r2,2050
 8002d9c:	108ed404 	addi	r2,r2,15184
 8002da0:	18c00624 	muli	r3,r3,24
 8002da4:	10c5883a 	add	r2,r2,r3
 8002da8:	10800304 	addi	r2,r2,12
 8002dac:	10000015 	stw	zero,0(r2)
				roomArray[curr_room_num-1].in_use = 0;
 8002db0:	d0a6d717 	ldw	r2,-25764(gp)
 8002db4:	10ffffc4 	addi	r3,r2,-1
 8002db8:	008200b4 	movhi	r2,2050
 8002dbc:	108ed404 	addi	r2,r2,15184
 8002dc0:	18c00624 	muli	r3,r3,24
 8002dc4:	10c5883a 	add	r2,r2,r3
 8002dc8:	10800404 	addi	r2,r2,16
 8002dcc:	10000015 	stw	zero,0(r2)
				roomArray[curr_room_num-1].lights = 0;
 8002dd0:	d0a6d717 	ldw	r2,-25764(gp)
 8002dd4:	10ffffc4 	addi	r3,r2,-1
 8002dd8:	008200b4 	movhi	r2,2050
 8002ddc:	108ed404 	addi	r2,r2,15184
 8002de0:	18c00624 	muli	r3,r3,24
 8002de4:	10c5883a 	add	r2,r2,r3
 8002de8:	10800104 	addi	r2,r2,4
 8002dec:	10000015 	stw	zero,0(r2)
				if (curr_room_num == 1) {
 8002df0:	d0a6d717 	ldw	r2,-25764(gp)
 8002df4:	10800058 	cmpnei	r2,r2,1
 8002df8:	1000781e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
					CloseServo();
 8002dfc:	80010b40 	call	80010b4 <CloseServo>
					TurnOffLights();
 8002e00:	800110c0 	call	800110c <TurnOffLights>
 8002e04:	00007506 	br	8002fdc <RunDisplay+0x42c>
				}
			}
		} else if (last_room_num == UNLOCK_DOOR) {
 8002e08:	e0bffe17 	ldw	r2,-8(fp)
 8002e0c:	10800398 	cmpnei	r2,r2,14
 8002e10:	10003f1e 	bne	r2,zero,8002f10 <RunDisplay+0x360>
			roomArray[curr_room_num - 1].door = 1;
 8002e14:	d0a6d717 	ldw	r2,-25764(gp)
 8002e18:	10ffffc4 	addi	r3,r2,-1
 8002e1c:	008200b4 	movhi	r2,2050
 8002e20:	108ed404 	addi	r2,r2,15184
 8002e24:	18c00624 	muli	r3,r3,24
 8002e28:	10c5883a 	add	r2,r2,r3
 8002e2c:	10800204 	addi	r2,r2,8
 8002e30:	00c00044 	movi	r3,1
 8002e34:	10c00015 	stw	r3,0(r2)
			if (curr_room_num == 1) {
 8002e38:	d0a6d717 	ldw	r2,-25764(gp)
 8002e3c:	10800058 	cmpnei	r2,r2,1
 8002e40:	1000011e 	bne	r2,zero,8002e48 <RunDisplay+0x298>
				OpenServo();
 8002e44:	80010880 	call	8001088 <OpenServo>
			}
			if (roomArray[curr_room_num - 1].requested && roomArray[curr_room_num - 1].in_use==0) {
 8002e48:	d0a6d717 	ldw	r2,-25764(gp)
 8002e4c:	10ffffc4 	addi	r3,r2,-1
 8002e50:	008200b4 	movhi	r2,2050
 8002e54:	108ed404 	addi	r2,r2,15184
 8002e58:	18c00624 	muli	r3,r3,24
 8002e5c:	10c5883a 	add	r2,r2,r3
 8002e60:	10800304 	addi	r2,r2,12
 8002e64:	10800017 	ldw	r2,0(r2)
 8002e68:	10005c26 	beq	r2,zero,8002fdc <RunDisplay+0x42c>
 8002e6c:	d0a6d717 	ldw	r2,-25764(gp)
 8002e70:	10ffffc4 	addi	r3,r2,-1
 8002e74:	008200b4 	movhi	r2,2050
 8002e78:	108ed404 	addi	r2,r2,15184
 8002e7c:	18c00624 	muli	r3,r3,24
 8002e80:	10c5883a 	add	r2,r2,r3
 8002e84:	10800404 	addi	r2,r2,16
 8002e88:	10800017 	ldw	r2,0(r2)
 8002e8c:	1000531e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
				roomArray[curr_room_num - 1].requested = 0;
 8002e90:	d0a6d717 	ldw	r2,-25764(gp)
 8002e94:	10ffffc4 	addi	r3,r2,-1
 8002e98:	008200b4 	movhi	r2,2050
 8002e9c:	108ed404 	addi	r2,r2,15184
 8002ea0:	18c00624 	muli	r3,r3,24
 8002ea4:	10c5883a 	add	r2,r2,r3
 8002ea8:	10800304 	addi	r2,r2,12
 8002eac:	10000015 	stw	zero,0(r2)
				roomArray[curr_room_num - 1].in_use = 1;
 8002eb0:	d0a6d717 	ldw	r2,-25764(gp)
 8002eb4:	10ffffc4 	addi	r3,r2,-1
 8002eb8:	008200b4 	movhi	r2,2050
 8002ebc:	108ed404 	addi	r2,r2,15184
 8002ec0:	18c00624 	muli	r3,r3,24
 8002ec4:	10c5883a 	add	r2,r2,r3
 8002ec8:	10800404 	addi	r2,r2,16
 8002ecc:	00c00044 	movi	r3,1
 8002ed0:	10c00015 	stw	r3,0(r2)
				roomArray[curr_room_num - 1].lights = 1;
 8002ed4:	d0a6d717 	ldw	r2,-25764(gp)
 8002ed8:	10ffffc4 	addi	r3,r2,-1
 8002edc:	008200b4 	movhi	r2,2050
 8002ee0:	108ed404 	addi	r2,r2,15184
 8002ee4:	18c00624 	muli	r3,r3,24
 8002ee8:	10c5883a 	add	r2,r2,r3
 8002eec:	10800104 	addi	r2,r2,4
 8002ef0:	00c00044 	movi	r3,1
 8002ef4:	10c00015 	stw	r3,0(r2)
				if (curr_room_num == 1) {
 8002ef8:	d0a6d717 	ldw	r2,-25764(gp)
 8002efc:	10800058 	cmpnei	r2,r2,1
 8002f00:	1000361e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
					OpenServo();
 8002f04:	80010880 	call	8001088 <OpenServo>
					TurnOnLights();
 8002f08:	80010e00 	call	80010e0 <TurnOnLights>
 8002f0c:	00003306 	br	8002fdc <RunDisplay+0x42c>

				}
			}
		}
		else if (last_room_num == AUTO_APPROVE){
 8002f10:	e0bffe17 	ldw	r2,-8(fp)
 8002f14:	108003d8 	cmpnei	r2,r2,15
 8002f18:	1000301e 	bne	r2,zero,8002fdc <RunDisplay+0x42c>
			if(auto_approve){
 8002f1c:	d0a6d617 	ldw	r2,-25768(gp)
 8002f20:	10000226 	beq	r2,zero,8002f2c <RunDisplay+0x37c>
				auto_approve=0;
 8002f24:	d026d615 	stw	zero,-25768(gp)
 8002f28:	00002c06 	br	8002fdc <RunDisplay+0x42c>
			}
			else{
				auto_approve = 1;
 8002f2c:	00800044 	movi	r2,1
 8002f30:	d0a6d615 	stw	r2,-25768(gp)
				for (k = 0; k < 10; k++) {
 8002f34:	e03fff15 	stw	zero,-4(fp)
 8002f38:	00002506 	br	8002fd0 <RunDisplay+0x420>
					if(roomArray[k].requested){
 8002f3c:	008200b4 	movhi	r2,2050
 8002f40:	108ed404 	addi	r2,r2,15184
 8002f44:	e0ffff17 	ldw	r3,-4(fp)
 8002f48:	18c00624 	muli	r3,r3,24
 8002f4c:	10c5883a 	add	r2,r2,r3
 8002f50:	10800304 	addi	r2,r2,12
 8002f54:	10800017 	ldw	r2,0(r2)
 8002f58:	10001a26 	beq	r2,zero,8002fc4 <RunDisplay+0x414>
						roomArray[k].requested=0;
 8002f5c:	008200b4 	movhi	r2,2050
 8002f60:	108ed404 	addi	r2,r2,15184
 8002f64:	e0ffff17 	ldw	r3,-4(fp)
 8002f68:	18c00624 	muli	r3,r3,24
 8002f6c:	10c5883a 	add	r2,r2,r3
 8002f70:	10800304 	addi	r2,r2,12
 8002f74:	10000015 	stw	zero,0(r2)
						roomArray[k].in_use = 1;
 8002f78:	008200b4 	movhi	r2,2050
 8002f7c:	108ed404 	addi	r2,r2,15184
 8002f80:	e0ffff17 	ldw	r3,-4(fp)
 8002f84:	18c00624 	muli	r3,r3,24
 8002f88:	10c5883a 	add	r2,r2,r3
 8002f8c:	10800404 	addi	r2,r2,16
 8002f90:	00c00044 	movi	r3,1
 8002f94:	10c00015 	stw	r3,0(r2)
						roomArray[k].door = 1;
 8002f98:	008200b4 	movhi	r2,2050
 8002f9c:	108ed404 	addi	r2,r2,15184
 8002fa0:	e0ffff17 	ldw	r3,-4(fp)
 8002fa4:	18c00624 	muli	r3,r3,24
 8002fa8:	10c5883a 	add	r2,r2,r3
 8002fac:	10800204 	addi	r2,r2,8
 8002fb0:	00c00044 	movi	r3,1
 8002fb4:	10c00015 	stw	r3,0(r2)
						if (k == 0) {
 8002fb8:	e0bfff17 	ldw	r2,-4(fp)
 8002fbc:	1000011e 	bne	r2,zero,8002fc4 <RunDisplay+0x414>
							OpenServo();
 8002fc0:	80010880 	call	8001088 <OpenServo>
			if(auto_approve){
				auto_approve=0;
			}
			else{
				auto_approve = 1;
				for (k = 0; k < 10; k++) {
 8002fc4:	e0bfff17 	ldw	r2,-4(fp)
 8002fc8:	10800044 	addi	r2,r2,1
 8002fcc:	e0bfff15 	stw	r2,-4(fp)
 8002fd0:	e0bfff17 	ldw	r2,-4(fp)
 8002fd4:	10800290 	cmplti	r2,r2,10
 8002fd8:	103fd81e 	bne	r2,zero,8002f3c <__alt_data_end+0xfc002f3c>
				}
			}
		}

		//roomArray[curr_room_num-1].occupied = GetRangeData();
		printf("Starting Info Display\n");
 8002fdc:	010200b4 	movhi	r4,2050
 8002fe0:	21004e04 	addi	r4,r4,312
 8002fe4:	80048dc0 	call	80048dc <puts>
		InfoDisplay(curr_room_num, roomArray[curr_room_num - 1].lights,roomArray[curr_room_num - 1].door,roomArray[curr_room_num - 1].occupied,roomArray[curr_room_num - 1].in_use, roomArray[curr_room_num - 1].temp);
 8002fe8:	d226d717 	ldw	r8,-25764(gp)
 8002fec:	d0a6d717 	ldw	r2,-25764(gp)
 8002ff0:	10ffffc4 	addi	r3,r2,-1
 8002ff4:	008200b4 	movhi	r2,2050
 8002ff8:	108ed404 	addi	r2,r2,15184
 8002ffc:	18c00624 	muli	r3,r3,24
 8003000:	10c5883a 	add	r2,r2,r3
 8003004:	10800104 	addi	r2,r2,4
 8003008:	11400017 	ldw	r5,0(r2)
 800300c:	d0a6d717 	ldw	r2,-25764(gp)
 8003010:	10ffffc4 	addi	r3,r2,-1
 8003014:	008200b4 	movhi	r2,2050
 8003018:	108ed404 	addi	r2,r2,15184
 800301c:	18c00624 	muli	r3,r3,24
 8003020:	10c5883a 	add	r2,r2,r3
 8003024:	10800204 	addi	r2,r2,8
 8003028:	11800017 	ldw	r6,0(r2)
 800302c:	d0a6d717 	ldw	r2,-25764(gp)
 8003030:	10ffffc4 	addi	r3,r2,-1
 8003034:	008200b4 	movhi	r2,2050
 8003038:	108ed404 	addi	r2,r2,15184
 800303c:	18c00624 	muli	r3,r3,24
 8003040:	10c5883a 	add	r2,r2,r3
 8003044:	10800504 	addi	r2,r2,20
 8003048:	11c00017 	ldw	r7,0(r2)
 800304c:	d0a6d717 	ldw	r2,-25764(gp)
 8003050:	10ffffc4 	addi	r3,r2,-1
 8003054:	008200b4 	movhi	r2,2050
 8003058:	108ed404 	addi	r2,r2,15184
 800305c:	18c00624 	muli	r3,r3,24
 8003060:	10c5883a 	add	r2,r2,r3
 8003064:	10800404 	addi	r2,r2,16
 8003068:	10c00017 	ldw	r3,0(r2)
 800306c:	d0a6d717 	ldw	r2,-25764(gp)
 8003070:	113fffc4 	addi	r4,r2,-1
 8003074:	008200b4 	movhi	r2,2050
 8003078:	108ed404 	addi	r2,r2,15184
 800307c:	21000624 	muli	r4,r4,24
 8003080:	1105883a 	add	r2,r2,r4
 8003084:	10800017 	ldw	r2,0(r2)
 8003088:	d8c00015 	stw	r3,0(sp)
 800308c:	d8800115 	stw	r2,4(sp)
 8003090:	4009883a 	mov	r4,r8
 8003094:	8001c440 	call	8001c44 <InfoDisplay>
		for (k = 0; k < 10; k++) {
 8003098:	e03fff15 	stw	zero,-4(fp)
 800309c:	00002f06 	br	800315c <RunDisplay+0x5ac>
			if (roomArray[k].requested == 1 && roomArray[k].in_use==1) {
 80030a0:	008200b4 	movhi	r2,2050
 80030a4:	108ed404 	addi	r2,r2,15184
 80030a8:	e0ffff17 	ldw	r3,-4(fp)
 80030ac:	18c00624 	muli	r3,r3,24
 80030b0:	10c5883a 	add	r2,r2,r3
 80030b4:	10800304 	addi	r2,r2,12
 80030b8:	10800017 	ldw	r2,0(r2)
 80030bc:	10800058 	cmpnei	r2,r2,1
 80030c0:	10000e1e 	bne	r2,zero,80030fc <RunDisplay+0x54c>
 80030c4:	008200b4 	movhi	r2,2050
 80030c8:	108ed404 	addi	r2,r2,15184
 80030cc:	e0ffff17 	ldw	r3,-4(fp)
 80030d0:	18c00624 	muli	r3,r3,24
 80030d4:	10c5883a 	add	r2,r2,r3
 80030d8:	10800404 	addi	r2,r2,16
 80030dc:	10800017 	ldw	r2,0(r2)
 80030e0:	10800058 	cmpnei	r2,r2,1
 80030e4:	1000051e 	bne	r2,zero,80030fc <RunDisplay+0x54c>
				RequestCloseDisplay(k +1);
 80030e8:	e0bfff17 	ldw	r2,-4(fp)
 80030ec:	10800044 	addi	r2,r2,1
 80030f0:	1009883a 	mov	r4,r2
 80030f4:	80022a40 	call	80022a4 <RequestCloseDisplay>
 80030f8:	00001506 	br	8003150 <RunDisplay+0x5a0>
			}
			else if (roomArray[k].requested == 1 && roomArray[k].in_use==0) {
 80030fc:	008200b4 	movhi	r2,2050
 8003100:	108ed404 	addi	r2,r2,15184
 8003104:	e0ffff17 	ldw	r3,-4(fp)
 8003108:	18c00624 	muli	r3,r3,24
 800310c:	10c5883a 	add	r2,r2,r3
 8003110:	10800304 	addi	r2,r2,12
 8003114:	10800017 	ldw	r2,0(r2)
 8003118:	10800058 	cmpnei	r2,r2,1
 800311c:	10000c1e 	bne	r2,zero,8003150 <RunDisplay+0x5a0>
 8003120:	008200b4 	movhi	r2,2050
 8003124:	108ed404 	addi	r2,r2,15184
 8003128:	e0ffff17 	ldw	r3,-4(fp)
 800312c:	18c00624 	muli	r3,r3,24
 8003130:	10c5883a 	add	r2,r2,r3
 8003134:	10800404 	addi	r2,r2,16
 8003138:	10800017 	ldw	r2,0(r2)
 800313c:	1000041e 	bne	r2,zero,8003150 <RunDisplay+0x5a0>
				RequestOpenDisplay(k +1);
 8003140:	e0bfff17 	ldw	r2,-4(fp)
 8003144:	10800044 	addi	r2,r2,1
 8003148:	1009883a 	mov	r4,r2
 800314c:	80023040 	call	8002304 <RequestOpenDisplay>
		}

		//roomArray[curr_room_num-1].occupied = GetRangeData();
		printf("Starting Info Display\n");
		InfoDisplay(curr_room_num, roomArray[curr_room_num - 1].lights,roomArray[curr_room_num - 1].door,roomArray[curr_room_num - 1].occupied,roomArray[curr_room_num - 1].in_use, roomArray[curr_room_num - 1].temp);
		for (k = 0; k < 10; k++) {
 8003150:	e0bfff17 	ldw	r2,-4(fp)
 8003154:	10800044 	addi	r2,r2,1
 8003158:	e0bfff15 	stw	r2,-4(fp)
 800315c:	e0bfff17 	ldw	r2,-4(fp)
 8003160:	10800290 	cmplti	r2,r2,10
 8003164:	103fce1e 	bne	r2,zero,80030a0 <__alt_data_end+0xfc0030a0>
			}
			else if (roomArray[k].requested == 1 && roomArray[k].in_use==0) {
				RequestOpenDisplay(k +1);
			}
		}
		PrintNumbers(curr_room_num);
 8003168:	d0a6d717 	ldw	r2,-25764(gp)
 800316c:	1009883a 	mov	r4,r2
 8003170:	80029cc0 	call	80029cc <PrintNumbers>
		last_room_num = InfoChoice(curr_room_num);
 8003174:	d0a6d717 	ldw	r2,-25764(gp)
 8003178:	1009883a 	mov	r4,r2
 800317c:	80027c40 	call	80027c4 <InfoChoice>
 8003180:	e0bffe15 	stw	r2,-8(fp)
	}
 8003184:	003e9506 	br	8002bdc <__alt_data_end+0xfc002bdc>

08003188 <main>:
}


int main(void) {
 8003188:	defffe04 	addi	sp,sp,-8
 800318c:	dfc00115 	stw	ra,4(sp)
 8003190:	df000015 	stw	fp,0(sp)
 8003194:	d839883a 	mov	fp,sp

	RunDisplay();
 8003198:	8002bb00 	call	8002bb0 <RunDisplay>

	printf("Finished");
 800319c:	010200b4 	movhi	r4,2050
 80031a0:	21005404 	addi	r4,r4,336
 80031a4:	80047c80 	call	80047c8 <printf>

	return 0;
 80031a8:	0005883a 	mov	r2,zero
}
 80031ac:	e037883a 	mov	sp,fp
 80031b0:	dfc00117 	ldw	ra,4(sp)
 80031b4:	df000017 	ldw	fp,0(sp)
 80031b8:	dec00204 	addi	sp,sp,8
 80031bc:	f800283a 	ret

080031c0 <floor>:
 80031c0:	defff904 	addi	sp,sp,-28
 80031c4:	dc800215 	stw	r18,8(sp)
 80031c8:	2825d53a 	srai	r18,r5,20
 80031cc:	dd000415 	stw	r20,16(sp)
 80031d0:	dcc00315 	stw	r19,12(sp)
 80031d4:	9481ffcc 	andi	r18,r18,2047
 80031d8:	dc400115 	stw	r17,4(sp)
 80031dc:	dc000015 	stw	r16,0(sp)
 80031e0:	dfc00615 	stw	ra,24(sp)
 80031e4:	dd400515 	stw	r21,20(sp)
 80031e8:	94ff0044 	addi	r19,r18,-1023
 80031ec:	018004c4 	movi	r6,19
 80031f0:	2821883a 	mov	r16,r5
 80031f4:	2005883a 	mov	r2,r4
 80031f8:	280f883a 	mov	r7,r5
 80031fc:	2829883a 	mov	r20,r5
 8003200:	2023883a 	mov	r17,r4
 8003204:	34c01916 	blt	r6,r19,800326c <floor+0xac>
 8003208:	98003d16 	blt	r19,zero,8003300 <floor+0x140>
 800320c:	04800434 	movhi	r18,16
 8003210:	94bfffc4 	addi	r18,r18,-1
 8003214:	94e5d83a 	sra	r18,r18,r19
 8003218:	914c703a 	and	r6,r18,r5
 800321c:	310cb03a 	or	r6,r6,r4
 8003220:	30001626 	beq	r6,zero,800327c <floor+0xbc>
 8003224:	01a20034 	movhi	r6,34816
 8003228:	01df8e34 	movhi	r7,32312
 800322c:	319d6704 	addi	r6,r6,30108
 8003230:	39f90f04 	addi	r7,r7,-7108
 8003234:	80033b40 	call	80033b4 <__adddf3>
 8003238:	1009883a 	mov	r4,r2
 800323c:	180b883a 	mov	r5,r3
 8003240:	000d883a 	mov	r6,zero
 8003244:	000f883a 	mov	r7,zero
 8003248:	8003c500 	call	8003c50 <__gedf2>
 800324c:	0080040e 	bge	zero,r2,8003260 <floor+0xa0>
 8003250:	80003d16 	blt	r16,zero,8003348 <floor+0x188>
 8003254:	04a0303a 	nor	r16,zero,r18
 8003258:	a420703a 	and	r16,r20,r16
 800325c:	0023883a 	mov	r17,zero
 8003260:	8805883a 	mov	r2,r17
 8003264:	8007883a 	mov	r3,r16
 8003268:	00000506 	br	8003280 <floor+0xc0>
 800326c:	01800cc4 	movi	r6,51
 8003270:	34c00c0e 	bge	r6,r19,80032a4 <floor+0xe4>
 8003274:	01810004 	movi	r6,1024
 8003278:	99803026 	beq	r19,r6,800333c <floor+0x17c>
 800327c:	3807883a 	mov	r3,r7
 8003280:	dfc00617 	ldw	ra,24(sp)
 8003284:	dd400517 	ldw	r21,20(sp)
 8003288:	dd000417 	ldw	r20,16(sp)
 800328c:	dcc00317 	ldw	r19,12(sp)
 8003290:	dc800217 	ldw	r18,8(sp)
 8003294:	dc400117 	ldw	r17,4(sp)
 8003298:	dc000017 	ldw	r16,0(sp)
 800329c:	dec00704 	addi	sp,sp,28
 80032a0:	f800283a 	ret
 80032a4:	01bfffc4 	movi	r6,-1
 80032a8:	957efb44 	addi	r21,r18,-1043
 80032ac:	356ad83a 	srl	r21,r6,r21
 80032b0:	a90c703a 	and	r6,r21,r4
 80032b4:	303ff126 	beq	r6,zero,800327c <__alt_data_end+0xfc00327c>
 80032b8:	01a20034 	movhi	r6,34816
 80032bc:	01df8e34 	movhi	r7,32312
 80032c0:	319d6704 	addi	r6,r6,30108
 80032c4:	39f90f04 	addi	r7,r7,-7108
 80032c8:	80033b40 	call	80033b4 <__adddf3>
 80032cc:	1009883a 	mov	r4,r2
 80032d0:	180b883a 	mov	r5,r3
 80032d4:	000d883a 	mov	r6,zero
 80032d8:	000f883a 	mov	r7,zero
 80032dc:	8003c500 	call	8003c50 <__gedf2>
 80032e0:	00bfdf0e 	bge	zero,r2,8003260 <__alt_data_end+0xfc003260>
 80032e4:	80001c16 	blt	r16,zero,8003358 <floor+0x198>
 80032e8:	056a303a 	nor	r21,zero,r21
 80032ec:	a021883a 	mov	r16,r20
 80032f0:	8d62703a 	and	r17,r17,r21
 80032f4:	8805883a 	mov	r2,r17
 80032f8:	8007883a 	mov	r3,r16
 80032fc:	003fe006 	br	8003280 <__alt_data_end+0xfc003280>
 8003300:	01a20034 	movhi	r6,34816
 8003304:	01df8e34 	movhi	r7,32312
 8003308:	319d6704 	addi	r6,r6,30108
 800330c:	39f90f04 	addi	r7,r7,-7108
 8003310:	80033b40 	call	80033b4 <__adddf3>
 8003314:	1009883a 	mov	r4,r2
 8003318:	180b883a 	mov	r5,r3
 800331c:	000d883a 	mov	r6,zero
 8003320:	000f883a 	mov	r7,zero
 8003324:	8003c500 	call	8003c50 <__gedf2>
 8003328:	00bfcd0e 	bge	zero,r2,8003260 <__alt_data_end+0xfc003260>
 800332c:	80001516 	blt	r16,zero,8003384 <floor+0x1c4>
 8003330:	0023883a 	mov	r17,zero
 8003334:	0021883a 	mov	r16,zero
 8003338:	003fc906 	br	8003260 <__alt_data_end+0xfc003260>
 800333c:	200d883a 	mov	r6,r4
 8003340:	80033b40 	call	80033b4 <__adddf3>
 8003344:	003fce06 	br	8003280 <__alt_data_end+0xfc003280>
 8003348:	00800434 	movhi	r2,16
 800334c:	14e7d83a 	sra	r19,r2,r19
 8003350:	84e9883a 	add	r20,r16,r19
 8003354:	003fbf06 	br	8003254 <__alt_data_end+0xfc003254>
 8003358:	00800504 	movi	r2,20
 800335c:	98801326 	beq	r19,r2,80033ac <floor+0x1ec>
 8003360:	00810cc4 	movi	r2,1075
 8003364:	14a5c83a 	sub	r18,r2,r18
 8003368:	00800044 	movi	r2,1
 800336c:	1484983a 	sll	r2,r2,r18
 8003370:	1445883a 	add	r2,r2,r17
 8003374:	14400b2e 	bgeu	r2,r17,80033a4 <floor+0x1e4>
 8003378:	85000044 	addi	r20,r16,1
 800337c:	1023883a 	mov	r17,r2
 8003380:	003fd906 	br	80032e8 <__alt_data_end+0xfc0032e8>
 8003384:	00a00034 	movhi	r2,32768
 8003388:	10bfffc4 	addi	r2,r2,-1
 800338c:	8084703a 	and	r2,r16,r2
 8003390:	1462b03a 	or	r17,r2,r17
 8003394:	883fb226 	beq	r17,zero,8003260 <__alt_data_end+0xfc003260>
 8003398:	0023883a 	mov	r17,zero
 800339c:	042ffc34 	movhi	r16,49136
 80033a0:	003faf06 	br	8003260 <__alt_data_end+0xfc003260>
 80033a4:	1023883a 	mov	r17,r2
 80033a8:	003fcf06 	br	80032e8 <__alt_data_end+0xfc0032e8>
 80033ac:	85000044 	addi	r20,r16,1
 80033b0:	003fcd06 	br	80032e8 <__alt_data_end+0xfc0032e8>

080033b4 <__adddf3>:
 80033b4:	02000434 	movhi	r8,16
 80033b8:	423fffc4 	addi	r8,r8,-1
 80033bc:	defffb04 	addi	sp,sp,-20
 80033c0:	2a12703a 	and	r9,r5,r8
 80033c4:	2806d7fa 	srli	r3,r5,31
 80033c8:	3a10703a 	and	r8,r7,r8
 80033cc:	3804d53a 	srli	r2,r7,20
 80033d0:	3014d77a 	srli	r10,r6,29
 80033d4:	dc000015 	stw	r16,0(sp)
 80033d8:	481290fa 	slli	r9,r9,3
 80033dc:	2820d53a 	srli	r16,r5,20
 80033e0:	401090fa 	slli	r8,r8,3
 80033e4:	200ad77a 	srli	r5,r4,29
 80033e8:	380ed7fa 	srli	r7,r7,31
 80033ec:	dc800215 	stw	r18,8(sp)
 80033f0:	dc400115 	stw	r17,4(sp)
 80033f4:	dfc00415 	stw	ra,16(sp)
 80033f8:	dcc00315 	stw	r19,12(sp)
 80033fc:	1c803fcc 	andi	r18,r3,255
 8003400:	8401ffcc 	andi	r16,r16,2047
 8003404:	494ab03a 	or	r5,r9,r5
 8003408:	202290fa 	slli	r17,r4,3
 800340c:	1081ffcc 	andi	r2,r2,2047
 8003410:	4290b03a 	or	r8,r8,r10
 8003414:	300c90fa 	slli	r6,r6,3
 8003418:	91c07026 	beq	r18,r7,80035dc <__adddf3+0x228>
 800341c:	8087c83a 	sub	r3,r16,r2
 8003420:	00c0b30e 	bge	zero,r3,80036f0 <__adddf3+0x33c>
 8003424:	10002a1e 	bne	r2,zero,80034d0 <__adddf3+0x11c>
 8003428:	4184b03a 	or	r2,r8,r6
 800342c:	1000991e 	bne	r2,zero,8003694 <__adddf3+0x2e0>
 8003430:	888001cc 	andi	r2,r17,7
 8003434:	10005b26 	beq	r2,zero,80035a4 <__adddf3+0x1f0>
 8003438:	88c003cc 	andi	r3,r17,15
 800343c:	00800104 	movi	r2,4
 8003440:	18805826 	beq	r3,r2,80035a4 <__adddf3+0x1f0>
 8003444:	89800104 	addi	r6,r17,4
 8003448:	3463803a 	cmpltu	r17,r6,r17
 800344c:	2c4b883a 	add	r5,r5,r17
 8003450:	2880202c 	andhi	r2,r5,128
 8003454:	9007883a 	mov	r3,r18
 8003458:	3023883a 	mov	r17,r6
 800345c:	10005426 	beq	r2,zero,80035b0 <__adddf3+0x1fc>
 8003460:	84000044 	addi	r16,r16,1
 8003464:	0081ffc4 	movi	r2,2047
 8003468:	8080c126 	beq	r16,r2,8003770 <__adddf3+0x3bc>
 800346c:	013fe034 	movhi	r4,65408
 8003470:	213fffc4 	addi	r4,r4,-1
 8003474:	290a703a 	and	r5,r5,r4
 8003478:	2804977a 	slli	r2,r5,29
 800347c:	280a927a 	slli	r5,r5,9
 8003480:	8822d0fa 	srli	r17,r17,3
 8003484:	8401ffcc 	andi	r16,r16,2047
 8003488:	2808d33a 	srli	r4,r5,12
 800348c:	1444b03a 	or	r2,r2,r17
 8003490:	8401ffcc 	andi	r16,r16,2047
 8003494:	800a953a 	slli	r5,r16,20
 8003498:	18c03fcc 	andi	r3,r3,255
 800349c:	04000434 	movhi	r16,16
 80034a0:	180697fa 	slli	r3,r3,31
 80034a4:	843fffc4 	addi	r16,r16,-1
 80034a8:	2420703a 	and	r16,r4,r16
 80034ac:	8160b03a 	or	r16,r16,r5
 80034b0:	80c6b03a 	or	r3,r16,r3
 80034b4:	dfc00417 	ldw	ra,16(sp)
 80034b8:	dcc00317 	ldw	r19,12(sp)
 80034bc:	dc800217 	ldw	r18,8(sp)
 80034c0:	dc400117 	ldw	r17,4(sp)
 80034c4:	dc000017 	ldw	r16,0(sp)
 80034c8:	dec00504 	addi	sp,sp,20
 80034cc:	f800283a 	ret
 80034d0:	0081ffc4 	movi	r2,2047
 80034d4:	80bfd626 	beq	r16,r2,8003430 <__alt_data_end+0xfc003430>
 80034d8:	42002034 	orhi	r8,r8,128
 80034dc:	00800e04 	movi	r2,56
 80034e0:	10c0a616 	blt	r2,r3,800377c <__adddf3+0x3c8>
 80034e4:	008007c4 	movi	r2,31
 80034e8:	10c0c916 	blt	r2,r3,8003810 <__adddf3+0x45c>
 80034ec:	00800804 	movi	r2,32
 80034f0:	10c5c83a 	sub	r2,r2,r3
 80034f4:	408e983a 	sll	r7,r8,r2
 80034f8:	30c8d83a 	srl	r4,r6,r3
 80034fc:	3084983a 	sll	r2,r6,r2
 8003500:	40c6d83a 	srl	r3,r8,r3
 8003504:	390cb03a 	or	r6,r7,r4
 8003508:	1004c03a 	cmpne	r2,r2,zero
 800350c:	308cb03a 	or	r6,r6,r2
 8003510:	898dc83a 	sub	r6,r17,r6
 8003514:	89a3803a 	cmpltu	r17,r17,r6
 8003518:	28cbc83a 	sub	r5,r5,r3
 800351c:	2c4bc83a 	sub	r5,r5,r17
 8003520:	3023883a 	mov	r17,r6
 8003524:	2880202c 	andhi	r2,r5,128
 8003528:	10006d26 	beq	r2,zero,80036e0 <__adddf3+0x32c>
 800352c:	04c02034 	movhi	r19,128
 8003530:	9cffffc4 	addi	r19,r19,-1
 8003534:	2ce6703a 	and	r19,r5,r19
 8003538:	98007e26 	beq	r19,zero,8003734 <__adddf3+0x380>
 800353c:	9809883a 	mov	r4,r19
 8003540:	8003f680 	call	8003f68 <__clzsi2>
 8003544:	10fffe04 	addi	r3,r2,-8
 8003548:	010007c4 	movi	r4,31
 800354c:	20c07f16 	blt	r4,r3,800374c <__adddf3+0x398>
 8003550:	01400a04 	movi	r5,40
 8003554:	2885c83a 	sub	r2,r5,r2
 8003558:	888ad83a 	srl	r5,r17,r2
 800355c:	98e6983a 	sll	r19,r19,r3
 8003560:	88e2983a 	sll	r17,r17,r3
 8003564:	2ce6b03a 	or	r19,r5,r19
 8003568:	1c007c16 	blt	r3,r16,800375c <__adddf3+0x3a8>
 800356c:	1c21c83a 	sub	r16,r3,r16
 8003570:	81400044 	addi	r5,r16,1
 8003574:	00c007c4 	movi	r3,31
 8003578:	19409816 	blt	r3,r5,80037dc <__adddf3+0x428>
 800357c:	1c21c83a 	sub	r16,r3,r16
 8003580:	8c08983a 	sll	r4,r17,r16
 8003584:	8946d83a 	srl	r3,r17,r5
 8003588:	9c20983a 	sll	r16,r19,r16
 800358c:	2008c03a 	cmpne	r4,r4,zero
 8003590:	994ad83a 	srl	r5,r19,r5
 8003594:	1c06b03a 	or	r3,r3,r16
 8003598:	1922b03a 	or	r17,r3,r4
 800359c:	0021883a 	mov	r16,zero
 80035a0:	003fa306 	br	8003430 <__alt_data_end+0xfc003430>
 80035a4:	2880202c 	andhi	r2,r5,128
 80035a8:	9007883a 	mov	r3,r18
 80035ac:	103fac1e 	bne	r2,zero,8003460 <__alt_data_end+0xfc003460>
 80035b0:	2804977a 	slli	r2,r5,29
 80035b4:	8822d0fa 	srli	r17,r17,3
 80035b8:	0101ffc4 	movi	r4,2047
 80035bc:	280ad0fa 	srli	r5,r5,3
 80035c0:	1444b03a 	or	r2,r2,r17
 80035c4:	81002c26 	beq	r16,r4,8003678 <__adddf3+0x2c4>
 80035c8:	8120703a 	and	r16,r16,r4
 80035cc:	01000434 	movhi	r4,16
 80035d0:	213fffc4 	addi	r4,r4,-1
 80035d4:	2908703a 	and	r4,r5,r4
 80035d8:	003fad06 	br	8003490 <__alt_data_end+0xfc003490>
 80035dc:	8089c83a 	sub	r4,r16,r2
 80035e0:	01006a0e 	bge	zero,r4,800378c <__adddf3+0x3d8>
 80035e4:	10003326 	beq	r2,zero,80036b4 <__adddf3+0x300>
 80035e8:	0081ffc4 	movi	r2,2047
 80035ec:	80bf9026 	beq	r16,r2,8003430 <__alt_data_end+0xfc003430>
 80035f0:	42002034 	orhi	r8,r8,128
 80035f4:	00800e04 	movi	r2,56
 80035f8:	1100b116 	blt	r2,r4,80038c0 <__adddf3+0x50c>
 80035fc:	008007c4 	movi	r2,31
 8003600:	1100e216 	blt	r2,r4,800398c <__adddf3+0x5d8>
 8003604:	00800804 	movi	r2,32
 8003608:	1105c83a 	sub	r2,r2,r4
 800360c:	4092983a 	sll	r9,r8,r2
 8003610:	310ed83a 	srl	r7,r6,r4
 8003614:	3084983a 	sll	r2,r6,r2
 8003618:	4110d83a 	srl	r8,r8,r4
 800361c:	49ccb03a 	or	r6,r9,r7
 8003620:	1004c03a 	cmpne	r2,r2,zero
 8003624:	308cb03a 	or	r6,r6,r2
 8003628:	344d883a 	add	r6,r6,r17
 800362c:	3463803a 	cmpltu	r17,r6,r17
 8003630:	414b883a 	add	r5,r8,r5
 8003634:	2c4b883a 	add	r5,r5,r17
 8003638:	3023883a 	mov	r17,r6
 800363c:	2880202c 	andhi	r2,r5,128
 8003640:	10002726 	beq	r2,zero,80036e0 <__adddf3+0x32c>
 8003644:	84000044 	addi	r16,r16,1
 8003648:	0081ffc4 	movi	r2,2047
 800364c:	8080ae26 	beq	r16,r2,8003908 <__adddf3+0x554>
 8003650:	00bfe034 	movhi	r2,65408
 8003654:	10bfffc4 	addi	r2,r2,-1
 8003658:	288a703a 	and	r5,r5,r2
 800365c:	880cd07a 	srli	r6,r17,1
 8003660:	280897fa 	slli	r4,r5,31
 8003664:	88c0004c 	andi	r3,r17,1
 8003668:	30e2b03a 	or	r17,r6,r3
 800366c:	280ad07a 	srli	r5,r5,1
 8003670:	8922b03a 	or	r17,r17,r4
 8003674:	003f6e06 	br	8003430 <__alt_data_end+0xfc003430>
 8003678:	1148b03a 	or	r4,r2,r5
 800367c:	20003c26 	beq	r4,zero,8003770 <__adddf3+0x3bc>
 8003680:	29000234 	orhi	r4,r5,8
 8003684:	01400434 	movhi	r5,16
 8003688:	297fffc4 	addi	r5,r5,-1
 800368c:	2148703a 	and	r4,r4,r5
 8003690:	003f7f06 	br	8003490 <__alt_data_end+0xfc003490>
 8003694:	18ffffc4 	addi	r3,r3,-1
 8003698:	18004d1e 	bne	r3,zero,80037d0 <__adddf3+0x41c>
 800369c:	898dc83a 	sub	r6,r17,r6
 80036a0:	89a3803a 	cmpltu	r17,r17,r6
 80036a4:	2a0bc83a 	sub	r5,r5,r8
 80036a8:	2c4bc83a 	sub	r5,r5,r17
 80036ac:	3023883a 	mov	r17,r6
 80036b0:	003f9c06 	br	8003524 <__alt_data_end+0xfc003524>
 80036b4:	4184b03a 	or	r2,r8,r6
 80036b8:	103f5d26 	beq	r2,zero,8003430 <__alt_data_end+0xfc003430>
 80036bc:	213fffc4 	addi	r4,r4,-1
 80036c0:	203fd926 	beq	r4,zero,8003628 <__alt_data_end+0xfc003628>
 80036c4:	0081ffc4 	movi	r2,2047
 80036c8:	80bfca1e 	bne	r16,r2,80035f4 <__alt_data_end+0xfc0035f4>
 80036cc:	003f5806 	br	8003430 <__alt_data_end+0xfc003430>
 80036d0:	10c8b03a 	or	r4,r2,r3
 80036d4:	20008b26 	beq	r4,zero,8003904 <__adddf3+0x550>
 80036d8:	100b883a 	mov	r5,r2
 80036dc:	1823883a 	mov	r17,r3
 80036e0:	888001cc 	andi	r2,r17,7
 80036e4:	103f541e 	bne	r2,zero,8003438 <__alt_data_end+0xfc003438>
 80036e8:	9007883a 	mov	r3,r18
 80036ec:	003fb006 	br	80035b0 <__alt_data_end+0xfc0035b0>
 80036f0:	1800531e 	bne	r3,zero,8003840 <__adddf3+0x48c>
 80036f4:	80800044 	addi	r2,r16,1
 80036f8:	1081ffcc 	andi	r2,r2,2047
 80036fc:	00c00044 	movi	r3,1
 8003700:	1880990e 	bge	r3,r2,8003968 <__adddf3+0x5b4>
 8003704:	8985c83a 	sub	r2,r17,r6
 8003708:	8887803a 	cmpltu	r3,r17,r2
 800370c:	2a27c83a 	sub	r19,r5,r8
 8003710:	98e7c83a 	sub	r19,r19,r3
 8003714:	98c0202c 	andhi	r3,r19,128
 8003718:	18006226 	beq	r3,zero,80038a4 <__adddf3+0x4f0>
 800371c:	3463c83a 	sub	r17,r6,r17
 8003720:	4151c83a 	sub	r8,r8,r5
 8003724:	344d803a 	cmpltu	r6,r6,r17
 8003728:	41a7c83a 	sub	r19,r8,r6
 800372c:	3825883a 	mov	r18,r7
 8003730:	983f821e 	bne	r19,zero,800353c <__alt_data_end+0xfc00353c>
 8003734:	8809883a 	mov	r4,r17
 8003738:	8003f680 	call	8003f68 <__clzsi2>
 800373c:	10800804 	addi	r2,r2,32
 8003740:	10fffe04 	addi	r3,r2,-8
 8003744:	010007c4 	movi	r4,31
 8003748:	20ff810e 	bge	r4,r3,8003550 <__alt_data_end+0xfc003550>
 800374c:	14fff604 	addi	r19,r2,-40
 8003750:	8ce6983a 	sll	r19,r17,r19
 8003754:	0023883a 	mov	r17,zero
 8003758:	1c3f840e 	bge	r3,r16,800356c <__alt_data_end+0xfc00356c>
 800375c:	017fe034 	movhi	r5,65408
 8003760:	297fffc4 	addi	r5,r5,-1
 8003764:	80e1c83a 	sub	r16,r16,r3
 8003768:	994a703a 	and	r5,r19,r5
 800376c:	003f3006 	br	8003430 <__alt_data_end+0xfc003430>
 8003770:	0009883a 	mov	r4,zero
 8003774:	0005883a 	mov	r2,zero
 8003778:	003f4506 	br	8003490 <__alt_data_end+0xfc003490>
 800377c:	418cb03a 	or	r6,r8,r6
 8003780:	300cc03a 	cmpne	r6,r6,zero
 8003784:	0007883a 	mov	r3,zero
 8003788:	003f6106 	br	8003510 <__alt_data_end+0xfc003510>
 800378c:	2000921e 	bne	r4,zero,80039d8 <__adddf3+0x624>
 8003790:	80800044 	addi	r2,r16,1
 8003794:	11c1ffcc 	andi	r7,r2,2047
 8003798:	01000044 	movi	r4,1
 800379c:	21c0610e 	bge	r4,r7,8003924 <__adddf3+0x570>
 80037a0:	0101ffc4 	movi	r4,2047
 80037a4:	1100a326 	beq	r2,r4,8003a34 <__adddf3+0x680>
 80037a8:	344d883a 	add	r6,r6,r17
 80037ac:	3463803a 	cmpltu	r17,r6,r17
 80037b0:	414b883a 	add	r5,r8,r5
 80037b4:	2c4b883a 	add	r5,r5,r17
 80037b8:	282297fa 	slli	r17,r5,31
 80037bc:	300cd07a 	srli	r6,r6,1
 80037c0:	280ad07a 	srli	r5,r5,1
 80037c4:	1021883a 	mov	r16,r2
 80037c8:	89a2b03a 	or	r17,r17,r6
 80037cc:	003f1806 	br	8003430 <__alt_data_end+0xfc003430>
 80037d0:	0081ffc4 	movi	r2,2047
 80037d4:	80bf411e 	bne	r16,r2,80034dc <__alt_data_end+0xfc0034dc>
 80037d8:	003f1506 	br	8003430 <__alt_data_end+0xfc003430>
 80037dc:	80bff844 	addi	r2,r16,-31
 80037e0:	00c00804 	movi	r3,32
 80037e4:	9884d83a 	srl	r2,r19,r2
 80037e8:	28c04a26 	beq	r5,r3,8003914 <__adddf3+0x560>
 80037ec:	00c00fc4 	movi	r3,63
 80037f0:	1c21c83a 	sub	r16,r3,r16
 80037f4:	9c26983a 	sll	r19,r19,r16
 80037f8:	9c62b03a 	or	r17,r19,r17
 80037fc:	8822c03a 	cmpne	r17,r17,zero
 8003800:	88a2b03a 	or	r17,r17,r2
 8003804:	000b883a 	mov	r5,zero
 8003808:	0021883a 	mov	r16,zero
 800380c:	003fb406 	br	80036e0 <__alt_data_end+0xfc0036e0>
 8003810:	18bff804 	addi	r2,r3,-32
 8003814:	01000804 	movi	r4,32
 8003818:	4084d83a 	srl	r2,r8,r2
 800381c:	19003f26 	beq	r3,r4,800391c <__adddf3+0x568>
 8003820:	01001004 	movi	r4,64
 8003824:	20c7c83a 	sub	r3,r4,r3
 8003828:	40d0983a 	sll	r8,r8,r3
 800382c:	418cb03a 	or	r6,r8,r6
 8003830:	300cc03a 	cmpne	r6,r6,zero
 8003834:	308cb03a 	or	r6,r6,r2
 8003838:	0007883a 	mov	r3,zero
 800383c:	003f3406 	br	8003510 <__alt_data_end+0xfc003510>
 8003840:	80002326 	beq	r16,zero,80038d0 <__adddf3+0x51c>
 8003844:	0101ffc4 	movi	r4,2047
 8003848:	11005e26 	beq	r2,r4,80039c4 <__adddf3+0x610>
 800384c:	00c7c83a 	sub	r3,zero,r3
 8003850:	29402034 	orhi	r5,r5,128
 8003854:	01000e04 	movi	r4,56
 8003858:	20c07216 	blt	r4,r3,8003a24 <__adddf3+0x670>
 800385c:	010007c4 	movi	r4,31
 8003860:	20c0ce16 	blt	r4,r3,8003b9c <__adddf3+0x7e8>
 8003864:	01000804 	movi	r4,32
 8003868:	20c9c83a 	sub	r4,r4,r3
 800386c:	2914983a 	sll	r10,r5,r4
 8003870:	88d2d83a 	srl	r9,r17,r3
 8003874:	8908983a 	sll	r4,r17,r4
 8003878:	28c6d83a 	srl	r3,r5,r3
 800387c:	5262b03a 	or	r17,r10,r9
 8003880:	2008c03a 	cmpne	r4,r4,zero
 8003884:	8922b03a 	or	r17,r17,r4
 8003888:	3463c83a 	sub	r17,r6,r17
 800388c:	40c7c83a 	sub	r3,r8,r3
 8003890:	344d803a 	cmpltu	r6,r6,r17
 8003894:	198bc83a 	sub	r5,r3,r6
 8003898:	1021883a 	mov	r16,r2
 800389c:	3825883a 	mov	r18,r7
 80038a0:	003f2006 	br	8003524 <__alt_data_end+0xfc003524>
 80038a4:	9886b03a 	or	r3,r19,r2
 80038a8:	1800141e 	bne	r3,zero,80038fc <__adddf3+0x548>
 80038ac:	0007883a 	mov	r3,zero
 80038b0:	000b883a 	mov	r5,zero
 80038b4:	0023883a 	mov	r17,zero
 80038b8:	0021883a 	mov	r16,zero
 80038bc:	003f3c06 	br	80035b0 <__alt_data_end+0xfc0035b0>
 80038c0:	418cb03a 	or	r6,r8,r6
 80038c4:	300cc03a 	cmpne	r6,r6,zero
 80038c8:	0011883a 	mov	r8,zero
 80038cc:	003f5606 	br	8003628 <__alt_data_end+0xfc003628>
 80038d0:	2c48b03a 	or	r4,r5,r17
 80038d4:	20003b26 	beq	r4,zero,80039c4 <__adddf3+0x610>
 80038d8:	00c6303a 	nor	r3,zero,r3
 80038dc:	1800371e 	bne	r3,zero,80039bc <__adddf3+0x608>
 80038e0:	3463c83a 	sub	r17,r6,r17
 80038e4:	414bc83a 	sub	r5,r8,r5
 80038e8:	344d803a 	cmpltu	r6,r6,r17
 80038ec:	298bc83a 	sub	r5,r5,r6
 80038f0:	1021883a 	mov	r16,r2
 80038f4:	3825883a 	mov	r18,r7
 80038f8:	003f0a06 	br	8003524 <__alt_data_end+0xfc003524>
 80038fc:	1023883a 	mov	r17,r2
 8003900:	003f0d06 	br	8003538 <__alt_data_end+0xfc003538>
 8003904:	0007883a 	mov	r3,zero
 8003908:	000b883a 	mov	r5,zero
 800390c:	0023883a 	mov	r17,zero
 8003910:	003f2706 	br	80035b0 <__alt_data_end+0xfc0035b0>
 8003914:	0027883a 	mov	r19,zero
 8003918:	003fb706 	br	80037f8 <__alt_data_end+0xfc0037f8>
 800391c:	0011883a 	mov	r8,zero
 8003920:	003fc206 	br	800382c <__alt_data_end+0xfc00382c>
 8003924:	2c44b03a 	or	r2,r5,r17
 8003928:	8000871e 	bne	r16,zero,8003b48 <__adddf3+0x794>
 800392c:	1000b126 	beq	r2,zero,8003bf4 <__adddf3+0x840>
 8003930:	4184b03a 	or	r2,r8,r6
 8003934:	103ebe26 	beq	r2,zero,8003430 <__alt_data_end+0xfc003430>
 8003938:	3445883a 	add	r2,r6,r17
 800393c:	1463803a 	cmpltu	r17,r2,r17
 8003940:	414b883a 	add	r5,r8,r5
 8003944:	2c4b883a 	add	r5,r5,r17
 8003948:	28c0202c 	andhi	r3,r5,128
 800394c:	1023883a 	mov	r17,r2
 8003950:	183f6326 	beq	r3,zero,80036e0 <__alt_data_end+0xfc0036e0>
 8003954:	00bfe034 	movhi	r2,65408
 8003958:	10bfffc4 	addi	r2,r2,-1
 800395c:	2021883a 	mov	r16,r4
 8003960:	288a703a 	and	r5,r5,r2
 8003964:	003eb206 	br	8003430 <__alt_data_end+0xfc003430>
 8003968:	2c44b03a 	or	r2,r5,r17
 800396c:	8000251e 	bne	r16,zero,8003a04 <__adddf3+0x650>
 8003970:	10004b1e 	bne	r2,zero,8003aa0 <__adddf3+0x6ec>
 8003974:	4184b03a 	or	r2,r8,r6
 8003978:	103fe226 	beq	r2,zero,8003904 <__alt_data_end+0xfc003904>
 800397c:	400b883a 	mov	r5,r8
 8003980:	3023883a 	mov	r17,r6
 8003984:	3825883a 	mov	r18,r7
 8003988:	003ea906 	br	8003430 <__alt_data_end+0xfc003430>
 800398c:	20bff804 	addi	r2,r4,-32
 8003990:	01c00804 	movi	r7,32
 8003994:	4084d83a 	srl	r2,r8,r2
 8003998:	21c07e26 	beq	r4,r7,8003b94 <__adddf3+0x7e0>
 800399c:	01c01004 	movi	r7,64
 80039a0:	3909c83a 	sub	r4,r7,r4
 80039a4:	4110983a 	sll	r8,r8,r4
 80039a8:	418cb03a 	or	r6,r8,r6
 80039ac:	300cc03a 	cmpne	r6,r6,zero
 80039b0:	308cb03a 	or	r6,r6,r2
 80039b4:	0011883a 	mov	r8,zero
 80039b8:	003f1b06 	br	8003628 <__alt_data_end+0xfc003628>
 80039bc:	0101ffc4 	movi	r4,2047
 80039c0:	113fa41e 	bne	r2,r4,8003854 <__alt_data_end+0xfc003854>
 80039c4:	400b883a 	mov	r5,r8
 80039c8:	3023883a 	mov	r17,r6
 80039cc:	1021883a 	mov	r16,r2
 80039d0:	3825883a 	mov	r18,r7
 80039d4:	003e9606 	br	8003430 <__alt_data_end+0xfc003430>
 80039d8:	80001a1e 	bne	r16,zero,8003a44 <__adddf3+0x690>
 80039dc:	2c4eb03a 	or	r7,r5,r17
 80039e0:	38005526 	beq	r7,zero,8003b38 <__adddf3+0x784>
 80039e4:	0108303a 	nor	r4,zero,r4
 80039e8:	2000511e 	bne	r4,zero,8003b30 <__adddf3+0x77c>
 80039ec:	89a3883a 	add	r17,r17,r6
 80039f0:	414b883a 	add	r5,r8,r5
 80039f4:	898d803a 	cmpltu	r6,r17,r6
 80039f8:	298b883a 	add	r5,r5,r6
 80039fc:	1021883a 	mov	r16,r2
 8003a00:	003f0e06 	br	800363c <__alt_data_end+0xfc00363c>
 8003a04:	1000341e 	bne	r2,zero,8003ad8 <__adddf3+0x724>
 8003a08:	4184b03a 	or	r2,r8,r6
 8003a0c:	10006f26 	beq	r2,zero,8003bcc <__adddf3+0x818>
 8003a10:	400b883a 	mov	r5,r8
 8003a14:	3023883a 	mov	r17,r6
 8003a18:	3825883a 	mov	r18,r7
 8003a1c:	0401ffc4 	movi	r16,2047
 8003a20:	003e8306 	br	8003430 <__alt_data_end+0xfc003430>
 8003a24:	2c62b03a 	or	r17,r5,r17
 8003a28:	8822c03a 	cmpne	r17,r17,zero
 8003a2c:	0007883a 	mov	r3,zero
 8003a30:	003f9506 	br	8003888 <__alt_data_end+0xfc003888>
 8003a34:	1021883a 	mov	r16,r2
 8003a38:	000b883a 	mov	r5,zero
 8003a3c:	0023883a 	mov	r17,zero
 8003a40:	003edb06 	br	80035b0 <__alt_data_end+0xfc0035b0>
 8003a44:	01c1ffc4 	movi	r7,2047
 8003a48:	11c03b26 	beq	r2,r7,8003b38 <__adddf3+0x784>
 8003a4c:	0109c83a 	sub	r4,zero,r4
 8003a50:	29402034 	orhi	r5,r5,128
 8003a54:	01c00e04 	movi	r7,56
 8003a58:	39006216 	blt	r7,r4,8003be4 <__adddf3+0x830>
 8003a5c:	01c007c4 	movi	r7,31
 8003a60:	39006b16 	blt	r7,r4,8003c10 <__adddf3+0x85c>
 8003a64:	01c00804 	movi	r7,32
 8003a68:	390fc83a 	sub	r7,r7,r4
 8003a6c:	29d4983a 	sll	r10,r5,r7
 8003a70:	8912d83a 	srl	r9,r17,r4
 8003a74:	89ce983a 	sll	r7,r17,r7
 8003a78:	2908d83a 	srl	r4,r5,r4
 8003a7c:	5262b03a 	or	r17,r10,r9
 8003a80:	380ac03a 	cmpne	r5,r7,zero
 8003a84:	8962b03a 	or	r17,r17,r5
 8003a88:	89a3883a 	add	r17,r17,r6
 8003a8c:	2211883a 	add	r8,r4,r8
 8003a90:	898d803a 	cmpltu	r6,r17,r6
 8003a94:	418b883a 	add	r5,r8,r6
 8003a98:	1021883a 	mov	r16,r2
 8003a9c:	003ee706 	br	800363c <__alt_data_end+0xfc00363c>
 8003aa0:	4184b03a 	or	r2,r8,r6
 8003aa4:	103e6226 	beq	r2,zero,8003430 <__alt_data_end+0xfc003430>
 8003aa8:	8987c83a 	sub	r3,r17,r6
 8003aac:	88c9803a 	cmpltu	r4,r17,r3
 8003ab0:	2a05c83a 	sub	r2,r5,r8
 8003ab4:	1105c83a 	sub	r2,r2,r4
 8003ab8:	1100202c 	andhi	r4,r2,128
 8003abc:	203f0426 	beq	r4,zero,80036d0 <__alt_data_end+0xfc0036d0>
 8003ac0:	3463c83a 	sub	r17,r6,r17
 8003ac4:	414bc83a 	sub	r5,r8,r5
 8003ac8:	344d803a 	cmpltu	r6,r6,r17
 8003acc:	298bc83a 	sub	r5,r5,r6
 8003ad0:	3825883a 	mov	r18,r7
 8003ad4:	003e5606 	br	8003430 <__alt_data_end+0xfc003430>
 8003ad8:	4184b03a 	or	r2,r8,r6
 8003adc:	10002b26 	beq	r2,zero,8003b8c <__adddf3+0x7d8>
 8003ae0:	2804d0fa 	srli	r2,r5,3
 8003ae4:	8822d0fa 	srli	r17,r17,3
 8003ae8:	280a977a 	slli	r5,r5,29
 8003aec:	10c0022c 	andhi	r3,r2,8
 8003af0:	2c62b03a 	or	r17,r5,r17
 8003af4:	18000826 	beq	r3,zero,8003b18 <__adddf3+0x764>
 8003af8:	4008d0fa 	srli	r4,r8,3
 8003afc:	20c0022c 	andhi	r3,r4,8
 8003b00:	1800051e 	bne	r3,zero,8003b18 <__adddf3+0x764>
 8003b04:	300cd0fa 	srli	r6,r6,3
 8003b08:	4010977a 	slli	r8,r8,29
 8003b0c:	2005883a 	mov	r2,r4
 8003b10:	3825883a 	mov	r18,r7
 8003b14:	41a2b03a 	or	r17,r8,r6
 8003b18:	880ad77a 	srli	r5,r17,29
 8003b1c:	100490fa 	slli	r2,r2,3
 8003b20:	882290fa 	slli	r17,r17,3
 8003b24:	0401ffc4 	movi	r16,2047
 8003b28:	288ab03a 	or	r5,r5,r2
 8003b2c:	003e4006 	br	8003430 <__alt_data_end+0xfc003430>
 8003b30:	01c1ffc4 	movi	r7,2047
 8003b34:	11ffc71e 	bne	r2,r7,8003a54 <__alt_data_end+0xfc003a54>
 8003b38:	400b883a 	mov	r5,r8
 8003b3c:	3023883a 	mov	r17,r6
 8003b40:	1021883a 	mov	r16,r2
 8003b44:	003e3a06 	br	8003430 <__alt_data_end+0xfc003430>
 8003b48:	10002d26 	beq	r2,zero,8003c00 <__adddf3+0x84c>
 8003b4c:	4184b03a 	or	r2,r8,r6
 8003b50:	10000e26 	beq	r2,zero,8003b8c <__adddf3+0x7d8>
 8003b54:	2804d0fa 	srli	r2,r5,3
 8003b58:	8822d0fa 	srli	r17,r17,3
 8003b5c:	280a977a 	slli	r5,r5,29
 8003b60:	10c0022c 	andhi	r3,r2,8
 8003b64:	2c62b03a 	or	r17,r5,r17
 8003b68:	183feb26 	beq	r3,zero,8003b18 <__alt_data_end+0xfc003b18>
 8003b6c:	4008d0fa 	srli	r4,r8,3
 8003b70:	20c0022c 	andhi	r3,r4,8
 8003b74:	183fe81e 	bne	r3,zero,8003b18 <__alt_data_end+0xfc003b18>
 8003b78:	300cd0fa 	srli	r6,r6,3
 8003b7c:	4010977a 	slli	r8,r8,29
 8003b80:	2005883a 	mov	r2,r4
 8003b84:	41a2b03a 	or	r17,r8,r6
 8003b88:	003fe306 	br	8003b18 <__alt_data_end+0xfc003b18>
 8003b8c:	0401ffc4 	movi	r16,2047
 8003b90:	003e2706 	br	8003430 <__alt_data_end+0xfc003430>
 8003b94:	0011883a 	mov	r8,zero
 8003b98:	003f8306 	br	80039a8 <__alt_data_end+0xfc0039a8>
 8003b9c:	193ff804 	addi	r4,r3,-32
 8003ba0:	02400804 	movi	r9,32
 8003ba4:	2908d83a 	srl	r4,r5,r4
 8003ba8:	1a402526 	beq	r3,r9,8003c40 <__adddf3+0x88c>
 8003bac:	02401004 	movi	r9,64
 8003bb0:	48c7c83a 	sub	r3,r9,r3
 8003bb4:	28ca983a 	sll	r5,r5,r3
 8003bb8:	2c62b03a 	or	r17,r5,r17
 8003bbc:	8822c03a 	cmpne	r17,r17,zero
 8003bc0:	8922b03a 	or	r17,r17,r4
 8003bc4:	0007883a 	mov	r3,zero
 8003bc8:	003f2f06 	br	8003888 <__alt_data_end+0xfc003888>
 8003bcc:	01402034 	movhi	r5,128
 8003bd0:	0007883a 	mov	r3,zero
 8003bd4:	297fffc4 	addi	r5,r5,-1
 8003bd8:	047ffe04 	movi	r17,-8
 8003bdc:	0401ffc4 	movi	r16,2047
 8003be0:	003e7306 	br	80035b0 <__alt_data_end+0xfc0035b0>
 8003be4:	2c62b03a 	or	r17,r5,r17
 8003be8:	8822c03a 	cmpne	r17,r17,zero
 8003bec:	0009883a 	mov	r4,zero
 8003bf0:	003fa506 	br	8003a88 <__alt_data_end+0xfc003a88>
 8003bf4:	400b883a 	mov	r5,r8
 8003bf8:	3023883a 	mov	r17,r6
 8003bfc:	003e0c06 	br	8003430 <__alt_data_end+0xfc003430>
 8003c00:	400b883a 	mov	r5,r8
 8003c04:	3023883a 	mov	r17,r6
 8003c08:	0401ffc4 	movi	r16,2047
 8003c0c:	003e0806 	br	8003430 <__alt_data_end+0xfc003430>
 8003c10:	21fff804 	addi	r7,r4,-32
 8003c14:	02400804 	movi	r9,32
 8003c18:	29ced83a 	srl	r7,r5,r7
 8003c1c:	22400a26 	beq	r4,r9,8003c48 <__adddf3+0x894>
 8003c20:	02401004 	movi	r9,64
 8003c24:	4909c83a 	sub	r4,r9,r4
 8003c28:	290a983a 	sll	r5,r5,r4
 8003c2c:	2c62b03a 	or	r17,r5,r17
 8003c30:	8822c03a 	cmpne	r17,r17,zero
 8003c34:	89e2b03a 	or	r17,r17,r7
 8003c38:	0009883a 	mov	r4,zero
 8003c3c:	003f9206 	br	8003a88 <__alt_data_end+0xfc003a88>
 8003c40:	000b883a 	mov	r5,zero
 8003c44:	003fdc06 	br	8003bb8 <__alt_data_end+0xfc003bb8>
 8003c48:	000b883a 	mov	r5,zero
 8003c4c:	003ff706 	br	8003c2c <__alt_data_end+0xfc003c2c>

08003c50 <__gedf2>:
 8003c50:	2804d53a 	srli	r2,r5,20
 8003c54:	3806d53a 	srli	r3,r7,20
 8003c58:	02000434 	movhi	r8,16
 8003c5c:	423fffc4 	addi	r8,r8,-1
 8003c60:	0241ffc4 	movi	r9,2047
 8003c64:	1081ffcc 	andi	r2,r2,2047
 8003c68:	2a14703a 	and	r10,r5,r8
 8003c6c:	1a46703a 	and	r3,r3,r9
 8003c70:	3a10703a 	and	r8,r7,r8
 8003c74:	280ad7fa 	srli	r5,r5,31
 8003c78:	380ed7fa 	srli	r7,r7,31
 8003c7c:	12400b26 	beq	r2,r9,8003cac <__gedf2+0x5c>
 8003c80:	1a401626 	beq	r3,r9,8003cdc <__gedf2+0x8c>
 8003c84:	10000c1e 	bne	r2,zero,8003cb8 <__gedf2+0x68>
 8003c88:	5112b03a 	or	r9,r10,r4
 8003c8c:	4813003a 	cmpeq	r9,r9,zero
 8003c90:	4817883a 	mov	r11,r9
 8003c94:	18000c1e 	bne	r3,zero,8003cc8 <__gedf2+0x78>
 8003c98:	4198b03a 	or	r12,r8,r6
 8003c9c:	60000a1e 	bne	r12,zero,8003cc8 <__gedf2+0x78>
 8003ca0:	48001326 	beq	r9,zero,8003cf0 <__gedf2+0xa0>
 8003ca4:	0005883a 	mov	r2,zero
 8003ca8:	f800283a 	ret
 8003cac:	5112b03a 	or	r9,r10,r4
 8003cb0:	4800191e 	bne	r9,zero,8003d18 <__gedf2+0xc8>
 8003cb4:	18800926 	beq	r3,r2,8003cdc <__gedf2+0x8c>
 8003cb8:	18000b1e 	bne	r3,zero,8003ce8 <__gedf2+0x98>
 8003cbc:	4192b03a 	or	r9,r8,r6
 8003cc0:	0017883a 	mov	r11,zero
 8003cc4:	48000a26 	beq	r9,zero,8003cf0 <__gedf2+0xa0>
 8003cc8:	39c03fcc 	andi	r7,r7,255
 8003ccc:	58000726 	beq	r11,zero,8003cec <__gedf2+0x9c>
 8003cd0:	3800081e 	bne	r7,zero,8003cf4 <__gedf2+0xa4>
 8003cd4:	00bfffc4 	movi	r2,-1
 8003cd8:	f800283a 	ret
 8003cdc:	4192b03a 	or	r9,r8,r6
 8003ce0:	48000d1e 	bne	r9,zero,8003d18 <__gedf2+0xc8>
 8003ce4:	103fe826 	beq	r2,zero,8003c88 <__alt_data_end+0xfc003c88>
 8003ce8:	39c03fcc 	andi	r7,r7,255
 8003cec:	29c00326 	beq	r5,r7,8003cfc <__gedf2+0xac>
 8003cf0:	283ff81e 	bne	r5,zero,8003cd4 <__alt_data_end+0xfc003cd4>
 8003cf4:	00800044 	movi	r2,1
 8003cf8:	f800283a 	ret
 8003cfc:	18bffc16 	blt	r3,r2,8003cf0 <__alt_data_end+0xfc003cf0>
 8003d00:	10c00316 	blt	r2,r3,8003d10 <__gedf2+0xc0>
 8003d04:	42bffa36 	bltu	r8,r10,8003cf0 <__alt_data_end+0xfc003cf0>
 8003d08:	52000526 	beq	r10,r8,8003d20 <__gedf2+0xd0>
 8003d0c:	523fe52e 	bgeu	r10,r8,8003ca4 <__alt_data_end+0xfc003ca4>
 8003d10:	283ff026 	beq	r5,zero,8003cd4 <__alt_data_end+0xfc003cd4>
 8003d14:	003ff706 	br	8003cf4 <__alt_data_end+0xfc003cf4>
 8003d18:	00bfff84 	movi	r2,-2
 8003d1c:	f800283a 	ret
 8003d20:	313ff336 	bltu	r6,r4,8003cf0 <__alt_data_end+0xfc003cf0>
 8003d24:	21bfdf2e 	bgeu	r4,r6,8003ca4 <__alt_data_end+0xfc003ca4>
 8003d28:	283fea26 	beq	r5,zero,8003cd4 <__alt_data_end+0xfc003cd4>
 8003d2c:	003ff106 	br	8003cf4 <__alt_data_end+0xfc003cf4>

08003d30 <__ledf2>:
 8003d30:	2804d53a 	srli	r2,r5,20
 8003d34:	3810d53a 	srli	r8,r7,20
 8003d38:	00c00434 	movhi	r3,16
 8003d3c:	18ffffc4 	addi	r3,r3,-1
 8003d40:	0241ffc4 	movi	r9,2047
 8003d44:	1081ffcc 	andi	r2,r2,2047
 8003d48:	28d4703a 	and	r10,r5,r3
 8003d4c:	4250703a 	and	r8,r8,r9
 8003d50:	38c6703a 	and	r3,r7,r3
 8003d54:	280ad7fa 	srli	r5,r5,31
 8003d58:	380ed7fa 	srli	r7,r7,31
 8003d5c:	12400b26 	beq	r2,r9,8003d8c <__ledf2+0x5c>
 8003d60:	42401926 	beq	r8,r9,8003dc8 <__ledf2+0x98>
 8003d64:	10000c1e 	bne	r2,zero,8003d98 <__ledf2+0x68>
 8003d68:	5112b03a 	or	r9,r10,r4
 8003d6c:	4813003a 	cmpeq	r9,r9,zero
 8003d70:	4817883a 	mov	r11,r9
 8003d74:	40000f26 	beq	r8,zero,8003db4 <__ledf2+0x84>
 8003d78:	39c03fcc 	andi	r7,r7,255
 8003d7c:	58001826 	beq	r11,zero,8003de0 <__ledf2+0xb0>
 8003d80:	38000a1e 	bne	r7,zero,8003dac <__ledf2+0x7c>
 8003d84:	00bfffc4 	movi	r2,-1
 8003d88:	f800283a 	ret
 8003d8c:	5112b03a 	or	r9,r10,r4
 8003d90:	48000f1e 	bne	r9,zero,8003dd0 <__ledf2+0xa0>
 8003d94:	40800c26 	beq	r8,r2,8003dc8 <__ledf2+0x98>
 8003d98:	4000101e 	bne	r8,zero,8003ddc <__ledf2+0xac>
 8003d9c:	1992b03a 	or	r9,r3,r6
 8003da0:	0017883a 	mov	r11,zero
 8003da4:	483ff41e 	bne	r9,zero,8003d78 <__alt_data_end+0xfc003d78>
 8003da8:	283ff61e 	bne	r5,zero,8003d84 <__alt_data_end+0xfc003d84>
 8003dac:	00800044 	movi	r2,1
 8003db0:	f800283a 	ret
 8003db4:	1998b03a 	or	r12,r3,r6
 8003db8:	603fef1e 	bne	r12,zero,8003d78 <__alt_data_end+0xfc003d78>
 8003dbc:	483ffa26 	beq	r9,zero,8003da8 <__alt_data_end+0xfc003da8>
 8003dc0:	0005883a 	mov	r2,zero
 8003dc4:	f800283a 	ret
 8003dc8:	1992b03a 	or	r9,r3,r6
 8003dcc:	48000226 	beq	r9,zero,8003dd8 <__ledf2+0xa8>
 8003dd0:	00800084 	movi	r2,2
 8003dd4:	f800283a 	ret
 8003dd8:	103fe326 	beq	r2,zero,8003d68 <__alt_data_end+0xfc003d68>
 8003ddc:	39c03fcc 	andi	r7,r7,255
 8003de0:	29fff11e 	bne	r5,r7,8003da8 <__alt_data_end+0xfc003da8>
 8003de4:	40bff016 	blt	r8,r2,8003da8 <__alt_data_end+0xfc003da8>
 8003de8:	12000316 	blt	r2,r8,8003df8 <__ledf2+0xc8>
 8003dec:	1abfee36 	bltu	r3,r10,8003da8 <__alt_data_end+0xfc003da8>
 8003df0:	50c00326 	beq	r10,r3,8003e00 <__ledf2+0xd0>
 8003df4:	50fff22e 	bgeu	r10,r3,8003dc0 <__alt_data_end+0xfc003dc0>
 8003df8:	283fe226 	beq	r5,zero,8003d84 <__alt_data_end+0xfc003d84>
 8003dfc:	003feb06 	br	8003dac <__alt_data_end+0xfc003dac>
 8003e00:	313fe936 	bltu	r6,r4,8003da8 <__alt_data_end+0xfc003da8>
 8003e04:	21bfee2e 	bgeu	r4,r6,8003dc0 <__alt_data_end+0xfc003dc0>
 8003e08:	283fde26 	beq	r5,zero,8003d84 <__alt_data_end+0xfc003d84>
 8003e0c:	003fe706 	br	8003dac <__alt_data_end+0xfc003dac>

08003e10 <__fixdfsi>:
 8003e10:	2806d53a 	srli	r3,r5,20
 8003e14:	00800434 	movhi	r2,16
 8003e18:	10bfffc4 	addi	r2,r2,-1
 8003e1c:	18c1ffcc 	andi	r3,r3,2047
 8003e20:	0180ff84 	movi	r6,1022
 8003e24:	2884703a 	and	r2,r5,r2
 8003e28:	280ad7fa 	srli	r5,r5,31
 8003e2c:	30c0130e 	bge	r6,r3,8003e7c <__fixdfsi+0x6c>
 8003e30:	01810744 	movi	r6,1053
 8003e34:	30c00d16 	blt	r6,r3,8003e6c <__fixdfsi+0x5c>
 8003e38:	01810cc4 	movi	r6,1075
 8003e3c:	30cdc83a 	sub	r6,r6,r3
 8003e40:	01c007c4 	movi	r7,31
 8003e44:	10800434 	orhi	r2,r2,16
 8003e48:	39800e0e 	bge	r7,r6,8003e84 <__fixdfsi+0x74>
 8003e4c:	010104c4 	movi	r4,1043
 8003e50:	20c7c83a 	sub	r3,r4,r3
 8003e54:	10c6d83a 	srl	r3,r2,r3
 8003e58:	29403fcc 	andi	r5,r5,255
 8003e5c:	0145c83a 	sub	r2,zero,r5
 8003e60:	1884f03a 	xor	r2,r3,r2
 8003e64:	1145883a 	add	r2,r2,r5
 8003e68:	f800283a 	ret
 8003e6c:	00a00034 	movhi	r2,32768
 8003e70:	10bfffc4 	addi	r2,r2,-1
 8003e74:	2885883a 	add	r2,r5,r2
 8003e78:	f800283a 	ret
 8003e7c:	0005883a 	mov	r2,zero
 8003e80:	f800283a 	ret
 8003e84:	18fefb44 	addi	r3,r3,-1043
 8003e88:	2188d83a 	srl	r4,r4,r6
 8003e8c:	10c6983a 	sll	r3,r2,r3
 8003e90:	20c6b03a 	or	r3,r4,r3
 8003e94:	003ff006 	br	8003e58 <__alt_data_end+0xfc003e58>

08003e98 <__floatsidf>:
 8003e98:	defffd04 	addi	sp,sp,-12
 8003e9c:	dc400115 	stw	r17,4(sp)
 8003ea0:	dfc00215 	stw	ra,8(sp)
 8003ea4:	dc000015 	stw	r16,0(sp)
 8003ea8:	2023883a 	mov	r17,r4
 8003eac:	20001426 	beq	r4,zero,8003f00 <__floatsidf+0x68>
 8003eb0:	2020d7fa 	srli	r16,r4,31
 8003eb4:	80000126 	beq	r16,zero,8003ebc <__floatsidf+0x24>
 8003eb8:	0123c83a 	sub	r17,zero,r4
 8003ebc:	8809883a 	mov	r4,r17
 8003ec0:	8003f680 	call	8003f68 <__clzsi2>
 8003ec4:	01410784 	movi	r5,1054
 8003ec8:	00c00284 	movi	r3,10
 8003ecc:	288bc83a 	sub	r5,r5,r2
 8003ed0:	18801c16 	blt	r3,r2,8003f44 <__floatsidf+0xac>
 8003ed4:	00c002c4 	movi	r3,11
 8003ed8:	1887c83a 	sub	r3,r3,r2
 8003edc:	88c8d83a 	srl	r4,r17,r3
 8003ee0:	00c00434 	movhi	r3,16
 8003ee4:	18ffffc4 	addi	r3,r3,-1
 8003ee8:	10800544 	addi	r2,r2,21
 8003eec:	20c8703a 	and	r4,r4,r3
 8003ef0:	8884983a 	sll	r2,r17,r2
 8003ef4:	28c1ffcc 	andi	r3,r5,2047
 8003ef8:	800d883a 	mov	r6,r16
 8003efc:	00000406 	br	8003f10 <__floatsidf+0x78>
 8003f00:	000d883a 	mov	r6,zero
 8003f04:	0007883a 	mov	r3,zero
 8003f08:	0009883a 	mov	r4,zero
 8003f0c:	0005883a 	mov	r2,zero
 8003f10:	180a953a 	slli	r5,r3,20
 8003f14:	31803fcc 	andi	r6,r6,255
 8003f18:	00c00434 	movhi	r3,16
 8003f1c:	300c97fa 	slli	r6,r6,31
 8003f20:	18ffffc4 	addi	r3,r3,-1
 8003f24:	20c6703a 	and	r3,r4,r3
 8003f28:	1946b03a 	or	r3,r3,r5
 8003f2c:	1986b03a 	or	r3,r3,r6
 8003f30:	dfc00217 	ldw	ra,8(sp)
 8003f34:	dc400117 	ldw	r17,4(sp)
 8003f38:	dc000017 	ldw	r16,0(sp)
 8003f3c:	dec00304 	addi	sp,sp,12
 8003f40:	f800283a 	ret
 8003f44:	10fffd44 	addi	r3,r2,-11
 8003f48:	88c8983a 	sll	r4,r17,r3
 8003f4c:	00800434 	movhi	r2,16
 8003f50:	10bfffc4 	addi	r2,r2,-1
 8003f54:	2088703a 	and	r4,r4,r2
 8003f58:	28c1ffcc 	andi	r3,r5,2047
 8003f5c:	800d883a 	mov	r6,r16
 8003f60:	0005883a 	mov	r2,zero
 8003f64:	003fea06 	br	8003f10 <__alt_data_end+0xfc003f10>

08003f68 <__clzsi2>:
 8003f68:	00bfffd4 	movui	r2,65535
 8003f6c:	11000b36 	bltu	r2,r4,8003f9c <__clzsi2+0x34>
 8003f70:	00803fc4 	movi	r2,255
 8003f74:	1100122e 	bgeu	r2,r4,8003fc0 <__clzsi2+0x58>
 8003f78:	00c00204 	movi	r3,8
 8003f7c:	01400604 	movi	r5,24
 8003f80:	20c8d83a 	srl	r4,r4,r3
 8003f84:	008200b4 	movhi	r2,2050
 8003f88:	10805704 	addi	r2,r2,348
 8003f8c:	1109883a 	add	r4,r2,r4
 8003f90:	20800003 	ldbu	r2,0(r4)
 8003f94:	2885c83a 	sub	r2,r5,r2
 8003f98:	f800283a 	ret
 8003f9c:	00804034 	movhi	r2,256
 8003fa0:	10bfffc4 	addi	r2,r2,-1
 8003fa4:	11000336 	bltu	r2,r4,8003fb4 <__clzsi2+0x4c>
 8003fa8:	00c00404 	movi	r3,16
 8003fac:	180b883a 	mov	r5,r3
 8003fb0:	003ff306 	br	8003f80 <__alt_data_end+0xfc003f80>
 8003fb4:	00c00604 	movi	r3,24
 8003fb8:	01400204 	movi	r5,8
 8003fbc:	003ff006 	br	8003f80 <__alt_data_end+0xfc003f80>
 8003fc0:	0007883a 	mov	r3,zero
 8003fc4:	01400804 	movi	r5,32
 8003fc8:	003fed06 	br	8003f80 <__alt_data_end+0xfc003f80>

08003fcc <malloc>:
 8003fcc:	008200b4 	movhi	r2,2050
 8003fd0:	1087e604 	addi	r2,r2,8088
 8003fd4:	200b883a 	mov	r5,r4
 8003fd8:	11000017 	ldw	r4,0(r2)
 8003fdc:	8003ff41 	jmpi	8003ff4 <_malloc_r>

08003fe0 <free>:
 8003fe0:	008200b4 	movhi	r2,2050
 8003fe4:	1087e604 	addi	r2,r2,8088
 8003fe8:	200b883a 	mov	r5,r4
 8003fec:	11000017 	ldw	r4,0(r2)
 8003ff0:	800abc41 	jmpi	800abc4 <_free_r>

08003ff4 <_malloc_r>:
 8003ff4:	defff504 	addi	sp,sp,-44
 8003ff8:	dc800315 	stw	r18,12(sp)
 8003ffc:	dfc00a15 	stw	ra,40(sp)
 8004000:	df000915 	stw	fp,36(sp)
 8004004:	ddc00815 	stw	r23,32(sp)
 8004008:	dd800715 	stw	r22,28(sp)
 800400c:	dd400615 	stw	r21,24(sp)
 8004010:	dd000515 	stw	r20,20(sp)
 8004014:	dcc00415 	stw	r19,16(sp)
 8004018:	dc400215 	stw	r17,8(sp)
 800401c:	dc000115 	stw	r16,4(sp)
 8004020:	288002c4 	addi	r2,r5,11
 8004024:	00c00584 	movi	r3,22
 8004028:	2025883a 	mov	r18,r4
 800402c:	18802a2e 	bgeu	r3,r2,80040d8 <_malloc_r+0xe4>
 8004030:	047ffe04 	movi	r17,-8
 8004034:	1462703a 	and	r17,r2,r17
 8004038:	88009e16 	blt	r17,zero,80042b4 <_malloc_r+0x2c0>
 800403c:	89409d36 	bltu	r17,r5,80042b4 <_malloc_r+0x2c0>
 8004040:	80133d80 	call	80133d8 <__malloc_lock>
 8004044:	00807dc4 	movi	r2,503
 8004048:	14402736 	bltu	r2,r17,80040e8 <_malloc_r+0xf4>
 800404c:	8806d0fa 	srli	r3,r17,3
 8004050:	04c200b4 	movhi	r19,2050
 8004054:	9cc12d04 	addi	r19,r19,1204
 8004058:	18c5883a 	add	r2,r3,r3
 800405c:	1085883a 	add	r2,r2,r2
 8004060:	1085883a 	add	r2,r2,r2
 8004064:	9885883a 	add	r2,r19,r2
 8004068:	14000317 	ldw	r16,12(r2)
 800406c:	80814a26 	beq	r16,r2,8004598 <_malloc_r+0x5a4>
 8004070:	80c00117 	ldw	r3,4(r16)
 8004074:	81000317 	ldw	r4,12(r16)
 8004078:	00bfff04 	movi	r2,-4
 800407c:	1884703a 	and	r2,r3,r2
 8004080:	81400217 	ldw	r5,8(r16)
 8004084:	8085883a 	add	r2,r16,r2
 8004088:	10c00117 	ldw	r3,4(r2)
 800408c:	29000315 	stw	r4,12(r5)
 8004090:	21400215 	stw	r5,8(r4)
 8004094:	18c00054 	ori	r3,r3,1
 8004098:	10c00115 	stw	r3,4(r2)
 800409c:	9009883a 	mov	r4,r18
 80040a0:	80133f80 	call	80133f8 <__malloc_unlock>
 80040a4:	80800204 	addi	r2,r16,8
 80040a8:	dfc00a17 	ldw	ra,40(sp)
 80040ac:	df000917 	ldw	fp,36(sp)
 80040b0:	ddc00817 	ldw	r23,32(sp)
 80040b4:	dd800717 	ldw	r22,28(sp)
 80040b8:	dd400617 	ldw	r21,24(sp)
 80040bc:	dd000517 	ldw	r20,20(sp)
 80040c0:	dcc00417 	ldw	r19,16(sp)
 80040c4:	dc800317 	ldw	r18,12(sp)
 80040c8:	dc400217 	ldw	r17,8(sp)
 80040cc:	dc000117 	ldw	r16,4(sp)
 80040d0:	dec00b04 	addi	sp,sp,44
 80040d4:	f800283a 	ret
 80040d8:	04400404 	movi	r17,16
 80040dc:	89407536 	bltu	r17,r5,80042b4 <_malloc_r+0x2c0>
 80040e0:	80133d80 	call	80133d8 <__malloc_lock>
 80040e4:	003fd906 	br	800404c <__alt_data_end+0xfc00404c>
 80040e8:	8806d27a 	srli	r3,r17,9
 80040ec:	18007526 	beq	r3,zero,80042c4 <_malloc_r+0x2d0>
 80040f0:	00800104 	movi	r2,4
 80040f4:	10c0ef36 	bltu	r2,r3,80044b4 <_malloc_r+0x4c0>
 80040f8:	8806d1ba 	srli	r3,r17,6
 80040fc:	19c00e04 	addi	r7,r3,56
 8004100:	39cb883a 	add	r5,r7,r7
 8004104:	04c200b4 	movhi	r19,2050
 8004108:	294b883a 	add	r5,r5,r5
 800410c:	9cc12d04 	addi	r19,r19,1204
 8004110:	294b883a 	add	r5,r5,r5
 8004114:	994b883a 	add	r5,r19,r5
 8004118:	2c000317 	ldw	r16,12(r5)
 800411c:	2c000e26 	beq	r5,r16,8004158 <_malloc_r+0x164>
 8004120:	80800117 	ldw	r2,4(r16)
 8004124:	01bfff04 	movi	r6,-4
 8004128:	010003c4 	movi	r4,15
 800412c:	1184703a 	and	r2,r2,r6
 8004130:	1447c83a 	sub	r3,r2,r17
 8004134:	20c00716 	blt	r4,r3,8004154 <_malloc_r+0x160>
 8004138:	1800650e 	bge	r3,zero,80042d0 <_malloc_r+0x2dc>
 800413c:	84000317 	ldw	r16,12(r16)
 8004140:	2c000526 	beq	r5,r16,8004158 <_malloc_r+0x164>
 8004144:	80800117 	ldw	r2,4(r16)
 8004148:	1184703a 	and	r2,r2,r6
 800414c:	1447c83a 	sub	r3,r2,r17
 8004150:	20fff90e 	bge	r4,r3,8004138 <__alt_data_end+0xfc004138>
 8004154:	39ffffc4 	addi	r7,r7,-1
 8004158:	38c00044 	addi	r3,r7,1
 800415c:	018200b4 	movhi	r6,2050
 8004160:	9c000417 	ldw	r16,16(r19)
 8004164:	31812d04 	addi	r6,r6,1204
 8004168:	32400204 	addi	r9,r6,8
 800416c:	82410326 	beq	r16,r9,800457c <_malloc_r+0x588>
 8004170:	81000117 	ldw	r4,4(r16)
 8004174:	00bfff04 	movi	r2,-4
 8004178:	208e703a 	and	r7,r4,r2
 800417c:	3c45c83a 	sub	r2,r7,r17
 8004180:	010003c4 	movi	r4,15
 8004184:	2080ee16 	blt	r4,r2,8004540 <_malloc_r+0x54c>
 8004188:	32400515 	stw	r9,20(r6)
 800418c:	32400415 	stw	r9,16(r6)
 8004190:	1000510e 	bge	r2,zero,80042d8 <_malloc_r+0x2e4>
 8004194:	00807fc4 	movi	r2,511
 8004198:	11c0ce36 	bltu	r2,r7,80044d4 <_malloc_r+0x4e0>
 800419c:	3808d0fa 	srli	r4,r7,3
 80041a0:	01c00044 	movi	r7,1
 80041a4:	30800117 	ldw	r2,4(r6)
 80041a8:	210b883a 	add	r5,r4,r4
 80041ac:	294b883a 	add	r5,r5,r5
 80041b0:	2009d0ba 	srai	r4,r4,2
 80041b4:	294b883a 	add	r5,r5,r5
 80041b8:	298b883a 	add	r5,r5,r6
 80041bc:	2a000217 	ldw	r8,8(r5)
 80041c0:	3908983a 	sll	r4,r7,r4
 80041c4:	81400315 	stw	r5,12(r16)
 80041c8:	82000215 	stw	r8,8(r16)
 80041cc:	2088b03a 	or	r4,r4,r2
 80041d0:	2c000215 	stw	r16,8(r5)
 80041d4:	31000115 	stw	r4,4(r6)
 80041d8:	44000315 	stw	r16,12(r8)
 80041dc:	1805d0ba 	srai	r2,r3,2
 80041e0:	01400044 	movi	r5,1
 80041e4:	288a983a 	sll	r5,r5,r2
 80041e8:	21404336 	bltu	r4,r5,80042f8 <_malloc_r+0x304>
 80041ec:	2144703a 	and	r2,r4,r5
 80041f0:	10000a1e 	bne	r2,zero,800421c <_malloc_r+0x228>
 80041f4:	00bfff04 	movi	r2,-4
 80041f8:	294b883a 	add	r5,r5,r5
 80041fc:	1886703a 	and	r3,r3,r2
 8004200:	2144703a 	and	r2,r4,r5
 8004204:	18c00104 	addi	r3,r3,4
 8004208:	1000041e 	bne	r2,zero,800421c <_malloc_r+0x228>
 800420c:	294b883a 	add	r5,r5,r5
 8004210:	2144703a 	and	r2,r4,r5
 8004214:	18c00104 	addi	r3,r3,4
 8004218:	103ffc26 	beq	r2,zero,800420c <__alt_data_end+0xfc00420c>
 800421c:	023fff04 	movi	r8,-4
 8004220:	01c003c4 	movi	r7,15
 8004224:	18c5883a 	add	r2,r3,r3
 8004228:	1085883a 	add	r2,r2,r2
 800422c:	1085883a 	add	r2,r2,r2
 8004230:	9895883a 	add	r10,r19,r2
 8004234:	52c00304 	addi	r11,r10,12
 8004238:	1819883a 	mov	r12,r3
 800423c:	5c000017 	ldw	r16,0(r11)
 8004240:	59bffd04 	addi	r6,r11,-12
 8004244:	8180041e 	bne	r16,r6,8004258 <_malloc_r+0x264>
 8004248:	0000ce06 	br	8004584 <_malloc_r+0x590>
 800424c:	2000d70e 	bge	r4,zero,80045ac <_malloc_r+0x5b8>
 8004250:	84000317 	ldw	r16,12(r16)
 8004254:	8180cb26 	beq	r16,r6,8004584 <_malloc_r+0x590>
 8004258:	80800117 	ldw	r2,4(r16)
 800425c:	1204703a 	and	r2,r2,r8
 8004260:	1449c83a 	sub	r4,r2,r17
 8004264:	393ff90e 	bge	r7,r4,800424c <__alt_data_end+0xfc00424c>
 8004268:	80800317 	ldw	r2,12(r16)
 800426c:	80c00217 	ldw	r3,8(r16)
 8004270:	89400054 	ori	r5,r17,1
 8004274:	81400115 	stw	r5,4(r16)
 8004278:	18800315 	stw	r2,12(r3)
 800427c:	10c00215 	stw	r3,8(r2)
 8004280:	8463883a 	add	r17,r16,r17
 8004284:	9c400515 	stw	r17,20(r19)
 8004288:	9c400415 	stw	r17,16(r19)
 800428c:	20800054 	ori	r2,r4,1
 8004290:	88800115 	stw	r2,4(r17)
 8004294:	8a400315 	stw	r9,12(r17)
 8004298:	8a400215 	stw	r9,8(r17)
 800429c:	8923883a 	add	r17,r17,r4
 80042a0:	89000015 	stw	r4,0(r17)
 80042a4:	9009883a 	mov	r4,r18
 80042a8:	80133f80 	call	80133f8 <__malloc_unlock>
 80042ac:	80800204 	addi	r2,r16,8
 80042b0:	003f7d06 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80042b4:	00800304 	movi	r2,12
 80042b8:	90800015 	stw	r2,0(r18)
 80042bc:	0005883a 	mov	r2,zero
 80042c0:	003f7906 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80042c4:	01401f84 	movi	r5,126
 80042c8:	01c00fc4 	movi	r7,63
 80042cc:	003f8d06 	br	8004104 <__alt_data_end+0xfc004104>
 80042d0:	81000317 	ldw	r4,12(r16)
 80042d4:	003f6a06 	br	8004080 <__alt_data_end+0xfc004080>
 80042d8:	81c5883a 	add	r2,r16,r7
 80042dc:	10c00117 	ldw	r3,4(r2)
 80042e0:	9009883a 	mov	r4,r18
 80042e4:	18c00054 	ori	r3,r3,1
 80042e8:	10c00115 	stw	r3,4(r2)
 80042ec:	80133f80 	call	80133f8 <__malloc_unlock>
 80042f0:	80800204 	addi	r2,r16,8
 80042f4:	003f6c06 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80042f8:	9c000217 	ldw	r16,8(r19)
 80042fc:	00bfff04 	movi	r2,-4
 8004300:	85800117 	ldw	r22,4(r16)
 8004304:	b0ac703a 	and	r22,r22,r2
 8004308:	b4400336 	bltu	r22,r17,8004318 <_malloc_r+0x324>
 800430c:	b445c83a 	sub	r2,r22,r17
 8004310:	00c003c4 	movi	r3,15
 8004314:	18805d16 	blt	r3,r2,800448c <_malloc_r+0x498>
 8004318:	05c200b4 	movhi	r23,2050
 800431c:	008200b4 	movhi	r2,2050
 8004320:	bdc7e304 	addi	r23,r23,8076
 8004324:	108ebd04 	addi	r2,r2,15092
 8004328:	15400017 	ldw	r21,0(r2)
 800432c:	b9000017 	ldw	r4,0(r23)
 8004330:	00ffffc4 	movi	r3,-1
 8004334:	858d883a 	add	r6,r16,r22
 8004338:	8d6b883a 	add	r21,r17,r21
 800433c:	20c0e426 	beq	r4,r3,80046d0 <_malloc_r+0x6dc>
 8004340:	ad4403c4 	addi	r21,r21,4111
 8004344:	00fc0004 	movi	r3,-4096
 8004348:	a8ea703a 	and	r21,r21,r3
 800434c:	9009883a 	mov	r4,r18
 8004350:	a80b883a 	mov	r5,r21
 8004354:	d9800015 	stw	r6,0(sp)
 8004358:	80048f00 	call	80048f0 <_sbrk_r>
 800435c:	00ffffc4 	movi	r3,-1
 8004360:	1029883a 	mov	r20,r2
 8004364:	d9800017 	ldw	r6,0(sp)
 8004368:	10c0a426 	beq	r2,r3,80045fc <_malloc_r+0x608>
 800436c:	1180a236 	bltu	r2,r6,80045f8 <_malloc_r+0x604>
 8004370:	070200b4 	movhi	fp,2050
 8004374:	e70eca04 	addi	fp,fp,15144
 8004378:	e0c00017 	ldw	r3,0(fp)
 800437c:	a8c7883a 	add	r3,r21,r3
 8004380:	e0c00015 	stw	r3,0(fp)
 8004384:	3500da26 	beq	r6,r20,80046f0 <_malloc_r+0x6fc>
 8004388:	b9000017 	ldw	r4,0(r23)
 800438c:	00bfffc4 	movi	r2,-1
 8004390:	2080e426 	beq	r4,r2,8004724 <_malloc_r+0x730>
 8004394:	a185c83a 	sub	r2,r20,r6
 8004398:	1885883a 	add	r2,r3,r2
 800439c:	e0800015 	stw	r2,0(fp)
 80043a0:	a0c001cc 	andi	r3,r20,7
 80043a4:	1800b526 	beq	r3,zero,800467c <_malloc_r+0x688>
 80043a8:	a0e9c83a 	sub	r20,r20,r3
 80043ac:	00840204 	movi	r2,4104
 80043b0:	a5000204 	addi	r20,r20,8
 80043b4:	10c7c83a 	sub	r3,r2,r3
 80043b8:	a545883a 	add	r2,r20,r21
 80043bc:	1083ffcc 	andi	r2,r2,4095
 80043c0:	18abc83a 	sub	r21,r3,r2
 80043c4:	9009883a 	mov	r4,r18
 80043c8:	a80b883a 	mov	r5,r21
 80043cc:	80048f00 	call	80048f0 <_sbrk_r>
 80043d0:	00ffffc4 	movi	r3,-1
 80043d4:	10c0d026 	beq	r2,r3,8004718 <_malloc_r+0x724>
 80043d8:	1507c83a 	sub	r3,r2,r20
 80043dc:	a8c7883a 	add	r3,r21,r3
 80043e0:	18c00054 	ori	r3,r3,1
 80043e4:	e0800017 	ldw	r2,0(fp)
 80043e8:	9d000215 	stw	r20,8(r19)
 80043ec:	a0c00115 	stw	r3,4(r20)
 80043f0:	a887883a 	add	r3,r21,r2
 80043f4:	e0c00015 	stw	r3,0(fp)
 80043f8:	84c00e26 	beq	r16,r19,8004434 <_malloc_r+0x440>
 80043fc:	018003c4 	movi	r6,15
 8004400:	3580a02e 	bgeu	r6,r22,8004684 <_malloc_r+0x690>
 8004404:	81400117 	ldw	r5,4(r16)
 8004408:	013ffe04 	movi	r4,-8
 800440c:	b0bffd04 	addi	r2,r22,-12
 8004410:	1104703a 	and	r2,r2,r4
 8004414:	2900004c 	andi	r4,r5,1
 8004418:	1108b03a 	or	r4,r2,r4
 800441c:	81000115 	stw	r4,4(r16)
 8004420:	01400144 	movi	r5,5
 8004424:	8089883a 	add	r4,r16,r2
 8004428:	21400115 	stw	r5,4(r4)
 800442c:	21400215 	stw	r5,8(r4)
 8004430:	3080c036 	bltu	r6,r2,8004734 <_malloc_r+0x740>
 8004434:	008200b4 	movhi	r2,2050
 8004438:	108ebc04 	addi	r2,r2,15088
 800443c:	11000017 	ldw	r4,0(r2)
 8004440:	20c0012e 	bgeu	r4,r3,8004448 <_malloc_r+0x454>
 8004444:	10c00015 	stw	r3,0(r2)
 8004448:	008200b4 	movhi	r2,2050
 800444c:	108ebb04 	addi	r2,r2,15084
 8004450:	11000017 	ldw	r4,0(r2)
 8004454:	9c000217 	ldw	r16,8(r19)
 8004458:	20c0012e 	bgeu	r4,r3,8004460 <_malloc_r+0x46c>
 800445c:	10c00015 	stw	r3,0(r2)
 8004460:	80c00117 	ldw	r3,4(r16)
 8004464:	00bfff04 	movi	r2,-4
 8004468:	1886703a 	and	r3,r3,r2
 800446c:	1c45c83a 	sub	r2,r3,r17
 8004470:	1c400236 	bltu	r3,r17,800447c <_malloc_r+0x488>
 8004474:	00c003c4 	movi	r3,15
 8004478:	18800416 	blt	r3,r2,800448c <_malloc_r+0x498>
 800447c:	9009883a 	mov	r4,r18
 8004480:	80133f80 	call	80133f8 <__malloc_unlock>
 8004484:	0005883a 	mov	r2,zero
 8004488:	003f0706 	br	80040a8 <__alt_data_end+0xfc0040a8>
 800448c:	88c00054 	ori	r3,r17,1
 8004490:	80c00115 	stw	r3,4(r16)
 8004494:	8463883a 	add	r17,r16,r17
 8004498:	10800054 	ori	r2,r2,1
 800449c:	9c400215 	stw	r17,8(r19)
 80044a0:	88800115 	stw	r2,4(r17)
 80044a4:	9009883a 	mov	r4,r18
 80044a8:	80133f80 	call	80133f8 <__malloc_unlock>
 80044ac:	80800204 	addi	r2,r16,8
 80044b0:	003efd06 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80044b4:	00800504 	movi	r2,20
 80044b8:	10c0482e 	bgeu	r2,r3,80045dc <_malloc_r+0x5e8>
 80044bc:	00801504 	movi	r2,84
 80044c0:	10c06836 	bltu	r2,r3,8004664 <_malloc_r+0x670>
 80044c4:	8806d33a 	srli	r3,r17,12
 80044c8:	19c01b84 	addi	r7,r3,110
 80044cc:	39cb883a 	add	r5,r7,r7
 80044d0:	003f0c06 	br	8004104 <__alt_data_end+0xfc004104>
 80044d4:	3804d27a 	srli	r2,r7,9
 80044d8:	01000104 	movi	r4,4
 80044dc:	2080422e 	bgeu	r4,r2,80045e8 <_malloc_r+0x5f4>
 80044e0:	01000504 	movi	r4,20
 80044e4:	20807c36 	bltu	r4,r2,80046d8 <_malloc_r+0x6e4>
 80044e8:	110016c4 	addi	r4,r2,91
 80044ec:	210b883a 	add	r5,r4,r4
 80044f0:	294b883a 	add	r5,r5,r5
 80044f4:	294b883a 	add	r5,r5,r5
 80044f8:	994b883a 	add	r5,r19,r5
 80044fc:	28800217 	ldw	r2,8(r5)
 8004500:	020200b4 	movhi	r8,2050
 8004504:	42012d04 	addi	r8,r8,1204
 8004508:	11406326 	beq	r2,r5,8004698 <_malloc_r+0x6a4>
 800450c:	01bfff04 	movi	r6,-4
 8004510:	11000117 	ldw	r4,4(r2)
 8004514:	2188703a 	and	r4,r4,r6
 8004518:	3900022e 	bgeu	r7,r4,8004524 <_malloc_r+0x530>
 800451c:	10800217 	ldw	r2,8(r2)
 8004520:	28bffb1e 	bne	r5,r2,8004510 <__alt_data_end+0xfc004510>
 8004524:	11800317 	ldw	r6,12(r2)
 8004528:	99000117 	ldw	r4,4(r19)
 800452c:	81800315 	stw	r6,12(r16)
 8004530:	80800215 	stw	r2,8(r16)
 8004534:	34000215 	stw	r16,8(r6)
 8004538:	14000315 	stw	r16,12(r2)
 800453c:	003f2706 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004540:	88c00054 	ori	r3,r17,1
 8004544:	80c00115 	stw	r3,4(r16)
 8004548:	8463883a 	add	r17,r16,r17
 800454c:	34400515 	stw	r17,20(r6)
 8004550:	34400415 	stw	r17,16(r6)
 8004554:	10c00054 	ori	r3,r2,1
 8004558:	8a400315 	stw	r9,12(r17)
 800455c:	8a400215 	stw	r9,8(r17)
 8004560:	88c00115 	stw	r3,4(r17)
 8004564:	88a3883a 	add	r17,r17,r2
 8004568:	88800015 	stw	r2,0(r17)
 800456c:	9009883a 	mov	r4,r18
 8004570:	80133f80 	call	80133f8 <__malloc_unlock>
 8004574:	80800204 	addi	r2,r16,8
 8004578:	003ecb06 	br	80040a8 <__alt_data_end+0xfc0040a8>
 800457c:	31000117 	ldw	r4,4(r6)
 8004580:	003f1606 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004584:	63000044 	addi	r12,r12,1
 8004588:	608000cc 	andi	r2,r12,3
 800458c:	5ac00204 	addi	r11,r11,8
 8004590:	103f2a1e 	bne	r2,zero,800423c <__alt_data_end+0xfc00423c>
 8004594:	00002106 	br	800461c <_malloc_r+0x628>
 8004598:	80800204 	addi	r2,r16,8
 800459c:	84000517 	ldw	r16,20(r16)
 80045a0:	143eb31e 	bne	r2,r16,8004070 <__alt_data_end+0xfc004070>
 80045a4:	18c00084 	addi	r3,r3,2
 80045a8:	003eec06 	br	800415c <__alt_data_end+0xfc00415c>
 80045ac:	8085883a 	add	r2,r16,r2
 80045b0:	10c00117 	ldw	r3,4(r2)
 80045b4:	81000317 	ldw	r4,12(r16)
 80045b8:	81400217 	ldw	r5,8(r16)
 80045bc:	18c00054 	ori	r3,r3,1
 80045c0:	10c00115 	stw	r3,4(r2)
 80045c4:	29000315 	stw	r4,12(r5)
 80045c8:	21400215 	stw	r5,8(r4)
 80045cc:	9009883a 	mov	r4,r18
 80045d0:	80133f80 	call	80133f8 <__malloc_unlock>
 80045d4:	80800204 	addi	r2,r16,8
 80045d8:	003eb306 	br	80040a8 <__alt_data_end+0xfc0040a8>
 80045dc:	19c016c4 	addi	r7,r3,91
 80045e0:	39cb883a 	add	r5,r7,r7
 80045e4:	003ec706 	br	8004104 <__alt_data_end+0xfc004104>
 80045e8:	3804d1ba 	srli	r2,r7,6
 80045ec:	11000e04 	addi	r4,r2,56
 80045f0:	210b883a 	add	r5,r4,r4
 80045f4:	003fbe06 	br	80044f0 <__alt_data_end+0xfc0044f0>
 80045f8:	84ff5d26 	beq	r16,r19,8004370 <__alt_data_end+0xfc004370>
 80045fc:	9c000217 	ldw	r16,8(r19)
 8004600:	00bfff04 	movi	r2,-4
 8004604:	80c00117 	ldw	r3,4(r16)
 8004608:	1886703a 	and	r3,r3,r2
 800460c:	003f9706 	br	800446c <__alt_data_end+0xfc00446c>
 8004610:	52800017 	ldw	r10,0(r10)
 8004614:	18ffffc4 	addi	r3,r3,-1
 8004618:	50805c1e 	bne	r10,r2,800478c <_malloc_r+0x798>
 800461c:	190000cc 	andi	r4,r3,3
 8004620:	50bffe04 	addi	r2,r10,-8
 8004624:	203ffa1e 	bne	r4,zero,8004610 <__alt_data_end+0xfc004610>
 8004628:	98800117 	ldw	r2,4(r19)
 800462c:	0146303a 	nor	r3,zero,r5
 8004630:	1884703a 	and	r2,r3,r2
 8004634:	98800115 	stw	r2,4(r19)
 8004638:	294b883a 	add	r5,r5,r5
 800463c:	117f2e36 	bltu	r2,r5,80042f8 <__alt_data_end+0xfc0042f8>
 8004640:	283f2d26 	beq	r5,zero,80042f8 <__alt_data_end+0xfc0042f8>
 8004644:	1146703a 	and	r3,r2,r5
 8004648:	1800521e 	bne	r3,zero,8004794 <_malloc_r+0x7a0>
 800464c:	6007883a 	mov	r3,r12
 8004650:	294b883a 	add	r5,r5,r5
 8004654:	1148703a 	and	r4,r2,r5
 8004658:	18c00104 	addi	r3,r3,4
 800465c:	203ffc26 	beq	r4,zero,8004650 <__alt_data_end+0xfc004650>
 8004660:	003ef006 	br	8004224 <__alt_data_end+0xfc004224>
 8004664:	00805504 	movi	r2,340
 8004668:	10c01336 	bltu	r2,r3,80046b8 <_malloc_r+0x6c4>
 800466c:	8806d3fa 	srli	r3,r17,15
 8004670:	19c01dc4 	addi	r7,r3,119
 8004674:	39cb883a 	add	r5,r7,r7
 8004678:	003ea206 	br	8004104 <__alt_data_end+0xfc004104>
 800467c:	00c40004 	movi	r3,4096
 8004680:	003f4d06 	br	80043b8 <__alt_data_end+0xfc0043b8>
 8004684:	00800044 	movi	r2,1
 8004688:	a0800115 	stw	r2,4(r20)
 800468c:	a021883a 	mov	r16,r20
 8004690:	0007883a 	mov	r3,zero
 8004694:	003f7506 	br	800446c <__alt_data_end+0xfc00446c>
 8004698:	200bd0ba 	srai	r5,r4,2
 800469c:	01800044 	movi	r6,1
 80046a0:	41000117 	ldw	r4,4(r8)
 80046a4:	314a983a 	sll	r5,r6,r5
 80046a8:	100d883a 	mov	r6,r2
 80046ac:	2908b03a 	or	r4,r5,r4
 80046b0:	41000115 	stw	r4,4(r8)
 80046b4:	003f9d06 	br	800452c <__alt_data_end+0xfc00452c>
 80046b8:	00815504 	movi	r2,1364
 80046bc:	10c01336 	bltu	r2,r3,800470c <_malloc_r+0x718>
 80046c0:	8806d4ba 	srli	r3,r17,18
 80046c4:	19c01f04 	addi	r7,r3,124
 80046c8:	39cb883a 	add	r5,r7,r7
 80046cc:	003e8d06 	br	8004104 <__alt_data_end+0xfc004104>
 80046d0:	ad400404 	addi	r21,r21,16
 80046d4:	003f1d06 	br	800434c <__alt_data_end+0xfc00434c>
 80046d8:	01001504 	movi	r4,84
 80046dc:	20801c36 	bltu	r4,r2,8004750 <_malloc_r+0x75c>
 80046e0:	3804d33a 	srli	r2,r7,12
 80046e4:	11001b84 	addi	r4,r2,110
 80046e8:	210b883a 	add	r5,r4,r4
 80046ec:	003f8006 	br	80044f0 <__alt_data_end+0xfc0044f0>
 80046f0:	3083ffcc 	andi	r2,r6,4095
 80046f4:	103f241e 	bne	r2,zero,8004388 <__alt_data_end+0xfc004388>
 80046f8:	99000217 	ldw	r4,8(r19)
 80046fc:	ad85883a 	add	r2,r21,r22
 8004700:	10800054 	ori	r2,r2,1
 8004704:	20800115 	stw	r2,4(r4)
 8004708:	003f4a06 	br	8004434 <__alt_data_end+0xfc004434>
 800470c:	01403f04 	movi	r5,252
 8004710:	01c01f84 	movi	r7,126
 8004714:	003e7b06 	br	8004104 <__alt_data_end+0xfc004104>
 8004718:	00c00044 	movi	r3,1
 800471c:	002b883a 	mov	r21,zero
 8004720:	003f3006 	br	80043e4 <__alt_data_end+0xfc0043e4>
 8004724:	008200b4 	movhi	r2,2050
 8004728:	1087e304 	addi	r2,r2,8076
 800472c:	15000015 	stw	r20,0(r2)
 8004730:	003f1b06 	br	80043a0 <__alt_data_end+0xfc0043a0>
 8004734:	9009883a 	mov	r4,r18
 8004738:	81400204 	addi	r5,r16,8
 800473c:	800abc40 	call	800abc4 <_free_r>
 8004740:	008200b4 	movhi	r2,2050
 8004744:	108eca04 	addi	r2,r2,15144
 8004748:	10c00017 	ldw	r3,0(r2)
 800474c:	003f3906 	br	8004434 <__alt_data_end+0xfc004434>
 8004750:	01005504 	movi	r4,340
 8004754:	20800436 	bltu	r4,r2,8004768 <_malloc_r+0x774>
 8004758:	3804d3fa 	srli	r2,r7,15
 800475c:	11001dc4 	addi	r4,r2,119
 8004760:	210b883a 	add	r5,r4,r4
 8004764:	003f6206 	br	80044f0 <__alt_data_end+0xfc0044f0>
 8004768:	01015504 	movi	r4,1364
 800476c:	20800436 	bltu	r4,r2,8004780 <_malloc_r+0x78c>
 8004770:	3804d4ba 	srli	r2,r7,18
 8004774:	11001f04 	addi	r4,r2,124
 8004778:	210b883a 	add	r5,r4,r4
 800477c:	003f5c06 	br	80044f0 <__alt_data_end+0xfc0044f0>
 8004780:	01403f04 	movi	r5,252
 8004784:	01001f84 	movi	r4,126
 8004788:	003f5906 	br	80044f0 <__alt_data_end+0xfc0044f0>
 800478c:	98800117 	ldw	r2,4(r19)
 8004790:	003fa906 	br	8004638 <__alt_data_end+0xfc004638>
 8004794:	6007883a 	mov	r3,r12
 8004798:	003ea206 	br	8004224 <__alt_data_end+0xfc004224>

0800479c <_printf_r>:
 800479c:	defffd04 	addi	sp,sp,-12
 80047a0:	dfc00015 	stw	ra,0(sp)
 80047a4:	d9800115 	stw	r6,4(sp)
 80047a8:	d9c00215 	stw	r7,8(sp)
 80047ac:	280d883a 	mov	r6,r5
 80047b0:	21400217 	ldw	r5,8(r4)
 80047b4:	d9c00104 	addi	r7,sp,4
 80047b8:	8006a300 	call	8006a30 <___vfprintf_internal_r>
 80047bc:	dfc00017 	ldw	ra,0(sp)
 80047c0:	dec00304 	addi	sp,sp,12
 80047c4:	f800283a 	ret

080047c8 <printf>:
 80047c8:	defffc04 	addi	sp,sp,-16
 80047cc:	dfc00015 	stw	ra,0(sp)
 80047d0:	d9400115 	stw	r5,4(sp)
 80047d4:	d9800215 	stw	r6,8(sp)
 80047d8:	d9c00315 	stw	r7,12(sp)
 80047dc:	008200b4 	movhi	r2,2050
 80047e0:	1087e604 	addi	r2,r2,8088
 80047e4:	10800017 	ldw	r2,0(r2)
 80047e8:	200b883a 	mov	r5,r4
 80047ec:	d9800104 	addi	r6,sp,4
 80047f0:	11000217 	ldw	r4,8(r2)
 80047f4:	8008a2c0 	call	8008a2c <__vfprintf_internal>
 80047f8:	dfc00017 	ldw	ra,0(sp)
 80047fc:	dec00404 	addi	sp,sp,16
 8004800:	f800283a 	ret

08004804 <_putchar_r>:
 8004804:	21800217 	ldw	r6,8(r4)
 8004808:	800cb8c1 	jmpi	800cb8c <_putc_r>

0800480c <putchar>:
 800480c:	008200b4 	movhi	r2,2050
 8004810:	1087e604 	addi	r2,r2,8088
 8004814:	200b883a 	mov	r5,r4
 8004818:	11000017 	ldw	r4,0(r2)
 800481c:	21800217 	ldw	r6,8(r4)
 8004820:	800cb8c1 	jmpi	800cb8c <_putc_r>

08004824 <_puts_r>:
 8004824:	defff604 	addi	sp,sp,-40
 8004828:	dc000715 	stw	r16,28(sp)
 800482c:	2021883a 	mov	r16,r4
 8004830:	2809883a 	mov	r4,r5
 8004834:	dc400815 	stw	r17,32(sp)
 8004838:	dfc00915 	stw	ra,36(sp)
 800483c:	2823883a 	mov	r17,r5
 8004840:	8004a080 	call	8004a08 <strlen>
 8004844:	00c200b4 	movhi	r3,2050
 8004848:	18c7e604 	addi	r3,r3,8088
 800484c:	18c00017 	ldw	r3,0(r3)
 8004850:	11000044 	addi	r4,r2,1
 8004854:	d8800115 	stw	r2,4(sp)
 8004858:	18c00217 	ldw	r3,8(r3)
 800485c:	014200b4 	movhi	r5,2050
 8004860:	29409704 	addi	r5,r5,604
 8004864:	1880030b 	ldhu	r2,12(r3)
 8004868:	d9400215 	stw	r5,8(sp)
 800486c:	d9000615 	stw	r4,24(sp)
 8004870:	01400044 	movi	r5,1
 8004874:	01000084 	movi	r4,2
 8004878:	d9000515 	stw	r4,20(sp)
 800487c:	dc400015 	stw	r17,0(sp)
 8004880:	d9400315 	stw	r5,12(sp)
 8004884:	dec00415 	stw	sp,16(sp)
 8004888:	1108000c 	andi	r4,r2,8192
 800488c:	2000061e 	bne	r4,zero,80048a8 <_puts_r+0x84>
 8004890:	19401917 	ldw	r5,100(r3)
 8004894:	0137ffc4 	movi	r4,-8193
 8004898:	10880014 	ori	r2,r2,8192
 800489c:	2908703a 	and	r4,r5,r4
 80048a0:	1880030d 	sth	r2,12(r3)
 80048a4:	19001915 	stw	r4,100(r3)
 80048a8:	81400217 	ldw	r5,8(r16)
 80048ac:	8009883a 	mov	r4,r16
 80048b0:	d9800404 	addi	r6,sp,16
 80048b4:	800aeb40 	call	800aeb4 <__sfvwrite_r>
 80048b8:	1000061e 	bne	r2,zero,80048d4 <_puts_r+0xb0>
 80048bc:	00800284 	movi	r2,10
 80048c0:	dfc00917 	ldw	ra,36(sp)
 80048c4:	dc400817 	ldw	r17,32(sp)
 80048c8:	dc000717 	ldw	r16,28(sp)
 80048cc:	dec00a04 	addi	sp,sp,40
 80048d0:	f800283a 	ret
 80048d4:	00bfffc4 	movi	r2,-1
 80048d8:	003ff906 	br	80048c0 <__alt_data_end+0xfc0048c0>

080048dc <puts>:
 80048dc:	008200b4 	movhi	r2,2050
 80048e0:	1087e604 	addi	r2,r2,8088
 80048e4:	200b883a 	mov	r5,r4
 80048e8:	11000017 	ldw	r4,0(r2)
 80048ec:	80048241 	jmpi	8004824 <_puts_r>

080048f0 <_sbrk_r>:
 80048f0:	defffd04 	addi	sp,sp,-12
 80048f4:	dc000015 	stw	r16,0(sp)
 80048f8:	040200b4 	movhi	r16,2050
 80048fc:	dc400115 	stw	r17,4(sp)
 8004900:	840ebe04 	addi	r16,r16,15096
 8004904:	2023883a 	mov	r17,r4
 8004908:	2809883a 	mov	r4,r5
 800490c:	dfc00215 	stw	ra,8(sp)
 8004910:	80000015 	stw	zero,0(r16)
 8004914:	80135c40 	call	80135c4 <sbrk>
 8004918:	00ffffc4 	movi	r3,-1
 800491c:	10c00526 	beq	r2,r3,8004934 <_sbrk_r+0x44>
 8004920:	dfc00217 	ldw	ra,8(sp)
 8004924:	dc400117 	ldw	r17,4(sp)
 8004928:	dc000017 	ldw	r16,0(sp)
 800492c:	dec00304 	addi	sp,sp,12
 8004930:	f800283a 	ret
 8004934:	80c00017 	ldw	r3,0(r16)
 8004938:	183ff926 	beq	r3,zero,8004920 <__alt_data_end+0xfc004920>
 800493c:	88c00015 	stw	r3,0(r17)
 8004940:	003ff706 	br	8004920 <__alt_data_end+0xfc004920>

08004944 <_sprintf_r>:
 8004944:	deffe404 	addi	sp,sp,-112
 8004948:	2807883a 	mov	r3,r5
 800494c:	dfc01a15 	stw	ra,104(sp)
 8004950:	d9c01b15 	stw	r7,108(sp)
 8004954:	00a00034 	movhi	r2,32768
 8004958:	10bfffc4 	addi	r2,r2,-1
 800495c:	02008204 	movi	r8,520
 8004960:	d8800215 	stw	r2,8(sp)
 8004964:	d8800515 	stw	r2,20(sp)
 8004968:	d80b883a 	mov	r5,sp
 800496c:	d9c01b04 	addi	r7,sp,108
 8004970:	00bfffc4 	movi	r2,-1
 8004974:	d8c00015 	stw	r3,0(sp)
 8004978:	d8c00415 	stw	r3,16(sp)
 800497c:	da00030d 	sth	r8,12(sp)
 8004980:	d880038d 	sth	r2,14(sp)
 8004984:	8004aa00 	call	8004aa0 <___svfprintf_internal_r>
 8004988:	d8c00017 	ldw	r3,0(sp)
 800498c:	18000005 	stb	zero,0(r3)
 8004990:	dfc01a17 	ldw	ra,104(sp)
 8004994:	dec01c04 	addi	sp,sp,112
 8004998:	f800283a 	ret

0800499c <sprintf>:
 800499c:	deffe304 	addi	sp,sp,-116
 80049a0:	2007883a 	mov	r3,r4
 80049a4:	dfc01a15 	stw	ra,104(sp)
 80049a8:	d9801b15 	stw	r6,108(sp)
 80049ac:	d9c01c15 	stw	r7,112(sp)
 80049b0:	010200b4 	movhi	r4,2050
 80049b4:	2107e604 	addi	r4,r4,8088
 80049b8:	21000017 	ldw	r4,0(r4)
 80049bc:	00a00034 	movhi	r2,32768
 80049c0:	10bfffc4 	addi	r2,r2,-1
 80049c4:	280d883a 	mov	r6,r5
 80049c8:	02008204 	movi	r8,520
 80049cc:	d8800215 	stw	r2,8(sp)
 80049d0:	d8800515 	stw	r2,20(sp)
 80049d4:	d80b883a 	mov	r5,sp
 80049d8:	d9c01b04 	addi	r7,sp,108
 80049dc:	00bfffc4 	movi	r2,-1
 80049e0:	d8c00015 	stw	r3,0(sp)
 80049e4:	d8c00415 	stw	r3,16(sp)
 80049e8:	da00030d 	sth	r8,12(sp)
 80049ec:	d880038d 	sth	r2,14(sp)
 80049f0:	8004aa00 	call	8004aa0 <___svfprintf_internal_r>
 80049f4:	d8c00017 	ldw	r3,0(sp)
 80049f8:	18000005 	stb	zero,0(r3)
 80049fc:	dfc01a17 	ldw	ra,104(sp)
 8004a00:	dec01d04 	addi	sp,sp,116
 8004a04:	f800283a 	ret

08004a08 <strlen>:
 8004a08:	208000cc 	andi	r2,r4,3
 8004a0c:	10002026 	beq	r2,zero,8004a90 <strlen+0x88>
 8004a10:	20800007 	ldb	r2,0(r4)
 8004a14:	10002026 	beq	r2,zero,8004a98 <strlen+0x90>
 8004a18:	2005883a 	mov	r2,r4
 8004a1c:	00000206 	br	8004a28 <strlen+0x20>
 8004a20:	10c00007 	ldb	r3,0(r2)
 8004a24:	18001826 	beq	r3,zero,8004a88 <strlen+0x80>
 8004a28:	10800044 	addi	r2,r2,1
 8004a2c:	10c000cc 	andi	r3,r2,3
 8004a30:	183ffb1e 	bne	r3,zero,8004a20 <__alt_data_end+0xfc004a20>
 8004a34:	10c00017 	ldw	r3,0(r2)
 8004a38:	01ffbff4 	movhi	r7,65279
 8004a3c:	39ffbfc4 	addi	r7,r7,-257
 8004a40:	00ca303a 	nor	r5,zero,r3
 8004a44:	01a02074 	movhi	r6,32897
 8004a48:	19c7883a 	add	r3,r3,r7
 8004a4c:	31a02004 	addi	r6,r6,-32640
 8004a50:	1946703a 	and	r3,r3,r5
 8004a54:	1986703a 	and	r3,r3,r6
 8004a58:	1800091e 	bne	r3,zero,8004a80 <strlen+0x78>
 8004a5c:	10800104 	addi	r2,r2,4
 8004a60:	10c00017 	ldw	r3,0(r2)
 8004a64:	19cb883a 	add	r5,r3,r7
 8004a68:	00c6303a 	nor	r3,zero,r3
 8004a6c:	28c6703a 	and	r3,r5,r3
 8004a70:	1986703a 	and	r3,r3,r6
 8004a74:	183ff926 	beq	r3,zero,8004a5c <__alt_data_end+0xfc004a5c>
 8004a78:	00000106 	br	8004a80 <strlen+0x78>
 8004a7c:	10800044 	addi	r2,r2,1
 8004a80:	10c00007 	ldb	r3,0(r2)
 8004a84:	183ffd1e 	bne	r3,zero,8004a7c <__alt_data_end+0xfc004a7c>
 8004a88:	1105c83a 	sub	r2,r2,r4
 8004a8c:	f800283a 	ret
 8004a90:	2005883a 	mov	r2,r4
 8004a94:	003fe706 	br	8004a34 <__alt_data_end+0xfc004a34>
 8004a98:	0005883a 	mov	r2,zero
 8004a9c:	f800283a 	ret

08004aa0 <___svfprintf_internal_r>:
 8004aa0:	deffb504 	addi	sp,sp,-300
 8004aa4:	dfc04a15 	stw	ra,296(sp)
 8004aa8:	ddc04815 	stw	r23,288(sp)
 8004aac:	d9002f15 	stw	r4,188(sp)
 8004ab0:	282f883a 	mov	r23,r5
 8004ab4:	d9802915 	stw	r6,164(sp)
 8004ab8:	d9c02d15 	stw	r7,180(sp)
 8004abc:	df004915 	stw	fp,292(sp)
 8004ac0:	dd804715 	stw	r22,284(sp)
 8004ac4:	dd404615 	stw	r21,280(sp)
 8004ac8:	dd004515 	stw	r20,276(sp)
 8004acc:	dcc04415 	stw	r19,272(sp)
 8004ad0:	dc804315 	stw	r18,268(sp)
 8004ad4:	dc404215 	stw	r17,264(sp)
 8004ad8:	dc004115 	stw	r16,260(sp)
 8004adc:	800b5740 	call	800b574 <_localeconv_r>
 8004ae0:	10800017 	ldw	r2,0(r2)
 8004ae4:	1009883a 	mov	r4,r2
 8004ae8:	d8803515 	stw	r2,212(sp)
 8004aec:	8004a080 	call	8004a08 <strlen>
 8004af0:	d8803915 	stw	r2,228(sp)
 8004af4:	b880030b 	ldhu	r2,12(r23)
 8004af8:	1080200c 	andi	r2,r2,128
 8004afc:	10000226 	beq	r2,zero,8004b08 <___svfprintf_internal_r+0x68>
 8004b00:	b8800417 	ldw	r2,16(r23)
 8004b04:	10065d26 	beq	r2,zero,800647c <___svfprintf_internal_r+0x19dc>
 8004b08:	db001dc4 	addi	r12,sp,119
 8004b0c:	dd801e04 	addi	r22,sp,120
 8004b10:	d8800404 	addi	r2,sp,16
 8004b14:	050200b4 	movhi	r20,2050
 8004b18:	b317c83a 	sub	r11,r22,r12
 8004b1c:	a500a884 	addi	r20,r20,674
 8004b20:	db002815 	stw	r12,160(sp)
 8004b24:	d8801e15 	stw	r2,120(sp)
 8004b28:	d8002015 	stw	zero,128(sp)
 8004b2c:	d8001f15 	stw	zero,124(sp)
 8004b30:	d8003315 	stw	zero,204(sp)
 8004b34:	d8003715 	stw	zero,220(sp)
 8004b38:	d8003815 	stw	zero,224(sp)
 8004b3c:	d8003b15 	stw	zero,236(sp)
 8004b40:	d8003a15 	stw	zero,232(sp)
 8004b44:	d8003015 	stw	zero,192(sp)
 8004b48:	1011883a 	mov	r8,r2
 8004b4c:	dac03d15 	stw	r11,244(sp)
 8004b50:	db002917 	ldw	r12,164(sp)
 8004b54:	60800007 	ldb	r2,0(r12)
 8004b58:	1000ab26 	beq	r2,zero,8004e08 <___svfprintf_internal_r+0x368>
 8004b5c:	00c00944 	movi	r3,37
 8004b60:	10c0a926 	beq	r2,r3,8004e08 <___svfprintf_internal_r+0x368>
 8004b64:	6021883a 	mov	r16,r12
 8004b68:	00000106 	br	8004b70 <___svfprintf_internal_r+0xd0>
 8004b6c:	10c08426 	beq	r2,r3,8004d80 <___svfprintf_internal_r+0x2e0>
 8004b70:	84000044 	addi	r16,r16,1
 8004b74:	80800007 	ldb	r2,0(r16)
 8004b78:	103ffc1e 	bne	r2,zero,8004b6c <__alt_data_end+0xfc004b6c>
 8004b7c:	dac02917 	ldw	r11,164(sp)
 8004b80:	82e3c83a 	sub	r17,r16,r11
 8004b84:	88000f26 	beq	r17,zero,8004bc4 <___svfprintf_internal_r+0x124>
 8004b88:	d8c02017 	ldw	r3,128(sp)
 8004b8c:	d8801f17 	ldw	r2,124(sp)
 8004b90:	dac02917 	ldw	r11,164(sp)
 8004b94:	1c47883a 	add	r3,r3,r17
 8004b98:	10800044 	addi	r2,r2,1
 8004b9c:	d8c02015 	stw	r3,128(sp)
 8004ba0:	42c00015 	stw	r11,0(r8)
 8004ba4:	44400115 	stw	r17,4(r8)
 8004ba8:	d8801f15 	stw	r2,124(sp)
 8004bac:	00c001c4 	movi	r3,7
 8004bb0:	18807616 	blt	r3,r2,8004d8c <___svfprintf_internal_r+0x2ec>
 8004bb4:	42000204 	addi	r8,r8,8
 8004bb8:	db003017 	ldw	r12,192(sp)
 8004bbc:	6459883a 	add	r12,r12,r17
 8004bc0:	db003015 	stw	r12,192(sp)
 8004bc4:	80800007 	ldb	r2,0(r16)
 8004bc8:	10007726 	beq	r2,zero,8004da8 <___svfprintf_internal_r+0x308>
 8004bcc:	80800044 	addi	r2,r16,1
 8004bd0:	84000047 	ldb	r16,1(r16)
 8004bd4:	d8002785 	stb	zero,158(sp)
 8004bd8:	000d883a 	mov	r6,zero
 8004bdc:	027fffc4 	movi	r9,-1
 8004be0:	d8002e15 	stw	zero,184(sp)
 8004be4:	0023883a 	mov	r17,zero
 8004be8:	01001604 	movi	r4,88
 8004bec:	01400244 	movi	r5,9
 8004bf0:	02800a84 	movi	r10,42
 8004bf4:	01c01b04 	movi	r7,108
 8004bf8:	10c00044 	addi	r3,r2,1
 8004bfc:	80bff804 	addi	r2,r16,-32
 8004c00:	2082e436 	bltu	r4,r2,8005794 <___svfprintf_internal_r+0xcf4>
 8004c04:	100490ba 	slli	r2,r2,2
 8004c08:	02c20034 	movhi	r11,2048
 8004c0c:	5ad30704 	addi	r11,r11,19484
 8004c10:	12c5883a 	add	r2,r2,r11
 8004c14:	10800017 	ldw	r2,0(r2)
 8004c18:	1000683a 	jmp	r2
 8004c1c:	0800554c 	andi	zero,at,341
 8004c20:	08005794 	ori	zero,at,350
 8004c24:	08005794 	ori	zero,at,350
 8004c28:	080056cc 	andi	zero,at,347
 8004c2c:	08005794 	ori	zero,at,350
 8004c30:	08005794 	ori	zero,at,350
 8004c34:	08005794 	ori	zero,at,350
 8004c38:	08005794 	ori	zero,at,350
 8004c3c:	08005794 	ori	zero,at,350
 8004c40:	08005794 	ori	zero,at,350
 8004c44:	08005690 	cmplti	zero,at,346
 8004c48:	080056bc 	xorhi	zero,at,346
 8004c4c:	08005794 	ori	zero,at,350
 8004c50:	08004e10 	cmplti	zero,at,312
 8004c54:	08004e20 	cmpeqi	zero,at,312
 8004c58:	08005794 	ori	zero,at,350
 8004c5c:	08004e60 	cmpeqi	zero,at,313
 8004c60:	08004e70 	cmpltui	zero,at,313
 8004c64:	08004e70 	cmpltui	zero,at,313
 8004c68:	08004e70 	cmpltui	zero,at,313
 8004c6c:	08004e70 	cmpltui	zero,at,313
 8004c70:	08004e70 	cmpltui	zero,at,313
 8004c74:	08004e70 	cmpltui	zero,at,313
 8004c78:	08004e70 	cmpltui	zero,at,313
 8004c7c:	08004e70 	cmpltui	zero,at,313
 8004c80:	08004e70 	cmpltui	zero,at,313
 8004c84:	08005794 	ori	zero,at,350
 8004c88:	08005794 	ori	zero,at,350
 8004c8c:	08005794 	ori	zero,at,350
 8004c90:	08005794 	ori	zero,at,350
 8004c94:	08005794 	ori	zero,at,350
 8004c98:	08005794 	ori	zero,at,350
 8004c9c:	08005794 	ori	zero,at,350
 8004ca0:	08005794 	ori	zero,at,350
 8004ca4:	08005794 	ori	zero,at,350
 8004ca8:	08005794 	ori	zero,at,350
 8004cac:	08004ea4 	muli	zero,at,314
 8004cb0:	08005390 	cmplti	zero,at,334
 8004cb4:	08005794 	ori	zero,at,350
 8004cb8:	08005390 	cmplti	zero,at,334
 8004cbc:	08005794 	ori	zero,at,350
 8004cc0:	08005794 	ori	zero,at,350
 8004cc4:	08005794 	ori	zero,at,350
 8004cc8:	08005794 	ori	zero,at,350
 8004ccc:	0800547c 	xorhi	zero,at,337
 8004cd0:	08005794 	ori	zero,at,350
 8004cd4:	08005794 	ori	zero,at,350
 8004cd8:	08005324 	muli	zero,at,332
 8004cdc:	08005794 	ori	zero,at,350
 8004ce0:	08005794 	ori	zero,at,350
 8004ce4:	08005794 	ori	zero,at,350
 8004ce8:	08005794 	ori	zero,at,350
 8004cec:	08005794 	ori	zero,at,350
 8004cf0:	08005360 	cmpeqi	zero,at,333
 8004cf4:	08005794 	ori	zero,at,350
 8004cf8:	08005794 	ori	zero,at,350
 8004cfc:	0800556c 	andhi	zero,at,341
 8004d00:	08005794 	ori	zero,at,350
 8004d04:	08005794 	ori	zero,at,350
 8004d08:	08005794 	ori	zero,at,350
 8004d0c:	08005794 	ori	zero,at,350
 8004d10:	08005794 	ori	zero,at,350
 8004d14:	08005794 	ori	zero,at,350
 8004d18:	08005794 	ori	zero,at,350
 8004d1c:	08005794 	ori	zero,at,350
 8004d20:	08005794 	ori	zero,at,350
 8004d24:	08005794 	ori	zero,at,350
 8004d28:	08005650 	cmplti	zero,at,345
 8004d2c:	0800548c 	andi	zero,at,338
 8004d30:	08005390 	cmplti	zero,at,334
 8004d34:	08005390 	cmplti	zero,at,334
 8004d38:	08005390 	cmplti	zero,at,334
 8004d3c:	080054f4 	orhi	zero,at,339
 8004d40:	0800548c 	andi	zero,at,338
 8004d44:	08005794 	ori	zero,at,350
 8004d48:	08005794 	ori	zero,at,350
 8004d4c:	08005504 	addi	zero,at,340
 8004d50:	08005794 	ori	zero,at,350
 8004d54:	08005518 	cmpnei	zero,at,340
 8004d58:	08005758 	cmpnei	zero,at,349
 8004d5c:	08005434 	orhi	zero,at,336
 8004d60:	08005640 	call	800564 <__alt_mem_sdram-0x77ffa9c>
 8004d64:	08005794 	ori	zero,at,350
 8004d68:	080055c8 	cmpgei	zero,at,343
 8004d6c:	08005794 	ori	zero,at,350
 8004d70:	0800571c 	xori	zero,at,348
 8004d74:	08005794 	ori	zero,at,350
 8004d78:	08005794 	ori	zero,at,350
 8004d7c:	080056dc 	xori	zero,at,347
 8004d80:	db002917 	ldw	r12,164(sp)
 8004d84:	8323c83a 	sub	r17,r16,r12
 8004d88:	003f7e06 	br	8004b84 <__alt_data_end+0xfc004b84>
 8004d8c:	d9002f17 	ldw	r4,188(sp)
 8004d90:	b80b883a 	mov	r5,r23
 8004d94:	b00d883a 	mov	r6,r22
 8004d98:	800d4e80 	call	800d4e8 <__ssprint_r>
 8004d9c:	1000081e 	bne	r2,zero,8004dc0 <___svfprintf_internal_r+0x320>
 8004da0:	da000404 	addi	r8,sp,16
 8004da4:	003f8406 	br	8004bb8 <__alt_data_end+0xfc004bb8>
 8004da8:	d8802017 	ldw	r2,128(sp)
 8004dac:	10000426 	beq	r2,zero,8004dc0 <___svfprintf_internal_r+0x320>
 8004db0:	d9002f17 	ldw	r4,188(sp)
 8004db4:	b80b883a 	mov	r5,r23
 8004db8:	d9801e04 	addi	r6,sp,120
 8004dbc:	800d4e80 	call	800d4e8 <__ssprint_r>
 8004dc0:	b880030b 	ldhu	r2,12(r23)
 8004dc4:	1080100c 	andi	r2,r2,64
 8004dc8:	10000d1e 	bne	r2,zero,8004e00 <___svfprintf_internal_r+0x360>
 8004dcc:	d8803017 	ldw	r2,192(sp)
 8004dd0:	dfc04a17 	ldw	ra,296(sp)
 8004dd4:	df004917 	ldw	fp,292(sp)
 8004dd8:	ddc04817 	ldw	r23,288(sp)
 8004ddc:	dd804717 	ldw	r22,284(sp)
 8004de0:	dd404617 	ldw	r21,280(sp)
 8004de4:	dd004517 	ldw	r20,276(sp)
 8004de8:	dcc04417 	ldw	r19,272(sp)
 8004dec:	dc804317 	ldw	r18,268(sp)
 8004df0:	dc404217 	ldw	r17,264(sp)
 8004df4:	dc004117 	ldw	r16,260(sp)
 8004df8:	dec04b04 	addi	sp,sp,300
 8004dfc:	f800283a 	ret
 8004e00:	00bfffc4 	movi	r2,-1
 8004e04:	003ff206 	br	8004dd0 <__alt_data_end+0xfc004dd0>
 8004e08:	dc002917 	ldw	r16,164(sp)
 8004e0c:	003f6d06 	br	8004bc4 <__alt_data_end+0xfc004bc4>
 8004e10:	1805883a 	mov	r2,r3
 8004e14:	8c400114 	ori	r17,r17,4
 8004e18:	1c000007 	ldb	r16,0(r3)
 8004e1c:	003f7606 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 8004e20:	1c000007 	ldb	r16,0(r3)
 8004e24:	18800044 	addi	r2,r3,1
 8004e28:	8286e726 	beq	r16,r10,80069c8 <___svfprintf_internal_r+0x1f28>
 8004e2c:	82fff404 	addi	r11,r16,-48
 8004e30:	1007883a 	mov	r3,r2
 8004e34:	0013883a 	mov	r9,zero
 8004e38:	2aff7036 	bltu	r5,r11,8004bfc <__alt_data_end+0xfc004bfc>
 8004e3c:	1c000007 	ldb	r16,0(r3)
 8004e40:	4a4002a4 	muli	r9,r9,10
 8004e44:	18c00044 	addi	r3,r3,1
 8004e48:	5a53883a 	add	r9,r11,r9
 8004e4c:	82fff404 	addi	r11,r16,-48
 8004e50:	2afffa2e 	bgeu	r5,r11,8004e3c <__alt_data_end+0xfc004e3c>
 8004e54:	483f690e 	bge	r9,zero,8004bfc <__alt_data_end+0xfc004bfc>
 8004e58:	027fffc4 	movi	r9,-1
 8004e5c:	003f6706 	br	8004bfc <__alt_data_end+0xfc004bfc>
 8004e60:	8c402014 	ori	r17,r17,128
 8004e64:	1805883a 	mov	r2,r3
 8004e68:	1c000007 	ldb	r16,0(r3)
 8004e6c:	003f6206 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 8004e70:	1805883a 	mov	r2,r3
 8004e74:	d8002e15 	stw	zero,184(sp)
 8004e78:	82fff404 	addi	r11,r16,-48
 8004e7c:	0019883a 	mov	r12,zero
 8004e80:	14000007 	ldb	r16,0(r2)
 8004e84:	630002a4 	muli	r12,r12,10
 8004e88:	18c00044 	addi	r3,r3,1
 8004e8c:	1805883a 	mov	r2,r3
 8004e90:	62d9883a 	add	r12,r12,r11
 8004e94:	82fff404 	addi	r11,r16,-48
 8004e98:	2afff92e 	bgeu	r5,r11,8004e80 <__alt_data_end+0xfc004e80>
 8004e9c:	db002e15 	stw	r12,184(sp)
 8004ea0:	003f5606 	br	8004bfc <__alt_data_end+0xfc004bfc>
 8004ea4:	8c400414 	ori	r17,r17,16
 8004ea8:	d8c02915 	stw	r3,164(sp)
 8004eac:	d9802785 	stb	r6,158(sp)
 8004eb0:	8880080c 	andi	r2,r17,32
 8004eb4:	d8c02d17 	ldw	r3,180(sp)
 8004eb8:	10017926 	beq	r2,zero,80054a0 <___svfprintf_internal_r+0xa00>
 8004ebc:	db002d17 	ldw	r12,180(sp)
 8004ec0:	18800117 	ldw	r2,4(r3)
 8004ec4:	1cc00017 	ldw	r19,0(r3)
 8004ec8:	63000204 	addi	r12,r12,8
 8004ecc:	db002d15 	stw	r12,180(sp)
 8004ed0:	1039883a 	mov	fp,r2
 8004ed4:	10017d16 	blt	r2,zero,80054cc <___svfprintf_internal_r+0xa2c>
 8004ed8:	dd402783 	ldbu	r21,158(sp)
 8004edc:	da403215 	stw	r9,200(sp)
 8004ee0:	00800044 	movi	r2,1
 8004ee4:	9f06b03a 	or	r3,r19,fp
 8004ee8:	48000216 	blt	r9,zero,8004ef4 <___svfprintf_internal_r+0x454>
 8004eec:	013fdfc4 	movi	r4,-129
 8004ef0:	8922703a 	and	r17,r17,r4
 8004ef4:	1802371e 	bne	r3,zero,80057d4 <___svfprintf_internal_r+0xd34>
 8004ef8:	48034526 	beq	r9,zero,8005c10 <___svfprintf_internal_r+0x1170>
 8004efc:	10803fcc 	andi	r2,r2,255
 8004f00:	00c00044 	movi	r3,1
 8004f04:	10c25826 	beq	r2,r3,8005868 <___svfprintf_internal_r+0xdc8>
 8004f08:	00c00084 	movi	r3,2
 8004f0c:	10c2db26 	beq	r2,r3,8005a7c <___svfprintf_internal_r+0xfdc>
 8004f10:	b007883a 	mov	r3,r22
 8004f14:	9808d0fa 	srli	r4,r19,3
 8004f18:	e00a977a 	slli	r5,fp,29
 8004f1c:	e038d0fa 	srli	fp,fp,3
 8004f20:	9cc001cc 	andi	r19,r19,7
 8004f24:	98800c04 	addi	r2,r19,48
 8004f28:	18ffffc4 	addi	r3,r3,-1
 8004f2c:	2926b03a 	or	r19,r5,r4
 8004f30:	18800005 	stb	r2,0(r3)
 8004f34:	9f08b03a 	or	r4,r19,fp
 8004f38:	203ff61e 	bne	r4,zero,8004f14 <__alt_data_end+0xfc004f14>
 8004f3c:	8900004c 	andi	r4,r17,1
 8004f40:	d8c03115 	stw	r3,196(sp)
 8004f44:	2002db26 	beq	r4,zero,8005ab4 <___svfprintf_internal_r+0x1014>
 8004f48:	10803fcc 	andi	r2,r2,255
 8004f4c:	1080201c 	xori	r2,r2,128
 8004f50:	10bfe004 	addi	r2,r2,-128
 8004f54:	01000c04 	movi	r4,48
 8004f58:	11056626 	beq	r2,r4,80064f4 <___svfprintf_internal_r+0x1a54>
 8004f5c:	dac03117 	ldw	r11,196(sp)
 8004f60:	193fffc5 	stb	r4,-1(r3)
 8004f64:	5affffc4 	addi	r11,r11,-1
 8004f68:	dac03115 	stw	r11,196(sp)
 8004f6c:	b2e5c83a 	sub	r18,r22,r11
 8004f70:	9005883a 	mov	r2,r18
 8004f74:	9240010e 	bge	r18,r9,8004f7c <___svfprintf_internal_r+0x4dc>
 8004f78:	4805883a 	mov	r2,r9
 8004f7c:	d8802a15 	stw	r2,168(sp)
 8004f80:	d8003415 	stw	zero,208(sp)
 8004f84:	a8803fcc 	andi	r2,r21,255
 8004f88:	1080201c 	xori	r2,r2,128
 8004f8c:	10bfe004 	addi	r2,r2,-128
 8004f90:	10000326 	beq	r2,zero,8004fa0 <___svfprintf_internal_r+0x500>
 8004f94:	d8c02a17 	ldw	r3,168(sp)
 8004f98:	18c00044 	addi	r3,r3,1
 8004f9c:	d8c02a15 	stw	r3,168(sp)
 8004fa0:	8ac0008c 	andi	r11,r17,2
 8004fa4:	dac02b15 	stw	r11,172(sp)
 8004fa8:	58000326 	beq	r11,zero,8004fb8 <___svfprintf_internal_r+0x518>
 8004fac:	db002a17 	ldw	r12,168(sp)
 8004fb0:	63000084 	addi	r12,r12,2
 8004fb4:	db002a15 	stw	r12,168(sp)
 8004fb8:	88c0210c 	andi	r3,r17,132
 8004fbc:	d8c02c15 	stw	r3,176(sp)
 8004fc0:	1802021e 	bne	r3,zero,80057cc <___svfprintf_internal_r+0xd2c>
 8004fc4:	dac02e17 	ldw	r11,184(sp)
 8004fc8:	db002a17 	ldw	r12,168(sp)
 8004fcc:	5b39c83a 	sub	fp,r11,r12
 8004fd0:	0701fe0e 	bge	zero,fp,80057cc <___svfprintf_internal_r+0xd2c>
 8004fd4:	02400404 	movi	r9,16
 8004fd8:	d8c02017 	ldw	r3,128(sp)
 8004fdc:	d8801f17 	ldw	r2,124(sp)
 8004fe0:	4f057d0e 	bge	r9,fp,80065d8 <___svfprintf_internal_r+0x1b38>
 8004fe4:	014200b4 	movhi	r5,2050
 8004fe8:	e009883a 	mov	r4,fp
 8004fec:	2940ac84 	addi	r5,r5,690
 8004ff0:	dc003c15 	stw	r16,240(sp)
 8004ff4:	9039883a 	mov	fp,r18
 8004ff8:	d9403615 	stw	r5,216(sp)
 8004ffc:	8825883a 	mov	r18,r17
 8005000:	482b883a 	mov	r21,r9
 8005004:	04c001c4 	movi	r19,7
 8005008:	dc002f17 	ldw	r16,188(sp)
 800500c:	2023883a 	mov	r17,r4
 8005010:	00000306 	br	8005020 <___svfprintf_internal_r+0x580>
 8005014:	8c7ffc04 	addi	r17,r17,-16
 8005018:	42000204 	addi	r8,r8,8
 800501c:	ac40130e 	bge	r21,r17,800506c <___svfprintf_internal_r+0x5cc>
 8005020:	02c200b4 	movhi	r11,2050
 8005024:	18c00404 	addi	r3,r3,16
 8005028:	10800044 	addi	r2,r2,1
 800502c:	5ac0ac84 	addi	r11,r11,690
 8005030:	42c00015 	stw	r11,0(r8)
 8005034:	45400115 	stw	r21,4(r8)
 8005038:	d8c02015 	stw	r3,128(sp)
 800503c:	d8801f15 	stw	r2,124(sp)
 8005040:	98bff40e 	bge	r19,r2,8005014 <__alt_data_end+0xfc005014>
 8005044:	8009883a 	mov	r4,r16
 8005048:	b80b883a 	mov	r5,r23
 800504c:	b00d883a 	mov	r6,r22
 8005050:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005054:	103f5a1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005058:	8c7ffc04 	addi	r17,r17,-16
 800505c:	d8c02017 	ldw	r3,128(sp)
 8005060:	d8801f17 	ldw	r2,124(sp)
 8005064:	da000404 	addi	r8,sp,16
 8005068:	ac7fed16 	blt	r21,r17,8005020 <__alt_data_end+0xfc005020>
 800506c:	dc003c17 	ldw	r16,240(sp)
 8005070:	8809883a 	mov	r4,r17
 8005074:	9023883a 	mov	r17,r18
 8005078:	e025883a 	mov	r18,fp
 800507c:	2039883a 	mov	fp,r4
 8005080:	db003617 	ldw	r12,216(sp)
 8005084:	e0c7883a 	add	r3,fp,r3
 8005088:	10800044 	addi	r2,r2,1
 800508c:	43000015 	stw	r12,0(r8)
 8005090:	47000115 	stw	fp,4(r8)
 8005094:	d8c02015 	stw	r3,128(sp)
 8005098:	d8801f15 	stw	r2,124(sp)
 800509c:	010001c4 	movi	r4,7
 80050a0:	20833516 	blt	r4,r2,8005d78 <___svfprintf_internal_r+0x12d8>
 80050a4:	d8802787 	ldb	r2,158(sp)
 80050a8:	42000204 	addi	r8,r8,8
 80050ac:	10000c26 	beq	r2,zero,80050e0 <___svfprintf_internal_r+0x640>
 80050b0:	d8801f17 	ldw	r2,124(sp)
 80050b4:	d9002784 	addi	r4,sp,158
 80050b8:	18c00044 	addi	r3,r3,1
 80050bc:	10800044 	addi	r2,r2,1
 80050c0:	41000015 	stw	r4,0(r8)
 80050c4:	01000044 	movi	r4,1
 80050c8:	41000115 	stw	r4,4(r8)
 80050cc:	d8c02015 	stw	r3,128(sp)
 80050d0:	d8801f15 	stw	r2,124(sp)
 80050d4:	010001c4 	movi	r4,7
 80050d8:	2082df16 	blt	r4,r2,8005c58 <___svfprintf_internal_r+0x11b8>
 80050dc:	42000204 	addi	r8,r8,8
 80050e0:	dac02b17 	ldw	r11,172(sp)
 80050e4:	58000c26 	beq	r11,zero,8005118 <___svfprintf_internal_r+0x678>
 80050e8:	d8801f17 	ldw	r2,124(sp)
 80050ec:	d9002704 	addi	r4,sp,156
 80050f0:	18c00084 	addi	r3,r3,2
 80050f4:	10800044 	addi	r2,r2,1
 80050f8:	41000015 	stw	r4,0(r8)
 80050fc:	01000084 	movi	r4,2
 8005100:	41000115 	stw	r4,4(r8)
 8005104:	d8c02015 	stw	r3,128(sp)
 8005108:	d8801f15 	stw	r2,124(sp)
 800510c:	010001c4 	movi	r4,7
 8005110:	2082d916 	blt	r4,r2,8005c78 <___svfprintf_internal_r+0x11d8>
 8005114:	42000204 	addi	r8,r8,8
 8005118:	db002c17 	ldw	r12,176(sp)
 800511c:	00802004 	movi	r2,128
 8005120:	60822026 	beq	r12,r2,80059a4 <___svfprintf_internal_r+0xf04>
 8005124:	db003217 	ldw	r12,200(sp)
 8005128:	64abc83a 	sub	r21,r12,r18
 800512c:	0540310e 	bge	zero,r21,80051f4 <___svfprintf_internal_r+0x754>
 8005130:	07000404 	movi	fp,16
 8005134:	d8801f17 	ldw	r2,124(sp)
 8005138:	e544180e 	bge	fp,r21,800619c <___svfprintf_internal_r+0x16fc>
 800513c:	014200b4 	movhi	r5,2050
 8005140:	a809883a 	mov	r4,r21
 8005144:	2940a884 	addi	r5,r5,674
 8005148:	dc002c15 	stw	r16,176(sp)
 800514c:	902b883a 	mov	r21,r18
 8005150:	d9402b15 	stw	r5,172(sp)
 8005154:	8825883a 	mov	r18,r17
 8005158:	04c001c4 	movi	r19,7
 800515c:	dc002f17 	ldw	r16,188(sp)
 8005160:	2023883a 	mov	r17,r4
 8005164:	00000306 	br	8005174 <___svfprintf_internal_r+0x6d4>
 8005168:	8c7ffc04 	addi	r17,r17,-16
 800516c:	42000204 	addi	r8,r8,8
 8005170:	e440110e 	bge	fp,r17,80051b8 <___svfprintf_internal_r+0x718>
 8005174:	18c00404 	addi	r3,r3,16
 8005178:	10800044 	addi	r2,r2,1
 800517c:	45000015 	stw	r20,0(r8)
 8005180:	47000115 	stw	fp,4(r8)
 8005184:	d8c02015 	stw	r3,128(sp)
 8005188:	d8801f15 	stw	r2,124(sp)
 800518c:	98bff60e 	bge	r19,r2,8005168 <__alt_data_end+0xfc005168>
 8005190:	8009883a 	mov	r4,r16
 8005194:	b80b883a 	mov	r5,r23
 8005198:	b00d883a 	mov	r6,r22
 800519c:	800d4e80 	call	800d4e8 <__ssprint_r>
 80051a0:	103f071e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80051a4:	8c7ffc04 	addi	r17,r17,-16
 80051a8:	d8c02017 	ldw	r3,128(sp)
 80051ac:	d8801f17 	ldw	r2,124(sp)
 80051b0:	da000404 	addi	r8,sp,16
 80051b4:	e47fef16 	blt	fp,r17,8005174 <__alt_data_end+0xfc005174>
 80051b8:	dc002c17 	ldw	r16,176(sp)
 80051bc:	8809883a 	mov	r4,r17
 80051c0:	9023883a 	mov	r17,r18
 80051c4:	a825883a 	mov	r18,r21
 80051c8:	202b883a 	mov	r21,r4
 80051cc:	dac02b17 	ldw	r11,172(sp)
 80051d0:	1d47883a 	add	r3,r3,r21
 80051d4:	10800044 	addi	r2,r2,1
 80051d8:	42c00015 	stw	r11,0(r8)
 80051dc:	45400115 	stw	r21,4(r8)
 80051e0:	d8c02015 	stw	r3,128(sp)
 80051e4:	d8801f15 	stw	r2,124(sp)
 80051e8:	010001c4 	movi	r4,7
 80051ec:	20829216 	blt	r4,r2,8005c38 <___svfprintf_internal_r+0x1198>
 80051f0:	42000204 	addi	r8,r8,8
 80051f4:	8880400c 	andi	r2,r17,256
 80051f8:	1001a11e 	bne	r2,zero,8005880 <___svfprintf_internal_r+0xde0>
 80051fc:	d8801f17 	ldw	r2,124(sp)
 8005200:	db003117 	ldw	r12,196(sp)
 8005204:	1c87883a 	add	r3,r3,r18
 8005208:	10800044 	addi	r2,r2,1
 800520c:	43000015 	stw	r12,0(r8)
 8005210:	44800115 	stw	r18,4(r8)
 8005214:	d8c02015 	stw	r3,128(sp)
 8005218:	d8801f15 	stw	r2,124(sp)
 800521c:	010001c4 	movi	r4,7
 8005220:	20826d16 	blt	r4,r2,8005bd8 <___svfprintf_internal_r+0x1138>
 8005224:	42000204 	addi	r8,r8,8
 8005228:	8c40010c 	andi	r17,r17,4
 800522c:	88003226 	beq	r17,zero,80052f8 <___svfprintf_internal_r+0x858>
 8005230:	db002e17 	ldw	r12,184(sp)
 8005234:	dac02a17 	ldw	r11,168(sp)
 8005238:	62e1c83a 	sub	r16,r12,r11
 800523c:	04002e0e 	bge	zero,r16,80052f8 <___svfprintf_internal_r+0x858>
 8005240:	04400404 	movi	r17,16
 8005244:	d8801f17 	ldw	r2,124(sp)
 8005248:	8c05240e 	bge	r17,r16,80066dc <___svfprintf_internal_r+0x1c3c>
 800524c:	010200b4 	movhi	r4,2050
 8005250:	2100ac84 	addi	r4,r4,690
 8005254:	d9003615 	stw	r4,216(sp)
 8005258:	048001c4 	movi	r18,7
 800525c:	dcc02f17 	ldw	r19,188(sp)
 8005260:	00000306 	br	8005270 <___svfprintf_internal_r+0x7d0>
 8005264:	843ffc04 	addi	r16,r16,-16
 8005268:	42000204 	addi	r8,r8,8
 800526c:	8c00130e 	bge	r17,r16,80052bc <___svfprintf_internal_r+0x81c>
 8005270:	014200b4 	movhi	r5,2050
 8005274:	18c00404 	addi	r3,r3,16
 8005278:	10800044 	addi	r2,r2,1
 800527c:	2940ac84 	addi	r5,r5,690
 8005280:	41400015 	stw	r5,0(r8)
 8005284:	44400115 	stw	r17,4(r8)
 8005288:	d8c02015 	stw	r3,128(sp)
 800528c:	d8801f15 	stw	r2,124(sp)
 8005290:	90bff40e 	bge	r18,r2,8005264 <__alt_data_end+0xfc005264>
 8005294:	9809883a 	mov	r4,r19
 8005298:	b80b883a 	mov	r5,r23
 800529c:	b00d883a 	mov	r6,r22
 80052a0:	800d4e80 	call	800d4e8 <__ssprint_r>
 80052a4:	103ec61e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80052a8:	843ffc04 	addi	r16,r16,-16
 80052ac:	d8c02017 	ldw	r3,128(sp)
 80052b0:	d8801f17 	ldw	r2,124(sp)
 80052b4:	da000404 	addi	r8,sp,16
 80052b8:	8c3fed16 	blt	r17,r16,8005270 <__alt_data_end+0xfc005270>
 80052bc:	dac03617 	ldw	r11,216(sp)
 80052c0:	1c07883a 	add	r3,r3,r16
 80052c4:	10800044 	addi	r2,r2,1
 80052c8:	42c00015 	stw	r11,0(r8)
 80052cc:	44000115 	stw	r16,4(r8)
 80052d0:	d8c02015 	stw	r3,128(sp)
 80052d4:	d8801f15 	stw	r2,124(sp)
 80052d8:	010001c4 	movi	r4,7
 80052dc:	2080060e 	bge	r4,r2,80052f8 <___svfprintf_internal_r+0x858>
 80052e0:	d9002f17 	ldw	r4,188(sp)
 80052e4:	b80b883a 	mov	r5,r23
 80052e8:	b00d883a 	mov	r6,r22
 80052ec:	800d4e80 	call	800d4e8 <__ssprint_r>
 80052f0:	103eb31e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80052f4:	d8c02017 	ldw	r3,128(sp)
 80052f8:	d8802a17 	ldw	r2,168(sp)
 80052fc:	db002e17 	ldw	r12,184(sp)
 8005300:	1300010e 	bge	r2,r12,8005308 <___svfprintf_internal_r+0x868>
 8005304:	6005883a 	mov	r2,r12
 8005308:	dac03017 	ldw	r11,192(sp)
 800530c:	5897883a 	add	r11,r11,r2
 8005310:	dac03015 	stw	r11,192(sp)
 8005314:	1802381e 	bne	r3,zero,8005bf8 <___svfprintf_internal_r+0x1158>
 8005318:	d8001f15 	stw	zero,124(sp)
 800531c:	da000404 	addi	r8,sp,16
 8005320:	003e0b06 	br	8004b50 <__alt_data_end+0xfc004b50>
 8005324:	8c400414 	ori	r17,r17,16
 8005328:	d8c02915 	stw	r3,164(sp)
 800532c:	8880080c 	andi	r2,r17,32
 8005330:	10010c26 	beq	r2,zero,8005764 <___svfprintf_internal_r+0xcc4>
 8005334:	db002d17 	ldw	r12,180(sp)
 8005338:	0005883a 	mov	r2,zero
 800533c:	64c00017 	ldw	r19,0(r12)
 8005340:	67000117 	ldw	fp,4(r12)
 8005344:	63000204 	addi	r12,r12,8
 8005348:	db002d15 	stw	r12,180(sp)
 800534c:	9f06b03a 	or	r3,r19,fp
 8005350:	d8002785 	stb	zero,158(sp)
 8005354:	da403215 	stw	r9,200(sp)
 8005358:	002b883a 	mov	r21,zero
 800535c:	003ee206 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005360:	8c400414 	ori	r17,r17,16
 8005364:	d8c02915 	stw	r3,164(sp)
 8005368:	8880080c 	andi	r2,r17,32
 800536c:	1000ee26 	beq	r2,zero,8005728 <___svfprintf_internal_r+0xc88>
 8005370:	dac02d17 	ldw	r11,180(sp)
 8005374:	00800044 	movi	r2,1
 8005378:	5cc00017 	ldw	r19,0(r11)
 800537c:	5f000117 	ldw	fp,4(r11)
 8005380:	5ac00204 	addi	r11,r11,8
 8005384:	dac02d15 	stw	r11,180(sp)
 8005388:	9f06b03a 	or	r3,r19,fp
 800538c:	003ff006 	br	8005350 <__alt_data_end+0xfc005350>
 8005390:	db002d17 	ldw	r12,180(sp)
 8005394:	dac02d17 	ldw	r11,180(sp)
 8005398:	d8c02915 	stw	r3,164(sp)
 800539c:	63000017 	ldw	r12,0(r12)
 80053a0:	5ac00117 	ldw	r11,4(r11)
 80053a4:	d9802785 	stb	r6,158(sp)
 80053a8:	6009883a 	mov	r4,r12
 80053ac:	580b883a 	mov	r5,r11
 80053b0:	db003715 	stw	r12,220(sp)
 80053b4:	da004015 	stw	r8,256(sp)
 80053b8:	da403f15 	stw	r9,252(sp)
 80053bc:	dac03815 	stw	r11,224(sp)
 80053c0:	800d2940 	call	800d294 <__fpclassifyd>
 80053c4:	db002d17 	ldw	r12,180(sp)
 80053c8:	04800044 	movi	r18,1
 80053cc:	da004017 	ldw	r8,256(sp)
 80053d0:	64c00204 	addi	r19,r12,8
 80053d4:	da403f17 	ldw	r9,252(sp)
 80053d8:	d9003717 	ldw	r4,220(sp)
 80053dc:	d9403817 	ldw	r5,224(sp)
 80053e0:	14832c1e 	bne	r2,r18,8006094 <___svfprintf_internal_r+0x15f4>
 80053e4:	000d883a 	mov	r6,zero
 80053e8:	000f883a 	mov	r7,zero
 80053ec:	8003d300 	call	8003d30 <__ledf2>
 80053f0:	da004017 	ldw	r8,256(sp)
 80053f4:	1004c416 	blt	r2,zero,8006708 <___svfprintf_internal_r+0x1c68>
 80053f8:	dd402783 	ldbu	r21,158(sp)
 80053fc:	008011c4 	movi	r2,71
 8005400:	14041a0e 	bge	r2,r16,800646c <___svfprintf_internal_r+0x19cc>
 8005404:	00c200b4 	movhi	r3,2050
 8005408:	18c09904 	addi	r3,r3,612
 800540c:	d8c03115 	stw	r3,196(sp)
 8005410:	02c000c4 	movi	r11,3
 8005414:	00bfdfc4 	movi	r2,-129
 8005418:	dac02a15 	stw	r11,168(sp)
 800541c:	88a2703a 	and	r17,r17,r2
 8005420:	dcc02d15 	stw	r19,180(sp)
 8005424:	5825883a 	mov	r18,r11
 8005428:	d8003215 	stw	zero,200(sp)
 800542c:	d8003415 	stw	zero,208(sp)
 8005430:	003ed406 	br	8004f84 <__alt_data_end+0xfc004f84>
 8005434:	db002d17 	ldw	r12,180(sp)
 8005438:	00800c04 	movi	r2,48
 800543c:	d8802705 	stb	r2,156(sp)
 8005440:	64c00017 	ldw	r19,0(r12)
 8005444:	00801e04 	movi	r2,120
 8005448:	d8802745 	stb	r2,157(sp)
 800544c:	008200b4 	movhi	r2,2050
 8005450:	1080a104 	addi	r2,r2,644
 8005454:	63000104 	addi	r12,r12,4
 8005458:	d8c02915 	stw	r3,164(sp)
 800545c:	d8803b15 	stw	r2,236(sp)
 8005460:	0039883a 	mov	fp,zero
 8005464:	8c400094 	ori	r17,r17,2
 8005468:	db002d15 	stw	r12,180(sp)
 800546c:	00800084 	movi	r2,2
 8005470:	04001e04 	movi	r16,120
 8005474:	9807883a 	mov	r3,r19
 8005478:	003fb506 	br	8005350 <__alt_data_end+0xfc005350>
 800547c:	8c400214 	ori	r17,r17,8
 8005480:	1805883a 	mov	r2,r3
 8005484:	1c000007 	ldb	r16,0(r3)
 8005488:	003ddb06 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 800548c:	d8c02915 	stw	r3,164(sp)
 8005490:	d9802785 	stb	r6,158(sp)
 8005494:	8880080c 	andi	r2,r17,32
 8005498:	d8c02d17 	ldw	r3,180(sp)
 800549c:	103e871e 	bne	r2,zero,8004ebc <__alt_data_end+0xfc004ebc>
 80054a0:	8880040c 	andi	r2,r17,16
 80054a4:	10027a1e 	bne	r2,zero,8005e90 <___svfprintf_internal_r+0x13f0>
 80054a8:	8880100c 	andi	r2,r17,64
 80054ac:	10027826 	beq	r2,zero,8005e90 <___svfprintf_internal_r+0x13f0>
 80054b0:	1cc0000f 	ldh	r19,0(r3)
 80054b4:	db002d17 	ldw	r12,180(sp)
 80054b8:	9839d7fa 	srai	fp,r19,31
 80054bc:	63000104 	addi	r12,r12,4
 80054c0:	db002d15 	stw	r12,180(sp)
 80054c4:	e005883a 	mov	r2,fp
 80054c8:	103e830e 	bge	r2,zero,8004ed8 <__alt_data_end+0xfc004ed8>
 80054cc:	04e7c83a 	sub	r19,zero,r19
 80054d0:	9804c03a 	cmpne	r2,r19,zero
 80054d4:	0739c83a 	sub	fp,zero,fp
 80054d8:	e0b9c83a 	sub	fp,fp,r2
 80054dc:	05400b44 	movi	r21,45
 80054e0:	dd402785 	stb	r21,158(sp)
 80054e4:	da403215 	stw	r9,200(sp)
 80054e8:	00800044 	movi	r2,1
 80054ec:	9f06b03a 	or	r3,r19,fp
 80054f0:	003e7d06 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 80054f4:	8c401014 	ori	r17,r17,64
 80054f8:	1805883a 	mov	r2,r3
 80054fc:	1c000007 	ldb	r16,0(r3)
 8005500:	003dbd06 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 8005504:	1c000007 	ldb	r16,0(r3)
 8005508:	81c37126 	beq	r16,r7,80062d0 <___svfprintf_internal_r+0x1830>
 800550c:	8c400414 	ori	r17,r17,16
 8005510:	1805883a 	mov	r2,r3
 8005514:	003db806 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 8005518:	d8c02915 	stw	r3,164(sp)
 800551c:	d9802785 	stb	r6,158(sp)
 8005520:	8880080c 	andi	r2,r17,32
 8005524:	1002f026 	beq	r2,zero,80060e8 <___svfprintf_internal_r+0x1648>
 8005528:	db002d17 	ldw	r12,180(sp)
 800552c:	dac03017 	ldw	r11,192(sp)
 8005530:	60800017 	ldw	r2,0(r12)
 8005534:	5807d7fa 	srai	r3,r11,31
 8005538:	63000104 	addi	r12,r12,4
 800553c:	db002d15 	stw	r12,180(sp)
 8005540:	12c00015 	stw	r11,0(r2)
 8005544:	10c00115 	stw	r3,4(r2)
 8005548:	003d8106 	br	8004b50 <__alt_data_end+0xfc004b50>
 800554c:	30803fcc 	andi	r2,r6,255
 8005550:	1080201c 	xori	r2,r2,128
 8005554:	10bfe004 	addi	r2,r2,-128
 8005558:	1002fd1e 	bne	r2,zero,8006150 <___svfprintf_internal_r+0x16b0>
 800555c:	1805883a 	mov	r2,r3
 8005560:	01800804 	movi	r6,32
 8005564:	1c000007 	ldb	r16,0(r3)
 8005568:	003da306 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 800556c:	030200b4 	movhi	r12,2050
 8005570:	63009c04 	addi	r12,r12,624
 8005574:	d8c02915 	stw	r3,164(sp)
 8005578:	d9802785 	stb	r6,158(sp)
 800557c:	db003b15 	stw	r12,236(sp)
 8005580:	88c0080c 	andi	r3,r17,32
 8005584:	d8802d17 	ldw	r2,180(sp)
 8005588:	18005c26 	beq	r3,zero,80056fc <___svfprintf_internal_r+0xc5c>
 800558c:	dac02d17 	ldw	r11,180(sp)
 8005590:	14c00017 	ldw	r19,0(r2)
 8005594:	17000117 	ldw	fp,4(r2)
 8005598:	5ac00204 	addi	r11,r11,8
 800559c:	dac02d15 	stw	r11,180(sp)
 80055a0:	8880004c 	andi	r2,r17,1
 80055a4:	10022f26 	beq	r2,zero,8005e64 <___svfprintf_internal_r+0x13c4>
 80055a8:	9f06b03a 	or	r3,r19,fp
 80055ac:	1802eb26 	beq	r3,zero,800615c <___svfprintf_internal_r+0x16bc>
 80055b0:	00800c04 	movi	r2,48
 80055b4:	d8802705 	stb	r2,156(sp)
 80055b8:	dc002745 	stb	r16,157(sp)
 80055bc:	8c400094 	ori	r17,r17,2
 80055c0:	00800084 	movi	r2,2
 80055c4:	003f6206 	br	8005350 <__alt_data_end+0xfc005350>
 80055c8:	dac02d17 	ldw	r11,180(sp)
 80055cc:	db002d17 	ldw	r12,180(sp)
 80055d0:	d8c02915 	stw	r3,164(sp)
 80055d4:	5ac00017 	ldw	r11,0(r11)
 80055d8:	d8002785 	stb	zero,158(sp)
 80055dc:	64c00104 	addi	r19,r12,4
 80055e0:	dac03115 	stw	r11,196(sp)
 80055e4:	58042e26 	beq	r11,zero,80066a0 <___svfprintf_internal_r+0x1c00>
 80055e8:	d9003117 	ldw	r4,196(sp)
 80055ec:	4803c416 	blt	r9,zero,8006500 <___svfprintf_internal_r+0x1a60>
 80055f0:	480d883a 	mov	r6,r9
 80055f4:	000b883a 	mov	r5,zero
 80055f8:	da004015 	stw	r8,256(sp)
 80055fc:	da403f15 	stw	r9,252(sp)
 8005600:	800b7600 	call	800b760 <memchr>
 8005604:	da004017 	ldw	r8,256(sp)
 8005608:	da403f17 	ldw	r9,252(sp)
 800560c:	10048a26 	beq	r2,zero,8006838 <___svfprintf_internal_r+0x1d98>
 8005610:	d8c03117 	ldw	r3,196(sp)
 8005614:	10e5c83a 	sub	r18,r2,r3
 8005618:	4c80010e 	bge	r9,r18,8005620 <___svfprintf_internal_r+0xb80>
 800561c:	4825883a 	mov	r18,r9
 8005620:	9005883a 	mov	r2,r18
 8005624:	9003bb16 	blt	r18,zero,8006514 <___svfprintf_internal_r+0x1a74>
 8005628:	dd402783 	ldbu	r21,158(sp)
 800562c:	d8802a15 	stw	r2,168(sp)
 8005630:	dcc02d15 	stw	r19,180(sp)
 8005634:	d8003215 	stw	zero,200(sp)
 8005638:	d8003415 	stw	zero,208(sp)
 800563c:	003e5106 	br	8004f84 <__alt_data_end+0xfc004f84>
 8005640:	8c400814 	ori	r17,r17,32
 8005644:	1805883a 	mov	r2,r3
 8005648:	1c000007 	ldb	r16,0(r3)
 800564c:	003d6a06 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 8005650:	db002d17 	ldw	r12,180(sp)
 8005654:	d8c02915 	stw	r3,164(sp)
 8005658:	dac01404 	addi	r11,sp,80
 800565c:	60800017 	ldw	r2,0(r12)
 8005660:	00c00044 	movi	r3,1
 8005664:	63000104 	addi	r12,r12,4
 8005668:	d8801405 	stb	r2,80(sp)
 800566c:	d8c02a15 	stw	r3,168(sp)
 8005670:	d8002785 	stb	zero,158(sp)
 8005674:	db002d15 	stw	r12,180(sp)
 8005678:	1825883a 	mov	r18,r3
 800567c:	d8003215 	stw	zero,200(sp)
 8005680:	d8003415 	stw	zero,208(sp)
 8005684:	dac03115 	stw	r11,196(sp)
 8005688:	0005883a 	mov	r2,zero
 800568c:	003e4406 	br	8004fa0 <__alt_data_end+0xfc004fa0>
 8005690:	dac02d17 	ldw	r11,180(sp)
 8005694:	db002d17 	ldw	r12,180(sp)
 8005698:	5ac00017 	ldw	r11,0(r11)
 800569c:	dac02e15 	stw	r11,184(sp)
 80056a0:	62c00104 	addi	r11,r12,4
 80056a4:	db002e17 	ldw	r12,184(sp)
 80056a8:	60030316 	blt	r12,zero,80062b8 <___svfprintf_internal_r+0x1818>
 80056ac:	dac02d15 	stw	r11,180(sp)
 80056b0:	1805883a 	mov	r2,r3
 80056b4:	1c000007 	ldb	r16,0(r3)
 80056b8:	003d4f06 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 80056bc:	1805883a 	mov	r2,r3
 80056c0:	01800ac4 	movi	r6,43
 80056c4:	1c000007 	ldb	r16,0(r3)
 80056c8:	003d4b06 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 80056cc:	8c400054 	ori	r17,r17,1
 80056d0:	1805883a 	mov	r2,r3
 80056d4:	1c000007 	ldb	r16,0(r3)
 80056d8:	003d4706 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 80056dc:	008200b4 	movhi	r2,2050
 80056e0:	1080a104 	addi	r2,r2,644
 80056e4:	d8c02915 	stw	r3,164(sp)
 80056e8:	d8803b15 	stw	r2,236(sp)
 80056ec:	d9802785 	stb	r6,158(sp)
 80056f0:	88c0080c 	andi	r3,r17,32
 80056f4:	d8802d17 	ldw	r2,180(sp)
 80056f8:	183fa41e 	bne	r3,zero,800558c <__alt_data_end+0xfc00558c>
 80056fc:	88c0040c 	andi	r3,r17,16
 8005700:	18028b26 	beq	r3,zero,8006130 <___svfprintf_internal_r+0x1690>
 8005704:	db002d17 	ldw	r12,180(sp)
 8005708:	14c00017 	ldw	r19,0(r2)
 800570c:	0039883a 	mov	fp,zero
 8005710:	63000104 	addi	r12,r12,4
 8005714:	db002d15 	stw	r12,180(sp)
 8005718:	003fa106 	br	80055a0 <__alt_data_end+0xfc0055a0>
 800571c:	d8c02915 	stw	r3,164(sp)
 8005720:	8880080c 	andi	r2,r17,32
 8005724:	103f121e 	bne	r2,zero,8005370 <__alt_data_end+0xfc005370>
 8005728:	8880040c 	andi	r2,r17,16
 800572c:	1001df1e 	bne	r2,zero,8005eac <___svfprintf_internal_r+0x140c>
 8005730:	8880100c 	andi	r2,r17,64
 8005734:	1001dd26 	beq	r2,zero,8005eac <___svfprintf_internal_r+0x140c>
 8005738:	dac02d17 	ldw	r11,180(sp)
 800573c:	0039883a 	mov	fp,zero
 8005740:	00800044 	movi	r2,1
 8005744:	5cc0000b 	ldhu	r19,0(r11)
 8005748:	5ac00104 	addi	r11,r11,4
 800574c:	dac02d15 	stw	r11,180(sp)
 8005750:	9807883a 	mov	r3,r19
 8005754:	003efe06 	br	8005350 <__alt_data_end+0xfc005350>
 8005758:	d8c02915 	stw	r3,164(sp)
 800575c:	8880080c 	andi	r2,r17,32
 8005760:	103ef41e 	bne	r2,zero,8005334 <__alt_data_end+0xfc005334>
 8005764:	8880040c 	andi	r2,r17,16
 8005768:	1001c11e 	bne	r2,zero,8005e70 <___svfprintf_internal_r+0x13d0>
 800576c:	8880100c 	andi	r2,r17,64
 8005770:	1001bf26 	beq	r2,zero,8005e70 <___svfprintf_internal_r+0x13d0>
 8005774:	db002d17 	ldw	r12,180(sp)
 8005778:	0039883a 	mov	fp,zero
 800577c:	0005883a 	mov	r2,zero
 8005780:	64c0000b 	ldhu	r19,0(r12)
 8005784:	63000104 	addi	r12,r12,4
 8005788:	db002d15 	stw	r12,180(sp)
 800578c:	9807883a 	mov	r3,r19
 8005790:	003eef06 	br	8005350 <__alt_data_end+0xfc005350>
 8005794:	d8c02915 	stw	r3,164(sp)
 8005798:	d9802785 	stb	r6,158(sp)
 800579c:	803d8226 	beq	r16,zero,8004da8 <__alt_data_end+0xfc004da8>
 80057a0:	02c00044 	movi	r11,1
 80057a4:	db001404 	addi	r12,sp,80
 80057a8:	dac02a15 	stw	r11,168(sp)
 80057ac:	dc001405 	stb	r16,80(sp)
 80057b0:	d8002785 	stb	zero,158(sp)
 80057b4:	5825883a 	mov	r18,r11
 80057b8:	d8003215 	stw	zero,200(sp)
 80057bc:	d8003415 	stw	zero,208(sp)
 80057c0:	db003115 	stw	r12,196(sp)
 80057c4:	0005883a 	mov	r2,zero
 80057c8:	003df506 	br	8004fa0 <__alt_data_end+0xfc004fa0>
 80057cc:	d8c02017 	ldw	r3,128(sp)
 80057d0:	003e3606 	br	80050ac <__alt_data_end+0xfc0050ac>
 80057d4:	10803fcc 	andi	r2,r2,255
 80057d8:	00c00044 	movi	r3,1
 80057dc:	10fdca1e 	bne	r2,r3,8004f08 <__alt_data_end+0xfc004f08>
 80057e0:	e000021e 	bne	fp,zero,80057ec <___svfprintf_internal_r+0xd4c>
 80057e4:	00800244 	movi	r2,9
 80057e8:	14c01f2e 	bgeu	r2,r19,8005868 <___svfprintf_internal_r+0xdc8>
 80057ec:	dc002a15 	stw	r16,168(sp)
 80057f0:	dc402b15 	stw	r17,172(sp)
 80057f4:	9821883a 	mov	r16,r19
 80057f8:	e023883a 	mov	r17,fp
 80057fc:	b025883a 	mov	r18,r22
 8005800:	4027883a 	mov	r19,r8
 8005804:	4839883a 	mov	fp,r9
 8005808:	8009883a 	mov	r4,r16
 800580c:	880b883a 	mov	r5,r17
 8005810:	01800284 	movi	r6,10
 8005814:	000f883a 	mov	r7,zero
 8005818:	8010aa40 	call	8010aa4 <__umoddi3>
 800581c:	10800c04 	addi	r2,r2,48
 8005820:	94bfffc4 	addi	r18,r18,-1
 8005824:	8009883a 	mov	r4,r16
 8005828:	880b883a 	mov	r5,r17
 800582c:	01800284 	movi	r6,10
 8005830:	000f883a 	mov	r7,zero
 8005834:	90800005 	stb	r2,0(r18)
 8005838:	80104e40 	call	80104e4 <__udivdi3>
 800583c:	1021883a 	mov	r16,r2
 8005840:	10c4b03a 	or	r2,r2,r3
 8005844:	1823883a 	mov	r17,r3
 8005848:	103fef1e 	bne	r2,zero,8005808 <__alt_data_end+0xfc005808>
 800584c:	dc803115 	stw	r18,196(sp)
 8005850:	dc002a17 	ldw	r16,168(sp)
 8005854:	9811883a 	mov	r8,r19
 8005858:	dc402b17 	ldw	r17,172(sp)
 800585c:	e013883a 	mov	r9,fp
 8005860:	b4a5c83a 	sub	r18,r22,r18
 8005864:	003dc206 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005868:	9cc00c04 	addi	r19,r19,48
 800586c:	db001dc4 	addi	r12,sp,119
 8005870:	dcc01dc5 	stb	r19,119(sp)
 8005874:	dc803d17 	ldw	r18,244(sp)
 8005878:	db003115 	stw	r12,196(sp)
 800587c:	003dbc06 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005880:	00801944 	movi	r2,101
 8005884:	14008d0e 	bge	r2,r16,8005abc <___svfprintf_internal_r+0x101c>
 8005888:	d9003717 	ldw	r4,220(sp)
 800588c:	d9403817 	ldw	r5,224(sp)
 8005890:	000d883a 	mov	r6,zero
 8005894:	000f883a 	mov	r7,zero
 8005898:	d8c03e15 	stw	r3,248(sp)
 800589c:	da004015 	stw	r8,256(sp)
 80058a0:	8011a2c0 	call	8011a2c <__eqdf2>
 80058a4:	d8c03e17 	ldw	r3,248(sp)
 80058a8:	da004017 	ldw	r8,256(sp)
 80058ac:	1000fd1e 	bne	r2,zero,8005ca4 <___svfprintf_internal_r+0x1204>
 80058b0:	d8801f17 	ldw	r2,124(sp)
 80058b4:	010200b4 	movhi	r4,2050
 80058b8:	2100a804 	addi	r4,r4,672
 80058bc:	18c00044 	addi	r3,r3,1
 80058c0:	10800044 	addi	r2,r2,1
 80058c4:	41000015 	stw	r4,0(r8)
 80058c8:	01000044 	movi	r4,1
 80058cc:	41000115 	stw	r4,4(r8)
 80058d0:	d8c02015 	stw	r3,128(sp)
 80058d4:	d8801f15 	stw	r2,124(sp)
 80058d8:	010001c4 	movi	r4,7
 80058dc:	20823316 	blt	r4,r2,80061ac <___svfprintf_internal_r+0x170c>
 80058e0:	42000204 	addi	r8,r8,8
 80058e4:	d8802617 	ldw	r2,152(sp)
 80058e8:	dac03317 	ldw	r11,204(sp)
 80058ec:	12c00216 	blt	r2,r11,80058f8 <___svfprintf_internal_r+0xe58>
 80058f0:	8880004c 	andi	r2,r17,1
 80058f4:	103e4c26 	beq	r2,zero,8005228 <__alt_data_end+0xfc005228>
 80058f8:	db003917 	ldw	r12,228(sp)
 80058fc:	d8801f17 	ldw	r2,124(sp)
 8005900:	dac03517 	ldw	r11,212(sp)
 8005904:	1b07883a 	add	r3,r3,r12
 8005908:	10800044 	addi	r2,r2,1
 800590c:	42c00015 	stw	r11,0(r8)
 8005910:	43000115 	stw	r12,4(r8)
 8005914:	d8c02015 	stw	r3,128(sp)
 8005918:	d8801f15 	stw	r2,124(sp)
 800591c:	010001c4 	movi	r4,7
 8005920:	20826f16 	blt	r4,r2,80062e0 <___svfprintf_internal_r+0x1840>
 8005924:	42000204 	addi	r8,r8,8
 8005928:	db003317 	ldw	r12,204(sp)
 800592c:	643fffc4 	addi	r16,r12,-1
 8005930:	043e3d0e 	bge	zero,r16,8005228 <__alt_data_end+0xfc005228>
 8005934:	04800404 	movi	r18,16
 8005938:	d8801f17 	ldw	r2,124(sp)
 800593c:	94009a0e 	bge	r18,r16,8005ba8 <___svfprintf_internal_r+0x1108>
 8005940:	014200b4 	movhi	r5,2050
 8005944:	2940a884 	addi	r5,r5,674
 8005948:	d9402b15 	stw	r5,172(sp)
 800594c:	054001c4 	movi	r21,7
 8005950:	dcc02f17 	ldw	r19,188(sp)
 8005954:	00000306 	br	8005964 <___svfprintf_internal_r+0xec4>
 8005958:	42000204 	addi	r8,r8,8
 800595c:	843ffc04 	addi	r16,r16,-16
 8005960:	9400940e 	bge	r18,r16,8005bb4 <___svfprintf_internal_r+0x1114>
 8005964:	18c00404 	addi	r3,r3,16
 8005968:	10800044 	addi	r2,r2,1
 800596c:	45000015 	stw	r20,0(r8)
 8005970:	44800115 	stw	r18,4(r8)
 8005974:	d8c02015 	stw	r3,128(sp)
 8005978:	d8801f15 	stw	r2,124(sp)
 800597c:	a8bff60e 	bge	r21,r2,8005958 <__alt_data_end+0xfc005958>
 8005980:	9809883a 	mov	r4,r19
 8005984:	b80b883a 	mov	r5,r23
 8005988:	b00d883a 	mov	r6,r22
 800598c:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005990:	103d0b1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005994:	d8c02017 	ldw	r3,128(sp)
 8005998:	d8801f17 	ldw	r2,124(sp)
 800599c:	da000404 	addi	r8,sp,16
 80059a0:	003fee06 	br	800595c <__alt_data_end+0xfc00595c>
 80059a4:	dac02e17 	ldw	r11,184(sp)
 80059a8:	db002a17 	ldw	r12,168(sp)
 80059ac:	5b2bc83a 	sub	r21,r11,r12
 80059b0:	057ddc0e 	bge	zero,r21,8005124 <__alt_data_end+0xfc005124>
 80059b4:	07000404 	movi	fp,16
 80059b8:	d8801f17 	ldw	r2,124(sp)
 80059bc:	e5435d0e 	bge	fp,r21,8006734 <___svfprintf_internal_r+0x1c94>
 80059c0:	014200b4 	movhi	r5,2050
 80059c4:	a809883a 	mov	r4,r21
 80059c8:	2940a884 	addi	r5,r5,674
 80059cc:	dc002c15 	stw	r16,176(sp)
 80059d0:	902b883a 	mov	r21,r18
 80059d4:	d9402b15 	stw	r5,172(sp)
 80059d8:	8825883a 	mov	r18,r17
 80059dc:	04c001c4 	movi	r19,7
 80059e0:	dc002f17 	ldw	r16,188(sp)
 80059e4:	2023883a 	mov	r17,r4
 80059e8:	00000306 	br	80059f8 <___svfprintf_internal_r+0xf58>
 80059ec:	8c7ffc04 	addi	r17,r17,-16
 80059f0:	42000204 	addi	r8,r8,8
 80059f4:	e440110e 	bge	fp,r17,8005a3c <___svfprintf_internal_r+0xf9c>
 80059f8:	18c00404 	addi	r3,r3,16
 80059fc:	10800044 	addi	r2,r2,1
 8005a00:	45000015 	stw	r20,0(r8)
 8005a04:	47000115 	stw	fp,4(r8)
 8005a08:	d8c02015 	stw	r3,128(sp)
 8005a0c:	d8801f15 	stw	r2,124(sp)
 8005a10:	98bff60e 	bge	r19,r2,80059ec <__alt_data_end+0xfc0059ec>
 8005a14:	8009883a 	mov	r4,r16
 8005a18:	b80b883a 	mov	r5,r23
 8005a1c:	b00d883a 	mov	r6,r22
 8005a20:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005a24:	103ce61e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005a28:	8c7ffc04 	addi	r17,r17,-16
 8005a2c:	d8c02017 	ldw	r3,128(sp)
 8005a30:	d8801f17 	ldw	r2,124(sp)
 8005a34:	da000404 	addi	r8,sp,16
 8005a38:	e47fef16 	blt	fp,r17,80059f8 <__alt_data_end+0xfc0059f8>
 8005a3c:	dc002c17 	ldw	r16,176(sp)
 8005a40:	8809883a 	mov	r4,r17
 8005a44:	9023883a 	mov	r17,r18
 8005a48:	a825883a 	mov	r18,r21
 8005a4c:	202b883a 	mov	r21,r4
 8005a50:	dac02b17 	ldw	r11,172(sp)
 8005a54:	1d47883a 	add	r3,r3,r21
 8005a58:	10800044 	addi	r2,r2,1
 8005a5c:	42c00015 	stw	r11,0(r8)
 8005a60:	45400115 	stw	r21,4(r8)
 8005a64:	d8c02015 	stw	r3,128(sp)
 8005a68:	d8801f15 	stw	r2,124(sp)
 8005a6c:	010001c4 	movi	r4,7
 8005a70:	20818016 	blt	r4,r2,8006074 <___svfprintf_internal_r+0x15d4>
 8005a74:	42000204 	addi	r8,r8,8
 8005a78:	003daa06 	br	8005124 <__alt_data_end+0xfc005124>
 8005a7c:	d9403b17 	ldw	r5,236(sp)
 8005a80:	b007883a 	mov	r3,r22
 8005a84:	988003cc 	andi	r2,r19,15
 8005a88:	e008973a 	slli	r4,fp,28
 8005a8c:	2885883a 	add	r2,r5,r2
 8005a90:	9826d13a 	srli	r19,r19,4
 8005a94:	10800003 	ldbu	r2,0(r2)
 8005a98:	e038d13a 	srli	fp,fp,4
 8005a9c:	18ffffc4 	addi	r3,r3,-1
 8005aa0:	24e6b03a 	or	r19,r4,r19
 8005aa4:	18800005 	stb	r2,0(r3)
 8005aa8:	9f04b03a 	or	r2,r19,fp
 8005aac:	103ff51e 	bne	r2,zero,8005a84 <__alt_data_end+0xfc005a84>
 8005ab0:	d8c03115 	stw	r3,196(sp)
 8005ab4:	b0e5c83a 	sub	r18,r22,r3
 8005ab8:	003d2d06 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005abc:	db003317 	ldw	r12,204(sp)
 8005ac0:	00800044 	movi	r2,1
 8005ac4:	18c00044 	addi	r3,r3,1
 8005ac8:	13014b0e 	bge	r2,r12,8005ff8 <___svfprintf_internal_r+0x1558>
 8005acc:	dc001f17 	ldw	r16,124(sp)
 8005ad0:	dac03117 	ldw	r11,196(sp)
 8005ad4:	00800044 	movi	r2,1
 8005ad8:	84000044 	addi	r16,r16,1
 8005adc:	40800115 	stw	r2,4(r8)
 8005ae0:	42c00015 	stw	r11,0(r8)
 8005ae4:	d8c02015 	stw	r3,128(sp)
 8005ae8:	dc001f15 	stw	r16,124(sp)
 8005aec:	008001c4 	movi	r2,7
 8005af0:	14014e16 	blt	r2,r16,800602c <___svfprintf_internal_r+0x158c>
 8005af4:	42000204 	addi	r8,r8,8
 8005af8:	db003917 	ldw	r12,228(sp)
 8005afc:	dac03517 	ldw	r11,212(sp)
 8005b00:	84000044 	addi	r16,r16,1
 8005b04:	1b07883a 	add	r3,r3,r12
 8005b08:	42c00015 	stw	r11,0(r8)
 8005b0c:	43000115 	stw	r12,4(r8)
 8005b10:	d8c02015 	stw	r3,128(sp)
 8005b14:	dc001f15 	stw	r16,124(sp)
 8005b18:	008001c4 	movi	r2,7
 8005b1c:	14014c16 	blt	r2,r16,8006050 <___svfprintf_internal_r+0x15b0>
 8005b20:	44800204 	addi	r18,r8,8
 8005b24:	d9003717 	ldw	r4,220(sp)
 8005b28:	d9403817 	ldw	r5,224(sp)
 8005b2c:	000d883a 	mov	r6,zero
 8005b30:	000f883a 	mov	r7,zero
 8005b34:	d8c03e15 	stw	r3,248(sp)
 8005b38:	8011a2c0 	call	8011a2c <__eqdf2>
 8005b3c:	d8c03e17 	ldw	r3,248(sp)
 8005b40:	db003317 	ldw	r12,204(sp)
 8005b44:	10009526 	beq	r2,zero,8005d9c <___svfprintf_internal_r+0x12fc>
 8005b48:	dac03117 	ldw	r11,196(sp)
 8005b4c:	60bfffc4 	addi	r2,r12,-1
 8005b50:	1887883a 	add	r3,r3,r2
 8005b54:	59000044 	addi	r4,r11,1
 8005b58:	84000044 	addi	r16,r16,1
 8005b5c:	90800115 	stw	r2,4(r18)
 8005b60:	91000015 	stw	r4,0(r18)
 8005b64:	d8c02015 	stw	r3,128(sp)
 8005b68:	dc001f15 	stw	r16,124(sp)
 8005b6c:	008001c4 	movi	r2,7
 8005b70:	1400b316 	blt	r2,r16,8005e40 <___svfprintf_internal_r+0x13a0>
 8005b74:	94800204 	addi	r18,r18,8
 8005b78:	dac03a17 	ldw	r11,232(sp)
 8005b7c:	dd4022c4 	addi	r21,sp,139
 8005b80:	84000044 	addi	r16,r16,1
 8005b84:	58c7883a 	add	r3,r11,r3
 8005b88:	95400015 	stw	r21,0(r18)
 8005b8c:	92c00115 	stw	r11,4(r18)
 8005b90:	d8c02015 	stw	r3,128(sp)
 8005b94:	dc001f15 	stw	r16,124(sp)
 8005b98:	008001c4 	movi	r2,7
 8005b9c:	14000e16 	blt	r2,r16,8005bd8 <___svfprintf_internal_r+0x1138>
 8005ba0:	92000204 	addi	r8,r18,8
 8005ba4:	003da006 	br	8005228 <__alt_data_end+0xfc005228>
 8005ba8:	010200b4 	movhi	r4,2050
 8005bac:	2100a884 	addi	r4,r4,674
 8005bb0:	d9002b15 	stw	r4,172(sp)
 8005bb4:	dac02b17 	ldw	r11,172(sp)
 8005bb8:	1c07883a 	add	r3,r3,r16
 8005bbc:	44000115 	stw	r16,4(r8)
 8005bc0:	42c00015 	stw	r11,0(r8)
 8005bc4:	10800044 	addi	r2,r2,1
 8005bc8:	d8c02015 	stw	r3,128(sp)
 8005bcc:	d8801f15 	stw	r2,124(sp)
 8005bd0:	010001c4 	movi	r4,7
 8005bd4:	20bd930e 	bge	r4,r2,8005224 <__alt_data_end+0xfc005224>
 8005bd8:	d9002f17 	ldw	r4,188(sp)
 8005bdc:	b80b883a 	mov	r5,r23
 8005be0:	b00d883a 	mov	r6,r22
 8005be4:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005be8:	103c751e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005bec:	d8c02017 	ldw	r3,128(sp)
 8005bf0:	da000404 	addi	r8,sp,16
 8005bf4:	003d8c06 	br	8005228 <__alt_data_end+0xfc005228>
 8005bf8:	d9002f17 	ldw	r4,188(sp)
 8005bfc:	b80b883a 	mov	r5,r23
 8005c00:	b00d883a 	mov	r6,r22
 8005c04:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005c08:	103dc326 	beq	r2,zero,8005318 <__alt_data_end+0xfc005318>
 8005c0c:	003c6c06 	br	8004dc0 <__alt_data_end+0xfc004dc0>
 8005c10:	10803fcc 	andi	r2,r2,255
 8005c14:	1000201e 	bne	r2,zero,8005c98 <___svfprintf_internal_r+0x11f8>
 8005c18:	8880004c 	andi	r2,r17,1
 8005c1c:	10001e26 	beq	r2,zero,8005c98 <___svfprintf_internal_r+0x11f8>
 8005c20:	00800c04 	movi	r2,48
 8005c24:	d8c01dc4 	addi	r3,sp,119
 8005c28:	d8801dc5 	stb	r2,119(sp)
 8005c2c:	dc803d17 	ldw	r18,244(sp)
 8005c30:	d8c03115 	stw	r3,196(sp)
 8005c34:	003cce06 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005c38:	d9002f17 	ldw	r4,188(sp)
 8005c3c:	b80b883a 	mov	r5,r23
 8005c40:	b00d883a 	mov	r6,r22
 8005c44:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005c48:	103c5d1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005c4c:	d8c02017 	ldw	r3,128(sp)
 8005c50:	da000404 	addi	r8,sp,16
 8005c54:	003d6706 	br	80051f4 <__alt_data_end+0xfc0051f4>
 8005c58:	d9002f17 	ldw	r4,188(sp)
 8005c5c:	b80b883a 	mov	r5,r23
 8005c60:	b00d883a 	mov	r6,r22
 8005c64:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005c68:	103c551e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005c6c:	d8c02017 	ldw	r3,128(sp)
 8005c70:	da000404 	addi	r8,sp,16
 8005c74:	003d1a06 	br	80050e0 <__alt_data_end+0xfc0050e0>
 8005c78:	d9002f17 	ldw	r4,188(sp)
 8005c7c:	b80b883a 	mov	r5,r23
 8005c80:	b00d883a 	mov	r6,r22
 8005c84:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005c88:	103c4d1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005c8c:	d8c02017 	ldw	r3,128(sp)
 8005c90:	da000404 	addi	r8,sp,16
 8005c94:	003d2006 	br	8005118 <__alt_data_end+0xfc005118>
 8005c98:	0025883a 	mov	r18,zero
 8005c9c:	dd803115 	stw	r22,196(sp)
 8005ca0:	003cb306 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005ca4:	dc002617 	ldw	r16,152(sp)
 8005ca8:	0401480e 	bge	zero,r16,80061cc <___svfprintf_internal_r+0x172c>
 8005cac:	db003117 	ldw	r12,196(sp)
 8005cb0:	dac03317 	ldw	r11,204(sp)
 8005cb4:	62e1883a 	add	r16,r12,r11
 8005cb8:	db003417 	ldw	r12,208(sp)
 8005cbc:	5825883a 	mov	r18,r11
 8005cc0:	62c0010e 	bge	r12,r11,8005cc8 <___svfprintf_internal_r+0x1228>
 8005cc4:	6025883a 	mov	r18,r12
 8005cc8:	04800b0e 	bge	zero,r18,8005cf8 <___svfprintf_internal_r+0x1258>
 8005ccc:	d8801f17 	ldw	r2,124(sp)
 8005cd0:	dac03117 	ldw	r11,196(sp)
 8005cd4:	1c87883a 	add	r3,r3,r18
 8005cd8:	10800044 	addi	r2,r2,1
 8005cdc:	42c00015 	stw	r11,0(r8)
 8005ce0:	44800115 	stw	r18,4(r8)
 8005ce4:	d8c02015 	stw	r3,128(sp)
 8005ce8:	d8801f15 	stw	r2,124(sp)
 8005cec:	010001c4 	movi	r4,7
 8005cf0:	20823f16 	blt	r4,r2,80065f0 <___svfprintf_internal_r+0x1b50>
 8005cf4:	42000204 	addi	r8,r8,8
 8005cf8:	90023b16 	blt	r18,zero,80065e8 <___svfprintf_internal_r+0x1b48>
 8005cfc:	db003417 	ldw	r12,208(sp)
 8005d00:	64a5c83a 	sub	r18,r12,r18
 8005d04:	0480780e 	bge	zero,r18,8005ee8 <___svfprintf_internal_r+0x1448>
 8005d08:	05400404 	movi	r21,16
 8005d0c:	d8801f17 	ldw	r2,124(sp)
 8005d10:	ac81140e 	bge	r21,r18,8006164 <___svfprintf_internal_r+0x16c4>
 8005d14:	014200b4 	movhi	r5,2050
 8005d18:	2940a884 	addi	r5,r5,674
 8005d1c:	d9402b15 	stw	r5,172(sp)
 8005d20:	070001c4 	movi	fp,7
 8005d24:	dcc02f17 	ldw	r19,188(sp)
 8005d28:	00000306 	br	8005d38 <___svfprintf_internal_r+0x1298>
 8005d2c:	42000204 	addi	r8,r8,8
 8005d30:	94bffc04 	addi	r18,r18,-16
 8005d34:	ac810e0e 	bge	r21,r18,8006170 <___svfprintf_internal_r+0x16d0>
 8005d38:	18c00404 	addi	r3,r3,16
 8005d3c:	10800044 	addi	r2,r2,1
 8005d40:	45000015 	stw	r20,0(r8)
 8005d44:	45400115 	stw	r21,4(r8)
 8005d48:	d8c02015 	stw	r3,128(sp)
 8005d4c:	d8801f15 	stw	r2,124(sp)
 8005d50:	e0bff60e 	bge	fp,r2,8005d2c <__alt_data_end+0xfc005d2c>
 8005d54:	9809883a 	mov	r4,r19
 8005d58:	b80b883a 	mov	r5,r23
 8005d5c:	b00d883a 	mov	r6,r22
 8005d60:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005d64:	103c161e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005d68:	d8c02017 	ldw	r3,128(sp)
 8005d6c:	d8801f17 	ldw	r2,124(sp)
 8005d70:	da000404 	addi	r8,sp,16
 8005d74:	003fee06 	br	8005d30 <__alt_data_end+0xfc005d30>
 8005d78:	d9002f17 	ldw	r4,188(sp)
 8005d7c:	b80b883a 	mov	r5,r23
 8005d80:	b00d883a 	mov	r6,r22
 8005d84:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005d88:	103c0d1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005d8c:	d8c02017 	ldw	r3,128(sp)
 8005d90:	d8802787 	ldb	r2,158(sp)
 8005d94:	da000404 	addi	r8,sp,16
 8005d98:	003cc406 	br	80050ac <__alt_data_end+0xfc0050ac>
 8005d9c:	657fffc4 	addi	r21,r12,-1
 8005da0:	057f750e 	bge	zero,r21,8005b78 <__alt_data_end+0xfc005b78>
 8005da4:	07000404 	movi	fp,16
 8005da8:	e542ef0e 	bge	fp,r21,8006968 <___svfprintf_internal_r+0x1ec8>
 8005dac:	010200b4 	movhi	r4,2050
 8005db0:	2100a884 	addi	r4,r4,674
 8005db4:	d9002b15 	stw	r4,172(sp)
 8005db8:	01c001c4 	movi	r7,7
 8005dbc:	dcc02f17 	ldw	r19,188(sp)
 8005dc0:	00000306 	br	8005dd0 <___svfprintf_internal_r+0x1330>
 8005dc4:	ad7ffc04 	addi	r21,r21,-16
 8005dc8:	94800204 	addi	r18,r18,8
 8005dcc:	e540130e 	bge	fp,r21,8005e1c <___svfprintf_internal_r+0x137c>
 8005dd0:	18c00404 	addi	r3,r3,16
 8005dd4:	84000044 	addi	r16,r16,1
 8005dd8:	95000015 	stw	r20,0(r18)
 8005ddc:	97000115 	stw	fp,4(r18)
 8005de0:	d8c02015 	stw	r3,128(sp)
 8005de4:	dc001f15 	stw	r16,124(sp)
 8005de8:	3c3ff60e 	bge	r7,r16,8005dc4 <__alt_data_end+0xfc005dc4>
 8005dec:	9809883a 	mov	r4,r19
 8005df0:	b80b883a 	mov	r5,r23
 8005df4:	b00d883a 	mov	r6,r22
 8005df8:	d9c03e15 	stw	r7,248(sp)
 8005dfc:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005e00:	d9c03e17 	ldw	r7,248(sp)
 8005e04:	103bee1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005e08:	ad7ffc04 	addi	r21,r21,-16
 8005e0c:	d8c02017 	ldw	r3,128(sp)
 8005e10:	dc001f17 	ldw	r16,124(sp)
 8005e14:	dc800404 	addi	r18,sp,16
 8005e18:	e57fed16 	blt	fp,r21,8005dd0 <__alt_data_end+0xfc005dd0>
 8005e1c:	dac02b17 	ldw	r11,172(sp)
 8005e20:	1d47883a 	add	r3,r3,r21
 8005e24:	84000044 	addi	r16,r16,1
 8005e28:	92c00015 	stw	r11,0(r18)
 8005e2c:	95400115 	stw	r21,4(r18)
 8005e30:	d8c02015 	stw	r3,128(sp)
 8005e34:	dc001f15 	stw	r16,124(sp)
 8005e38:	008001c4 	movi	r2,7
 8005e3c:	143f4d0e 	bge	r2,r16,8005b74 <__alt_data_end+0xfc005b74>
 8005e40:	d9002f17 	ldw	r4,188(sp)
 8005e44:	b80b883a 	mov	r5,r23
 8005e48:	b00d883a 	mov	r6,r22
 8005e4c:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005e50:	103bdb1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005e54:	d8c02017 	ldw	r3,128(sp)
 8005e58:	dc001f17 	ldw	r16,124(sp)
 8005e5c:	dc800404 	addi	r18,sp,16
 8005e60:	003f4506 	br	8005b78 <__alt_data_end+0xfc005b78>
 8005e64:	00800084 	movi	r2,2
 8005e68:	9f06b03a 	or	r3,r19,fp
 8005e6c:	003d3806 	br	8005350 <__alt_data_end+0xfc005350>
 8005e70:	dac02d17 	ldw	r11,180(sp)
 8005e74:	0039883a 	mov	fp,zero
 8005e78:	0005883a 	mov	r2,zero
 8005e7c:	5cc00017 	ldw	r19,0(r11)
 8005e80:	5ac00104 	addi	r11,r11,4
 8005e84:	dac02d15 	stw	r11,180(sp)
 8005e88:	9807883a 	mov	r3,r19
 8005e8c:	003d3006 	br	8005350 <__alt_data_end+0xfc005350>
 8005e90:	1cc00017 	ldw	r19,0(r3)
 8005e94:	dac02d17 	ldw	r11,180(sp)
 8005e98:	9839d7fa 	srai	fp,r19,31
 8005e9c:	5ac00104 	addi	r11,r11,4
 8005ea0:	dac02d15 	stw	r11,180(sp)
 8005ea4:	e005883a 	mov	r2,fp
 8005ea8:	003c0a06 	br	8004ed4 <__alt_data_end+0xfc004ed4>
 8005eac:	db002d17 	ldw	r12,180(sp)
 8005eb0:	0039883a 	mov	fp,zero
 8005eb4:	00800044 	movi	r2,1
 8005eb8:	64c00017 	ldw	r19,0(r12)
 8005ebc:	63000104 	addi	r12,r12,4
 8005ec0:	db002d15 	stw	r12,180(sp)
 8005ec4:	9807883a 	mov	r3,r19
 8005ec8:	003d2106 	br	8005350 <__alt_data_end+0xfc005350>
 8005ecc:	d9002f17 	ldw	r4,188(sp)
 8005ed0:	b80b883a 	mov	r5,r23
 8005ed4:	b00d883a 	mov	r6,r22
 8005ed8:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005edc:	103bb81e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005ee0:	d8c02017 	ldw	r3,128(sp)
 8005ee4:	da000404 	addi	r8,sp,16
 8005ee8:	db003117 	ldw	r12,196(sp)
 8005eec:	dac03417 	ldw	r11,208(sp)
 8005ef0:	d8802617 	ldw	r2,152(sp)
 8005ef4:	62e5883a 	add	r18,r12,r11
 8005ef8:	db003317 	ldw	r12,204(sp)
 8005efc:	13000216 	blt	r2,r12,8005f08 <___svfprintf_internal_r+0x1468>
 8005f00:	8900004c 	andi	r4,r17,1
 8005f04:	20000c26 	beq	r4,zero,8005f38 <___svfprintf_internal_r+0x1498>
 8005f08:	dac03917 	ldw	r11,228(sp)
 8005f0c:	d9001f17 	ldw	r4,124(sp)
 8005f10:	db003517 	ldw	r12,212(sp)
 8005f14:	1ac7883a 	add	r3,r3,r11
 8005f18:	21000044 	addi	r4,r4,1
 8005f1c:	43000015 	stw	r12,0(r8)
 8005f20:	42c00115 	stw	r11,4(r8)
 8005f24:	d8c02015 	stw	r3,128(sp)
 8005f28:	d9001f15 	stw	r4,124(sp)
 8005f2c:	014001c4 	movi	r5,7
 8005f30:	2901b716 	blt	r5,r4,8006610 <___svfprintf_internal_r+0x1b70>
 8005f34:	42000204 	addi	r8,r8,8
 8005f38:	dac03317 	ldw	r11,204(sp)
 8005f3c:	8489c83a 	sub	r4,r16,r18
 8005f40:	5885c83a 	sub	r2,r11,r2
 8005f44:	1021883a 	mov	r16,r2
 8005f48:	2080010e 	bge	r4,r2,8005f50 <___svfprintf_internal_r+0x14b0>
 8005f4c:	2021883a 	mov	r16,r4
 8005f50:	04000a0e 	bge	zero,r16,8005f7c <___svfprintf_internal_r+0x14dc>
 8005f54:	d9001f17 	ldw	r4,124(sp)
 8005f58:	1c07883a 	add	r3,r3,r16
 8005f5c:	44800015 	stw	r18,0(r8)
 8005f60:	21000044 	addi	r4,r4,1
 8005f64:	44000115 	stw	r16,4(r8)
 8005f68:	d8c02015 	stw	r3,128(sp)
 8005f6c:	d9001f15 	stw	r4,124(sp)
 8005f70:	014001c4 	movi	r5,7
 8005f74:	2901bf16 	blt	r5,r4,8006674 <___svfprintf_internal_r+0x1bd4>
 8005f78:	42000204 	addi	r8,r8,8
 8005f7c:	8001bb16 	blt	r16,zero,800666c <___svfprintf_internal_r+0x1bcc>
 8005f80:	1421c83a 	sub	r16,r2,r16
 8005f84:	043ca80e 	bge	zero,r16,8005228 <__alt_data_end+0xfc005228>
 8005f88:	04800404 	movi	r18,16
 8005f8c:	d8801f17 	ldw	r2,124(sp)
 8005f90:	943f050e 	bge	r18,r16,8005ba8 <__alt_data_end+0xfc005ba8>
 8005f94:	014200b4 	movhi	r5,2050
 8005f98:	2940a884 	addi	r5,r5,674
 8005f9c:	d9402b15 	stw	r5,172(sp)
 8005fa0:	054001c4 	movi	r21,7
 8005fa4:	dcc02f17 	ldw	r19,188(sp)
 8005fa8:	00000306 	br	8005fb8 <___svfprintf_internal_r+0x1518>
 8005fac:	42000204 	addi	r8,r8,8
 8005fb0:	843ffc04 	addi	r16,r16,-16
 8005fb4:	943eff0e 	bge	r18,r16,8005bb4 <__alt_data_end+0xfc005bb4>
 8005fb8:	18c00404 	addi	r3,r3,16
 8005fbc:	10800044 	addi	r2,r2,1
 8005fc0:	45000015 	stw	r20,0(r8)
 8005fc4:	44800115 	stw	r18,4(r8)
 8005fc8:	d8c02015 	stw	r3,128(sp)
 8005fcc:	d8801f15 	stw	r2,124(sp)
 8005fd0:	a8bff60e 	bge	r21,r2,8005fac <__alt_data_end+0xfc005fac>
 8005fd4:	9809883a 	mov	r4,r19
 8005fd8:	b80b883a 	mov	r5,r23
 8005fdc:	b00d883a 	mov	r6,r22
 8005fe0:	800d4e80 	call	800d4e8 <__ssprint_r>
 8005fe4:	103b761e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8005fe8:	d8c02017 	ldw	r3,128(sp)
 8005fec:	d8801f17 	ldw	r2,124(sp)
 8005ff0:	da000404 	addi	r8,sp,16
 8005ff4:	003fee06 	br	8005fb0 <__alt_data_end+0xfc005fb0>
 8005ff8:	8888703a 	and	r4,r17,r2
 8005ffc:	203eb31e 	bne	r4,zero,8005acc <__alt_data_end+0xfc005acc>
 8006000:	dc001f17 	ldw	r16,124(sp)
 8006004:	db003117 	ldw	r12,196(sp)
 8006008:	40800115 	stw	r2,4(r8)
 800600c:	84000044 	addi	r16,r16,1
 8006010:	43000015 	stw	r12,0(r8)
 8006014:	d8c02015 	stw	r3,128(sp)
 8006018:	dc001f15 	stw	r16,124(sp)
 800601c:	008001c4 	movi	r2,7
 8006020:	143f8716 	blt	r2,r16,8005e40 <__alt_data_end+0xfc005e40>
 8006024:	44800204 	addi	r18,r8,8
 8006028:	003ed306 	br	8005b78 <__alt_data_end+0xfc005b78>
 800602c:	d9002f17 	ldw	r4,188(sp)
 8006030:	b80b883a 	mov	r5,r23
 8006034:	b00d883a 	mov	r6,r22
 8006038:	800d4e80 	call	800d4e8 <__ssprint_r>
 800603c:	103b601e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006040:	d8c02017 	ldw	r3,128(sp)
 8006044:	dc001f17 	ldw	r16,124(sp)
 8006048:	da000404 	addi	r8,sp,16
 800604c:	003eaa06 	br	8005af8 <__alt_data_end+0xfc005af8>
 8006050:	d9002f17 	ldw	r4,188(sp)
 8006054:	b80b883a 	mov	r5,r23
 8006058:	b00d883a 	mov	r6,r22
 800605c:	800d4e80 	call	800d4e8 <__ssprint_r>
 8006060:	103b571e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006064:	d8c02017 	ldw	r3,128(sp)
 8006068:	dc001f17 	ldw	r16,124(sp)
 800606c:	dc800404 	addi	r18,sp,16
 8006070:	003eac06 	br	8005b24 <__alt_data_end+0xfc005b24>
 8006074:	d9002f17 	ldw	r4,188(sp)
 8006078:	b80b883a 	mov	r5,r23
 800607c:	b00d883a 	mov	r6,r22
 8006080:	800d4e80 	call	800d4e8 <__ssprint_r>
 8006084:	103b4e1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006088:	d8c02017 	ldw	r3,128(sp)
 800608c:	da000404 	addi	r8,sp,16
 8006090:	003c2406 	br	8005124 <__alt_data_end+0xfc005124>
 8006094:	da004015 	stw	r8,256(sp)
 8006098:	da403f15 	stw	r9,252(sp)
 800609c:	800d2940 	call	800d294 <__fpclassifyd>
 80060a0:	da004017 	ldw	r8,256(sp)
 80060a4:	da403f17 	ldw	r9,252(sp)
 80060a8:	1000951e 	bne	r2,zero,8006300 <___svfprintf_internal_r+0x1860>
 80060ac:	008011c4 	movi	r2,71
 80060b0:	1400fb16 	blt	r2,r16,80064a0 <___svfprintf_internal_r+0x1a00>
 80060b4:	030200b4 	movhi	r12,2050
 80060b8:	63009a04 	addi	r12,r12,616
 80060bc:	db003115 	stw	r12,196(sp)
 80060c0:	00c000c4 	movi	r3,3
 80060c4:	00bfdfc4 	movi	r2,-129
 80060c8:	d8c02a15 	stw	r3,168(sp)
 80060cc:	88a2703a 	and	r17,r17,r2
 80060d0:	dd402783 	ldbu	r21,158(sp)
 80060d4:	dcc02d15 	stw	r19,180(sp)
 80060d8:	1825883a 	mov	r18,r3
 80060dc:	d8003215 	stw	zero,200(sp)
 80060e0:	d8003415 	stw	zero,208(sp)
 80060e4:	003ba706 	br	8004f84 <__alt_data_end+0xfc004f84>
 80060e8:	8880040c 	andi	r2,r17,16
 80060ec:	1000091e 	bne	r2,zero,8006114 <___svfprintf_internal_r+0x1674>
 80060f0:	8c40100c 	andi	r17,r17,64
 80060f4:	88000726 	beq	r17,zero,8006114 <___svfprintf_internal_r+0x1674>
 80060f8:	db002d17 	ldw	r12,180(sp)
 80060fc:	dac03017 	ldw	r11,192(sp)
 8006100:	60800017 	ldw	r2,0(r12)
 8006104:	63000104 	addi	r12,r12,4
 8006108:	db002d15 	stw	r12,180(sp)
 800610c:	12c0000d 	sth	r11,0(r2)
 8006110:	003a8f06 	br	8004b50 <__alt_data_end+0xfc004b50>
 8006114:	db002d17 	ldw	r12,180(sp)
 8006118:	dac03017 	ldw	r11,192(sp)
 800611c:	60800017 	ldw	r2,0(r12)
 8006120:	63000104 	addi	r12,r12,4
 8006124:	db002d15 	stw	r12,180(sp)
 8006128:	12c00015 	stw	r11,0(r2)
 800612c:	003a8806 	br	8004b50 <__alt_data_end+0xfc004b50>
 8006130:	88c0100c 	andi	r3,r17,64
 8006134:	1800e926 	beq	r3,zero,80064dc <___svfprintf_internal_r+0x1a3c>
 8006138:	dac02d17 	ldw	r11,180(sp)
 800613c:	14c0000b 	ldhu	r19,0(r2)
 8006140:	0039883a 	mov	fp,zero
 8006144:	5ac00104 	addi	r11,r11,4
 8006148:	dac02d15 	stw	r11,180(sp)
 800614c:	003d1406 	br	80055a0 <__alt_data_end+0xfc0055a0>
 8006150:	1c000007 	ldb	r16,0(r3)
 8006154:	1805883a 	mov	r2,r3
 8006158:	003aa706 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 800615c:	00800084 	movi	r2,2
 8006160:	003c7b06 	br	8005350 <__alt_data_end+0xfc005350>
 8006164:	010200b4 	movhi	r4,2050
 8006168:	2100a884 	addi	r4,r4,674
 800616c:	d9002b15 	stw	r4,172(sp)
 8006170:	dac02b17 	ldw	r11,172(sp)
 8006174:	1c87883a 	add	r3,r3,r18
 8006178:	10800044 	addi	r2,r2,1
 800617c:	42c00015 	stw	r11,0(r8)
 8006180:	44800115 	stw	r18,4(r8)
 8006184:	d8c02015 	stw	r3,128(sp)
 8006188:	d8801f15 	stw	r2,124(sp)
 800618c:	010001c4 	movi	r4,7
 8006190:	20bf4e16 	blt	r4,r2,8005ecc <__alt_data_end+0xfc005ecc>
 8006194:	42000204 	addi	r8,r8,8
 8006198:	003f5306 	br	8005ee8 <__alt_data_end+0xfc005ee8>
 800619c:	010200b4 	movhi	r4,2050
 80061a0:	2100a884 	addi	r4,r4,674
 80061a4:	d9002b15 	stw	r4,172(sp)
 80061a8:	003c0806 	br	80051cc <__alt_data_end+0xfc0051cc>
 80061ac:	d9002f17 	ldw	r4,188(sp)
 80061b0:	b80b883a 	mov	r5,r23
 80061b4:	b00d883a 	mov	r6,r22
 80061b8:	800d4e80 	call	800d4e8 <__ssprint_r>
 80061bc:	103b001e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80061c0:	d8c02017 	ldw	r3,128(sp)
 80061c4:	da000404 	addi	r8,sp,16
 80061c8:	003dc606 	br	80058e4 <__alt_data_end+0xfc0058e4>
 80061cc:	d8801f17 	ldw	r2,124(sp)
 80061d0:	030200b4 	movhi	r12,2050
 80061d4:	01000044 	movi	r4,1
 80061d8:	18c00044 	addi	r3,r3,1
 80061dc:	10800044 	addi	r2,r2,1
 80061e0:	6300a804 	addi	r12,r12,672
 80061e4:	41000115 	stw	r4,4(r8)
 80061e8:	43000015 	stw	r12,0(r8)
 80061ec:	d8c02015 	stw	r3,128(sp)
 80061f0:	d8801f15 	stw	r2,124(sp)
 80061f4:	010001c4 	movi	r4,7
 80061f8:	2080ad16 	blt	r4,r2,80064b0 <___svfprintf_internal_r+0x1a10>
 80061fc:	42000204 	addi	r8,r8,8
 8006200:	8000041e 	bne	r16,zero,8006214 <___svfprintf_internal_r+0x1774>
 8006204:	dac03317 	ldw	r11,204(sp)
 8006208:	5800021e 	bne	r11,zero,8006214 <___svfprintf_internal_r+0x1774>
 800620c:	8880004c 	andi	r2,r17,1
 8006210:	103c0526 	beq	r2,zero,8005228 <__alt_data_end+0xfc005228>
 8006214:	db003917 	ldw	r12,228(sp)
 8006218:	d8801f17 	ldw	r2,124(sp)
 800621c:	dac03517 	ldw	r11,212(sp)
 8006220:	1b07883a 	add	r3,r3,r12
 8006224:	10800044 	addi	r2,r2,1
 8006228:	42c00015 	stw	r11,0(r8)
 800622c:	43000115 	stw	r12,4(r8)
 8006230:	d8c02015 	stw	r3,128(sp)
 8006234:	d8801f15 	stw	r2,124(sp)
 8006238:	010001c4 	movi	r4,7
 800623c:	20818816 	blt	r4,r2,8006860 <___svfprintf_internal_r+0x1dc0>
 8006240:	42000204 	addi	r8,r8,8
 8006244:	0421c83a 	sub	r16,zero,r16
 8006248:	0400bc0e 	bge	zero,r16,800653c <___svfprintf_internal_r+0x1a9c>
 800624c:	04800404 	movi	r18,16
 8006250:	9400f80e 	bge	r18,r16,8006634 <___svfprintf_internal_r+0x1b94>
 8006254:	010200b4 	movhi	r4,2050
 8006258:	2100a884 	addi	r4,r4,674
 800625c:	d9002b15 	stw	r4,172(sp)
 8006260:	054001c4 	movi	r21,7
 8006264:	dcc02f17 	ldw	r19,188(sp)
 8006268:	00000306 	br	8006278 <___svfprintf_internal_r+0x17d8>
 800626c:	42000204 	addi	r8,r8,8
 8006270:	843ffc04 	addi	r16,r16,-16
 8006274:	9400f20e 	bge	r18,r16,8006640 <___svfprintf_internal_r+0x1ba0>
 8006278:	18c00404 	addi	r3,r3,16
 800627c:	10800044 	addi	r2,r2,1
 8006280:	45000015 	stw	r20,0(r8)
 8006284:	44800115 	stw	r18,4(r8)
 8006288:	d8c02015 	stw	r3,128(sp)
 800628c:	d8801f15 	stw	r2,124(sp)
 8006290:	a8bff60e 	bge	r21,r2,800626c <__alt_data_end+0xfc00626c>
 8006294:	9809883a 	mov	r4,r19
 8006298:	b80b883a 	mov	r5,r23
 800629c:	b00d883a 	mov	r6,r22
 80062a0:	800d4e80 	call	800d4e8 <__ssprint_r>
 80062a4:	103ac61e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80062a8:	d8c02017 	ldw	r3,128(sp)
 80062ac:	d8801f17 	ldw	r2,124(sp)
 80062b0:	da000404 	addi	r8,sp,16
 80062b4:	003fee06 	br	8006270 <__alt_data_end+0xfc006270>
 80062b8:	db002e17 	ldw	r12,184(sp)
 80062bc:	1805883a 	mov	r2,r3
 80062c0:	dac02d15 	stw	r11,180(sp)
 80062c4:	0319c83a 	sub	r12,zero,r12
 80062c8:	db002e15 	stw	r12,184(sp)
 80062cc:	003ad106 	br	8004e14 <__alt_data_end+0xfc004e14>
 80062d0:	18800044 	addi	r2,r3,1
 80062d4:	8c400814 	ori	r17,r17,32
 80062d8:	1c000047 	ldb	r16,1(r3)
 80062dc:	003a4606 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 80062e0:	d9002f17 	ldw	r4,188(sp)
 80062e4:	b80b883a 	mov	r5,r23
 80062e8:	b00d883a 	mov	r6,r22
 80062ec:	800d4e80 	call	800d4e8 <__ssprint_r>
 80062f0:	103ab31e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80062f4:	d8c02017 	ldw	r3,128(sp)
 80062f8:	da000404 	addi	r8,sp,16
 80062fc:	003d8a06 	br	8005928 <__alt_data_end+0xfc005928>
 8006300:	057ff7c4 	movi	r21,-33
 8006304:	00bfffc4 	movi	r2,-1
 8006308:	856a703a 	and	r21,r16,r21
 800630c:	48807126 	beq	r9,r2,80064d4 <___svfprintf_internal_r+0x1a34>
 8006310:	008011c4 	movi	r2,71
 8006314:	a8814f26 	beq	r21,r2,8006854 <___svfprintf_internal_r+0x1db4>
 8006318:	db003817 	ldw	r12,224(sp)
 800631c:	8ac04014 	ori	r11,r17,256
 8006320:	dac02d15 	stw	r11,180(sp)
 8006324:	60015816 	blt	r12,zero,8006888 <___svfprintf_internal_r+0x1de8>
 8006328:	dc803817 	ldw	r18,224(sp)
 800632c:	d8002a05 	stb	zero,168(sp)
 8006330:	00801984 	movi	r2,102
 8006334:	80808c26 	beq	r16,r2,8006568 <___svfprintf_internal_r+0x1ac8>
 8006338:	00801184 	movi	r2,70
 800633c:	80808a26 	beq	r16,r2,8006568 <___svfprintf_internal_r+0x1ac8>
 8006340:	00801144 	movi	r2,69
 8006344:	a8815426 	beq	r21,r2,8006898 <___svfprintf_internal_r+0x1df8>
 8006348:	4839883a 	mov	fp,r9
 800634c:	d8802604 	addi	r2,sp,152
 8006350:	d8800115 	stw	r2,4(sp)
 8006354:	d9002f17 	ldw	r4,188(sp)
 8006358:	d8802504 	addi	r2,sp,148
 800635c:	d9403717 	ldw	r5,220(sp)
 8006360:	d8800215 	stw	r2,8(sp)
 8006364:	d8802104 	addi	r2,sp,132
 8006368:	df000015 	stw	fp,0(sp)
 800636c:	d8800315 	stw	r2,12(sp)
 8006370:	900d883a 	mov	r6,r18
 8006374:	01c00084 	movi	r7,2
 8006378:	da004015 	stw	r8,256(sp)
 800637c:	da403f15 	stw	r9,252(sp)
 8006380:	8008d800 	call	8008d80 <_dtoa_r>
 8006384:	d8803115 	stw	r2,196(sp)
 8006388:	008019c4 	movi	r2,103
 800638c:	da004017 	ldw	r8,256(sp)
 8006390:	da403f17 	ldw	r9,252(sp)
 8006394:	80800226 	beq	r16,r2,80063a0 <___svfprintf_internal_r+0x1900>
 8006398:	008011c4 	movi	r2,71
 800639c:	8080841e 	bne	r16,r2,80065b0 <___svfprintf_internal_r+0x1b10>
 80063a0:	8880004c 	andi	r2,r17,1
 80063a4:	10015126 	beq	r2,zero,80068ec <___svfprintf_internal_r+0x1e4c>
 80063a8:	db003117 	ldw	r12,196(sp)
 80063ac:	6715883a 	add	r10,r12,fp
 80063b0:	d9003717 	ldw	r4,220(sp)
 80063b4:	900b883a 	mov	r5,r18
 80063b8:	000d883a 	mov	r6,zero
 80063bc:	000f883a 	mov	r7,zero
 80063c0:	da004015 	stw	r8,256(sp)
 80063c4:	da403f15 	stw	r9,252(sp)
 80063c8:	da803e15 	stw	r10,248(sp)
 80063cc:	8011a2c0 	call	8011a2c <__eqdf2>
 80063d0:	da004017 	ldw	r8,256(sp)
 80063d4:	da403f17 	ldw	r9,252(sp)
 80063d8:	da803e17 	ldw	r10,248(sp)
 80063dc:	1000d926 	beq	r2,zero,8006744 <___svfprintf_internal_r+0x1ca4>
 80063e0:	d8802117 	ldw	r2,132(sp)
 80063e4:	1280062e 	bgeu	r2,r10,8006400 <___svfprintf_internal_r+0x1960>
 80063e8:	01000c04 	movi	r4,48
 80063ec:	10c00044 	addi	r3,r2,1
 80063f0:	d8c02115 	stw	r3,132(sp)
 80063f4:	11000005 	stb	r4,0(r2)
 80063f8:	d8802117 	ldw	r2,132(sp)
 80063fc:	12bffb36 	bltu	r2,r10,80063ec <__alt_data_end+0xfc0063ec>
 8006400:	db003117 	ldw	r12,196(sp)
 8006404:	1305c83a 	sub	r2,r2,r12
 8006408:	d8803315 	stw	r2,204(sp)
 800640c:	008011c4 	movi	r2,71
 8006410:	a880b626 	beq	r21,r2,80066ec <___svfprintf_internal_r+0x1c4c>
 8006414:	00801944 	movi	r2,101
 8006418:	14017e0e 	bge	r2,r16,8006a14 <___svfprintf_internal_r+0x1f74>
 800641c:	00801984 	movi	r2,102
 8006420:	80812826 	beq	r16,r2,80068c4 <___svfprintf_internal_r+0x1e24>
 8006424:	db002617 	ldw	r12,152(sp)
 8006428:	db003415 	stw	r12,208(sp)
 800642c:	db003417 	ldw	r12,208(sp)
 8006430:	dac03317 	ldw	r11,204(sp)
 8006434:	62c11a16 	blt	r12,r11,80068a0 <___svfprintf_internal_r+0x1e00>
 8006438:	8c40004c 	andi	r17,r17,1
 800643c:	88013d1e 	bne	r17,zero,8006934 <___svfprintf_internal_r+0x1e94>
 8006440:	6005883a 	mov	r2,r12
 8006444:	60012716 	blt	r12,zero,80068e4 <___svfprintf_internal_r+0x1e44>
 8006448:	dc803417 	ldw	r18,208(sp)
 800644c:	df002a07 	ldb	fp,168(sp)
 8006450:	e000b01e 	bne	fp,zero,8006714 <___svfprintf_internal_r+0x1c74>
 8006454:	dc402d17 	ldw	r17,180(sp)
 8006458:	dd402783 	ldbu	r21,158(sp)
 800645c:	d8802a15 	stw	r2,168(sp)
 8006460:	dcc02d15 	stw	r19,180(sp)
 8006464:	d8003215 	stw	zero,200(sp)
 8006468:	003ac606 	br	8004f84 <__alt_data_end+0xfc004f84>
 800646c:	008200b4 	movhi	r2,2050
 8006470:	10809804 	addi	r2,r2,608
 8006474:	d8803115 	stw	r2,196(sp)
 8006478:	003be506 	br	8005410 <__alt_data_end+0xfc005410>
 800647c:	d9002f17 	ldw	r4,188(sp)
 8006480:	04001004 	movi	r16,64
 8006484:	800b883a 	mov	r5,r16
 8006488:	8003ff40 	call	8003ff4 <_malloc_r>
 800648c:	b8800015 	stw	r2,0(r23)
 8006490:	b8800415 	stw	r2,16(r23)
 8006494:	10016126 	beq	r2,zero,8006a1c <___svfprintf_internal_r+0x1f7c>
 8006498:	bc000515 	stw	r16,20(r23)
 800649c:	00399a06 	br	8004b08 <__alt_data_end+0xfc004b08>
 80064a0:	008200b4 	movhi	r2,2050
 80064a4:	10809b04 	addi	r2,r2,620
 80064a8:	d8803115 	stw	r2,196(sp)
 80064ac:	003f0406 	br	80060c0 <__alt_data_end+0xfc0060c0>
 80064b0:	d9002f17 	ldw	r4,188(sp)
 80064b4:	b80b883a 	mov	r5,r23
 80064b8:	b00d883a 	mov	r6,r22
 80064bc:	800d4e80 	call	800d4e8 <__ssprint_r>
 80064c0:	103a3f1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 80064c4:	dc002617 	ldw	r16,152(sp)
 80064c8:	d8c02017 	ldw	r3,128(sp)
 80064cc:	da000404 	addi	r8,sp,16
 80064d0:	003f4b06 	br	8006200 <__alt_data_end+0xfc006200>
 80064d4:	02400184 	movi	r9,6
 80064d8:	003f8f06 	br	8006318 <__alt_data_end+0xfc006318>
 80064dc:	db002d17 	ldw	r12,180(sp)
 80064e0:	14c00017 	ldw	r19,0(r2)
 80064e4:	0039883a 	mov	fp,zero
 80064e8:	63000104 	addi	r12,r12,4
 80064ec:	db002d15 	stw	r12,180(sp)
 80064f0:	003c2b06 	br	80055a0 <__alt_data_end+0xfc0055a0>
 80064f4:	d8c03117 	ldw	r3,196(sp)
 80064f8:	b0e5c83a 	sub	r18,r22,r3
 80064fc:	003a9c06 	br	8004f70 <__alt_data_end+0xfc004f70>
 8006500:	da004015 	stw	r8,256(sp)
 8006504:	8004a080 	call	8004a08 <strlen>
 8006508:	1025883a 	mov	r18,r2
 800650c:	da004017 	ldw	r8,256(sp)
 8006510:	903c450e 	bge	r18,zero,8005628 <__alt_data_end+0xfc005628>
 8006514:	0005883a 	mov	r2,zero
 8006518:	003c4306 	br	8005628 <__alt_data_end+0xfc005628>
 800651c:	d9002f17 	ldw	r4,188(sp)
 8006520:	b80b883a 	mov	r5,r23
 8006524:	b00d883a 	mov	r6,r22
 8006528:	800d4e80 	call	800d4e8 <__ssprint_r>
 800652c:	103a241e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006530:	d8c02017 	ldw	r3,128(sp)
 8006534:	d8801f17 	ldw	r2,124(sp)
 8006538:	da000404 	addi	r8,sp,16
 800653c:	db003317 	ldw	r12,204(sp)
 8006540:	dac03117 	ldw	r11,196(sp)
 8006544:	10800044 	addi	r2,r2,1
 8006548:	60c7883a 	add	r3,r12,r3
 800654c:	42c00015 	stw	r11,0(r8)
 8006550:	43000115 	stw	r12,4(r8)
 8006554:	d8c02015 	stw	r3,128(sp)
 8006558:	d8801f15 	stw	r2,124(sp)
 800655c:	010001c4 	movi	r4,7
 8006560:	20bb300e 	bge	r4,r2,8005224 <__alt_data_end+0xfc005224>
 8006564:	003d9c06 	br	8005bd8 <__alt_data_end+0xfc005bd8>
 8006568:	d8802604 	addi	r2,sp,152
 800656c:	d8800115 	stw	r2,4(sp)
 8006570:	d9002f17 	ldw	r4,188(sp)
 8006574:	d8802504 	addi	r2,sp,148
 8006578:	d9403717 	ldw	r5,220(sp)
 800657c:	d8800215 	stw	r2,8(sp)
 8006580:	d8802104 	addi	r2,sp,132
 8006584:	da400015 	stw	r9,0(sp)
 8006588:	d8800315 	stw	r2,12(sp)
 800658c:	900d883a 	mov	r6,r18
 8006590:	01c000c4 	movi	r7,3
 8006594:	da004015 	stw	r8,256(sp)
 8006598:	da403f15 	stw	r9,252(sp)
 800659c:	8008d800 	call	8008d80 <_dtoa_r>
 80065a0:	da403f17 	ldw	r9,252(sp)
 80065a4:	da004017 	ldw	r8,256(sp)
 80065a8:	d8803115 	stw	r2,196(sp)
 80065ac:	4839883a 	mov	fp,r9
 80065b0:	dac03117 	ldw	r11,196(sp)
 80065b4:	00801184 	movi	r2,70
 80065b8:	5f15883a 	add	r10,r11,fp
 80065bc:	a8bf7c1e 	bne	r21,r2,80063b0 <__alt_data_end+0xfc0063b0>
 80065c0:	59000007 	ldb	r4,0(r11)
 80065c4:	00800c04 	movi	r2,48
 80065c8:	2080ca26 	beq	r4,r2,80068f4 <___svfprintf_internal_r+0x1e54>
 80065cc:	d8c02617 	ldw	r3,152(sp)
 80065d0:	50d5883a 	add	r10,r10,r3
 80065d4:	003f7606 	br	80063b0 <__alt_data_end+0xfc0063b0>
 80065d8:	010200b4 	movhi	r4,2050
 80065dc:	2100ac84 	addi	r4,r4,690
 80065e0:	d9003615 	stw	r4,216(sp)
 80065e4:	003aa606 	br	8005080 <__alt_data_end+0xfc005080>
 80065e8:	0025883a 	mov	r18,zero
 80065ec:	003dc306 	br	8005cfc <__alt_data_end+0xfc005cfc>
 80065f0:	d9002f17 	ldw	r4,188(sp)
 80065f4:	b80b883a 	mov	r5,r23
 80065f8:	b00d883a 	mov	r6,r22
 80065fc:	800d4e80 	call	800d4e8 <__ssprint_r>
 8006600:	1039ef1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006604:	d8c02017 	ldw	r3,128(sp)
 8006608:	da000404 	addi	r8,sp,16
 800660c:	003dba06 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8006610:	d9002f17 	ldw	r4,188(sp)
 8006614:	b80b883a 	mov	r5,r23
 8006618:	b00d883a 	mov	r6,r22
 800661c:	800d4e80 	call	800d4e8 <__ssprint_r>
 8006620:	1039e71e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006624:	d8802617 	ldw	r2,152(sp)
 8006628:	d8c02017 	ldw	r3,128(sp)
 800662c:	da000404 	addi	r8,sp,16
 8006630:	003e4106 	br	8005f38 <__alt_data_end+0xfc005f38>
 8006634:	030200b4 	movhi	r12,2050
 8006638:	6300a884 	addi	r12,r12,674
 800663c:	db002b15 	stw	r12,172(sp)
 8006640:	dac02b17 	ldw	r11,172(sp)
 8006644:	1c07883a 	add	r3,r3,r16
 8006648:	10800044 	addi	r2,r2,1
 800664c:	42c00015 	stw	r11,0(r8)
 8006650:	44000115 	stw	r16,4(r8)
 8006654:	d8c02015 	stw	r3,128(sp)
 8006658:	d8801f15 	stw	r2,124(sp)
 800665c:	010001c4 	movi	r4,7
 8006660:	20bfae16 	blt	r4,r2,800651c <__alt_data_end+0xfc00651c>
 8006664:	42000204 	addi	r8,r8,8
 8006668:	003fb406 	br	800653c <__alt_data_end+0xfc00653c>
 800666c:	0021883a 	mov	r16,zero
 8006670:	003e4306 	br	8005f80 <__alt_data_end+0xfc005f80>
 8006674:	d9002f17 	ldw	r4,188(sp)
 8006678:	b80b883a 	mov	r5,r23
 800667c:	b00d883a 	mov	r6,r22
 8006680:	800d4e80 	call	800d4e8 <__ssprint_r>
 8006684:	1039ce1e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006688:	d8802617 	ldw	r2,152(sp)
 800668c:	db003317 	ldw	r12,204(sp)
 8006690:	d8c02017 	ldw	r3,128(sp)
 8006694:	da000404 	addi	r8,sp,16
 8006698:	6085c83a 	sub	r2,r12,r2
 800669c:	003e3706 	br	8005f7c <__alt_data_end+0xfc005f7c>
 80066a0:	00800184 	movi	r2,6
 80066a4:	1240012e 	bgeu	r2,r9,80066ac <___svfprintf_internal_r+0x1c0c>
 80066a8:	1013883a 	mov	r9,r2
 80066ac:	4825883a 	mov	r18,r9
 80066b0:	4805883a 	mov	r2,r9
 80066b4:	4800a416 	blt	r9,zero,8006948 <___svfprintf_internal_r+0x1ea8>
 80066b8:	d8802a15 	stw	r2,168(sp)
 80066bc:	008200b4 	movhi	r2,2050
 80066c0:	1080a604 	addi	r2,r2,664
 80066c4:	d8803115 	stw	r2,196(sp)
 80066c8:	dcc02d15 	stw	r19,180(sp)
 80066cc:	d8003215 	stw	zero,200(sp)
 80066d0:	d8003415 	stw	zero,208(sp)
 80066d4:	0005883a 	mov	r2,zero
 80066d8:	003a3106 	br	8004fa0 <__alt_data_end+0xfc004fa0>
 80066dc:	030200b4 	movhi	r12,2050
 80066e0:	6300ac84 	addi	r12,r12,690
 80066e4:	db003615 	stw	r12,216(sp)
 80066e8:	003af406 	br	80052bc <__alt_data_end+0xfc0052bc>
 80066ec:	d8c02617 	ldw	r3,152(sp)
 80066f0:	00bfff44 	movi	r2,-3
 80066f4:	18801516 	blt	r3,r2,800674c <___svfprintf_internal_r+0x1cac>
 80066f8:	48c01416 	blt	r9,r3,800674c <___svfprintf_internal_r+0x1cac>
 80066fc:	d8c03415 	stw	r3,208(sp)
 8006700:	040019c4 	movi	r16,103
 8006704:	003f4906 	br	800642c <__alt_data_end+0xfc00642c>
 8006708:	05400b44 	movi	r21,45
 800670c:	dd402785 	stb	r21,158(sp)
 8006710:	003b3a06 	br	80053fc <__alt_data_end+0xfc0053fc>
 8006714:	00c00b44 	movi	r3,45
 8006718:	d8802a15 	stw	r2,168(sp)
 800671c:	dc402d17 	ldw	r17,180(sp)
 8006720:	d8c02785 	stb	r3,158(sp)
 8006724:	dcc02d15 	stw	r19,180(sp)
 8006728:	d8003215 	stw	zero,200(sp)
 800672c:	00800b44 	movi	r2,45
 8006730:	003a1806 	br	8004f94 <__alt_data_end+0xfc004f94>
 8006734:	010200b4 	movhi	r4,2050
 8006738:	2100a884 	addi	r4,r4,674
 800673c:	d9002b15 	stw	r4,172(sp)
 8006740:	003cc306 	br	8005a50 <__alt_data_end+0xfc005a50>
 8006744:	5005883a 	mov	r2,r10
 8006748:	003f2d06 	br	8006400 <__alt_data_end+0xfc006400>
 800674c:	843fff84 	addi	r16,r16,-2
 8006750:	1f3fffc4 	addi	fp,r3,-1
 8006754:	df002615 	stw	fp,152(sp)
 8006758:	dc0022c5 	stb	r16,139(sp)
 800675c:	e000a216 	blt	fp,zero,80069e8 <___svfprintf_internal_r+0x1f48>
 8006760:	00800ac4 	movi	r2,43
 8006764:	d8802305 	stb	r2,140(sp)
 8006768:	00800244 	movi	r2,9
 800676c:	1700820e 	bge	r2,fp,8006978 <___svfprintf_internal_r+0x1ed8>
 8006770:	dd4022c4 	addi	r21,sp,139
 8006774:	dc002b15 	stw	r16,172(sp)
 8006778:	8825883a 	mov	r18,r17
 800677c:	a821883a 	mov	r16,r21
 8006780:	4023883a 	mov	r17,r8
 8006784:	e009883a 	mov	r4,fp
 8006788:	01400284 	movi	r5,10
 800678c:	80110f40 	call	80110f4 <__modsi3>
 8006790:	10800c04 	addi	r2,r2,48
 8006794:	843fffc4 	addi	r16,r16,-1
 8006798:	e009883a 	mov	r4,fp
 800679c:	01400284 	movi	r5,10
 80067a0:	80800005 	stb	r2,0(r16)
 80067a4:	80110a00 	call	80110a0 <__divsi3>
 80067a8:	1039883a 	mov	fp,r2
 80067ac:	00800244 	movi	r2,9
 80067b0:	173ff416 	blt	r2,fp,8006784 <__alt_data_end+0xfc006784>
 80067b4:	8811883a 	mov	r8,r17
 80067b8:	e0800c04 	addi	r2,fp,48
 80067bc:	9023883a 	mov	r17,r18
 80067c0:	8025883a 	mov	r18,r16
 80067c4:	913fffc4 	addi	r4,r18,-1
 80067c8:	90bfffc5 	stb	r2,-1(r18)
 80067cc:	dc002b17 	ldw	r16,172(sp)
 80067d0:	25408e2e 	bgeu	r4,r21,8006a0c <___svfprintf_internal_r+0x1f6c>
 80067d4:	d9402384 	addi	r5,sp,142
 80067d8:	2c8bc83a 	sub	r5,r5,r18
 80067dc:	d8c02344 	addi	r3,sp,141
 80067e0:	a94b883a 	add	r5,r21,r5
 80067e4:	00000106 	br	80067ec <___svfprintf_internal_r+0x1d4c>
 80067e8:	20800003 	ldbu	r2,0(r4)
 80067ec:	18800005 	stb	r2,0(r3)
 80067f0:	18c00044 	addi	r3,r3,1
 80067f4:	21000044 	addi	r4,r4,1
 80067f8:	197ffb1e 	bne	r3,r5,80067e8 <__alt_data_end+0xfc0067e8>
 80067fc:	d8802304 	addi	r2,sp,140
 8006800:	1485c83a 	sub	r2,r2,r18
 8006804:	d8c02344 	addi	r3,sp,141
 8006808:	1885883a 	add	r2,r3,r2
 800680c:	dac03317 	ldw	r11,204(sp)
 8006810:	156bc83a 	sub	r21,r2,r21
 8006814:	dd403a15 	stw	r21,232(sp)
 8006818:	00800044 	movi	r2,1
 800681c:	5d65883a 	add	r18,r11,r21
 8006820:	12c0770e 	bge	r2,r11,8006a00 <___svfprintf_internal_r+0x1f60>
 8006824:	94800044 	addi	r18,r18,1
 8006828:	9005883a 	mov	r2,r18
 800682c:	90007216 	blt	r18,zero,80069f8 <___svfprintf_internal_r+0x1f58>
 8006830:	d8003415 	stw	zero,208(sp)
 8006834:	003f0506 	br	800644c <__alt_data_end+0xfc00644c>
 8006838:	da402a15 	stw	r9,168(sp)
 800683c:	dd402783 	ldbu	r21,158(sp)
 8006840:	4825883a 	mov	r18,r9
 8006844:	dcc02d15 	stw	r19,180(sp)
 8006848:	d8003215 	stw	zero,200(sp)
 800684c:	d8003415 	stw	zero,208(sp)
 8006850:	0039cc06 	br	8004f84 <__alt_data_end+0xfc004f84>
 8006854:	483eb01e 	bne	r9,zero,8006318 <__alt_data_end+0xfc006318>
 8006858:	9013883a 	mov	r9,r18
 800685c:	003eae06 	br	8006318 <__alt_data_end+0xfc006318>
 8006860:	d9002f17 	ldw	r4,188(sp)
 8006864:	b80b883a 	mov	r5,r23
 8006868:	b00d883a 	mov	r6,r22
 800686c:	800d4e80 	call	800d4e8 <__ssprint_r>
 8006870:	1039531e 	bne	r2,zero,8004dc0 <__alt_data_end+0xfc004dc0>
 8006874:	dc002617 	ldw	r16,152(sp)
 8006878:	d8c02017 	ldw	r3,128(sp)
 800687c:	d8801f17 	ldw	r2,124(sp)
 8006880:	da000404 	addi	r8,sp,16
 8006884:	003e6f06 	br	8006244 <__alt_data_end+0xfc006244>
 8006888:	00c00b44 	movi	r3,45
 800688c:	64a0003c 	xorhi	r18,r12,32768
 8006890:	d8c02a05 	stb	r3,168(sp)
 8006894:	003ea606 	br	8006330 <__alt_data_end+0xfc006330>
 8006898:	4f000044 	addi	fp,r9,1
 800689c:	003eab06 	br	800634c <__alt_data_end+0xfc00634c>
 80068a0:	d8c03417 	ldw	r3,208(sp)
 80068a4:	00c0410e 	bge	zero,r3,80069ac <___svfprintf_internal_r+0x1f0c>
 80068a8:	04800044 	movi	r18,1
 80068ac:	dac03317 	ldw	r11,204(sp)
 80068b0:	92e5883a 	add	r18,r18,r11
 80068b4:	9005883a 	mov	r2,r18
 80068b8:	903ee40e 	bge	r18,zero,800644c <__alt_data_end+0xfc00644c>
 80068bc:	0005883a 	mov	r2,zero
 80068c0:	003ee206 	br	800644c <__alt_data_end+0xfc00644c>
 80068c4:	d8c02617 	ldw	r3,152(sp)
 80068c8:	d8c03415 	stw	r3,208(sp)
 80068cc:	00c0310e 	bge	zero,r3,8006994 <___svfprintf_internal_r+0x1ef4>
 80068d0:	48001f1e 	bne	r9,zero,8006950 <___svfprintf_internal_r+0x1eb0>
 80068d4:	8c40004c 	andi	r17,r17,1
 80068d8:	88001d1e 	bne	r17,zero,8006950 <___svfprintf_internal_r+0x1eb0>
 80068dc:	1805883a 	mov	r2,r3
 80068e0:	183ed90e 	bge	r3,zero,8006448 <__alt_data_end+0xfc006448>
 80068e4:	0005883a 	mov	r2,zero
 80068e8:	003ed706 	br	8006448 <__alt_data_end+0xfc006448>
 80068ec:	d8802117 	ldw	r2,132(sp)
 80068f0:	003ec306 	br	8006400 <__alt_data_end+0xfc006400>
 80068f4:	d9003717 	ldw	r4,220(sp)
 80068f8:	900b883a 	mov	r5,r18
 80068fc:	000d883a 	mov	r6,zero
 8006900:	000f883a 	mov	r7,zero
 8006904:	da004015 	stw	r8,256(sp)
 8006908:	da403f15 	stw	r9,252(sp)
 800690c:	da803e15 	stw	r10,248(sp)
 8006910:	8011a2c0 	call	8011a2c <__eqdf2>
 8006914:	da004017 	ldw	r8,256(sp)
 8006918:	da403f17 	ldw	r9,252(sp)
 800691c:	da803e17 	ldw	r10,248(sp)
 8006920:	103f2a26 	beq	r2,zero,80065cc <__alt_data_end+0xfc0065cc>
 8006924:	00800044 	movi	r2,1
 8006928:	1707c83a 	sub	r3,r2,fp
 800692c:	d8c02615 	stw	r3,152(sp)
 8006930:	003f2706 	br	80065d0 <__alt_data_end+0xfc0065d0>
 8006934:	db003417 	ldw	r12,208(sp)
 8006938:	64800044 	addi	r18,r12,1
 800693c:	9005883a 	mov	r2,r18
 8006940:	903ec20e 	bge	r18,zero,800644c <__alt_data_end+0xfc00644c>
 8006944:	003fdd06 	br	80068bc <__alt_data_end+0xfc0068bc>
 8006948:	0005883a 	mov	r2,zero
 800694c:	003f5a06 	br	80066b8 <__alt_data_end+0xfc0066b8>
 8006950:	dac03417 	ldw	r11,208(sp)
 8006954:	4a400044 	addi	r9,r9,1
 8006958:	5a65883a 	add	r18,r11,r9
 800695c:	9005883a 	mov	r2,r18
 8006960:	903eba0e 	bge	r18,zero,800644c <__alt_data_end+0xfc00644c>
 8006964:	003fd506 	br	80068bc <__alt_data_end+0xfc0068bc>
 8006968:	008200b4 	movhi	r2,2050
 800696c:	1080a884 	addi	r2,r2,674
 8006970:	d8802b15 	stw	r2,172(sp)
 8006974:	003d2906 	br	8005e1c <__alt_data_end+0xfc005e1c>
 8006978:	00800c04 	movi	r2,48
 800697c:	e0c00c04 	addi	r3,fp,48
 8006980:	d8802345 	stb	r2,141(sp)
 8006984:	d8c02385 	stb	r3,142(sp)
 8006988:	d88023c4 	addi	r2,sp,143
 800698c:	dd4022c4 	addi	r21,sp,139
 8006990:	003f9e06 	br	800680c <__alt_data_end+0xfc00680c>
 8006994:	4800081e 	bne	r9,zero,80069b8 <___svfprintf_internal_r+0x1f18>
 8006998:	8c40004c 	andi	r17,r17,1
 800699c:	8800061e 	bne	r17,zero,80069b8 <___svfprintf_internal_r+0x1f18>
 80069a0:	00800044 	movi	r2,1
 80069a4:	1025883a 	mov	r18,r2
 80069a8:	003ea806 	br	800644c <__alt_data_end+0xfc00644c>
 80069ac:	04800084 	movi	r18,2
 80069b0:	90e5c83a 	sub	r18,r18,r3
 80069b4:	003fbd06 	br	80068ac <__alt_data_end+0xfc0068ac>
 80069b8:	4c800084 	addi	r18,r9,2
 80069bc:	9005883a 	mov	r2,r18
 80069c0:	903ea20e 	bge	r18,zero,800644c <__alt_data_end+0xfc00644c>
 80069c4:	003fbd06 	br	80068bc <__alt_data_end+0xfc0068bc>
 80069c8:	dac02d17 	ldw	r11,180(sp)
 80069cc:	5a400017 	ldw	r9,0(r11)
 80069d0:	5ac00104 	addi	r11,r11,4
 80069d4:	dac02d15 	stw	r11,180(sp)
 80069d8:	483e3f0e 	bge	r9,zero,80062d8 <__alt_data_end+0xfc0062d8>
 80069dc:	027fffc4 	movi	r9,-1
 80069e0:	1c000047 	ldb	r16,1(r3)
 80069e4:	00388406 	br	8004bf8 <__alt_data_end+0xfc004bf8>
 80069e8:	00800b44 	movi	r2,45
 80069ec:	0739c83a 	sub	fp,zero,fp
 80069f0:	d8802305 	stb	r2,140(sp)
 80069f4:	003f5c06 	br	8006768 <__alt_data_end+0xfc006768>
 80069f8:	0005883a 	mov	r2,zero
 80069fc:	003f8c06 	br	8006830 <__alt_data_end+0xfc006830>
 8006a00:	88a2703a 	and	r17,r17,r2
 8006a04:	883f8826 	beq	r17,zero,8006828 <__alt_data_end+0xfc006828>
 8006a08:	003f8606 	br	8006824 <__alt_data_end+0xfc006824>
 8006a0c:	d8802344 	addi	r2,sp,141
 8006a10:	003f7e06 	br	800680c <__alt_data_end+0xfc00680c>
 8006a14:	d8c02617 	ldw	r3,152(sp)
 8006a18:	003f4d06 	br	8006750 <__alt_data_end+0xfc006750>
 8006a1c:	dac02f17 	ldw	r11,188(sp)
 8006a20:	00800304 	movi	r2,12
 8006a24:	58800015 	stw	r2,0(r11)
 8006a28:	00bfffc4 	movi	r2,-1
 8006a2c:	0038e806 	br	8004dd0 <__alt_data_end+0xfc004dd0>

08006a30 <___vfprintf_internal_r>:
 8006a30:	defeb604 	addi	sp,sp,-1320
 8006a34:	dfc14915 	stw	ra,1316(sp)
 8006a38:	ddc14715 	stw	r23,1308(sp)
 8006a3c:	dd814615 	stw	r22,1304(sp)
 8006a40:	282f883a 	mov	r23,r5
 8006a44:	202d883a 	mov	r22,r4
 8006a48:	d9812a15 	stw	r6,1192(sp)
 8006a4c:	d9c12d15 	stw	r7,1204(sp)
 8006a50:	df014815 	stw	fp,1312(sp)
 8006a54:	dd414515 	stw	r21,1300(sp)
 8006a58:	dd014415 	stw	r20,1296(sp)
 8006a5c:	dcc14315 	stw	r19,1292(sp)
 8006a60:	dc814215 	stw	r18,1288(sp)
 8006a64:	dc414115 	stw	r17,1284(sp)
 8006a68:	dc014015 	stw	r16,1280(sp)
 8006a6c:	800b5740 	call	800b574 <_localeconv_r>
 8006a70:	10800017 	ldw	r2,0(r2)
 8006a74:	1009883a 	mov	r4,r2
 8006a78:	d8813515 	stw	r2,1236(sp)
 8006a7c:	8004a080 	call	8004a08 <strlen>
 8006a80:	d8813815 	stw	r2,1248(sp)
 8006a84:	b0000226 	beq	r22,zero,8006a90 <___vfprintf_internal_r+0x60>
 8006a88:	b0800e17 	ldw	r2,56(r22)
 8006a8c:	10010426 	beq	r2,zero,8006ea0 <___vfprintf_internal_r+0x470>
 8006a90:	b8c0030b 	ldhu	r3,12(r23)
 8006a94:	1908000c 	andi	r4,r3,8192
 8006a98:	1805883a 	mov	r2,r3
 8006a9c:	2000071e 	bne	r4,zero,8006abc <___vfprintf_internal_r+0x8c>
 8006aa0:	b9001917 	ldw	r4,100(r23)
 8006aa4:	18880014 	ori	r2,r3,8192
 8006aa8:	00f7ffc4 	movi	r3,-8193
 8006aac:	20c8703a 	and	r4,r4,r3
 8006ab0:	b880030d 	sth	r2,12(r23)
 8006ab4:	1007883a 	mov	r3,r2
 8006ab8:	b9001915 	stw	r4,100(r23)
 8006abc:	1100020c 	andi	r4,r2,8
 8006ac0:	2000a726 	beq	r4,zero,8006d60 <___vfprintf_internal_r+0x330>
 8006ac4:	b9000417 	ldw	r4,16(r23)
 8006ac8:	2000a526 	beq	r4,zero,8006d60 <___vfprintf_internal_r+0x330>
 8006acc:	1080068c 	andi	r2,r2,26
 8006ad0:	01000284 	movi	r4,10
 8006ad4:	1100ab26 	beq	r2,r4,8006d84 <___vfprintf_internal_r+0x354>
 8006ad8:	dac10e04 	addi	r11,sp,1080
 8006adc:	db010dc4 	addi	r12,sp,1079
 8006ae0:	d8800404 	addi	r2,sp,16
 8006ae4:	050200b4 	movhi	r20,2050
 8006ae8:	dac12815 	stw	r11,1184(sp)
 8006aec:	5b17c83a 	sub	r11,r11,r12
 8006af0:	a500b084 	addi	r20,r20,706
 8006af4:	db012915 	stw	r12,1188(sp)
 8006af8:	d8811e15 	stw	r2,1144(sp)
 8006afc:	d8012015 	stw	zero,1152(sp)
 8006b00:	d8011f15 	stw	zero,1148(sp)
 8006b04:	d8013315 	stw	zero,1228(sp)
 8006b08:	d8013715 	stw	zero,1244(sp)
 8006b0c:	d8013915 	stw	zero,1252(sp)
 8006b10:	d8013b15 	stw	zero,1260(sp)
 8006b14:	d8013a15 	stw	zero,1256(sp)
 8006b18:	d8012f15 	stw	zero,1212(sp)
 8006b1c:	1011883a 	mov	r8,r2
 8006b20:	dac13c15 	stw	r11,1264(sp)
 8006b24:	db012a17 	ldw	r12,1192(sp)
 8006b28:	60800007 	ldb	r2,0(r12)
 8006b2c:	1000df26 	beq	r2,zero,8006eac <___vfprintf_internal_r+0x47c>
 8006b30:	00c00944 	movi	r3,37
 8006b34:	10c0dd26 	beq	r2,r3,8006eac <___vfprintf_internal_r+0x47c>
 8006b38:	6021883a 	mov	r16,r12
 8006b3c:	00000106 	br	8006b44 <___vfprintf_internal_r+0x114>
 8006b40:	10c08426 	beq	r2,r3,8006d54 <___vfprintf_internal_r+0x324>
 8006b44:	84000044 	addi	r16,r16,1
 8006b48:	80800007 	ldb	r2,0(r16)
 8006b4c:	103ffc1e 	bne	r2,zero,8006b40 <__alt_data_end+0xfc006b40>
 8006b50:	dac12a17 	ldw	r11,1192(sp)
 8006b54:	82e3c83a 	sub	r17,r16,r11
 8006b58:	88000f26 	beq	r17,zero,8006b98 <___vfprintf_internal_r+0x168>
 8006b5c:	d8c12017 	ldw	r3,1152(sp)
 8006b60:	d8811f17 	ldw	r2,1148(sp)
 8006b64:	dac12a17 	ldw	r11,1192(sp)
 8006b68:	1c47883a 	add	r3,r3,r17
 8006b6c:	10800044 	addi	r2,r2,1
 8006b70:	d8c12015 	stw	r3,1152(sp)
 8006b74:	42c00015 	stw	r11,0(r8)
 8006b78:	44400115 	stw	r17,4(r8)
 8006b7c:	d8811f15 	stw	r2,1148(sp)
 8006b80:	00c001c4 	movi	r3,7
 8006b84:	1880b416 	blt	r3,r2,8006e58 <___vfprintf_internal_r+0x428>
 8006b88:	42000204 	addi	r8,r8,8
 8006b8c:	db012f17 	ldw	r12,1212(sp)
 8006b90:	6459883a 	add	r12,r12,r17
 8006b94:	db012f15 	stw	r12,1212(sp)
 8006b98:	80800007 	ldb	r2,0(r16)
 8006b9c:	1000b526 	beq	r2,zero,8006e74 <___vfprintf_internal_r+0x444>
 8006ba0:	80800044 	addi	r2,r16,1
 8006ba4:	84000047 	ldb	r16,1(r16)
 8006ba8:	d8012785 	stb	zero,1182(sp)
 8006bac:	000d883a 	mov	r6,zero
 8006bb0:	027fffc4 	movi	r9,-1
 8006bb4:	d8012e15 	stw	zero,1208(sp)
 8006bb8:	0023883a 	mov	r17,zero
 8006bbc:	01001604 	movi	r4,88
 8006bc0:	01400244 	movi	r5,9
 8006bc4:	02800a84 	movi	r10,42
 8006bc8:	01c01b04 	movi	r7,108
 8006bcc:	10c00044 	addi	r3,r2,1
 8006bd0:	80bff804 	addi	r2,r16,-32
 8006bd4:	2082f236 	bltu	r4,r2,80077a0 <___vfprintf_internal_r+0xd70>
 8006bd8:	100490ba 	slli	r2,r2,2
 8006bdc:	02c20034 	movhi	r11,2048
 8006be0:	5adafc04 	addi	r11,r11,27632
 8006be4:	12c5883a 	add	r2,r2,r11
 8006be8:	10800017 	ldw	r2,0(r2)
 8006bec:	1000683a 	jmp	r2
 8006bf0:	080075e8 	cmpgeui	zero,at,471
 8006bf4:	080077a0 	cmpeqi	zero,at,478
 8006bf8:	080077a0 	cmpeqi	zero,at,478
 8006bfc:	08007608 	cmpgei	zero,at,472
 8006c00:	080077a0 	cmpeqi	zero,at,478
 8006c04:	080077a0 	cmpeqi	zero,at,478
 8006c08:	080077a0 	cmpeqi	zero,at,478
 8006c0c:	080077a0 	cmpeqi	zero,at,478
 8006c10:	080077a0 	cmpeqi	zero,at,478
 8006c14:	080077a0 	cmpeqi	zero,at,478
 8006c18:	08007764 	muli	zero,at,477
 8006c1c:	08007790 	cmplti	zero,at,478
 8006c20:	080077a0 	cmpeqi	zero,at,478
 8006c24:	08006eb4 	orhi	zero,at,442
 8006c28:	08006ec4 	addi	zero,at,443
 8006c2c:	080077a0 	cmpeqi	zero,at,478
 8006c30:	08006f04 	addi	zero,at,444
 8006c34:	080073f8 	rdprs	zero,at,463
 8006c38:	080073f8 	rdprs	zero,at,463
 8006c3c:	080073f8 	rdprs	zero,at,463
 8006c40:	080073f8 	rdprs	zero,at,463
 8006c44:	080073f8 	rdprs	zero,at,463
 8006c48:	080073f8 	rdprs	zero,at,463
 8006c4c:	080073f8 	rdprs	zero,at,463
 8006c50:	080073f8 	rdprs	zero,at,463
 8006c54:	080073f8 	rdprs	zero,at,463
 8006c58:	080077a0 	cmpeqi	zero,at,478
 8006c5c:	080077a0 	cmpeqi	zero,at,478
 8006c60:	080077a0 	cmpeqi	zero,at,478
 8006c64:	080077a0 	cmpeqi	zero,at,478
 8006c68:	080077a0 	cmpeqi	zero,at,478
 8006c6c:	080077a0 	cmpeqi	zero,at,478
 8006c70:	080077a0 	cmpeqi	zero,at,478
 8006c74:	080077a0 	cmpeqi	zero,at,478
 8006c78:	080077a0 	cmpeqi	zero,at,478
 8006c7c:	080077a0 	cmpeqi	zero,at,478
 8006c80:	0800742c 	andhi	zero,at,464
 8006c84:	08006f14 	ori	zero,at,444
 8006c88:	080077a0 	cmpeqi	zero,at,478
 8006c8c:	08006f14 	ori	zero,at,444
 8006c90:	080077a0 	cmpeqi	zero,at,478
 8006c94:	080077a0 	cmpeqi	zero,at,478
 8006c98:	080077a0 	cmpeqi	zero,at,478
 8006c9c:	080077a0 	cmpeqi	zero,at,478
 8006ca0:	08006fb8 	rdprs	zero,at,446
 8006ca4:	080077a0 	cmpeqi	zero,at,478
 8006ca8:	080077a0 	cmpeqi	zero,at,478
 8006cac:	08006fc8 	cmpgei	zero,at,447
 8006cb0:	080077a0 	cmpeqi	zero,at,478
 8006cb4:	080077a0 	cmpeqi	zero,at,478
 8006cb8:	080077a0 	cmpeqi	zero,at,478
 8006cbc:	080077a0 	cmpeqi	zero,at,478
 8006cc0:	080077a0 	cmpeqi	zero,at,478
 8006cc4:	080073c4 	addi	zero,at,463
 8006cc8:	080077a0 	cmpeqi	zero,at,478
 8006ccc:	080077a0 	cmpeqi	zero,at,478
 8006cd0:	08007474 	orhi	zero,at,465
 8006cd4:	080077a0 	cmpeqi	zero,at,478
 8006cd8:	080077a0 	cmpeqi	zero,at,478
 8006cdc:	080077a0 	cmpeqi	zero,at,478
 8006ce0:	080077a0 	cmpeqi	zero,at,478
 8006ce4:	080077a0 	cmpeqi	zero,at,478
 8006ce8:	080077a0 	cmpeqi	zero,at,478
 8006cec:	080077a0 	cmpeqi	zero,at,478
 8006cf0:	080077a0 	cmpeqi	zero,at,478
 8006cf4:	080077a0 	cmpeqi	zero,at,478
 8006cf8:	080077a0 	cmpeqi	zero,at,478
 8006cfc:	08007668 	cmpgeui	zero,at,473
 8006d00:	08007618 	cmpnei	zero,at,472
 8006d04:	08006f14 	ori	zero,at,444
 8006d08:	08006f14 	ori	zero,at,444
 8006d0c:	08006f14 	ori	zero,at,444
 8006d10:	08007658 	cmpnei	zero,at,473
 8006d14:	08007618 	cmpnei	zero,at,472
 8006d18:	080077a0 	cmpeqi	zero,at,478
 8006d1c:	080077a0 	cmpeqi	zero,at,478
 8006d20:	08007560 	cmpeqi	zero,at,469
 8006d24:	080077a0 	cmpeqi	zero,at,478
 8006d28:	08007574 	orhi	zero,at,469
 8006d2c:	080075a8 	cmpgeui	zero,at,470
 8006d30:	080076a8 	cmpgeui	zero,at,474
 8006d34:	080074d0 	cmplti	zero,at,467
 8006d38:	080077a0 	cmpeqi	zero,at,478
 8006d3c:	080076f0 	cmpltui	zero,at,475
 8006d40:	080077a0 	cmpeqi	zero,at,478
 8006d44:	080074e0 	cmpeqi	zero,at,467
 8006d48:	080077a0 	cmpeqi	zero,at,478
 8006d4c:	080077a0 	cmpeqi	zero,at,478
 8006d50:	08007520 	cmpeqi	zero,at,468
 8006d54:	db012a17 	ldw	r12,1192(sp)
 8006d58:	8323c83a 	sub	r17,r16,r12
 8006d5c:	003f7e06 	br	8006b58 <__alt_data_end+0xfc006b58>
 8006d60:	b009883a 	mov	r4,r22
 8006d64:	b80b883a 	mov	r5,r23
 8006d68:	8008a500 	call	8008a50 <__swsetup_r>
 8006d6c:	10002d1e 	bne	r2,zero,8006e24 <___vfprintf_internal_r+0x3f4>
 8006d70:	b8c0030b 	ldhu	r3,12(r23)
 8006d74:	01000284 	movi	r4,10
 8006d78:	1805883a 	mov	r2,r3
 8006d7c:	1080068c 	andi	r2,r2,26
 8006d80:	113f551e 	bne	r2,r4,8006ad8 <__alt_data_end+0xfc006ad8>
 8006d84:	b880038b 	ldhu	r2,14(r23)
 8006d88:	113fffcc 	andi	r4,r2,65535
 8006d8c:	2120001c 	xori	r4,r4,32768
 8006d90:	21200004 	addi	r4,r4,-32768
 8006d94:	203f5016 	blt	r4,zero,8006ad8 <__alt_data_end+0xfc006ad8>
 8006d98:	bac01917 	ldw	r11,100(r23)
 8006d9c:	ba800717 	ldw	r10,28(r23)
 8006da0:	ba400917 	ldw	r9,36(r23)
 8006da4:	d9812a17 	ldw	r6,1192(sp)
 8006da8:	d9c12d17 	ldw	r7,1204(sp)
 8006dac:	02010004 	movi	r8,1024
 8006db0:	18ffff4c 	andi	r3,r3,65533
 8006db4:	d881078d 	sth	r2,1054(sp)
 8006db8:	b009883a 	mov	r4,r22
 8006dbc:	d8800404 	addi	r2,sp,16
 8006dc0:	d9410404 	addi	r5,sp,1040
 8006dc4:	d8c1070d 	sth	r3,1052(sp)
 8006dc8:	dac11d15 	stw	r11,1140(sp)
 8006dcc:	da810b15 	stw	r10,1068(sp)
 8006dd0:	da410d15 	stw	r9,1076(sp)
 8006dd4:	d8810415 	stw	r2,1040(sp)
 8006dd8:	d8810815 	stw	r2,1056(sp)
 8006ddc:	da010615 	stw	r8,1048(sp)
 8006de0:	da010915 	stw	r8,1060(sp)
 8006de4:	d8010a15 	stw	zero,1064(sp)
 8006de8:	8006a300 	call	8006a30 <___vfprintf_internal_r>
 8006dec:	1021883a 	mov	r16,r2
 8006df0:	10000416 	blt	r2,zero,8006e04 <___vfprintf_internal_r+0x3d4>
 8006df4:	b009883a 	mov	r4,r22
 8006df8:	d9410404 	addi	r5,sp,1040
 8006dfc:	800a4a80 	call	800a4a8 <_fflush_r>
 8006e00:	1006ee1e 	bne	r2,zero,80089bc <___vfprintf_internal_r+0x1f8c>
 8006e04:	d881070b 	ldhu	r2,1052(sp)
 8006e08:	1080100c 	andi	r2,r2,64
 8006e0c:	10000326 	beq	r2,zero,8006e1c <___vfprintf_internal_r+0x3ec>
 8006e10:	b880030b 	ldhu	r2,12(r23)
 8006e14:	10801014 	ori	r2,r2,64
 8006e18:	b880030d 	sth	r2,12(r23)
 8006e1c:	8005883a 	mov	r2,r16
 8006e20:	00000106 	br	8006e28 <___vfprintf_internal_r+0x3f8>
 8006e24:	00bfffc4 	movi	r2,-1
 8006e28:	dfc14917 	ldw	ra,1316(sp)
 8006e2c:	df014817 	ldw	fp,1312(sp)
 8006e30:	ddc14717 	ldw	r23,1308(sp)
 8006e34:	dd814617 	ldw	r22,1304(sp)
 8006e38:	dd414517 	ldw	r21,1300(sp)
 8006e3c:	dd014417 	ldw	r20,1296(sp)
 8006e40:	dcc14317 	ldw	r19,1292(sp)
 8006e44:	dc814217 	ldw	r18,1288(sp)
 8006e48:	dc414117 	ldw	r17,1284(sp)
 8006e4c:	dc014017 	ldw	r16,1280(sp)
 8006e50:	dec14a04 	addi	sp,sp,1320
 8006e54:	f800283a 	ret
 8006e58:	b009883a 	mov	r4,r22
 8006e5c:	b80b883a 	mov	r5,r23
 8006e60:	d9811e04 	addi	r6,sp,1144
 8006e64:	800e8140 	call	800e814 <__sprint_r>
 8006e68:	1000081e 	bne	r2,zero,8006e8c <___vfprintf_internal_r+0x45c>
 8006e6c:	da000404 	addi	r8,sp,16
 8006e70:	003f4606 	br	8006b8c <__alt_data_end+0xfc006b8c>
 8006e74:	d8812017 	ldw	r2,1152(sp)
 8006e78:	10000426 	beq	r2,zero,8006e8c <___vfprintf_internal_r+0x45c>
 8006e7c:	b009883a 	mov	r4,r22
 8006e80:	b80b883a 	mov	r5,r23
 8006e84:	d9811e04 	addi	r6,sp,1144
 8006e88:	800e8140 	call	800e814 <__sprint_r>
 8006e8c:	b880030b 	ldhu	r2,12(r23)
 8006e90:	1080100c 	andi	r2,r2,64
 8006e94:	103fe31e 	bne	r2,zero,8006e24 <__alt_data_end+0xfc006e24>
 8006e98:	d8812f17 	ldw	r2,1212(sp)
 8006e9c:	003fe206 	br	8006e28 <__alt_data_end+0xfc006e28>
 8006ea0:	b009883a 	mov	r4,r22
 8006ea4:	800aa500 	call	800aa50 <__sinit>
 8006ea8:	003ef906 	br	8006a90 <__alt_data_end+0xfc006a90>
 8006eac:	dc012a17 	ldw	r16,1192(sp)
 8006eb0:	003f3906 	br	8006b98 <__alt_data_end+0xfc006b98>
 8006eb4:	1805883a 	mov	r2,r3
 8006eb8:	8c400114 	ori	r17,r17,4
 8006ebc:	1c000007 	ldb	r16,0(r3)
 8006ec0:	003f4206 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8006ec4:	1c000007 	ldb	r16,0(r3)
 8006ec8:	18800044 	addi	r2,r3,1
 8006ecc:	8286b326 	beq	r16,r10,800899c <___vfprintf_internal_r+0x1f6c>
 8006ed0:	82fff404 	addi	r11,r16,-48
 8006ed4:	1007883a 	mov	r3,r2
 8006ed8:	0013883a 	mov	r9,zero
 8006edc:	2aff3c36 	bltu	r5,r11,8006bd0 <__alt_data_end+0xfc006bd0>
 8006ee0:	1c000007 	ldb	r16,0(r3)
 8006ee4:	4a4002a4 	muli	r9,r9,10
 8006ee8:	18c00044 	addi	r3,r3,1
 8006eec:	5a53883a 	add	r9,r11,r9
 8006ef0:	82fff404 	addi	r11,r16,-48
 8006ef4:	2afffa2e 	bgeu	r5,r11,8006ee0 <__alt_data_end+0xfc006ee0>
 8006ef8:	483f350e 	bge	r9,zero,8006bd0 <__alt_data_end+0xfc006bd0>
 8006efc:	027fffc4 	movi	r9,-1
 8006f00:	003f3306 	br	8006bd0 <__alt_data_end+0xfc006bd0>
 8006f04:	8c402014 	ori	r17,r17,128
 8006f08:	1805883a 	mov	r2,r3
 8006f0c:	1c000007 	ldb	r16,0(r3)
 8006f10:	003f2e06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8006f14:	db012d17 	ldw	r12,1204(sp)
 8006f18:	dac12d17 	ldw	r11,1204(sp)
 8006f1c:	d8c12a15 	stw	r3,1192(sp)
 8006f20:	63000017 	ldw	r12,0(r12)
 8006f24:	5ac00117 	ldw	r11,4(r11)
 8006f28:	d9812785 	stb	r6,1182(sp)
 8006f2c:	6009883a 	mov	r4,r12
 8006f30:	580b883a 	mov	r5,r11
 8006f34:	db013715 	stw	r12,1244(sp)
 8006f38:	da013f15 	stw	r8,1276(sp)
 8006f3c:	da413e15 	stw	r9,1272(sp)
 8006f40:	dac13915 	stw	r11,1252(sp)
 8006f44:	800d2940 	call	800d294 <__fpclassifyd>
 8006f48:	db012d17 	ldw	r12,1204(sp)
 8006f4c:	04800044 	movi	r18,1
 8006f50:	da013f17 	ldw	r8,1276(sp)
 8006f54:	64c00204 	addi	r19,r12,8
 8006f58:	da413e17 	ldw	r9,1272(sp)
 8006f5c:	d9013717 	ldw	r4,1244(sp)
 8006f60:	d9413917 	ldw	r5,1252(sp)
 8006f64:	1484581e 	bne	r2,r18,80080c8 <___vfprintf_internal_r+0x1698>
 8006f68:	000d883a 	mov	r6,zero
 8006f6c:	000f883a 	mov	r7,zero
 8006f70:	8003d300 	call	8003d30 <__ledf2>
 8006f74:	da013f17 	ldw	r8,1276(sp)
 8006f78:	1005ef16 	blt	r2,zero,8008738 <___vfprintf_internal_r+0x1d08>
 8006f7c:	dd412783 	ldbu	r21,1182(sp)
 8006f80:	008011c4 	movi	r2,71
 8006f84:	14053b0e 	bge	r2,r16,8008474 <___vfprintf_internal_r+0x1a44>
 8006f88:	00c200b4 	movhi	r3,2050
 8006f8c:	18c09904 	addi	r3,r3,612
 8006f90:	d8c13115 	stw	r3,1220(sp)
 8006f94:	02c000c4 	movi	r11,3
 8006f98:	00bfdfc4 	movi	r2,-129
 8006f9c:	dac12b15 	stw	r11,1196(sp)
 8006fa0:	88a2703a 	and	r17,r17,r2
 8006fa4:	dcc12d15 	stw	r19,1204(sp)
 8006fa8:	5825883a 	mov	r18,r11
 8006fac:	d8013215 	stw	zero,1224(sp)
 8006fb0:	d8013415 	stw	zero,1232(sp)
 8006fb4:	00003206 	br	8007080 <___vfprintf_internal_r+0x650>
 8006fb8:	8c400214 	ori	r17,r17,8
 8006fbc:	1805883a 	mov	r2,r3
 8006fc0:	1c000007 	ldb	r16,0(r3)
 8006fc4:	003f0106 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8006fc8:	8c400414 	ori	r17,r17,16
 8006fcc:	d8c12a15 	stw	r3,1192(sp)
 8006fd0:	88c0080c 	andi	r3,r17,32
 8006fd4:	d8812d17 	ldw	r2,1204(sp)
 8006fd8:	18017726 	beq	r3,zero,80075b8 <___vfprintf_internal_r+0xb88>
 8006fdc:	db012d17 	ldw	r12,1204(sp)
 8006fe0:	14c00017 	ldw	r19,0(r2)
 8006fe4:	17000117 	ldw	fp,4(r2)
 8006fe8:	63000204 	addi	r12,r12,8
 8006fec:	db012d15 	stw	r12,1204(sp)
 8006ff0:	0005883a 	mov	r2,zero
 8006ff4:	9f06b03a 	or	r3,r19,fp
 8006ff8:	d8012785 	stb	zero,1182(sp)
 8006ffc:	da413215 	stw	r9,1224(sp)
 8007000:	002b883a 	mov	r21,zero
 8007004:	48000216 	blt	r9,zero,8007010 <___vfprintf_internal_r+0x5e0>
 8007008:	013fdfc4 	movi	r4,-129
 800700c:	8922703a 	and	r17,r17,r4
 8007010:	1801ed1e 	bne	r3,zero,80077c8 <___vfprintf_internal_r+0xd98>
 8007014:	4802e026 	beq	r9,zero,8007b98 <___vfprintf_internal_r+0x1168>
 8007018:	10803fcc 	andi	r2,r2,255
 800701c:	00c00044 	movi	r3,1
 8007020:	10c20f26 	beq	r2,r3,8007860 <___vfprintf_internal_r+0xe30>
 8007024:	00c00084 	movi	r3,2
 8007028:	10c2fd26 	beq	r2,r3,8007c20 <___vfprintf_internal_r+0x11f0>
 800702c:	d8c10e04 	addi	r3,sp,1080
 8007030:	9808d0fa 	srli	r4,r19,3
 8007034:	e00a977a 	slli	r5,fp,29
 8007038:	e038d0fa 	srli	fp,fp,3
 800703c:	9cc001cc 	andi	r19,r19,7
 8007040:	98800c04 	addi	r2,r19,48
 8007044:	18ffffc4 	addi	r3,r3,-1
 8007048:	2926b03a 	or	r19,r5,r4
 800704c:	18800005 	stb	r2,0(r3)
 8007050:	9f08b03a 	or	r4,r19,fp
 8007054:	203ff61e 	bne	r4,zero,8007030 <__alt_data_end+0xfc007030>
 8007058:	8900004c 	andi	r4,r17,1
 800705c:	d8c13115 	stw	r3,1220(sp)
 8007060:	2003791e 	bne	r4,zero,8007e48 <___vfprintf_internal_r+0x1418>
 8007064:	dac12817 	ldw	r11,1184(sp)
 8007068:	58e5c83a 	sub	r18,r11,r3
 800706c:	9005883a 	mov	r2,r18
 8007070:	9240010e 	bge	r18,r9,8007078 <___vfprintf_internal_r+0x648>
 8007074:	4805883a 	mov	r2,r9
 8007078:	d8812b15 	stw	r2,1196(sp)
 800707c:	d8013415 	stw	zero,1232(sp)
 8007080:	a8803fcc 	andi	r2,r21,255
 8007084:	1080201c 	xori	r2,r2,128
 8007088:	10bfe004 	addi	r2,r2,-128
 800708c:	10000326 	beq	r2,zero,800709c <___vfprintf_internal_r+0x66c>
 8007090:	db012b17 	ldw	r12,1196(sp)
 8007094:	63000044 	addi	r12,r12,1
 8007098:	db012b15 	stw	r12,1196(sp)
 800709c:	88c0008c 	andi	r3,r17,2
 80070a0:	d8c12c15 	stw	r3,1200(sp)
 80070a4:	18000326 	beq	r3,zero,80070b4 <___vfprintf_internal_r+0x684>
 80070a8:	dac12b17 	ldw	r11,1196(sp)
 80070ac:	5ac00084 	addi	r11,r11,2
 80070b0:	dac12b15 	stw	r11,1196(sp)
 80070b4:	8b00210c 	andi	r12,r17,132
 80070b8:	db013015 	stw	r12,1216(sp)
 80070bc:	6001c01e 	bne	r12,zero,80077c0 <___vfprintf_internal_r+0xd90>
 80070c0:	dac12e17 	ldw	r11,1208(sp)
 80070c4:	db012b17 	ldw	r12,1196(sp)
 80070c8:	5b39c83a 	sub	fp,r11,r12
 80070cc:	0701bc0e 	bge	zero,fp,80077c0 <___vfprintf_internal_r+0xd90>
 80070d0:	02400404 	movi	r9,16
 80070d4:	d8c12017 	ldw	r3,1152(sp)
 80070d8:	d8811f17 	ldw	r2,1148(sp)
 80070dc:	4f05220e 	bge	r9,fp,8008568 <___vfprintf_internal_r+0x1b38>
 80070e0:	014200b4 	movhi	r5,2050
 80070e4:	2940b484 	addi	r5,r5,722
 80070e8:	d9413615 	stw	r5,1240(sp)
 80070ec:	482b883a 	mov	r21,r9
 80070f0:	04c001c4 	movi	r19,7
 80070f4:	00000306 	br	8007104 <___vfprintf_internal_r+0x6d4>
 80070f8:	e73ffc04 	addi	fp,fp,-16
 80070fc:	42000204 	addi	r8,r8,8
 8007100:	af00130e 	bge	r21,fp,8007150 <___vfprintf_internal_r+0x720>
 8007104:	02c200b4 	movhi	r11,2050
 8007108:	18c00404 	addi	r3,r3,16
 800710c:	10800044 	addi	r2,r2,1
 8007110:	5ac0b484 	addi	r11,r11,722
 8007114:	42c00015 	stw	r11,0(r8)
 8007118:	45400115 	stw	r21,4(r8)
 800711c:	d8c12015 	stw	r3,1152(sp)
 8007120:	d8811f15 	stw	r2,1148(sp)
 8007124:	98bff40e 	bge	r19,r2,80070f8 <__alt_data_end+0xfc0070f8>
 8007128:	b009883a 	mov	r4,r22
 800712c:	b80b883a 	mov	r5,r23
 8007130:	d9811e04 	addi	r6,sp,1144
 8007134:	800e8140 	call	800e814 <__sprint_r>
 8007138:	103f541e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 800713c:	e73ffc04 	addi	fp,fp,-16
 8007140:	d8c12017 	ldw	r3,1152(sp)
 8007144:	d8811f17 	ldw	r2,1148(sp)
 8007148:	da000404 	addi	r8,sp,16
 800714c:	af3fed16 	blt	r21,fp,8007104 <__alt_data_end+0xfc007104>
 8007150:	db013617 	ldw	r12,1240(sp)
 8007154:	e0c7883a 	add	r3,fp,r3
 8007158:	10800044 	addi	r2,r2,1
 800715c:	43000015 	stw	r12,0(r8)
 8007160:	47000115 	stw	fp,4(r8)
 8007164:	d8c12015 	stw	r3,1152(sp)
 8007168:	d8811f15 	stw	r2,1148(sp)
 800716c:	010001c4 	movi	r4,7
 8007170:	2082f416 	blt	r4,r2,8007d44 <___vfprintf_internal_r+0x1314>
 8007174:	d8812787 	ldb	r2,1182(sp)
 8007178:	42000204 	addi	r8,r8,8
 800717c:	10000c26 	beq	r2,zero,80071b0 <___vfprintf_internal_r+0x780>
 8007180:	d8811f17 	ldw	r2,1148(sp)
 8007184:	d9012784 	addi	r4,sp,1182
 8007188:	18c00044 	addi	r3,r3,1
 800718c:	10800044 	addi	r2,r2,1
 8007190:	41000015 	stw	r4,0(r8)
 8007194:	01000044 	movi	r4,1
 8007198:	41000115 	stw	r4,4(r8)
 800719c:	d8c12015 	stw	r3,1152(sp)
 80071a0:	d8811f15 	stw	r2,1148(sp)
 80071a4:	010001c4 	movi	r4,7
 80071a8:	20828d16 	blt	r4,r2,8007be0 <___vfprintf_internal_r+0x11b0>
 80071ac:	42000204 	addi	r8,r8,8
 80071b0:	dac12c17 	ldw	r11,1200(sp)
 80071b4:	58000c26 	beq	r11,zero,80071e8 <___vfprintf_internal_r+0x7b8>
 80071b8:	d8811f17 	ldw	r2,1148(sp)
 80071bc:	d9012704 	addi	r4,sp,1180
 80071c0:	18c00084 	addi	r3,r3,2
 80071c4:	10800044 	addi	r2,r2,1
 80071c8:	41000015 	stw	r4,0(r8)
 80071cc:	01000084 	movi	r4,2
 80071d0:	41000115 	stw	r4,4(r8)
 80071d4:	d8c12015 	stw	r3,1152(sp)
 80071d8:	d8811f15 	stw	r2,1148(sp)
 80071dc:	010001c4 	movi	r4,7
 80071e0:	20828716 	blt	r4,r2,8007c00 <___vfprintf_internal_r+0x11d0>
 80071e4:	42000204 	addi	r8,r8,8
 80071e8:	db013017 	ldw	r12,1216(sp)
 80071ec:	00802004 	movi	r2,128
 80071f0:	6081e926 	beq	r12,r2,8007998 <___vfprintf_internal_r+0xf68>
 80071f4:	db013217 	ldw	r12,1224(sp)
 80071f8:	64abc83a 	sub	r21,r12,r18
 80071fc:	0540260e 	bge	zero,r21,8007298 <___vfprintf_internal_r+0x868>
 8007200:	07000404 	movi	fp,16
 8007204:	d8811f17 	ldw	r2,1148(sp)
 8007208:	e5443d0e 	bge	fp,r21,8008300 <___vfprintf_internal_r+0x18d0>
 800720c:	014200b4 	movhi	r5,2050
 8007210:	2940b084 	addi	r5,r5,706
 8007214:	d9412c15 	stw	r5,1200(sp)
 8007218:	04c001c4 	movi	r19,7
 800721c:	00000306 	br	800722c <___vfprintf_internal_r+0x7fc>
 8007220:	ad7ffc04 	addi	r21,r21,-16
 8007224:	42000204 	addi	r8,r8,8
 8007228:	e540110e 	bge	fp,r21,8007270 <___vfprintf_internal_r+0x840>
 800722c:	18c00404 	addi	r3,r3,16
 8007230:	10800044 	addi	r2,r2,1
 8007234:	45000015 	stw	r20,0(r8)
 8007238:	47000115 	stw	fp,4(r8)
 800723c:	d8c12015 	stw	r3,1152(sp)
 8007240:	d8811f15 	stw	r2,1148(sp)
 8007244:	98bff60e 	bge	r19,r2,8007220 <__alt_data_end+0xfc007220>
 8007248:	b009883a 	mov	r4,r22
 800724c:	b80b883a 	mov	r5,r23
 8007250:	d9811e04 	addi	r6,sp,1144
 8007254:	800e8140 	call	800e814 <__sprint_r>
 8007258:	103f0c1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 800725c:	ad7ffc04 	addi	r21,r21,-16
 8007260:	d8c12017 	ldw	r3,1152(sp)
 8007264:	d8811f17 	ldw	r2,1148(sp)
 8007268:	da000404 	addi	r8,sp,16
 800726c:	e57fef16 	blt	fp,r21,800722c <__alt_data_end+0xfc00722c>
 8007270:	dac12c17 	ldw	r11,1200(sp)
 8007274:	1d47883a 	add	r3,r3,r21
 8007278:	10800044 	addi	r2,r2,1
 800727c:	42c00015 	stw	r11,0(r8)
 8007280:	45400115 	stw	r21,4(r8)
 8007284:	d8c12015 	stw	r3,1152(sp)
 8007288:	d8811f15 	stw	r2,1148(sp)
 800728c:	010001c4 	movi	r4,7
 8007290:	20824b16 	blt	r4,r2,8007bc0 <___vfprintf_internal_r+0x1190>
 8007294:	42000204 	addi	r8,r8,8
 8007298:	8880400c 	andi	r2,r17,256
 800729c:	1001761e 	bne	r2,zero,8007878 <___vfprintf_internal_r+0xe48>
 80072a0:	d8811f17 	ldw	r2,1148(sp)
 80072a4:	db013117 	ldw	r12,1220(sp)
 80072a8:	1c87883a 	add	r3,r3,r18
 80072ac:	10800044 	addi	r2,r2,1
 80072b0:	43000015 	stw	r12,0(r8)
 80072b4:	44800115 	stw	r18,4(r8)
 80072b8:	d8c12015 	stw	r3,1152(sp)
 80072bc:	d8811f15 	stw	r2,1148(sp)
 80072c0:	010001c4 	movi	r4,7
 80072c4:	20822616 	blt	r4,r2,8007b60 <___vfprintf_internal_r+0x1130>
 80072c8:	42000204 	addi	r8,r8,8
 80072cc:	8c40010c 	andi	r17,r17,4
 80072d0:	88003126 	beq	r17,zero,8007398 <___vfprintf_internal_r+0x968>
 80072d4:	db012e17 	ldw	r12,1208(sp)
 80072d8:	dac12b17 	ldw	r11,1196(sp)
 80072dc:	62e1c83a 	sub	r16,r12,r11
 80072e0:	04002d0e 	bge	zero,r16,8007398 <___vfprintf_internal_r+0x968>
 80072e4:	04400404 	movi	r17,16
 80072e8:	d8811f17 	ldw	r2,1148(sp)
 80072ec:	8c04df0e 	bge	r17,r16,800866c <___vfprintf_internal_r+0x1c3c>
 80072f0:	010200b4 	movhi	r4,2050
 80072f4:	2100b484 	addi	r4,r4,722
 80072f8:	d9013615 	stw	r4,1240(sp)
 80072fc:	048001c4 	movi	r18,7
 8007300:	00000306 	br	8007310 <___vfprintf_internal_r+0x8e0>
 8007304:	843ffc04 	addi	r16,r16,-16
 8007308:	42000204 	addi	r8,r8,8
 800730c:	8c00130e 	bge	r17,r16,800735c <___vfprintf_internal_r+0x92c>
 8007310:	014200b4 	movhi	r5,2050
 8007314:	18c00404 	addi	r3,r3,16
 8007318:	10800044 	addi	r2,r2,1
 800731c:	2940b484 	addi	r5,r5,722
 8007320:	41400015 	stw	r5,0(r8)
 8007324:	44400115 	stw	r17,4(r8)
 8007328:	d8c12015 	stw	r3,1152(sp)
 800732c:	d8811f15 	stw	r2,1148(sp)
 8007330:	90bff40e 	bge	r18,r2,8007304 <__alt_data_end+0xfc007304>
 8007334:	b009883a 	mov	r4,r22
 8007338:	b80b883a 	mov	r5,r23
 800733c:	d9811e04 	addi	r6,sp,1144
 8007340:	800e8140 	call	800e814 <__sprint_r>
 8007344:	103ed11e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007348:	843ffc04 	addi	r16,r16,-16
 800734c:	d8c12017 	ldw	r3,1152(sp)
 8007350:	d8811f17 	ldw	r2,1148(sp)
 8007354:	da000404 	addi	r8,sp,16
 8007358:	8c3fed16 	blt	r17,r16,8007310 <__alt_data_end+0xfc007310>
 800735c:	dac13617 	ldw	r11,1240(sp)
 8007360:	1c07883a 	add	r3,r3,r16
 8007364:	10800044 	addi	r2,r2,1
 8007368:	42c00015 	stw	r11,0(r8)
 800736c:	44000115 	stw	r16,4(r8)
 8007370:	d8c12015 	stw	r3,1152(sp)
 8007374:	d8811f15 	stw	r2,1148(sp)
 8007378:	010001c4 	movi	r4,7
 800737c:	2080060e 	bge	r4,r2,8007398 <___vfprintf_internal_r+0x968>
 8007380:	b009883a 	mov	r4,r22
 8007384:	b80b883a 	mov	r5,r23
 8007388:	d9811e04 	addi	r6,sp,1144
 800738c:	800e8140 	call	800e814 <__sprint_r>
 8007390:	103ebe1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007394:	d8c12017 	ldw	r3,1152(sp)
 8007398:	d8812b17 	ldw	r2,1196(sp)
 800739c:	db012e17 	ldw	r12,1208(sp)
 80073a0:	1300010e 	bge	r2,r12,80073a8 <___vfprintf_internal_r+0x978>
 80073a4:	6005883a 	mov	r2,r12
 80073a8:	dac12f17 	ldw	r11,1212(sp)
 80073ac:	5897883a 	add	r11,r11,r2
 80073b0:	dac12f15 	stw	r11,1212(sp)
 80073b4:	1801f21e 	bne	r3,zero,8007b80 <___vfprintf_internal_r+0x1150>
 80073b8:	d8011f15 	stw	zero,1148(sp)
 80073bc:	da000404 	addi	r8,sp,16
 80073c0:	003dd806 	br	8006b24 <__alt_data_end+0xfc006b24>
 80073c4:	8c400414 	ori	r17,r17,16
 80073c8:	d8c12a15 	stw	r3,1192(sp)
 80073cc:	88c0080c 	andi	r3,r17,32
 80073d0:	d8812d17 	ldw	r2,1204(sp)
 80073d4:	18004626 	beq	r3,zero,80074f0 <___vfprintf_internal_r+0xac0>
 80073d8:	dac12d17 	ldw	r11,1204(sp)
 80073dc:	14c00017 	ldw	r19,0(r2)
 80073e0:	17000117 	ldw	fp,4(r2)
 80073e4:	5ac00204 	addi	r11,r11,8
 80073e8:	dac12d15 	stw	r11,1204(sp)
 80073ec:	00800044 	movi	r2,1
 80073f0:	9f06b03a 	or	r3,r19,fp
 80073f4:	003f0006 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80073f8:	1805883a 	mov	r2,r3
 80073fc:	d8012e15 	stw	zero,1208(sp)
 8007400:	82fff404 	addi	r11,r16,-48
 8007404:	0019883a 	mov	r12,zero
 8007408:	14000007 	ldb	r16,0(r2)
 800740c:	630002a4 	muli	r12,r12,10
 8007410:	18c00044 	addi	r3,r3,1
 8007414:	1805883a 	mov	r2,r3
 8007418:	62d9883a 	add	r12,r12,r11
 800741c:	82fff404 	addi	r11,r16,-48
 8007420:	2afff92e 	bgeu	r5,r11,8007408 <__alt_data_end+0xfc007408>
 8007424:	db012e15 	stw	r12,1208(sp)
 8007428:	003de906 	br	8006bd0 <__alt_data_end+0xfc006bd0>
 800742c:	8c400414 	ori	r17,r17,16
 8007430:	d8c12a15 	stw	r3,1192(sp)
 8007434:	d9812785 	stb	r6,1182(sp)
 8007438:	8880080c 	andi	r2,r17,32
 800743c:	d8c12d17 	ldw	r3,1204(sp)
 8007440:	10007a26 	beq	r2,zero,800762c <___vfprintf_internal_r+0xbfc>
 8007444:	db012d17 	ldw	r12,1204(sp)
 8007448:	18800117 	ldw	r2,4(r3)
 800744c:	1cc00017 	ldw	r19,0(r3)
 8007450:	63000204 	addi	r12,r12,8
 8007454:	db012d15 	stw	r12,1204(sp)
 8007458:	1039883a 	mov	fp,r2
 800745c:	10031016 	blt	r2,zero,80080a0 <___vfprintf_internal_r+0x1670>
 8007460:	dd412783 	ldbu	r21,1182(sp)
 8007464:	da413215 	stw	r9,1224(sp)
 8007468:	00800044 	movi	r2,1
 800746c:	9f06b03a 	or	r3,r19,fp
 8007470:	003ee406 	br	8007004 <__alt_data_end+0xfc007004>
 8007474:	030200b4 	movhi	r12,2050
 8007478:	63009c04 	addi	r12,r12,624
 800747c:	d8c12a15 	stw	r3,1192(sp)
 8007480:	d9812785 	stb	r6,1182(sp)
 8007484:	db013b15 	stw	r12,1260(sp)
 8007488:	88c0080c 	andi	r3,r17,32
 800748c:	d8812d17 	ldw	r2,1204(sp)
 8007490:	18002b26 	beq	r3,zero,8007540 <___vfprintf_internal_r+0xb10>
 8007494:	dac12d17 	ldw	r11,1204(sp)
 8007498:	14c00017 	ldw	r19,0(r2)
 800749c:	17000117 	ldw	fp,4(r2)
 80074a0:	5ac00204 	addi	r11,r11,8
 80074a4:	dac12d15 	stw	r11,1204(sp)
 80074a8:	8880004c 	andi	r2,r17,1
 80074ac:	10025b26 	beq	r2,zero,8007e1c <___vfprintf_internal_r+0x13ec>
 80074b0:	9f06b03a 	or	r3,r19,fp
 80074b4:	18037026 	beq	r3,zero,8008278 <___vfprintf_internal_r+0x1848>
 80074b8:	00800c04 	movi	r2,48
 80074bc:	d8812705 	stb	r2,1180(sp)
 80074c0:	dc012745 	stb	r16,1181(sp)
 80074c4:	8c400094 	ori	r17,r17,2
 80074c8:	00800084 	movi	r2,2
 80074cc:	003eca06 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80074d0:	8c400814 	ori	r17,r17,32
 80074d4:	1805883a 	mov	r2,r3
 80074d8:	1c000007 	ldb	r16,0(r3)
 80074dc:	003dbb06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 80074e0:	d8c12a15 	stw	r3,1192(sp)
 80074e4:	88c0080c 	andi	r3,r17,32
 80074e8:	d8812d17 	ldw	r2,1204(sp)
 80074ec:	183fba1e 	bne	r3,zero,80073d8 <__alt_data_end+0xfc0073d8>
 80074f0:	88c0040c 	andi	r3,r17,16
 80074f4:	18024c1e 	bne	r3,zero,8007e28 <___vfprintf_internal_r+0x13f8>
 80074f8:	88c0100c 	andi	r3,r17,64
 80074fc:	18024a26 	beq	r3,zero,8007e28 <___vfprintf_internal_r+0x13f8>
 8007500:	dac12d17 	ldw	r11,1204(sp)
 8007504:	14c0000b 	ldhu	r19,0(r2)
 8007508:	0039883a 	mov	fp,zero
 800750c:	5ac00104 	addi	r11,r11,4
 8007510:	dac12d15 	stw	r11,1204(sp)
 8007514:	00800044 	movi	r2,1
 8007518:	9807883a 	mov	r3,r19
 800751c:	003eb606 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007520:	008200b4 	movhi	r2,2050
 8007524:	1080a104 	addi	r2,r2,644
 8007528:	d8c12a15 	stw	r3,1192(sp)
 800752c:	d8813b15 	stw	r2,1260(sp)
 8007530:	d9812785 	stb	r6,1182(sp)
 8007534:	88c0080c 	andi	r3,r17,32
 8007538:	d8812d17 	ldw	r2,1204(sp)
 800753c:	183fd51e 	bne	r3,zero,8007494 <__alt_data_end+0xfc007494>
 8007540:	88c0040c 	andi	r3,r17,16
 8007544:	18034126 	beq	r3,zero,800824c <___vfprintf_internal_r+0x181c>
 8007548:	db012d17 	ldw	r12,1204(sp)
 800754c:	14c00017 	ldw	r19,0(r2)
 8007550:	0039883a 	mov	fp,zero
 8007554:	63000104 	addi	r12,r12,4
 8007558:	db012d15 	stw	r12,1204(sp)
 800755c:	003fd206 	br	80074a8 <__alt_data_end+0xfc0074a8>
 8007560:	1c000007 	ldb	r16,0(r3)
 8007564:	81c3d626 	beq	r16,r7,80084c0 <___vfprintf_internal_r+0x1a90>
 8007568:	8c400414 	ori	r17,r17,16
 800756c:	1805883a 	mov	r2,r3
 8007570:	003d9606 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8007574:	d8c12a15 	stw	r3,1192(sp)
 8007578:	d9812785 	stb	r6,1182(sp)
 800757c:	8880080c 	andi	r2,r17,32
 8007580:	10033f26 	beq	r2,zero,8008280 <___vfprintf_internal_r+0x1850>
 8007584:	db012d17 	ldw	r12,1204(sp)
 8007588:	dac12f17 	ldw	r11,1212(sp)
 800758c:	60800017 	ldw	r2,0(r12)
 8007590:	5807d7fa 	srai	r3,r11,31
 8007594:	63000104 	addi	r12,r12,4
 8007598:	db012d15 	stw	r12,1204(sp)
 800759c:	12c00015 	stw	r11,0(r2)
 80075a0:	10c00115 	stw	r3,4(r2)
 80075a4:	003d5f06 	br	8006b24 <__alt_data_end+0xfc006b24>
 80075a8:	d8c12a15 	stw	r3,1192(sp)
 80075ac:	88c0080c 	andi	r3,r17,32
 80075b0:	d8812d17 	ldw	r2,1204(sp)
 80075b4:	183e891e 	bne	r3,zero,8006fdc <__alt_data_end+0xfc006fdc>
 80075b8:	88c0040c 	andi	r3,r17,16
 80075bc:	1801ea1e 	bne	r3,zero,8007d68 <___vfprintf_internal_r+0x1338>
 80075c0:	88c0100c 	andi	r3,r17,64
 80075c4:	1801e826 	beq	r3,zero,8007d68 <___vfprintf_internal_r+0x1338>
 80075c8:	db012d17 	ldw	r12,1204(sp)
 80075cc:	14c0000b 	ldhu	r19,0(r2)
 80075d0:	0039883a 	mov	fp,zero
 80075d4:	63000104 	addi	r12,r12,4
 80075d8:	db012d15 	stw	r12,1204(sp)
 80075dc:	0005883a 	mov	r2,zero
 80075e0:	9807883a 	mov	r3,r19
 80075e4:	003e8406 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80075e8:	30803fcc 	andi	r2,r6,255
 80075ec:	1080201c 	xori	r2,r2,128
 80075f0:	10bfe004 	addi	r2,r2,-128
 80075f4:	10031d1e 	bne	r2,zero,800826c <___vfprintf_internal_r+0x183c>
 80075f8:	1805883a 	mov	r2,r3
 80075fc:	01800804 	movi	r6,32
 8007600:	1c000007 	ldb	r16,0(r3)
 8007604:	003d7106 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8007608:	8c400054 	ori	r17,r17,1
 800760c:	1805883a 	mov	r2,r3
 8007610:	1c000007 	ldb	r16,0(r3)
 8007614:	003d6d06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8007618:	d8c12a15 	stw	r3,1192(sp)
 800761c:	d9812785 	stb	r6,1182(sp)
 8007620:	8880080c 	andi	r2,r17,32
 8007624:	d8c12d17 	ldw	r3,1204(sp)
 8007628:	103f861e 	bne	r2,zero,8007444 <__alt_data_end+0xfc007444>
 800762c:	8880040c 	andi	r2,r17,16
 8007630:	1001f31e 	bne	r2,zero,8007e00 <___vfprintf_internal_r+0x13d0>
 8007634:	8880100c 	andi	r2,r17,64
 8007638:	1001f126 	beq	r2,zero,8007e00 <___vfprintf_internal_r+0x13d0>
 800763c:	1cc0000f 	ldh	r19,0(r3)
 8007640:	db012d17 	ldw	r12,1204(sp)
 8007644:	9839d7fa 	srai	fp,r19,31
 8007648:	63000104 	addi	r12,r12,4
 800764c:	db012d15 	stw	r12,1204(sp)
 8007650:	e005883a 	mov	r2,fp
 8007654:	003f8106 	br	800745c <__alt_data_end+0xfc00745c>
 8007658:	8c401014 	ori	r17,r17,64
 800765c:	1805883a 	mov	r2,r3
 8007660:	1c000007 	ldb	r16,0(r3)
 8007664:	003d5906 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8007668:	db012d17 	ldw	r12,1204(sp)
 800766c:	d8c12a15 	stw	r3,1192(sp)
 8007670:	00c00044 	movi	r3,1
 8007674:	60800017 	ldw	r2,0(r12)
 8007678:	63000104 	addi	r12,r12,4
 800767c:	d8c12b15 	stw	r3,1196(sp)
 8007680:	d8012785 	stb	zero,1182(sp)
 8007684:	d8810405 	stb	r2,1040(sp)
 8007688:	db012d15 	stw	r12,1204(sp)
 800768c:	dac10404 	addi	r11,sp,1040
 8007690:	1825883a 	mov	r18,r3
 8007694:	d8013215 	stw	zero,1224(sp)
 8007698:	d8013415 	stw	zero,1232(sp)
 800769c:	dac13115 	stw	r11,1220(sp)
 80076a0:	0005883a 	mov	r2,zero
 80076a4:	003e7d06 	br	800709c <__alt_data_end+0xfc00709c>
 80076a8:	db012d17 	ldw	r12,1204(sp)
 80076ac:	00800c04 	movi	r2,48
 80076b0:	d8812705 	stb	r2,1180(sp)
 80076b4:	64c00017 	ldw	r19,0(r12)
 80076b8:	00801e04 	movi	r2,120
 80076bc:	d8812745 	stb	r2,1181(sp)
 80076c0:	008200b4 	movhi	r2,2050
 80076c4:	1080a104 	addi	r2,r2,644
 80076c8:	63000104 	addi	r12,r12,4
 80076cc:	d8c12a15 	stw	r3,1192(sp)
 80076d0:	d8813b15 	stw	r2,1260(sp)
 80076d4:	0039883a 	mov	fp,zero
 80076d8:	8c400094 	ori	r17,r17,2
 80076dc:	db012d15 	stw	r12,1204(sp)
 80076e0:	00800084 	movi	r2,2
 80076e4:	04001e04 	movi	r16,120
 80076e8:	9807883a 	mov	r3,r19
 80076ec:	003e4206 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80076f0:	dac12d17 	ldw	r11,1204(sp)
 80076f4:	db012d17 	ldw	r12,1204(sp)
 80076f8:	d8c12a15 	stw	r3,1192(sp)
 80076fc:	5ac00017 	ldw	r11,0(r11)
 8007700:	d8012785 	stb	zero,1182(sp)
 8007704:	64c00104 	addi	r19,r12,4
 8007708:	dac13115 	stw	r11,1220(sp)
 800770c:	5803e826 	beq	r11,zero,80086b0 <___vfprintf_internal_r+0x1c80>
 8007710:	d9013117 	ldw	r4,1220(sp)
 8007714:	48037a16 	blt	r9,zero,8008500 <___vfprintf_internal_r+0x1ad0>
 8007718:	480d883a 	mov	r6,r9
 800771c:	000b883a 	mov	r5,zero
 8007720:	da013f15 	stw	r8,1276(sp)
 8007724:	da413e15 	stw	r9,1272(sp)
 8007728:	800b7600 	call	800b760 <memchr>
 800772c:	da013f17 	ldw	r8,1276(sp)
 8007730:	da413e17 	ldw	r9,1272(sp)
 8007734:	10044426 	beq	r2,zero,8008848 <___vfprintf_internal_r+0x1e18>
 8007738:	d8c13117 	ldw	r3,1220(sp)
 800773c:	10e5c83a 	sub	r18,r2,r3
 8007740:	4c834416 	blt	r9,r18,8008454 <___vfprintf_internal_r+0x1a24>
 8007744:	9005883a 	mov	r2,r18
 8007748:	90037216 	blt	r18,zero,8008514 <___vfprintf_internal_r+0x1ae4>
 800774c:	dd412783 	ldbu	r21,1182(sp)
 8007750:	d8812b15 	stw	r2,1196(sp)
 8007754:	dcc12d15 	stw	r19,1204(sp)
 8007758:	d8013215 	stw	zero,1224(sp)
 800775c:	d8013415 	stw	zero,1232(sp)
 8007760:	003e4706 	br	8007080 <__alt_data_end+0xfc007080>
 8007764:	dac12d17 	ldw	r11,1204(sp)
 8007768:	db012d17 	ldw	r12,1204(sp)
 800776c:	5ac00017 	ldw	r11,0(r11)
 8007770:	dac12e15 	stw	r11,1208(sp)
 8007774:	62c00104 	addi	r11,r12,4
 8007778:	db012e17 	ldw	r12,1208(sp)
 800777c:	60034a16 	blt	r12,zero,80084a8 <___vfprintf_internal_r+0x1a78>
 8007780:	dac12d15 	stw	r11,1204(sp)
 8007784:	1805883a 	mov	r2,r3
 8007788:	1c000007 	ldb	r16,0(r3)
 800778c:	003d0f06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8007790:	1805883a 	mov	r2,r3
 8007794:	01800ac4 	movi	r6,43
 8007798:	1c000007 	ldb	r16,0(r3)
 800779c:	003d0b06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 80077a0:	d8c12a15 	stw	r3,1192(sp)
 80077a4:	d9812785 	stb	r6,1182(sp)
 80077a8:	803db226 	beq	r16,zero,8006e74 <__alt_data_end+0xfc006e74>
 80077ac:	00c00044 	movi	r3,1
 80077b0:	d8c12b15 	stw	r3,1196(sp)
 80077b4:	dc010405 	stb	r16,1040(sp)
 80077b8:	d8012785 	stb	zero,1182(sp)
 80077bc:	003fb306 	br	800768c <__alt_data_end+0xfc00768c>
 80077c0:	d8c12017 	ldw	r3,1152(sp)
 80077c4:	003e6d06 	br	800717c <__alt_data_end+0xfc00717c>
 80077c8:	10803fcc 	andi	r2,r2,255
 80077cc:	00c00044 	movi	r3,1
 80077d0:	10fe141e 	bne	r2,r3,8007024 <__alt_data_end+0xfc007024>
 80077d4:	e000021e 	bne	fp,zero,80077e0 <___vfprintf_internal_r+0xdb0>
 80077d8:	00800244 	movi	r2,9
 80077dc:	14c0202e 	bgeu	r2,r19,8007860 <___vfprintf_internal_r+0xe30>
 80077e0:	dc012b15 	stw	r16,1196(sp)
 80077e4:	dc412c15 	stw	r17,1200(sp)
 80077e8:	9821883a 	mov	r16,r19
 80077ec:	e023883a 	mov	r17,fp
 80077f0:	dc810e04 	addi	r18,sp,1080
 80077f4:	4027883a 	mov	r19,r8
 80077f8:	4839883a 	mov	fp,r9
 80077fc:	8009883a 	mov	r4,r16
 8007800:	880b883a 	mov	r5,r17
 8007804:	01800284 	movi	r6,10
 8007808:	000f883a 	mov	r7,zero
 800780c:	8010aa40 	call	8010aa4 <__umoddi3>
 8007810:	10800c04 	addi	r2,r2,48
 8007814:	94bfffc4 	addi	r18,r18,-1
 8007818:	8009883a 	mov	r4,r16
 800781c:	880b883a 	mov	r5,r17
 8007820:	01800284 	movi	r6,10
 8007824:	000f883a 	mov	r7,zero
 8007828:	90800005 	stb	r2,0(r18)
 800782c:	80104e40 	call	80104e4 <__udivdi3>
 8007830:	1021883a 	mov	r16,r2
 8007834:	10c4b03a 	or	r2,r2,r3
 8007838:	1823883a 	mov	r17,r3
 800783c:	103fef1e 	bne	r2,zero,80077fc <__alt_data_end+0xfc0077fc>
 8007840:	dac12817 	ldw	r11,1184(sp)
 8007844:	dc813115 	stw	r18,1220(sp)
 8007848:	dc012b17 	ldw	r16,1196(sp)
 800784c:	9811883a 	mov	r8,r19
 8007850:	dc412c17 	ldw	r17,1200(sp)
 8007854:	e013883a 	mov	r9,fp
 8007858:	5ca5c83a 	sub	r18,r11,r18
 800785c:	003e0306 	br	800706c <__alt_data_end+0xfc00706c>
 8007860:	9cc00c04 	addi	r19,r19,48
 8007864:	d8c10dc4 	addi	r3,sp,1079
 8007868:	dcc10dc5 	stb	r19,1079(sp)
 800786c:	dc813c17 	ldw	r18,1264(sp)
 8007870:	d8c13115 	stw	r3,1220(sp)
 8007874:	003dfd06 	br	800706c <__alt_data_end+0xfc00706c>
 8007878:	00801944 	movi	r2,101
 800787c:	1400710e 	bge	r2,r16,8007a44 <___vfprintf_internal_r+0x1014>
 8007880:	d9013717 	ldw	r4,1244(sp)
 8007884:	d9413917 	ldw	r5,1252(sp)
 8007888:	000d883a 	mov	r6,zero
 800788c:	000f883a 	mov	r7,zero
 8007890:	d8c13d15 	stw	r3,1268(sp)
 8007894:	da013f15 	stw	r8,1276(sp)
 8007898:	8011a2c0 	call	8011a2c <__eqdf2>
 800789c:	d8c13d17 	ldw	r3,1268(sp)
 80078a0:	da013f17 	ldw	r8,1276(sp)
 80078a4:	1000ef1e 	bne	r2,zero,8007c64 <___vfprintf_internal_r+0x1234>
 80078a8:	d8811f17 	ldw	r2,1148(sp)
 80078ac:	010200b4 	movhi	r4,2050
 80078b0:	2100a804 	addi	r4,r4,672
 80078b4:	18c00044 	addi	r3,r3,1
 80078b8:	10800044 	addi	r2,r2,1
 80078bc:	41000015 	stw	r4,0(r8)
 80078c0:	01000044 	movi	r4,1
 80078c4:	41000115 	stw	r4,4(r8)
 80078c8:	d8c12015 	stw	r3,1152(sp)
 80078cc:	d8811f15 	stw	r2,1148(sp)
 80078d0:	010001c4 	movi	r4,7
 80078d4:	20828e16 	blt	r4,r2,8008310 <___vfprintf_internal_r+0x18e0>
 80078d8:	42000204 	addi	r8,r8,8
 80078dc:	d8812617 	ldw	r2,1176(sp)
 80078e0:	dac13317 	ldw	r11,1228(sp)
 80078e4:	12c00216 	blt	r2,r11,80078f0 <___vfprintf_internal_r+0xec0>
 80078e8:	8880004c 	andi	r2,r17,1
 80078ec:	103e7726 	beq	r2,zero,80072cc <__alt_data_end+0xfc0072cc>
 80078f0:	db013817 	ldw	r12,1248(sp)
 80078f4:	d8811f17 	ldw	r2,1148(sp)
 80078f8:	dac13517 	ldw	r11,1236(sp)
 80078fc:	1b07883a 	add	r3,r3,r12
 8007900:	10800044 	addi	r2,r2,1
 8007904:	42c00015 	stw	r11,0(r8)
 8007908:	43000115 	stw	r12,4(r8)
 800790c:	d8c12015 	stw	r3,1152(sp)
 8007910:	d8811f15 	stw	r2,1148(sp)
 8007914:	010001c4 	movi	r4,7
 8007918:	2082ed16 	blt	r4,r2,80084d0 <___vfprintf_internal_r+0x1aa0>
 800791c:	42000204 	addi	r8,r8,8
 8007920:	db013317 	ldw	r12,1228(sp)
 8007924:	643fffc4 	addi	r16,r12,-1
 8007928:	043e680e 	bge	zero,r16,80072cc <__alt_data_end+0xfc0072cc>
 800792c:	04800404 	movi	r18,16
 8007930:	d8811f17 	ldw	r2,1148(sp)
 8007934:	94007e0e 	bge	r18,r16,8007b30 <___vfprintf_internal_r+0x1100>
 8007938:	014200b4 	movhi	r5,2050
 800793c:	2940b084 	addi	r5,r5,706
 8007940:	d9412c15 	stw	r5,1200(sp)
 8007944:	054001c4 	movi	r21,7
 8007948:	00000306 	br	8007958 <___vfprintf_internal_r+0xf28>
 800794c:	42000204 	addi	r8,r8,8
 8007950:	843ffc04 	addi	r16,r16,-16
 8007954:	9400790e 	bge	r18,r16,8007b3c <___vfprintf_internal_r+0x110c>
 8007958:	18c00404 	addi	r3,r3,16
 800795c:	10800044 	addi	r2,r2,1
 8007960:	45000015 	stw	r20,0(r8)
 8007964:	44800115 	stw	r18,4(r8)
 8007968:	d8c12015 	stw	r3,1152(sp)
 800796c:	d8811f15 	stw	r2,1148(sp)
 8007970:	a8bff60e 	bge	r21,r2,800794c <__alt_data_end+0xfc00794c>
 8007974:	b009883a 	mov	r4,r22
 8007978:	b80b883a 	mov	r5,r23
 800797c:	d9811e04 	addi	r6,sp,1144
 8007980:	800e8140 	call	800e814 <__sprint_r>
 8007984:	103d411e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007988:	d8c12017 	ldw	r3,1152(sp)
 800798c:	d8811f17 	ldw	r2,1148(sp)
 8007990:	da000404 	addi	r8,sp,16
 8007994:	003fee06 	br	8007950 <__alt_data_end+0xfc007950>
 8007998:	dac12e17 	ldw	r11,1208(sp)
 800799c:	db012b17 	ldw	r12,1196(sp)
 80079a0:	5b2bc83a 	sub	r21,r11,r12
 80079a4:	057e130e 	bge	zero,r21,80071f4 <__alt_data_end+0xfc0071f4>
 80079a8:	07000404 	movi	fp,16
 80079ac:	d8811f17 	ldw	r2,1148(sp)
 80079b0:	e543640e 	bge	fp,r21,8008744 <___vfprintf_internal_r+0x1d14>
 80079b4:	014200b4 	movhi	r5,2050
 80079b8:	2940b084 	addi	r5,r5,706
 80079bc:	d9412c15 	stw	r5,1200(sp)
 80079c0:	04c001c4 	movi	r19,7
 80079c4:	00000306 	br	80079d4 <___vfprintf_internal_r+0xfa4>
 80079c8:	ad7ffc04 	addi	r21,r21,-16
 80079cc:	42000204 	addi	r8,r8,8
 80079d0:	e540110e 	bge	fp,r21,8007a18 <___vfprintf_internal_r+0xfe8>
 80079d4:	18c00404 	addi	r3,r3,16
 80079d8:	10800044 	addi	r2,r2,1
 80079dc:	45000015 	stw	r20,0(r8)
 80079e0:	47000115 	stw	fp,4(r8)
 80079e4:	d8c12015 	stw	r3,1152(sp)
 80079e8:	d8811f15 	stw	r2,1148(sp)
 80079ec:	98bff60e 	bge	r19,r2,80079c8 <__alt_data_end+0xfc0079c8>
 80079f0:	b009883a 	mov	r4,r22
 80079f4:	b80b883a 	mov	r5,r23
 80079f8:	d9811e04 	addi	r6,sp,1144
 80079fc:	800e8140 	call	800e814 <__sprint_r>
 8007a00:	103d221e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007a04:	ad7ffc04 	addi	r21,r21,-16
 8007a08:	d8c12017 	ldw	r3,1152(sp)
 8007a0c:	d8811f17 	ldw	r2,1148(sp)
 8007a10:	da000404 	addi	r8,sp,16
 8007a14:	e57fef16 	blt	fp,r21,80079d4 <__alt_data_end+0xfc0079d4>
 8007a18:	dac12c17 	ldw	r11,1200(sp)
 8007a1c:	1d47883a 	add	r3,r3,r21
 8007a20:	10800044 	addi	r2,r2,1
 8007a24:	42c00015 	stw	r11,0(r8)
 8007a28:	45400115 	stw	r21,4(r8)
 8007a2c:	d8c12015 	stw	r3,1152(sp)
 8007a30:	d8811f15 	stw	r2,1148(sp)
 8007a34:	010001c4 	movi	r4,7
 8007a38:	20819116 	blt	r4,r2,8008080 <___vfprintf_internal_r+0x1650>
 8007a3c:	42000204 	addi	r8,r8,8
 8007a40:	003dec06 	br	80071f4 <__alt_data_end+0xfc0071f4>
 8007a44:	db013317 	ldw	r12,1228(sp)
 8007a48:	00800044 	movi	r2,1
 8007a4c:	18c00044 	addi	r3,r3,1
 8007a50:	1301530e 	bge	r2,r12,8007fa0 <___vfprintf_internal_r+0x1570>
 8007a54:	dc011f17 	ldw	r16,1148(sp)
 8007a58:	dac13117 	ldw	r11,1220(sp)
 8007a5c:	00800044 	movi	r2,1
 8007a60:	84000044 	addi	r16,r16,1
 8007a64:	40800115 	stw	r2,4(r8)
 8007a68:	42c00015 	stw	r11,0(r8)
 8007a6c:	d8c12015 	stw	r3,1152(sp)
 8007a70:	dc011f15 	stw	r16,1148(sp)
 8007a74:	008001c4 	movi	r2,7
 8007a78:	14016b16 	blt	r2,r16,8008028 <___vfprintf_internal_r+0x15f8>
 8007a7c:	42000204 	addi	r8,r8,8
 8007a80:	db013817 	ldw	r12,1248(sp)
 8007a84:	dac13517 	ldw	r11,1236(sp)
 8007a88:	84000044 	addi	r16,r16,1
 8007a8c:	1b07883a 	add	r3,r3,r12
 8007a90:	42c00015 	stw	r11,0(r8)
 8007a94:	43000115 	stw	r12,4(r8)
 8007a98:	d8c12015 	stw	r3,1152(sp)
 8007a9c:	dc011f15 	stw	r16,1148(sp)
 8007aa0:	008001c4 	movi	r2,7
 8007aa4:	14016916 	blt	r2,r16,800804c <___vfprintf_internal_r+0x161c>
 8007aa8:	44800204 	addi	r18,r8,8
 8007aac:	d9013717 	ldw	r4,1244(sp)
 8007ab0:	d9413917 	ldw	r5,1252(sp)
 8007ab4:	000d883a 	mov	r6,zero
 8007ab8:	000f883a 	mov	r7,zero
 8007abc:	d8c13d15 	stw	r3,1268(sp)
 8007ac0:	8011a2c0 	call	8011a2c <__eqdf2>
 8007ac4:	d8c13d17 	ldw	r3,1268(sp)
 8007ac8:	db013317 	ldw	r12,1228(sp)
 8007acc:	1000ae26 	beq	r2,zero,8007d88 <___vfprintf_internal_r+0x1358>
 8007ad0:	dac13117 	ldw	r11,1220(sp)
 8007ad4:	60bfffc4 	addi	r2,r12,-1
 8007ad8:	1887883a 	add	r3,r3,r2
 8007adc:	59000044 	addi	r4,r11,1
 8007ae0:	84000044 	addi	r16,r16,1
 8007ae4:	90800115 	stw	r2,4(r18)
 8007ae8:	91000015 	stw	r4,0(r18)
 8007aec:	d8c12015 	stw	r3,1152(sp)
 8007af0:	dc011f15 	stw	r16,1148(sp)
 8007af4:	008001c4 	movi	r2,7
 8007af8:	14014216 	blt	r2,r16,8008004 <___vfprintf_internal_r+0x15d4>
 8007afc:	94800204 	addi	r18,r18,8
 8007b00:	dac13a17 	ldw	r11,1256(sp)
 8007b04:	dd4122c4 	addi	r21,sp,1163
 8007b08:	84000044 	addi	r16,r16,1
 8007b0c:	58c7883a 	add	r3,r11,r3
 8007b10:	95400015 	stw	r21,0(r18)
 8007b14:	92c00115 	stw	r11,4(r18)
 8007b18:	d8c12015 	stw	r3,1152(sp)
 8007b1c:	dc011f15 	stw	r16,1148(sp)
 8007b20:	008001c4 	movi	r2,7
 8007b24:	14000e16 	blt	r2,r16,8007b60 <___vfprintf_internal_r+0x1130>
 8007b28:	92000204 	addi	r8,r18,8
 8007b2c:	003de706 	br	80072cc <__alt_data_end+0xfc0072cc>
 8007b30:	010200b4 	movhi	r4,2050
 8007b34:	2100b084 	addi	r4,r4,706
 8007b38:	d9012c15 	stw	r4,1200(sp)
 8007b3c:	dac12c17 	ldw	r11,1200(sp)
 8007b40:	1c07883a 	add	r3,r3,r16
 8007b44:	44000115 	stw	r16,4(r8)
 8007b48:	42c00015 	stw	r11,0(r8)
 8007b4c:	10800044 	addi	r2,r2,1
 8007b50:	d8c12015 	stw	r3,1152(sp)
 8007b54:	d8811f15 	stw	r2,1148(sp)
 8007b58:	010001c4 	movi	r4,7
 8007b5c:	20bdda0e 	bge	r4,r2,80072c8 <__alt_data_end+0xfc0072c8>
 8007b60:	b009883a 	mov	r4,r22
 8007b64:	b80b883a 	mov	r5,r23
 8007b68:	d9811e04 	addi	r6,sp,1144
 8007b6c:	800e8140 	call	800e814 <__sprint_r>
 8007b70:	103cc61e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007b74:	d8c12017 	ldw	r3,1152(sp)
 8007b78:	da000404 	addi	r8,sp,16
 8007b7c:	003dd306 	br	80072cc <__alt_data_end+0xfc0072cc>
 8007b80:	b009883a 	mov	r4,r22
 8007b84:	b80b883a 	mov	r5,r23
 8007b88:	d9811e04 	addi	r6,sp,1144
 8007b8c:	800e8140 	call	800e814 <__sprint_r>
 8007b90:	103e0926 	beq	r2,zero,80073b8 <__alt_data_end+0xfc0073b8>
 8007b94:	003cbd06 	br	8006e8c <__alt_data_end+0xfc006e8c>
 8007b98:	10803fcc 	andi	r2,r2,255
 8007b9c:	1000651e 	bne	r2,zero,8007d34 <___vfprintf_internal_r+0x1304>
 8007ba0:	8880004c 	andi	r2,r17,1
 8007ba4:	10013226 	beq	r2,zero,8008070 <___vfprintf_internal_r+0x1640>
 8007ba8:	00800c04 	movi	r2,48
 8007bac:	d8c10dc4 	addi	r3,sp,1079
 8007bb0:	d8810dc5 	stb	r2,1079(sp)
 8007bb4:	dc813c17 	ldw	r18,1264(sp)
 8007bb8:	d8c13115 	stw	r3,1220(sp)
 8007bbc:	003d2b06 	br	800706c <__alt_data_end+0xfc00706c>
 8007bc0:	b009883a 	mov	r4,r22
 8007bc4:	b80b883a 	mov	r5,r23
 8007bc8:	d9811e04 	addi	r6,sp,1144
 8007bcc:	800e8140 	call	800e814 <__sprint_r>
 8007bd0:	103cae1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007bd4:	d8c12017 	ldw	r3,1152(sp)
 8007bd8:	da000404 	addi	r8,sp,16
 8007bdc:	003dae06 	br	8007298 <__alt_data_end+0xfc007298>
 8007be0:	b009883a 	mov	r4,r22
 8007be4:	b80b883a 	mov	r5,r23
 8007be8:	d9811e04 	addi	r6,sp,1144
 8007bec:	800e8140 	call	800e814 <__sprint_r>
 8007bf0:	103ca61e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007bf4:	d8c12017 	ldw	r3,1152(sp)
 8007bf8:	da000404 	addi	r8,sp,16
 8007bfc:	003d6c06 	br	80071b0 <__alt_data_end+0xfc0071b0>
 8007c00:	b009883a 	mov	r4,r22
 8007c04:	b80b883a 	mov	r5,r23
 8007c08:	d9811e04 	addi	r6,sp,1144
 8007c0c:	800e8140 	call	800e814 <__sprint_r>
 8007c10:	103c9e1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007c14:	d8c12017 	ldw	r3,1152(sp)
 8007c18:	da000404 	addi	r8,sp,16
 8007c1c:	003d7206 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007c20:	d9413b17 	ldw	r5,1260(sp)
 8007c24:	d8c10e04 	addi	r3,sp,1080
 8007c28:	988003cc 	andi	r2,r19,15
 8007c2c:	e008973a 	slli	r4,fp,28
 8007c30:	2885883a 	add	r2,r5,r2
 8007c34:	9826d13a 	srli	r19,r19,4
 8007c38:	10800003 	ldbu	r2,0(r2)
 8007c3c:	e038d13a 	srli	fp,fp,4
 8007c40:	18ffffc4 	addi	r3,r3,-1
 8007c44:	24e6b03a 	or	r19,r4,r19
 8007c48:	18800005 	stb	r2,0(r3)
 8007c4c:	9f04b03a 	or	r2,r19,fp
 8007c50:	103ff51e 	bne	r2,zero,8007c28 <__alt_data_end+0xfc007c28>
 8007c54:	db012817 	ldw	r12,1184(sp)
 8007c58:	d8c13115 	stw	r3,1220(sp)
 8007c5c:	60e5c83a 	sub	r18,r12,r3
 8007c60:	003d0206 	br	800706c <__alt_data_end+0xfc00706c>
 8007c64:	dc012617 	ldw	r16,1176(sp)
 8007c68:	0401b10e 	bge	zero,r16,8008330 <___vfprintf_internal_r+0x1900>
 8007c6c:	db013117 	ldw	r12,1220(sp)
 8007c70:	dac13317 	ldw	r11,1228(sp)
 8007c74:	62e1883a 	add	r16,r12,r11
 8007c78:	db013417 	ldw	r12,1232(sp)
 8007c7c:	5825883a 	mov	r18,r11
 8007c80:	62c0010e 	bge	r12,r11,8007c88 <___vfprintf_internal_r+0x1258>
 8007c84:	6025883a 	mov	r18,r12
 8007c88:	04800b0e 	bge	zero,r18,8007cb8 <___vfprintf_internal_r+0x1288>
 8007c8c:	d8811f17 	ldw	r2,1148(sp)
 8007c90:	dac13117 	ldw	r11,1220(sp)
 8007c94:	1c87883a 	add	r3,r3,r18
 8007c98:	10800044 	addi	r2,r2,1
 8007c9c:	42c00015 	stw	r11,0(r8)
 8007ca0:	44800115 	stw	r18,4(r8)
 8007ca4:	d8c12015 	stw	r3,1152(sp)
 8007ca8:	d8811f15 	stw	r2,1148(sp)
 8007cac:	010001c4 	movi	r4,7
 8007cb0:	20824f16 	blt	r4,r2,80085f0 <___vfprintf_internal_r+0x1bc0>
 8007cb4:	42000204 	addi	r8,r8,8
 8007cb8:	90024b16 	blt	r18,zero,80085e8 <___vfprintf_internal_r+0x1bb8>
 8007cbc:	db013417 	ldw	r12,1232(sp)
 8007cc0:	64a5c83a 	sub	r18,r12,r18
 8007cc4:	0480730e 	bge	zero,r18,8007e94 <___vfprintf_internal_r+0x1464>
 8007cc8:	05400404 	movi	r21,16
 8007ccc:	d8811f17 	ldw	r2,1148(sp)
 8007cd0:	ac817d0e 	bge	r21,r18,80082c8 <___vfprintf_internal_r+0x1898>
 8007cd4:	014200b4 	movhi	r5,2050
 8007cd8:	2940b084 	addi	r5,r5,706
 8007cdc:	d9412c15 	stw	r5,1200(sp)
 8007ce0:	070001c4 	movi	fp,7
 8007ce4:	00000306 	br	8007cf4 <___vfprintf_internal_r+0x12c4>
 8007ce8:	42000204 	addi	r8,r8,8
 8007cec:	94bffc04 	addi	r18,r18,-16
 8007cf0:	ac81780e 	bge	r21,r18,80082d4 <___vfprintf_internal_r+0x18a4>
 8007cf4:	18c00404 	addi	r3,r3,16
 8007cf8:	10800044 	addi	r2,r2,1
 8007cfc:	45000015 	stw	r20,0(r8)
 8007d00:	45400115 	stw	r21,4(r8)
 8007d04:	d8c12015 	stw	r3,1152(sp)
 8007d08:	d8811f15 	stw	r2,1148(sp)
 8007d0c:	e0bff60e 	bge	fp,r2,8007ce8 <__alt_data_end+0xfc007ce8>
 8007d10:	b009883a 	mov	r4,r22
 8007d14:	b80b883a 	mov	r5,r23
 8007d18:	d9811e04 	addi	r6,sp,1144
 8007d1c:	800e8140 	call	800e814 <__sprint_r>
 8007d20:	103c5a1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007d24:	d8c12017 	ldw	r3,1152(sp)
 8007d28:	d8811f17 	ldw	r2,1148(sp)
 8007d2c:	da000404 	addi	r8,sp,16
 8007d30:	003fee06 	br	8007cec <__alt_data_end+0xfc007cec>
 8007d34:	dac10e04 	addi	r11,sp,1080
 8007d38:	0025883a 	mov	r18,zero
 8007d3c:	dac13115 	stw	r11,1220(sp)
 8007d40:	003cca06 	br	800706c <__alt_data_end+0xfc00706c>
 8007d44:	b009883a 	mov	r4,r22
 8007d48:	b80b883a 	mov	r5,r23
 8007d4c:	d9811e04 	addi	r6,sp,1144
 8007d50:	800e8140 	call	800e814 <__sprint_r>
 8007d54:	103c4d1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007d58:	d8c12017 	ldw	r3,1152(sp)
 8007d5c:	d8812787 	ldb	r2,1182(sp)
 8007d60:	da000404 	addi	r8,sp,16
 8007d64:	003d0506 	br	800717c <__alt_data_end+0xfc00717c>
 8007d68:	dac12d17 	ldw	r11,1204(sp)
 8007d6c:	14c00017 	ldw	r19,0(r2)
 8007d70:	0039883a 	mov	fp,zero
 8007d74:	5ac00104 	addi	r11,r11,4
 8007d78:	dac12d15 	stw	r11,1204(sp)
 8007d7c:	0005883a 	mov	r2,zero
 8007d80:	9807883a 	mov	r3,r19
 8007d84:	003c9c06 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007d88:	657fffc4 	addi	r21,r12,-1
 8007d8c:	057f5c0e 	bge	zero,r21,8007b00 <__alt_data_end+0xfc007b00>
 8007d90:	07000404 	movi	fp,16
 8007d94:	e5408f0e 	bge	fp,r21,8007fd4 <___vfprintf_internal_r+0x15a4>
 8007d98:	010200b4 	movhi	r4,2050
 8007d9c:	2100b084 	addi	r4,r4,706
 8007da0:	d9012c15 	stw	r4,1200(sp)
 8007da4:	01c001c4 	movi	r7,7
 8007da8:	00000306 	br	8007db8 <___vfprintf_internal_r+0x1388>
 8007dac:	94800204 	addi	r18,r18,8
 8007db0:	ad7ffc04 	addi	r21,r21,-16
 8007db4:	e5408a0e 	bge	fp,r21,8007fe0 <___vfprintf_internal_r+0x15b0>
 8007db8:	18c00404 	addi	r3,r3,16
 8007dbc:	84000044 	addi	r16,r16,1
 8007dc0:	95000015 	stw	r20,0(r18)
 8007dc4:	97000115 	stw	fp,4(r18)
 8007dc8:	d8c12015 	stw	r3,1152(sp)
 8007dcc:	dc011f15 	stw	r16,1148(sp)
 8007dd0:	3c3ff60e 	bge	r7,r16,8007dac <__alt_data_end+0xfc007dac>
 8007dd4:	b009883a 	mov	r4,r22
 8007dd8:	b80b883a 	mov	r5,r23
 8007ddc:	d9811e04 	addi	r6,sp,1144
 8007de0:	d9c13d15 	stw	r7,1268(sp)
 8007de4:	800e8140 	call	800e814 <__sprint_r>
 8007de8:	d9c13d17 	ldw	r7,1268(sp)
 8007dec:	103c271e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007df0:	d8c12017 	ldw	r3,1152(sp)
 8007df4:	dc011f17 	ldw	r16,1148(sp)
 8007df8:	dc800404 	addi	r18,sp,16
 8007dfc:	003fec06 	br	8007db0 <__alt_data_end+0xfc007db0>
 8007e00:	1cc00017 	ldw	r19,0(r3)
 8007e04:	dac12d17 	ldw	r11,1204(sp)
 8007e08:	9839d7fa 	srai	fp,r19,31
 8007e0c:	5ac00104 	addi	r11,r11,4
 8007e10:	dac12d15 	stw	r11,1204(sp)
 8007e14:	e005883a 	mov	r2,fp
 8007e18:	003d9006 	br	800745c <__alt_data_end+0xfc00745c>
 8007e1c:	00800084 	movi	r2,2
 8007e20:	9f06b03a 	or	r3,r19,fp
 8007e24:	003c7406 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007e28:	db012d17 	ldw	r12,1204(sp)
 8007e2c:	14c00017 	ldw	r19,0(r2)
 8007e30:	0039883a 	mov	fp,zero
 8007e34:	63000104 	addi	r12,r12,4
 8007e38:	db012d15 	stw	r12,1204(sp)
 8007e3c:	00800044 	movi	r2,1
 8007e40:	9807883a 	mov	r3,r19
 8007e44:	003c6c06 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007e48:	10803fcc 	andi	r2,r2,255
 8007e4c:	1080201c 	xori	r2,r2,128
 8007e50:	10bfe004 	addi	r2,r2,-128
 8007e54:	01000c04 	movi	r4,48
 8007e58:	1101a526 	beq	r2,r4,80084f0 <___vfprintf_internal_r+0x1ac0>
 8007e5c:	dac13117 	ldw	r11,1220(sp)
 8007e60:	db012817 	ldw	r12,1184(sp)
 8007e64:	193fffc5 	stb	r4,-1(r3)
 8007e68:	5affffc4 	addi	r11,r11,-1
 8007e6c:	dac13115 	stw	r11,1220(sp)
 8007e70:	62e5c83a 	sub	r18,r12,r11
 8007e74:	003c7d06 	br	800706c <__alt_data_end+0xfc00706c>
 8007e78:	b009883a 	mov	r4,r22
 8007e7c:	b80b883a 	mov	r5,r23
 8007e80:	d9811e04 	addi	r6,sp,1144
 8007e84:	800e8140 	call	800e814 <__sprint_r>
 8007e88:	103c001e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007e8c:	d8c12017 	ldw	r3,1152(sp)
 8007e90:	da000404 	addi	r8,sp,16
 8007e94:	db013117 	ldw	r12,1220(sp)
 8007e98:	dac13417 	ldw	r11,1232(sp)
 8007e9c:	d8812617 	ldw	r2,1176(sp)
 8007ea0:	62e5883a 	add	r18,r12,r11
 8007ea4:	db013317 	ldw	r12,1228(sp)
 8007ea8:	13000216 	blt	r2,r12,8007eb4 <___vfprintf_internal_r+0x1484>
 8007eac:	8900004c 	andi	r4,r17,1
 8007eb0:	20000c26 	beq	r4,zero,8007ee4 <___vfprintf_internal_r+0x14b4>
 8007eb4:	dac13817 	ldw	r11,1248(sp)
 8007eb8:	d9011f17 	ldw	r4,1148(sp)
 8007ebc:	db013517 	ldw	r12,1236(sp)
 8007ec0:	1ac7883a 	add	r3,r3,r11
 8007ec4:	21000044 	addi	r4,r4,1
 8007ec8:	43000015 	stw	r12,0(r8)
 8007ecc:	42c00115 	stw	r11,4(r8)
 8007ed0:	d8c12015 	stw	r3,1152(sp)
 8007ed4:	d9011f15 	stw	r4,1148(sp)
 8007ed8:	014001c4 	movi	r5,7
 8007edc:	2901cc16 	blt	r5,r4,8008610 <___vfprintf_internal_r+0x1be0>
 8007ee0:	42000204 	addi	r8,r8,8
 8007ee4:	dac13317 	ldw	r11,1228(sp)
 8007ee8:	8489c83a 	sub	r4,r16,r18
 8007eec:	5885c83a 	sub	r2,r11,r2
 8007ef0:	1021883a 	mov	r16,r2
 8007ef4:	2080010e 	bge	r4,r2,8007efc <___vfprintf_internal_r+0x14cc>
 8007ef8:	2021883a 	mov	r16,r4
 8007efc:	04000a0e 	bge	zero,r16,8007f28 <___vfprintf_internal_r+0x14f8>
 8007f00:	d9011f17 	ldw	r4,1148(sp)
 8007f04:	1c07883a 	add	r3,r3,r16
 8007f08:	44800015 	stw	r18,0(r8)
 8007f0c:	21000044 	addi	r4,r4,1
 8007f10:	44000115 	stw	r16,4(r8)
 8007f14:	d8c12015 	stw	r3,1152(sp)
 8007f18:	d9011f15 	stw	r4,1148(sp)
 8007f1c:	014001c4 	movi	r5,7
 8007f20:	2901d616 	blt	r5,r4,800867c <___vfprintf_internal_r+0x1c4c>
 8007f24:	42000204 	addi	r8,r8,8
 8007f28:	8001df16 	blt	r16,zero,80086a8 <___vfprintf_internal_r+0x1c78>
 8007f2c:	1421c83a 	sub	r16,r2,r16
 8007f30:	043ce60e 	bge	zero,r16,80072cc <__alt_data_end+0xfc0072cc>
 8007f34:	04800404 	movi	r18,16
 8007f38:	d8811f17 	ldw	r2,1148(sp)
 8007f3c:	943efc0e 	bge	r18,r16,8007b30 <__alt_data_end+0xfc007b30>
 8007f40:	014200b4 	movhi	r5,2050
 8007f44:	2940b084 	addi	r5,r5,706
 8007f48:	d9412c15 	stw	r5,1200(sp)
 8007f4c:	054001c4 	movi	r21,7
 8007f50:	00000306 	br	8007f60 <___vfprintf_internal_r+0x1530>
 8007f54:	42000204 	addi	r8,r8,8
 8007f58:	843ffc04 	addi	r16,r16,-16
 8007f5c:	943ef70e 	bge	r18,r16,8007b3c <__alt_data_end+0xfc007b3c>
 8007f60:	18c00404 	addi	r3,r3,16
 8007f64:	10800044 	addi	r2,r2,1
 8007f68:	45000015 	stw	r20,0(r8)
 8007f6c:	44800115 	stw	r18,4(r8)
 8007f70:	d8c12015 	stw	r3,1152(sp)
 8007f74:	d8811f15 	stw	r2,1148(sp)
 8007f78:	a8bff60e 	bge	r21,r2,8007f54 <__alt_data_end+0xfc007f54>
 8007f7c:	b009883a 	mov	r4,r22
 8007f80:	b80b883a 	mov	r5,r23
 8007f84:	d9811e04 	addi	r6,sp,1144
 8007f88:	800e8140 	call	800e814 <__sprint_r>
 8007f8c:	103bbf1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8007f90:	d8c12017 	ldw	r3,1152(sp)
 8007f94:	d8811f17 	ldw	r2,1148(sp)
 8007f98:	da000404 	addi	r8,sp,16
 8007f9c:	003fee06 	br	8007f58 <__alt_data_end+0xfc007f58>
 8007fa0:	8888703a 	and	r4,r17,r2
 8007fa4:	203eab1e 	bne	r4,zero,8007a54 <__alt_data_end+0xfc007a54>
 8007fa8:	dc011f17 	ldw	r16,1148(sp)
 8007fac:	db013117 	ldw	r12,1220(sp)
 8007fb0:	40800115 	stw	r2,4(r8)
 8007fb4:	84000044 	addi	r16,r16,1
 8007fb8:	43000015 	stw	r12,0(r8)
 8007fbc:	d8c12015 	stw	r3,1152(sp)
 8007fc0:	dc011f15 	stw	r16,1148(sp)
 8007fc4:	008001c4 	movi	r2,7
 8007fc8:	14000e16 	blt	r2,r16,8008004 <___vfprintf_internal_r+0x15d4>
 8007fcc:	44800204 	addi	r18,r8,8
 8007fd0:	003ecb06 	br	8007b00 <__alt_data_end+0xfc007b00>
 8007fd4:	008200b4 	movhi	r2,2050
 8007fd8:	1080b084 	addi	r2,r2,706
 8007fdc:	d8812c15 	stw	r2,1200(sp)
 8007fe0:	dac12c17 	ldw	r11,1200(sp)
 8007fe4:	1d47883a 	add	r3,r3,r21
 8007fe8:	84000044 	addi	r16,r16,1
 8007fec:	92c00015 	stw	r11,0(r18)
 8007ff0:	95400115 	stw	r21,4(r18)
 8007ff4:	d8c12015 	stw	r3,1152(sp)
 8007ff8:	dc011f15 	stw	r16,1148(sp)
 8007ffc:	008001c4 	movi	r2,7
 8008000:	143ebe0e 	bge	r2,r16,8007afc <__alt_data_end+0xfc007afc>
 8008004:	b009883a 	mov	r4,r22
 8008008:	b80b883a 	mov	r5,r23
 800800c:	d9811e04 	addi	r6,sp,1144
 8008010:	800e8140 	call	800e814 <__sprint_r>
 8008014:	103b9d1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008018:	d8c12017 	ldw	r3,1152(sp)
 800801c:	dc011f17 	ldw	r16,1148(sp)
 8008020:	dc800404 	addi	r18,sp,16
 8008024:	003eb606 	br	8007b00 <__alt_data_end+0xfc007b00>
 8008028:	b009883a 	mov	r4,r22
 800802c:	b80b883a 	mov	r5,r23
 8008030:	d9811e04 	addi	r6,sp,1144
 8008034:	800e8140 	call	800e814 <__sprint_r>
 8008038:	103b941e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 800803c:	d8c12017 	ldw	r3,1152(sp)
 8008040:	dc011f17 	ldw	r16,1148(sp)
 8008044:	da000404 	addi	r8,sp,16
 8008048:	003e8d06 	br	8007a80 <__alt_data_end+0xfc007a80>
 800804c:	b009883a 	mov	r4,r22
 8008050:	b80b883a 	mov	r5,r23
 8008054:	d9811e04 	addi	r6,sp,1144
 8008058:	800e8140 	call	800e814 <__sprint_r>
 800805c:	103b8b1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008060:	d8c12017 	ldw	r3,1152(sp)
 8008064:	dc011f17 	ldw	r16,1148(sp)
 8008068:	dc800404 	addi	r18,sp,16
 800806c:	003e8f06 	br	8007aac <__alt_data_end+0xfc007aac>
 8008070:	db010e04 	addi	r12,sp,1080
 8008074:	0025883a 	mov	r18,zero
 8008078:	db013115 	stw	r12,1220(sp)
 800807c:	003bfb06 	br	800706c <__alt_data_end+0xfc00706c>
 8008080:	b009883a 	mov	r4,r22
 8008084:	b80b883a 	mov	r5,r23
 8008088:	d9811e04 	addi	r6,sp,1144
 800808c:	800e8140 	call	800e814 <__sprint_r>
 8008090:	103b7e1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008094:	d8c12017 	ldw	r3,1152(sp)
 8008098:	da000404 	addi	r8,sp,16
 800809c:	003c5506 	br	80071f4 <__alt_data_end+0xfc0071f4>
 80080a0:	04e7c83a 	sub	r19,zero,r19
 80080a4:	9804c03a 	cmpne	r2,r19,zero
 80080a8:	0739c83a 	sub	fp,zero,fp
 80080ac:	e0b9c83a 	sub	fp,fp,r2
 80080b0:	05400b44 	movi	r21,45
 80080b4:	dd412785 	stb	r21,1182(sp)
 80080b8:	da413215 	stw	r9,1224(sp)
 80080bc:	00800044 	movi	r2,1
 80080c0:	9f06b03a 	or	r3,r19,fp
 80080c4:	003bcf06 	br	8007004 <__alt_data_end+0xfc007004>
 80080c8:	da013f15 	stw	r8,1276(sp)
 80080cc:	da413e15 	stw	r9,1272(sp)
 80080d0:	800d2940 	call	800d294 <__fpclassifyd>
 80080d4:	da013f17 	ldw	r8,1276(sp)
 80080d8:	da413e17 	ldw	r9,1272(sp)
 80080dc:	1000ce26 	beq	r2,zero,8008418 <___vfprintf_internal_r+0x19e8>
 80080e0:	057ff7c4 	movi	r21,-33
 80080e4:	00bfffc4 	movi	r2,-1
 80080e8:	856a703a 	and	r21,r16,r21
 80080ec:	4881f026 	beq	r9,r2,80088b0 <___vfprintf_internal_r+0x1e80>
 80080f0:	008011c4 	movi	r2,71
 80080f4:	a881e526 	beq	r21,r2,800888c <___vfprintf_internal_r+0x1e5c>
 80080f8:	db013917 	ldw	r12,1252(sp)
 80080fc:	8ac04014 	ori	r11,r17,256
 8008100:	dac12d15 	stw	r11,1204(sp)
 8008104:	6001e416 	blt	r12,zero,8008898 <___vfprintf_internal_r+0x1e68>
 8008108:	dc813917 	ldw	r18,1252(sp)
 800810c:	d8012b05 	stb	zero,1196(sp)
 8008110:	00801984 	movi	r2,102
 8008114:	80811826 	beq	r16,r2,8008578 <___vfprintf_internal_r+0x1b48>
 8008118:	00801184 	movi	r2,70
 800811c:	80811626 	beq	r16,r2,8008578 <___vfprintf_internal_r+0x1b48>
 8008120:	00801144 	movi	r2,69
 8008124:	a881e026 	beq	r21,r2,80088a8 <___vfprintf_internal_r+0x1e78>
 8008128:	4839883a 	mov	fp,r9
 800812c:	d8812604 	addi	r2,sp,1176
 8008130:	d8800115 	stw	r2,4(sp)
 8008134:	d9413717 	ldw	r5,1244(sp)
 8008138:	d8812504 	addi	r2,sp,1172
 800813c:	d8800215 	stw	r2,8(sp)
 8008140:	d8812104 	addi	r2,sp,1156
 8008144:	df000015 	stw	fp,0(sp)
 8008148:	d8800315 	stw	r2,12(sp)
 800814c:	b009883a 	mov	r4,r22
 8008150:	900d883a 	mov	r6,r18
 8008154:	01c00084 	movi	r7,2
 8008158:	da013f15 	stw	r8,1276(sp)
 800815c:	da413e15 	stw	r9,1272(sp)
 8008160:	8008d800 	call	8008d80 <_dtoa_r>
 8008164:	d8813115 	stw	r2,1220(sp)
 8008168:	008019c4 	movi	r2,103
 800816c:	da013f17 	ldw	r8,1276(sp)
 8008170:	da413e17 	ldw	r9,1272(sp)
 8008174:	80800226 	beq	r16,r2,8008180 <___vfprintf_internal_r+0x1750>
 8008178:	008011c4 	movi	r2,71
 800817c:	8081101e 	bne	r16,r2,80085c0 <___vfprintf_internal_r+0x1b90>
 8008180:	8880004c 	andi	r2,r17,1
 8008184:	1001df26 	beq	r2,zero,8008904 <___vfprintf_internal_r+0x1ed4>
 8008188:	db013117 	ldw	r12,1220(sp)
 800818c:	6715883a 	add	r10,r12,fp
 8008190:	d9013717 	ldw	r4,1244(sp)
 8008194:	900b883a 	mov	r5,r18
 8008198:	000d883a 	mov	r6,zero
 800819c:	000f883a 	mov	r7,zero
 80081a0:	da013f15 	stw	r8,1276(sp)
 80081a4:	da413e15 	stw	r9,1272(sp)
 80081a8:	da813d15 	stw	r10,1268(sp)
 80081ac:	8011a2c0 	call	8011a2c <__eqdf2>
 80081b0:	da013f17 	ldw	r8,1276(sp)
 80081b4:	da413e17 	ldw	r9,1272(sp)
 80081b8:	da813d17 	ldw	r10,1268(sp)
 80081bc:	10016526 	beq	r2,zero,8008754 <___vfprintf_internal_r+0x1d24>
 80081c0:	d8812117 	ldw	r2,1156(sp)
 80081c4:	1280062e 	bgeu	r2,r10,80081e0 <___vfprintf_internal_r+0x17b0>
 80081c8:	01000c04 	movi	r4,48
 80081cc:	10c00044 	addi	r3,r2,1
 80081d0:	d8c12115 	stw	r3,1156(sp)
 80081d4:	11000005 	stb	r4,0(r2)
 80081d8:	d8812117 	ldw	r2,1156(sp)
 80081dc:	12bffb36 	bltu	r2,r10,80081cc <__alt_data_end+0xfc0081cc>
 80081e0:	db013117 	ldw	r12,1220(sp)
 80081e4:	1305c83a 	sub	r2,r2,r12
 80081e8:	d8813315 	stw	r2,1228(sp)
 80081ec:	008011c4 	movi	r2,71
 80081f0:	a8814a26 	beq	r21,r2,800871c <___vfprintf_internal_r+0x1cec>
 80081f4:	00801944 	movi	r2,101
 80081f8:	14020a0e 	bge	r2,r16,8008a24 <___vfprintf_internal_r+0x1ff4>
 80081fc:	00801984 	movi	r2,102
 8008200:	8081b626 	beq	r16,r2,80088dc <___vfprintf_internal_r+0x1eac>
 8008204:	db012617 	ldw	r12,1176(sp)
 8008208:	db013415 	stw	r12,1232(sp)
 800820c:	db013417 	ldw	r12,1232(sp)
 8008210:	dac13317 	ldw	r11,1228(sp)
 8008214:	62c1a816 	blt	r12,r11,80088b8 <___vfprintf_internal_r+0x1e88>
 8008218:	8c40004c 	andi	r17,r17,1
 800821c:	8801ca1e 	bne	r17,zero,8008948 <___vfprintf_internal_r+0x1f18>
 8008220:	6005883a 	mov	r2,r12
 8008224:	6001b516 	blt	r12,zero,80088fc <___vfprintf_internal_r+0x1ecc>
 8008228:	dc813417 	ldw	r18,1232(sp)
 800822c:	df012b07 	ldb	fp,1196(sp)
 8008230:	e001321e 	bne	fp,zero,80086fc <___vfprintf_internal_r+0x1ccc>
 8008234:	dc412d17 	ldw	r17,1204(sp)
 8008238:	dd412783 	ldbu	r21,1182(sp)
 800823c:	d8812b15 	stw	r2,1196(sp)
 8008240:	dcc12d15 	stw	r19,1204(sp)
 8008244:	d8013215 	stw	zero,1224(sp)
 8008248:	003b8d06 	br	8007080 <__alt_data_end+0xfc007080>
 800824c:	88c0100c 	andi	r3,r17,64
 8008250:	18008226 	beq	r3,zero,800845c <___vfprintf_internal_r+0x1a2c>
 8008254:	dac12d17 	ldw	r11,1204(sp)
 8008258:	14c0000b 	ldhu	r19,0(r2)
 800825c:	0039883a 	mov	fp,zero
 8008260:	5ac00104 	addi	r11,r11,4
 8008264:	dac12d15 	stw	r11,1204(sp)
 8008268:	003c8f06 	br	80074a8 <__alt_data_end+0xfc0074a8>
 800826c:	1c000007 	ldb	r16,0(r3)
 8008270:	1805883a 	mov	r2,r3
 8008274:	003a5506 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8008278:	00800084 	movi	r2,2
 800827c:	003b5e06 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8008280:	8880040c 	andi	r2,r17,16
 8008284:	1000091e 	bne	r2,zero,80082ac <___vfprintf_internal_r+0x187c>
 8008288:	8c40100c 	andi	r17,r17,64
 800828c:	88000726 	beq	r17,zero,80082ac <___vfprintf_internal_r+0x187c>
 8008290:	db012d17 	ldw	r12,1204(sp)
 8008294:	dac12f17 	ldw	r11,1212(sp)
 8008298:	60800017 	ldw	r2,0(r12)
 800829c:	63000104 	addi	r12,r12,4
 80082a0:	db012d15 	stw	r12,1204(sp)
 80082a4:	12c0000d 	sth	r11,0(r2)
 80082a8:	003a1e06 	br	8006b24 <__alt_data_end+0xfc006b24>
 80082ac:	db012d17 	ldw	r12,1204(sp)
 80082b0:	dac12f17 	ldw	r11,1212(sp)
 80082b4:	60800017 	ldw	r2,0(r12)
 80082b8:	63000104 	addi	r12,r12,4
 80082bc:	db012d15 	stw	r12,1204(sp)
 80082c0:	12c00015 	stw	r11,0(r2)
 80082c4:	003a1706 	br	8006b24 <__alt_data_end+0xfc006b24>
 80082c8:	010200b4 	movhi	r4,2050
 80082cc:	2100b084 	addi	r4,r4,706
 80082d0:	d9012c15 	stw	r4,1200(sp)
 80082d4:	dac12c17 	ldw	r11,1200(sp)
 80082d8:	1c87883a 	add	r3,r3,r18
 80082dc:	10800044 	addi	r2,r2,1
 80082e0:	42c00015 	stw	r11,0(r8)
 80082e4:	44800115 	stw	r18,4(r8)
 80082e8:	d8c12015 	stw	r3,1152(sp)
 80082ec:	d8811f15 	stw	r2,1148(sp)
 80082f0:	010001c4 	movi	r4,7
 80082f4:	20bee016 	blt	r4,r2,8007e78 <__alt_data_end+0xfc007e78>
 80082f8:	42000204 	addi	r8,r8,8
 80082fc:	003ee506 	br	8007e94 <__alt_data_end+0xfc007e94>
 8008300:	010200b4 	movhi	r4,2050
 8008304:	2100b084 	addi	r4,r4,706
 8008308:	d9012c15 	stw	r4,1200(sp)
 800830c:	003bd806 	br	8007270 <__alt_data_end+0xfc007270>
 8008310:	b009883a 	mov	r4,r22
 8008314:	b80b883a 	mov	r5,r23
 8008318:	d9811e04 	addi	r6,sp,1144
 800831c:	800e8140 	call	800e814 <__sprint_r>
 8008320:	103ada1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008324:	d8c12017 	ldw	r3,1152(sp)
 8008328:	da000404 	addi	r8,sp,16
 800832c:	003d6b06 	br	80078dc <__alt_data_end+0xfc0078dc>
 8008330:	d8811f17 	ldw	r2,1148(sp)
 8008334:	030200b4 	movhi	r12,2050
 8008338:	01000044 	movi	r4,1
 800833c:	18c00044 	addi	r3,r3,1
 8008340:	10800044 	addi	r2,r2,1
 8008344:	6300a804 	addi	r12,r12,672
 8008348:	41000115 	stw	r4,4(r8)
 800834c:	43000015 	stw	r12,0(r8)
 8008350:	d8c12015 	stw	r3,1152(sp)
 8008354:	d8811f15 	stw	r2,1148(sp)
 8008358:	010001c4 	movi	r4,7
 800835c:	20804916 	blt	r4,r2,8008484 <___vfprintf_internal_r+0x1a54>
 8008360:	42000204 	addi	r8,r8,8
 8008364:	8000041e 	bne	r16,zero,8008378 <___vfprintf_internal_r+0x1948>
 8008368:	dac13317 	ldw	r11,1228(sp)
 800836c:	5800021e 	bne	r11,zero,8008378 <___vfprintf_internal_r+0x1948>
 8008370:	8880004c 	andi	r2,r17,1
 8008374:	103bd526 	beq	r2,zero,80072cc <__alt_data_end+0xfc0072cc>
 8008378:	db013817 	ldw	r12,1248(sp)
 800837c:	d8811f17 	ldw	r2,1148(sp)
 8008380:	dac13517 	ldw	r11,1236(sp)
 8008384:	1b07883a 	add	r3,r3,r12
 8008388:	10800044 	addi	r2,r2,1
 800838c:	42c00015 	stw	r11,0(r8)
 8008390:	43000115 	stw	r12,4(r8)
 8008394:	d8c12015 	stw	r3,1152(sp)
 8008398:	d8811f15 	stw	r2,1148(sp)
 800839c:	010001c4 	movi	r4,7
 80083a0:	20813016 	blt	r4,r2,8008864 <___vfprintf_internal_r+0x1e34>
 80083a4:	42000204 	addi	r8,r8,8
 80083a8:	0421c83a 	sub	r16,zero,r16
 80083ac:	0400630e 	bge	zero,r16,800853c <___vfprintf_internal_r+0x1b0c>
 80083b0:	04800404 	movi	r18,16
 80083b4:	94009f0e 	bge	r18,r16,8008634 <___vfprintf_internal_r+0x1c04>
 80083b8:	010200b4 	movhi	r4,2050
 80083bc:	2100b084 	addi	r4,r4,706
 80083c0:	d9012c15 	stw	r4,1200(sp)
 80083c4:	054001c4 	movi	r21,7
 80083c8:	00000306 	br	80083d8 <___vfprintf_internal_r+0x19a8>
 80083cc:	42000204 	addi	r8,r8,8
 80083d0:	843ffc04 	addi	r16,r16,-16
 80083d4:	94009a0e 	bge	r18,r16,8008640 <___vfprintf_internal_r+0x1c10>
 80083d8:	18c00404 	addi	r3,r3,16
 80083dc:	10800044 	addi	r2,r2,1
 80083e0:	45000015 	stw	r20,0(r8)
 80083e4:	44800115 	stw	r18,4(r8)
 80083e8:	d8c12015 	stw	r3,1152(sp)
 80083ec:	d8811f15 	stw	r2,1148(sp)
 80083f0:	a8bff60e 	bge	r21,r2,80083cc <__alt_data_end+0xfc0083cc>
 80083f4:	b009883a 	mov	r4,r22
 80083f8:	b80b883a 	mov	r5,r23
 80083fc:	d9811e04 	addi	r6,sp,1144
 8008400:	800e8140 	call	800e814 <__sprint_r>
 8008404:	103aa11e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008408:	d8c12017 	ldw	r3,1152(sp)
 800840c:	d8811f17 	ldw	r2,1148(sp)
 8008410:	da000404 	addi	r8,sp,16
 8008414:	003fee06 	br	80083d0 <__alt_data_end+0xfc0083d0>
 8008418:	008011c4 	movi	r2,71
 800841c:	1400b316 	blt	r2,r16,80086ec <___vfprintf_internal_r+0x1cbc>
 8008420:	030200b4 	movhi	r12,2050
 8008424:	63009a04 	addi	r12,r12,616
 8008428:	db013115 	stw	r12,1220(sp)
 800842c:	00c000c4 	movi	r3,3
 8008430:	00bfdfc4 	movi	r2,-129
 8008434:	d8c12b15 	stw	r3,1196(sp)
 8008438:	88a2703a 	and	r17,r17,r2
 800843c:	dd412783 	ldbu	r21,1182(sp)
 8008440:	dcc12d15 	stw	r19,1204(sp)
 8008444:	1825883a 	mov	r18,r3
 8008448:	d8013215 	stw	zero,1224(sp)
 800844c:	d8013415 	stw	zero,1232(sp)
 8008450:	003b0b06 	br	8007080 <__alt_data_end+0xfc007080>
 8008454:	4825883a 	mov	r18,r9
 8008458:	003cba06 	br	8007744 <__alt_data_end+0xfc007744>
 800845c:	db012d17 	ldw	r12,1204(sp)
 8008460:	14c00017 	ldw	r19,0(r2)
 8008464:	0039883a 	mov	fp,zero
 8008468:	63000104 	addi	r12,r12,4
 800846c:	db012d15 	stw	r12,1204(sp)
 8008470:	003c0d06 	br	80074a8 <__alt_data_end+0xfc0074a8>
 8008474:	008200b4 	movhi	r2,2050
 8008478:	10809804 	addi	r2,r2,608
 800847c:	d8813115 	stw	r2,1220(sp)
 8008480:	003ac406 	br	8006f94 <__alt_data_end+0xfc006f94>
 8008484:	b009883a 	mov	r4,r22
 8008488:	b80b883a 	mov	r5,r23
 800848c:	d9811e04 	addi	r6,sp,1144
 8008490:	800e8140 	call	800e814 <__sprint_r>
 8008494:	103a7d1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008498:	dc012617 	ldw	r16,1176(sp)
 800849c:	d8c12017 	ldw	r3,1152(sp)
 80084a0:	da000404 	addi	r8,sp,16
 80084a4:	003faf06 	br	8008364 <__alt_data_end+0xfc008364>
 80084a8:	db012e17 	ldw	r12,1208(sp)
 80084ac:	1805883a 	mov	r2,r3
 80084b0:	dac12d15 	stw	r11,1204(sp)
 80084b4:	0319c83a 	sub	r12,zero,r12
 80084b8:	db012e15 	stw	r12,1208(sp)
 80084bc:	003a7e06 	br	8006eb8 <__alt_data_end+0xfc006eb8>
 80084c0:	18800044 	addi	r2,r3,1
 80084c4:	8c400814 	ori	r17,r17,32
 80084c8:	1c000047 	ldb	r16,1(r3)
 80084cc:	0039bf06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 80084d0:	b009883a 	mov	r4,r22
 80084d4:	b80b883a 	mov	r5,r23
 80084d8:	d9811e04 	addi	r6,sp,1144
 80084dc:	800e8140 	call	800e814 <__sprint_r>
 80084e0:	103a6a1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 80084e4:	d8c12017 	ldw	r3,1152(sp)
 80084e8:	da000404 	addi	r8,sp,16
 80084ec:	003d0c06 	br	8007920 <__alt_data_end+0xfc007920>
 80084f0:	db012817 	ldw	r12,1184(sp)
 80084f4:	d8c13117 	ldw	r3,1220(sp)
 80084f8:	60e5c83a 	sub	r18,r12,r3
 80084fc:	003adb06 	br	800706c <__alt_data_end+0xfc00706c>
 8008500:	da013f15 	stw	r8,1276(sp)
 8008504:	8004a080 	call	8004a08 <strlen>
 8008508:	1025883a 	mov	r18,r2
 800850c:	da013f17 	ldw	r8,1276(sp)
 8008510:	903c8e0e 	bge	r18,zero,800774c <__alt_data_end+0xfc00774c>
 8008514:	0005883a 	mov	r2,zero
 8008518:	003c8c06 	br	800774c <__alt_data_end+0xfc00774c>
 800851c:	b009883a 	mov	r4,r22
 8008520:	b80b883a 	mov	r5,r23
 8008524:	d9811e04 	addi	r6,sp,1144
 8008528:	800e8140 	call	800e814 <__sprint_r>
 800852c:	103a571e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008530:	d8c12017 	ldw	r3,1152(sp)
 8008534:	d8811f17 	ldw	r2,1148(sp)
 8008538:	da000404 	addi	r8,sp,16
 800853c:	db013317 	ldw	r12,1228(sp)
 8008540:	dac13117 	ldw	r11,1220(sp)
 8008544:	10800044 	addi	r2,r2,1
 8008548:	60c7883a 	add	r3,r12,r3
 800854c:	42c00015 	stw	r11,0(r8)
 8008550:	43000115 	stw	r12,4(r8)
 8008554:	d8c12015 	stw	r3,1152(sp)
 8008558:	d8811f15 	stw	r2,1148(sp)
 800855c:	010001c4 	movi	r4,7
 8008560:	20bb590e 	bge	r4,r2,80072c8 <__alt_data_end+0xfc0072c8>
 8008564:	003d7e06 	br	8007b60 <__alt_data_end+0xfc007b60>
 8008568:	010200b4 	movhi	r4,2050
 800856c:	2100b484 	addi	r4,r4,722
 8008570:	d9013615 	stw	r4,1240(sp)
 8008574:	003af606 	br	8007150 <__alt_data_end+0xfc007150>
 8008578:	d8812604 	addi	r2,sp,1176
 800857c:	d8800115 	stw	r2,4(sp)
 8008580:	d9413717 	ldw	r5,1244(sp)
 8008584:	d8812504 	addi	r2,sp,1172
 8008588:	d8800215 	stw	r2,8(sp)
 800858c:	d8812104 	addi	r2,sp,1156
 8008590:	da400015 	stw	r9,0(sp)
 8008594:	d8800315 	stw	r2,12(sp)
 8008598:	b009883a 	mov	r4,r22
 800859c:	900d883a 	mov	r6,r18
 80085a0:	01c000c4 	movi	r7,3
 80085a4:	da013f15 	stw	r8,1276(sp)
 80085a8:	da413e15 	stw	r9,1272(sp)
 80085ac:	8008d800 	call	8008d80 <_dtoa_r>
 80085b0:	da413e17 	ldw	r9,1272(sp)
 80085b4:	da013f17 	ldw	r8,1276(sp)
 80085b8:	d8813115 	stw	r2,1220(sp)
 80085bc:	4839883a 	mov	fp,r9
 80085c0:	dac13117 	ldw	r11,1220(sp)
 80085c4:	00801184 	movi	r2,70
 80085c8:	5f15883a 	add	r10,r11,fp
 80085cc:	a8bef01e 	bne	r21,r2,8008190 <__alt_data_end+0xfc008190>
 80085d0:	59000007 	ldb	r4,0(r11)
 80085d4:	00800c04 	movi	r2,48
 80085d8:	2080e026 	beq	r4,r2,800895c <___vfprintf_internal_r+0x1f2c>
 80085dc:	d8c12617 	ldw	r3,1176(sp)
 80085e0:	50d5883a 	add	r10,r10,r3
 80085e4:	003eea06 	br	8008190 <__alt_data_end+0xfc008190>
 80085e8:	0025883a 	mov	r18,zero
 80085ec:	003db306 	br	8007cbc <__alt_data_end+0xfc007cbc>
 80085f0:	b009883a 	mov	r4,r22
 80085f4:	b80b883a 	mov	r5,r23
 80085f8:	d9811e04 	addi	r6,sp,1144
 80085fc:	800e8140 	call	800e814 <__sprint_r>
 8008600:	103a221e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008604:	d8c12017 	ldw	r3,1152(sp)
 8008608:	da000404 	addi	r8,sp,16
 800860c:	003daa06 	br	8007cb8 <__alt_data_end+0xfc007cb8>
 8008610:	b009883a 	mov	r4,r22
 8008614:	b80b883a 	mov	r5,r23
 8008618:	d9811e04 	addi	r6,sp,1144
 800861c:	800e8140 	call	800e814 <__sprint_r>
 8008620:	103a1a1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008624:	d8812617 	ldw	r2,1176(sp)
 8008628:	d8c12017 	ldw	r3,1152(sp)
 800862c:	da000404 	addi	r8,sp,16
 8008630:	003e2c06 	br	8007ee4 <__alt_data_end+0xfc007ee4>
 8008634:	030200b4 	movhi	r12,2050
 8008638:	6300b084 	addi	r12,r12,706
 800863c:	db012c15 	stw	r12,1200(sp)
 8008640:	dac12c17 	ldw	r11,1200(sp)
 8008644:	1c07883a 	add	r3,r3,r16
 8008648:	10800044 	addi	r2,r2,1
 800864c:	42c00015 	stw	r11,0(r8)
 8008650:	44000115 	stw	r16,4(r8)
 8008654:	d8c12015 	stw	r3,1152(sp)
 8008658:	d8811f15 	stw	r2,1148(sp)
 800865c:	010001c4 	movi	r4,7
 8008660:	20bfae16 	blt	r4,r2,800851c <__alt_data_end+0xfc00851c>
 8008664:	42000204 	addi	r8,r8,8
 8008668:	003fb406 	br	800853c <__alt_data_end+0xfc00853c>
 800866c:	030200b4 	movhi	r12,2050
 8008670:	6300b484 	addi	r12,r12,722
 8008674:	db013615 	stw	r12,1240(sp)
 8008678:	003b3806 	br	800735c <__alt_data_end+0xfc00735c>
 800867c:	b009883a 	mov	r4,r22
 8008680:	b80b883a 	mov	r5,r23
 8008684:	d9811e04 	addi	r6,sp,1144
 8008688:	800e8140 	call	800e814 <__sprint_r>
 800868c:	1039ff1e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008690:	d8812617 	ldw	r2,1176(sp)
 8008694:	db013317 	ldw	r12,1228(sp)
 8008698:	d8c12017 	ldw	r3,1152(sp)
 800869c:	da000404 	addi	r8,sp,16
 80086a0:	6085c83a 	sub	r2,r12,r2
 80086a4:	003e2006 	br	8007f28 <__alt_data_end+0xfc007f28>
 80086a8:	0021883a 	mov	r16,zero
 80086ac:	003e1f06 	br	8007f2c <__alt_data_end+0xfc007f2c>
 80086b0:	00800184 	movi	r2,6
 80086b4:	1240012e 	bgeu	r2,r9,80086bc <___vfprintf_internal_r+0x1c8c>
 80086b8:	1013883a 	mov	r9,r2
 80086bc:	4825883a 	mov	r18,r9
 80086c0:	4805883a 	mov	r2,r9
 80086c4:	48009e16 	blt	r9,zero,8008940 <___vfprintf_internal_r+0x1f10>
 80086c8:	d8812b15 	stw	r2,1196(sp)
 80086cc:	008200b4 	movhi	r2,2050
 80086d0:	1080a604 	addi	r2,r2,664
 80086d4:	d8813115 	stw	r2,1220(sp)
 80086d8:	dcc12d15 	stw	r19,1204(sp)
 80086dc:	d8013215 	stw	zero,1224(sp)
 80086e0:	d8013415 	stw	zero,1232(sp)
 80086e4:	0005883a 	mov	r2,zero
 80086e8:	003a6c06 	br	800709c <__alt_data_end+0xfc00709c>
 80086ec:	008200b4 	movhi	r2,2050
 80086f0:	10809b04 	addi	r2,r2,620
 80086f4:	d8813115 	stw	r2,1220(sp)
 80086f8:	003f4c06 	br	800842c <__alt_data_end+0xfc00842c>
 80086fc:	00c00b44 	movi	r3,45
 8008700:	d8812b15 	stw	r2,1196(sp)
 8008704:	dc412d17 	ldw	r17,1204(sp)
 8008708:	d8c12785 	stb	r3,1182(sp)
 800870c:	dcc12d15 	stw	r19,1204(sp)
 8008710:	d8013215 	stw	zero,1224(sp)
 8008714:	00800b44 	movi	r2,45
 8008718:	003a5d06 	br	8007090 <__alt_data_end+0xfc007090>
 800871c:	d8c12617 	ldw	r3,1176(sp)
 8008720:	00bfff44 	movi	r2,-3
 8008724:	18800d16 	blt	r3,r2,800875c <___vfprintf_internal_r+0x1d2c>
 8008728:	48c00c16 	blt	r9,r3,800875c <___vfprintf_internal_r+0x1d2c>
 800872c:	d8c13415 	stw	r3,1232(sp)
 8008730:	040019c4 	movi	r16,103
 8008734:	003eb506 	br	800820c <__alt_data_end+0xfc00820c>
 8008738:	05400b44 	movi	r21,45
 800873c:	dd412785 	stb	r21,1182(sp)
 8008740:	003a0f06 	br	8006f80 <__alt_data_end+0xfc006f80>
 8008744:	010200b4 	movhi	r4,2050
 8008748:	2100b084 	addi	r4,r4,706
 800874c:	d9012c15 	stw	r4,1200(sp)
 8008750:	003cb106 	br	8007a18 <__alt_data_end+0xfc007a18>
 8008754:	5005883a 	mov	r2,r10
 8008758:	003ea106 	br	80081e0 <__alt_data_end+0xfc0081e0>
 800875c:	843fff84 	addi	r16,r16,-2
 8008760:	1f3fffc4 	addi	fp,r3,-1
 8008764:	df012615 	stw	fp,1176(sp)
 8008768:	dc0122c5 	stb	r16,1163(sp)
 800876c:	e0009516 	blt	fp,zero,80089c4 <___vfprintf_internal_r+0x1f94>
 8008770:	00800ac4 	movi	r2,43
 8008774:	d8812305 	stb	r2,1164(sp)
 8008778:	00800244 	movi	r2,9
 800877c:	1700690e 	bge	r2,fp,8008924 <___vfprintf_internal_r+0x1ef4>
 8008780:	dd4122c4 	addi	r21,sp,1163
 8008784:	dc012c15 	stw	r16,1200(sp)
 8008788:	8825883a 	mov	r18,r17
 800878c:	a821883a 	mov	r16,r21
 8008790:	4023883a 	mov	r17,r8
 8008794:	e009883a 	mov	r4,fp
 8008798:	01400284 	movi	r5,10
 800879c:	80110f40 	call	80110f4 <__modsi3>
 80087a0:	10800c04 	addi	r2,r2,48
 80087a4:	843fffc4 	addi	r16,r16,-1
 80087a8:	e009883a 	mov	r4,fp
 80087ac:	01400284 	movi	r5,10
 80087b0:	80800005 	stb	r2,0(r16)
 80087b4:	80110a00 	call	80110a0 <__divsi3>
 80087b8:	1039883a 	mov	fp,r2
 80087bc:	00800244 	movi	r2,9
 80087c0:	173ff416 	blt	r2,fp,8008794 <__alt_data_end+0xfc008794>
 80087c4:	8811883a 	mov	r8,r17
 80087c8:	e0800c04 	addi	r2,fp,48
 80087cc:	9023883a 	mov	r17,r18
 80087d0:	8025883a 	mov	r18,r16
 80087d4:	913fffc4 	addi	r4,r18,-1
 80087d8:	90bfffc5 	stb	r2,-1(r18)
 80087dc:	dc012c17 	ldw	r16,1200(sp)
 80087e0:	25408e2e 	bgeu	r4,r21,8008a1c <___vfprintf_internal_r+0x1fec>
 80087e4:	d9412384 	addi	r5,sp,1166
 80087e8:	2c8bc83a 	sub	r5,r5,r18
 80087ec:	d8c12344 	addi	r3,sp,1165
 80087f0:	a94b883a 	add	r5,r21,r5
 80087f4:	00000106 	br	80087fc <___vfprintf_internal_r+0x1dcc>
 80087f8:	20800003 	ldbu	r2,0(r4)
 80087fc:	18800005 	stb	r2,0(r3)
 8008800:	18c00044 	addi	r3,r3,1
 8008804:	21000044 	addi	r4,r4,1
 8008808:	197ffb1e 	bne	r3,r5,80087f8 <__alt_data_end+0xfc0087f8>
 800880c:	d8812304 	addi	r2,sp,1164
 8008810:	1485c83a 	sub	r2,r2,r18
 8008814:	d8c12344 	addi	r3,sp,1165
 8008818:	1885883a 	add	r2,r3,r2
 800881c:	dac13317 	ldw	r11,1228(sp)
 8008820:	156bc83a 	sub	r21,r2,r21
 8008824:	dd413a15 	stw	r21,1256(sp)
 8008828:	00800044 	movi	r2,1
 800882c:	5d65883a 	add	r18,r11,r21
 8008830:	12c0770e 	bge	r2,r11,8008a10 <___vfprintf_internal_r+0x1fe0>
 8008834:	94800044 	addi	r18,r18,1
 8008838:	9005883a 	mov	r2,r18
 800883c:	90007216 	blt	r18,zero,8008a08 <___vfprintf_internal_r+0x1fd8>
 8008840:	d8013415 	stw	zero,1232(sp)
 8008844:	003e7906 	br	800822c <__alt_data_end+0xfc00822c>
 8008848:	da412b15 	stw	r9,1196(sp)
 800884c:	dd412783 	ldbu	r21,1182(sp)
 8008850:	4825883a 	mov	r18,r9
 8008854:	dcc12d15 	stw	r19,1204(sp)
 8008858:	d8013215 	stw	zero,1224(sp)
 800885c:	d8013415 	stw	zero,1232(sp)
 8008860:	003a0706 	br	8007080 <__alt_data_end+0xfc007080>
 8008864:	b009883a 	mov	r4,r22
 8008868:	b80b883a 	mov	r5,r23
 800886c:	d9811e04 	addi	r6,sp,1144
 8008870:	800e8140 	call	800e814 <__sprint_r>
 8008874:	1039851e 	bne	r2,zero,8006e8c <__alt_data_end+0xfc006e8c>
 8008878:	dc012617 	ldw	r16,1176(sp)
 800887c:	d8c12017 	ldw	r3,1152(sp)
 8008880:	d8811f17 	ldw	r2,1148(sp)
 8008884:	da000404 	addi	r8,sp,16
 8008888:	003ec706 	br	80083a8 <__alt_data_end+0xfc0083a8>
 800888c:	483e1a1e 	bne	r9,zero,80080f8 <__alt_data_end+0xfc0080f8>
 8008890:	9013883a 	mov	r9,r18
 8008894:	003e1806 	br	80080f8 <__alt_data_end+0xfc0080f8>
 8008898:	00c00b44 	movi	r3,45
 800889c:	64a0003c 	xorhi	r18,r12,32768
 80088a0:	d8c12b05 	stb	r3,1196(sp)
 80088a4:	003e1a06 	br	8008110 <__alt_data_end+0xfc008110>
 80088a8:	4f000044 	addi	fp,r9,1
 80088ac:	003e1f06 	br	800812c <__alt_data_end+0xfc00812c>
 80088b0:	02400184 	movi	r9,6
 80088b4:	003e1006 	br	80080f8 <__alt_data_end+0xfc0080f8>
 80088b8:	d8c13417 	ldw	r3,1232(sp)
 80088bc:	00c04b0e 	bge	zero,r3,80089ec <___vfprintf_internal_r+0x1fbc>
 80088c0:	04800044 	movi	r18,1
 80088c4:	dac13317 	ldw	r11,1228(sp)
 80088c8:	92e5883a 	add	r18,r18,r11
 80088cc:	9005883a 	mov	r2,r18
 80088d0:	903e560e 	bge	r18,zero,800822c <__alt_data_end+0xfc00822c>
 80088d4:	0005883a 	mov	r2,zero
 80088d8:	003e5406 	br	800822c <__alt_data_end+0xfc00822c>
 80088dc:	d8c12617 	ldw	r3,1176(sp)
 80088e0:	d8c13415 	stw	r3,1232(sp)
 80088e4:	00c03b0e 	bge	zero,r3,80089d4 <___vfprintf_internal_r+0x1fa4>
 80088e8:	4800081e 	bne	r9,zero,800890c <___vfprintf_internal_r+0x1edc>
 80088ec:	8c40004c 	andi	r17,r17,1
 80088f0:	8800061e 	bne	r17,zero,800890c <___vfprintf_internal_r+0x1edc>
 80088f4:	1805883a 	mov	r2,r3
 80088f8:	183e4b0e 	bge	r3,zero,8008228 <__alt_data_end+0xfc008228>
 80088fc:	0005883a 	mov	r2,zero
 8008900:	003e4906 	br	8008228 <__alt_data_end+0xfc008228>
 8008904:	d8812117 	ldw	r2,1156(sp)
 8008908:	003e3506 	br	80081e0 <__alt_data_end+0xfc0081e0>
 800890c:	dac13417 	ldw	r11,1232(sp)
 8008910:	4a400044 	addi	r9,r9,1
 8008914:	5a65883a 	add	r18,r11,r9
 8008918:	9005883a 	mov	r2,r18
 800891c:	903e430e 	bge	r18,zero,800822c <__alt_data_end+0xfc00822c>
 8008920:	003fec06 	br	80088d4 <__alt_data_end+0xfc0088d4>
 8008924:	00800c04 	movi	r2,48
 8008928:	e0c00c04 	addi	r3,fp,48
 800892c:	d8812345 	stb	r2,1165(sp)
 8008930:	d8c12385 	stb	r3,1166(sp)
 8008934:	d88123c4 	addi	r2,sp,1167
 8008938:	dd4122c4 	addi	r21,sp,1163
 800893c:	003fb706 	br	800881c <__alt_data_end+0xfc00881c>
 8008940:	0005883a 	mov	r2,zero
 8008944:	003f6006 	br	80086c8 <__alt_data_end+0xfc0086c8>
 8008948:	db013417 	ldw	r12,1232(sp)
 800894c:	64800044 	addi	r18,r12,1
 8008950:	9005883a 	mov	r2,r18
 8008954:	903e350e 	bge	r18,zero,800822c <__alt_data_end+0xfc00822c>
 8008958:	003fde06 	br	80088d4 <__alt_data_end+0xfc0088d4>
 800895c:	d9013717 	ldw	r4,1244(sp)
 8008960:	900b883a 	mov	r5,r18
 8008964:	000d883a 	mov	r6,zero
 8008968:	000f883a 	mov	r7,zero
 800896c:	da013f15 	stw	r8,1276(sp)
 8008970:	da413e15 	stw	r9,1272(sp)
 8008974:	da813d15 	stw	r10,1268(sp)
 8008978:	8011a2c0 	call	8011a2c <__eqdf2>
 800897c:	da013f17 	ldw	r8,1276(sp)
 8008980:	da413e17 	ldw	r9,1272(sp)
 8008984:	da813d17 	ldw	r10,1268(sp)
 8008988:	103f1426 	beq	r2,zero,80085dc <__alt_data_end+0xfc0085dc>
 800898c:	00800044 	movi	r2,1
 8008990:	1707c83a 	sub	r3,r2,fp
 8008994:	d8c12615 	stw	r3,1176(sp)
 8008998:	003f1106 	br	80085e0 <__alt_data_end+0xfc0085e0>
 800899c:	dac12d17 	ldw	r11,1204(sp)
 80089a0:	5a400017 	ldw	r9,0(r11)
 80089a4:	5ac00104 	addi	r11,r11,4
 80089a8:	dac12d15 	stw	r11,1204(sp)
 80089ac:	483ec60e 	bge	r9,zero,80084c8 <__alt_data_end+0xfc0084c8>
 80089b0:	027fffc4 	movi	r9,-1
 80089b4:	1c000047 	ldb	r16,1(r3)
 80089b8:	00388406 	br	8006bcc <__alt_data_end+0xfc006bcc>
 80089bc:	043fffc4 	movi	r16,-1
 80089c0:	00391006 	br	8006e04 <__alt_data_end+0xfc006e04>
 80089c4:	00800b44 	movi	r2,45
 80089c8:	0739c83a 	sub	fp,zero,fp
 80089cc:	d8812305 	stb	r2,1164(sp)
 80089d0:	003f6906 	br	8008778 <__alt_data_end+0xfc008778>
 80089d4:	4800081e 	bne	r9,zero,80089f8 <___vfprintf_internal_r+0x1fc8>
 80089d8:	8c40004c 	andi	r17,r17,1
 80089dc:	8800061e 	bne	r17,zero,80089f8 <___vfprintf_internal_r+0x1fc8>
 80089e0:	00800044 	movi	r2,1
 80089e4:	1025883a 	mov	r18,r2
 80089e8:	003e1006 	br	800822c <__alt_data_end+0xfc00822c>
 80089ec:	04800084 	movi	r18,2
 80089f0:	90e5c83a 	sub	r18,r18,r3
 80089f4:	003fb306 	br	80088c4 <__alt_data_end+0xfc0088c4>
 80089f8:	4c800084 	addi	r18,r9,2
 80089fc:	9005883a 	mov	r2,r18
 8008a00:	903e0a0e 	bge	r18,zero,800822c <__alt_data_end+0xfc00822c>
 8008a04:	003fb306 	br	80088d4 <__alt_data_end+0xfc0088d4>
 8008a08:	0005883a 	mov	r2,zero
 8008a0c:	003f8c06 	br	8008840 <__alt_data_end+0xfc008840>
 8008a10:	88a2703a 	and	r17,r17,r2
 8008a14:	883f8826 	beq	r17,zero,8008838 <__alt_data_end+0xfc008838>
 8008a18:	003f8606 	br	8008834 <__alt_data_end+0xfc008834>
 8008a1c:	d8812344 	addi	r2,sp,1165
 8008a20:	003f7e06 	br	800881c <__alt_data_end+0xfc00881c>
 8008a24:	d8c12617 	ldw	r3,1176(sp)
 8008a28:	003f4d06 	br	8008760 <__alt_data_end+0xfc008760>

08008a2c <__vfprintf_internal>:
 8008a2c:	2007883a 	mov	r3,r4
 8008a30:	010200b4 	movhi	r4,2050
 8008a34:	2107e604 	addi	r4,r4,8088
 8008a38:	21000017 	ldw	r4,0(r4)
 8008a3c:	2805883a 	mov	r2,r5
 8008a40:	300f883a 	mov	r7,r6
 8008a44:	180b883a 	mov	r5,r3
 8008a48:	100d883a 	mov	r6,r2
 8008a4c:	8006a301 	jmpi	8006a30 <___vfprintf_internal_r>

08008a50 <__swsetup_r>:
 8008a50:	008200b4 	movhi	r2,2050
 8008a54:	defffd04 	addi	sp,sp,-12
 8008a58:	1087e604 	addi	r2,r2,8088
 8008a5c:	dc400115 	stw	r17,4(sp)
 8008a60:	2023883a 	mov	r17,r4
 8008a64:	11000017 	ldw	r4,0(r2)
 8008a68:	dc000015 	stw	r16,0(sp)
 8008a6c:	dfc00215 	stw	ra,8(sp)
 8008a70:	2821883a 	mov	r16,r5
 8008a74:	20000226 	beq	r4,zero,8008a80 <__swsetup_r+0x30>
 8008a78:	20c00e17 	ldw	r3,56(r4)
 8008a7c:	18002e26 	beq	r3,zero,8008b38 <__swsetup_r+0xe8>
 8008a80:	8080030b 	ldhu	r2,12(r16)
 8008a84:	10c0020c 	andi	r3,r2,8
 8008a88:	100d883a 	mov	r6,r2
 8008a8c:	18000f26 	beq	r3,zero,8008acc <__swsetup_r+0x7c>
 8008a90:	80c00417 	ldw	r3,16(r16)
 8008a94:	18001526 	beq	r3,zero,8008aec <__swsetup_r+0x9c>
 8008a98:	1100004c 	andi	r4,r2,1
 8008a9c:	20001c1e 	bne	r4,zero,8008b10 <__swsetup_r+0xc0>
 8008aa0:	1080008c 	andi	r2,r2,2
 8008aa4:	1000261e 	bne	r2,zero,8008b40 <__swsetup_r+0xf0>
 8008aa8:	80800517 	ldw	r2,20(r16)
 8008aac:	80800215 	stw	r2,8(r16)
 8008ab0:	18001c26 	beq	r3,zero,8008b24 <__swsetup_r+0xd4>
 8008ab4:	0005883a 	mov	r2,zero
 8008ab8:	dfc00217 	ldw	ra,8(sp)
 8008abc:	dc400117 	ldw	r17,4(sp)
 8008ac0:	dc000017 	ldw	r16,0(sp)
 8008ac4:	dec00304 	addi	sp,sp,12
 8008ac8:	f800283a 	ret
 8008acc:	3080040c 	andi	r2,r6,16
 8008ad0:	10001726 	beq	r2,zero,8008b30 <__swsetup_r+0xe0>
 8008ad4:	3080010c 	andi	r2,r6,4
 8008ad8:	10001b1e 	bne	r2,zero,8008b48 <__swsetup_r+0xf8>
 8008adc:	80c00417 	ldw	r3,16(r16)
 8008ae0:	30800214 	ori	r2,r6,8
 8008ae4:	8080030d 	sth	r2,12(r16)
 8008ae8:	183feb1e 	bne	r3,zero,8008a98 <__alt_data_end+0xfc008a98>
 8008aec:	1140a00c 	andi	r5,r2,640
 8008af0:	01008004 	movi	r4,512
 8008af4:	293fe826 	beq	r5,r4,8008a98 <__alt_data_end+0xfc008a98>
 8008af8:	8809883a 	mov	r4,r17
 8008afc:	800b883a 	mov	r5,r16
 8008b00:	800b5a80 	call	800b5a8 <__smakebuf_r>
 8008b04:	8080030b 	ldhu	r2,12(r16)
 8008b08:	80c00417 	ldw	r3,16(r16)
 8008b0c:	003fe206 	br	8008a98 <__alt_data_end+0xfc008a98>
 8008b10:	80800517 	ldw	r2,20(r16)
 8008b14:	80000215 	stw	zero,8(r16)
 8008b18:	0085c83a 	sub	r2,zero,r2
 8008b1c:	80800615 	stw	r2,24(r16)
 8008b20:	183fe41e 	bne	r3,zero,8008ab4 <__alt_data_end+0xfc008ab4>
 8008b24:	8080030b 	ldhu	r2,12(r16)
 8008b28:	1080200c 	andi	r2,r2,128
 8008b2c:	103fe226 	beq	r2,zero,8008ab8 <__alt_data_end+0xfc008ab8>
 8008b30:	00bfffc4 	movi	r2,-1
 8008b34:	003fe006 	br	8008ab8 <__alt_data_end+0xfc008ab8>
 8008b38:	800aa500 	call	800aa50 <__sinit>
 8008b3c:	003fd006 	br	8008a80 <__alt_data_end+0xfc008a80>
 8008b40:	0005883a 	mov	r2,zero
 8008b44:	003fd906 	br	8008aac <__alt_data_end+0xfc008aac>
 8008b48:	81400c17 	ldw	r5,48(r16)
 8008b4c:	28000626 	beq	r5,zero,8008b68 <__swsetup_r+0x118>
 8008b50:	80801004 	addi	r2,r16,64
 8008b54:	28800326 	beq	r5,r2,8008b64 <__swsetup_r+0x114>
 8008b58:	8809883a 	mov	r4,r17
 8008b5c:	800abc40 	call	800abc4 <_free_r>
 8008b60:	8180030b 	ldhu	r6,12(r16)
 8008b64:	80000c15 	stw	zero,48(r16)
 8008b68:	80c00417 	ldw	r3,16(r16)
 8008b6c:	00bff6c4 	movi	r2,-37
 8008b70:	118c703a 	and	r6,r2,r6
 8008b74:	80000115 	stw	zero,4(r16)
 8008b78:	80c00015 	stw	r3,0(r16)
 8008b7c:	003fd806 	br	8008ae0 <__alt_data_end+0xfc008ae0>

08008b80 <quorem>:
 8008b80:	defff704 	addi	sp,sp,-36
 8008b84:	dc800215 	stw	r18,8(sp)
 8008b88:	20800417 	ldw	r2,16(r4)
 8008b8c:	2c800417 	ldw	r18,16(r5)
 8008b90:	dfc00815 	stw	ra,32(sp)
 8008b94:	ddc00715 	stw	r23,28(sp)
 8008b98:	dd800615 	stw	r22,24(sp)
 8008b9c:	dd400515 	stw	r21,20(sp)
 8008ba0:	dd000415 	stw	r20,16(sp)
 8008ba4:	dcc00315 	stw	r19,12(sp)
 8008ba8:	dc400115 	stw	r17,4(sp)
 8008bac:	dc000015 	stw	r16,0(sp)
 8008bb0:	14807116 	blt	r2,r18,8008d78 <quorem+0x1f8>
 8008bb4:	94bfffc4 	addi	r18,r18,-1
 8008bb8:	94ad883a 	add	r22,r18,r18
 8008bbc:	b5ad883a 	add	r22,r22,r22
 8008bc0:	2c400504 	addi	r17,r5,20
 8008bc4:	8da9883a 	add	r20,r17,r22
 8008bc8:	25400504 	addi	r21,r4,20
 8008bcc:	282f883a 	mov	r23,r5
 8008bd0:	adad883a 	add	r22,r21,r22
 8008bd4:	a1400017 	ldw	r5,0(r20)
 8008bd8:	2021883a 	mov	r16,r4
 8008bdc:	b1000017 	ldw	r4,0(r22)
 8008be0:	29400044 	addi	r5,r5,1
 8008be4:	80111500 	call	8011150 <__udivsi3>
 8008be8:	1027883a 	mov	r19,r2
 8008bec:	10002c26 	beq	r2,zero,8008ca0 <quorem+0x120>
 8008bf0:	a813883a 	mov	r9,r21
 8008bf4:	8811883a 	mov	r8,r17
 8008bf8:	0009883a 	mov	r4,zero
 8008bfc:	000d883a 	mov	r6,zero
 8008c00:	41c00017 	ldw	r7,0(r8)
 8008c04:	49400017 	ldw	r5,0(r9)
 8008c08:	42000104 	addi	r8,r8,4
 8008c0c:	38bfffcc 	andi	r2,r7,65535
 8008c10:	14c5383a 	mul	r2,r2,r19
 8008c14:	380ed43a 	srli	r7,r7,16
 8008c18:	28ffffcc 	andi	r3,r5,65535
 8008c1c:	2085883a 	add	r2,r4,r2
 8008c20:	1008d43a 	srli	r4,r2,16
 8008c24:	3ccf383a 	mul	r7,r7,r19
 8008c28:	198d883a 	add	r6,r3,r6
 8008c2c:	10ffffcc 	andi	r3,r2,65535
 8008c30:	30c7c83a 	sub	r3,r6,r3
 8008c34:	280ad43a 	srli	r5,r5,16
 8008c38:	21c9883a 	add	r4,r4,r7
 8008c3c:	180dd43a 	srai	r6,r3,16
 8008c40:	20bfffcc 	andi	r2,r4,65535
 8008c44:	288bc83a 	sub	r5,r5,r2
 8008c48:	298b883a 	add	r5,r5,r6
 8008c4c:	280e943a 	slli	r7,r5,16
 8008c50:	18ffffcc 	andi	r3,r3,65535
 8008c54:	2008d43a 	srli	r4,r4,16
 8008c58:	38ceb03a 	or	r7,r7,r3
 8008c5c:	49c00015 	stw	r7,0(r9)
 8008c60:	280dd43a 	srai	r6,r5,16
 8008c64:	4a400104 	addi	r9,r9,4
 8008c68:	a23fe52e 	bgeu	r20,r8,8008c00 <__alt_data_end+0xfc008c00>
 8008c6c:	b0800017 	ldw	r2,0(r22)
 8008c70:	10000b1e 	bne	r2,zero,8008ca0 <quorem+0x120>
 8008c74:	b0bfff04 	addi	r2,r22,-4
 8008c78:	a880082e 	bgeu	r21,r2,8008c9c <quorem+0x11c>
 8008c7c:	b0ffff17 	ldw	r3,-4(r22)
 8008c80:	18000326 	beq	r3,zero,8008c90 <quorem+0x110>
 8008c84:	00000506 	br	8008c9c <quorem+0x11c>
 8008c88:	10c00017 	ldw	r3,0(r2)
 8008c8c:	1800031e 	bne	r3,zero,8008c9c <quorem+0x11c>
 8008c90:	10bfff04 	addi	r2,r2,-4
 8008c94:	94bfffc4 	addi	r18,r18,-1
 8008c98:	a8bffb36 	bltu	r21,r2,8008c88 <__alt_data_end+0xfc008c88>
 8008c9c:	84800415 	stw	r18,16(r16)
 8008ca0:	8009883a 	mov	r4,r16
 8008ca4:	b80b883a 	mov	r5,r23
 8008ca8:	800c4c00 	call	800c4c0 <__mcmp>
 8008cac:	10002616 	blt	r2,zero,8008d48 <quorem+0x1c8>
 8008cb0:	9cc00044 	addi	r19,r19,1
 8008cb4:	a80d883a 	mov	r6,r21
 8008cb8:	000b883a 	mov	r5,zero
 8008cbc:	31000017 	ldw	r4,0(r6)
 8008cc0:	88800017 	ldw	r2,0(r17)
 8008cc4:	31800104 	addi	r6,r6,4
 8008cc8:	20ffffcc 	andi	r3,r4,65535
 8008ccc:	194b883a 	add	r5,r3,r5
 8008cd0:	10ffffcc 	andi	r3,r2,65535
 8008cd4:	28c7c83a 	sub	r3,r5,r3
 8008cd8:	1004d43a 	srli	r2,r2,16
 8008cdc:	2008d43a 	srli	r4,r4,16
 8008ce0:	180bd43a 	srai	r5,r3,16
 8008ce4:	18ffffcc 	andi	r3,r3,65535
 8008ce8:	2089c83a 	sub	r4,r4,r2
 8008cec:	2149883a 	add	r4,r4,r5
 8008cf0:	2004943a 	slli	r2,r4,16
 8008cf4:	8c400104 	addi	r17,r17,4
 8008cf8:	200bd43a 	srai	r5,r4,16
 8008cfc:	10c6b03a 	or	r3,r2,r3
 8008d00:	30ffff15 	stw	r3,-4(r6)
 8008d04:	a47fed2e 	bgeu	r20,r17,8008cbc <__alt_data_end+0xfc008cbc>
 8008d08:	9485883a 	add	r2,r18,r18
 8008d0c:	1085883a 	add	r2,r2,r2
 8008d10:	a887883a 	add	r3,r21,r2
 8008d14:	18800017 	ldw	r2,0(r3)
 8008d18:	10000b1e 	bne	r2,zero,8008d48 <quorem+0x1c8>
 8008d1c:	18bfff04 	addi	r2,r3,-4
 8008d20:	a880082e 	bgeu	r21,r2,8008d44 <quorem+0x1c4>
 8008d24:	18ffff17 	ldw	r3,-4(r3)
 8008d28:	18000326 	beq	r3,zero,8008d38 <quorem+0x1b8>
 8008d2c:	00000506 	br	8008d44 <quorem+0x1c4>
 8008d30:	10c00017 	ldw	r3,0(r2)
 8008d34:	1800031e 	bne	r3,zero,8008d44 <quorem+0x1c4>
 8008d38:	10bfff04 	addi	r2,r2,-4
 8008d3c:	94bfffc4 	addi	r18,r18,-1
 8008d40:	a8bffb36 	bltu	r21,r2,8008d30 <__alt_data_end+0xfc008d30>
 8008d44:	84800415 	stw	r18,16(r16)
 8008d48:	9805883a 	mov	r2,r19
 8008d4c:	dfc00817 	ldw	ra,32(sp)
 8008d50:	ddc00717 	ldw	r23,28(sp)
 8008d54:	dd800617 	ldw	r22,24(sp)
 8008d58:	dd400517 	ldw	r21,20(sp)
 8008d5c:	dd000417 	ldw	r20,16(sp)
 8008d60:	dcc00317 	ldw	r19,12(sp)
 8008d64:	dc800217 	ldw	r18,8(sp)
 8008d68:	dc400117 	ldw	r17,4(sp)
 8008d6c:	dc000017 	ldw	r16,0(sp)
 8008d70:	dec00904 	addi	sp,sp,36
 8008d74:	f800283a 	ret
 8008d78:	0005883a 	mov	r2,zero
 8008d7c:	003ff306 	br	8008d4c <__alt_data_end+0xfc008d4c>

08008d80 <_dtoa_r>:
 8008d80:	20801017 	ldw	r2,64(r4)
 8008d84:	deffde04 	addi	sp,sp,-136
 8008d88:	dd401d15 	stw	r21,116(sp)
 8008d8c:	dcc01b15 	stw	r19,108(sp)
 8008d90:	dc801a15 	stw	r18,104(sp)
 8008d94:	dc401915 	stw	r17,100(sp)
 8008d98:	dc001815 	stw	r16,96(sp)
 8008d9c:	dfc02115 	stw	ra,132(sp)
 8008da0:	df002015 	stw	fp,128(sp)
 8008da4:	ddc01f15 	stw	r23,124(sp)
 8008da8:	dd801e15 	stw	r22,120(sp)
 8008dac:	dd001c15 	stw	r20,112(sp)
 8008db0:	d9c00315 	stw	r7,12(sp)
 8008db4:	2021883a 	mov	r16,r4
 8008db8:	302b883a 	mov	r21,r6
 8008dbc:	2825883a 	mov	r18,r5
 8008dc0:	dc402417 	ldw	r17,144(sp)
 8008dc4:	3027883a 	mov	r19,r6
 8008dc8:	10000826 	beq	r2,zero,8008dec <_dtoa_r+0x6c>
 8008dcc:	21801117 	ldw	r6,68(r4)
 8008dd0:	00c00044 	movi	r3,1
 8008dd4:	100b883a 	mov	r5,r2
 8008dd8:	1986983a 	sll	r3,r3,r6
 8008ddc:	11800115 	stw	r6,4(r2)
 8008de0:	10c00215 	stw	r3,8(r2)
 8008de4:	800bca80 	call	800bca8 <_Bfree>
 8008de8:	80001015 	stw	zero,64(r16)
 8008dec:	a8002d16 	blt	r21,zero,8008ea4 <_dtoa_r+0x124>
 8008df0:	88000015 	stw	zero,0(r17)
 8008df4:	a8dffc2c 	andhi	r3,r21,32752
 8008df8:	009ffc34 	movhi	r2,32752
 8008dfc:	18801b26 	beq	r3,r2,8008e6c <_dtoa_r+0xec>
 8008e00:	9009883a 	mov	r4,r18
 8008e04:	980b883a 	mov	r5,r19
 8008e08:	000d883a 	mov	r6,zero
 8008e0c:	000f883a 	mov	r7,zero
 8008e10:	8011a2c0 	call	8011a2c <__eqdf2>
 8008e14:	10002a1e 	bne	r2,zero,8008ec0 <_dtoa_r+0x140>
 8008e18:	d8c02317 	ldw	r3,140(sp)
 8008e1c:	d9002517 	ldw	r4,148(sp)
 8008e20:	00800044 	movi	r2,1
 8008e24:	18800015 	stw	r2,0(r3)
 8008e28:	2001a226 	beq	r4,zero,80094b4 <_dtoa_r+0x734>
 8008e2c:	008200b4 	movhi	r2,2050
 8008e30:	1080a844 	addi	r2,r2,673
 8008e34:	20800015 	stw	r2,0(r4)
 8008e38:	10bfffc4 	addi	r2,r2,-1
 8008e3c:	dfc02117 	ldw	ra,132(sp)
 8008e40:	df002017 	ldw	fp,128(sp)
 8008e44:	ddc01f17 	ldw	r23,124(sp)
 8008e48:	dd801e17 	ldw	r22,120(sp)
 8008e4c:	dd401d17 	ldw	r21,116(sp)
 8008e50:	dd001c17 	ldw	r20,112(sp)
 8008e54:	dcc01b17 	ldw	r19,108(sp)
 8008e58:	dc801a17 	ldw	r18,104(sp)
 8008e5c:	dc401917 	ldw	r17,100(sp)
 8008e60:	dc001817 	ldw	r16,96(sp)
 8008e64:	dec02204 	addi	sp,sp,136
 8008e68:	f800283a 	ret
 8008e6c:	d8c02317 	ldw	r3,140(sp)
 8008e70:	0089c3c4 	movi	r2,9999
 8008e74:	18800015 	stw	r2,0(r3)
 8008e78:	90017c26 	beq	r18,zero,800946c <_dtoa_r+0x6ec>
 8008e7c:	008200b4 	movhi	r2,2050
 8008e80:	1080bc04 	addi	r2,r2,752
 8008e84:	d9002517 	ldw	r4,148(sp)
 8008e88:	203fec26 	beq	r4,zero,8008e3c <__alt_data_end+0xfc008e3c>
 8008e8c:	10c000c7 	ldb	r3,3(r2)
 8008e90:	18017d1e 	bne	r3,zero,8009488 <_dtoa_r+0x708>
 8008e94:	10c000c4 	addi	r3,r2,3
 8008e98:	d9802517 	ldw	r6,148(sp)
 8008e9c:	30c00015 	stw	r3,0(r6)
 8008ea0:	003fe606 	br	8008e3c <__alt_data_end+0xfc008e3c>
 8008ea4:	04e00034 	movhi	r19,32768
 8008ea8:	9cffffc4 	addi	r19,r19,-1
 8008eac:	00800044 	movi	r2,1
 8008eb0:	ace6703a 	and	r19,r21,r19
 8008eb4:	88800015 	stw	r2,0(r17)
 8008eb8:	982b883a 	mov	r21,r19
 8008ebc:	003fcd06 	br	8008df4 <__alt_data_end+0xfc008df4>
 8008ec0:	d8800204 	addi	r2,sp,8
 8008ec4:	a822d53a 	srli	r17,r21,20
 8008ec8:	d8800015 	stw	r2,0(sp)
 8008ecc:	8009883a 	mov	r4,r16
 8008ed0:	900b883a 	mov	r5,r18
 8008ed4:	980d883a 	mov	r6,r19
 8008ed8:	d9c00104 	addi	r7,sp,4
 8008edc:	800c8340 	call	800c834 <__d2b>
 8008ee0:	1039883a 	mov	fp,r2
 8008ee4:	88016a1e 	bne	r17,zero,8009490 <_dtoa_r+0x710>
 8008ee8:	dd000217 	ldw	r20,8(sp)
 8008eec:	dc400117 	ldw	r17,4(sp)
 8008ef0:	00befbc4 	movi	r2,-1041
 8008ef4:	a463883a 	add	r17,r20,r17
 8008ef8:	8882ea16 	blt	r17,r2,8009aa4 <_dtoa_r+0xd24>
 8008efc:	00bf0384 	movi	r2,-1010
 8008f00:	1445c83a 	sub	r2,r2,r17
 8008f04:	89010484 	addi	r4,r17,1042
 8008f08:	a8aa983a 	sll	r21,r21,r2
 8008f0c:	9108d83a 	srl	r4,r18,r4
 8008f10:	a908b03a 	or	r4,r21,r4
 8008f14:	8012aa40 	call	8012aa4 <__floatunsidf>
 8008f18:	017f8434 	movhi	r5,65040
 8008f1c:	01800044 	movi	r6,1
 8008f20:	1009883a 	mov	r4,r2
 8008f24:	194b883a 	add	r5,r3,r5
 8008f28:	8c7fffc4 	addi	r17,r17,-1
 8008f2c:	d9800f15 	stw	r6,60(sp)
 8008f30:	000d883a 	mov	r6,zero
 8008f34:	01cffe34 	movhi	r7,16376
 8008f38:	80121d40 	call	80121d4 <__subdf3>
 8008f3c:	0198dbf4 	movhi	r6,25455
 8008f40:	01cff4f4 	movhi	r7,16339
 8008f44:	1009883a 	mov	r4,r2
 8008f48:	180b883a 	mov	r5,r3
 8008f4c:	3190d844 	addi	r6,r6,17249
 8008f50:	39e1e9c4 	addi	r7,r7,-30809
 8008f54:	8011ab00 	call	8011ab0 <__muldf3>
 8008f58:	01a2d874 	movhi	r6,35681
 8008f5c:	01cff1f4 	movhi	r7,16327
 8008f60:	180b883a 	mov	r5,r3
 8008f64:	31b22cc4 	addi	r6,r6,-14157
 8008f68:	39e28a04 	addi	r7,r7,-30168
 8008f6c:	1009883a 	mov	r4,r2
 8008f70:	80033b40 	call	80033b4 <__adddf3>
 8008f74:	8809883a 	mov	r4,r17
 8008f78:	102d883a 	mov	r22,r2
 8008f7c:	182b883a 	mov	r21,r3
 8008f80:	8003e980 	call	8003e98 <__floatsidf>
 8008f84:	019427f4 	movhi	r6,20639
 8008f88:	01cff4f4 	movhi	r7,16339
 8008f8c:	1009883a 	mov	r4,r2
 8008f90:	180b883a 	mov	r5,r3
 8008f94:	319e7ec4 	addi	r6,r6,31227
 8008f98:	39d104c4 	addi	r7,r7,17427
 8008f9c:	8011ab00 	call	8011ab0 <__muldf3>
 8008fa0:	b009883a 	mov	r4,r22
 8008fa4:	a80b883a 	mov	r5,r21
 8008fa8:	100d883a 	mov	r6,r2
 8008fac:	180f883a 	mov	r7,r3
 8008fb0:	80033b40 	call	80033b4 <__adddf3>
 8008fb4:	1009883a 	mov	r4,r2
 8008fb8:	180b883a 	mov	r5,r3
 8008fbc:	102d883a 	mov	r22,r2
 8008fc0:	182b883a 	mov	r21,r3
 8008fc4:	8003e100 	call	8003e10 <__fixdfsi>
 8008fc8:	b009883a 	mov	r4,r22
 8008fcc:	a80b883a 	mov	r5,r21
 8008fd0:	000d883a 	mov	r6,zero
 8008fd4:	000f883a 	mov	r7,zero
 8008fd8:	d8800515 	stw	r2,20(sp)
 8008fdc:	8003d300 	call	8003d30 <__ledf2>
 8008fe0:	10023116 	blt	r2,zero,80098a8 <_dtoa_r+0xb28>
 8008fe4:	d8c00517 	ldw	r3,20(sp)
 8008fe8:	00800584 	movi	r2,22
 8008fec:	10c21f36 	bltu	r2,r3,800986c <_dtoa_r+0xaec>
 8008ff0:	180490fa 	slli	r2,r3,3
 8008ff4:	00c200b4 	movhi	r3,2050
 8008ff8:	18c0d804 	addi	r3,r3,864
 8008ffc:	1885883a 	add	r2,r3,r2
 8009000:	11000017 	ldw	r4,0(r2)
 8009004:	11400117 	ldw	r5,4(r2)
 8009008:	900d883a 	mov	r6,r18
 800900c:	980f883a 	mov	r7,r19
 8009010:	8003c500 	call	8003c50 <__gedf2>
 8009014:	0082a70e 	bge	zero,r2,8009ab4 <_dtoa_r+0xd34>
 8009018:	d9000517 	ldw	r4,20(sp)
 800901c:	d8000c15 	stw	zero,48(sp)
 8009020:	213fffc4 	addi	r4,r4,-1
 8009024:	d9000515 	stw	r4,20(sp)
 8009028:	a463c83a 	sub	r17,r20,r17
 800902c:	8dbfffc4 	addi	r22,r17,-1
 8009030:	b0021916 	blt	r22,zero,8009898 <_dtoa_r+0xb18>
 8009034:	d8000815 	stw	zero,32(sp)
 8009038:	d8800517 	ldw	r2,20(sp)
 800903c:	10020e16 	blt	r2,zero,8009878 <_dtoa_r+0xaf8>
 8009040:	b0ad883a 	add	r22,r22,r2
 8009044:	d8800a15 	stw	r2,40(sp)
 8009048:	d8000915 	stw	zero,36(sp)
 800904c:	d8c00317 	ldw	r3,12(sp)
 8009050:	00800244 	movi	r2,9
 8009054:	10c11a36 	bltu	r2,r3,80094c0 <_dtoa_r+0x740>
 8009058:	00800144 	movi	r2,5
 800905c:	10c4fc0e 	bge	r2,r3,800a450 <_dtoa_r+0x16d0>
 8009060:	18ffff04 	addi	r3,r3,-4
 8009064:	d8c00315 	stw	r3,12(sp)
 8009068:	0029883a 	mov	r20,zero
 800906c:	d9800317 	ldw	r6,12(sp)
 8009070:	008000c4 	movi	r2,3
 8009074:	3083bd26 	beq	r6,r2,8009f6c <_dtoa_r+0x11ec>
 8009078:	1183670e 	bge	r2,r6,8009e18 <_dtoa_r+0x1098>
 800907c:	d8c00317 	ldw	r3,12(sp)
 8009080:	00800104 	movi	r2,4
 8009084:	1882e726 	beq	r3,r2,8009c24 <_dtoa_r+0xea4>
 8009088:	00800144 	movi	r2,5
 800908c:	1884f21e 	bne	r3,r2,800a458 <_dtoa_r+0x16d8>
 8009090:	00800044 	movi	r2,1
 8009094:	d8800b15 	stw	r2,44(sp)
 8009098:	d8c02217 	ldw	r3,136(sp)
 800909c:	d9000517 	ldw	r4,20(sp)
 80090a0:	1907883a 	add	r3,r3,r4
 80090a4:	19800044 	addi	r6,r3,1
 80090a8:	d8c00d15 	stw	r3,52(sp)
 80090ac:	d9800615 	stw	r6,24(sp)
 80090b0:	0183c30e 	bge	zero,r6,8009fc0 <_dtoa_r+0x1240>
 80090b4:	d9800617 	ldw	r6,24(sp)
 80090b8:	3023883a 	mov	r17,r6
 80090bc:	80001115 	stw	zero,68(r16)
 80090c0:	008005c4 	movi	r2,23
 80090c4:	1184f62e 	bgeu	r2,r6,800a4a0 <_dtoa_r+0x1720>
 80090c8:	00c00044 	movi	r3,1
 80090cc:	00800104 	movi	r2,4
 80090d0:	1085883a 	add	r2,r2,r2
 80090d4:	11000504 	addi	r4,r2,20
 80090d8:	180b883a 	mov	r5,r3
 80090dc:	18c00044 	addi	r3,r3,1
 80090e0:	313ffb2e 	bgeu	r6,r4,80090d0 <__alt_data_end+0xfc0090d0>
 80090e4:	81401115 	stw	r5,68(r16)
 80090e8:	8009883a 	mov	r4,r16
 80090ec:	800bc000 	call	800bc00 <_Balloc>
 80090f0:	d8800715 	stw	r2,28(sp)
 80090f4:	80801015 	stw	r2,64(r16)
 80090f8:	00800384 	movi	r2,14
 80090fc:	1440fd36 	bltu	r2,r17,80094f4 <_dtoa_r+0x774>
 8009100:	a000fc26 	beq	r20,zero,80094f4 <_dtoa_r+0x774>
 8009104:	d8800517 	ldw	r2,20(sp)
 8009108:	0083b90e 	bge	zero,r2,8009ff0 <_dtoa_r+0x1270>
 800910c:	d8c00517 	ldw	r3,20(sp)
 8009110:	108003cc 	andi	r2,r2,15
 8009114:	100490fa 	slli	r2,r2,3
 8009118:	182fd13a 	srai	r23,r3,4
 800911c:	00c200b4 	movhi	r3,2050
 8009120:	18c0d804 	addi	r3,r3,864
 8009124:	1885883a 	add	r2,r3,r2
 8009128:	b8c0040c 	andi	r3,r23,16
 800912c:	12c00017 	ldw	r11,0(r2)
 8009130:	12800117 	ldw	r10,4(r2)
 8009134:	18039726 	beq	r3,zero,8009f94 <_dtoa_r+0x1214>
 8009138:	008200b4 	movhi	r2,2050
 800913c:	1080ce04 	addi	r2,r2,824
 8009140:	11800817 	ldw	r6,32(r2)
 8009144:	11c00917 	ldw	r7,36(r2)
 8009148:	9009883a 	mov	r4,r18
 800914c:	980b883a 	mov	r5,r19
 8009150:	da801615 	stw	r10,88(sp)
 8009154:	dac01515 	stw	r11,84(sp)
 8009158:	80111600 	call	8011160 <__divdf3>
 800915c:	da801617 	ldw	r10,88(sp)
 8009160:	dac01517 	ldw	r11,84(sp)
 8009164:	bdc003cc 	andi	r23,r23,15
 8009168:	044000c4 	movi	r17,3
 800916c:	d8800e15 	stw	r2,56(sp)
 8009170:	182b883a 	mov	r21,r3
 8009174:	b8001126 	beq	r23,zero,80091bc <_dtoa_r+0x43c>
 8009178:	050200b4 	movhi	r20,2050
 800917c:	a500ce04 	addi	r20,r20,824
 8009180:	5805883a 	mov	r2,r11
 8009184:	5007883a 	mov	r3,r10
 8009188:	b980004c 	andi	r6,r23,1
 800918c:	1009883a 	mov	r4,r2
 8009190:	b82fd07a 	srai	r23,r23,1
 8009194:	180b883a 	mov	r5,r3
 8009198:	30000426 	beq	r6,zero,80091ac <_dtoa_r+0x42c>
 800919c:	a1800017 	ldw	r6,0(r20)
 80091a0:	a1c00117 	ldw	r7,4(r20)
 80091a4:	8c400044 	addi	r17,r17,1
 80091a8:	8011ab00 	call	8011ab0 <__muldf3>
 80091ac:	a5000204 	addi	r20,r20,8
 80091b0:	b83ff51e 	bne	r23,zero,8009188 <__alt_data_end+0xfc009188>
 80091b4:	1017883a 	mov	r11,r2
 80091b8:	1815883a 	mov	r10,r3
 80091bc:	d9000e17 	ldw	r4,56(sp)
 80091c0:	a80b883a 	mov	r5,r21
 80091c4:	580d883a 	mov	r6,r11
 80091c8:	500f883a 	mov	r7,r10
 80091cc:	80111600 	call	8011160 <__divdf3>
 80091d0:	1029883a 	mov	r20,r2
 80091d4:	182b883a 	mov	r21,r3
 80091d8:	d9800c17 	ldw	r6,48(sp)
 80091dc:	30000626 	beq	r6,zero,80091f8 <_dtoa_r+0x478>
 80091e0:	a009883a 	mov	r4,r20
 80091e4:	a80b883a 	mov	r5,r21
 80091e8:	000d883a 	mov	r6,zero
 80091ec:	01cffc34 	movhi	r7,16368
 80091f0:	8003d300 	call	8003d30 <__ledf2>
 80091f4:	10043216 	blt	r2,zero,800a2c0 <_dtoa_r+0x1540>
 80091f8:	8809883a 	mov	r4,r17
 80091fc:	8003e980 	call	8003e98 <__floatsidf>
 8009200:	1009883a 	mov	r4,r2
 8009204:	180b883a 	mov	r5,r3
 8009208:	a00d883a 	mov	r6,r20
 800920c:	a80f883a 	mov	r7,r21
 8009210:	8011ab00 	call	8011ab0 <__muldf3>
 8009214:	000d883a 	mov	r6,zero
 8009218:	1009883a 	mov	r4,r2
 800921c:	180b883a 	mov	r5,r3
 8009220:	01d00734 	movhi	r7,16412
 8009224:	80033b40 	call	80033b4 <__adddf3>
 8009228:	1023883a 	mov	r17,r2
 800922c:	d9800617 	ldw	r6,24(sp)
 8009230:	00bf3034 	movhi	r2,64704
 8009234:	1885883a 	add	r2,r3,r2
 8009238:	d8800e15 	stw	r2,56(sp)
 800923c:	30032e26 	beq	r6,zero,8009ef8 <_dtoa_r+0x1178>
 8009240:	d8c00517 	ldw	r3,20(sp)
 8009244:	da800617 	ldw	r10,24(sp)
 8009248:	d8c01215 	stw	r3,72(sp)
 800924c:	d9000b17 	ldw	r4,44(sp)
 8009250:	2003b026 	beq	r4,zero,800a114 <_dtoa_r+0x1394>
 8009254:	50bfffc4 	addi	r2,r10,-1
 8009258:	100490fa 	slli	r2,r2,3
 800925c:	00c200b4 	movhi	r3,2050
 8009260:	18c0d804 	addi	r3,r3,864
 8009264:	1885883a 	add	r2,r3,r2
 8009268:	11800017 	ldw	r6,0(r2)
 800926c:	11c00117 	ldw	r7,4(r2)
 8009270:	d8800717 	ldw	r2,28(sp)
 8009274:	0009883a 	mov	r4,zero
 8009278:	014ff834 	movhi	r5,16352
 800927c:	da801615 	stw	r10,88(sp)
 8009280:	15c00044 	addi	r23,r2,1
 8009284:	80111600 	call	8011160 <__divdf3>
 8009288:	d9c00e17 	ldw	r7,56(sp)
 800928c:	880d883a 	mov	r6,r17
 8009290:	1009883a 	mov	r4,r2
 8009294:	180b883a 	mov	r5,r3
 8009298:	80121d40 	call	80121d4 <__subdf3>
 800929c:	a80b883a 	mov	r5,r21
 80092a0:	a009883a 	mov	r4,r20
 80092a4:	d8c01015 	stw	r3,64(sp)
 80092a8:	d8800e15 	stw	r2,56(sp)
 80092ac:	8003e100 	call	8003e10 <__fixdfsi>
 80092b0:	1009883a 	mov	r4,r2
 80092b4:	d8801715 	stw	r2,92(sp)
 80092b8:	8003e980 	call	8003e98 <__floatsidf>
 80092bc:	a009883a 	mov	r4,r20
 80092c0:	a80b883a 	mov	r5,r21
 80092c4:	100d883a 	mov	r6,r2
 80092c8:	180f883a 	mov	r7,r3
 80092cc:	80121d40 	call	80121d4 <__subdf3>
 80092d0:	da001717 	ldw	r8,92(sp)
 80092d4:	1829883a 	mov	r20,r3
 80092d8:	d8c00717 	ldw	r3,28(sp)
 80092dc:	d9000e17 	ldw	r4,56(sp)
 80092e0:	d9401017 	ldw	r5,64(sp)
 80092e4:	42000c04 	addi	r8,r8,48
 80092e8:	1023883a 	mov	r17,r2
 80092ec:	1a000005 	stb	r8,0(r3)
 80092f0:	880d883a 	mov	r6,r17
 80092f4:	a00f883a 	mov	r7,r20
 80092f8:	402b883a 	mov	r21,r8
 80092fc:	8003c500 	call	8003c50 <__gedf2>
 8009300:	00844516 	blt	zero,r2,800a418 <_dtoa_r+0x1698>
 8009304:	0009883a 	mov	r4,zero
 8009308:	014ffc34 	movhi	r5,16368
 800930c:	880d883a 	mov	r6,r17
 8009310:	a00f883a 	mov	r7,r20
 8009314:	80121d40 	call	80121d4 <__subdf3>
 8009318:	d9000e17 	ldw	r4,56(sp)
 800931c:	d9401017 	ldw	r5,64(sp)
 8009320:	100d883a 	mov	r6,r2
 8009324:	180f883a 	mov	r7,r3
 8009328:	8003c500 	call	8003c50 <__gedf2>
 800932c:	da801617 	ldw	r10,88(sp)
 8009330:	00843616 	blt	zero,r2,800a40c <_dtoa_r+0x168c>
 8009334:	00800044 	movi	r2,1
 8009338:	12806e0e 	bge	r2,r10,80094f4 <_dtoa_r+0x774>
 800933c:	d9000717 	ldw	r4,28(sp)
 8009340:	dd801315 	stw	r22,76(sp)
 8009344:	dc001115 	stw	r16,68(sp)
 8009348:	2295883a 	add	r10,r4,r10
 800934c:	dcc01415 	stw	r19,80(sp)
 8009350:	502d883a 	mov	r22,r10
 8009354:	dcc01017 	ldw	r19,64(sp)
 8009358:	b821883a 	mov	r16,r23
 800935c:	dc801015 	stw	r18,64(sp)
 8009360:	dc800e17 	ldw	r18,56(sp)
 8009364:	00000906 	br	800938c <_dtoa_r+0x60c>
 8009368:	80121d40 	call	80121d4 <__subdf3>
 800936c:	1009883a 	mov	r4,r2
 8009370:	180b883a 	mov	r5,r3
 8009374:	900d883a 	mov	r6,r18
 8009378:	980f883a 	mov	r7,r19
 800937c:	8003d300 	call	8003d30 <__ledf2>
 8009380:	10040e16 	blt	r2,zero,800a3bc <_dtoa_r+0x163c>
 8009384:	b821883a 	mov	r16,r23
 8009388:	bd841026 	beq	r23,r22,800a3cc <_dtoa_r+0x164c>
 800938c:	9009883a 	mov	r4,r18
 8009390:	980b883a 	mov	r5,r19
 8009394:	000d883a 	mov	r6,zero
 8009398:	01d00934 	movhi	r7,16420
 800939c:	8011ab00 	call	8011ab0 <__muldf3>
 80093a0:	000d883a 	mov	r6,zero
 80093a4:	01d00934 	movhi	r7,16420
 80093a8:	8809883a 	mov	r4,r17
 80093ac:	a00b883a 	mov	r5,r20
 80093b0:	1025883a 	mov	r18,r2
 80093b4:	1827883a 	mov	r19,r3
 80093b8:	8011ab00 	call	8011ab0 <__muldf3>
 80093bc:	180b883a 	mov	r5,r3
 80093c0:	1009883a 	mov	r4,r2
 80093c4:	1823883a 	mov	r17,r3
 80093c8:	1029883a 	mov	r20,r2
 80093cc:	8003e100 	call	8003e10 <__fixdfsi>
 80093d0:	1009883a 	mov	r4,r2
 80093d4:	102b883a 	mov	r21,r2
 80093d8:	8003e980 	call	8003e98 <__floatsidf>
 80093dc:	a009883a 	mov	r4,r20
 80093e0:	880b883a 	mov	r5,r17
 80093e4:	100d883a 	mov	r6,r2
 80093e8:	180f883a 	mov	r7,r3
 80093ec:	80121d40 	call	80121d4 <__subdf3>
 80093f0:	ad400c04 	addi	r21,r21,48
 80093f4:	1009883a 	mov	r4,r2
 80093f8:	180b883a 	mov	r5,r3
 80093fc:	900d883a 	mov	r6,r18
 8009400:	980f883a 	mov	r7,r19
 8009404:	85400005 	stb	r21,0(r16)
 8009408:	1023883a 	mov	r17,r2
 800940c:	1829883a 	mov	r20,r3
 8009410:	8003d300 	call	8003d30 <__ledf2>
 8009414:	bdc00044 	addi	r23,r23,1
 8009418:	0009883a 	mov	r4,zero
 800941c:	014ffc34 	movhi	r5,16368
 8009420:	880d883a 	mov	r6,r17
 8009424:	a00f883a 	mov	r7,r20
 8009428:	103fcf0e 	bge	r2,zero,8009368 <__alt_data_end+0xfc009368>
 800942c:	d9801217 	ldw	r6,72(sp)
 8009430:	dc001117 	ldw	r16,68(sp)
 8009434:	d9800515 	stw	r6,20(sp)
 8009438:	8009883a 	mov	r4,r16
 800943c:	e00b883a 	mov	r5,fp
 8009440:	800bca80 	call	800bca8 <_Bfree>
 8009444:	d8c00517 	ldw	r3,20(sp)
 8009448:	d9002317 	ldw	r4,140(sp)
 800944c:	d9802517 	ldw	r6,148(sp)
 8009450:	b8000005 	stb	zero,0(r23)
 8009454:	18800044 	addi	r2,r3,1
 8009458:	20800015 	stw	r2,0(r4)
 800945c:	30027226 	beq	r6,zero,8009e28 <_dtoa_r+0x10a8>
 8009460:	35c00015 	stw	r23,0(r6)
 8009464:	d8800717 	ldw	r2,28(sp)
 8009468:	003e7406 	br	8008e3c <__alt_data_end+0xfc008e3c>
 800946c:	00800434 	movhi	r2,16
 8009470:	10bfffc4 	addi	r2,r2,-1
 8009474:	a8aa703a 	and	r21,r21,r2
 8009478:	a83e801e 	bne	r21,zero,8008e7c <__alt_data_end+0xfc008e7c>
 800947c:	008200b4 	movhi	r2,2050
 8009480:	1080b904 	addi	r2,r2,740
 8009484:	003e7f06 	br	8008e84 <__alt_data_end+0xfc008e84>
 8009488:	10c00204 	addi	r3,r2,8
 800948c:	003e8206 	br	8008e98 <__alt_data_end+0xfc008e98>
 8009490:	01400434 	movhi	r5,16
 8009494:	297fffc4 	addi	r5,r5,-1
 8009498:	994a703a 	and	r5,r19,r5
 800949c:	9009883a 	mov	r4,r18
 80094a0:	8c7f0044 	addi	r17,r17,-1023
 80094a4:	294ffc34 	orhi	r5,r5,16368
 80094a8:	dd000217 	ldw	r20,8(sp)
 80094ac:	d8000f15 	stw	zero,60(sp)
 80094b0:	003e9f06 	br	8008f30 <__alt_data_end+0xfc008f30>
 80094b4:	008200b4 	movhi	r2,2050
 80094b8:	1080a804 	addi	r2,r2,672
 80094bc:	003e5f06 	br	8008e3c <__alt_data_end+0xfc008e3c>
 80094c0:	80001115 	stw	zero,68(r16)
 80094c4:	8009883a 	mov	r4,r16
 80094c8:	000b883a 	mov	r5,zero
 80094cc:	800bc000 	call	800bc00 <_Balloc>
 80094d0:	01bfffc4 	movi	r6,-1
 80094d4:	d8800715 	stw	r2,28(sp)
 80094d8:	80801015 	stw	r2,64(r16)
 80094dc:	00800044 	movi	r2,1
 80094e0:	d9800615 	stw	r6,24(sp)
 80094e4:	d8800b15 	stw	r2,44(sp)
 80094e8:	d8002215 	stw	zero,136(sp)
 80094ec:	d9800d15 	stw	r6,52(sp)
 80094f0:	d8000315 	stw	zero,12(sp)
 80094f4:	d8800117 	ldw	r2,4(sp)
 80094f8:	10008e16 	blt	r2,zero,8009734 <_dtoa_r+0x9b4>
 80094fc:	d9000517 	ldw	r4,20(sp)
 8009500:	00c00384 	movi	r3,14
 8009504:	19008b16 	blt	r3,r4,8009734 <_dtoa_r+0x9b4>
 8009508:	200490fa 	slli	r2,r4,3
 800950c:	00c200b4 	movhi	r3,2050
 8009510:	d9802217 	ldw	r6,136(sp)
 8009514:	18c0d804 	addi	r3,r3,864
 8009518:	1885883a 	add	r2,r3,r2
 800951c:	14400017 	ldw	r17,0(r2)
 8009520:	15000117 	ldw	r20,4(r2)
 8009524:	3001c716 	blt	r6,zero,8009c44 <_dtoa_r+0xec4>
 8009528:	880d883a 	mov	r6,r17
 800952c:	a00f883a 	mov	r7,r20
 8009530:	9009883a 	mov	r4,r18
 8009534:	980b883a 	mov	r5,r19
 8009538:	80111600 	call	8011160 <__divdf3>
 800953c:	180b883a 	mov	r5,r3
 8009540:	1009883a 	mov	r4,r2
 8009544:	8003e100 	call	8003e10 <__fixdfsi>
 8009548:	1009883a 	mov	r4,r2
 800954c:	102d883a 	mov	r22,r2
 8009550:	8003e980 	call	8003e98 <__floatsidf>
 8009554:	1009883a 	mov	r4,r2
 8009558:	180b883a 	mov	r5,r3
 800955c:	880d883a 	mov	r6,r17
 8009560:	a00f883a 	mov	r7,r20
 8009564:	8011ab00 	call	8011ab0 <__muldf3>
 8009568:	9009883a 	mov	r4,r18
 800956c:	980b883a 	mov	r5,r19
 8009570:	100d883a 	mov	r6,r2
 8009574:	180f883a 	mov	r7,r3
 8009578:	80121d40 	call	80121d4 <__subdf3>
 800957c:	d9000717 	ldw	r4,28(sp)
 8009580:	d9800617 	ldw	r6,24(sp)
 8009584:	180b883a 	mov	r5,r3
 8009588:	b0c00c04 	addi	r3,r22,48
 800958c:	20c00005 	stb	r3,0(r4)
 8009590:	25c00044 	addi	r23,r4,1
 8009594:	01000044 	movi	r4,1
 8009598:	1011883a 	mov	r8,r2
 800959c:	2807883a 	mov	r3,r5
 80095a0:	31003d26 	beq	r6,r4,8009698 <_dtoa_r+0x918>
 80095a4:	000d883a 	mov	r6,zero
 80095a8:	01d00934 	movhi	r7,16420
 80095ac:	1009883a 	mov	r4,r2
 80095b0:	8011ab00 	call	8011ab0 <__muldf3>
 80095b4:	1009883a 	mov	r4,r2
 80095b8:	180b883a 	mov	r5,r3
 80095bc:	000d883a 	mov	r6,zero
 80095c0:	000f883a 	mov	r7,zero
 80095c4:	1027883a 	mov	r19,r2
 80095c8:	182b883a 	mov	r21,r3
 80095cc:	8011a2c0 	call	8011a2c <__eqdf2>
 80095d0:	103f9926 	beq	r2,zero,8009438 <__alt_data_end+0xfc009438>
 80095d4:	d8c00617 	ldw	r3,24(sp)
 80095d8:	d9000717 	ldw	r4,28(sp)
 80095dc:	b825883a 	mov	r18,r23
 80095e0:	18bfffc4 	addi	r2,r3,-1
 80095e4:	20ad883a 	add	r22,r4,r2
 80095e8:	dc000315 	stw	r16,12(sp)
 80095ec:	00000a06 	br	8009618 <_dtoa_r+0x898>
 80095f0:	8011ab00 	call	8011ab0 <__muldf3>
 80095f4:	1009883a 	mov	r4,r2
 80095f8:	180b883a 	mov	r5,r3
 80095fc:	000d883a 	mov	r6,zero
 8009600:	000f883a 	mov	r7,zero
 8009604:	1027883a 	mov	r19,r2
 8009608:	182b883a 	mov	r21,r3
 800960c:	b825883a 	mov	r18,r23
 8009610:	8011a2c0 	call	8011a2c <__eqdf2>
 8009614:	10022626 	beq	r2,zero,8009eb0 <_dtoa_r+0x1130>
 8009618:	880d883a 	mov	r6,r17
 800961c:	a00f883a 	mov	r7,r20
 8009620:	9809883a 	mov	r4,r19
 8009624:	a80b883a 	mov	r5,r21
 8009628:	80111600 	call	8011160 <__divdf3>
 800962c:	180b883a 	mov	r5,r3
 8009630:	1009883a 	mov	r4,r2
 8009634:	8003e100 	call	8003e10 <__fixdfsi>
 8009638:	1009883a 	mov	r4,r2
 800963c:	1021883a 	mov	r16,r2
 8009640:	8003e980 	call	8003e98 <__floatsidf>
 8009644:	1009883a 	mov	r4,r2
 8009648:	180b883a 	mov	r5,r3
 800964c:	880d883a 	mov	r6,r17
 8009650:	a00f883a 	mov	r7,r20
 8009654:	8011ab00 	call	8011ab0 <__muldf3>
 8009658:	9809883a 	mov	r4,r19
 800965c:	a80b883a 	mov	r5,r21
 8009660:	100d883a 	mov	r6,r2
 8009664:	180f883a 	mov	r7,r3
 8009668:	80121d40 	call	80121d4 <__subdf3>
 800966c:	82000c04 	addi	r8,r16,48
 8009670:	92000005 	stb	r8,0(r18)
 8009674:	1009883a 	mov	r4,r2
 8009678:	180b883a 	mov	r5,r3
 800967c:	000d883a 	mov	r6,zero
 8009680:	01d00934 	movhi	r7,16420
 8009684:	1011883a 	mov	r8,r2
 8009688:	bdc00044 	addi	r23,r23,1
 800968c:	95bfd81e 	bne	r18,r22,80095f0 <__alt_data_end+0xfc0095f0>
 8009690:	802d883a 	mov	r22,r16
 8009694:	dc000317 	ldw	r16,12(sp)
 8009698:	4009883a 	mov	r4,r8
 800969c:	180b883a 	mov	r5,r3
 80096a0:	400d883a 	mov	r6,r8
 80096a4:	180f883a 	mov	r7,r3
 80096a8:	80033b40 	call	80033b4 <__adddf3>
 80096ac:	8809883a 	mov	r4,r17
 80096b0:	a00b883a 	mov	r5,r20
 80096b4:	100d883a 	mov	r6,r2
 80096b8:	180f883a 	mov	r7,r3
 80096bc:	1027883a 	mov	r19,r2
 80096c0:	1825883a 	mov	r18,r3
 80096c4:	8003d300 	call	8003d30 <__ledf2>
 80096c8:	10000816 	blt	r2,zero,80096ec <_dtoa_r+0x96c>
 80096cc:	8809883a 	mov	r4,r17
 80096d0:	a00b883a 	mov	r5,r20
 80096d4:	980d883a 	mov	r6,r19
 80096d8:	900f883a 	mov	r7,r18
 80096dc:	8011a2c0 	call	8011a2c <__eqdf2>
 80096e0:	103f551e 	bne	r2,zero,8009438 <__alt_data_end+0xfc009438>
 80096e4:	b580004c 	andi	r22,r22,1
 80096e8:	b03f5326 	beq	r22,zero,8009438 <__alt_data_end+0xfc009438>
 80096ec:	bd7fffc3 	ldbu	r21,-1(r23)
 80096f0:	b8bfffc4 	addi	r2,r23,-1
 80096f4:	1007883a 	mov	r3,r2
 80096f8:	01400e44 	movi	r5,57
 80096fc:	d9800717 	ldw	r6,28(sp)
 8009700:	00000506 	br	8009718 <_dtoa_r+0x998>
 8009704:	18ffffc4 	addi	r3,r3,-1
 8009708:	30825e26 	beq	r6,r2,800a084 <_dtoa_r+0x1304>
 800970c:	1d400003 	ldbu	r21,0(r3)
 8009710:	102f883a 	mov	r23,r2
 8009714:	10bfffc4 	addi	r2,r2,-1
 8009718:	a9003fcc 	andi	r4,r21,255
 800971c:	2100201c 	xori	r4,r4,128
 8009720:	213fe004 	addi	r4,r4,-128
 8009724:	217ff726 	beq	r4,r5,8009704 <__alt_data_end+0xfc009704>
 8009728:	aa000044 	addi	r8,r21,1
 800972c:	12000005 	stb	r8,0(r2)
 8009730:	003f4106 	br	8009438 <__alt_data_end+0xfc009438>
 8009734:	d8c00b17 	ldw	r3,44(sp)
 8009738:	18006726 	beq	r3,zero,80098d8 <_dtoa_r+0xb58>
 800973c:	d9000317 	ldw	r4,12(sp)
 8009740:	00c00044 	movi	r3,1
 8009744:	19016a0e 	bge	r3,r4,8009cf0 <_dtoa_r+0xf70>
 8009748:	d8800617 	ldw	r2,24(sp)
 800974c:	d8c00917 	ldw	r3,36(sp)
 8009750:	157fffc4 	addi	r21,r2,-1
 8009754:	1d420716 	blt	r3,r21,8009f74 <_dtoa_r+0x11f4>
 8009758:	1d6bc83a 	sub	r21,r3,r21
 800975c:	d8800617 	ldw	r2,24(sp)
 8009760:	1002c716 	blt	r2,zero,800a280 <_dtoa_r+0x1500>
 8009764:	dd000817 	ldw	r20,32(sp)
 8009768:	d8800617 	ldw	r2,24(sp)
 800976c:	d9800817 	ldw	r6,32(sp)
 8009770:	8009883a 	mov	r4,r16
 8009774:	01400044 	movi	r5,1
 8009778:	308d883a 	add	r6,r6,r2
 800977c:	d9800815 	stw	r6,32(sp)
 8009780:	b0ad883a 	add	r22,r22,r2
 8009784:	800c0000 	call	800c000 <__i2b>
 8009788:	1023883a 	mov	r17,r2
 800978c:	a0000826 	beq	r20,zero,80097b0 <_dtoa_r+0xa30>
 8009790:	0580070e 	bge	zero,r22,80097b0 <_dtoa_r+0xa30>
 8009794:	b005883a 	mov	r2,r22
 8009798:	a5812016 	blt	r20,r22,8009c1c <_dtoa_r+0xe9c>
 800979c:	d8c00817 	ldw	r3,32(sp)
 80097a0:	a0a9c83a 	sub	r20,r20,r2
 80097a4:	b0adc83a 	sub	r22,r22,r2
 80097a8:	1887c83a 	sub	r3,r3,r2
 80097ac:	d8c00815 	stw	r3,32(sp)
 80097b0:	d9000917 	ldw	r4,36(sp)
 80097b4:	0100140e 	bge	zero,r4,8009808 <_dtoa_r+0xa88>
 80097b8:	d9800b17 	ldw	r6,44(sp)
 80097bc:	3001e526 	beq	r6,zero,8009f54 <_dtoa_r+0x11d4>
 80097c0:	05400e0e 	bge	zero,r21,80097fc <_dtoa_r+0xa7c>
 80097c4:	880b883a 	mov	r5,r17
 80097c8:	8009883a 	mov	r4,r16
 80097cc:	a80d883a 	mov	r6,r21
 80097d0:	800c2380 	call	800c238 <__pow5mult>
 80097d4:	e00d883a 	mov	r6,fp
 80097d8:	8009883a 	mov	r4,r16
 80097dc:	100b883a 	mov	r5,r2
 80097e0:	1023883a 	mov	r17,r2
 80097e4:	800c03c0 	call	800c03c <__multiply>
 80097e8:	102f883a 	mov	r23,r2
 80097ec:	e00b883a 	mov	r5,fp
 80097f0:	8009883a 	mov	r4,r16
 80097f4:	800bca80 	call	800bca8 <_Bfree>
 80097f8:	b839883a 	mov	fp,r23
 80097fc:	d8800917 	ldw	r2,36(sp)
 8009800:	154dc83a 	sub	r6,r2,r21
 8009804:	3001281e 	bne	r6,zero,8009ca8 <_dtoa_r+0xf28>
 8009808:	05c00044 	movi	r23,1
 800980c:	8009883a 	mov	r4,r16
 8009810:	b80b883a 	mov	r5,r23
 8009814:	800c0000 	call	800c000 <__i2b>
 8009818:	d8c00a17 	ldw	r3,40(sp)
 800981c:	102b883a 	mov	r21,r2
 8009820:	00c0310e 	bge	zero,r3,80098e8 <_dtoa_r+0xb68>
 8009824:	8009883a 	mov	r4,r16
 8009828:	100b883a 	mov	r5,r2
 800982c:	180d883a 	mov	r6,r3
 8009830:	800c2380 	call	800c238 <__pow5mult>
 8009834:	d9000317 	ldw	r4,12(sp)
 8009838:	102b883a 	mov	r21,r2
 800983c:	b9011f0e 	bge	r23,r4,8009cbc <_dtoa_r+0xf3c>
 8009840:	0027883a 	mov	r19,zero
 8009844:	a8800417 	ldw	r2,16(r21)
 8009848:	10800104 	addi	r2,r2,4
 800984c:	1085883a 	add	r2,r2,r2
 8009850:	1085883a 	add	r2,r2,r2
 8009854:	a885883a 	add	r2,r21,r2
 8009858:	11000017 	ldw	r4,0(r2)
 800985c:	800bee80 	call	800bee8 <__hi0bits>
 8009860:	00c00804 	movi	r3,32
 8009864:	1885c83a 	sub	r2,r3,r2
 8009868:	00002506 	br	8009900 <_dtoa_r+0xb80>
 800986c:	01800044 	movi	r6,1
 8009870:	d9800c15 	stw	r6,48(sp)
 8009874:	003dec06 	br	8009028 <__alt_data_end+0xfc009028>
 8009878:	d8c00817 	ldw	r3,32(sp)
 800987c:	d9000517 	ldw	r4,20(sp)
 8009880:	d8000a15 	stw	zero,40(sp)
 8009884:	1907c83a 	sub	r3,r3,r4
 8009888:	010dc83a 	sub	r6,zero,r4
 800988c:	d8c00815 	stw	r3,32(sp)
 8009890:	d9800915 	stw	r6,36(sp)
 8009894:	003ded06 	br	800904c <__alt_data_end+0xfc00904c>
 8009898:	05adc83a 	sub	r22,zero,r22
 800989c:	dd800815 	stw	r22,32(sp)
 80098a0:	002d883a 	mov	r22,zero
 80098a4:	003de406 	br	8009038 <__alt_data_end+0xfc009038>
 80098a8:	d9000517 	ldw	r4,20(sp)
 80098ac:	8003e980 	call	8003e98 <__floatsidf>
 80098b0:	1009883a 	mov	r4,r2
 80098b4:	180b883a 	mov	r5,r3
 80098b8:	b00d883a 	mov	r6,r22
 80098bc:	a80f883a 	mov	r7,r21
 80098c0:	8011a2c0 	call	8011a2c <__eqdf2>
 80098c4:	103dc726 	beq	r2,zero,8008fe4 <__alt_data_end+0xfc008fe4>
 80098c8:	d8800517 	ldw	r2,20(sp)
 80098cc:	10bfffc4 	addi	r2,r2,-1
 80098d0:	d8800515 	stw	r2,20(sp)
 80098d4:	003dc306 	br	8008fe4 <__alt_data_end+0xfc008fe4>
 80098d8:	dd400917 	ldw	r21,36(sp)
 80098dc:	dd000817 	ldw	r20,32(sp)
 80098e0:	0023883a 	mov	r17,zero
 80098e4:	003fa906 	br	800978c <__alt_data_end+0xfc00978c>
 80098e8:	d9800317 	ldw	r6,12(sp)
 80098ec:	b981670e 	bge	r23,r6,8009e8c <_dtoa_r+0x110c>
 80098f0:	0027883a 	mov	r19,zero
 80098f4:	d8c00a17 	ldw	r3,40(sp)
 80098f8:	183fd21e 	bne	r3,zero,8009844 <__alt_data_end+0xfc009844>
 80098fc:	00800044 	movi	r2,1
 8009900:	1585883a 	add	r2,r2,r22
 8009904:	108007cc 	andi	r2,r2,31
 8009908:	10005f26 	beq	r2,zero,8009a88 <_dtoa_r+0xd08>
 800990c:	00c00804 	movi	r3,32
 8009910:	1887c83a 	sub	r3,r3,r2
 8009914:	01000104 	movi	r4,4
 8009918:	20c2dd0e 	bge	r4,r3,800a490 <_dtoa_r+0x1710>
 800991c:	d9000817 	ldw	r4,32(sp)
 8009920:	00c00704 	movi	r3,28
 8009924:	1885c83a 	sub	r2,r3,r2
 8009928:	2089883a 	add	r4,r4,r2
 800992c:	d9000815 	stw	r4,32(sp)
 8009930:	a0a9883a 	add	r20,r20,r2
 8009934:	b0ad883a 	add	r22,r22,r2
 8009938:	d8800817 	ldw	r2,32(sp)
 800993c:	0080050e 	bge	zero,r2,8009954 <_dtoa_r+0xbd4>
 8009940:	e00b883a 	mov	r5,fp
 8009944:	8009883a 	mov	r4,r16
 8009948:	100d883a 	mov	r6,r2
 800994c:	800c3780 	call	800c378 <__lshift>
 8009950:	1039883a 	mov	fp,r2
 8009954:	0580050e 	bge	zero,r22,800996c <_dtoa_r+0xbec>
 8009958:	a80b883a 	mov	r5,r21
 800995c:	8009883a 	mov	r4,r16
 8009960:	b00d883a 	mov	r6,r22
 8009964:	800c3780 	call	800c378 <__lshift>
 8009968:	102b883a 	mov	r21,r2
 800996c:	d8c00c17 	ldw	r3,48(sp)
 8009970:	1801161e 	bne	r3,zero,8009dcc <_dtoa_r+0x104c>
 8009974:	d8c00617 	ldw	r3,24(sp)
 8009978:	00c12d0e 	bge	zero,r3,8009e30 <_dtoa_r+0x10b0>
 800997c:	d8c00b17 	ldw	r3,44(sp)
 8009980:	1800571e 	bne	r3,zero,8009ae0 <_dtoa_r+0xd60>
 8009984:	dc800717 	ldw	r18,28(sp)
 8009988:	dcc00617 	ldw	r19,24(sp)
 800998c:	9029883a 	mov	r20,r18
 8009990:	00000206 	br	800999c <_dtoa_r+0xc1c>
 8009994:	800bcd00 	call	800bcd0 <__multadd>
 8009998:	1039883a 	mov	fp,r2
 800999c:	e009883a 	mov	r4,fp
 80099a0:	a80b883a 	mov	r5,r21
 80099a4:	8008b800 	call	8008b80 <quorem>
 80099a8:	10800c04 	addi	r2,r2,48
 80099ac:	90800005 	stb	r2,0(r18)
 80099b0:	94800044 	addi	r18,r18,1
 80099b4:	9507c83a 	sub	r3,r18,r20
 80099b8:	8009883a 	mov	r4,r16
 80099bc:	e00b883a 	mov	r5,fp
 80099c0:	01800284 	movi	r6,10
 80099c4:	000f883a 	mov	r7,zero
 80099c8:	1cfff216 	blt	r3,r19,8009994 <__alt_data_end+0xfc009994>
 80099cc:	1011883a 	mov	r8,r2
 80099d0:	d8800617 	ldw	r2,24(sp)
 80099d4:	00822e0e 	bge	zero,r2,800a290 <_dtoa_r+0x1510>
 80099d8:	d9000717 	ldw	r4,28(sp)
 80099dc:	0025883a 	mov	r18,zero
 80099e0:	20af883a 	add	r23,r4,r2
 80099e4:	e00b883a 	mov	r5,fp
 80099e8:	01800044 	movi	r6,1
 80099ec:	8009883a 	mov	r4,r16
 80099f0:	da001715 	stw	r8,92(sp)
 80099f4:	800c3780 	call	800c378 <__lshift>
 80099f8:	1009883a 	mov	r4,r2
 80099fc:	a80b883a 	mov	r5,r21
 8009a00:	1039883a 	mov	fp,r2
 8009a04:	800c4c00 	call	800c4c0 <__mcmp>
 8009a08:	da001717 	ldw	r8,92(sp)
 8009a0c:	00816e0e 	bge	zero,r2,8009fc8 <_dtoa_r+0x1248>
 8009a10:	b93fffc3 	ldbu	r4,-1(r23)
 8009a14:	b8bfffc4 	addi	r2,r23,-1
 8009a18:	1007883a 	mov	r3,r2
 8009a1c:	01800e44 	movi	r6,57
 8009a20:	d9c00717 	ldw	r7,28(sp)
 8009a24:	00000506 	br	8009a3c <_dtoa_r+0xcbc>
 8009a28:	18ffffc4 	addi	r3,r3,-1
 8009a2c:	38811926 	beq	r7,r2,8009e94 <_dtoa_r+0x1114>
 8009a30:	19000003 	ldbu	r4,0(r3)
 8009a34:	102f883a 	mov	r23,r2
 8009a38:	10bfffc4 	addi	r2,r2,-1
 8009a3c:	21403fcc 	andi	r5,r4,255
 8009a40:	2940201c 	xori	r5,r5,128
 8009a44:	297fe004 	addi	r5,r5,-128
 8009a48:	29bff726 	beq	r5,r6,8009a28 <__alt_data_end+0xfc009a28>
 8009a4c:	21000044 	addi	r4,r4,1
 8009a50:	11000005 	stb	r4,0(r2)
 8009a54:	8009883a 	mov	r4,r16
 8009a58:	a80b883a 	mov	r5,r21
 8009a5c:	800bca80 	call	800bca8 <_Bfree>
 8009a60:	883e7526 	beq	r17,zero,8009438 <__alt_data_end+0xfc009438>
 8009a64:	90000426 	beq	r18,zero,8009a78 <_dtoa_r+0xcf8>
 8009a68:	94400326 	beq	r18,r17,8009a78 <_dtoa_r+0xcf8>
 8009a6c:	8009883a 	mov	r4,r16
 8009a70:	900b883a 	mov	r5,r18
 8009a74:	800bca80 	call	800bca8 <_Bfree>
 8009a78:	8009883a 	mov	r4,r16
 8009a7c:	880b883a 	mov	r5,r17
 8009a80:	800bca80 	call	800bca8 <_Bfree>
 8009a84:	003e6c06 	br	8009438 <__alt_data_end+0xfc009438>
 8009a88:	00800704 	movi	r2,28
 8009a8c:	d9800817 	ldw	r6,32(sp)
 8009a90:	a0a9883a 	add	r20,r20,r2
 8009a94:	b0ad883a 	add	r22,r22,r2
 8009a98:	308d883a 	add	r6,r6,r2
 8009a9c:	d9800815 	stw	r6,32(sp)
 8009aa0:	003fa506 	br	8009938 <__alt_data_end+0xfc009938>
 8009aa4:	013efb84 	movi	r4,-1042
 8009aa8:	246bc83a 	sub	r21,r4,r17
 8009aac:	9548983a 	sll	r4,r18,r21
 8009ab0:	003d1806 	br	8008f14 <__alt_data_end+0xfc008f14>
 8009ab4:	d8000c15 	stw	zero,48(sp)
 8009ab8:	003d5b06 	br	8009028 <__alt_data_end+0xfc009028>
 8009abc:	880b883a 	mov	r5,r17
 8009ac0:	8009883a 	mov	r4,r16
 8009ac4:	01800284 	movi	r6,10
 8009ac8:	000f883a 	mov	r7,zero
 8009acc:	800bcd00 	call	800bcd0 <__multadd>
 8009ad0:	1023883a 	mov	r17,r2
 8009ad4:	d8800d17 	ldw	r2,52(sp)
 8009ad8:	0082550e 	bge	zero,r2,800a430 <_dtoa_r+0x16b0>
 8009adc:	d8800615 	stw	r2,24(sp)
 8009ae0:	0500050e 	bge	zero,r20,8009af8 <_dtoa_r+0xd78>
 8009ae4:	880b883a 	mov	r5,r17
 8009ae8:	8009883a 	mov	r4,r16
 8009aec:	a00d883a 	mov	r6,r20
 8009af0:	800c3780 	call	800c378 <__lshift>
 8009af4:	1023883a 	mov	r17,r2
 8009af8:	98016a1e 	bne	r19,zero,800a0a4 <_dtoa_r+0x1324>
 8009afc:	8829883a 	mov	r20,r17
 8009b00:	d9000617 	ldw	r4,24(sp)
 8009b04:	dcc00717 	ldw	r19,28(sp)
 8009b08:	9480004c 	andi	r18,r18,1
 8009b0c:	20bfffc4 	addi	r2,r4,-1
 8009b10:	9885883a 	add	r2,r19,r2
 8009b14:	d8800415 	stw	r2,16(sp)
 8009b18:	dc800615 	stw	r18,24(sp)
 8009b1c:	e009883a 	mov	r4,fp
 8009b20:	a80b883a 	mov	r5,r21
 8009b24:	8008b800 	call	8008b80 <quorem>
 8009b28:	e009883a 	mov	r4,fp
 8009b2c:	880b883a 	mov	r5,r17
 8009b30:	102f883a 	mov	r23,r2
 8009b34:	800c4c00 	call	800c4c0 <__mcmp>
 8009b38:	8009883a 	mov	r4,r16
 8009b3c:	a80b883a 	mov	r5,r21
 8009b40:	a00d883a 	mov	r6,r20
 8009b44:	102d883a 	mov	r22,r2
 8009b48:	800c5200 	call	800c520 <__mdiff>
 8009b4c:	1007883a 	mov	r3,r2
 8009b50:	10800317 	ldw	r2,12(r2)
 8009b54:	bc800c04 	addi	r18,r23,48
 8009b58:	1000971e 	bne	r2,zero,8009db8 <_dtoa_r+0x1038>
 8009b5c:	180b883a 	mov	r5,r3
 8009b60:	e009883a 	mov	r4,fp
 8009b64:	d8c01515 	stw	r3,84(sp)
 8009b68:	800c4c00 	call	800c4c0 <__mcmp>
 8009b6c:	d8c01517 	ldw	r3,84(sp)
 8009b70:	8009883a 	mov	r4,r16
 8009b74:	d8801515 	stw	r2,84(sp)
 8009b78:	180b883a 	mov	r5,r3
 8009b7c:	800bca80 	call	800bca8 <_Bfree>
 8009b80:	d8801517 	ldw	r2,84(sp)
 8009b84:	1000041e 	bne	r2,zero,8009b98 <_dtoa_r+0xe18>
 8009b88:	d9800317 	ldw	r6,12(sp)
 8009b8c:	3000021e 	bne	r6,zero,8009b98 <_dtoa_r+0xe18>
 8009b90:	d8c00617 	ldw	r3,24(sp)
 8009b94:	18007626 	beq	r3,zero,8009d70 <_dtoa_r+0xff0>
 8009b98:	b0005b16 	blt	r22,zero,8009d08 <_dtoa_r+0xf88>
 8009b9c:	b000041e 	bne	r22,zero,8009bb0 <_dtoa_r+0xe30>
 8009ba0:	d9000317 	ldw	r4,12(sp)
 8009ba4:	2000021e 	bne	r4,zero,8009bb0 <_dtoa_r+0xe30>
 8009ba8:	d8c00617 	ldw	r3,24(sp)
 8009bac:	18005626 	beq	r3,zero,8009d08 <_dtoa_r+0xf88>
 8009bb0:	00814d16 	blt	zero,r2,800a0e8 <_dtoa_r+0x1368>
 8009bb4:	d8c00417 	ldw	r3,16(sp)
 8009bb8:	9d800044 	addi	r22,r19,1
 8009bbc:	9c800005 	stb	r18,0(r19)
 8009bc0:	b02f883a 	mov	r23,r22
 8009bc4:	98c14c26 	beq	r19,r3,800a0f8 <_dtoa_r+0x1378>
 8009bc8:	e00b883a 	mov	r5,fp
 8009bcc:	8009883a 	mov	r4,r16
 8009bd0:	01800284 	movi	r6,10
 8009bd4:	000f883a 	mov	r7,zero
 8009bd8:	800bcd00 	call	800bcd0 <__multadd>
 8009bdc:	1039883a 	mov	fp,r2
 8009be0:	8d006d26 	beq	r17,r20,8009d98 <_dtoa_r+0x1018>
 8009be4:	880b883a 	mov	r5,r17
 8009be8:	01800284 	movi	r6,10
 8009bec:	000f883a 	mov	r7,zero
 8009bf0:	8009883a 	mov	r4,r16
 8009bf4:	800bcd00 	call	800bcd0 <__multadd>
 8009bf8:	a00b883a 	mov	r5,r20
 8009bfc:	8009883a 	mov	r4,r16
 8009c00:	01800284 	movi	r6,10
 8009c04:	000f883a 	mov	r7,zero
 8009c08:	1023883a 	mov	r17,r2
 8009c0c:	800bcd00 	call	800bcd0 <__multadd>
 8009c10:	1029883a 	mov	r20,r2
 8009c14:	b027883a 	mov	r19,r22
 8009c18:	003fc006 	br	8009b1c <__alt_data_end+0xfc009b1c>
 8009c1c:	a005883a 	mov	r2,r20
 8009c20:	003ede06 	br	800979c <__alt_data_end+0xfc00979c>
 8009c24:	01000044 	movi	r4,1
 8009c28:	d9000b15 	stw	r4,44(sp)
 8009c2c:	d9802217 	ldw	r6,136(sp)
 8009c30:	0180dc0e 	bge	zero,r6,8009fa4 <_dtoa_r+0x1224>
 8009c34:	3023883a 	mov	r17,r6
 8009c38:	d9800d15 	stw	r6,52(sp)
 8009c3c:	d9800615 	stw	r6,24(sp)
 8009c40:	003d1e06 	br	80090bc <__alt_data_end+0xfc0090bc>
 8009c44:	d8800617 	ldw	r2,24(sp)
 8009c48:	00be3716 	blt	zero,r2,8009528 <__alt_data_end+0xfc009528>
 8009c4c:	1000be1e 	bne	r2,zero,8009f48 <_dtoa_r+0x11c8>
 8009c50:	8809883a 	mov	r4,r17
 8009c54:	a00b883a 	mov	r5,r20
 8009c58:	000d883a 	mov	r6,zero
 8009c5c:	01d00534 	movhi	r7,16404
 8009c60:	8011ab00 	call	8011ab0 <__muldf3>
 8009c64:	1009883a 	mov	r4,r2
 8009c68:	180b883a 	mov	r5,r3
 8009c6c:	900d883a 	mov	r6,r18
 8009c70:	980f883a 	mov	r7,r19
 8009c74:	8003c500 	call	8003c50 <__gedf2>
 8009c78:	002b883a 	mov	r21,zero
 8009c7c:	0023883a 	mov	r17,zero
 8009c80:	10007a16 	blt	r2,zero,8009e6c <_dtoa_r+0x10ec>
 8009c84:	d9002217 	ldw	r4,136(sp)
 8009c88:	ddc00717 	ldw	r23,28(sp)
 8009c8c:	0108303a 	nor	r4,zero,r4
 8009c90:	d9000515 	stw	r4,20(sp)
 8009c94:	8009883a 	mov	r4,r16
 8009c98:	a80b883a 	mov	r5,r21
 8009c9c:	800bca80 	call	800bca8 <_Bfree>
 8009ca0:	883f751e 	bne	r17,zero,8009a78 <__alt_data_end+0xfc009a78>
 8009ca4:	003de406 	br	8009438 <__alt_data_end+0xfc009438>
 8009ca8:	e00b883a 	mov	r5,fp
 8009cac:	8009883a 	mov	r4,r16
 8009cb0:	800c2380 	call	800c238 <__pow5mult>
 8009cb4:	1039883a 	mov	fp,r2
 8009cb8:	003ed306 	br	8009808 <__alt_data_end+0xfc009808>
 8009cbc:	903ee01e 	bne	r18,zero,8009840 <__alt_data_end+0xfc009840>
 8009cc0:	00800434 	movhi	r2,16
 8009cc4:	10bfffc4 	addi	r2,r2,-1
 8009cc8:	9884703a 	and	r2,r19,r2
 8009ccc:	103f081e 	bne	r2,zero,80098f0 <__alt_data_end+0xfc0098f0>
 8009cd0:	9cdffc2c 	andhi	r19,r19,32752
 8009cd4:	983f0626 	beq	r19,zero,80098f0 <__alt_data_end+0xfc0098f0>
 8009cd8:	d8800817 	ldw	r2,32(sp)
 8009cdc:	b5800044 	addi	r22,r22,1
 8009ce0:	04c00044 	movi	r19,1
 8009ce4:	10800044 	addi	r2,r2,1
 8009ce8:	d8800815 	stw	r2,32(sp)
 8009cec:	003f0106 	br	80098f4 <__alt_data_end+0xfc0098f4>
 8009cf0:	d9800f17 	ldw	r6,60(sp)
 8009cf4:	30016826 	beq	r6,zero,800a298 <_dtoa_r+0x1518>
 8009cf8:	10810cc4 	addi	r2,r2,1075
 8009cfc:	dd400917 	ldw	r21,36(sp)
 8009d00:	dd000817 	ldw	r20,32(sp)
 8009d04:	003e9906 	br	800976c <__alt_data_end+0xfc00976c>
 8009d08:	9011883a 	mov	r8,r18
 8009d0c:	4007883a 	mov	r3,r8
 8009d10:	e02d883a 	mov	r22,fp
 8009d14:	0080100e 	bge	zero,r2,8009d58 <_dtoa_r+0xfd8>
 8009d18:	01800044 	movi	r6,1
 8009d1c:	8009883a 	mov	r4,r16
 8009d20:	e00b883a 	mov	r5,fp
 8009d24:	da001515 	stw	r8,84(sp)
 8009d28:	da001715 	stw	r8,92(sp)
 8009d2c:	800c3780 	call	800c378 <__lshift>
 8009d30:	1009883a 	mov	r4,r2
 8009d34:	a80b883a 	mov	r5,r21
 8009d38:	102d883a 	mov	r22,r2
 8009d3c:	800c4c00 	call	800c4c0 <__mcmp>
 8009d40:	d8c01517 	ldw	r3,84(sp)
 8009d44:	da001717 	ldw	r8,92(sp)
 8009d48:	0081a50e 	bge	zero,r2,800a3e0 <_dtoa_r+0x1660>
 8009d4c:	00800e44 	movi	r2,57
 8009d50:	40817b26 	beq	r8,r2,800a340 <_dtoa_r+0x15c0>
 8009d54:	40c00044 	addi	r3,r8,1
 8009d58:	8825883a 	mov	r18,r17
 8009d5c:	9dc00044 	addi	r23,r19,1
 8009d60:	98c00005 	stb	r3,0(r19)
 8009d64:	a023883a 	mov	r17,r20
 8009d68:	b039883a 	mov	fp,r22
 8009d6c:	003f3906 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009d70:	00800e44 	movi	r2,57
 8009d74:	9011883a 	mov	r8,r18
 8009d78:	90817226 	beq	r18,r2,800a344 <_dtoa_r+0x15c4>
 8009d7c:	0580010e 	bge	zero,r22,8009d84 <_dtoa_r+0x1004>
 8009d80:	ba000c44 	addi	r8,r23,49
 8009d84:	8825883a 	mov	r18,r17
 8009d88:	9dc00044 	addi	r23,r19,1
 8009d8c:	9a000005 	stb	r8,0(r19)
 8009d90:	a023883a 	mov	r17,r20
 8009d94:	003f2f06 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009d98:	880b883a 	mov	r5,r17
 8009d9c:	8009883a 	mov	r4,r16
 8009da0:	01800284 	movi	r6,10
 8009da4:	000f883a 	mov	r7,zero
 8009da8:	800bcd00 	call	800bcd0 <__multadd>
 8009dac:	1023883a 	mov	r17,r2
 8009db0:	1029883a 	mov	r20,r2
 8009db4:	003f9706 	br	8009c14 <__alt_data_end+0xfc009c14>
 8009db8:	8009883a 	mov	r4,r16
 8009dbc:	180b883a 	mov	r5,r3
 8009dc0:	800bca80 	call	800bca8 <_Bfree>
 8009dc4:	00800044 	movi	r2,1
 8009dc8:	003f7306 	br	8009b98 <__alt_data_end+0xfc009b98>
 8009dcc:	e009883a 	mov	r4,fp
 8009dd0:	a80b883a 	mov	r5,r21
 8009dd4:	800c4c00 	call	800c4c0 <__mcmp>
 8009dd8:	103ee60e 	bge	r2,zero,8009974 <__alt_data_end+0xfc009974>
 8009ddc:	8009883a 	mov	r4,r16
 8009de0:	e00b883a 	mov	r5,fp
 8009de4:	01800284 	movi	r6,10
 8009de8:	000f883a 	mov	r7,zero
 8009dec:	800bcd00 	call	800bcd0 <__multadd>
 8009df0:	d9000517 	ldw	r4,20(sp)
 8009df4:	d9800b17 	ldw	r6,44(sp)
 8009df8:	1039883a 	mov	fp,r2
 8009dfc:	213fffc4 	addi	r4,r4,-1
 8009e00:	d9000515 	stw	r4,20(sp)
 8009e04:	303f2d1e 	bne	r6,zero,8009abc <__alt_data_end+0xfc009abc>
 8009e08:	d9000d17 	ldw	r4,52(sp)
 8009e0c:	0101780e 	bge	zero,r4,800a3f0 <_dtoa_r+0x1670>
 8009e10:	d9000615 	stw	r4,24(sp)
 8009e14:	003edb06 	br	8009984 <__alt_data_end+0xfc009984>
 8009e18:	00800084 	movi	r2,2
 8009e1c:	30818e1e 	bne	r6,r2,800a458 <_dtoa_r+0x16d8>
 8009e20:	d8000b15 	stw	zero,44(sp)
 8009e24:	003f8106 	br	8009c2c <__alt_data_end+0xfc009c2c>
 8009e28:	d8800717 	ldw	r2,28(sp)
 8009e2c:	003c0306 	br	8008e3c <__alt_data_end+0xfc008e3c>
 8009e30:	d9000317 	ldw	r4,12(sp)
 8009e34:	00800084 	movi	r2,2
 8009e38:	113ed00e 	bge	r2,r4,800997c <__alt_data_end+0xfc00997c>
 8009e3c:	d8c00617 	ldw	r3,24(sp)
 8009e40:	183f901e 	bne	r3,zero,8009c84 <__alt_data_end+0xfc009c84>
 8009e44:	a80b883a 	mov	r5,r21
 8009e48:	8009883a 	mov	r4,r16
 8009e4c:	01800144 	movi	r6,5
 8009e50:	000f883a 	mov	r7,zero
 8009e54:	800bcd00 	call	800bcd0 <__multadd>
 8009e58:	e009883a 	mov	r4,fp
 8009e5c:	100b883a 	mov	r5,r2
 8009e60:	102b883a 	mov	r21,r2
 8009e64:	800c4c00 	call	800c4c0 <__mcmp>
 8009e68:	00bf860e 	bge	zero,r2,8009c84 <__alt_data_end+0xfc009c84>
 8009e6c:	d9800717 	ldw	r6,28(sp)
 8009e70:	00800c44 	movi	r2,49
 8009e74:	30800005 	stb	r2,0(r6)
 8009e78:	d8800517 	ldw	r2,20(sp)
 8009e7c:	35c00044 	addi	r23,r6,1
 8009e80:	10800044 	addi	r2,r2,1
 8009e84:	d8800515 	stw	r2,20(sp)
 8009e88:	003f8206 	br	8009c94 <__alt_data_end+0xfc009c94>
 8009e8c:	903e981e 	bne	r18,zero,80098f0 <__alt_data_end+0xfc0098f0>
 8009e90:	003f8b06 	br	8009cc0 <__alt_data_end+0xfc009cc0>
 8009e94:	d9800517 	ldw	r6,20(sp)
 8009e98:	d8c00717 	ldw	r3,28(sp)
 8009e9c:	00800c44 	movi	r2,49
 8009ea0:	31800044 	addi	r6,r6,1
 8009ea4:	d9800515 	stw	r6,20(sp)
 8009ea8:	18800005 	stb	r2,0(r3)
 8009eac:	003ee906 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009eb0:	dc000317 	ldw	r16,12(sp)
 8009eb4:	003d6006 	br	8009438 <__alt_data_end+0xfc009438>
 8009eb8:	8809883a 	mov	r4,r17
 8009ebc:	8003e980 	call	8003e98 <__floatsidf>
 8009ec0:	a009883a 	mov	r4,r20
 8009ec4:	a80b883a 	mov	r5,r21
 8009ec8:	100d883a 	mov	r6,r2
 8009ecc:	180f883a 	mov	r7,r3
 8009ed0:	8011ab00 	call	8011ab0 <__muldf3>
 8009ed4:	1009883a 	mov	r4,r2
 8009ed8:	180b883a 	mov	r5,r3
 8009edc:	000d883a 	mov	r6,zero
 8009ee0:	01d00734 	movhi	r7,16412
 8009ee4:	80033b40 	call	80033b4 <__adddf3>
 8009ee8:	1023883a 	mov	r17,r2
 8009eec:	00bf3034 	movhi	r2,64704
 8009ef0:	1885883a 	add	r2,r3,r2
 8009ef4:	d8800e15 	stw	r2,56(sp)
 8009ef8:	a009883a 	mov	r4,r20
 8009efc:	a80b883a 	mov	r5,r21
 8009f00:	000d883a 	mov	r6,zero
 8009f04:	01d00534 	movhi	r7,16404
 8009f08:	80121d40 	call	80121d4 <__subdf3>
 8009f0c:	d9c00e17 	ldw	r7,56(sp)
 8009f10:	1009883a 	mov	r4,r2
 8009f14:	180b883a 	mov	r5,r3
 8009f18:	880d883a 	mov	r6,r17
 8009f1c:	102b883a 	mov	r21,r2
 8009f20:	1829883a 	mov	r20,r3
 8009f24:	8003c500 	call	8003c50 <__gedf2>
 8009f28:	00807716 	blt	zero,r2,800a108 <_dtoa_r+0x1388>
 8009f2c:	d8800e17 	ldw	r2,56(sp)
 8009f30:	a809883a 	mov	r4,r21
 8009f34:	a00b883a 	mov	r5,r20
 8009f38:	11e0003c 	xorhi	r7,r2,32768
 8009f3c:	880d883a 	mov	r6,r17
 8009f40:	8003d300 	call	8003d30 <__ledf2>
 8009f44:	103d6b0e 	bge	r2,zero,80094f4 <__alt_data_end+0xfc0094f4>
 8009f48:	002b883a 	mov	r21,zero
 8009f4c:	0023883a 	mov	r17,zero
 8009f50:	003f4c06 	br	8009c84 <__alt_data_end+0xfc009c84>
 8009f54:	d9800917 	ldw	r6,36(sp)
 8009f58:	e00b883a 	mov	r5,fp
 8009f5c:	8009883a 	mov	r4,r16
 8009f60:	800c2380 	call	800c238 <__pow5mult>
 8009f64:	1039883a 	mov	fp,r2
 8009f68:	003e2706 	br	8009808 <__alt_data_end+0xfc009808>
 8009f6c:	d8000b15 	stw	zero,44(sp)
 8009f70:	003c4906 	br	8009098 <__alt_data_end+0xfc009098>
 8009f74:	d9000917 	ldw	r4,36(sp)
 8009f78:	d9800a17 	ldw	r6,40(sp)
 8009f7c:	dd400915 	stw	r21,36(sp)
 8009f80:	a905c83a 	sub	r2,r21,r4
 8009f84:	308d883a 	add	r6,r6,r2
 8009f88:	d9800a15 	stw	r6,40(sp)
 8009f8c:	002b883a 	mov	r21,zero
 8009f90:	003df206 	br	800975c <__alt_data_end+0xfc00975c>
 8009f94:	dc800e15 	stw	r18,56(sp)
 8009f98:	982b883a 	mov	r21,r19
 8009f9c:	04400084 	movi	r17,2
 8009fa0:	003c7406 	br	8009174 <__alt_data_end+0xfc009174>
 8009fa4:	04400044 	movi	r17,1
 8009fa8:	dc400d15 	stw	r17,52(sp)
 8009fac:	dc400615 	stw	r17,24(sp)
 8009fb0:	dc402215 	stw	r17,136(sp)
 8009fb4:	80001115 	stw	zero,68(r16)
 8009fb8:	000b883a 	mov	r5,zero
 8009fbc:	003c4a06 	br	80090e8 <__alt_data_end+0xfc0090e8>
 8009fc0:	3023883a 	mov	r17,r6
 8009fc4:	003ffb06 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 8009fc8:	1000021e 	bne	r2,zero,8009fd4 <_dtoa_r+0x1254>
 8009fcc:	4200004c 	andi	r8,r8,1
 8009fd0:	403e8f1e 	bne	r8,zero,8009a10 <__alt_data_end+0xfc009a10>
 8009fd4:	01000c04 	movi	r4,48
 8009fd8:	00000106 	br	8009fe0 <_dtoa_r+0x1260>
 8009fdc:	102f883a 	mov	r23,r2
 8009fe0:	b8bfffc4 	addi	r2,r23,-1
 8009fe4:	10c00007 	ldb	r3,0(r2)
 8009fe8:	193ffc26 	beq	r3,r4,8009fdc <__alt_data_end+0xfc009fdc>
 8009fec:	003e9906 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009ff0:	d9000517 	ldw	r4,20(sp)
 8009ff4:	012fc83a 	sub	r23,zero,r4
 8009ff8:	b800ad26 	beq	r23,zero,800a2b0 <_dtoa_r+0x1530>
 8009ffc:	b88003cc 	andi	r2,r23,15
 800a000:	100490fa 	slli	r2,r2,3
 800a004:	00c200b4 	movhi	r3,2050
 800a008:	18c0d804 	addi	r3,r3,864
 800a00c:	1885883a 	add	r2,r3,r2
 800a010:	11800017 	ldw	r6,0(r2)
 800a014:	11c00117 	ldw	r7,4(r2)
 800a018:	b82fd13a 	srai	r23,r23,4
 800a01c:	9009883a 	mov	r4,r18
 800a020:	980b883a 	mov	r5,r19
 800a024:	8011ab00 	call	8011ab0 <__muldf3>
 800a028:	1029883a 	mov	r20,r2
 800a02c:	182b883a 	mov	r21,r3
 800a030:	b800f426 	beq	r23,zero,800a404 <_dtoa_r+0x1684>
 800a034:	020200b4 	movhi	r8,2050
 800a038:	4200ce04 	addi	r8,r8,824
 800a03c:	8029883a 	mov	r20,r16
 800a040:	04400084 	movi	r17,2
 800a044:	4021883a 	mov	r16,r8
 800a048:	b980004c 	andi	r6,r23,1
 800a04c:	1009883a 	mov	r4,r2
 800a050:	b82fd07a 	srai	r23,r23,1
 800a054:	180b883a 	mov	r5,r3
 800a058:	30000426 	beq	r6,zero,800a06c <_dtoa_r+0x12ec>
 800a05c:	81800017 	ldw	r6,0(r16)
 800a060:	81c00117 	ldw	r7,4(r16)
 800a064:	8c400044 	addi	r17,r17,1
 800a068:	8011ab00 	call	8011ab0 <__muldf3>
 800a06c:	84000204 	addi	r16,r16,8
 800a070:	b83ff51e 	bne	r23,zero,800a048 <__alt_data_end+0xfc00a048>
 800a074:	a021883a 	mov	r16,r20
 800a078:	182b883a 	mov	r21,r3
 800a07c:	1029883a 	mov	r20,r2
 800a080:	003c5506 	br	80091d8 <__alt_data_end+0xfc0091d8>
 800a084:	d9800517 	ldw	r6,20(sp)
 800a088:	d9000717 	ldw	r4,28(sp)
 800a08c:	00c00c04 	movi	r3,48
 800a090:	31800044 	addi	r6,r6,1
 800a094:	d9800515 	stw	r6,20(sp)
 800a098:	20c00005 	stb	r3,0(r4)
 800a09c:	02000c44 	movi	r8,49
 800a0a0:	003da206 	br	800972c <__alt_data_end+0xfc00972c>
 800a0a4:	89400117 	ldw	r5,4(r17)
 800a0a8:	8009883a 	mov	r4,r16
 800a0ac:	800bc000 	call	800bc00 <_Balloc>
 800a0b0:	89800417 	ldw	r6,16(r17)
 800a0b4:	11000304 	addi	r4,r2,12
 800a0b8:	89400304 	addi	r5,r17,12
 800a0bc:	31800084 	addi	r6,r6,2
 800a0c0:	318d883a 	add	r6,r6,r6
 800a0c4:	318d883a 	add	r6,r6,r6
 800a0c8:	1027883a 	mov	r19,r2
 800a0cc:	800b8480 	call	800b848 <memcpy>
 800a0d0:	8009883a 	mov	r4,r16
 800a0d4:	980b883a 	mov	r5,r19
 800a0d8:	01800044 	movi	r6,1
 800a0dc:	800c3780 	call	800c378 <__lshift>
 800a0e0:	1029883a 	mov	r20,r2
 800a0e4:	003e8606 	br	8009b00 <__alt_data_end+0xfc009b00>
 800a0e8:	00800e44 	movi	r2,57
 800a0ec:	90809526 	beq	r18,r2,800a344 <_dtoa_r+0x15c4>
 800a0f0:	92000044 	addi	r8,r18,1
 800a0f4:	003f2306 	br	8009d84 <__alt_data_end+0xfc009d84>
 800a0f8:	9011883a 	mov	r8,r18
 800a0fc:	8825883a 	mov	r18,r17
 800a100:	a023883a 	mov	r17,r20
 800a104:	003e3706 	br	80099e4 <__alt_data_end+0xfc0099e4>
 800a108:	002b883a 	mov	r21,zero
 800a10c:	0023883a 	mov	r17,zero
 800a110:	003f5606 	br	8009e6c <__alt_data_end+0xfc009e6c>
 800a114:	51bfffc4 	addi	r6,r10,-1
 800a118:	300490fa 	slli	r2,r6,3
 800a11c:	00c200b4 	movhi	r3,2050
 800a120:	18c0d804 	addi	r3,r3,864
 800a124:	1885883a 	add	r2,r3,r2
 800a128:	d9c00e17 	ldw	r7,56(sp)
 800a12c:	11000017 	ldw	r4,0(r2)
 800a130:	11400117 	ldw	r5,4(r2)
 800a134:	d8800717 	ldw	r2,28(sp)
 800a138:	d9801015 	stw	r6,64(sp)
 800a13c:	880d883a 	mov	r6,r17
 800a140:	da801615 	stw	r10,88(sp)
 800a144:	15c00044 	addi	r23,r2,1
 800a148:	8011ab00 	call	8011ab0 <__muldf3>
 800a14c:	a80b883a 	mov	r5,r21
 800a150:	a009883a 	mov	r4,r20
 800a154:	d8c01115 	stw	r3,68(sp)
 800a158:	d8800e15 	stw	r2,56(sp)
 800a15c:	8003e100 	call	8003e10 <__fixdfsi>
 800a160:	1009883a 	mov	r4,r2
 800a164:	1023883a 	mov	r17,r2
 800a168:	8003e980 	call	8003e98 <__floatsidf>
 800a16c:	a009883a 	mov	r4,r20
 800a170:	a80b883a 	mov	r5,r21
 800a174:	100d883a 	mov	r6,r2
 800a178:	180f883a 	mov	r7,r3
 800a17c:	80121d40 	call	80121d4 <__subdf3>
 800a180:	1813883a 	mov	r9,r3
 800a184:	d8c00717 	ldw	r3,28(sp)
 800a188:	8c400c04 	addi	r17,r17,48
 800a18c:	1011883a 	mov	r8,r2
 800a190:	1c400005 	stb	r17,0(r3)
 800a194:	da801617 	ldw	r10,88(sp)
 800a198:	00800044 	movi	r2,1
 800a19c:	50802326 	beq	r10,r2,800a22c <_dtoa_r+0x14ac>
 800a1a0:	d8800717 	ldw	r2,28(sp)
 800a1a4:	b82b883a 	mov	r21,r23
 800a1a8:	dc001315 	stw	r16,76(sp)
 800a1ac:	12a9883a 	add	r20,r2,r10
 800a1b0:	4807883a 	mov	r3,r9
 800a1b4:	4005883a 	mov	r2,r8
 800a1b8:	dc801415 	stw	r18,80(sp)
 800a1bc:	000d883a 	mov	r6,zero
 800a1c0:	01d00934 	movhi	r7,16420
 800a1c4:	1009883a 	mov	r4,r2
 800a1c8:	180b883a 	mov	r5,r3
 800a1cc:	8011ab00 	call	8011ab0 <__muldf3>
 800a1d0:	180b883a 	mov	r5,r3
 800a1d4:	1009883a 	mov	r4,r2
 800a1d8:	1821883a 	mov	r16,r3
 800a1dc:	1025883a 	mov	r18,r2
 800a1e0:	8003e100 	call	8003e10 <__fixdfsi>
 800a1e4:	1009883a 	mov	r4,r2
 800a1e8:	1023883a 	mov	r17,r2
 800a1ec:	8003e980 	call	8003e98 <__floatsidf>
 800a1f0:	9009883a 	mov	r4,r18
 800a1f4:	800b883a 	mov	r5,r16
 800a1f8:	100d883a 	mov	r6,r2
 800a1fc:	180f883a 	mov	r7,r3
 800a200:	8c400c04 	addi	r17,r17,48
 800a204:	80121d40 	call	80121d4 <__subdf3>
 800a208:	ad400044 	addi	r21,r21,1
 800a20c:	ac7fffc5 	stb	r17,-1(r21)
 800a210:	ad3fea1e 	bne	r21,r20,800a1bc <__alt_data_end+0xfc00a1bc>
 800a214:	1813883a 	mov	r9,r3
 800a218:	d8c01017 	ldw	r3,64(sp)
 800a21c:	dc001317 	ldw	r16,76(sp)
 800a220:	dc801417 	ldw	r18,80(sp)
 800a224:	1011883a 	mov	r8,r2
 800a228:	b8ef883a 	add	r23,r23,r3
 800a22c:	d9000e17 	ldw	r4,56(sp)
 800a230:	d9401117 	ldw	r5,68(sp)
 800a234:	000d883a 	mov	r6,zero
 800a238:	01cff834 	movhi	r7,16352
 800a23c:	da001715 	stw	r8,92(sp)
 800a240:	da401515 	stw	r9,84(sp)
 800a244:	80033b40 	call	80033b4 <__adddf3>
 800a248:	da001717 	ldw	r8,92(sp)
 800a24c:	da401517 	ldw	r9,84(sp)
 800a250:	1009883a 	mov	r4,r2
 800a254:	400d883a 	mov	r6,r8
 800a258:	480f883a 	mov	r7,r9
 800a25c:	180b883a 	mov	r5,r3
 800a260:	8003d300 	call	8003d30 <__ledf2>
 800a264:	da001717 	ldw	r8,92(sp)
 800a268:	da401517 	ldw	r9,84(sp)
 800a26c:	10003b0e 	bge	r2,zero,800a35c <_dtoa_r+0x15dc>
 800a270:	d9001217 	ldw	r4,72(sp)
 800a274:	bd7fffc3 	ldbu	r21,-1(r23)
 800a278:	d9000515 	stw	r4,20(sp)
 800a27c:	003d1c06 	br	80096f0 <__alt_data_end+0xfc0096f0>
 800a280:	d8c00817 	ldw	r3,32(sp)
 800a284:	18a9c83a 	sub	r20,r3,r2
 800a288:	0005883a 	mov	r2,zero
 800a28c:	003d3706 	br	800976c <__alt_data_end+0xfc00976c>
 800a290:	00800044 	movi	r2,1
 800a294:	003dd006 	br	80099d8 <__alt_data_end+0xfc0099d8>
 800a298:	d8c00217 	ldw	r3,8(sp)
 800a29c:	00800d84 	movi	r2,54
 800a2a0:	dd400917 	ldw	r21,36(sp)
 800a2a4:	10c5c83a 	sub	r2,r2,r3
 800a2a8:	dd000817 	ldw	r20,32(sp)
 800a2ac:	003d2f06 	br	800976c <__alt_data_end+0xfc00976c>
 800a2b0:	9029883a 	mov	r20,r18
 800a2b4:	982b883a 	mov	r21,r19
 800a2b8:	04400084 	movi	r17,2
 800a2bc:	003bc606 	br	80091d8 <__alt_data_end+0xfc0091d8>
 800a2c0:	d8800617 	ldw	r2,24(sp)
 800a2c4:	103efc26 	beq	r2,zero,8009eb8 <__alt_data_end+0xfc009eb8>
 800a2c8:	d8c00d17 	ldw	r3,52(sp)
 800a2cc:	00fc890e 	bge	zero,r3,80094f4 <__alt_data_end+0xfc0094f4>
 800a2d0:	a80b883a 	mov	r5,r21
 800a2d4:	a009883a 	mov	r4,r20
 800a2d8:	000d883a 	mov	r6,zero
 800a2dc:	01d00934 	movhi	r7,16420
 800a2e0:	8011ab00 	call	8011ab0 <__muldf3>
 800a2e4:	89000044 	addi	r4,r17,1
 800a2e8:	1029883a 	mov	r20,r2
 800a2ec:	182b883a 	mov	r21,r3
 800a2f0:	8003e980 	call	8003e98 <__floatsidf>
 800a2f4:	a009883a 	mov	r4,r20
 800a2f8:	a80b883a 	mov	r5,r21
 800a2fc:	100d883a 	mov	r6,r2
 800a300:	180f883a 	mov	r7,r3
 800a304:	8011ab00 	call	8011ab0 <__muldf3>
 800a308:	1009883a 	mov	r4,r2
 800a30c:	180b883a 	mov	r5,r3
 800a310:	000d883a 	mov	r6,zero
 800a314:	01d00734 	movhi	r7,16412
 800a318:	80033b40 	call	80033b4 <__adddf3>
 800a31c:	d9000517 	ldw	r4,20(sp)
 800a320:	1023883a 	mov	r17,r2
 800a324:	00bf3034 	movhi	r2,64704
 800a328:	213fffc4 	addi	r4,r4,-1
 800a32c:	1885883a 	add	r2,r3,r2
 800a330:	d9001215 	stw	r4,72(sp)
 800a334:	d8800e15 	stw	r2,56(sp)
 800a338:	da800d17 	ldw	r10,52(sp)
 800a33c:	003bc306 	br	800924c <__alt_data_end+0xfc00924c>
 800a340:	b039883a 	mov	fp,r22
 800a344:	01000e44 	movi	r4,57
 800a348:	8825883a 	mov	r18,r17
 800a34c:	9dc00044 	addi	r23,r19,1
 800a350:	99000005 	stb	r4,0(r19)
 800a354:	a023883a 	mov	r17,r20
 800a358:	003dae06 	br	8009a14 <__alt_data_end+0xfc009a14>
 800a35c:	d9800e17 	ldw	r6,56(sp)
 800a360:	d9c01117 	ldw	r7,68(sp)
 800a364:	0009883a 	mov	r4,zero
 800a368:	014ff834 	movhi	r5,16352
 800a36c:	da001715 	stw	r8,92(sp)
 800a370:	da401515 	stw	r9,84(sp)
 800a374:	80121d40 	call	80121d4 <__subdf3>
 800a378:	da001717 	ldw	r8,92(sp)
 800a37c:	da401517 	ldw	r9,84(sp)
 800a380:	1009883a 	mov	r4,r2
 800a384:	180b883a 	mov	r5,r3
 800a388:	400d883a 	mov	r6,r8
 800a38c:	480f883a 	mov	r7,r9
 800a390:	8003c500 	call	8003c50 <__gedf2>
 800a394:	00bc570e 	bge	zero,r2,80094f4 <__alt_data_end+0xfc0094f4>
 800a398:	01000c04 	movi	r4,48
 800a39c:	00000106 	br	800a3a4 <_dtoa_r+0x1624>
 800a3a0:	102f883a 	mov	r23,r2
 800a3a4:	b8bfffc4 	addi	r2,r23,-1
 800a3a8:	10c00007 	ldb	r3,0(r2)
 800a3ac:	193ffc26 	beq	r3,r4,800a3a0 <__alt_data_end+0xfc00a3a0>
 800a3b0:	d9801217 	ldw	r6,72(sp)
 800a3b4:	d9800515 	stw	r6,20(sp)
 800a3b8:	003c1f06 	br	8009438 <__alt_data_end+0xfc009438>
 800a3bc:	d8801217 	ldw	r2,72(sp)
 800a3c0:	dc001117 	ldw	r16,68(sp)
 800a3c4:	d8800515 	stw	r2,20(sp)
 800a3c8:	003cc906 	br	80096f0 <__alt_data_end+0xfc0096f0>
 800a3cc:	dd801317 	ldw	r22,76(sp)
 800a3d0:	dc001117 	ldw	r16,68(sp)
 800a3d4:	dcc01417 	ldw	r19,80(sp)
 800a3d8:	dc801017 	ldw	r18,64(sp)
 800a3dc:	003c4506 	br	80094f4 <__alt_data_end+0xfc0094f4>
 800a3e0:	103e5d1e 	bne	r2,zero,8009d58 <__alt_data_end+0xfc009d58>
 800a3e4:	4080004c 	andi	r2,r8,1
 800a3e8:	103e5b26 	beq	r2,zero,8009d58 <__alt_data_end+0xfc009d58>
 800a3ec:	003e5706 	br	8009d4c <__alt_data_end+0xfc009d4c>
 800a3f0:	d8c00317 	ldw	r3,12(sp)
 800a3f4:	00800084 	movi	r2,2
 800a3f8:	10c00a16 	blt	r2,r3,800a424 <_dtoa_r+0x16a4>
 800a3fc:	d9000d17 	ldw	r4,52(sp)
 800a400:	003e8306 	br	8009e10 <__alt_data_end+0xfc009e10>
 800a404:	04400084 	movi	r17,2
 800a408:	003b7306 	br	80091d8 <__alt_data_end+0xfc0091d8>
 800a40c:	d9801217 	ldw	r6,72(sp)
 800a410:	d9800515 	stw	r6,20(sp)
 800a414:	003cb606 	br	80096f0 <__alt_data_end+0xfc0096f0>
 800a418:	d9001217 	ldw	r4,72(sp)
 800a41c:	d9000515 	stw	r4,20(sp)
 800a420:	003c0506 	br	8009438 <__alt_data_end+0xfc009438>
 800a424:	d9800d17 	ldw	r6,52(sp)
 800a428:	d9800615 	stw	r6,24(sp)
 800a42c:	003e8306 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a430:	d9800317 	ldw	r6,12(sp)
 800a434:	00800084 	movi	r2,2
 800a438:	11800216 	blt	r2,r6,800a444 <_dtoa_r+0x16c4>
 800a43c:	d8800d17 	ldw	r2,52(sp)
 800a440:	003da606 	br	8009adc <__alt_data_end+0xfc009adc>
 800a444:	d8800d17 	ldw	r2,52(sp)
 800a448:	d8800615 	stw	r2,24(sp)
 800a44c:	003e7b06 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a450:	05000044 	movi	r20,1
 800a454:	003b0506 	br	800906c <__alt_data_end+0xfc00906c>
 800a458:	8009883a 	mov	r4,r16
 800a45c:	80001115 	stw	zero,68(r16)
 800a460:	000b883a 	mov	r5,zero
 800a464:	800bc000 	call	800bc00 <_Balloc>
 800a468:	d8800715 	stw	r2,28(sp)
 800a46c:	d8c00717 	ldw	r3,28(sp)
 800a470:	00bfffc4 	movi	r2,-1
 800a474:	01000044 	movi	r4,1
 800a478:	d8800615 	stw	r2,24(sp)
 800a47c:	80c01015 	stw	r3,64(r16)
 800a480:	d9000b15 	stw	r4,44(sp)
 800a484:	d8002215 	stw	zero,136(sp)
 800a488:	d8800d15 	stw	r2,52(sp)
 800a48c:	003c1906 	br	80094f4 <__alt_data_end+0xfc0094f4>
 800a490:	193d2926 	beq	r3,r4,8009938 <__alt_data_end+0xfc009938>
 800a494:	00c00f04 	movi	r3,60
 800a498:	1885c83a 	sub	r2,r3,r2
 800a49c:	003d7b06 	br	8009a8c <__alt_data_end+0xfc009a8c>
 800a4a0:	000b883a 	mov	r5,zero
 800a4a4:	003b1006 	br	80090e8 <__alt_data_end+0xfc0090e8>

0800a4a8 <_fflush_r>:
 800a4a8:	defffb04 	addi	sp,sp,-20
 800a4ac:	dcc00315 	stw	r19,12(sp)
 800a4b0:	dc000015 	stw	r16,0(sp)
 800a4b4:	dfc00415 	stw	ra,16(sp)
 800a4b8:	dc800215 	stw	r18,8(sp)
 800a4bc:	dc400115 	stw	r17,4(sp)
 800a4c0:	2027883a 	mov	r19,r4
 800a4c4:	2821883a 	mov	r16,r5
 800a4c8:	20000226 	beq	r4,zero,800a4d4 <_fflush_r+0x2c>
 800a4cc:	20800e17 	ldw	r2,56(r4)
 800a4d0:	10005326 	beq	r2,zero,800a620 <_fflush_r+0x178>
 800a4d4:	8080030b 	ldhu	r2,12(r16)
 800a4d8:	10ffffcc 	andi	r3,r2,65535
 800a4dc:	18e0001c 	xori	r3,r3,32768
 800a4e0:	18e00004 	addi	r3,r3,-32768
 800a4e4:	18002c26 	beq	r3,zero,800a598 <_fflush_r+0xf0>
 800a4e8:	10c0020c 	andi	r3,r2,8
 800a4ec:	1800321e 	bne	r3,zero,800a5b8 <_fflush_r+0x110>
 800a4f0:	80c00117 	ldw	r3,4(r16)
 800a4f4:	10820014 	ori	r2,r2,2048
 800a4f8:	8080030d 	sth	r2,12(r16)
 800a4fc:	00c0570e 	bge	zero,r3,800a65c <_fflush_r+0x1b4>
 800a500:	82000a17 	ldw	r8,40(r16)
 800a504:	40002426 	beq	r8,zero,800a598 <_fflush_r+0xf0>
 800a508:	9c400017 	ldw	r17,0(r19)
 800a50c:	10c4000c 	andi	r3,r2,4096
 800a510:	98000015 	stw	zero,0(r19)
 800a514:	18004626 	beq	r3,zero,800a630 <_fflush_r+0x188>
 800a518:	81801417 	ldw	r6,80(r16)
 800a51c:	10c0010c 	andi	r3,r2,4
 800a520:	18000626 	beq	r3,zero,800a53c <_fflush_r+0x94>
 800a524:	80c00117 	ldw	r3,4(r16)
 800a528:	80800c17 	ldw	r2,48(r16)
 800a52c:	30cdc83a 	sub	r6,r6,r3
 800a530:	10000226 	beq	r2,zero,800a53c <_fflush_r+0x94>
 800a534:	80800f17 	ldw	r2,60(r16)
 800a538:	308dc83a 	sub	r6,r6,r2
 800a53c:	81400717 	ldw	r5,28(r16)
 800a540:	9809883a 	mov	r4,r19
 800a544:	000f883a 	mov	r7,zero
 800a548:	403ee83a 	callr	r8
 800a54c:	00ffffc4 	movi	r3,-1
 800a550:	10c04526 	beq	r2,r3,800a668 <_fflush_r+0x1c0>
 800a554:	80c0030b 	ldhu	r3,12(r16)
 800a558:	81000417 	ldw	r4,16(r16)
 800a55c:	80000115 	stw	zero,4(r16)
 800a560:	197dffcc 	andi	r5,r3,63487
 800a564:	8140030d 	sth	r5,12(r16)
 800a568:	81000015 	stw	r4,0(r16)
 800a56c:	18c4000c 	andi	r3,r3,4096
 800a570:	18000126 	beq	r3,zero,800a578 <_fflush_r+0xd0>
 800a574:	80801415 	stw	r2,80(r16)
 800a578:	81400c17 	ldw	r5,48(r16)
 800a57c:	9c400015 	stw	r17,0(r19)
 800a580:	28000526 	beq	r5,zero,800a598 <_fflush_r+0xf0>
 800a584:	80801004 	addi	r2,r16,64
 800a588:	28800226 	beq	r5,r2,800a594 <_fflush_r+0xec>
 800a58c:	9809883a 	mov	r4,r19
 800a590:	800abc40 	call	800abc4 <_free_r>
 800a594:	80000c15 	stw	zero,48(r16)
 800a598:	0005883a 	mov	r2,zero
 800a59c:	dfc00417 	ldw	ra,16(sp)
 800a5a0:	dcc00317 	ldw	r19,12(sp)
 800a5a4:	dc800217 	ldw	r18,8(sp)
 800a5a8:	dc400117 	ldw	r17,4(sp)
 800a5ac:	dc000017 	ldw	r16,0(sp)
 800a5b0:	dec00504 	addi	sp,sp,20
 800a5b4:	f800283a 	ret
 800a5b8:	84800417 	ldw	r18,16(r16)
 800a5bc:	903ff626 	beq	r18,zero,800a598 <__alt_data_end+0xfc00a598>
 800a5c0:	84400017 	ldw	r17,0(r16)
 800a5c4:	108000cc 	andi	r2,r2,3
 800a5c8:	84800015 	stw	r18,0(r16)
 800a5cc:	8ca3c83a 	sub	r17,r17,r18
 800a5d0:	10001526 	beq	r2,zero,800a628 <_fflush_r+0x180>
 800a5d4:	0005883a 	mov	r2,zero
 800a5d8:	80800215 	stw	r2,8(r16)
 800a5dc:	04400316 	blt	zero,r17,800a5ec <_fflush_r+0x144>
 800a5e0:	003fed06 	br	800a598 <__alt_data_end+0xfc00a598>
 800a5e4:	90a5883a 	add	r18,r18,r2
 800a5e8:	047feb0e 	bge	zero,r17,800a598 <__alt_data_end+0xfc00a598>
 800a5ec:	80800917 	ldw	r2,36(r16)
 800a5f0:	81400717 	ldw	r5,28(r16)
 800a5f4:	880f883a 	mov	r7,r17
 800a5f8:	900d883a 	mov	r6,r18
 800a5fc:	9809883a 	mov	r4,r19
 800a600:	103ee83a 	callr	r2
 800a604:	88a3c83a 	sub	r17,r17,r2
 800a608:	00bff616 	blt	zero,r2,800a5e4 <__alt_data_end+0xfc00a5e4>
 800a60c:	80c0030b 	ldhu	r3,12(r16)
 800a610:	00bfffc4 	movi	r2,-1
 800a614:	18c01014 	ori	r3,r3,64
 800a618:	80c0030d 	sth	r3,12(r16)
 800a61c:	003fdf06 	br	800a59c <__alt_data_end+0xfc00a59c>
 800a620:	800aa500 	call	800aa50 <__sinit>
 800a624:	003fab06 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800a628:	80800517 	ldw	r2,20(r16)
 800a62c:	003fea06 	br	800a5d8 <__alt_data_end+0xfc00a5d8>
 800a630:	81400717 	ldw	r5,28(r16)
 800a634:	000d883a 	mov	r6,zero
 800a638:	9809883a 	mov	r4,r19
 800a63c:	01c00044 	movi	r7,1
 800a640:	403ee83a 	callr	r8
 800a644:	100d883a 	mov	r6,r2
 800a648:	00bfffc4 	movi	r2,-1
 800a64c:	30801326 	beq	r6,r2,800a69c <_fflush_r+0x1f4>
 800a650:	8080030b 	ldhu	r2,12(r16)
 800a654:	82000a17 	ldw	r8,40(r16)
 800a658:	003fb006 	br	800a51c <__alt_data_end+0xfc00a51c>
 800a65c:	80c00f17 	ldw	r3,60(r16)
 800a660:	00ffa716 	blt	zero,r3,800a500 <__alt_data_end+0xfc00a500>
 800a664:	003fcc06 	br	800a598 <__alt_data_end+0xfc00a598>
 800a668:	98c00017 	ldw	r3,0(r19)
 800a66c:	183fb926 	beq	r3,zero,800a554 <__alt_data_end+0xfc00a554>
 800a670:	01000744 	movi	r4,29
 800a674:	19000226 	beq	r3,r4,800a680 <_fflush_r+0x1d8>
 800a678:	01000584 	movi	r4,22
 800a67c:	1900101e 	bne	r3,r4,800a6c0 <_fflush_r+0x218>
 800a680:	8080030b 	ldhu	r2,12(r16)
 800a684:	80c00417 	ldw	r3,16(r16)
 800a688:	80000115 	stw	zero,4(r16)
 800a68c:	10bdffcc 	andi	r2,r2,63487
 800a690:	8080030d 	sth	r2,12(r16)
 800a694:	80c00015 	stw	r3,0(r16)
 800a698:	003fb706 	br	800a578 <__alt_data_end+0xfc00a578>
 800a69c:	98800017 	ldw	r2,0(r19)
 800a6a0:	103feb26 	beq	r2,zero,800a650 <__alt_data_end+0xfc00a650>
 800a6a4:	00c00744 	movi	r3,29
 800a6a8:	10c00226 	beq	r2,r3,800a6b4 <_fflush_r+0x20c>
 800a6ac:	00c00584 	movi	r3,22
 800a6b0:	10ffd61e 	bne	r2,r3,800a60c <__alt_data_end+0xfc00a60c>
 800a6b4:	9c400015 	stw	r17,0(r19)
 800a6b8:	0005883a 	mov	r2,zero
 800a6bc:	003fb706 	br	800a59c <__alt_data_end+0xfc00a59c>
 800a6c0:	80c0030b 	ldhu	r3,12(r16)
 800a6c4:	18c01014 	ori	r3,r3,64
 800a6c8:	80c0030d 	sth	r3,12(r16)
 800a6cc:	003fb306 	br	800a59c <__alt_data_end+0xfc00a59c>

0800a6d0 <fflush>:
 800a6d0:	20000526 	beq	r4,zero,800a6e8 <fflush+0x18>
 800a6d4:	008200b4 	movhi	r2,2050
 800a6d8:	1087e604 	addi	r2,r2,8088
 800a6dc:	200b883a 	mov	r5,r4
 800a6e0:	11000017 	ldw	r4,0(r2)
 800a6e4:	800a4a81 	jmpi	800a4a8 <_fflush_r>
 800a6e8:	008200b4 	movhi	r2,2050
 800a6ec:	1087e504 	addi	r2,r2,8084
 800a6f0:	11000017 	ldw	r4,0(r2)
 800a6f4:	01420074 	movhi	r5,2049
 800a6f8:	29692a04 	addi	r5,r5,-23384
 800a6fc:	800b4101 	jmpi	800b410 <_fwalk_reent>

0800a700 <__fp_lock>:
 800a700:	0005883a 	mov	r2,zero
 800a704:	f800283a 	ret

0800a708 <__fp_unlock>:
 800a708:	0005883a 	mov	r2,zero
 800a70c:	f800283a 	ret

0800a710 <_cleanup_r>:
 800a710:	01420074 	movhi	r5,2049
 800a714:	297fe404 	addi	r5,r5,-112
 800a718:	800b3581 	jmpi	800b358 <_fwalk>

0800a71c <__sinit.part.1>:
 800a71c:	defff604 	addi	sp,sp,-40
 800a720:	00c20074 	movhi	r3,2049
 800a724:	dfc00915 	stw	ra,36(sp)
 800a728:	df000815 	stw	fp,32(sp)
 800a72c:	ddc00715 	stw	r23,28(sp)
 800a730:	dd800615 	stw	r22,24(sp)
 800a734:	dd400515 	stw	r21,20(sp)
 800a738:	dd000415 	stw	r20,16(sp)
 800a73c:	dcc00315 	stw	r19,12(sp)
 800a740:	dc800215 	stw	r18,8(sp)
 800a744:	dc400115 	stw	r17,4(sp)
 800a748:	dc000015 	stw	r16,0(sp)
 800a74c:	18e9c404 	addi	r3,r3,-22768
 800a750:	24000117 	ldw	r16,4(r4)
 800a754:	20c00f15 	stw	r3,60(r4)
 800a758:	07000044 	movi	fp,1
 800a75c:	00c000c4 	movi	r3,3
 800a760:	2080bb04 	addi	r2,r4,748
 800a764:	20c0b915 	stw	r3,740(r4)
 800a768:	27000e15 	stw	fp,56(r4)
 800a76c:	2080ba15 	stw	r2,744(r4)
 800a770:	2000b815 	stw	zero,736(r4)
 800a774:	05c00204 	movi	r23,8
 800a778:	00800104 	movi	r2,4
 800a77c:	2025883a 	mov	r18,r4
 800a780:	b80d883a 	mov	r6,r23
 800a784:	81001704 	addi	r4,r16,92
 800a788:	000b883a 	mov	r5,zero
 800a78c:	80000015 	stw	zero,0(r16)
 800a790:	80000115 	stw	zero,4(r16)
 800a794:	80000215 	stw	zero,8(r16)
 800a798:	8080030d 	sth	r2,12(r16)
 800a79c:	80001915 	stw	zero,100(r16)
 800a7a0:	8000038d 	sth	zero,14(r16)
 800a7a4:	80000415 	stw	zero,16(r16)
 800a7a8:	80000515 	stw	zero,20(r16)
 800a7ac:	80000615 	stw	zero,24(r16)
 800a7b0:	800badc0 	call	800badc <memset>
 800a7b4:	05820074 	movhi	r22,2049
 800a7b8:	94400217 	ldw	r17,8(r18)
 800a7bc:	05420074 	movhi	r21,2049
 800a7c0:	05020074 	movhi	r20,2049
 800a7c4:	04c20074 	movhi	r19,2049
 800a7c8:	b5b4c204 	addi	r22,r22,-11512
 800a7cc:	ad74d904 	addi	r21,r21,-11420
 800a7d0:	a534f804 	addi	r20,r20,-11296
 800a7d4:	9cf50f04 	addi	r19,r19,-11204
 800a7d8:	85800815 	stw	r22,32(r16)
 800a7dc:	85400915 	stw	r21,36(r16)
 800a7e0:	85000a15 	stw	r20,40(r16)
 800a7e4:	84c00b15 	stw	r19,44(r16)
 800a7e8:	84000715 	stw	r16,28(r16)
 800a7ec:	00800284 	movi	r2,10
 800a7f0:	89001704 	addi	r4,r17,92
 800a7f4:	b80d883a 	mov	r6,r23
 800a7f8:	000b883a 	mov	r5,zero
 800a7fc:	88000015 	stw	zero,0(r17)
 800a800:	88000115 	stw	zero,4(r17)
 800a804:	88000215 	stw	zero,8(r17)
 800a808:	8880030d 	sth	r2,12(r17)
 800a80c:	88001915 	stw	zero,100(r17)
 800a810:	8f00038d 	sth	fp,14(r17)
 800a814:	88000415 	stw	zero,16(r17)
 800a818:	88000515 	stw	zero,20(r17)
 800a81c:	88000615 	stw	zero,24(r17)
 800a820:	800badc0 	call	800badc <memset>
 800a824:	94000317 	ldw	r16,12(r18)
 800a828:	00800484 	movi	r2,18
 800a82c:	8c400715 	stw	r17,28(r17)
 800a830:	8d800815 	stw	r22,32(r17)
 800a834:	8d400915 	stw	r21,36(r17)
 800a838:	8d000a15 	stw	r20,40(r17)
 800a83c:	8cc00b15 	stw	r19,44(r17)
 800a840:	8080030d 	sth	r2,12(r16)
 800a844:	00800084 	movi	r2,2
 800a848:	80000015 	stw	zero,0(r16)
 800a84c:	80000115 	stw	zero,4(r16)
 800a850:	80000215 	stw	zero,8(r16)
 800a854:	80001915 	stw	zero,100(r16)
 800a858:	8080038d 	sth	r2,14(r16)
 800a85c:	80000415 	stw	zero,16(r16)
 800a860:	80000515 	stw	zero,20(r16)
 800a864:	80000615 	stw	zero,24(r16)
 800a868:	81001704 	addi	r4,r16,92
 800a86c:	000b883a 	mov	r5,zero
 800a870:	b80d883a 	mov	r6,r23
 800a874:	800badc0 	call	800badc <memset>
 800a878:	84000715 	stw	r16,28(r16)
 800a87c:	85800815 	stw	r22,32(r16)
 800a880:	85400915 	stw	r21,36(r16)
 800a884:	85000a15 	stw	r20,40(r16)
 800a888:	84c00b15 	stw	r19,44(r16)
 800a88c:	dfc00917 	ldw	ra,36(sp)
 800a890:	df000817 	ldw	fp,32(sp)
 800a894:	ddc00717 	ldw	r23,28(sp)
 800a898:	dd800617 	ldw	r22,24(sp)
 800a89c:	dd400517 	ldw	r21,20(sp)
 800a8a0:	dd000417 	ldw	r20,16(sp)
 800a8a4:	dcc00317 	ldw	r19,12(sp)
 800a8a8:	dc800217 	ldw	r18,8(sp)
 800a8ac:	dc400117 	ldw	r17,4(sp)
 800a8b0:	dc000017 	ldw	r16,0(sp)
 800a8b4:	dec00a04 	addi	sp,sp,40
 800a8b8:	f800283a 	ret

0800a8bc <__sfmoreglue>:
 800a8bc:	defffc04 	addi	sp,sp,-16
 800a8c0:	dc400115 	stw	r17,4(sp)
 800a8c4:	2c401a24 	muli	r17,r5,104
 800a8c8:	dc800215 	stw	r18,8(sp)
 800a8cc:	2825883a 	mov	r18,r5
 800a8d0:	89400304 	addi	r5,r17,12
 800a8d4:	dc000015 	stw	r16,0(sp)
 800a8d8:	dfc00315 	stw	ra,12(sp)
 800a8dc:	8003ff40 	call	8003ff4 <_malloc_r>
 800a8e0:	1021883a 	mov	r16,r2
 800a8e4:	10000726 	beq	r2,zero,800a904 <__sfmoreglue+0x48>
 800a8e8:	11000304 	addi	r4,r2,12
 800a8ec:	10000015 	stw	zero,0(r2)
 800a8f0:	14800115 	stw	r18,4(r2)
 800a8f4:	11000215 	stw	r4,8(r2)
 800a8f8:	000b883a 	mov	r5,zero
 800a8fc:	880d883a 	mov	r6,r17
 800a900:	800badc0 	call	800badc <memset>
 800a904:	8005883a 	mov	r2,r16
 800a908:	dfc00317 	ldw	ra,12(sp)
 800a90c:	dc800217 	ldw	r18,8(sp)
 800a910:	dc400117 	ldw	r17,4(sp)
 800a914:	dc000017 	ldw	r16,0(sp)
 800a918:	dec00404 	addi	sp,sp,16
 800a91c:	f800283a 	ret

0800a920 <__sfp>:
 800a920:	008200b4 	movhi	r2,2050
 800a924:	defffb04 	addi	sp,sp,-20
 800a928:	1087e504 	addi	r2,r2,8084
 800a92c:	dc800215 	stw	r18,8(sp)
 800a930:	14800017 	ldw	r18,0(r2)
 800a934:	dcc00315 	stw	r19,12(sp)
 800a938:	dfc00415 	stw	ra,16(sp)
 800a93c:	90800e17 	ldw	r2,56(r18)
 800a940:	dc400115 	stw	r17,4(sp)
 800a944:	dc000015 	stw	r16,0(sp)
 800a948:	2027883a 	mov	r19,r4
 800a94c:	1000021e 	bne	r2,zero,800a958 <__sfp+0x38>
 800a950:	9009883a 	mov	r4,r18
 800a954:	800a71c0 	call	800a71c <__sinit.part.1>
 800a958:	9480b804 	addi	r18,r18,736
 800a95c:	047fffc4 	movi	r17,-1
 800a960:	91400117 	ldw	r5,4(r18)
 800a964:	94000217 	ldw	r16,8(r18)
 800a968:	297fffc4 	addi	r5,r5,-1
 800a96c:	28000a16 	blt	r5,zero,800a998 <__sfp+0x78>
 800a970:	8080030f 	ldh	r2,12(r16)
 800a974:	10000c26 	beq	r2,zero,800a9a8 <__sfp+0x88>
 800a978:	80c01d04 	addi	r3,r16,116
 800a97c:	00000206 	br	800a988 <__sfp+0x68>
 800a980:	18bfe60f 	ldh	r2,-104(r3)
 800a984:	10000826 	beq	r2,zero,800a9a8 <__sfp+0x88>
 800a988:	297fffc4 	addi	r5,r5,-1
 800a98c:	1c3ffd04 	addi	r16,r3,-12
 800a990:	18c01a04 	addi	r3,r3,104
 800a994:	2c7ffa1e 	bne	r5,r17,800a980 <__alt_data_end+0xfc00a980>
 800a998:	90800017 	ldw	r2,0(r18)
 800a99c:	10001d26 	beq	r2,zero,800aa14 <__sfp+0xf4>
 800a9a0:	1025883a 	mov	r18,r2
 800a9a4:	003fee06 	br	800a960 <__alt_data_end+0xfc00a960>
 800a9a8:	00bfffc4 	movi	r2,-1
 800a9ac:	8080038d 	sth	r2,14(r16)
 800a9b0:	00800044 	movi	r2,1
 800a9b4:	8080030d 	sth	r2,12(r16)
 800a9b8:	80001915 	stw	zero,100(r16)
 800a9bc:	80000015 	stw	zero,0(r16)
 800a9c0:	80000215 	stw	zero,8(r16)
 800a9c4:	80000115 	stw	zero,4(r16)
 800a9c8:	80000415 	stw	zero,16(r16)
 800a9cc:	80000515 	stw	zero,20(r16)
 800a9d0:	80000615 	stw	zero,24(r16)
 800a9d4:	81001704 	addi	r4,r16,92
 800a9d8:	000b883a 	mov	r5,zero
 800a9dc:	01800204 	movi	r6,8
 800a9e0:	800badc0 	call	800badc <memset>
 800a9e4:	8005883a 	mov	r2,r16
 800a9e8:	80000c15 	stw	zero,48(r16)
 800a9ec:	80000d15 	stw	zero,52(r16)
 800a9f0:	80001115 	stw	zero,68(r16)
 800a9f4:	80001215 	stw	zero,72(r16)
 800a9f8:	dfc00417 	ldw	ra,16(sp)
 800a9fc:	dcc00317 	ldw	r19,12(sp)
 800aa00:	dc800217 	ldw	r18,8(sp)
 800aa04:	dc400117 	ldw	r17,4(sp)
 800aa08:	dc000017 	ldw	r16,0(sp)
 800aa0c:	dec00504 	addi	sp,sp,20
 800aa10:	f800283a 	ret
 800aa14:	9809883a 	mov	r4,r19
 800aa18:	01400104 	movi	r5,4
 800aa1c:	800a8bc0 	call	800a8bc <__sfmoreglue>
 800aa20:	90800015 	stw	r2,0(r18)
 800aa24:	103fde1e 	bne	r2,zero,800a9a0 <__alt_data_end+0xfc00a9a0>
 800aa28:	00800304 	movi	r2,12
 800aa2c:	98800015 	stw	r2,0(r19)
 800aa30:	0005883a 	mov	r2,zero
 800aa34:	003ff006 	br	800a9f8 <__alt_data_end+0xfc00a9f8>

0800aa38 <_cleanup>:
 800aa38:	008200b4 	movhi	r2,2050
 800aa3c:	1087e504 	addi	r2,r2,8084
 800aa40:	11000017 	ldw	r4,0(r2)
 800aa44:	01420074 	movhi	r5,2049
 800aa48:	297fe404 	addi	r5,r5,-112
 800aa4c:	800b3581 	jmpi	800b358 <_fwalk>

0800aa50 <__sinit>:
 800aa50:	20800e17 	ldw	r2,56(r4)
 800aa54:	10000126 	beq	r2,zero,800aa5c <__sinit+0xc>
 800aa58:	f800283a 	ret
 800aa5c:	800a71c1 	jmpi	800a71c <__sinit.part.1>

0800aa60 <__sfp_lock_acquire>:
 800aa60:	f800283a 	ret

0800aa64 <__sfp_lock_release>:
 800aa64:	f800283a 	ret

0800aa68 <__sinit_lock_acquire>:
 800aa68:	f800283a 	ret

0800aa6c <__sinit_lock_release>:
 800aa6c:	f800283a 	ret

0800aa70 <__fp_lock_all>:
 800aa70:	008200b4 	movhi	r2,2050
 800aa74:	1087e604 	addi	r2,r2,8088
 800aa78:	11000017 	ldw	r4,0(r2)
 800aa7c:	01420074 	movhi	r5,2049
 800aa80:	2969c004 	addi	r5,r5,-22784
 800aa84:	800b3581 	jmpi	800b358 <_fwalk>

0800aa88 <__fp_unlock_all>:
 800aa88:	008200b4 	movhi	r2,2050
 800aa8c:	1087e604 	addi	r2,r2,8088
 800aa90:	11000017 	ldw	r4,0(r2)
 800aa94:	01420074 	movhi	r5,2049
 800aa98:	2969c204 	addi	r5,r5,-22776
 800aa9c:	800b3581 	jmpi	800b358 <_fwalk>

0800aaa0 <_malloc_trim_r>:
 800aaa0:	defffb04 	addi	sp,sp,-20
 800aaa4:	dcc00315 	stw	r19,12(sp)
 800aaa8:	04c200b4 	movhi	r19,2050
 800aaac:	dc800215 	stw	r18,8(sp)
 800aab0:	dc400115 	stw	r17,4(sp)
 800aab4:	dc000015 	stw	r16,0(sp)
 800aab8:	dfc00415 	stw	ra,16(sp)
 800aabc:	2821883a 	mov	r16,r5
 800aac0:	9cc12d04 	addi	r19,r19,1204
 800aac4:	2025883a 	mov	r18,r4
 800aac8:	80133d80 	call	80133d8 <__malloc_lock>
 800aacc:	98800217 	ldw	r2,8(r19)
 800aad0:	14400117 	ldw	r17,4(r2)
 800aad4:	00bfff04 	movi	r2,-4
 800aad8:	88a2703a 	and	r17,r17,r2
 800aadc:	8c21c83a 	sub	r16,r17,r16
 800aae0:	8403fbc4 	addi	r16,r16,4079
 800aae4:	8020d33a 	srli	r16,r16,12
 800aae8:	0083ffc4 	movi	r2,4095
 800aaec:	843fffc4 	addi	r16,r16,-1
 800aaf0:	8020933a 	slli	r16,r16,12
 800aaf4:	1400060e 	bge	r2,r16,800ab10 <_malloc_trim_r+0x70>
 800aaf8:	9009883a 	mov	r4,r18
 800aafc:	000b883a 	mov	r5,zero
 800ab00:	80048f00 	call	80048f0 <_sbrk_r>
 800ab04:	98c00217 	ldw	r3,8(r19)
 800ab08:	1c47883a 	add	r3,r3,r17
 800ab0c:	10c00a26 	beq	r2,r3,800ab38 <_malloc_trim_r+0x98>
 800ab10:	9009883a 	mov	r4,r18
 800ab14:	80133f80 	call	80133f8 <__malloc_unlock>
 800ab18:	0005883a 	mov	r2,zero
 800ab1c:	dfc00417 	ldw	ra,16(sp)
 800ab20:	dcc00317 	ldw	r19,12(sp)
 800ab24:	dc800217 	ldw	r18,8(sp)
 800ab28:	dc400117 	ldw	r17,4(sp)
 800ab2c:	dc000017 	ldw	r16,0(sp)
 800ab30:	dec00504 	addi	sp,sp,20
 800ab34:	f800283a 	ret
 800ab38:	9009883a 	mov	r4,r18
 800ab3c:	040bc83a 	sub	r5,zero,r16
 800ab40:	80048f00 	call	80048f0 <_sbrk_r>
 800ab44:	00ffffc4 	movi	r3,-1
 800ab48:	10c00d26 	beq	r2,r3,800ab80 <_malloc_trim_r+0xe0>
 800ab4c:	00c200b4 	movhi	r3,2050
 800ab50:	18ceca04 	addi	r3,r3,15144
 800ab54:	18800017 	ldw	r2,0(r3)
 800ab58:	99000217 	ldw	r4,8(r19)
 800ab5c:	8c23c83a 	sub	r17,r17,r16
 800ab60:	8c400054 	ori	r17,r17,1
 800ab64:	1421c83a 	sub	r16,r2,r16
 800ab68:	24400115 	stw	r17,4(r4)
 800ab6c:	9009883a 	mov	r4,r18
 800ab70:	1c000015 	stw	r16,0(r3)
 800ab74:	80133f80 	call	80133f8 <__malloc_unlock>
 800ab78:	00800044 	movi	r2,1
 800ab7c:	003fe706 	br	800ab1c <__alt_data_end+0xfc00ab1c>
 800ab80:	9009883a 	mov	r4,r18
 800ab84:	000b883a 	mov	r5,zero
 800ab88:	80048f00 	call	80048f0 <_sbrk_r>
 800ab8c:	99000217 	ldw	r4,8(r19)
 800ab90:	014003c4 	movi	r5,15
 800ab94:	1107c83a 	sub	r3,r2,r4
 800ab98:	28ffdd0e 	bge	r5,r3,800ab10 <__alt_data_end+0xfc00ab10>
 800ab9c:	014200b4 	movhi	r5,2050
 800aba0:	2947e304 	addi	r5,r5,8076
 800aba4:	29400017 	ldw	r5,0(r5)
 800aba8:	18c00054 	ori	r3,r3,1
 800abac:	20c00115 	stw	r3,4(r4)
 800abb0:	00c200b4 	movhi	r3,2050
 800abb4:	1145c83a 	sub	r2,r2,r5
 800abb8:	18ceca04 	addi	r3,r3,15144
 800abbc:	18800015 	stw	r2,0(r3)
 800abc0:	003fd306 	br	800ab10 <__alt_data_end+0xfc00ab10>

0800abc4 <_free_r>:
 800abc4:	28004c26 	beq	r5,zero,800acf8 <_free_r+0x134>
 800abc8:	defffd04 	addi	sp,sp,-12
 800abcc:	dc400115 	stw	r17,4(sp)
 800abd0:	dc000015 	stw	r16,0(sp)
 800abd4:	2023883a 	mov	r17,r4
 800abd8:	2821883a 	mov	r16,r5
 800abdc:	dfc00215 	stw	ra,8(sp)
 800abe0:	80133d80 	call	80133d8 <__malloc_lock>
 800abe4:	813fff17 	ldw	r4,-4(r16)
 800abe8:	00bfff84 	movi	r2,-2
 800abec:	024200b4 	movhi	r9,2050
 800abf0:	81bffe04 	addi	r6,r16,-8
 800abf4:	2084703a 	and	r2,r4,r2
 800abf8:	4a412d04 	addi	r9,r9,1204
 800abfc:	308b883a 	add	r5,r6,r2
 800ac00:	2a000117 	ldw	r8,4(r5)
 800ac04:	49c00217 	ldw	r7,8(r9)
 800ac08:	00ffff04 	movi	r3,-4
 800ac0c:	40c6703a 	and	r3,r8,r3
 800ac10:	39405326 	beq	r7,r5,800ad60 <_free_r+0x19c>
 800ac14:	28c00115 	stw	r3,4(r5)
 800ac18:	2100004c 	andi	r4,r4,1
 800ac1c:	2000091e 	bne	r4,zero,800ac44 <_free_r+0x80>
 800ac20:	81fffe17 	ldw	r7,-8(r16)
 800ac24:	4a000204 	addi	r8,r9,8
 800ac28:	31cdc83a 	sub	r6,r6,r7
 800ac2c:	31000217 	ldw	r4,8(r6)
 800ac30:	11c5883a 	add	r2,r2,r7
 800ac34:	22006126 	beq	r4,r8,800adbc <_free_r+0x1f8>
 800ac38:	31c00317 	ldw	r7,12(r6)
 800ac3c:	21c00315 	stw	r7,12(r4)
 800ac40:	39000215 	stw	r4,8(r7)
 800ac44:	28c9883a 	add	r4,r5,r3
 800ac48:	21c00117 	ldw	r7,4(r4)
 800ac4c:	39c0004c 	andi	r7,r7,1
 800ac50:	38000d1e 	bne	r7,zero,800ac88 <_free_r+0xc4>
 800ac54:	29000217 	ldw	r4,8(r5)
 800ac58:	10c5883a 	add	r2,r2,r3
 800ac5c:	00c200b4 	movhi	r3,2050
 800ac60:	18c12f04 	addi	r3,r3,1212
 800ac64:	20c07526 	beq	r4,r3,800ae3c <_free_r+0x278>
 800ac68:	29c00317 	ldw	r7,12(r5)
 800ac6c:	11400054 	ori	r5,r2,1
 800ac70:	3087883a 	add	r3,r6,r2
 800ac74:	21c00315 	stw	r7,12(r4)
 800ac78:	39000215 	stw	r4,8(r7)
 800ac7c:	31400115 	stw	r5,4(r6)
 800ac80:	18800015 	stw	r2,0(r3)
 800ac84:	00000406 	br	800ac98 <_free_r+0xd4>
 800ac88:	10c00054 	ori	r3,r2,1
 800ac8c:	30c00115 	stw	r3,4(r6)
 800ac90:	3087883a 	add	r3,r6,r2
 800ac94:	18800015 	stw	r2,0(r3)
 800ac98:	00c07fc4 	movi	r3,511
 800ac9c:	18801736 	bltu	r3,r2,800acfc <_free_r+0x138>
 800aca0:	1004d0fa 	srli	r2,r2,3
 800aca4:	01400044 	movi	r5,1
 800aca8:	49000117 	ldw	r4,4(r9)
 800acac:	1087883a 	add	r3,r2,r2
 800acb0:	18c7883a 	add	r3,r3,r3
 800acb4:	1005d0ba 	srai	r2,r2,2
 800acb8:	18c7883a 	add	r3,r3,r3
 800acbc:	1a47883a 	add	r3,r3,r9
 800acc0:	19c00217 	ldw	r7,8(r3)
 800acc4:	2884983a 	sll	r2,r5,r2
 800acc8:	30c00315 	stw	r3,12(r6)
 800accc:	31c00215 	stw	r7,8(r6)
 800acd0:	1104b03a 	or	r2,r2,r4
 800acd4:	19800215 	stw	r6,8(r3)
 800acd8:	48800115 	stw	r2,4(r9)
 800acdc:	39800315 	stw	r6,12(r7)
 800ace0:	8809883a 	mov	r4,r17
 800ace4:	dfc00217 	ldw	ra,8(sp)
 800ace8:	dc400117 	ldw	r17,4(sp)
 800acec:	dc000017 	ldw	r16,0(sp)
 800acf0:	dec00304 	addi	sp,sp,12
 800acf4:	80133f81 	jmpi	80133f8 <__malloc_unlock>
 800acf8:	f800283a 	ret
 800acfc:	1006d27a 	srli	r3,r2,9
 800ad00:	01000104 	movi	r4,4
 800ad04:	20c04036 	bltu	r4,r3,800ae08 <_free_r+0x244>
 800ad08:	1006d1ba 	srli	r3,r2,6
 800ad0c:	19400e04 	addi	r5,r3,56
 800ad10:	2947883a 	add	r3,r5,r5
 800ad14:	18c7883a 	add	r3,r3,r3
 800ad18:	18c7883a 	add	r3,r3,r3
 800ad1c:	1a49883a 	add	r4,r3,r9
 800ad20:	20c00217 	ldw	r3,8(r4)
 800ad24:	01c200b4 	movhi	r7,2050
 800ad28:	39c12d04 	addi	r7,r7,1204
 800ad2c:	19003b26 	beq	r3,r4,800ae1c <_free_r+0x258>
 800ad30:	01ffff04 	movi	r7,-4
 800ad34:	19400117 	ldw	r5,4(r3)
 800ad38:	29ca703a 	and	r5,r5,r7
 800ad3c:	1140022e 	bgeu	r2,r5,800ad48 <_free_r+0x184>
 800ad40:	18c00217 	ldw	r3,8(r3)
 800ad44:	20fffb1e 	bne	r4,r3,800ad34 <__alt_data_end+0xfc00ad34>
 800ad48:	18800317 	ldw	r2,12(r3)
 800ad4c:	30800315 	stw	r2,12(r6)
 800ad50:	30c00215 	stw	r3,8(r6)
 800ad54:	11800215 	stw	r6,8(r2)
 800ad58:	19800315 	stw	r6,12(r3)
 800ad5c:	003fe006 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ad60:	2100004c 	andi	r4,r4,1
 800ad64:	1885883a 	add	r2,r3,r2
 800ad68:	2000071e 	bne	r4,zero,800ad88 <_free_r+0x1c4>
 800ad6c:	817ffe17 	ldw	r5,-8(r16)
 800ad70:	314dc83a 	sub	r6,r6,r5
 800ad74:	30c00317 	ldw	r3,12(r6)
 800ad78:	31000217 	ldw	r4,8(r6)
 800ad7c:	1145883a 	add	r2,r2,r5
 800ad80:	20c00315 	stw	r3,12(r4)
 800ad84:	19000215 	stw	r4,8(r3)
 800ad88:	10c00054 	ori	r3,r2,1
 800ad8c:	30c00115 	stw	r3,4(r6)
 800ad90:	00c200b4 	movhi	r3,2050
 800ad94:	18c7e404 	addi	r3,r3,8080
 800ad98:	18c00017 	ldw	r3,0(r3)
 800ad9c:	49800215 	stw	r6,8(r9)
 800ada0:	10ffcf36 	bltu	r2,r3,800ace0 <__alt_data_end+0xfc00ace0>
 800ada4:	008200b4 	movhi	r2,2050
 800ada8:	108ebd04 	addi	r2,r2,15092
 800adac:	11400017 	ldw	r5,0(r2)
 800adb0:	8809883a 	mov	r4,r17
 800adb4:	800aaa00 	call	800aaa0 <_malloc_trim_r>
 800adb8:	003fc906 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800adbc:	28c9883a 	add	r4,r5,r3
 800adc0:	21000117 	ldw	r4,4(r4)
 800adc4:	2100004c 	andi	r4,r4,1
 800adc8:	20000a1e 	bne	r4,zero,800adf4 <_free_r+0x230>
 800adcc:	29000317 	ldw	r4,12(r5)
 800add0:	29400217 	ldw	r5,8(r5)
 800add4:	10c5883a 	add	r2,r2,r3
 800add8:	10c00054 	ori	r3,r2,1
 800addc:	29000315 	stw	r4,12(r5)
 800ade0:	21400215 	stw	r5,8(r4)
 800ade4:	30c00115 	stw	r3,4(r6)
 800ade8:	308d883a 	add	r6,r6,r2
 800adec:	30800015 	stw	r2,0(r6)
 800adf0:	003fbb06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800adf4:	10c00054 	ori	r3,r2,1
 800adf8:	30c00115 	stw	r3,4(r6)
 800adfc:	308d883a 	add	r6,r6,r2
 800ae00:	30800015 	stw	r2,0(r6)
 800ae04:	003fb606 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae08:	01000504 	movi	r4,20
 800ae0c:	20c01436 	bltu	r4,r3,800ae60 <_free_r+0x29c>
 800ae10:	194016c4 	addi	r5,r3,91
 800ae14:	2947883a 	add	r3,r5,r5
 800ae18:	003fbe06 	br	800ad14 <__alt_data_end+0xfc00ad14>
 800ae1c:	280bd0ba 	srai	r5,r5,2
 800ae20:	00800044 	movi	r2,1
 800ae24:	39000117 	ldw	r4,4(r7)
 800ae28:	114a983a 	sll	r5,r2,r5
 800ae2c:	1805883a 	mov	r2,r3
 800ae30:	2908b03a 	or	r4,r5,r4
 800ae34:	39000115 	stw	r4,4(r7)
 800ae38:	003fc406 	br	800ad4c <__alt_data_end+0xfc00ad4c>
 800ae3c:	49800515 	stw	r6,20(r9)
 800ae40:	49800415 	stw	r6,16(r9)
 800ae44:	10c00054 	ori	r3,r2,1
 800ae48:	31000315 	stw	r4,12(r6)
 800ae4c:	31000215 	stw	r4,8(r6)
 800ae50:	30c00115 	stw	r3,4(r6)
 800ae54:	308d883a 	add	r6,r6,r2
 800ae58:	30800015 	stw	r2,0(r6)
 800ae5c:	003fa006 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae60:	01001504 	movi	r4,84
 800ae64:	20c00436 	bltu	r4,r3,800ae78 <_free_r+0x2b4>
 800ae68:	1006d33a 	srli	r3,r2,12
 800ae6c:	19401b84 	addi	r5,r3,110
 800ae70:	2947883a 	add	r3,r5,r5
 800ae74:	003fa706 	br	800ad14 <__alt_data_end+0xfc00ad14>
 800ae78:	01005504 	movi	r4,340
 800ae7c:	20c00436 	bltu	r4,r3,800ae90 <_free_r+0x2cc>
 800ae80:	1006d3fa 	srli	r3,r2,15
 800ae84:	19401dc4 	addi	r5,r3,119
 800ae88:	2947883a 	add	r3,r5,r5
 800ae8c:	003fa106 	br	800ad14 <__alt_data_end+0xfc00ad14>
 800ae90:	01015504 	movi	r4,1364
 800ae94:	20c00436 	bltu	r4,r3,800aea8 <_free_r+0x2e4>
 800ae98:	1006d4ba 	srli	r3,r2,18
 800ae9c:	19401f04 	addi	r5,r3,124
 800aea0:	2947883a 	add	r3,r5,r5
 800aea4:	003f9b06 	br	800ad14 <__alt_data_end+0xfc00ad14>
 800aea8:	00c03f04 	movi	r3,252
 800aeac:	01401f84 	movi	r5,126
 800aeb0:	003f9806 	br	800ad14 <__alt_data_end+0xfc00ad14>

0800aeb4 <__sfvwrite_r>:
 800aeb4:	30800217 	ldw	r2,8(r6)
 800aeb8:	10004526 	beq	r2,zero,800afd0 <__sfvwrite_r+0x11c>
 800aebc:	28c0030b 	ldhu	r3,12(r5)
 800aec0:	defff404 	addi	sp,sp,-48
 800aec4:	dd400715 	stw	r21,28(sp)
 800aec8:	dcc00515 	stw	r19,20(sp)
 800aecc:	dc000215 	stw	r16,8(sp)
 800aed0:	dfc00b15 	stw	ra,44(sp)
 800aed4:	df000a15 	stw	fp,40(sp)
 800aed8:	ddc00915 	stw	r23,36(sp)
 800aedc:	dd800815 	stw	r22,32(sp)
 800aee0:	dd000615 	stw	r20,24(sp)
 800aee4:	dc800415 	stw	r18,16(sp)
 800aee8:	dc400315 	stw	r17,12(sp)
 800aeec:	1880020c 	andi	r2,r3,8
 800aef0:	2821883a 	mov	r16,r5
 800aef4:	202b883a 	mov	r21,r4
 800aef8:	3027883a 	mov	r19,r6
 800aefc:	10002526 	beq	r2,zero,800af94 <__sfvwrite_r+0xe0>
 800af00:	28800417 	ldw	r2,16(r5)
 800af04:	10002326 	beq	r2,zero,800af94 <__sfvwrite_r+0xe0>
 800af08:	1880008c 	andi	r2,r3,2
 800af0c:	9c400017 	ldw	r17,0(r19)
 800af10:	10003126 	beq	r2,zero,800afd8 <__sfvwrite_r+0x124>
 800af14:	0029883a 	mov	r20,zero
 800af18:	0025883a 	mov	r18,zero
 800af1c:	05810004 	movi	r22,1024
 800af20:	a00d883a 	mov	r6,r20
 800af24:	a809883a 	mov	r4,r21
 800af28:	90002526 	beq	r18,zero,800afc0 <__sfvwrite_r+0x10c>
 800af2c:	900f883a 	mov	r7,r18
 800af30:	81400717 	ldw	r5,28(r16)
 800af34:	b480012e 	bgeu	r22,r18,800af3c <__sfvwrite_r+0x88>
 800af38:	01c10004 	movi	r7,1024
 800af3c:	80800917 	ldw	r2,36(r16)
 800af40:	103ee83a 	callr	r2
 800af44:	0080510e 	bge	zero,r2,800b08c <__sfvwrite_r+0x1d8>
 800af48:	98c00217 	ldw	r3,8(r19)
 800af4c:	a0a9883a 	add	r20,r20,r2
 800af50:	90a5c83a 	sub	r18,r18,r2
 800af54:	1885c83a 	sub	r2,r3,r2
 800af58:	98800215 	stw	r2,8(r19)
 800af5c:	103ff01e 	bne	r2,zero,800af20 <__alt_data_end+0xfc00af20>
 800af60:	0005883a 	mov	r2,zero
 800af64:	dfc00b17 	ldw	ra,44(sp)
 800af68:	df000a17 	ldw	fp,40(sp)
 800af6c:	ddc00917 	ldw	r23,36(sp)
 800af70:	dd800817 	ldw	r22,32(sp)
 800af74:	dd400717 	ldw	r21,28(sp)
 800af78:	dd000617 	ldw	r20,24(sp)
 800af7c:	dcc00517 	ldw	r19,20(sp)
 800af80:	dc800417 	ldw	r18,16(sp)
 800af84:	dc400317 	ldw	r17,12(sp)
 800af88:	dc000217 	ldw	r16,8(sp)
 800af8c:	dec00c04 	addi	sp,sp,48
 800af90:	f800283a 	ret
 800af94:	a809883a 	mov	r4,r21
 800af98:	800b883a 	mov	r5,r16
 800af9c:	8008a500 	call	8008a50 <__swsetup_r>
 800afa0:	80c0030b 	ldhu	r3,12(r16)
 800afa4:	103fd826 	beq	r2,zero,800af08 <__alt_data_end+0xfc00af08>
 800afa8:	18c01014 	ori	r3,r3,64
 800afac:	80c0030d 	sth	r3,12(r16)
 800afb0:	00c00244 	movi	r3,9
 800afb4:	00bfffc4 	movi	r2,-1
 800afb8:	a8c00015 	stw	r3,0(r21)
 800afbc:	003fe906 	br	800af64 <__alt_data_end+0xfc00af64>
 800afc0:	8d000017 	ldw	r20,0(r17)
 800afc4:	8c800117 	ldw	r18,4(r17)
 800afc8:	8c400204 	addi	r17,r17,8
 800afcc:	003fd406 	br	800af20 <__alt_data_end+0xfc00af20>
 800afd0:	0005883a 	mov	r2,zero
 800afd4:	f800283a 	ret
 800afd8:	1880004c 	andi	r2,r3,1
 800afdc:	1000301e 	bne	r2,zero,800b0a0 <__sfvwrite_r+0x1ec>
 800afe0:	002f883a 	mov	r23,zero
 800afe4:	0025883a 	mov	r18,zero
 800afe8:	90001c26 	beq	r18,zero,800b05c <__sfvwrite_r+0x1a8>
 800afec:	1880800c 	andi	r2,r3,512
 800aff0:	85000217 	ldw	r20,8(r16)
 800aff4:	10006c26 	beq	r2,zero,800b1a8 <__sfvwrite_r+0x2f4>
 800aff8:	a02d883a 	mov	r22,r20
 800affc:	95008536 	bltu	r18,r20,800b214 <__sfvwrite_r+0x360>
 800b000:	1881200c 	andi	r2,r3,1152
 800b004:	10009d1e 	bne	r2,zero,800b27c <__sfvwrite_r+0x3c8>
 800b008:	81000017 	ldw	r4,0(r16)
 800b00c:	a039883a 	mov	fp,r20
 800b010:	9029883a 	mov	r20,r18
 800b014:	b80b883a 	mov	r5,r23
 800b018:	b00d883a 	mov	r6,r22
 800b01c:	800b9800 	call	800b980 <memmove>
 800b020:	80c00217 	ldw	r3,8(r16)
 800b024:	81000017 	ldw	r4,0(r16)
 800b028:	9005883a 	mov	r2,r18
 800b02c:	1f39c83a 	sub	fp,r3,fp
 800b030:	258f883a 	add	r7,r4,r22
 800b034:	87000215 	stw	fp,8(r16)
 800b038:	81c00015 	stw	r7,0(r16)
 800b03c:	98c00217 	ldw	r3,8(r19)
 800b040:	b8af883a 	add	r23,r23,r2
 800b044:	90a5c83a 	sub	r18,r18,r2
 800b048:	1d05c83a 	sub	r2,r3,r20
 800b04c:	98800215 	stw	r2,8(r19)
 800b050:	103fc326 	beq	r2,zero,800af60 <__alt_data_end+0xfc00af60>
 800b054:	80c0030b 	ldhu	r3,12(r16)
 800b058:	903fe41e 	bne	r18,zero,800afec <__alt_data_end+0xfc00afec>
 800b05c:	8dc00017 	ldw	r23,0(r17)
 800b060:	8c800117 	ldw	r18,4(r17)
 800b064:	8c400204 	addi	r17,r17,8
 800b068:	003fdf06 	br	800afe8 <__alt_data_end+0xfc00afe8>
 800b06c:	800ccf40 	call	800ccf4 <_realloc_r>
 800b070:	102d883a 	mov	r22,r2
 800b074:	1000a01e 	bne	r2,zero,800b2f8 <__sfvwrite_r+0x444>
 800b078:	81400417 	ldw	r5,16(r16)
 800b07c:	a809883a 	mov	r4,r21
 800b080:	800abc40 	call	800abc4 <_free_r>
 800b084:	00800304 	movi	r2,12
 800b088:	a8800015 	stw	r2,0(r21)
 800b08c:	80c0030b 	ldhu	r3,12(r16)
 800b090:	00bfffc4 	movi	r2,-1
 800b094:	18c01014 	ori	r3,r3,64
 800b098:	80c0030d 	sth	r3,12(r16)
 800b09c:	003fb106 	br	800af64 <__alt_data_end+0xfc00af64>
 800b0a0:	0029883a 	mov	r20,zero
 800b0a4:	0011883a 	mov	r8,zero
 800b0a8:	0039883a 	mov	fp,zero
 800b0ac:	0025883a 	mov	r18,zero
 800b0b0:	90001f26 	beq	r18,zero,800b130 <__sfvwrite_r+0x27c>
 800b0b4:	40006826 	beq	r8,zero,800b258 <__sfvwrite_r+0x3a4>
 800b0b8:	a02f883a 	mov	r23,r20
 800b0bc:	9500012e 	bgeu	r18,r20,800b0c4 <__sfvwrite_r+0x210>
 800b0c0:	902f883a 	mov	r23,r18
 800b0c4:	81000017 	ldw	r4,0(r16)
 800b0c8:	80800417 	ldw	r2,16(r16)
 800b0cc:	b82d883a 	mov	r22,r23
 800b0d0:	81800217 	ldw	r6,8(r16)
 800b0d4:	81c00517 	ldw	r7,20(r16)
 800b0d8:	1100022e 	bgeu	r2,r4,800b0e4 <__sfvwrite_r+0x230>
 800b0dc:	31c7883a 	add	r3,r6,r7
 800b0e0:	1dc01816 	blt	r3,r23,800b144 <__sfvwrite_r+0x290>
 800b0e4:	b9c03f16 	blt	r23,r7,800b1e4 <__sfvwrite_r+0x330>
 800b0e8:	80800917 	ldw	r2,36(r16)
 800b0ec:	81400717 	ldw	r5,28(r16)
 800b0f0:	a809883a 	mov	r4,r21
 800b0f4:	da000115 	stw	r8,4(sp)
 800b0f8:	e00d883a 	mov	r6,fp
 800b0fc:	103ee83a 	callr	r2
 800b100:	102d883a 	mov	r22,r2
 800b104:	da000117 	ldw	r8,4(sp)
 800b108:	00bfe00e 	bge	zero,r2,800b08c <__alt_data_end+0xfc00b08c>
 800b10c:	a5a9c83a 	sub	r20,r20,r22
 800b110:	a0001f26 	beq	r20,zero,800b190 <__sfvwrite_r+0x2dc>
 800b114:	98800217 	ldw	r2,8(r19)
 800b118:	e5b9883a 	add	fp,fp,r22
 800b11c:	95a5c83a 	sub	r18,r18,r22
 800b120:	15adc83a 	sub	r22,r2,r22
 800b124:	9d800215 	stw	r22,8(r19)
 800b128:	b03f8d26 	beq	r22,zero,800af60 <__alt_data_end+0xfc00af60>
 800b12c:	903fe11e 	bne	r18,zero,800b0b4 <__alt_data_end+0xfc00b0b4>
 800b130:	8f000017 	ldw	fp,0(r17)
 800b134:	8c800117 	ldw	r18,4(r17)
 800b138:	0011883a 	mov	r8,zero
 800b13c:	8c400204 	addi	r17,r17,8
 800b140:	003fdb06 	br	800b0b0 <__alt_data_end+0xfc00b0b0>
 800b144:	180d883a 	mov	r6,r3
 800b148:	e00b883a 	mov	r5,fp
 800b14c:	da000115 	stw	r8,4(sp)
 800b150:	d8c00015 	stw	r3,0(sp)
 800b154:	800b9800 	call	800b980 <memmove>
 800b158:	d8c00017 	ldw	r3,0(sp)
 800b15c:	80800017 	ldw	r2,0(r16)
 800b160:	a809883a 	mov	r4,r21
 800b164:	800b883a 	mov	r5,r16
 800b168:	10c5883a 	add	r2,r2,r3
 800b16c:	80800015 	stw	r2,0(r16)
 800b170:	d8c00015 	stw	r3,0(sp)
 800b174:	800a4a80 	call	800a4a8 <_fflush_r>
 800b178:	d8c00017 	ldw	r3,0(sp)
 800b17c:	da000117 	ldw	r8,4(sp)
 800b180:	103fc21e 	bne	r2,zero,800b08c <__alt_data_end+0xfc00b08c>
 800b184:	182d883a 	mov	r22,r3
 800b188:	a5a9c83a 	sub	r20,r20,r22
 800b18c:	a03fe11e 	bne	r20,zero,800b114 <__alt_data_end+0xfc00b114>
 800b190:	a809883a 	mov	r4,r21
 800b194:	800b883a 	mov	r5,r16
 800b198:	800a4a80 	call	800a4a8 <_fflush_r>
 800b19c:	103fbb1e 	bne	r2,zero,800b08c <__alt_data_end+0xfc00b08c>
 800b1a0:	0011883a 	mov	r8,zero
 800b1a4:	003fdb06 	br	800b114 <__alt_data_end+0xfc00b114>
 800b1a8:	81000017 	ldw	r4,0(r16)
 800b1ac:	80800417 	ldw	r2,16(r16)
 800b1b0:	1100012e 	bgeu	r2,r4,800b1b8 <__sfvwrite_r+0x304>
 800b1b4:	a4805a36 	bltu	r20,r18,800b320 <__sfvwrite_r+0x46c>
 800b1b8:	81c00517 	ldw	r7,20(r16)
 800b1bc:	91c01a36 	bltu	r18,r7,800b228 <__sfvwrite_r+0x374>
 800b1c0:	80800917 	ldw	r2,36(r16)
 800b1c4:	81400717 	ldw	r5,28(r16)
 800b1c8:	a809883a 	mov	r4,r21
 800b1cc:	b80d883a 	mov	r6,r23
 800b1d0:	103ee83a 	callr	r2
 800b1d4:	1029883a 	mov	r20,r2
 800b1d8:	00bfac0e 	bge	zero,r2,800b08c <__alt_data_end+0xfc00b08c>
 800b1dc:	a005883a 	mov	r2,r20
 800b1e0:	003f9606 	br	800b03c <__alt_data_end+0xfc00b03c>
 800b1e4:	b80d883a 	mov	r6,r23
 800b1e8:	e00b883a 	mov	r5,fp
 800b1ec:	da000115 	stw	r8,4(sp)
 800b1f0:	800b9800 	call	800b980 <memmove>
 800b1f4:	80800217 	ldw	r2,8(r16)
 800b1f8:	80c00017 	ldw	r3,0(r16)
 800b1fc:	da000117 	ldw	r8,4(sp)
 800b200:	15c5c83a 	sub	r2,r2,r23
 800b204:	1def883a 	add	r23,r3,r23
 800b208:	80800215 	stw	r2,8(r16)
 800b20c:	85c00015 	stw	r23,0(r16)
 800b210:	003fbe06 	br	800b10c <__alt_data_end+0xfc00b10c>
 800b214:	81000017 	ldw	r4,0(r16)
 800b218:	9039883a 	mov	fp,r18
 800b21c:	9029883a 	mov	r20,r18
 800b220:	902d883a 	mov	r22,r18
 800b224:	003f7b06 	br	800b014 <__alt_data_end+0xfc00b014>
 800b228:	b80b883a 	mov	r5,r23
 800b22c:	900d883a 	mov	r6,r18
 800b230:	800b9800 	call	800b980 <memmove>
 800b234:	80c00217 	ldw	r3,8(r16)
 800b238:	80800017 	ldw	r2,0(r16)
 800b23c:	9029883a 	mov	r20,r18
 800b240:	1c87c83a 	sub	r3,r3,r18
 800b244:	1485883a 	add	r2,r2,r18
 800b248:	80800015 	stw	r2,0(r16)
 800b24c:	80c00215 	stw	r3,8(r16)
 800b250:	9005883a 	mov	r2,r18
 800b254:	003f7906 	br	800b03c <__alt_data_end+0xfc00b03c>
 800b258:	e009883a 	mov	r4,fp
 800b25c:	01400284 	movi	r5,10
 800b260:	900d883a 	mov	r6,r18
 800b264:	800b7600 	call	800b760 <memchr>
 800b268:	10003826 	beq	r2,zero,800b34c <__sfvwrite_r+0x498>
 800b26c:	10800044 	addi	r2,r2,1
 800b270:	1729c83a 	sub	r20,r2,fp
 800b274:	02000044 	movi	r8,1
 800b278:	003f8f06 	br	800b0b8 <__alt_data_end+0xfc00b0b8>
 800b27c:	80800517 	ldw	r2,20(r16)
 800b280:	81400417 	ldw	r5,16(r16)
 800b284:	87000017 	ldw	fp,0(r16)
 800b288:	10a9883a 	add	r20,r2,r2
 800b28c:	a085883a 	add	r2,r20,r2
 800b290:	1028d7fa 	srli	r20,r2,31
 800b294:	e179c83a 	sub	fp,fp,r5
 800b298:	e1000044 	addi	r4,fp,1
 800b29c:	a085883a 	add	r2,r20,r2
 800b2a0:	1029d07a 	srai	r20,r2,1
 800b2a4:	2485883a 	add	r2,r4,r18
 800b2a8:	a00d883a 	mov	r6,r20
 800b2ac:	a080022e 	bgeu	r20,r2,800b2b8 <__sfvwrite_r+0x404>
 800b2b0:	1029883a 	mov	r20,r2
 800b2b4:	100d883a 	mov	r6,r2
 800b2b8:	18c1000c 	andi	r3,r3,1024
 800b2bc:	a809883a 	mov	r4,r21
 800b2c0:	183f6a26 	beq	r3,zero,800b06c <__alt_data_end+0xfc00b06c>
 800b2c4:	300b883a 	mov	r5,r6
 800b2c8:	8003ff40 	call	8003ff4 <_malloc_r>
 800b2cc:	102d883a 	mov	r22,r2
 800b2d0:	103f6c26 	beq	r2,zero,800b084 <__alt_data_end+0xfc00b084>
 800b2d4:	81400417 	ldw	r5,16(r16)
 800b2d8:	1009883a 	mov	r4,r2
 800b2dc:	e00d883a 	mov	r6,fp
 800b2e0:	800b8480 	call	800b848 <memcpy>
 800b2e4:	8080030b 	ldhu	r2,12(r16)
 800b2e8:	00fedfc4 	movi	r3,-1153
 800b2ec:	10c4703a 	and	r2,r2,r3
 800b2f0:	10802014 	ori	r2,r2,128
 800b2f4:	8080030d 	sth	r2,12(r16)
 800b2f8:	b709883a 	add	r4,r22,fp
 800b2fc:	a707c83a 	sub	r3,r20,fp
 800b300:	85800415 	stw	r22,16(r16)
 800b304:	85000515 	stw	r20,20(r16)
 800b308:	81000015 	stw	r4,0(r16)
 800b30c:	9039883a 	mov	fp,r18
 800b310:	80c00215 	stw	r3,8(r16)
 800b314:	9029883a 	mov	r20,r18
 800b318:	902d883a 	mov	r22,r18
 800b31c:	003f3d06 	br	800b014 <__alt_data_end+0xfc00b014>
 800b320:	b80b883a 	mov	r5,r23
 800b324:	a00d883a 	mov	r6,r20
 800b328:	800b9800 	call	800b980 <memmove>
 800b32c:	80800017 	ldw	r2,0(r16)
 800b330:	a809883a 	mov	r4,r21
 800b334:	800b883a 	mov	r5,r16
 800b338:	1505883a 	add	r2,r2,r20
 800b33c:	80800015 	stw	r2,0(r16)
 800b340:	800a4a80 	call	800a4a8 <_fflush_r>
 800b344:	103fa526 	beq	r2,zero,800b1dc <__alt_data_end+0xfc00b1dc>
 800b348:	003f5006 	br	800b08c <__alt_data_end+0xfc00b08c>
 800b34c:	95000044 	addi	r20,r18,1
 800b350:	02000044 	movi	r8,1
 800b354:	003f5806 	br	800b0b8 <__alt_data_end+0xfc00b0b8>

0800b358 <_fwalk>:
 800b358:	defff804 	addi	sp,sp,-32
 800b35c:	dd400515 	stw	r21,20(sp)
 800b360:	2540b804 	addi	r21,r4,736
 800b364:	dd800615 	stw	r22,24(sp)
 800b368:	dd000415 	stw	r20,16(sp)
 800b36c:	dfc00715 	stw	ra,28(sp)
 800b370:	dcc00315 	stw	r19,12(sp)
 800b374:	dc800215 	stw	r18,8(sp)
 800b378:	dc400115 	stw	r17,4(sp)
 800b37c:	dc000015 	stw	r16,0(sp)
 800b380:	2829883a 	mov	r20,r5
 800b384:	002d883a 	mov	r22,zero
 800b388:	800aa600 	call	800aa60 <__sfp_lock_acquire>
 800b38c:	a8001426 	beq	r21,zero,800b3e0 <_fwalk+0x88>
 800b390:	04ffffc4 	movi	r19,-1
 800b394:	ac400117 	ldw	r17,4(r21)
 800b398:	ac800217 	ldw	r18,8(r21)
 800b39c:	8c7fffc4 	addi	r17,r17,-1
 800b3a0:	88000d16 	blt	r17,zero,800b3d8 <_fwalk+0x80>
 800b3a4:	94000304 	addi	r16,r18,12
 800b3a8:	94800384 	addi	r18,r18,14
 800b3ac:	80c0000f 	ldh	r3,0(r16)
 800b3b0:	8c7fffc4 	addi	r17,r17,-1
 800b3b4:	813ffd04 	addi	r4,r16,-12
 800b3b8:	18000426 	beq	r3,zero,800b3cc <_fwalk+0x74>
 800b3bc:	90c0000f 	ldh	r3,0(r18)
 800b3c0:	1cc00226 	beq	r3,r19,800b3cc <_fwalk+0x74>
 800b3c4:	a03ee83a 	callr	r20
 800b3c8:	b0acb03a 	or	r22,r22,r2
 800b3cc:	84001a04 	addi	r16,r16,104
 800b3d0:	94801a04 	addi	r18,r18,104
 800b3d4:	8cfff51e 	bne	r17,r19,800b3ac <__alt_data_end+0xfc00b3ac>
 800b3d8:	ad400017 	ldw	r21,0(r21)
 800b3dc:	a83fed1e 	bne	r21,zero,800b394 <__alt_data_end+0xfc00b394>
 800b3e0:	800aa640 	call	800aa64 <__sfp_lock_release>
 800b3e4:	b005883a 	mov	r2,r22
 800b3e8:	dfc00717 	ldw	ra,28(sp)
 800b3ec:	dd800617 	ldw	r22,24(sp)
 800b3f0:	dd400517 	ldw	r21,20(sp)
 800b3f4:	dd000417 	ldw	r20,16(sp)
 800b3f8:	dcc00317 	ldw	r19,12(sp)
 800b3fc:	dc800217 	ldw	r18,8(sp)
 800b400:	dc400117 	ldw	r17,4(sp)
 800b404:	dc000017 	ldw	r16,0(sp)
 800b408:	dec00804 	addi	sp,sp,32
 800b40c:	f800283a 	ret

0800b410 <_fwalk_reent>:
 800b410:	defff804 	addi	sp,sp,-32
 800b414:	dd400515 	stw	r21,20(sp)
 800b418:	2540b804 	addi	r21,r4,736
 800b41c:	dd800615 	stw	r22,24(sp)
 800b420:	dd000415 	stw	r20,16(sp)
 800b424:	dcc00315 	stw	r19,12(sp)
 800b428:	dfc00715 	stw	ra,28(sp)
 800b42c:	dc800215 	stw	r18,8(sp)
 800b430:	dc400115 	stw	r17,4(sp)
 800b434:	dc000015 	stw	r16,0(sp)
 800b438:	2027883a 	mov	r19,r4
 800b43c:	2829883a 	mov	r20,r5
 800b440:	002d883a 	mov	r22,zero
 800b444:	800aa600 	call	800aa60 <__sfp_lock_acquire>
 800b448:	a8001326 	beq	r21,zero,800b498 <_fwalk_reent+0x88>
 800b44c:	04bfffc4 	movi	r18,-1
 800b450:	ac400117 	ldw	r17,4(r21)
 800b454:	ac000217 	ldw	r16,8(r21)
 800b458:	8c7fffc4 	addi	r17,r17,-1
 800b45c:	88000c16 	blt	r17,zero,800b490 <_fwalk_reent+0x80>
 800b460:	84000304 	addi	r16,r16,12
 800b464:	80c0000f 	ldh	r3,0(r16)
 800b468:	8c7fffc4 	addi	r17,r17,-1
 800b46c:	817ffd04 	addi	r5,r16,-12
 800b470:	18000526 	beq	r3,zero,800b488 <_fwalk_reent+0x78>
 800b474:	80c0008f 	ldh	r3,2(r16)
 800b478:	9809883a 	mov	r4,r19
 800b47c:	1c800226 	beq	r3,r18,800b488 <_fwalk_reent+0x78>
 800b480:	a03ee83a 	callr	r20
 800b484:	b0acb03a 	or	r22,r22,r2
 800b488:	84001a04 	addi	r16,r16,104
 800b48c:	8cbff51e 	bne	r17,r18,800b464 <__alt_data_end+0xfc00b464>
 800b490:	ad400017 	ldw	r21,0(r21)
 800b494:	a83fee1e 	bne	r21,zero,800b450 <__alt_data_end+0xfc00b450>
 800b498:	800aa640 	call	800aa64 <__sfp_lock_release>
 800b49c:	b005883a 	mov	r2,r22
 800b4a0:	dfc00717 	ldw	ra,28(sp)
 800b4a4:	dd800617 	ldw	r22,24(sp)
 800b4a8:	dd400517 	ldw	r21,20(sp)
 800b4ac:	dd000417 	ldw	r20,16(sp)
 800b4b0:	dcc00317 	ldw	r19,12(sp)
 800b4b4:	dc800217 	ldw	r18,8(sp)
 800b4b8:	dc400117 	ldw	r17,4(sp)
 800b4bc:	dc000017 	ldw	r16,0(sp)
 800b4c0:	dec00804 	addi	sp,sp,32
 800b4c4:	f800283a 	ret

0800b4c8 <_setlocale_r>:
 800b4c8:	30001b26 	beq	r6,zero,800b538 <_setlocale_r+0x70>
 800b4cc:	014200b4 	movhi	r5,2050
 800b4d0:	defffe04 	addi	sp,sp,-8
 800b4d4:	2940be04 	addi	r5,r5,760
 800b4d8:	3009883a 	mov	r4,r6
 800b4dc:	dc000015 	stw	r16,0(sp)
 800b4e0:	dfc00115 	stw	ra,4(sp)
 800b4e4:	3021883a 	mov	r16,r6
 800b4e8:	800d4440 	call	800d444 <strcmp>
 800b4ec:	1000061e 	bne	r2,zero,800b508 <_setlocale_r+0x40>
 800b4f0:	008200b4 	movhi	r2,2050
 800b4f4:	1080bd04 	addi	r2,r2,756
 800b4f8:	dfc00117 	ldw	ra,4(sp)
 800b4fc:	dc000017 	ldw	r16,0(sp)
 800b500:	dec00204 	addi	sp,sp,8
 800b504:	f800283a 	ret
 800b508:	014200b4 	movhi	r5,2050
 800b50c:	2940bd04 	addi	r5,r5,756
 800b510:	8009883a 	mov	r4,r16
 800b514:	800d4440 	call	800d444 <strcmp>
 800b518:	103ff526 	beq	r2,zero,800b4f0 <__alt_data_end+0xfc00b4f0>
 800b51c:	014200b4 	movhi	r5,2050
 800b520:	2940a004 	addi	r5,r5,640
 800b524:	8009883a 	mov	r4,r16
 800b528:	800d4440 	call	800d444 <strcmp>
 800b52c:	103ff026 	beq	r2,zero,800b4f0 <__alt_data_end+0xfc00b4f0>
 800b530:	0005883a 	mov	r2,zero
 800b534:	003ff006 	br	800b4f8 <__alt_data_end+0xfc00b4f8>
 800b538:	008200b4 	movhi	r2,2050
 800b53c:	1080bd04 	addi	r2,r2,756
 800b540:	f800283a 	ret

0800b544 <__locale_charset>:
 800b544:	008200b4 	movhi	r2,2050
 800b548:	10834004 	addi	r2,r2,3328
 800b54c:	f800283a 	ret

0800b550 <__locale_mb_cur_max>:
 800b550:	008200b4 	movhi	r2,2050
 800b554:	1087e704 	addi	r2,r2,8092
 800b558:	10800017 	ldw	r2,0(r2)
 800b55c:	f800283a 	ret

0800b560 <__locale_msgcharset>:
 800b560:	008200b4 	movhi	r2,2050
 800b564:	10833804 	addi	r2,r2,3296
 800b568:	f800283a 	ret

0800b56c <__locale_cjk_lang>:
 800b56c:	0005883a 	mov	r2,zero
 800b570:	f800283a 	ret

0800b574 <_localeconv_r>:
 800b574:	008200b4 	movhi	r2,2050
 800b578:	10834804 	addi	r2,r2,3360
 800b57c:	f800283a 	ret

0800b580 <setlocale>:
 800b580:	00c200b4 	movhi	r3,2050
 800b584:	18c7e604 	addi	r3,r3,8088
 800b588:	2005883a 	mov	r2,r4
 800b58c:	19000017 	ldw	r4,0(r3)
 800b590:	280d883a 	mov	r6,r5
 800b594:	100b883a 	mov	r5,r2
 800b598:	800b4c81 	jmpi	800b4c8 <_setlocale_r>

0800b59c <localeconv>:
 800b59c:	008200b4 	movhi	r2,2050
 800b5a0:	10834804 	addi	r2,r2,3360
 800b5a4:	f800283a 	ret

0800b5a8 <__smakebuf_r>:
 800b5a8:	2880030b 	ldhu	r2,12(r5)
 800b5ac:	10c0008c 	andi	r3,r2,2
 800b5b0:	1800401e 	bne	r3,zero,800b6b4 <__smakebuf_r+0x10c>
 800b5b4:	deffec04 	addi	sp,sp,-80
 800b5b8:	dc000f15 	stw	r16,60(sp)
 800b5bc:	2821883a 	mov	r16,r5
 800b5c0:	2940038f 	ldh	r5,14(r5)
 800b5c4:	dc401015 	stw	r17,64(sp)
 800b5c8:	dfc01315 	stw	ra,76(sp)
 800b5cc:	dcc01215 	stw	r19,72(sp)
 800b5d0:	dc801115 	stw	r18,68(sp)
 800b5d4:	2023883a 	mov	r17,r4
 800b5d8:	28001b16 	blt	r5,zero,800b648 <__smakebuf_r+0xa0>
 800b5dc:	d80d883a 	mov	r6,sp
 800b5e0:	80101800 	call	8010180 <_fstat_r>
 800b5e4:	10001716 	blt	r2,zero,800b644 <__smakebuf_r+0x9c>
 800b5e8:	d8800117 	ldw	r2,4(sp)
 800b5ec:	00e00014 	movui	r3,32768
 800b5f0:	10bc000c 	andi	r2,r2,61440
 800b5f4:	10c03726 	beq	r2,r3,800b6d4 <__smakebuf_r+0x12c>
 800b5f8:	80c0030b 	ldhu	r3,12(r16)
 800b5fc:	18c20014 	ori	r3,r3,2048
 800b600:	80c0030d 	sth	r3,12(r16)
 800b604:	00c80004 	movi	r3,8192
 800b608:	10c03c1e 	bne	r2,r3,800b6fc <__smakebuf_r+0x154>
 800b60c:	8140038f 	ldh	r5,14(r16)
 800b610:	8809883a 	mov	r4,r17
 800b614:	80101d80 	call	80101d8 <_isatty_r>
 800b618:	10004e26 	beq	r2,zero,800b754 <__smakebuf_r+0x1ac>
 800b61c:	8080030b 	ldhu	r2,12(r16)
 800b620:	04c00044 	movi	r19,1
 800b624:	80c010c4 	addi	r3,r16,67
 800b628:	14c4b03a 	or	r2,r2,r19
 800b62c:	8080030d 	sth	r2,12(r16)
 800b630:	80c00015 	stw	r3,0(r16)
 800b634:	80c00415 	stw	r3,16(r16)
 800b638:	84c00515 	stw	r19,20(r16)
 800b63c:	04810004 	movi	r18,1024
 800b640:	00000706 	br	800b660 <__smakebuf_r+0xb8>
 800b644:	8080030b 	ldhu	r2,12(r16)
 800b648:	10c0200c 	andi	r3,r2,128
 800b64c:	18001f1e 	bne	r3,zero,800b6cc <__smakebuf_r+0x124>
 800b650:	04810004 	movi	r18,1024
 800b654:	10820014 	ori	r2,r2,2048
 800b658:	8080030d 	sth	r2,12(r16)
 800b65c:	0027883a 	mov	r19,zero
 800b660:	8809883a 	mov	r4,r17
 800b664:	900b883a 	mov	r5,r18
 800b668:	8003ff40 	call	8003ff4 <_malloc_r>
 800b66c:	10002e26 	beq	r2,zero,800b728 <__smakebuf_r+0x180>
 800b670:	80c0030b 	ldhu	r3,12(r16)
 800b674:	01020074 	movhi	r4,2049
 800b678:	2129c404 	addi	r4,r4,-22768
 800b67c:	89000f15 	stw	r4,60(r17)
 800b680:	18c02014 	ori	r3,r3,128
 800b684:	80c0030d 	sth	r3,12(r16)
 800b688:	80800015 	stw	r2,0(r16)
 800b68c:	80800415 	stw	r2,16(r16)
 800b690:	84800515 	stw	r18,20(r16)
 800b694:	98001c1e 	bne	r19,zero,800b708 <__smakebuf_r+0x160>
 800b698:	dfc01317 	ldw	ra,76(sp)
 800b69c:	dcc01217 	ldw	r19,72(sp)
 800b6a0:	dc801117 	ldw	r18,68(sp)
 800b6a4:	dc401017 	ldw	r17,64(sp)
 800b6a8:	dc000f17 	ldw	r16,60(sp)
 800b6ac:	dec01404 	addi	sp,sp,80
 800b6b0:	f800283a 	ret
 800b6b4:	288010c4 	addi	r2,r5,67
 800b6b8:	28800015 	stw	r2,0(r5)
 800b6bc:	28800415 	stw	r2,16(r5)
 800b6c0:	00800044 	movi	r2,1
 800b6c4:	28800515 	stw	r2,20(r5)
 800b6c8:	f800283a 	ret
 800b6cc:	04801004 	movi	r18,64
 800b6d0:	003fe006 	br	800b654 <__alt_data_end+0xfc00b654>
 800b6d4:	81000a17 	ldw	r4,40(r16)
 800b6d8:	00c20074 	movhi	r3,2049
 800b6dc:	18f4f804 	addi	r3,r3,-11296
 800b6e0:	20ffc51e 	bne	r4,r3,800b5f8 <__alt_data_end+0xfc00b5f8>
 800b6e4:	80c0030b 	ldhu	r3,12(r16)
 800b6e8:	01010004 	movi	r4,1024
 800b6ec:	81001315 	stw	r4,76(r16)
 800b6f0:	1906b03a 	or	r3,r3,r4
 800b6f4:	80c0030d 	sth	r3,12(r16)
 800b6f8:	003fc206 	br	800b604 <__alt_data_end+0xfc00b604>
 800b6fc:	0027883a 	mov	r19,zero
 800b700:	04810004 	movi	r18,1024
 800b704:	003fd606 	br	800b660 <__alt_data_end+0xfc00b660>
 800b708:	8140038f 	ldh	r5,14(r16)
 800b70c:	8809883a 	mov	r4,r17
 800b710:	80101d80 	call	80101d8 <_isatty_r>
 800b714:	103fe026 	beq	r2,zero,800b698 <__alt_data_end+0xfc00b698>
 800b718:	8080030b 	ldhu	r2,12(r16)
 800b71c:	10800054 	ori	r2,r2,1
 800b720:	8080030d 	sth	r2,12(r16)
 800b724:	003fdc06 	br	800b698 <__alt_data_end+0xfc00b698>
 800b728:	8080030b 	ldhu	r2,12(r16)
 800b72c:	10c0800c 	andi	r3,r2,512
 800b730:	183fd91e 	bne	r3,zero,800b698 <__alt_data_end+0xfc00b698>
 800b734:	10800094 	ori	r2,r2,2
 800b738:	80c010c4 	addi	r3,r16,67
 800b73c:	8080030d 	sth	r2,12(r16)
 800b740:	00800044 	movi	r2,1
 800b744:	80c00015 	stw	r3,0(r16)
 800b748:	80c00415 	stw	r3,16(r16)
 800b74c:	80800515 	stw	r2,20(r16)
 800b750:	003fd106 	br	800b698 <__alt_data_end+0xfc00b698>
 800b754:	04c00044 	movi	r19,1
 800b758:	04810004 	movi	r18,1024
 800b75c:	003fc006 	br	800b660 <__alt_data_end+0xfc00b660>

0800b760 <memchr>:
 800b760:	208000cc 	andi	r2,r4,3
 800b764:	280f883a 	mov	r7,r5
 800b768:	10003526 	beq	r2,zero,800b840 <memchr+0xe0>
 800b76c:	30bfffc4 	addi	r2,r6,-1
 800b770:	30001b26 	beq	r6,zero,800b7e0 <memchr+0x80>
 800b774:	21800003 	ldbu	r6,0(r4)
 800b778:	28c03fcc 	andi	r3,r5,255
 800b77c:	30c01a26 	beq	r6,r3,800b7e8 <memchr+0x88>
 800b780:	180d883a 	mov	r6,r3
 800b784:	00000406 	br	800b798 <memchr+0x38>
 800b788:	10001526 	beq	r2,zero,800b7e0 <memchr+0x80>
 800b78c:	20c00003 	ldbu	r3,0(r4)
 800b790:	10bfffc4 	addi	r2,r2,-1
 800b794:	19801426 	beq	r3,r6,800b7e8 <memchr+0x88>
 800b798:	21000044 	addi	r4,r4,1
 800b79c:	20c000cc 	andi	r3,r4,3
 800b7a0:	183ff91e 	bne	r3,zero,800b788 <__alt_data_end+0xfc00b788>
 800b7a4:	024000c4 	movi	r9,3
 800b7a8:	48801136 	bltu	r9,r2,800b7f0 <memchr+0x90>
 800b7ac:	10000c26 	beq	r2,zero,800b7e0 <memchr+0x80>
 800b7b0:	20c00003 	ldbu	r3,0(r4)
 800b7b4:	29403fcc 	andi	r5,r5,255
 800b7b8:	19400b26 	beq	r3,r5,800b7e8 <memchr+0x88>
 800b7bc:	20c00044 	addi	r3,r4,1
 800b7c0:	2085883a 	add	r2,r4,r2
 800b7c4:	39803fcc 	andi	r6,r7,255
 800b7c8:	00000306 	br	800b7d8 <memchr+0x78>
 800b7cc:	18c00044 	addi	r3,r3,1
 800b7d0:	197fffc3 	ldbu	r5,-1(r3)
 800b7d4:	29800426 	beq	r5,r6,800b7e8 <memchr+0x88>
 800b7d8:	1809883a 	mov	r4,r3
 800b7dc:	18bffb1e 	bne	r3,r2,800b7cc <__alt_data_end+0xfc00b7cc>
 800b7e0:	0005883a 	mov	r2,zero
 800b7e4:	f800283a 	ret
 800b7e8:	2005883a 	mov	r2,r4
 800b7ec:	f800283a 	ret
 800b7f0:	28c03fcc 	andi	r3,r5,255
 800b7f4:	1810923a 	slli	r8,r3,8
 800b7f8:	02ffbff4 	movhi	r11,65279
 800b7fc:	02a02074 	movhi	r10,32897
 800b800:	40c6b03a 	or	r3,r8,r3
 800b804:	1810943a 	slli	r8,r3,16
 800b808:	5affbfc4 	addi	r11,r11,-257
 800b80c:	52a02004 	addi	r10,r10,-32640
 800b810:	40d0b03a 	or	r8,r8,r3
 800b814:	20c00017 	ldw	r3,0(r4)
 800b818:	40c6f03a 	xor	r3,r8,r3
 800b81c:	1acd883a 	add	r6,r3,r11
 800b820:	00c6303a 	nor	r3,zero,r3
 800b824:	30c6703a 	and	r3,r6,r3
 800b828:	1a86703a 	and	r3,r3,r10
 800b82c:	183fdf1e 	bne	r3,zero,800b7ac <__alt_data_end+0xfc00b7ac>
 800b830:	10bfff04 	addi	r2,r2,-4
 800b834:	21000104 	addi	r4,r4,4
 800b838:	48bff636 	bltu	r9,r2,800b814 <__alt_data_end+0xfc00b814>
 800b83c:	003fdb06 	br	800b7ac <__alt_data_end+0xfc00b7ac>
 800b840:	3005883a 	mov	r2,r6
 800b844:	003fd706 	br	800b7a4 <__alt_data_end+0xfc00b7a4>

0800b848 <memcpy>:
 800b848:	deffff04 	addi	sp,sp,-4
 800b84c:	dc000015 	stw	r16,0(sp)
 800b850:	00c003c4 	movi	r3,15
 800b854:	2005883a 	mov	r2,r4
 800b858:	1980432e 	bgeu	r3,r6,800b968 <memcpy+0x120>
 800b85c:	2146b03a 	or	r3,r4,r5
 800b860:	18c000cc 	andi	r3,r3,3
 800b864:	1800421e 	bne	r3,zero,800b970 <memcpy+0x128>
 800b868:	343ffc04 	addi	r16,r6,-16
 800b86c:	8020d13a 	srli	r16,r16,4
 800b870:	28c00104 	addi	r3,r5,4
 800b874:	23400104 	addi	r13,r4,4
 800b878:	801e913a 	slli	r15,r16,4
 800b87c:	2b000204 	addi	r12,r5,8
 800b880:	22c00204 	addi	r11,r4,8
 800b884:	7bc00504 	addi	r15,r15,20
 800b888:	2a800304 	addi	r10,r5,12
 800b88c:	22400304 	addi	r9,r4,12
 800b890:	2bdf883a 	add	r15,r5,r15
 800b894:	2811883a 	mov	r8,r5
 800b898:	200f883a 	mov	r7,r4
 800b89c:	41000017 	ldw	r4,0(r8)
 800b8a0:	39c00404 	addi	r7,r7,16
 800b8a4:	18c00404 	addi	r3,r3,16
 800b8a8:	393ffc15 	stw	r4,-16(r7)
 800b8ac:	1bbffc17 	ldw	r14,-16(r3)
 800b8b0:	6b400404 	addi	r13,r13,16
 800b8b4:	5ac00404 	addi	r11,r11,16
 800b8b8:	6bbffc15 	stw	r14,-16(r13)
 800b8bc:	63800017 	ldw	r14,0(r12)
 800b8c0:	4a400404 	addi	r9,r9,16
 800b8c4:	42000404 	addi	r8,r8,16
 800b8c8:	5bbffc15 	stw	r14,-16(r11)
 800b8cc:	53800017 	ldw	r14,0(r10)
 800b8d0:	63000404 	addi	r12,r12,16
 800b8d4:	52800404 	addi	r10,r10,16
 800b8d8:	4bbffc15 	stw	r14,-16(r9)
 800b8dc:	1bffef1e 	bne	r3,r15,800b89c <__alt_data_end+0xfc00b89c>
 800b8e0:	81c00044 	addi	r7,r16,1
 800b8e4:	380e913a 	slli	r7,r7,4
 800b8e8:	310003cc 	andi	r4,r6,15
 800b8ec:	02c000c4 	movi	r11,3
 800b8f0:	11c7883a 	add	r3,r2,r7
 800b8f4:	29cb883a 	add	r5,r5,r7
 800b8f8:	59001f2e 	bgeu	r11,r4,800b978 <memcpy+0x130>
 800b8fc:	1813883a 	mov	r9,r3
 800b900:	2811883a 	mov	r8,r5
 800b904:	200f883a 	mov	r7,r4
 800b908:	42800017 	ldw	r10,0(r8)
 800b90c:	4a400104 	addi	r9,r9,4
 800b910:	39ffff04 	addi	r7,r7,-4
 800b914:	4abfff15 	stw	r10,-4(r9)
 800b918:	42000104 	addi	r8,r8,4
 800b91c:	59fffa36 	bltu	r11,r7,800b908 <__alt_data_end+0xfc00b908>
 800b920:	213fff04 	addi	r4,r4,-4
 800b924:	2008d0ba 	srli	r4,r4,2
 800b928:	318000cc 	andi	r6,r6,3
 800b92c:	21000044 	addi	r4,r4,1
 800b930:	2109883a 	add	r4,r4,r4
 800b934:	2109883a 	add	r4,r4,r4
 800b938:	1907883a 	add	r3,r3,r4
 800b93c:	290b883a 	add	r5,r5,r4
 800b940:	30000626 	beq	r6,zero,800b95c <memcpy+0x114>
 800b944:	198d883a 	add	r6,r3,r6
 800b948:	29c00003 	ldbu	r7,0(r5)
 800b94c:	18c00044 	addi	r3,r3,1
 800b950:	29400044 	addi	r5,r5,1
 800b954:	19ffffc5 	stb	r7,-1(r3)
 800b958:	19bffb1e 	bne	r3,r6,800b948 <__alt_data_end+0xfc00b948>
 800b95c:	dc000017 	ldw	r16,0(sp)
 800b960:	dec00104 	addi	sp,sp,4
 800b964:	f800283a 	ret
 800b968:	2007883a 	mov	r3,r4
 800b96c:	003ff406 	br	800b940 <__alt_data_end+0xfc00b940>
 800b970:	2007883a 	mov	r3,r4
 800b974:	003ff306 	br	800b944 <__alt_data_end+0xfc00b944>
 800b978:	200d883a 	mov	r6,r4
 800b97c:	003ff006 	br	800b940 <__alt_data_end+0xfc00b940>

0800b980 <memmove>:
 800b980:	2005883a 	mov	r2,r4
 800b984:	29000b2e 	bgeu	r5,r4,800b9b4 <memmove+0x34>
 800b988:	298f883a 	add	r7,r5,r6
 800b98c:	21c0092e 	bgeu	r4,r7,800b9b4 <memmove+0x34>
 800b990:	2187883a 	add	r3,r4,r6
 800b994:	198bc83a 	sub	r5,r3,r6
 800b998:	30004b26 	beq	r6,zero,800bac8 <memmove+0x148>
 800b99c:	39ffffc4 	addi	r7,r7,-1
 800b9a0:	39000003 	ldbu	r4,0(r7)
 800b9a4:	18ffffc4 	addi	r3,r3,-1
 800b9a8:	19000005 	stb	r4,0(r3)
 800b9ac:	197ffb1e 	bne	r3,r5,800b99c <__alt_data_end+0xfc00b99c>
 800b9b0:	f800283a 	ret
 800b9b4:	00c003c4 	movi	r3,15
 800b9b8:	1980412e 	bgeu	r3,r6,800bac0 <memmove+0x140>
 800b9bc:	1146b03a 	or	r3,r2,r5
 800b9c0:	18c000cc 	andi	r3,r3,3
 800b9c4:	1800411e 	bne	r3,zero,800bacc <memmove+0x14c>
 800b9c8:	33fffc04 	addi	r15,r6,-16
 800b9cc:	781ed13a 	srli	r15,r15,4
 800b9d0:	28c00104 	addi	r3,r5,4
 800b9d4:	13400104 	addi	r13,r2,4
 800b9d8:	781c913a 	slli	r14,r15,4
 800b9dc:	2b000204 	addi	r12,r5,8
 800b9e0:	12c00204 	addi	r11,r2,8
 800b9e4:	73800504 	addi	r14,r14,20
 800b9e8:	2a800304 	addi	r10,r5,12
 800b9ec:	12400304 	addi	r9,r2,12
 800b9f0:	2b9d883a 	add	r14,r5,r14
 800b9f4:	2811883a 	mov	r8,r5
 800b9f8:	100f883a 	mov	r7,r2
 800b9fc:	41000017 	ldw	r4,0(r8)
 800ba00:	39c00404 	addi	r7,r7,16
 800ba04:	18c00404 	addi	r3,r3,16
 800ba08:	393ffc15 	stw	r4,-16(r7)
 800ba0c:	193ffc17 	ldw	r4,-16(r3)
 800ba10:	6b400404 	addi	r13,r13,16
 800ba14:	5ac00404 	addi	r11,r11,16
 800ba18:	693ffc15 	stw	r4,-16(r13)
 800ba1c:	61000017 	ldw	r4,0(r12)
 800ba20:	4a400404 	addi	r9,r9,16
 800ba24:	42000404 	addi	r8,r8,16
 800ba28:	593ffc15 	stw	r4,-16(r11)
 800ba2c:	51000017 	ldw	r4,0(r10)
 800ba30:	63000404 	addi	r12,r12,16
 800ba34:	52800404 	addi	r10,r10,16
 800ba38:	493ffc15 	stw	r4,-16(r9)
 800ba3c:	1bbfef1e 	bne	r3,r14,800b9fc <__alt_data_end+0xfc00b9fc>
 800ba40:	79000044 	addi	r4,r15,1
 800ba44:	2008913a 	slli	r4,r4,4
 800ba48:	328003cc 	andi	r10,r6,15
 800ba4c:	02c000c4 	movi	r11,3
 800ba50:	1107883a 	add	r3,r2,r4
 800ba54:	290b883a 	add	r5,r5,r4
 800ba58:	5a801e2e 	bgeu	r11,r10,800bad4 <memmove+0x154>
 800ba5c:	1813883a 	mov	r9,r3
 800ba60:	2811883a 	mov	r8,r5
 800ba64:	500f883a 	mov	r7,r10
 800ba68:	41000017 	ldw	r4,0(r8)
 800ba6c:	4a400104 	addi	r9,r9,4
 800ba70:	39ffff04 	addi	r7,r7,-4
 800ba74:	493fff15 	stw	r4,-4(r9)
 800ba78:	42000104 	addi	r8,r8,4
 800ba7c:	59fffa36 	bltu	r11,r7,800ba68 <__alt_data_end+0xfc00ba68>
 800ba80:	513fff04 	addi	r4,r10,-4
 800ba84:	2008d0ba 	srli	r4,r4,2
 800ba88:	318000cc 	andi	r6,r6,3
 800ba8c:	21000044 	addi	r4,r4,1
 800ba90:	2109883a 	add	r4,r4,r4
 800ba94:	2109883a 	add	r4,r4,r4
 800ba98:	1907883a 	add	r3,r3,r4
 800ba9c:	290b883a 	add	r5,r5,r4
 800baa0:	30000926 	beq	r6,zero,800bac8 <memmove+0x148>
 800baa4:	198d883a 	add	r6,r3,r6
 800baa8:	29c00003 	ldbu	r7,0(r5)
 800baac:	18c00044 	addi	r3,r3,1
 800bab0:	29400044 	addi	r5,r5,1
 800bab4:	19ffffc5 	stb	r7,-1(r3)
 800bab8:	19bffb1e 	bne	r3,r6,800baa8 <__alt_data_end+0xfc00baa8>
 800babc:	f800283a 	ret
 800bac0:	1007883a 	mov	r3,r2
 800bac4:	003ff606 	br	800baa0 <__alt_data_end+0xfc00baa0>
 800bac8:	f800283a 	ret
 800bacc:	1007883a 	mov	r3,r2
 800bad0:	003ff406 	br	800baa4 <__alt_data_end+0xfc00baa4>
 800bad4:	500d883a 	mov	r6,r10
 800bad8:	003ff106 	br	800baa0 <__alt_data_end+0xfc00baa0>

0800badc <memset>:
 800badc:	20c000cc 	andi	r3,r4,3
 800bae0:	2005883a 	mov	r2,r4
 800bae4:	18004326 	beq	r3,zero,800bbf4 <memset+0x118>
 800bae8:	31ffffc4 	addi	r7,r6,-1
 800baec:	30004026 	beq	r6,zero,800bbf0 <memset+0x114>
 800baf0:	2813883a 	mov	r9,r5
 800baf4:	200d883a 	mov	r6,r4
 800baf8:	2007883a 	mov	r3,r4
 800bafc:	00000406 	br	800bb10 <memset+0x34>
 800bb00:	3a3fffc4 	addi	r8,r7,-1
 800bb04:	31800044 	addi	r6,r6,1
 800bb08:	38003926 	beq	r7,zero,800bbf0 <memset+0x114>
 800bb0c:	400f883a 	mov	r7,r8
 800bb10:	18c00044 	addi	r3,r3,1
 800bb14:	32400005 	stb	r9,0(r6)
 800bb18:	1a0000cc 	andi	r8,r3,3
 800bb1c:	403ff81e 	bne	r8,zero,800bb00 <__alt_data_end+0xfc00bb00>
 800bb20:	010000c4 	movi	r4,3
 800bb24:	21c02d2e 	bgeu	r4,r7,800bbdc <memset+0x100>
 800bb28:	29803fcc 	andi	r6,r5,255
 800bb2c:	3008923a 	slli	r4,r6,8
 800bb30:	218cb03a 	or	r6,r4,r6
 800bb34:	3008943a 	slli	r4,r6,16
 800bb38:	218cb03a 	or	r6,r4,r6
 800bb3c:	010003c4 	movi	r4,15
 800bb40:	21c0182e 	bgeu	r4,r7,800bba4 <memset+0xc8>
 800bb44:	3b3ffc04 	addi	r12,r7,-16
 800bb48:	6018d13a 	srli	r12,r12,4
 800bb4c:	1a000104 	addi	r8,r3,4
 800bb50:	1ac00204 	addi	r11,r3,8
 800bb54:	6008913a 	slli	r4,r12,4
 800bb58:	1a800304 	addi	r10,r3,12
 800bb5c:	1813883a 	mov	r9,r3
 800bb60:	21000504 	addi	r4,r4,20
 800bb64:	1909883a 	add	r4,r3,r4
 800bb68:	49800015 	stw	r6,0(r9)
 800bb6c:	41800015 	stw	r6,0(r8)
 800bb70:	59800015 	stw	r6,0(r11)
 800bb74:	51800015 	stw	r6,0(r10)
 800bb78:	42000404 	addi	r8,r8,16
 800bb7c:	4a400404 	addi	r9,r9,16
 800bb80:	5ac00404 	addi	r11,r11,16
 800bb84:	52800404 	addi	r10,r10,16
 800bb88:	413ff71e 	bne	r8,r4,800bb68 <__alt_data_end+0xfc00bb68>
 800bb8c:	63000044 	addi	r12,r12,1
 800bb90:	6018913a 	slli	r12,r12,4
 800bb94:	39c003cc 	andi	r7,r7,15
 800bb98:	010000c4 	movi	r4,3
 800bb9c:	1b07883a 	add	r3,r3,r12
 800bba0:	21c00e2e 	bgeu	r4,r7,800bbdc <memset+0x100>
 800bba4:	1813883a 	mov	r9,r3
 800bba8:	3811883a 	mov	r8,r7
 800bbac:	010000c4 	movi	r4,3
 800bbb0:	49800015 	stw	r6,0(r9)
 800bbb4:	423fff04 	addi	r8,r8,-4
 800bbb8:	4a400104 	addi	r9,r9,4
 800bbbc:	223ffc36 	bltu	r4,r8,800bbb0 <__alt_data_end+0xfc00bbb0>
 800bbc0:	393fff04 	addi	r4,r7,-4
 800bbc4:	2008d0ba 	srli	r4,r4,2
 800bbc8:	39c000cc 	andi	r7,r7,3
 800bbcc:	21000044 	addi	r4,r4,1
 800bbd0:	2109883a 	add	r4,r4,r4
 800bbd4:	2109883a 	add	r4,r4,r4
 800bbd8:	1907883a 	add	r3,r3,r4
 800bbdc:	38000426 	beq	r7,zero,800bbf0 <memset+0x114>
 800bbe0:	19cf883a 	add	r7,r3,r7
 800bbe4:	19400005 	stb	r5,0(r3)
 800bbe8:	18c00044 	addi	r3,r3,1
 800bbec:	19fffd1e 	bne	r3,r7,800bbe4 <__alt_data_end+0xfc00bbe4>
 800bbf0:	f800283a 	ret
 800bbf4:	2007883a 	mov	r3,r4
 800bbf8:	300f883a 	mov	r7,r6
 800bbfc:	003fc806 	br	800bb20 <__alt_data_end+0xfc00bb20>

0800bc00 <_Balloc>:
 800bc00:	20801317 	ldw	r2,76(r4)
 800bc04:	defffc04 	addi	sp,sp,-16
 800bc08:	dc400115 	stw	r17,4(sp)
 800bc0c:	dc000015 	stw	r16,0(sp)
 800bc10:	dfc00315 	stw	ra,12(sp)
 800bc14:	dc800215 	stw	r18,8(sp)
 800bc18:	2023883a 	mov	r17,r4
 800bc1c:	2821883a 	mov	r16,r5
 800bc20:	10000f26 	beq	r2,zero,800bc60 <_Balloc+0x60>
 800bc24:	8407883a 	add	r3,r16,r16
 800bc28:	18c7883a 	add	r3,r3,r3
 800bc2c:	10c7883a 	add	r3,r2,r3
 800bc30:	18800017 	ldw	r2,0(r3)
 800bc34:	10001126 	beq	r2,zero,800bc7c <_Balloc+0x7c>
 800bc38:	11000017 	ldw	r4,0(r2)
 800bc3c:	19000015 	stw	r4,0(r3)
 800bc40:	10000415 	stw	zero,16(r2)
 800bc44:	10000315 	stw	zero,12(r2)
 800bc48:	dfc00317 	ldw	ra,12(sp)
 800bc4c:	dc800217 	ldw	r18,8(sp)
 800bc50:	dc400117 	ldw	r17,4(sp)
 800bc54:	dc000017 	ldw	r16,0(sp)
 800bc58:	dec00404 	addi	sp,sp,16
 800bc5c:	f800283a 	ret
 800bc60:	01400104 	movi	r5,4
 800bc64:	01800844 	movi	r6,33
 800bc68:	800fdcc0 	call	800fdcc <_calloc_r>
 800bc6c:	88801315 	stw	r2,76(r17)
 800bc70:	103fec1e 	bne	r2,zero,800bc24 <__alt_data_end+0xfc00bc24>
 800bc74:	0005883a 	mov	r2,zero
 800bc78:	003ff306 	br	800bc48 <__alt_data_end+0xfc00bc48>
 800bc7c:	01400044 	movi	r5,1
 800bc80:	2c24983a 	sll	r18,r5,r16
 800bc84:	8809883a 	mov	r4,r17
 800bc88:	91800144 	addi	r6,r18,5
 800bc8c:	318d883a 	add	r6,r6,r6
 800bc90:	318d883a 	add	r6,r6,r6
 800bc94:	800fdcc0 	call	800fdcc <_calloc_r>
 800bc98:	103ff626 	beq	r2,zero,800bc74 <__alt_data_end+0xfc00bc74>
 800bc9c:	14000115 	stw	r16,4(r2)
 800bca0:	14800215 	stw	r18,8(r2)
 800bca4:	003fe606 	br	800bc40 <__alt_data_end+0xfc00bc40>

0800bca8 <_Bfree>:
 800bca8:	28000826 	beq	r5,zero,800bccc <_Bfree+0x24>
 800bcac:	28c00117 	ldw	r3,4(r5)
 800bcb0:	20801317 	ldw	r2,76(r4)
 800bcb4:	18c7883a 	add	r3,r3,r3
 800bcb8:	18c7883a 	add	r3,r3,r3
 800bcbc:	10c5883a 	add	r2,r2,r3
 800bcc0:	10c00017 	ldw	r3,0(r2)
 800bcc4:	28c00015 	stw	r3,0(r5)
 800bcc8:	11400015 	stw	r5,0(r2)
 800bccc:	f800283a 	ret

0800bcd0 <__multadd>:
 800bcd0:	defffa04 	addi	sp,sp,-24
 800bcd4:	dc000115 	stw	r16,4(sp)
 800bcd8:	2c000417 	ldw	r16,16(r5)
 800bcdc:	dc800315 	stw	r18,12(sp)
 800bce0:	dc400215 	stw	r17,8(sp)
 800bce4:	dfc00515 	stw	ra,20(sp)
 800bce8:	dcc00415 	stw	r19,16(sp)
 800bcec:	2823883a 	mov	r17,r5
 800bcf0:	2025883a 	mov	r18,r4
 800bcf4:	2a400504 	addi	r9,r5,20
 800bcf8:	0015883a 	mov	r10,zero
 800bcfc:	4a000017 	ldw	r8,0(r9)
 800bd00:	4a400104 	addi	r9,r9,4
 800bd04:	52800044 	addi	r10,r10,1
 800bd08:	40ffffcc 	andi	r3,r8,65535
 800bd0c:	1987383a 	mul	r3,r3,r6
 800bd10:	4010d43a 	srli	r8,r8,16
 800bd14:	19cf883a 	add	r7,r3,r7
 800bd18:	4191383a 	mul	r8,r8,r6
 800bd1c:	3816d43a 	srli	r11,r7,16
 800bd20:	38ffffcc 	andi	r3,r7,65535
 800bd24:	5a0f883a 	add	r7,r11,r8
 800bd28:	3810943a 	slli	r8,r7,16
 800bd2c:	380ed43a 	srli	r7,r7,16
 800bd30:	40c7883a 	add	r3,r8,r3
 800bd34:	48ffff15 	stw	r3,-4(r9)
 800bd38:	543ff016 	blt	r10,r16,800bcfc <__alt_data_end+0xfc00bcfc>
 800bd3c:	38000926 	beq	r7,zero,800bd64 <__multadd+0x94>
 800bd40:	88800217 	ldw	r2,8(r17)
 800bd44:	80800f0e 	bge	r16,r2,800bd84 <__multadd+0xb4>
 800bd48:	80800144 	addi	r2,r16,5
 800bd4c:	1085883a 	add	r2,r2,r2
 800bd50:	1085883a 	add	r2,r2,r2
 800bd54:	8885883a 	add	r2,r17,r2
 800bd58:	11c00015 	stw	r7,0(r2)
 800bd5c:	84000044 	addi	r16,r16,1
 800bd60:	8c000415 	stw	r16,16(r17)
 800bd64:	8805883a 	mov	r2,r17
 800bd68:	dfc00517 	ldw	ra,20(sp)
 800bd6c:	dcc00417 	ldw	r19,16(sp)
 800bd70:	dc800317 	ldw	r18,12(sp)
 800bd74:	dc400217 	ldw	r17,8(sp)
 800bd78:	dc000117 	ldw	r16,4(sp)
 800bd7c:	dec00604 	addi	sp,sp,24
 800bd80:	f800283a 	ret
 800bd84:	89400117 	ldw	r5,4(r17)
 800bd88:	9009883a 	mov	r4,r18
 800bd8c:	d9c00015 	stw	r7,0(sp)
 800bd90:	29400044 	addi	r5,r5,1
 800bd94:	800bc000 	call	800bc00 <_Balloc>
 800bd98:	89800417 	ldw	r6,16(r17)
 800bd9c:	89400304 	addi	r5,r17,12
 800bda0:	11000304 	addi	r4,r2,12
 800bda4:	31800084 	addi	r6,r6,2
 800bda8:	318d883a 	add	r6,r6,r6
 800bdac:	318d883a 	add	r6,r6,r6
 800bdb0:	1027883a 	mov	r19,r2
 800bdb4:	800b8480 	call	800b848 <memcpy>
 800bdb8:	89000117 	ldw	r4,4(r17)
 800bdbc:	90c01317 	ldw	r3,76(r18)
 800bdc0:	d9c00017 	ldw	r7,0(sp)
 800bdc4:	2109883a 	add	r4,r4,r4
 800bdc8:	2109883a 	add	r4,r4,r4
 800bdcc:	1907883a 	add	r3,r3,r4
 800bdd0:	18800017 	ldw	r2,0(r3)
 800bdd4:	88800015 	stw	r2,0(r17)
 800bdd8:	1c400015 	stw	r17,0(r3)
 800bddc:	9823883a 	mov	r17,r19
 800bde0:	003fd906 	br	800bd48 <__alt_data_end+0xfc00bd48>

0800bde4 <__s2b>:
 800bde4:	defff904 	addi	sp,sp,-28
 800bde8:	dc400115 	stw	r17,4(sp)
 800bdec:	dc000015 	stw	r16,0(sp)
 800bdf0:	2023883a 	mov	r17,r4
 800bdf4:	2821883a 	mov	r16,r5
 800bdf8:	39000204 	addi	r4,r7,8
 800bdfc:	01400244 	movi	r5,9
 800be00:	dcc00315 	stw	r19,12(sp)
 800be04:	dc800215 	stw	r18,8(sp)
 800be08:	dfc00615 	stw	ra,24(sp)
 800be0c:	dd400515 	stw	r21,20(sp)
 800be10:	dd000415 	stw	r20,16(sp)
 800be14:	3825883a 	mov	r18,r7
 800be18:	3027883a 	mov	r19,r6
 800be1c:	80110a00 	call	80110a0 <__divsi3>
 800be20:	00c00044 	movi	r3,1
 800be24:	000b883a 	mov	r5,zero
 800be28:	1880030e 	bge	r3,r2,800be38 <__s2b+0x54>
 800be2c:	18c7883a 	add	r3,r3,r3
 800be30:	29400044 	addi	r5,r5,1
 800be34:	18bffd16 	blt	r3,r2,800be2c <__alt_data_end+0xfc00be2c>
 800be38:	8809883a 	mov	r4,r17
 800be3c:	800bc000 	call	800bc00 <_Balloc>
 800be40:	d8c00717 	ldw	r3,28(sp)
 800be44:	10c00515 	stw	r3,20(r2)
 800be48:	00c00044 	movi	r3,1
 800be4c:	10c00415 	stw	r3,16(r2)
 800be50:	00c00244 	movi	r3,9
 800be54:	1cc0210e 	bge	r3,r19,800bedc <__s2b+0xf8>
 800be58:	80eb883a 	add	r21,r16,r3
 800be5c:	a829883a 	mov	r20,r21
 800be60:	84e1883a 	add	r16,r16,r19
 800be64:	a1c00007 	ldb	r7,0(r20)
 800be68:	8809883a 	mov	r4,r17
 800be6c:	a5000044 	addi	r20,r20,1
 800be70:	100b883a 	mov	r5,r2
 800be74:	01800284 	movi	r6,10
 800be78:	39fff404 	addi	r7,r7,-48
 800be7c:	800bcd00 	call	800bcd0 <__multadd>
 800be80:	a43ff81e 	bne	r20,r16,800be64 <__alt_data_end+0xfc00be64>
 800be84:	ace1883a 	add	r16,r21,r19
 800be88:	843ffe04 	addi	r16,r16,-8
 800be8c:	9c800a0e 	bge	r19,r18,800beb8 <__s2b+0xd4>
 800be90:	94e5c83a 	sub	r18,r18,r19
 800be94:	84a5883a 	add	r18,r16,r18
 800be98:	81c00007 	ldb	r7,0(r16)
 800be9c:	8809883a 	mov	r4,r17
 800bea0:	84000044 	addi	r16,r16,1
 800bea4:	100b883a 	mov	r5,r2
 800bea8:	01800284 	movi	r6,10
 800beac:	39fff404 	addi	r7,r7,-48
 800beb0:	800bcd00 	call	800bcd0 <__multadd>
 800beb4:	84bff81e 	bne	r16,r18,800be98 <__alt_data_end+0xfc00be98>
 800beb8:	dfc00617 	ldw	ra,24(sp)
 800bebc:	dd400517 	ldw	r21,20(sp)
 800bec0:	dd000417 	ldw	r20,16(sp)
 800bec4:	dcc00317 	ldw	r19,12(sp)
 800bec8:	dc800217 	ldw	r18,8(sp)
 800becc:	dc400117 	ldw	r17,4(sp)
 800bed0:	dc000017 	ldw	r16,0(sp)
 800bed4:	dec00704 	addi	sp,sp,28
 800bed8:	f800283a 	ret
 800bedc:	84000284 	addi	r16,r16,10
 800bee0:	1827883a 	mov	r19,r3
 800bee4:	003fe906 	br	800be8c <__alt_data_end+0xfc00be8c>

0800bee8 <__hi0bits>:
 800bee8:	20bfffec 	andhi	r2,r4,65535
 800beec:	1000141e 	bne	r2,zero,800bf40 <__hi0bits+0x58>
 800bef0:	2008943a 	slli	r4,r4,16
 800bef4:	00800404 	movi	r2,16
 800bef8:	20ffc02c 	andhi	r3,r4,65280
 800befc:	1800021e 	bne	r3,zero,800bf08 <__hi0bits+0x20>
 800bf00:	2008923a 	slli	r4,r4,8
 800bf04:	10800204 	addi	r2,r2,8
 800bf08:	20fc002c 	andhi	r3,r4,61440
 800bf0c:	1800021e 	bne	r3,zero,800bf18 <__hi0bits+0x30>
 800bf10:	2008913a 	slli	r4,r4,4
 800bf14:	10800104 	addi	r2,r2,4
 800bf18:	20f0002c 	andhi	r3,r4,49152
 800bf1c:	1800031e 	bne	r3,zero,800bf2c <__hi0bits+0x44>
 800bf20:	2109883a 	add	r4,r4,r4
 800bf24:	10800084 	addi	r2,r2,2
 800bf28:	2109883a 	add	r4,r4,r4
 800bf2c:	20000316 	blt	r4,zero,800bf3c <__hi0bits+0x54>
 800bf30:	2110002c 	andhi	r4,r4,16384
 800bf34:	2000041e 	bne	r4,zero,800bf48 <__hi0bits+0x60>
 800bf38:	00800804 	movi	r2,32
 800bf3c:	f800283a 	ret
 800bf40:	0005883a 	mov	r2,zero
 800bf44:	003fec06 	br	800bef8 <__alt_data_end+0xfc00bef8>
 800bf48:	10800044 	addi	r2,r2,1
 800bf4c:	f800283a 	ret

0800bf50 <__lo0bits>:
 800bf50:	20c00017 	ldw	r3,0(r4)
 800bf54:	188001cc 	andi	r2,r3,7
 800bf58:	10000826 	beq	r2,zero,800bf7c <__lo0bits+0x2c>
 800bf5c:	1880004c 	andi	r2,r3,1
 800bf60:	1000211e 	bne	r2,zero,800bfe8 <__lo0bits+0x98>
 800bf64:	1880008c 	andi	r2,r3,2
 800bf68:	1000211e 	bne	r2,zero,800bff0 <__lo0bits+0xa0>
 800bf6c:	1806d0ba 	srli	r3,r3,2
 800bf70:	00800084 	movi	r2,2
 800bf74:	20c00015 	stw	r3,0(r4)
 800bf78:	f800283a 	ret
 800bf7c:	18bfffcc 	andi	r2,r3,65535
 800bf80:	10001326 	beq	r2,zero,800bfd0 <__lo0bits+0x80>
 800bf84:	0005883a 	mov	r2,zero
 800bf88:	19403fcc 	andi	r5,r3,255
 800bf8c:	2800021e 	bne	r5,zero,800bf98 <__lo0bits+0x48>
 800bf90:	1806d23a 	srli	r3,r3,8
 800bf94:	10800204 	addi	r2,r2,8
 800bf98:	194003cc 	andi	r5,r3,15
 800bf9c:	2800021e 	bne	r5,zero,800bfa8 <__lo0bits+0x58>
 800bfa0:	1806d13a 	srli	r3,r3,4
 800bfa4:	10800104 	addi	r2,r2,4
 800bfa8:	194000cc 	andi	r5,r3,3
 800bfac:	2800021e 	bne	r5,zero,800bfb8 <__lo0bits+0x68>
 800bfb0:	1806d0ba 	srli	r3,r3,2
 800bfb4:	10800084 	addi	r2,r2,2
 800bfb8:	1940004c 	andi	r5,r3,1
 800bfbc:	2800081e 	bne	r5,zero,800bfe0 <__lo0bits+0x90>
 800bfc0:	1806d07a 	srli	r3,r3,1
 800bfc4:	1800051e 	bne	r3,zero,800bfdc <__lo0bits+0x8c>
 800bfc8:	00800804 	movi	r2,32
 800bfcc:	f800283a 	ret
 800bfd0:	1806d43a 	srli	r3,r3,16
 800bfd4:	00800404 	movi	r2,16
 800bfd8:	003feb06 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800bfdc:	10800044 	addi	r2,r2,1
 800bfe0:	20c00015 	stw	r3,0(r4)
 800bfe4:	f800283a 	ret
 800bfe8:	0005883a 	mov	r2,zero
 800bfec:	f800283a 	ret
 800bff0:	1806d07a 	srli	r3,r3,1
 800bff4:	00800044 	movi	r2,1
 800bff8:	20c00015 	stw	r3,0(r4)
 800bffc:	f800283a 	ret

0800c000 <__i2b>:
 800c000:	defffd04 	addi	sp,sp,-12
 800c004:	dc000015 	stw	r16,0(sp)
 800c008:	04000044 	movi	r16,1
 800c00c:	dc400115 	stw	r17,4(sp)
 800c010:	2823883a 	mov	r17,r5
 800c014:	800b883a 	mov	r5,r16
 800c018:	dfc00215 	stw	ra,8(sp)
 800c01c:	800bc000 	call	800bc00 <_Balloc>
 800c020:	14400515 	stw	r17,20(r2)
 800c024:	14000415 	stw	r16,16(r2)
 800c028:	dfc00217 	ldw	ra,8(sp)
 800c02c:	dc400117 	ldw	r17,4(sp)
 800c030:	dc000017 	ldw	r16,0(sp)
 800c034:	dec00304 	addi	sp,sp,12
 800c038:	f800283a 	ret

0800c03c <__multiply>:
 800c03c:	defffa04 	addi	sp,sp,-24
 800c040:	dcc00315 	stw	r19,12(sp)
 800c044:	dc800215 	stw	r18,8(sp)
 800c048:	2cc00417 	ldw	r19,16(r5)
 800c04c:	34800417 	ldw	r18,16(r6)
 800c050:	dd000415 	stw	r20,16(sp)
 800c054:	dc400115 	stw	r17,4(sp)
 800c058:	dfc00515 	stw	ra,20(sp)
 800c05c:	dc000015 	stw	r16,0(sp)
 800c060:	2829883a 	mov	r20,r5
 800c064:	3023883a 	mov	r17,r6
 800c068:	9c807016 	blt	r19,r18,800c22c <__multiply+0x1f0>
 800c06c:	9005883a 	mov	r2,r18
 800c070:	9825883a 	mov	r18,r19
 800c074:	1027883a 	mov	r19,r2
 800c078:	a0800217 	ldw	r2,8(r20)
 800c07c:	94e1883a 	add	r16,r18,r19
 800c080:	a1400117 	ldw	r5,4(r20)
 800c084:	1400010e 	bge	r2,r16,800c08c <__multiply+0x50>
 800c088:	29400044 	addi	r5,r5,1
 800c08c:	800bc000 	call	800bc00 <_Balloc>
 800c090:	8417883a 	add	r11,r16,r16
 800c094:	13000504 	addi	r12,r2,20
 800c098:	5ad7883a 	add	r11,r11,r11
 800c09c:	62d7883a 	add	r11,r12,r11
 800c0a0:	6007883a 	mov	r3,r12
 800c0a4:	62c0032e 	bgeu	r12,r11,800c0b4 <__multiply+0x78>
 800c0a8:	18000015 	stw	zero,0(r3)
 800c0ac:	18c00104 	addi	r3,r3,4
 800c0b0:	1afffd36 	bltu	r3,r11,800c0a8 <__alt_data_end+0xfc00c0a8>
 800c0b4:	9ce7883a 	add	r19,r19,r19
 800c0b8:	94a5883a 	add	r18,r18,r18
 800c0bc:	89800504 	addi	r6,r17,20
 800c0c0:	9ce7883a 	add	r19,r19,r19
 800c0c4:	a3800504 	addi	r14,r20,20
 800c0c8:	94a5883a 	add	r18,r18,r18
 800c0cc:	34db883a 	add	r13,r6,r19
 800c0d0:	7495883a 	add	r10,r14,r18
 800c0d4:	3340422e 	bgeu	r6,r13,800c1e0 <__multiply+0x1a4>
 800c0d8:	34400017 	ldw	r17,0(r6)
 800c0dc:	8cbfffcc 	andi	r18,r17,65535
 800c0e0:	90001b26 	beq	r18,zero,800c150 <__multiply+0x114>
 800c0e4:	6013883a 	mov	r9,r12
 800c0e8:	7023883a 	mov	r17,r14
 800c0ec:	0011883a 	mov	r8,zero
 800c0f0:	88c00017 	ldw	r3,0(r17)
 800c0f4:	4bc00017 	ldw	r15,0(r9)
 800c0f8:	8c400104 	addi	r17,r17,4
 800c0fc:	19ffffcc 	andi	r7,r3,65535
 800c100:	3c8f383a 	mul	r7,r7,r18
 800c104:	1808d43a 	srli	r4,r3,16
 800c108:	797fffcc 	andi	r5,r15,65535
 800c10c:	29cb883a 	add	r5,r5,r7
 800c110:	2a0b883a 	add	r5,r5,r8
 800c114:	2489383a 	mul	r4,r4,r18
 800c118:	7806d43a 	srli	r3,r15,16
 800c11c:	2810d43a 	srli	r8,r5,16
 800c120:	297fffcc 	andi	r5,r5,65535
 800c124:	1907883a 	add	r3,r3,r4
 800c128:	1a07883a 	add	r3,r3,r8
 800c12c:	1808943a 	slli	r4,r3,16
 800c130:	480f883a 	mov	r7,r9
 800c134:	1810d43a 	srli	r8,r3,16
 800c138:	214ab03a 	or	r5,r4,r5
 800c13c:	49400015 	stw	r5,0(r9)
 800c140:	4a400104 	addi	r9,r9,4
 800c144:	8abfea36 	bltu	r17,r10,800c0f0 <__alt_data_end+0xfc00c0f0>
 800c148:	3a000115 	stw	r8,4(r7)
 800c14c:	34400017 	ldw	r17,0(r6)
 800c150:	8822d43a 	srli	r17,r17,16
 800c154:	88001f26 	beq	r17,zero,800c1d4 <__multiply+0x198>
 800c158:	60c00017 	ldw	r3,0(r12)
 800c15c:	7013883a 	mov	r9,r14
 800c160:	601f883a 	mov	r15,r12
 800c164:	1811883a 	mov	r8,r3
 800c168:	6027883a 	mov	r19,r12
 800c16c:	000f883a 	mov	r7,zero
 800c170:	00000106 	br	800c178 <__multiply+0x13c>
 800c174:	9027883a 	mov	r19,r18
 800c178:	4940000b 	ldhu	r5,0(r9)
 800c17c:	4010d43a 	srli	r8,r8,16
 800c180:	193fffcc 	andi	r4,r3,65535
 800c184:	2c4b383a 	mul	r5,r5,r17
 800c188:	7bc00104 	addi	r15,r15,4
 800c18c:	4a400104 	addi	r9,r9,4
 800c190:	2a0b883a 	add	r5,r5,r8
 800c194:	29cb883a 	add	r5,r5,r7
 800c198:	2806943a 	slli	r3,r5,16
 800c19c:	9c800104 	addi	r18,r19,4
 800c1a0:	280ad43a 	srli	r5,r5,16
 800c1a4:	1908b03a 	or	r4,r3,r4
 800c1a8:	793fff15 	stw	r4,-4(r15)
 800c1ac:	48ffff17 	ldw	r3,-4(r9)
 800c1b0:	92000017 	ldw	r8,0(r18)
 800c1b4:	1806d43a 	srli	r3,r3,16
 800c1b8:	413fffcc 	andi	r4,r8,65535
 800c1bc:	1c47383a 	mul	r3,r3,r17
 800c1c0:	1907883a 	add	r3,r3,r4
 800c1c4:	1947883a 	add	r3,r3,r5
 800c1c8:	180ed43a 	srli	r7,r3,16
 800c1cc:	4abfe936 	bltu	r9,r10,800c174 <__alt_data_end+0xfc00c174>
 800c1d0:	98c00115 	stw	r3,4(r19)
 800c1d4:	31800104 	addi	r6,r6,4
 800c1d8:	63000104 	addi	r12,r12,4
 800c1dc:	337fbe36 	bltu	r6,r13,800c0d8 <__alt_data_end+0xfc00c0d8>
 800c1e0:	0400090e 	bge	zero,r16,800c208 <__multiply+0x1cc>
 800c1e4:	58ffff17 	ldw	r3,-4(r11)
 800c1e8:	5affff04 	addi	r11,r11,-4
 800c1ec:	18000326 	beq	r3,zero,800c1fc <__multiply+0x1c0>
 800c1f0:	00000506 	br	800c208 <__multiply+0x1cc>
 800c1f4:	58c00017 	ldw	r3,0(r11)
 800c1f8:	1800031e 	bne	r3,zero,800c208 <__multiply+0x1cc>
 800c1fc:	843fffc4 	addi	r16,r16,-1
 800c200:	5affff04 	addi	r11,r11,-4
 800c204:	803ffb1e 	bne	r16,zero,800c1f4 <__alt_data_end+0xfc00c1f4>
 800c208:	14000415 	stw	r16,16(r2)
 800c20c:	dfc00517 	ldw	ra,20(sp)
 800c210:	dd000417 	ldw	r20,16(sp)
 800c214:	dcc00317 	ldw	r19,12(sp)
 800c218:	dc800217 	ldw	r18,8(sp)
 800c21c:	dc400117 	ldw	r17,4(sp)
 800c220:	dc000017 	ldw	r16,0(sp)
 800c224:	dec00604 	addi	sp,sp,24
 800c228:	f800283a 	ret
 800c22c:	3029883a 	mov	r20,r6
 800c230:	2823883a 	mov	r17,r5
 800c234:	003f9006 	br	800c078 <__alt_data_end+0xfc00c078>

0800c238 <__pow5mult>:
 800c238:	defffa04 	addi	sp,sp,-24
 800c23c:	dcc00315 	stw	r19,12(sp)
 800c240:	dc800215 	stw	r18,8(sp)
 800c244:	dc000015 	stw	r16,0(sp)
 800c248:	dfc00515 	stw	ra,20(sp)
 800c24c:	dd000415 	stw	r20,16(sp)
 800c250:	dc400115 	stw	r17,4(sp)
 800c254:	308000cc 	andi	r2,r6,3
 800c258:	3021883a 	mov	r16,r6
 800c25c:	2027883a 	mov	r19,r4
 800c260:	2825883a 	mov	r18,r5
 800c264:	10002e1e 	bne	r2,zero,800c320 <__pow5mult+0xe8>
 800c268:	8021d0ba 	srai	r16,r16,2
 800c26c:	80001a26 	beq	r16,zero,800c2d8 <__pow5mult+0xa0>
 800c270:	9c401217 	ldw	r17,72(r19)
 800c274:	8800061e 	bne	r17,zero,800c290 <__pow5mult+0x58>
 800c278:	00003406 	br	800c34c <__pow5mult+0x114>
 800c27c:	8021d07a 	srai	r16,r16,1
 800c280:	80001526 	beq	r16,zero,800c2d8 <__pow5mult+0xa0>
 800c284:	88800017 	ldw	r2,0(r17)
 800c288:	10001c26 	beq	r2,zero,800c2fc <__pow5mult+0xc4>
 800c28c:	1023883a 	mov	r17,r2
 800c290:	80c0004c 	andi	r3,r16,1
 800c294:	183ff926 	beq	r3,zero,800c27c <__alt_data_end+0xfc00c27c>
 800c298:	900b883a 	mov	r5,r18
 800c29c:	880d883a 	mov	r6,r17
 800c2a0:	9809883a 	mov	r4,r19
 800c2a4:	800c03c0 	call	800c03c <__multiply>
 800c2a8:	90001b26 	beq	r18,zero,800c318 <__pow5mult+0xe0>
 800c2ac:	91c00117 	ldw	r7,4(r18)
 800c2b0:	98c01317 	ldw	r3,76(r19)
 800c2b4:	8021d07a 	srai	r16,r16,1
 800c2b8:	39cf883a 	add	r7,r7,r7
 800c2bc:	39cf883a 	add	r7,r7,r7
 800c2c0:	19c7883a 	add	r3,r3,r7
 800c2c4:	19000017 	ldw	r4,0(r3)
 800c2c8:	91000015 	stw	r4,0(r18)
 800c2cc:	1c800015 	stw	r18,0(r3)
 800c2d0:	1025883a 	mov	r18,r2
 800c2d4:	803feb1e 	bne	r16,zero,800c284 <__alt_data_end+0xfc00c284>
 800c2d8:	9005883a 	mov	r2,r18
 800c2dc:	dfc00517 	ldw	ra,20(sp)
 800c2e0:	dd000417 	ldw	r20,16(sp)
 800c2e4:	dcc00317 	ldw	r19,12(sp)
 800c2e8:	dc800217 	ldw	r18,8(sp)
 800c2ec:	dc400117 	ldw	r17,4(sp)
 800c2f0:	dc000017 	ldw	r16,0(sp)
 800c2f4:	dec00604 	addi	sp,sp,24
 800c2f8:	f800283a 	ret
 800c2fc:	9809883a 	mov	r4,r19
 800c300:	880b883a 	mov	r5,r17
 800c304:	880d883a 	mov	r6,r17
 800c308:	800c03c0 	call	800c03c <__multiply>
 800c30c:	88800015 	stw	r2,0(r17)
 800c310:	10000015 	stw	zero,0(r2)
 800c314:	003fdd06 	br	800c28c <__alt_data_end+0xfc00c28c>
 800c318:	1025883a 	mov	r18,r2
 800c31c:	003fd706 	br	800c27c <__alt_data_end+0xfc00c27c>
 800c320:	10bfffc4 	addi	r2,r2,-1
 800c324:	1085883a 	add	r2,r2,r2
 800c328:	00c200b4 	movhi	r3,2050
 800c32c:	18c0c104 	addi	r3,r3,772
 800c330:	1085883a 	add	r2,r2,r2
 800c334:	1885883a 	add	r2,r3,r2
 800c338:	11800017 	ldw	r6,0(r2)
 800c33c:	000f883a 	mov	r7,zero
 800c340:	800bcd00 	call	800bcd0 <__multadd>
 800c344:	1025883a 	mov	r18,r2
 800c348:	003fc706 	br	800c268 <__alt_data_end+0xfc00c268>
 800c34c:	05000044 	movi	r20,1
 800c350:	9809883a 	mov	r4,r19
 800c354:	a00b883a 	mov	r5,r20
 800c358:	800bc000 	call	800bc00 <_Balloc>
 800c35c:	1023883a 	mov	r17,r2
 800c360:	00809c44 	movi	r2,625
 800c364:	88800515 	stw	r2,20(r17)
 800c368:	8d000415 	stw	r20,16(r17)
 800c36c:	9c401215 	stw	r17,72(r19)
 800c370:	88000015 	stw	zero,0(r17)
 800c374:	003fc606 	br	800c290 <__alt_data_end+0xfc00c290>

0800c378 <__lshift>:
 800c378:	defff904 	addi	sp,sp,-28
 800c37c:	dd000415 	stw	r20,16(sp)
 800c380:	dcc00315 	stw	r19,12(sp)
 800c384:	3029d17a 	srai	r20,r6,5
 800c388:	2cc00417 	ldw	r19,16(r5)
 800c38c:	28800217 	ldw	r2,8(r5)
 800c390:	dd400515 	stw	r21,20(sp)
 800c394:	a4e7883a 	add	r19,r20,r19
 800c398:	dc800215 	stw	r18,8(sp)
 800c39c:	dc400115 	stw	r17,4(sp)
 800c3a0:	dc000015 	stw	r16,0(sp)
 800c3a4:	dfc00615 	stw	ra,24(sp)
 800c3a8:	9c000044 	addi	r16,r19,1
 800c3ac:	2823883a 	mov	r17,r5
 800c3b0:	302b883a 	mov	r21,r6
 800c3b4:	2025883a 	mov	r18,r4
 800c3b8:	29400117 	ldw	r5,4(r5)
 800c3bc:	1400030e 	bge	r2,r16,800c3cc <__lshift+0x54>
 800c3c0:	1085883a 	add	r2,r2,r2
 800c3c4:	29400044 	addi	r5,r5,1
 800c3c8:	143ffd16 	blt	r2,r16,800c3c0 <__alt_data_end+0xfc00c3c0>
 800c3cc:	9009883a 	mov	r4,r18
 800c3d0:	800bc000 	call	800bc00 <_Balloc>
 800c3d4:	11c00504 	addi	r7,r2,20
 800c3d8:	0500090e 	bge	zero,r20,800c400 <__lshift+0x88>
 800c3dc:	3811883a 	mov	r8,r7
 800c3e0:	0007883a 	mov	r3,zero
 800c3e4:	40000015 	stw	zero,0(r8)
 800c3e8:	18c00044 	addi	r3,r3,1
 800c3ec:	42000104 	addi	r8,r8,4
 800c3f0:	1d3ffc1e 	bne	r3,r20,800c3e4 <__alt_data_end+0xfc00c3e4>
 800c3f4:	18c7883a 	add	r3,r3,r3
 800c3f8:	18c7883a 	add	r3,r3,r3
 800c3fc:	38cf883a 	add	r7,r7,r3
 800c400:	89000417 	ldw	r4,16(r17)
 800c404:	88c00504 	addi	r3,r17,20
 800c408:	a98007cc 	andi	r6,r21,31
 800c40c:	2109883a 	add	r4,r4,r4
 800c410:	2109883a 	add	r4,r4,r4
 800c414:	1909883a 	add	r4,r3,r4
 800c418:	30002326 	beq	r6,zero,800c4a8 <__lshift+0x130>
 800c41c:	01400804 	movi	r5,32
 800c420:	298bc83a 	sub	r5,r5,r6
 800c424:	0013883a 	mov	r9,zero
 800c428:	1a000017 	ldw	r8,0(r3)
 800c42c:	3815883a 	mov	r10,r7
 800c430:	39c00104 	addi	r7,r7,4
 800c434:	4190983a 	sll	r8,r8,r6
 800c438:	18c00104 	addi	r3,r3,4
 800c43c:	4a10b03a 	or	r8,r9,r8
 800c440:	3a3fff15 	stw	r8,-4(r7)
 800c444:	1a3fff17 	ldw	r8,-4(r3)
 800c448:	4152d83a 	srl	r9,r8,r5
 800c44c:	193ff636 	bltu	r3,r4,800c428 <__alt_data_end+0xfc00c428>
 800c450:	52400115 	stw	r9,4(r10)
 800c454:	48000126 	beq	r9,zero,800c45c <__lshift+0xe4>
 800c458:	9c000084 	addi	r16,r19,2
 800c45c:	89000117 	ldw	r4,4(r17)
 800c460:	90c01317 	ldw	r3,76(r18)
 800c464:	843fffc4 	addi	r16,r16,-1
 800c468:	2109883a 	add	r4,r4,r4
 800c46c:	2109883a 	add	r4,r4,r4
 800c470:	1907883a 	add	r3,r3,r4
 800c474:	19000017 	ldw	r4,0(r3)
 800c478:	14000415 	stw	r16,16(r2)
 800c47c:	89000015 	stw	r4,0(r17)
 800c480:	1c400015 	stw	r17,0(r3)
 800c484:	dfc00617 	ldw	ra,24(sp)
 800c488:	dd400517 	ldw	r21,20(sp)
 800c48c:	dd000417 	ldw	r20,16(sp)
 800c490:	dcc00317 	ldw	r19,12(sp)
 800c494:	dc800217 	ldw	r18,8(sp)
 800c498:	dc400117 	ldw	r17,4(sp)
 800c49c:	dc000017 	ldw	r16,0(sp)
 800c4a0:	dec00704 	addi	sp,sp,28
 800c4a4:	f800283a 	ret
 800c4a8:	19400017 	ldw	r5,0(r3)
 800c4ac:	39c00104 	addi	r7,r7,4
 800c4b0:	18c00104 	addi	r3,r3,4
 800c4b4:	397fff15 	stw	r5,-4(r7)
 800c4b8:	193ffb36 	bltu	r3,r4,800c4a8 <__alt_data_end+0xfc00c4a8>
 800c4bc:	003fe706 	br	800c45c <__alt_data_end+0xfc00c45c>

0800c4c0 <__mcmp>:
 800c4c0:	20800417 	ldw	r2,16(r4)
 800c4c4:	28c00417 	ldw	r3,16(r5)
 800c4c8:	10c5c83a 	sub	r2,r2,r3
 800c4cc:	1000111e 	bne	r2,zero,800c514 <__mcmp+0x54>
 800c4d0:	18c7883a 	add	r3,r3,r3
 800c4d4:	18c7883a 	add	r3,r3,r3
 800c4d8:	21000504 	addi	r4,r4,20
 800c4dc:	29400504 	addi	r5,r5,20
 800c4e0:	20c5883a 	add	r2,r4,r3
 800c4e4:	28cb883a 	add	r5,r5,r3
 800c4e8:	00000106 	br	800c4f0 <__mcmp+0x30>
 800c4ec:	20800a2e 	bgeu	r4,r2,800c518 <__mcmp+0x58>
 800c4f0:	10bfff04 	addi	r2,r2,-4
 800c4f4:	297fff04 	addi	r5,r5,-4
 800c4f8:	11800017 	ldw	r6,0(r2)
 800c4fc:	28c00017 	ldw	r3,0(r5)
 800c500:	30fffa26 	beq	r6,r3,800c4ec <__alt_data_end+0xfc00c4ec>
 800c504:	30c00236 	bltu	r6,r3,800c510 <__mcmp+0x50>
 800c508:	00800044 	movi	r2,1
 800c50c:	f800283a 	ret
 800c510:	00bfffc4 	movi	r2,-1
 800c514:	f800283a 	ret
 800c518:	0005883a 	mov	r2,zero
 800c51c:	f800283a 	ret

0800c520 <__mdiff>:
 800c520:	defffb04 	addi	sp,sp,-20
 800c524:	dc000015 	stw	r16,0(sp)
 800c528:	2821883a 	mov	r16,r5
 800c52c:	dcc00315 	stw	r19,12(sp)
 800c530:	300b883a 	mov	r5,r6
 800c534:	2027883a 	mov	r19,r4
 800c538:	8009883a 	mov	r4,r16
 800c53c:	dc800215 	stw	r18,8(sp)
 800c540:	dfc00415 	stw	ra,16(sp)
 800c544:	dc400115 	stw	r17,4(sp)
 800c548:	3025883a 	mov	r18,r6
 800c54c:	800c4c00 	call	800c4c0 <__mcmp>
 800c550:	10005226 	beq	r2,zero,800c69c <__mdiff+0x17c>
 800c554:	10004c16 	blt	r2,zero,800c688 <__mdiff+0x168>
 800c558:	0023883a 	mov	r17,zero
 800c55c:	81400117 	ldw	r5,4(r16)
 800c560:	9809883a 	mov	r4,r19
 800c564:	800bc000 	call	800bc00 <_Balloc>
 800c568:	83400417 	ldw	r13,16(r16)
 800c56c:	93800417 	ldw	r14,16(r18)
 800c570:	81000504 	addi	r4,r16,20
 800c574:	6b59883a 	add	r12,r13,r13
 800c578:	739d883a 	add	r14,r14,r14
 800c57c:	6319883a 	add	r12,r12,r12
 800c580:	91800504 	addi	r6,r18,20
 800c584:	739d883a 	add	r14,r14,r14
 800c588:	14400315 	stw	r17,12(r2)
 800c58c:	2319883a 	add	r12,r4,r12
 800c590:	339d883a 	add	r14,r6,r14
 800c594:	12400504 	addi	r9,r2,20
 800c598:	0007883a 	mov	r3,zero
 800c59c:	22000017 	ldw	r8,0(r4)
 800c5a0:	32800017 	ldw	r10,0(r6)
 800c5a4:	4ac00104 	addi	r11,r9,4
 800c5a8:	41ffffcc 	andi	r7,r8,65535
 800c5ac:	38c7883a 	add	r3,r7,r3
 800c5b0:	51ffffcc 	andi	r7,r10,65535
 800c5b4:	19cfc83a 	sub	r7,r3,r7
 800c5b8:	4010d43a 	srli	r8,r8,16
 800c5bc:	5014d43a 	srli	r10,r10,16
 800c5c0:	3807d43a 	srai	r3,r7,16
 800c5c4:	39ffffcc 	andi	r7,r7,65535
 800c5c8:	4291c83a 	sub	r8,r8,r10
 800c5cc:	40c7883a 	add	r3,r8,r3
 800c5d0:	1810943a 	slli	r8,r3,16
 800c5d4:	31800104 	addi	r6,r6,4
 800c5d8:	21000104 	addi	r4,r4,4
 800c5dc:	41ceb03a 	or	r7,r8,r7
 800c5e0:	49c00015 	stw	r7,0(r9)
 800c5e4:	1807d43a 	srai	r3,r3,16
 800c5e8:	580b883a 	mov	r5,r11
 800c5ec:	5813883a 	mov	r9,r11
 800c5f0:	33bfea36 	bltu	r6,r14,800c59c <__alt_data_end+0xfc00c59c>
 800c5f4:	2011883a 	mov	r8,r4
 800c5f8:	2300152e 	bgeu	r4,r12,800c650 <__mdiff+0x130>
 800c5fc:	21400017 	ldw	r5,0(r4)
 800c600:	4a400104 	addi	r9,r9,4
 800c604:	21000104 	addi	r4,r4,4
 800c608:	29ffffcc 	andi	r7,r5,65535
 800c60c:	38c7883a 	add	r3,r7,r3
 800c610:	280ad43a 	srli	r5,r5,16
 800c614:	180dd43a 	srai	r6,r3,16
 800c618:	19ffffcc 	andi	r7,r3,65535
 800c61c:	3147883a 	add	r3,r6,r5
 800c620:	180a943a 	slli	r5,r3,16
 800c624:	1807d43a 	srai	r3,r3,16
 800c628:	29ceb03a 	or	r7,r5,r7
 800c62c:	49ffff15 	stw	r7,-4(r9)
 800c630:	233ff236 	bltu	r4,r12,800c5fc <__alt_data_end+0xfc00c5fc>
 800c634:	0206303a 	nor	r3,zero,r8
 800c638:	1b07883a 	add	r3,r3,r12
 800c63c:	1806d0ba 	srli	r3,r3,2
 800c640:	18c00044 	addi	r3,r3,1
 800c644:	18c7883a 	add	r3,r3,r3
 800c648:	18c7883a 	add	r3,r3,r3
 800c64c:	58cb883a 	add	r5,r11,r3
 800c650:	28ffff04 	addi	r3,r5,-4
 800c654:	3800041e 	bne	r7,zero,800c668 <__mdiff+0x148>
 800c658:	18ffff04 	addi	r3,r3,-4
 800c65c:	19000017 	ldw	r4,0(r3)
 800c660:	6b7fffc4 	addi	r13,r13,-1
 800c664:	203ffc26 	beq	r4,zero,800c658 <__alt_data_end+0xfc00c658>
 800c668:	13400415 	stw	r13,16(r2)
 800c66c:	dfc00417 	ldw	ra,16(sp)
 800c670:	dcc00317 	ldw	r19,12(sp)
 800c674:	dc800217 	ldw	r18,8(sp)
 800c678:	dc400117 	ldw	r17,4(sp)
 800c67c:	dc000017 	ldw	r16,0(sp)
 800c680:	dec00504 	addi	sp,sp,20
 800c684:	f800283a 	ret
 800c688:	8005883a 	mov	r2,r16
 800c68c:	04400044 	movi	r17,1
 800c690:	9021883a 	mov	r16,r18
 800c694:	1025883a 	mov	r18,r2
 800c698:	003fb006 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c69c:	9809883a 	mov	r4,r19
 800c6a0:	000b883a 	mov	r5,zero
 800c6a4:	800bc000 	call	800bc00 <_Balloc>
 800c6a8:	00c00044 	movi	r3,1
 800c6ac:	10c00415 	stw	r3,16(r2)
 800c6b0:	10000515 	stw	zero,20(r2)
 800c6b4:	003fed06 	br	800c66c <__alt_data_end+0xfc00c66c>

0800c6b8 <__ulp>:
 800c6b8:	295ffc2c 	andhi	r5,r5,32752
 800c6bc:	00bf3034 	movhi	r2,64704
 800c6c0:	2887883a 	add	r3,r5,r2
 800c6c4:	00c0020e 	bge	zero,r3,800c6d0 <__ulp+0x18>
 800c6c8:	0005883a 	mov	r2,zero
 800c6cc:	f800283a 	ret
 800c6d0:	00c7c83a 	sub	r3,zero,r3
 800c6d4:	180bd53a 	srai	r5,r3,20
 800c6d8:	008004c4 	movi	r2,19
 800c6dc:	11400a0e 	bge	r2,r5,800c708 <__ulp+0x50>
 800c6e0:	00800c84 	movi	r2,50
 800c6e4:	0007883a 	mov	r3,zero
 800c6e8:	11400516 	blt	r2,r5,800c700 <__ulp+0x48>
 800c6ec:	00800cc4 	movi	r2,51
 800c6f0:	114bc83a 	sub	r5,r2,r5
 800c6f4:	00800044 	movi	r2,1
 800c6f8:	1144983a 	sll	r2,r2,r5
 800c6fc:	f800283a 	ret
 800c700:	00800044 	movi	r2,1
 800c704:	f800283a 	ret
 800c708:	00800234 	movhi	r2,8
 800c70c:	1147d83a 	sra	r3,r2,r5
 800c710:	0005883a 	mov	r2,zero
 800c714:	f800283a 	ret

0800c718 <__b2d>:
 800c718:	defffa04 	addi	sp,sp,-24
 800c71c:	dc000015 	stw	r16,0(sp)
 800c720:	24000417 	ldw	r16,16(r4)
 800c724:	dc400115 	stw	r17,4(sp)
 800c728:	24400504 	addi	r17,r4,20
 800c72c:	8421883a 	add	r16,r16,r16
 800c730:	8421883a 	add	r16,r16,r16
 800c734:	8c21883a 	add	r16,r17,r16
 800c738:	dc800215 	stw	r18,8(sp)
 800c73c:	84bfff17 	ldw	r18,-4(r16)
 800c740:	dd000415 	stw	r20,16(sp)
 800c744:	dcc00315 	stw	r19,12(sp)
 800c748:	9009883a 	mov	r4,r18
 800c74c:	2829883a 	mov	r20,r5
 800c750:	dfc00515 	stw	ra,20(sp)
 800c754:	800bee80 	call	800bee8 <__hi0bits>
 800c758:	00c00804 	movi	r3,32
 800c75c:	1887c83a 	sub	r3,r3,r2
 800c760:	a0c00015 	stw	r3,0(r20)
 800c764:	00c00284 	movi	r3,10
 800c768:	84ffff04 	addi	r19,r16,-4
 800c76c:	18801216 	blt	r3,r2,800c7b8 <__b2d+0xa0>
 800c770:	014002c4 	movi	r5,11
 800c774:	2889c83a 	sub	r4,r5,r2
 800c778:	9106d83a 	srl	r3,r18,r4
 800c77c:	18cffc34 	orhi	r3,r3,16368
 800c780:	8cc0282e 	bgeu	r17,r19,800c824 <__b2d+0x10c>
 800c784:	817ffe17 	ldw	r5,-8(r16)
 800c788:	290ad83a 	srl	r5,r5,r4
 800c78c:	10800544 	addi	r2,r2,21
 800c790:	9084983a 	sll	r2,r18,r2
 800c794:	2884b03a 	or	r2,r5,r2
 800c798:	dfc00517 	ldw	ra,20(sp)
 800c79c:	dd000417 	ldw	r20,16(sp)
 800c7a0:	dcc00317 	ldw	r19,12(sp)
 800c7a4:	dc800217 	ldw	r18,8(sp)
 800c7a8:	dc400117 	ldw	r17,4(sp)
 800c7ac:	dc000017 	ldw	r16,0(sp)
 800c7b0:	dec00604 	addi	sp,sp,24
 800c7b4:	f800283a 	ret
 800c7b8:	113ffd44 	addi	r4,r2,-11
 800c7bc:	8cc00f2e 	bgeu	r17,r19,800c7fc <__b2d+0xe4>
 800c7c0:	81bffe04 	addi	r6,r16,-8
 800c7c4:	817ffe17 	ldw	r5,-8(r16)
 800c7c8:	20001326 	beq	r4,zero,800c818 <__b2d+0x100>
 800c7cc:	00c00ac4 	movi	r3,43
 800c7d0:	1885c83a 	sub	r2,r3,r2
 800c7d4:	2886d83a 	srl	r3,r5,r2
 800c7d8:	9124983a 	sll	r18,r18,r4
 800c7dc:	90e4b03a 	or	r18,r18,r3
 800c7e0:	90cffc34 	orhi	r3,r18,16368
 800c7e4:	8980112e 	bgeu	r17,r6,800c82c <__b2d+0x114>
 800c7e8:	81bffd17 	ldw	r6,-12(r16)
 800c7ec:	308cd83a 	srl	r6,r6,r2
 800c7f0:	2904983a 	sll	r2,r5,r4
 800c7f4:	1184b03a 	or	r2,r2,r6
 800c7f8:	003fe706 	br	800c798 <__alt_data_end+0xfc00c798>
 800c7fc:	20000526 	beq	r4,zero,800c814 <__b2d+0xfc>
 800c800:	9124983a 	sll	r18,r18,r4
 800c804:	000d883a 	mov	r6,zero
 800c808:	000b883a 	mov	r5,zero
 800c80c:	90cffc34 	orhi	r3,r18,16368
 800c810:	003ff706 	br	800c7f0 <__alt_data_end+0xfc00c7f0>
 800c814:	000b883a 	mov	r5,zero
 800c818:	90cffc34 	orhi	r3,r18,16368
 800c81c:	2805883a 	mov	r2,r5
 800c820:	003fdd06 	br	800c798 <__alt_data_end+0xfc00c798>
 800c824:	000b883a 	mov	r5,zero
 800c828:	003fd806 	br	800c78c <__alt_data_end+0xfc00c78c>
 800c82c:	000d883a 	mov	r6,zero
 800c830:	003fef06 	br	800c7f0 <__alt_data_end+0xfc00c7f0>

0800c834 <__d2b>:
 800c834:	defff704 	addi	sp,sp,-36
 800c838:	dc000215 	stw	r16,8(sp)
 800c83c:	3021883a 	mov	r16,r6
 800c840:	dc400315 	stw	r17,12(sp)
 800c844:	8022907a 	slli	r17,r16,1
 800c848:	dd400715 	stw	r21,28(sp)
 800c84c:	282b883a 	mov	r21,r5
 800c850:	01400044 	movi	r5,1
 800c854:	dd000615 	stw	r20,24(sp)
 800c858:	dcc00515 	stw	r19,20(sp)
 800c85c:	dc800415 	stw	r18,16(sp)
 800c860:	dfc00815 	stw	ra,32(sp)
 800c864:	3829883a 	mov	r20,r7
 800c868:	dc800917 	ldw	r18,36(sp)
 800c86c:	8822d57a 	srli	r17,r17,21
 800c870:	800bc000 	call	800bc00 <_Balloc>
 800c874:	1027883a 	mov	r19,r2
 800c878:	00800434 	movhi	r2,16
 800c87c:	10bfffc4 	addi	r2,r2,-1
 800c880:	808c703a 	and	r6,r16,r2
 800c884:	88000126 	beq	r17,zero,800c88c <__d2b+0x58>
 800c888:	31800434 	orhi	r6,r6,16
 800c88c:	d9800015 	stw	r6,0(sp)
 800c890:	a8001f26 	beq	r21,zero,800c910 <__d2b+0xdc>
 800c894:	d9000104 	addi	r4,sp,4
 800c898:	dd400115 	stw	r21,4(sp)
 800c89c:	800bf500 	call	800bf50 <__lo0bits>
 800c8a0:	d8c00017 	ldw	r3,0(sp)
 800c8a4:	1000291e 	bne	r2,zero,800c94c <__d2b+0x118>
 800c8a8:	d9000117 	ldw	r4,4(sp)
 800c8ac:	99000515 	stw	r4,20(r19)
 800c8b0:	1820c03a 	cmpne	r16,r3,zero
 800c8b4:	84000044 	addi	r16,r16,1
 800c8b8:	98c00615 	stw	r3,24(r19)
 800c8bc:	9c000415 	stw	r16,16(r19)
 800c8c0:	88001b1e 	bne	r17,zero,800c930 <__d2b+0xfc>
 800c8c4:	800690ba 	slli	r3,r16,2
 800c8c8:	10bef384 	addi	r2,r2,-1074
 800c8cc:	a0800015 	stw	r2,0(r20)
 800c8d0:	98c5883a 	add	r2,r19,r3
 800c8d4:	11000417 	ldw	r4,16(r2)
 800c8d8:	8020917a 	slli	r16,r16,5
 800c8dc:	800bee80 	call	800bee8 <__hi0bits>
 800c8e0:	8085c83a 	sub	r2,r16,r2
 800c8e4:	90800015 	stw	r2,0(r18)
 800c8e8:	9805883a 	mov	r2,r19
 800c8ec:	dfc00817 	ldw	ra,32(sp)
 800c8f0:	dd400717 	ldw	r21,28(sp)
 800c8f4:	dd000617 	ldw	r20,24(sp)
 800c8f8:	dcc00517 	ldw	r19,20(sp)
 800c8fc:	dc800417 	ldw	r18,16(sp)
 800c900:	dc400317 	ldw	r17,12(sp)
 800c904:	dc000217 	ldw	r16,8(sp)
 800c908:	dec00904 	addi	sp,sp,36
 800c90c:	f800283a 	ret
 800c910:	d809883a 	mov	r4,sp
 800c914:	800bf500 	call	800bf50 <__lo0bits>
 800c918:	d8c00017 	ldw	r3,0(sp)
 800c91c:	04000044 	movi	r16,1
 800c920:	9c000415 	stw	r16,16(r19)
 800c924:	98c00515 	stw	r3,20(r19)
 800c928:	10800804 	addi	r2,r2,32
 800c92c:	883fe526 	beq	r17,zero,800c8c4 <__alt_data_end+0xfc00c8c4>
 800c930:	8c7ef344 	addi	r17,r17,-1075
 800c934:	88a3883a 	add	r17,r17,r2
 800c938:	00c00d44 	movi	r3,53
 800c93c:	a4400015 	stw	r17,0(r20)
 800c940:	1885c83a 	sub	r2,r3,r2
 800c944:	90800015 	stw	r2,0(r18)
 800c948:	003fe706 	br	800c8e8 <__alt_data_end+0xfc00c8e8>
 800c94c:	01000804 	movi	r4,32
 800c950:	2089c83a 	sub	r4,r4,r2
 800c954:	1908983a 	sll	r4,r3,r4
 800c958:	d9400117 	ldw	r5,4(sp)
 800c95c:	1886d83a 	srl	r3,r3,r2
 800c960:	2148b03a 	or	r4,r4,r5
 800c964:	99000515 	stw	r4,20(r19)
 800c968:	d8c00015 	stw	r3,0(sp)
 800c96c:	003fd006 	br	800c8b0 <__alt_data_end+0xfc00c8b0>

0800c970 <__ratio>:
 800c970:	defff904 	addi	sp,sp,-28
 800c974:	dc400315 	stw	r17,12(sp)
 800c978:	2823883a 	mov	r17,r5
 800c97c:	d9400104 	addi	r5,sp,4
 800c980:	dfc00615 	stw	ra,24(sp)
 800c984:	dcc00515 	stw	r19,20(sp)
 800c988:	dc800415 	stw	r18,16(sp)
 800c98c:	2027883a 	mov	r19,r4
 800c990:	dc000215 	stw	r16,8(sp)
 800c994:	800c7180 	call	800c718 <__b2d>
 800c998:	8809883a 	mov	r4,r17
 800c99c:	d80b883a 	mov	r5,sp
 800c9a0:	1025883a 	mov	r18,r2
 800c9a4:	1821883a 	mov	r16,r3
 800c9a8:	800c7180 	call	800c718 <__b2d>
 800c9ac:	8a400417 	ldw	r9,16(r17)
 800c9b0:	9a000417 	ldw	r8,16(r19)
 800c9b4:	100d883a 	mov	r6,r2
 800c9b8:	d8800017 	ldw	r2,0(sp)
 800c9bc:	4251c83a 	sub	r8,r8,r9
 800c9c0:	4012917a 	slli	r9,r8,5
 800c9c4:	da000117 	ldw	r8,4(sp)
 800c9c8:	4091c83a 	sub	r8,r8,r2
 800c9cc:	4251883a 	add	r8,r8,r9
 800c9d0:	02000d0e 	bge	zero,r8,800ca08 <__ratio+0x98>
 800c9d4:	4010953a 	slli	r8,r8,20
 800c9d8:	4421883a 	add	r16,r8,r16
 800c9dc:	9009883a 	mov	r4,r18
 800c9e0:	800b883a 	mov	r5,r16
 800c9e4:	180f883a 	mov	r7,r3
 800c9e8:	80111600 	call	8011160 <__divdf3>
 800c9ec:	dfc00617 	ldw	ra,24(sp)
 800c9f0:	dcc00517 	ldw	r19,20(sp)
 800c9f4:	dc800417 	ldw	r18,16(sp)
 800c9f8:	dc400317 	ldw	r17,12(sp)
 800c9fc:	dc000217 	ldw	r16,8(sp)
 800ca00:	dec00704 	addi	sp,sp,28
 800ca04:	f800283a 	ret
 800ca08:	4010953a 	slli	r8,r8,20
 800ca0c:	1a07c83a 	sub	r3,r3,r8
 800ca10:	003ff206 	br	800c9dc <__alt_data_end+0xfc00c9dc>

0800ca14 <_mprec_log10>:
 800ca14:	defffe04 	addi	sp,sp,-8
 800ca18:	dc000015 	stw	r16,0(sp)
 800ca1c:	dfc00115 	stw	ra,4(sp)
 800ca20:	008005c4 	movi	r2,23
 800ca24:	2021883a 	mov	r16,r4
 800ca28:	11000d0e 	bge	r2,r4,800ca60 <_mprec_log10+0x4c>
 800ca2c:	0005883a 	mov	r2,zero
 800ca30:	00cffc34 	movhi	r3,16368
 800ca34:	843fffc4 	addi	r16,r16,-1
 800ca38:	1009883a 	mov	r4,r2
 800ca3c:	180b883a 	mov	r5,r3
 800ca40:	000d883a 	mov	r6,zero
 800ca44:	01d00934 	movhi	r7,16420
 800ca48:	8011ab00 	call	8011ab0 <__muldf3>
 800ca4c:	803ff91e 	bne	r16,zero,800ca34 <__alt_data_end+0xfc00ca34>
 800ca50:	dfc00117 	ldw	ra,4(sp)
 800ca54:	dc000017 	ldw	r16,0(sp)
 800ca58:	dec00204 	addi	sp,sp,8
 800ca5c:	f800283a 	ret
 800ca60:	202090fa 	slli	r16,r4,3
 800ca64:	008200b4 	movhi	r2,2050
 800ca68:	1080d804 	addi	r2,r2,864
 800ca6c:	1421883a 	add	r16,r2,r16
 800ca70:	80800017 	ldw	r2,0(r16)
 800ca74:	80c00117 	ldw	r3,4(r16)
 800ca78:	dfc00117 	ldw	ra,4(sp)
 800ca7c:	dc000017 	ldw	r16,0(sp)
 800ca80:	dec00204 	addi	sp,sp,8
 800ca84:	f800283a 	ret

0800ca88 <__copybits>:
 800ca88:	297fffc4 	addi	r5,r5,-1
 800ca8c:	280fd17a 	srai	r7,r5,5
 800ca90:	30c00417 	ldw	r3,16(r6)
 800ca94:	30800504 	addi	r2,r6,20
 800ca98:	39c00044 	addi	r7,r7,1
 800ca9c:	18c7883a 	add	r3,r3,r3
 800caa0:	39cf883a 	add	r7,r7,r7
 800caa4:	18c7883a 	add	r3,r3,r3
 800caa8:	39cf883a 	add	r7,r7,r7
 800caac:	10c7883a 	add	r3,r2,r3
 800cab0:	21cf883a 	add	r7,r4,r7
 800cab4:	10c00d2e 	bgeu	r2,r3,800caec <__copybits+0x64>
 800cab8:	200b883a 	mov	r5,r4
 800cabc:	12000017 	ldw	r8,0(r2)
 800cac0:	29400104 	addi	r5,r5,4
 800cac4:	10800104 	addi	r2,r2,4
 800cac8:	2a3fff15 	stw	r8,-4(r5)
 800cacc:	10fffb36 	bltu	r2,r3,800cabc <__alt_data_end+0xfc00cabc>
 800cad0:	1985c83a 	sub	r2,r3,r6
 800cad4:	10bffac4 	addi	r2,r2,-21
 800cad8:	1004d0ba 	srli	r2,r2,2
 800cadc:	10800044 	addi	r2,r2,1
 800cae0:	1085883a 	add	r2,r2,r2
 800cae4:	1085883a 	add	r2,r2,r2
 800cae8:	2089883a 	add	r4,r4,r2
 800caec:	21c0032e 	bgeu	r4,r7,800cafc <__copybits+0x74>
 800caf0:	20000015 	stw	zero,0(r4)
 800caf4:	21000104 	addi	r4,r4,4
 800caf8:	21fffd36 	bltu	r4,r7,800caf0 <__alt_data_end+0xfc00caf0>
 800cafc:	f800283a 	ret

0800cb00 <__any_on>:
 800cb00:	20c00417 	ldw	r3,16(r4)
 800cb04:	2805d17a 	srai	r2,r5,5
 800cb08:	21000504 	addi	r4,r4,20
 800cb0c:	18800d0e 	bge	r3,r2,800cb44 <__any_on+0x44>
 800cb10:	18c7883a 	add	r3,r3,r3
 800cb14:	18c7883a 	add	r3,r3,r3
 800cb18:	20c7883a 	add	r3,r4,r3
 800cb1c:	20c0192e 	bgeu	r4,r3,800cb84 <__any_on+0x84>
 800cb20:	18bfff17 	ldw	r2,-4(r3)
 800cb24:	18ffff04 	addi	r3,r3,-4
 800cb28:	1000041e 	bne	r2,zero,800cb3c <__any_on+0x3c>
 800cb2c:	20c0142e 	bgeu	r4,r3,800cb80 <__any_on+0x80>
 800cb30:	18ffff04 	addi	r3,r3,-4
 800cb34:	19400017 	ldw	r5,0(r3)
 800cb38:	283ffc26 	beq	r5,zero,800cb2c <__alt_data_end+0xfc00cb2c>
 800cb3c:	00800044 	movi	r2,1
 800cb40:	f800283a 	ret
 800cb44:	10c00a0e 	bge	r2,r3,800cb70 <__any_on+0x70>
 800cb48:	1085883a 	add	r2,r2,r2
 800cb4c:	1085883a 	add	r2,r2,r2
 800cb50:	294007cc 	andi	r5,r5,31
 800cb54:	2087883a 	add	r3,r4,r2
 800cb58:	283ff026 	beq	r5,zero,800cb1c <__alt_data_end+0xfc00cb1c>
 800cb5c:	19800017 	ldw	r6,0(r3)
 800cb60:	3144d83a 	srl	r2,r6,r5
 800cb64:	114a983a 	sll	r5,r2,r5
 800cb68:	29bff41e 	bne	r5,r6,800cb3c <__alt_data_end+0xfc00cb3c>
 800cb6c:	003feb06 	br	800cb1c <__alt_data_end+0xfc00cb1c>
 800cb70:	1085883a 	add	r2,r2,r2
 800cb74:	1085883a 	add	r2,r2,r2
 800cb78:	2087883a 	add	r3,r4,r2
 800cb7c:	003fe706 	br	800cb1c <__alt_data_end+0xfc00cb1c>
 800cb80:	f800283a 	ret
 800cb84:	0005883a 	mov	r2,zero
 800cb88:	f800283a 	ret

0800cb8c <_putc_r>:
 800cb8c:	defffc04 	addi	sp,sp,-16
 800cb90:	dc000215 	stw	r16,8(sp)
 800cb94:	dfc00315 	stw	ra,12(sp)
 800cb98:	2021883a 	mov	r16,r4
 800cb9c:	20000226 	beq	r4,zero,800cba8 <_putc_r+0x1c>
 800cba0:	20800e17 	ldw	r2,56(r4)
 800cba4:	10001b26 	beq	r2,zero,800cc14 <_putc_r+0x88>
 800cba8:	30800217 	ldw	r2,8(r6)
 800cbac:	10bfffc4 	addi	r2,r2,-1
 800cbb0:	30800215 	stw	r2,8(r6)
 800cbb4:	10000a16 	blt	r2,zero,800cbe0 <_putc_r+0x54>
 800cbb8:	30800017 	ldw	r2,0(r6)
 800cbbc:	11400005 	stb	r5,0(r2)
 800cbc0:	30800017 	ldw	r2,0(r6)
 800cbc4:	10c00044 	addi	r3,r2,1
 800cbc8:	30c00015 	stw	r3,0(r6)
 800cbcc:	10800003 	ldbu	r2,0(r2)
 800cbd0:	dfc00317 	ldw	ra,12(sp)
 800cbd4:	dc000217 	ldw	r16,8(sp)
 800cbd8:	dec00404 	addi	sp,sp,16
 800cbdc:	f800283a 	ret
 800cbe0:	30c00617 	ldw	r3,24(r6)
 800cbe4:	10c00616 	blt	r2,r3,800cc00 <_putc_r+0x74>
 800cbe8:	30800017 	ldw	r2,0(r6)
 800cbec:	00c00284 	movi	r3,10
 800cbf0:	11400005 	stb	r5,0(r2)
 800cbf4:	30800017 	ldw	r2,0(r6)
 800cbf8:	11400003 	ldbu	r5,0(r2)
 800cbfc:	28fff11e 	bne	r5,r3,800cbc4 <__alt_data_end+0xfc00cbc4>
 800cc00:	8009883a 	mov	r4,r16
 800cc04:	dfc00317 	ldw	ra,12(sp)
 800cc08:	dc000217 	ldw	r16,8(sp)
 800cc0c:	dec00404 	addi	sp,sp,16
 800cc10:	800fbac1 	jmpi	800fbac <__swbuf_r>
 800cc14:	d9400015 	stw	r5,0(sp)
 800cc18:	d9800115 	stw	r6,4(sp)
 800cc1c:	800aa500 	call	800aa50 <__sinit>
 800cc20:	d9800117 	ldw	r6,4(sp)
 800cc24:	d9400017 	ldw	r5,0(sp)
 800cc28:	003fdf06 	br	800cba8 <__alt_data_end+0xfc00cba8>

0800cc2c <putc>:
 800cc2c:	defffc04 	addi	sp,sp,-16
 800cc30:	dc400115 	stw	r17,4(sp)
 800cc34:	044200b4 	movhi	r17,2050
 800cc38:	8c47e604 	addi	r17,r17,8088
 800cc3c:	dc800215 	stw	r18,8(sp)
 800cc40:	2025883a 	mov	r18,r4
 800cc44:	89000017 	ldw	r4,0(r17)
 800cc48:	dc000015 	stw	r16,0(sp)
 800cc4c:	dfc00315 	stw	ra,12(sp)
 800cc50:	2821883a 	mov	r16,r5
 800cc54:	20000226 	beq	r4,zero,800cc60 <putc+0x34>
 800cc58:	20c00e17 	ldw	r3,56(r4)
 800cc5c:	18001a26 	beq	r3,zero,800ccc8 <putc+0x9c>
 800cc60:	80800217 	ldw	r2,8(r16)
 800cc64:	10bfffc4 	addi	r2,r2,-1
 800cc68:	80800215 	stw	r2,8(r16)
 800cc6c:	10000c16 	blt	r2,zero,800cca0 <putc+0x74>
 800cc70:	80800017 	ldw	r2,0(r16)
 800cc74:	14800005 	stb	r18,0(r2)
 800cc78:	80800017 	ldw	r2,0(r16)
 800cc7c:	10c00044 	addi	r3,r2,1
 800cc80:	80c00015 	stw	r3,0(r16)
 800cc84:	10800003 	ldbu	r2,0(r2)
 800cc88:	dfc00317 	ldw	ra,12(sp)
 800cc8c:	dc800217 	ldw	r18,8(sp)
 800cc90:	dc400117 	ldw	r17,4(sp)
 800cc94:	dc000017 	ldw	r16,0(sp)
 800cc98:	dec00404 	addi	sp,sp,16
 800cc9c:	f800283a 	ret
 800cca0:	80c00617 	ldw	r3,24(r16)
 800cca4:	10c00a16 	blt	r2,r3,800ccd0 <putc+0xa4>
 800cca8:	80800017 	ldw	r2,0(r16)
 800ccac:	00c00284 	movi	r3,10
 800ccb0:	14800005 	stb	r18,0(r2)
 800ccb4:	80800017 	ldw	r2,0(r16)
 800ccb8:	11400003 	ldbu	r5,0(r2)
 800ccbc:	28ffef1e 	bne	r5,r3,800cc7c <__alt_data_end+0xfc00cc7c>
 800ccc0:	89000017 	ldw	r4,0(r17)
 800ccc4:	00000406 	br	800ccd8 <putc+0xac>
 800ccc8:	800aa500 	call	800aa50 <__sinit>
 800cccc:	003fe406 	br	800cc60 <__alt_data_end+0xfc00cc60>
 800ccd0:	89000017 	ldw	r4,0(r17)
 800ccd4:	900b883a 	mov	r5,r18
 800ccd8:	800d883a 	mov	r6,r16
 800ccdc:	dfc00317 	ldw	ra,12(sp)
 800cce0:	dc800217 	ldw	r18,8(sp)
 800cce4:	dc400117 	ldw	r17,4(sp)
 800cce8:	dc000017 	ldw	r16,0(sp)
 800ccec:	dec00404 	addi	sp,sp,16
 800ccf0:	800fbac1 	jmpi	800fbac <__swbuf_r>

0800ccf4 <_realloc_r>:
 800ccf4:	defff604 	addi	sp,sp,-40
 800ccf8:	dcc00315 	stw	r19,12(sp)
 800ccfc:	dc400115 	stw	r17,4(sp)
 800cd00:	dfc00915 	stw	ra,36(sp)
 800cd04:	df000815 	stw	fp,32(sp)
 800cd08:	ddc00715 	stw	r23,28(sp)
 800cd0c:	dd800615 	stw	r22,24(sp)
 800cd10:	dd400515 	stw	r21,20(sp)
 800cd14:	dd000415 	stw	r20,16(sp)
 800cd18:	dc800215 	stw	r18,8(sp)
 800cd1c:	dc000015 	stw	r16,0(sp)
 800cd20:	2827883a 	mov	r19,r5
 800cd24:	3023883a 	mov	r17,r6
 800cd28:	2800bf26 	beq	r5,zero,800d028 <_realloc_r+0x334>
 800cd2c:	2025883a 	mov	r18,r4
 800cd30:	80133d80 	call	80133d8 <__malloc_lock>
 800cd34:	98ffff17 	ldw	r3,-4(r19)
 800cd38:	01bfff04 	movi	r6,-4
 800cd3c:	890002c4 	addi	r4,r17,11
 800cd40:	01c00584 	movi	r7,22
 800cd44:	9d7ffe04 	addi	r21,r19,-8
 800cd48:	19a0703a 	and	r16,r3,r6
 800cd4c:	39003f2e 	bgeu	r7,r4,800ce4c <_realloc_r+0x158>
 800cd50:	053ffe04 	movi	r20,-8
 800cd54:	2528703a 	and	r20,r4,r20
 800cd58:	a00f883a 	mov	r7,r20
 800cd5c:	a0008216 	blt	r20,zero,800cf68 <_realloc_r+0x274>
 800cd60:	a4408136 	bltu	r20,r17,800cf68 <_realloc_r+0x274>
 800cd64:	81c03c0e 	bge	r16,r7,800ce58 <_realloc_r+0x164>
 800cd68:	070200b4 	movhi	fp,2050
 800cd6c:	e7012d04 	addi	fp,fp,1204
 800cd70:	e1000217 	ldw	r4,8(fp)
 800cd74:	ac05883a 	add	r2,r21,r16
 800cd78:	2080bf26 	beq	r4,r2,800d078 <_realloc_r+0x384>
 800cd7c:	11000117 	ldw	r4,4(r2)
 800cd80:	023fff84 	movi	r8,-2
 800cd84:	2210703a 	and	r8,r4,r8
 800cd88:	1211883a 	add	r8,r2,r8
 800cd8c:	41400117 	ldw	r5,4(r8)
 800cd90:	2940004c 	andi	r5,r5,1
 800cd94:	28004a1e 	bne	r5,zero,800cec0 <_realloc_r+0x1cc>
 800cd98:	017fff04 	movi	r5,-4
 800cd9c:	2148703a 	and	r4,r4,r5
 800cda0:	2409883a 	add	r4,r4,r16
 800cda4:	21c0ad0e 	bge	r4,r7,800d05c <_realloc_r+0x368>
 800cda8:	18c0004c 	andi	r3,r3,1
 800cdac:	18007f1e 	bne	r3,zero,800cfac <_realloc_r+0x2b8>
 800cdb0:	9dfffe17 	ldw	r23,-8(r19)
 800cdb4:	adefc83a 	sub	r23,r21,r23
 800cdb8:	bd800117 	ldw	r22,4(r23)
 800cdbc:	b14a703a 	and	r5,r22,r5
 800cdc0:	216d883a 	add	r22,r4,r5
 800cdc4:	b1c04516 	blt	r22,r7,800cedc <_realloc_r+0x1e8>
 800cdc8:	10c00317 	ldw	r3,12(r2)
 800cdcc:	10800217 	ldw	r2,8(r2)
 800cdd0:	81bfff04 	addi	r6,r16,-4
 800cdd4:	bc400204 	addi	r17,r23,8
 800cdd8:	10c00315 	stw	r3,12(r2)
 800cddc:	18800215 	stw	r2,8(r3)
 800cde0:	b9400217 	ldw	r5,8(r23)
 800cde4:	b8c00317 	ldw	r3,12(r23)
 800cde8:	00800904 	movi	r2,36
 800cdec:	28c00315 	stw	r3,12(r5)
 800cdf0:	19400215 	stw	r5,8(r3)
 800cdf4:	1180ef36 	bltu	r2,r6,800d1b4 <_realloc_r+0x4c0>
 800cdf8:	008004c4 	movi	r2,19
 800cdfc:	1180da2e 	bgeu	r2,r6,800d168 <_realloc_r+0x474>
 800ce00:	98800017 	ldw	r2,0(r19)
 800ce04:	b8800215 	stw	r2,8(r23)
 800ce08:	98800117 	ldw	r2,4(r19)
 800ce0c:	b8800315 	stw	r2,12(r23)
 800ce10:	008006c4 	movi	r2,27
 800ce14:	1180fc2e 	bgeu	r2,r6,800d208 <_realloc_r+0x514>
 800ce18:	98800217 	ldw	r2,8(r19)
 800ce1c:	b8800415 	stw	r2,16(r23)
 800ce20:	98800317 	ldw	r2,12(r19)
 800ce24:	b8800515 	stw	r2,20(r23)
 800ce28:	00800904 	movi	r2,36
 800ce2c:	3080421e 	bne	r6,r2,800cf38 <_realloc_r+0x244>
 800ce30:	98800417 	ldw	r2,16(r19)
 800ce34:	9cc00604 	addi	r19,r19,24
 800ce38:	b8c00804 	addi	r3,r23,32
 800ce3c:	b8800615 	stw	r2,24(r23)
 800ce40:	98bfff17 	ldw	r2,-4(r19)
 800ce44:	b8800715 	stw	r2,28(r23)
 800ce48:	00003d06 	br	800cf40 <_realloc_r+0x24c>
 800ce4c:	01c00404 	movi	r7,16
 800ce50:	3829883a 	mov	r20,r7
 800ce54:	003fc206 	br	800cd60 <__alt_data_end+0xfc00cd60>
 800ce58:	9823883a 	mov	r17,r19
 800ce5c:	850fc83a 	sub	r7,r16,r20
 800ce60:	008003c4 	movi	r2,15
 800ce64:	18c0004c 	andi	r3,r3,1
 800ce68:	11c04336 	bltu	r2,r7,800cf78 <_realloc_r+0x284>
 800ce6c:	1c06b03a 	or	r3,r3,r16
 800ce70:	a8c00115 	stw	r3,4(r21)
 800ce74:	ac21883a 	add	r16,r21,r16
 800ce78:	80c00117 	ldw	r3,4(r16)
 800ce7c:	18c00054 	ori	r3,r3,1
 800ce80:	80c00115 	stw	r3,4(r16)
 800ce84:	9009883a 	mov	r4,r18
 800ce88:	80133f80 	call	80133f8 <__malloc_unlock>
 800ce8c:	8805883a 	mov	r2,r17
 800ce90:	dfc00917 	ldw	ra,36(sp)
 800ce94:	df000817 	ldw	fp,32(sp)
 800ce98:	ddc00717 	ldw	r23,28(sp)
 800ce9c:	dd800617 	ldw	r22,24(sp)
 800cea0:	dd400517 	ldw	r21,20(sp)
 800cea4:	dd000417 	ldw	r20,16(sp)
 800cea8:	dcc00317 	ldw	r19,12(sp)
 800ceac:	dc800217 	ldw	r18,8(sp)
 800ceb0:	dc400117 	ldw	r17,4(sp)
 800ceb4:	dc000017 	ldw	r16,0(sp)
 800ceb8:	dec00a04 	addi	sp,sp,40
 800cebc:	f800283a 	ret
 800cec0:	18c0004c 	andi	r3,r3,1
 800cec4:	1800391e 	bne	r3,zero,800cfac <_realloc_r+0x2b8>
 800cec8:	9dfffe17 	ldw	r23,-8(r19)
 800cecc:	00bfff04 	movi	r2,-4
 800ced0:	adefc83a 	sub	r23,r21,r23
 800ced4:	b9400117 	ldw	r5,4(r23)
 800ced8:	288a703a 	and	r5,r5,r2
 800cedc:	2c2d883a 	add	r22,r5,r16
 800cee0:	b1c03216 	blt	r22,r7,800cfac <_realloc_r+0x2b8>
 800cee4:	b8800317 	ldw	r2,12(r23)
 800cee8:	b8c00217 	ldw	r3,8(r23)
 800ceec:	81bfff04 	addi	r6,r16,-4
 800cef0:	01000904 	movi	r4,36
 800cef4:	18800315 	stw	r2,12(r3)
 800cef8:	10c00215 	stw	r3,8(r2)
 800cefc:	bc400204 	addi	r17,r23,8
 800cf00:	2180ac36 	bltu	r4,r6,800d1b4 <_realloc_r+0x4c0>
 800cf04:	008004c4 	movi	r2,19
 800cf08:	1180972e 	bgeu	r2,r6,800d168 <_realloc_r+0x474>
 800cf0c:	98800017 	ldw	r2,0(r19)
 800cf10:	b8800215 	stw	r2,8(r23)
 800cf14:	98800117 	ldw	r2,4(r19)
 800cf18:	b8800315 	stw	r2,12(r23)
 800cf1c:	008006c4 	movi	r2,27
 800cf20:	1180b92e 	bgeu	r2,r6,800d208 <_realloc_r+0x514>
 800cf24:	98800217 	ldw	r2,8(r19)
 800cf28:	b8800415 	stw	r2,16(r23)
 800cf2c:	98800317 	ldw	r2,12(r19)
 800cf30:	b8800515 	stw	r2,20(r23)
 800cf34:	313fbe26 	beq	r6,r4,800ce30 <__alt_data_end+0xfc00ce30>
 800cf38:	b8c00604 	addi	r3,r23,24
 800cf3c:	9cc00404 	addi	r19,r19,16
 800cf40:	98800017 	ldw	r2,0(r19)
 800cf44:	b021883a 	mov	r16,r22
 800cf48:	b82b883a 	mov	r21,r23
 800cf4c:	18800015 	stw	r2,0(r3)
 800cf50:	98800117 	ldw	r2,4(r19)
 800cf54:	18800115 	stw	r2,4(r3)
 800cf58:	98800217 	ldw	r2,8(r19)
 800cf5c:	18800215 	stw	r2,8(r3)
 800cf60:	b8c00117 	ldw	r3,4(r23)
 800cf64:	003fbd06 	br	800ce5c <__alt_data_end+0xfc00ce5c>
 800cf68:	00800304 	movi	r2,12
 800cf6c:	90800015 	stw	r2,0(r18)
 800cf70:	0005883a 	mov	r2,zero
 800cf74:	003fc606 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800cf78:	1d06b03a 	or	r3,r3,r20
 800cf7c:	ad0b883a 	add	r5,r21,r20
 800cf80:	a8c00115 	stw	r3,4(r21)
 800cf84:	38800054 	ori	r2,r7,1
 800cf88:	28800115 	stw	r2,4(r5)
 800cf8c:	29cf883a 	add	r7,r5,r7
 800cf90:	38800117 	ldw	r2,4(r7)
 800cf94:	9009883a 	mov	r4,r18
 800cf98:	29400204 	addi	r5,r5,8
 800cf9c:	10800054 	ori	r2,r2,1
 800cfa0:	38800115 	stw	r2,4(r7)
 800cfa4:	800abc40 	call	800abc4 <_free_r>
 800cfa8:	003fb606 	br	800ce84 <__alt_data_end+0xfc00ce84>
 800cfac:	880b883a 	mov	r5,r17
 800cfb0:	9009883a 	mov	r4,r18
 800cfb4:	8003ff40 	call	8003ff4 <_malloc_r>
 800cfb8:	1023883a 	mov	r17,r2
 800cfbc:	1000aa26 	beq	r2,zero,800d268 <_realloc_r+0x574>
 800cfc0:	98ffff17 	ldw	r3,-4(r19)
 800cfc4:	113ffe04 	addi	r4,r2,-8
 800cfc8:	00bfff84 	movi	r2,-2
 800cfcc:	1884703a 	and	r2,r3,r2
 800cfd0:	a885883a 	add	r2,r21,r2
 800cfd4:	20808626 	beq	r4,r2,800d1f0 <_realloc_r+0x4fc>
 800cfd8:	81bfff04 	addi	r6,r16,-4
 800cfdc:	00800904 	movi	r2,36
 800cfe0:	11807036 	bltu	r2,r6,800d1a4 <_realloc_r+0x4b0>
 800cfe4:	00c004c4 	movi	r3,19
 800cfe8:	19805636 	bltu	r3,r6,800d144 <_realloc_r+0x450>
 800cfec:	8805883a 	mov	r2,r17
 800cff0:	9807883a 	mov	r3,r19
 800cff4:	19000017 	ldw	r4,0(r3)
 800cff8:	11000015 	stw	r4,0(r2)
 800cffc:	19000117 	ldw	r4,4(r3)
 800d000:	11000115 	stw	r4,4(r2)
 800d004:	18c00217 	ldw	r3,8(r3)
 800d008:	10c00215 	stw	r3,8(r2)
 800d00c:	980b883a 	mov	r5,r19
 800d010:	9009883a 	mov	r4,r18
 800d014:	800abc40 	call	800abc4 <_free_r>
 800d018:	9009883a 	mov	r4,r18
 800d01c:	80133f80 	call	80133f8 <__malloc_unlock>
 800d020:	8805883a 	mov	r2,r17
 800d024:	003f9a06 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800d028:	300b883a 	mov	r5,r6
 800d02c:	dfc00917 	ldw	ra,36(sp)
 800d030:	df000817 	ldw	fp,32(sp)
 800d034:	ddc00717 	ldw	r23,28(sp)
 800d038:	dd800617 	ldw	r22,24(sp)
 800d03c:	dd400517 	ldw	r21,20(sp)
 800d040:	dd000417 	ldw	r20,16(sp)
 800d044:	dcc00317 	ldw	r19,12(sp)
 800d048:	dc800217 	ldw	r18,8(sp)
 800d04c:	dc400117 	ldw	r17,4(sp)
 800d050:	dc000017 	ldw	r16,0(sp)
 800d054:	dec00a04 	addi	sp,sp,40
 800d058:	8003ff41 	jmpi	8003ff4 <_malloc_r>
 800d05c:	11400317 	ldw	r5,12(r2)
 800d060:	10800217 	ldw	r2,8(r2)
 800d064:	9823883a 	mov	r17,r19
 800d068:	2021883a 	mov	r16,r4
 800d06c:	11400315 	stw	r5,12(r2)
 800d070:	28800215 	stw	r2,8(r5)
 800d074:	003f7906 	br	800ce5c <__alt_data_end+0xfc00ce5c>
 800d078:	21000117 	ldw	r4,4(r4)
 800d07c:	00bfff04 	movi	r2,-4
 800d080:	a1800404 	addi	r6,r20,16
 800d084:	2088703a 	and	r4,r4,r2
 800d088:	2409883a 	add	r4,r4,r16
 800d08c:	2180380e 	bge	r4,r6,800d170 <_realloc_r+0x47c>
 800d090:	18c0004c 	andi	r3,r3,1
 800d094:	183fc51e 	bne	r3,zero,800cfac <__alt_data_end+0xfc00cfac>
 800d098:	9dfffe17 	ldw	r23,-8(r19)
 800d09c:	adefc83a 	sub	r23,r21,r23
 800d0a0:	b9400117 	ldw	r5,4(r23)
 800d0a4:	288a703a 	and	r5,r5,r2
 800d0a8:	216d883a 	add	r22,r4,r5
 800d0ac:	b1bf8b16 	blt	r22,r6,800cedc <__alt_data_end+0xfc00cedc>
 800d0b0:	b8800317 	ldw	r2,12(r23)
 800d0b4:	b8c00217 	ldw	r3,8(r23)
 800d0b8:	81bfff04 	addi	r6,r16,-4
 800d0bc:	01000904 	movi	r4,36
 800d0c0:	18800315 	stw	r2,12(r3)
 800d0c4:	10c00215 	stw	r3,8(r2)
 800d0c8:	bc400204 	addi	r17,r23,8
 800d0cc:	21805a36 	bltu	r4,r6,800d238 <_realloc_r+0x544>
 800d0d0:	008004c4 	movi	r2,19
 800d0d4:	1180562e 	bgeu	r2,r6,800d230 <_realloc_r+0x53c>
 800d0d8:	98800017 	ldw	r2,0(r19)
 800d0dc:	b8800215 	stw	r2,8(r23)
 800d0e0:	98800117 	ldw	r2,4(r19)
 800d0e4:	b8800315 	stw	r2,12(r23)
 800d0e8:	008006c4 	movi	r2,27
 800d0ec:	11805636 	bltu	r2,r6,800d248 <_realloc_r+0x554>
 800d0f0:	b8800404 	addi	r2,r23,16
 800d0f4:	9cc00204 	addi	r19,r19,8
 800d0f8:	98c00017 	ldw	r3,0(r19)
 800d0fc:	10c00015 	stw	r3,0(r2)
 800d100:	98c00117 	ldw	r3,4(r19)
 800d104:	10c00115 	stw	r3,4(r2)
 800d108:	98c00217 	ldw	r3,8(r19)
 800d10c:	10c00215 	stw	r3,8(r2)
 800d110:	bd07883a 	add	r3,r23,r20
 800d114:	b505c83a 	sub	r2,r22,r20
 800d118:	e0c00215 	stw	r3,8(fp)
 800d11c:	10800054 	ori	r2,r2,1
 800d120:	18800115 	stw	r2,4(r3)
 800d124:	b8800117 	ldw	r2,4(r23)
 800d128:	9009883a 	mov	r4,r18
 800d12c:	1080004c 	andi	r2,r2,1
 800d130:	a0a8b03a 	or	r20,r20,r2
 800d134:	bd000115 	stw	r20,4(r23)
 800d138:	80133f80 	call	80133f8 <__malloc_unlock>
 800d13c:	8805883a 	mov	r2,r17
 800d140:	003f5306 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800d144:	98c00017 	ldw	r3,0(r19)
 800d148:	88c00015 	stw	r3,0(r17)
 800d14c:	98c00117 	ldw	r3,4(r19)
 800d150:	88c00115 	stw	r3,4(r17)
 800d154:	00c006c4 	movi	r3,27
 800d158:	19801d36 	bltu	r3,r6,800d1d0 <_realloc_r+0x4dc>
 800d15c:	88800204 	addi	r2,r17,8
 800d160:	98c00204 	addi	r3,r19,8
 800d164:	003fa306 	br	800cff4 <__alt_data_end+0xfc00cff4>
 800d168:	8807883a 	mov	r3,r17
 800d16c:	003f7406 	br	800cf40 <__alt_data_end+0xfc00cf40>
 800d170:	ad2b883a 	add	r21,r21,r20
 800d174:	2505c83a 	sub	r2,r4,r20
 800d178:	e5400215 	stw	r21,8(fp)
 800d17c:	10800054 	ori	r2,r2,1
 800d180:	a8800115 	stw	r2,4(r21)
 800d184:	98bfff17 	ldw	r2,-4(r19)
 800d188:	9009883a 	mov	r4,r18
 800d18c:	1080004c 	andi	r2,r2,1
 800d190:	a0a8b03a 	or	r20,r20,r2
 800d194:	9d3fff15 	stw	r20,-4(r19)
 800d198:	80133f80 	call	80133f8 <__malloc_unlock>
 800d19c:	9805883a 	mov	r2,r19
 800d1a0:	003f3b06 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800d1a4:	8809883a 	mov	r4,r17
 800d1a8:	980b883a 	mov	r5,r19
 800d1ac:	800b9800 	call	800b980 <memmove>
 800d1b0:	003f9606 	br	800d00c <__alt_data_end+0xfc00d00c>
 800d1b4:	8809883a 	mov	r4,r17
 800d1b8:	980b883a 	mov	r5,r19
 800d1bc:	800b9800 	call	800b980 <memmove>
 800d1c0:	b8c00117 	ldw	r3,4(r23)
 800d1c4:	b021883a 	mov	r16,r22
 800d1c8:	b82b883a 	mov	r21,r23
 800d1cc:	003f2306 	br	800ce5c <__alt_data_end+0xfc00ce5c>
 800d1d0:	98c00217 	ldw	r3,8(r19)
 800d1d4:	88c00215 	stw	r3,8(r17)
 800d1d8:	98c00317 	ldw	r3,12(r19)
 800d1dc:	88c00315 	stw	r3,12(r17)
 800d1e0:	30800c26 	beq	r6,r2,800d214 <_realloc_r+0x520>
 800d1e4:	88800404 	addi	r2,r17,16
 800d1e8:	98c00404 	addi	r3,r19,16
 800d1ec:	003f8106 	br	800cff4 <__alt_data_end+0xfc00cff4>
 800d1f0:	893fff17 	ldw	r4,-4(r17)
 800d1f4:	00bfff04 	movi	r2,-4
 800d1f8:	9823883a 	mov	r17,r19
 800d1fc:	2084703a 	and	r2,r4,r2
 800d200:	80a1883a 	add	r16,r16,r2
 800d204:	003f1506 	br	800ce5c <__alt_data_end+0xfc00ce5c>
 800d208:	b8c00404 	addi	r3,r23,16
 800d20c:	9cc00204 	addi	r19,r19,8
 800d210:	003f4b06 	br	800cf40 <__alt_data_end+0xfc00cf40>
 800d214:	99000417 	ldw	r4,16(r19)
 800d218:	88800604 	addi	r2,r17,24
 800d21c:	98c00604 	addi	r3,r19,24
 800d220:	89000415 	stw	r4,16(r17)
 800d224:	99000517 	ldw	r4,20(r19)
 800d228:	89000515 	stw	r4,20(r17)
 800d22c:	003f7106 	br	800cff4 <__alt_data_end+0xfc00cff4>
 800d230:	8805883a 	mov	r2,r17
 800d234:	003fb006 	br	800d0f8 <__alt_data_end+0xfc00d0f8>
 800d238:	8809883a 	mov	r4,r17
 800d23c:	980b883a 	mov	r5,r19
 800d240:	800b9800 	call	800b980 <memmove>
 800d244:	003fb206 	br	800d110 <__alt_data_end+0xfc00d110>
 800d248:	98800217 	ldw	r2,8(r19)
 800d24c:	b8800415 	stw	r2,16(r23)
 800d250:	98800317 	ldw	r2,12(r19)
 800d254:	b8800515 	stw	r2,20(r23)
 800d258:	31000726 	beq	r6,r4,800d278 <_realloc_r+0x584>
 800d25c:	b8800604 	addi	r2,r23,24
 800d260:	9cc00404 	addi	r19,r19,16
 800d264:	003fa406 	br	800d0f8 <__alt_data_end+0xfc00d0f8>
 800d268:	9009883a 	mov	r4,r18
 800d26c:	80133f80 	call	80133f8 <__malloc_unlock>
 800d270:	0005883a 	mov	r2,zero
 800d274:	003f0606 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800d278:	98c00417 	ldw	r3,16(r19)
 800d27c:	9cc00604 	addi	r19,r19,24
 800d280:	b8800804 	addi	r2,r23,32
 800d284:	b8c00615 	stw	r3,24(r23)
 800d288:	98ffff17 	ldw	r3,-4(r19)
 800d28c:	b8c00715 	stw	r3,28(r23)
 800d290:	003f9906 	br	800d0f8 <__alt_data_end+0xfc00d0f8>

0800d294 <__fpclassifyd>:
 800d294:	00a00034 	movhi	r2,32768
 800d298:	10bfffc4 	addi	r2,r2,-1
 800d29c:	2884703a 	and	r2,r5,r2
 800d2a0:	10000726 	beq	r2,zero,800d2c0 <__fpclassifyd+0x2c>
 800d2a4:	00fffc34 	movhi	r3,65520
 800d2a8:	019ff834 	movhi	r6,32736
 800d2ac:	28c7883a 	add	r3,r5,r3
 800d2b0:	31bfffc4 	addi	r6,r6,-1
 800d2b4:	30c00536 	bltu	r6,r3,800d2cc <__fpclassifyd+0x38>
 800d2b8:	00800104 	movi	r2,4
 800d2bc:	f800283a 	ret
 800d2c0:	2000021e 	bne	r4,zero,800d2cc <__fpclassifyd+0x38>
 800d2c4:	00800084 	movi	r2,2
 800d2c8:	f800283a 	ret
 800d2cc:	00dffc34 	movhi	r3,32752
 800d2d0:	019ff834 	movhi	r6,32736
 800d2d4:	28cb883a 	add	r5,r5,r3
 800d2d8:	31bfffc4 	addi	r6,r6,-1
 800d2dc:	317ff62e 	bgeu	r6,r5,800d2b8 <__alt_data_end+0xfc00d2b8>
 800d2e0:	01400434 	movhi	r5,16
 800d2e4:	297fffc4 	addi	r5,r5,-1
 800d2e8:	28800236 	bltu	r5,r2,800d2f4 <__fpclassifyd+0x60>
 800d2ec:	008000c4 	movi	r2,3
 800d2f0:	f800283a 	ret
 800d2f4:	10c00226 	beq	r2,r3,800d300 <__fpclassifyd+0x6c>
 800d2f8:	0005883a 	mov	r2,zero
 800d2fc:	f800283a 	ret
 800d300:	2005003a 	cmpeq	r2,r4,zero
 800d304:	f800283a 	ret

0800d308 <__sread>:
 800d308:	defffe04 	addi	sp,sp,-8
 800d30c:	dc000015 	stw	r16,0(sp)
 800d310:	2821883a 	mov	r16,r5
 800d314:	2940038f 	ldh	r5,14(r5)
 800d318:	dfc00115 	stw	ra,4(sp)
 800d31c:	80102880 	call	8010288 <_read_r>
 800d320:	10000716 	blt	r2,zero,800d340 <__sread+0x38>
 800d324:	80c01417 	ldw	r3,80(r16)
 800d328:	1887883a 	add	r3,r3,r2
 800d32c:	80c01415 	stw	r3,80(r16)
 800d330:	dfc00117 	ldw	ra,4(sp)
 800d334:	dc000017 	ldw	r16,0(sp)
 800d338:	dec00204 	addi	sp,sp,8
 800d33c:	f800283a 	ret
 800d340:	80c0030b 	ldhu	r3,12(r16)
 800d344:	18fbffcc 	andi	r3,r3,61439
 800d348:	80c0030d 	sth	r3,12(r16)
 800d34c:	dfc00117 	ldw	ra,4(sp)
 800d350:	dc000017 	ldw	r16,0(sp)
 800d354:	dec00204 	addi	sp,sp,8
 800d358:	f800283a 	ret

0800d35c <__seofread>:
 800d35c:	0005883a 	mov	r2,zero
 800d360:	f800283a 	ret

0800d364 <__swrite>:
 800d364:	2880030b 	ldhu	r2,12(r5)
 800d368:	defffb04 	addi	sp,sp,-20
 800d36c:	dcc00315 	stw	r19,12(sp)
 800d370:	dc800215 	stw	r18,8(sp)
 800d374:	dc400115 	stw	r17,4(sp)
 800d378:	dc000015 	stw	r16,0(sp)
 800d37c:	dfc00415 	stw	ra,16(sp)
 800d380:	10c0400c 	andi	r3,r2,256
 800d384:	2821883a 	mov	r16,r5
 800d388:	2027883a 	mov	r19,r4
 800d38c:	3025883a 	mov	r18,r6
 800d390:	3823883a 	mov	r17,r7
 800d394:	18000526 	beq	r3,zero,800d3ac <__swrite+0x48>
 800d398:	2940038f 	ldh	r5,14(r5)
 800d39c:	000d883a 	mov	r6,zero
 800d3a0:	01c00084 	movi	r7,2
 800d3a4:	801022c0 	call	801022c <_lseek_r>
 800d3a8:	8080030b 	ldhu	r2,12(r16)
 800d3ac:	8140038f 	ldh	r5,14(r16)
 800d3b0:	10bbffcc 	andi	r2,r2,61439
 800d3b4:	9809883a 	mov	r4,r19
 800d3b8:	900d883a 	mov	r6,r18
 800d3bc:	880f883a 	mov	r7,r17
 800d3c0:	8080030d 	sth	r2,12(r16)
 800d3c4:	dfc00417 	ldw	ra,16(sp)
 800d3c8:	dcc00317 	ldw	r19,12(sp)
 800d3cc:	dc800217 	ldw	r18,8(sp)
 800d3d0:	dc400117 	ldw	r17,4(sp)
 800d3d4:	dc000017 	ldw	r16,0(sp)
 800d3d8:	dec00504 	addi	sp,sp,20
 800d3dc:	800fd1c1 	jmpi	800fd1c <_write_r>

0800d3e0 <__sseek>:
 800d3e0:	defffe04 	addi	sp,sp,-8
 800d3e4:	dc000015 	stw	r16,0(sp)
 800d3e8:	2821883a 	mov	r16,r5
 800d3ec:	2940038f 	ldh	r5,14(r5)
 800d3f0:	dfc00115 	stw	ra,4(sp)
 800d3f4:	801022c0 	call	801022c <_lseek_r>
 800d3f8:	00ffffc4 	movi	r3,-1
 800d3fc:	10c00826 	beq	r2,r3,800d420 <__sseek+0x40>
 800d400:	80c0030b 	ldhu	r3,12(r16)
 800d404:	80801415 	stw	r2,80(r16)
 800d408:	18c40014 	ori	r3,r3,4096
 800d40c:	80c0030d 	sth	r3,12(r16)
 800d410:	dfc00117 	ldw	ra,4(sp)
 800d414:	dc000017 	ldw	r16,0(sp)
 800d418:	dec00204 	addi	sp,sp,8
 800d41c:	f800283a 	ret
 800d420:	80c0030b 	ldhu	r3,12(r16)
 800d424:	18fbffcc 	andi	r3,r3,61439
 800d428:	80c0030d 	sth	r3,12(r16)
 800d42c:	dfc00117 	ldw	ra,4(sp)
 800d430:	dc000017 	ldw	r16,0(sp)
 800d434:	dec00204 	addi	sp,sp,8
 800d438:	f800283a 	ret

0800d43c <__sclose>:
 800d43c:	2940038f 	ldh	r5,14(r5)
 800d440:	800fd781 	jmpi	800fd78 <_close_r>

0800d444 <strcmp>:
 800d444:	2144b03a 	or	r2,r4,r5
 800d448:	108000cc 	andi	r2,r2,3
 800d44c:	1000171e 	bne	r2,zero,800d4ac <strcmp+0x68>
 800d450:	20800017 	ldw	r2,0(r4)
 800d454:	28c00017 	ldw	r3,0(r5)
 800d458:	10c0141e 	bne	r2,r3,800d4ac <strcmp+0x68>
 800d45c:	027fbff4 	movhi	r9,65279
 800d460:	4a7fbfc4 	addi	r9,r9,-257
 800d464:	0086303a 	nor	r3,zero,r2
 800d468:	02202074 	movhi	r8,32897
 800d46c:	1245883a 	add	r2,r2,r9
 800d470:	42202004 	addi	r8,r8,-32640
 800d474:	10c4703a 	and	r2,r2,r3
 800d478:	1204703a 	and	r2,r2,r8
 800d47c:	10000226 	beq	r2,zero,800d488 <strcmp+0x44>
 800d480:	00001706 	br	800d4e0 <strcmp+0x9c>
 800d484:	1000161e 	bne	r2,zero,800d4e0 <strcmp+0x9c>
 800d488:	21000104 	addi	r4,r4,4
 800d48c:	20c00017 	ldw	r3,0(r4)
 800d490:	29400104 	addi	r5,r5,4
 800d494:	29800017 	ldw	r6,0(r5)
 800d498:	1a4f883a 	add	r7,r3,r9
 800d49c:	00c4303a 	nor	r2,zero,r3
 800d4a0:	3884703a 	and	r2,r7,r2
 800d4a4:	1204703a 	and	r2,r2,r8
 800d4a8:	19bff626 	beq	r3,r6,800d484 <__alt_data_end+0xfc00d484>
 800d4ac:	20800007 	ldb	r2,0(r4)
 800d4b0:	1000051e 	bne	r2,zero,800d4c8 <strcmp+0x84>
 800d4b4:	00000606 	br	800d4d0 <strcmp+0x8c>
 800d4b8:	21000044 	addi	r4,r4,1
 800d4bc:	20800007 	ldb	r2,0(r4)
 800d4c0:	29400044 	addi	r5,r5,1
 800d4c4:	10000226 	beq	r2,zero,800d4d0 <strcmp+0x8c>
 800d4c8:	28c00007 	ldb	r3,0(r5)
 800d4cc:	10fffa26 	beq	r2,r3,800d4b8 <__alt_data_end+0xfc00d4b8>
 800d4d0:	20800003 	ldbu	r2,0(r4)
 800d4d4:	28c00003 	ldbu	r3,0(r5)
 800d4d8:	10c5c83a 	sub	r2,r2,r3
 800d4dc:	f800283a 	ret
 800d4e0:	0005883a 	mov	r2,zero
 800d4e4:	f800283a 	ret

0800d4e8 <__ssprint_r>:
 800d4e8:	30800217 	ldw	r2,8(r6)
 800d4ec:	defff604 	addi	sp,sp,-40
 800d4f0:	ddc00715 	stw	r23,28(sp)
 800d4f4:	dcc00315 	stw	r19,12(sp)
 800d4f8:	dfc00915 	stw	ra,36(sp)
 800d4fc:	df000815 	stw	fp,32(sp)
 800d500:	dd800615 	stw	r22,24(sp)
 800d504:	dd400515 	stw	r21,20(sp)
 800d508:	dd000415 	stw	r20,16(sp)
 800d50c:	dc800215 	stw	r18,8(sp)
 800d510:	dc400115 	stw	r17,4(sp)
 800d514:	dc000015 	stw	r16,0(sp)
 800d518:	3027883a 	mov	r19,r6
 800d51c:	35c00017 	ldw	r23,0(r6)
 800d520:	10005526 	beq	r2,zero,800d678 <__ssprint_r+0x190>
 800d524:	2029883a 	mov	r20,r4
 800d528:	29000017 	ldw	r4,0(r5)
 800d52c:	2821883a 	mov	r16,r5
 800d530:	0039883a 	mov	fp,zero
 800d534:	0023883a 	mov	r17,zero
 800d538:	88003926 	beq	r17,zero,800d620 <__ssprint_r+0x138>
 800d53c:	84800217 	ldw	r18,8(r16)
 800d540:	902d883a 	mov	r22,r18
 800d544:	8c803a36 	bltu	r17,r18,800d630 <__ssprint_r+0x148>
 800d548:	80c0030b 	ldhu	r3,12(r16)
 800d54c:	1881200c 	andi	r2,r3,1152
 800d550:	10002626 	beq	r2,zero,800d5ec <__ssprint_r+0x104>
 800d554:	80800517 	ldw	r2,20(r16)
 800d558:	81400417 	ldw	r5,16(r16)
 800d55c:	89c00044 	addi	r7,r17,1
 800d560:	108d883a 	add	r6,r2,r2
 800d564:	3085883a 	add	r2,r6,r2
 800d568:	100cd7fa 	srli	r6,r2,31
 800d56c:	216dc83a 	sub	r22,r4,r5
 800d570:	3d89883a 	add	r4,r7,r22
 800d574:	3085883a 	add	r2,r6,r2
 800d578:	1025d07a 	srai	r18,r2,1
 800d57c:	900d883a 	mov	r6,r18
 800d580:	9100022e 	bgeu	r18,r4,800d58c <__ssprint_r+0xa4>
 800d584:	2025883a 	mov	r18,r4
 800d588:	200d883a 	mov	r6,r4
 800d58c:	18c1000c 	andi	r3,r3,1024
 800d590:	a009883a 	mov	r4,r20
 800d594:	18002926 	beq	r3,zero,800d63c <__ssprint_r+0x154>
 800d598:	300b883a 	mov	r5,r6
 800d59c:	8003ff40 	call	8003ff4 <_malloc_r>
 800d5a0:	102b883a 	mov	r21,r2
 800d5a4:	10002b26 	beq	r2,zero,800d654 <__ssprint_r+0x16c>
 800d5a8:	81400417 	ldw	r5,16(r16)
 800d5ac:	1009883a 	mov	r4,r2
 800d5b0:	b00d883a 	mov	r6,r22
 800d5b4:	800b8480 	call	800b848 <memcpy>
 800d5b8:	8080030b 	ldhu	r2,12(r16)
 800d5bc:	00fedfc4 	movi	r3,-1153
 800d5c0:	10c4703a 	and	r2,r2,r3
 800d5c4:	10802014 	ori	r2,r2,128
 800d5c8:	8080030d 	sth	r2,12(r16)
 800d5cc:	ad89883a 	add	r4,r21,r22
 800d5d0:	95adc83a 	sub	r22,r18,r22
 800d5d4:	84800515 	stw	r18,20(r16)
 800d5d8:	85800215 	stw	r22,8(r16)
 800d5dc:	85400415 	stw	r21,16(r16)
 800d5e0:	81000015 	stw	r4,0(r16)
 800d5e4:	8825883a 	mov	r18,r17
 800d5e8:	882d883a 	mov	r22,r17
 800d5ec:	e00b883a 	mov	r5,fp
 800d5f0:	b00d883a 	mov	r6,r22
 800d5f4:	800b9800 	call	800b980 <memmove>
 800d5f8:	80c00217 	ldw	r3,8(r16)
 800d5fc:	81000017 	ldw	r4,0(r16)
 800d600:	98800217 	ldw	r2,8(r19)
 800d604:	1ca5c83a 	sub	r18,r3,r18
 800d608:	2589883a 	add	r4,r4,r22
 800d60c:	84800215 	stw	r18,8(r16)
 800d610:	81000015 	stw	r4,0(r16)
 800d614:	1463c83a 	sub	r17,r2,r17
 800d618:	9c400215 	stw	r17,8(r19)
 800d61c:	88001626 	beq	r17,zero,800d678 <__ssprint_r+0x190>
 800d620:	bf000017 	ldw	fp,0(r23)
 800d624:	bc400117 	ldw	r17,4(r23)
 800d628:	bdc00204 	addi	r23,r23,8
 800d62c:	003fc206 	br	800d538 <__alt_data_end+0xfc00d538>
 800d630:	8825883a 	mov	r18,r17
 800d634:	882d883a 	mov	r22,r17
 800d638:	003fec06 	br	800d5ec <__alt_data_end+0xfc00d5ec>
 800d63c:	800ccf40 	call	800ccf4 <_realloc_r>
 800d640:	102b883a 	mov	r21,r2
 800d644:	103fe11e 	bne	r2,zero,800d5cc <__alt_data_end+0xfc00d5cc>
 800d648:	81400417 	ldw	r5,16(r16)
 800d64c:	a009883a 	mov	r4,r20
 800d650:	800abc40 	call	800abc4 <_free_r>
 800d654:	80c0030b 	ldhu	r3,12(r16)
 800d658:	00800304 	movi	r2,12
 800d65c:	a0800015 	stw	r2,0(r20)
 800d660:	18c01014 	ori	r3,r3,64
 800d664:	80c0030d 	sth	r3,12(r16)
 800d668:	00bfffc4 	movi	r2,-1
 800d66c:	98000215 	stw	zero,8(r19)
 800d670:	98000115 	stw	zero,4(r19)
 800d674:	00000206 	br	800d680 <__ssprint_r+0x198>
 800d678:	98000115 	stw	zero,4(r19)
 800d67c:	0005883a 	mov	r2,zero
 800d680:	dfc00917 	ldw	ra,36(sp)
 800d684:	df000817 	ldw	fp,32(sp)
 800d688:	ddc00717 	ldw	r23,28(sp)
 800d68c:	dd800617 	ldw	r22,24(sp)
 800d690:	dd400517 	ldw	r21,20(sp)
 800d694:	dd000417 	ldw	r20,16(sp)
 800d698:	dcc00317 	ldw	r19,12(sp)
 800d69c:	dc800217 	ldw	r18,8(sp)
 800d6a0:	dc400117 	ldw	r17,4(sp)
 800d6a4:	dc000017 	ldw	r16,0(sp)
 800d6a8:	dec00a04 	addi	sp,sp,40
 800d6ac:	f800283a 	ret

0800d6b0 <___svfiprintf_internal_r>:
 800d6b0:	2880030b 	ldhu	r2,12(r5)
 800d6b4:	deffc904 	addi	sp,sp,-220
 800d6b8:	dd403215 	stw	r21,200(sp)
 800d6bc:	dfc03615 	stw	ra,216(sp)
 800d6c0:	df003515 	stw	fp,212(sp)
 800d6c4:	ddc03415 	stw	r23,208(sp)
 800d6c8:	dd803315 	stw	r22,204(sp)
 800d6cc:	dd003115 	stw	r20,196(sp)
 800d6d0:	dcc03015 	stw	r19,192(sp)
 800d6d4:	dc802f15 	stw	r18,188(sp)
 800d6d8:	dc402e15 	stw	r17,184(sp)
 800d6dc:	dc002d15 	stw	r16,180(sp)
 800d6e0:	d9402715 	stw	r5,156(sp)
 800d6e4:	d9002915 	stw	r4,164(sp)
 800d6e8:	1080200c 	andi	r2,r2,128
 800d6ec:	d9c02315 	stw	r7,140(sp)
 800d6f0:	302b883a 	mov	r21,r6
 800d6f4:	10000226 	beq	r2,zero,800d700 <___svfiprintf_internal_r+0x50>
 800d6f8:	28800417 	ldw	r2,16(r5)
 800d6fc:	1003ce26 	beq	r2,zero,800e638 <___svfiprintf_internal_r+0xf88>
 800d700:	dac01a04 	addi	r11,sp,104
 800d704:	da8019c4 	addi	r10,sp,103
 800d708:	dc802917 	ldw	r18,164(sp)
 800d70c:	dd002717 	ldw	r20,156(sp)
 800d710:	04c200b4 	movhi	r19,2050
 800d714:	dac01e15 	stw	r11,120(sp)
 800d718:	5a97c83a 	sub	r11,r11,r10
 800d71c:	9cc10a04 	addi	r19,r19,1064
 800d720:	da801f15 	stw	r10,124(sp)
 800d724:	dec01a15 	stw	sp,104(sp)
 800d728:	d8001c15 	stw	zero,112(sp)
 800d72c:	d8001b15 	stw	zero,108(sp)
 800d730:	d8002a15 	stw	zero,168(sp)
 800d734:	d8002415 	stw	zero,144(sp)
 800d738:	d811883a 	mov	r8,sp
 800d73c:	dac02b15 	stw	r11,172(sp)
 800d740:	a8800007 	ldb	r2,0(r21)
 800d744:	10026826 	beq	r2,zero,800e0e8 <___svfiprintf_internal_r+0xa38>
 800d748:	01000944 	movi	r4,37
 800d74c:	11026626 	beq	r2,r4,800e0e8 <___svfiprintf_internal_r+0xa38>
 800d750:	a805883a 	mov	r2,r21
 800d754:	00000106 	br	800d75c <___svfiprintf_internal_r+0xac>
 800d758:	19000326 	beq	r3,r4,800d768 <___svfiprintf_internal_r+0xb8>
 800d75c:	10800044 	addi	r2,r2,1
 800d760:	10c00007 	ldb	r3,0(r2)
 800d764:	183ffc1e 	bne	r3,zero,800d758 <__alt_data_end+0xfc00d758>
 800d768:	1561c83a 	sub	r16,r2,r21
 800d76c:	102d883a 	mov	r22,r2
 800d770:	80000e26 	beq	r16,zero,800d7ac <___svfiprintf_internal_r+0xfc>
 800d774:	d8c01c17 	ldw	r3,112(sp)
 800d778:	d8801b17 	ldw	r2,108(sp)
 800d77c:	45400015 	stw	r21,0(r8)
 800d780:	1c07883a 	add	r3,r3,r16
 800d784:	10800044 	addi	r2,r2,1
 800d788:	d8c01c15 	stw	r3,112(sp)
 800d78c:	44000115 	stw	r16,4(r8)
 800d790:	d8801b15 	stw	r2,108(sp)
 800d794:	00c001c4 	movi	r3,7
 800d798:	1882d616 	blt	r3,r2,800e2f4 <___svfiprintf_internal_r+0xc44>
 800d79c:	42000204 	addi	r8,r8,8
 800d7a0:	da802417 	ldw	r10,144(sp)
 800d7a4:	5415883a 	add	r10,r10,r16
 800d7a8:	da802415 	stw	r10,144(sp)
 800d7ac:	b0800007 	ldb	r2,0(r22)
 800d7b0:	10027326 	beq	r2,zero,800e180 <___svfiprintf_internal_r+0xad0>
 800d7b4:	b1000047 	ldb	r4,1(r22)
 800d7b8:	b5400044 	addi	r21,r22,1
 800d7bc:	d8001d85 	stb	zero,118(sp)
 800d7c0:	000d883a 	mov	r6,zero
 800d7c4:	043fffc4 	movi	r16,-1
 800d7c8:	d8002115 	stw	zero,132(sp)
 800d7cc:	0023883a 	mov	r17,zero
 800d7d0:	00c01604 	movi	r3,88
 800d7d4:	01400244 	movi	r5,9
 800d7d8:	02400a84 	movi	r9,42
 800d7dc:	01c01b04 	movi	r7,108
 800d7e0:	ad400044 	addi	r21,r21,1
 800d7e4:	20bff804 	addi	r2,r4,-32
 800d7e8:	18819536 	bltu	r3,r2,800de40 <___svfiprintf_internal_r+0x790>
 800d7ec:	100490ba 	slli	r2,r2,2
 800d7f0:	02c20074 	movhi	r11,2049
 800d7f4:	5af60104 	addi	r11,r11,-10236
 800d7f8:	12c5883a 	add	r2,r2,r11
 800d7fc:	10800017 	ldw	r2,0(r2)
 800d800:	1000683a 	jmp	r2
 800d804:	0800dd40 	call	800dd4 <__alt_mem_sdram-0x77ff22c>
 800d808:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d80c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d810:	0800dd34 	orhi	zero,at,884
 800d814:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d818:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d81c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d820:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d824:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d828:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d82c:	0800da64 	muli	zero,at,873
 800d830:	0800de74 	orhi	zero,at,889
 800d834:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d838:	0800da8c 	andi	zero,at,874
 800d83c:	0800de80 	call	800de8 <__alt_mem_sdram-0x77ff218>
 800d840:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d844:	0800de68 	cmpgeui	zero,at,889
 800d848:	0800de08 	cmpgei	zero,at,888
 800d84c:	0800de08 	cmpgei	zero,at,888
 800d850:	0800de08 	cmpgei	zero,at,888
 800d854:	0800de08 	cmpgei	zero,at,888
 800d858:	0800de08 	cmpgei	zero,at,888
 800d85c:	0800de08 	cmpgei	zero,at,888
 800d860:	0800de08 	cmpgei	zero,at,888
 800d864:	0800de08 	cmpgei	zero,at,888
 800d868:	0800de08 	cmpgei	zero,at,888
 800d86c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d870:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d874:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d878:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d87c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d880:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d884:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d888:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d88c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d890:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d894:	0800dda0 	cmpeqi	zero,at,886
 800d898:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d89c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8a0:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8a4:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8a8:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8ac:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8b0:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8b4:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8b8:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8bc:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8c0:	0800da34 	orhi	zero,at,872
 800d8c4:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8c8:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8cc:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8d0:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8d4:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8d8:	0800d968 	cmpgeui	zero,at,869
 800d8dc:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8e0:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8e4:	0800dc94 	ori	zero,at,882
 800d8e8:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8ec:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8f0:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8f4:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8f8:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d8fc:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d900:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d904:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d908:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d90c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d910:	0800db80 	call	800db8 <__alt_mem_sdram-0x77ff248>
 800d914:	0800db40 	call	800db4 <__alt_mem_sdram-0x77ff24c>
 800d918:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d91c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d920:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d924:	0800dcf0 	cmpltui	zero,at,883
 800d928:	0800db40 	call	800db4 <__alt_mem_sdram-0x77ff24c>
 800d92c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d930:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d934:	0800dcdc 	xori	zero,at,883
 800d938:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d93c:	0800dcfc 	xorhi	zero,at,883
 800d940:	0800da38 	rdprs	zero,at,872
 800d944:	0800db00 	call	800db0 <__alt_mem_sdram-0x77ff250>
 800d948:	0800daf4 	orhi	zero,at,875
 800d94c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d950:	0800da98 	cmpnei	zero,at,874
 800d954:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d958:	0800d96c 	andhi	zero,at,869
 800d95c:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d960:	0800de40 	call	800de4 <__alt_mem_sdram-0x77ff21c>
 800d964:	0800dd5c 	xori	zero,at,885
 800d968:	8c400414 	ori	r17,r17,16
 800d96c:	88c0080c 	andi	r3,r17,32
 800d970:	d8802317 	ldw	r2,140(sp)
 800d974:	18029626 	beq	r3,zero,800e3d0 <___svfiprintf_internal_r+0xd20>
 800d978:	dac02317 	ldw	r11,140(sp)
 800d97c:	12400017 	ldw	r9,0(r2)
 800d980:	12800117 	ldw	r10,4(r2)
 800d984:	5ac00204 	addi	r11,r11,8
 800d988:	dac02315 	stw	r11,140(sp)
 800d98c:	00800044 	movi	r2,1
 800d990:	4a86b03a 	or	r3,r9,r10
 800d994:	d8001d85 	stb	zero,118(sp)
 800d998:	8039883a 	mov	fp,r16
 800d99c:	0017883a 	mov	r11,zero
 800d9a0:	80000216 	blt	r16,zero,800d9ac <___svfiprintf_internal_r+0x2fc>
 800d9a4:	013fdfc4 	movi	r4,-129
 800d9a8:	8922703a 	and	r17,r17,r4
 800d9ac:	1801d01e 	bne	r3,zero,800e0f0 <___svfiprintf_internal_r+0xa40>
 800d9b0:	80024426 	beq	r16,zero,800e2c4 <___svfiprintf_internal_r+0xc14>
 800d9b4:	10803fcc 	andi	r2,r2,255
 800d9b8:	00c00044 	movi	r3,1
 800d9bc:	10c2b326 	beq	r2,r3,800e48c <___svfiprintf_internal_r+0xddc>
 800d9c0:	00c00084 	movi	r3,2
 800d9c4:	10c25b26 	beq	r2,r3,800e334 <___svfiprintf_internal_r+0xc84>
 800d9c8:	d8c01a04 	addi	r3,sp,104
 800d9cc:	4808d0fa 	srli	r4,r9,3
 800d9d0:	500a977a 	slli	r5,r10,29
 800d9d4:	5014d0fa 	srli	r10,r10,3
 800d9d8:	4a4001cc 	andi	r9,r9,7
 800d9dc:	48800c04 	addi	r2,r9,48
 800d9e0:	18ffffc4 	addi	r3,r3,-1
 800d9e4:	2912b03a 	or	r9,r5,r4
 800d9e8:	18800005 	stb	r2,0(r3)
 800d9ec:	4a88b03a 	or	r4,r9,r10
 800d9f0:	203ff61e 	bne	r4,zero,800d9cc <__alt_data_end+0xfc00d9cc>
 800d9f4:	8900004c 	andi	r4,r17,1
 800d9f8:	d8c02615 	stw	r3,152(sp)
 800d9fc:	2002951e 	bne	r4,zero,800e454 <___svfiprintf_internal_r+0xda4>
 800da00:	da801e17 	ldw	r10,120(sp)
 800da04:	50f9c83a 	sub	fp,r10,r3
 800da08:	df002015 	stw	fp,128(sp)
 800da0c:	e400010e 	bge	fp,r16,800da14 <___svfiprintf_internal_r+0x364>
 800da10:	dc002015 	stw	r16,128(sp)
 800da14:	5ac03fcc 	andi	r11,r11,255
 800da18:	5ac0201c 	xori	r11,r11,128
 800da1c:	5affe004 	addi	r11,r11,-128
 800da20:	58006326 	beq	r11,zero,800dbb0 <___svfiprintf_internal_r+0x500>
 800da24:	d8c02017 	ldw	r3,128(sp)
 800da28:	18c00044 	addi	r3,r3,1
 800da2c:	d8c02015 	stw	r3,128(sp)
 800da30:	00005f06 	br	800dbb0 <___svfiprintf_internal_r+0x500>
 800da34:	8c400414 	ori	r17,r17,16
 800da38:	88c0080c 	andi	r3,r17,32
 800da3c:	d8802317 	ldw	r2,140(sp)
 800da40:	18027826 	beq	r3,zero,800e424 <___svfiprintf_internal_r+0xd74>
 800da44:	dac02317 	ldw	r11,140(sp)
 800da48:	12400017 	ldw	r9,0(r2)
 800da4c:	12800117 	ldw	r10,4(r2)
 800da50:	5ac00204 	addi	r11,r11,8
 800da54:	dac02315 	stw	r11,140(sp)
 800da58:	0005883a 	mov	r2,zero
 800da5c:	4a86b03a 	or	r3,r9,r10
 800da60:	003fcc06 	br	800d994 <__alt_data_end+0xfc00d994>
 800da64:	da802317 	ldw	r10,140(sp)
 800da68:	dac02317 	ldw	r11,140(sp)
 800da6c:	52800017 	ldw	r10,0(r10)
 800da70:	58800104 	addi	r2,r11,4
 800da74:	da802115 	stw	r10,132(sp)
 800da78:	50028a0e 	bge	r10,zero,800e4a4 <___svfiprintf_internal_r+0xdf4>
 800da7c:	da802117 	ldw	r10,132(sp)
 800da80:	d8802315 	stw	r2,140(sp)
 800da84:	0295c83a 	sub	r10,zero,r10
 800da88:	da802115 	stw	r10,132(sp)
 800da8c:	8c400114 	ori	r17,r17,4
 800da90:	a9000007 	ldb	r4,0(r21)
 800da94:	003f5206 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800da98:	da802317 	ldw	r10,140(sp)
 800da9c:	dac02317 	ldw	r11,140(sp)
 800daa0:	d8001d85 	stb	zero,118(sp)
 800daa4:	52800017 	ldw	r10,0(r10)
 800daa8:	5dc00104 	addi	r23,r11,4
 800daac:	da802615 	stw	r10,152(sp)
 800dab0:	5002eb26 	beq	r10,zero,800e660 <___svfiprintf_internal_r+0xfb0>
 800dab4:	d9002617 	ldw	r4,152(sp)
 800dab8:	8002d716 	blt	r16,zero,800e618 <___svfiprintf_internal_r+0xf68>
 800dabc:	000b883a 	mov	r5,zero
 800dac0:	800d883a 	mov	r6,r16
 800dac4:	da002c15 	stw	r8,176(sp)
 800dac8:	800b7600 	call	800b760 <memchr>
 800dacc:	da002c17 	ldw	r8,176(sp)
 800dad0:	1002fb26 	beq	r2,zero,800e6c0 <___svfiprintf_internal_r+0x1010>
 800dad4:	d8c02617 	ldw	r3,152(sp)
 800dad8:	10f9c83a 	sub	fp,r2,r3
 800dadc:	8700010e 	bge	r16,fp,800dae4 <___svfiprintf_internal_r+0x434>
 800dae0:	8039883a 	mov	fp,r16
 800dae4:	dac01d83 	ldbu	r11,118(sp)
 800dae8:	ddc02315 	stw	r23,140(sp)
 800daec:	0021883a 	mov	r16,zero
 800daf0:	003fc506 	br	800da08 <__alt_data_end+0xfc00da08>
 800daf4:	8c400814 	ori	r17,r17,32
 800daf8:	a9000007 	ldb	r4,0(r21)
 800dafc:	003f3806 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800db00:	dac02317 	ldw	r11,140(sp)
 800db04:	00800c04 	movi	r2,48
 800db08:	d8801d05 	stb	r2,116(sp)
 800db0c:	5a400017 	ldw	r9,0(r11)
 800db10:	00801e04 	movi	r2,120
 800db14:	d8801d45 	stb	r2,117(sp)
 800db18:	008200b4 	movhi	r2,2050
 800db1c:	1080a104 	addi	r2,r2,644
 800db20:	5ac00104 	addi	r11,r11,4
 800db24:	d8802a15 	stw	r2,168(sp)
 800db28:	0015883a 	mov	r10,zero
 800db2c:	8c400094 	ori	r17,r17,2
 800db30:	dac02315 	stw	r11,140(sp)
 800db34:	00800084 	movi	r2,2
 800db38:	4807883a 	mov	r3,r9
 800db3c:	003f9506 	br	800d994 <__alt_data_end+0xfc00d994>
 800db40:	d9801d85 	stb	r6,118(sp)
 800db44:	8880080c 	andi	r2,r17,32
 800db48:	d8c02317 	ldw	r3,140(sp)
 800db4c:	10009926 	beq	r2,zero,800ddb4 <___svfiprintf_internal_r+0x704>
 800db50:	dac02317 	ldw	r11,140(sp)
 800db54:	18800117 	ldw	r2,4(r3)
 800db58:	1a400017 	ldw	r9,0(r3)
 800db5c:	5ac00204 	addi	r11,r11,8
 800db60:	dac02315 	stw	r11,140(sp)
 800db64:	1015883a 	mov	r10,r2
 800db68:	10009d16 	blt	r2,zero,800dde0 <___svfiprintf_internal_r+0x730>
 800db6c:	dac01d83 	ldbu	r11,118(sp)
 800db70:	8039883a 	mov	fp,r16
 800db74:	00800044 	movi	r2,1
 800db78:	4a86b03a 	or	r3,r9,r10
 800db7c:	003f8806 	br	800d9a0 <__alt_data_end+0xfc00d9a0>
 800db80:	dac02317 	ldw	r11,140(sp)
 800db84:	00c00044 	movi	r3,1
 800db88:	da801004 	addi	r10,sp,64
 800db8c:	58800017 	ldw	r2,0(r11)
 800db90:	5ac00104 	addi	r11,r11,4
 800db94:	d8c02015 	stw	r3,128(sp)
 800db98:	d8001d85 	stb	zero,118(sp)
 800db9c:	d8801005 	stb	r2,64(sp)
 800dba0:	dac02315 	stw	r11,140(sp)
 800dba4:	1839883a 	mov	fp,r3
 800dba8:	da802615 	stw	r10,152(sp)
 800dbac:	0021883a 	mov	r16,zero
 800dbb0:	8a80008c 	andi	r10,r17,2
 800dbb4:	da802215 	stw	r10,136(sp)
 800dbb8:	50000326 	beq	r10,zero,800dbc8 <___svfiprintf_internal_r+0x518>
 800dbbc:	dac02017 	ldw	r11,128(sp)
 800dbc0:	5ac00084 	addi	r11,r11,2
 800dbc4:	dac02015 	stw	r11,128(sp)
 800dbc8:	88c0210c 	andi	r3,r17,132
 800dbcc:	d8c02515 	stw	r3,148(sp)
 800dbd0:	1800bb1e 	bne	r3,zero,800dec0 <___svfiprintf_internal_r+0x810>
 800dbd4:	da802117 	ldw	r10,132(sp)
 800dbd8:	dac02017 	ldw	r11,128(sp)
 800dbdc:	52edc83a 	sub	r22,r10,r11
 800dbe0:	0580b70e 	bge	zero,r22,800dec0 <___svfiprintf_internal_r+0x810>
 800dbe4:	02400404 	movi	r9,16
 800dbe8:	d8c01c17 	ldw	r3,112(sp)
 800dbec:	d8801b17 	ldw	r2,108(sp)
 800dbf0:	4d82a70e 	bge	r9,r22,800e690 <___svfiprintf_internal_r+0xfe0>
 800dbf4:	014200b4 	movhi	r5,2050
 800dbf8:	29410e04 	addi	r5,r5,1080
 800dbfc:	d9402815 	stw	r5,160(sp)
 800dc00:	05c001c4 	movi	r23,7
 800dc04:	00000306 	br	800dc14 <___svfiprintf_internal_r+0x564>
 800dc08:	b5bffc04 	addi	r22,r22,-16
 800dc0c:	42000204 	addi	r8,r8,8
 800dc10:	4d80150e 	bge	r9,r22,800dc68 <___svfiprintf_internal_r+0x5b8>
 800dc14:	028200b4 	movhi	r10,2050
 800dc18:	18c00404 	addi	r3,r3,16
 800dc1c:	10800044 	addi	r2,r2,1
 800dc20:	52810e04 	addi	r10,r10,1080
 800dc24:	42800015 	stw	r10,0(r8)
 800dc28:	42400115 	stw	r9,4(r8)
 800dc2c:	d8c01c15 	stw	r3,112(sp)
 800dc30:	d8801b15 	stw	r2,108(sp)
 800dc34:	b8bff40e 	bge	r23,r2,800dc08 <__alt_data_end+0xfc00dc08>
 800dc38:	9009883a 	mov	r4,r18
 800dc3c:	a00b883a 	mov	r5,r20
 800dc40:	d9801a04 	addi	r6,sp,104
 800dc44:	da402c15 	stw	r9,176(sp)
 800dc48:	800d4e80 	call	800d4e8 <__ssprint_r>
 800dc4c:	da402c17 	ldw	r9,176(sp)
 800dc50:	1001511e 	bne	r2,zero,800e198 <___svfiprintf_internal_r+0xae8>
 800dc54:	b5bffc04 	addi	r22,r22,-16
 800dc58:	d8c01c17 	ldw	r3,112(sp)
 800dc5c:	d8801b17 	ldw	r2,108(sp)
 800dc60:	d811883a 	mov	r8,sp
 800dc64:	4dbfeb16 	blt	r9,r22,800dc14 <__alt_data_end+0xfc00dc14>
 800dc68:	dac02817 	ldw	r11,160(sp)
 800dc6c:	b0c7883a 	add	r3,r22,r3
 800dc70:	10800044 	addi	r2,r2,1
 800dc74:	42c00015 	stw	r11,0(r8)
 800dc78:	45800115 	stw	r22,4(r8)
 800dc7c:	d8c01c15 	stw	r3,112(sp)
 800dc80:	d8801b15 	stw	r2,108(sp)
 800dc84:	010001c4 	movi	r4,7
 800dc88:	2081dd16 	blt	r4,r2,800e400 <___svfiprintf_internal_r+0xd50>
 800dc8c:	42000204 	addi	r8,r8,8
 800dc90:	00008d06 	br	800dec8 <___svfiprintf_internal_r+0x818>
 800dc94:	00c200b4 	movhi	r3,2050
 800dc98:	18c09c04 	addi	r3,r3,624
 800dc9c:	d8c02a15 	stw	r3,168(sp)
 800dca0:	d9801d85 	stb	r6,118(sp)
 800dca4:	88c0080c 	andi	r3,r17,32
 800dca8:	d8802317 	ldw	r2,140(sp)
 800dcac:	18003226 	beq	r3,zero,800dd78 <___svfiprintf_internal_r+0x6c8>
 800dcb0:	da802317 	ldw	r10,140(sp)
 800dcb4:	12400017 	ldw	r9,0(r2)
 800dcb8:	52800204 	addi	r10,r10,8
 800dcbc:	da802315 	stw	r10,140(sp)
 800dcc0:	12800117 	ldw	r10,4(r2)
 800dcc4:	8880004c 	andi	r2,r17,1
 800dcc8:	1001be26 	beq	r2,zero,800e3c4 <___svfiprintf_internal_r+0xd14>
 800dccc:	4a86b03a 	or	r3,r9,r10
 800dcd0:	1802291e 	bne	r3,zero,800e578 <___svfiprintf_internal_r+0xec8>
 800dcd4:	00800084 	movi	r2,2
 800dcd8:	003f2e06 	br	800d994 <__alt_data_end+0xfc00d994>
 800dcdc:	a9000007 	ldb	r4,0(r21)
 800dce0:	a805883a 	mov	r2,r21
 800dce4:	21c22a26 	beq	r4,r7,800e590 <___svfiprintf_internal_r+0xee0>
 800dce8:	8c400414 	ori	r17,r17,16
 800dcec:	003ebc06 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800dcf0:	8c401014 	ori	r17,r17,64
 800dcf4:	a9000007 	ldb	r4,0(r21)
 800dcf8:	003eb906 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800dcfc:	d9801d85 	stb	r6,118(sp)
 800dd00:	8880080c 	andi	r2,r17,32
 800dd04:	1002131e 	bne	r2,zero,800e554 <___svfiprintf_internal_r+0xea4>
 800dd08:	8880040c 	andi	r2,r17,16
 800dd0c:	1002241e 	bne	r2,zero,800e5a0 <___svfiprintf_internal_r+0xef0>
 800dd10:	8c40100c 	andi	r17,r17,64
 800dd14:	88022226 	beq	r17,zero,800e5a0 <___svfiprintf_internal_r+0xef0>
 800dd18:	dac02317 	ldw	r11,140(sp)
 800dd1c:	da802417 	ldw	r10,144(sp)
 800dd20:	58800017 	ldw	r2,0(r11)
 800dd24:	5ac00104 	addi	r11,r11,4
 800dd28:	dac02315 	stw	r11,140(sp)
 800dd2c:	1280000d 	sth	r10,0(r2)
 800dd30:	003e8306 	br	800d740 <__alt_data_end+0xfc00d740>
 800dd34:	8c400054 	ori	r17,r17,1
 800dd38:	a9000007 	ldb	r4,0(r21)
 800dd3c:	003ea806 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800dd40:	30803fcc 	andi	r2,r6,255
 800dd44:	1080201c 	xori	r2,r2,128
 800dd48:	10bfe004 	addi	r2,r2,-128
 800dd4c:	1001ff1e 	bne	r2,zero,800e54c <___svfiprintf_internal_r+0xe9c>
 800dd50:	01800804 	movi	r6,32
 800dd54:	a9000007 	ldb	r4,0(r21)
 800dd58:	003ea106 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800dd5c:	02c200b4 	movhi	r11,2050
 800dd60:	5ac0a104 	addi	r11,r11,644
 800dd64:	dac02a15 	stw	r11,168(sp)
 800dd68:	d9801d85 	stb	r6,118(sp)
 800dd6c:	88c0080c 	andi	r3,r17,32
 800dd70:	d8802317 	ldw	r2,140(sp)
 800dd74:	183fce1e 	bne	r3,zero,800dcb0 <__alt_data_end+0xfc00dcb0>
 800dd78:	88c0040c 	andi	r3,r17,16
 800dd7c:	1801ed1e 	bne	r3,zero,800e534 <___svfiprintf_internal_r+0xe84>
 800dd80:	88c0100c 	andi	r3,r17,64
 800dd84:	18021a26 	beq	r3,zero,800e5f0 <___svfiprintf_internal_r+0xf40>
 800dd88:	da802317 	ldw	r10,140(sp)
 800dd8c:	1240000b 	ldhu	r9,0(r2)
 800dd90:	52800104 	addi	r10,r10,4
 800dd94:	da802315 	stw	r10,140(sp)
 800dd98:	0015883a 	mov	r10,zero
 800dd9c:	003fc906 	br	800dcc4 <__alt_data_end+0xfc00dcc4>
 800dda0:	8c400414 	ori	r17,r17,16
 800dda4:	d9801d85 	stb	r6,118(sp)
 800dda8:	8880080c 	andi	r2,r17,32
 800ddac:	d8c02317 	ldw	r3,140(sp)
 800ddb0:	103f671e 	bne	r2,zero,800db50 <__alt_data_end+0xfc00db50>
 800ddb4:	8880040c 	andi	r2,r17,16
 800ddb8:	1001c71e 	bne	r2,zero,800e4d8 <___svfiprintf_internal_r+0xe28>
 800ddbc:	8880100c 	andi	r2,r17,64
 800ddc0:	1001c526 	beq	r2,zero,800e4d8 <___svfiprintf_internal_r+0xe28>
 800ddc4:	1a40000f 	ldh	r9,0(r3)
 800ddc8:	dac02317 	ldw	r11,140(sp)
 800ddcc:	4815d7fa 	srai	r10,r9,31
 800ddd0:	5ac00104 	addi	r11,r11,4
 800ddd4:	dac02315 	stw	r11,140(sp)
 800ddd8:	5005883a 	mov	r2,r10
 800dddc:	103f630e 	bge	r2,zero,800db6c <__alt_data_end+0xfc00db6c>
 800dde0:	0253c83a 	sub	r9,zero,r9
 800dde4:	4804c03a 	cmpne	r2,r9,zero
 800dde8:	0295c83a 	sub	r10,zero,r10
 800ddec:	5095c83a 	sub	r10,r10,r2
 800ddf0:	02c00b44 	movi	r11,45
 800ddf4:	dac01d85 	stb	r11,118(sp)
 800ddf8:	8039883a 	mov	fp,r16
 800ddfc:	00800044 	movi	r2,1
 800de00:	4a86b03a 	or	r3,r9,r10
 800de04:	003ee606 	br	800d9a0 <__alt_data_end+0xfc00d9a0>
 800de08:	a815883a 	mov	r10,r21
 800de0c:	d8002115 	stw	zero,132(sp)
 800de10:	20bff404 	addi	r2,r4,-48
 800de14:	51000007 	ldb	r4,0(r10)
 800de18:	da802117 	ldw	r10,132(sp)
 800de1c:	ad400044 	addi	r21,r21,1
 800de20:	52c002a4 	muli	r11,r10,10
 800de24:	a815883a 	mov	r10,r21
 800de28:	5885883a 	add	r2,r11,r2
 800de2c:	d8802115 	stw	r2,132(sp)
 800de30:	20bff404 	addi	r2,r4,-48
 800de34:	28bff72e 	bgeu	r5,r2,800de14 <__alt_data_end+0xfc00de14>
 800de38:	20bff804 	addi	r2,r4,-32
 800de3c:	18be6b2e 	bgeu	r3,r2,800d7ec <__alt_data_end+0xfc00d7ec>
 800de40:	d9801d85 	stb	r6,118(sp)
 800de44:	2000ce26 	beq	r4,zero,800e180 <___svfiprintf_internal_r+0xad0>
 800de48:	02800044 	movi	r10,1
 800de4c:	dac01004 	addi	r11,sp,64
 800de50:	da802015 	stw	r10,128(sp)
 800de54:	d9001005 	stb	r4,64(sp)
 800de58:	d8001d85 	stb	zero,118(sp)
 800de5c:	5039883a 	mov	fp,r10
 800de60:	dac02615 	stw	r11,152(sp)
 800de64:	003f5106 	br	800dbac <__alt_data_end+0xfc00dbac>
 800de68:	8c402014 	ori	r17,r17,128
 800de6c:	a9000007 	ldb	r4,0(r21)
 800de70:	003e5b06 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800de74:	01800ac4 	movi	r6,43
 800de78:	a9000007 	ldb	r4,0(r21)
 800de7c:	003e5806 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800de80:	a9000007 	ldb	r4,0(r21)
 800de84:	aa800044 	addi	r10,r21,1
 800de88:	22421426 	beq	r4,r9,800e6dc <___svfiprintf_internal_r+0x102c>
 800de8c:	20bff404 	addi	r2,r4,-48
 800de90:	502b883a 	mov	r21,r10
 800de94:	0021883a 	mov	r16,zero
 800de98:	28be5236 	bltu	r5,r2,800d7e4 <__alt_data_end+0xfc00d7e4>
 800de9c:	a9000007 	ldb	r4,0(r21)
 800dea0:	840002a4 	muli	r16,r16,10
 800dea4:	ad400044 	addi	r21,r21,1
 800dea8:	1421883a 	add	r16,r2,r16
 800deac:	20bff404 	addi	r2,r4,-48
 800deb0:	28bffa2e 	bgeu	r5,r2,800de9c <__alt_data_end+0xfc00de9c>
 800deb4:	803e4b0e 	bge	r16,zero,800d7e4 <__alt_data_end+0xfc00d7e4>
 800deb8:	043fffc4 	movi	r16,-1
 800debc:	003e4906 	br	800d7e4 <__alt_data_end+0xfc00d7e4>
 800dec0:	d8c01c17 	ldw	r3,112(sp)
 800dec4:	d8801b17 	ldw	r2,108(sp)
 800dec8:	d9001d87 	ldb	r4,118(sp)
 800decc:	20000b26 	beq	r4,zero,800defc <___svfiprintf_internal_r+0x84c>
 800ded0:	d9001d84 	addi	r4,sp,118
 800ded4:	18c00044 	addi	r3,r3,1
 800ded8:	10800044 	addi	r2,r2,1
 800dedc:	41000015 	stw	r4,0(r8)
 800dee0:	01000044 	movi	r4,1
 800dee4:	41000115 	stw	r4,4(r8)
 800dee8:	d8c01c15 	stw	r3,112(sp)
 800deec:	d8801b15 	stw	r2,108(sp)
 800def0:	010001c4 	movi	r4,7
 800def4:	20811e16 	blt	r4,r2,800e370 <___svfiprintf_internal_r+0xcc0>
 800def8:	42000204 	addi	r8,r8,8
 800defc:	da802217 	ldw	r10,136(sp)
 800df00:	50000b26 	beq	r10,zero,800df30 <___svfiprintf_internal_r+0x880>
 800df04:	d9001d04 	addi	r4,sp,116
 800df08:	18c00084 	addi	r3,r3,2
 800df0c:	10800044 	addi	r2,r2,1
 800df10:	41000015 	stw	r4,0(r8)
 800df14:	01000084 	movi	r4,2
 800df18:	41000115 	stw	r4,4(r8)
 800df1c:	d8c01c15 	stw	r3,112(sp)
 800df20:	d8801b15 	stw	r2,108(sp)
 800df24:	010001c4 	movi	r4,7
 800df28:	20811a16 	blt	r4,r2,800e394 <___svfiprintf_internal_r+0xce4>
 800df2c:	42000204 	addi	r8,r8,8
 800df30:	dac02517 	ldw	r11,148(sp)
 800df34:	01002004 	movi	r4,128
 800df38:	5900a826 	beq	r11,r4,800e1dc <___svfiprintf_internal_r+0xb2c>
 800df3c:	8721c83a 	sub	r16,r16,fp
 800df40:	0400260e 	bge	zero,r16,800dfdc <___svfiprintf_internal_r+0x92c>
 800df44:	01c00404 	movi	r7,16
 800df48:	3c01a50e 	bge	r7,r16,800e5e0 <___svfiprintf_internal_r+0xf30>
 800df4c:	010200b4 	movhi	r4,2050
 800df50:	21010a04 	addi	r4,r4,1064
 800df54:	d9002215 	stw	r4,136(sp)
 800df58:	382f883a 	mov	r23,r7
 800df5c:	058001c4 	movi	r22,7
 800df60:	00000306 	br	800df70 <___svfiprintf_internal_r+0x8c0>
 800df64:	843ffc04 	addi	r16,r16,-16
 800df68:	42000204 	addi	r8,r8,8
 800df6c:	bc00110e 	bge	r23,r16,800dfb4 <___svfiprintf_internal_r+0x904>
 800df70:	18c00404 	addi	r3,r3,16
 800df74:	10800044 	addi	r2,r2,1
 800df78:	44c00015 	stw	r19,0(r8)
 800df7c:	45c00115 	stw	r23,4(r8)
 800df80:	d8c01c15 	stw	r3,112(sp)
 800df84:	d8801b15 	stw	r2,108(sp)
 800df88:	b0bff60e 	bge	r22,r2,800df64 <__alt_data_end+0xfc00df64>
 800df8c:	9009883a 	mov	r4,r18
 800df90:	a00b883a 	mov	r5,r20
 800df94:	d9801a04 	addi	r6,sp,104
 800df98:	800d4e80 	call	800d4e8 <__ssprint_r>
 800df9c:	10007e1e 	bne	r2,zero,800e198 <___svfiprintf_internal_r+0xae8>
 800dfa0:	843ffc04 	addi	r16,r16,-16
 800dfa4:	d8c01c17 	ldw	r3,112(sp)
 800dfa8:	d8801b17 	ldw	r2,108(sp)
 800dfac:	d811883a 	mov	r8,sp
 800dfb0:	bc3fef16 	blt	r23,r16,800df70 <__alt_data_end+0xfc00df70>
 800dfb4:	da802217 	ldw	r10,136(sp)
 800dfb8:	1c07883a 	add	r3,r3,r16
 800dfbc:	10800044 	addi	r2,r2,1
 800dfc0:	42800015 	stw	r10,0(r8)
 800dfc4:	44000115 	stw	r16,4(r8)
 800dfc8:	d8c01c15 	stw	r3,112(sp)
 800dfcc:	d8801b15 	stw	r2,108(sp)
 800dfd0:	010001c4 	movi	r4,7
 800dfd4:	2080ce16 	blt	r4,r2,800e310 <___svfiprintf_internal_r+0xc60>
 800dfd8:	42000204 	addi	r8,r8,8
 800dfdc:	dac02617 	ldw	r11,152(sp)
 800dfe0:	e0c7883a 	add	r3,fp,r3
 800dfe4:	10800044 	addi	r2,r2,1
 800dfe8:	42c00015 	stw	r11,0(r8)
 800dfec:	47000115 	stw	fp,4(r8)
 800dff0:	d8c01c15 	stw	r3,112(sp)
 800dff4:	d8801b15 	stw	r2,108(sp)
 800dff8:	010001c4 	movi	r4,7
 800dffc:	2080a316 	blt	r4,r2,800e28c <___svfiprintf_internal_r+0xbdc>
 800e000:	42000204 	addi	r8,r8,8
 800e004:	8c40010c 	andi	r17,r17,4
 800e008:	88002b26 	beq	r17,zero,800e0b8 <___svfiprintf_internal_r+0xa08>
 800e00c:	da802117 	ldw	r10,132(sp)
 800e010:	dac02017 	ldw	r11,128(sp)
 800e014:	52e1c83a 	sub	r16,r10,r11
 800e018:	0400270e 	bge	zero,r16,800e0b8 <___svfiprintf_internal_r+0xa08>
 800e01c:	04400404 	movi	r17,16
 800e020:	d8801b17 	ldw	r2,108(sp)
 800e024:	8c019e0e 	bge	r17,r16,800e6a0 <___svfiprintf_internal_r+0xff0>
 800e028:	014200b4 	movhi	r5,2050
 800e02c:	29410e04 	addi	r5,r5,1080
 800e030:	d9402815 	stw	r5,160(sp)
 800e034:	070001c4 	movi	fp,7
 800e038:	00000306 	br	800e048 <___svfiprintf_internal_r+0x998>
 800e03c:	843ffc04 	addi	r16,r16,-16
 800e040:	42000204 	addi	r8,r8,8
 800e044:	8c00130e 	bge	r17,r16,800e094 <___svfiprintf_internal_r+0x9e4>
 800e048:	028200b4 	movhi	r10,2050
 800e04c:	18c00404 	addi	r3,r3,16
 800e050:	10800044 	addi	r2,r2,1
 800e054:	52810e04 	addi	r10,r10,1080
 800e058:	42800015 	stw	r10,0(r8)
 800e05c:	44400115 	stw	r17,4(r8)
 800e060:	d8c01c15 	stw	r3,112(sp)
 800e064:	d8801b15 	stw	r2,108(sp)
 800e068:	e0bff40e 	bge	fp,r2,800e03c <__alt_data_end+0xfc00e03c>
 800e06c:	9009883a 	mov	r4,r18
 800e070:	a00b883a 	mov	r5,r20
 800e074:	d9801a04 	addi	r6,sp,104
 800e078:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e07c:	1000461e 	bne	r2,zero,800e198 <___svfiprintf_internal_r+0xae8>
 800e080:	843ffc04 	addi	r16,r16,-16
 800e084:	d8c01c17 	ldw	r3,112(sp)
 800e088:	d8801b17 	ldw	r2,108(sp)
 800e08c:	d811883a 	mov	r8,sp
 800e090:	8c3fed16 	blt	r17,r16,800e048 <__alt_data_end+0xfc00e048>
 800e094:	dac02817 	ldw	r11,160(sp)
 800e098:	1c07883a 	add	r3,r3,r16
 800e09c:	10800044 	addi	r2,r2,1
 800e0a0:	42c00015 	stw	r11,0(r8)
 800e0a4:	44000115 	stw	r16,4(r8)
 800e0a8:	d8c01c15 	stw	r3,112(sp)
 800e0ac:	d8801b15 	stw	r2,108(sp)
 800e0b0:	010001c4 	movi	r4,7
 800e0b4:	2080fe16 	blt	r4,r2,800e4b0 <___svfiprintf_internal_r+0xe00>
 800e0b8:	dd802017 	ldw	r22,128(sp)
 800e0bc:	da802117 	ldw	r10,132(sp)
 800e0c0:	b280010e 	bge	r22,r10,800e0c8 <___svfiprintf_internal_r+0xa18>
 800e0c4:	502d883a 	mov	r22,r10
 800e0c8:	dac02417 	ldw	r11,144(sp)
 800e0cc:	5d97883a 	add	r11,r11,r22
 800e0d0:	dac02415 	stw	r11,144(sp)
 800e0d4:	1800751e 	bne	r3,zero,800e2ac <___svfiprintf_internal_r+0xbfc>
 800e0d8:	a8800007 	ldb	r2,0(r21)
 800e0dc:	d8001b15 	stw	zero,108(sp)
 800e0e0:	d811883a 	mov	r8,sp
 800e0e4:	103d981e 	bne	r2,zero,800d748 <__alt_data_end+0xfc00d748>
 800e0e8:	a82d883a 	mov	r22,r21
 800e0ec:	003daf06 	br	800d7ac <__alt_data_end+0xfc00d7ac>
 800e0f0:	10803fcc 	andi	r2,r2,255
 800e0f4:	00c00044 	movi	r3,1
 800e0f8:	10fe311e 	bne	r2,r3,800d9c0 <__alt_data_end+0xfc00d9c0>
 800e0fc:	5000e126 	beq	r10,zero,800e484 <___svfiprintf_internal_r+0xdd4>
 800e100:	dc402015 	stw	r17,128(sp)
 800e104:	dc002215 	stw	r16,136(sp)
 800e108:	dd801a04 	addi	r22,sp,104
 800e10c:	402f883a 	mov	r23,r8
 800e110:	5839883a 	mov	fp,r11
 800e114:	4821883a 	mov	r16,r9
 800e118:	5023883a 	mov	r17,r10
 800e11c:	8009883a 	mov	r4,r16
 800e120:	880b883a 	mov	r5,r17
 800e124:	01800284 	movi	r6,10
 800e128:	000f883a 	mov	r7,zero
 800e12c:	8010aa40 	call	8010aa4 <__umoddi3>
 800e130:	10800c04 	addi	r2,r2,48
 800e134:	b5bfffc4 	addi	r22,r22,-1
 800e138:	8009883a 	mov	r4,r16
 800e13c:	880b883a 	mov	r5,r17
 800e140:	01800284 	movi	r6,10
 800e144:	000f883a 	mov	r7,zero
 800e148:	b0800005 	stb	r2,0(r22)
 800e14c:	80104e40 	call	80104e4 <__udivdi3>
 800e150:	1021883a 	mov	r16,r2
 800e154:	10c4b03a 	or	r2,r2,r3
 800e158:	1823883a 	mov	r17,r3
 800e15c:	103fef1e 	bne	r2,zero,800e11c <__alt_data_end+0xfc00e11c>
 800e160:	da801e17 	ldw	r10,120(sp)
 800e164:	e017883a 	mov	r11,fp
 800e168:	b811883a 	mov	r8,r23
 800e16c:	dc402017 	ldw	r17,128(sp)
 800e170:	dc002217 	ldw	r16,136(sp)
 800e174:	dd802615 	stw	r22,152(sp)
 800e178:	55b9c83a 	sub	fp,r10,r22
 800e17c:	003e2206 	br	800da08 <__alt_data_end+0xfc00da08>
 800e180:	d8801c17 	ldw	r2,112(sp)
 800e184:	10000426 	beq	r2,zero,800e198 <___svfiprintf_internal_r+0xae8>
 800e188:	d9002917 	ldw	r4,164(sp)
 800e18c:	d9402717 	ldw	r5,156(sp)
 800e190:	d9801a04 	addi	r6,sp,104
 800e194:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e198:	da802717 	ldw	r10,156(sp)
 800e19c:	5080030b 	ldhu	r2,12(r10)
 800e1a0:	1080100c 	andi	r2,r2,64
 800e1a4:	1000511e 	bne	r2,zero,800e2ec <___svfiprintf_internal_r+0xc3c>
 800e1a8:	d8802417 	ldw	r2,144(sp)
 800e1ac:	dfc03617 	ldw	ra,216(sp)
 800e1b0:	df003517 	ldw	fp,212(sp)
 800e1b4:	ddc03417 	ldw	r23,208(sp)
 800e1b8:	dd803317 	ldw	r22,204(sp)
 800e1bc:	dd403217 	ldw	r21,200(sp)
 800e1c0:	dd003117 	ldw	r20,196(sp)
 800e1c4:	dcc03017 	ldw	r19,192(sp)
 800e1c8:	dc802f17 	ldw	r18,188(sp)
 800e1cc:	dc402e17 	ldw	r17,184(sp)
 800e1d0:	dc002d17 	ldw	r16,180(sp)
 800e1d4:	dec03704 	addi	sp,sp,220
 800e1d8:	f800283a 	ret
 800e1dc:	da802117 	ldw	r10,132(sp)
 800e1e0:	dac02017 	ldw	r11,128(sp)
 800e1e4:	52edc83a 	sub	r22,r10,r11
 800e1e8:	05bf540e 	bge	zero,r22,800df3c <__alt_data_end+0xfc00df3c>
 800e1ec:	02400404 	movi	r9,16
 800e1f0:	4d812f0e 	bge	r9,r22,800e6b0 <___svfiprintf_internal_r+0x1000>
 800e1f4:	014200b4 	movhi	r5,2050
 800e1f8:	29410a04 	addi	r5,r5,1064
 800e1fc:	d9402215 	stw	r5,136(sp)
 800e200:	05c001c4 	movi	r23,7
 800e204:	00000306 	br	800e214 <___svfiprintf_internal_r+0xb64>
 800e208:	b5bffc04 	addi	r22,r22,-16
 800e20c:	42000204 	addi	r8,r8,8
 800e210:	4d80130e 	bge	r9,r22,800e260 <___svfiprintf_internal_r+0xbb0>
 800e214:	18c00404 	addi	r3,r3,16
 800e218:	10800044 	addi	r2,r2,1
 800e21c:	44c00015 	stw	r19,0(r8)
 800e220:	42400115 	stw	r9,4(r8)
 800e224:	d8c01c15 	stw	r3,112(sp)
 800e228:	d8801b15 	stw	r2,108(sp)
 800e22c:	b8bff60e 	bge	r23,r2,800e208 <__alt_data_end+0xfc00e208>
 800e230:	9009883a 	mov	r4,r18
 800e234:	a00b883a 	mov	r5,r20
 800e238:	d9801a04 	addi	r6,sp,104
 800e23c:	da402c15 	stw	r9,176(sp)
 800e240:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e244:	da402c17 	ldw	r9,176(sp)
 800e248:	103fd31e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e24c:	b5bffc04 	addi	r22,r22,-16
 800e250:	d8c01c17 	ldw	r3,112(sp)
 800e254:	d8801b17 	ldw	r2,108(sp)
 800e258:	d811883a 	mov	r8,sp
 800e25c:	4dbfed16 	blt	r9,r22,800e214 <__alt_data_end+0xfc00e214>
 800e260:	da802217 	ldw	r10,136(sp)
 800e264:	1d87883a 	add	r3,r3,r22
 800e268:	10800044 	addi	r2,r2,1
 800e26c:	42800015 	stw	r10,0(r8)
 800e270:	45800115 	stw	r22,4(r8)
 800e274:	d8c01c15 	stw	r3,112(sp)
 800e278:	d8801b15 	stw	r2,108(sp)
 800e27c:	010001c4 	movi	r4,7
 800e280:	2080ce16 	blt	r4,r2,800e5bc <___svfiprintf_internal_r+0xf0c>
 800e284:	42000204 	addi	r8,r8,8
 800e288:	003f2c06 	br	800df3c <__alt_data_end+0xfc00df3c>
 800e28c:	9009883a 	mov	r4,r18
 800e290:	a00b883a 	mov	r5,r20
 800e294:	d9801a04 	addi	r6,sp,104
 800e298:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e29c:	103fbe1e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e2a0:	d8c01c17 	ldw	r3,112(sp)
 800e2a4:	d811883a 	mov	r8,sp
 800e2a8:	003f5606 	br	800e004 <__alt_data_end+0xfc00e004>
 800e2ac:	9009883a 	mov	r4,r18
 800e2b0:	a00b883a 	mov	r5,r20
 800e2b4:	d9801a04 	addi	r6,sp,104
 800e2b8:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e2bc:	103f8626 	beq	r2,zero,800e0d8 <__alt_data_end+0xfc00e0d8>
 800e2c0:	003fb506 	br	800e198 <__alt_data_end+0xfc00e198>
 800e2c4:	10803fcc 	andi	r2,r2,255
 800e2c8:	10003b1e 	bne	r2,zero,800e3b8 <___svfiprintf_internal_r+0xd08>
 800e2cc:	8880004c 	andi	r2,r17,1
 800e2d0:	10007e26 	beq	r2,zero,800e4cc <___svfiprintf_internal_r+0xe1c>
 800e2d4:	00800c04 	movi	r2,48
 800e2d8:	d8c019c4 	addi	r3,sp,103
 800e2dc:	d88019c5 	stb	r2,103(sp)
 800e2e0:	df002b17 	ldw	fp,172(sp)
 800e2e4:	d8c02615 	stw	r3,152(sp)
 800e2e8:	003dc706 	br	800da08 <__alt_data_end+0xfc00da08>
 800e2ec:	00bfffc4 	movi	r2,-1
 800e2f0:	003fae06 	br	800e1ac <__alt_data_end+0xfc00e1ac>
 800e2f4:	9009883a 	mov	r4,r18
 800e2f8:	a00b883a 	mov	r5,r20
 800e2fc:	d9801a04 	addi	r6,sp,104
 800e300:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e304:	103fa41e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e308:	d811883a 	mov	r8,sp
 800e30c:	003d2406 	br	800d7a0 <__alt_data_end+0xfc00d7a0>
 800e310:	9009883a 	mov	r4,r18
 800e314:	a00b883a 	mov	r5,r20
 800e318:	d9801a04 	addi	r6,sp,104
 800e31c:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e320:	103f9d1e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e324:	d8c01c17 	ldw	r3,112(sp)
 800e328:	d8801b17 	ldw	r2,108(sp)
 800e32c:	d811883a 	mov	r8,sp
 800e330:	003f2a06 	br	800dfdc <__alt_data_end+0xfc00dfdc>
 800e334:	d9402a17 	ldw	r5,168(sp)
 800e338:	d8c01a04 	addi	r3,sp,104
 800e33c:	488003cc 	andi	r2,r9,15
 800e340:	5008973a 	slli	r4,r10,28
 800e344:	2885883a 	add	r2,r5,r2
 800e348:	4812d13a 	srli	r9,r9,4
 800e34c:	10800003 	ldbu	r2,0(r2)
 800e350:	5014d13a 	srli	r10,r10,4
 800e354:	18ffffc4 	addi	r3,r3,-1
 800e358:	2252b03a 	or	r9,r4,r9
 800e35c:	18800005 	stb	r2,0(r3)
 800e360:	4a84b03a 	or	r2,r9,r10
 800e364:	103ff51e 	bne	r2,zero,800e33c <__alt_data_end+0xfc00e33c>
 800e368:	d8c02615 	stw	r3,152(sp)
 800e36c:	003da406 	br	800da00 <__alt_data_end+0xfc00da00>
 800e370:	9009883a 	mov	r4,r18
 800e374:	a00b883a 	mov	r5,r20
 800e378:	d9801a04 	addi	r6,sp,104
 800e37c:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e380:	103f851e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e384:	d8c01c17 	ldw	r3,112(sp)
 800e388:	d8801b17 	ldw	r2,108(sp)
 800e38c:	d811883a 	mov	r8,sp
 800e390:	003eda06 	br	800defc <__alt_data_end+0xfc00defc>
 800e394:	9009883a 	mov	r4,r18
 800e398:	a00b883a 	mov	r5,r20
 800e39c:	d9801a04 	addi	r6,sp,104
 800e3a0:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e3a4:	103f7c1e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e3a8:	d8c01c17 	ldw	r3,112(sp)
 800e3ac:	d8801b17 	ldw	r2,108(sp)
 800e3b0:	d811883a 	mov	r8,sp
 800e3b4:	003ede06 	br	800df30 <__alt_data_end+0xfc00df30>
 800e3b8:	da801a04 	addi	r10,sp,104
 800e3bc:	da802615 	stw	r10,152(sp)
 800e3c0:	003d9106 	br	800da08 <__alt_data_end+0xfc00da08>
 800e3c4:	00800084 	movi	r2,2
 800e3c8:	4a86b03a 	or	r3,r9,r10
 800e3cc:	003d7106 	br	800d994 <__alt_data_end+0xfc00d994>
 800e3d0:	88c0040c 	andi	r3,r17,16
 800e3d4:	18004f1e 	bne	r3,zero,800e514 <___svfiprintf_internal_r+0xe64>
 800e3d8:	88c0100c 	andi	r3,r17,64
 800e3dc:	18004d26 	beq	r3,zero,800e514 <___svfiprintf_internal_r+0xe64>
 800e3e0:	dac02317 	ldw	r11,140(sp)
 800e3e4:	1240000b 	ldhu	r9,0(r2)
 800e3e8:	0015883a 	mov	r10,zero
 800e3ec:	5ac00104 	addi	r11,r11,4
 800e3f0:	dac02315 	stw	r11,140(sp)
 800e3f4:	00800044 	movi	r2,1
 800e3f8:	4807883a 	mov	r3,r9
 800e3fc:	003d6506 	br	800d994 <__alt_data_end+0xfc00d994>
 800e400:	9009883a 	mov	r4,r18
 800e404:	a00b883a 	mov	r5,r20
 800e408:	d9801a04 	addi	r6,sp,104
 800e40c:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e410:	103f611e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e414:	d8c01c17 	ldw	r3,112(sp)
 800e418:	d8801b17 	ldw	r2,108(sp)
 800e41c:	d811883a 	mov	r8,sp
 800e420:	003ea906 	br	800dec8 <__alt_data_end+0xfc00dec8>
 800e424:	88c0040c 	andi	r3,r17,16
 800e428:	1800321e 	bne	r3,zero,800e4f4 <___svfiprintf_internal_r+0xe44>
 800e42c:	88c0100c 	andi	r3,r17,64
 800e430:	18003026 	beq	r3,zero,800e4f4 <___svfiprintf_internal_r+0xe44>
 800e434:	dac02317 	ldw	r11,140(sp)
 800e438:	1240000b 	ldhu	r9,0(r2)
 800e43c:	0015883a 	mov	r10,zero
 800e440:	5ac00104 	addi	r11,r11,4
 800e444:	dac02315 	stw	r11,140(sp)
 800e448:	0005883a 	mov	r2,zero
 800e44c:	4807883a 	mov	r3,r9
 800e450:	003d5006 	br	800d994 <__alt_data_end+0xfc00d994>
 800e454:	10803fcc 	andi	r2,r2,255
 800e458:	1080201c 	xori	r2,r2,128
 800e45c:	10bfe004 	addi	r2,r2,-128
 800e460:	01000c04 	movi	r4,48
 800e464:	11006826 	beq	r2,r4,800e608 <___svfiprintf_internal_r+0xf58>
 800e468:	da802617 	ldw	r10,152(sp)
 800e46c:	d8801e17 	ldw	r2,120(sp)
 800e470:	193fffc5 	stb	r4,-1(r3)
 800e474:	52bfffc4 	addi	r10,r10,-1
 800e478:	da802615 	stw	r10,152(sp)
 800e47c:	12b9c83a 	sub	fp,r2,r10
 800e480:	003d6106 	br	800da08 <__alt_data_end+0xfc00da08>
 800e484:	00800244 	movi	r2,9
 800e488:	127f1d36 	bltu	r2,r9,800e100 <__alt_data_end+0xfc00e100>
 800e48c:	4a400c04 	addi	r9,r9,48
 800e490:	d8c019c4 	addi	r3,sp,103
 800e494:	da4019c5 	stb	r9,103(sp)
 800e498:	df002b17 	ldw	fp,172(sp)
 800e49c:	d8c02615 	stw	r3,152(sp)
 800e4a0:	003d5906 	br	800da08 <__alt_data_end+0xfc00da08>
 800e4a4:	d8802315 	stw	r2,140(sp)
 800e4a8:	a9000007 	ldb	r4,0(r21)
 800e4ac:	003ccc06 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800e4b0:	9009883a 	mov	r4,r18
 800e4b4:	a00b883a 	mov	r5,r20
 800e4b8:	d9801a04 	addi	r6,sp,104
 800e4bc:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e4c0:	103f351e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e4c4:	d8c01c17 	ldw	r3,112(sp)
 800e4c8:	003efb06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e4cc:	d8c01a04 	addi	r3,sp,104
 800e4d0:	d8c02615 	stw	r3,152(sp)
 800e4d4:	003d4c06 	br	800da08 <__alt_data_end+0xfc00da08>
 800e4d8:	da802317 	ldw	r10,140(sp)
 800e4dc:	1a400017 	ldw	r9,0(r3)
 800e4e0:	52800104 	addi	r10,r10,4
 800e4e4:	da802315 	stw	r10,140(sp)
 800e4e8:	4815d7fa 	srai	r10,r9,31
 800e4ec:	5005883a 	mov	r2,r10
 800e4f0:	003d9d06 	br	800db68 <__alt_data_end+0xfc00db68>
 800e4f4:	da802317 	ldw	r10,140(sp)
 800e4f8:	12400017 	ldw	r9,0(r2)
 800e4fc:	0005883a 	mov	r2,zero
 800e500:	52800104 	addi	r10,r10,4
 800e504:	da802315 	stw	r10,140(sp)
 800e508:	4807883a 	mov	r3,r9
 800e50c:	0015883a 	mov	r10,zero
 800e510:	003d2006 	br	800d994 <__alt_data_end+0xfc00d994>
 800e514:	da802317 	ldw	r10,140(sp)
 800e518:	12400017 	ldw	r9,0(r2)
 800e51c:	00800044 	movi	r2,1
 800e520:	52800104 	addi	r10,r10,4
 800e524:	da802315 	stw	r10,140(sp)
 800e528:	4807883a 	mov	r3,r9
 800e52c:	0015883a 	mov	r10,zero
 800e530:	003d1806 	br	800d994 <__alt_data_end+0xfc00d994>
 800e534:	dac02317 	ldw	r11,140(sp)
 800e538:	12400017 	ldw	r9,0(r2)
 800e53c:	0015883a 	mov	r10,zero
 800e540:	5ac00104 	addi	r11,r11,4
 800e544:	dac02315 	stw	r11,140(sp)
 800e548:	003dde06 	br	800dcc4 <__alt_data_end+0xfc00dcc4>
 800e54c:	a9000007 	ldb	r4,0(r21)
 800e550:	003ca306 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800e554:	dac02317 	ldw	r11,140(sp)
 800e558:	da802417 	ldw	r10,144(sp)
 800e55c:	58800017 	ldw	r2,0(r11)
 800e560:	5007d7fa 	srai	r3,r10,31
 800e564:	5ac00104 	addi	r11,r11,4
 800e568:	dac02315 	stw	r11,140(sp)
 800e56c:	12800015 	stw	r10,0(r2)
 800e570:	10c00115 	stw	r3,4(r2)
 800e574:	003c7206 	br	800d740 <__alt_data_end+0xfc00d740>
 800e578:	00800c04 	movi	r2,48
 800e57c:	d8801d05 	stb	r2,116(sp)
 800e580:	d9001d45 	stb	r4,117(sp)
 800e584:	8c400094 	ori	r17,r17,2
 800e588:	00800084 	movi	r2,2
 800e58c:	003d0106 	br	800d994 <__alt_data_end+0xfc00d994>
 800e590:	ad400044 	addi	r21,r21,1
 800e594:	8c400814 	ori	r17,r17,32
 800e598:	11000047 	ldb	r4,1(r2)
 800e59c:	003c9006 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800e5a0:	dac02317 	ldw	r11,140(sp)
 800e5a4:	da802417 	ldw	r10,144(sp)
 800e5a8:	58800017 	ldw	r2,0(r11)
 800e5ac:	5ac00104 	addi	r11,r11,4
 800e5b0:	dac02315 	stw	r11,140(sp)
 800e5b4:	12800015 	stw	r10,0(r2)
 800e5b8:	003c6106 	br	800d740 <__alt_data_end+0xfc00d740>
 800e5bc:	9009883a 	mov	r4,r18
 800e5c0:	a00b883a 	mov	r5,r20
 800e5c4:	d9801a04 	addi	r6,sp,104
 800e5c8:	800d4e80 	call	800d4e8 <__ssprint_r>
 800e5cc:	103ef21e 	bne	r2,zero,800e198 <__alt_data_end+0xfc00e198>
 800e5d0:	d8c01c17 	ldw	r3,112(sp)
 800e5d4:	d8801b17 	ldw	r2,108(sp)
 800e5d8:	d811883a 	mov	r8,sp
 800e5dc:	003e5706 	br	800df3c <__alt_data_end+0xfc00df3c>
 800e5e0:	02c200b4 	movhi	r11,2050
 800e5e4:	5ac10a04 	addi	r11,r11,1064
 800e5e8:	dac02215 	stw	r11,136(sp)
 800e5ec:	003e7106 	br	800dfb4 <__alt_data_end+0xfc00dfb4>
 800e5f0:	dac02317 	ldw	r11,140(sp)
 800e5f4:	12400017 	ldw	r9,0(r2)
 800e5f8:	0015883a 	mov	r10,zero
 800e5fc:	5ac00104 	addi	r11,r11,4
 800e600:	dac02315 	stw	r11,140(sp)
 800e604:	003daf06 	br	800dcc4 <__alt_data_end+0xfc00dcc4>
 800e608:	da801e17 	ldw	r10,120(sp)
 800e60c:	d8c02617 	ldw	r3,152(sp)
 800e610:	50f9c83a 	sub	fp,r10,r3
 800e614:	003cfc06 	br	800da08 <__alt_data_end+0xfc00da08>
 800e618:	da002c15 	stw	r8,176(sp)
 800e61c:	8004a080 	call	8004a08 <strlen>
 800e620:	1039883a 	mov	fp,r2
 800e624:	dac01d83 	ldbu	r11,118(sp)
 800e628:	ddc02315 	stw	r23,140(sp)
 800e62c:	0021883a 	mov	r16,zero
 800e630:	da002c17 	ldw	r8,176(sp)
 800e634:	003cf406 	br	800da08 <__alt_data_end+0xfc00da08>
 800e638:	04001004 	movi	r16,64
 800e63c:	800b883a 	mov	r5,r16
 800e640:	8003ff40 	call	8003ff4 <_malloc_r>
 800e644:	da802717 	ldw	r10,156(sp)
 800e648:	50800015 	stw	r2,0(r10)
 800e64c:	50800415 	stw	r2,16(r10)
 800e650:	10002c26 	beq	r2,zero,800e704 <___svfiprintf_internal_r+0x1054>
 800e654:	da802717 	ldw	r10,156(sp)
 800e658:	54000515 	stw	r16,20(r10)
 800e65c:	003c2806 	br	800d700 <__alt_data_end+0xfc00d700>
 800e660:	00800184 	movi	r2,6
 800e664:	1400012e 	bgeu	r2,r16,800e66c <___svfiprintf_internal_r+0xfbc>
 800e668:	1021883a 	mov	r16,r2
 800e66c:	8039883a 	mov	fp,r16
 800e670:	802d883a 	mov	r22,r16
 800e674:	80001716 	blt	r16,zero,800e6d4 <___svfiprintf_internal_r+0x1024>
 800e678:	008200b4 	movhi	r2,2050
 800e67c:	1080a604 	addi	r2,r2,664
 800e680:	dd802015 	stw	r22,128(sp)
 800e684:	ddc02315 	stw	r23,140(sp)
 800e688:	d8802615 	stw	r2,152(sp)
 800e68c:	003d4706 	br	800dbac <__alt_data_end+0xfc00dbac>
 800e690:	010200b4 	movhi	r4,2050
 800e694:	21010e04 	addi	r4,r4,1080
 800e698:	d9002815 	stw	r4,160(sp)
 800e69c:	003d7206 	br	800dc68 <__alt_data_end+0xfc00dc68>
 800e6a0:	010200b4 	movhi	r4,2050
 800e6a4:	21010e04 	addi	r4,r4,1080
 800e6a8:	d9002815 	stw	r4,160(sp)
 800e6ac:	003e7906 	br	800e094 <__alt_data_end+0xfc00e094>
 800e6b0:	010200b4 	movhi	r4,2050
 800e6b4:	21010a04 	addi	r4,r4,1064
 800e6b8:	d9002215 	stw	r4,136(sp)
 800e6bc:	003ee806 	br	800e260 <__alt_data_end+0xfc00e260>
 800e6c0:	8039883a 	mov	fp,r16
 800e6c4:	dac01d83 	ldbu	r11,118(sp)
 800e6c8:	ddc02315 	stw	r23,140(sp)
 800e6cc:	0021883a 	mov	r16,zero
 800e6d0:	003ccd06 	br	800da08 <__alt_data_end+0xfc00da08>
 800e6d4:	002d883a 	mov	r22,zero
 800e6d8:	003fe706 	br	800e678 <__alt_data_end+0xfc00e678>
 800e6dc:	dac02317 	ldw	r11,140(sp)
 800e6e0:	a805883a 	mov	r2,r21
 800e6e4:	502b883a 	mov	r21,r10
 800e6e8:	5c000017 	ldw	r16,0(r11)
 800e6ec:	59000104 	addi	r4,r11,4
 800e6f0:	d9002315 	stw	r4,140(sp)
 800e6f4:	803fa80e 	bge	r16,zero,800e598 <__alt_data_end+0xfc00e598>
 800e6f8:	043fffc4 	movi	r16,-1
 800e6fc:	11000047 	ldb	r4,1(r2)
 800e700:	003c3706 	br	800d7e0 <__alt_data_end+0xfc00d7e0>
 800e704:	dac02917 	ldw	r11,164(sp)
 800e708:	00800304 	movi	r2,12
 800e70c:	58800015 	stw	r2,0(r11)
 800e710:	00bfffc4 	movi	r2,-1
 800e714:	003ea506 	br	800e1ac <__alt_data_end+0xfc00e1ac>

0800e718 <__sprint_r.part.0>:
 800e718:	28801917 	ldw	r2,100(r5)
 800e71c:	defff604 	addi	sp,sp,-40
 800e720:	dd400515 	stw	r21,20(sp)
 800e724:	dcc00315 	stw	r19,12(sp)
 800e728:	dfc00915 	stw	ra,36(sp)
 800e72c:	df000815 	stw	fp,32(sp)
 800e730:	ddc00715 	stw	r23,28(sp)
 800e734:	dd800615 	stw	r22,24(sp)
 800e738:	dd000415 	stw	r20,16(sp)
 800e73c:	dc800215 	stw	r18,8(sp)
 800e740:	dc400115 	stw	r17,4(sp)
 800e744:	dc000015 	stw	r16,0(sp)
 800e748:	1088000c 	andi	r2,r2,8192
 800e74c:	2827883a 	mov	r19,r5
 800e750:	302b883a 	mov	r21,r6
 800e754:	10002d26 	beq	r2,zero,800e80c <__sprint_r.part.0+0xf4>
 800e758:	30800217 	ldw	r2,8(r6)
 800e75c:	35800017 	ldw	r22,0(r6)
 800e760:	10002826 	beq	r2,zero,800e804 <__sprint_r.part.0+0xec>
 800e764:	2029883a 	mov	r20,r4
 800e768:	b5c00104 	addi	r23,r22,4
 800e76c:	04bfffc4 	movi	r18,-1
 800e770:	bc400017 	ldw	r17,0(r23)
 800e774:	b4000017 	ldw	r16,0(r22)
 800e778:	0039883a 	mov	fp,zero
 800e77c:	8822d0ba 	srli	r17,r17,2
 800e780:	04400316 	blt	zero,r17,800e790 <__sprint_r.part.0+0x78>
 800e784:	00001706 	br	800e7e4 <__sprint_r.part.0+0xcc>
 800e788:	84000104 	addi	r16,r16,4
 800e78c:	8f001526 	beq	r17,fp,800e7e4 <__sprint_r.part.0+0xcc>
 800e790:	81400017 	ldw	r5,0(r16)
 800e794:	a009883a 	mov	r4,r20
 800e798:	980d883a 	mov	r6,r19
 800e79c:	800ffa40 	call	800ffa4 <_fputwc_r>
 800e7a0:	e7000044 	addi	fp,fp,1
 800e7a4:	14bff81e 	bne	r2,r18,800e788 <__alt_data_end+0xfc00e788>
 800e7a8:	9005883a 	mov	r2,r18
 800e7ac:	a8000215 	stw	zero,8(r21)
 800e7b0:	a8000115 	stw	zero,4(r21)
 800e7b4:	dfc00917 	ldw	ra,36(sp)
 800e7b8:	df000817 	ldw	fp,32(sp)
 800e7bc:	ddc00717 	ldw	r23,28(sp)
 800e7c0:	dd800617 	ldw	r22,24(sp)
 800e7c4:	dd400517 	ldw	r21,20(sp)
 800e7c8:	dd000417 	ldw	r20,16(sp)
 800e7cc:	dcc00317 	ldw	r19,12(sp)
 800e7d0:	dc800217 	ldw	r18,8(sp)
 800e7d4:	dc400117 	ldw	r17,4(sp)
 800e7d8:	dc000017 	ldw	r16,0(sp)
 800e7dc:	dec00a04 	addi	sp,sp,40
 800e7e0:	f800283a 	ret
 800e7e4:	a8c00217 	ldw	r3,8(r21)
 800e7e8:	8c63883a 	add	r17,r17,r17
 800e7ec:	8c63883a 	add	r17,r17,r17
 800e7f0:	1c45c83a 	sub	r2,r3,r17
 800e7f4:	a8800215 	stw	r2,8(r21)
 800e7f8:	b5800204 	addi	r22,r22,8
 800e7fc:	bdc00204 	addi	r23,r23,8
 800e800:	103fdb1e 	bne	r2,zero,800e770 <__alt_data_end+0xfc00e770>
 800e804:	0005883a 	mov	r2,zero
 800e808:	003fe806 	br	800e7ac <__alt_data_end+0xfc00e7ac>
 800e80c:	800aeb40 	call	800aeb4 <__sfvwrite_r>
 800e810:	003fe606 	br	800e7ac <__alt_data_end+0xfc00e7ac>

0800e814 <__sprint_r>:
 800e814:	30c00217 	ldw	r3,8(r6)
 800e818:	18000126 	beq	r3,zero,800e820 <__sprint_r+0xc>
 800e81c:	800e7181 	jmpi	800e718 <__sprint_r.part.0>
 800e820:	30000115 	stw	zero,4(r6)
 800e824:	0005883a 	mov	r2,zero
 800e828:	f800283a 	ret

0800e82c <___vfiprintf_internal_r>:
 800e82c:	defeca04 	addi	sp,sp,-1240
 800e830:	dd813215 	stw	r22,1224(sp)
 800e834:	dd013015 	stw	r20,1216(sp)
 800e838:	dfc13515 	stw	ra,1236(sp)
 800e83c:	df013415 	stw	fp,1232(sp)
 800e840:	ddc13315 	stw	r23,1228(sp)
 800e844:	dd413115 	stw	r21,1220(sp)
 800e848:	dcc12f15 	stw	r19,1212(sp)
 800e84c:	dc812e15 	stw	r18,1208(sp)
 800e850:	dc412d15 	stw	r17,1204(sp)
 800e854:	dc012c15 	stw	r16,1200(sp)
 800e858:	d9012015 	stw	r4,1152(sp)
 800e85c:	d9c12115 	stw	r7,1156(sp)
 800e860:	2829883a 	mov	r20,r5
 800e864:	302d883a 	mov	r22,r6
 800e868:	20000226 	beq	r4,zero,800e874 <___vfiprintf_internal_r+0x48>
 800e86c:	20800e17 	ldw	r2,56(r4)
 800e870:	1001d326 	beq	r2,zero,800efc0 <___vfiprintf_internal_r+0x794>
 800e874:	a0c0030b 	ldhu	r3,12(r20)
 800e878:	1908000c 	andi	r4,r3,8192
 800e87c:	1805883a 	mov	r2,r3
 800e880:	2000071e 	bne	r4,zero,800e8a0 <___vfiprintf_internal_r+0x74>
 800e884:	a1001917 	ldw	r4,100(r20)
 800e888:	18880014 	ori	r2,r3,8192
 800e88c:	00f7ffc4 	movi	r3,-8193
 800e890:	20c8703a 	and	r4,r4,r3
 800e894:	a080030d 	sth	r2,12(r20)
 800e898:	1007883a 	mov	r3,r2
 800e89c:	a1001915 	stw	r4,100(r20)
 800e8a0:	1100020c 	andi	r4,r2,8
 800e8a4:	20018926 	beq	r4,zero,800eecc <___vfiprintf_internal_r+0x6a0>
 800e8a8:	a1000417 	ldw	r4,16(r20)
 800e8ac:	20018726 	beq	r4,zero,800eecc <___vfiprintf_internal_r+0x6a0>
 800e8b0:	1080068c 	andi	r2,r2,26
 800e8b4:	01000284 	movi	r4,10
 800e8b8:	11018d26 	beq	r2,r4,800eef0 <___vfiprintf_internal_r+0x6c4>
 800e8bc:	da810a04 	addi	r10,sp,1064
 800e8c0:	dac109c4 	addi	r11,sp,1063
 800e8c4:	070200b4 	movhi	fp,2050
 800e8c8:	05c200b4 	movhi	r23,2050
 800e8cc:	da811e15 	stw	r10,1144(sp)
 800e8d0:	52d5c83a 	sub	r10,r10,r11
 800e8d4:	e7011604 	addi	fp,fp,1112
 800e8d8:	bdc11204 	addi	r23,r23,1096
 800e8dc:	dac11f15 	stw	r11,1148(sp)
 800e8e0:	dec11a15 	stw	sp,1128(sp)
 800e8e4:	d8011c15 	stw	zero,1136(sp)
 800e8e8:	d8011b15 	stw	zero,1132(sp)
 800e8ec:	d8012615 	stw	zero,1176(sp)
 800e8f0:	d8012215 	stw	zero,1160(sp)
 800e8f4:	da812715 	stw	r10,1180(sp)
 800e8f8:	d811883a 	mov	r8,sp
 800e8fc:	b021883a 	mov	r16,r22
 800e900:	80800007 	ldb	r2,0(r16)
 800e904:	10039c26 	beq	r2,zero,800f778 <___vfiprintf_internal_r+0xf4c>
 800e908:	01000944 	movi	r4,37
 800e90c:	11039a26 	beq	r2,r4,800f778 <___vfiprintf_internal_r+0xf4c>
 800e910:	8005883a 	mov	r2,r16
 800e914:	00000106 	br	800e91c <___vfiprintf_internal_r+0xf0>
 800e918:	19000326 	beq	r3,r4,800e928 <___vfiprintf_internal_r+0xfc>
 800e91c:	10800044 	addi	r2,r2,1
 800e920:	10c00007 	ldb	r3,0(r2)
 800e924:	183ffc1e 	bne	r3,zero,800e918 <__alt_data_end+0xfc00e918>
 800e928:	1425c83a 	sub	r18,r2,r16
 800e92c:	1023883a 	mov	r17,r2
 800e930:	90001026 	beq	r18,zero,800e974 <___vfiprintf_internal_r+0x148>
 800e934:	d8c11c17 	ldw	r3,1136(sp)
 800e938:	d8811b17 	ldw	r2,1132(sp)
 800e93c:	44000015 	stw	r16,0(r8)
 800e940:	90c7883a 	add	r3,r18,r3
 800e944:	10800044 	addi	r2,r2,1
 800e948:	44800115 	stw	r18,4(r8)
 800e94c:	d8c11c15 	stw	r3,1136(sp)
 800e950:	d8811b15 	stw	r2,1132(sp)
 800e954:	010001c4 	movi	r4,7
 800e958:	2080750e 	bge	r4,r2,800eb30 <___vfiprintf_internal_r+0x304>
 800e95c:	18039d1e 	bne	r3,zero,800f7d4 <___vfiprintf_internal_r+0xfa8>
 800e960:	dac12217 	ldw	r11,1160(sp)
 800e964:	d8011b15 	stw	zero,1132(sp)
 800e968:	d811883a 	mov	r8,sp
 800e96c:	5c97883a 	add	r11,r11,r18
 800e970:	dac12215 	stw	r11,1160(sp)
 800e974:	88800007 	ldb	r2,0(r17)
 800e978:	1002e026 	beq	r2,zero,800f4fc <___vfiprintf_internal_r+0xcd0>
 800e97c:	88c00047 	ldb	r3,1(r17)
 800e980:	8c000044 	addi	r16,r17,1
 800e984:	d8011d85 	stb	zero,1142(sp)
 800e988:	000d883a 	mov	r6,zero
 800e98c:	027fffc4 	movi	r9,-1
 800e990:	0027883a 	mov	r19,zero
 800e994:	002b883a 	mov	r21,zero
 800e998:	01001604 	movi	r4,88
 800e99c:	01400244 	movi	r5,9
 800e9a0:	03000a84 	movi	r12,42
 800e9a4:	01c01b04 	movi	r7,108
 800e9a8:	84000044 	addi	r16,r16,1
 800e9ac:	18bff804 	addi	r2,r3,-32
 800e9b0:	20825f36 	bltu	r4,r2,800f330 <___vfiprintf_internal_r+0xb04>
 800e9b4:	100490ba 	slli	r2,r2,2
 800e9b8:	02820074 	movhi	r10,2049
 800e9bc:	52ba7304 	addi	r10,r10,-5684
 800e9c0:	1285883a 	add	r2,r2,r10
 800e9c4:	10800017 	ldw	r2,0(r2)
 800e9c8:	1000683a 	jmp	r2
 800e9cc:	0800f1a0 	cmpeqi	zero,at,966
 800e9d0:	0800f330 	cmpltui	zero,at,972
 800e9d4:	0800f330 	cmpltui	zero,at,972
 800e9d8:	0800f324 	muli	zero,at,972
 800e9dc:	0800f330 	cmpltui	zero,at,972
 800e9e0:	0800f330 	cmpltui	zero,at,972
 800e9e4:	0800f330 	cmpltui	zero,at,972
 800e9e8:	0800f330 	cmpltui	zero,at,972
 800e9ec:	0800f330 	cmpltui	zero,at,972
 800e9f0:	0800f330 	cmpltui	zero,at,972
 800e9f4:	0800f2fc 	xorhi	zero,at,971
 800e9f8:	0800f318 	cmpnei	zero,at,972
 800e9fc:	0800f330 	cmpltui	zero,at,972
 800ea00:	0800efd0 	cmplti	zero,at,959
 800ea04:	0800f130 	cmpltui	zero,at,964
 800ea08:	0800f330 	cmpltui	zero,at,972
 800ea0c:	0800f0b4 	orhi	zero,at,962
 800ea10:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea14:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea18:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea1c:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea20:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea24:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea28:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea2c:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea30:	0800f0c0 	call	800f0c <__alt_mem_sdram-0x77ff0f4>
 800ea34:	0800f330 	cmpltui	zero,at,972
 800ea38:	0800f330 	cmpltui	zero,at,972
 800ea3c:	0800f330 	cmpltui	zero,at,972
 800ea40:	0800f330 	cmpltui	zero,at,972
 800ea44:	0800f330 	cmpltui	zero,at,972
 800ea48:	0800f330 	cmpltui	zero,at,972
 800ea4c:	0800f330 	cmpltui	zero,at,972
 800ea50:	0800f330 	cmpltui	zero,at,972
 800ea54:	0800f330 	cmpltui	zero,at,972
 800ea58:	0800f330 	cmpltui	zero,at,972
 800ea5c:	0800f0ec 	andhi	zero,at,963
 800ea60:	0800f330 	cmpltui	zero,at,972
 800ea64:	0800f330 	cmpltui	zero,at,972
 800ea68:	0800f330 	cmpltui	zero,at,972
 800ea6c:	0800f330 	cmpltui	zero,at,972
 800ea70:	0800f330 	cmpltui	zero,at,972
 800ea74:	0800f330 	cmpltui	zero,at,972
 800ea78:	0800f330 	cmpltui	zero,at,972
 800ea7c:	0800f330 	cmpltui	zero,at,972
 800ea80:	0800f330 	cmpltui	zero,at,972
 800ea84:	0800f330 	cmpltui	zero,at,972
 800ea88:	0800eb80 	call	800eb8 <__alt_mem_sdram-0x77ff148>
 800ea8c:	0800f330 	cmpltui	zero,at,972
 800ea90:	0800f330 	cmpltui	zero,at,972
 800ea94:	0800f330 	cmpltui	zero,at,972
 800ea98:	0800f330 	cmpltui	zero,at,972
 800ea9c:	0800f330 	cmpltui	zero,at,972
 800eaa0:	0800eb44 	addi	zero,at,941
 800eaa4:	0800f330 	cmpltui	zero,at,972
 800eaa8:	0800f330 	cmpltui	zero,at,972
 800eaac:	0800f02c 	andhi	zero,at,960
 800eab0:	0800f330 	cmpltui	zero,at,972
 800eab4:	0800f330 	cmpltui	zero,at,972
 800eab8:	0800f330 	cmpltui	zero,at,972
 800eabc:	0800f330 	cmpltui	zero,at,972
 800eac0:	0800f330 	cmpltui	zero,at,972
 800eac4:	0800f330 	cmpltui	zero,at,972
 800eac8:	0800f330 	cmpltui	zero,at,972
 800eacc:	0800f330 	cmpltui	zero,at,972
 800ead0:	0800f330 	cmpltui	zero,at,972
 800ead4:	0800f330 	cmpltui	zero,at,972
 800ead8:	0800f084 	addi	zero,at,962
 800eadc:	0800f21c 	xori	zero,at,968
 800eae0:	0800f330 	cmpltui	zero,at,972
 800eae4:	0800f330 	cmpltui	zero,at,972
 800eae8:	0800f330 	cmpltui	zero,at,972
 800eaec:	0800f2a4 	muli	zero,at,970
 800eaf0:	0800f21c 	xori	zero,at,968
 800eaf4:	0800f330 	cmpltui	zero,at,972
 800eaf8:	0800f330 	cmpltui	zero,at,972
 800eafc:	0800f2b0 	cmpltui	zero,at,970
 800eb00:	0800f330 	cmpltui	zero,at,972
 800eb04:	0800f170 	cmpltui	zero,at,965
 800eb08:	0800eb84 	addi	zero,at,942
 800eb0c:	0800f258 	cmpnei	zero,at,969
 800eb10:	0800f298 	cmpnei	zero,at,970
 800eb14:	0800f330 	cmpltui	zero,at,972
 800eb18:	0800f1bc 	xorhi	zero,at,966
 800eb1c:	0800f330 	cmpltui	zero,at,972
 800eb20:	0800eb48 	cmpgei	zero,at,941
 800eb24:	0800f330 	cmpltui	zero,at,972
 800eb28:	0800f330 	cmpltui	zero,at,972
 800eb2c:	0800f2c0 	call	800f2c <__alt_mem_sdram-0x77ff0d4>
 800eb30:	42000204 	addi	r8,r8,8
 800eb34:	dac12217 	ldw	r11,1160(sp)
 800eb38:	5c97883a 	add	r11,r11,r18
 800eb3c:	dac12215 	stw	r11,1160(sp)
 800eb40:	003f8c06 	br	800e974 <__alt_data_end+0xfc00e974>
 800eb44:	ad400414 	ori	r21,r21,16
 800eb48:	a880080c 	andi	r2,r21,32
 800eb4c:	10012f1e 	bne	r2,zero,800f00c <___vfiprintf_internal_r+0x7e0>
 800eb50:	a880040c 	andi	r2,r21,16
 800eb54:	1001ff1e 	bne	r2,zero,800f354 <___vfiprintf_internal_r+0xb28>
 800eb58:	a880100c 	andi	r2,r21,64
 800eb5c:	1001fd26 	beq	r2,zero,800f354 <___vfiprintf_internal_r+0xb28>
 800eb60:	da812117 	ldw	r10,1156(sp)
 800eb64:	002d883a 	mov	r22,zero
 800eb68:	00800044 	movi	r2,1
 800eb6c:	5480000b 	ldhu	r18,0(r10)
 800eb70:	52800104 	addi	r10,r10,4
 800eb74:	da812115 	stw	r10,1156(sp)
 800eb78:	9009883a 	mov	r4,r18
 800eb7c:	00000a06 	br	800eba8 <___vfiprintf_internal_r+0x37c>
 800eb80:	ad400414 	ori	r21,r21,16
 800eb84:	a880080c 	andi	r2,r21,32
 800eb88:	10011426 	beq	r2,zero,800efdc <___vfiprintf_internal_r+0x7b0>
 800eb8c:	da812117 	ldw	r10,1156(sp)
 800eb90:	0005883a 	mov	r2,zero
 800eb94:	54800017 	ldw	r18,0(r10)
 800eb98:	55800117 	ldw	r22,4(r10)
 800eb9c:	52800204 	addi	r10,r10,8
 800eba0:	da812115 	stw	r10,1156(sp)
 800eba4:	9588b03a 	or	r4,r18,r22
 800eba8:	d8011d85 	stb	zero,1142(sp)
 800ebac:	4823883a 	mov	r17,r9
 800ebb0:	0019883a 	mov	r12,zero
 800ebb4:	48000216 	blt	r9,zero,800ebc0 <___vfiprintf_internal_r+0x394>
 800ebb8:	00ffdfc4 	movi	r3,-129
 800ebbc:	a8ea703a 	and	r21,r21,r3
 800ebc0:	2002221e 	bne	r4,zero,800f44c <___vfiprintf_internal_r+0xc20>
 800ebc4:	4802c726 	beq	r9,zero,800f6e4 <___vfiprintf_internal_r+0xeb8>
 800ebc8:	10803fcc 	andi	r2,r2,255
 800ebcc:	00c00044 	movi	r3,1
 800ebd0:	10c24426 	beq	r2,r3,800f4e4 <___vfiprintf_internal_r+0xcb8>
 800ebd4:	00c00084 	movi	r3,2
 800ebd8:	10c2cc26 	beq	r2,r3,800f70c <___vfiprintf_internal_r+0xee0>
 800ebdc:	d8c10a04 	addi	r3,sp,1064
 800ebe0:	9008d0fa 	srli	r4,r18,3
 800ebe4:	b00a977a 	slli	r5,r22,29
 800ebe8:	b02cd0fa 	srli	r22,r22,3
 800ebec:	948001cc 	andi	r18,r18,7
 800ebf0:	90800c04 	addi	r2,r18,48
 800ebf4:	18ffffc4 	addi	r3,r3,-1
 800ebf8:	2924b03a 	or	r18,r5,r4
 800ebfc:	18800005 	stb	r2,0(r3)
 800ec00:	9588b03a 	or	r4,r18,r22
 800ec04:	203ff61e 	bne	r4,zero,800ebe0 <__alt_data_end+0xfc00ebe0>
 800ec08:	a900004c 	andi	r4,r21,1
 800ec0c:	d8c12415 	stw	r3,1168(sp)
 800ec10:	2002fb1e 	bne	r4,zero,800f800 <___vfiprintf_internal_r+0xfd4>
 800ec14:	da811e17 	ldw	r10,1144(sp)
 800ec18:	50e3c83a 	sub	r17,r10,r3
 800ec1c:	8825883a 	mov	r18,r17
 800ec20:	8a40010e 	bge	r17,r9,800ec28 <___vfiprintf_internal_r+0x3fc>
 800ec24:	4825883a 	mov	r18,r9
 800ec28:	63003fcc 	andi	r12,r12,255
 800ec2c:	6300201c 	xori	r12,r12,128
 800ec30:	633fe004 	addi	r12,r12,-128
 800ec34:	60000126 	beq	r12,zero,800ec3c <___vfiprintf_internal_r+0x410>
 800ec38:	94800044 	addi	r18,r18,1
 800ec3c:	ab80008c 	andi	r14,r21,2
 800ec40:	70000126 	beq	r14,zero,800ec48 <___vfiprintf_internal_r+0x41c>
 800ec44:	94800084 	addi	r18,r18,2
 800ec48:	ad80210c 	andi	r22,r21,132
 800ec4c:	b001df1e 	bne	r22,zero,800f3cc <___vfiprintf_internal_r+0xba0>
 800ec50:	9c8fc83a 	sub	r7,r19,r18
 800ec54:	01c1dd0e 	bge	zero,r7,800f3cc <___vfiprintf_internal_r+0xba0>
 800ec58:	03000404 	movi	r12,16
 800ec5c:	d8811c17 	ldw	r2,1136(sp)
 800ec60:	61c3920e 	bge	r12,r7,800faac <___vfiprintf_internal_r+0x1280>
 800ec64:	028200b4 	movhi	r10,2050
 800ec68:	52811604 	addi	r10,r10,1112
 800ec6c:	dc012915 	stw	r16,1188(sp)
 800ec70:	d9811b17 	ldw	r6,1132(sp)
 800ec74:	da812315 	stw	r10,1164(sp)
 800ec78:	00c001c4 	movi	r3,7
 800ec7c:	da412515 	stw	r9,1172(sp)
 800ec80:	db812815 	stw	r14,1184(sp)
 800ec84:	3821883a 	mov	r16,r7
 800ec88:	00000506 	br	800eca0 <___vfiprintf_internal_r+0x474>
 800ec8c:	31400084 	addi	r5,r6,2
 800ec90:	42000204 	addi	r8,r8,8
 800ec94:	200d883a 	mov	r6,r4
 800ec98:	843ffc04 	addi	r16,r16,-16
 800ec9c:	64000d0e 	bge	r12,r16,800ecd4 <___vfiprintf_internal_r+0x4a8>
 800eca0:	10800404 	addi	r2,r2,16
 800eca4:	31000044 	addi	r4,r6,1
 800eca8:	47000015 	stw	fp,0(r8)
 800ecac:	43000115 	stw	r12,4(r8)
 800ecb0:	d8811c15 	stw	r2,1136(sp)
 800ecb4:	d9011b15 	stw	r4,1132(sp)
 800ecb8:	193ff40e 	bge	r3,r4,800ec8c <__alt_data_end+0xfc00ec8c>
 800ecbc:	1001b51e 	bne	r2,zero,800f394 <___vfiprintf_internal_r+0xb68>
 800ecc0:	843ffc04 	addi	r16,r16,-16
 800ecc4:	000d883a 	mov	r6,zero
 800ecc8:	01400044 	movi	r5,1
 800eccc:	d811883a 	mov	r8,sp
 800ecd0:	643ff316 	blt	r12,r16,800eca0 <__alt_data_end+0xfc00eca0>
 800ecd4:	800f883a 	mov	r7,r16
 800ecd8:	da412517 	ldw	r9,1172(sp)
 800ecdc:	db812817 	ldw	r14,1184(sp)
 800ece0:	dc012917 	ldw	r16,1188(sp)
 800ece4:	dac12317 	ldw	r11,1164(sp)
 800ece8:	3887883a 	add	r3,r7,r2
 800ecec:	41c00115 	stw	r7,4(r8)
 800ecf0:	42c00015 	stw	r11,0(r8)
 800ecf4:	d8c11c15 	stw	r3,1136(sp)
 800ecf8:	d9411b15 	stw	r5,1132(sp)
 800ecfc:	008001c4 	movi	r2,7
 800ed00:	11429316 	blt	r2,r5,800f750 <___vfiprintf_internal_r+0xf24>
 800ed04:	d9011d87 	ldb	r4,1142(sp)
 800ed08:	42000204 	addi	r8,r8,8
 800ed0c:	28800044 	addi	r2,r5,1
 800ed10:	2001b31e 	bne	r4,zero,800f3e0 <___vfiprintf_internal_r+0xbb4>
 800ed14:	70000c26 	beq	r14,zero,800ed48 <___vfiprintf_internal_r+0x51c>
 800ed18:	d9011d04 	addi	r4,sp,1140
 800ed1c:	18c00084 	addi	r3,r3,2
 800ed20:	41000015 	stw	r4,0(r8)
 800ed24:	01000084 	movi	r4,2
 800ed28:	41000115 	stw	r4,4(r8)
 800ed2c:	d8c11c15 	stw	r3,1136(sp)
 800ed30:	d8811b15 	stw	r2,1132(sp)
 800ed34:	010001c4 	movi	r4,7
 800ed38:	20826516 	blt	r4,r2,800f6d0 <___vfiprintf_internal_r+0xea4>
 800ed3c:	100b883a 	mov	r5,r2
 800ed40:	42000204 	addi	r8,r8,8
 800ed44:	10800044 	addi	r2,r2,1
 800ed48:	01002004 	movi	r4,128
 800ed4c:	b1021a26 	beq	r22,r4,800f5b8 <___vfiprintf_internal_r+0xd8c>
 800ed50:	4c6dc83a 	sub	r22,r9,r17
 800ed54:	0580230e 	bge	zero,r22,800ede4 <___vfiprintf_internal_r+0x5b8>
 800ed58:	01c00404 	movi	r7,16
 800ed5c:	3d83300e 	bge	r7,r22,800fa20 <___vfiprintf_internal_r+0x11f4>
 800ed60:	008200b4 	movhi	r2,2050
 800ed64:	10811204 	addi	r2,r2,1096
 800ed68:	d8812315 	stw	r2,1164(sp)
 800ed6c:	030001c4 	movi	r12,7
 800ed70:	00000506 	br	800ed88 <___vfiprintf_internal_r+0x55c>
 800ed74:	28800084 	addi	r2,r5,2
 800ed78:	42000204 	addi	r8,r8,8
 800ed7c:	200b883a 	mov	r5,r4
 800ed80:	b5bffc04 	addi	r22,r22,-16
 800ed84:	3d800d0e 	bge	r7,r22,800edbc <___vfiprintf_internal_r+0x590>
 800ed88:	18c00404 	addi	r3,r3,16
 800ed8c:	29000044 	addi	r4,r5,1
 800ed90:	45c00015 	stw	r23,0(r8)
 800ed94:	41c00115 	stw	r7,4(r8)
 800ed98:	d8c11c15 	stw	r3,1136(sp)
 800ed9c:	d9011b15 	stw	r4,1132(sp)
 800eda0:	613ff40e 	bge	r12,r4,800ed74 <__alt_data_end+0xfc00ed74>
 800eda4:	18019b1e 	bne	r3,zero,800f414 <___vfiprintf_internal_r+0xbe8>
 800eda8:	b5bffc04 	addi	r22,r22,-16
 800edac:	000b883a 	mov	r5,zero
 800edb0:	00800044 	movi	r2,1
 800edb4:	d811883a 	mov	r8,sp
 800edb8:	3dbff316 	blt	r7,r22,800ed88 <__alt_data_end+0xfc00ed88>
 800edbc:	da812317 	ldw	r10,1164(sp)
 800edc0:	1d87883a 	add	r3,r3,r22
 800edc4:	45800115 	stw	r22,4(r8)
 800edc8:	42800015 	stw	r10,0(r8)
 800edcc:	d8c11c15 	stw	r3,1136(sp)
 800edd0:	d8811b15 	stw	r2,1132(sp)
 800edd4:	010001c4 	movi	r4,7
 800edd8:	2081dd16 	blt	r4,r2,800f550 <___vfiprintf_internal_r+0xd24>
 800eddc:	42000204 	addi	r8,r8,8
 800ede0:	10800044 	addi	r2,r2,1
 800ede4:	da812417 	ldw	r10,1168(sp)
 800ede8:	1c47883a 	add	r3,r3,r17
 800edec:	44400115 	stw	r17,4(r8)
 800edf0:	42800015 	stw	r10,0(r8)
 800edf4:	d8c11c15 	stw	r3,1136(sp)
 800edf8:	d8811b15 	stw	r2,1132(sp)
 800edfc:	010001c4 	movi	r4,7
 800ee00:	2081dc0e 	bge	r4,r2,800f574 <___vfiprintf_internal_r+0xd48>
 800ee04:	1802611e 	bne	r3,zero,800f78c <___vfiprintf_internal_r+0xf60>
 800ee08:	d8011b15 	stw	zero,1132(sp)
 800ee0c:	aac0010c 	andi	r11,r21,4
 800ee10:	58002726 	beq	r11,zero,800eeb0 <___vfiprintf_internal_r+0x684>
 800ee14:	9ca3c83a 	sub	r17,r19,r18
 800ee18:	d811883a 	mov	r8,sp
 800ee1c:	0443510e 	bge	zero,r17,800fb64 <___vfiprintf_internal_r+0x1338>
 800ee20:	01c00404 	movi	r7,16
 800ee24:	3c43320e 	bge	r7,r17,800faf0 <___vfiprintf_internal_r+0x12c4>
 800ee28:	008200b4 	movhi	r2,2050
 800ee2c:	10811604 	addi	r2,r2,1112
 800ee30:	d9011b17 	ldw	r4,1132(sp)
 800ee34:	d8812315 	stw	r2,1164(sp)
 800ee38:	382d883a 	mov	r22,r7
 800ee3c:	054001c4 	movi	r21,7
 800ee40:	00000506 	br	800ee58 <___vfiprintf_internal_r+0x62c>
 800ee44:	21400084 	addi	r5,r4,2
 800ee48:	42000204 	addi	r8,r8,8
 800ee4c:	1009883a 	mov	r4,r2
 800ee50:	8c7ffc04 	addi	r17,r17,-16
 800ee54:	b4400d0e 	bge	r22,r17,800ee8c <___vfiprintf_internal_r+0x660>
 800ee58:	18c00404 	addi	r3,r3,16
 800ee5c:	20800044 	addi	r2,r4,1
 800ee60:	47000015 	stw	fp,0(r8)
 800ee64:	45800115 	stw	r22,4(r8)
 800ee68:	d8c11c15 	stw	r3,1136(sp)
 800ee6c:	d8811b15 	stw	r2,1132(sp)
 800ee70:	a8bff40e 	bge	r21,r2,800ee44 <__alt_data_end+0xfc00ee44>
 800ee74:	1801ac1e 	bne	r3,zero,800f528 <___vfiprintf_internal_r+0xcfc>
 800ee78:	8c7ffc04 	addi	r17,r17,-16
 800ee7c:	0009883a 	mov	r4,zero
 800ee80:	01400044 	movi	r5,1
 800ee84:	d811883a 	mov	r8,sp
 800ee88:	b47ff316 	blt	r22,r17,800ee58 <__alt_data_end+0xfc00ee58>
 800ee8c:	da812317 	ldw	r10,1164(sp)
 800ee90:	1c47883a 	add	r3,r3,r17
 800ee94:	44400115 	stw	r17,4(r8)
 800ee98:	42800015 	stw	r10,0(r8)
 800ee9c:	d8c11c15 	stw	r3,1136(sp)
 800eea0:	d9411b15 	stw	r5,1132(sp)
 800eea4:	008001c4 	movi	r2,7
 800eea8:	1141b70e 	bge	r2,r5,800f588 <___vfiprintf_internal_r+0xd5c>
 800eeac:	1802cf1e 	bne	r3,zero,800f9ec <___vfiprintf_internal_r+0x11c0>
 800eeb0:	94c2ca16 	blt	r18,r19,800f9dc <___vfiprintf_internal_r+0x11b0>
 800eeb4:	dac12217 	ldw	r11,1160(sp)
 800eeb8:	5c97883a 	add	r11,r11,r18
 800eebc:	dac12215 	stw	r11,1160(sp)
 800eec0:	d8011b15 	stw	zero,1132(sp)
 800eec4:	d811883a 	mov	r8,sp
 800eec8:	003e8d06 	br	800e900 <__alt_data_end+0xfc00e900>
 800eecc:	d9012017 	ldw	r4,1152(sp)
 800eed0:	a00b883a 	mov	r5,r20
 800eed4:	8008a500 	call	8008a50 <__swsetup_r>
 800eed8:	10002c1e 	bne	r2,zero,800ef8c <___vfiprintf_internal_r+0x760>
 800eedc:	a0c0030b 	ldhu	r3,12(r20)
 800eee0:	01000284 	movi	r4,10
 800eee4:	1805883a 	mov	r2,r3
 800eee8:	1080068c 	andi	r2,r2,26
 800eeec:	113e731e 	bne	r2,r4,800e8bc <__alt_data_end+0xfc00e8bc>
 800eef0:	a080038b 	ldhu	r2,14(r20)
 800eef4:	113fffcc 	andi	r4,r2,65535
 800eef8:	2120001c 	xori	r4,r4,32768
 800eefc:	21200004 	addi	r4,r4,-32768
 800ef00:	203e6e16 	blt	r4,zero,800e8bc <__alt_data_end+0xfc00e8bc>
 800ef04:	a3001917 	ldw	r12,100(r20)
 800ef08:	a2c00717 	ldw	r11,28(r20)
 800ef0c:	a2800917 	ldw	r10,36(r20)
 800ef10:	d9012017 	ldw	r4,1152(sp)
 800ef14:	d9c12117 	ldw	r7,1156(sp)
 800ef18:	02410004 	movi	r9,1024
 800ef1c:	18ffff4c 	andi	r3,r3,65533
 800ef20:	da4b883a 	add	r5,sp,r9
 800ef24:	b00d883a 	mov	r6,r22
 800ef28:	d8c1030d 	sth	r3,1036(sp)
 800ef2c:	db011915 	stw	r12,1124(sp)
 800ef30:	d881038d 	sth	r2,1038(sp)
 800ef34:	dac10715 	stw	r11,1052(sp)
 800ef38:	da810915 	stw	r10,1060(sp)
 800ef3c:	dec10015 	stw	sp,1024(sp)
 800ef40:	dec10415 	stw	sp,1040(sp)
 800ef44:	da410215 	stw	r9,1032(sp)
 800ef48:	da410515 	stw	r9,1044(sp)
 800ef4c:	d8010615 	stw	zero,1048(sp)
 800ef50:	800e82c0 	call	800e82c <___vfiprintf_internal_r>
 800ef54:	1021883a 	mov	r16,r2
 800ef58:	10000416 	blt	r2,zero,800ef6c <___vfiprintf_internal_r+0x740>
 800ef5c:	d9012017 	ldw	r4,1152(sp)
 800ef60:	d9410004 	addi	r5,sp,1024
 800ef64:	800a4a80 	call	800a4a8 <_fflush_r>
 800ef68:	1002fc1e 	bne	r2,zero,800fb5c <___vfiprintf_internal_r+0x1330>
 800ef6c:	d881030b 	ldhu	r2,1036(sp)
 800ef70:	1080100c 	andi	r2,r2,64
 800ef74:	10000326 	beq	r2,zero,800ef84 <___vfiprintf_internal_r+0x758>
 800ef78:	a080030b 	ldhu	r2,12(r20)
 800ef7c:	10801014 	ori	r2,r2,64
 800ef80:	a080030d 	sth	r2,12(r20)
 800ef84:	8005883a 	mov	r2,r16
 800ef88:	00000106 	br	800ef90 <___vfiprintf_internal_r+0x764>
 800ef8c:	00bfffc4 	movi	r2,-1
 800ef90:	dfc13517 	ldw	ra,1236(sp)
 800ef94:	df013417 	ldw	fp,1232(sp)
 800ef98:	ddc13317 	ldw	r23,1228(sp)
 800ef9c:	dd813217 	ldw	r22,1224(sp)
 800efa0:	dd413117 	ldw	r21,1220(sp)
 800efa4:	dd013017 	ldw	r20,1216(sp)
 800efa8:	dcc12f17 	ldw	r19,1212(sp)
 800efac:	dc812e17 	ldw	r18,1208(sp)
 800efb0:	dc412d17 	ldw	r17,1204(sp)
 800efb4:	dc012c17 	ldw	r16,1200(sp)
 800efb8:	dec13604 	addi	sp,sp,1240
 800efbc:	f800283a 	ret
 800efc0:	800aa500 	call	800aa50 <__sinit>
 800efc4:	003e2b06 	br	800e874 <__alt_data_end+0xfc00e874>
 800efc8:	04e7c83a 	sub	r19,zero,r19
 800efcc:	d8812115 	stw	r2,1156(sp)
 800efd0:	ad400114 	ori	r21,r21,4
 800efd4:	80c00007 	ldb	r3,0(r16)
 800efd8:	003e7306 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800efdc:	a880040c 	andi	r2,r21,16
 800efe0:	1000e41e 	bne	r2,zero,800f374 <___vfiprintf_internal_r+0xb48>
 800efe4:	a880100c 	andi	r2,r21,64
 800efe8:	1000e226 	beq	r2,zero,800f374 <___vfiprintf_internal_r+0xb48>
 800efec:	da812117 	ldw	r10,1156(sp)
 800eff0:	002d883a 	mov	r22,zero
 800eff4:	0005883a 	mov	r2,zero
 800eff8:	5480000b 	ldhu	r18,0(r10)
 800effc:	52800104 	addi	r10,r10,4
 800f000:	da812115 	stw	r10,1156(sp)
 800f004:	9009883a 	mov	r4,r18
 800f008:	003ee706 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f00c:	da812117 	ldw	r10,1156(sp)
 800f010:	00800044 	movi	r2,1
 800f014:	54800017 	ldw	r18,0(r10)
 800f018:	55800117 	ldw	r22,4(r10)
 800f01c:	52800204 	addi	r10,r10,8
 800f020:	da812115 	stw	r10,1156(sp)
 800f024:	9588b03a 	or	r4,r18,r22
 800f028:	003edf06 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f02c:	02c200b4 	movhi	r11,2050
 800f030:	5ac09c04 	addi	r11,r11,624
 800f034:	d9811d85 	stb	r6,1142(sp)
 800f038:	dac12615 	stw	r11,1176(sp)
 800f03c:	a900080c 	andi	r4,r21,32
 800f040:	d8812117 	ldw	r2,1156(sp)
 800f044:	2000a526 	beq	r4,zero,800f2dc <___vfiprintf_internal_r+0xab0>
 800f048:	da812117 	ldw	r10,1156(sp)
 800f04c:	14800017 	ldw	r18,0(r2)
 800f050:	15800117 	ldw	r22,4(r2)
 800f054:	52800204 	addi	r10,r10,8
 800f058:	da812115 	stw	r10,1156(sp)
 800f05c:	a880004c 	andi	r2,r21,1
 800f060:	1001d926 	beq	r2,zero,800f7c8 <___vfiprintf_internal_r+0xf9c>
 800f064:	9588b03a 	or	r4,r18,r22
 800f068:	20024426 	beq	r4,zero,800f97c <___vfiprintf_internal_r+0x1150>
 800f06c:	00800c04 	movi	r2,48
 800f070:	d8811d05 	stb	r2,1140(sp)
 800f074:	d8c11d45 	stb	r3,1141(sp)
 800f078:	ad400094 	ori	r21,r21,2
 800f07c:	00800084 	movi	r2,2
 800f080:	003ec906 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f084:	da812117 	ldw	r10,1156(sp)
 800f088:	04800044 	movi	r18,1
 800f08c:	dac10004 	addi	r11,sp,1024
 800f090:	50800017 	ldw	r2,0(r10)
 800f094:	52800104 	addi	r10,r10,4
 800f098:	d8011d85 	stb	zero,1142(sp)
 800f09c:	d8810005 	stb	r2,1024(sp)
 800f0a0:	da812115 	stw	r10,1156(sp)
 800f0a4:	9023883a 	mov	r17,r18
 800f0a8:	dac12415 	stw	r11,1168(sp)
 800f0ac:	0013883a 	mov	r9,zero
 800f0b0:	003ee206 	br	800ec3c <__alt_data_end+0xfc00ec3c>
 800f0b4:	ad402014 	ori	r21,r21,128
 800f0b8:	80c00007 	ldb	r3,0(r16)
 800f0bc:	003e3a06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f0c0:	8015883a 	mov	r10,r16
 800f0c4:	0027883a 	mov	r19,zero
 800f0c8:	18bff404 	addi	r2,r3,-48
 800f0cc:	50c00007 	ldb	r3,0(r10)
 800f0d0:	9cc002a4 	muli	r19,r19,10
 800f0d4:	84000044 	addi	r16,r16,1
 800f0d8:	8015883a 	mov	r10,r16
 800f0dc:	98a7883a 	add	r19,r19,r2
 800f0e0:	18bff404 	addi	r2,r3,-48
 800f0e4:	28bff92e 	bgeu	r5,r2,800f0cc <__alt_data_end+0xfc00f0cc>
 800f0e8:	003e3006 	br	800e9ac <__alt_data_end+0xfc00e9ac>
 800f0ec:	ad400414 	ori	r21,r21,16
 800f0f0:	d9811d85 	stb	r6,1142(sp)
 800f0f4:	a880080c 	andi	r2,r21,32
 800f0f8:	d8c12117 	ldw	r3,1156(sp)
 800f0fc:	10004b26 	beq	r2,zero,800f22c <___vfiprintf_internal_r+0xa00>
 800f100:	da812117 	ldw	r10,1156(sp)
 800f104:	18800117 	ldw	r2,4(r3)
 800f108:	1c800017 	ldw	r18,0(r3)
 800f10c:	52800204 	addi	r10,r10,8
 800f110:	da812115 	stw	r10,1156(sp)
 800f114:	102d883a 	mov	r22,r2
 800f118:	1001f116 	blt	r2,zero,800f8e0 <___vfiprintf_internal_r+0x10b4>
 800f11c:	db011d83 	ldbu	r12,1142(sp)
 800f120:	4823883a 	mov	r17,r9
 800f124:	00800044 	movi	r2,1
 800f128:	9588b03a 	or	r4,r18,r22
 800f12c:	003ea106 	br	800ebb4 <__alt_data_end+0xfc00ebb4>
 800f130:	80c00007 	ldb	r3,0(r16)
 800f134:	82800044 	addi	r10,r16,1
 800f138:	1b027f26 	beq	r3,r12,800fb38 <___vfiprintf_internal_r+0x130c>
 800f13c:	18bff404 	addi	r2,r3,-48
 800f140:	5021883a 	mov	r16,r10
 800f144:	0013883a 	mov	r9,zero
 800f148:	28be1836 	bltu	r5,r2,800e9ac <__alt_data_end+0xfc00e9ac>
 800f14c:	80c00007 	ldb	r3,0(r16)
 800f150:	4a4002a4 	muli	r9,r9,10
 800f154:	84000044 	addi	r16,r16,1
 800f158:	1253883a 	add	r9,r2,r9
 800f15c:	18bff404 	addi	r2,r3,-48
 800f160:	28bffa2e 	bgeu	r5,r2,800f14c <__alt_data_end+0xfc00f14c>
 800f164:	483e110e 	bge	r9,zero,800e9ac <__alt_data_end+0xfc00e9ac>
 800f168:	027fffc4 	movi	r9,-1
 800f16c:	003e0f06 	br	800e9ac <__alt_data_end+0xfc00e9ac>
 800f170:	d9811d85 	stb	r6,1142(sp)
 800f174:	a880080c 	andi	r2,r21,32
 800f178:	1001ee26 	beq	r2,zero,800f934 <___vfiprintf_internal_r+0x1108>
 800f17c:	da812117 	ldw	r10,1156(sp)
 800f180:	dac12217 	ldw	r11,1160(sp)
 800f184:	50800017 	ldw	r2,0(r10)
 800f188:	5807d7fa 	srai	r3,r11,31
 800f18c:	52800104 	addi	r10,r10,4
 800f190:	da812115 	stw	r10,1156(sp)
 800f194:	12c00015 	stw	r11,0(r2)
 800f198:	10c00115 	stw	r3,4(r2)
 800f19c:	003dd806 	br	800e900 <__alt_data_end+0xfc00e900>
 800f1a0:	30803fcc 	andi	r2,r6,255
 800f1a4:	1080201c 	xori	r2,r2,128
 800f1a8:	10bfe004 	addi	r2,r2,-128
 800f1ac:	1001df1e 	bne	r2,zero,800f92c <___vfiprintf_internal_r+0x1100>
 800f1b0:	01800804 	movi	r6,32
 800f1b4:	80c00007 	ldb	r3,0(r16)
 800f1b8:	003dfb06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f1bc:	da812117 	ldw	r10,1156(sp)
 800f1c0:	dac12117 	ldw	r11,1156(sp)
 800f1c4:	d8011d85 	stb	zero,1142(sp)
 800f1c8:	52800017 	ldw	r10,0(r10)
 800f1cc:	5d800104 	addi	r22,r11,4
 800f1d0:	da812415 	stw	r10,1168(sp)
 800f1d4:	50023b26 	beq	r10,zero,800fac4 <___vfiprintf_internal_r+0x1298>
 800f1d8:	d9012417 	ldw	r4,1168(sp)
 800f1dc:	48021f16 	blt	r9,zero,800fa5c <___vfiprintf_internal_r+0x1230>
 800f1e0:	480d883a 	mov	r6,r9
 800f1e4:	000b883a 	mov	r5,zero
 800f1e8:	da012a15 	stw	r8,1192(sp)
 800f1ec:	da412b15 	stw	r9,1196(sp)
 800f1f0:	800b7600 	call	800b760 <memchr>
 800f1f4:	da012a17 	ldw	r8,1192(sp)
 800f1f8:	da412b17 	ldw	r9,1196(sp)
 800f1fc:	10024726 	beq	r2,zero,800fb1c <___vfiprintf_internal_r+0x12f0>
 800f200:	d8c12417 	ldw	r3,1168(sp)
 800f204:	10e3c83a 	sub	r17,r2,r3
 800f208:	4c41f616 	blt	r9,r17,800f9e4 <___vfiprintf_internal_r+0x11b8>
 800f20c:	db011d83 	ldbu	r12,1142(sp)
 800f210:	dd812115 	stw	r22,1156(sp)
 800f214:	0013883a 	mov	r9,zero
 800f218:	003e8006 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f21c:	d9811d85 	stb	r6,1142(sp)
 800f220:	a880080c 	andi	r2,r21,32
 800f224:	d8c12117 	ldw	r3,1156(sp)
 800f228:	103fb51e 	bne	r2,zero,800f100 <__alt_data_end+0xfc00f100>
 800f22c:	a880040c 	andi	r2,r21,16
 800f230:	10015e1e 	bne	r2,zero,800f7ac <___vfiprintf_internal_r+0xf80>
 800f234:	a880100c 	andi	r2,r21,64
 800f238:	10015c26 	beq	r2,zero,800f7ac <___vfiprintf_internal_r+0xf80>
 800f23c:	1c80000f 	ldh	r18,0(r3)
 800f240:	da812117 	ldw	r10,1156(sp)
 800f244:	902dd7fa 	srai	r22,r18,31
 800f248:	52800104 	addi	r10,r10,4
 800f24c:	da812115 	stw	r10,1156(sp)
 800f250:	b005883a 	mov	r2,r22
 800f254:	003fb006 	br	800f118 <__alt_data_end+0xfc00f118>
 800f258:	da812117 	ldw	r10,1156(sp)
 800f25c:	00800c04 	movi	r2,48
 800f260:	02c200b4 	movhi	r11,2050
 800f264:	54800017 	ldw	r18,0(r10)
 800f268:	d8811d05 	stb	r2,1140(sp)
 800f26c:	52800104 	addi	r10,r10,4
 800f270:	00801e04 	movi	r2,120
 800f274:	5ac0a104 	addi	r11,r11,644
 800f278:	d8811d45 	stb	r2,1141(sp)
 800f27c:	002d883a 	mov	r22,zero
 800f280:	ad400094 	ori	r21,r21,2
 800f284:	da812115 	stw	r10,1156(sp)
 800f288:	dac12615 	stw	r11,1176(sp)
 800f28c:	00800084 	movi	r2,2
 800f290:	9009883a 	mov	r4,r18
 800f294:	003e4406 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f298:	ad400814 	ori	r21,r21,32
 800f29c:	80c00007 	ldb	r3,0(r16)
 800f2a0:	003dc106 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f2a4:	ad401014 	ori	r21,r21,64
 800f2a8:	80c00007 	ldb	r3,0(r16)
 800f2ac:	003dbe06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f2b0:	80c00007 	ldb	r3,0(r16)
 800f2b4:	19c1de26 	beq	r3,r7,800fa30 <___vfiprintf_internal_r+0x1204>
 800f2b8:	ad400414 	ori	r21,r21,16
 800f2bc:	003dba06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f2c0:	008200b4 	movhi	r2,2050
 800f2c4:	1080a104 	addi	r2,r2,644
 800f2c8:	d8812615 	stw	r2,1176(sp)
 800f2cc:	d9811d85 	stb	r6,1142(sp)
 800f2d0:	a900080c 	andi	r4,r21,32
 800f2d4:	d8812117 	ldw	r2,1156(sp)
 800f2d8:	203f5b1e 	bne	r4,zero,800f048 <__alt_data_end+0xfc00f048>
 800f2dc:	a900040c 	andi	r4,r21,16
 800f2e0:	2001a826 	beq	r4,zero,800f984 <___vfiprintf_internal_r+0x1158>
 800f2e4:	dac12117 	ldw	r11,1156(sp)
 800f2e8:	14800017 	ldw	r18,0(r2)
 800f2ec:	002d883a 	mov	r22,zero
 800f2f0:	5ac00104 	addi	r11,r11,4
 800f2f4:	dac12115 	stw	r11,1156(sp)
 800f2f8:	003f5806 	br	800f05c <__alt_data_end+0xfc00f05c>
 800f2fc:	da812117 	ldw	r10,1156(sp)
 800f300:	54c00017 	ldw	r19,0(r10)
 800f304:	50800104 	addi	r2,r10,4
 800f308:	983f2f16 	blt	r19,zero,800efc8 <__alt_data_end+0xfc00efc8>
 800f30c:	d8812115 	stw	r2,1156(sp)
 800f310:	80c00007 	ldb	r3,0(r16)
 800f314:	003da406 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f318:	01800ac4 	movi	r6,43
 800f31c:	80c00007 	ldb	r3,0(r16)
 800f320:	003da106 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f324:	ad400054 	ori	r21,r21,1
 800f328:	80c00007 	ldb	r3,0(r16)
 800f32c:	003d9e06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f330:	d9811d85 	stb	r6,1142(sp)
 800f334:	18007126 	beq	r3,zero,800f4fc <___vfiprintf_internal_r+0xcd0>
 800f338:	04800044 	movi	r18,1
 800f33c:	d8c10005 	stb	r3,1024(sp)
 800f340:	d8c10004 	addi	r3,sp,1024
 800f344:	d8011d85 	stb	zero,1142(sp)
 800f348:	9023883a 	mov	r17,r18
 800f34c:	d8c12415 	stw	r3,1168(sp)
 800f350:	003f5606 	br	800f0ac <__alt_data_end+0xfc00f0ac>
 800f354:	dac12117 	ldw	r11,1156(sp)
 800f358:	002d883a 	mov	r22,zero
 800f35c:	00800044 	movi	r2,1
 800f360:	5c800017 	ldw	r18,0(r11)
 800f364:	5ac00104 	addi	r11,r11,4
 800f368:	dac12115 	stw	r11,1156(sp)
 800f36c:	9009883a 	mov	r4,r18
 800f370:	003e0d06 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f374:	dac12117 	ldw	r11,1156(sp)
 800f378:	002d883a 	mov	r22,zero
 800f37c:	0005883a 	mov	r2,zero
 800f380:	5c800017 	ldw	r18,0(r11)
 800f384:	5ac00104 	addi	r11,r11,4
 800f388:	dac12115 	stw	r11,1156(sp)
 800f38c:	9009883a 	mov	r4,r18
 800f390:	003e0506 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f394:	d9012017 	ldw	r4,1152(sp)
 800f398:	a00b883a 	mov	r5,r20
 800f39c:	d9811a04 	addi	r6,sp,1128
 800f3a0:	d8c12a15 	stw	r3,1192(sp)
 800f3a4:	db012b15 	stw	r12,1196(sp)
 800f3a8:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f3ac:	d8c12a17 	ldw	r3,1192(sp)
 800f3b0:	db012b17 	ldw	r12,1196(sp)
 800f3b4:	1000571e 	bne	r2,zero,800f514 <___vfiprintf_internal_r+0xce8>
 800f3b8:	d9811b17 	ldw	r6,1132(sp)
 800f3bc:	d8811c17 	ldw	r2,1136(sp)
 800f3c0:	d811883a 	mov	r8,sp
 800f3c4:	31400044 	addi	r5,r6,1
 800f3c8:	003e3306 	br	800ec98 <__alt_data_end+0xfc00ec98>
 800f3cc:	d9411b17 	ldw	r5,1132(sp)
 800f3d0:	d8c11c17 	ldw	r3,1136(sp)
 800f3d4:	28800044 	addi	r2,r5,1
 800f3d8:	d9011d87 	ldb	r4,1142(sp)
 800f3dc:	203e4d26 	beq	r4,zero,800ed14 <__alt_data_end+0xfc00ed14>
 800f3e0:	01000044 	movi	r4,1
 800f3e4:	d9411d84 	addi	r5,sp,1142
 800f3e8:	1907883a 	add	r3,r3,r4
 800f3ec:	41400015 	stw	r5,0(r8)
 800f3f0:	41000115 	stw	r4,4(r8)
 800f3f4:	d8c11c15 	stw	r3,1136(sp)
 800f3f8:	d8811b15 	stw	r2,1132(sp)
 800f3fc:	014001c4 	movi	r5,7
 800f400:	2880aa16 	blt	r5,r2,800f6ac <___vfiprintf_internal_r+0xe80>
 800f404:	100b883a 	mov	r5,r2
 800f408:	42000204 	addi	r8,r8,8
 800f40c:	10800044 	addi	r2,r2,1
 800f410:	003e4006 	br	800ed14 <__alt_data_end+0xfc00ed14>
 800f414:	d9012017 	ldw	r4,1152(sp)
 800f418:	a00b883a 	mov	r5,r20
 800f41c:	d9811a04 	addi	r6,sp,1128
 800f420:	d9c12a15 	stw	r7,1192(sp)
 800f424:	db012b15 	stw	r12,1196(sp)
 800f428:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f42c:	d9c12a17 	ldw	r7,1192(sp)
 800f430:	db012b17 	ldw	r12,1196(sp)
 800f434:	1000371e 	bne	r2,zero,800f514 <___vfiprintf_internal_r+0xce8>
 800f438:	d9411b17 	ldw	r5,1132(sp)
 800f43c:	d8c11c17 	ldw	r3,1136(sp)
 800f440:	d811883a 	mov	r8,sp
 800f444:	28800044 	addi	r2,r5,1
 800f448:	003e4d06 	br	800ed80 <__alt_data_end+0xfc00ed80>
 800f44c:	10803fcc 	andi	r2,r2,255
 800f450:	00c00044 	movi	r3,1
 800f454:	10fddf1e 	bne	r2,r3,800ebd4 <__alt_data_end+0xfc00ebd4>
 800f458:	b000021e 	bne	r22,zero,800f464 <___vfiprintf_internal_r+0xc38>
 800f45c:	00800244 	movi	r2,9
 800f460:	1480202e 	bgeu	r2,r18,800f4e4 <___vfiprintf_internal_r+0xcb8>
 800f464:	dc012515 	stw	r16,1172(sp)
 800f468:	dc410a04 	addi	r17,sp,1064
 800f46c:	9021883a 	mov	r16,r18
 800f470:	da012415 	stw	r8,1168(sp)
 800f474:	b025883a 	mov	r18,r22
 800f478:	da412315 	stw	r9,1164(sp)
 800f47c:	602d883a 	mov	r22,r12
 800f480:	8009883a 	mov	r4,r16
 800f484:	900b883a 	mov	r5,r18
 800f488:	01800284 	movi	r6,10
 800f48c:	000f883a 	mov	r7,zero
 800f490:	8010aa40 	call	8010aa4 <__umoddi3>
 800f494:	10800c04 	addi	r2,r2,48
 800f498:	8c7fffc4 	addi	r17,r17,-1
 800f49c:	8009883a 	mov	r4,r16
 800f4a0:	900b883a 	mov	r5,r18
 800f4a4:	01800284 	movi	r6,10
 800f4a8:	000f883a 	mov	r7,zero
 800f4ac:	88800005 	stb	r2,0(r17)
 800f4b0:	80104e40 	call	80104e4 <__udivdi3>
 800f4b4:	1021883a 	mov	r16,r2
 800f4b8:	10c4b03a 	or	r2,r2,r3
 800f4bc:	1825883a 	mov	r18,r3
 800f4c0:	103fef1e 	bne	r2,zero,800f480 <__alt_data_end+0xfc00f480>
 800f4c4:	da811e17 	ldw	r10,1144(sp)
 800f4c8:	da012417 	ldw	r8,1168(sp)
 800f4cc:	da412317 	ldw	r9,1164(sp)
 800f4d0:	dc412415 	stw	r17,1168(sp)
 800f4d4:	b019883a 	mov	r12,r22
 800f4d8:	dc012517 	ldw	r16,1172(sp)
 800f4dc:	5463c83a 	sub	r17,r10,r17
 800f4e0:	003dce06 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f4e4:	94800c04 	addi	r18,r18,48
 800f4e8:	d8c109c4 	addi	r3,sp,1063
 800f4ec:	dc8109c5 	stb	r18,1063(sp)
 800f4f0:	dc412717 	ldw	r17,1180(sp)
 800f4f4:	d8c12415 	stw	r3,1168(sp)
 800f4f8:	003dc806 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f4fc:	d8811c17 	ldw	r2,1136(sp)
 800f500:	10000426 	beq	r2,zero,800f514 <___vfiprintf_internal_r+0xce8>
 800f504:	d9012017 	ldw	r4,1152(sp)
 800f508:	a00b883a 	mov	r5,r20
 800f50c:	d9811a04 	addi	r6,sp,1128
 800f510:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f514:	a080030b 	ldhu	r2,12(r20)
 800f518:	1080100c 	andi	r2,r2,64
 800f51c:	103e9b1e 	bne	r2,zero,800ef8c <__alt_data_end+0xfc00ef8c>
 800f520:	d8812217 	ldw	r2,1160(sp)
 800f524:	003e9a06 	br	800ef90 <__alt_data_end+0xfc00ef90>
 800f528:	d9012017 	ldw	r4,1152(sp)
 800f52c:	a00b883a 	mov	r5,r20
 800f530:	d9811a04 	addi	r6,sp,1128
 800f534:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f538:	103ff61e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f53c:	d9011b17 	ldw	r4,1132(sp)
 800f540:	d8c11c17 	ldw	r3,1136(sp)
 800f544:	d811883a 	mov	r8,sp
 800f548:	21400044 	addi	r5,r4,1
 800f54c:	003e4006 	br	800ee50 <__alt_data_end+0xfc00ee50>
 800f550:	1800d61e 	bne	r3,zero,800f8ac <___vfiprintf_internal_r+0x1080>
 800f554:	dac12417 	ldw	r11,1168(sp)
 800f558:	00800044 	movi	r2,1
 800f55c:	dc400115 	stw	r17,4(sp)
 800f560:	dac00015 	stw	r11,0(sp)
 800f564:	dc411c15 	stw	r17,1136(sp)
 800f568:	d8811b15 	stw	r2,1132(sp)
 800f56c:	8807883a 	mov	r3,r17
 800f570:	d811883a 	mov	r8,sp
 800f574:	42000204 	addi	r8,r8,8
 800f578:	aac0010c 	andi	r11,r21,4
 800f57c:	58000226 	beq	r11,zero,800f588 <___vfiprintf_internal_r+0xd5c>
 800f580:	9ca3c83a 	sub	r17,r19,r18
 800f584:	047e2616 	blt	zero,r17,800ee20 <__alt_data_end+0xfc00ee20>
 800f588:	94c0010e 	bge	r18,r19,800f590 <___vfiprintf_internal_r+0xd64>
 800f58c:	9825883a 	mov	r18,r19
 800f590:	da812217 	ldw	r10,1160(sp)
 800f594:	5495883a 	add	r10,r10,r18
 800f598:	da812215 	stw	r10,1160(sp)
 800f59c:	183e4826 	beq	r3,zero,800eec0 <__alt_data_end+0xfc00eec0>
 800f5a0:	d9012017 	ldw	r4,1152(sp)
 800f5a4:	a00b883a 	mov	r5,r20
 800f5a8:	d9811a04 	addi	r6,sp,1128
 800f5ac:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f5b0:	103e4326 	beq	r2,zero,800eec0 <__alt_data_end+0xfc00eec0>
 800f5b4:	003fd706 	br	800f514 <__alt_data_end+0xfc00f514>
 800f5b8:	9cadc83a 	sub	r22,r19,r18
 800f5bc:	05bde40e 	bge	zero,r22,800ed50 <__alt_data_end+0xfc00ed50>
 800f5c0:	03000404 	movi	r12,16
 800f5c4:	6581500e 	bge	r12,r22,800fb08 <___vfiprintf_internal_r+0x12dc>
 800f5c8:	008200b4 	movhi	r2,2050
 800f5cc:	10811204 	addi	r2,r2,1096
 800f5d0:	d8812315 	stw	r2,1164(sp)
 800f5d4:	8005883a 	mov	r2,r16
 800f5d8:	038001c4 	movi	r14,7
 800f5dc:	b021883a 	mov	r16,r22
 800f5e0:	da412515 	stw	r9,1172(sp)
 800f5e4:	102d883a 	mov	r22,r2
 800f5e8:	00000506 	br	800f600 <___vfiprintf_internal_r+0xdd4>
 800f5ec:	29000084 	addi	r4,r5,2
 800f5f0:	42000204 	addi	r8,r8,8
 800f5f4:	100b883a 	mov	r5,r2
 800f5f8:	843ffc04 	addi	r16,r16,-16
 800f5fc:	64000d0e 	bge	r12,r16,800f634 <___vfiprintf_internal_r+0xe08>
 800f600:	18c00404 	addi	r3,r3,16
 800f604:	28800044 	addi	r2,r5,1
 800f608:	45c00015 	stw	r23,0(r8)
 800f60c:	43000115 	stw	r12,4(r8)
 800f610:	d8c11c15 	stw	r3,1136(sp)
 800f614:	d8811b15 	stw	r2,1132(sp)
 800f618:	70bff40e 	bge	r14,r2,800f5ec <__alt_data_end+0xfc00f5ec>
 800f61c:	1800151e 	bne	r3,zero,800f674 <___vfiprintf_internal_r+0xe48>
 800f620:	843ffc04 	addi	r16,r16,-16
 800f624:	000b883a 	mov	r5,zero
 800f628:	01000044 	movi	r4,1
 800f62c:	d811883a 	mov	r8,sp
 800f630:	643ff316 	blt	r12,r16,800f600 <__alt_data_end+0xfc00f600>
 800f634:	da412517 	ldw	r9,1172(sp)
 800f638:	b005883a 	mov	r2,r22
 800f63c:	802d883a 	mov	r22,r16
 800f640:	1021883a 	mov	r16,r2
 800f644:	da812317 	ldw	r10,1164(sp)
 800f648:	1d87883a 	add	r3,r3,r22
 800f64c:	45800115 	stw	r22,4(r8)
 800f650:	42800015 	stw	r10,0(r8)
 800f654:	d8c11c15 	stw	r3,1136(sp)
 800f658:	d9011b15 	stw	r4,1132(sp)
 800f65c:	008001c4 	movi	r2,7
 800f660:	11008d16 	blt	r2,r4,800f898 <___vfiprintf_internal_r+0x106c>
 800f664:	42000204 	addi	r8,r8,8
 800f668:	20800044 	addi	r2,r4,1
 800f66c:	200b883a 	mov	r5,r4
 800f670:	003db706 	br	800ed50 <__alt_data_end+0xfc00ed50>
 800f674:	d9012017 	ldw	r4,1152(sp)
 800f678:	a00b883a 	mov	r5,r20
 800f67c:	d9811a04 	addi	r6,sp,1128
 800f680:	db012b15 	stw	r12,1196(sp)
 800f684:	db812a15 	stw	r14,1192(sp)
 800f688:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f68c:	db012b17 	ldw	r12,1196(sp)
 800f690:	db812a17 	ldw	r14,1192(sp)
 800f694:	103f9f1e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f698:	d9411b17 	ldw	r5,1132(sp)
 800f69c:	d8c11c17 	ldw	r3,1136(sp)
 800f6a0:	d811883a 	mov	r8,sp
 800f6a4:	29000044 	addi	r4,r5,1
 800f6a8:	003fd306 	br	800f5f8 <__alt_data_end+0xfc00f5f8>
 800f6ac:	18006c1e 	bne	r3,zero,800f860 <___vfiprintf_internal_r+0x1034>
 800f6b0:	70004f26 	beq	r14,zero,800f7f0 <___vfiprintf_internal_r+0xfc4>
 800f6b4:	d8811d04 	addi	r2,sp,1140
 800f6b8:	00c00084 	movi	r3,2
 800f6bc:	d8800015 	stw	r2,0(sp)
 800f6c0:	d8c00115 	stw	r3,4(sp)
 800f6c4:	2005883a 	mov	r2,r4
 800f6c8:	d811883a 	mov	r8,sp
 800f6cc:	003d9b06 	br	800ed3c <__alt_data_end+0xfc00ed3c>
 800f6d0:	1800571e 	bne	r3,zero,800f830 <___vfiprintf_internal_r+0x1004>
 800f6d4:	000b883a 	mov	r5,zero
 800f6d8:	00800044 	movi	r2,1
 800f6dc:	d811883a 	mov	r8,sp
 800f6e0:	003d9906 	br	800ed48 <__alt_data_end+0xfc00ed48>
 800f6e4:	10803fcc 	andi	r2,r2,255
 800f6e8:	1000251e 	bne	r2,zero,800f780 <___vfiprintf_internal_r+0xf54>
 800f6ec:	a880004c 	andi	r2,r21,1
 800f6f0:	10007826 	beq	r2,zero,800f8d4 <___vfiprintf_internal_r+0x10a8>
 800f6f4:	00800c04 	movi	r2,48
 800f6f8:	d8c109c4 	addi	r3,sp,1063
 800f6fc:	d88109c5 	stb	r2,1063(sp)
 800f700:	dc412717 	ldw	r17,1180(sp)
 800f704:	d8c12415 	stw	r3,1168(sp)
 800f708:	003d4406 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f70c:	d9012617 	ldw	r4,1176(sp)
 800f710:	dc410a04 	addi	r17,sp,1064
 800f714:	908003cc 	andi	r2,r18,15
 800f718:	b006973a 	slli	r3,r22,28
 800f71c:	2085883a 	add	r2,r4,r2
 800f720:	9024d13a 	srli	r18,r18,4
 800f724:	10800003 	ldbu	r2,0(r2)
 800f728:	b02cd13a 	srli	r22,r22,4
 800f72c:	8c7fffc4 	addi	r17,r17,-1
 800f730:	1ca4b03a 	or	r18,r3,r18
 800f734:	88800005 	stb	r2,0(r17)
 800f738:	9584b03a 	or	r2,r18,r22
 800f73c:	103ff51e 	bne	r2,zero,800f714 <__alt_data_end+0xfc00f714>
 800f740:	dac11e17 	ldw	r11,1144(sp)
 800f744:	dc412415 	stw	r17,1168(sp)
 800f748:	5c63c83a 	sub	r17,r11,r17
 800f74c:	003d3306 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f750:	1800941e 	bne	r3,zero,800f9a4 <___vfiprintf_internal_r+0x1178>
 800f754:	d8811d87 	ldb	r2,1142(sp)
 800f758:	10006b26 	beq	r2,zero,800f908 <___vfiprintf_internal_r+0x10dc>
 800f75c:	00c00044 	movi	r3,1
 800f760:	d9011d84 	addi	r4,sp,1142
 800f764:	1805883a 	mov	r2,r3
 800f768:	d9000015 	stw	r4,0(sp)
 800f76c:	d8c00115 	stw	r3,4(sp)
 800f770:	d811883a 	mov	r8,sp
 800f774:	003f2306 	br	800f404 <__alt_data_end+0xfc00f404>
 800f778:	8023883a 	mov	r17,r16
 800f77c:	003c7d06 	br	800e974 <__alt_data_end+0xfc00e974>
 800f780:	da810a04 	addi	r10,sp,1064
 800f784:	da812415 	stw	r10,1168(sp)
 800f788:	003d2406 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f78c:	d9012017 	ldw	r4,1152(sp)
 800f790:	a00b883a 	mov	r5,r20
 800f794:	d9811a04 	addi	r6,sp,1128
 800f798:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f79c:	103f5d1e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f7a0:	d8c11c17 	ldw	r3,1136(sp)
 800f7a4:	d811883a 	mov	r8,sp
 800f7a8:	003f7306 	br	800f578 <__alt_data_end+0xfc00f578>
 800f7ac:	1c800017 	ldw	r18,0(r3)
 800f7b0:	dac12117 	ldw	r11,1156(sp)
 800f7b4:	902dd7fa 	srai	r22,r18,31
 800f7b8:	5ac00104 	addi	r11,r11,4
 800f7bc:	dac12115 	stw	r11,1156(sp)
 800f7c0:	b005883a 	mov	r2,r22
 800f7c4:	003e5406 	br	800f118 <__alt_data_end+0xfc00f118>
 800f7c8:	00800084 	movi	r2,2
 800f7cc:	9588b03a 	or	r4,r18,r22
 800f7d0:	003cf506 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f7d4:	d9012017 	ldw	r4,1152(sp)
 800f7d8:	a00b883a 	mov	r5,r20
 800f7dc:	d9811a04 	addi	r6,sp,1128
 800f7e0:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f7e4:	103f4b1e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f7e8:	d811883a 	mov	r8,sp
 800f7ec:	003cd106 	br	800eb34 <__alt_data_end+0xfc00eb34>
 800f7f0:	000b883a 	mov	r5,zero
 800f7f4:	2005883a 	mov	r2,r4
 800f7f8:	d811883a 	mov	r8,sp
 800f7fc:	003d5206 	br	800ed48 <__alt_data_end+0xfc00ed48>
 800f800:	10803fcc 	andi	r2,r2,255
 800f804:	1080201c 	xori	r2,r2,128
 800f808:	10bfe004 	addi	r2,r2,-128
 800f80c:	01000c04 	movi	r4,48
 800f810:	11008e26 	beq	r2,r4,800fa4c <___vfiprintf_internal_r+0x1220>
 800f814:	da812417 	ldw	r10,1168(sp)
 800f818:	dac11e17 	ldw	r11,1144(sp)
 800f81c:	193fffc5 	stb	r4,-1(r3)
 800f820:	52bfffc4 	addi	r10,r10,-1
 800f824:	da812415 	stw	r10,1168(sp)
 800f828:	5aa3c83a 	sub	r17,r11,r10
 800f82c:	003cfb06 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f830:	d9012017 	ldw	r4,1152(sp)
 800f834:	a00b883a 	mov	r5,r20
 800f838:	d9811a04 	addi	r6,sp,1128
 800f83c:	da412b15 	stw	r9,1196(sp)
 800f840:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f844:	da412b17 	ldw	r9,1196(sp)
 800f848:	103f321e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f84c:	d9411b17 	ldw	r5,1132(sp)
 800f850:	d8c11c17 	ldw	r3,1136(sp)
 800f854:	d811883a 	mov	r8,sp
 800f858:	28800044 	addi	r2,r5,1
 800f85c:	003d3a06 	br	800ed48 <__alt_data_end+0xfc00ed48>
 800f860:	d9012017 	ldw	r4,1152(sp)
 800f864:	a00b883a 	mov	r5,r20
 800f868:	d9811a04 	addi	r6,sp,1128
 800f86c:	da412b15 	stw	r9,1196(sp)
 800f870:	db812a15 	stw	r14,1192(sp)
 800f874:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f878:	da412b17 	ldw	r9,1196(sp)
 800f87c:	db812a17 	ldw	r14,1192(sp)
 800f880:	103f241e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f884:	d9411b17 	ldw	r5,1132(sp)
 800f888:	d8c11c17 	ldw	r3,1136(sp)
 800f88c:	d811883a 	mov	r8,sp
 800f890:	28800044 	addi	r2,r5,1
 800f894:	003d1f06 	br	800ed14 <__alt_data_end+0xfc00ed14>
 800f898:	1800781e 	bne	r3,zero,800fa7c <___vfiprintf_internal_r+0x1250>
 800f89c:	000b883a 	mov	r5,zero
 800f8a0:	00800044 	movi	r2,1
 800f8a4:	d811883a 	mov	r8,sp
 800f8a8:	003d2906 	br	800ed50 <__alt_data_end+0xfc00ed50>
 800f8ac:	d9012017 	ldw	r4,1152(sp)
 800f8b0:	a00b883a 	mov	r5,r20
 800f8b4:	d9811a04 	addi	r6,sp,1128
 800f8b8:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f8bc:	103f151e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f8c0:	d8811b17 	ldw	r2,1132(sp)
 800f8c4:	d8c11c17 	ldw	r3,1136(sp)
 800f8c8:	d811883a 	mov	r8,sp
 800f8cc:	10800044 	addi	r2,r2,1
 800f8d0:	003d4406 	br	800ede4 <__alt_data_end+0xfc00ede4>
 800f8d4:	dac10a04 	addi	r11,sp,1064
 800f8d8:	dac12415 	stw	r11,1168(sp)
 800f8dc:	003ccf06 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800f8e0:	04a5c83a 	sub	r18,zero,r18
 800f8e4:	9004c03a 	cmpne	r2,r18,zero
 800f8e8:	05adc83a 	sub	r22,zero,r22
 800f8ec:	b0adc83a 	sub	r22,r22,r2
 800f8f0:	03000b44 	movi	r12,45
 800f8f4:	db011d85 	stb	r12,1142(sp)
 800f8f8:	4823883a 	mov	r17,r9
 800f8fc:	00800044 	movi	r2,1
 800f900:	9588b03a 	or	r4,r18,r22
 800f904:	003cab06 	br	800ebb4 <__alt_data_end+0xfc00ebb4>
 800f908:	000b883a 	mov	r5,zero
 800f90c:	00800044 	movi	r2,1
 800f910:	d811883a 	mov	r8,sp
 800f914:	703d0c26 	beq	r14,zero,800ed48 <__alt_data_end+0xfc00ed48>
 800f918:	00c00084 	movi	r3,2
 800f91c:	d9011d04 	addi	r4,sp,1140
 800f920:	d9000015 	stw	r4,0(sp)
 800f924:	d8c00115 	stw	r3,4(sp)
 800f928:	003d0406 	br	800ed3c <__alt_data_end+0xfc00ed3c>
 800f92c:	80c00007 	ldb	r3,0(r16)
 800f930:	003c1d06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800f934:	a880040c 	andi	r2,r21,16
 800f938:	1000091e 	bne	r2,zero,800f960 <___vfiprintf_internal_r+0x1134>
 800f93c:	aac0100c 	andi	r11,r21,64
 800f940:	58000726 	beq	r11,zero,800f960 <___vfiprintf_internal_r+0x1134>
 800f944:	da812117 	ldw	r10,1156(sp)
 800f948:	dac12217 	ldw	r11,1160(sp)
 800f94c:	50800017 	ldw	r2,0(r10)
 800f950:	52800104 	addi	r10,r10,4
 800f954:	da812115 	stw	r10,1156(sp)
 800f958:	12c0000d 	sth	r11,0(r2)
 800f95c:	003be806 	br	800e900 <__alt_data_end+0xfc00e900>
 800f960:	da812117 	ldw	r10,1156(sp)
 800f964:	dac12217 	ldw	r11,1160(sp)
 800f968:	50800017 	ldw	r2,0(r10)
 800f96c:	52800104 	addi	r10,r10,4
 800f970:	da812115 	stw	r10,1156(sp)
 800f974:	12c00015 	stw	r11,0(r2)
 800f978:	003be106 	br	800e900 <__alt_data_end+0xfc00e900>
 800f97c:	00800084 	movi	r2,2
 800f980:	003c8906 	br	800eba8 <__alt_data_end+0xfc00eba8>
 800f984:	a900100c 	andi	r4,r21,64
 800f988:	20001f26 	beq	r4,zero,800fa08 <___vfiprintf_internal_r+0x11dc>
 800f98c:	da812117 	ldw	r10,1156(sp)
 800f990:	1480000b 	ldhu	r18,0(r2)
 800f994:	002d883a 	mov	r22,zero
 800f998:	52800104 	addi	r10,r10,4
 800f99c:	da812115 	stw	r10,1156(sp)
 800f9a0:	003dae06 	br	800f05c <__alt_data_end+0xfc00f05c>
 800f9a4:	d9012017 	ldw	r4,1152(sp)
 800f9a8:	a00b883a 	mov	r5,r20
 800f9ac:	d9811a04 	addi	r6,sp,1128
 800f9b0:	da412b15 	stw	r9,1196(sp)
 800f9b4:	db812a15 	stw	r14,1192(sp)
 800f9b8:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f9bc:	da412b17 	ldw	r9,1196(sp)
 800f9c0:	db812a17 	ldw	r14,1192(sp)
 800f9c4:	103ed31e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800f9c8:	d9411b17 	ldw	r5,1132(sp)
 800f9cc:	d8c11c17 	ldw	r3,1136(sp)
 800f9d0:	d811883a 	mov	r8,sp
 800f9d4:	28800044 	addi	r2,r5,1
 800f9d8:	003e7f06 	br	800f3d8 <__alt_data_end+0xfc00f3d8>
 800f9dc:	9825883a 	mov	r18,r19
 800f9e0:	003d3406 	br	800eeb4 <__alt_data_end+0xfc00eeb4>
 800f9e4:	4823883a 	mov	r17,r9
 800f9e8:	003e0806 	br	800f20c <__alt_data_end+0xfc00f20c>
 800f9ec:	d9012017 	ldw	r4,1152(sp)
 800f9f0:	a00b883a 	mov	r5,r20
 800f9f4:	d9811a04 	addi	r6,sp,1128
 800f9f8:	800e7180 	call	800e718 <__sprint_r.part.0>
 800f9fc:	103ec51e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800fa00:	d8c11c17 	ldw	r3,1136(sp)
 800fa04:	003ee006 	br	800f588 <__alt_data_end+0xfc00f588>
 800fa08:	dac12117 	ldw	r11,1156(sp)
 800fa0c:	14800017 	ldw	r18,0(r2)
 800fa10:	002d883a 	mov	r22,zero
 800fa14:	5ac00104 	addi	r11,r11,4
 800fa18:	dac12115 	stw	r11,1156(sp)
 800fa1c:	003d8f06 	br	800f05c <__alt_data_end+0xfc00f05c>
 800fa20:	02c200b4 	movhi	r11,2050
 800fa24:	5ac11204 	addi	r11,r11,1096
 800fa28:	dac12315 	stw	r11,1164(sp)
 800fa2c:	003ce306 	br	800edbc <__alt_data_end+0xfc00edbc>
 800fa30:	80c00043 	ldbu	r3,1(r16)
 800fa34:	ad400814 	ori	r21,r21,32
 800fa38:	84000044 	addi	r16,r16,1
 800fa3c:	18c03fcc 	andi	r3,r3,255
 800fa40:	18c0201c 	xori	r3,r3,128
 800fa44:	18ffe004 	addi	r3,r3,-128
 800fa48:	003bd706 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800fa4c:	dac11e17 	ldw	r11,1144(sp)
 800fa50:	d8c12417 	ldw	r3,1168(sp)
 800fa54:	58e3c83a 	sub	r17,r11,r3
 800fa58:	003c7006 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800fa5c:	da012a15 	stw	r8,1192(sp)
 800fa60:	8004a080 	call	8004a08 <strlen>
 800fa64:	1023883a 	mov	r17,r2
 800fa68:	db011d83 	ldbu	r12,1142(sp)
 800fa6c:	dd812115 	stw	r22,1156(sp)
 800fa70:	0013883a 	mov	r9,zero
 800fa74:	da012a17 	ldw	r8,1192(sp)
 800fa78:	003c6806 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800fa7c:	d9012017 	ldw	r4,1152(sp)
 800fa80:	a00b883a 	mov	r5,r20
 800fa84:	d9811a04 	addi	r6,sp,1128
 800fa88:	da412b15 	stw	r9,1196(sp)
 800fa8c:	800e7180 	call	800e718 <__sprint_r.part.0>
 800fa90:	da412b17 	ldw	r9,1196(sp)
 800fa94:	103e9f1e 	bne	r2,zero,800f514 <__alt_data_end+0xfc00f514>
 800fa98:	d9411b17 	ldw	r5,1132(sp)
 800fa9c:	d8c11c17 	ldw	r3,1136(sp)
 800faa0:	d811883a 	mov	r8,sp
 800faa4:	28800044 	addi	r2,r5,1
 800faa8:	003ca906 	br	800ed50 <__alt_data_end+0xfc00ed50>
 800faac:	d9411b17 	ldw	r5,1132(sp)
 800fab0:	010200b4 	movhi	r4,2050
 800fab4:	21011604 	addi	r4,r4,1112
 800fab8:	d9012315 	stw	r4,1164(sp)
 800fabc:	29400044 	addi	r5,r5,1
 800fac0:	003c8806 	br	800ece4 <__alt_data_end+0xfc00ece4>
 800fac4:	00800184 	movi	r2,6
 800fac8:	1240012e 	bgeu	r2,r9,800fad0 <___vfiprintf_internal_r+0x12a4>
 800facc:	1013883a 	mov	r9,r2
 800fad0:	4823883a 	mov	r17,r9
 800fad4:	4825883a 	mov	r18,r9
 800fad8:	48001516 	blt	r9,zero,800fb30 <___vfiprintf_internal_r+0x1304>
 800fadc:	008200b4 	movhi	r2,2050
 800fae0:	1080a604 	addi	r2,r2,664
 800fae4:	dd812115 	stw	r22,1156(sp)
 800fae8:	d8812415 	stw	r2,1168(sp)
 800faec:	003d6f06 	br	800f0ac <__alt_data_end+0xfc00f0ac>
 800faf0:	d9411b17 	ldw	r5,1132(sp)
 800faf4:	02c200b4 	movhi	r11,2050
 800faf8:	5ac11604 	addi	r11,r11,1112
 800fafc:	dac12315 	stw	r11,1164(sp)
 800fb00:	29400044 	addi	r5,r5,1
 800fb04:	003ce106 	br	800ee8c <__alt_data_end+0xfc00ee8c>
 800fb08:	010200b4 	movhi	r4,2050
 800fb0c:	21011204 	addi	r4,r4,1096
 800fb10:	d9012315 	stw	r4,1164(sp)
 800fb14:	1009883a 	mov	r4,r2
 800fb18:	003eca06 	br	800f644 <__alt_data_end+0xfc00f644>
 800fb1c:	4823883a 	mov	r17,r9
 800fb20:	db011d83 	ldbu	r12,1142(sp)
 800fb24:	dd812115 	stw	r22,1156(sp)
 800fb28:	0013883a 	mov	r9,zero
 800fb2c:	003c3b06 	br	800ec1c <__alt_data_end+0xfc00ec1c>
 800fb30:	0025883a 	mov	r18,zero
 800fb34:	003fe906 	br	800fadc <__alt_data_end+0xfc00fadc>
 800fb38:	dac12117 	ldw	r11,1156(sp)
 800fb3c:	8005883a 	mov	r2,r16
 800fb40:	5021883a 	mov	r16,r10
 800fb44:	5a400017 	ldw	r9,0(r11)
 800fb48:	58c00104 	addi	r3,r11,4
 800fb4c:	d8c12115 	stw	r3,1156(sp)
 800fb50:	48000a16 	blt	r9,zero,800fb7c <___vfiprintf_internal_r+0x1350>
 800fb54:	10c00047 	ldb	r3,1(r2)
 800fb58:	003b9306 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800fb5c:	043fffc4 	movi	r16,-1
 800fb60:	003d0206 	br	800ef6c <__alt_data_end+0xfc00ef6c>
 800fb64:	94c0010e 	bge	r18,r19,800fb6c <___vfiprintf_internal_r+0x1340>
 800fb68:	9825883a 	mov	r18,r19
 800fb6c:	da812217 	ldw	r10,1160(sp)
 800fb70:	5495883a 	add	r10,r10,r18
 800fb74:	da812215 	stw	r10,1160(sp)
 800fb78:	003cd106 	br	800eec0 <__alt_data_end+0xfc00eec0>
 800fb7c:	027fffc4 	movi	r9,-1
 800fb80:	10c00047 	ldb	r3,1(r2)
 800fb84:	003b8806 	br	800e9a8 <__alt_data_end+0xfc00e9a8>

0800fb88 <__vfiprintf_internal>:
 800fb88:	2007883a 	mov	r3,r4
 800fb8c:	010200b4 	movhi	r4,2050
 800fb90:	2107e604 	addi	r4,r4,8088
 800fb94:	21000017 	ldw	r4,0(r4)
 800fb98:	2805883a 	mov	r2,r5
 800fb9c:	300f883a 	mov	r7,r6
 800fba0:	180b883a 	mov	r5,r3
 800fba4:	100d883a 	mov	r6,r2
 800fba8:	800e82c1 	jmpi	800e82c <___vfiprintf_internal_r>

0800fbac <__swbuf_r>:
 800fbac:	defffc04 	addi	sp,sp,-16
 800fbb0:	dc800215 	stw	r18,8(sp)
 800fbb4:	dc400115 	stw	r17,4(sp)
 800fbb8:	dc000015 	stw	r16,0(sp)
 800fbbc:	dfc00315 	stw	ra,12(sp)
 800fbc0:	2025883a 	mov	r18,r4
 800fbc4:	2823883a 	mov	r17,r5
 800fbc8:	3021883a 	mov	r16,r6
 800fbcc:	20000226 	beq	r4,zero,800fbd8 <__swbuf_r+0x2c>
 800fbd0:	20800e17 	ldw	r2,56(r4)
 800fbd4:	10004126 	beq	r2,zero,800fcdc <__swbuf_r+0x130>
 800fbd8:	80c00617 	ldw	r3,24(r16)
 800fbdc:	8180030b 	ldhu	r6,12(r16)
 800fbe0:	80c00215 	stw	r3,8(r16)
 800fbe4:	30c0020c 	andi	r3,r6,8
 800fbe8:	18003526 	beq	r3,zero,800fcc0 <__swbuf_r+0x114>
 800fbec:	80c00417 	ldw	r3,16(r16)
 800fbf0:	18003326 	beq	r3,zero,800fcc0 <__swbuf_r+0x114>
 800fbf4:	3088000c 	andi	r2,r6,8192
 800fbf8:	8c403fcc 	andi	r17,r17,255
 800fbfc:	10001726 	beq	r2,zero,800fc5c <__swbuf_r+0xb0>
 800fc00:	80800017 	ldw	r2,0(r16)
 800fc04:	81000517 	ldw	r4,20(r16)
 800fc08:	10c7c83a 	sub	r3,r2,r3
 800fc0c:	19001d0e 	bge	r3,r4,800fc84 <__swbuf_r+0xd8>
 800fc10:	18c00044 	addi	r3,r3,1
 800fc14:	81400217 	ldw	r5,8(r16)
 800fc18:	11000044 	addi	r4,r2,1
 800fc1c:	81000015 	stw	r4,0(r16)
 800fc20:	297fffc4 	addi	r5,r5,-1
 800fc24:	81400215 	stw	r5,8(r16)
 800fc28:	14400005 	stb	r17,0(r2)
 800fc2c:	80800517 	ldw	r2,20(r16)
 800fc30:	10c01d26 	beq	r2,r3,800fca8 <__swbuf_r+0xfc>
 800fc34:	8080030b 	ldhu	r2,12(r16)
 800fc38:	1080004c 	andi	r2,r2,1
 800fc3c:	1000181e 	bne	r2,zero,800fca0 <__swbuf_r+0xf4>
 800fc40:	8805883a 	mov	r2,r17
 800fc44:	dfc00317 	ldw	ra,12(sp)
 800fc48:	dc800217 	ldw	r18,8(sp)
 800fc4c:	dc400117 	ldw	r17,4(sp)
 800fc50:	dc000017 	ldw	r16,0(sp)
 800fc54:	dec00404 	addi	sp,sp,16
 800fc58:	f800283a 	ret
 800fc5c:	81001917 	ldw	r4,100(r16)
 800fc60:	00b7ffc4 	movi	r2,-8193
 800fc64:	31880014 	ori	r6,r6,8192
 800fc68:	2084703a 	and	r2,r4,r2
 800fc6c:	80801915 	stw	r2,100(r16)
 800fc70:	80800017 	ldw	r2,0(r16)
 800fc74:	81000517 	ldw	r4,20(r16)
 800fc78:	8180030d 	sth	r6,12(r16)
 800fc7c:	10c7c83a 	sub	r3,r2,r3
 800fc80:	193fe316 	blt	r3,r4,800fc10 <__alt_data_end+0xfc00fc10>
 800fc84:	9009883a 	mov	r4,r18
 800fc88:	800b883a 	mov	r5,r16
 800fc8c:	800a4a80 	call	800a4a8 <_fflush_r>
 800fc90:	1000091e 	bne	r2,zero,800fcb8 <__swbuf_r+0x10c>
 800fc94:	80800017 	ldw	r2,0(r16)
 800fc98:	00c00044 	movi	r3,1
 800fc9c:	003fdd06 	br	800fc14 <__alt_data_end+0xfc00fc14>
 800fca0:	00800284 	movi	r2,10
 800fca4:	88bfe61e 	bne	r17,r2,800fc40 <__alt_data_end+0xfc00fc40>
 800fca8:	9009883a 	mov	r4,r18
 800fcac:	800b883a 	mov	r5,r16
 800fcb0:	800a4a80 	call	800a4a8 <_fflush_r>
 800fcb4:	103fe226 	beq	r2,zero,800fc40 <__alt_data_end+0xfc00fc40>
 800fcb8:	00bfffc4 	movi	r2,-1
 800fcbc:	003fe106 	br	800fc44 <__alt_data_end+0xfc00fc44>
 800fcc0:	9009883a 	mov	r4,r18
 800fcc4:	800b883a 	mov	r5,r16
 800fcc8:	8008a500 	call	8008a50 <__swsetup_r>
 800fccc:	1000051e 	bne	r2,zero,800fce4 <__swbuf_r+0x138>
 800fcd0:	8180030b 	ldhu	r6,12(r16)
 800fcd4:	80c00417 	ldw	r3,16(r16)
 800fcd8:	003fc606 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 800fcdc:	800aa500 	call	800aa50 <__sinit>
 800fce0:	003fbd06 	br	800fbd8 <__alt_data_end+0xfc00fbd8>
 800fce4:	80c0030b 	ldhu	r3,12(r16)
 800fce8:	00bfffc4 	movi	r2,-1
 800fcec:	18c01014 	ori	r3,r3,64
 800fcf0:	80c0030d 	sth	r3,12(r16)
 800fcf4:	00c00244 	movi	r3,9
 800fcf8:	90c00015 	stw	r3,0(r18)
 800fcfc:	003fd106 	br	800fc44 <__alt_data_end+0xfc00fc44>

0800fd00 <__swbuf>:
 800fd00:	00c200b4 	movhi	r3,2050
 800fd04:	18c7e604 	addi	r3,r3,8088
 800fd08:	2005883a 	mov	r2,r4
 800fd0c:	19000017 	ldw	r4,0(r3)
 800fd10:	280d883a 	mov	r6,r5
 800fd14:	100b883a 	mov	r5,r2
 800fd18:	800fbac1 	jmpi	800fbac <__swbuf_r>

0800fd1c <_write_r>:
 800fd1c:	defffd04 	addi	sp,sp,-12
 800fd20:	dc000015 	stw	r16,0(sp)
 800fd24:	040200b4 	movhi	r16,2050
 800fd28:	dc400115 	stw	r17,4(sp)
 800fd2c:	840ebe04 	addi	r16,r16,15096
 800fd30:	2023883a 	mov	r17,r4
 800fd34:	2809883a 	mov	r4,r5
 800fd38:	300b883a 	mov	r5,r6
 800fd3c:	380d883a 	mov	r6,r7
 800fd40:	dfc00215 	stw	ra,8(sp)
 800fd44:	80000015 	stw	zero,0(r16)
 800fd48:	80136f40 	call	80136f4 <write>
 800fd4c:	00ffffc4 	movi	r3,-1
 800fd50:	10c00526 	beq	r2,r3,800fd68 <_write_r+0x4c>
 800fd54:	dfc00217 	ldw	ra,8(sp)
 800fd58:	dc400117 	ldw	r17,4(sp)
 800fd5c:	dc000017 	ldw	r16,0(sp)
 800fd60:	dec00304 	addi	sp,sp,12
 800fd64:	f800283a 	ret
 800fd68:	80c00017 	ldw	r3,0(r16)
 800fd6c:	183ff926 	beq	r3,zero,800fd54 <__alt_data_end+0xfc00fd54>
 800fd70:	88c00015 	stw	r3,0(r17)
 800fd74:	003ff706 	br	800fd54 <__alt_data_end+0xfc00fd54>

0800fd78 <_close_r>:
 800fd78:	defffd04 	addi	sp,sp,-12
 800fd7c:	dc000015 	stw	r16,0(sp)
 800fd80:	040200b4 	movhi	r16,2050
 800fd84:	dc400115 	stw	r17,4(sp)
 800fd88:	840ebe04 	addi	r16,r16,15096
 800fd8c:	2023883a 	mov	r17,r4
 800fd90:	2809883a 	mov	r4,r5
 800fd94:	dfc00215 	stw	ra,8(sp)
 800fd98:	80000015 	stw	zero,0(r16)
 800fd9c:	8012b980 	call	8012b98 <close>
 800fda0:	00ffffc4 	movi	r3,-1
 800fda4:	10c00526 	beq	r2,r3,800fdbc <_close_r+0x44>
 800fda8:	dfc00217 	ldw	ra,8(sp)
 800fdac:	dc400117 	ldw	r17,4(sp)
 800fdb0:	dc000017 	ldw	r16,0(sp)
 800fdb4:	dec00304 	addi	sp,sp,12
 800fdb8:	f800283a 	ret
 800fdbc:	80c00017 	ldw	r3,0(r16)
 800fdc0:	183ff926 	beq	r3,zero,800fda8 <__alt_data_end+0xfc00fda8>
 800fdc4:	88c00015 	stw	r3,0(r17)
 800fdc8:	003ff706 	br	800fda8 <__alt_data_end+0xfc00fda8>

0800fdcc <_calloc_r>:
 800fdcc:	298b383a 	mul	r5,r5,r6
 800fdd0:	defffe04 	addi	sp,sp,-8
 800fdd4:	dc000015 	stw	r16,0(sp)
 800fdd8:	dfc00115 	stw	ra,4(sp)
 800fddc:	8003ff40 	call	8003ff4 <_malloc_r>
 800fde0:	1021883a 	mov	r16,r2
 800fde4:	10002826 	beq	r2,zero,800fe88 <_calloc_r+0xbc>
 800fde8:	11bfff17 	ldw	r6,-4(r2)
 800fdec:	00bfff04 	movi	r2,-4
 800fdf0:	00c00904 	movi	r3,36
 800fdf4:	308c703a 	and	r6,r6,r2
 800fdf8:	308d883a 	add	r6,r6,r2
 800fdfc:	19801436 	bltu	r3,r6,800fe50 <_calloc_r+0x84>
 800fe00:	008004c4 	movi	r2,19
 800fe04:	11800936 	bltu	r2,r6,800fe2c <_calloc_r+0x60>
 800fe08:	8005883a 	mov	r2,r16
 800fe0c:	10000015 	stw	zero,0(r2)
 800fe10:	10000115 	stw	zero,4(r2)
 800fe14:	10000215 	stw	zero,8(r2)
 800fe18:	8005883a 	mov	r2,r16
 800fe1c:	dfc00117 	ldw	ra,4(sp)
 800fe20:	dc000017 	ldw	r16,0(sp)
 800fe24:	dec00204 	addi	sp,sp,8
 800fe28:	f800283a 	ret
 800fe2c:	80000015 	stw	zero,0(r16)
 800fe30:	80000115 	stw	zero,4(r16)
 800fe34:	008006c4 	movi	r2,27
 800fe38:	11800d2e 	bgeu	r2,r6,800fe70 <_calloc_r+0xa4>
 800fe3c:	80000215 	stw	zero,8(r16)
 800fe40:	80000315 	stw	zero,12(r16)
 800fe44:	30c00c26 	beq	r6,r3,800fe78 <_calloc_r+0xac>
 800fe48:	80800404 	addi	r2,r16,16
 800fe4c:	003fef06 	br	800fe0c <__alt_data_end+0xfc00fe0c>
 800fe50:	8009883a 	mov	r4,r16
 800fe54:	000b883a 	mov	r5,zero
 800fe58:	800badc0 	call	800badc <memset>
 800fe5c:	8005883a 	mov	r2,r16
 800fe60:	dfc00117 	ldw	ra,4(sp)
 800fe64:	dc000017 	ldw	r16,0(sp)
 800fe68:	dec00204 	addi	sp,sp,8
 800fe6c:	f800283a 	ret
 800fe70:	80800204 	addi	r2,r16,8
 800fe74:	003fe506 	br	800fe0c <__alt_data_end+0xfc00fe0c>
 800fe78:	80000415 	stw	zero,16(r16)
 800fe7c:	80800604 	addi	r2,r16,24
 800fe80:	80000515 	stw	zero,20(r16)
 800fe84:	003fe106 	br	800fe0c <__alt_data_end+0xfc00fe0c>
 800fe88:	0005883a 	mov	r2,zero
 800fe8c:	003fe306 	br	800fe1c <__alt_data_end+0xfc00fe1c>

0800fe90 <_fclose_r>:
 800fe90:	28003226 	beq	r5,zero,800ff5c <_fclose_r+0xcc>
 800fe94:	defffc04 	addi	sp,sp,-16
 800fe98:	dc400115 	stw	r17,4(sp)
 800fe9c:	2023883a 	mov	r17,r4
 800fea0:	dc000015 	stw	r16,0(sp)
 800fea4:	dfc00315 	stw	ra,12(sp)
 800fea8:	dc800215 	stw	r18,8(sp)
 800feac:	2821883a 	mov	r16,r5
 800feb0:	800aa600 	call	800aa60 <__sfp_lock_acquire>
 800feb4:	88000226 	beq	r17,zero,800fec0 <_fclose_r+0x30>
 800feb8:	88800e17 	ldw	r2,56(r17)
 800febc:	10002926 	beq	r2,zero,800ff64 <_fclose_r+0xd4>
 800fec0:	8080030f 	ldh	r2,12(r16)
 800fec4:	10002226 	beq	r2,zero,800ff50 <_fclose_r+0xc0>
 800fec8:	8809883a 	mov	r4,r17
 800fecc:	800b883a 	mov	r5,r16
 800fed0:	800a4a80 	call	800a4a8 <_fflush_r>
 800fed4:	1025883a 	mov	r18,r2
 800fed8:	80800b17 	ldw	r2,44(r16)
 800fedc:	10000426 	beq	r2,zero,800fef0 <_fclose_r+0x60>
 800fee0:	81400717 	ldw	r5,28(r16)
 800fee4:	8809883a 	mov	r4,r17
 800fee8:	103ee83a 	callr	r2
 800feec:	10002616 	blt	r2,zero,800ff88 <_fclose_r+0xf8>
 800fef0:	8080030b 	ldhu	r2,12(r16)
 800fef4:	1080200c 	andi	r2,r2,128
 800fef8:	10001f1e 	bne	r2,zero,800ff78 <_fclose_r+0xe8>
 800fefc:	81400c17 	ldw	r5,48(r16)
 800ff00:	28000526 	beq	r5,zero,800ff18 <_fclose_r+0x88>
 800ff04:	80801004 	addi	r2,r16,64
 800ff08:	28800226 	beq	r5,r2,800ff14 <_fclose_r+0x84>
 800ff0c:	8809883a 	mov	r4,r17
 800ff10:	800abc40 	call	800abc4 <_free_r>
 800ff14:	80000c15 	stw	zero,48(r16)
 800ff18:	81401117 	ldw	r5,68(r16)
 800ff1c:	28000326 	beq	r5,zero,800ff2c <_fclose_r+0x9c>
 800ff20:	8809883a 	mov	r4,r17
 800ff24:	800abc40 	call	800abc4 <_free_r>
 800ff28:	80001115 	stw	zero,68(r16)
 800ff2c:	8000030d 	sth	zero,12(r16)
 800ff30:	800aa640 	call	800aa64 <__sfp_lock_release>
 800ff34:	9005883a 	mov	r2,r18
 800ff38:	dfc00317 	ldw	ra,12(sp)
 800ff3c:	dc800217 	ldw	r18,8(sp)
 800ff40:	dc400117 	ldw	r17,4(sp)
 800ff44:	dc000017 	ldw	r16,0(sp)
 800ff48:	dec00404 	addi	sp,sp,16
 800ff4c:	f800283a 	ret
 800ff50:	800aa640 	call	800aa64 <__sfp_lock_release>
 800ff54:	0005883a 	mov	r2,zero
 800ff58:	003ff706 	br	800ff38 <__alt_data_end+0xfc00ff38>
 800ff5c:	0005883a 	mov	r2,zero
 800ff60:	f800283a 	ret
 800ff64:	8809883a 	mov	r4,r17
 800ff68:	800aa500 	call	800aa50 <__sinit>
 800ff6c:	8080030f 	ldh	r2,12(r16)
 800ff70:	103fd51e 	bne	r2,zero,800fec8 <__alt_data_end+0xfc00fec8>
 800ff74:	003ff606 	br	800ff50 <__alt_data_end+0xfc00ff50>
 800ff78:	81400417 	ldw	r5,16(r16)
 800ff7c:	8809883a 	mov	r4,r17
 800ff80:	800abc40 	call	800abc4 <_free_r>
 800ff84:	003fdd06 	br	800fefc <__alt_data_end+0xfc00fefc>
 800ff88:	04bfffc4 	movi	r18,-1
 800ff8c:	003fd806 	br	800fef0 <__alt_data_end+0xfc00fef0>

0800ff90 <fclose>:
 800ff90:	008200b4 	movhi	r2,2050
 800ff94:	1087e604 	addi	r2,r2,8088
 800ff98:	200b883a 	mov	r5,r4
 800ff9c:	11000017 	ldw	r4,0(r2)
 800ffa0:	800fe901 	jmpi	800fe90 <_fclose_r>

0800ffa4 <_fputwc_r>:
 800ffa4:	3080030b 	ldhu	r2,12(r6)
 800ffa8:	defff804 	addi	sp,sp,-32
 800ffac:	dcc00415 	stw	r19,16(sp)
 800ffb0:	dc800315 	stw	r18,12(sp)
 800ffb4:	dc000115 	stw	r16,4(sp)
 800ffb8:	dfc00715 	stw	ra,28(sp)
 800ffbc:	dd400615 	stw	r21,24(sp)
 800ffc0:	dd000515 	stw	r20,20(sp)
 800ffc4:	dc400215 	stw	r17,8(sp)
 800ffc8:	10c8000c 	andi	r3,r2,8192
 800ffcc:	3021883a 	mov	r16,r6
 800ffd0:	2027883a 	mov	r19,r4
 800ffd4:	2825883a 	mov	r18,r5
 800ffd8:	1800051e 	bne	r3,zero,800fff0 <_fputwc_r+0x4c>
 800ffdc:	30c01917 	ldw	r3,100(r6)
 800ffe0:	10880014 	ori	r2,r2,8192
 800ffe4:	3080030d 	sth	r2,12(r6)
 800ffe8:	18880014 	ori	r2,r3,8192
 800ffec:	30801915 	stw	r2,100(r6)
 800fff0:	800b5500 	call	800b550 <__locale_mb_cur_max>
 800fff4:	00c00044 	movi	r3,1
 800fff8:	10c03e26 	beq	r2,r3,80100f4 <_fputwc_r+0x150>
 800fffc:	9809883a 	mov	r4,r19
 8010000:	d80b883a 	mov	r5,sp
 8010004:	900d883a 	mov	r6,r18
 8010008:	81c01704 	addi	r7,r16,92
 801000c:	80102e40 	call	80102e4 <_wcrtomb_r>
 8010010:	1029883a 	mov	r20,r2
 8010014:	00bfffc4 	movi	r2,-1
 8010018:	a0802026 	beq	r20,r2,801009c <_fputwc_r+0xf8>
 801001c:	d9400003 	ldbu	r5,0(sp)
 8010020:	a0001c26 	beq	r20,zero,8010094 <_fputwc_r+0xf0>
 8010024:	0023883a 	mov	r17,zero
 8010028:	05400284 	movi	r21,10
 801002c:	00000906 	br	8010054 <_fputwc_r+0xb0>
 8010030:	80800017 	ldw	r2,0(r16)
 8010034:	11400005 	stb	r5,0(r2)
 8010038:	80c00017 	ldw	r3,0(r16)
 801003c:	18c00044 	addi	r3,r3,1
 8010040:	80c00015 	stw	r3,0(r16)
 8010044:	8c400044 	addi	r17,r17,1
 8010048:	dc45883a 	add	r2,sp,r17
 801004c:	8d00112e 	bgeu	r17,r20,8010094 <_fputwc_r+0xf0>
 8010050:	11400003 	ldbu	r5,0(r2)
 8010054:	80c00217 	ldw	r3,8(r16)
 8010058:	18ffffc4 	addi	r3,r3,-1
 801005c:	80c00215 	stw	r3,8(r16)
 8010060:	183ff30e 	bge	r3,zero,8010030 <__alt_data_end+0xfc010030>
 8010064:	80800617 	ldw	r2,24(r16)
 8010068:	18801916 	blt	r3,r2,80100d0 <_fputwc_r+0x12c>
 801006c:	80800017 	ldw	r2,0(r16)
 8010070:	11400005 	stb	r5,0(r2)
 8010074:	80800017 	ldw	r2,0(r16)
 8010078:	10c00003 	ldbu	r3,0(r2)
 801007c:	10800044 	addi	r2,r2,1
 8010080:	1d402326 	beq	r3,r21,8010110 <_fputwc_r+0x16c>
 8010084:	80800015 	stw	r2,0(r16)
 8010088:	8c400044 	addi	r17,r17,1
 801008c:	dc45883a 	add	r2,sp,r17
 8010090:	8d3fef36 	bltu	r17,r20,8010050 <__alt_data_end+0xfc010050>
 8010094:	9005883a 	mov	r2,r18
 8010098:	00000406 	br	80100ac <_fputwc_r+0x108>
 801009c:	80c0030b 	ldhu	r3,12(r16)
 80100a0:	a005883a 	mov	r2,r20
 80100a4:	18c01014 	ori	r3,r3,64
 80100a8:	80c0030d 	sth	r3,12(r16)
 80100ac:	dfc00717 	ldw	ra,28(sp)
 80100b0:	dd400617 	ldw	r21,24(sp)
 80100b4:	dd000517 	ldw	r20,20(sp)
 80100b8:	dcc00417 	ldw	r19,16(sp)
 80100bc:	dc800317 	ldw	r18,12(sp)
 80100c0:	dc400217 	ldw	r17,8(sp)
 80100c4:	dc000117 	ldw	r16,4(sp)
 80100c8:	dec00804 	addi	sp,sp,32
 80100cc:	f800283a 	ret
 80100d0:	9809883a 	mov	r4,r19
 80100d4:	29403fcc 	andi	r5,r5,255
 80100d8:	800d883a 	mov	r6,r16
 80100dc:	800fbac0 	call	800fbac <__swbuf_r>
 80100e0:	10bfffe0 	cmpeqi	r2,r2,-1
 80100e4:	10803fcc 	andi	r2,r2,255
 80100e8:	103fd626 	beq	r2,zero,8010044 <__alt_data_end+0xfc010044>
 80100ec:	00bfffc4 	movi	r2,-1
 80100f0:	003fee06 	br	80100ac <__alt_data_end+0xfc0100ac>
 80100f4:	90ffffc4 	addi	r3,r18,-1
 80100f8:	01003f84 	movi	r4,254
 80100fc:	20ffbf36 	bltu	r4,r3,800fffc <__alt_data_end+0xfc00fffc>
 8010100:	900b883a 	mov	r5,r18
 8010104:	dc800005 	stb	r18,0(sp)
 8010108:	1029883a 	mov	r20,r2
 801010c:	003fc506 	br	8010024 <__alt_data_end+0xfc010024>
 8010110:	9809883a 	mov	r4,r19
 8010114:	a80b883a 	mov	r5,r21
 8010118:	800d883a 	mov	r6,r16
 801011c:	800fbac0 	call	800fbac <__swbuf_r>
 8010120:	10bfffe0 	cmpeqi	r2,r2,-1
 8010124:	003fef06 	br	80100e4 <__alt_data_end+0xfc0100e4>

08010128 <fputwc>:
 8010128:	defffc04 	addi	sp,sp,-16
 801012c:	dc000115 	stw	r16,4(sp)
 8010130:	040200b4 	movhi	r16,2050
 8010134:	8407e604 	addi	r16,r16,8088
 8010138:	dc400215 	stw	r17,8(sp)
 801013c:	2023883a 	mov	r17,r4
 8010140:	81000017 	ldw	r4,0(r16)
 8010144:	dfc00315 	stw	ra,12(sp)
 8010148:	280d883a 	mov	r6,r5
 801014c:	20000626 	beq	r4,zero,8010168 <fputwc+0x40>
 8010150:	20800e17 	ldw	r2,56(r4)
 8010154:	1000041e 	bne	r2,zero,8010168 <fputwc+0x40>
 8010158:	d9400015 	stw	r5,0(sp)
 801015c:	800aa500 	call	800aa50 <__sinit>
 8010160:	81000017 	ldw	r4,0(r16)
 8010164:	d9800017 	ldw	r6,0(sp)
 8010168:	880b883a 	mov	r5,r17
 801016c:	dfc00317 	ldw	ra,12(sp)
 8010170:	dc400217 	ldw	r17,8(sp)
 8010174:	dc000117 	ldw	r16,4(sp)
 8010178:	dec00404 	addi	sp,sp,16
 801017c:	800ffa41 	jmpi	800ffa4 <_fputwc_r>

08010180 <_fstat_r>:
 8010180:	defffd04 	addi	sp,sp,-12
 8010184:	dc000015 	stw	r16,0(sp)
 8010188:	040200b4 	movhi	r16,2050
 801018c:	dc400115 	stw	r17,4(sp)
 8010190:	840ebe04 	addi	r16,r16,15096
 8010194:	2023883a 	mov	r17,r4
 8010198:	2809883a 	mov	r4,r5
 801019c:	300b883a 	mov	r5,r6
 80101a0:	dfc00215 	stw	ra,8(sp)
 80101a4:	80000015 	stw	zero,0(r16)
 80101a8:	8012ce40 	call	8012ce4 <fstat>
 80101ac:	00ffffc4 	movi	r3,-1
 80101b0:	10c00526 	beq	r2,r3,80101c8 <_fstat_r+0x48>
 80101b4:	dfc00217 	ldw	ra,8(sp)
 80101b8:	dc400117 	ldw	r17,4(sp)
 80101bc:	dc000017 	ldw	r16,0(sp)
 80101c0:	dec00304 	addi	sp,sp,12
 80101c4:	f800283a 	ret
 80101c8:	80c00017 	ldw	r3,0(r16)
 80101cc:	183ff926 	beq	r3,zero,80101b4 <__alt_data_end+0xfc0101b4>
 80101d0:	88c00015 	stw	r3,0(r17)
 80101d4:	003ff706 	br	80101b4 <__alt_data_end+0xfc0101b4>

080101d8 <_isatty_r>:
 80101d8:	defffd04 	addi	sp,sp,-12
 80101dc:	dc000015 	stw	r16,0(sp)
 80101e0:	040200b4 	movhi	r16,2050
 80101e4:	dc400115 	stw	r17,4(sp)
 80101e8:	840ebe04 	addi	r16,r16,15096
 80101ec:	2023883a 	mov	r17,r4
 80101f0:	2809883a 	mov	r4,r5
 80101f4:	dfc00215 	stw	ra,8(sp)
 80101f8:	80000015 	stw	zero,0(r16)
 80101fc:	80130b40 	call	80130b4 <isatty>
 8010200:	00ffffc4 	movi	r3,-1
 8010204:	10c00526 	beq	r2,r3,801021c <_isatty_r+0x44>
 8010208:	dfc00217 	ldw	ra,8(sp)
 801020c:	dc400117 	ldw	r17,4(sp)
 8010210:	dc000017 	ldw	r16,0(sp)
 8010214:	dec00304 	addi	sp,sp,12
 8010218:	f800283a 	ret
 801021c:	80c00017 	ldw	r3,0(r16)
 8010220:	183ff926 	beq	r3,zero,8010208 <__alt_data_end+0xfc010208>
 8010224:	88c00015 	stw	r3,0(r17)
 8010228:	003ff706 	br	8010208 <__alt_data_end+0xfc010208>

0801022c <_lseek_r>:
 801022c:	defffd04 	addi	sp,sp,-12
 8010230:	dc000015 	stw	r16,0(sp)
 8010234:	040200b4 	movhi	r16,2050
 8010238:	dc400115 	stw	r17,4(sp)
 801023c:	840ebe04 	addi	r16,r16,15096
 8010240:	2023883a 	mov	r17,r4
 8010244:	2809883a 	mov	r4,r5
 8010248:	300b883a 	mov	r5,r6
 801024c:	380d883a 	mov	r6,r7
 8010250:	dfc00215 	stw	ra,8(sp)
 8010254:	80000015 	stw	zero,0(r16)
 8010258:	801328c0 	call	801328c <lseek>
 801025c:	00ffffc4 	movi	r3,-1
 8010260:	10c00526 	beq	r2,r3,8010278 <_lseek_r+0x4c>
 8010264:	dfc00217 	ldw	ra,8(sp)
 8010268:	dc400117 	ldw	r17,4(sp)
 801026c:	dc000017 	ldw	r16,0(sp)
 8010270:	dec00304 	addi	sp,sp,12
 8010274:	f800283a 	ret
 8010278:	80c00017 	ldw	r3,0(r16)
 801027c:	183ff926 	beq	r3,zero,8010264 <__alt_data_end+0xfc010264>
 8010280:	88c00015 	stw	r3,0(r17)
 8010284:	003ff706 	br	8010264 <__alt_data_end+0xfc010264>

08010288 <_read_r>:
 8010288:	defffd04 	addi	sp,sp,-12
 801028c:	dc000015 	stw	r16,0(sp)
 8010290:	040200b4 	movhi	r16,2050
 8010294:	dc400115 	stw	r17,4(sp)
 8010298:	840ebe04 	addi	r16,r16,15096
 801029c:	2023883a 	mov	r17,r4
 80102a0:	2809883a 	mov	r4,r5
 80102a4:	300b883a 	mov	r5,r6
 80102a8:	380d883a 	mov	r6,r7
 80102ac:	dfc00215 	stw	ra,8(sp)
 80102b0:	80000015 	stw	zero,0(r16)
 80102b4:	80134680 	call	8013468 <read>
 80102b8:	00ffffc4 	movi	r3,-1
 80102bc:	10c00526 	beq	r2,r3,80102d4 <_read_r+0x4c>
 80102c0:	dfc00217 	ldw	ra,8(sp)
 80102c4:	dc400117 	ldw	r17,4(sp)
 80102c8:	dc000017 	ldw	r16,0(sp)
 80102cc:	dec00304 	addi	sp,sp,12
 80102d0:	f800283a 	ret
 80102d4:	80c00017 	ldw	r3,0(r16)
 80102d8:	183ff926 	beq	r3,zero,80102c0 <__alt_data_end+0xfc0102c0>
 80102dc:	88c00015 	stw	r3,0(r17)
 80102e0:	003ff706 	br	80102c0 <__alt_data_end+0xfc0102c0>

080102e4 <_wcrtomb_r>:
 80102e4:	defff604 	addi	sp,sp,-40
 80102e8:	008200b4 	movhi	r2,2050
 80102ec:	dc800815 	stw	r18,32(sp)
 80102f0:	dc400715 	stw	r17,28(sp)
 80102f4:	dc000615 	stw	r16,24(sp)
 80102f8:	1087e804 	addi	r2,r2,8096
 80102fc:	dfc00915 	stw	ra,36(sp)
 8010300:	2021883a 	mov	r16,r4
 8010304:	3823883a 	mov	r17,r7
 8010308:	14800017 	ldw	r18,0(r2)
 801030c:	28001426 	beq	r5,zero,8010360 <_wcrtomb_r+0x7c>
 8010310:	d9400415 	stw	r5,16(sp)
 8010314:	d9800515 	stw	r6,20(sp)
 8010318:	800b5440 	call	800b544 <__locale_charset>
 801031c:	d9400417 	ldw	r5,16(sp)
 8010320:	d9800517 	ldw	r6,20(sp)
 8010324:	8009883a 	mov	r4,r16
 8010328:	dc400015 	stw	r17,0(sp)
 801032c:	100f883a 	mov	r7,r2
 8010330:	903ee83a 	callr	r18
 8010334:	00ffffc4 	movi	r3,-1
 8010338:	10c0031e 	bne	r2,r3,8010348 <_wcrtomb_r+0x64>
 801033c:	88000015 	stw	zero,0(r17)
 8010340:	00c02284 	movi	r3,138
 8010344:	80c00015 	stw	r3,0(r16)
 8010348:	dfc00917 	ldw	ra,36(sp)
 801034c:	dc800817 	ldw	r18,32(sp)
 8010350:	dc400717 	ldw	r17,28(sp)
 8010354:	dc000617 	ldw	r16,24(sp)
 8010358:	dec00a04 	addi	sp,sp,40
 801035c:	f800283a 	ret
 8010360:	800b5440 	call	800b544 <__locale_charset>
 8010364:	8009883a 	mov	r4,r16
 8010368:	dc400015 	stw	r17,0(sp)
 801036c:	d9400104 	addi	r5,sp,4
 8010370:	000d883a 	mov	r6,zero
 8010374:	100f883a 	mov	r7,r2
 8010378:	903ee83a 	callr	r18
 801037c:	003fed06 	br	8010334 <__alt_data_end+0xfc010334>

08010380 <wcrtomb>:
 8010380:	defff504 	addi	sp,sp,-44
 8010384:	dc400515 	stw	r17,20(sp)
 8010388:	dc000415 	stw	r16,16(sp)
 801038c:	dfc00a15 	stw	ra,40(sp)
 8010390:	dd400915 	stw	r21,36(sp)
 8010394:	dd000815 	stw	r20,32(sp)
 8010398:	dcc00715 	stw	r19,28(sp)
 801039c:	dc800615 	stw	r18,24(sp)
 80103a0:	2021883a 	mov	r16,r4
 80103a4:	3023883a 	mov	r17,r6
 80103a8:	20001d26 	beq	r4,zero,8010420 <wcrtomb+0xa0>
 80103ac:	048200b4 	movhi	r18,2050
 80103b0:	9487e604 	addi	r18,r18,8088
 80103b4:	008200b4 	movhi	r2,2050
 80103b8:	95400017 	ldw	r21,0(r18)
 80103bc:	1087e804 	addi	r2,r2,8096
 80103c0:	15000017 	ldw	r20,0(r2)
 80103c4:	2827883a 	mov	r19,r5
 80103c8:	800b5440 	call	800b544 <__locale_charset>
 80103cc:	a809883a 	mov	r4,r21
 80103d0:	dc400015 	stw	r17,0(sp)
 80103d4:	800b883a 	mov	r5,r16
 80103d8:	980d883a 	mov	r6,r19
 80103dc:	100f883a 	mov	r7,r2
 80103e0:	a03ee83a 	callr	r20
 80103e4:	00ffffc4 	movi	r3,-1
 80103e8:	10c0041e 	bne	r2,r3,80103fc <wcrtomb+0x7c>
 80103ec:	90c00017 	ldw	r3,0(r18)
 80103f0:	01002284 	movi	r4,138
 80103f4:	88000015 	stw	zero,0(r17)
 80103f8:	19000015 	stw	r4,0(r3)
 80103fc:	dfc00a17 	ldw	ra,40(sp)
 8010400:	dd400917 	ldw	r21,36(sp)
 8010404:	dd000817 	ldw	r20,32(sp)
 8010408:	dcc00717 	ldw	r19,28(sp)
 801040c:	dc800617 	ldw	r18,24(sp)
 8010410:	dc400517 	ldw	r17,20(sp)
 8010414:	dc000417 	ldw	r16,16(sp)
 8010418:	dec00b04 	addi	sp,sp,44
 801041c:	f800283a 	ret
 8010420:	048200b4 	movhi	r18,2050
 8010424:	9487e604 	addi	r18,r18,8088
 8010428:	008200b4 	movhi	r2,2050
 801042c:	94c00017 	ldw	r19,0(r18)
 8010430:	1087e804 	addi	r2,r2,8096
 8010434:	14000017 	ldw	r16,0(r2)
 8010438:	800b5440 	call	800b544 <__locale_charset>
 801043c:	9809883a 	mov	r4,r19
 8010440:	dc400015 	stw	r17,0(sp)
 8010444:	d9400104 	addi	r5,sp,4
 8010448:	000d883a 	mov	r6,zero
 801044c:	100f883a 	mov	r7,r2
 8010450:	803ee83a 	callr	r16
 8010454:	003fe306 	br	80103e4 <__alt_data_end+0xfc0103e4>

08010458 <__ascii_wctomb>:
 8010458:	28000526 	beq	r5,zero,8010470 <__ascii_wctomb+0x18>
 801045c:	00803fc4 	movi	r2,255
 8010460:	11800536 	bltu	r2,r6,8010478 <__ascii_wctomb+0x20>
 8010464:	29800005 	stb	r6,0(r5)
 8010468:	00800044 	movi	r2,1
 801046c:	f800283a 	ret
 8010470:	0005883a 	mov	r2,zero
 8010474:	f800283a 	ret
 8010478:	00802284 	movi	r2,138
 801047c:	20800015 	stw	r2,0(r4)
 8010480:	00bfffc4 	movi	r2,-1
 8010484:	f800283a 	ret

08010488 <_wctomb_r>:
 8010488:	008200b4 	movhi	r2,2050
 801048c:	defff904 	addi	sp,sp,-28
 8010490:	1087e804 	addi	r2,r2,8096
 8010494:	dfc00615 	stw	ra,24(sp)
 8010498:	dc400515 	stw	r17,20(sp)
 801049c:	dc000415 	stw	r16,16(sp)
 80104a0:	3823883a 	mov	r17,r7
 80104a4:	14000017 	ldw	r16,0(r2)
 80104a8:	d9000115 	stw	r4,4(sp)
 80104ac:	d9400215 	stw	r5,8(sp)
 80104b0:	d9800315 	stw	r6,12(sp)
 80104b4:	800b5440 	call	800b544 <__locale_charset>
 80104b8:	d9000117 	ldw	r4,4(sp)
 80104bc:	d9400217 	ldw	r5,8(sp)
 80104c0:	d9800317 	ldw	r6,12(sp)
 80104c4:	dc400015 	stw	r17,0(sp)
 80104c8:	100f883a 	mov	r7,r2
 80104cc:	803ee83a 	callr	r16
 80104d0:	dfc00617 	ldw	ra,24(sp)
 80104d4:	dc400517 	ldw	r17,20(sp)
 80104d8:	dc000417 	ldw	r16,16(sp)
 80104dc:	dec00704 	addi	sp,sp,28
 80104e0:	f800283a 	ret

080104e4 <__udivdi3>:
 80104e4:	defff504 	addi	sp,sp,-44
 80104e8:	dcc00415 	stw	r19,16(sp)
 80104ec:	dc000115 	stw	r16,4(sp)
 80104f0:	dfc00a15 	stw	ra,40(sp)
 80104f4:	df000915 	stw	fp,36(sp)
 80104f8:	ddc00815 	stw	r23,32(sp)
 80104fc:	dd800715 	stw	r22,28(sp)
 8010500:	dd400615 	stw	r21,24(sp)
 8010504:	dd000515 	stw	r20,20(sp)
 8010508:	dc800315 	stw	r18,12(sp)
 801050c:	dc400215 	stw	r17,8(sp)
 8010510:	2027883a 	mov	r19,r4
 8010514:	2821883a 	mov	r16,r5
 8010518:	3800421e 	bne	r7,zero,8010624 <__udivdi3+0x140>
 801051c:	3025883a 	mov	r18,r6
 8010520:	2023883a 	mov	r17,r4
 8010524:	2980542e 	bgeu	r5,r6,8010678 <__udivdi3+0x194>
 8010528:	00bfffd4 	movui	r2,65535
 801052c:	282d883a 	mov	r22,r5
 8010530:	1180a836 	bltu	r2,r6,80107d4 <__udivdi3+0x2f0>
 8010534:	00803fc4 	movi	r2,255
 8010538:	1181422e 	bgeu	r2,r6,8010a44 <__udivdi3+0x560>
 801053c:	00800204 	movi	r2,8
 8010540:	1007883a 	mov	r3,r2
 8010544:	3084d83a 	srl	r2,r6,r2
 8010548:	010200b4 	movhi	r4,2050
 801054c:	21005704 	addi	r4,r4,348
 8010550:	2085883a 	add	r2,r4,r2
 8010554:	10800003 	ldbu	r2,0(r2)
 8010558:	10c7883a 	add	r3,r2,r3
 801055c:	00800804 	movi	r2,32
 8010560:	10c5c83a 	sub	r2,r2,r3
 8010564:	10000526 	beq	r2,zero,801057c <__udivdi3+0x98>
 8010568:	80a0983a 	sll	r16,r16,r2
 801056c:	98c6d83a 	srl	r3,r19,r3
 8010570:	30a4983a 	sll	r18,r6,r2
 8010574:	98a2983a 	sll	r17,r19,r2
 8010578:	80ecb03a 	or	r22,r16,r3
 801057c:	902ad43a 	srli	r21,r18,16
 8010580:	b009883a 	mov	r4,r22
 8010584:	953fffcc 	andi	r20,r18,65535
 8010588:	a80b883a 	mov	r5,r21
 801058c:	80111580 	call	8011158 <__umodsi3>
 8010590:	b009883a 	mov	r4,r22
 8010594:	a80b883a 	mov	r5,r21
 8010598:	1027883a 	mov	r19,r2
 801059c:	80111500 	call	8011150 <__udivsi3>
 80105a0:	1021883a 	mov	r16,r2
 80105a4:	8806d43a 	srli	r3,r17,16
 80105a8:	9804943a 	slli	r2,r19,16
 80105ac:	8527383a 	mul	r19,r16,r20
 80105b0:	10c4b03a 	or	r2,r2,r3
 80105b4:	14c0052e 	bgeu	r2,r19,80105cc <__udivdi3+0xe8>
 80105b8:	1485883a 	add	r2,r2,r18
 80105bc:	80ffffc4 	addi	r3,r16,-1
 80105c0:	14800136 	bltu	r2,r18,80105c8 <__udivdi3+0xe4>
 80105c4:	14c13436 	bltu	r2,r19,8010a98 <__udivdi3+0x5b4>
 80105c8:	1821883a 	mov	r16,r3
 80105cc:	14e7c83a 	sub	r19,r2,r19
 80105d0:	9809883a 	mov	r4,r19
 80105d4:	a80b883a 	mov	r5,r21
 80105d8:	80111580 	call	8011158 <__umodsi3>
 80105dc:	102d883a 	mov	r22,r2
 80105e0:	9809883a 	mov	r4,r19
 80105e4:	a80b883a 	mov	r5,r21
 80105e8:	80111500 	call	8011150 <__udivsi3>
 80105ec:	b02c943a 	slli	r22,r22,16
 80105f0:	1529383a 	mul	r20,r2,r20
 80105f4:	8c7fffcc 	andi	r17,r17,65535
 80105f8:	b462b03a 	or	r17,r22,r17
 80105fc:	8d00052e 	bgeu	r17,r20,8010614 <__udivdi3+0x130>
 8010600:	8ca3883a 	add	r17,r17,r18
 8010604:	10ffffc4 	addi	r3,r2,-1
 8010608:	8c80f636 	bltu	r17,r18,80109e4 <__udivdi3+0x500>
 801060c:	8d00f52e 	bgeu	r17,r20,80109e4 <__udivdi3+0x500>
 8010610:	10bfff84 	addi	r2,r2,-2
 8010614:	8020943a 	slli	r16,r16,16
 8010618:	0007883a 	mov	r3,zero
 801061c:	1404b03a 	or	r2,r2,r16
 8010620:	00005b06 	br	8010790 <__udivdi3+0x2ac>
 8010624:	29c05836 	bltu	r5,r7,8010788 <__udivdi3+0x2a4>
 8010628:	00bfffd4 	movui	r2,65535
 801062c:	11c0642e 	bgeu	r2,r7,80107c0 <__udivdi3+0x2dc>
 8010630:	00804034 	movhi	r2,256
 8010634:	10bfffc4 	addi	r2,r2,-1
 8010638:	11c0f32e 	bgeu	r2,r7,8010a08 <__udivdi3+0x524>
 801063c:	00c00604 	movi	r3,24
 8010640:	180b883a 	mov	r5,r3
 8010644:	38c6d83a 	srl	r3,r7,r3
 8010648:	008200b4 	movhi	r2,2050
 801064c:	10805704 	addi	r2,r2,348
 8010650:	10c7883a 	add	r3,r2,r3
 8010654:	18c00003 	ldbu	r3,0(r3)
 8010658:	01000804 	movi	r4,32
 801065c:	1947883a 	add	r3,r3,r5
 8010660:	20e5c83a 	sub	r18,r4,r3
 8010664:	9000661e 	bne	r18,zero,8010800 <__udivdi3+0x31c>
 8010668:	3c00f936 	bltu	r7,r16,8010a50 <__udivdi3+0x56c>
 801066c:	9985403a 	cmpgeu	r2,r19,r6
 8010670:	0007883a 	mov	r3,zero
 8010674:	00004606 	br	8010790 <__udivdi3+0x2ac>
 8010678:	3000041e 	bne	r6,zero,801068c <__udivdi3+0x1a8>
 801067c:	01000044 	movi	r4,1
 8010680:	000b883a 	mov	r5,zero
 8010684:	80111500 	call	8011150 <__udivsi3>
 8010688:	1025883a 	mov	r18,r2
 801068c:	00bfffd4 	movui	r2,65535
 8010690:	1480562e 	bgeu	r2,r18,80107ec <__udivdi3+0x308>
 8010694:	00804034 	movhi	r2,256
 8010698:	10bfffc4 	addi	r2,r2,-1
 801069c:	1480e32e 	bgeu	r2,r18,8010a2c <__udivdi3+0x548>
 80106a0:	00800604 	movi	r2,24
 80106a4:	1007883a 	mov	r3,r2
 80106a8:	9084d83a 	srl	r2,r18,r2
 80106ac:	010200b4 	movhi	r4,2050
 80106b0:	21005704 	addi	r4,r4,348
 80106b4:	2085883a 	add	r2,r4,r2
 80106b8:	10800003 	ldbu	r2,0(r2)
 80106bc:	10c5883a 	add	r2,r2,r3
 80106c0:	00c00804 	movi	r3,32
 80106c4:	1887c83a 	sub	r3,r3,r2
 80106c8:	1800911e 	bne	r3,zero,8010910 <__udivdi3+0x42c>
 80106cc:	9028d43a 	srli	r20,r18,16
 80106d0:	84a1c83a 	sub	r16,r16,r18
 80106d4:	957fffcc 	andi	r21,r18,65535
 80106d8:	00c00044 	movi	r3,1
 80106dc:	8009883a 	mov	r4,r16
 80106e0:	a00b883a 	mov	r5,r20
 80106e4:	d8c00015 	stw	r3,0(sp)
 80106e8:	80111580 	call	8011158 <__umodsi3>
 80106ec:	8009883a 	mov	r4,r16
 80106f0:	a00b883a 	mov	r5,r20
 80106f4:	1027883a 	mov	r19,r2
 80106f8:	80111500 	call	8011150 <__udivsi3>
 80106fc:	1021883a 	mov	r16,r2
 8010700:	880cd43a 	srli	r6,r17,16
 8010704:	9804943a 	slli	r2,r19,16
 8010708:	8567383a 	mul	r19,r16,r21
 801070c:	d8c00017 	ldw	r3,0(sp)
 8010710:	1188b03a 	or	r4,r2,r6
 8010714:	24c0052e 	bgeu	r4,r19,801072c <__udivdi3+0x248>
 8010718:	2489883a 	add	r4,r4,r18
 801071c:	80bfffc4 	addi	r2,r16,-1
 8010720:	24800136 	bltu	r4,r18,8010728 <__udivdi3+0x244>
 8010724:	24c0d936 	bltu	r4,r19,8010a8c <__udivdi3+0x5a8>
 8010728:	1021883a 	mov	r16,r2
 801072c:	24e7c83a 	sub	r19,r4,r19
 8010730:	9809883a 	mov	r4,r19
 8010734:	a00b883a 	mov	r5,r20
 8010738:	d8c00015 	stw	r3,0(sp)
 801073c:	80111580 	call	8011158 <__umodsi3>
 8010740:	102d883a 	mov	r22,r2
 8010744:	9809883a 	mov	r4,r19
 8010748:	a00b883a 	mov	r5,r20
 801074c:	80111500 	call	8011150 <__udivsi3>
 8010750:	b02c943a 	slli	r22,r22,16
 8010754:	156b383a 	mul	r21,r2,r21
 8010758:	8c7fffcc 	andi	r17,r17,65535
 801075c:	b462b03a 	or	r17,r22,r17
 8010760:	d8c00017 	ldw	r3,0(sp)
 8010764:	8d40052e 	bgeu	r17,r21,801077c <__udivdi3+0x298>
 8010768:	8ca3883a 	add	r17,r17,r18
 801076c:	113fffc4 	addi	r4,r2,-1
 8010770:	8c809a36 	bltu	r17,r18,80109dc <__udivdi3+0x4f8>
 8010774:	8d40992e 	bgeu	r17,r21,80109dc <__udivdi3+0x4f8>
 8010778:	10bfff84 	addi	r2,r2,-2
 801077c:	8020943a 	slli	r16,r16,16
 8010780:	1404b03a 	or	r2,r2,r16
 8010784:	00000206 	br	8010790 <__udivdi3+0x2ac>
 8010788:	0007883a 	mov	r3,zero
 801078c:	0005883a 	mov	r2,zero
 8010790:	dfc00a17 	ldw	ra,40(sp)
 8010794:	df000917 	ldw	fp,36(sp)
 8010798:	ddc00817 	ldw	r23,32(sp)
 801079c:	dd800717 	ldw	r22,28(sp)
 80107a0:	dd400617 	ldw	r21,24(sp)
 80107a4:	dd000517 	ldw	r20,20(sp)
 80107a8:	dcc00417 	ldw	r19,16(sp)
 80107ac:	dc800317 	ldw	r18,12(sp)
 80107b0:	dc400217 	ldw	r17,8(sp)
 80107b4:	dc000117 	ldw	r16,4(sp)
 80107b8:	dec00b04 	addi	sp,sp,44
 80107bc:	f800283a 	ret
 80107c0:	00803fc4 	movi	r2,255
 80107c4:	11c0932e 	bgeu	r2,r7,8010a14 <__udivdi3+0x530>
 80107c8:	00c00204 	movi	r3,8
 80107cc:	180b883a 	mov	r5,r3
 80107d0:	003f9c06 	br	8010644 <__alt_data_end+0xfc010644>
 80107d4:	00804034 	movhi	r2,256
 80107d8:	10bfffc4 	addi	r2,r2,-1
 80107dc:	1180902e 	bgeu	r2,r6,8010a20 <__udivdi3+0x53c>
 80107e0:	00800604 	movi	r2,24
 80107e4:	1007883a 	mov	r3,r2
 80107e8:	003f5606 	br	8010544 <__alt_data_end+0xfc010544>
 80107ec:	00803fc4 	movi	r2,255
 80107f0:	1480912e 	bgeu	r2,r18,8010a38 <__udivdi3+0x554>
 80107f4:	00800204 	movi	r2,8
 80107f8:	1007883a 	mov	r3,r2
 80107fc:	003faa06 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010800:	30eed83a 	srl	r23,r6,r3
 8010804:	3c8e983a 	sll	r7,r7,r18
 8010808:	80f8d83a 	srl	fp,r16,r3
 801080c:	98c6d83a 	srl	r3,r19,r3
 8010810:	3deeb03a 	or	r23,r7,r23
 8010814:	b828d43a 	srli	r20,r23,16
 8010818:	84a0983a 	sll	r16,r16,r18
 801081c:	e009883a 	mov	r4,fp
 8010820:	a00b883a 	mov	r5,r20
 8010824:	80e2b03a 	or	r17,r16,r3
 8010828:	34aa983a 	sll	r21,r6,r18
 801082c:	80111580 	call	8011158 <__umodsi3>
 8010830:	e009883a 	mov	r4,fp
 8010834:	a00b883a 	mov	r5,r20
 8010838:	102d883a 	mov	r22,r2
 801083c:	80111500 	call	8011150 <__udivsi3>
 8010840:	1021883a 	mov	r16,r2
 8010844:	bf3fffcc 	andi	fp,r23,65535
 8010848:	b004943a 	slli	r2,r22,16
 801084c:	8808d43a 	srli	r4,r17,16
 8010850:	872d383a 	mul	r22,r16,fp
 8010854:	1104b03a 	or	r2,r2,r4
 8010858:	1580042e 	bgeu	r2,r22,801086c <__udivdi3+0x388>
 801085c:	15c5883a 	add	r2,r2,r23
 8010860:	80ffffc4 	addi	r3,r16,-1
 8010864:	15c0812e 	bgeu	r2,r23,8010a6c <__udivdi3+0x588>
 8010868:	1821883a 	mov	r16,r3
 801086c:	15adc83a 	sub	r22,r2,r22
 8010870:	b009883a 	mov	r4,r22
 8010874:	a00b883a 	mov	r5,r20
 8010878:	80111580 	call	8011158 <__umodsi3>
 801087c:	a00b883a 	mov	r5,r20
 8010880:	b009883a 	mov	r4,r22
 8010884:	d8800015 	stw	r2,0(sp)
 8010888:	80111500 	call	8011150 <__udivsi3>
 801088c:	d8c00017 	ldw	r3,0(sp)
 8010890:	170b383a 	mul	r5,r2,fp
 8010894:	8c7fffcc 	andi	r17,r17,65535
 8010898:	1806943a 	slli	r3,r3,16
 801089c:	1c46b03a 	or	r3,r3,r17
 80108a0:	1940042e 	bgeu	r3,r5,80108b4 <__udivdi3+0x3d0>
 80108a4:	1dc7883a 	add	r3,r3,r23
 80108a8:	113fffc4 	addi	r4,r2,-1
 80108ac:	1dc06b2e 	bgeu	r3,r23,8010a5c <__udivdi3+0x578>
 80108b0:	2005883a 	mov	r2,r4
 80108b4:	8020943a 	slli	r16,r16,16
 80108b8:	a9ffffcc 	andi	r7,r21,65535
 80108bc:	a82ad43a 	srli	r21,r21,16
 80108c0:	1404b03a 	or	r2,r2,r16
 80108c4:	113fffcc 	andi	r4,r2,65535
 80108c8:	100cd43a 	srli	r6,r2,16
 80108cc:	21d3383a 	mul	r9,r4,r7
 80108d0:	2549383a 	mul	r4,r4,r21
 80108d4:	31cf383a 	mul	r7,r6,r7
 80108d8:	4810d43a 	srli	r8,r9,16
 80108dc:	1947c83a 	sub	r3,r3,r5
 80108e0:	3909883a 	add	r4,r7,r4
 80108e4:	2209883a 	add	r4,r4,r8
 80108e8:	354d383a 	mul	r6,r6,r21
 80108ec:	21c0022e 	bgeu	r4,r7,80108f8 <__udivdi3+0x414>
 80108f0:	01400074 	movhi	r5,1
 80108f4:	314d883a 	add	r6,r6,r5
 80108f8:	202ad43a 	srli	r21,r4,16
 80108fc:	354d883a 	add	r6,r6,r21
 8010900:	19803f36 	bltu	r3,r6,8010a00 <__udivdi3+0x51c>
 8010904:	19803926 	beq	r3,r6,80109ec <__udivdi3+0x508>
 8010908:	0007883a 	mov	r3,zero
 801090c:	003fa006 	br	8010790 <__alt_data_end+0xfc010790>
 8010910:	90e4983a 	sll	r18,r18,r3
 8010914:	80aad83a 	srl	r21,r16,r2
 8010918:	80e0983a 	sll	r16,r16,r3
 801091c:	9028d43a 	srli	r20,r18,16
 8010920:	9884d83a 	srl	r2,r19,r2
 8010924:	a809883a 	mov	r4,r21
 8010928:	a00b883a 	mov	r5,r20
 801092c:	80acb03a 	or	r22,r16,r2
 8010930:	98e2983a 	sll	r17,r19,r3
 8010934:	80111580 	call	8011158 <__umodsi3>
 8010938:	a809883a 	mov	r4,r21
 801093c:	a00b883a 	mov	r5,r20
 8010940:	1021883a 	mov	r16,r2
 8010944:	80111500 	call	8011150 <__udivsi3>
 8010948:	957fffcc 	andi	r21,r18,65535
 801094c:	8020943a 	slli	r16,r16,16
 8010950:	b00ad43a 	srli	r5,r22,16
 8010954:	1567383a 	mul	r19,r2,r21
 8010958:	102f883a 	mov	r23,r2
 801095c:	8148b03a 	or	r4,r16,r5
 8010960:	24c0062e 	bgeu	r4,r19,801097c <__udivdi3+0x498>
 8010964:	2489883a 	add	r4,r4,r18
 8010968:	10bfffc4 	addi	r2,r2,-1
 801096c:	24804536 	bltu	r4,r18,8010a84 <__udivdi3+0x5a0>
 8010970:	24c0442e 	bgeu	r4,r19,8010a84 <__udivdi3+0x5a0>
 8010974:	bdffff84 	addi	r23,r23,-2
 8010978:	2489883a 	add	r4,r4,r18
 801097c:	24e7c83a 	sub	r19,r4,r19
 8010980:	9809883a 	mov	r4,r19
 8010984:	a00b883a 	mov	r5,r20
 8010988:	80111580 	call	8011158 <__umodsi3>
 801098c:	1021883a 	mov	r16,r2
 8010990:	9809883a 	mov	r4,r19
 8010994:	a00b883a 	mov	r5,r20
 8010998:	80111500 	call	8011150 <__udivsi3>
 801099c:	8020943a 	slli	r16,r16,16
 80109a0:	1007883a 	mov	r3,r2
 80109a4:	1545383a 	mul	r2,r2,r21
 80109a8:	b13fffcc 	andi	r4,r22,65535
 80109ac:	8108b03a 	or	r4,r16,r4
 80109b0:	2080062e 	bgeu	r4,r2,80109cc <__udivdi3+0x4e8>
 80109b4:	2489883a 	add	r4,r4,r18
 80109b8:	197fffc4 	addi	r5,r3,-1
 80109bc:	24802f36 	bltu	r4,r18,8010a7c <__udivdi3+0x598>
 80109c0:	20802e2e 	bgeu	r4,r2,8010a7c <__udivdi3+0x598>
 80109c4:	18ffff84 	addi	r3,r3,-2
 80109c8:	2489883a 	add	r4,r4,r18
 80109cc:	b82e943a 	slli	r23,r23,16
 80109d0:	20a1c83a 	sub	r16,r4,r2
 80109d4:	1dc6b03a 	or	r3,r3,r23
 80109d8:	003f4006 	br	80106dc <__alt_data_end+0xfc0106dc>
 80109dc:	2005883a 	mov	r2,r4
 80109e0:	003f6606 	br	801077c <__alt_data_end+0xfc01077c>
 80109e4:	1805883a 	mov	r2,r3
 80109e8:	003f0a06 	br	8010614 <__alt_data_end+0xfc010614>
 80109ec:	2006943a 	slli	r3,r4,16
 80109f0:	9c88983a 	sll	r4,r19,r18
 80109f4:	4a7fffcc 	andi	r9,r9,65535
 80109f8:	1a47883a 	add	r3,r3,r9
 80109fc:	20ffc22e 	bgeu	r4,r3,8010908 <__alt_data_end+0xfc010908>
 8010a00:	10bfffc4 	addi	r2,r2,-1
 8010a04:	003fc006 	br	8010908 <__alt_data_end+0xfc010908>
 8010a08:	00c00404 	movi	r3,16
 8010a0c:	180b883a 	mov	r5,r3
 8010a10:	003f0c06 	br	8010644 <__alt_data_end+0xfc010644>
 8010a14:	0007883a 	mov	r3,zero
 8010a18:	000b883a 	mov	r5,zero
 8010a1c:	003f0906 	br	8010644 <__alt_data_end+0xfc010644>
 8010a20:	00800404 	movi	r2,16
 8010a24:	1007883a 	mov	r3,r2
 8010a28:	003ec606 	br	8010544 <__alt_data_end+0xfc010544>
 8010a2c:	00800404 	movi	r2,16
 8010a30:	1007883a 	mov	r3,r2
 8010a34:	003f1c06 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010a38:	0005883a 	mov	r2,zero
 8010a3c:	0007883a 	mov	r3,zero
 8010a40:	003f1906 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010a44:	0005883a 	mov	r2,zero
 8010a48:	0007883a 	mov	r3,zero
 8010a4c:	003ebd06 	br	8010544 <__alt_data_end+0xfc010544>
 8010a50:	0007883a 	mov	r3,zero
 8010a54:	00800044 	movi	r2,1
 8010a58:	003f4d06 	br	8010790 <__alt_data_end+0xfc010790>
 8010a5c:	197f942e 	bgeu	r3,r5,80108b0 <__alt_data_end+0xfc0108b0>
 8010a60:	10bfff84 	addi	r2,r2,-2
 8010a64:	1dc7883a 	add	r3,r3,r23
 8010a68:	003f9206 	br	80108b4 <__alt_data_end+0xfc0108b4>
 8010a6c:	15bf7e2e 	bgeu	r2,r22,8010868 <__alt_data_end+0xfc010868>
 8010a70:	843fff84 	addi	r16,r16,-2
 8010a74:	15c5883a 	add	r2,r2,r23
 8010a78:	003f7c06 	br	801086c <__alt_data_end+0xfc01086c>
 8010a7c:	2807883a 	mov	r3,r5
 8010a80:	003fd206 	br	80109cc <__alt_data_end+0xfc0109cc>
 8010a84:	102f883a 	mov	r23,r2
 8010a88:	003fbc06 	br	801097c <__alt_data_end+0xfc01097c>
 8010a8c:	843fff84 	addi	r16,r16,-2
 8010a90:	2489883a 	add	r4,r4,r18
 8010a94:	003f2506 	br	801072c <__alt_data_end+0xfc01072c>
 8010a98:	843fff84 	addi	r16,r16,-2
 8010a9c:	1485883a 	add	r2,r2,r18
 8010aa0:	003eca06 	br	80105cc <__alt_data_end+0xfc0105cc>

08010aa4 <__umoddi3>:
 8010aa4:	defff404 	addi	sp,sp,-48
 8010aa8:	ddc00915 	stw	r23,36(sp)
 8010aac:	dc400315 	stw	r17,12(sp)
 8010ab0:	dc000215 	stw	r16,8(sp)
 8010ab4:	dfc00b15 	stw	ra,44(sp)
 8010ab8:	df000a15 	stw	fp,40(sp)
 8010abc:	dd800815 	stw	r22,32(sp)
 8010ac0:	dd400715 	stw	r21,28(sp)
 8010ac4:	dd000615 	stw	r20,24(sp)
 8010ac8:	dcc00515 	stw	r19,20(sp)
 8010acc:	dc800415 	stw	r18,16(sp)
 8010ad0:	2021883a 	mov	r16,r4
 8010ad4:	2823883a 	mov	r17,r5
 8010ad8:	282f883a 	mov	r23,r5
 8010adc:	3800381e 	bne	r7,zero,8010bc0 <__umoddi3+0x11c>
 8010ae0:	3027883a 	mov	r19,r6
 8010ae4:	2029883a 	mov	r20,r4
 8010ae8:	29804e2e 	bgeu	r5,r6,8010c24 <__umoddi3+0x180>
 8010aec:	00bfffd4 	movui	r2,65535
 8010af0:	11809c36 	bltu	r2,r6,8010d64 <__umoddi3+0x2c0>
 8010af4:	00803fc4 	movi	r2,255
 8010af8:	11813b2e 	bgeu	r2,r6,8010fe8 <__umoddi3+0x544>
 8010afc:	01400204 	movi	r5,8
 8010b00:	2805883a 	mov	r2,r5
 8010b04:	314ad83a 	srl	r5,r6,r5
 8010b08:	00c200b4 	movhi	r3,2050
 8010b0c:	18c05704 	addi	r3,r3,348
 8010b10:	194b883a 	add	r5,r3,r5
 8010b14:	29000003 	ldbu	r4,0(r5)
 8010b18:	2089883a 	add	r4,r4,r2
 8010b1c:	00800804 	movi	r2,32
 8010b20:	1105c83a 	sub	r2,r2,r4
 8010b24:	1000ec26 	beq	r2,zero,8010ed8 <__umoddi3+0x434>
 8010b28:	88a2983a 	sll	r17,r17,r2
 8010b2c:	8108d83a 	srl	r4,r16,r4
 8010b30:	30a6983a 	sll	r19,r6,r2
 8010b34:	80a8983a 	sll	r20,r16,r2
 8010b38:	1025883a 	mov	r18,r2
 8010b3c:	892eb03a 	or	r23,r17,r4
 8010b40:	982cd43a 	srli	r22,r19,16
 8010b44:	b809883a 	mov	r4,r23
 8010b48:	9d7fffcc 	andi	r21,r19,65535
 8010b4c:	b00b883a 	mov	r5,r22
 8010b50:	80111580 	call	8011158 <__umodsi3>
 8010b54:	b809883a 	mov	r4,r23
 8010b58:	b00b883a 	mov	r5,r22
 8010b5c:	1021883a 	mov	r16,r2
 8010b60:	80111500 	call	8011150 <__udivsi3>
 8010b64:	8020943a 	slli	r16,r16,16
 8010b68:	a00cd43a 	srli	r6,r20,16
 8010b6c:	1545383a 	mul	r2,r2,r21
 8010b70:	8188b03a 	or	r4,r16,r6
 8010b74:	2080042e 	bgeu	r4,r2,8010b88 <__umoddi3+0xe4>
 8010b78:	24c9883a 	add	r4,r4,r19
 8010b7c:	24c00236 	bltu	r4,r19,8010b88 <__umoddi3+0xe4>
 8010b80:	2080012e 	bgeu	r4,r2,8010b88 <__umoddi3+0xe4>
 8010b84:	24c9883a 	add	r4,r4,r19
 8010b88:	20a3c83a 	sub	r17,r4,r2
 8010b8c:	8809883a 	mov	r4,r17
 8010b90:	b00b883a 	mov	r5,r22
 8010b94:	80111580 	call	8011158 <__umodsi3>
 8010b98:	8809883a 	mov	r4,r17
 8010b9c:	b00b883a 	mov	r5,r22
 8010ba0:	1021883a 	mov	r16,r2
 8010ba4:	80111500 	call	8011150 <__udivsi3>
 8010ba8:	8006943a 	slli	r3,r16,16
 8010bac:	1545383a 	mul	r2,r2,r21
 8010bb0:	a13fffcc 	andi	r4,r20,65535
 8010bb4:	1906b03a 	or	r3,r3,r4
 8010bb8:	1880532e 	bgeu	r3,r2,8010d08 <__umoddi3+0x264>
 8010bbc:	00004e06 	br	8010cf8 <__umoddi3+0x254>
 8010bc0:	29c05536 	bltu	r5,r7,8010d18 <__umoddi3+0x274>
 8010bc4:	00bfffd4 	movui	r2,65535
 8010bc8:	11c0612e 	bgeu	r2,r7,8010d50 <__umoddi3+0x2ac>
 8010bcc:	00804034 	movhi	r2,256
 8010bd0:	10bfffc4 	addi	r2,r2,-1
 8010bd4:	11c0f82e 	bgeu	r2,r7,8010fb8 <__umoddi3+0x514>
 8010bd8:	01400604 	movi	r5,24
 8010bdc:	282b883a 	mov	r21,r5
 8010be0:	394ad83a 	srl	r5,r7,r5
 8010be4:	00c200b4 	movhi	r3,2050
 8010be8:	18c05704 	addi	r3,r3,348
 8010bec:	194b883a 	add	r5,r3,r5
 8010bf0:	28800003 	ldbu	r2,0(r5)
 8010bf4:	00c00804 	movi	r3,32
 8010bf8:	156b883a 	add	r21,r2,r21
 8010bfc:	1d69c83a 	sub	r20,r3,r21
 8010c00:	a000631e 	bne	r20,zero,8010d90 <__umoddi3+0x2ec>
 8010c04:	3c400136 	bltu	r7,r17,8010c0c <__umoddi3+0x168>
 8010c08:	81810436 	bltu	r16,r6,801101c <__umoddi3+0x578>
 8010c0c:	8185c83a 	sub	r2,r16,r6
 8010c10:	89e3c83a 	sub	r17,r17,r7
 8010c14:	8087803a 	cmpltu	r3,r16,r2
 8010c18:	88efc83a 	sub	r23,r17,r3
 8010c1c:	b807883a 	mov	r3,r23
 8010c20:	00003f06 	br	8010d20 <__umoddi3+0x27c>
 8010c24:	3000041e 	bne	r6,zero,8010c38 <__umoddi3+0x194>
 8010c28:	01000044 	movi	r4,1
 8010c2c:	000b883a 	mov	r5,zero
 8010c30:	80111500 	call	8011150 <__udivsi3>
 8010c34:	1027883a 	mov	r19,r2
 8010c38:	00bfffd4 	movui	r2,65535
 8010c3c:	14c04f2e 	bgeu	r2,r19,8010d7c <__umoddi3+0x2d8>
 8010c40:	00804034 	movhi	r2,256
 8010c44:	10bfffc4 	addi	r2,r2,-1
 8010c48:	14c0e42e 	bgeu	r2,r19,8010fdc <__umoddi3+0x538>
 8010c4c:	00800604 	movi	r2,24
 8010c50:	1007883a 	mov	r3,r2
 8010c54:	9884d83a 	srl	r2,r19,r2
 8010c58:	010200b4 	movhi	r4,2050
 8010c5c:	21005704 	addi	r4,r4,348
 8010c60:	2085883a 	add	r2,r4,r2
 8010c64:	11000003 	ldbu	r4,0(r2)
 8010c68:	00800804 	movi	r2,32
 8010c6c:	20c7883a 	add	r3,r4,r3
 8010c70:	10c5c83a 	sub	r2,r2,r3
 8010c74:	10009a1e 	bne	r2,zero,8010ee0 <__umoddi3+0x43c>
 8010c78:	982cd43a 	srli	r22,r19,16
 8010c7c:	8ce3c83a 	sub	r17,r17,r19
 8010c80:	9c3fffcc 	andi	r16,r19,65535
 8010c84:	0025883a 	mov	r18,zero
 8010c88:	8809883a 	mov	r4,r17
 8010c8c:	b00b883a 	mov	r5,r22
 8010c90:	80111580 	call	8011158 <__umodsi3>
 8010c94:	8809883a 	mov	r4,r17
 8010c98:	b00b883a 	mov	r5,r22
 8010c9c:	102b883a 	mov	r21,r2
 8010ca0:	80111500 	call	8011150 <__udivsi3>
 8010ca4:	a806943a 	slli	r3,r21,16
 8010ca8:	a008d43a 	srli	r4,r20,16
 8010cac:	1405383a 	mul	r2,r2,r16
 8010cb0:	190cb03a 	or	r6,r3,r4
 8010cb4:	3080032e 	bgeu	r6,r2,8010cc4 <__umoddi3+0x220>
 8010cb8:	34cd883a 	add	r6,r6,r19
 8010cbc:	34c00136 	bltu	r6,r19,8010cc4 <__umoddi3+0x220>
 8010cc0:	3080d436 	bltu	r6,r2,8011014 <__umoddi3+0x570>
 8010cc4:	30abc83a 	sub	r21,r6,r2
 8010cc8:	a809883a 	mov	r4,r21
 8010ccc:	b00b883a 	mov	r5,r22
 8010cd0:	80111580 	call	8011158 <__umodsi3>
 8010cd4:	1023883a 	mov	r17,r2
 8010cd8:	a809883a 	mov	r4,r21
 8010cdc:	b00b883a 	mov	r5,r22
 8010ce0:	80111500 	call	8011150 <__udivsi3>
 8010ce4:	8822943a 	slli	r17,r17,16
 8010ce8:	1405383a 	mul	r2,r2,r16
 8010cec:	a13fffcc 	andi	r4,r20,65535
 8010cf0:	8906b03a 	or	r3,r17,r4
 8010cf4:	1880042e 	bgeu	r3,r2,8010d08 <__umoddi3+0x264>
 8010cf8:	1cc7883a 	add	r3,r3,r19
 8010cfc:	1cc00236 	bltu	r3,r19,8010d08 <__umoddi3+0x264>
 8010d00:	1880012e 	bgeu	r3,r2,8010d08 <__umoddi3+0x264>
 8010d04:	1cc7883a 	add	r3,r3,r19
 8010d08:	1887c83a 	sub	r3,r3,r2
 8010d0c:	1c84d83a 	srl	r2,r3,r18
 8010d10:	0007883a 	mov	r3,zero
 8010d14:	00000206 	br	8010d20 <__umoddi3+0x27c>
 8010d18:	2005883a 	mov	r2,r4
 8010d1c:	2807883a 	mov	r3,r5
 8010d20:	dfc00b17 	ldw	ra,44(sp)
 8010d24:	df000a17 	ldw	fp,40(sp)
 8010d28:	ddc00917 	ldw	r23,36(sp)
 8010d2c:	dd800817 	ldw	r22,32(sp)
 8010d30:	dd400717 	ldw	r21,28(sp)
 8010d34:	dd000617 	ldw	r20,24(sp)
 8010d38:	dcc00517 	ldw	r19,20(sp)
 8010d3c:	dc800417 	ldw	r18,16(sp)
 8010d40:	dc400317 	ldw	r17,12(sp)
 8010d44:	dc000217 	ldw	r16,8(sp)
 8010d48:	dec00c04 	addi	sp,sp,48
 8010d4c:	f800283a 	ret
 8010d50:	00803fc4 	movi	r2,255
 8010d54:	11c0952e 	bgeu	r2,r7,8010fac <__umoddi3+0x508>
 8010d58:	01400204 	movi	r5,8
 8010d5c:	282b883a 	mov	r21,r5
 8010d60:	003f9f06 	br	8010be0 <__alt_data_end+0xfc010be0>
 8010d64:	00804034 	movhi	r2,256
 8010d68:	10bfffc4 	addi	r2,r2,-1
 8010d6c:	1180952e 	bgeu	r2,r6,8010fc4 <__umoddi3+0x520>
 8010d70:	01400604 	movi	r5,24
 8010d74:	2805883a 	mov	r2,r5
 8010d78:	003f6206 	br	8010b04 <__alt_data_end+0xfc010b04>
 8010d7c:	00803fc4 	movi	r2,255
 8010d80:	14c0932e 	bgeu	r2,r19,8010fd0 <__umoddi3+0x52c>
 8010d84:	00800204 	movi	r2,8
 8010d88:	1007883a 	mov	r3,r2
 8010d8c:	003fb106 	br	8010c54 <__alt_data_end+0xfc010c54>
 8010d90:	3548d83a 	srl	r4,r6,r21
 8010d94:	3d0e983a 	sll	r7,r7,r20
 8010d98:	8d10983a 	sll	r8,r17,r20
 8010d9c:	8d6cd83a 	srl	r22,r17,r21
 8010da0:	3922b03a 	or	r17,r7,r4
 8010da4:	882ed43a 	srli	r23,r17,16
 8010da8:	8564d83a 	srl	r18,r16,r21
 8010dac:	b009883a 	mov	r4,r22
 8010db0:	b80b883a 	mov	r5,r23
 8010db4:	44a4b03a 	or	r18,r8,r18
 8010db8:	3526983a 	sll	r19,r6,r20
 8010dbc:	80111580 	call	8011158 <__umodsi3>
 8010dc0:	b009883a 	mov	r4,r22
 8010dc4:	b80b883a 	mov	r5,r23
 8010dc8:	1039883a 	mov	fp,r2
 8010dcc:	80111500 	call	8011150 <__udivsi3>
 8010dd0:	102d883a 	mov	r22,r2
 8010dd4:	8a3fffcc 	andi	r8,r17,65535
 8010dd8:	e004943a 	slli	r2,fp,16
 8010ddc:	900cd43a 	srli	r6,r18,16
 8010de0:	b239383a 	mul	fp,r22,r8
 8010de4:	8520983a 	sll	r16,r16,r20
 8010de8:	118ab03a 	or	r5,r2,r6
 8010dec:	2f00042e 	bgeu	r5,fp,8010e00 <__umoddi3+0x35c>
 8010df0:	2c4b883a 	add	r5,r5,r17
 8010df4:	b0bfffc4 	addi	r2,r22,-1
 8010df8:	2c40822e 	bgeu	r5,r17,8011004 <__umoddi3+0x560>
 8010dfc:	102d883a 	mov	r22,r2
 8010e00:	2f39c83a 	sub	fp,r5,fp
 8010e04:	e009883a 	mov	r4,fp
 8010e08:	b80b883a 	mov	r5,r23
 8010e0c:	da000115 	stw	r8,4(sp)
 8010e10:	80111580 	call	8011158 <__umodsi3>
 8010e14:	e009883a 	mov	r4,fp
 8010e18:	b80b883a 	mov	r5,r23
 8010e1c:	d8800015 	stw	r2,0(sp)
 8010e20:	80111500 	call	8011150 <__udivsi3>
 8010e24:	d9800017 	ldw	r6,0(sp)
 8010e28:	da000117 	ldw	r8,4(sp)
 8010e2c:	94bfffcc 	andi	r18,r18,65535
 8010e30:	300c943a 	slli	r6,r6,16
 8010e34:	1209383a 	mul	r4,r2,r8
 8010e38:	3490b03a 	or	r8,r6,r18
 8010e3c:	4100042e 	bgeu	r8,r4,8010e50 <__umoddi3+0x3ac>
 8010e40:	4451883a 	add	r8,r8,r17
 8010e44:	10ffffc4 	addi	r3,r2,-1
 8010e48:	44406a2e 	bgeu	r8,r17,8010ff4 <__umoddi3+0x550>
 8010e4c:	1805883a 	mov	r2,r3
 8010e50:	b012943a 	slli	r9,r22,16
 8010e54:	9abfffcc 	andi	r10,r19,65535
 8010e58:	980ed43a 	srli	r7,r19,16
 8010e5c:	124ab03a 	or	r5,r2,r9
 8010e60:	2a7fffcc 	andi	r9,r5,65535
 8010e64:	280ad43a 	srli	r5,r5,16
 8010e68:	4a8d383a 	mul	r6,r9,r10
 8010e6c:	49d3383a 	mul	r9,r9,r7
 8010e70:	2a95383a 	mul	r10,r5,r10
 8010e74:	3004d43a 	srli	r2,r6,16
 8010e78:	4111c83a 	sub	r8,r8,r4
 8010e7c:	5253883a 	add	r9,r10,r9
 8010e80:	4893883a 	add	r9,r9,r2
 8010e84:	29cb383a 	mul	r5,r5,r7
 8010e88:	4a80022e 	bgeu	r9,r10,8010e94 <__umoddi3+0x3f0>
 8010e8c:	00800074 	movhi	r2,1
 8010e90:	288b883a 	add	r5,r5,r2
 8010e94:	4808d43a 	srli	r4,r9,16
 8010e98:	4812943a 	slli	r9,r9,16
 8010e9c:	31bfffcc 	andi	r6,r6,65535
 8010ea0:	290b883a 	add	r5,r5,r4
 8010ea4:	498d883a 	add	r6,r9,r6
 8010ea8:	41403a36 	bltu	r8,r5,8010f94 <__umoddi3+0x4f0>
 8010eac:	41405d26 	beq	r8,r5,8011024 <__umoddi3+0x580>
 8010eb0:	4149c83a 	sub	r4,r8,r5
 8010eb4:	300f883a 	mov	r7,r6
 8010eb8:	81cfc83a 	sub	r7,r16,r7
 8010ebc:	81c7803a 	cmpltu	r3,r16,r7
 8010ec0:	20c7c83a 	sub	r3,r4,r3
 8010ec4:	1d44983a 	sll	r2,r3,r21
 8010ec8:	3d0ed83a 	srl	r7,r7,r20
 8010ecc:	1d06d83a 	srl	r3,r3,r20
 8010ed0:	11c4b03a 	or	r2,r2,r7
 8010ed4:	003f9206 	br	8010d20 <__alt_data_end+0xfc010d20>
 8010ed8:	0025883a 	mov	r18,zero
 8010edc:	003f1806 	br	8010b40 <__alt_data_end+0xfc010b40>
 8010ee0:	98a6983a 	sll	r19,r19,r2
 8010ee4:	88e8d83a 	srl	r20,r17,r3
 8010ee8:	80c6d83a 	srl	r3,r16,r3
 8010eec:	982cd43a 	srli	r22,r19,16
 8010ef0:	88a2983a 	sll	r17,r17,r2
 8010ef4:	a009883a 	mov	r4,r20
 8010ef8:	b00b883a 	mov	r5,r22
 8010efc:	88eab03a 	or	r21,r17,r3
 8010f00:	1025883a 	mov	r18,r2
 8010f04:	80111580 	call	8011158 <__umodsi3>
 8010f08:	a009883a 	mov	r4,r20
 8010f0c:	b00b883a 	mov	r5,r22
 8010f10:	1023883a 	mov	r17,r2
 8010f14:	80111500 	call	8011150 <__udivsi3>
 8010f18:	9f3fffcc 	andi	fp,r19,65535
 8010f1c:	8822943a 	slli	r17,r17,16
 8010f20:	a80ad43a 	srli	r5,r21,16
 8010f24:	1705383a 	mul	r2,r2,fp
 8010f28:	84a8983a 	sll	r20,r16,r18
 8010f2c:	8948b03a 	or	r4,r17,r5
 8010f30:	2080042e 	bgeu	r4,r2,8010f44 <__umoddi3+0x4a0>
 8010f34:	24c9883a 	add	r4,r4,r19
 8010f38:	24c00236 	bltu	r4,r19,8010f44 <__umoddi3+0x4a0>
 8010f3c:	2080012e 	bgeu	r4,r2,8010f44 <__umoddi3+0x4a0>
 8010f40:	24c9883a 	add	r4,r4,r19
 8010f44:	20afc83a 	sub	r23,r4,r2
 8010f48:	b809883a 	mov	r4,r23
 8010f4c:	b00b883a 	mov	r5,r22
 8010f50:	80111580 	call	8011158 <__umodsi3>
 8010f54:	1023883a 	mov	r17,r2
 8010f58:	b809883a 	mov	r4,r23
 8010f5c:	b00b883a 	mov	r5,r22
 8010f60:	80111500 	call	8011150 <__udivsi3>
 8010f64:	8822943a 	slli	r17,r17,16
 8010f68:	1705383a 	mul	r2,r2,fp
 8010f6c:	a93fffcc 	andi	r4,r21,65535
 8010f70:	8908b03a 	or	r4,r17,r4
 8010f74:	2080042e 	bgeu	r4,r2,8010f88 <__umoddi3+0x4e4>
 8010f78:	24c9883a 	add	r4,r4,r19
 8010f7c:	24c00236 	bltu	r4,r19,8010f88 <__umoddi3+0x4e4>
 8010f80:	2080012e 	bgeu	r4,r2,8010f88 <__umoddi3+0x4e4>
 8010f84:	24c9883a 	add	r4,r4,r19
 8010f88:	20a3c83a 	sub	r17,r4,r2
 8010f8c:	e021883a 	mov	r16,fp
 8010f90:	003f3d06 	br	8010c88 <__alt_data_end+0xfc010c88>
 8010f94:	34cfc83a 	sub	r7,r6,r19
 8010f98:	2c4bc83a 	sub	r5,r5,r17
 8010f9c:	31cd803a 	cmpltu	r6,r6,r7
 8010fa0:	298dc83a 	sub	r6,r5,r6
 8010fa4:	4189c83a 	sub	r4,r8,r6
 8010fa8:	003fc306 	br	8010eb8 <__alt_data_end+0xfc010eb8>
 8010fac:	000b883a 	mov	r5,zero
 8010fb0:	002b883a 	mov	r21,zero
 8010fb4:	003f0a06 	br	8010be0 <__alt_data_end+0xfc010be0>
 8010fb8:	01400404 	movi	r5,16
 8010fbc:	282b883a 	mov	r21,r5
 8010fc0:	003f0706 	br	8010be0 <__alt_data_end+0xfc010be0>
 8010fc4:	01400404 	movi	r5,16
 8010fc8:	2805883a 	mov	r2,r5
 8010fcc:	003ecd06 	br	8010b04 <__alt_data_end+0xfc010b04>
 8010fd0:	0005883a 	mov	r2,zero
 8010fd4:	0007883a 	mov	r3,zero
 8010fd8:	003f1e06 	br	8010c54 <__alt_data_end+0xfc010c54>
 8010fdc:	00800404 	movi	r2,16
 8010fe0:	1007883a 	mov	r3,r2
 8010fe4:	003f1b06 	br	8010c54 <__alt_data_end+0xfc010c54>
 8010fe8:	000b883a 	mov	r5,zero
 8010fec:	0005883a 	mov	r2,zero
 8010ff0:	003ec406 	br	8010b04 <__alt_data_end+0xfc010b04>
 8010ff4:	413f952e 	bgeu	r8,r4,8010e4c <__alt_data_end+0xfc010e4c>
 8010ff8:	10bfff84 	addi	r2,r2,-2
 8010ffc:	4451883a 	add	r8,r8,r17
 8011000:	003f9306 	br	8010e50 <__alt_data_end+0xfc010e50>
 8011004:	2f3f7d2e 	bgeu	r5,fp,8010dfc <__alt_data_end+0xfc010dfc>
 8011008:	b5bfff84 	addi	r22,r22,-2
 801100c:	2c4b883a 	add	r5,r5,r17
 8011010:	003f7b06 	br	8010e00 <__alt_data_end+0xfc010e00>
 8011014:	34cd883a 	add	r6,r6,r19
 8011018:	003f2a06 	br	8010cc4 <__alt_data_end+0xfc010cc4>
 801101c:	8005883a 	mov	r2,r16
 8011020:	003efe06 	br	8010c1c <__alt_data_end+0xfc010c1c>
 8011024:	81bfdb36 	bltu	r16,r6,8010f94 <__alt_data_end+0xfc010f94>
 8011028:	300f883a 	mov	r7,r6
 801102c:	0009883a 	mov	r4,zero
 8011030:	003fa106 	br	8010eb8 <__alt_data_end+0xfc010eb8>

08011034 <udivmodsi4>:
 8011034:	2900182e 	bgeu	r5,r4,8011098 <udivmodsi4+0x64>
 8011038:	28001716 	blt	r5,zero,8011098 <udivmodsi4+0x64>
 801103c:	00800804 	movi	r2,32
 8011040:	00c00044 	movi	r3,1
 8011044:	00000206 	br	8011050 <udivmodsi4+0x1c>
 8011048:	10001126 	beq	r2,zero,8011090 <udivmodsi4+0x5c>
 801104c:	28000516 	blt	r5,zero,8011064 <udivmodsi4+0x30>
 8011050:	294b883a 	add	r5,r5,r5
 8011054:	10bfffc4 	addi	r2,r2,-1
 8011058:	18c7883a 	add	r3,r3,r3
 801105c:	293ffa36 	bltu	r5,r4,8011048 <__alt_data_end+0xfc011048>
 8011060:	18000b26 	beq	r3,zero,8011090 <udivmodsi4+0x5c>
 8011064:	0005883a 	mov	r2,zero
 8011068:	21400236 	bltu	r4,r5,8011074 <udivmodsi4+0x40>
 801106c:	2149c83a 	sub	r4,r4,r5
 8011070:	10c4b03a 	or	r2,r2,r3
 8011074:	1806d07a 	srli	r3,r3,1
 8011078:	280ad07a 	srli	r5,r5,1
 801107c:	183ffa1e 	bne	r3,zero,8011068 <__alt_data_end+0xfc011068>
 8011080:	3000011e 	bne	r6,zero,8011088 <udivmodsi4+0x54>
 8011084:	f800283a 	ret
 8011088:	2005883a 	mov	r2,r4
 801108c:	f800283a 	ret
 8011090:	0005883a 	mov	r2,zero
 8011094:	003ffa06 	br	8011080 <__alt_data_end+0xfc011080>
 8011098:	00c00044 	movi	r3,1
 801109c:	003ff106 	br	8011064 <__alt_data_end+0xfc011064>

080110a0 <__divsi3>:
 80110a0:	defffe04 	addi	sp,sp,-8
 80110a4:	dfc00115 	stw	ra,4(sp)
 80110a8:	dc000015 	stw	r16,0(sp)
 80110ac:	20000b16 	blt	r4,zero,80110dc <__divsi3+0x3c>
 80110b0:	0021883a 	mov	r16,zero
 80110b4:	28000c16 	blt	r5,zero,80110e8 <__divsi3+0x48>
 80110b8:	000d883a 	mov	r6,zero
 80110bc:	80110340 	call	8011034 <udivmodsi4>
 80110c0:	0407c83a 	sub	r3,zero,r16
 80110c4:	1884f03a 	xor	r2,r3,r2
 80110c8:	1405883a 	add	r2,r2,r16
 80110cc:	dfc00117 	ldw	ra,4(sp)
 80110d0:	dc000017 	ldw	r16,0(sp)
 80110d4:	dec00204 	addi	sp,sp,8
 80110d8:	f800283a 	ret
 80110dc:	0109c83a 	sub	r4,zero,r4
 80110e0:	04000044 	movi	r16,1
 80110e4:	283ff40e 	bge	r5,zero,80110b8 <__alt_data_end+0xfc0110b8>
 80110e8:	014bc83a 	sub	r5,zero,r5
 80110ec:	8400005c 	xori	r16,r16,1
 80110f0:	003ff106 	br	80110b8 <__alt_data_end+0xfc0110b8>

080110f4 <__modsi3>:
 80110f4:	defffd04 	addi	sp,sp,-12
 80110f8:	dfc00215 	stw	ra,8(sp)
 80110fc:	dc400115 	stw	r17,4(sp)
 8011100:	dc000015 	stw	r16,0(sp)
 8011104:	20000c16 	blt	r4,zero,8011138 <__modsi3+0x44>
 8011108:	0023883a 	mov	r17,zero
 801110c:	0021883a 	mov	r16,zero
 8011110:	28000d16 	blt	r5,zero,8011148 <__modsi3+0x54>
 8011114:	01800044 	movi	r6,1
 8011118:	80110340 	call	8011034 <udivmodsi4>
 801111c:	1404f03a 	xor	r2,r2,r16
 8011120:	8885883a 	add	r2,r17,r2
 8011124:	dfc00217 	ldw	ra,8(sp)
 8011128:	dc400117 	ldw	r17,4(sp)
 801112c:	dc000017 	ldw	r16,0(sp)
 8011130:	dec00304 	addi	sp,sp,12
 8011134:	f800283a 	ret
 8011138:	0109c83a 	sub	r4,zero,r4
 801113c:	04400044 	movi	r17,1
 8011140:	043fffc4 	movi	r16,-1
 8011144:	283ff30e 	bge	r5,zero,8011114 <__alt_data_end+0xfc011114>
 8011148:	014bc83a 	sub	r5,zero,r5
 801114c:	003ff106 	br	8011114 <__alt_data_end+0xfc011114>

08011150 <__udivsi3>:
 8011150:	000d883a 	mov	r6,zero
 8011154:	80110341 	jmpi	8011034 <udivmodsi4>

08011158 <__umodsi3>:
 8011158:	01800044 	movi	r6,1
 801115c:	80110341 	jmpi	8011034 <udivmodsi4>

08011160 <__divdf3>:
 8011160:	defff204 	addi	sp,sp,-56
 8011164:	dd000815 	stw	r20,32(sp)
 8011168:	2828d53a 	srli	r20,r5,20
 801116c:	dd800a15 	stw	r22,40(sp)
 8011170:	282cd7fa 	srli	r22,r5,31
 8011174:	dc000415 	stw	r16,16(sp)
 8011178:	04000434 	movhi	r16,16
 801117c:	df000c15 	stw	fp,48(sp)
 8011180:	dcc00715 	stw	r19,28(sp)
 8011184:	dc800615 	stw	r18,24(sp)
 8011188:	dc400515 	stw	r17,20(sp)
 801118c:	843fffc4 	addi	r16,r16,-1
 8011190:	dfc00d15 	stw	ra,52(sp)
 8011194:	ddc00b15 	stw	r23,44(sp)
 8011198:	dd400915 	stw	r21,36(sp)
 801119c:	a501ffcc 	andi	r20,r20,2047
 80111a0:	2025883a 	mov	r18,r4
 80111a4:	2027883a 	mov	r19,r4
 80111a8:	2c22703a 	and	r17,r5,r16
 80111ac:	b7003fcc 	andi	fp,r22,255
 80111b0:	a0005e26 	beq	r20,zero,801132c <__divdf3+0x1cc>
 80111b4:	0081ffc4 	movi	r2,2047
 80111b8:	a0803526 	beq	r20,r2,8011290 <__divdf3+0x130>
 80111bc:	8c000434 	orhi	r16,r17,16
 80111c0:	2004d77a 	srli	r2,r4,29
 80111c4:	802090fa 	slli	r16,r16,3
 80111c8:	202690fa 	slli	r19,r4,3
 80111cc:	a53f0044 	addi	r20,r20,-1023
 80111d0:	80a2b03a 	or	r17,r16,r2
 80111d4:	0025883a 	mov	r18,zero
 80111d8:	0011883a 	mov	r8,zero
 80111dc:	380ad53a 	srli	r5,r7,20
 80111e0:	382ed7fa 	srli	r23,r7,31
 80111e4:	04000434 	movhi	r16,16
 80111e8:	843fffc4 	addi	r16,r16,-1
 80111ec:	2941ffcc 	andi	r5,r5,2047
 80111f0:	302b883a 	mov	r21,r6
 80111f4:	3c20703a 	and	r16,r7,r16
 80111f8:	ba403fcc 	andi	r9,r23,255
 80111fc:	28006726 	beq	r5,zero,801139c <__divdf3+0x23c>
 8011200:	0081ffc4 	movi	r2,2047
 8011204:	28805f26 	beq	r5,r2,8011384 <__divdf3+0x224>
 8011208:	84000434 	orhi	r16,r16,16
 801120c:	3004d77a 	srli	r2,r6,29
 8011210:	802090fa 	slli	r16,r16,3
 8011214:	302a90fa 	slli	r21,r6,3
 8011218:	297f0044 	addi	r5,r5,-1023
 801121c:	80a0b03a 	or	r16,r16,r2
 8011220:	000f883a 	mov	r7,zero
 8011224:	3c86b03a 	or	r3,r7,r18
 8011228:	180690ba 	slli	r3,r3,2
 801122c:	00820074 	movhi	r2,2049
 8011230:	10849404 	addi	r2,r2,4688
 8011234:	1887883a 	add	r3,r3,r2
 8011238:	18c00017 	ldw	r3,0(r3)
 801123c:	b5c8f03a 	xor	r4,r22,r23
 8011240:	200d883a 	mov	r6,r4
 8011244:	24803fcc 	andi	r18,r4,255
 8011248:	a169c83a 	sub	r20,r20,r5
 801124c:	1800683a 	jmp	r3
 8011250:	08011498 	cmpnei	zero,at,1106
 8011254:	080112c8 	cmpgei	zero,at,1099
 8011258:	0801145c 	xori	zero,at,1105
 801125c:	080112ac 	andhi	zero,at,1098
 8011260:	0801145c 	xori	zero,at,1105
 8011264:	08011430 	cmpltui	zero,at,1104
 8011268:	0801145c 	xori	zero,at,1105
 801126c:	080112ac 	andhi	zero,at,1098
 8011270:	080112c8 	cmpgei	zero,at,1099
 8011274:	080112c8 	cmpgei	zero,at,1099
 8011278:	08011430 	cmpltui	zero,at,1104
 801127c:	080112ac 	andhi	zero,at,1098
 8011280:	080112bc 	xorhi	zero,at,1098
 8011284:	080112bc 	xorhi	zero,at,1098
 8011288:	080112bc 	xorhi	zero,at,1098
 801128c:	0801146c 	andhi	zero,at,1105
 8011290:	8904b03a 	or	r2,r17,r4
 8011294:	1000631e 	bne	r2,zero,8011424 <__divdf3+0x2c4>
 8011298:	04800204 	movi	r18,8
 801129c:	0023883a 	mov	r17,zero
 80112a0:	0027883a 	mov	r19,zero
 80112a4:	02000084 	movi	r8,2
 80112a8:	003fcc06 	br	80111dc <__alt_data_end+0xfc0111dc>
 80112ac:	8023883a 	mov	r17,r16
 80112b0:	a827883a 	mov	r19,r21
 80112b4:	4839883a 	mov	fp,r9
 80112b8:	3811883a 	mov	r8,r7
 80112bc:	00800084 	movi	r2,2
 80112c0:	40812a1e 	bne	r8,r2,801176c <__divdf3+0x60c>
 80112c4:	e025883a 	mov	r18,fp
 80112c8:	9180004c 	andi	r6,r18,1
 80112cc:	0101ffc4 	movi	r4,2047
 80112d0:	000b883a 	mov	r5,zero
 80112d4:	0027883a 	mov	r19,zero
 80112d8:	2008953a 	slli	r4,r4,20
 80112dc:	30c03fcc 	andi	r3,r6,255
 80112e0:	04000434 	movhi	r16,16
 80112e4:	180697fa 	slli	r3,r3,31
 80112e8:	843fffc4 	addi	r16,r16,-1
 80112ec:	2c20703a 	and	r16,r5,r16
 80112f0:	8120b03a 	or	r16,r16,r4
 80112f4:	80c6b03a 	or	r3,r16,r3
 80112f8:	9805883a 	mov	r2,r19
 80112fc:	dfc00d17 	ldw	ra,52(sp)
 8011300:	df000c17 	ldw	fp,48(sp)
 8011304:	ddc00b17 	ldw	r23,44(sp)
 8011308:	dd800a17 	ldw	r22,40(sp)
 801130c:	dd400917 	ldw	r21,36(sp)
 8011310:	dd000817 	ldw	r20,32(sp)
 8011314:	dcc00717 	ldw	r19,28(sp)
 8011318:	dc800617 	ldw	r18,24(sp)
 801131c:	dc400517 	ldw	r17,20(sp)
 8011320:	dc000417 	ldw	r16,16(sp)
 8011324:	dec00e04 	addi	sp,sp,56
 8011328:	f800283a 	ret
 801132c:	8904b03a 	or	r2,r17,r4
 8011330:	10003726 	beq	r2,zero,8011410 <__divdf3+0x2b0>
 8011334:	88011c26 	beq	r17,zero,80117a8 <__divdf3+0x648>
 8011338:	8809883a 	mov	r4,r17
 801133c:	d9800315 	stw	r6,12(sp)
 8011340:	d9c00115 	stw	r7,4(sp)
 8011344:	8003f680 	call	8003f68 <__clzsi2>
 8011348:	d9800317 	ldw	r6,12(sp)
 801134c:	d9c00117 	ldw	r7,4(sp)
 8011350:	1007883a 	mov	r3,r2
 8011354:	01000a04 	movi	r4,40
 8011358:	1cfffe04 	addi	r19,r3,-8
 801135c:	20c9c83a 	sub	r4,r4,r3
 8011360:	8cca983a 	sll	r5,r17,r19
 8011364:	9108d83a 	srl	r4,r18,r4
 8011368:	94e6983a 	sll	r19,r18,r19
 801136c:	2162b03a 	or	r17,r4,r5
 8011370:	053f0344 	movi	r20,-1011
 8011374:	a0e9c83a 	sub	r20,r20,r3
 8011378:	0025883a 	mov	r18,zero
 801137c:	0011883a 	mov	r8,zero
 8011380:	003f9606 	br	80111dc <__alt_data_end+0xfc0111dc>
 8011384:	8184b03a 	or	r2,r16,r6
 8011388:	10001f1e 	bne	r2,zero,8011408 <__divdf3+0x2a8>
 801138c:	0021883a 	mov	r16,zero
 8011390:	002b883a 	mov	r21,zero
 8011394:	01c00084 	movi	r7,2
 8011398:	003fa206 	br	8011224 <__alt_data_end+0xfc011224>
 801139c:	8184b03a 	or	r2,r16,r6
 80113a0:	10001526 	beq	r2,zero,80113f8 <__divdf3+0x298>
 80113a4:	80010c26 	beq	r16,zero,80117d8 <__divdf3+0x678>
 80113a8:	8009883a 	mov	r4,r16
 80113ac:	d9800315 	stw	r6,12(sp)
 80113b0:	da000215 	stw	r8,8(sp)
 80113b4:	da400015 	stw	r9,0(sp)
 80113b8:	8003f680 	call	8003f68 <__clzsi2>
 80113bc:	d9800317 	ldw	r6,12(sp)
 80113c0:	da000217 	ldw	r8,8(sp)
 80113c4:	da400017 	ldw	r9,0(sp)
 80113c8:	1007883a 	mov	r3,r2
 80113cc:	01000a04 	movi	r4,40
 80113d0:	1d7ffe04 	addi	r21,r3,-8
 80113d4:	20c9c83a 	sub	r4,r4,r3
 80113d8:	8560983a 	sll	r16,r16,r21
 80113dc:	3108d83a 	srl	r4,r6,r4
 80113e0:	356a983a 	sll	r21,r6,r21
 80113e4:	2420b03a 	or	r16,r4,r16
 80113e8:	017f0344 	movi	r5,-1011
 80113ec:	28cbc83a 	sub	r5,r5,r3
 80113f0:	000f883a 	mov	r7,zero
 80113f4:	003f8b06 	br	8011224 <__alt_data_end+0xfc011224>
 80113f8:	0021883a 	mov	r16,zero
 80113fc:	002b883a 	mov	r21,zero
 8011400:	01c00044 	movi	r7,1
 8011404:	003f8706 	br	8011224 <__alt_data_end+0xfc011224>
 8011408:	01c000c4 	movi	r7,3
 801140c:	003f8506 	br	8011224 <__alt_data_end+0xfc011224>
 8011410:	04800104 	movi	r18,4
 8011414:	0023883a 	mov	r17,zero
 8011418:	0027883a 	mov	r19,zero
 801141c:	02000044 	movi	r8,1
 8011420:	003f6e06 	br	80111dc <__alt_data_end+0xfc0111dc>
 8011424:	04800304 	movi	r18,12
 8011428:	020000c4 	movi	r8,3
 801142c:	003f6b06 	br	80111dc <__alt_data_end+0xfc0111dc>
 8011430:	01400434 	movhi	r5,16
 8011434:	000d883a 	mov	r6,zero
 8011438:	297fffc4 	addi	r5,r5,-1
 801143c:	04ffffc4 	movi	r19,-1
 8011440:	0101ffc4 	movi	r4,2047
 8011444:	003fa406 	br	80112d8 <__alt_data_end+0xfc0112d8>
 8011448:	043f0084 	movi	r16,-1022
 801144c:	8521c83a 	sub	r16,r16,r20
 8011450:	00800e04 	movi	r2,56
 8011454:	1401200e 	bge	r2,r16,80118d8 <__divdf3+0x778>
 8011458:	9180004c 	andi	r6,r18,1
 801145c:	0009883a 	mov	r4,zero
 8011460:	000b883a 	mov	r5,zero
 8011464:	0027883a 	mov	r19,zero
 8011468:	003f9b06 	br	80112d8 <__alt_data_end+0xfc0112d8>
 801146c:	8880022c 	andhi	r2,r17,8
 8011470:	1000c726 	beq	r2,zero,8011790 <__divdf3+0x630>
 8011474:	8080022c 	andhi	r2,r16,8
 8011478:	1000c51e 	bne	r2,zero,8011790 <__divdf3+0x630>
 801147c:	00800434 	movhi	r2,16
 8011480:	81400234 	orhi	r5,r16,8
 8011484:	10bfffc4 	addi	r2,r2,-1
 8011488:	b80d883a 	mov	r6,r23
 801148c:	288a703a 	and	r5,r5,r2
 8011490:	a827883a 	mov	r19,r21
 8011494:	003fea06 	br	8011440 <__alt_data_end+0xfc011440>
 8011498:	8440ea36 	bltu	r16,r17,8011844 <__divdf3+0x6e4>
 801149c:	8c00e826 	beq	r17,r16,8011840 <__divdf3+0x6e0>
 80114a0:	a53fffc4 	addi	r20,r20,-1
 80114a4:	882d883a 	mov	r22,r17
 80114a8:	000d883a 	mov	r6,zero
 80114ac:	a804d63a 	srli	r2,r21,24
 80114b0:	8020923a 	slli	r16,r16,8
 80114b4:	b009883a 	mov	r4,r22
 80114b8:	d9800315 	stw	r6,12(sp)
 80114bc:	1420b03a 	or	r16,r2,r16
 80114c0:	802ed43a 	srli	r23,r16,16
 80114c4:	873fffcc 	andi	fp,r16,65535
 80114c8:	a82a923a 	slli	r21,r21,8
 80114cc:	b80b883a 	mov	r5,r23
 80114d0:	80111500 	call	8011150 <__udivsi3>
 80114d4:	b009883a 	mov	r4,r22
 80114d8:	b80b883a 	mov	r5,r23
 80114dc:	1023883a 	mov	r17,r2
 80114e0:	80111580 	call	8011158 <__umodsi3>
 80114e4:	1004943a 	slli	r2,r2,16
 80114e8:	9808d43a 	srli	r4,r19,16
 80114ec:	8f2d383a 	mul	r22,r17,fp
 80114f0:	d9800317 	ldw	r6,12(sp)
 80114f4:	1106b03a 	or	r3,r2,r4
 80114f8:	1d80062e 	bgeu	r3,r22,8011514 <__divdf3+0x3b4>
 80114fc:	1c07883a 	add	r3,r3,r16
 8011500:	88bfffc4 	addi	r2,r17,-1
 8011504:	1c00dc36 	bltu	r3,r16,8011878 <__divdf3+0x718>
 8011508:	1d80db2e 	bgeu	r3,r22,8011878 <__divdf3+0x718>
 801150c:	8c7fff84 	addi	r17,r17,-2
 8011510:	1c07883a 	add	r3,r3,r16
 8011514:	1dadc83a 	sub	r22,r3,r22
 8011518:	b009883a 	mov	r4,r22
 801151c:	b80b883a 	mov	r5,r23
 8011520:	d9800315 	stw	r6,12(sp)
 8011524:	80111500 	call	8011150 <__udivsi3>
 8011528:	b009883a 	mov	r4,r22
 801152c:	b80b883a 	mov	r5,r23
 8011530:	d8800015 	stw	r2,0(sp)
 8011534:	80111580 	call	8011158 <__umodsi3>
 8011538:	da400017 	ldw	r9,0(sp)
 801153c:	1004943a 	slli	r2,r2,16
 8011540:	9cffffcc 	andi	r19,r19,65535
 8011544:	4f07383a 	mul	r3,r9,fp
 8011548:	14c8b03a 	or	r4,r2,r19
 801154c:	d9800317 	ldw	r6,12(sp)
 8011550:	20c0062e 	bgeu	r4,r3,801156c <__divdf3+0x40c>
 8011554:	2409883a 	add	r4,r4,r16
 8011558:	48bfffc4 	addi	r2,r9,-1
 801155c:	2400c436 	bltu	r4,r16,8011870 <__divdf3+0x710>
 8011560:	20c0c32e 	bgeu	r4,r3,8011870 <__divdf3+0x710>
 8011564:	4a7fff84 	addi	r9,r9,-2
 8011568:	2409883a 	add	r4,r4,r16
 801156c:	8822943a 	slli	r17,r17,16
 8011570:	a80ed43a 	srli	r7,r21,16
 8011574:	aa3fffcc 	andi	r8,r21,65535
 8011578:	4c62b03a 	or	r17,r9,r17
 801157c:	8816d43a 	srli	r11,r17,16
 8011580:	897fffcc 	andi	r5,r17,65535
 8011584:	2a15383a 	mul	r10,r5,r8
 8011588:	5a19383a 	mul	r12,r11,r8
 801158c:	29cb383a 	mul	r5,r5,r7
 8011590:	5012d43a 	srli	r9,r10,16
 8011594:	20c5c83a 	sub	r2,r4,r3
 8011598:	614b883a 	add	r5,r12,r5
 801159c:	2a4b883a 	add	r5,r5,r9
 80115a0:	59c7383a 	mul	r3,r11,r7
 80115a4:	2b00022e 	bgeu	r5,r12,80115b0 <__divdf3+0x450>
 80115a8:	01000074 	movhi	r4,1
 80115ac:	1907883a 	add	r3,r3,r4
 80115b0:	2808d43a 	srli	r4,r5,16
 80115b4:	280a943a 	slli	r5,r5,16
 80115b8:	54ffffcc 	andi	r19,r10,65535
 80115bc:	1907883a 	add	r3,r3,r4
 80115c0:	2ccb883a 	add	r5,r5,r19
 80115c4:	10c09336 	bltu	r2,r3,8011814 <__divdf3+0x6b4>
 80115c8:	10c0ad26 	beq	r2,r3,8011880 <__divdf3+0x720>
 80115cc:	10c7c83a 	sub	r3,r2,r3
 80115d0:	3167c83a 	sub	r19,r6,r5
 80115d4:	34ed803a 	cmpltu	r22,r6,r19
 80115d8:	1dadc83a 	sub	r22,r3,r22
 80115dc:	b400b226 	beq	r22,r16,80118a8 <__divdf3+0x748>
 80115e0:	b009883a 	mov	r4,r22
 80115e4:	b80b883a 	mov	r5,r23
 80115e8:	d9c00115 	stw	r7,4(sp)
 80115ec:	da000215 	stw	r8,8(sp)
 80115f0:	80111500 	call	8011150 <__udivsi3>
 80115f4:	b009883a 	mov	r4,r22
 80115f8:	b80b883a 	mov	r5,r23
 80115fc:	d8800315 	stw	r2,12(sp)
 8011600:	80111580 	call	8011158 <__umodsi3>
 8011604:	d9800317 	ldw	r6,12(sp)
 8011608:	1004943a 	slli	r2,r2,16
 801160c:	9808d43a 	srli	r4,r19,16
 8011610:	372d383a 	mul	r22,r6,fp
 8011614:	d9c00117 	ldw	r7,4(sp)
 8011618:	1106b03a 	or	r3,r2,r4
 801161c:	da000217 	ldw	r8,8(sp)
 8011620:	1d80062e 	bgeu	r3,r22,801163c <__divdf3+0x4dc>
 8011624:	1c07883a 	add	r3,r3,r16
 8011628:	30bfffc4 	addi	r2,r6,-1
 801162c:	1c00a036 	bltu	r3,r16,80118b0 <__divdf3+0x750>
 8011630:	1d809f2e 	bgeu	r3,r22,80118b0 <__divdf3+0x750>
 8011634:	31bfff84 	addi	r6,r6,-2
 8011638:	1c07883a 	add	r3,r3,r16
 801163c:	1dadc83a 	sub	r22,r3,r22
 8011640:	b009883a 	mov	r4,r22
 8011644:	b80b883a 	mov	r5,r23
 8011648:	d9800315 	stw	r6,12(sp)
 801164c:	d9c00115 	stw	r7,4(sp)
 8011650:	da000215 	stw	r8,8(sp)
 8011654:	80111500 	call	8011150 <__udivsi3>
 8011658:	b009883a 	mov	r4,r22
 801165c:	b80b883a 	mov	r5,r23
 8011660:	d8800015 	stw	r2,0(sp)
 8011664:	80111580 	call	8011158 <__umodsi3>
 8011668:	da400017 	ldw	r9,0(sp)
 801166c:	1004943a 	slli	r2,r2,16
 8011670:	993fffcc 	andi	r4,r19,65535
 8011674:	4f39383a 	mul	fp,r9,fp
 8011678:	1106b03a 	or	r3,r2,r4
 801167c:	d9800317 	ldw	r6,12(sp)
 8011680:	d9c00117 	ldw	r7,4(sp)
 8011684:	da000217 	ldw	r8,8(sp)
 8011688:	1f00062e 	bgeu	r3,fp,80116a4 <__divdf3+0x544>
 801168c:	1c07883a 	add	r3,r3,r16
 8011690:	48bfffc4 	addi	r2,r9,-1
 8011694:	1c008836 	bltu	r3,r16,80118b8 <__divdf3+0x758>
 8011698:	1f00872e 	bgeu	r3,fp,80118b8 <__divdf3+0x758>
 801169c:	4a7fff84 	addi	r9,r9,-2
 80116a0:	1c07883a 	add	r3,r3,r16
 80116a4:	3008943a 	slli	r4,r6,16
 80116a8:	1f07c83a 	sub	r3,r3,fp
 80116ac:	4926b03a 	or	r19,r9,r4
 80116b0:	993fffcc 	andi	r4,r19,65535
 80116b4:	980cd43a 	srli	r6,r19,16
 80116b8:	220b383a 	mul	r5,r4,r8
 80116bc:	21c5383a 	mul	r2,r4,r7
 80116c0:	3211383a 	mul	r8,r6,r8
 80116c4:	2808d43a 	srli	r4,r5,16
 80116c8:	31cf383a 	mul	r7,r6,r7
 80116cc:	4085883a 	add	r2,r8,r2
 80116d0:	1105883a 	add	r2,r2,r4
 80116d4:	1200022e 	bgeu	r2,r8,80116e0 <__divdf3+0x580>
 80116d8:	01000074 	movhi	r4,1
 80116dc:	390f883a 	add	r7,r7,r4
 80116e0:	1008d43a 	srli	r4,r2,16
 80116e4:	1004943a 	slli	r2,r2,16
 80116e8:	297fffcc 	andi	r5,r5,65535
 80116ec:	390f883a 	add	r7,r7,r4
 80116f0:	1145883a 	add	r2,r2,r5
 80116f4:	19c06536 	bltu	r3,r7,801188c <__divdf3+0x72c>
 80116f8:	19c09f26 	beq	r3,r7,8011978 <__divdf3+0x818>
 80116fc:	9cc00054 	ori	r19,r19,1
 8011700:	a100ffc4 	addi	r4,r20,1023
 8011704:	013f500e 	bge	zero,r4,8011448 <__alt_data_end+0xfc011448>
 8011708:	988001cc 	andi	r2,r19,7
 801170c:	10000726 	beq	r2,zero,801172c <__divdf3+0x5cc>
 8011710:	98c003cc 	andi	r3,r19,15
 8011714:	00800104 	movi	r2,4
 8011718:	18800426 	beq	r3,r2,801172c <__divdf3+0x5cc>
 801171c:	9885883a 	add	r2,r19,r2
 8011720:	14e1803a 	cmpltu	r16,r2,r19
 8011724:	8c23883a 	add	r17,r17,r16
 8011728:	1027883a 	mov	r19,r2
 801172c:	8880402c 	andhi	r2,r17,256
 8011730:	10000426 	beq	r2,zero,8011744 <__divdf3+0x5e4>
 8011734:	00bfc034 	movhi	r2,65280
 8011738:	10bfffc4 	addi	r2,r2,-1
 801173c:	a1010004 	addi	r4,r20,1024
 8011740:	88a2703a 	and	r17,r17,r2
 8011744:	0081ff84 	movi	r2,2046
 8011748:	113edf16 	blt	r2,r4,80112c8 <__alt_data_end+0xfc0112c8>
 801174c:	9826d0fa 	srli	r19,r19,3
 8011750:	8804977a 	slli	r2,r17,29
 8011754:	8820927a 	slli	r16,r17,9
 8011758:	2101ffcc 	andi	r4,r4,2047
 801175c:	14e6b03a 	or	r19,r2,r19
 8011760:	800ad33a 	srli	r5,r16,12
 8011764:	9180004c 	andi	r6,r18,1
 8011768:	003edb06 	br	80112d8 <__alt_data_end+0xfc0112d8>
 801176c:	008000c4 	movi	r2,3
 8011770:	4080a826 	beq	r8,r2,8011a14 <__divdf3+0x8b4>
 8011774:	00800044 	movi	r2,1
 8011778:	4080551e 	bne	r8,r2,80118d0 <__divdf3+0x770>
 801177c:	e00d883a 	mov	r6,fp
 8011780:	0009883a 	mov	r4,zero
 8011784:	000b883a 	mov	r5,zero
 8011788:	0027883a 	mov	r19,zero
 801178c:	003ed206 	br	80112d8 <__alt_data_end+0xfc0112d8>
 8011790:	00800434 	movhi	r2,16
 8011794:	89400234 	orhi	r5,r17,8
 8011798:	10bfffc4 	addi	r2,r2,-1
 801179c:	b00d883a 	mov	r6,r22
 80117a0:	288a703a 	and	r5,r5,r2
 80117a4:	003f2606 	br	8011440 <__alt_data_end+0xfc011440>
 80117a8:	d9800315 	stw	r6,12(sp)
 80117ac:	d9c00115 	stw	r7,4(sp)
 80117b0:	8003f680 	call	8003f68 <__clzsi2>
 80117b4:	10c00804 	addi	r3,r2,32
 80117b8:	010009c4 	movi	r4,39
 80117bc:	d9800317 	ldw	r6,12(sp)
 80117c0:	d9c00117 	ldw	r7,4(sp)
 80117c4:	20fee30e 	bge	r4,r3,8011354 <__alt_data_end+0xfc011354>
 80117c8:	117ffe04 	addi	r5,r2,-8
 80117cc:	9162983a 	sll	r17,r18,r5
 80117d0:	0027883a 	mov	r19,zero
 80117d4:	003ee606 	br	8011370 <__alt_data_end+0xfc011370>
 80117d8:	3009883a 	mov	r4,r6
 80117dc:	d9800315 	stw	r6,12(sp)
 80117e0:	da000215 	stw	r8,8(sp)
 80117e4:	da400015 	stw	r9,0(sp)
 80117e8:	8003f680 	call	8003f68 <__clzsi2>
 80117ec:	10c00804 	addi	r3,r2,32
 80117f0:	010009c4 	movi	r4,39
 80117f4:	d9800317 	ldw	r6,12(sp)
 80117f8:	da000217 	ldw	r8,8(sp)
 80117fc:	da400017 	ldw	r9,0(sp)
 8011800:	20fef20e 	bge	r4,r3,80113cc <__alt_data_end+0xfc0113cc>
 8011804:	10bffe04 	addi	r2,r2,-8
 8011808:	a8a0983a 	sll	r16,r21,r2
 801180c:	002b883a 	mov	r21,zero
 8011810:	003ef506 	br	80113e8 <__alt_data_end+0xfc0113e8>
 8011814:	354d883a 	add	r6,r6,r21
 8011818:	3549803a 	cmpltu	r4,r6,r21
 801181c:	2409883a 	add	r4,r4,r16
 8011820:	2089883a 	add	r4,r4,r2
 8011824:	88bfffc4 	addi	r2,r17,-1
 8011828:	81000c2e 	bgeu	r16,r4,801185c <__divdf3+0x6fc>
 801182c:	20c04436 	bltu	r4,r3,8011940 <__divdf3+0x7e0>
 8011830:	19006f26 	beq	r3,r4,80119f0 <__divdf3+0x890>
 8011834:	20c7c83a 	sub	r3,r4,r3
 8011838:	1023883a 	mov	r17,r2
 801183c:	003f6406 	br	80115d0 <__alt_data_end+0xfc0115d0>
 8011840:	9d7f1736 	bltu	r19,r21,80114a0 <__alt_data_end+0xfc0114a0>
 8011844:	9806d07a 	srli	r3,r19,1
 8011848:	880497fa 	slli	r2,r17,31
 801184c:	980c97fa 	slli	r6,r19,31
 8011850:	882cd07a 	srli	r22,r17,1
 8011854:	18a6b03a 	or	r19,r3,r2
 8011858:	003f1406 	br	80114ac <__alt_data_end+0xfc0114ac>
 801185c:	243ff51e 	bne	r4,r16,8011834 <__alt_data_end+0xfc011834>
 8011860:	357ff22e 	bgeu	r6,r21,801182c <__alt_data_end+0xfc01182c>
 8011864:	80c7c83a 	sub	r3,r16,r3
 8011868:	1023883a 	mov	r17,r2
 801186c:	003f5806 	br	80115d0 <__alt_data_end+0xfc0115d0>
 8011870:	1013883a 	mov	r9,r2
 8011874:	003f3d06 	br	801156c <__alt_data_end+0xfc01156c>
 8011878:	1023883a 	mov	r17,r2
 801187c:	003f2506 	br	8011514 <__alt_data_end+0xfc011514>
 8011880:	317fe436 	bltu	r6,r5,8011814 <__alt_data_end+0xfc011814>
 8011884:	0007883a 	mov	r3,zero
 8011888:	003f5106 	br	80115d0 <__alt_data_end+0xfc0115d0>
 801188c:	1c07883a 	add	r3,r3,r16
 8011890:	993fffc4 	addi	r4,r19,-1
 8011894:	1c000a2e 	bgeu	r3,r16,80118c0 <__divdf3+0x760>
 8011898:	2027883a 	mov	r19,r4
 801189c:	19ff971e 	bne	r3,r7,80116fc <__alt_data_end+0xfc0116fc>
 80118a0:	a8bf961e 	bne	r21,r2,80116fc <__alt_data_end+0xfc0116fc>
 80118a4:	003f9606 	br	8011700 <__alt_data_end+0xfc011700>
 80118a8:	04ffffc4 	movi	r19,-1
 80118ac:	003f9406 	br	8011700 <__alt_data_end+0xfc011700>
 80118b0:	100d883a 	mov	r6,r2
 80118b4:	003f6106 	br	801163c <__alt_data_end+0xfc01163c>
 80118b8:	1013883a 	mov	r9,r2
 80118bc:	003f7906 	br	80116a4 <__alt_data_end+0xfc0116a4>
 80118c0:	19c02636 	bltu	r3,r7,801195c <__divdf3+0x7fc>
 80118c4:	38c04d26 	beq	r7,r3,80119fc <__divdf3+0x89c>
 80118c8:	2027883a 	mov	r19,r4
 80118cc:	003f8b06 	br	80116fc <__alt_data_end+0xfc0116fc>
 80118d0:	e025883a 	mov	r18,fp
 80118d4:	003f8a06 	br	8011700 <__alt_data_end+0xfc011700>
 80118d8:	008007c4 	movi	r2,31
 80118dc:	14002a16 	blt	r2,r16,8011988 <__divdf3+0x828>
 80118e0:	a5010784 	addi	r20,r20,1054
 80118e4:	8d04983a 	sll	r2,r17,r20
 80118e8:	9c06d83a 	srl	r3,r19,r16
 80118ec:	9d28983a 	sll	r20,r19,r20
 80118f0:	8c20d83a 	srl	r16,r17,r16
 80118f4:	1886b03a 	or	r3,r3,r2
 80118f8:	a004c03a 	cmpne	r2,r20,zero
 80118fc:	1884b03a 	or	r2,r3,r2
 8011900:	10c001cc 	andi	r3,r2,7
 8011904:	18000726 	beq	r3,zero,8011924 <__divdf3+0x7c4>
 8011908:	110003cc 	andi	r4,r2,15
 801190c:	00c00104 	movi	r3,4
 8011910:	20c00426 	beq	r4,r3,8011924 <__divdf3+0x7c4>
 8011914:	10c00104 	addi	r3,r2,4
 8011918:	1885803a 	cmpltu	r2,r3,r2
 801191c:	80a1883a 	add	r16,r16,r2
 8011920:	1805883a 	mov	r2,r3
 8011924:	80c0202c 	andhi	r3,r16,128
 8011928:	18002d26 	beq	r3,zero,80119e0 <__divdf3+0x880>
 801192c:	9180004c 	andi	r6,r18,1
 8011930:	01000044 	movi	r4,1
 8011934:	000b883a 	mov	r5,zero
 8011938:	0027883a 	mov	r19,zero
 801193c:	003e6606 	br	80112d8 <__alt_data_end+0xfc0112d8>
 8011940:	354d883a 	add	r6,r6,r21
 8011944:	356d803a 	cmpltu	r22,r6,r21
 8011948:	b42d883a 	add	r22,r22,r16
 801194c:	b12d883a 	add	r22,r22,r4
 8011950:	8c7fff84 	addi	r17,r17,-2
 8011954:	b0c7c83a 	sub	r3,r22,r3
 8011958:	003f1d06 	br	80115d0 <__alt_data_end+0xfc0115d0>
 801195c:	ad4b883a 	add	r5,r21,r21
 8011960:	2d6b803a 	cmpltu	r21,r5,r21
 8011964:	ac2b883a 	add	r21,r21,r16
 8011968:	1d47883a 	add	r3,r3,r21
 801196c:	993fff84 	addi	r4,r19,-2
 8011970:	282b883a 	mov	r21,r5
 8011974:	003fc806 	br	8011898 <__alt_data_end+0xfc011898>
 8011978:	103fc41e 	bne	r2,zero,801188c <__alt_data_end+0xfc01188c>
 801197c:	002b883a 	mov	r21,zero
 8011980:	a8bf5e1e 	bne	r21,r2,80116fc <__alt_data_end+0xfc0116fc>
 8011984:	003f5e06 	br	8011700 <__alt_data_end+0xfc011700>
 8011988:	00bef884 	movi	r2,-1054
 801198c:	1505c83a 	sub	r2,r2,r20
 8011990:	00c00804 	movi	r3,32
 8011994:	8884d83a 	srl	r2,r17,r2
 8011998:	80c01c26 	beq	r16,r3,8011a0c <__divdf3+0x8ac>
 801199c:	a0c10f84 	addi	r3,r20,1086
 80119a0:	88c6983a 	sll	r3,r17,r3
 80119a4:	1cc6b03a 	or	r3,r3,r19
 80119a8:	1806c03a 	cmpne	r3,r3,zero
 80119ac:	1884b03a 	or	r2,r3,r2
 80119b0:	140001cc 	andi	r16,r2,7
 80119b4:	8000061e 	bne	r16,zero,80119d0 <__divdf3+0x870>
 80119b8:	000b883a 	mov	r5,zero
 80119bc:	1004d0fa 	srli	r2,r2,3
 80119c0:	9180004c 	andi	r6,r18,1
 80119c4:	0009883a 	mov	r4,zero
 80119c8:	1426b03a 	or	r19,r2,r16
 80119cc:	003e4206 	br	80112d8 <__alt_data_end+0xfc0112d8>
 80119d0:	110003cc 	andi	r4,r2,15
 80119d4:	00c00104 	movi	r3,4
 80119d8:	0021883a 	mov	r16,zero
 80119dc:	20ffcd1e 	bne	r4,r3,8011914 <__alt_data_end+0xfc011914>
 80119e0:	800a927a 	slli	r5,r16,9
 80119e4:	8020977a 	slli	r16,r16,29
 80119e8:	280ad33a 	srli	r5,r5,12
 80119ec:	003ff306 	br	80119bc <__alt_data_end+0xfc0119bc>
 80119f0:	317fd336 	bltu	r6,r5,8011940 <__alt_data_end+0xfc011940>
 80119f4:	1023883a 	mov	r17,r2
 80119f8:	003fa206 	br	8011884 <__alt_data_end+0xfc011884>
 80119fc:	a8bfd736 	bltu	r21,r2,801195c <__alt_data_end+0xfc01195c>
 8011a00:	2027883a 	mov	r19,r4
 8011a04:	a8bf3d1e 	bne	r21,r2,80116fc <__alt_data_end+0xfc0116fc>
 8011a08:	003f3d06 	br	8011700 <__alt_data_end+0xfc011700>
 8011a0c:	0007883a 	mov	r3,zero
 8011a10:	003fe406 	br	80119a4 <__alt_data_end+0xfc0119a4>
 8011a14:	00800434 	movhi	r2,16
 8011a18:	89400234 	orhi	r5,r17,8
 8011a1c:	10bfffc4 	addi	r2,r2,-1
 8011a20:	e00d883a 	mov	r6,fp
 8011a24:	288a703a 	and	r5,r5,r2
 8011a28:	003e8506 	br	8011440 <__alt_data_end+0xfc011440>

08011a2c <__eqdf2>:
 8011a2c:	2804d53a 	srli	r2,r5,20
 8011a30:	3806d53a 	srli	r3,r7,20
 8011a34:	02000434 	movhi	r8,16
 8011a38:	423fffc4 	addi	r8,r8,-1
 8011a3c:	1081ffcc 	andi	r2,r2,2047
 8011a40:	0241ffc4 	movi	r9,2047
 8011a44:	2a14703a 	and	r10,r5,r8
 8011a48:	18c1ffcc 	andi	r3,r3,2047
 8011a4c:	3a10703a 	and	r8,r7,r8
 8011a50:	280ad7fa 	srli	r5,r5,31
 8011a54:	380ed7fa 	srli	r7,r7,31
 8011a58:	12400f26 	beq	r2,r9,8011a98 <__eqdf2+0x6c>
 8011a5c:	0241ffc4 	movi	r9,2047
 8011a60:	1a400326 	beq	r3,r9,8011a70 <__eqdf2+0x44>
 8011a64:	10c00526 	beq	r2,r3,8011a7c <__eqdf2+0x50>
 8011a68:	00800044 	movi	r2,1
 8011a6c:	f800283a 	ret
 8011a70:	4192b03a 	or	r9,r8,r6
 8011a74:	483ffc1e 	bne	r9,zero,8011a68 <__alt_data_end+0xfc011a68>
 8011a78:	10fffb1e 	bne	r2,r3,8011a68 <__alt_data_end+0xfc011a68>
 8011a7c:	523ffa1e 	bne	r10,r8,8011a68 <__alt_data_end+0xfc011a68>
 8011a80:	21bff91e 	bne	r4,r6,8011a68 <__alt_data_end+0xfc011a68>
 8011a84:	29c00826 	beq	r5,r7,8011aa8 <__eqdf2+0x7c>
 8011a88:	103ff71e 	bne	r2,zero,8011a68 <__alt_data_end+0xfc011a68>
 8011a8c:	5104b03a 	or	r2,r10,r4
 8011a90:	1004c03a 	cmpne	r2,r2,zero
 8011a94:	f800283a 	ret
 8011a98:	5112b03a 	or	r9,r10,r4
 8011a9c:	483fef26 	beq	r9,zero,8011a5c <__alt_data_end+0xfc011a5c>
 8011aa0:	00800044 	movi	r2,1
 8011aa4:	f800283a 	ret
 8011aa8:	0005883a 	mov	r2,zero
 8011aac:	f800283a 	ret

08011ab0 <__muldf3>:
 8011ab0:	defff204 	addi	sp,sp,-56
 8011ab4:	2804d53a 	srli	r2,r5,20
 8011ab8:	dd800a15 	stw	r22,40(sp)
 8011abc:	282cd7fa 	srli	r22,r5,31
 8011ac0:	dc000415 	stw	r16,16(sp)
 8011ac4:	04000434 	movhi	r16,16
 8011ac8:	df000c15 	stw	fp,48(sp)
 8011acc:	dd000815 	stw	r20,32(sp)
 8011ad0:	dcc00715 	stw	r19,28(sp)
 8011ad4:	dc800615 	stw	r18,24(sp)
 8011ad8:	dc400515 	stw	r17,20(sp)
 8011adc:	843fffc4 	addi	r16,r16,-1
 8011ae0:	dfc00d15 	stw	ra,52(sp)
 8011ae4:	ddc00b15 	stw	r23,44(sp)
 8011ae8:	dd400915 	stw	r21,36(sp)
 8011aec:	1501ffcc 	andi	r20,r2,2047
 8011af0:	2023883a 	mov	r17,r4
 8011af4:	2025883a 	mov	r18,r4
 8011af8:	2c20703a 	and	r16,r5,r16
 8011afc:	b027883a 	mov	r19,r22
 8011b00:	b7003fcc 	andi	fp,r22,255
 8011b04:	a0005926 	beq	r20,zero,8011c6c <__muldf3+0x1bc>
 8011b08:	0081ffc4 	movi	r2,2047
 8011b0c:	a0803426 	beq	r20,r2,8011be0 <__muldf3+0x130>
 8011b10:	84000434 	orhi	r16,r16,16
 8011b14:	2004d77a 	srli	r2,r4,29
 8011b18:	802090fa 	slli	r16,r16,3
 8011b1c:	202490fa 	slli	r18,r4,3
 8011b20:	a53f0044 	addi	r20,r20,-1023
 8011b24:	80a0b03a 	or	r16,r16,r2
 8011b28:	002b883a 	mov	r21,zero
 8011b2c:	0015883a 	mov	r10,zero
 8011b30:	3812d53a 	srli	r9,r7,20
 8011b34:	3806d7fa 	srli	r3,r7,31
 8011b38:	02000434 	movhi	r8,16
 8011b3c:	423fffc4 	addi	r8,r8,-1
 8011b40:	4941ffcc 	andi	r5,r9,2047
 8011b44:	302f883a 	mov	r23,r6
 8011b48:	3a22703a 	and	r17,r7,r8
 8011b4c:	1ac03fcc 	andi	r11,r3,255
 8011b50:	28006226 	beq	r5,zero,8011cdc <__muldf3+0x22c>
 8011b54:	0081ffc4 	movi	r2,2047
 8011b58:	28805a26 	beq	r5,r2,8011cc4 <__muldf3+0x214>
 8011b5c:	8a000434 	orhi	r8,r17,16
 8011b60:	3004d77a 	srli	r2,r6,29
 8011b64:	401090fa 	slli	r8,r8,3
 8011b68:	302e90fa 	slli	r23,r6,3
 8011b6c:	297f0044 	addi	r5,r5,-1023
 8011b70:	40a2b03a 	or	r17,r8,r2
 8011b74:	0013883a 	mov	r9,zero
 8011b78:	4d4cb03a 	or	r6,r9,r21
 8011b7c:	300c90ba 	slli	r6,r6,2
 8011b80:	02020074 	movhi	r8,2049
 8011b84:	4206e804 	addi	r8,r8,7072
 8011b88:	320d883a 	add	r6,r6,r8
 8011b8c:	31800017 	ldw	r6,0(r6)
 8011b90:	a14b883a 	add	r5,r20,r5
 8011b94:	1dacf03a 	xor	r22,r3,r22
 8011b98:	2b000044 	addi	r12,r5,1
 8011b9c:	3000683a 	jmp	r6
 8011ba0:	08011ddc 	xori	zero,at,1143
 8011ba4:	08011dc8 	cmpgei	zero,at,1143
 8011ba8:	08011dc8 	cmpgei	zero,at,1143
 8011bac:	08011db4 	orhi	zero,at,1142
 8011bb0:	08011bfc 	xorhi	zero,at,1135
 8011bb4:	08011bfc 	xorhi	zero,at,1135
 8011bb8:	08011d9c 	xori	zero,at,1142
 8011bbc:	08011db4 	orhi	zero,at,1142
 8011bc0:	08011bfc 	xorhi	zero,at,1135
 8011bc4:	08011d9c 	xori	zero,at,1142
 8011bc8:	08011bfc 	xorhi	zero,at,1135
 8011bcc:	08011db4 	orhi	zero,at,1142
 8011bd0:	08011c00 	call	8011c0 <__alt_mem_sdram-0x77fee40>
 8011bd4:	08011c00 	call	8011c0 <__alt_mem_sdram-0x77fee40>
 8011bd8:	08011c00 	call	8011c0 <__alt_mem_sdram-0x77fee40>
 8011bdc:	08011fd8 	cmpnei	zero,at,1151
 8011be0:	8104b03a 	or	r2,r16,r4
 8011be4:	10006a1e 	bne	r2,zero,8011d90 <__muldf3+0x2e0>
 8011be8:	05400204 	movi	r21,8
 8011bec:	0021883a 	mov	r16,zero
 8011bf0:	0025883a 	mov	r18,zero
 8011bf4:	02800084 	movi	r10,2
 8011bf8:	003fcd06 	br	8011b30 <__alt_data_end+0xfc011b30>
 8011bfc:	b039883a 	mov	fp,r22
 8011c00:	00800084 	movi	r2,2
 8011c04:	50804e1e 	bne	r10,r2,8011d40 <__muldf3+0x290>
 8011c08:	e4c0004c 	andi	r19,fp,1
 8011c0c:	0101ffc4 	movi	r4,2047
 8011c10:	0021883a 	mov	r16,zero
 8011c14:	0025883a 	mov	r18,zero
 8011c18:	2008953a 	slli	r4,r4,20
 8011c1c:	98c03fcc 	andi	r3,r19,255
 8011c20:	01400434 	movhi	r5,16
 8011c24:	297fffc4 	addi	r5,r5,-1
 8011c28:	180697fa 	slli	r3,r3,31
 8011c2c:	8160703a 	and	r16,r16,r5
 8011c30:	8120b03a 	or	r16,r16,r4
 8011c34:	80c6b03a 	or	r3,r16,r3
 8011c38:	9005883a 	mov	r2,r18
 8011c3c:	dfc00d17 	ldw	ra,52(sp)
 8011c40:	df000c17 	ldw	fp,48(sp)
 8011c44:	ddc00b17 	ldw	r23,44(sp)
 8011c48:	dd800a17 	ldw	r22,40(sp)
 8011c4c:	dd400917 	ldw	r21,36(sp)
 8011c50:	dd000817 	ldw	r20,32(sp)
 8011c54:	dcc00717 	ldw	r19,28(sp)
 8011c58:	dc800617 	ldw	r18,24(sp)
 8011c5c:	dc400517 	ldw	r17,20(sp)
 8011c60:	dc000417 	ldw	r16,16(sp)
 8011c64:	dec00e04 	addi	sp,sp,56
 8011c68:	f800283a 	ret
 8011c6c:	8104b03a 	or	r2,r16,r4
 8011c70:	10004226 	beq	r2,zero,8011d7c <__muldf3+0x2cc>
 8011c74:	8000f926 	beq	r16,zero,801205c <__muldf3+0x5ac>
 8011c78:	8009883a 	mov	r4,r16
 8011c7c:	d9800315 	stw	r6,12(sp)
 8011c80:	d9c00015 	stw	r7,0(sp)
 8011c84:	8003f680 	call	8003f68 <__clzsi2>
 8011c88:	d9800317 	ldw	r6,12(sp)
 8011c8c:	d9c00017 	ldw	r7,0(sp)
 8011c90:	1007883a 	mov	r3,r2
 8011c94:	01000a04 	movi	r4,40
 8011c98:	18bffe04 	addi	r2,r3,-8
 8011c9c:	20c9c83a 	sub	r4,r4,r3
 8011ca0:	80a0983a 	sll	r16,r16,r2
 8011ca4:	8908d83a 	srl	r4,r17,r4
 8011ca8:	88a4983a 	sll	r18,r17,r2
 8011cac:	2420b03a 	or	r16,r4,r16
 8011cb0:	017f0344 	movi	r5,-1011
 8011cb4:	28e9c83a 	sub	r20,r5,r3
 8011cb8:	002b883a 	mov	r21,zero
 8011cbc:	0015883a 	mov	r10,zero
 8011cc0:	003f9b06 	br	8011b30 <__alt_data_end+0xfc011b30>
 8011cc4:	8984b03a 	or	r2,r17,r6
 8011cc8:	10002a1e 	bne	r2,zero,8011d74 <__muldf3+0x2c4>
 8011ccc:	0023883a 	mov	r17,zero
 8011cd0:	002f883a 	mov	r23,zero
 8011cd4:	02400084 	movi	r9,2
 8011cd8:	003fa706 	br	8011b78 <__alt_data_end+0xfc011b78>
 8011cdc:	8984b03a 	or	r2,r17,r6
 8011ce0:	10002026 	beq	r2,zero,8011d64 <__muldf3+0x2b4>
 8011ce4:	8800cc26 	beq	r17,zero,8012018 <__muldf3+0x568>
 8011ce8:	8809883a 	mov	r4,r17
 8011cec:	d8c00215 	stw	r3,8(sp)
 8011cf0:	d9800315 	stw	r6,12(sp)
 8011cf4:	da800015 	stw	r10,0(sp)
 8011cf8:	dac00115 	stw	r11,4(sp)
 8011cfc:	8003f680 	call	8003f68 <__clzsi2>
 8011d00:	d8c00217 	ldw	r3,8(sp)
 8011d04:	d9800317 	ldw	r6,12(sp)
 8011d08:	da800017 	ldw	r10,0(sp)
 8011d0c:	dac00117 	ldw	r11,4(sp)
 8011d10:	1009883a 	mov	r4,r2
 8011d14:	01400a04 	movi	r5,40
 8011d18:	25fffe04 	addi	r23,r4,-8
 8011d1c:	290bc83a 	sub	r5,r5,r4
 8011d20:	8dd0983a 	sll	r8,r17,r23
 8011d24:	314ad83a 	srl	r5,r6,r5
 8011d28:	35ee983a 	sll	r23,r6,r23
 8011d2c:	2a22b03a 	or	r17,r5,r8
 8011d30:	017f0344 	movi	r5,-1011
 8011d34:	290bc83a 	sub	r5,r5,r4
 8011d38:	0013883a 	mov	r9,zero
 8011d3c:	003f8e06 	br	8011b78 <__alt_data_end+0xfc011b78>
 8011d40:	008000c4 	movi	r2,3
 8011d44:	50811d26 	beq	r10,r2,80121bc <__muldf3+0x70c>
 8011d48:	00800044 	movi	r2,1
 8011d4c:	5080e01e 	bne	r10,r2,80120d0 <__muldf3+0x620>
 8011d50:	e0a6703a 	and	r19,fp,r2
 8011d54:	0009883a 	mov	r4,zero
 8011d58:	0021883a 	mov	r16,zero
 8011d5c:	0025883a 	mov	r18,zero
 8011d60:	003fad06 	br	8011c18 <__alt_data_end+0xfc011c18>
 8011d64:	0023883a 	mov	r17,zero
 8011d68:	002f883a 	mov	r23,zero
 8011d6c:	02400044 	movi	r9,1
 8011d70:	003f8106 	br	8011b78 <__alt_data_end+0xfc011b78>
 8011d74:	024000c4 	movi	r9,3
 8011d78:	003f7f06 	br	8011b78 <__alt_data_end+0xfc011b78>
 8011d7c:	05400104 	movi	r21,4
 8011d80:	0021883a 	mov	r16,zero
 8011d84:	0025883a 	mov	r18,zero
 8011d88:	02800044 	movi	r10,1
 8011d8c:	003f6806 	br	8011b30 <__alt_data_end+0xfc011b30>
 8011d90:	05400304 	movi	r21,12
 8011d94:	028000c4 	movi	r10,3
 8011d98:	003f6506 	br	8011b30 <__alt_data_end+0xfc011b30>
 8011d9c:	04000434 	movhi	r16,16
 8011da0:	0027883a 	mov	r19,zero
 8011da4:	843fffc4 	addi	r16,r16,-1
 8011da8:	04bfffc4 	movi	r18,-1
 8011dac:	0101ffc4 	movi	r4,2047
 8011db0:	003f9906 	br	8011c18 <__alt_data_end+0xfc011c18>
 8011db4:	8821883a 	mov	r16,r17
 8011db8:	b825883a 	mov	r18,r23
 8011dbc:	5839883a 	mov	fp,r11
 8011dc0:	4815883a 	mov	r10,r9
 8011dc4:	003f8e06 	br	8011c00 <__alt_data_end+0xfc011c00>
 8011dc8:	8821883a 	mov	r16,r17
 8011dcc:	b825883a 	mov	r18,r23
 8011dd0:	b039883a 	mov	fp,r22
 8011dd4:	4815883a 	mov	r10,r9
 8011dd8:	003f8906 	br	8011c00 <__alt_data_end+0xfc011c00>
 8011ddc:	b80cd43a 	srli	r6,r23,16
 8011de0:	9006d43a 	srli	r3,r18,16
 8011de4:	90bfffcc 	andi	r2,r18,65535
 8011de8:	bdffffcc 	andi	r23,r23,65535
 8011dec:	b891383a 	mul	r8,r23,r2
 8011df0:	b8c9383a 	mul	r4,r23,r3
 8011df4:	309b383a 	mul	r13,r6,r2
 8011df8:	400ed43a 	srli	r7,r8,16
 8011dfc:	30df383a 	mul	r15,r6,r3
 8011e00:	235b883a 	add	r13,r4,r13
 8011e04:	69db883a 	add	r13,r13,r7
 8011e08:	6900022e 	bgeu	r13,r4,8011e14 <__muldf3+0x364>
 8011e0c:	01000074 	movhi	r4,1
 8011e10:	791f883a 	add	r15,r15,r4
 8011e14:	8828d43a 	srli	r20,r17,16
 8011e18:	8c7fffcc 	andi	r17,r17,65535
 8011e1c:	888f383a 	mul	r7,r17,r2
 8011e20:	88d3383a 	mul	r9,r17,r3
 8011e24:	a0a5383a 	mul	r18,r20,r2
 8011e28:	3816d43a 	srli	r11,r7,16
 8011e2c:	6814943a 	slli	r10,r13,16
 8011e30:	4ca5883a 	add	r18,r9,r18
 8011e34:	423fffcc 	andi	r8,r8,65535
 8011e38:	92e5883a 	add	r18,r18,r11
 8011e3c:	6808d43a 	srli	r4,r13,16
 8011e40:	5215883a 	add	r10,r10,r8
 8011e44:	a0c7383a 	mul	r3,r20,r3
 8011e48:	9240022e 	bgeu	r18,r9,8011e54 <__muldf3+0x3a4>
 8011e4c:	00800074 	movhi	r2,1
 8011e50:	1887883a 	add	r3,r3,r2
 8011e54:	802ad43a 	srli	r21,r16,16
 8011e58:	80bfffcc 	andi	r2,r16,65535
 8011e5c:	b893383a 	mul	r9,r23,r2
 8011e60:	3091383a 	mul	r8,r6,r2
 8011e64:	bd6f383a 	mul	r23,r23,r21
 8011e68:	9026943a 	slli	r19,r18,16
 8011e6c:	481ad43a 	srli	r13,r9,16
 8011e70:	9024d43a 	srli	r18,r18,16
 8011e74:	39ffffcc 	andi	r7,r7,65535
 8011e78:	ba11883a 	add	r8,r23,r8
 8011e7c:	99e7883a 	add	r19,r19,r7
 8011e80:	4351883a 	add	r8,r8,r13
 8011e84:	1c97883a 	add	r11,r3,r18
 8011e88:	354d383a 	mul	r6,r6,r21
 8011e8c:	9925883a 	add	r18,r19,r4
 8011e90:	45c0022e 	bgeu	r8,r23,8011e9c <__muldf3+0x3ec>
 8011e94:	00c00074 	movhi	r3,1
 8011e98:	30cd883a 	add	r6,r6,r3
 8011e9c:	8889383a 	mul	r4,r17,r2
 8011ea0:	8d63383a 	mul	r17,r17,r21
 8011ea4:	a085383a 	mul	r2,r20,r2
 8011ea8:	200ed43a 	srli	r7,r4,16
 8011eac:	401cd43a 	srli	r14,r8,16
 8011eb0:	401a943a 	slli	r13,r8,16
 8011eb4:	8885883a 	add	r2,r17,r2
 8011eb8:	4a3fffcc 	andi	r8,r9,65535
 8011ebc:	11c5883a 	add	r2,r2,r7
 8011ec0:	339d883a 	add	r14,r6,r14
 8011ec4:	6a11883a 	add	r8,r13,r8
 8011ec8:	a561383a 	mul	r16,r20,r21
 8011ecc:	1440022e 	bgeu	r2,r17,8011ed8 <__muldf3+0x428>
 8011ed0:	00c00074 	movhi	r3,1
 8011ed4:	80e1883a 	add	r16,r16,r3
 8011ed8:	1006943a 	slli	r3,r2,16
 8011edc:	213fffcc 	andi	r4,r4,65535
 8011ee0:	93db883a 	add	r13,r18,r15
 8011ee4:	1909883a 	add	r4,r3,r4
 8011ee8:	22c7883a 	add	r3,r4,r11
 8011eec:	6cd3803a 	cmpltu	r9,r13,r19
 8011ef0:	6a09883a 	add	r4,r13,r8
 8011ef4:	1a5b883a 	add	r13,r3,r9
 8011ef8:	2211803a 	cmpltu	r8,r4,r8
 8011efc:	734d883a 	add	r6,r14,r13
 8011f00:	100ed43a 	srli	r7,r2,16
 8011f04:	6a53803a 	cmpltu	r9,r13,r9
 8011f08:	3205883a 	add	r2,r6,r8
 8011f0c:	1ac7803a 	cmpltu	r3,r3,r11
 8011f10:	1211803a 	cmpltu	r8,r2,r8
 8011f14:	48c6b03a 	or	r3,r9,r3
 8011f18:	338d803a 	cmpltu	r6,r6,r14
 8011f1c:	19c7883a 	add	r3,r3,r7
 8011f20:	418cb03a 	or	r6,r8,r6
 8011f24:	1987883a 	add	r3,r3,r6
 8011f28:	2024927a 	slli	r18,r4,9
 8011f2c:	1c07883a 	add	r3,r3,r16
 8011f30:	1806927a 	slli	r3,r3,9
 8011f34:	1020d5fa 	srli	r16,r2,23
 8011f38:	2008d5fa 	srli	r4,r4,23
 8011f3c:	9294b03a 	or	r10,r18,r10
 8011f40:	1004927a 	slli	r2,r2,9
 8011f44:	5024c03a 	cmpne	r18,r10,zero
 8011f48:	1c20b03a 	or	r16,r3,r16
 8011f4c:	9108b03a 	or	r4,r18,r4
 8011f50:	80c0402c 	andhi	r3,r16,256
 8011f54:	20a4b03a 	or	r18,r4,r2
 8011f58:	18000726 	beq	r3,zero,8011f78 <__muldf3+0x4c8>
 8011f5c:	9006d07a 	srli	r3,r18,1
 8011f60:	800897fa 	slli	r4,r16,31
 8011f64:	9080004c 	andi	r2,r18,1
 8011f68:	8020d07a 	srli	r16,r16,1
 8011f6c:	10c4b03a 	or	r2,r2,r3
 8011f70:	1124b03a 	or	r18,r2,r4
 8011f74:	600b883a 	mov	r5,r12
 8011f78:	2900ffc4 	addi	r4,r5,1023
 8011f7c:	01004b0e 	bge	zero,r4,80120ac <__muldf3+0x5fc>
 8011f80:	908001cc 	andi	r2,r18,7
 8011f84:	10000726 	beq	r2,zero,8011fa4 <__muldf3+0x4f4>
 8011f88:	90c003cc 	andi	r3,r18,15
 8011f8c:	00800104 	movi	r2,4
 8011f90:	18800426 	beq	r3,r2,8011fa4 <__muldf3+0x4f4>
 8011f94:	9087883a 	add	r3,r18,r2
 8011f98:	1c85803a 	cmpltu	r2,r3,r18
 8011f9c:	80a1883a 	add	r16,r16,r2
 8011fa0:	1825883a 	mov	r18,r3
 8011fa4:	8080402c 	andhi	r2,r16,256
 8011fa8:	10000426 	beq	r2,zero,8011fbc <__muldf3+0x50c>
 8011fac:	00bfc034 	movhi	r2,65280
 8011fb0:	10bfffc4 	addi	r2,r2,-1
 8011fb4:	29010004 	addi	r4,r5,1024
 8011fb8:	80a0703a 	and	r16,r16,r2
 8011fbc:	0081ff84 	movi	r2,2046
 8011fc0:	1100320e 	bge	r2,r4,801208c <__muldf3+0x5dc>
 8011fc4:	b4c0004c 	andi	r19,r22,1
 8011fc8:	0101ffc4 	movi	r4,2047
 8011fcc:	0021883a 	mov	r16,zero
 8011fd0:	0025883a 	mov	r18,zero
 8011fd4:	003f1006 	br	8011c18 <__alt_data_end+0xfc011c18>
 8011fd8:	8080022c 	andhi	r2,r16,8
 8011fdc:	10000926 	beq	r2,zero,8012004 <__muldf3+0x554>
 8011fe0:	8880022c 	andhi	r2,r17,8
 8011fe4:	1000071e 	bne	r2,zero,8012004 <__muldf3+0x554>
 8011fe8:	00800434 	movhi	r2,16
 8011fec:	8c000234 	orhi	r16,r17,8
 8011ff0:	10bfffc4 	addi	r2,r2,-1
 8011ff4:	1827883a 	mov	r19,r3
 8011ff8:	80a0703a 	and	r16,r16,r2
 8011ffc:	b825883a 	mov	r18,r23
 8012000:	003f6a06 	br	8011dac <__alt_data_end+0xfc011dac>
 8012004:	00800434 	movhi	r2,16
 8012008:	84000234 	orhi	r16,r16,8
 801200c:	10bfffc4 	addi	r2,r2,-1
 8012010:	80a0703a 	and	r16,r16,r2
 8012014:	003f6506 	br	8011dac <__alt_data_end+0xfc011dac>
 8012018:	3009883a 	mov	r4,r6
 801201c:	d8c00215 	stw	r3,8(sp)
 8012020:	d9800315 	stw	r6,12(sp)
 8012024:	da800015 	stw	r10,0(sp)
 8012028:	dac00115 	stw	r11,4(sp)
 801202c:	8003f680 	call	8003f68 <__clzsi2>
 8012030:	11000804 	addi	r4,r2,32
 8012034:	014009c4 	movi	r5,39
 8012038:	d8c00217 	ldw	r3,8(sp)
 801203c:	d9800317 	ldw	r6,12(sp)
 8012040:	da800017 	ldw	r10,0(sp)
 8012044:	dac00117 	ldw	r11,4(sp)
 8012048:	293f320e 	bge	r5,r4,8011d14 <__alt_data_end+0xfc011d14>
 801204c:	10bffe04 	addi	r2,r2,-8
 8012050:	b8a2983a 	sll	r17,r23,r2
 8012054:	002f883a 	mov	r23,zero
 8012058:	003f3506 	br	8011d30 <__alt_data_end+0xfc011d30>
 801205c:	d9800315 	stw	r6,12(sp)
 8012060:	d9c00015 	stw	r7,0(sp)
 8012064:	8003f680 	call	8003f68 <__clzsi2>
 8012068:	10c00804 	addi	r3,r2,32
 801206c:	010009c4 	movi	r4,39
 8012070:	d9800317 	ldw	r6,12(sp)
 8012074:	d9c00017 	ldw	r7,0(sp)
 8012078:	20ff060e 	bge	r4,r3,8011c94 <__alt_data_end+0xfc011c94>
 801207c:	10bffe04 	addi	r2,r2,-8
 8012080:	88a0983a 	sll	r16,r17,r2
 8012084:	0025883a 	mov	r18,zero
 8012088:	003f0906 	br	8011cb0 <__alt_data_end+0xfc011cb0>
 801208c:	9004d0fa 	srli	r2,r18,3
 8012090:	8024977a 	slli	r18,r16,29
 8012094:	8020927a 	slli	r16,r16,9
 8012098:	2101ffcc 	andi	r4,r4,2047
 801209c:	90a4b03a 	or	r18,r18,r2
 80120a0:	8020d33a 	srli	r16,r16,12
 80120a4:	b4c0004c 	andi	r19,r22,1
 80120a8:	003edb06 	br	8011c18 <__alt_data_end+0xfc011c18>
 80120ac:	00ff0084 	movi	r3,-1022
 80120b0:	1947c83a 	sub	r3,r3,r5
 80120b4:	00800e04 	movi	r2,56
 80120b8:	10c0080e 	bge	r2,r3,80120dc <__muldf3+0x62c>
 80120bc:	b4c0004c 	andi	r19,r22,1
 80120c0:	0009883a 	mov	r4,zero
 80120c4:	0021883a 	mov	r16,zero
 80120c8:	0025883a 	mov	r18,zero
 80120cc:	003ed206 	br	8011c18 <__alt_data_end+0xfc011c18>
 80120d0:	600b883a 	mov	r5,r12
 80120d4:	e02d883a 	mov	r22,fp
 80120d8:	003fa706 	br	8011f78 <__alt_data_end+0xfc011f78>
 80120dc:	008007c4 	movi	r2,31
 80120e0:	10c01816 	blt	r2,r3,8012144 <__muldf3+0x694>
 80120e4:	29410784 	addi	r5,r5,1054
 80120e8:	8144983a 	sll	r2,r16,r5
 80120ec:	90c8d83a 	srl	r4,r18,r3
 80120f0:	914a983a 	sll	r5,r18,r5
 80120f4:	80c6d83a 	srl	r3,r16,r3
 80120f8:	2088b03a 	or	r4,r4,r2
 80120fc:	2804c03a 	cmpne	r2,r5,zero
 8012100:	2084b03a 	or	r2,r4,r2
 8012104:	110001cc 	andi	r4,r2,7
 8012108:	20000726 	beq	r4,zero,8012128 <__muldf3+0x678>
 801210c:	114003cc 	andi	r5,r2,15
 8012110:	01000104 	movi	r4,4
 8012114:	29000426 	beq	r5,r4,8012128 <__muldf3+0x678>
 8012118:	11000104 	addi	r4,r2,4
 801211c:	2085803a 	cmpltu	r2,r4,r2
 8012120:	1887883a 	add	r3,r3,r2
 8012124:	2005883a 	mov	r2,r4
 8012128:	1900202c 	andhi	r4,r3,128
 801212c:	20001826 	beq	r4,zero,8012190 <__muldf3+0x6e0>
 8012130:	b4c0004c 	andi	r19,r22,1
 8012134:	01000044 	movi	r4,1
 8012138:	0021883a 	mov	r16,zero
 801213c:	0025883a 	mov	r18,zero
 8012140:	003eb506 	br	8011c18 <__alt_data_end+0xfc011c18>
 8012144:	00bef884 	movi	r2,-1054
 8012148:	1145c83a 	sub	r2,r2,r5
 801214c:	8088d83a 	srl	r4,r16,r2
 8012150:	00800804 	movi	r2,32
 8012154:	18801726 	beq	r3,r2,80121b4 <__muldf3+0x704>
 8012158:	28810f84 	addi	r2,r5,1086
 801215c:	8084983a 	sll	r2,r16,r2
 8012160:	1484b03a 	or	r2,r2,r18
 8012164:	1004c03a 	cmpne	r2,r2,zero
 8012168:	1104b03a 	or	r2,r2,r4
 801216c:	10c001cc 	andi	r3,r2,7
 8012170:	18000b1e 	bne	r3,zero,80121a0 <__muldf3+0x6f0>
 8012174:	0021883a 	mov	r16,zero
 8012178:	1004d0fa 	srli	r2,r2,3
 801217c:	b4c0004c 	andi	r19,r22,1
 8012180:	0009883a 	mov	r4,zero
 8012184:	10e4b03a 	or	r18,r2,r3
 8012188:	003ea306 	br	8011c18 <__alt_data_end+0xfc011c18>
 801218c:	0007883a 	mov	r3,zero
 8012190:	1820927a 	slli	r16,r3,9
 8012194:	1806977a 	slli	r3,r3,29
 8012198:	8020d33a 	srli	r16,r16,12
 801219c:	003ff606 	br	8012178 <__alt_data_end+0xfc012178>
 80121a0:	110003cc 	andi	r4,r2,15
 80121a4:	00c00104 	movi	r3,4
 80121a8:	20fff826 	beq	r4,r3,801218c <__alt_data_end+0xfc01218c>
 80121ac:	0007883a 	mov	r3,zero
 80121b0:	003fd906 	br	8012118 <__alt_data_end+0xfc012118>
 80121b4:	0005883a 	mov	r2,zero
 80121b8:	003fe906 	br	8012160 <__alt_data_end+0xfc012160>
 80121bc:	00800434 	movhi	r2,16
 80121c0:	84000234 	orhi	r16,r16,8
 80121c4:	10bfffc4 	addi	r2,r2,-1
 80121c8:	e4c0004c 	andi	r19,fp,1
 80121cc:	80a0703a 	and	r16,r16,r2
 80121d0:	003ef606 	br	8011dac <__alt_data_end+0xfc011dac>

080121d4 <__subdf3>:
 80121d4:	00c00434 	movhi	r3,16
 80121d8:	18ffffc4 	addi	r3,r3,-1
 80121dc:	defffb04 	addi	sp,sp,-20
 80121e0:	28d2703a 	and	r9,r5,r3
 80121e4:	3814d53a 	srli	r10,r7,20
 80121e8:	38c6703a 	and	r3,r7,r3
 80121ec:	3004d77a 	srli	r2,r6,29
 80121f0:	dc800215 	stw	r18,8(sp)
 80121f4:	dc000015 	stw	r16,0(sp)
 80121f8:	2824d7fa 	srli	r18,r5,31
 80121fc:	2820d53a 	srli	r16,r5,20
 8012200:	481290fa 	slli	r9,r9,3
 8012204:	200ad77a 	srli	r5,r4,29
 8012208:	180690fa 	slli	r3,r3,3
 801220c:	dc400115 	stw	r17,4(sp)
 8012210:	dfc00415 	stw	ra,16(sp)
 8012214:	202290fa 	slli	r17,r4,3
 8012218:	dcc00315 	stw	r19,12(sp)
 801221c:	5281ffcc 	andi	r10,r10,2047
 8012220:	0101ffc4 	movi	r4,2047
 8012224:	9011883a 	mov	r8,r18
 8012228:	8401ffcc 	andi	r16,r16,2047
 801222c:	94803fcc 	andi	r18,r18,255
 8012230:	494ab03a 	or	r5,r9,r5
 8012234:	380ed7fa 	srli	r7,r7,31
 8012238:	1886b03a 	or	r3,r3,r2
 801223c:	300c90fa 	slli	r6,r6,3
 8012240:	51009026 	beq	r10,r4,8012484 <__subdf3+0x2b0>
 8012244:	39c0005c 	xori	r7,r7,1
 8012248:	8285c83a 	sub	r2,r16,r10
 801224c:	91c06f26 	beq	r18,r7,801240c <__subdf3+0x238>
 8012250:	0080b10e 	bge	zero,r2,8012518 <__subdf3+0x344>
 8012254:	50002a1e 	bne	r10,zero,8012300 <__subdf3+0x12c>
 8012258:	1988b03a 	or	r4,r3,r6
 801225c:	2000941e 	bne	r4,zero,80124b0 <__subdf3+0x2dc>
 8012260:	888001cc 	andi	r2,r17,7
 8012264:	10005b26 	beq	r2,zero,80123d4 <__subdf3+0x200>
 8012268:	88c003cc 	andi	r3,r17,15
 801226c:	00800104 	movi	r2,4
 8012270:	18805826 	beq	r3,r2,80123d4 <__subdf3+0x200>
 8012274:	88c00104 	addi	r3,r17,4
 8012278:	1c63803a 	cmpltu	r17,r3,r17
 801227c:	2c4b883a 	add	r5,r5,r17
 8012280:	2880202c 	andhi	r2,r5,128
 8012284:	9200004c 	andi	r8,r18,1
 8012288:	1823883a 	mov	r17,r3
 801228c:	10005426 	beq	r2,zero,80123e0 <__subdf3+0x20c>
 8012290:	84000044 	addi	r16,r16,1
 8012294:	0081ffc4 	movi	r2,2047
 8012298:	8080bf26 	beq	r16,r2,8012598 <__subdf3+0x3c4>
 801229c:	013fe034 	movhi	r4,65408
 80122a0:	213fffc4 	addi	r4,r4,-1
 80122a4:	290a703a 	and	r5,r5,r4
 80122a8:	2804977a 	slli	r2,r5,29
 80122ac:	280a927a 	slli	r5,r5,9
 80122b0:	8822d0fa 	srli	r17,r17,3
 80122b4:	8401ffcc 	andi	r16,r16,2047
 80122b8:	2808d33a 	srli	r4,r5,12
 80122bc:	1444b03a 	or	r2,r2,r17
 80122c0:	8401ffcc 	andi	r16,r16,2047
 80122c4:	800a953a 	slli	r5,r16,20
 80122c8:	40c03fcc 	andi	r3,r8,255
 80122cc:	04000434 	movhi	r16,16
 80122d0:	180697fa 	slli	r3,r3,31
 80122d4:	843fffc4 	addi	r16,r16,-1
 80122d8:	2420703a 	and	r16,r4,r16
 80122dc:	8160b03a 	or	r16,r16,r5
 80122e0:	80c6b03a 	or	r3,r16,r3
 80122e4:	dfc00417 	ldw	ra,16(sp)
 80122e8:	dcc00317 	ldw	r19,12(sp)
 80122ec:	dc800217 	ldw	r18,8(sp)
 80122f0:	dc400117 	ldw	r17,4(sp)
 80122f4:	dc000017 	ldw	r16,0(sp)
 80122f8:	dec00504 	addi	sp,sp,20
 80122fc:	f800283a 	ret
 8012300:	0101ffc4 	movi	r4,2047
 8012304:	813fd626 	beq	r16,r4,8012260 <__alt_data_end+0xfc012260>
 8012308:	18c02034 	orhi	r3,r3,128
 801230c:	01000e04 	movi	r4,56
 8012310:	2080a416 	blt	r4,r2,80125a4 <__subdf3+0x3d0>
 8012314:	010007c4 	movi	r4,31
 8012318:	2080c716 	blt	r4,r2,8012638 <__subdf3+0x464>
 801231c:	01000804 	movi	r4,32
 8012320:	2089c83a 	sub	r4,r4,r2
 8012324:	1910983a 	sll	r8,r3,r4
 8012328:	308ed83a 	srl	r7,r6,r2
 801232c:	3108983a 	sll	r4,r6,r4
 8012330:	1884d83a 	srl	r2,r3,r2
 8012334:	41ccb03a 	or	r6,r8,r7
 8012338:	2008c03a 	cmpne	r4,r4,zero
 801233c:	310cb03a 	or	r6,r6,r4
 8012340:	898dc83a 	sub	r6,r17,r6
 8012344:	89a3803a 	cmpltu	r17,r17,r6
 8012348:	288bc83a 	sub	r5,r5,r2
 801234c:	2c4bc83a 	sub	r5,r5,r17
 8012350:	3023883a 	mov	r17,r6
 8012354:	2880202c 	andhi	r2,r5,128
 8012358:	10006b26 	beq	r2,zero,8012508 <__subdf3+0x334>
 801235c:	04c02034 	movhi	r19,128
 8012360:	9cffffc4 	addi	r19,r19,-1
 8012364:	2ce6703a 	and	r19,r5,r19
 8012368:	98007c26 	beq	r19,zero,801255c <__subdf3+0x388>
 801236c:	9809883a 	mov	r4,r19
 8012370:	8003f680 	call	8003f68 <__clzsi2>
 8012374:	10fffe04 	addi	r3,r2,-8
 8012378:	010007c4 	movi	r4,31
 801237c:	20c07d16 	blt	r4,r3,8012574 <__subdf3+0x3a0>
 8012380:	01400a04 	movi	r5,40
 8012384:	2885c83a 	sub	r2,r5,r2
 8012388:	888ad83a 	srl	r5,r17,r2
 801238c:	98e6983a 	sll	r19,r19,r3
 8012390:	88e2983a 	sll	r17,r17,r3
 8012394:	2ce6b03a 	or	r19,r5,r19
 8012398:	1c007a16 	blt	r3,r16,8012584 <__subdf3+0x3b0>
 801239c:	1c21c83a 	sub	r16,r3,r16
 80123a0:	81400044 	addi	r5,r16,1
 80123a4:	00c007c4 	movi	r3,31
 80123a8:	19409616 	blt	r3,r5,8012604 <__subdf3+0x430>
 80123ac:	1c21c83a 	sub	r16,r3,r16
 80123b0:	8c08983a 	sll	r4,r17,r16
 80123b4:	8946d83a 	srl	r3,r17,r5
 80123b8:	9c20983a 	sll	r16,r19,r16
 80123bc:	2008c03a 	cmpne	r4,r4,zero
 80123c0:	994ad83a 	srl	r5,r19,r5
 80123c4:	1c06b03a 	or	r3,r3,r16
 80123c8:	1922b03a 	or	r17,r3,r4
 80123cc:	0021883a 	mov	r16,zero
 80123d0:	003fa306 	br	8012260 <__alt_data_end+0xfc012260>
 80123d4:	2880202c 	andhi	r2,r5,128
 80123d8:	9200004c 	andi	r8,r18,1
 80123dc:	103fac1e 	bne	r2,zero,8012290 <__alt_data_end+0xfc012290>
 80123e0:	2804977a 	slli	r2,r5,29
 80123e4:	8822d0fa 	srli	r17,r17,3
 80123e8:	00c1ffc4 	movi	r3,2047
 80123ec:	280ad0fa 	srli	r5,r5,3
 80123f0:	1444b03a 	or	r2,r2,r17
 80123f4:	80c02726 	beq	r16,r3,8012494 <__subdf3+0x2c0>
 80123f8:	01000434 	movhi	r4,16
 80123fc:	213fffc4 	addi	r4,r4,-1
 8012400:	80e0703a 	and	r16,r16,r3
 8012404:	2908703a 	and	r4,r5,r4
 8012408:	003fad06 	br	80122c0 <__alt_data_end+0xfc0122c0>
 801240c:	0080690e 	bge	zero,r2,80125b4 <__subdf3+0x3e0>
 8012410:	50002f26 	beq	r10,zero,80124d0 <__subdf3+0x2fc>
 8012414:	0101ffc4 	movi	r4,2047
 8012418:	813f9126 	beq	r16,r4,8012260 <__alt_data_end+0xfc012260>
 801241c:	18c02034 	orhi	r3,r3,128
 8012420:	01000e04 	movi	r4,56
 8012424:	2080b00e 	bge	r4,r2,80126e8 <__subdf3+0x514>
 8012428:	198cb03a 	or	r6,r3,r6
 801242c:	300ec03a 	cmpne	r7,r6,zero
 8012430:	0005883a 	mov	r2,zero
 8012434:	3c4f883a 	add	r7,r7,r17
 8012438:	3c63803a 	cmpltu	r17,r7,r17
 801243c:	114b883a 	add	r5,r2,r5
 8012440:	2c4b883a 	add	r5,r5,r17
 8012444:	3823883a 	mov	r17,r7
 8012448:	2880202c 	andhi	r2,r5,128
 801244c:	10002e26 	beq	r2,zero,8012508 <__subdf3+0x334>
 8012450:	84000044 	addi	r16,r16,1
 8012454:	0081ffc4 	movi	r2,2047
 8012458:	8080de26 	beq	r16,r2,80127d4 <__subdf3+0x600>
 801245c:	00bfe034 	movhi	r2,65408
 8012460:	10bfffc4 	addi	r2,r2,-1
 8012464:	288a703a 	and	r5,r5,r2
 8012468:	880cd07a 	srli	r6,r17,1
 801246c:	280897fa 	slli	r4,r5,31
 8012470:	88c0004c 	andi	r3,r17,1
 8012474:	30e2b03a 	or	r17,r6,r3
 8012478:	280ad07a 	srli	r5,r5,1
 801247c:	8922b03a 	or	r17,r17,r4
 8012480:	003f7706 	br	8012260 <__alt_data_end+0xfc012260>
 8012484:	1984b03a 	or	r2,r3,r6
 8012488:	103f6e26 	beq	r2,zero,8012244 <__alt_data_end+0xfc012244>
 801248c:	39c03fcc 	andi	r7,r7,255
 8012490:	003f6d06 	br	8012248 <__alt_data_end+0xfc012248>
 8012494:	1146b03a 	or	r3,r2,r5
 8012498:	18003f26 	beq	r3,zero,8012598 <__subdf3+0x3c4>
 801249c:	00c00434 	movhi	r3,16
 80124a0:	29000234 	orhi	r4,r5,8
 80124a4:	18ffffc4 	addi	r3,r3,-1
 80124a8:	20c8703a 	and	r4,r4,r3
 80124ac:	003f8406 	br	80122c0 <__alt_data_end+0xfc0122c0>
 80124b0:	10bfffc4 	addi	r2,r2,-1
 80124b4:	1000501e 	bne	r2,zero,80125f8 <__subdf3+0x424>
 80124b8:	898fc83a 	sub	r7,r17,r6
 80124bc:	89e3803a 	cmpltu	r17,r17,r7
 80124c0:	28cbc83a 	sub	r5,r5,r3
 80124c4:	2c4bc83a 	sub	r5,r5,r17
 80124c8:	3823883a 	mov	r17,r7
 80124cc:	003fa106 	br	8012354 <__alt_data_end+0xfc012354>
 80124d0:	1988b03a 	or	r4,r3,r6
 80124d4:	203f6226 	beq	r4,zero,8012260 <__alt_data_end+0xfc012260>
 80124d8:	10bfffc4 	addi	r2,r2,-1
 80124dc:	10009b1e 	bne	r2,zero,801274c <__subdf3+0x578>
 80124e0:	344d883a 	add	r6,r6,r17
 80124e4:	3463803a 	cmpltu	r17,r6,r17
 80124e8:	194b883a 	add	r5,r3,r5
 80124ec:	2c4b883a 	add	r5,r5,r17
 80124f0:	3023883a 	mov	r17,r6
 80124f4:	003fd406 	br	8012448 <__alt_data_end+0xfc012448>
 80124f8:	1106b03a 	or	r3,r2,r4
 80124fc:	1800b426 	beq	r3,zero,80127d0 <__subdf3+0x5fc>
 8012500:	100b883a 	mov	r5,r2
 8012504:	2023883a 	mov	r17,r4
 8012508:	888001cc 	andi	r2,r17,7
 801250c:	103f561e 	bne	r2,zero,8012268 <__alt_data_end+0xfc012268>
 8012510:	9200004c 	andi	r8,r18,1
 8012514:	003fb206 	br	80123e0 <__alt_data_end+0xfc0123e0>
 8012518:	1000531e 	bne	r2,zero,8012668 <__subdf3+0x494>
 801251c:	80800044 	addi	r2,r16,1
 8012520:	1081ffcc 	andi	r2,r2,2047
 8012524:	01000044 	movi	r4,1
 8012528:	2080a00e 	bge	r4,r2,80127ac <__subdf3+0x5d8>
 801252c:	8985c83a 	sub	r2,r17,r6
 8012530:	8889803a 	cmpltu	r4,r17,r2
 8012534:	28e7c83a 	sub	r19,r5,r3
 8012538:	9927c83a 	sub	r19,r19,r4
 801253c:	9900202c 	andhi	r4,r19,128
 8012540:	20006226 	beq	r4,zero,80126cc <__subdf3+0x4f8>
 8012544:	3463c83a 	sub	r17,r6,r17
 8012548:	194bc83a 	sub	r5,r3,r5
 801254c:	344d803a 	cmpltu	r6,r6,r17
 8012550:	29a7c83a 	sub	r19,r5,r6
 8012554:	3825883a 	mov	r18,r7
 8012558:	983f841e 	bne	r19,zero,801236c <__alt_data_end+0xfc01236c>
 801255c:	8809883a 	mov	r4,r17
 8012560:	8003f680 	call	8003f68 <__clzsi2>
 8012564:	10800804 	addi	r2,r2,32
 8012568:	10fffe04 	addi	r3,r2,-8
 801256c:	010007c4 	movi	r4,31
 8012570:	20ff830e 	bge	r4,r3,8012380 <__alt_data_end+0xfc012380>
 8012574:	14fff604 	addi	r19,r2,-40
 8012578:	8ce6983a 	sll	r19,r17,r19
 801257c:	0023883a 	mov	r17,zero
 8012580:	1c3f860e 	bge	r3,r16,801239c <__alt_data_end+0xfc01239c>
 8012584:	017fe034 	movhi	r5,65408
 8012588:	297fffc4 	addi	r5,r5,-1
 801258c:	80e1c83a 	sub	r16,r16,r3
 8012590:	994a703a 	and	r5,r19,r5
 8012594:	003f3206 	br	8012260 <__alt_data_end+0xfc012260>
 8012598:	0009883a 	mov	r4,zero
 801259c:	0005883a 	mov	r2,zero
 80125a0:	003f4706 	br	80122c0 <__alt_data_end+0xfc0122c0>
 80125a4:	198cb03a 	or	r6,r3,r6
 80125a8:	300cc03a 	cmpne	r6,r6,zero
 80125ac:	0005883a 	mov	r2,zero
 80125b0:	003f6306 	br	8012340 <__alt_data_end+0xfc012340>
 80125b4:	10009d1e 	bne	r2,zero,801282c <__subdf3+0x658>
 80125b8:	81c00044 	addi	r7,r16,1
 80125bc:	3881ffcc 	andi	r2,r7,2047
 80125c0:	02400044 	movi	r9,1
 80125c4:	4880680e 	bge	r9,r2,8012768 <__subdf3+0x594>
 80125c8:	0081ffc4 	movi	r2,2047
 80125cc:	3880ae26 	beq	r7,r2,8012888 <__subdf3+0x6b4>
 80125d0:	344d883a 	add	r6,r6,r17
 80125d4:	3463803a 	cmpltu	r17,r6,r17
 80125d8:	194b883a 	add	r5,r3,r5
 80125dc:	2c4b883a 	add	r5,r5,r17
 80125e0:	282297fa 	slli	r17,r5,31
 80125e4:	300cd07a 	srli	r6,r6,1
 80125e8:	280ad07a 	srli	r5,r5,1
 80125ec:	3821883a 	mov	r16,r7
 80125f0:	89a2b03a 	or	r17,r17,r6
 80125f4:	003f1a06 	br	8012260 <__alt_data_end+0xfc012260>
 80125f8:	0101ffc4 	movi	r4,2047
 80125fc:	813f431e 	bne	r16,r4,801230c <__alt_data_end+0xfc01230c>
 8012600:	003f1706 	br	8012260 <__alt_data_end+0xfc012260>
 8012604:	80bff844 	addi	r2,r16,-31
 8012608:	00c00804 	movi	r3,32
 801260c:	9884d83a 	srl	r2,r19,r2
 8012610:	28c05126 	beq	r5,r3,8012758 <__subdf3+0x584>
 8012614:	00c00fc4 	movi	r3,63
 8012618:	1c21c83a 	sub	r16,r3,r16
 801261c:	9c26983a 	sll	r19,r19,r16
 8012620:	9c62b03a 	or	r17,r19,r17
 8012624:	8822c03a 	cmpne	r17,r17,zero
 8012628:	88a2b03a 	or	r17,r17,r2
 801262c:	000b883a 	mov	r5,zero
 8012630:	0021883a 	mov	r16,zero
 8012634:	003fb406 	br	8012508 <__alt_data_end+0xfc012508>
 8012638:	113ff804 	addi	r4,r2,-32
 801263c:	01c00804 	movi	r7,32
 8012640:	1908d83a 	srl	r4,r3,r4
 8012644:	11c04626 	beq	r2,r7,8012760 <__subdf3+0x58c>
 8012648:	01c01004 	movi	r7,64
 801264c:	3885c83a 	sub	r2,r7,r2
 8012650:	1884983a 	sll	r2,r3,r2
 8012654:	118cb03a 	or	r6,r2,r6
 8012658:	300cc03a 	cmpne	r6,r6,zero
 801265c:	310cb03a 	or	r6,r6,r4
 8012660:	0005883a 	mov	r2,zero
 8012664:	003f3606 	br	8012340 <__alt_data_end+0xfc012340>
 8012668:	80002b26 	beq	r16,zero,8012718 <__subdf3+0x544>
 801266c:	0101ffc4 	movi	r4,2047
 8012670:	51006926 	beq	r10,r4,8012818 <__subdf3+0x644>
 8012674:	0085c83a 	sub	r2,zero,r2
 8012678:	29402034 	orhi	r5,r5,128
 801267c:	01000e04 	movi	r4,56
 8012680:	20807d16 	blt	r4,r2,8012878 <__subdf3+0x6a4>
 8012684:	010007c4 	movi	r4,31
 8012688:	2080d916 	blt	r4,r2,80129f0 <__subdf3+0x81c>
 801268c:	01000804 	movi	r4,32
 8012690:	2089c83a 	sub	r4,r4,r2
 8012694:	2912983a 	sll	r9,r5,r4
 8012698:	8890d83a 	srl	r8,r17,r2
 801269c:	8908983a 	sll	r4,r17,r4
 80126a0:	2884d83a 	srl	r2,r5,r2
 80126a4:	4a22b03a 	or	r17,r9,r8
 80126a8:	2008c03a 	cmpne	r4,r4,zero
 80126ac:	8922b03a 	or	r17,r17,r4
 80126b0:	3463c83a 	sub	r17,r6,r17
 80126b4:	1885c83a 	sub	r2,r3,r2
 80126b8:	344d803a 	cmpltu	r6,r6,r17
 80126bc:	118bc83a 	sub	r5,r2,r6
 80126c0:	5021883a 	mov	r16,r10
 80126c4:	3825883a 	mov	r18,r7
 80126c8:	003f2206 	br	8012354 <__alt_data_end+0xfc012354>
 80126cc:	9886b03a 	or	r3,r19,r2
 80126d0:	18001c1e 	bne	r3,zero,8012744 <__subdf3+0x570>
 80126d4:	0011883a 	mov	r8,zero
 80126d8:	000b883a 	mov	r5,zero
 80126dc:	0023883a 	mov	r17,zero
 80126e0:	0021883a 	mov	r16,zero
 80126e4:	003f3e06 	br	80123e0 <__alt_data_end+0xfc0123e0>
 80126e8:	010007c4 	movi	r4,31
 80126ec:	20803c16 	blt	r4,r2,80127e0 <__subdf3+0x60c>
 80126f0:	01000804 	movi	r4,32
 80126f4:	2089c83a 	sub	r4,r4,r2
 80126f8:	1912983a 	sll	r9,r3,r4
 80126fc:	308ed83a 	srl	r7,r6,r2
 8012700:	3108983a 	sll	r4,r6,r4
 8012704:	1884d83a 	srl	r2,r3,r2
 8012708:	49ceb03a 	or	r7,r9,r7
 801270c:	2008c03a 	cmpne	r4,r4,zero
 8012710:	390eb03a 	or	r7,r7,r4
 8012714:	003f4706 	br	8012434 <__alt_data_end+0xfc012434>
 8012718:	2c48b03a 	or	r4,r5,r17
 801271c:	20003e26 	beq	r4,zero,8012818 <__subdf3+0x644>
 8012720:	0084303a 	nor	r2,zero,r2
 8012724:	10003a1e 	bne	r2,zero,8012810 <__subdf3+0x63c>
 8012728:	3463c83a 	sub	r17,r6,r17
 801272c:	194bc83a 	sub	r5,r3,r5
 8012730:	344d803a 	cmpltu	r6,r6,r17
 8012734:	298bc83a 	sub	r5,r5,r6
 8012738:	5021883a 	mov	r16,r10
 801273c:	3825883a 	mov	r18,r7
 8012740:	003f0406 	br	8012354 <__alt_data_end+0xfc012354>
 8012744:	1023883a 	mov	r17,r2
 8012748:	003f0706 	br	8012368 <__alt_data_end+0xfc012368>
 801274c:	0101ffc4 	movi	r4,2047
 8012750:	813f331e 	bne	r16,r4,8012420 <__alt_data_end+0xfc012420>
 8012754:	003ec206 	br	8012260 <__alt_data_end+0xfc012260>
 8012758:	0027883a 	mov	r19,zero
 801275c:	003fb006 	br	8012620 <__alt_data_end+0xfc012620>
 8012760:	0005883a 	mov	r2,zero
 8012764:	003fbb06 	br	8012654 <__alt_data_end+0xfc012654>
 8012768:	2c44b03a 	or	r2,r5,r17
 801276c:	80008b1e 	bne	r16,zero,801299c <__subdf3+0x7c8>
 8012770:	1000b526 	beq	r2,zero,8012a48 <__subdf3+0x874>
 8012774:	1984b03a 	or	r2,r3,r6
 8012778:	103eb926 	beq	r2,zero,8012260 <__alt_data_end+0xfc012260>
 801277c:	3449883a 	add	r4,r6,r17
 8012780:	2463803a 	cmpltu	r17,r4,r17
 8012784:	194b883a 	add	r5,r3,r5
 8012788:	2c4b883a 	add	r5,r5,r17
 801278c:	2880202c 	andhi	r2,r5,128
 8012790:	2023883a 	mov	r17,r4
 8012794:	103f5c26 	beq	r2,zero,8012508 <__alt_data_end+0xfc012508>
 8012798:	00bfe034 	movhi	r2,65408
 801279c:	10bfffc4 	addi	r2,r2,-1
 80127a0:	4821883a 	mov	r16,r9
 80127a4:	288a703a 	and	r5,r5,r2
 80127a8:	003ead06 	br	8012260 <__alt_data_end+0xfc012260>
 80127ac:	2c44b03a 	or	r2,r5,r17
 80127b0:	8000291e 	bne	r16,zero,8012858 <__subdf3+0x684>
 80127b4:	10004f1e 	bne	r2,zero,80128f4 <__subdf3+0x720>
 80127b8:	1984b03a 	or	r2,r3,r6
 80127bc:	10000426 	beq	r2,zero,80127d0 <__subdf3+0x5fc>
 80127c0:	180b883a 	mov	r5,r3
 80127c4:	3023883a 	mov	r17,r6
 80127c8:	3825883a 	mov	r18,r7
 80127cc:	003ea406 	br	8012260 <__alt_data_end+0xfc012260>
 80127d0:	0011883a 	mov	r8,zero
 80127d4:	000b883a 	mov	r5,zero
 80127d8:	0023883a 	mov	r17,zero
 80127dc:	003f0006 	br	80123e0 <__alt_data_end+0xfc0123e0>
 80127e0:	11fff804 	addi	r7,r2,-32
 80127e4:	19c8d83a 	srl	r4,r3,r7
 80127e8:	01c00804 	movi	r7,32
 80127ec:	11c07e26 	beq	r2,r7,80129e8 <__subdf3+0x814>
 80127f0:	01c01004 	movi	r7,64
 80127f4:	3885c83a 	sub	r2,r7,r2
 80127f8:	1884983a 	sll	r2,r3,r2
 80127fc:	118cb03a 	or	r6,r2,r6
 8012800:	300ec03a 	cmpne	r7,r6,zero
 8012804:	390eb03a 	or	r7,r7,r4
 8012808:	0005883a 	mov	r2,zero
 801280c:	003f0906 	br	8012434 <__alt_data_end+0xfc012434>
 8012810:	0101ffc4 	movi	r4,2047
 8012814:	513f991e 	bne	r10,r4,801267c <__alt_data_end+0xfc01267c>
 8012818:	180b883a 	mov	r5,r3
 801281c:	3023883a 	mov	r17,r6
 8012820:	5021883a 	mov	r16,r10
 8012824:	3825883a 	mov	r18,r7
 8012828:	003e8d06 	br	8012260 <__alt_data_end+0xfc012260>
 801282c:	80001a1e 	bne	r16,zero,8012898 <__subdf3+0x6c4>
 8012830:	2c48b03a 	or	r4,r5,r17
 8012834:	20005526 	beq	r4,zero,801298c <__subdf3+0x7b8>
 8012838:	0084303a 	nor	r2,zero,r2
 801283c:	1000511e 	bne	r2,zero,8012984 <__subdf3+0x7b0>
 8012840:	89a3883a 	add	r17,r17,r6
 8012844:	194b883a 	add	r5,r3,r5
 8012848:	898d803a 	cmpltu	r6,r17,r6
 801284c:	298b883a 	add	r5,r5,r6
 8012850:	5021883a 	mov	r16,r10
 8012854:	003efc06 	br	8012448 <__alt_data_end+0xfc012448>
 8012858:	1000341e 	bne	r2,zero,801292c <__subdf3+0x758>
 801285c:	1984b03a 	or	r2,r3,r6
 8012860:	10006f26 	beq	r2,zero,8012a20 <__subdf3+0x84c>
 8012864:	180b883a 	mov	r5,r3
 8012868:	3023883a 	mov	r17,r6
 801286c:	3825883a 	mov	r18,r7
 8012870:	0401ffc4 	movi	r16,2047
 8012874:	003e7a06 	br	8012260 <__alt_data_end+0xfc012260>
 8012878:	2c62b03a 	or	r17,r5,r17
 801287c:	8822c03a 	cmpne	r17,r17,zero
 8012880:	0005883a 	mov	r2,zero
 8012884:	003f8a06 	br	80126b0 <__alt_data_end+0xfc0126b0>
 8012888:	3821883a 	mov	r16,r7
 801288c:	000b883a 	mov	r5,zero
 8012890:	0023883a 	mov	r17,zero
 8012894:	003ed206 	br	80123e0 <__alt_data_end+0xfc0123e0>
 8012898:	0101ffc4 	movi	r4,2047
 801289c:	51003b26 	beq	r10,r4,801298c <__subdf3+0x7b8>
 80128a0:	0085c83a 	sub	r2,zero,r2
 80128a4:	29402034 	orhi	r5,r5,128
 80128a8:	01000e04 	movi	r4,56
 80128ac:	20806216 	blt	r4,r2,8012a38 <__subdf3+0x864>
 80128b0:	010007c4 	movi	r4,31
 80128b4:	20806b16 	blt	r4,r2,8012a64 <__subdf3+0x890>
 80128b8:	01000804 	movi	r4,32
 80128bc:	2089c83a 	sub	r4,r4,r2
 80128c0:	2912983a 	sll	r9,r5,r4
 80128c4:	888ed83a 	srl	r7,r17,r2
 80128c8:	8908983a 	sll	r4,r17,r4
 80128cc:	2884d83a 	srl	r2,r5,r2
 80128d0:	49e2b03a 	or	r17,r9,r7
 80128d4:	2008c03a 	cmpne	r4,r4,zero
 80128d8:	8922b03a 	or	r17,r17,r4
 80128dc:	89a3883a 	add	r17,r17,r6
 80128e0:	10c5883a 	add	r2,r2,r3
 80128e4:	898d803a 	cmpltu	r6,r17,r6
 80128e8:	118b883a 	add	r5,r2,r6
 80128ec:	5021883a 	mov	r16,r10
 80128f0:	003ed506 	br	8012448 <__alt_data_end+0xfc012448>
 80128f4:	1984b03a 	or	r2,r3,r6
 80128f8:	103e5926 	beq	r2,zero,8012260 <__alt_data_end+0xfc012260>
 80128fc:	8989c83a 	sub	r4,r17,r6
 8012900:	8911803a 	cmpltu	r8,r17,r4
 8012904:	28c5c83a 	sub	r2,r5,r3
 8012908:	1205c83a 	sub	r2,r2,r8
 801290c:	1200202c 	andhi	r8,r2,128
 8012910:	403ef926 	beq	r8,zero,80124f8 <__alt_data_end+0xfc0124f8>
 8012914:	3463c83a 	sub	r17,r6,r17
 8012918:	194bc83a 	sub	r5,r3,r5
 801291c:	344d803a 	cmpltu	r6,r6,r17
 8012920:	298bc83a 	sub	r5,r5,r6
 8012924:	3825883a 	mov	r18,r7
 8012928:	003e4d06 	br	8012260 <__alt_data_end+0xfc012260>
 801292c:	1984b03a 	or	r2,r3,r6
 8012930:	10002b26 	beq	r2,zero,80129e0 <__subdf3+0x80c>
 8012934:	2808d0fa 	srli	r4,r5,3
 8012938:	8822d0fa 	srli	r17,r17,3
 801293c:	280a977a 	slli	r5,r5,29
 8012940:	2080022c 	andhi	r2,r4,8
 8012944:	2c62b03a 	or	r17,r5,r17
 8012948:	10000826 	beq	r2,zero,801296c <__subdf3+0x798>
 801294c:	1810d0fa 	srli	r8,r3,3
 8012950:	4080022c 	andhi	r2,r8,8
 8012954:	1000051e 	bne	r2,zero,801296c <__subdf3+0x798>
 8012958:	300cd0fa 	srli	r6,r6,3
 801295c:	1804977a 	slli	r2,r3,29
 8012960:	4009883a 	mov	r4,r8
 8012964:	3825883a 	mov	r18,r7
 8012968:	11a2b03a 	or	r17,r2,r6
 801296c:	880ad77a 	srli	r5,r17,29
 8012970:	200890fa 	slli	r4,r4,3
 8012974:	882290fa 	slli	r17,r17,3
 8012978:	0401ffc4 	movi	r16,2047
 801297c:	290ab03a 	or	r5,r5,r4
 8012980:	003e3706 	br	8012260 <__alt_data_end+0xfc012260>
 8012984:	0101ffc4 	movi	r4,2047
 8012988:	513fc71e 	bne	r10,r4,80128a8 <__alt_data_end+0xfc0128a8>
 801298c:	180b883a 	mov	r5,r3
 8012990:	3023883a 	mov	r17,r6
 8012994:	5021883a 	mov	r16,r10
 8012998:	003e3106 	br	8012260 <__alt_data_end+0xfc012260>
 801299c:	10002d26 	beq	r2,zero,8012a54 <__subdf3+0x880>
 80129a0:	1984b03a 	or	r2,r3,r6
 80129a4:	10000e26 	beq	r2,zero,80129e0 <__subdf3+0x80c>
 80129a8:	2808d0fa 	srli	r4,r5,3
 80129ac:	8822d0fa 	srli	r17,r17,3
 80129b0:	280a977a 	slli	r5,r5,29
 80129b4:	2080022c 	andhi	r2,r4,8
 80129b8:	2c62b03a 	or	r17,r5,r17
 80129bc:	103feb26 	beq	r2,zero,801296c <__alt_data_end+0xfc01296c>
 80129c0:	180ed0fa 	srli	r7,r3,3
 80129c4:	3880022c 	andhi	r2,r7,8
 80129c8:	103fe81e 	bne	r2,zero,801296c <__alt_data_end+0xfc01296c>
 80129cc:	300cd0fa 	srli	r6,r6,3
 80129d0:	1804977a 	slli	r2,r3,29
 80129d4:	3809883a 	mov	r4,r7
 80129d8:	11a2b03a 	or	r17,r2,r6
 80129dc:	003fe306 	br	801296c <__alt_data_end+0xfc01296c>
 80129e0:	0401ffc4 	movi	r16,2047
 80129e4:	003e1e06 	br	8012260 <__alt_data_end+0xfc012260>
 80129e8:	0005883a 	mov	r2,zero
 80129ec:	003f8306 	br	80127fc <__alt_data_end+0xfc0127fc>
 80129f0:	113ff804 	addi	r4,r2,-32
 80129f4:	02000804 	movi	r8,32
 80129f8:	2908d83a 	srl	r4,r5,r4
 80129fc:	12002526 	beq	r2,r8,8012a94 <__subdf3+0x8c0>
 8012a00:	02001004 	movi	r8,64
 8012a04:	4085c83a 	sub	r2,r8,r2
 8012a08:	288a983a 	sll	r5,r5,r2
 8012a0c:	2c62b03a 	or	r17,r5,r17
 8012a10:	8822c03a 	cmpne	r17,r17,zero
 8012a14:	8922b03a 	or	r17,r17,r4
 8012a18:	0005883a 	mov	r2,zero
 8012a1c:	003f2406 	br	80126b0 <__alt_data_end+0xfc0126b0>
 8012a20:	01402034 	movhi	r5,128
 8012a24:	0011883a 	mov	r8,zero
 8012a28:	297fffc4 	addi	r5,r5,-1
 8012a2c:	047ffe04 	movi	r17,-8
 8012a30:	0401ffc4 	movi	r16,2047
 8012a34:	003e6a06 	br	80123e0 <__alt_data_end+0xfc0123e0>
 8012a38:	2c62b03a 	or	r17,r5,r17
 8012a3c:	8822c03a 	cmpne	r17,r17,zero
 8012a40:	0005883a 	mov	r2,zero
 8012a44:	003fa506 	br	80128dc <__alt_data_end+0xfc0128dc>
 8012a48:	180b883a 	mov	r5,r3
 8012a4c:	3023883a 	mov	r17,r6
 8012a50:	003e0306 	br	8012260 <__alt_data_end+0xfc012260>
 8012a54:	180b883a 	mov	r5,r3
 8012a58:	3023883a 	mov	r17,r6
 8012a5c:	0401ffc4 	movi	r16,2047
 8012a60:	003dff06 	br	8012260 <__alt_data_end+0xfc012260>
 8012a64:	113ff804 	addi	r4,r2,-32
 8012a68:	01c00804 	movi	r7,32
 8012a6c:	2908d83a 	srl	r4,r5,r4
 8012a70:	11c00a26 	beq	r2,r7,8012a9c <__subdf3+0x8c8>
 8012a74:	01c01004 	movi	r7,64
 8012a78:	3885c83a 	sub	r2,r7,r2
 8012a7c:	288a983a 	sll	r5,r5,r2
 8012a80:	2c62b03a 	or	r17,r5,r17
 8012a84:	8822c03a 	cmpne	r17,r17,zero
 8012a88:	8922b03a 	or	r17,r17,r4
 8012a8c:	0005883a 	mov	r2,zero
 8012a90:	003f9206 	br	80128dc <__alt_data_end+0xfc0128dc>
 8012a94:	000b883a 	mov	r5,zero
 8012a98:	003fdc06 	br	8012a0c <__alt_data_end+0xfc012a0c>
 8012a9c:	000b883a 	mov	r5,zero
 8012aa0:	003ff706 	br	8012a80 <__alt_data_end+0xfc012a80>

08012aa4 <__floatunsidf>:
 8012aa4:	defffe04 	addi	sp,sp,-8
 8012aa8:	dc000015 	stw	r16,0(sp)
 8012aac:	dfc00115 	stw	ra,4(sp)
 8012ab0:	2021883a 	mov	r16,r4
 8012ab4:	20001026 	beq	r4,zero,8012af8 <__floatunsidf+0x54>
 8012ab8:	8003f680 	call	8003f68 <__clzsi2>
 8012abc:	01410784 	movi	r5,1054
 8012ac0:	100d883a 	mov	r6,r2
 8012ac4:	288bc83a 	sub	r5,r5,r2
 8012ac8:	00800284 	movi	r2,10
 8012acc:	11801616 	blt	r2,r6,8012b28 <__floatunsidf+0x84>
 8012ad0:	008002c4 	movi	r2,11
 8012ad4:	1185c83a 	sub	r2,r2,r6
 8012ad8:	8084d83a 	srl	r2,r16,r2
 8012adc:	00c00434 	movhi	r3,16
 8012ae0:	31c00544 	addi	r7,r6,21
 8012ae4:	18ffffc4 	addi	r3,r3,-1
 8012ae8:	81e0983a 	sll	r16,r16,r7
 8012aec:	10cc703a 	and	r6,r2,r3
 8012af0:	2941ffcc 	andi	r5,r5,2047
 8012af4:	00000206 	br	8012b00 <__floatunsidf+0x5c>
 8012af8:	000b883a 	mov	r5,zero
 8012afc:	000d883a 	mov	r6,zero
 8012b00:	280a953a 	slli	r5,r5,20
 8012b04:	00c00434 	movhi	r3,16
 8012b08:	18ffffc4 	addi	r3,r3,-1
 8012b0c:	30c6703a 	and	r3,r6,r3
 8012b10:	8005883a 	mov	r2,r16
 8012b14:	1946b03a 	or	r3,r3,r5
 8012b18:	dfc00117 	ldw	ra,4(sp)
 8012b1c:	dc000017 	ldw	r16,0(sp)
 8012b20:	dec00204 	addi	sp,sp,8
 8012b24:	f800283a 	ret
 8012b28:	31bffd44 	addi	r6,r6,-11
 8012b2c:	818c983a 	sll	r6,r16,r6
 8012b30:	00800434 	movhi	r2,16
 8012b34:	10bfffc4 	addi	r2,r2,-1
 8012b38:	2941ffcc 	andi	r5,r5,2047
 8012b3c:	0021883a 	mov	r16,zero
 8012b40:	308c703a 	and	r6,r6,r2
 8012b44:	003fee06 	br	8012b00 <__alt_data_end+0xfc012b00>

08012b48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012b48:	defffe04 	addi	sp,sp,-8
 8012b4c:	dfc00115 	stw	ra,4(sp)
 8012b50:	df000015 	stw	fp,0(sp)
 8012b54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012b58:	008200b4 	movhi	r2,2050
 8012b5c:	1087ee04 	addi	r2,r2,8120
 8012b60:	10800017 	ldw	r2,0(r2)
 8012b64:	10000526 	beq	r2,zero,8012b7c <alt_get_errno+0x34>
 8012b68:	008200b4 	movhi	r2,2050
 8012b6c:	1087ee04 	addi	r2,r2,8120
 8012b70:	10800017 	ldw	r2,0(r2)
 8012b74:	103ee83a 	callr	r2
 8012b78:	00000206 	br	8012b84 <alt_get_errno+0x3c>
 8012b7c:	008200b4 	movhi	r2,2050
 8012b80:	108ebe04 	addi	r2,r2,15096
}
 8012b84:	e037883a 	mov	sp,fp
 8012b88:	dfc00117 	ldw	ra,4(sp)
 8012b8c:	df000017 	ldw	fp,0(sp)
 8012b90:	dec00204 	addi	sp,sp,8
 8012b94:	f800283a 	ret

08012b98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8012b98:	defffb04 	addi	sp,sp,-20
 8012b9c:	dfc00415 	stw	ra,16(sp)
 8012ba0:	df000315 	stw	fp,12(sp)
 8012ba4:	df000304 	addi	fp,sp,12
 8012ba8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8012bac:	e0bfff17 	ldw	r2,-4(fp)
 8012bb0:	10000616 	blt	r2,zero,8012bcc <close+0x34>
 8012bb4:	e0bfff17 	ldw	r2,-4(fp)
 8012bb8:	10c00324 	muli	r3,r2,12
 8012bbc:	008200b4 	movhi	r2,2050
 8012bc0:	10836004 	addi	r2,r2,3456
 8012bc4:	1885883a 	add	r2,r3,r2
 8012bc8:	00000106 	br	8012bd0 <close+0x38>
 8012bcc:	0005883a 	mov	r2,zero
 8012bd0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8012bd4:	e0bffd17 	ldw	r2,-12(fp)
 8012bd8:	10001926 	beq	r2,zero,8012c40 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8012bdc:	e0bffd17 	ldw	r2,-12(fp)
 8012be0:	10800017 	ldw	r2,0(r2)
 8012be4:	10800417 	ldw	r2,16(r2)
 8012be8:	10000626 	beq	r2,zero,8012c04 <close+0x6c>
 8012bec:	e0bffd17 	ldw	r2,-12(fp)
 8012bf0:	10800017 	ldw	r2,0(r2)
 8012bf4:	10800417 	ldw	r2,16(r2)
 8012bf8:	e13ffd17 	ldw	r4,-12(fp)
 8012bfc:	103ee83a 	callr	r2
 8012c00:	00000106 	br	8012c08 <close+0x70>
 8012c04:	0005883a 	mov	r2,zero
 8012c08:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8012c0c:	e13fff17 	ldw	r4,-4(fp)
 8012c10:	80135640 	call	8013564 <alt_release_fd>
    if (rval < 0)
 8012c14:	e0bffe17 	ldw	r2,-8(fp)
 8012c18:	1000070e 	bge	r2,zero,8012c38 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8012c1c:	8012b480 	call	8012b48 <alt_get_errno>
 8012c20:	1007883a 	mov	r3,r2
 8012c24:	e0bffe17 	ldw	r2,-8(fp)
 8012c28:	0085c83a 	sub	r2,zero,r2
 8012c2c:	18800015 	stw	r2,0(r3)
      return -1;
 8012c30:	00bfffc4 	movi	r2,-1
 8012c34:	00000706 	br	8012c54 <close+0xbc>
    }
    return 0;
 8012c38:	0005883a 	mov	r2,zero
 8012c3c:	00000506 	br	8012c54 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012c40:	8012b480 	call	8012b48 <alt_get_errno>
 8012c44:	1007883a 	mov	r3,r2
 8012c48:	00801444 	movi	r2,81
 8012c4c:	18800015 	stw	r2,0(r3)
    return -1;
 8012c50:	00bfffc4 	movi	r2,-1
  }
}
 8012c54:	e037883a 	mov	sp,fp
 8012c58:	dfc00117 	ldw	ra,4(sp)
 8012c5c:	df000017 	ldw	fp,0(sp)
 8012c60:	dec00204 	addi	sp,sp,8
 8012c64:	f800283a 	ret

08012c68 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8012c68:	defffc04 	addi	sp,sp,-16
 8012c6c:	df000315 	stw	fp,12(sp)
 8012c70:	df000304 	addi	fp,sp,12
 8012c74:	e13ffd15 	stw	r4,-12(fp)
 8012c78:	e17ffe15 	stw	r5,-8(fp)
 8012c7c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8012c80:	e0bfff17 	ldw	r2,-4(fp)
}
 8012c84:	e037883a 	mov	sp,fp
 8012c88:	df000017 	ldw	fp,0(sp)
 8012c8c:	dec00104 	addi	sp,sp,4
 8012c90:	f800283a 	ret

08012c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012c94:	defffe04 	addi	sp,sp,-8
 8012c98:	dfc00115 	stw	ra,4(sp)
 8012c9c:	df000015 	stw	fp,0(sp)
 8012ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012ca4:	008200b4 	movhi	r2,2050
 8012ca8:	1087ee04 	addi	r2,r2,8120
 8012cac:	10800017 	ldw	r2,0(r2)
 8012cb0:	10000526 	beq	r2,zero,8012cc8 <alt_get_errno+0x34>
 8012cb4:	008200b4 	movhi	r2,2050
 8012cb8:	1087ee04 	addi	r2,r2,8120
 8012cbc:	10800017 	ldw	r2,0(r2)
 8012cc0:	103ee83a 	callr	r2
 8012cc4:	00000206 	br	8012cd0 <alt_get_errno+0x3c>
 8012cc8:	008200b4 	movhi	r2,2050
 8012ccc:	108ebe04 	addi	r2,r2,15096
}
 8012cd0:	e037883a 	mov	sp,fp
 8012cd4:	dfc00117 	ldw	ra,4(sp)
 8012cd8:	df000017 	ldw	fp,0(sp)
 8012cdc:	dec00204 	addi	sp,sp,8
 8012ce0:	f800283a 	ret

08012ce4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8012ce4:	defffb04 	addi	sp,sp,-20
 8012ce8:	dfc00415 	stw	ra,16(sp)
 8012cec:	df000315 	stw	fp,12(sp)
 8012cf0:	df000304 	addi	fp,sp,12
 8012cf4:	e13ffe15 	stw	r4,-8(fp)
 8012cf8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012cfc:	e0bffe17 	ldw	r2,-8(fp)
 8012d00:	10000616 	blt	r2,zero,8012d1c <fstat+0x38>
 8012d04:	e0bffe17 	ldw	r2,-8(fp)
 8012d08:	10c00324 	muli	r3,r2,12
 8012d0c:	008200b4 	movhi	r2,2050
 8012d10:	10836004 	addi	r2,r2,3456
 8012d14:	1885883a 	add	r2,r3,r2
 8012d18:	00000106 	br	8012d20 <fstat+0x3c>
 8012d1c:	0005883a 	mov	r2,zero
 8012d20:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8012d24:	e0bffd17 	ldw	r2,-12(fp)
 8012d28:	10001026 	beq	r2,zero,8012d6c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8012d2c:	e0bffd17 	ldw	r2,-12(fp)
 8012d30:	10800017 	ldw	r2,0(r2)
 8012d34:	10800817 	ldw	r2,32(r2)
 8012d38:	10000726 	beq	r2,zero,8012d58 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8012d3c:	e0bffd17 	ldw	r2,-12(fp)
 8012d40:	10800017 	ldw	r2,0(r2)
 8012d44:	10800817 	ldw	r2,32(r2)
 8012d48:	e13ffd17 	ldw	r4,-12(fp)
 8012d4c:	e17fff17 	ldw	r5,-4(fp)
 8012d50:	103ee83a 	callr	r2
 8012d54:	00000a06 	br	8012d80 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8012d58:	e0bfff17 	ldw	r2,-4(fp)
 8012d5c:	00c80004 	movi	r3,8192
 8012d60:	10c00115 	stw	r3,4(r2)
      return 0;
 8012d64:	0005883a 	mov	r2,zero
 8012d68:	00000506 	br	8012d80 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012d6c:	8012c940 	call	8012c94 <alt_get_errno>
 8012d70:	1007883a 	mov	r3,r2
 8012d74:	00801444 	movi	r2,81
 8012d78:	18800015 	stw	r2,0(r3)
    return -1;
 8012d7c:	00bfffc4 	movi	r2,-1
  }
}
 8012d80:	e037883a 	mov	sp,fp
 8012d84:	dfc00117 	ldw	ra,4(sp)
 8012d88:	df000017 	ldw	fp,0(sp)
 8012d8c:	dec00204 	addi	sp,sp,8
 8012d90:	f800283a 	ret

08012d94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8012d94:	defff904 	addi	sp,sp,-28
 8012d98:	dfc00615 	stw	ra,24(sp)
 8012d9c:	df000515 	stw	fp,20(sp)
 8012da0:	df000504 	addi	fp,sp,20
 8012da4:	e13ffc15 	stw	r4,-16(fp)
 8012da8:	e17ffd15 	stw	r5,-12(fp)
 8012dac:	e1bffe15 	stw	r6,-8(fp)
 8012db0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8012db4:	e0800217 	ldw	r2,8(fp)
 8012db8:	d8800015 	stw	r2,0(sp)
 8012dbc:	e13ffc17 	ldw	r4,-16(fp)
 8012dc0:	e17ffd17 	ldw	r5,-12(fp)
 8012dc4:	e1bffe17 	ldw	r6,-8(fp)
 8012dc8:	e1ffff17 	ldw	r7,-4(fp)
 8012dcc:	8012f740 	call	8012f74 <alt_iic_isr_register>
}  
 8012dd0:	e037883a 	mov	sp,fp
 8012dd4:	dfc00117 	ldw	ra,4(sp)
 8012dd8:	df000017 	ldw	fp,0(sp)
 8012ddc:	dec00204 	addi	sp,sp,8
 8012de0:	f800283a 	ret

08012de4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8012de4:	defff904 	addi	sp,sp,-28
 8012de8:	df000615 	stw	fp,24(sp)
 8012dec:	df000604 	addi	fp,sp,24
 8012df0:	e13ffe15 	stw	r4,-8(fp)
 8012df4:	e17fff15 	stw	r5,-4(fp)
 8012df8:	e0bfff17 	ldw	r2,-4(fp)
 8012dfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012e00:	0005303a 	rdctl	r2,status
 8012e04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012e08:	e0fffb17 	ldw	r3,-20(fp)
 8012e0c:	00bfff84 	movi	r2,-2
 8012e10:	1884703a 	and	r2,r3,r2
 8012e14:	1001703a 	wrctl	status,r2
  
  return context;
 8012e18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8012e1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8012e20:	e0bffa17 	ldw	r2,-24(fp)
 8012e24:	00c00044 	movi	r3,1
 8012e28:	1884983a 	sll	r2,r3,r2
 8012e2c:	1007883a 	mov	r3,r2
 8012e30:	008200b4 	movhi	r2,2050
 8012e34:	108ec204 	addi	r2,r2,15112
 8012e38:	10800017 	ldw	r2,0(r2)
 8012e3c:	1886b03a 	or	r3,r3,r2
 8012e40:	008200b4 	movhi	r2,2050
 8012e44:	108ec204 	addi	r2,r2,15112
 8012e48:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8012e4c:	008200b4 	movhi	r2,2050
 8012e50:	108ec204 	addi	r2,r2,15112
 8012e54:	10800017 	ldw	r2,0(r2)
 8012e58:	100170fa 	wrctl	ienable,r2
 8012e5c:	e0bffc17 	ldw	r2,-16(fp)
 8012e60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012e64:	e0bffd17 	ldw	r2,-12(fp)
 8012e68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8012e6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8012e70:	0001883a 	nop
}
 8012e74:	e037883a 	mov	sp,fp
 8012e78:	df000017 	ldw	fp,0(sp)
 8012e7c:	dec00104 	addi	sp,sp,4
 8012e80:	f800283a 	ret

08012e84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8012e84:	defff904 	addi	sp,sp,-28
 8012e88:	df000615 	stw	fp,24(sp)
 8012e8c:	df000604 	addi	fp,sp,24
 8012e90:	e13ffe15 	stw	r4,-8(fp)
 8012e94:	e17fff15 	stw	r5,-4(fp)
 8012e98:	e0bfff17 	ldw	r2,-4(fp)
 8012e9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012ea0:	0005303a 	rdctl	r2,status
 8012ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012ea8:	e0fffb17 	ldw	r3,-20(fp)
 8012eac:	00bfff84 	movi	r2,-2
 8012eb0:	1884703a 	and	r2,r3,r2
 8012eb4:	1001703a 	wrctl	status,r2
  
  return context;
 8012eb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8012ebc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8012ec0:	e0bffa17 	ldw	r2,-24(fp)
 8012ec4:	00c00044 	movi	r3,1
 8012ec8:	1884983a 	sll	r2,r3,r2
 8012ecc:	0084303a 	nor	r2,zero,r2
 8012ed0:	1007883a 	mov	r3,r2
 8012ed4:	008200b4 	movhi	r2,2050
 8012ed8:	108ec204 	addi	r2,r2,15112
 8012edc:	10800017 	ldw	r2,0(r2)
 8012ee0:	1886703a 	and	r3,r3,r2
 8012ee4:	008200b4 	movhi	r2,2050
 8012ee8:	108ec204 	addi	r2,r2,15112
 8012eec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8012ef0:	008200b4 	movhi	r2,2050
 8012ef4:	108ec204 	addi	r2,r2,15112
 8012ef8:	10800017 	ldw	r2,0(r2)
 8012efc:	100170fa 	wrctl	ienable,r2
 8012f00:	e0bffc17 	ldw	r2,-16(fp)
 8012f04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012f08:	e0bffd17 	ldw	r2,-12(fp)
 8012f0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8012f10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8012f14:	0001883a 	nop
}
 8012f18:	e037883a 	mov	sp,fp
 8012f1c:	df000017 	ldw	fp,0(sp)
 8012f20:	dec00104 	addi	sp,sp,4
 8012f24:	f800283a 	ret

08012f28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8012f28:	defffc04 	addi	sp,sp,-16
 8012f2c:	df000315 	stw	fp,12(sp)
 8012f30:	df000304 	addi	fp,sp,12
 8012f34:	e13ffe15 	stw	r4,-8(fp)
 8012f38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8012f3c:	000530fa 	rdctl	r2,ienable
 8012f40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8012f44:	e0bfff17 	ldw	r2,-4(fp)
 8012f48:	00c00044 	movi	r3,1
 8012f4c:	1884983a 	sll	r2,r3,r2
 8012f50:	1007883a 	mov	r3,r2
 8012f54:	e0bffd17 	ldw	r2,-12(fp)
 8012f58:	1884703a 	and	r2,r3,r2
 8012f5c:	1004c03a 	cmpne	r2,r2,zero
 8012f60:	10803fcc 	andi	r2,r2,255
}
 8012f64:	e037883a 	mov	sp,fp
 8012f68:	df000017 	ldw	fp,0(sp)
 8012f6c:	dec00104 	addi	sp,sp,4
 8012f70:	f800283a 	ret

08012f74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8012f74:	defff504 	addi	sp,sp,-44
 8012f78:	dfc00a15 	stw	ra,40(sp)
 8012f7c:	df000915 	stw	fp,36(sp)
 8012f80:	df000904 	addi	fp,sp,36
 8012f84:	e13ffc15 	stw	r4,-16(fp)
 8012f88:	e17ffd15 	stw	r5,-12(fp)
 8012f8c:	e1bffe15 	stw	r6,-8(fp)
 8012f90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8012f94:	00bffa84 	movi	r2,-22
 8012f98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8012f9c:	e0bffd17 	ldw	r2,-12(fp)
 8012fa0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8012fa4:	e0bff817 	ldw	r2,-32(fp)
 8012fa8:	10800808 	cmpgei	r2,r2,32
 8012fac:	1000271e 	bne	r2,zero,801304c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012fb0:	0005303a 	rdctl	r2,status
 8012fb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012fb8:	e0fffa17 	ldw	r3,-24(fp)
 8012fbc:	00bfff84 	movi	r2,-2
 8012fc0:	1884703a 	and	r2,r3,r2
 8012fc4:	1001703a 	wrctl	status,r2
  
  return context;
 8012fc8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8012fcc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8012fd0:	008200b4 	movhi	r2,2050
 8012fd4:	108f1004 	addi	r2,r2,15424
 8012fd8:	e0fff817 	ldw	r3,-32(fp)
 8012fdc:	180690fa 	slli	r3,r3,3
 8012fe0:	10c5883a 	add	r2,r2,r3
 8012fe4:	e0fffe17 	ldw	r3,-8(fp)
 8012fe8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8012fec:	008200b4 	movhi	r2,2050
 8012ff0:	108f1004 	addi	r2,r2,15424
 8012ff4:	e0fff817 	ldw	r3,-32(fp)
 8012ff8:	180690fa 	slli	r3,r3,3
 8012ffc:	10c5883a 	add	r2,r2,r3
 8013000:	10800104 	addi	r2,r2,4
 8013004:	e0ffff17 	ldw	r3,-4(fp)
 8013008:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801300c:	e0bffe17 	ldw	r2,-8(fp)
 8013010:	10000526 	beq	r2,zero,8013028 <alt_iic_isr_register+0xb4>
 8013014:	e0bff817 	ldw	r2,-32(fp)
 8013018:	e13ffc17 	ldw	r4,-16(fp)
 801301c:	100b883a 	mov	r5,r2
 8013020:	8012de40 	call	8012de4 <alt_ic_irq_enable>
 8013024:	00000406 	br	8013038 <alt_iic_isr_register+0xc4>
 8013028:	e0bff817 	ldw	r2,-32(fp)
 801302c:	e13ffc17 	ldw	r4,-16(fp)
 8013030:	100b883a 	mov	r5,r2
 8013034:	8012e840 	call	8012e84 <alt_ic_irq_disable>
 8013038:	e0bff715 	stw	r2,-36(fp)
 801303c:	e0bff917 	ldw	r2,-28(fp)
 8013040:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013044:	e0bffb17 	ldw	r2,-20(fp)
 8013048:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801304c:	e0bff717 	ldw	r2,-36(fp)
}
 8013050:	e037883a 	mov	sp,fp
 8013054:	dfc00117 	ldw	ra,4(sp)
 8013058:	df000017 	ldw	fp,0(sp)
 801305c:	dec00204 	addi	sp,sp,8
 8013060:	f800283a 	ret

08013064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013064:	defffe04 	addi	sp,sp,-8
 8013068:	dfc00115 	stw	ra,4(sp)
 801306c:	df000015 	stw	fp,0(sp)
 8013070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013074:	008200b4 	movhi	r2,2050
 8013078:	1087ee04 	addi	r2,r2,8120
 801307c:	10800017 	ldw	r2,0(r2)
 8013080:	10000526 	beq	r2,zero,8013098 <alt_get_errno+0x34>
 8013084:	008200b4 	movhi	r2,2050
 8013088:	1087ee04 	addi	r2,r2,8120
 801308c:	10800017 	ldw	r2,0(r2)
 8013090:	103ee83a 	callr	r2
 8013094:	00000206 	br	80130a0 <alt_get_errno+0x3c>
 8013098:	008200b4 	movhi	r2,2050
 801309c:	108ebe04 	addi	r2,r2,15096
}
 80130a0:	e037883a 	mov	sp,fp
 80130a4:	dfc00117 	ldw	ra,4(sp)
 80130a8:	df000017 	ldw	fp,0(sp)
 80130ac:	dec00204 	addi	sp,sp,8
 80130b0:	f800283a 	ret

080130b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80130b4:	deffed04 	addi	sp,sp,-76
 80130b8:	dfc01215 	stw	ra,72(sp)
 80130bc:	df001115 	stw	fp,68(sp)
 80130c0:	df001104 	addi	fp,sp,68
 80130c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80130c8:	e0bfff17 	ldw	r2,-4(fp)
 80130cc:	10000616 	blt	r2,zero,80130e8 <isatty+0x34>
 80130d0:	e0bfff17 	ldw	r2,-4(fp)
 80130d4:	10c00324 	muli	r3,r2,12
 80130d8:	008200b4 	movhi	r2,2050
 80130dc:	10836004 	addi	r2,r2,3456
 80130e0:	1885883a 	add	r2,r3,r2
 80130e4:	00000106 	br	80130ec <isatty+0x38>
 80130e8:	0005883a 	mov	r2,zero
 80130ec:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80130f0:	e0bfef17 	ldw	r2,-68(fp)
 80130f4:	10000e26 	beq	r2,zero,8013130 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80130f8:	e0bfef17 	ldw	r2,-68(fp)
 80130fc:	10800017 	ldw	r2,0(r2)
 8013100:	10800817 	ldw	r2,32(r2)
 8013104:	1000021e 	bne	r2,zero,8013110 <isatty+0x5c>
    {
      return 1;
 8013108:	00800044 	movi	r2,1
 801310c:	00000d06 	br	8013144 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8013110:	e0bff004 	addi	r2,fp,-64
 8013114:	e13fff17 	ldw	r4,-4(fp)
 8013118:	100b883a 	mov	r5,r2
 801311c:	8012ce40 	call	8012ce4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8013120:	e0bff117 	ldw	r2,-60(fp)
 8013124:	10880020 	cmpeqi	r2,r2,8192
 8013128:	10803fcc 	andi	r2,r2,255
 801312c:	00000506 	br	8013144 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8013130:	80130640 	call	8013064 <alt_get_errno>
 8013134:	1007883a 	mov	r3,r2
 8013138:	00801444 	movi	r2,81
 801313c:	18800015 	stw	r2,0(r3)
    return 0;
 8013140:	0005883a 	mov	r2,zero
  }
}
 8013144:	e037883a 	mov	sp,fp
 8013148:	dfc00117 	ldw	ra,4(sp)
 801314c:	df000017 	ldw	fp,0(sp)
 8013150:	dec00204 	addi	sp,sp,8
 8013154:	f800283a 	ret

08013158 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8013158:	defffc04 	addi	sp,sp,-16
 801315c:	df000315 	stw	fp,12(sp)
 8013160:	df000304 	addi	fp,sp,12
 8013164:	e13ffd15 	stw	r4,-12(fp)
 8013168:	e17ffe15 	stw	r5,-8(fp)
 801316c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8013170:	e0fffe17 	ldw	r3,-8(fp)
 8013174:	e0bffd17 	ldw	r2,-12(fp)
 8013178:	18800c26 	beq	r3,r2,80131ac <alt_load_section+0x54>
  {
    while( to != end )
 801317c:	00000806 	br	80131a0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8013180:	e0bffe17 	ldw	r2,-8(fp)
 8013184:	10c00104 	addi	r3,r2,4
 8013188:	e0fffe15 	stw	r3,-8(fp)
 801318c:	e0fffd17 	ldw	r3,-12(fp)
 8013190:	19000104 	addi	r4,r3,4
 8013194:	e13ffd15 	stw	r4,-12(fp)
 8013198:	18c00017 	ldw	r3,0(r3)
 801319c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80131a0:	e0fffe17 	ldw	r3,-8(fp)
 80131a4:	e0bfff17 	ldw	r2,-4(fp)
 80131a8:	18bff51e 	bne	r3,r2,8013180 <__alt_data_end+0xfc013180>
    {
      *to++ = *from++;
    }
  }
}
 80131ac:	e037883a 	mov	sp,fp
 80131b0:	df000017 	ldw	fp,0(sp)
 80131b4:	dec00104 	addi	sp,sp,4
 80131b8:	f800283a 	ret

080131bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80131bc:	defffe04 	addi	sp,sp,-8
 80131c0:	dfc00115 	stw	ra,4(sp)
 80131c4:	df000015 	stw	fp,0(sp)
 80131c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80131cc:	010200b4 	movhi	r4,2050
 80131d0:	2107f304 	addi	r4,r4,8140
 80131d4:	014200b4 	movhi	r5,2050
 80131d8:	29412d04 	addi	r5,r5,1204
 80131dc:	018200b4 	movhi	r6,2050
 80131e0:	3187f304 	addi	r6,r6,8140
 80131e4:	80131580 	call	8013158 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80131e8:	01020034 	movhi	r4,2048
 80131ec:	21000804 	addi	r4,r4,32
 80131f0:	01420034 	movhi	r5,2048
 80131f4:	29400804 	addi	r5,r5,32
 80131f8:	01820034 	movhi	r6,2048
 80131fc:	31806f04 	addi	r6,r6,444
 8013200:	80131580 	call	8013158 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8013204:	01020074 	movhi	r4,2049
 8013208:	21165704 	addi	r4,r4,22876
 801320c:	01420074 	movhi	r5,2049
 8013210:	29565704 	addi	r5,r5,22876
 8013214:	018200b4 	movhi	r6,2050
 8013218:	31812d04 	addi	r6,r6,1204
 801321c:	80131580 	call	8013158 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8013220:	8014b740 	call	8014b74 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8013224:	8014dcc0 	call	8014dcc <alt_icache_flush_all>
}
 8013228:	e037883a 	mov	sp,fp
 801322c:	dfc00117 	ldw	ra,4(sp)
 8013230:	df000017 	ldw	fp,0(sp)
 8013234:	dec00204 	addi	sp,sp,8
 8013238:	f800283a 	ret

0801323c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801323c:	defffe04 	addi	sp,sp,-8
 8013240:	dfc00115 	stw	ra,4(sp)
 8013244:	df000015 	stw	fp,0(sp)
 8013248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801324c:	008200b4 	movhi	r2,2050
 8013250:	1087ee04 	addi	r2,r2,8120
 8013254:	10800017 	ldw	r2,0(r2)
 8013258:	10000526 	beq	r2,zero,8013270 <alt_get_errno+0x34>
 801325c:	008200b4 	movhi	r2,2050
 8013260:	1087ee04 	addi	r2,r2,8120
 8013264:	10800017 	ldw	r2,0(r2)
 8013268:	103ee83a 	callr	r2
 801326c:	00000206 	br	8013278 <alt_get_errno+0x3c>
 8013270:	008200b4 	movhi	r2,2050
 8013274:	108ebe04 	addi	r2,r2,15096
}
 8013278:	e037883a 	mov	sp,fp
 801327c:	dfc00117 	ldw	ra,4(sp)
 8013280:	df000017 	ldw	fp,0(sp)
 8013284:	dec00204 	addi	sp,sp,8
 8013288:	f800283a 	ret

0801328c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801328c:	defff904 	addi	sp,sp,-28
 8013290:	dfc00615 	stw	ra,24(sp)
 8013294:	df000515 	stw	fp,20(sp)
 8013298:	df000504 	addi	fp,sp,20
 801329c:	e13ffd15 	stw	r4,-12(fp)
 80132a0:	e17ffe15 	stw	r5,-8(fp)
 80132a4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80132a8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80132ac:	e0bffd17 	ldw	r2,-12(fp)
 80132b0:	10000616 	blt	r2,zero,80132cc <lseek+0x40>
 80132b4:	e0bffd17 	ldw	r2,-12(fp)
 80132b8:	10c00324 	muli	r3,r2,12
 80132bc:	008200b4 	movhi	r2,2050
 80132c0:	10836004 	addi	r2,r2,3456
 80132c4:	1885883a 	add	r2,r3,r2
 80132c8:	00000106 	br	80132d0 <lseek+0x44>
 80132cc:	0005883a 	mov	r2,zero
 80132d0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80132d4:	e0bffc17 	ldw	r2,-16(fp)
 80132d8:	10001026 	beq	r2,zero,801331c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80132dc:	e0bffc17 	ldw	r2,-16(fp)
 80132e0:	10800017 	ldw	r2,0(r2)
 80132e4:	10800717 	ldw	r2,28(r2)
 80132e8:	10000926 	beq	r2,zero,8013310 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80132ec:	e0bffc17 	ldw	r2,-16(fp)
 80132f0:	10800017 	ldw	r2,0(r2)
 80132f4:	10800717 	ldw	r2,28(r2)
 80132f8:	e13ffc17 	ldw	r4,-16(fp)
 80132fc:	e17ffe17 	ldw	r5,-8(fp)
 8013300:	e1bfff17 	ldw	r6,-4(fp)
 8013304:	103ee83a 	callr	r2
 8013308:	e0bffb15 	stw	r2,-20(fp)
 801330c:	00000506 	br	8013324 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8013310:	00bfde84 	movi	r2,-134
 8013314:	e0bffb15 	stw	r2,-20(fp)
 8013318:	00000206 	br	8013324 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 801331c:	00bfebc4 	movi	r2,-81
 8013320:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8013324:	e0bffb17 	ldw	r2,-20(fp)
 8013328:	1000070e 	bge	r2,zero,8013348 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 801332c:	801323c0 	call	801323c <alt_get_errno>
 8013330:	1007883a 	mov	r3,r2
 8013334:	e0bffb17 	ldw	r2,-20(fp)
 8013338:	0085c83a 	sub	r2,zero,r2
 801333c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8013340:	00bfffc4 	movi	r2,-1
 8013344:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8013348:	e0bffb17 	ldw	r2,-20(fp)
}
 801334c:	e037883a 	mov	sp,fp
 8013350:	dfc00117 	ldw	ra,4(sp)
 8013354:	df000017 	ldw	fp,0(sp)
 8013358:	dec00204 	addi	sp,sp,8
 801335c:	f800283a 	ret

08013360 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8013360:	defffd04 	addi	sp,sp,-12
 8013364:	dfc00215 	stw	ra,8(sp)
 8013368:	df000115 	stw	fp,4(sp)
 801336c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8013370:	0009883a 	mov	r4,zero
 8013374:	80138240 	call	8013824 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8013378:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 801337c:	80138580 	call	8013858 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8013380:	010200b4 	movhi	r4,2050
 8013384:	21011d04 	addi	r4,r4,1140
 8013388:	014200b4 	movhi	r5,2050
 801338c:	29411d04 	addi	r5,r5,1140
 8013390:	018200b4 	movhi	r6,2050
 8013394:	31811d04 	addi	r6,r6,1140
 8013398:	8014ebc0 	call	8014ebc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 801339c:	8014c840 	call	8014c84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80133a0:	01020074 	movhi	r4,2049
 80133a4:	21133804 	addi	r4,r4,19680
 80133a8:	80155b80 	call	80155b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80133ac:	d126e017 	ldw	r4,-25728(gp)
 80133b0:	d0e6e117 	ldw	r3,-25724(gp)
 80133b4:	d0a6e217 	ldw	r2,-25720(gp)
 80133b8:	180b883a 	mov	r5,r3
 80133bc:	100d883a 	mov	r6,r2
 80133c0:	80031880 	call	8003188 <main>
 80133c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80133c8:	01000044 	movi	r4,1
 80133cc:	8012b980 	call	8012b98 <close>
  exit (result);
 80133d0:	e13fff17 	ldw	r4,-4(fp)
 80133d4:	80155cc0 	call	80155cc <exit>

080133d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80133d8:	defffe04 	addi	sp,sp,-8
 80133dc:	df000115 	stw	fp,4(sp)
 80133e0:	df000104 	addi	fp,sp,4
 80133e4:	e13fff15 	stw	r4,-4(fp)
}
 80133e8:	e037883a 	mov	sp,fp
 80133ec:	df000017 	ldw	fp,0(sp)
 80133f0:	dec00104 	addi	sp,sp,4
 80133f4:	f800283a 	ret

080133f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80133f8:	defffe04 	addi	sp,sp,-8
 80133fc:	df000115 	stw	fp,4(sp)
 8013400:	df000104 	addi	fp,sp,4
 8013404:	e13fff15 	stw	r4,-4(fp)
}
 8013408:	e037883a 	mov	sp,fp
 801340c:	df000017 	ldw	fp,0(sp)
 8013410:	dec00104 	addi	sp,sp,4
 8013414:	f800283a 	ret

08013418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013418:	defffe04 	addi	sp,sp,-8
 801341c:	dfc00115 	stw	ra,4(sp)
 8013420:	df000015 	stw	fp,0(sp)
 8013424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013428:	008200b4 	movhi	r2,2050
 801342c:	1087ee04 	addi	r2,r2,8120
 8013430:	10800017 	ldw	r2,0(r2)
 8013434:	10000526 	beq	r2,zero,801344c <alt_get_errno+0x34>
 8013438:	008200b4 	movhi	r2,2050
 801343c:	1087ee04 	addi	r2,r2,8120
 8013440:	10800017 	ldw	r2,0(r2)
 8013444:	103ee83a 	callr	r2
 8013448:	00000206 	br	8013454 <alt_get_errno+0x3c>
 801344c:	008200b4 	movhi	r2,2050
 8013450:	108ebe04 	addi	r2,r2,15096
}
 8013454:	e037883a 	mov	sp,fp
 8013458:	dfc00117 	ldw	ra,4(sp)
 801345c:	df000017 	ldw	fp,0(sp)
 8013460:	dec00204 	addi	sp,sp,8
 8013464:	f800283a 	ret

08013468 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8013468:	defff904 	addi	sp,sp,-28
 801346c:	dfc00615 	stw	ra,24(sp)
 8013470:	df000515 	stw	fp,20(sp)
 8013474:	df000504 	addi	fp,sp,20
 8013478:	e13ffd15 	stw	r4,-12(fp)
 801347c:	e17ffe15 	stw	r5,-8(fp)
 8013480:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013484:	e0bffd17 	ldw	r2,-12(fp)
 8013488:	10000616 	blt	r2,zero,80134a4 <read+0x3c>
 801348c:	e0bffd17 	ldw	r2,-12(fp)
 8013490:	10c00324 	muli	r3,r2,12
 8013494:	008200b4 	movhi	r2,2050
 8013498:	10836004 	addi	r2,r2,3456
 801349c:	1885883a 	add	r2,r3,r2
 80134a0:	00000106 	br	80134a8 <read+0x40>
 80134a4:	0005883a 	mov	r2,zero
 80134a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80134ac:	e0bffb17 	ldw	r2,-20(fp)
 80134b0:	10002226 	beq	r2,zero,801353c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80134b4:	e0bffb17 	ldw	r2,-20(fp)
 80134b8:	10800217 	ldw	r2,8(r2)
 80134bc:	108000cc 	andi	r2,r2,3
 80134c0:	10800060 	cmpeqi	r2,r2,1
 80134c4:	1000181e 	bne	r2,zero,8013528 <read+0xc0>
        (fd->dev->read))
 80134c8:	e0bffb17 	ldw	r2,-20(fp)
 80134cc:	10800017 	ldw	r2,0(r2)
 80134d0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80134d4:	10001426 	beq	r2,zero,8013528 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80134d8:	e0bffb17 	ldw	r2,-20(fp)
 80134dc:	10800017 	ldw	r2,0(r2)
 80134e0:	10800517 	ldw	r2,20(r2)
 80134e4:	e0ffff17 	ldw	r3,-4(fp)
 80134e8:	e13ffb17 	ldw	r4,-20(fp)
 80134ec:	e17ffe17 	ldw	r5,-8(fp)
 80134f0:	180d883a 	mov	r6,r3
 80134f4:	103ee83a 	callr	r2
 80134f8:	e0bffc15 	stw	r2,-16(fp)
 80134fc:	e0bffc17 	ldw	r2,-16(fp)
 8013500:	1000070e 	bge	r2,zero,8013520 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8013504:	80134180 	call	8013418 <alt_get_errno>
 8013508:	1007883a 	mov	r3,r2
 801350c:	e0bffc17 	ldw	r2,-16(fp)
 8013510:	0085c83a 	sub	r2,zero,r2
 8013514:	18800015 	stw	r2,0(r3)
          return -1;
 8013518:	00bfffc4 	movi	r2,-1
 801351c:	00000c06 	br	8013550 <read+0xe8>
        }
        return rval;
 8013520:	e0bffc17 	ldw	r2,-16(fp)
 8013524:	00000a06 	br	8013550 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8013528:	80134180 	call	8013418 <alt_get_errno>
 801352c:	1007883a 	mov	r3,r2
 8013530:	00800344 	movi	r2,13
 8013534:	18800015 	stw	r2,0(r3)
 8013538:	00000406 	br	801354c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801353c:	80134180 	call	8013418 <alt_get_errno>
 8013540:	1007883a 	mov	r3,r2
 8013544:	00801444 	movi	r2,81
 8013548:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801354c:	00bfffc4 	movi	r2,-1
}
 8013550:	e037883a 	mov	sp,fp
 8013554:	dfc00117 	ldw	ra,4(sp)
 8013558:	df000017 	ldw	fp,0(sp)
 801355c:	dec00204 	addi	sp,sp,8
 8013560:	f800283a 	ret

08013564 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8013564:	defffe04 	addi	sp,sp,-8
 8013568:	df000115 	stw	fp,4(sp)
 801356c:	df000104 	addi	fp,sp,4
 8013570:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8013574:	e0bfff17 	ldw	r2,-4(fp)
 8013578:	108000d0 	cmplti	r2,r2,3
 801357c:	10000d1e 	bne	r2,zero,80135b4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8013580:	008200b4 	movhi	r2,2050
 8013584:	10836004 	addi	r2,r2,3456
 8013588:	e0ffff17 	ldw	r3,-4(fp)
 801358c:	18c00324 	muli	r3,r3,12
 8013590:	10c5883a 	add	r2,r2,r3
 8013594:	10800204 	addi	r2,r2,8
 8013598:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 801359c:	008200b4 	movhi	r2,2050
 80135a0:	10836004 	addi	r2,r2,3456
 80135a4:	e0ffff17 	ldw	r3,-4(fp)
 80135a8:	18c00324 	muli	r3,r3,12
 80135ac:	10c5883a 	add	r2,r2,r3
 80135b0:	10000015 	stw	zero,0(r2)
  }
}
 80135b4:	e037883a 	mov	sp,fp
 80135b8:	df000017 	ldw	fp,0(sp)
 80135bc:	dec00104 	addi	sp,sp,4
 80135c0:	f800283a 	ret

080135c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80135c4:	defff904 	addi	sp,sp,-28
 80135c8:	df000615 	stw	fp,24(sp)
 80135cc:	df000604 	addi	fp,sp,24
 80135d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80135d4:	0005303a 	rdctl	r2,status
 80135d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80135dc:	e0fffc17 	ldw	r3,-16(fp)
 80135e0:	00bfff84 	movi	r2,-2
 80135e4:	1884703a 	and	r2,r3,r2
 80135e8:	1001703a 	wrctl	status,r2
  
  return context;
 80135ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80135f0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80135f4:	d0a00d17 	ldw	r2,-32716(gp)
 80135f8:	10c000c4 	addi	r3,r2,3
 80135fc:	00bfff04 	movi	r2,-4
 8013600:	1884703a 	and	r2,r3,r2
 8013604:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8013608:	d0e00d17 	ldw	r3,-32716(gp)
 801360c:	e0bfff17 	ldw	r2,-4(fp)
 8013610:	1887883a 	add	r3,r3,r2
 8013614:	00830034 	movhi	r2,3072
 8013618:	10800004 	addi	r2,r2,0
 801361c:	10c0062e 	bgeu	r2,r3,8013638 <sbrk+0x74>
 8013620:	e0bffa17 	ldw	r2,-24(fp)
 8013624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013628:	e0bffd17 	ldw	r2,-12(fp)
 801362c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8013630:	00bfffc4 	movi	r2,-1
 8013634:	00000b06 	br	8013664 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8013638:	d0a00d17 	ldw	r2,-32716(gp)
 801363c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8013640:	d0e00d17 	ldw	r3,-32716(gp)
 8013644:	e0bfff17 	ldw	r2,-4(fp)
 8013648:	1885883a 	add	r2,r3,r2
 801364c:	d0a00d15 	stw	r2,-32716(gp)
 8013650:	e0bffa17 	ldw	r2,-24(fp)
 8013654:	e0bffe15 	stw	r2,-8(fp)
 8013658:	e0bffe17 	ldw	r2,-8(fp)
 801365c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8013660:	e0bffb17 	ldw	r2,-20(fp)
} 
 8013664:	e037883a 	mov	sp,fp
 8013668:	df000017 	ldw	fp,0(sp)
 801366c:	dec00104 	addi	sp,sp,4
 8013670:	f800283a 	ret

08013674 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8013674:	defffd04 	addi	sp,sp,-12
 8013678:	dfc00215 	stw	ra,8(sp)
 801367c:	df000115 	stw	fp,4(sp)
 8013680:	df000104 	addi	fp,sp,4
 8013684:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8013688:	e13fff17 	ldw	r4,-4(fp)
 801368c:	8014a4c0 	call	8014a4c <alt_busy_sleep>
}
 8013690:	e037883a 	mov	sp,fp
 8013694:	dfc00117 	ldw	ra,4(sp)
 8013698:	df000017 	ldw	fp,0(sp)
 801369c:	dec00204 	addi	sp,sp,8
 80136a0:	f800283a 	ret

080136a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80136a4:	defffe04 	addi	sp,sp,-8
 80136a8:	dfc00115 	stw	ra,4(sp)
 80136ac:	df000015 	stw	fp,0(sp)
 80136b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80136b4:	008200b4 	movhi	r2,2050
 80136b8:	1087ee04 	addi	r2,r2,8120
 80136bc:	10800017 	ldw	r2,0(r2)
 80136c0:	10000526 	beq	r2,zero,80136d8 <alt_get_errno+0x34>
 80136c4:	008200b4 	movhi	r2,2050
 80136c8:	1087ee04 	addi	r2,r2,8120
 80136cc:	10800017 	ldw	r2,0(r2)
 80136d0:	103ee83a 	callr	r2
 80136d4:	00000206 	br	80136e0 <alt_get_errno+0x3c>
 80136d8:	008200b4 	movhi	r2,2050
 80136dc:	108ebe04 	addi	r2,r2,15096
}
 80136e0:	e037883a 	mov	sp,fp
 80136e4:	dfc00117 	ldw	ra,4(sp)
 80136e8:	df000017 	ldw	fp,0(sp)
 80136ec:	dec00204 	addi	sp,sp,8
 80136f0:	f800283a 	ret

080136f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80136f4:	defff904 	addi	sp,sp,-28
 80136f8:	dfc00615 	stw	ra,24(sp)
 80136fc:	df000515 	stw	fp,20(sp)
 8013700:	df000504 	addi	fp,sp,20
 8013704:	e13ffd15 	stw	r4,-12(fp)
 8013708:	e17ffe15 	stw	r5,-8(fp)
 801370c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013710:	e0bffd17 	ldw	r2,-12(fp)
 8013714:	10000616 	blt	r2,zero,8013730 <write+0x3c>
 8013718:	e0bffd17 	ldw	r2,-12(fp)
 801371c:	10c00324 	muli	r3,r2,12
 8013720:	008200b4 	movhi	r2,2050
 8013724:	10836004 	addi	r2,r2,3456
 8013728:	1885883a 	add	r2,r3,r2
 801372c:	00000106 	br	8013734 <write+0x40>
 8013730:	0005883a 	mov	r2,zero
 8013734:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8013738:	e0bffb17 	ldw	r2,-20(fp)
 801373c:	10002126 	beq	r2,zero,80137c4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8013740:	e0bffb17 	ldw	r2,-20(fp)
 8013744:	10800217 	ldw	r2,8(r2)
 8013748:	108000cc 	andi	r2,r2,3
 801374c:	10001826 	beq	r2,zero,80137b0 <write+0xbc>
 8013750:	e0bffb17 	ldw	r2,-20(fp)
 8013754:	10800017 	ldw	r2,0(r2)
 8013758:	10800617 	ldw	r2,24(r2)
 801375c:	10001426 	beq	r2,zero,80137b0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8013760:	e0bffb17 	ldw	r2,-20(fp)
 8013764:	10800017 	ldw	r2,0(r2)
 8013768:	10800617 	ldw	r2,24(r2)
 801376c:	e0ffff17 	ldw	r3,-4(fp)
 8013770:	e13ffb17 	ldw	r4,-20(fp)
 8013774:	e17ffe17 	ldw	r5,-8(fp)
 8013778:	180d883a 	mov	r6,r3
 801377c:	103ee83a 	callr	r2
 8013780:	e0bffc15 	stw	r2,-16(fp)
 8013784:	e0bffc17 	ldw	r2,-16(fp)
 8013788:	1000070e 	bge	r2,zero,80137a8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 801378c:	80136a40 	call	80136a4 <alt_get_errno>
 8013790:	1007883a 	mov	r3,r2
 8013794:	e0bffc17 	ldw	r2,-16(fp)
 8013798:	0085c83a 	sub	r2,zero,r2
 801379c:	18800015 	stw	r2,0(r3)
        return -1;
 80137a0:	00bfffc4 	movi	r2,-1
 80137a4:	00000c06 	br	80137d8 <write+0xe4>
      }
      return rval;
 80137a8:	e0bffc17 	ldw	r2,-16(fp)
 80137ac:	00000a06 	br	80137d8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80137b0:	80136a40 	call	80136a4 <alt_get_errno>
 80137b4:	1007883a 	mov	r3,r2
 80137b8:	00800344 	movi	r2,13
 80137bc:	18800015 	stw	r2,0(r3)
 80137c0:	00000406 	br	80137d4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80137c4:	80136a40 	call	80136a4 <alt_get_errno>
 80137c8:	1007883a 	mov	r3,r2
 80137cc:	00801444 	movi	r2,81
 80137d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80137d4:	00bfffc4 	movi	r2,-1
}
 80137d8:	e037883a 	mov	sp,fp
 80137dc:	dfc00117 	ldw	ra,4(sp)
 80137e0:	df000017 	ldw	fp,0(sp)
 80137e4:	dec00204 	addi	sp,sp,8
 80137e8:	f800283a 	ret

080137ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80137ec:	defffd04 	addi	sp,sp,-12
 80137f0:	dfc00215 	stw	ra,8(sp)
 80137f4:	df000115 	stw	fp,4(sp)
 80137f8:	df000104 	addi	fp,sp,4
 80137fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8013800:	e13fff17 	ldw	r4,-4(fp)
 8013804:	014200b4 	movhi	r5,2050
 8013808:	2947eb04 	addi	r5,r5,8108
 801380c:	8014be00 	call	8014be0 <alt_dev_llist_insert>
}
 8013810:	e037883a 	mov	sp,fp
 8013814:	dfc00117 	ldw	ra,4(sp)
 8013818:	df000017 	ldw	fp,0(sp)
 801381c:	dec00204 	addi	sp,sp,8
 8013820:	f800283a 	ret

08013824 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8013824:	defffd04 	addi	sp,sp,-12
 8013828:	dfc00215 	stw	ra,8(sp)
 801382c:	df000115 	stw	fp,4(sp)
 8013830:	df000104 	addi	fp,sp,4
 8013834:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8013838:	80153440 	call	8015344 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801383c:	00800044 	movi	r2,1
 8013840:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8013844:	e037883a 	mov	sp,fp
 8013848:	dfc00117 	ldw	ra,4(sp)
 801384c:	df000017 	ldw	fp,0(sp)
 8013850:	dec00204 	addi	sp,sp,8
 8013854:	f800283a 	ret

08013858 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8013858:	defffe04 	addi	sp,sp,-8
 801385c:	dfc00115 	stw	ra,4(sp)
 8013860:	df000015 	stw	fp,0(sp)
 8013864:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8013868:	01082004 	movi	r4,8320
 801386c:	000b883a 	mov	r5,zero
 8013870:	01800104 	movi	r6,4
 8013874:	01c0fa04 	movi	r7,1000
 8013878:	80143ac0 	call	80143ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 801387c:	008200b4 	movhi	r2,2050
 8013880:	108ec604 	addi	r2,r2,15128
 8013884:	00c82804 	movi	r3,8352
 8013888:	10c00015 	stw	r3,0(r2)
 801388c:	008200b4 	movhi	r2,2050
 8013890:	108ec704 	addi	r2,r2,15132
 8013894:	00c0bef4 	movhi	r3,763
 8013898:	18fc2004 	addi	r3,r3,-3968
 801389c:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80138a0:	010200b4 	movhi	r4,2050
 80138a4:	2103ca04 	addi	r4,r4,3880
 80138a8:	000b883a 	mov	r5,zero
 80138ac:	01800144 	movi	r6,5
 80138b0:	8013a500 	call	8013a50 <altera_avalon_jtag_uart_init>
 80138b4:	010200b4 	movhi	r4,2050
 80138b8:	2103c004 	addi	r4,r4,3840
 80138bc:	80137ec0 	call	80137ec <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 80138c0:	010200b4 	movhi	r4,2050
 80138c4:	2107d804 	addi	r4,r4,8032
 80138c8:	80144e40 	call	80144e4 <alt_up_character_lcd_init>
 80138cc:	010200b4 	movhi	r4,2050
 80138d0:	2107d804 	addi	r4,r4,8032
 80138d4:	80137ec0 	call	80137ec <alt_dev_reg>
}
 80138d8:	e037883a 	mov	sp,fp
 80138dc:	dfc00117 	ldw	ra,4(sp)
 80138e0:	df000017 	ldw	fp,0(sp)
 80138e4:	dec00204 	addi	sp,sp,8
 80138e8:	f800283a 	ret

080138ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80138ec:	defffa04 	addi	sp,sp,-24
 80138f0:	dfc00515 	stw	ra,20(sp)
 80138f4:	df000415 	stw	fp,16(sp)
 80138f8:	df000404 	addi	fp,sp,16
 80138fc:	e13ffd15 	stw	r4,-12(fp)
 8013900:	e17ffe15 	stw	r5,-8(fp)
 8013904:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013908:	e0bffd17 	ldw	r2,-12(fp)
 801390c:	10800017 	ldw	r2,0(r2)
 8013910:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8013914:	e0bffc17 	ldw	r2,-16(fp)
 8013918:	10c00a04 	addi	r3,r2,40
 801391c:	e0bffd17 	ldw	r2,-12(fp)
 8013920:	10800217 	ldw	r2,8(r2)
 8013924:	1809883a 	mov	r4,r3
 8013928:	e17ffe17 	ldw	r5,-8(fp)
 801392c:	e1bfff17 	ldw	r6,-4(fp)
 8013930:	100f883a 	mov	r7,r2
 8013934:	8013f140 	call	8013f14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8013938:	e037883a 	mov	sp,fp
 801393c:	dfc00117 	ldw	ra,4(sp)
 8013940:	df000017 	ldw	fp,0(sp)
 8013944:	dec00204 	addi	sp,sp,8
 8013948:	f800283a 	ret

0801394c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801394c:	defffa04 	addi	sp,sp,-24
 8013950:	dfc00515 	stw	ra,20(sp)
 8013954:	df000415 	stw	fp,16(sp)
 8013958:	df000404 	addi	fp,sp,16
 801395c:	e13ffd15 	stw	r4,-12(fp)
 8013960:	e17ffe15 	stw	r5,-8(fp)
 8013964:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013968:	e0bffd17 	ldw	r2,-12(fp)
 801396c:	10800017 	ldw	r2,0(r2)
 8013970:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8013974:	e0bffc17 	ldw	r2,-16(fp)
 8013978:	10c00a04 	addi	r3,r2,40
 801397c:	e0bffd17 	ldw	r2,-12(fp)
 8013980:	10800217 	ldw	r2,8(r2)
 8013984:	1809883a 	mov	r4,r3
 8013988:	e17ffe17 	ldw	r5,-8(fp)
 801398c:	e1bfff17 	ldw	r6,-4(fp)
 8013990:	100f883a 	mov	r7,r2
 8013994:	80141200 	call	8014120 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8013998:	e037883a 	mov	sp,fp
 801399c:	dfc00117 	ldw	ra,4(sp)
 80139a0:	df000017 	ldw	fp,0(sp)
 80139a4:	dec00204 	addi	sp,sp,8
 80139a8:	f800283a 	ret

080139ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80139ac:	defffc04 	addi	sp,sp,-16
 80139b0:	dfc00315 	stw	ra,12(sp)
 80139b4:	df000215 	stw	fp,8(sp)
 80139b8:	df000204 	addi	fp,sp,8
 80139bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80139c0:	e0bfff17 	ldw	r2,-4(fp)
 80139c4:	10800017 	ldw	r2,0(r2)
 80139c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80139cc:	e0bffe17 	ldw	r2,-8(fp)
 80139d0:	10c00a04 	addi	r3,r2,40
 80139d4:	e0bfff17 	ldw	r2,-4(fp)
 80139d8:	10800217 	ldw	r2,8(r2)
 80139dc:	1809883a 	mov	r4,r3
 80139e0:	100b883a 	mov	r5,r2
 80139e4:	8013dc00 	call	8013dc0 <altera_avalon_jtag_uart_close>
}
 80139e8:	e037883a 	mov	sp,fp
 80139ec:	dfc00117 	ldw	ra,4(sp)
 80139f0:	df000017 	ldw	fp,0(sp)
 80139f4:	dec00204 	addi	sp,sp,8
 80139f8:	f800283a 	ret

080139fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80139fc:	defffa04 	addi	sp,sp,-24
 8013a00:	dfc00515 	stw	ra,20(sp)
 8013a04:	df000415 	stw	fp,16(sp)
 8013a08:	df000404 	addi	fp,sp,16
 8013a0c:	e13ffd15 	stw	r4,-12(fp)
 8013a10:	e17ffe15 	stw	r5,-8(fp)
 8013a14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8013a18:	e0bffd17 	ldw	r2,-12(fp)
 8013a1c:	10800017 	ldw	r2,0(r2)
 8013a20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8013a24:	e0bffc17 	ldw	r2,-16(fp)
 8013a28:	10800a04 	addi	r2,r2,40
 8013a2c:	1009883a 	mov	r4,r2
 8013a30:	e17ffe17 	ldw	r5,-8(fp)
 8013a34:	e1bfff17 	ldw	r6,-4(fp)
 8013a38:	8013e280 	call	8013e28 <altera_avalon_jtag_uart_ioctl>
}
 8013a3c:	e037883a 	mov	sp,fp
 8013a40:	dfc00117 	ldw	ra,4(sp)
 8013a44:	df000017 	ldw	fp,0(sp)
 8013a48:	dec00204 	addi	sp,sp,8
 8013a4c:	f800283a 	ret

08013a50 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8013a50:	defffa04 	addi	sp,sp,-24
 8013a54:	dfc00515 	stw	ra,20(sp)
 8013a58:	df000415 	stw	fp,16(sp)
 8013a5c:	df000404 	addi	fp,sp,16
 8013a60:	e13ffd15 	stw	r4,-12(fp)
 8013a64:	e17ffe15 	stw	r5,-8(fp)
 8013a68:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013a6c:	e0bffd17 	ldw	r2,-12(fp)
 8013a70:	00c00044 	movi	r3,1
 8013a74:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8013a78:	e0bffd17 	ldw	r2,-12(fp)
 8013a7c:	10800017 	ldw	r2,0(r2)
 8013a80:	10800104 	addi	r2,r2,4
 8013a84:	1007883a 	mov	r3,r2
 8013a88:	e0bffd17 	ldw	r2,-12(fp)
 8013a8c:	10800817 	ldw	r2,32(r2)
 8013a90:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8013a94:	e0fffe17 	ldw	r3,-8(fp)
 8013a98:	e0bfff17 	ldw	r2,-4(fp)
 8013a9c:	d8000015 	stw	zero,0(sp)
 8013aa0:	1809883a 	mov	r4,r3
 8013aa4:	100b883a 	mov	r5,r2
 8013aa8:	01820074 	movhi	r6,2049
 8013aac:	318ec504 	addi	r6,r6,15124
 8013ab0:	e1fffd17 	ldw	r7,-12(fp)
 8013ab4:	8012d940 	call	8012d94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8013ab8:	e0bffd17 	ldw	r2,-12(fp)
 8013abc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8013ac0:	e0bffd17 	ldw	r2,-12(fp)
 8013ac4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013ac8:	008200b4 	movhi	r2,2050
 8013acc:	108ec804 	addi	r2,r2,15136
 8013ad0:	10800017 	ldw	r2,0(r2)
 8013ad4:	1809883a 	mov	r4,r3
 8013ad8:	100b883a 	mov	r5,r2
 8013adc:	01820074 	movhi	r6,2049
 8013ae0:	318f4604 	addi	r6,r6,15640
 8013ae4:	e1fffd17 	ldw	r7,-12(fp)
 8013ae8:	801490c0 	call	801490c <alt_alarm_start>
 8013aec:	1000040e 	bge	r2,zero,8013b00 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8013af0:	e0fffd17 	ldw	r3,-12(fp)
 8013af4:	00a00034 	movhi	r2,32768
 8013af8:	10bfffc4 	addi	r2,r2,-1
 8013afc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8013b00:	e037883a 	mov	sp,fp
 8013b04:	dfc00117 	ldw	ra,4(sp)
 8013b08:	df000017 	ldw	fp,0(sp)
 8013b0c:	dec00204 	addi	sp,sp,8
 8013b10:	f800283a 	ret

08013b14 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8013b14:	defff804 	addi	sp,sp,-32
 8013b18:	df000715 	stw	fp,28(sp)
 8013b1c:	df000704 	addi	fp,sp,28
 8013b20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8013b24:	e0bfff17 	ldw	r2,-4(fp)
 8013b28:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8013b2c:	e0bffb17 	ldw	r2,-20(fp)
 8013b30:	10800017 	ldw	r2,0(r2)
 8013b34:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013b38:	e0bffc17 	ldw	r2,-16(fp)
 8013b3c:	10800104 	addi	r2,r2,4
 8013b40:	10800037 	ldwio	r2,0(r2)
 8013b44:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8013b48:	e0bffd17 	ldw	r2,-12(fp)
 8013b4c:	1080c00c 	andi	r2,r2,768
 8013b50:	1000011e 	bne	r2,zero,8013b58 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8013b54:	00006c06 	br	8013d08 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8013b58:	e0bffd17 	ldw	r2,-12(fp)
 8013b5c:	1080400c 	andi	r2,r2,256
 8013b60:	10003426 	beq	r2,zero,8013c34 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8013b64:	00800074 	movhi	r2,1
 8013b68:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013b6c:	e0bffb17 	ldw	r2,-20(fp)
 8013b70:	10800a17 	ldw	r2,40(r2)
 8013b74:	10800044 	addi	r2,r2,1
 8013b78:	1081ffcc 	andi	r2,r2,2047
 8013b7c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8013b80:	e0bffb17 	ldw	r2,-20(fp)
 8013b84:	10c00b17 	ldw	r3,44(r2)
 8013b88:	e0bffe17 	ldw	r2,-8(fp)
 8013b8c:	1880011e 	bne	r3,r2,8013b94 <altera_avalon_jtag_uart_irq+0x80>
          break;
 8013b90:	00001606 	br	8013bec <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8013b94:	e0bffc17 	ldw	r2,-16(fp)
 8013b98:	10800037 	ldwio	r2,0(r2)
 8013b9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8013ba0:	e0bff917 	ldw	r2,-28(fp)
 8013ba4:	10a0000c 	andi	r2,r2,32768
 8013ba8:	1000011e 	bne	r2,zero,8013bb0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8013bac:	00000f06 	br	8013bec <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8013bb0:	e0bffb17 	ldw	r2,-20(fp)
 8013bb4:	10800a17 	ldw	r2,40(r2)
 8013bb8:	e0fff917 	ldw	r3,-28(fp)
 8013bbc:	1809883a 	mov	r4,r3
 8013bc0:	e0fffb17 	ldw	r3,-20(fp)
 8013bc4:	1885883a 	add	r2,r3,r2
 8013bc8:	10800e04 	addi	r2,r2,56
 8013bcc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013bd0:	e0bffb17 	ldw	r2,-20(fp)
 8013bd4:	10800a17 	ldw	r2,40(r2)
 8013bd8:	10800044 	addi	r2,r2,1
 8013bdc:	10c1ffcc 	andi	r3,r2,2047
 8013be0:	e0bffb17 	ldw	r2,-20(fp)
 8013be4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8013be8:	003fe006 	br	8013b6c <__alt_data_end+0xfc013b6c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8013bec:	e0bff917 	ldw	r2,-28(fp)
 8013bf0:	10bfffec 	andhi	r2,r2,65535
 8013bf4:	10000f26 	beq	r2,zero,8013c34 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013bf8:	e0bffb17 	ldw	r2,-20(fp)
 8013bfc:	10c00817 	ldw	r3,32(r2)
 8013c00:	00bfff84 	movi	r2,-2
 8013c04:	1886703a 	and	r3,r3,r2
 8013c08:	e0bffb17 	ldw	r2,-20(fp)
 8013c0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8013c10:	e0bffc17 	ldw	r2,-16(fp)
 8013c14:	10800104 	addi	r2,r2,4
 8013c18:	1007883a 	mov	r3,r2
 8013c1c:	e0bffb17 	ldw	r2,-20(fp)
 8013c20:	10800817 	ldw	r2,32(r2)
 8013c24:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013c28:	e0bffc17 	ldw	r2,-16(fp)
 8013c2c:	10800104 	addi	r2,r2,4
 8013c30:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8013c34:	e0bffd17 	ldw	r2,-12(fp)
 8013c38:	1080800c 	andi	r2,r2,512
 8013c3c:	10003126 	beq	r2,zero,8013d04 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8013c40:	e0bffd17 	ldw	r2,-12(fp)
 8013c44:	1004d43a 	srli	r2,r2,16
 8013c48:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013c4c:	00001406 	br	8013ca0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8013c50:	e0bffc17 	ldw	r2,-16(fp)
 8013c54:	e0fffb17 	ldw	r3,-20(fp)
 8013c58:	18c00d17 	ldw	r3,52(r3)
 8013c5c:	e13ffb17 	ldw	r4,-20(fp)
 8013c60:	20c7883a 	add	r3,r4,r3
 8013c64:	18c20e04 	addi	r3,r3,2104
 8013c68:	18c00003 	ldbu	r3,0(r3)
 8013c6c:	18c03fcc 	andi	r3,r3,255
 8013c70:	18c0201c 	xori	r3,r3,128
 8013c74:	18ffe004 	addi	r3,r3,-128
 8013c78:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013c7c:	e0bffb17 	ldw	r2,-20(fp)
 8013c80:	10800d17 	ldw	r2,52(r2)
 8013c84:	10800044 	addi	r2,r2,1
 8013c88:	10c1ffcc 	andi	r3,r2,2047
 8013c8c:	e0bffb17 	ldw	r2,-20(fp)
 8013c90:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8013c94:	e0bffa17 	ldw	r2,-24(fp)
 8013c98:	10bfffc4 	addi	r2,r2,-1
 8013c9c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013ca0:	e0bffa17 	ldw	r2,-24(fp)
 8013ca4:	10000526 	beq	r2,zero,8013cbc <altera_avalon_jtag_uart_irq+0x1a8>
 8013ca8:	e0bffb17 	ldw	r2,-20(fp)
 8013cac:	10c00d17 	ldw	r3,52(r2)
 8013cb0:	e0bffb17 	ldw	r2,-20(fp)
 8013cb4:	10800c17 	ldw	r2,48(r2)
 8013cb8:	18bfe51e 	bne	r3,r2,8013c50 <__alt_data_end+0xfc013c50>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8013cbc:	e0bffa17 	ldw	r2,-24(fp)
 8013cc0:	10001026 	beq	r2,zero,8013d04 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8013cc4:	e0bffb17 	ldw	r2,-20(fp)
 8013cc8:	10c00817 	ldw	r3,32(r2)
 8013ccc:	00bfff44 	movi	r2,-3
 8013cd0:	1886703a 	and	r3,r3,r2
 8013cd4:	e0bffb17 	ldw	r2,-20(fp)
 8013cd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013cdc:	e0bffb17 	ldw	r2,-20(fp)
 8013ce0:	10800017 	ldw	r2,0(r2)
 8013ce4:	10800104 	addi	r2,r2,4
 8013ce8:	1007883a 	mov	r3,r2
 8013cec:	e0bffb17 	ldw	r2,-20(fp)
 8013cf0:	10800817 	ldw	r2,32(r2)
 8013cf4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013cf8:	e0bffc17 	ldw	r2,-16(fp)
 8013cfc:	10800104 	addi	r2,r2,4
 8013d00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8013d04:	003f8c06 	br	8013b38 <__alt_data_end+0xfc013b38>
}
 8013d08:	e037883a 	mov	sp,fp
 8013d0c:	df000017 	ldw	fp,0(sp)
 8013d10:	dec00104 	addi	sp,sp,4
 8013d14:	f800283a 	ret

08013d18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8013d18:	defff804 	addi	sp,sp,-32
 8013d1c:	df000715 	stw	fp,28(sp)
 8013d20:	df000704 	addi	fp,sp,28
 8013d24:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8013d28:	e0bffb17 	ldw	r2,-20(fp)
 8013d2c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8013d30:	e0bff917 	ldw	r2,-28(fp)
 8013d34:	10800017 	ldw	r2,0(r2)
 8013d38:	10800104 	addi	r2,r2,4
 8013d3c:	10800037 	ldwio	r2,0(r2)
 8013d40:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8013d44:	e0bffa17 	ldw	r2,-24(fp)
 8013d48:	1081000c 	andi	r2,r2,1024
 8013d4c:	10000b26 	beq	r2,zero,8013d7c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8013d50:	e0bff917 	ldw	r2,-28(fp)
 8013d54:	10800017 	ldw	r2,0(r2)
 8013d58:	10800104 	addi	r2,r2,4
 8013d5c:	1007883a 	mov	r3,r2
 8013d60:	e0bff917 	ldw	r2,-28(fp)
 8013d64:	10800817 	ldw	r2,32(r2)
 8013d68:	10810014 	ori	r2,r2,1024
 8013d6c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8013d70:	e0bff917 	ldw	r2,-28(fp)
 8013d74:	10000915 	stw	zero,36(r2)
 8013d78:	00000a06 	br	8013da4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8013d7c:	e0bff917 	ldw	r2,-28(fp)
 8013d80:	10c00917 	ldw	r3,36(r2)
 8013d84:	00a00034 	movhi	r2,32768
 8013d88:	10bfff04 	addi	r2,r2,-4
 8013d8c:	10c00536 	bltu	r2,r3,8013da4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8013d90:	e0bff917 	ldw	r2,-28(fp)
 8013d94:	10800917 	ldw	r2,36(r2)
 8013d98:	10c00044 	addi	r3,r2,1
 8013d9c:	e0bff917 	ldw	r2,-28(fp)
 8013da0:	10c00915 	stw	r3,36(r2)
 8013da4:	008200b4 	movhi	r2,2050
 8013da8:	108ec804 	addi	r2,r2,15136
 8013dac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8013db0:	e037883a 	mov	sp,fp
 8013db4:	df000017 	ldw	fp,0(sp)
 8013db8:	dec00104 	addi	sp,sp,4
 8013dbc:	f800283a 	ret

08013dc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8013dc0:	defffd04 	addi	sp,sp,-12
 8013dc4:	df000215 	stw	fp,8(sp)
 8013dc8:	df000204 	addi	fp,sp,8
 8013dcc:	e13ffe15 	stw	r4,-8(fp)
 8013dd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013dd4:	00000506 	br	8013dec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8013dd8:	e0bfff17 	ldw	r2,-4(fp)
 8013ddc:	1090000c 	andi	r2,r2,16384
 8013de0:	10000226 	beq	r2,zero,8013dec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8013de4:	00bffd44 	movi	r2,-11
 8013de8:	00000b06 	br	8013e18 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013dec:	e0bffe17 	ldw	r2,-8(fp)
 8013df0:	10c00d17 	ldw	r3,52(r2)
 8013df4:	e0bffe17 	ldw	r2,-8(fp)
 8013df8:	10800c17 	ldw	r2,48(r2)
 8013dfc:	18800526 	beq	r3,r2,8013e14 <altera_avalon_jtag_uart_close+0x54>
 8013e00:	e0bffe17 	ldw	r2,-8(fp)
 8013e04:	10c00917 	ldw	r3,36(r2)
 8013e08:	e0bffe17 	ldw	r2,-8(fp)
 8013e0c:	10800117 	ldw	r2,4(r2)
 8013e10:	18bff136 	bltu	r3,r2,8013dd8 <__alt_data_end+0xfc013dd8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8013e14:	0005883a 	mov	r2,zero
}
 8013e18:	e037883a 	mov	sp,fp
 8013e1c:	df000017 	ldw	fp,0(sp)
 8013e20:	dec00104 	addi	sp,sp,4
 8013e24:	f800283a 	ret

08013e28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8013e28:	defffa04 	addi	sp,sp,-24
 8013e2c:	df000515 	stw	fp,20(sp)
 8013e30:	df000504 	addi	fp,sp,20
 8013e34:	e13ffd15 	stw	r4,-12(fp)
 8013e38:	e17ffe15 	stw	r5,-8(fp)
 8013e3c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8013e40:	00bff9c4 	movi	r2,-25
 8013e44:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8013e48:	e0bffe17 	ldw	r2,-8(fp)
 8013e4c:	10da8060 	cmpeqi	r3,r2,27137
 8013e50:	1800031e 	bne	r3,zero,8013e60 <altera_avalon_jtag_uart_ioctl+0x38>
 8013e54:	109a80a0 	cmpeqi	r2,r2,27138
 8013e58:	1000191e 	bne	r2,zero,8013ec0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8013e5c:	00002806 	br	8013f00 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8013e60:	e0bffd17 	ldw	r2,-12(fp)
 8013e64:	10c00117 	ldw	r3,4(r2)
 8013e68:	00a00034 	movhi	r2,32768
 8013e6c:	10bfffc4 	addi	r2,r2,-1
 8013e70:	18801226 	beq	r3,r2,8013ebc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8013e74:	e0bfff17 	ldw	r2,-4(fp)
 8013e78:	10800017 	ldw	r2,0(r2)
 8013e7c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8013e80:	e0bffc17 	ldw	r2,-16(fp)
 8013e84:	10800090 	cmplti	r2,r2,2
 8013e88:	1000061e 	bne	r2,zero,8013ea4 <altera_avalon_jtag_uart_ioctl+0x7c>
 8013e8c:	e0fffc17 	ldw	r3,-16(fp)
 8013e90:	00a00034 	movhi	r2,32768
 8013e94:	10bfffc4 	addi	r2,r2,-1
 8013e98:	18800226 	beq	r3,r2,8013ea4 <altera_avalon_jtag_uart_ioctl+0x7c>
 8013e9c:	e0bffc17 	ldw	r2,-16(fp)
 8013ea0:	00000206 	br	8013eac <altera_avalon_jtag_uart_ioctl+0x84>
 8013ea4:	00a00034 	movhi	r2,32768
 8013ea8:	10bfff84 	addi	r2,r2,-2
 8013eac:	e0fffd17 	ldw	r3,-12(fp)
 8013eb0:	18800115 	stw	r2,4(r3)
      rc = 0;
 8013eb4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013eb8:	00001106 	br	8013f00 <altera_avalon_jtag_uart_ioctl+0xd8>
 8013ebc:	00001006 	br	8013f00 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8013ec0:	e0bffd17 	ldw	r2,-12(fp)
 8013ec4:	10c00117 	ldw	r3,4(r2)
 8013ec8:	00a00034 	movhi	r2,32768
 8013ecc:	10bfffc4 	addi	r2,r2,-1
 8013ed0:	18800a26 	beq	r3,r2,8013efc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8013ed4:	e0bffd17 	ldw	r2,-12(fp)
 8013ed8:	10c00917 	ldw	r3,36(r2)
 8013edc:	e0bffd17 	ldw	r2,-12(fp)
 8013ee0:	10800117 	ldw	r2,4(r2)
 8013ee4:	1885803a 	cmpltu	r2,r3,r2
 8013ee8:	10c03fcc 	andi	r3,r2,255
 8013eec:	e0bfff17 	ldw	r2,-4(fp)
 8013ef0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8013ef4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013ef8:	00000006 	br	8013efc <altera_avalon_jtag_uart_ioctl+0xd4>
 8013efc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8013f00:	e0bffb17 	ldw	r2,-20(fp)
}
 8013f04:	e037883a 	mov	sp,fp
 8013f08:	df000017 	ldw	fp,0(sp)
 8013f0c:	dec00104 	addi	sp,sp,4
 8013f10:	f800283a 	ret

08013f14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8013f14:	defff304 	addi	sp,sp,-52
 8013f18:	dfc00c15 	stw	ra,48(sp)
 8013f1c:	df000b15 	stw	fp,44(sp)
 8013f20:	df000b04 	addi	fp,sp,44
 8013f24:	e13ffc15 	stw	r4,-16(fp)
 8013f28:	e17ffd15 	stw	r5,-12(fp)
 8013f2c:	e1bffe15 	stw	r6,-8(fp)
 8013f30:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8013f34:	e0bffd17 	ldw	r2,-12(fp)
 8013f38:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013f3c:	00004906 	br	8014064 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8013f40:	e0bffc17 	ldw	r2,-16(fp)
 8013f44:	10800a17 	ldw	r2,40(r2)
 8013f48:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8013f4c:	e0bffc17 	ldw	r2,-16(fp)
 8013f50:	10800b17 	ldw	r2,44(r2)
 8013f54:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8013f58:	e0fff717 	ldw	r3,-36(fp)
 8013f5c:	e0bff817 	ldw	r2,-32(fp)
 8013f60:	18800536 	bltu	r3,r2,8013f78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8013f64:	e0fff717 	ldw	r3,-36(fp)
 8013f68:	e0bff817 	ldw	r2,-32(fp)
 8013f6c:	1885c83a 	sub	r2,r3,r2
 8013f70:	e0bff615 	stw	r2,-40(fp)
 8013f74:	00000406 	br	8013f88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8013f78:	00c20004 	movi	r3,2048
 8013f7c:	e0bff817 	ldw	r2,-32(fp)
 8013f80:	1885c83a 	sub	r2,r3,r2
 8013f84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8013f88:	e0bff617 	ldw	r2,-40(fp)
 8013f8c:	1000011e 	bne	r2,zero,8013f94 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8013f90:	00001d06 	br	8014008 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8013f94:	e0fffe17 	ldw	r3,-8(fp)
 8013f98:	e0bff617 	ldw	r2,-40(fp)
 8013f9c:	1880022e 	bgeu	r3,r2,8013fa8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8013fa0:	e0bffe17 	ldw	r2,-8(fp)
 8013fa4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8013fa8:	e0bff817 	ldw	r2,-32(fp)
 8013fac:	10800e04 	addi	r2,r2,56
 8013fb0:	e0fffc17 	ldw	r3,-16(fp)
 8013fb4:	1885883a 	add	r2,r3,r2
 8013fb8:	e13ff517 	ldw	r4,-44(fp)
 8013fbc:	100b883a 	mov	r5,r2
 8013fc0:	e1bff617 	ldw	r6,-40(fp)
 8013fc4:	800b8480 	call	800b848 <memcpy>
      ptr   += n;
 8013fc8:	e0fff517 	ldw	r3,-44(fp)
 8013fcc:	e0bff617 	ldw	r2,-40(fp)
 8013fd0:	1885883a 	add	r2,r3,r2
 8013fd4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8013fd8:	e0fffe17 	ldw	r3,-8(fp)
 8013fdc:	e0bff617 	ldw	r2,-40(fp)
 8013fe0:	1885c83a 	sub	r2,r3,r2
 8013fe4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013fe8:	e0fff817 	ldw	r3,-32(fp)
 8013fec:	e0bff617 	ldw	r2,-40(fp)
 8013ff0:	1885883a 	add	r2,r3,r2
 8013ff4:	10c1ffcc 	andi	r3,r2,2047
 8013ff8:	e0bffc17 	ldw	r2,-16(fp)
 8013ffc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8014000:	e0bffe17 	ldw	r2,-8(fp)
 8014004:	00bfce16 	blt	zero,r2,8013f40 <__alt_data_end+0xfc013f40>

    /* If we read any data then return it */
    if (ptr != buffer)
 8014008:	e0fff517 	ldw	r3,-44(fp)
 801400c:	e0bffd17 	ldw	r2,-12(fp)
 8014010:	18800126 	beq	r3,r2,8014018 <altera_avalon_jtag_uart_read+0x104>
      break;
 8014014:	00001506 	br	801406c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8014018:	e0bfff17 	ldw	r2,-4(fp)
 801401c:	1090000c 	andi	r2,r2,16384
 8014020:	10000126 	beq	r2,zero,8014028 <altera_avalon_jtag_uart_read+0x114>
      break;
 8014024:	00001106 	br	801406c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8014028:	0001883a 	nop
 801402c:	e0bffc17 	ldw	r2,-16(fp)
 8014030:	10c00a17 	ldw	r3,40(r2)
 8014034:	e0bff717 	ldw	r2,-36(fp)
 8014038:	1880051e 	bne	r3,r2,8014050 <altera_avalon_jtag_uart_read+0x13c>
 801403c:	e0bffc17 	ldw	r2,-16(fp)
 8014040:	10c00917 	ldw	r3,36(r2)
 8014044:	e0bffc17 	ldw	r2,-16(fp)
 8014048:	10800117 	ldw	r2,4(r2)
 801404c:	18bff736 	bltu	r3,r2,801402c <__alt_data_end+0xfc01402c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8014050:	e0bffc17 	ldw	r2,-16(fp)
 8014054:	10c00a17 	ldw	r3,40(r2)
 8014058:	e0bff717 	ldw	r2,-36(fp)
 801405c:	1880011e 	bne	r3,r2,8014064 <altera_avalon_jtag_uart_read+0x150>
      break;
 8014060:	00000206 	br	801406c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8014064:	e0bffe17 	ldw	r2,-8(fp)
 8014068:	00bfb516 	blt	zero,r2,8013f40 <__alt_data_end+0xfc013f40>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801406c:	e0fff517 	ldw	r3,-44(fp)
 8014070:	e0bffd17 	ldw	r2,-12(fp)
 8014074:	18801826 	beq	r3,r2,80140d8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014078:	0005303a 	rdctl	r2,status
 801407c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014080:	e0fffa17 	ldw	r3,-24(fp)
 8014084:	00bfff84 	movi	r2,-2
 8014088:	1884703a 	and	r2,r3,r2
 801408c:	1001703a 	wrctl	status,r2
  
  return context;
 8014090:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8014094:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8014098:	e0bffc17 	ldw	r2,-16(fp)
 801409c:	10800817 	ldw	r2,32(r2)
 80140a0:	10c00054 	ori	r3,r2,1
 80140a4:	e0bffc17 	ldw	r2,-16(fp)
 80140a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80140ac:	e0bffc17 	ldw	r2,-16(fp)
 80140b0:	10800017 	ldw	r2,0(r2)
 80140b4:	10800104 	addi	r2,r2,4
 80140b8:	1007883a 	mov	r3,r2
 80140bc:	e0bffc17 	ldw	r2,-16(fp)
 80140c0:	10800817 	ldw	r2,32(r2)
 80140c4:	18800035 	stwio	r2,0(r3)
 80140c8:	e0bff917 	ldw	r2,-28(fp)
 80140cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80140d0:	e0bffb17 	ldw	r2,-20(fp)
 80140d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80140d8:	e0fff517 	ldw	r3,-44(fp)
 80140dc:	e0bffd17 	ldw	r2,-12(fp)
 80140e0:	18800426 	beq	r3,r2,80140f4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 80140e4:	e0fff517 	ldw	r3,-44(fp)
 80140e8:	e0bffd17 	ldw	r2,-12(fp)
 80140ec:	1885c83a 	sub	r2,r3,r2
 80140f0:	00000606 	br	801410c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 80140f4:	e0bfff17 	ldw	r2,-4(fp)
 80140f8:	1090000c 	andi	r2,r2,16384
 80140fc:	10000226 	beq	r2,zero,8014108 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8014100:	00bffd44 	movi	r2,-11
 8014104:	00000106 	br	801410c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8014108:	00bffec4 	movi	r2,-5
}
 801410c:	e037883a 	mov	sp,fp
 8014110:	dfc00117 	ldw	ra,4(sp)
 8014114:	df000017 	ldw	fp,0(sp)
 8014118:	dec00204 	addi	sp,sp,8
 801411c:	f800283a 	ret

08014120 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8014120:	defff304 	addi	sp,sp,-52
 8014124:	dfc00c15 	stw	ra,48(sp)
 8014128:	df000b15 	stw	fp,44(sp)
 801412c:	df000b04 	addi	fp,sp,44
 8014130:	e13ffc15 	stw	r4,-16(fp)
 8014134:	e17ffd15 	stw	r5,-12(fp)
 8014138:	e1bffe15 	stw	r6,-8(fp)
 801413c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8014140:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8014144:	e0bffd17 	ldw	r2,-12(fp)
 8014148:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801414c:	00003806 	br	8014230 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8014150:	e0bffc17 	ldw	r2,-16(fp)
 8014154:	10800c17 	ldw	r2,48(r2)
 8014158:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801415c:	e0bffc17 	ldw	r2,-16(fp)
 8014160:	10800d17 	ldw	r2,52(r2)
 8014164:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8014168:	e0fff817 	ldw	r3,-32(fp)
 801416c:	e0bff517 	ldw	r2,-44(fp)
 8014170:	1880062e 	bgeu	r3,r2,801418c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8014174:	e0fff517 	ldw	r3,-44(fp)
 8014178:	e0bff817 	ldw	r2,-32(fp)
 801417c:	1885c83a 	sub	r2,r3,r2
 8014180:	10bfffc4 	addi	r2,r2,-1
 8014184:	e0bff615 	stw	r2,-40(fp)
 8014188:	00000b06 	br	80141b8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801418c:	e0bff517 	ldw	r2,-44(fp)
 8014190:	10000526 	beq	r2,zero,80141a8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8014194:	00c20004 	movi	r3,2048
 8014198:	e0bff817 	ldw	r2,-32(fp)
 801419c:	1885c83a 	sub	r2,r3,r2
 80141a0:	e0bff615 	stw	r2,-40(fp)
 80141a4:	00000406 	br	80141b8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80141a8:	00c1ffc4 	movi	r3,2047
 80141ac:	e0bff817 	ldw	r2,-32(fp)
 80141b0:	1885c83a 	sub	r2,r3,r2
 80141b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80141b8:	e0bff617 	ldw	r2,-40(fp)
 80141bc:	1000011e 	bne	r2,zero,80141c4 <altera_avalon_jtag_uart_write+0xa4>
        break;
 80141c0:	00001d06 	br	8014238 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 80141c4:	e0fffe17 	ldw	r3,-8(fp)
 80141c8:	e0bff617 	ldw	r2,-40(fp)
 80141cc:	1880022e 	bgeu	r3,r2,80141d8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 80141d0:	e0bffe17 	ldw	r2,-8(fp)
 80141d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80141d8:	e0bff817 	ldw	r2,-32(fp)
 80141dc:	10820e04 	addi	r2,r2,2104
 80141e0:	e0fffc17 	ldw	r3,-16(fp)
 80141e4:	1885883a 	add	r2,r3,r2
 80141e8:	1009883a 	mov	r4,r2
 80141ec:	e17ffd17 	ldw	r5,-12(fp)
 80141f0:	e1bff617 	ldw	r6,-40(fp)
 80141f4:	800b8480 	call	800b848 <memcpy>
      ptr   += n;
 80141f8:	e0fffd17 	ldw	r3,-12(fp)
 80141fc:	e0bff617 	ldw	r2,-40(fp)
 8014200:	1885883a 	add	r2,r3,r2
 8014204:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8014208:	e0fffe17 	ldw	r3,-8(fp)
 801420c:	e0bff617 	ldw	r2,-40(fp)
 8014210:	1885c83a 	sub	r2,r3,r2
 8014214:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8014218:	e0fff817 	ldw	r3,-32(fp)
 801421c:	e0bff617 	ldw	r2,-40(fp)
 8014220:	1885883a 	add	r2,r3,r2
 8014224:	10c1ffcc 	andi	r3,r2,2047
 8014228:	e0bffc17 	ldw	r2,-16(fp)
 801422c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8014230:	e0bffe17 	ldw	r2,-8(fp)
 8014234:	00bfc616 	blt	zero,r2,8014150 <__alt_data_end+0xfc014150>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014238:	0005303a 	rdctl	r2,status
 801423c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014240:	e0fffa17 	ldw	r3,-24(fp)
 8014244:	00bfff84 	movi	r2,-2
 8014248:	1884703a 	and	r2,r3,r2
 801424c:	1001703a 	wrctl	status,r2
  
  return context;
 8014250:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8014254:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8014258:	e0bffc17 	ldw	r2,-16(fp)
 801425c:	10800817 	ldw	r2,32(r2)
 8014260:	10c00094 	ori	r3,r2,2
 8014264:	e0bffc17 	ldw	r2,-16(fp)
 8014268:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801426c:	e0bffc17 	ldw	r2,-16(fp)
 8014270:	10800017 	ldw	r2,0(r2)
 8014274:	10800104 	addi	r2,r2,4
 8014278:	1007883a 	mov	r3,r2
 801427c:	e0bffc17 	ldw	r2,-16(fp)
 8014280:	10800817 	ldw	r2,32(r2)
 8014284:	18800035 	stwio	r2,0(r3)
 8014288:	e0bff917 	ldw	r2,-28(fp)
 801428c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014290:	e0bffb17 	ldw	r2,-20(fp)
 8014294:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8014298:	e0bffe17 	ldw	r2,-8(fp)
 801429c:	0080120e 	bge	zero,r2,80142e8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 80142a0:	e0bfff17 	ldw	r2,-4(fp)
 80142a4:	1090000c 	andi	r2,r2,16384
 80142a8:	10000126 	beq	r2,zero,80142b0 <altera_avalon_jtag_uart_write+0x190>
        break;
 80142ac:	00001006 	br	80142f0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80142b0:	0001883a 	nop
 80142b4:	e0bffc17 	ldw	r2,-16(fp)
 80142b8:	10c00d17 	ldw	r3,52(r2)
 80142bc:	e0bff517 	ldw	r2,-44(fp)
 80142c0:	1880051e 	bne	r3,r2,80142d8 <altera_avalon_jtag_uart_write+0x1b8>
 80142c4:	e0bffc17 	ldw	r2,-16(fp)
 80142c8:	10c00917 	ldw	r3,36(r2)
 80142cc:	e0bffc17 	ldw	r2,-16(fp)
 80142d0:	10800117 	ldw	r2,4(r2)
 80142d4:	18bff736 	bltu	r3,r2,80142b4 <__alt_data_end+0xfc0142b4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80142d8:	e0bffc17 	ldw	r2,-16(fp)
 80142dc:	10800917 	ldw	r2,36(r2)
 80142e0:	10000126 	beq	r2,zero,80142e8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 80142e4:	00000206 	br	80142f0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 80142e8:	e0bffe17 	ldw	r2,-8(fp)
 80142ec:	00bf9716 	blt	zero,r2,801414c <__alt_data_end+0xfc01414c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80142f0:	e0fffd17 	ldw	r3,-12(fp)
 80142f4:	e0bff717 	ldw	r2,-36(fp)
 80142f8:	18800426 	beq	r3,r2,801430c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80142fc:	e0fffd17 	ldw	r3,-12(fp)
 8014300:	e0bff717 	ldw	r2,-36(fp)
 8014304:	1885c83a 	sub	r2,r3,r2
 8014308:	00000606 	br	8014324 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801430c:	e0bfff17 	ldw	r2,-4(fp)
 8014310:	1090000c 	andi	r2,r2,16384
 8014314:	10000226 	beq	r2,zero,8014320 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8014318:	00bffd44 	movi	r2,-11
 801431c:	00000106 	br	8014324 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8014320:	00bffec4 	movi	r2,-5
}
 8014324:	e037883a 	mov	sp,fp
 8014328:	dfc00117 	ldw	ra,4(sp)
 801432c:	df000017 	ldw	fp,0(sp)
 8014330:	dec00204 	addi	sp,sp,8
 8014334:	f800283a 	ret

08014338 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8014338:	defffa04 	addi	sp,sp,-24
 801433c:	dfc00515 	stw	ra,20(sp)
 8014340:	df000415 	stw	fp,16(sp)
 8014344:	df000404 	addi	fp,sp,16
 8014348:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801434c:	0007883a 	mov	r3,zero
 8014350:	e0bfff17 	ldw	r2,-4(fp)
 8014354:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8014358:	e0bfff17 	ldw	r2,-4(fp)
 801435c:	10800104 	addi	r2,r2,4
 8014360:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014364:	0005303a 	rdctl	r2,status
 8014368:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801436c:	e0fffd17 	ldw	r3,-12(fp)
 8014370:	00bfff84 	movi	r2,-2
 8014374:	1884703a 	and	r2,r3,r2
 8014378:	1001703a 	wrctl	status,r2
  
  return context;
 801437c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8014380:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8014384:	80152400 	call	8015240 <alt_tick>
 8014388:	e0bffc17 	ldw	r2,-16(fp)
 801438c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014390:	e0bffe17 	ldw	r2,-8(fp)
 8014394:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8014398:	e037883a 	mov	sp,fp
 801439c:	dfc00117 	ldw	ra,4(sp)
 80143a0:	df000017 	ldw	fp,0(sp)
 80143a4:	dec00204 	addi	sp,sp,8
 80143a8:	f800283a 	ret

080143ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80143ac:	defff804 	addi	sp,sp,-32
 80143b0:	dfc00715 	stw	ra,28(sp)
 80143b4:	df000615 	stw	fp,24(sp)
 80143b8:	df000604 	addi	fp,sp,24
 80143bc:	e13ffc15 	stw	r4,-16(fp)
 80143c0:	e17ffd15 	stw	r5,-12(fp)
 80143c4:	e1bffe15 	stw	r6,-8(fp)
 80143c8:	e1ffff15 	stw	r7,-4(fp)
 80143cc:	e0bfff17 	ldw	r2,-4(fp)
 80143d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80143d4:	008200b4 	movhi	r2,2050
 80143d8:	108ec804 	addi	r2,r2,15136
 80143dc:	10800017 	ldw	r2,0(r2)
 80143e0:	1000041e 	bne	r2,zero,80143f4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 80143e4:	008200b4 	movhi	r2,2050
 80143e8:	108ec804 	addi	r2,r2,15136
 80143ec:	e0fffb17 	ldw	r3,-20(fp)
 80143f0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80143f4:	e0bffc17 	ldw	r2,-16(fp)
 80143f8:	10800104 	addi	r2,r2,4
 80143fc:	00c001c4 	movi	r3,7
 8014400:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8014404:	d8000015 	stw	zero,0(sp)
 8014408:	e13ffd17 	ldw	r4,-12(fp)
 801440c:	e17ffe17 	ldw	r5,-8(fp)
 8014410:	01820074 	movhi	r6,2049
 8014414:	3190ce04 	addi	r6,r6,17208
 8014418:	e1fffc17 	ldw	r7,-16(fp)
 801441c:	8012d940 	call	8012d94 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8014420:	e037883a 	mov	sp,fp
 8014424:	dfc00117 	ldw	ra,4(sp)
 8014428:	df000017 	ldw	fp,0(sp)
 801442c:	dec00204 	addi	sp,sp,8
 8014430:	f800283a 	ret

08014434 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8014434:	defffc04 	addi	sp,sp,-16
 8014438:	df000315 	stw	fp,12(sp)
 801443c:	df000304 	addi	fp,sp,12
 8014440:	e13ffe15 	stw	r4,-8(fp)
 8014444:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8014448:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 801444c:	e0bfff17 	ldw	r2,-4(fp)
 8014450:	1000061e 	bne	r2,zero,801446c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8014454:	e0bffe17 	ldw	r2,-8(fp)
 8014458:	1007883a 	mov	r3,r2
 801445c:	e0bffd03 	ldbu	r2,-12(fp)
 8014460:	1884b03a 	or	r2,r3,r2
 8014464:	e0bffd05 	stb	r2,-12(fp)
 8014468:	00000806 	br	801448c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 801446c:	e0bffe17 	ldw	r2,-8(fp)
 8014470:	1007883a 	mov	r3,r2
 8014474:	e0bffd03 	ldbu	r2,-12(fp)
 8014478:	1884b03a 	or	r2,r3,r2
 801447c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8014480:	e0bffd03 	ldbu	r2,-12(fp)
 8014484:	10801014 	ori	r2,r2,64
 8014488:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 801448c:	e0fffd03 	ldbu	r3,-12(fp)
 8014490:	00bfe004 	movi	r2,-128
 8014494:	1884b03a 	or	r2,r3,r2
}
 8014498:	e037883a 	mov	sp,fp
 801449c:	df000017 	ldw	fp,0(sp)
 80144a0:	dec00104 	addi	sp,sp,4
 80144a4:	f800283a 	ret

080144a8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 80144a8:	defffd04 	addi	sp,sp,-12
 80144ac:	df000215 	stw	fp,8(sp)
 80144b0:	df000204 	addi	fp,sp,8
 80144b4:	e13ffe15 	stw	r4,-8(fp)
 80144b8:	2805883a 	mov	r2,r5
 80144bc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80144c0:	e0bffe17 	ldw	r2,-8(fp)
 80144c4:	10800a17 	ldw	r2,40(r2)
 80144c8:	1007883a 	mov	r3,r2
 80144cc:	e0bfff03 	ldbu	r2,-4(fp)
 80144d0:	18800025 	stbio	r2,0(r3)
}
 80144d4:	e037883a 	mov	sp,fp
 80144d8:	df000017 	ldw	fp,0(sp)
 80144dc:	dec00104 	addi	sp,sp,4
 80144e0:	f800283a 	ret

080144e4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 80144e4:	defffe04 	addi	sp,sp,-8
 80144e8:	df000115 	stw	fp,4(sp)
 80144ec:	df000104 	addi	fp,sp,4
 80144f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80144f4:	e0bfff17 	ldw	r2,-4(fp)
 80144f8:	10800a17 	ldw	r2,40(r2)
 80144fc:	1007883a 	mov	r3,r2
 8014500:	00800044 	movi	r2,1
 8014504:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8014508:	e037883a 	mov	sp,fp
 801450c:	df000017 	ldw	fp,0(sp)
 8014510:	dec00104 	addi	sp,sp,4
 8014514:	f800283a 	ret

08014518 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8014518:	defffc04 	addi	sp,sp,-16
 801451c:	dfc00315 	stw	ra,12(sp)
 8014520:	df000215 	stw	fp,8(sp)
 8014524:	df000204 	addi	fp,sp,8
 8014528:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 801452c:	e13fff17 	ldw	r4,-4(fp)
 8014530:	014200b4 	movhi	r5,2050
 8014534:	2947eb04 	addi	r5,r5,8108
 8014538:	8014d3c0 	call	8014d3c <alt_find_dev>
 801453c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8014540:	e0bffe17 	ldw	r2,-8(fp)
}
 8014544:	e037883a 	mov	sp,fp
 8014548:	dfc00117 	ldw	ra,4(sp)
 801454c:	df000017 	ldw	fp,0(sp)
 8014550:	dec00204 	addi	sp,sp,8
 8014554:	f800283a 	ret

08014558 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8014558:	defffb04 	addi	sp,sp,-20
 801455c:	df000415 	stw	fp,16(sp)
 8014560:	df000404 	addi	fp,sp,16
 8014564:	e13ffd15 	stw	r4,-12(fp)
 8014568:	e17ffe15 	stw	r5,-8(fp)
 801456c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8014570:	e03ffc15 	stw	zero,-16(fp)
 8014574:	00000f06 	br	80145b4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8014578:	e0bffd17 	ldw	r2,-12(fp)
 801457c:	10800a17 	ldw	r2,40(r2)
 8014580:	10800044 	addi	r2,r2,1
 8014584:	1009883a 	mov	r4,r2
 8014588:	e0fffe17 	ldw	r3,-8(fp)
 801458c:	e0bffc17 	ldw	r2,-16(fp)
 8014590:	1885883a 	add	r2,r3,r2
 8014594:	10800003 	ldbu	r2,0(r2)
 8014598:	10803fcc 	andi	r2,r2,255
 801459c:	1080201c 	xori	r2,r2,128
 80145a0:	10bfe004 	addi	r2,r2,-128
 80145a4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 80145a8:	e0bffc17 	ldw	r2,-16(fp)
 80145ac:	10800044 	addi	r2,r2,1
 80145b0:	e0bffc15 	stw	r2,-16(fp)
 80145b4:	e0fffc17 	ldw	r3,-16(fp)
 80145b8:	e0bfff17 	ldw	r2,-4(fp)
 80145bc:	18bfee36 	bltu	r3,r2,8014578 <__alt_data_end+0xfc014578>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 80145c0:	e037883a 	mov	sp,fp
 80145c4:	df000017 	ldw	fp,0(sp)
 80145c8:	dec00104 	addi	sp,sp,4
 80145cc:	f800283a 	ret

080145d0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 80145d0:	defffd04 	addi	sp,sp,-12
 80145d4:	df000215 	stw	fp,8(sp)
 80145d8:	df000204 	addi	fp,sp,8
 80145dc:	e13ffe15 	stw	r4,-8(fp)
 80145e0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 80145e4:	00000d06 	br	801461c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 80145e8:	e0bffe17 	ldw	r2,-8(fp)
 80145ec:	10800a17 	ldw	r2,40(r2)
 80145f0:	10800044 	addi	r2,r2,1
 80145f4:	1007883a 	mov	r3,r2
 80145f8:	e0bfff17 	ldw	r2,-4(fp)
 80145fc:	10800003 	ldbu	r2,0(r2)
 8014600:	10803fcc 	andi	r2,r2,255
 8014604:	1080201c 	xori	r2,r2,128
 8014608:	10bfe004 	addi	r2,r2,-128
 801460c:	18800025 	stbio	r2,0(r3)
		++ptr;
 8014610:	e0bfff17 	ldw	r2,-4(fp)
 8014614:	10800044 	addi	r2,r2,1
 8014618:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 801461c:	e0bfff17 	ldw	r2,-4(fp)
 8014620:	10800003 	ldbu	r2,0(r2)
 8014624:	10803fcc 	andi	r2,r2,255
 8014628:	1080201c 	xori	r2,r2,128
 801462c:	10bfe004 	addi	r2,r2,-128
 8014630:	103fed1e 	bne	r2,zero,80145e8 <__alt_data_end+0xfc0145e8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8014634:	e037883a 	mov	sp,fp
 8014638:	df000017 	ldw	fp,0(sp)
 801463c:	dec00104 	addi	sp,sp,4
 8014640:	f800283a 	ret

08014644 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8014644:	defffb04 	addi	sp,sp,-20
 8014648:	dfc00415 	stw	ra,16(sp)
 801464c:	df000315 	stw	fp,12(sp)
 8014650:	df000304 	addi	fp,sp,12
 8014654:	e13ffd15 	stw	r4,-12(fp)
 8014658:	e17ffe15 	stw	r5,-8(fp)
 801465c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8014660:	e0bffd17 	ldw	r2,-12(fp)
 8014664:	10c00017 	ldw	r3,0(r2)
 8014668:	e0bfff17 	ldw	r2,-4(fp)
 801466c:	1809883a 	mov	r4,r3
 8014670:	e17ffe17 	ldw	r5,-8(fp)
 8014674:	100d883a 	mov	r6,r2
 8014678:	80145580 	call	8014558 <alt_up_character_lcd_write>
	return 0;
 801467c:	0005883a 	mov	r2,zero
}
 8014680:	e037883a 	mov	sp,fp
 8014684:	dfc00117 	ldw	ra,4(sp)
 8014688:	df000017 	ldw	fp,0(sp)
 801468c:	dec00204 	addi	sp,sp,8
 8014690:	f800283a 	ret

08014694 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8014694:	defffa04 	addi	sp,sp,-24
 8014698:	dfc00515 	stw	ra,20(sp)
 801469c:	df000415 	stw	fp,16(sp)
 80146a0:	df000404 	addi	fp,sp,16
 80146a4:	e13ffd15 	stw	r4,-12(fp)
 80146a8:	e17ffe15 	stw	r5,-8(fp)
 80146ac:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 80146b0:	e0bffe17 	ldw	r2,-8(fp)
 80146b4:	10800a28 	cmpgeui	r2,r2,40
 80146b8:	1000031e 	bne	r2,zero,80146c8 <alt_up_character_lcd_set_cursor_pos+0x34>
 80146bc:	e0bfff17 	ldw	r2,-4(fp)
 80146c0:	108000b0 	cmpltui	r2,r2,2
 80146c4:	1000021e 	bne	r2,zero,80146d0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 80146c8:	00bfffc4 	movi	r2,-1
 80146cc:	00000906 	br	80146f4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 80146d0:	e13ffe17 	ldw	r4,-8(fp)
 80146d4:	e17fff17 	ldw	r5,-4(fp)
 80146d8:	80144340 	call	8014434 <get_DDRAM_addr>
 80146dc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 80146e0:	e0bffc03 	ldbu	r2,-16(fp)
 80146e4:	e13ffd17 	ldw	r4,-12(fp)
 80146e8:	100b883a 	mov	r5,r2
 80146ec:	80144a80 	call	80144a8 <alt_up_character_lcd_send_cmd>
	return 0;
 80146f0:	0005883a 	mov	r2,zero
}
 80146f4:	e037883a 	mov	sp,fp
 80146f8:	dfc00117 	ldw	ra,4(sp)
 80146fc:	df000017 	ldw	fp,0(sp)
 8014700:	dec00204 	addi	sp,sp,8
 8014704:	f800283a 	ret

08014708 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8014708:	defffb04 	addi	sp,sp,-20
 801470c:	dfc00415 	stw	ra,16(sp)
 8014710:	df000315 	stw	fp,12(sp)
 8014714:	df000304 	addi	fp,sp,12
 8014718:	e13ffe15 	stw	r4,-8(fp)
 801471c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8014720:	e0bfff17 	ldw	r2,-4(fp)
 8014724:	1000011e 	bne	r2,zero,801472c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 8014728:	00001406 	br	801477c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 801472c:	e0bfff17 	ldw	r2,-4(fp)
 8014730:	0080020e 	bge	zero,r2,801473c <alt_up_character_lcd_shift_cursor+0x34>
 8014734:	00800504 	movi	r2,20
 8014738:	00000106 	br	8014740 <alt_up_character_lcd_shift_cursor+0x38>
 801473c:	00800404 	movi	r2,16
 8014740:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8014744:	e0bfff17 	ldw	r2,-4(fp)
 8014748:	1000010e 	bge	r2,zero,8014750 <alt_up_character_lcd_shift_cursor+0x48>
 801474c:	0085c83a 	sub	r2,zero,r2
 8014750:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8014754:	00000406 	br	8014768 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8014758:	e0bffd43 	ldbu	r2,-11(fp)
 801475c:	e13ffe17 	ldw	r4,-8(fp)
 8014760:	100b883a 	mov	r5,r2
 8014764:	80144a80 	call	80144a8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8014768:	e0bffd03 	ldbu	r2,-12(fp)
 801476c:	10ffffc4 	addi	r3,r2,-1
 8014770:	e0fffd05 	stb	r3,-12(fp)
 8014774:	10803fcc 	andi	r2,r2,255
 8014778:	103ff71e 	bne	r2,zero,8014758 <__alt_data_end+0xfc014758>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 801477c:	e037883a 	mov	sp,fp
 8014780:	dfc00117 	ldw	ra,4(sp)
 8014784:	df000017 	ldw	fp,0(sp)
 8014788:	dec00204 	addi	sp,sp,8
 801478c:	f800283a 	ret

08014790 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8014790:	defffb04 	addi	sp,sp,-20
 8014794:	dfc00415 	stw	ra,16(sp)
 8014798:	df000315 	stw	fp,12(sp)
 801479c:	df000304 	addi	fp,sp,12
 80147a0:	e13ffe15 	stw	r4,-8(fp)
 80147a4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 80147a8:	e0bfff17 	ldw	r2,-4(fp)
 80147ac:	1000011e 	bne	r2,zero,80147b4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 80147b0:	00001406 	br	8014804 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80147b4:	e0bfff17 	ldw	r2,-4(fp)
 80147b8:	0080020e 	bge	zero,r2,80147c4 <alt_up_character_lcd_shift_display+0x34>
 80147bc:	00800704 	movi	r2,28
 80147c0:	00000106 	br	80147c8 <alt_up_character_lcd_shift_display+0x38>
 80147c4:	00800604 	movi	r2,24
 80147c8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80147cc:	e0bfff17 	ldw	r2,-4(fp)
 80147d0:	1000010e 	bge	r2,zero,80147d8 <alt_up_character_lcd_shift_display+0x48>
 80147d4:	0085c83a 	sub	r2,zero,r2
 80147d8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80147dc:	00000406 	br	80147f0 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80147e0:	e0bffd43 	ldbu	r2,-11(fp)
 80147e4:	e13ffe17 	ldw	r4,-8(fp)
 80147e8:	100b883a 	mov	r5,r2
 80147ec:	80144a80 	call	80144a8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80147f0:	e0bffd03 	ldbu	r2,-12(fp)
 80147f4:	10ffffc4 	addi	r3,r2,-1
 80147f8:	e0fffd05 	stb	r3,-12(fp)
 80147fc:	10803fcc 	andi	r2,r2,255
 8014800:	103ff71e 	bne	r2,zero,80147e0 <__alt_data_end+0xfc0147e0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8014804:	e037883a 	mov	sp,fp
 8014808:	dfc00117 	ldw	ra,4(sp)
 801480c:	df000017 	ldw	fp,0(sp)
 8014810:	dec00204 	addi	sp,sp,8
 8014814:	f800283a 	ret

08014818 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8014818:	defffa04 	addi	sp,sp,-24
 801481c:	dfc00515 	stw	ra,20(sp)
 8014820:	df000415 	stw	fp,16(sp)
 8014824:	df000404 	addi	fp,sp,16
 8014828:	e13ffd15 	stw	r4,-12(fp)
 801482c:	e17ffe15 	stw	r5,-8(fp)
 8014830:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8014834:	e0bffe17 	ldw	r2,-8(fp)
 8014838:	10800a28 	cmpgeui	r2,r2,40
 801483c:	1000031e 	bne	r2,zero,801484c <alt_up_character_lcd_erase_pos+0x34>
 8014840:	e0bfff17 	ldw	r2,-4(fp)
 8014844:	108000b0 	cmpltui	r2,r2,2
 8014848:	1000021e 	bne	r2,zero,8014854 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 801484c:	00bfffc4 	movi	r2,-1
 8014850:	00000f06 	br	8014890 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8014854:	e13ffe17 	ldw	r4,-8(fp)
 8014858:	e17fff17 	ldw	r5,-4(fp)
 801485c:	80144340 	call	8014434 <get_DDRAM_addr>
 8014860:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8014864:	e0bffc03 	ldbu	r2,-16(fp)
 8014868:	e13ffd17 	ldw	r4,-12(fp)
 801486c:	100b883a 	mov	r5,r2
 8014870:	80144a80 	call	80144a8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8014874:	e0bffd17 	ldw	r2,-12(fp)
 8014878:	10800a17 	ldw	r2,40(r2)
 801487c:	10800044 	addi	r2,r2,1
 8014880:	1007883a 	mov	r3,r2
 8014884:	00800084 	movi	r2,2
 8014888:	18800025 	stbio	r2,0(r3)
	return 0;
 801488c:	0005883a 	mov	r2,zero
}
 8014890:	e037883a 	mov	sp,fp
 8014894:	dfc00117 	ldw	ra,4(sp)
 8014898:	df000017 	ldw	fp,0(sp)
 801489c:	dec00204 	addi	sp,sp,8
 80148a0:	f800283a 	ret

080148a4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 80148a4:	defffd04 	addi	sp,sp,-12
 80148a8:	dfc00215 	stw	ra,8(sp)
 80148ac:	df000115 	stw	fp,4(sp)
 80148b0:	df000104 	addi	fp,sp,4
 80148b4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 80148b8:	e13fff17 	ldw	r4,-4(fp)
 80148bc:	01400304 	movi	r5,12
 80148c0:	80144a80 	call	80144a8 <alt_up_character_lcd_send_cmd>
}
 80148c4:	e037883a 	mov	sp,fp
 80148c8:	dfc00117 	ldw	ra,4(sp)
 80148cc:	df000017 	ldw	fp,0(sp)
 80148d0:	dec00204 	addi	sp,sp,8
 80148d4:	f800283a 	ret

080148d8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 80148d8:	defffd04 	addi	sp,sp,-12
 80148dc:	dfc00215 	stw	ra,8(sp)
 80148e0:	df000115 	stw	fp,4(sp)
 80148e4:	df000104 	addi	fp,sp,4
 80148e8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 80148ec:	e13fff17 	ldw	r4,-4(fp)
 80148f0:	014003c4 	movi	r5,15
 80148f4:	80144a80 	call	80144a8 <alt_up_character_lcd_send_cmd>
}
 80148f8:	e037883a 	mov	sp,fp
 80148fc:	dfc00117 	ldw	ra,4(sp)
 8014900:	df000017 	ldw	fp,0(sp)
 8014904:	dec00204 	addi	sp,sp,8
 8014908:	f800283a 	ret

0801490c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801490c:	defff504 	addi	sp,sp,-44
 8014910:	df000a15 	stw	fp,40(sp)
 8014914:	df000a04 	addi	fp,sp,40
 8014918:	e13ffc15 	stw	r4,-16(fp)
 801491c:	e17ffd15 	stw	r5,-12(fp)
 8014920:	e1bffe15 	stw	r6,-8(fp)
 8014924:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8014928:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801492c:	008200b4 	movhi	r2,2050
 8014930:	108ec804 	addi	r2,r2,15136
 8014934:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8014938:	10003f26 	beq	r2,zero,8014a38 <alt_alarm_start+0x12c>
  {
    if (alarm)
 801493c:	e0bffc17 	ldw	r2,-16(fp)
 8014940:	10003b26 	beq	r2,zero,8014a30 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8014944:	e0bffc17 	ldw	r2,-16(fp)
 8014948:	e0fffe17 	ldw	r3,-8(fp)
 801494c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8014950:	e0bffc17 	ldw	r2,-16(fp)
 8014954:	e0ffff17 	ldw	r3,-4(fp)
 8014958:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801495c:	0005303a 	rdctl	r2,status
 8014960:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014964:	e0fff817 	ldw	r3,-32(fp)
 8014968:	00bfff84 	movi	r2,-2
 801496c:	1884703a 	and	r2,r3,r2
 8014970:	1001703a 	wrctl	status,r2
  
  return context;
 8014974:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8014978:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801497c:	008200b4 	movhi	r2,2050
 8014980:	108ec904 	addi	r2,r2,15140
 8014984:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8014988:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801498c:	e0fffd17 	ldw	r3,-12(fp)
 8014990:	e0bff617 	ldw	r2,-40(fp)
 8014994:	1885883a 	add	r2,r3,r2
 8014998:	10c00044 	addi	r3,r2,1
 801499c:	e0bffc17 	ldw	r2,-16(fp)
 80149a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80149a4:	e0bffc17 	ldw	r2,-16(fp)
 80149a8:	10c00217 	ldw	r3,8(r2)
 80149ac:	e0bff617 	ldw	r2,-40(fp)
 80149b0:	1880042e 	bgeu	r3,r2,80149c4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 80149b4:	e0bffc17 	ldw	r2,-16(fp)
 80149b8:	00c00044 	movi	r3,1
 80149bc:	10c00405 	stb	r3,16(r2)
 80149c0:	00000206 	br	80149cc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 80149c4:	e0bffc17 	ldw	r2,-16(fp)
 80149c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80149cc:	e0fffc17 	ldw	r3,-16(fp)
 80149d0:	008200b4 	movhi	r2,2050
 80149d4:	1087f104 	addi	r2,r2,8132
 80149d8:	e0bff915 	stw	r2,-28(fp)
 80149dc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80149e0:	e0bffa17 	ldw	r2,-24(fp)
 80149e4:	e0fff917 	ldw	r3,-28(fp)
 80149e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80149ec:	e0bff917 	ldw	r2,-28(fp)
 80149f0:	10c00017 	ldw	r3,0(r2)
 80149f4:	e0bffa17 	ldw	r2,-24(fp)
 80149f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80149fc:	e0bff917 	ldw	r2,-28(fp)
 8014a00:	10800017 	ldw	r2,0(r2)
 8014a04:	e0fffa17 	ldw	r3,-24(fp)
 8014a08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014a0c:	e0bff917 	ldw	r2,-28(fp)
 8014a10:	e0fffa17 	ldw	r3,-24(fp)
 8014a14:	10c00015 	stw	r3,0(r2)
 8014a18:	e0bff717 	ldw	r2,-36(fp)
 8014a1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014a20:	e0bffb17 	ldw	r2,-20(fp)
 8014a24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8014a28:	0005883a 	mov	r2,zero
 8014a2c:	00000306 	br	8014a3c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8014a30:	00bffa84 	movi	r2,-22
 8014a34:	00000106 	br	8014a3c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8014a38:	00bfde84 	movi	r2,-134
  }
}
 8014a3c:	e037883a 	mov	sp,fp
 8014a40:	df000017 	ldw	fp,0(sp)
 8014a44:	dec00104 	addi	sp,sp,4
 8014a48:	f800283a 	ret

08014a4c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8014a4c:	defffb04 	addi	sp,sp,-20
 8014a50:	df000415 	stw	fp,16(sp)
 8014a54:	df000404 	addi	fp,sp,16
 8014a58:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8014a5c:	008000c4 	movi	r2,3
 8014a60:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8014a64:	e0fffd17 	ldw	r3,-12(fp)
 8014a68:	008003f4 	movhi	r2,15
 8014a6c:	10909004 	addi	r2,r2,16960
 8014a70:	1887383a 	mul	r3,r3,r2
 8014a74:	0080bef4 	movhi	r2,763
 8014a78:	10bc2004 	addi	r2,r2,-3968
 8014a7c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8014a80:	00a00034 	movhi	r2,32768
 8014a84:	10bfffc4 	addi	r2,r2,-1
 8014a88:	10c5203a 	divu	r2,r2,r3
 8014a8c:	e0ffff17 	ldw	r3,-4(fp)
 8014a90:	1885203a 	divu	r2,r3,r2
 8014a94:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8014a98:	e0bffe17 	ldw	r2,-8(fp)
 8014a9c:	10002526 	beq	r2,zero,8014b34 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 8014aa0:	e03ffc15 	stw	zero,-16(fp)
 8014aa4:	00001406 	br	8014af8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8014aa8:	00a00034 	movhi	r2,32768
 8014aac:	10bfffc4 	addi	r2,r2,-1
 8014ab0:	10bfffc4 	addi	r2,r2,-1
 8014ab4:	103ffe1e 	bne	r2,zero,8014ab0 <__alt_data_end+0xfc014ab0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8014ab8:	e0fffd17 	ldw	r3,-12(fp)
 8014abc:	008003f4 	movhi	r2,15
 8014ac0:	10909004 	addi	r2,r2,16960
 8014ac4:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8014ac8:	0080bef4 	movhi	r2,763
 8014acc:	10bc2004 	addi	r2,r2,-3968
 8014ad0:	10c7203a 	divu	r3,r2,r3
 8014ad4:	00a00034 	movhi	r2,32768
 8014ad8:	10bfffc4 	addi	r2,r2,-1
 8014adc:	10c5203a 	divu	r2,r2,r3
 8014ae0:	e0ffff17 	ldw	r3,-4(fp)
 8014ae4:	1885c83a 	sub	r2,r3,r2
 8014ae8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8014aec:	e0bffc17 	ldw	r2,-16(fp)
 8014af0:	10800044 	addi	r2,r2,1
 8014af4:	e0bffc15 	stw	r2,-16(fp)
 8014af8:	e0fffc17 	ldw	r3,-16(fp)
 8014afc:	e0bffe17 	ldw	r2,-8(fp)
 8014b00:	18bfe916 	blt	r3,r2,8014aa8 <__alt_data_end+0xfc014aa8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014b04:	e0fffd17 	ldw	r3,-12(fp)
 8014b08:	008003f4 	movhi	r2,15
 8014b0c:	10909004 	addi	r2,r2,16960
 8014b10:	1887383a 	mul	r3,r3,r2
 8014b14:	0080bef4 	movhi	r2,763
 8014b18:	10bc2004 	addi	r2,r2,-3968
 8014b1c:	10c7203a 	divu	r3,r2,r3
 8014b20:	e0bfff17 	ldw	r2,-4(fp)
 8014b24:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014b28:	10bfffc4 	addi	r2,r2,-1
 8014b2c:	103ffe1e 	bne	r2,zero,8014b28 <__alt_data_end+0xfc014b28>
 8014b30:	00000b06 	br	8014b60 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014b34:	e0fffd17 	ldw	r3,-12(fp)
 8014b38:	008003f4 	movhi	r2,15
 8014b3c:	10909004 	addi	r2,r2,16960
 8014b40:	1887383a 	mul	r3,r3,r2
 8014b44:	0080bef4 	movhi	r2,763
 8014b48:	10bc2004 	addi	r2,r2,-3968
 8014b4c:	10c7203a 	divu	r3,r2,r3
 8014b50:	e0bfff17 	ldw	r2,-4(fp)
 8014b54:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014b58:	10bfffc4 	addi	r2,r2,-1
 8014b5c:	00bffe16 	blt	zero,r2,8014b58 <__alt_data_end+0xfc014b58>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8014b60:	0005883a 	mov	r2,zero
}
 8014b64:	e037883a 	mov	sp,fp
 8014b68:	df000017 	ldw	fp,0(sp)
 8014b6c:	dec00104 	addi	sp,sp,4
 8014b70:	f800283a 	ret

08014b74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8014b74:	deffff04 	addi	sp,sp,-4
 8014b78:	df000015 	stw	fp,0(sp)
 8014b7c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8014b80:	e037883a 	mov	sp,fp
 8014b84:	df000017 	ldw	fp,0(sp)
 8014b88:	dec00104 	addi	sp,sp,4
 8014b8c:	f800283a 	ret

08014b90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014b90:	defffe04 	addi	sp,sp,-8
 8014b94:	dfc00115 	stw	ra,4(sp)
 8014b98:	df000015 	stw	fp,0(sp)
 8014b9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014ba0:	008200b4 	movhi	r2,2050
 8014ba4:	1087ee04 	addi	r2,r2,8120
 8014ba8:	10800017 	ldw	r2,0(r2)
 8014bac:	10000526 	beq	r2,zero,8014bc4 <alt_get_errno+0x34>
 8014bb0:	008200b4 	movhi	r2,2050
 8014bb4:	1087ee04 	addi	r2,r2,8120
 8014bb8:	10800017 	ldw	r2,0(r2)
 8014bbc:	103ee83a 	callr	r2
 8014bc0:	00000206 	br	8014bcc <alt_get_errno+0x3c>
 8014bc4:	008200b4 	movhi	r2,2050
 8014bc8:	108ebe04 	addi	r2,r2,15096
}
 8014bcc:	e037883a 	mov	sp,fp
 8014bd0:	dfc00117 	ldw	ra,4(sp)
 8014bd4:	df000017 	ldw	fp,0(sp)
 8014bd8:	dec00204 	addi	sp,sp,8
 8014bdc:	f800283a 	ret

08014be0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8014be0:	defffa04 	addi	sp,sp,-24
 8014be4:	dfc00515 	stw	ra,20(sp)
 8014be8:	df000415 	stw	fp,16(sp)
 8014bec:	df000404 	addi	fp,sp,16
 8014bf0:	e13ffe15 	stw	r4,-8(fp)
 8014bf4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8014bf8:	e0bffe17 	ldw	r2,-8(fp)
 8014bfc:	10000326 	beq	r2,zero,8014c0c <alt_dev_llist_insert+0x2c>
 8014c00:	e0bffe17 	ldw	r2,-8(fp)
 8014c04:	10800217 	ldw	r2,8(r2)
 8014c08:	1000061e 	bne	r2,zero,8014c24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8014c0c:	8014b900 	call	8014b90 <alt_get_errno>
 8014c10:	1007883a 	mov	r3,r2
 8014c14:	00800584 	movi	r2,22
 8014c18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8014c1c:	00bffa84 	movi	r2,-22
 8014c20:	00001306 	br	8014c70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8014c24:	e0bffe17 	ldw	r2,-8(fp)
 8014c28:	e0ffff17 	ldw	r3,-4(fp)
 8014c2c:	e0fffc15 	stw	r3,-16(fp)
 8014c30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014c34:	e0bffd17 	ldw	r2,-12(fp)
 8014c38:	e0fffc17 	ldw	r3,-16(fp)
 8014c3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014c40:	e0bffc17 	ldw	r2,-16(fp)
 8014c44:	10c00017 	ldw	r3,0(r2)
 8014c48:	e0bffd17 	ldw	r2,-12(fp)
 8014c4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014c50:	e0bffc17 	ldw	r2,-16(fp)
 8014c54:	10800017 	ldw	r2,0(r2)
 8014c58:	e0fffd17 	ldw	r3,-12(fp)
 8014c5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014c60:	e0bffc17 	ldw	r2,-16(fp)
 8014c64:	e0fffd17 	ldw	r3,-12(fp)
 8014c68:	10c00015 	stw	r3,0(r2)

  return 0;  
 8014c6c:	0005883a 	mov	r2,zero
}
 8014c70:	e037883a 	mov	sp,fp
 8014c74:	dfc00117 	ldw	ra,4(sp)
 8014c78:	df000017 	ldw	fp,0(sp)
 8014c7c:	dec00204 	addi	sp,sp,8
 8014c80:	f800283a 	ret

08014c84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8014c84:	defffd04 	addi	sp,sp,-12
 8014c88:	dfc00215 	stw	ra,8(sp)
 8014c8c:	df000115 	stw	fp,4(sp)
 8014c90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014c94:	00820074 	movhi	r2,2049
 8014c98:	10965604 	addi	r2,r2,22872
 8014c9c:	e0bfff15 	stw	r2,-4(fp)
 8014ca0:	00000606 	br	8014cbc <_do_ctors+0x38>
        (*ctor) (); 
 8014ca4:	e0bfff17 	ldw	r2,-4(fp)
 8014ca8:	10800017 	ldw	r2,0(r2)
 8014cac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014cb0:	e0bfff17 	ldw	r2,-4(fp)
 8014cb4:	10bfff04 	addi	r2,r2,-4
 8014cb8:	e0bfff15 	stw	r2,-4(fp)
 8014cbc:	e0ffff17 	ldw	r3,-4(fp)
 8014cc0:	00820074 	movhi	r2,2049
 8014cc4:	10965704 	addi	r2,r2,22876
 8014cc8:	18bff62e 	bgeu	r3,r2,8014ca4 <__alt_data_end+0xfc014ca4>
        (*ctor) (); 
}
 8014ccc:	e037883a 	mov	sp,fp
 8014cd0:	dfc00117 	ldw	ra,4(sp)
 8014cd4:	df000017 	ldw	fp,0(sp)
 8014cd8:	dec00204 	addi	sp,sp,8
 8014cdc:	f800283a 	ret

08014ce0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8014ce0:	defffd04 	addi	sp,sp,-12
 8014ce4:	dfc00215 	stw	ra,8(sp)
 8014ce8:	df000115 	stw	fp,4(sp)
 8014cec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014cf0:	00820074 	movhi	r2,2049
 8014cf4:	10965604 	addi	r2,r2,22872
 8014cf8:	e0bfff15 	stw	r2,-4(fp)
 8014cfc:	00000606 	br	8014d18 <_do_dtors+0x38>
        (*dtor) (); 
 8014d00:	e0bfff17 	ldw	r2,-4(fp)
 8014d04:	10800017 	ldw	r2,0(r2)
 8014d08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014d0c:	e0bfff17 	ldw	r2,-4(fp)
 8014d10:	10bfff04 	addi	r2,r2,-4
 8014d14:	e0bfff15 	stw	r2,-4(fp)
 8014d18:	e0ffff17 	ldw	r3,-4(fp)
 8014d1c:	00820074 	movhi	r2,2049
 8014d20:	10965704 	addi	r2,r2,22876
 8014d24:	18bff62e 	bgeu	r3,r2,8014d00 <__alt_data_end+0xfc014d00>
        (*dtor) (); 
}
 8014d28:	e037883a 	mov	sp,fp
 8014d2c:	dfc00117 	ldw	ra,4(sp)
 8014d30:	df000017 	ldw	fp,0(sp)
 8014d34:	dec00204 	addi	sp,sp,8
 8014d38:	f800283a 	ret

08014d3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8014d3c:	defffa04 	addi	sp,sp,-24
 8014d40:	dfc00515 	stw	ra,20(sp)
 8014d44:	df000415 	stw	fp,16(sp)
 8014d48:	df000404 	addi	fp,sp,16
 8014d4c:	e13ffe15 	stw	r4,-8(fp)
 8014d50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8014d54:	e0bfff17 	ldw	r2,-4(fp)
 8014d58:	10800017 	ldw	r2,0(r2)
 8014d5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8014d60:	e13ffe17 	ldw	r4,-8(fp)
 8014d64:	8004a080 	call	8004a08 <strlen>
 8014d68:	10800044 	addi	r2,r2,1
 8014d6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014d70:	00000d06 	br	8014da8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8014d74:	e0bffc17 	ldw	r2,-16(fp)
 8014d78:	10c00217 	ldw	r3,8(r2)
 8014d7c:	e0bffd17 	ldw	r2,-12(fp)
 8014d80:	1809883a 	mov	r4,r3
 8014d84:	e17ffe17 	ldw	r5,-8(fp)
 8014d88:	100d883a 	mov	r6,r2
 8014d8c:	80156040 	call	8015604 <memcmp>
 8014d90:	1000021e 	bne	r2,zero,8014d9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8014d94:	e0bffc17 	ldw	r2,-16(fp)
 8014d98:	00000706 	br	8014db8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8014d9c:	e0bffc17 	ldw	r2,-16(fp)
 8014da0:	10800017 	ldw	r2,0(r2)
 8014da4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014da8:	e0fffc17 	ldw	r3,-16(fp)
 8014dac:	e0bfff17 	ldw	r2,-4(fp)
 8014db0:	18bff01e 	bne	r3,r2,8014d74 <__alt_data_end+0xfc014d74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8014db4:	0005883a 	mov	r2,zero
}
 8014db8:	e037883a 	mov	sp,fp
 8014dbc:	dfc00117 	ldw	ra,4(sp)
 8014dc0:	df000017 	ldw	fp,0(sp)
 8014dc4:	dec00204 	addi	sp,sp,8
 8014dc8:	f800283a 	ret

08014dcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8014dcc:	defffe04 	addi	sp,sp,-8
 8014dd0:	dfc00115 	stw	ra,4(sp)
 8014dd4:	df000015 	stw	fp,0(sp)
 8014dd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8014ddc:	0009883a 	mov	r4,zero
 8014de0:	01440004 	movi	r5,4096
 8014de4:	801552c0 	call	801552c <alt_icache_flush>
#endif
}
 8014de8:	e037883a 	mov	sp,fp
 8014dec:	dfc00117 	ldw	ra,4(sp)
 8014df0:	df000017 	ldw	fp,0(sp)
 8014df4:	dec00204 	addi	sp,sp,8
 8014df8:	f800283a 	ret

08014dfc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8014dfc:	defff904 	addi	sp,sp,-28
 8014e00:	dfc00615 	stw	ra,24(sp)
 8014e04:	df000515 	stw	fp,20(sp)
 8014e08:	df000504 	addi	fp,sp,20
 8014e0c:	e13ffc15 	stw	r4,-16(fp)
 8014e10:	e17ffd15 	stw	r5,-12(fp)
 8014e14:	e1bffe15 	stw	r6,-8(fp)
 8014e18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8014e1c:	e13ffd17 	ldw	r4,-12(fp)
 8014e20:	e17ffe17 	ldw	r5,-8(fp)
 8014e24:	e1bfff17 	ldw	r6,-4(fp)
 8014e28:	80150500 	call	8015050 <open>
 8014e2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8014e30:	e0bffb17 	ldw	r2,-20(fp)
 8014e34:	10001c16 	blt	r2,zero,8014ea8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8014e38:	008200b4 	movhi	r2,2050
 8014e3c:	10836004 	addi	r2,r2,3456
 8014e40:	e0fffb17 	ldw	r3,-20(fp)
 8014e44:	18c00324 	muli	r3,r3,12
 8014e48:	10c5883a 	add	r2,r2,r3
 8014e4c:	10c00017 	ldw	r3,0(r2)
 8014e50:	e0bffc17 	ldw	r2,-16(fp)
 8014e54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8014e58:	008200b4 	movhi	r2,2050
 8014e5c:	10836004 	addi	r2,r2,3456
 8014e60:	e0fffb17 	ldw	r3,-20(fp)
 8014e64:	18c00324 	muli	r3,r3,12
 8014e68:	10c5883a 	add	r2,r2,r3
 8014e6c:	10800104 	addi	r2,r2,4
 8014e70:	10c00017 	ldw	r3,0(r2)
 8014e74:	e0bffc17 	ldw	r2,-16(fp)
 8014e78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8014e7c:	008200b4 	movhi	r2,2050
 8014e80:	10836004 	addi	r2,r2,3456
 8014e84:	e0fffb17 	ldw	r3,-20(fp)
 8014e88:	18c00324 	muli	r3,r3,12
 8014e8c:	10c5883a 	add	r2,r2,r3
 8014e90:	10800204 	addi	r2,r2,8
 8014e94:	10c00017 	ldw	r3,0(r2)
 8014e98:	e0bffc17 	ldw	r2,-16(fp)
 8014e9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8014ea0:	e13ffb17 	ldw	r4,-20(fp)
 8014ea4:	80135640 	call	8013564 <alt_release_fd>
  }
} 
 8014ea8:	e037883a 	mov	sp,fp
 8014eac:	dfc00117 	ldw	ra,4(sp)
 8014eb0:	df000017 	ldw	fp,0(sp)
 8014eb4:	dec00204 	addi	sp,sp,8
 8014eb8:	f800283a 	ret

08014ebc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8014ebc:	defffb04 	addi	sp,sp,-20
 8014ec0:	dfc00415 	stw	ra,16(sp)
 8014ec4:	df000315 	stw	fp,12(sp)
 8014ec8:	df000304 	addi	fp,sp,12
 8014ecc:	e13ffd15 	stw	r4,-12(fp)
 8014ed0:	e17ffe15 	stw	r5,-8(fp)
 8014ed4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8014ed8:	010200b4 	movhi	r4,2050
 8014edc:	21036304 	addi	r4,r4,3468
 8014ee0:	e17ffd17 	ldw	r5,-12(fp)
 8014ee4:	01800044 	movi	r6,1
 8014ee8:	01c07fc4 	movi	r7,511
 8014eec:	8014dfc0 	call	8014dfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8014ef0:	010200b4 	movhi	r4,2050
 8014ef4:	21036004 	addi	r4,r4,3456
 8014ef8:	e17ffe17 	ldw	r5,-8(fp)
 8014efc:	000d883a 	mov	r6,zero
 8014f00:	01c07fc4 	movi	r7,511
 8014f04:	8014dfc0 	call	8014dfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014f08:	010200b4 	movhi	r4,2050
 8014f0c:	21036604 	addi	r4,r4,3480
 8014f10:	e17fff17 	ldw	r5,-4(fp)
 8014f14:	01800044 	movi	r6,1
 8014f18:	01c07fc4 	movi	r7,511
 8014f1c:	8014dfc0 	call	8014dfc <alt_open_fd>
}  
 8014f20:	e037883a 	mov	sp,fp
 8014f24:	dfc00117 	ldw	ra,4(sp)
 8014f28:	df000017 	ldw	fp,0(sp)
 8014f2c:	dec00204 	addi	sp,sp,8
 8014f30:	f800283a 	ret

08014f34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014f34:	defffe04 	addi	sp,sp,-8
 8014f38:	dfc00115 	stw	ra,4(sp)
 8014f3c:	df000015 	stw	fp,0(sp)
 8014f40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014f44:	008200b4 	movhi	r2,2050
 8014f48:	1087ee04 	addi	r2,r2,8120
 8014f4c:	10800017 	ldw	r2,0(r2)
 8014f50:	10000526 	beq	r2,zero,8014f68 <alt_get_errno+0x34>
 8014f54:	008200b4 	movhi	r2,2050
 8014f58:	1087ee04 	addi	r2,r2,8120
 8014f5c:	10800017 	ldw	r2,0(r2)
 8014f60:	103ee83a 	callr	r2
 8014f64:	00000206 	br	8014f70 <alt_get_errno+0x3c>
 8014f68:	008200b4 	movhi	r2,2050
 8014f6c:	108ebe04 	addi	r2,r2,15096
}
 8014f70:	e037883a 	mov	sp,fp
 8014f74:	dfc00117 	ldw	ra,4(sp)
 8014f78:	df000017 	ldw	fp,0(sp)
 8014f7c:	dec00204 	addi	sp,sp,8
 8014f80:	f800283a 	ret

08014f84 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8014f84:	defffd04 	addi	sp,sp,-12
 8014f88:	df000215 	stw	fp,8(sp)
 8014f8c:	df000204 	addi	fp,sp,8
 8014f90:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8014f94:	e0bfff17 	ldw	r2,-4(fp)
 8014f98:	10800217 	ldw	r2,8(r2)
 8014f9c:	10d00034 	orhi	r3,r2,16384
 8014fa0:	e0bfff17 	ldw	r2,-4(fp)
 8014fa4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014fa8:	e03ffe15 	stw	zero,-8(fp)
 8014fac:	00001d06 	br	8015024 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014fb0:	008200b4 	movhi	r2,2050
 8014fb4:	10836004 	addi	r2,r2,3456
 8014fb8:	e0fffe17 	ldw	r3,-8(fp)
 8014fbc:	18c00324 	muli	r3,r3,12
 8014fc0:	10c5883a 	add	r2,r2,r3
 8014fc4:	10c00017 	ldw	r3,0(r2)
 8014fc8:	e0bfff17 	ldw	r2,-4(fp)
 8014fcc:	10800017 	ldw	r2,0(r2)
 8014fd0:	1880111e 	bne	r3,r2,8015018 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014fd4:	008200b4 	movhi	r2,2050
 8014fd8:	10836004 	addi	r2,r2,3456
 8014fdc:	e0fffe17 	ldw	r3,-8(fp)
 8014fe0:	18c00324 	muli	r3,r3,12
 8014fe4:	10c5883a 	add	r2,r2,r3
 8014fe8:	10800204 	addi	r2,r2,8
 8014fec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014ff0:	1000090e 	bge	r2,zero,8015018 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8014ff4:	e0bffe17 	ldw	r2,-8(fp)
 8014ff8:	10c00324 	muli	r3,r2,12
 8014ffc:	008200b4 	movhi	r2,2050
 8015000:	10836004 	addi	r2,r2,3456
 8015004:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015008:	e0bfff17 	ldw	r2,-4(fp)
 801500c:	18800226 	beq	r3,r2,8015018 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8015010:	00bffcc4 	movi	r2,-13
 8015014:	00000a06 	br	8015040 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8015018:	e0bffe17 	ldw	r2,-8(fp)
 801501c:	10800044 	addi	r2,r2,1
 8015020:	e0bffe15 	stw	r2,-8(fp)
 8015024:	008200b4 	movhi	r2,2050
 8015028:	1087ed04 	addi	r2,r2,8116
 801502c:	10800017 	ldw	r2,0(r2)
 8015030:	1007883a 	mov	r3,r2
 8015034:	e0bffe17 	ldw	r2,-8(fp)
 8015038:	18bfdd2e 	bgeu	r3,r2,8014fb0 <__alt_data_end+0xfc014fb0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801503c:	0005883a 	mov	r2,zero
}
 8015040:	e037883a 	mov	sp,fp
 8015044:	df000017 	ldw	fp,0(sp)
 8015048:	dec00104 	addi	sp,sp,4
 801504c:	f800283a 	ret

08015050 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8015050:	defff604 	addi	sp,sp,-40
 8015054:	dfc00915 	stw	ra,36(sp)
 8015058:	df000815 	stw	fp,32(sp)
 801505c:	df000804 	addi	fp,sp,32
 8015060:	e13ffd15 	stw	r4,-12(fp)
 8015064:	e17ffe15 	stw	r5,-8(fp)
 8015068:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801506c:	00bfffc4 	movi	r2,-1
 8015070:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8015074:	00bffb44 	movi	r2,-19
 8015078:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801507c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8015080:	e13ffd17 	ldw	r4,-12(fp)
 8015084:	014200b4 	movhi	r5,2050
 8015088:	2947eb04 	addi	r5,r5,8108
 801508c:	8014d3c0 	call	8014d3c <alt_find_dev>
 8015090:	e0bff815 	stw	r2,-32(fp)
 8015094:	e0bff817 	ldw	r2,-32(fp)
 8015098:	1000051e 	bne	r2,zero,80150b0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801509c:	e13ffd17 	ldw	r4,-12(fp)
 80150a0:	80153640 	call	8015364 <alt_find_file>
 80150a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80150a8:	00800044 	movi	r2,1
 80150ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80150b0:	e0bff817 	ldw	r2,-32(fp)
 80150b4:	10002926 	beq	r2,zero,801515c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80150b8:	e13ff817 	ldw	r4,-32(fp)
 80150bc:	80154780 	call	8015478 <alt_get_fd>
 80150c0:	e0bff915 	stw	r2,-28(fp)
 80150c4:	e0bff917 	ldw	r2,-28(fp)
 80150c8:	1000030e 	bge	r2,zero,80150d8 <open+0x88>
    {
      status = index;
 80150cc:	e0bff917 	ldw	r2,-28(fp)
 80150d0:	e0bffa15 	stw	r2,-24(fp)
 80150d4:	00002306 	br	8015164 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 80150d8:	e0bff917 	ldw	r2,-28(fp)
 80150dc:	10c00324 	muli	r3,r2,12
 80150e0:	008200b4 	movhi	r2,2050
 80150e4:	10836004 	addi	r2,r2,3456
 80150e8:	1885883a 	add	r2,r3,r2
 80150ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80150f0:	e0fffe17 	ldw	r3,-8(fp)
 80150f4:	00900034 	movhi	r2,16384
 80150f8:	10bfffc4 	addi	r2,r2,-1
 80150fc:	1886703a 	and	r3,r3,r2
 8015100:	e0bffc17 	ldw	r2,-16(fp)
 8015104:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8015108:	e0bffb17 	ldw	r2,-20(fp)
 801510c:	1000051e 	bne	r2,zero,8015124 <open+0xd4>
 8015110:	e13ffc17 	ldw	r4,-16(fp)
 8015114:	8014f840 	call	8014f84 <alt_file_locked>
 8015118:	e0bffa15 	stw	r2,-24(fp)
 801511c:	e0bffa17 	ldw	r2,-24(fp)
 8015120:	10001016 	blt	r2,zero,8015164 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8015124:	e0bff817 	ldw	r2,-32(fp)
 8015128:	10800317 	ldw	r2,12(r2)
 801512c:	10000826 	beq	r2,zero,8015150 <open+0x100>
 8015130:	e0bff817 	ldw	r2,-32(fp)
 8015134:	10800317 	ldw	r2,12(r2)
 8015138:	e13ffc17 	ldw	r4,-16(fp)
 801513c:	e17ffd17 	ldw	r5,-12(fp)
 8015140:	e1bffe17 	ldw	r6,-8(fp)
 8015144:	e1ffff17 	ldw	r7,-4(fp)
 8015148:	103ee83a 	callr	r2
 801514c:	00000106 	br	8015154 <open+0x104>
 8015150:	0005883a 	mov	r2,zero
 8015154:	e0bffa15 	stw	r2,-24(fp)
 8015158:	00000206 	br	8015164 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801515c:	00bffb44 	movi	r2,-19
 8015160:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8015164:	e0bffa17 	ldw	r2,-24(fp)
 8015168:	1000090e 	bge	r2,zero,8015190 <open+0x140>
  {
    alt_release_fd (index);  
 801516c:	e13ff917 	ldw	r4,-28(fp)
 8015170:	80135640 	call	8013564 <alt_release_fd>
    ALT_ERRNO = -status;
 8015174:	8014f340 	call	8014f34 <alt_get_errno>
 8015178:	1007883a 	mov	r3,r2
 801517c:	e0bffa17 	ldw	r2,-24(fp)
 8015180:	0085c83a 	sub	r2,zero,r2
 8015184:	18800015 	stw	r2,0(r3)
    return -1;
 8015188:	00bfffc4 	movi	r2,-1
 801518c:	00000106 	br	8015194 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8015190:	e0bff917 	ldw	r2,-28(fp)
}
 8015194:	e037883a 	mov	sp,fp
 8015198:	dfc00117 	ldw	ra,4(sp)
 801519c:	df000017 	ldw	fp,0(sp)
 80151a0:	dec00204 	addi	sp,sp,8
 80151a4:	f800283a 	ret

080151a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80151a8:	defffa04 	addi	sp,sp,-24
 80151ac:	df000515 	stw	fp,20(sp)
 80151b0:	df000504 	addi	fp,sp,20
 80151b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80151b8:	0005303a 	rdctl	r2,status
 80151bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80151c0:	e0fffc17 	ldw	r3,-16(fp)
 80151c4:	00bfff84 	movi	r2,-2
 80151c8:	1884703a 	and	r2,r3,r2
 80151cc:	1001703a 	wrctl	status,r2
  
  return context;
 80151d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80151d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80151d8:	e0bfff17 	ldw	r2,-4(fp)
 80151dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80151e0:	e0bffd17 	ldw	r2,-12(fp)
 80151e4:	10800017 	ldw	r2,0(r2)
 80151e8:	e0fffd17 	ldw	r3,-12(fp)
 80151ec:	18c00117 	ldw	r3,4(r3)
 80151f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80151f4:	e0bffd17 	ldw	r2,-12(fp)
 80151f8:	10800117 	ldw	r2,4(r2)
 80151fc:	e0fffd17 	ldw	r3,-12(fp)
 8015200:	18c00017 	ldw	r3,0(r3)
 8015204:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015208:	e0bffd17 	ldw	r2,-12(fp)
 801520c:	e0fffd17 	ldw	r3,-12(fp)
 8015210:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015214:	e0bffd17 	ldw	r2,-12(fp)
 8015218:	e0fffd17 	ldw	r3,-12(fp)
 801521c:	10c00015 	stw	r3,0(r2)
 8015220:	e0bffb17 	ldw	r2,-20(fp)
 8015224:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015228:	e0bffe17 	ldw	r2,-8(fp)
 801522c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8015230:	e037883a 	mov	sp,fp
 8015234:	df000017 	ldw	fp,0(sp)
 8015238:	dec00104 	addi	sp,sp,4
 801523c:	f800283a 	ret

08015240 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8015240:	defffb04 	addi	sp,sp,-20
 8015244:	dfc00415 	stw	ra,16(sp)
 8015248:	df000315 	stw	fp,12(sp)
 801524c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8015250:	d0a00e17 	ldw	r2,-32712(gp)
 8015254:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8015258:	d0a6e617 	ldw	r2,-25704(gp)
 801525c:	10800044 	addi	r2,r2,1
 8015260:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015264:	00002e06 	br	8015320 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8015268:	e0bffd17 	ldw	r2,-12(fp)
 801526c:	10800017 	ldw	r2,0(r2)
 8015270:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8015274:	e0bffd17 	ldw	r2,-12(fp)
 8015278:	10800403 	ldbu	r2,16(r2)
 801527c:	10803fcc 	andi	r2,r2,255
 8015280:	10000426 	beq	r2,zero,8015294 <alt_tick+0x54>
 8015284:	d0a6e617 	ldw	r2,-25704(gp)
 8015288:	1000021e 	bne	r2,zero,8015294 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801528c:	e0bffd17 	ldw	r2,-12(fp)
 8015290:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015294:	e0bffd17 	ldw	r2,-12(fp)
 8015298:	10800217 	ldw	r2,8(r2)
 801529c:	d0e6e617 	ldw	r3,-25704(gp)
 80152a0:	18801d36 	bltu	r3,r2,8015318 <alt_tick+0xd8>
 80152a4:	e0bffd17 	ldw	r2,-12(fp)
 80152a8:	10800403 	ldbu	r2,16(r2)
 80152ac:	10803fcc 	andi	r2,r2,255
 80152b0:	1000191e 	bne	r2,zero,8015318 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80152b4:	e0bffd17 	ldw	r2,-12(fp)
 80152b8:	10800317 	ldw	r2,12(r2)
 80152bc:	e0fffd17 	ldw	r3,-12(fp)
 80152c0:	18c00517 	ldw	r3,20(r3)
 80152c4:	1809883a 	mov	r4,r3
 80152c8:	103ee83a 	callr	r2
 80152cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80152d0:	e0bfff17 	ldw	r2,-4(fp)
 80152d4:	1000031e 	bne	r2,zero,80152e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80152d8:	e13ffd17 	ldw	r4,-12(fp)
 80152dc:	80151a80 	call	80151a8 <alt_alarm_stop>
 80152e0:	00000d06 	br	8015318 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80152e4:	e0bffd17 	ldw	r2,-12(fp)
 80152e8:	10c00217 	ldw	r3,8(r2)
 80152ec:	e0bfff17 	ldw	r2,-4(fp)
 80152f0:	1887883a 	add	r3,r3,r2
 80152f4:	e0bffd17 	ldw	r2,-12(fp)
 80152f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80152fc:	e0bffd17 	ldw	r2,-12(fp)
 8015300:	10c00217 	ldw	r3,8(r2)
 8015304:	d0a6e617 	ldw	r2,-25704(gp)
 8015308:	1880032e 	bgeu	r3,r2,8015318 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801530c:	e0bffd17 	ldw	r2,-12(fp)
 8015310:	00c00044 	movi	r3,1
 8015314:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015318:	e0bffe17 	ldw	r2,-8(fp)
 801531c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015320:	e0fffd17 	ldw	r3,-12(fp)
 8015324:	d0a00e04 	addi	r2,gp,-32712
 8015328:	18bfcf1e 	bne	r3,r2,8015268 <__alt_data_end+0xfc015268>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801532c:	0001883a 	nop
}
 8015330:	e037883a 	mov	sp,fp
 8015334:	dfc00117 	ldw	ra,4(sp)
 8015338:	df000017 	ldw	fp,0(sp)
 801533c:	dec00204 	addi	sp,sp,8
 8015340:	f800283a 	ret

08015344 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8015344:	deffff04 	addi	sp,sp,-4
 8015348:	df000015 	stw	fp,0(sp)
 801534c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8015350:	000170fa 	wrctl	ienable,zero
}
 8015354:	e037883a 	mov	sp,fp
 8015358:	df000017 	ldw	fp,0(sp)
 801535c:	dec00104 	addi	sp,sp,4
 8015360:	f800283a 	ret

08015364 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8015364:	defffb04 	addi	sp,sp,-20
 8015368:	dfc00415 	stw	ra,16(sp)
 801536c:	df000315 	stw	fp,12(sp)
 8015370:	df000304 	addi	fp,sp,12
 8015374:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8015378:	008200b4 	movhi	r2,2050
 801537c:	1087e904 	addi	r2,r2,8100
 8015380:	10800017 	ldw	r2,0(r2)
 8015384:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015388:	00003106 	br	8015450 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 801538c:	e0bffd17 	ldw	r2,-12(fp)
 8015390:	10800217 	ldw	r2,8(r2)
 8015394:	1009883a 	mov	r4,r2
 8015398:	8004a080 	call	8004a08 <strlen>
 801539c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80153a0:	e0bffd17 	ldw	r2,-12(fp)
 80153a4:	10c00217 	ldw	r3,8(r2)
 80153a8:	e0bffe17 	ldw	r2,-8(fp)
 80153ac:	10bfffc4 	addi	r2,r2,-1
 80153b0:	1885883a 	add	r2,r3,r2
 80153b4:	10800003 	ldbu	r2,0(r2)
 80153b8:	10803fcc 	andi	r2,r2,255
 80153bc:	1080201c 	xori	r2,r2,128
 80153c0:	10bfe004 	addi	r2,r2,-128
 80153c4:	10800bd8 	cmpnei	r2,r2,47
 80153c8:	1000031e 	bne	r2,zero,80153d8 <alt_find_file+0x74>
    {
      len -= 1;
 80153cc:	e0bffe17 	ldw	r2,-8(fp)
 80153d0:	10bfffc4 	addi	r2,r2,-1
 80153d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80153d8:	e0bffe17 	ldw	r2,-8(fp)
 80153dc:	e0ffff17 	ldw	r3,-4(fp)
 80153e0:	1885883a 	add	r2,r3,r2
 80153e4:	10800003 	ldbu	r2,0(r2)
 80153e8:	10803fcc 	andi	r2,r2,255
 80153ec:	1080201c 	xori	r2,r2,128
 80153f0:	10bfe004 	addi	r2,r2,-128
 80153f4:	10800be0 	cmpeqi	r2,r2,47
 80153f8:	1000081e 	bne	r2,zero,801541c <alt_find_file+0xb8>
 80153fc:	e0bffe17 	ldw	r2,-8(fp)
 8015400:	e0ffff17 	ldw	r3,-4(fp)
 8015404:	1885883a 	add	r2,r3,r2
 8015408:	10800003 	ldbu	r2,0(r2)
 801540c:	10803fcc 	andi	r2,r2,255
 8015410:	1080201c 	xori	r2,r2,128
 8015414:	10bfe004 	addi	r2,r2,-128
 8015418:	10000a1e 	bne	r2,zero,8015444 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 801541c:	e0bffd17 	ldw	r2,-12(fp)
 8015420:	10c00217 	ldw	r3,8(r2)
 8015424:	e0bffe17 	ldw	r2,-8(fp)
 8015428:	1809883a 	mov	r4,r3
 801542c:	e17fff17 	ldw	r5,-4(fp)
 8015430:	100d883a 	mov	r6,r2
 8015434:	80156040 	call	8015604 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8015438:	1000021e 	bne	r2,zero,8015444 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801543c:	e0bffd17 	ldw	r2,-12(fp)
 8015440:	00000806 	br	8015464 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8015444:	e0bffd17 	ldw	r2,-12(fp)
 8015448:	10800017 	ldw	r2,0(r2)
 801544c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015450:	e0fffd17 	ldw	r3,-12(fp)
 8015454:	008200b4 	movhi	r2,2050
 8015458:	1087e904 	addi	r2,r2,8100
 801545c:	18bfcb1e 	bne	r3,r2,801538c <__alt_data_end+0xfc01538c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8015460:	0005883a 	mov	r2,zero
}
 8015464:	e037883a 	mov	sp,fp
 8015468:	dfc00117 	ldw	ra,4(sp)
 801546c:	df000017 	ldw	fp,0(sp)
 8015470:	dec00204 	addi	sp,sp,8
 8015474:	f800283a 	ret

08015478 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8015478:	defffc04 	addi	sp,sp,-16
 801547c:	df000315 	stw	fp,12(sp)
 8015480:	df000304 	addi	fp,sp,12
 8015484:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8015488:	00bffa04 	movi	r2,-24
 801548c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015490:	e03ffd15 	stw	zero,-12(fp)
 8015494:	00001d06 	br	801550c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8015498:	008200b4 	movhi	r2,2050
 801549c:	10836004 	addi	r2,r2,3456
 80154a0:	e0fffd17 	ldw	r3,-12(fp)
 80154a4:	18c00324 	muli	r3,r3,12
 80154a8:	10c5883a 	add	r2,r2,r3
 80154ac:	10800017 	ldw	r2,0(r2)
 80154b0:	1000131e 	bne	r2,zero,8015500 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 80154b4:	008200b4 	movhi	r2,2050
 80154b8:	10836004 	addi	r2,r2,3456
 80154bc:	e0fffd17 	ldw	r3,-12(fp)
 80154c0:	18c00324 	muli	r3,r3,12
 80154c4:	10c5883a 	add	r2,r2,r3
 80154c8:	e0ffff17 	ldw	r3,-4(fp)
 80154cc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80154d0:	008200b4 	movhi	r2,2050
 80154d4:	1087ed04 	addi	r2,r2,8116
 80154d8:	10c00017 	ldw	r3,0(r2)
 80154dc:	e0bffd17 	ldw	r2,-12(fp)
 80154e0:	1880040e 	bge	r3,r2,80154f4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 80154e4:	008200b4 	movhi	r2,2050
 80154e8:	1087ed04 	addi	r2,r2,8116
 80154ec:	e0fffd17 	ldw	r3,-12(fp)
 80154f0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 80154f4:	e0bffd17 	ldw	r2,-12(fp)
 80154f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80154fc:	00000606 	br	8015518 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015500:	e0bffd17 	ldw	r2,-12(fp)
 8015504:	10800044 	addi	r2,r2,1
 8015508:	e0bffd15 	stw	r2,-12(fp)
 801550c:	e0bffd17 	ldw	r2,-12(fp)
 8015510:	10800810 	cmplti	r2,r2,32
 8015514:	103fe01e 	bne	r2,zero,8015498 <__alt_data_end+0xfc015498>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8015518:	e0bffe17 	ldw	r2,-8(fp)
}
 801551c:	e037883a 	mov	sp,fp
 8015520:	df000017 	ldw	fp,0(sp)
 8015524:	dec00104 	addi	sp,sp,4
 8015528:	f800283a 	ret

0801552c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 801552c:	defffb04 	addi	sp,sp,-20
 8015530:	df000415 	stw	fp,16(sp)
 8015534:	df000404 	addi	fp,sp,16
 8015538:	e13ffe15 	stw	r4,-8(fp)
 801553c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8015540:	e0bfff17 	ldw	r2,-4(fp)
 8015544:	10840070 	cmpltui	r2,r2,4097
 8015548:	1000021e 	bne	r2,zero,8015554 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 801554c:	00840004 	movi	r2,4096
 8015550:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8015554:	e0fffe17 	ldw	r3,-8(fp)
 8015558:	e0bfff17 	ldw	r2,-4(fp)
 801555c:	1885883a 	add	r2,r3,r2
 8015560:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8015564:	e0bffe17 	ldw	r2,-8(fp)
 8015568:	e0bffc15 	stw	r2,-16(fp)
 801556c:	00000506 	br	8015584 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8015570:	e0bffc17 	ldw	r2,-16(fp)
 8015574:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8015578:	e0bffc17 	ldw	r2,-16(fp)
 801557c:	10800804 	addi	r2,r2,32
 8015580:	e0bffc15 	stw	r2,-16(fp)
 8015584:	e0fffc17 	ldw	r3,-16(fp)
 8015588:	e0bffd17 	ldw	r2,-12(fp)
 801558c:	18bff836 	bltu	r3,r2,8015570 <__alt_data_end+0xfc015570>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8015590:	e0bffe17 	ldw	r2,-8(fp)
 8015594:	108007cc 	andi	r2,r2,31
 8015598:	10000226 	beq	r2,zero,80155a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801559c:	e0bffc17 	ldw	r2,-16(fp)
 80155a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80155a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80155a8:	e037883a 	mov	sp,fp
 80155ac:	df000017 	ldw	fp,0(sp)
 80155b0:	dec00104 	addi	sp,sp,4
 80155b4:	f800283a 	ret

080155b8 <atexit>:
 80155b8:	200b883a 	mov	r5,r4
 80155bc:	000d883a 	mov	r6,zero
 80155c0:	0009883a 	mov	r4,zero
 80155c4:	000f883a 	mov	r7,zero
 80155c8:	80156801 	jmpi	8015680 <__register_exitproc>

080155cc <exit>:
 80155cc:	defffe04 	addi	sp,sp,-8
 80155d0:	000b883a 	mov	r5,zero
 80155d4:	dc000015 	stw	r16,0(sp)
 80155d8:	dfc00115 	stw	ra,4(sp)
 80155dc:	2021883a 	mov	r16,r4
 80155e0:	80157940 	call	8015794 <__call_exitprocs>
 80155e4:	008200b4 	movhi	r2,2050
 80155e8:	1087e504 	addi	r2,r2,8084
 80155ec:	11000017 	ldw	r4,0(r2)
 80155f0:	20800f17 	ldw	r2,60(r4)
 80155f4:	10000126 	beq	r2,zero,80155fc <exit+0x30>
 80155f8:	103ee83a 	callr	r2
 80155fc:	8009883a 	mov	r4,r16
 8015600:	80159280 	call	8015928 <_exit>

08015604 <memcmp>:
 8015604:	01c000c4 	movi	r7,3
 8015608:	3980192e 	bgeu	r7,r6,8015670 <memcmp+0x6c>
 801560c:	2144b03a 	or	r2,r4,r5
 8015610:	11c4703a 	and	r2,r2,r7
 8015614:	10000f26 	beq	r2,zero,8015654 <memcmp+0x50>
 8015618:	20800003 	ldbu	r2,0(r4)
 801561c:	28c00003 	ldbu	r3,0(r5)
 8015620:	10c0151e 	bne	r2,r3,8015678 <memcmp+0x74>
 8015624:	31bfff84 	addi	r6,r6,-2
 8015628:	01ffffc4 	movi	r7,-1
 801562c:	00000406 	br	8015640 <memcmp+0x3c>
 8015630:	20800003 	ldbu	r2,0(r4)
 8015634:	28c00003 	ldbu	r3,0(r5)
 8015638:	31bfffc4 	addi	r6,r6,-1
 801563c:	10c00e1e 	bne	r2,r3,8015678 <memcmp+0x74>
 8015640:	21000044 	addi	r4,r4,1
 8015644:	29400044 	addi	r5,r5,1
 8015648:	31fff91e 	bne	r6,r7,8015630 <__alt_data_end+0xfc015630>
 801564c:	0005883a 	mov	r2,zero
 8015650:	f800283a 	ret
 8015654:	20c00017 	ldw	r3,0(r4)
 8015658:	28800017 	ldw	r2,0(r5)
 801565c:	1880041e 	bne	r3,r2,8015670 <memcmp+0x6c>
 8015660:	31bfff04 	addi	r6,r6,-4
 8015664:	21000104 	addi	r4,r4,4
 8015668:	29400104 	addi	r5,r5,4
 801566c:	39bff936 	bltu	r7,r6,8015654 <__alt_data_end+0xfc015654>
 8015670:	303fe91e 	bne	r6,zero,8015618 <__alt_data_end+0xfc015618>
 8015674:	003ff506 	br	801564c <__alt_data_end+0xfc01564c>
 8015678:	10c5c83a 	sub	r2,r2,r3
 801567c:	f800283a 	ret

08015680 <__register_exitproc>:
 8015680:	008200b4 	movhi	r2,2050
 8015684:	defffa04 	addi	sp,sp,-24
 8015688:	1087e504 	addi	r2,r2,8084
 801568c:	dc000315 	stw	r16,12(sp)
 8015690:	14000017 	ldw	r16,0(r2)
 8015694:	dc400415 	stw	r17,16(sp)
 8015698:	dfc00515 	stw	ra,20(sp)
 801569c:	80805217 	ldw	r2,328(r16)
 80156a0:	2023883a 	mov	r17,r4
 80156a4:	10003626 	beq	r2,zero,8015780 <__register_exitproc+0x100>
 80156a8:	10c00117 	ldw	r3,4(r2)
 80156ac:	010007c4 	movi	r4,31
 80156b0:	20c00e16 	blt	r4,r3,80156ec <__register_exitproc+0x6c>
 80156b4:	1a400044 	addi	r9,r3,1
 80156b8:	8800211e 	bne	r17,zero,8015740 <__register_exitproc+0xc0>
 80156bc:	18c00084 	addi	r3,r3,2
 80156c0:	18c7883a 	add	r3,r3,r3
 80156c4:	18c7883a 	add	r3,r3,r3
 80156c8:	12400115 	stw	r9,4(r2)
 80156cc:	10c7883a 	add	r3,r2,r3
 80156d0:	19400015 	stw	r5,0(r3)
 80156d4:	0005883a 	mov	r2,zero
 80156d8:	dfc00517 	ldw	ra,20(sp)
 80156dc:	dc400417 	ldw	r17,16(sp)
 80156e0:	dc000317 	ldw	r16,12(sp)
 80156e4:	dec00604 	addi	sp,sp,24
 80156e8:	f800283a 	ret
 80156ec:	00820034 	movhi	r2,2048
 80156f0:	108ff304 	addi	r2,r2,16332
 80156f4:	10002526 	beq	r2,zero,801578c <__register_exitproc+0x10c>
 80156f8:	01006404 	movi	r4,400
 80156fc:	d9400015 	stw	r5,0(sp)
 8015700:	d9800115 	stw	r6,4(sp)
 8015704:	d9c00215 	stw	r7,8(sp)
 8015708:	8003fcc0 	call	8003fcc <malloc>
 801570c:	d9400017 	ldw	r5,0(sp)
 8015710:	d9800117 	ldw	r6,4(sp)
 8015714:	d9c00217 	ldw	r7,8(sp)
 8015718:	10001c26 	beq	r2,zero,801578c <__register_exitproc+0x10c>
 801571c:	80c05217 	ldw	r3,328(r16)
 8015720:	10000115 	stw	zero,4(r2)
 8015724:	02400044 	movi	r9,1
 8015728:	10c00015 	stw	r3,0(r2)
 801572c:	80805215 	stw	r2,328(r16)
 8015730:	10006215 	stw	zero,392(r2)
 8015734:	10006315 	stw	zero,396(r2)
 8015738:	0007883a 	mov	r3,zero
 801573c:	883fdf26 	beq	r17,zero,80156bc <__alt_data_end+0xfc0156bc>
 8015740:	18d1883a 	add	r8,r3,r3
 8015744:	4211883a 	add	r8,r8,r8
 8015748:	1211883a 	add	r8,r2,r8
 801574c:	41802215 	stw	r6,136(r8)
 8015750:	01000044 	movi	r4,1
 8015754:	11806217 	ldw	r6,392(r2)
 8015758:	20c8983a 	sll	r4,r4,r3
 801575c:	310cb03a 	or	r6,r6,r4
 8015760:	11806215 	stw	r6,392(r2)
 8015764:	41c04215 	stw	r7,264(r8)
 8015768:	01800084 	movi	r6,2
 801576c:	89bfd31e 	bne	r17,r6,80156bc <__alt_data_end+0xfc0156bc>
 8015770:	11806317 	ldw	r6,396(r2)
 8015774:	3108b03a 	or	r4,r6,r4
 8015778:	11006315 	stw	r4,396(r2)
 801577c:	003fcf06 	br	80156bc <__alt_data_end+0xfc0156bc>
 8015780:	80805304 	addi	r2,r16,332
 8015784:	80805215 	stw	r2,328(r16)
 8015788:	003fc706 	br	80156a8 <__alt_data_end+0xfc0156a8>
 801578c:	00bfffc4 	movi	r2,-1
 8015790:	003fd106 	br	80156d8 <__alt_data_end+0xfc0156d8>

08015794 <__call_exitprocs>:
 8015794:	008200b4 	movhi	r2,2050
 8015798:	1087e504 	addi	r2,r2,8084
 801579c:	10800017 	ldw	r2,0(r2)
 80157a0:	defff404 	addi	sp,sp,-48
 80157a4:	dd800815 	stw	r22,32(sp)
 80157a8:	d8800015 	stw	r2,0(sp)
 80157ac:	10805204 	addi	r2,r2,328
 80157b0:	dd000615 	stw	r20,24(sp)
 80157b4:	dc800415 	stw	r18,16(sp)
 80157b8:	dfc00b15 	stw	ra,44(sp)
 80157bc:	df000a15 	stw	fp,40(sp)
 80157c0:	ddc00915 	stw	r23,36(sp)
 80157c4:	dd400715 	stw	r21,28(sp)
 80157c8:	dcc00515 	stw	r19,20(sp)
 80157cc:	dc400315 	stw	r17,12(sp)
 80157d0:	dc000215 	stw	r16,8(sp)
 80157d4:	2025883a 	mov	r18,r4
 80157d8:	2829883a 	mov	r20,r5
 80157dc:	d8800115 	stw	r2,4(sp)
 80157e0:	05bfffc4 	movi	r22,-1
 80157e4:	d8800017 	ldw	r2,0(sp)
 80157e8:	14c05217 	ldw	r19,328(r2)
 80157ec:	98001d26 	beq	r19,zero,8015864 <__call_exitprocs+0xd0>
 80157f0:	dd400117 	ldw	r21,4(sp)
 80157f4:	98800117 	ldw	r2,4(r19)
 80157f8:	173fffc4 	addi	fp,r2,-1
 80157fc:	e0000d16 	blt	fp,zero,8015834 <__call_exitprocs+0xa0>
 8015800:	14000044 	addi	r16,r2,1
 8015804:	8421883a 	add	r16,r16,r16
 8015808:	8421883a 	add	r16,r16,r16
 801580c:	84402004 	addi	r17,r16,128
 8015810:	9c63883a 	add	r17,r19,r17
 8015814:	9c21883a 	add	r16,r19,r16
 8015818:	a0001e26 	beq	r20,zero,8015894 <__call_exitprocs+0x100>
 801581c:	80804017 	ldw	r2,256(r16)
 8015820:	15001c26 	beq	r2,r20,8015894 <__call_exitprocs+0x100>
 8015824:	e73fffc4 	addi	fp,fp,-1
 8015828:	843fff04 	addi	r16,r16,-4
 801582c:	8c7fff04 	addi	r17,r17,-4
 8015830:	e5bff91e 	bne	fp,r22,8015818 <__alt_data_end+0xfc015818>
 8015834:	00820034 	movhi	r2,2048
 8015838:	108ff804 	addi	r2,r2,16352
 801583c:	10000926 	beq	r2,zero,8015864 <__call_exitprocs+0xd0>
 8015840:	98800117 	ldw	r2,4(r19)
 8015844:	1000311e 	bne	r2,zero,801590c <__call_exitprocs+0x178>
 8015848:	98800017 	ldw	r2,0(r19)
 801584c:	10003426 	beq	r2,zero,8015920 <__call_exitprocs+0x18c>
 8015850:	9809883a 	mov	r4,r19
 8015854:	a8800015 	stw	r2,0(r21)
 8015858:	8003fe00 	call	8003fe0 <free>
 801585c:	acc00017 	ldw	r19,0(r21)
 8015860:	983fe41e 	bne	r19,zero,80157f4 <__alt_data_end+0xfc0157f4>
 8015864:	dfc00b17 	ldw	ra,44(sp)
 8015868:	df000a17 	ldw	fp,40(sp)
 801586c:	ddc00917 	ldw	r23,36(sp)
 8015870:	dd800817 	ldw	r22,32(sp)
 8015874:	dd400717 	ldw	r21,28(sp)
 8015878:	dd000617 	ldw	r20,24(sp)
 801587c:	dcc00517 	ldw	r19,20(sp)
 8015880:	dc800417 	ldw	r18,16(sp)
 8015884:	dc400317 	ldw	r17,12(sp)
 8015888:	dc000217 	ldw	r16,8(sp)
 801588c:	dec00c04 	addi	sp,sp,48
 8015890:	f800283a 	ret
 8015894:	98800117 	ldw	r2,4(r19)
 8015898:	80c00017 	ldw	r3,0(r16)
 801589c:	10bfffc4 	addi	r2,r2,-1
 80158a0:	17001526 	beq	r2,fp,80158f8 <__call_exitprocs+0x164>
 80158a4:	80000015 	stw	zero,0(r16)
 80158a8:	183fde26 	beq	r3,zero,8015824 <__alt_data_end+0xfc015824>
 80158ac:	00800044 	movi	r2,1
 80158b0:	1708983a 	sll	r4,r2,fp
 80158b4:	98806217 	ldw	r2,392(r19)
 80158b8:	9dc00117 	ldw	r23,4(r19)
 80158bc:	2084703a 	and	r2,r4,r2
 80158c0:	1000061e 	bne	r2,zero,80158dc <__call_exitprocs+0x148>
 80158c4:	183ee83a 	callr	r3
 80158c8:	98800117 	ldw	r2,4(r19)
 80158cc:	15ffc51e 	bne	r2,r23,80157e4 <__alt_data_end+0xfc0157e4>
 80158d0:	a8800017 	ldw	r2,0(r21)
 80158d4:	14ffd326 	beq	r2,r19,8015824 <__alt_data_end+0xfc015824>
 80158d8:	003fc206 	br	80157e4 <__alt_data_end+0xfc0157e4>
 80158dc:	98806317 	ldw	r2,396(r19)
 80158e0:	2084703a 	and	r2,r4,r2
 80158e4:	1000061e 	bne	r2,zero,8015900 <__call_exitprocs+0x16c>
 80158e8:	89400017 	ldw	r5,0(r17)
 80158ec:	9009883a 	mov	r4,r18
 80158f0:	183ee83a 	callr	r3
 80158f4:	003ff406 	br	80158c8 <__alt_data_end+0xfc0158c8>
 80158f8:	9f000115 	stw	fp,4(r19)
 80158fc:	003fea06 	br	80158a8 <__alt_data_end+0xfc0158a8>
 8015900:	89000017 	ldw	r4,0(r17)
 8015904:	183ee83a 	callr	r3
 8015908:	003fef06 	br	80158c8 <__alt_data_end+0xfc0158c8>
 801590c:	98800017 	ldw	r2,0(r19)
 8015910:	982b883a 	mov	r21,r19
 8015914:	1027883a 	mov	r19,r2
 8015918:	983fb61e 	bne	r19,zero,80157f4 <__alt_data_end+0xfc0157f4>
 801591c:	003fd106 	br	8015864 <__alt_data_end+0xfc015864>
 8015920:	0005883a 	mov	r2,zero
 8015924:	003ffa06 	br	8015910 <__alt_data_end+0xfc015910>

08015928 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8015928:	defffd04 	addi	sp,sp,-12
 801592c:	df000215 	stw	fp,8(sp)
 8015930:	df000204 	addi	fp,sp,8
 8015934:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8015938:	0001883a 	nop
 801593c:	e0bfff17 	ldw	r2,-4(fp)
 8015940:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015944:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8015948:	10000226 	beq	r2,zero,8015954 <_exit+0x2c>
    ALT_SIM_FAIL();
 801594c:	002af070 	cmpltui	zero,zero,43969
 8015950:	00000106 	br	8015958 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8015954:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8015958:	003fff06 	br	8015958 <__alt_data_end+0xfc015958>
