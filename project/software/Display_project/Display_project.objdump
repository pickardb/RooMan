
Display_project.elf:     file format elf32-littlenios2
Display_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001f8b8 memsz 0x0001f8b8 flags r-x
    LOAD off    0x000208d8 vaddr 0x0801f8d8 paddr 0x080213f0 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00022f08 vaddr 0x08022f08 paddr 0x08022f08 align 2**12
         filesz 0x00000000 memsz 0x000001c0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014cc8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000aa54  08014e84  08014e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0801f8d8  080213f0  000208d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c0  08022f08  08022f08  00022f08  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080230c8  080230c8  000223f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000223f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000de8  00000000  00000000  00022418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002902c  00000000  00000000  00023200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a019  00000000  00000000  0004c22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ce3d  00000000  00000000  00056245  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002bac  00000000  00000000  00063084  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003f06  00000000  00000000  00065c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b58a  00000000  00000000  00069b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000850c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014c8  00000000  00000000  00085110  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008a134  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008a137  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008a143  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008a144  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008a145  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008a150  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008a15b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0008a166  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  0008a171  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0008a1b7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006f74b  00000000  00000000  0008ed03  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08014e84 l    d  .rodata	00000000 .rodata
0801f8d8 l    d  .rwdata	00000000 .rwdata
08022f08 l    d  .bss	00000000 .bss
080230c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Display_project_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801f6c6 l     O .rodata	00000010 zeroes.4166
0801f6d6 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
0801f6e6 l     O .rodata	00000010 zeroes.4181
0801f6f6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080078d0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08009450 l     F .text	00000008 __fp_lock
08009458 l     F .text	00000008 __fp_unlock
0800946c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801f8d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0801fd1c l     O .rwdata	00000020 lc_ctype_charset
0801fcfc l     O .rwdata	00000020 lc_message_charset
0801fd3c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801f728 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801f84c l     O .rodata	00000010 zeroes.4110
0801f85c l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0800dc64 l     F .text	000000fc __sprint_r.part.0
0801f87c l     O .rodata	00000010 blanks.4125
0801f86c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08010580 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
08012094 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080121b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080121e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080122e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080123d4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080124b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08012694 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080213e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08012920 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08012a68 l     F .text	00000038 alt_dev_reg
08020324 l     O .rwdata	00001060 jtag_uart_0
08021384 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08012d6c l     F .text	00000204 altera_avalon_jtag_uart_irq
08012f70 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08013590 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08013de8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08014324 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801445c l     F .text	00000050 alt_get_errno
080144ac l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08000e28 g     F .text	00000054 sign
080035b0 g     F .text	00000018 putchar
0800bf0c g     F .text	00000074 _mprec_log10
0800bff8 g     F .text	0000008c __any_on
0800f724 g     F .text	00000054 _isatty_r
0801f734 g     O .rodata	00000028 __mprec_tinytens
080125dc g     F .text	00000078 alt_main
08001c64 g     F .text	00000060 RequestDotDisplay
080035c8 g     F .text	000000b8 _puts_r
08022fc8 g     O .bss	00000100 alt_irq
0800f778 g     F .text	0000005c _lseek_r
080213f0 g       *ABS*	00000000 __flash_rwdata_start
08013700 g     F .text	0000003c alt_up_character_lcd_send_cmd
08010f78 g     F .text	00000084 .hidden __eqdf2
08000c8c g     F .text	0000007c ProgramPalette
080230c8 g       *ABS*	00000000 __alt_heap_start
080003d4 g     F .text	0000017c readDataFromTx
0800129c g     F .text	000001b0 OutGraphicsCharFont2
0800356c g     F .text	0000003c printf
0801511e g     O .rodata	00000a64 Font10x14
0800f830 g     F .text	0000009c _wcrtomb_r
08000b24 g     F .text	0000005c GetPress
0800c92c g     F .text	0000005c __sseek
080097a0 g     F .text	00000010 __sinit
0800f0f8 g     F .text	00000154 __swbuf_r
0800a218 g     F .text	0000007c _setlocale_r
080009cc g     F .text	00000030 WaitForTouch
0800960c g     F .text	00000064 __sfmoreglue
08012674 g     F .text	00000020 __malloc_unlock
0800ae78 g     F .text	0000015c memmove
08009788 g     F .text	00000018 _cleanup
0800b0f8 g     F .text	000000a8 _Balloc
080031c4 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0801368c g     F .text	00000074 get_DDRAM_addr
0800144c g     F .text	00000148 DrawString
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800f6cc g     F .text	00000058 _fstat_r
08022f20 g     O .bss	00000004 errno
08002734 g     F .text	000001f4 floor
0800c8a8 g     F .text	00000008 __seofread
0800cbfc g     F .text	00001068 ___svfiprintf_internal_r
08022f28 g     O .bss	00000004 alt_argv
080293b0 g       *ABS*	00000000 _gp
080128f0 g     F .text	00000030 usleep
08000610 g     F .text	0000005c putcharRS232
080201a4 g     O .rwdata	00000180 alt_fd_list
0800072c g     F .text	00000030 RS232TestForReceivedData
080035a8 g     F .text	00000008 _putchar_r
08013f94 g     F .text	00000090 alt_find_dev
0800ad40 g     F .text	00000138 memcpy
0801389c g     F .text	00000050 alt_up_character_lcd_write_fd
080005b0 g     F .text	00000060 Init_RS232
08009460 g     F .text	0000000c _cleanup_r
0800340c g     F .text	000000d0 .hidden __floatsidf
08001694 g     F .text	00000554 InfoDisplay
080143e4 g     F .text	00000078 alt_io_redirect
080032a4 g     F .text	000000e0 .hidden __ltdf2
08014e84 g       *ABS*	00000000 __DTOR_END__
08003680 g     F .text	00000014 puts
08001f10 g     F .text	00000300 InfoChoice
0800c78c g     F .text	00000074 __fpclassifyd
0800be68 g     F .text	000000a4 __ratio
0800f0d4 g     F .text	00000024 __vfiprintf_internal
0801316c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08003540 g     F .text	0000002c _printf_r
0801069c g     F .text	00000008 .hidden __udivsi3
08012330 g     F .text	000000a4 isatty
0801f784 g     O .rodata	000000c8 __mprec_tens
08002210 g     F .text	000000e0 PrintNumbers
08019c14 g     O .rodata	00005794 Font38x59
0800a294 g     F .text	0000000c __locale_charset
08000d08 g     F .text	00000090 DrawHorizontalLine
08014a54 g     F .text	0000008c alt_icache_flush
08022f1c g     O .bss	00000004 __malloc_top_pad
080213b8 g     O .rwdata	00000004 __mb_cur_max
0800a2c4 g     F .text	0000000c _localeconv_r
0800b4f8 g     F .text	0000003c __i2b
08009c04 g     F .text	000004a4 __sfvwrite_r
0800c800 g     F .text	00000054 _sbrk_r
08000234 g     F .text	0000005c putcharBluetooth
0800f7d4 g     F .text	0000005c _read_r
080213d8 g     O .rwdata	00000004 alt_max_fd
0800f3dc g     F .text	00000100 _fclose_r
08009420 g     F .text	00000030 fflush
08022f18 g     O .bss	00000004 __malloc_max_sbrked_mem
080009fc g     F .text	00000128 GetPen
08002928 g     F .text	0000089c .hidden __adddf3
0800bc10 g     F .text	0000011c __b2d
0800fff0 g     F .text	00000590 .hidden __umoddi3
08012508 g     F .text	000000d4 lseek
080213b0 g     O .rwdata	00000004 _global_impure_ptr
0800c1ec g     F .text	000005a0 _realloc_r
08001e3c g     F .text	000000d4 BaseChoice
080230c8 g       *ABS*	00000000 __bss_end
08014234 g     F .text	000000f0 alt_iic_isr_register
08014768 g     F .text	00000104 alt_tick
0800fa30 g     F .text	000005c0 .hidden __udivdi3
0800f4f0 g     F .text	00000184 _fputwc_r
0801f75c g     O .rodata	00000028 __mprec_bigtens
0800b2dc g     F .text	00000104 __s2b
08011ff0 g     F .text	000000a4 .hidden __floatunsidf
0800b9b8 g     F .text	00000060 __mcmp
0800092c g     F .text	0000006c Init_Touch
080097c0 g     F .text	00000018 __fp_lock_all
080141e8 g     F .text	0000004c alt_ic_irq_enabled
080146d0 g     F .text	00000098 alt_alarm_stop
08015b82 g     O .rodata	0000140a Font16x27
08022f30 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
0802017c g     O .rwdata	00000028 alt_dev_null
080010f0 g     F .text	000001ac OutGraphicsCharFont1
08013b30 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08001be8 g     F .text	0000007c RequestDisplay
08013dcc g     F .text	0000001c alt_dcache_flush_all
0800b3e0 g     F .text	00000068 __hi0bits
08003384 g     F .text	00000088 .hidden __fixdfsi
0800075c g     F .text	00000048 GetRangeData
080213f0 g       *ABS*	00000000 __ram_rwdata_end
080213d0 g     O .rwdata	00000008 alt_dev_list
08012970 g     F .text	000000f8 write
0800c084 g     F .text	000000a0 _putc_r
08000d98 g     F .text	00000090 DrawVerticalLine
0801f8d8 g       *ABS*	00000000 __ram_rodata_end
08012230 g     F .text	000000b0 fstat
080032a4 g     F .text	000000e0 .hidden __ledf2
08000998 g     F .text	00000034 ScreenTouched
0800b730 g     F .text	00000140 __pow5mult
0800dd78 g     F .text	0000135c ___vfiprintf_internal_r
08022f10 g     O .bss	00000004 __nlocale_changed
080106a4 g     F .text	00000008 .hidden __umodsi3
080230c8 g       *ABS*	00000000 end
08012ca8 g     F .text	000000c4 altera_avalon_jtag_uart_init
08014e84 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08013604 g     F .text	00000088 alt_avalon_timer_sc_init
080034dc g     F .text	00000064 .hidden __clzsi2
08013378 g     F .text	00000218 altera_avalon_jtag_uart_write
080097b0 g     F .text	00000004 __sfp_lock_acquire
0800ac58 g     F .text	000000e8 memchr
080137b0 g     F .text	00000078 alt_up_character_lcd_write
08005780 g     F .text	00001ffc ___vfprintf_internal_r
08003694 g     F .text	00000058 _sprintf_r
08009914 g     F .text	000002f0 _free_r
080002e8 g     F .text	0000005c wait
0800a2a0 g     F .text	00000010 __locale_mb_cur_max
08014cbc g     F .text	00000194 __call_exitprocs
08022f0c g     O .bss	00000004 __mlocale_changed
080213bc g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08022f34 g     O .bss	00000004 _alt_tick_rate
0800b870 g     F .text	00000148 __lshift
08022f38 g     O .bss	00000004 _alt_nticks
080126e4 g     F .text	000000fc read
08012ad4 g     F .text	00000070 alt_sys_init
080139e8 g     F .text	00000088 alt_up_character_lcd_shift_display
0800ca34 g     F .text	000001c8 __ssprint_r
08014ba8 g     F .text	00000114 __register_exitproc
0800b534 g     F .text	000001fc __multiply
08013a70 g     F .text	0000008c alt_up_character_lcd_erase_pos
08013018 g     F .text	00000068 altera_avalon_jtag_uart_close
0801f8d8 g       *ABS*	00000000 __ram_rwdata_start
08014e84 g       *ABS*	00000000 __ram_rodata_start
08022f3c g     O .bss	00000028 __malloc_current_mallinfo
0800bd2c g     F .text	0000013c __d2b
08022f64 g     O .bss	00000064 roomArray
08012b44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080149a0 g     F .text	000000b4 alt_get_fd
08013ca4 g     F .text	00000128 alt_busy_sleep
0800f2c4 g     F .text	00000054 _close_r
08001d90 g     F .text	000000ac RequestChoice
08014b2c g     F .text	0000007c memcmp
08012c04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080230c8 g       *ABS*	00000000 __alt_stack_base
08012c54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08000f88 g     F .text	00000084 DrawRect
080077a0 g     F .text	00000130 __swsetup_r
080106ac g     F .text	000008cc .hidden __divdf3
08009670 g     F .text	00000118 __sfp
0800bf80 g     F .text	00000078 __copybits
0801fd74 g     O .rwdata	00000408 __malloc_av_
080097bc g     F .text	00000004 __sinit_lock_release
08010ffc g     F .text	00000724 .hidden __muldf3
0800c854 g     F .text	00000054 __sread
0801488c g     F .text	00000114 alt_find_file
08013e38 g     F .text	000000a4 alt_dev_llist_insert
08012654 g     F .text	00000020 __malloc_lock
08012840 g     F .text	000000b0 sbrk
080037f0 g     F .text	00001f90 ___svfprintf_internal_r
080091f8 g     F .text	00000228 _fflush_r
0800f318 g     F .text	000000c4 _calloc_r
08022f08 g       *ABS*	00000000 __bss_start
08000e7c g     F .text	000000a0 DrawBresenhamLine
0800afd4 g     F .text	00000124 memset
080026fc g     F .text	00000038 main
08022f2c g     O .bss	00000004 alt_envp
08022f14 g     O .bss	00000004 __malloc_max_total_mem
08012ba4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800f24c g     F .text	0000001c __swbuf
0800066c g     F .text	00000060 getbitRS232
08000bfc g     F .text	00000090 ReadAPixel
08013960 g     F .text	00000088 alt_up_character_lcd_shift_cursor
0800c988 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800f4dc g     F .text	00000014 fclose
08007ad0 g     F .text	00001728 _dtoa_r
0800a4b0 g     F .text	000007a8 _malloc_r
0800f9a4 g     F .text	00000030 __ascii_wctomb
080213dc g     O .rwdata	00000004 alt_errno
080022f0 g     F .text	0000040c RunDisplay
0800a0a8 g     F .text	000000b8 _fwalk
0800c124 g     F .text	000000c8 putc
080105ec g     F .text	00000054 .hidden __divsi3
08013770 g     F .text	00000040 alt_up_character_lcd_open_dev
080097f0 g     F .text	00000124 _malloc_trim_r
08014e84 g       *ABS*	00000000 __CTOR_END__
0801373c g     F .text	00000034 alt_up_character_lcd_init
0800c990 g     F .text	000000a4 strcmp
08014e84 g       *ABS*	00000000 __flash_rodata_start
08014e84 g       *ABS*	00000000 __DTOR_LIST__
08010f78 g     F .text	00000084 .hidden __nedf2
08012aa0 g     F .text	00000034 alt_irq_init
080127e0 g     F .text	00000060 alt_release_fd
080036ec g     F .text	0000006c sprintf
08013afc g     F .text	00000034 alt_up_character_lcd_cursor_off
0801f580 g     O .rodata	00000100 .hidden __clz_tab
08022f08 g     O .bss	00000004 _PathLocale
08014ae0 g     F .text	00000014 atexit
0800f268 g     F .text	0000005c _write_r
0800a2d0 g     F .text	0000001c setlocale
08000290 g     F .text	00000058 getcharBluetooth
080007d4 g     F .text	0000002c TurnOnLights
08001594 g     F .text	00000100 BaseDisplay
080213b4 g     O .rwdata	00000004 _impure_ptr
08022f24 g     O .bss	00000004 alt_argc
08000b80 g     F .text	0000007c WriteAPixel
08013f38 g     F .text	0000005c _do_dtors
0800a2bc g     F .text	00000008 __locale_cjk_lang
08000550 g     F .text	00000060 initUltrasonic
08014e84 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0800bbb0 g     F .text	00000060 __ulp
080097d8 g     F .text	00000018 __fp_unlock_all
08000f1c g     F .text	0000006c DrawFillRect
080213c8 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800a2ec g     F .text	0000000c localeconv
080006cc g     F .text	00000060 getcharRS232
08014054 g     F .text	00000050 alt_ic_isr_register
080213f0 g       *ABS*	00000000 _edata
080230c8 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
08013080 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08001cc4 g     F .text	000000cc RequestStringDisplay
08014144 g     F .text	000000a4 alt_ic_irq_disable
0800c8b0 g     F .text	0000007c __swrite
080213c0 g     O .rwdata	00000004 __malloc_trim_threshold
0801486c g     F .text	00000020 altera_nios2_qsys_irq_init
0800a2b0 g     F .text	0000000c __locale_msgcharset
08014af4 g     F .text	00000038 exit
0800a160 g     F .text	000000b8 _fwalk_reent
0800ba18 g     F .text	00000198 __mdiff
08010640 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080097b4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08013828 g     F .text	00000074 alt_up_character_lcd_string
08016f8c g     O .rodata	00002c88 Font22x40
080008e4 g     F .text	00000048 getCharTouch
08014e50 g     F .text	00000034 _exit
08013b64 g     F .text	00000140 alt_alarm_start
08000860 g     F .text	0000002c ResolvedRequest
0800a2f8 g     F .text	000001b8 __smakebuf_r
08003758 g     F .text	00000098 strlen
08014578 g     F .text	00000158 open
080031c4 g     F .text	000000e0 .hidden __gedf2
0800100c g     F .text	000000e4 DrawFillRectBorder
080007a4 g     F .text	00000030 TurnServo
080213c4 g     O .rwdata	00000004 __wctomb
0800dd60 g     F .text	00000018 __sprint_r
08014024 g     F .text	00000030 alt_icache_flush_all
080001f8 g     F .text	0000003c runUltrasonic
08000344 g     F .text	00000090 writeDataToTx
080138ec g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080213e4 g     O .rwdata	00000004 alt_priority_mask
080140a4 g     F .text	000000a0 alt_ic_irq_enable
0800777c g     F .text	00000024 __vfprintf_internal
0800f9d4 g     F .text	0000005c _wctomb_r
08011720 g     F .text	000008d0 .hidden __subdf3
0800b448 g     F .text	000000b0 __lo0bits
080213e8 g     O .rwdata	00000008 alt_alarm_list
08013edc g     F .text	0000005c _do_ctors
0800f8cc g     F .text	000000d8 wcrtomb
080120e4 g     F .text	000000d0 close
0800088c g     F .text	00000058 putCharTouch
08012438 g     F .text	00000080 alt_load
08000800 g     F .text	00000060 GetButtonPress
0800f674 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080097b8 g     F .text	00000004 __sinit_lock_acquire
0800b1c8 g     F .text	00000114 __multadd
0800b1a0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	108bf204 	addi	r2,r2,12232
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	108bf204 	addi	r2,r2,12232
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6a4ec14 	ori	gp,gp,37808
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	108bc214 	ori	r2,r2,12040

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cc3214 	ori	r3,r3,12488

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80124380 	call	8012438 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80125dc0 	call	80125dc <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <runUltrasonic>:
#define MAX_RANDOM 100
#define TEST_ITERATIONS 10
#define ERROR -1

int runUltrasonic()
{
 80001f8:	defffd04 	addi	sp,sp,-12
 80001fc:	dfc00215 	stw	ra,8(sp)
 8000200:	df000115 	stw	fp,4(sp)
 8000204:	df000104 	addi	fp,sp,4
	Init_RS232();
 8000208:	80005b00 	call	80005b0 <Init_RS232>
	wait();wait();
 800020c:	80002e80 	call	80002e8 <wait>
 8000210:	80002e80 	call	80002e8 <wait>

	int c = readDataFromTx();
 8000214:	80003d40 	call	80003d4 <readDataFromTx>
 8000218:	e0bfff15 	stw	r2,-4(fp)
	return c;
 800021c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000220:	e037883a 	mov	sp,fp
 8000224:	dfc00117 	ldw	ra,4(sp)
 8000228:	df000017 	ldw	fp,0(sp)
 800022c:	dec00204 	addi	sp,sp,8
 8000230:	f800283a 	ret

08000234 <putcharBluetooth>:

int putcharBluetooth(int c) {
 8000234:	defffd04 	addi	sp,sp,-12
 8000238:	df000215 	stw	fp,8(sp)
 800023c:	df000204 	addi	fp,sp,8
 8000240:	e13fff15 	stw	r4,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 8000244:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000248:	00000606 	br	8000264 <putcharBluetooth+0x30>
		read_status_bit = Bluetooth_Status & 0b10;
 800024c:	00a10034 	movhi	r2,33792
 8000250:	10808804 	addi	r2,r2,544
 8000254:	10800003 	ldbu	r2,0(r2)
 8000258:	10803fcc 	andi	r2,r2,255
 800025c:	1080008c 	andi	r2,r2,2
 8000260:	e0bffe15 	stw	r2,-8(fp)

int putcharBluetooth(int c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000264:	e0bffe17 	ldw	r2,-8(fp)
 8000268:	103ff826 	beq	r2,zero,800024c <__alt_data_end+0xfc00024c>
		read_status_bit = Bluetooth_Status & 0b10;
	}
	Bluetooth_TxData = c;
 800026c:	00a10034 	movhi	r2,33792
 8000270:	10808884 	addi	r2,r2,546
 8000274:	e0ffff17 	ldw	r3,-4(fp)
 8000278:	10c00005 	stb	r3,0(r2)
	//printf("set char %c", c);
	return c;
 800027c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000280:	e037883a 	mov	sp,fp
 8000284:	df000017 	ldw	fp,0(sp)
 8000288:	dec00104 	addi	sp,sp,4
 800028c:	f800283a 	ret

08000290 <getcharBluetooth>:

char getcharBluetooth(void) {
 8000290:	defffd04 	addi	sp,sp,-12
 8000294:	df000215 	stw	fp,8(sp)
 8000298:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 800029c:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 80002a0:	00000606 	br	80002bc <getcharBluetooth+0x2c>
		read_status_bit = Bluetooth_Status & 0b01;
 80002a4:	00a10034 	movhi	r2,33792
 80002a8:	10808804 	addi	r2,r2,544
 80002ac:	10800003 	ldbu	r2,0(r2)
 80002b0:	10803fcc 	andi	r2,r2,255
 80002b4:	1080004c 	andi	r2,r2,1
 80002b8:	e0bffe15 	stw	r2,-8(fp)

char getcharBluetooth(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80002bc:	e0bffe17 	ldw	r2,-8(fp)
 80002c0:	103ff826 	beq	r2,zero,80002a4 <__alt_data_end+0xfc0002a4>
		read_status_bit = Bluetooth_Status & 0b01;
	}
	char character = Bluetooth_RxData;
 80002c4:	00a10034 	movhi	r2,33792
 80002c8:	10808884 	addi	r2,r2,546
 80002cc:	10800003 	ldbu	r2,0(r2)
 80002d0:	e0bfff05 	stb	r2,-4(fp)
	//printf("char %c", character);
	return character;
 80002d4:	e0bfff03 	ldbu	r2,-4(fp)
}
 80002d8:	e037883a 	mov	sp,fp
 80002dc:	df000017 	ldw	fp,0(sp)
 80002e0:	dec00104 	addi	sp,sp,4
 80002e4:	f800283a 	ret

080002e8 <wait>:

void wait(){
 80002e8:	defffd04 	addi	sp,sp,-12
 80002ec:	df000215 	stw	fp,8(sp)
 80002f0:	df000204 	addi	fp,sp,8
	int i=0;
 80002f4:	e03ffe15 	stw	zero,-8(fp)
	while(i<1000){
 80002f8:	00000b06 	br	8000328 <wait+0x40>
		i++;
 80002fc:	e0bffe17 	ldw	r2,-8(fp)
 8000300:	10800044 	addi	r2,r2,1
 8000304:	e0bffe15 	stw	r2,-8(fp)

		int j=0;
 8000308:	e03fff15 	stw	zero,-4(fp)
		while(j<1000){
 800030c:	00000306 	br	800031c <wait+0x34>
			j++;
 8000310:	e0bfff17 	ldw	r2,-4(fp)
 8000314:	10800044 	addi	r2,r2,1
 8000318:	e0bfff15 	stw	r2,-4(fp)
	int i=0;
	while(i<1000){
		i++;

		int j=0;
		while(j<1000){
 800031c:	e0bfff17 	ldw	r2,-4(fp)
 8000320:	1080fa10 	cmplti	r2,r2,1000
 8000324:	103ffa1e 	bne	r2,zero,8000310 <__alt_data_end+0xfc000310>
	return character;
}

void wait(){
	int i=0;
	while(i<1000){
 8000328:	e0bffe17 	ldw	r2,-8(fp)
 800032c:	1080fa10 	cmplti	r2,r2,1000
 8000330:	103ff21e 	bne	r2,zero,80002fc <__alt_data_end+0xfc0002fc>
		int j=0;
		while(j<1000){
			j++;
		}
	}
}
 8000334:	e037883a 	mov	sp,fp
 8000338:	df000017 	ldw	fp,0(sp)
 800033c:	dec00104 	addi	sp,sp,4
 8000340:	f800283a 	ret

08000344 <writeDataToTx>:

void writeDataToTx(char * data){
 8000344:	defffc04 	addi	sp,sp,-16
 8000348:	dfc00315 	stw	ra,12(sp)
 800034c:	df000215 	stw	fp,8(sp)
 8000350:	df000204 	addi	fp,sp,8
 8000354:	e13fff15 	stw	r4,-4(fp)
	int i;
	printf("Sending %s\n", data);
 8000358:	010200b4 	movhi	r4,2050
 800035c:	213cea04 	addi	r4,r4,-3160
 8000360:	e17fff17 	ldw	r5,-4(fp)
 8000364:	800356c0 	call	800356c <printf>
	for(i=0; data[i]!=NULL; i++){
 8000368:	e03ffe15 	stw	zero,-8(fp)
 800036c:	00000c06 	br	80003a0 <writeDataToTx+0x5c>
		// IORD_8DIRECT(Bluetooth_TxData, data[i]);
		// *Bluetooth_TxData = data[i];
		putcharBluetooth(data[i]);
 8000370:	e0bffe17 	ldw	r2,-8(fp)
 8000374:	e0ffff17 	ldw	r3,-4(fp)
 8000378:	1885883a 	add	r2,r3,r2
 800037c:	10800003 	ldbu	r2,0(r2)
 8000380:	10803fcc 	andi	r2,r2,255
 8000384:	1080201c 	xori	r2,r2,128
 8000388:	10bfe004 	addi	r2,r2,-128
 800038c:	1009883a 	mov	r4,r2
 8000390:	80002340 	call	8000234 <putcharBluetooth>
}

void writeDataToTx(char * data){
	int i;
	printf("Sending %s\n", data);
	for(i=0; data[i]!=NULL; i++){
 8000394:	e0bffe17 	ldw	r2,-8(fp)
 8000398:	10800044 	addi	r2,r2,1
 800039c:	e0bffe15 	stw	r2,-8(fp)
 80003a0:	e0bffe17 	ldw	r2,-8(fp)
 80003a4:	e0ffff17 	ldw	r3,-4(fp)
 80003a8:	1885883a 	add	r2,r3,r2
 80003ac:	10800003 	ldbu	r2,0(r2)
 80003b0:	10803fcc 	andi	r2,r2,255
 80003b4:	1080201c 	xori	r2,r2,128
 80003b8:	10bfe004 	addi	r2,r2,-128
 80003bc:	103fec1e 	bne	r2,zero,8000370 <__alt_data_end+0xfc000370>
		// IORD_8DIRECT(Bluetooth_TxData, data[i]);
		// *Bluetooth_TxData = data[i];
		putcharBluetooth(data[i]);
	}
}
 80003c0:	e037883a 	mov	sp,fp
 80003c4:	dfc00117 	ldw	ra,4(sp)
 80003c8:	df000017 	ldw	fp,0(sp)
 80003cc:	dec00204 	addi	sp,sp,8
 80003d0:	f800283a 	ret

080003d4 <readDataFromTx>:

void readDataFromTx(){
 80003d4:	defff904 	addi	sp,sp,-28
 80003d8:	dfc00615 	stw	ra,24(sp)
 80003dc:	df000515 	stw	fp,20(sp)
 80003e0:	dc000415 	stw	r16,16(sp)
 80003e4:	df000504 	addi	fp,sp,20
 80003e8:	d815883a 	mov	r10,sp
 80003ec:	5021883a 	mov	r16,r10
	int bufferSize = 365;
 80003f0:	02805b44 	movi	r10,365
 80003f4:	e2bffc15 	stw	r10,-16(fp)
	char buffer[bufferSize];
 80003f8:	e2bffc17 	ldw	r10,-16(fp)
 80003fc:	52ffffc4 	addi	r11,r10,-1
 8000400:	e2fffd15 	stw	r11,-12(fp)
 8000404:	5017883a 	mov	r11,r10
 8000408:	5811883a 	mov	r8,r11
 800040c:	0013883a 	mov	r9,zero
 8000410:	4016d77a 	srli	r11,r8,29
 8000414:	480a90fa 	slli	r5,r9,3
 8000418:	594ab03a 	or	r5,r11,r5
 800041c:	400890fa 	slli	r4,r8,3
 8000420:	5009883a 	mov	r4,r10
 8000424:	200d883a 	mov	r6,r4
 8000428:	000f883a 	mov	r7,zero
 800042c:	3008d77a 	srli	r4,r6,29
 8000430:	380690fa 	slli	r3,r7,3
 8000434:	20c6b03a 	or	r3,r4,r3
 8000438:	300490fa 	slli	r2,r6,3
 800043c:	5005883a 	mov	r2,r10
 8000440:	108000c4 	addi	r2,r2,3
 8000444:	1004d0ba 	srli	r2,r2,2
 8000448:	1085883a 	add	r2,r2,r2
 800044c:	1085883a 	add	r2,r2,r2
 8000450:	d8b7c83a 	sub	sp,sp,r2
 8000454:	d805883a 	mov	r2,sp
 8000458:	1005883a 	mov	r2,r2
 800045c:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for(i=0; i<bufferSize-1; i++){
 8000460:	e03ffb15 	stw	zero,-20(fp)
 8000464:	00001306 	br	80004b4 <readDataFromTx+0xe0>
		buffer[i] = getcharBluetooth();
 8000468:	80002900 	call	8000290 <getcharBluetooth>
 800046c:	1009883a 	mov	r4,r2
 8000470:	e0fffe17 	ldw	r3,-8(fp)
 8000474:	e0bffb17 	ldw	r2,-20(fp)
 8000478:	1885883a 	add	r2,r3,r2
 800047c:	11000005 	stb	r4,0(r2)
		if(buffer[i] == '\n'){
 8000480:	e0fffe17 	ldw	r3,-8(fp)
 8000484:	e0bffb17 	ldw	r2,-20(fp)
 8000488:	1885883a 	add	r2,r3,r2
 800048c:	10800003 	ldbu	r2,0(r2)
 8000490:	10803fcc 	andi	r2,r2,255
 8000494:	1080201c 	xori	r2,r2,128
 8000498:	10bfe004 	addi	r2,r2,-128
 800049c:	10800298 	cmpnei	r2,r2,10
 80004a0:	1000011e 	bne	r2,zero,80004a8 <readDataFromTx+0xd4>
			break;
 80004a4:	00000706 	br	80004c4 <readDataFromTx+0xf0>
void readDataFromTx(){
	int bufferSize = 365;
	char buffer[bufferSize];
	int i;

	for(i=0; i<bufferSize-1; i++){
 80004a8:	e0bffb17 	ldw	r2,-20(fp)
 80004ac:	10800044 	addi	r2,r2,1
 80004b0:	e0bffb15 	stw	r2,-20(fp)
 80004b4:	e0bffc17 	ldw	r2,-16(fp)
 80004b8:	10bfffc4 	addi	r2,r2,-1
 80004bc:	e0fffb17 	ldw	r3,-20(fp)
 80004c0:	18bfe916 	blt	r3,r2,8000468 <__alt_data_end+0xfc000468>
		buffer[i] = getcharBluetooth();
		if(buffer[i] == '\n'){
			break;
		}
	}
	buffer[i] = NULL;
 80004c4:	e0fffe17 	ldw	r3,-8(fp)
 80004c8:	e0bffb17 	ldw	r2,-20(fp)
 80004cc:	1885883a 	add	r2,r3,r2
 80004d0:	10000005 	stb	zero,0(r2)

	i=0;
 80004d4:	e03ffb15 	stw	zero,-20(fp)
	while(buffer[i]!=NULL){
 80004d8:	00000c06 	br	800050c <readDataFromTx+0x138>
		printf("%c", buffer[i]);
 80004dc:	e0fffe17 	ldw	r3,-8(fp)
 80004e0:	e0bffb17 	ldw	r2,-20(fp)
 80004e4:	1885883a 	add	r2,r3,r2
 80004e8:	10800003 	ldbu	r2,0(r2)
 80004ec:	10803fcc 	andi	r2,r2,255
 80004f0:	1080201c 	xori	r2,r2,128
 80004f4:	10bfe004 	addi	r2,r2,-128
 80004f8:	1009883a 	mov	r4,r2
 80004fc:	80035b00 	call	80035b0 <putchar>
		//HEX0_1 = buffer[i];
		i++;
 8000500:	e0bffb17 	ldw	r2,-20(fp)
 8000504:	10800044 	addi	r2,r2,1
 8000508:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	buffer[i] = NULL;

	i=0;
	while(buffer[i]!=NULL){
 800050c:	e0fffe17 	ldw	r3,-8(fp)
 8000510:	e0bffb17 	ldw	r2,-20(fp)
 8000514:	1885883a 	add	r2,r3,r2
 8000518:	10800003 	ldbu	r2,0(r2)
 800051c:	10803fcc 	andi	r2,r2,255
 8000520:	1080201c 	xori	r2,r2,128
 8000524:	10bfe004 	addi	r2,r2,-128
 8000528:	103fec1e 	bne	r2,zero,80004dc <__alt_data_end+0xfc0004dc>
		printf("%c", buffer[i]);
		//HEX0_1 = buffer[i];
		i++;
	}
	printf("\n");
 800052c:	01000284 	movi	r4,10
 8000530:	80035b00 	call	80035b0 <putchar>
 8000534:	8037883a 	mov	sp,r16
}
 8000538:	e6ffff04 	addi	sp,fp,-4
 800053c:	dfc00217 	ldw	ra,8(sp)
 8000540:	df000117 	ldw	fp,4(sp)
 8000544:	dc000017 	ldw	r16,0(sp)
 8000548:	dec00304 	addi	sp,sp,12
 800054c:	f800283a 	ret

08000550 <initUltrasonic>:

void initUltrasonic(){
 8000550:	defffe04 	addi	sp,sp,-8
 8000554:	dfc00115 	stw	ra,4(sp)
 8000558:	df000015 	stw	fp,0(sp)
 800055c:	d839883a 	mov	fp,sp
	printf("Initializing bluetooth control register\n");
 8000560:	010200b4 	movhi	r4,2050
 8000564:	213ced04 	addi	r4,r4,-3148
 8000568:	80036800 	call	8003680 <puts>
	Bluetooth_Control = 0b00000011;
 800056c:	00a10034 	movhi	r2,33792
 8000570:	10808804 	addi	r2,r2,544
 8000574:	00c000c4 	movi	r3,3
 8000578:	10c00005 	stb	r3,0(r2)
	Bluetooth_Control = 0b10010101;
 800057c:	00a10034 	movhi	r2,33792
 8000580:	10808804 	addi	r2,r2,544
 8000584:	00ffe544 	movi	r3,-107
 8000588:	10c00005 	stb	r3,0(r2)
	Bluetooth_Baud = 0b00000111;
 800058c:	00a10034 	movhi	r2,33792
 8000590:	10808904 	addi	r2,r2,548
 8000594:	00c001c4 	movi	r3,7
 8000598:	10c00005 	stb	r3,0(r2)
}
 800059c:	e037883a 	mov	sp,fp
 80005a0:	dfc00117 	ldw	ra,4(sp)
 80005a4:	df000017 	ldw	fp,0(sp)
 80005a8:	dec00204 	addi	sp,sp,8
 80005ac:	f800283a 	ret

080005b0 <Init_RS232>:

void Init_RS232(void) {
 80005b0:	defffe04 	addi	sp,sp,-8
 80005b4:	dfc00115 	stw	ra,4(sp)
 80005b8:	df000015 	stw	fp,0(sp)
 80005bc:	d839883a 	mov	fp,sp
	 * Set up 6850 Control register to utilise a dive by 16 clock.
	 * set RTS low, use 8 bits of data, no parity, 1 stop bit,
	 * transmitter interrupt disabled
	 * program baud rate generator to use 115k baud
	 */
	printf("Initializing control register\n");
 80005c0:	010200b4 	movhi	r4,2050
 80005c4:	213cf704 	addi	r4,r4,-3108
 80005c8:	80036800 	call	8003680 <puts>
	RS232_Control = 0b00000011;
 80005cc:	00a10034 	movhi	r2,33792
 80005d0:	10808004 	addi	r2,r2,512
 80005d4:	00c000c4 	movi	r3,3
 80005d8:	10c00005 	stb	r3,0(r2)
	RS232_Control = 0b10010101;
 80005dc:	00a10034 	movhi	r2,33792
 80005e0:	10808004 	addi	r2,r2,512
 80005e4:	00ffe544 	movi	r3,-107
 80005e8:	10c00005 	stb	r3,0(r2)
	RS232_Baud 	  = 0b00000111; // program for 9600 baud
 80005ec:	00a10034 	movhi	r2,33792
 80005f0:	10808104 	addi	r2,r2,516
 80005f4:	00c001c4 	movi	r3,7
 80005f8:	10c00005 	stb	r3,0(r2)
}
 80005fc:	e037883a 	mov	sp,fp
 8000600:	dfc00117 	ldw	ra,4(sp)
 8000604:	df000017 	ldw	fp,0(sp)
 8000608:	dec00204 	addi	sp,sp,8
 800060c:	f800283a 	ret

08000610 <putcharRS232>:
	RS232_Control = 0b00000011;
	RS232_Control = 0b10010101;
	RS232_Baud 	  = 0b00000001; // program for 115k baud
}*/

int putcharRS232(int c) {
 8000610:	defffd04 	addi	sp,sp,-12
 8000614:	df000215 	stw	fp,8(sp)
 8000618:	df000204 	addi	fp,sp,8
 800061c:	e13fff15 	stw	r4,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 8000620:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8000624:	00000606 	br	8000640 <putcharRS232+0x30>
		read_status_bit = RS232_Status & 0b10;
 8000628:	00a10034 	movhi	r2,33792
 800062c:	10808004 	addi	r2,r2,512
 8000630:	10800003 	ldbu	r2,0(r2)
 8000634:	10803fcc 	andi	r2,r2,255
 8000638:	1080008c 	andi	r2,r2,2
 800063c:	e0bffe15 	stw	r2,-8(fp)

int putcharRS232(int c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000640:	e0bffe17 	ldw	r2,-8(fp)
 8000644:	103ff826 	beq	r2,zero,8000628 <__alt_data_end+0xfc000628>
		read_status_bit = RS232_Status & 0b10;
	}
	RS232_TxData = c;
 8000648:	00a10034 	movhi	r2,33792
 800064c:	10808084 	addi	r2,r2,514
 8000650:	e0ffff17 	ldw	r3,-4(fp)
 8000654:	10c00005 	stb	r3,0(r2)
	return c;
 8000658:	e0bfff17 	ldw	r2,-4(fp)
}
 800065c:	e037883a 	mov	sp,fp
 8000660:	df000017 	ldw	fp,0(sp)
 8000664:	dec00104 	addi	sp,sp,4
 8000668:	f800283a 	ret

0800066c <getbitRS232>:

int getbitRS232(void) {
 800066c:	defffd04 	addi	sp,sp,-12
 8000670:	df000215 	stw	fp,8(sp)
 8000674:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8000678:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 800067c:	00000606 	br	8000698 <getbitRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 8000680:	00a10034 	movhi	r2,33792
 8000684:	10808004 	addi	r2,r2,512
 8000688:	10800003 	ldbu	r2,0(r2)
 800068c:	10803fcc 	andi	r2,r2,255
 8000690:	1080004c 	andi	r2,r2,1
 8000694:	e0bffe15 	stw	r2,-8(fp)

int getbitRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8000698:	e0bffe17 	ldw	r2,-8(fp)
 800069c:	103ff826 	beq	r2,zero,8000680 <__alt_data_end+0xfc000680>
		read_status_bit = RS232_Status & 0b01;
	}
	int character = RS232_RxData & 0b00000001;
 80006a0:	00a10034 	movhi	r2,33792
 80006a4:	10808084 	addi	r2,r2,514
 80006a8:	10800003 	ldbu	r2,0(r2)
 80006ac:	10803fcc 	andi	r2,r2,255
 80006b0:	1080004c 	andi	r2,r2,1
 80006b4:	e0bfff15 	stw	r2,-4(fp)
	return character;
 80006b8:	e0bfff17 	ldw	r2,-4(fp)
}
 80006bc:	e037883a 	mov	sp,fp
 80006c0:	df000017 	ldw	fp,0(sp)
 80006c4:	dec00104 	addi	sp,sp,4
 80006c8:	f800283a 	ret

080006cc <getcharRS232>:

int getcharRS232(void) {
 80006cc:	defffd04 	addi	sp,sp,-12
 80006d0:	df000215 	stw	fp,8(sp)
 80006d4:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 80006d8:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 80006dc:	00000606 	br	80006f8 <getcharRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 80006e0:	00a10034 	movhi	r2,33792
 80006e4:	10808004 	addi	r2,r2,512
 80006e8:	10800003 	ldbu	r2,0(r2)
 80006ec:	10803fcc 	andi	r2,r2,255
 80006f0:	1080004c 	andi	r2,r2,1
 80006f4:	e0bffe15 	stw	r2,-8(fp)

int getcharRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80006f8:	e0bffe17 	ldw	r2,-8(fp)
 80006fc:	103ff826 	beq	r2,zero,80006e0 <__alt_data_end+0xfc0006e0>
		read_status_bit = RS232_Status & 0b01;
	}
	int character = RS232_RxData & 0b00000001;
 8000700:	00a10034 	movhi	r2,33792
 8000704:	10808084 	addi	r2,r2,514
 8000708:	10800003 	ldbu	r2,0(r2)
 800070c:	10803fcc 	andi	r2,r2,255
 8000710:	1080004c 	andi	r2,r2,1
 8000714:	e0bfff15 	stw	r2,-4(fp)
	return character;
 8000718:	e0bfff17 	ldw	r2,-4(fp)
}
 800071c:	e037883a 	mov	sp,fp
 8000720:	df000017 	ldw	fp,0(sp)
 8000724:	dec00104 	addi	sp,sp,4
 8000728:	f800283a 	ret

0800072c <RS232TestForReceivedData>:

int RS232TestForReceivedData(void) {
 800072c:	deffff04 	addi	sp,sp,-4
 8000730:	df000015 	stw	fp,0(sp)
 8000734:	d839883a 	mov	fp,sp
	return RS232_RxData & 0b1;
 8000738:	00a10034 	movhi	r2,33792
 800073c:	10808084 	addi	r2,r2,514
 8000740:	10800003 	ldbu	r2,0(r2)
 8000744:	10803fcc 	andi	r2,r2,255
 8000748:	1080004c 	andi	r2,r2,1
}
 800074c:	e037883a 	mov	sp,fp
 8000750:	df000017 	ldw	fp,0(sp)
 8000754:	dec00104 	addi	sp,sp,4
 8000758:	f800283a 	ret

0800075c <GetRangeData>:


int GetRangeData (void){
 800075c:	defffd04 	addi	sp,sp,-12
 8000760:	dfc00215 	stw	ra,8(sp)
 8000764:	df000115 	stw	fp,4(sp)
 8000768:	df000104 	addi	fp,sp,4
	putcharRS232(0x44);
 800076c:	01001104 	movi	r4,68
 8000770:	80006100 	call	8000610 <putcharRS232>
	int c;
	c = getbitRS232();
 8000774:	800066c0 	call	800066c <getbitRS232>
 8000778:	e0bfff15 	stw	r2,-4(fp)
	printf("RangeData: %d\n",c);
 800077c:	010200b4 	movhi	r4,2050
 8000780:	213cff04 	addi	r4,r4,-3076
 8000784:	e17fff17 	ldw	r5,-4(fp)
 8000788:	800356c0 	call	800356c <printf>
	return c;
 800078c:	e0bfff17 	ldw	r2,-4(fp)
}
 8000790:	e037883a 	mov	sp,fp
 8000794:	dfc00117 	ldw	ra,4(sp)
 8000798:	df000017 	ldw	fp,0(sp)
 800079c:	dec00204 	addi	sp,sp,8
 80007a0:	f800283a 	ret

080007a4 <TurnServo>:

int TurnServo (void){
 80007a4:	defffe04 	addi	sp,sp,-8
 80007a8:	dfc00115 	stw	ra,4(sp)
 80007ac:	df000015 	stw	fp,0(sp)
 80007b0:	d839883a 	mov	fp,sp
	putcharRS232(0x45);
 80007b4:	01001144 	movi	r4,69
 80007b8:	80006100 	call	8000610 <putcharRS232>
	return 1;
 80007bc:	00800044 	movi	r2,1
}
 80007c0:	e037883a 	mov	sp,fp
 80007c4:	dfc00117 	ldw	ra,4(sp)
 80007c8:	df000017 	ldw	fp,0(sp)
 80007cc:	dec00204 	addi	sp,sp,8
 80007d0:	f800283a 	ret

080007d4 <TurnOnLights>:

void TurnOnLights(void){
 80007d4:	defffe04 	addi	sp,sp,-8
 80007d8:	dfc00115 	stw	ra,4(sp)
 80007dc:	df000015 	stw	fp,0(sp)
 80007e0:	d839883a 	mov	fp,sp
	putcharRS232(0x46);
 80007e4:	01001184 	movi	r4,70
 80007e8:	80006100 	call	8000610 <putcharRS232>
}
 80007ec:	e037883a 	mov	sp,fp
 80007f0:	dfc00117 	ldw	ra,4(sp)
 80007f4:	df000017 	ldw	fp,0(sp)
 80007f8:	dec00204 	addi	sp,sp,8
 80007fc:	f800283a 	ret

08000800 <GetButtonPress>:

int GetButtonPress(void){
 8000800:	defffd04 	addi	sp,sp,-12
 8000804:	dfc00215 	stw	ra,8(sp)
 8000808:	df000115 	stw	fp,4(sp)
 800080c:	df000104 	addi	fp,sp,4
	putcharRS232(0x47);
 8000810:	010011c4 	movi	r4,71
 8000814:	80006100 	call	8000610 <putcharRS232>
	char c = getbitRS232();
 8000818:	800066c0 	call	800066c <getbitRS232>
 800081c:	e0bfff05 	stb	r2,-4(fp)
	printf("Button State: %d\n",c);
 8000820:	e0bfff07 	ldb	r2,-4(fp)
 8000824:	010200b4 	movhi	r4,2050
 8000828:	213d0304 	addi	r4,r4,-3060
 800082c:	100b883a 	mov	r5,r2
 8000830:	800356c0 	call	800356c <printf>
	if(c=='a'){
 8000834:	e0bfff07 	ldb	r2,-4(fp)
 8000838:	10801858 	cmpnei	r2,r2,97
 800083c:	1000021e 	bne	r2,zero,8000848 <GetButtonPress+0x48>
		return 1;
 8000840:	00800044 	movi	r2,1
 8000844:	00000106 	br	800084c <GetButtonPress+0x4c>
	}
	else
	return 0;
 8000848:	0005883a 	mov	r2,zero

}
 800084c:	e037883a 	mov	sp,fp
 8000850:	dfc00117 	ldw	ra,4(sp)
 8000854:	df000017 	ldw	fp,0(sp)
 8000858:	dec00204 	addi	sp,sp,8
 800085c:	f800283a 	ret

08000860 <ResolvedRequest>:

void ResolvedRequest(void){
 8000860:	defffe04 	addi	sp,sp,-8
 8000864:	dfc00115 	stw	ra,4(sp)
 8000868:	df000015 	stw	fp,0(sp)
 800086c:	d839883a 	mov	fp,sp
	putcharRS232(0x48);
 8000870:	01001204 	movi	r4,72
 8000874:	80006100 	call	8000610 <putcharRS232>

}
 8000878:	e037883a 	mov	sp,fp
 800087c:	dfc00117 	ldw	ra,4(sp)
 8000880:	df000017 	ldw	fp,0(sp)
 8000884:	dec00204 	addi	sp,sp,8
 8000888:	f800283a 	ret

0800088c <putCharTouch>:
/*******************************************************************************************
 * This function writes a single pixel to the x,y coords specified using the specified colour
 * Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 ********************************************************************************************/
int putCharTouch(char c){
 800088c:	defffe04 	addi	sp,sp,-8
 8000890:	df000115 	stw	fp,4(sp)
 8000894:	df000104 	addi	fp,sp,4
 8000898:	2005883a 	mov	r2,r4
 800089c:	e0bfff05 	stb	r2,-4(fp)
	// Wait for TX bit in status register to turn 1 (means transmit is empty)
	while((Touchscreen_Status & 0x02) != 0x02);
 80008a0:	0001883a 	nop
 80008a4:	00a10034 	movhi	r2,33792
 80008a8:	10808c04 	addi	r2,r2,560
 80008ac:	10800003 	ldbu	r2,0(r2)
 80008b0:	10803fcc 	andi	r2,r2,255
 80008b4:	1080008c 	andi	r2,r2,2
 80008b8:	103ffa26 	beq	r2,zero,80008a4 <__alt_data_end+0xfc0008a4>
	// Send the data to TX (reduce to 8 bits)
	Touchscreen_TxData = c;
 80008bc:	00a10034 	movhi	r2,33792
 80008c0:	10808c84 	addi	r2,r2,562
 80008c4:	e0ffff03 	ldbu	r3,-4(fp)
 80008c8:	10c00005 	stb	r3,0(r2)
	return c & 0xFF;
 80008cc:	e0bfff07 	ldb	r2,-4(fp)
 80008d0:	10803fcc 	andi	r2,r2,255
}
 80008d4:	e037883a 	mov	sp,fp
 80008d8:	df000017 	ldw	fp,0(sp)
 80008dc:	dec00104 	addi	sp,sp,4
 80008e0:	f800283a 	ret

080008e4 <getCharTouch>:

int getCharTouch(void)
{
 80008e4:	deffff04 	addi	sp,sp,-4
 80008e8:	df000015 	stw	fp,0(sp)
 80008ec:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received character from 6850 RxData register.
	while ((Touchscreen_Status & 0x01) != 0x01);
 80008f0:	0001883a 	nop
 80008f4:	00a10034 	movhi	r2,33792
 80008f8:	10808c04 	addi	r2,r2,560
 80008fc:	10800003 	ldbu	r2,0(r2)
 8000900:	10803fcc 	andi	r2,r2,255
 8000904:	1080004c 	andi	r2,r2,1
 8000908:	103ffa26 	beq	r2,zero,80008f4 <__alt_data_end+0xfc0008f4>
	return Touchscreen_RxData;
 800090c:	00a10034 	movhi	r2,33792
 8000910:	10808c84 	addi	r2,r2,562
 8000914:	10800003 	ldbu	r2,0(r2)
 8000918:	10803fcc 	andi	r2,r2,255
}
 800091c:	e037883a 	mov	sp,fp
 8000920:	df000017 	ldw	fp,0(sp)
 8000924:	dec00104 	addi	sp,sp,4
 8000928:	f800283a 	ret

0800092c <Init_Touch>:

/*****************************************************************************
 ** Initialise touch screen controller
 *****************************************************************************/
void Init_Touch(void)
{
 800092c:	defffe04 	addi	sp,sp,-8
 8000930:	dfc00115 	stw	ra,4(sp)
 8000934:	df000015 	stw	fp,0(sp)
 8000938:	d839883a 	mov	fp,sp
	// Program 6850 and baud rate generator to communicate with touchscreen
	// send touchscreen controller an "enable touch" command

	// Divide by 16 clock, RTS Low, 8 bits of data, no parity,
	// 1 stop bit, transmitter interrupt disabled
	Touchscreen_Control = 0x15;
 800093c:	00a10034 	movhi	r2,33792
 8000940:	10808c04 	addi	r2,r2,560
 8000944:	00c00544 	movi	r3,21
 8000948:	10c00005 	stb	r3,0(r2)
	// 9600 BAUD
	Touchscreen_Baud = 0x05;
 800094c:	00a10034 	movhi	r2,33792
 8000950:	10808d04 	addi	r2,r2,564
 8000954:	00c00144 	movi	r3,5
 8000958:	10c00005 	stb	r3,0(r2)

	// slight delay to process
	usleep(10000);
 800095c:	0109c404 	movi	r4,10000
 8000960:	80128f00 	call	80128f0 <usleep>

	// Send TOUCH_ENABLE command
	putCharTouch(0x55);
 8000964:	01001544 	movi	r4,85
 8000968:	800088c0 	call	800088c <putCharTouch>
	putCharTouch(0x01);
 800096c:	01000044 	movi	r4,1
 8000970:	800088c0 	call	800088c <putCharTouch>
	putCharTouch(0x12);
 8000974:	01000484 	movi	r4,18
 8000978:	800088c0 	call	800088c <putCharTouch>

	usleep(10000);
 800097c:	0109c404 	movi	r4,10000
 8000980:	80128f00 	call	80128f0 <usleep>
}
 8000984:	e037883a 	mov	sp,fp
 8000988:	dfc00117 	ldw	ra,4(sp)
 800098c:	df000017 	ldw	fp,0(sp)
 8000990:	dec00204 	addi	sp,sp,8
 8000994:	f800283a 	ret

08000998 <ScreenTouched>:

/*****************************************************************************
 ** test if screen touched
 *****************************************************************************/
int ScreenTouched( void )
{
 8000998:	deffff04 	addi	sp,sp,-4
 800099c:	df000015 	stw	fp,0(sp)
 80009a0:	d839883a 	mov	fp,sp
	// return TRUE if any data received from 6850 connected to touchscreen
	// or FALSE otherwise

	return (Touchscreen_RxData == 0x80);
 80009a4:	00a10034 	movhi	r2,33792
 80009a8:	10808c84 	addi	r2,r2,562
 80009ac:	10800003 	ldbu	r2,0(r2)
 80009b0:	10803fcc 	andi	r2,r2,255
 80009b4:	10802020 	cmpeqi	r2,r2,128
 80009b8:	10803fcc 	andi	r2,r2,255
}
 80009bc:	e037883a 	mov	sp,fp
 80009c0:	df000017 	ldw	fp,0(sp)
 80009c4:	dec00104 	addi	sp,sp,4
 80009c8:	f800283a 	ret

080009cc <WaitForTouch>:

/*****************************************************************************
 ** wait for screen to be touched
 *****************************************************************************/
void WaitForTouch()
{
 80009cc:	defffe04 	addi	sp,sp,-8
 80009d0:	dfc00115 	stw	ra,4(sp)
 80009d4:	df000015 	stw	fp,0(sp)
 80009d8:	d839883a 	mov	fp,sp
	while(!ScreenTouched()){
 80009dc:	0001883a 	nop
 80009e0:	80009980 	call	8000998 <ScreenTouched>
 80009e4:	103ffe26 	beq	r2,zero,80009e0 <__alt_data_end+0xfc0009e0>

	}
}
 80009e8:	e037883a 	mov	sp,fp
 80009ec:	dfc00117 	ldw	ra,4(sp)
 80009f0:	df000017 	ldw	fp,0(sp)
 80009f4:	dec00204 	addi	sp,sp,8
 80009f8:	f800283a 	ret

080009fc <GetPen>:

Point GetPen(void){
 80009fc:	defff704 	addi	sp,sp,-36
 8000a00:	dfc00815 	stw	ra,32(sp)
 8000a04:	df000715 	stw	fp,28(sp)
 8000a08:	df000704 	addi	fp,sp,28
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen

	// Wait for first packet of touch

	if(GetRangeData()){
 8000a0c:	800075c0 	call	800075c <GetRangeData>
 8000a10:	10000526 	beq	r2,zero,8000a28 <GetPen+0x2c>
		roomArray[0].occupied=1;
 8000a14:	008200b4 	movhi	r2,2050
 8000a18:	108bd904 	addi	r2,r2,12132
 8000a1c:	00c00044 	movi	r3,1
 8000a20:	10c0020d 	sth	r3,8(r2)
 8000a24:	00000306 	br	8000a34 <GetPen+0x38>
	}
	else {
		roomArray[0].occupied = 0;
 8000a28:	008200b4 	movhi	r2,2050
 8000a2c:	108bd904 	addi	r2,r2,12132
 8000a30:	1000020d 	sth	zero,8(r2)
	}
	wait();
 8000a34:	80002e80 	call	80002e8 <wait>
	WaitForTouch();
 8000a38:	80009cc0 	call	80009cc <WaitForTouch>

	int i;
	for(i = 0; i < 4; i++){
 8000a3c:	e03ff915 	stw	zero,-28(fp)
 8000a40:	00000c06 	br	8000a74 <GetPen+0x78>
		packets[i] = getCharTouch();
 8000a44:	80008e40 	call	80008e4 <getCharTouch>
 8000a48:	1007883a 	mov	r3,r2
 8000a4c:	e0bff917 	ldw	r2,-28(fp)
 8000a50:	1085883a 	add	r2,r2,r2
 8000a54:	1085883a 	add	r2,r2,r2
 8000a58:	e13ff904 	addi	r4,fp,-28
 8000a5c:	2085883a 	add	r2,r4,r2
 8000a60:	10800304 	addi	r2,r2,12
 8000a64:	10c00015 	stw	r3,0(r2)
	}
	wait();
	WaitForTouch();

	int i;
	for(i = 0; i < 4; i++){
 8000a68:	e0bff917 	ldw	r2,-28(fp)
 8000a6c:	10800044 	addi	r2,r2,1
 8000a70:	e0bff915 	stw	r2,-28(fp)
 8000a74:	e0bff917 	ldw	r2,-28(fp)
 8000a78:	10800110 	cmplti	r2,r2,4
 8000a7c:	103ff11e 	bne	r2,zero,8000a44 <__alt_data_end+0xfc000a44>
		packets[i] = getCharTouch();
	}

	// Get x11 : x7 from 2nd packet, and concatenate to x6 : x0 from 1st packet
	p1.x = (packets[1] << 7) | packets[0];
 8000a80:	e0bffd17 	ldw	r2,-12(fp)
 8000a84:	100691fa 	slli	r3,r2,7
 8000a88:	e0bffc17 	ldw	r2,-16(fp)
 8000a8c:	1884b03a 	or	r2,r3,r2
 8000a90:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (packets[3] << 7) | packets[2];
 8000a94:	e0bfff17 	ldw	r2,-4(fp)
 8000a98:	100691fa 	slli	r3,r2,7
 8000a9c:	e0bffe17 	ldw	r2,-8(fp)
 8000aa0:	1884b03a 	or	r2,r3,r2
 8000aa4:	e0bffb15 	stw	r2,-20(fp)

	// Map from controller resolution to screen pixel
	p1.x = p1.x * 799 / 4095;
 8000aa8:	e0bffa17 	ldw	r2,-24(fp)
 8000aac:	10c0c7e4 	muli	r3,r2,799
 8000ab0:	0083ffc4 	movi	r2,4095
 8000ab4:	1885283a 	div	r2,r3,r2
 8000ab8:	e0bffa15 	stw	r2,-24(fp)
	p1.y = p1.y  * 479 / 4095;
 8000abc:	e0bffb17 	ldw	r2,-20(fp)
 8000ac0:	10c077e4 	muli	r3,r2,479
 8000ac4:	0083ffc4 	movi	r2,4095
 8000ac8:	1885283a 	div	r2,r3,r2
 8000acc:	e0bffb15 	stw	r2,-20(fp)

	printf("x = %d ", p1.x);
 8000ad0:	e0bffa17 	ldw	r2,-24(fp)
 8000ad4:	010200b4 	movhi	r4,2050
 8000ad8:	213d0804 	addi	r4,r4,-3040
 8000adc:	100b883a 	mov	r5,r2
 8000ae0:	800356c0 	call	800356c <printf>
	printf("y = %d\n", p1.y);
 8000ae4:	e0bffb17 	ldw	r2,-20(fp)
 8000ae8:	010200b4 	movhi	r4,2050
 8000aec:	213d0a04 	addi	r4,r4,-3032
 8000af0:	100b883a 	mov	r5,r2
 8000af4:	800356c0 	call	800356c <printf>
		}
		else {
			roomArray[0].requested = 0;
		}*/

	return p1;
 8000af8:	e0bffa17 	ldw	r2,-24(fp)
 8000afc:	e0fffb17 	ldw	r3,-20(fp)
 8000b00:	1009883a 	mov	r4,r2
 8000b04:	180b883a 	mov	r5,r3
}
 8000b08:	2005883a 	mov	r2,r4
 8000b0c:	2807883a 	mov	r3,r5
 8000b10:	e037883a 	mov	sp,fp
 8000b14:	dfc00117 	ldw	ra,4(sp)
 8000b18:	df000017 	ldw	fp,0(sp)
 8000b1c:	dec00204 	addi	sp,sp,8
 8000b20:	f800283a 	ret

08000b24 <GetPress>:

/*****************************************************************************
 * This function waits for a touch screen press event and returns X,Y coord
 *****************************************************************************/
Point GetPress(void)
{
 8000b24:	defffc04 	addi	sp,sp,-16
 8000b28:	dfc00315 	stw	ra,12(sp)
 8000b2c:	df000215 	stw	fp,8(sp)
 8000b30:	df000204 	addi	fp,sp,8
	Point p1;
	printf("Getting Press\n");
 8000b34:	010200b4 	movhi	r4,2050
 8000b38:	213d0c04 	addi	r4,r4,-3024
 8000b3c:	80036800 	call	8003680 <puts>
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	p1 = GetPen();
 8000b40:	80009fc0 	call	80009fc <GetPen>
 8000b44:	1009883a 	mov	r4,r2
 8000b48:	180b883a 	mov	r5,r3
 8000b4c:	e13ffe15 	stw	r4,-8(fp)
 8000b50:	e17fff15 	stw	r5,-4(fp)
	return p1;
 8000b54:	e0bffe17 	ldw	r2,-8(fp)
 8000b58:	e0ffff17 	ldw	r3,-4(fp)
 8000b5c:	1009883a 	mov	r4,r2
 8000b60:	180b883a 	mov	r5,r3
}
 8000b64:	2005883a 	mov	r2,r4
 8000b68:	2807883a 	mov	r3,r5
 8000b6c:	e037883a 	mov	sp,fp
 8000b70:	dfc00117 	ldw	ra,4(sp)
 8000b74:	df000017 	ldw	fp,0(sp)
 8000b78:	dec00204 	addi	sp,sp,8
 8000b7c:	f800283a 	ret

08000b80 <WriteAPixel>:
 * This function waits for a touch screen release event and returns X,Y coord
 *****************************************************************************/


void WriteAPixel(int x, int y, int Colour)
{
 8000b80:	defffc04 	addi	sp,sp,-16
 8000b84:	df000315 	stw	fp,12(sp)
 8000b88:	df000304 	addi	fp,sp,12
 8000b8c:	e13ffd15 	stw	r4,-12(fp)
 8000b90:	e17ffe15 	stw	r5,-8(fp)
 8000b94:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 8000b98:	0001883a 	nop
 8000b9c:	00a10034 	movhi	r2,33792
 8000ba0:	1080000b 	ldhu	r2,0(r2)
 8000ba4:	10bfffcc 	andi	r2,r2,65535
 8000ba8:	1080004c 	andi	r2,r2,1
 8000bac:	103ffb26 	beq	r2,zero,8000b9c <__alt_data_end+0xfc000b9c>
	GraphicsX1Reg = x; // write coords to x1, y1
 8000bb0:	00a10034 	movhi	r2,33792
 8000bb4:	10800084 	addi	r2,r2,2
 8000bb8:	e0fffd17 	ldw	r3,-12(fp)
 8000bbc:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000bc0:	00a10034 	movhi	r2,33792
 8000bc4:	10800104 	addi	r2,r2,4
 8000bc8:	e0fffe17 	ldw	r3,-8(fp)
 8000bcc:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour; // set pixel colour
 8000bd0:	00a10034 	movhi	r2,33792
 8000bd4:	10800384 	addi	r2,r2,14
 8000bd8:	e0ffff17 	ldw	r3,-4(fp)
 8000bdc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel; // give graphics "write pixel" command
 8000be0:	00a10034 	movhi	r2,33792
 8000be4:	00c00284 	movi	r3,10
 8000be8:	10c0000d 	sth	r3,0(r2)
}
 8000bec:	e037883a 	mov	sp,fp
 8000bf0:	df000017 	ldw	fp,0(sp)
 8000bf4:	dec00104 	addi	sp,sp,4
 8000bf8:	f800283a 	ret

08000bfc <ReadAPixel>:
/*********************************************************************************************
 * This function read a single pixel from the x,y coords specified and returns its colour
 * Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 *********************************************************************************************/
int ReadAPixel(int x, int y)
{
 8000bfc:	defffd04 	addi	sp,sp,-12
 8000c00:	df000215 	stw	fp,8(sp)
 8000c04:	df000204 	addi	fp,sp,8
 8000c08:	e13ffe15 	stw	r4,-8(fp)
 8000c0c:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 8000c10:	0001883a 	nop
 8000c14:	00a10034 	movhi	r2,33792
 8000c18:	1080000b 	ldhu	r2,0(r2)
 8000c1c:	10bfffcc 	andi	r2,r2,65535
 8000c20:	1080004c 	andi	r2,r2,1
 8000c24:	103ffb26 	beq	r2,zero,8000c14 <__alt_data_end+0xfc000c14>
	GraphicsX1Reg = x; // write coords to x1, y1
 8000c28:	00a10034 	movhi	r2,33792
 8000c2c:	10800084 	addi	r2,r2,2
 8000c30:	e0fffe17 	ldw	r3,-8(fp)
 8000c34:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000c38:	00a10034 	movhi	r2,33792
 8000c3c:	10800104 	addi	r2,r2,4
 8000c40:	e0ffff17 	ldw	r3,-4(fp)
 8000c44:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel; // give graphics a "get pixel" command
 8000c48:	00a10034 	movhi	r2,33792
 8000c4c:	00c002c4 	movi	r3,11
 8000c50:	10c0000d 	sth	r3,0(r2)
	WAIT_FOR_GRAPHICS; // is graphics done reading pixel
 8000c54:	0001883a 	nop
 8000c58:	00a10034 	movhi	r2,33792
 8000c5c:	1080000b 	ldhu	r2,0(r2)
 8000c60:	10bfffcc 	andi	r2,r2,65535
 8000c64:	1080004c 	andi	r2,r2,1
 8000c68:	103ffb26 	beq	r2,zero,8000c58 <__alt_data_end+0xfc000c58>
	return (int)(GraphicsColourReg) ; // return the palette number (colour)
 8000c6c:	00a10034 	movhi	r2,33792
 8000c70:	10800384 	addi	r2,r2,14
 8000c74:	1080000b 	ldhu	r2,0(r2)
 8000c78:	10bfffcc 	andi	r2,r2,65535
}
 8000c7c:	e037883a 	mov	sp,fp
 8000c80:	df000017 	ldw	fp,0(sp)
 8000c84:	dec00104 	addi	sp,sp,4
 8000c88:	f800283a 	ret

08000c8c <ProgramPalette>:
 ** subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 **
 ************************************************************************************/
void ProgramPalette(int PaletteNumber, int RGB)
{
 8000c8c:	defffd04 	addi	sp,sp,-12
 8000c90:	df000215 	stw	fp,8(sp)
 8000c94:	df000204 	addi	fp,sp,8
 8000c98:	e13ffe15 	stw	r4,-8(fp)
 8000c9c:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000ca0:	0001883a 	nop
 8000ca4:	00a10034 	movhi	r2,33792
 8000ca8:	1080000b 	ldhu	r2,0(r2)
 8000cac:	10bfffcc 	andi	r2,r2,65535
 8000cb0:	1080004c 	andi	r2,r2,1
 8000cb4:	103ffb26 	beq	r2,zero,8000ca4 <__alt_data_end+0xfc000ca4>
	GraphicsColourReg = PaletteNumber;
 8000cb8:	00a10034 	movhi	r2,33792
 8000cbc:	10800384 	addi	r2,r2,14
 8000cc0:	e0fffe17 	ldw	r3,-8(fp)
 8000cc4:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16 ; // program red value in ls.8 bit of X1 reg
 8000cc8:	00a10034 	movhi	r2,33792
 8000ccc:	10800084 	addi	r2,r2,2
 8000cd0:	e0ffff17 	ldw	r3,-4(fp)
 8000cd4:	1807d43a 	srai	r3,r3,16
 8000cd8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB ; // program green and blue into ls 16 bit of Y1 reg
 8000cdc:	00a10034 	movhi	r2,33792
 8000ce0:	10800104 	addi	r2,r2,4
 8000ce4:	e0ffff17 	ldw	r3,-4(fp)
 8000ce8:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour; // issue command
 8000cec:	00a10034 	movhi	r2,33792
 8000cf0:	00c00404 	movi	r3,16
 8000cf4:	10c0000d 	sth	r3,0(r2)
}
 8000cf8:	e037883a 	mov	sp,fp
 8000cfc:	df000017 	ldw	fp,0(sp)
 8000d00:	dec00104 	addi	sp,sp,4
 8000d04:	f800283a 	ret

08000d08 <DrawHorizontalLine>:
/*********************************************************************************************
This function draw a horizontal line, 1 pixel at a time starting at the x,y coords specified
 *********************************************************************************************/
void DrawHorizontalLine(int x1, int x2, int y, int Colour)
{
 8000d08:	defffb04 	addi	sp,sp,-20
 8000d0c:	df000415 	stw	fp,16(sp)
 8000d10:	df000404 	addi	fp,sp,16
 8000d14:	e13ffc15 	stw	r4,-16(fp)
 8000d18:	e17ffd15 	stw	r5,-12(fp)
 8000d1c:	e1bffe15 	stw	r6,-8(fp)
 8000d20:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000d24:	0001883a 	nop
 8000d28:	00a10034 	movhi	r2,33792
 8000d2c:	1080000b 	ldhu	r2,0(r2)
 8000d30:	10bfffcc 	andi	r2,r2,65535
 8000d34:	1080004c 	andi	r2,r2,1
 8000d38:	103ffb26 	beq	r2,zero,8000d28 <__alt_data_end+0xfc000d28>

	GraphicsX1Reg = x1;
 8000d3c:	00a10034 	movhi	r2,33792
 8000d40:	10800084 	addi	r2,r2,2
 8000d44:	e0fffc17 	ldw	r3,-16(fp)
 8000d48:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000d4c:	00a10034 	movhi	r2,33792
 8000d50:	10800184 	addi	r2,r2,6
 8000d54:	e0fffd17 	ldw	r3,-12(fp)
 8000d58:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000d5c:	00a10034 	movhi	r2,33792
 8000d60:	10800104 	addi	r2,r2,4
 8000d64:	e0fffe17 	ldw	r3,-8(fp)
 8000d68:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000d6c:	00a10034 	movhi	r2,33792
 8000d70:	10800384 	addi	r2,r2,14
 8000d74:	e0ffff17 	ldw	r3,-4(fp)
 8000d78:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 8000d7c:	00a10034 	movhi	r2,33792
 8000d80:	00c00044 	movi	r3,1
 8000d84:	10c0000d 	sth	r3,0(r2)
}
 8000d88:	e037883a 	mov	sp,fp
 8000d8c:	df000017 	ldw	fp,0(sp)
 8000d90:	dec00104 	addi	sp,sp,4
 8000d94:	f800283a 	ret

08000d98 <DrawVerticalLine>:

/*********************************************************************************************
This function draw a vertical line, 1 pixel at a time starting at the x,y coords specified
 *********************************************************************************************/
void DrawVerticalLine(int y1, int y2, int x, int Colour)
{
 8000d98:	defffb04 	addi	sp,sp,-20
 8000d9c:	df000415 	stw	fp,16(sp)
 8000da0:	df000404 	addi	fp,sp,16
 8000da4:	e13ffc15 	stw	r4,-16(fp)
 8000da8:	e17ffd15 	stw	r5,-12(fp)
 8000dac:	e1bffe15 	stw	r6,-8(fp)
 8000db0:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000db4:	0001883a 	nop
 8000db8:	00a10034 	movhi	r2,33792
 8000dbc:	1080000b 	ldhu	r2,0(r2)
 8000dc0:	10bfffcc 	andi	r2,r2,65535
 8000dc4:	1080004c 	andi	r2,r2,1
 8000dc8:	103ffb26 	beq	r2,zero,8000db8 <__alt_data_end+0xfc000db8>

	GraphicsY1Reg = y1;
 8000dcc:	00a10034 	movhi	r2,33792
 8000dd0:	10800104 	addi	r2,r2,4
 8000dd4:	e0fffc17 	ldw	r3,-16(fp)
 8000dd8:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000ddc:	00a10034 	movhi	r2,33792
 8000de0:	10800204 	addi	r2,r2,8
 8000de4:	e0fffd17 	ldw	r3,-12(fp)
 8000de8:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = x;
 8000dec:	00a10034 	movhi	r2,33792
 8000df0:	10800084 	addi	r2,r2,2
 8000df4:	e0fffe17 	ldw	r3,-8(fp)
 8000df8:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000dfc:	00a10034 	movhi	r2,33792
 8000e00:	10800384 	addi	r2,r2,14
 8000e04:	e0ffff17 	ldw	r3,-4(fp)
 8000e08:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000e0c:	00a10034 	movhi	r2,33792
 8000e10:	00c00084 	movi	r3,2
 8000e14:	10c0000d 	sth	r3,0(r2)
}
 8000e18:	e037883a 	mov	sp,fp
 8000e1c:	df000017 	ldw	fp,0(sp)
 8000e20:	dec00104 	addi	sp,sp,4
 8000e24:	f800283a 	ret

08000e28 <sign>:

int sign (int n1, int n2){
 8000e28:	defffd04 	addi	sp,sp,-12
 8000e2c:	df000215 	stw	fp,8(sp)
 8000e30:	df000204 	addi	fp,sp,8
 8000e34:	e13ffe15 	stw	r4,-8(fp)
 8000e38:	e17fff15 	stw	r5,-4(fp)
	if(n2-n1>0){
 8000e3c:	e0ffff17 	ldw	r3,-4(fp)
 8000e40:	e0bffe17 	ldw	r2,-8(fp)
 8000e44:	1885c83a 	sub	r2,r3,r2
 8000e48:	0080020e 	bge	zero,r2,8000e54 <sign+0x2c>
		return 1;
 8000e4c:	00800044 	movi	r2,1
 8000e50:	00000606 	br	8000e6c <sign+0x44>
	}
	else if (n2==n1){
 8000e54:	e0ffff17 	ldw	r3,-4(fp)
 8000e58:	e0bffe17 	ldw	r2,-8(fp)
 8000e5c:	1880021e 	bne	r3,r2,8000e68 <sign+0x40>
		return 0;
 8000e60:	0005883a 	mov	r2,zero
 8000e64:	00000106 	br	8000e6c <sign+0x44>
	}
	else {
		return -1;
 8000e68:	00bfffc4 	movi	r2,-1
	}
}
 8000e6c:	e037883a 	mov	sp,fp
 8000e70:	df000017 	ldw	fp,0(sp)
 8000e74:	dec00104 	addi	sp,sp,4
 8000e78:	f800283a 	ret

08000e7c <DrawBresenhamLine>:

/*******************************************************************************
 ** Implementation of Bresenhams line drawing algorithm
 *******************************************************************************/
void DrawBresenhamLine(int x1, int x2, int y1, int y2, int Colour)
{
 8000e7c:	defffb04 	addi	sp,sp,-20
 8000e80:	df000415 	stw	fp,16(sp)
 8000e84:	df000404 	addi	fp,sp,16
 8000e88:	e13ffc15 	stw	r4,-16(fp)
 8000e8c:	e17ffd15 	stw	r5,-12(fp)
 8000e90:	e1bffe15 	stw	r6,-8(fp)
 8000e94:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000e98:	0001883a 	nop
 8000e9c:	00a10034 	movhi	r2,33792
 8000ea0:	1080000b 	ldhu	r2,0(r2)
 8000ea4:	10bfffcc 	andi	r2,r2,65535
 8000ea8:	1080004c 	andi	r2,r2,1
 8000eac:	103ffb26 	beq	r2,zero,8000e9c <__alt_data_end+0xfc000e9c>

	GraphicsX1Reg = x1;
 8000eb0:	00a10034 	movhi	r2,33792
 8000eb4:	10800084 	addi	r2,r2,2
 8000eb8:	e0fffc17 	ldw	r3,-16(fp)
 8000ebc:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000ec0:	00a10034 	movhi	r2,33792
 8000ec4:	10800184 	addi	r2,r2,6
 8000ec8:	e0fffd17 	ldw	r3,-12(fp)
 8000ecc:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000ed0:	00a10034 	movhi	r2,33792
 8000ed4:	10800104 	addi	r2,r2,4
 8000ed8:	e0fffe17 	ldw	r3,-8(fp)
 8000edc:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000ee0:	00a10034 	movhi	r2,33792
 8000ee4:	10800204 	addi	r2,r2,8
 8000ee8:	e0ffff17 	ldw	r3,-4(fp)
 8000eec:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000ef0:	00a10034 	movhi	r2,33792
 8000ef4:	10800384 	addi	r2,r2,14
 8000ef8:	e0c00117 	ldw	r3,4(fp)
 8000efc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 8000f00:	00a10034 	movhi	r2,33792
 8000f04:	00c000c4 	movi	r3,3
 8000f08:	10c0000d 	sth	r3,0(r2)
}
 8000f0c:	e037883a 	mov	sp,fp
 8000f10:	df000017 	ldw	fp,0(sp)
 8000f14:	dec00104 	addi	sp,sp,4
 8000f18:	f800283a 	ret

08000f1c <DrawFillRect>:

void DrawFillRect(int x1, int x2, int y1, int y2, int colour){
 8000f1c:	defff904 	addi	sp,sp,-28
 8000f20:	dfc00615 	stw	ra,24(sp)
 8000f24:	df000515 	stw	fp,20(sp)
 8000f28:	df000504 	addi	fp,sp,20
 8000f2c:	e13ffc15 	stw	r4,-16(fp)
 8000f30:	e17ffd15 	stw	r5,-12(fp)
 8000f34:	e1bffe15 	stw	r6,-8(fp)
 8000f38:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int j;
	for(j=y1;j<+y2;j++){
 8000f3c:	e0bffe17 	ldw	r2,-8(fp)
 8000f40:	e0bffb15 	stw	r2,-20(fp)
 8000f44:	00000806 	br	8000f68 <DrawFillRect+0x4c>
		DrawHorizontalLine(x1,x2,j,colour);
 8000f48:	e13ffc17 	ldw	r4,-16(fp)
 8000f4c:	e17ffd17 	ldw	r5,-12(fp)
 8000f50:	e1bffb17 	ldw	r6,-20(fp)
 8000f54:	e1c00217 	ldw	r7,8(fp)
 8000f58:	8000d080 	call	8000d08 <DrawHorizontalLine>
}

void DrawFillRect(int x1, int x2, int y1, int y2, int colour){
	int i;
	int j;
	for(j=y1;j<+y2;j++){
 8000f5c:	e0bffb17 	ldw	r2,-20(fp)
 8000f60:	10800044 	addi	r2,r2,1
 8000f64:	e0bffb15 	stw	r2,-20(fp)
 8000f68:	e0fffb17 	ldw	r3,-20(fp)
 8000f6c:	e0bfff17 	ldw	r2,-4(fp)
 8000f70:	18bff516 	blt	r3,r2,8000f48 <__alt_data_end+0xfc000f48>
		DrawHorizontalLine(x1,x2,j,colour);
	}
}
 8000f74:	e037883a 	mov	sp,fp
 8000f78:	dfc00117 	ldw	ra,4(sp)
 8000f7c:	df000017 	ldw	fp,0(sp)
 8000f80:	dec00204 	addi	sp,sp,8
 8000f84:	f800283a 	ret

08000f88 <DrawRect>:

void DrawRect(int x1, int x2, int y1, int y2, int borderColour){
 8000f88:	defffa04 	addi	sp,sp,-24
 8000f8c:	dfc00515 	stw	ra,20(sp)
 8000f90:	df000415 	stw	fp,16(sp)
 8000f94:	df000404 	addi	fp,sp,16
 8000f98:	e13ffc15 	stw	r4,-16(fp)
 8000f9c:	e17ffd15 	stw	r5,-12(fp)
 8000fa0:	e1bffe15 	stw	r6,-8(fp)
 8000fa4:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1,x2,y1,borderColour);
 8000fa8:	e13ffc17 	ldw	r4,-16(fp)
 8000fac:	e17ffd17 	ldw	r5,-12(fp)
 8000fb0:	e1bffe17 	ldw	r6,-8(fp)
 8000fb4:	e1c00217 	ldw	r7,8(fp)
 8000fb8:	8000d080 	call	8000d08 <DrawHorizontalLine>
	DrawHorizontalLine(x1,x2,y2,borderColour);
 8000fbc:	e13ffc17 	ldw	r4,-16(fp)
 8000fc0:	e17ffd17 	ldw	r5,-12(fp)
 8000fc4:	e1bfff17 	ldw	r6,-4(fp)
 8000fc8:	e1c00217 	ldw	r7,8(fp)
 8000fcc:	8000d080 	call	8000d08 <DrawHorizontalLine>
	DrawVerticalLine(y1,y2,x1,borderColour);
 8000fd0:	e13ffe17 	ldw	r4,-8(fp)
 8000fd4:	e17fff17 	ldw	r5,-4(fp)
 8000fd8:	e1bffc17 	ldw	r6,-16(fp)
 8000fdc:	e1c00217 	ldw	r7,8(fp)
 8000fe0:	8000d980 	call	8000d98 <DrawVerticalLine>
	DrawVerticalLine(y1,y2,x2,borderColour);
 8000fe4:	e13ffe17 	ldw	r4,-8(fp)
 8000fe8:	e17fff17 	ldw	r5,-4(fp)
 8000fec:	e1bffd17 	ldw	r6,-12(fp)
 8000ff0:	e1c00217 	ldw	r7,8(fp)
 8000ff4:	8000d980 	call	8000d98 <DrawVerticalLine>
}
 8000ff8:	e037883a 	mov	sp,fp
 8000ffc:	dfc00117 	ldw	ra,4(sp)
 8001000:	df000017 	ldw	fp,0(sp)
 8001004:	dec00204 	addi	sp,sp,8
 8001008:	f800283a 	ret

0800100c <DrawFillRectBorder>:

void DrawFillRectBorder(int x1, int x2, int y1, int y2, int colour, int borderColour){
 800100c:	defff804 	addi	sp,sp,-32
 8001010:	dfc00715 	stw	ra,28(sp)
 8001014:	df000615 	stw	fp,24(sp)
 8001018:	df000604 	addi	fp,sp,24
 800101c:	e13ffc15 	stw	r4,-16(fp)
 8001020:	e17ffd15 	stw	r5,-12(fp)
 8001024:	e1bffe15 	stw	r6,-8(fp)
 8001028:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1,x2,y1,borderColour);
 800102c:	e13ffc17 	ldw	r4,-16(fp)
 8001030:	e17ffd17 	ldw	r5,-12(fp)
 8001034:	e1bffe17 	ldw	r6,-8(fp)
 8001038:	e1c00317 	ldw	r7,12(fp)
 800103c:	8000d080 	call	8000d08 <DrawHorizontalLine>
	DrawHorizontalLine(x1,x2,y2,borderColour);
 8001040:	e13ffc17 	ldw	r4,-16(fp)
 8001044:	e17ffd17 	ldw	r5,-12(fp)
 8001048:	e1bfff17 	ldw	r6,-4(fp)
 800104c:	e1c00317 	ldw	r7,12(fp)
 8001050:	8000d080 	call	8000d08 <DrawHorizontalLine>
	DrawVerticalLine(y1,y2,x1,borderColour);
 8001054:	e13ffe17 	ldw	r4,-8(fp)
 8001058:	e17fff17 	ldw	r5,-4(fp)
 800105c:	e1bffc17 	ldw	r6,-16(fp)
 8001060:	e1c00317 	ldw	r7,12(fp)
 8001064:	8000d980 	call	8000d98 <DrawVerticalLine>
	DrawVerticalLine(y1,y2,x2,borderColour);
 8001068:	e13ffe17 	ldw	r4,-8(fp)
 800106c:	e17fff17 	ldw	r5,-4(fp)
 8001070:	e1bffd17 	ldw	r6,-12(fp)
 8001074:	e1c00317 	ldw	r7,12(fp)
 8001078:	8000d980 	call	8000d98 <DrawVerticalLine>
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
 800107c:	e0bffc17 	ldw	r2,-16(fp)
 8001080:	10800044 	addi	r2,r2,1
 8001084:	e0bffa15 	stw	r2,-24(fp)
 8001088:	00001106 	br	80010d0 <DrawFillRectBorder+0xc4>
		for(j=y1+1;j<+y2;j++){
 800108c:	e0bffe17 	ldw	r2,-8(fp)
 8001090:	10800044 	addi	r2,r2,1
 8001094:	e0bffb15 	stw	r2,-20(fp)
 8001098:	00000706 	br	80010b8 <DrawFillRectBorder+0xac>
			WriteAPixel(i,j,colour);
 800109c:	e13ffa17 	ldw	r4,-24(fp)
 80010a0:	e17ffb17 	ldw	r5,-20(fp)
 80010a4:	e1800217 	ldw	r6,8(fp)
 80010a8:	8000b800 	call	8000b80 <WriteAPixel>
	DrawVerticalLine(y1,y2,x1,borderColour);
	DrawVerticalLine(y1,y2,x2,borderColour);
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
		for(j=y1+1;j<+y2;j++){
 80010ac:	e0bffb17 	ldw	r2,-20(fp)
 80010b0:	10800044 	addi	r2,r2,1
 80010b4:	e0bffb15 	stw	r2,-20(fp)
 80010b8:	e0fffb17 	ldw	r3,-20(fp)
 80010bc:	e0bfff17 	ldw	r2,-4(fp)
 80010c0:	18bff616 	blt	r3,r2,800109c <__alt_data_end+0xfc00109c>
	DrawHorizontalLine(x1,x2,y2,borderColour);
	DrawVerticalLine(y1,y2,x1,borderColour);
	DrawVerticalLine(y1,y2,x2,borderColour);
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
 80010c4:	e0bffa17 	ldw	r2,-24(fp)
 80010c8:	10800044 	addi	r2,r2,1
 80010cc:	e0bffa15 	stw	r2,-24(fp)
 80010d0:	e0fffa17 	ldw	r3,-24(fp)
 80010d4:	e0bffd17 	ldw	r2,-12(fp)
 80010d8:	18bfec16 	blt	r3,r2,800108c <__alt_data_end+0xfc00108c>
		for(j=y1+1;j<+y2;j++){
			WriteAPixel(i,j,colour);
		}
	}
}
 80010dc:	e037883a 	mov	sp,fp
 80010e0:	dfc00117 	ldw	ra,4(sp)
 80010e4:	df000017 	ldw	fp,0(sp)
 80010e8:	dec00204 	addi	sp,sp,8
 80010ec:	f800283a 	ret

080010f0 <OutGraphicsCharFont1>:
 ** e.g. writing a space character with Erase set to true will set all pixels in the
 ** character to the background colour
 **
 *************************************************************************************************/
void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 80010f0:	defff204 	addi	sp,sp,-56
 80010f4:	dfc00d15 	stw	ra,52(sp)
 80010f8:	df000c15 	stw	fp,48(sp)
 80010fc:	ddc00b15 	stw	r23,44(sp)
 8001100:	dd800a15 	stw	r22,40(sp)
 8001104:	dd400915 	stw	r21,36(sp)
 8001108:	dd000815 	stw	r20,32(sp)
 800110c:	dcc00715 	stw	r19,28(sp)
 8001110:	dc800615 	stw	r18,24(sp)
 8001114:	dc400515 	stw	r17,20(sp)
 8001118:	dc000415 	stw	r16,16(sp)
 800111c:	df000c04 	addi	fp,sp,48
 8001120:	e13ff415 	stw	r4,-48(fp)
 8001124:	e17ff515 	stw	r5,-44(fp)
 8001128:	e1bff615 	stw	r6,-40(fp)
 800112c:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 8001130:	e53ff417 	ldw	r20,-48(fp)
 8001134:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 8001138:	e0bff617 	ldw	r2,-40(fp)
 800113c:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 8001140:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 8001144:	e0bff417 	ldw	r2,-48(fp)
 8001148:	10bfffcc 	andi	r2,r2,65535
 800114c:	10a0001c 	xori	r2,r2,32768
 8001150:	10a00004 	addi	r2,r2,-32768
 8001154:	1080c808 	cmpgei	r2,r2,800
 8001158:	1000061e 	bne	r2,zero,8001174 <OutGraphicsCharFont1+0x84>
 800115c:	e0bff517 	ldw	r2,-44(fp)
 8001160:	10bfffcc 	andi	r2,r2,65535
 8001164:	10a0001c 	xori	r2,r2,32768
 8001168:	10a00004 	addi	r2,r2,-32768
 800116c:	10807810 	cmplti	r2,r2,480
 8001170:	1000011e 	bne	r2,zero,8001178 <OutGraphicsCharFont1+0x88>
		return ;
 8001174:	00003c06 	br	8001268 <OutGraphicsCharFont1+0x178>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8001178:	8805883a 	mov	r2,r17
 800117c:	10bfffcc 	andi	r2,r2,65535
 8001180:	10a0001c 	xori	r2,r2,32768
 8001184:	10a00004 	addi	r2,r2,-32768
 8001188:	10800810 	cmplti	r2,r2,32
 800118c:	1000361e 	bne	r2,zero,8001268 <OutGraphicsCharFont1+0x178>
 8001190:	8805883a 	mov	r2,r17
 8001194:	10bfffcc 	andi	r2,r2,65535
 8001198:	10a0001c 	xori	r2,r2,32768
 800119c:	10a00004 	addi	r2,r2,-32768
 80011a0:	10801fc8 	cmpgei	r2,r2,127
 80011a4:	1000301e 	bne	r2,zero,8001268 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 80011a8:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++) {
 80011ac:	0021883a 	mov	r16,zero
 80011b0:	00002706 	br	8001250 <OutGraphicsCharFont1+0x160>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 80011b4:	00820074 	movhi	r2,2049
 80011b8:	1093a104 	addi	r2,r2,20100
 80011bc:	88c001e4 	muli	r3,r17,7
 80011c0:	1c07883a 	add	r3,r3,r16
 80011c4:	10c5883a 	add	r2,r2,r3
 80011c8:	10800003 	ldbu	r2,0(r2)
 80011cc:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 80011d0:	04c00404 	movi	r19,16
			for(column = 0; (char)(column) < (char)(5); column ++) {
 80011d4:	0025883a 	mov	r18,zero
 80011d8:	00001606 	br	8001234 <OutGraphicsCharFont1+0x144>
				// if a pixel in the character display it
				if((pixels & BitMask))
 80011dc:	b4c4703a 	and	r2,r22,r19
 80011e0:	10000926 	beq	r2,zero,8001208 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX+column, theY+row, theColour) ;
 80011e4:	a489883a 	add	r4,r20,r18
 80011e8:	ac07883a 	add	r3,r21,r16
 80011ec:	b8803fcc 	andi	r2,r23,255
 80011f0:	1080201c 	xori	r2,r2,128
 80011f4:	10bfe004 	addi	r2,r2,-128
 80011f8:	180b883a 	mov	r5,r3
 80011fc:	100d883a 	mov	r6,r2
 8001200:	8000b800 	call	8000b80 <WriteAPixel>
 8001204:	00000906 	br	800122c <OutGraphicsCharFont1+0x13c>
				else {
					if(Erase == 1)
 8001208:	e0800317 	ldw	r2,12(fp)
 800120c:	10800058 	cmpnei	r2,r2,1
 8001210:	1000061e 	bne	r2,zero,800122c <OutGraphicsCharFont1+0x13c>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8001214:	a487883a 	add	r3,r20,r18
 8001218:	ac05883a 	add	r2,r21,r16
 800121c:	1809883a 	mov	r4,r3
 8001220:	100b883a 	mov	r5,r2
 8001224:	e1bff717 	ldw	r6,-36(fp)
 8001228:	8000b800 	call	8000b80 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 800122c:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;
			for(column = 0; (char)(column) < (char)(5); column ++) {
 8001230:	94800044 	addi	r18,r18,1
 8001234:	9005883a 	mov	r2,r18
 8001238:	10803fcc 	andi	r2,r2,255
 800123c:	1080201c 	xori	r2,r2,128
 8001240:	10bfe004 	addi	r2,r2,-128
 8001244:	10800150 	cmplti	r2,r2,5
 8001248:	103fe41e 	bne	r2,zero,80011dc <__alt_data_end+0xfc0011dc>
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
		return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
 800124c:	84000044 	addi	r16,r16,1
 8001250:	8005883a 	mov	r2,r16
 8001254:	10803fcc 	andi	r2,r2,255
 8001258:	1080201c 	xori	r2,r2,128
 800125c:	10bfe004 	addi	r2,r2,-128
 8001260:	108001d0 	cmplti	r2,r2,7
 8001264:	103fd31e 	bne	r2,zero,80011b4 <__alt_data_end+0xfc0011b4>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8001268:	e6fff804 	addi	sp,fp,-32
 800126c:	dfc00917 	ldw	ra,36(sp)
 8001270:	df000817 	ldw	fp,32(sp)
 8001274:	ddc00717 	ldw	r23,28(sp)
 8001278:	dd800617 	ldw	r22,24(sp)
 800127c:	dd400517 	ldw	r21,20(sp)
 8001280:	dd000417 	ldw	r20,16(sp)
 8001284:	dcc00317 	ldw	r19,12(sp)
 8001288:	dc800217 	ldw	r18,8(sp)
 800128c:	dc400117 	ldw	r17,4(sp)
 8001290:	dc000017 	ldw	r16,0(sp)
 8001294:	dec00a04 	addi	sp,sp,40
 8001298:	f800283a 	ret

0800129c <OutGraphicsCharFont2>:

void OutGraphicsCharFont2(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 800129c:	defff204 	addi	sp,sp,-56
 80012a0:	dfc00d15 	stw	ra,52(sp)
 80012a4:	df000c15 	stw	fp,48(sp)
 80012a8:	ddc00b15 	stw	r23,44(sp)
 80012ac:	dd800a15 	stw	r22,40(sp)
 80012b0:	dd400915 	stw	r21,36(sp)
 80012b4:	dd000815 	stw	r20,32(sp)
 80012b8:	dcc00715 	stw	r19,28(sp)
 80012bc:	dc800615 	stw	r18,24(sp)
 80012c0:	dc400515 	stw	r17,20(sp)
 80012c4:	dc000415 	stw	r16,16(sp)
 80012c8:	df000c04 	addi	fp,sp,48
 80012cc:	e13ff415 	stw	r4,-48(fp)
 80012d0:	e17ff515 	stw	r5,-44(fp)
 80012d4:	e1bff615 	stw	r6,-40(fp)
 80012d8:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 80012dc:	e53ff417 	ldw	r20,-48(fp)
 80012e0:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 80012e4:	e0bff617 	ldw	r2,-40(fp)
 80012e8:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 80012ec:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 80012f0:	e0bff417 	ldw	r2,-48(fp)
 80012f4:	10bfffcc 	andi	r2,r2,65535
 80012f8:	10a0001c 	xori	r2,r2,32768
 80012fc:	10a00004 	addi	r2,r2,-32768
 8001300:	1080c808 	cmpgei	r2,r2,800
 8001304:	1000061e 	bne	r2,zero,8001320 <OutGraphicsCharFont2+0x84>
 8001308:	e0bff517 	ldw	r2,-44(fp)
 800130c:	10bfffcc 	andi	r2,r2,65535
 8001310:	10a0001c 	xori	r2,r2,32768
 8001314:	10a00004 	addi	r2,r2,-32768
 8001318:	10807810 	cmplti	r2,r2,480
 800131c:	1000011e 	bne	r2,zero,8001324 <OutGraphicsCharFont2+0x88>
		return ;
 8001320:	00003d06 	br	8001418 <OutGraphicsCharFont2+0x17c>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8001324:	8805883a 	mov	r2,r17
 8001328:	10bfffcc 	andi	r2,r2,65535
 800132c:	10a0001c 	xori	r2,r2,32768
 8001330:	10a00004 	addi	r2,r2,-32768
 8001334:	10800810 	cmplti	r2,r2,32
 8001338:	1000371e 	bne	r2,zero,8001418 <OutGraphicsCharFont2+0x17c>
 800133c:	8805883a 	mov	r2,r17
 8001340:	10bfffcc 	andi	r2,r2,65535
 8001344:	10a0001c 	xori	r2,r2,32768
 8001348:	10a00004 	addi	r2,r2,-32768
 800134c:	10801fc8 	cmpgei	r2,r2,127
 8001350:	1000311e 	bne	r2,zero,8001418 <OutGraphicsCharFont2+0x17c>
		theC = theC - 0x20 ;
 8001354:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(14); row ++) {
 8001358:	0021883a 	mov	r16,zero
 800135c:	00002806 	br	8001400 <OutGraphicsCharFont2+0x164>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font10x14[theC][row] ;
 8001360:	00820074 	movhi	r2,2049
 8001364:	10944784 	addi	r2,r2,20766
 8001368:	88c003a4 	muli	r3,r17,14
 800136c:	1c07883a 	add	r3,r3,r16
 8001370:	18c7883a 	add	r3,r3,r3
 8001374:	10c5883a 	add	r2,r2,r3
 8001378:	1080000b 	ldhu	r2,0(r2)
 800137c:	15bfffcc 	andi	r22,r2,65535
			BitMask = 1 << 9 ;
 8001380:	04c08004 	movi	r19,512
			for(column = 0; (char)(column) < (char)(10); column ++) {
 8001384:	0025883a 	mov	r18,zero
 8001388:	00001606 	br	80013e4 <OutGraphicsCharFont2+0x148>
				// if a pixel in the character display it
				if((pixels & BitMask))
 800138c:	b4c4703a 	and	r2,r22,r19
 8001390:	10000926 	beq	r2,zero,80013b8 <OutGraphicsCharFont2+0x11c>
					WriteAPixel(theX+column, theY+row, theColour) ;
 8001394:	a489883a 	add	r4,r20,r18
 8001398:	ac07883a 	add	r3,r21,r16
 800139c:	b8803fcc 	andi	r2,r23,255
 80013a0:	1080201c 	xori	r2,r2,128
 80013a4:	10bfe004 	addi	r2,r2,-128
 80013a8:	180b883a 	mov	r5,r3
 80013ac:	100d883a 	mov	r6,r2
 80013b0:	8000b800 	call	8000b80 <WriteAPixel>
 80013b4:	00000906 	br	80013dc <OutGraphicsCharFont2+0x140>
				else {
					if(Erase == 1)
 80013b8:	e0800317 	ldw	r2,12(fp)
 80013bc:	10800058 	cmpnei	r2,r2,1
 80013c0:	1000061e 	bne	r2,zero,80013dc <OutGraphicsCharFont2+0x140>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 80013c4:	a487883a 	add	r3,r20,r18
 80013c8:	ac05883a 	add	r2,r21,r16
 80013cc:	1809883a 	mov	r4,r3
 80013d0:	100b883a 	mov	r5,r2
 80013d4:	e1bff717 	ldw	r6,-36(fp)
 80013d8:	8000b800 	call	8000b80 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 80013dc:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(14); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font10x14[theC][row] ;
			BitMask = 1 << 9 ;
			for(column = 0; (char)(column) < (char)(10); column ++) {
 80013e0:	94800044 	addi	r18,r18,1
 80013e4:	9005883a 	mov	r2,r18
 80013e8:	10803fcc 	andi	r2,r2,255
 80013ec:	1080201c 	xori	r2,r2,128
 80013f0:	10bfe004 	addi	r2,r2,-128
 80013f4:	10800290 	cmplti	r2,r2,10
 80013f8:	103fe41e 	bne	r2,zero,800138c <__alt_data_end+0xfc00138c>
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
		return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(14); row ++) {
 80013fc:	84000044 	addi	r16,r16,1
 8001400:	8005883a 	mov	r2,r16
 8001404:	10803fcc 	andi	r2,r2,255
 8001408:	1080201c 	xori	r2,r2,128
 800140c:	10bfe004 	addi	r2,r2,-128
 8001410:	10800390 	cmplti	r2,r2,14
 8001414:	103fd21e 	bne	r2,zero,8001360 <__alt_data_end+0xfc001360>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8001418:	e6fff804 	addi	sp,fp,-32
 800141c:	dfc00917 	ldw	ra,36(sp)
 8001420:	df000817 	ldw	fp,32(sp)
 8001424:	ddc00717 	ldw	r23,28(sp)
 8001428:	dd800617 	ldw	r22,24(sp)
 800142c:	dd400517 	ldw	r21,20(sp)
 8001430:	dd000417 	ldw	r20,16(sp)
 8001434:	dcc00317 	ldw	r19,12(sp)
 8001438:	dc800217 	ldw	r18,8(sp)
 800143c:	dc400117 	ldw	r17,4(sp)
 8001440:	dc000017 	ldw	r16,0(sp)
 8001444:	dec00a04 	addi	sp,sp,40
 8001448:	f800283a 	ret

0800144c <DrawString>:



void DrawString(int x,int y, int colour, int background, char* string, int font, int erase){
 800144c:	defff704 	addi	sp,sp,-36
 8001450:	dfc00815 	stw	ra,32(sp)
 8001454:	df000715 	stw	fp,28(sp)
 8001458:	df000704 	addi	fp,sp,28
 800145c:	e13ffc15 	stw	r4,-16(fp)
 8001460:	e17ffd15 	stw	r5,-12(fp)
 8001464:	e1bffe15 	stw	r6,-8(fp)
 8001468:	e1ffff15 	stw	r7,-4(fp)
	int i;
	if(font==1){
 800146c:	e0800317 	ldw	r2,12(fp)
 8001470:	10800058 	cmpnei	r2,r2,1
 8001474:	1000201e 	bne	r2,zero,80014f8 <DrawString+0xac>
		for(i=0; string[i] != '\0';i++){
 8001478:	e03ffb15 	stw	zero,-20(fp)
 800147c:	00001506 	br	80014d4 <DrawString+0x88>
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
 8001480:	e0bffb17 	ldw	r2,-20(fp)
 8001484:	e0c00217 	ldw	r3,8(fp)
 8001488:	1885883a 	add	r2,r3,r2
 800148c:	10800003 	ldbu	r2,0(r2)
 8001490:	10803fcc 	andi	r2,r2,255
 8001494:	1080201c 	xori	r2,r2,128
 8001498:	10bfe004 	addi	r2,r2,-128
 800149c:	d8800015 	stw	r2,0(sp)
 80014a0:	e0800417 	ldw	r2,16(fp)
 80014a4:	d8800115 	stw	r2,4(sp)
 80014a8:	e13ffc17 	ldw	r4,-16(fp)
 80014ac:	e17ffd17 	ldw	r5,-12(fp)
 80014b0:	e1bffe17 	ldw	r6,-8(fp)
 80014b4:	e1ffff17 	ldw	r7,-4(fp)
 80014b8:	80010f00 	call	80010f0 <OutGraphicsCharFont1>
			x += 10;
 80014bc:	e0bffc17 	ldw	r2,-16(fp)
 80014c0:	10800284 	addi	r2,r2,10
 80014c4:	e0bffc15 	stw	r2,-16(fp)


void DrawString(int x,int y, int colour, int background, char* string, int font, int erase){
	int i;
	if(font==1){
		for(i=0; string[i] != '\0';i++){
 80014c8:	e0bffb17 	ldw	r2,-20(fp)
 80014cc:	10800044 	addi	r2,r2,1
 80014d0:	e0bffb15 	stw	r2,-20(fp)
 80014d4:	e0bffb17 	ldw	r2,-20(fp)
 80014d8:	e0c00217 	ldw	r3,8(fp)
 80014dc:	1885883a 	add	r2,r3,r2
 80014e0:	10800003 	ldbu	r2,0(r2)
 80014e4:	10803fcc 	andi	r2,r2,255
 80014e8:	1080201c 	xori	r2,r2,128
 80014ec:	10bfe004 	addi	r2,r2,-128
 80014f0:	103fe31e 	bne	r2,zero,8001480 <__alt_data_end+0xfc001480>
 80014f4:	00002206 	br	8001580 <DrawString+0x134>
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
	else if (font ==2){
 80014f8:	e0800317 	ldw	r2,12(fp)
 80014fc:	10800098 	cmpnei	r2,r2,2
 8001500:	10001f1e 	bne	r2,zero,8001580 <DrawString+0x134>
		for(i=0; string[i] != '\0';i++){
 8001504:	e03ffb15 	stw	zero,-20(fp)
 8001508:	00001506 	br	8001560 <DrawString+0x114>
			OutGraphicsCharFont2(x,y,colour,background,string[i],erase);
 800150c:	e0bffb17 	ldw	r2,-20(fp)
 8001510:	e0c00217 	ldw	r3,8(fp)
 8001514:	1885883a 	add	r2,r3,r2
 8001518:	10800003 	ldbu	r2,0(r2)
 800151c:	10803fcc 	andi	r2,r2,255
 8001520:	1080201c 	xori	r2,r2,128
 8001524:	10bfe004 	addi	r2,r2,-128
 8001528:	d8800015 	stw	r2,0(sp)
 800152c:	e0800417 	ldw	r2,16(fp)
 8001530:	d8800115 	stw	r2,4(sp)
 8001534:	e13ffc17 	ldw	r4,-16(fp)
 8001538:	e17ffd17 	ldw	r5,-12(fp)
 800153c:	e1bffe17 	ldw	r6,-8(fp)
 8001540:	e1ffff17 	ldw	r7,-4(fp)
 8001544:	800129c0 	call	800129c <OutGraphicsCharFont2>
			x += 10;
 8001548:	e0bffc17 	ldw	r2,-16(fp)
 800154c:	10800284 	addi	r2,r2,10
 8001550:	e0bffc15 	stw	r2,-16(fp)
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
	else if (font ==2){
		for(i=0; string[i] != '\0';i++){
 8001554:	e0bffb17 	ldw	r2,-20(fp)
 8001558:	10800044 	addi	r2,r2,1
 800155c:	e0bffb15 	stw	r2,-20(fp)
 8001560:	e0bffb17 	ldw	r2,-20(fp)
 8001564:	e0c00217 	ldw	r3,8(fp)
 8001568:	1885883a 	add	r2,r3,r2
 800156c:	10800003 	ldbu	r2,0(r2)
 8001570:	10803fcc 	andi	r2,r2,255
 8001574:	1080201c 	xori	r2,r2,128
 8001578:	10bfe004 	addi	r2,r2,-128
 800157c:	103fe31e 	bne	r2,zero,800150c <__alt_data_end+0xfc00150c>
			OutGraphicsCharFont2(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
}
 8001580:	e037883a 	mov	sp,fp
 8001584:	dfc00117 	ldw	ra,4(sp)
 8001588:	df000017 	ldw	fp,0(sp)
 800158c:	dec00204 	addi	sp,sp,8
 8001590:	f800283a 	ret

08001594 <BaseDisplay>:




void BaseDisplay (void){
 8001594:	defff804 	addi	sp,sp,-32
 8001598:	dfc00715 	stw	ra,28(sp)
 800159c:	df000615 	stw	fp,24(sp)
 80015a0:	df000604 	addi	fp,sp,24
	int i;
	int j;

	for(i=0; i<800; i++)
 80015a4:	e03ffd15 	stw	zero,-12(fp)
 80015a8:	00000806 	br	80015cc <BaseDisplay+0x38>
		DrawHorizontalLine(0,800,i,TEAL);
 80015ac:	0009883a 	mov	r4,zero
 80015b0:	0140c804 	movi	r5,800
 80015b4:	e1bffd17 	ldw	r6,-12(fp)
 80015b8:	01c00384 	movi	r7,14
 80015bc:	8000d080 	call	8000d08 <DrawHorizontalLine>

void BaseDisplay (void){
	int i;
	int j;

	for(i=0; i<800; i++)
 80015c0:	e0bffd17 	ldw	r2,-12(fp)
 80015c4:	10800044 	addi	r2,r2,1
 80015c8:	e0bffd15 	stw	r2,-12(fp)
 80015cc:	e0bffd17 	ldw	r2,-12(fp)
 80015d0:	1080c810 	cmplti	r2,r2,800
 80015d4:	103ff51e 	bne	r2,zero,80015ac <__alt_data_end+0xfc0015ac>
		DrawHorizontalLine(0,800,i,TEAL);
	char* roomString;
	for(j=1;j<=10;j++){
 80015d8:	00800044 	movi	r2,1
 80015dc:	e0bffe15 	stw	r2,-8(fp)
 80015e0:	00002106 	br	8001668 <BaseDisplay+0xd4>
		sprintf(roomString,"Room %d",j);
 80015e4:	e13fff17 	ldw	r4,-4(fp)
 80015e8:	014200b4 	movhi	r5,2050
 80015ec:	297d1004 	addi	r5,r5,-3008
 80015f0:	e1bffe17 	ldw	r6,-8(fp)
 80015f4:	80036ec0 	call	80036ec <sprintf>
		DrawRect(100,300,40*j,40*(j+1),BLACK);
 80015f8:	e0bffe17 	ldw	r2,-8(fp)
 80015fc:	10c00a24 	muli	r3,r2,40
 8001600:	e0bffe17 	ldw	r2,-8(fp)
 8001604:	10800044 	addi	r2,r2,1
 8001608:	10800a24 	muli	r2,r2,40
 800160c:	d8000015 	stw	zero,0(sp)
 8001610:	01001904 	movi	r4,100
 8001614:	01404b04 	movi	r5,300
 8001618:	180d883a 	mov	r6,r3
 800161c:	100f883a 	mov	r7,r2
 8001620:	8000f880 	call	8000f88 <DrawRect>
		DrawString(105, 40*j+40/4,BLACK,TEAL,roomString,2,1);
 8001624:	e0bffe17 	ldw	r2,-8(fp)
 8001628:	10800a24 	muli	r2,r2,40
 800162c:	10c00284 	addi	r3,r2,10
 8001630:	e0bfff17 	ldw	r2,-4(fp)
 8001634:	d8800015 	stw	r2,0(sp)
 8001638:	00800084 	movi	r2,2
 800163c:	d8800115 	stw	r2,4(sp)
 8001640:	00800044 	movi	r2,1
 8001644:	d8800215 	stw	r2,8(sp)
 8001648:	01001a44 	movi	r4,105
 800164c:	180b883a 	mov	r5,r3
 8001650:	000d883a 	mov	r6,zero
 8001654:	01c00384 	movi	r7,14
 8001658:	800144c0 	call	800144c <DrawString>
	int j;

	for(i=0; i<800; i++)
		DrawHorizontalLine(0,800,i,TEAL);
	char* roomString;
	for(j=1;j<=10;j++){
 800165c:	e0bffe17 	ldw	r2,-8(fp)
 8001660:	10800044 	addi	r2,r2,1
 8001664:	e0bffe15 	stw	r2,-8(fp)
 8001668:	e0bffe17 	ldw	r2,-8(fp)
 800166c:	108002d0 	cmplti	r2,r2,11
 8001670:	103fdc1e 	bne	r2,zero,80015e4 <__alt_data_end+0xfc0015e4>
		sprintf(roomString,"Room %d",j);
		DrawRect(100,300,40*j,40*(j+1),BLACK);
		DrawString(105, 40*j+40/4,BLACK,TEAL,roomString,2,1);
	}
	printf("Base Displayed \n");
 8001674:	010200b4 	movhi	r4,2050
 8001678:	213d1204 	addi	r4,r4,-3000
 800167c:	80036800 	call	8003680 <puts>
}
 8001680:	e037883a 	mov	sp,fp
 8001684:	dfc00117 	ldw	ra,4(sp)
 8001688:	df000017 	ldw	fp,0(sp)
 800168c:	dec00204 	addi	sp,sp,8
 8001690:	f800283a 	ret

08001694 <InfoDisplay>:


void InfoDisplay (int room_num, short lights, short door, short occupied, short in_use){
 8001694:	defff304 	addi	sp,sp,-52
 8001698:	dfc00c15 	stw	ra,48(sp)
 800169c:	df000b15 	stw	fp,44(sp)
 80016a0:	df000b04 	addi	fp,sp,44
 80016a4:	e13ffb15 	stw	r4,-20(fp)
 80016a8:	3009883a 	mov	r4,r6
 80016ac:	3807883a 	mov	r3,r7
 80016b0:	e0800217 	ldw	r2,8(fp)
 80016b4:	e17ffc0d 	sth	r5,-16(fp)
 80016b8:	e13ffd0d 	sth	r4,-12(fp)
 80016bc:	e0fffe0d 	sth	r3,-8(fp)
 80016c0:	e0bfff0d 	sth	r2,-4(fp)
	int i;
	int j;

	//Cover Last Data
	for(i=0; i<480; i++)
 80016c4:	e03ff815 	stw	zero,-32(fp)
 80016c8:	00000806 	br	80016ec <InfoDisplay+0x58>
		DrawHorizontalLine(0,800,i,TEAL);
 80016cc:	0009883a 	mov	r4,zero
 80016d0:	0140c804 	movi	r5,800
 80016d4:	e1bff817 	ldw	r6,-32(fp)
 80016d8:	01c00384 	movi	r7,14
 80016dc:	8000d080 	call	8000d08 <DrawHorizontalLine>
void InfoDisplay (int room_num, short lights, short door, short occupied, short in_use){
	int i;
	int j;

	//Cover Last Data
	for(i=0; i<480; i++)
 80016e0:	e0bff817 	ldw	r2,-32(fp)
 80016e4:	10800044 	addi	r2,r2,1
 80016e8:	e0bff815 	stw	r2,-32(fp)
 80016ec:	e0bff817 	ldw	r2,-32(fp)
 80016f0:	10807810 	cmplti	r2,r2,480
 80016f4:	103ff51e 	bne	r2,zero,80016cc <__alt_data_end+0xfc0016cc>
		DrawHorizontalLine(0,800,i,TEAL);
	for(j=1;j<=10;j++){
 80016f8:	00800044 	movi	r2,1
 80016fc:	e0bff915 	stw	r2,-28(fp)
 8001700:	00000e06 	br	800173c <InfoDisplay+0xa8>
		DrawRect(100,300,40*j,40*(j+1),BLACK);
 8001704:	e0bff917 	ldw	r2,-28(fp)
 8001708:	10c00a24 	muli	r3,r2,40
 800170c:	e0bff917 	ldw	r2,-28(fp)
 8001710:	10800044 	addi	r2,r2,1
 8001714:	10800a24 	muli	r2,r2,40
 8001718:	d8000015 	stw	zero,0(sp)
 800171c:	01001904 	movi	r4,100
 8001720:	01404b04 	movi	r5,300
 8001724:	180d883a 	mov	r6,r3
 8001728:	100f883a 	mov	r7,r2
 800172c:	8000f880 	call	8000f88 <DrawRect>
	int j;

	//Cover Last Data
	for(i=0; i<480; i++)
		DrawHorizontalLine(0,800,i,TEAL);
	for(j=1;j<=10;j++){
 8001730:	e0bff917 	ldw	r2,-28(fp)
 8001734:	10800044 	addi	r2,r2,1
 8001738:	e0bff915 	stw	r2,-28(fp)
 800173c:	e0bff917 	ldw	r2,-28(fp)
 8001740:	108002d0 	cmplti	r2,r2,11
 8001744:	103fef1e 	bne	r2,zero,8001704 <__alt_data_end+0xfc001704>
		DrawRect(100,300,40*j,40*(j+1),BLACK);
	}
	//Change Colour of selected Room
	DrawFillRect(101,299,40*room_num+1,40*(room_num+1)-1,NAVY);
 8001748:	e0bffb17 	ldw	r2,-20(fp)
 800174c:	10800a24 	muli	r2,r2,40
 8001750:	11800044 	addi	r6,r2,1
 8001754:	e0bffb17 	ldw	r2,-20(fp)
 8001758:	10800044 	addi	r2,r2,1
 800175c:	10800a24 	muli	r2,r2,40
 8001760:	10ffffc4 	addi	r3,r2,-1
 8001764:	008003c4 	movi	r2,15
 8001768:	d8800015 	stw	r2,0(sp)
 800176c:	01001944 	movi	r4,101
 8001770:	01404ac4 	movi	r5,299
 8001774:	180f883a 	mov	r7,r3
 8001778:	8000f1c0 	call	8000f1c <DrawFillRect>

	char* roomDeetsString;
	sprintf(roomDeetsString,"Room %d Details & Options", room_num);
 800177c:	e13ffa17 	ldw	r4,-24(fp)
 8001780:	014200b4 	movhi	r5,2050
 8001784:	297d1604 	addi	r5,r5,-2984
 8001788:	e1bffb17 	ldw	r6,-20(fp)
 800178c:	80036ec0 	call	80036ec <sprintf>
	DrawRect(350,750,40,40*11,BLACK);
 8001790:	d8000015 	stw	zero,0(sp)
 8001794:	01005784 	movi	r4,350
 8001798:	0140bb84 	movi	r5,750
 800179c:	01800a04 	movi	r6,40
 80017a0:	01c06e04 	movi	r7,440
 80017a4:	8000f880 	call	8000f88 <DrawRect>
	DrawString(360,40*1.25,BLACK,TEAL,roomDeetsString,2,1);
 80017a8:	e0bffa17 	ldw	r2,-24(fp)
 80017ac:	d8800015 	stw	r2,0(sp)
 80017b0:	00800084 	movi	r2,2
 80017b4:	d8800115 	stw	r2,4(sp)
 80017b8:	00800044 	movi	r2,1
 80017bc:	d8800215 	stw	r2,8(sp)
 80017c0:	01005a04 	movi	r4,360
 80017c4:	01400c84 	movi	r5,50
 80017c8:	000d883a 	mov	r6,zero
 80017cc:	01c00384 	movi	r7,14
 80017d0:	800144c0 	call	800144c <DrawString>
	DrawString(400,40*2.25-14,BLACK,TEAL,"In Use: ",2,1);
 80017d4:	008200b4 	movhi	r2,2050
 80017d8:	10bd1d04 	addi	r2,r2,-2956
 80017dc:	d8800015 	stw	r2,0(sp)
 80017e0:	00800084 	movi	r2,2
 80017e4:	d8800115 	stw	r2,4(sp)
 80017e8:	00800044 	movi	r2,1
 80017ec:	d8800215 	stw	r2,8(sp)
 80017f0:	01006404 	movi	r4,400
 80017f4:	01401304 	movi	r5,76
 80017f8:	000d883a 	mov	r6,zero
 80017fc:	01c00384 	movi	r7,14
 8001800:	800144c0 	call	800144c <DrawString>
	if(in_use){
 8001804:	e0bfff0f 	ldh	r2,-4(fp)
 8001808:	10000d26 	beq	r2,zero,8001840 <InfoDisplay+0x1ac>
		DrawString(530,40*2.25-14,GREEN,TEAL,"YES",2,1);
 800180c:	008200b4 	movhi	r2,2050
 8001810:	10bd2004 	addi	r2,r2,-2944
 8001814:	d8800015 	stw	r2,0(sp)
 8001818:	00800084 	movi	r2,2
 800181c:	d8800115 	stw	r2,4(sp)
 8001820:	00800044 	movi	r2,1
 8001824:	d8800215 	stw	r2,8(sp)
 8001828:	01008484 	movi	r4,530
 800182c:	01401304 	movi	r5,76
 8001830:	01800304 	movi	r6,12
 8001834:	01c00384 	movi	r7,14
 8001838:	800144c0 	call	800144c <DrawString>
 800183c:	00000c06 	br	8001870 <InfoDisplay+0x1dc>
	}
	else{
		DrawString(530,40*2.25-14,CRIMSON,TEAL,"NO",2,1);
 8001840:	008200b4 	movhi	r2,2050
 8001844:	10bd2104 	addi	r2,r2,-2940
 8001848:	d8800015 	stw	r2,0(sp)
 800184c:	00800084 	movi	r2,2
 8001850:	d8800115 	stw	r2,4(sp)
 8001854:	00800044 	movi	r2,1
 8001858:	d8800215 	stw	r2,8(sp)
 800185c:	01008484 	movi	r4,530
 8001860:	01401304 	movi	r5,76
 8001864:	018004c4 	movi	r6,19
 8001868:	01c00384 	movi	r7,14
 800186c:	800144c0 	call	800144c <DrawString>

	}
	DrawString(400,40*3.25-14,BLACK,TEAL,"Occupied: ",2,1);
 8001870:	008200b4 	movhi	r2,2050
 8001874:	10bd2204 	addi	r2,r2,-2936
 8001878:	d8800015 	stw	r2,0(sp)
 800187c:	00800084 	movi	r2,2
 8001880:	d8800115 	stw	r2,4(sp)
 8001884:	00800044 	movi	r2,1
 8001888:	d8800215 	stw	r2,8(sp)
 800188c:	01006404 	movi	r4,400
 8001890:	01401d04 	movi	r5,116
 8001894:	000d883a 	mov	r6,zero
 8001898:	01c00384 	movi	r7,14
 800189c:	800144c0 	call	800144c <DrawString>
	if(occupied){
 80018a0:	e0bffe0f 	ldh	r2,-8(fp)
 80018a4:	10000d26 	beq	r2,zero,80018dc <InfoDisplay+0x248>
		DrawString(530,40*3.25-14,GREEN,TEAL,"YES",2,1);
 80018a8:	008200b4 	movhi	r2,2050
 80018ac:	10bd2004 	addi	r2,r2,-2944
 80018b0:	d8800015 	stw	r2,0(sp)
 80018b4:	00800084 	movi	r2,2
 80018b8:	d8800115 	stw	r2,4(sp)
 80018bc:	00800044 	movi	r2,1
 80018c0:	d8800215 	stw	r2,8(sp)
 80018c4:	01008484 	movi	r4,530
 80018c8:	01401d04 	movi	r5,116
 80018cc:	01800304 	movi	r6,12
 80018d0:	01c00384 	movi	r7,14
 80018d4:	800144c0 	call	800144c <DrawString>
 80018d8:	00000c06 	br	800190c <InfoDisplay+0x278>
	}
	else{
		DrawString(530,40*3.25-14,CRIMSON,TEAL,"NO",2,1);
 80018dc:	008200b4 	movhi	r2,2050
 80018e0:	10bd2104 	addi	r2,r2,-2940
 80018e4:	d8800015 	stw	r2,0(sp)
 80018e8:	00800084 	movi	r2,2
 80018ec:	d8800115 	stw	r2,4(sp)
 80018f0:	00800044 	movi	r2,1
 80018f4:	d8800215 	stw	r2,8(sp)
 80018f8:	01008484 	movi	r4,530
 80018fc:	01401d04 	movi	r5,116
 8001900:	018004c4 	movi	r6,19
 8001904:	01c00384 	movi	r7,14
 8001908:	800144c0 	call	800144c <DrawString>
	}

	DrawString(400,40*4.25-14,BLACK,TEAL,"Lights: ",2,1);
 800190c:	008200b4 	movhi	r2,2050
 8001910:	10bd2504 	addi	r2,r2,-2924
 8001914:	d8800015 	stw	r2,0(sp)
 8001918:	00800084 	movi	r2,2
 800191c:	d8800115 	stw	r2,4(sp)
 8001920:	00800044 	movi	r2,1
 8001924:	d8800215 	stw	r2,8(sp)
 8001928:	01006404 	movi	r4,400
 800192c:	01402704 	movi	r5,156
 8001930:	000d883a 	mov	r6,zero
 8001934:	01c00384 	movi	r7,14
 8001938:	800144c0 	call	800144c <DrawString>
	if(lights){
 800193c:	e0bffc0f 	ldh	r2,-16(fp)
 8001940:	10000d26 	beq	r2,zero,8001978 <InfoDisplay+0x2e4>
		DrawString(530,40*4.25-14,GREEN,TEAL,"ON",2,1);
 8001944:	008200b4 	movhi	r2,2050
 8001948:	10bd2804 	addi	r2,r2,-2912
 800194c:	d8800015 	stw	r2,0(sp)
 8001950:	00800084 	movi	r2,2
 8001954:	d8800115 	stw	r2,4(sp)
 8001958:	00800044 	movi	r2,1
 800195c:	d8800215 	stw	r2,8(sp)
 8001960:	01008484 	movi	r4,530
 8001964:	01402704 	movi	r5,156
 8001968:	01800304 	movi	r6,12
 800196c:	01c00384 	movi	r7,14
 8001970:	800144c0 	call	800144c <DrawString>
 8001974:	00000c06 	br	80019a8 <InfoDisplay+0x314>
	}
	else{
		DrawString(530,40*4.25-14,CRIMSON,TEAL,"OFF",2,1);
 8001978:	008200b4 	movhi	r2,2050
 800197c:	10bd2904 	addi	r2,r2,-2908
 8001980:	d8800015 	stw	r2,0(sp)
 8001984:	00800084 	movi	r2,2
 8001988:	d8800115 	stw	r2,4(sp)
 800198c:	00800044 	movi	r2,1
 8001990:	d8800215 	stw	r2,8(sp)
 8001994:	01008484 	movi	r4,530
 8001998:	01402704 	movi	r5,156
 800199c:	018004c4 	movi	r6,19
 80019a0:	01c00384 	movi	r7,14
 80019a4:	800144c0 	call	800144c <DrawString>
	}


	DrawString(400,40*5.25-14,BLACK,TEAL,"Door: ",2,1);
 80019a8:	008200b4 	movhi	r2,2050
 80019ac:	10bd2a04 	addi	r2,r2,-2904
 80019b0:	d8800015 	stw	r2,0(sp)
 80019b4:	00800084 	movi	r2,2
 80019b8:	d8800115 	stw	r2,4(sp)
 80019bc:	00800044 	movi	r2,1
 80019c0:	d8800215 	stw	r2,8(sp)
 80019c4:	01006404 	movi	r4,400
 80019c8:	01403104 	movi	r5,196
 80019cc:	000d883a 	mov	r6,zero
 80019d0:	01c00384 	movi	r7,14
 80019d4:	800144c0 	call	800144c <DrawString>
	if(door){
 80019d8:	e0bffd0f 	ldh	r2,-12(fp)
 80019dc:	10000d26 	beq	r2,zero,8001a14 <InfoDisplay+0x380>
		DrawString(530,40*5.25-14,GREEN,TEAL,"UNLOCKED",2,1);
 80019e0:	008200b4 	movhi	r2,2050
 80019e4:	10bd2c04 	addi	r2,r2,-2896
 80019e8:	d8800015 	stw	r2,0(sp)
 80019ec:	00800084 	movi	r2,2
 80019f0:	d8800115 	stw	r2,4(sp)
 80019f4:	00800044 	movi	r2,1
 80019f8:	d8800215 	stw	r2,8(sp)
 80019fc:	01008484 	movi	r4,530
 8001a00:	01403104 	movi	r5,196
 8001a04:	01800304 	movi	r6,12
 8001a08:	01c00384 	movi	r7,14
 8001a0c:	800144c0 	call	800144c <DrawString>
 8001a10:	00000c06 	br	8001a44 <InfoDisplay+0x3b0>
	}
	else{
		DrawString(530,40*5.25-14,CRIMSON,TEAL,"LOCKED",2,1);
 8001a14:	008200b4 	movhi	r2,2050
 8001a18:	10bd2f04 	addi	r2,r2,-2884
 8001a1c:	d8800015 	stw	r2,0(sp)
 8001a20:	00800084 	movi	r2,2
 8001a24:	d8800115 	stw	r2,4(sp)
 8001a28:	00800044 	movi	r2,1
 8001a2c:	d8800215 	stw	r2,8(sp)
 8001a30:	01008484 	movi	r4,530
 8001a34:	01403104 	movi	r5,196
 8001a38:	018004c4 	movi	r6,19
 8001a3c:	01c00384 	movi	r7,14
 8001a40:	800144c0 	call	800144c <DrawString>
	}



	DrawString(400,40*6.25-14,BLACK,TEAL,"Lights: ",2,1);
 8001a44:	008200b4 	movhi	r2,2050
 8001a48:	10bd2504 	addi	r2,r2,-2924
 8001a4c:	d8800015 	stw	r2,0(sp)
 8001a50:	00800084 	movi	r2,2
 8001a54:	d8800115 	stw	r2,4(sp)
 8001a58:	00800044 	movi	r2,1
 8001a5c:	d8800215 	stw	r2,8(sp)
 8001a60:	01006404 	movi	r4,400
 8001a64:	01403b04 	movi	r5,236
 8001a68:	000d883a 	mov	r6,zero
 8001a6c:	01c00384 	movi	r7,14
 8001a70:	800144c0 	call	800144c <DrawString>
	DrawFillRect(480,560,40*6.25-34,40*7.25-24,CRIMSON);
 8001a74:	008004c4 	movi	r2,19
 8001a78:	d8800015 	stw	r2,0(sp)
 8001a7c:	01007804 	movi	r4,480
 8001a80:	01408c04 	movi	r5,560
 8001a84:	01803604 	movi	r6,216
 8001a88:	01c04284 	movi	r7,266
 8001a8c:	8000f1c0 	call	8000f1c <DrawFillRect>
	DrawString(490,40*6.25-14,BLACK,CRIMSON,"OFF",2,1);
 8001a90:	008200b4 	movhi	r2,2050
 8001a94:	10bd2904 	addi	r2,r2,-2908
 8001a98:	d8800015 	stw	r2,0(sp)
 8001a9c:	00800084 	movi	r2,2
 8001aa0:	d8800115 	stw	r2,4(sp)
 8001aa4:	00800044 	movi	r2,1
 8001aa8:	d8800215 	stw	r2,8(sp)
 8001aac:	01007a84 	movi	r4,490
 8001ab0:	01403b04 	movi	r5,236
 8001ab4:	000d883a 	mov	r6,zero
 8001ab8:	01c004c4 	movi	r7,19
 8001abc:	800144c0 	call	800144c <DrawString>
	DrawFillRect(570,650,40*6.25-34,40*7.25-24,GREEN);
 8001ac0:	00800304 	movi	r2,12
 8001ac4:	d8800015 	stw	r2,0(sp)
 8001ac8:	01008e84 	movi	r4,570
 8001acc:	0140a284 	movi	r5,650
 8001ad0:	01803604 	movi	r6,216
 8001ad4:	01c04284 	movi	r7,266
 8001ad8:	8000f1c0 	call	8000f1c <DrawFillRect>
	DrawString(580,40*6.25-14,BLACK,GREEN,"ON",2,1);
 8001adc:	008200b4 	movhi	r2,2050
 8001ae0:	10bd2804 	addi	r2,r2,-2912
 8001ae4:	d8800015 	stw	r2,0(sp)
 8001ae8:	00800084 	movi	r2,2
 8001aec:	d8800115 	stw	r2,4(sp)
 8001af0:	00800044 	movi	r2,1
 8001af4:	d8800215 	stw	r2,8(sp)
 8001af8:	01009104 	movi	r4,580
 8001afc:	01403b04 	movi	r5,236
 8001b00:	000d883a 	mov	r6,zero
 8001b04:	01c00304 	movi	r7,12
 8001b08:	800144c0 	call	800144c <DrawString>

	DrawString(400,40*7.75-14,BLACK,TEAL,"Door: ",2,1);
 8001b0c:	008200b4 	movhi	r2,2050
 8001b10:	10bd2a04 	addi	r2,r2,-2904
 8001b14:	d8800015 	stw	r2,0(sp)
 8001b18:	00800084 	movi	r2,2
 8001b1c:	d8800115 	stw	r2,4(sp)
 8001b20:	00800044 	movi	r2,1
 8001b24:	d8800215 	stw	r2,8(sp)
 8001b28:	01006404 	movi	r4,400
 8001b2c:	01404a04 	movi	r5,296
 8001b30:	000d883a 	mov	r6,zero
 8001b34:	01c00384 	movi	r7,14
 8001b38:	800144c0 	call	800144c <DrawString>
	DrawFillRect(480,560,40*7.75-34,40*8.75-24,CRIMSON);
 8001b3c:	008004c4 	movi	r2,19
 8001b40:	d8800015 	stw	r2,0(sp)
 8001b44:	01007804 	movi	r4,480
 8001b48:	01408c04 	movi	r5,560
 8001b4c:	01804504 	movi	r6,276
 8001b50:	01c05184 	movi	r7,326
 8001b54:	8000f1c0 	call	8000f1c <DrawFillRect>
	DrawString(490,40*7.75-14,BLACK,CRIMSON,"LOCK",2,1);
 8001b58:	008200b4 	movhi	r2,2050
 8001b5c:	10bd3104 	addi	r2,r2,-2876
 8001b60:	d8800015 	stw	r2,0(sp)
 8001b64:	00800084 	movi	r2,2
 8001b68:	d8800115 	stw	r2,4(sp)
 8001b6c:	00800044 	movi	r2,1
 8001b70:	d8800215 	stw	r2,8(sp)
 8001b74:	01007a84 	movi	r4,490
 8001b78:	01404a04 	movi	r5,296
 8001b7c:	000d883a 	mov	r6,zero
 8001b80:	01c004c4 	movi	r7,19
 8001b84:	800144c0 	call	800144c <DrawString>
	DrawFillRect(570,650,40*7.75-34,40*8.75-24,GREEN);
 8001b88:	00800304 	movi	r2,12
 8001b8c:	d8800015 	stw	r2,0(sp)
 8001b90:	01008e84 	movi	r4,570
 8001b94:	0140a284 	movi	r5,650
 8001b98:	01804504 	movi	r6,276
 8001b9c:	01c05184 	movi	r7,326
 8001ba0:	8000f1c0 	call	8000f1c <DrawFillRect>
	DrawString(580,40*7.75-14,BLACK,GREEN,"UNLOCK",2,1);
 8001ba4:	008200b4 	movhi	r2,2050
 8001ba8:	10bd3304 	addi	r2,r2,-2868
 8001bac:	d8800015 	stw	r2,0(sp)
 8001bb0:	00800084 	movi	r2,2
 8001bb4:	d8800115 	stw	r2,4(sp)
 8001bb8:	00800044 	movi	r2,1
 8001bbc:	d8800215 	stw	r2,8(sp)
 8001bc0:	01009104 	movi	r4,580
 8001bc4:	01404a04 	movi	r5,296
 8001bc8:	000d883a 	mov	r6,zero
 8001bcc:	01c00304 	movi	r7,12
 8001bd0:	800144c0 	call	800144c <DrawString>


}
 8001bd4:	e037883a 	mov	sp,fp
 8001bd8:	dfc00117 	ldw	ra,4(sp)
 8001bdc:	df000017 	ldw	fp,0(sp)
 8001be0:	dec00204 	addi	sp,sp,8
 8001be4:	f800283a 	ret

08001be8 <RequestDisplay>:

void RequestDisplay (){
 8001be8:	defffd04 	addi	sp,sp,-12
 8001bec:	dfc00215 	stw	ra,8(sp)
 8001bf0:	df000115 	stw	fp,4(sp)
 8001bf4:	df000104 	addi	fp,sp,4

	DrawFillRect(200,600,90,390,TEAL);
 8001bf8:	00800384 	movi	r2,14
 8001bfc:	d8800015 	stw	r2,0(sp)
 8001c00:	01003204 	movi	r4,200
 8001c04:	01409604 	movi	r5,600
 8001c08:	01801684 	movi	r6,90
 8001c0c:	01c06184 	movi	r7,390
 8001c10:	8000f1c0 	call	8000f1c <DrawFillRect>
	DrawFillRect(250,375,190,290,RED);
 8001c14:	00800084 	movi	r2,2
 8001c18:	d8800015 	stw	r2,0(sp)
 8001c1c:	01003e84 	movi	r4,250
 8001c20:	01405dc4 	movi	r5,375
 8001c24:	01802f84 	movi	r6,190
 8001c28:	01c04884 	movi	r7,290
 8001c2c:	8000f1c0 	call	8000f1c <DrawFillRect>
	DrawFillRect(425,550,190,290,GREEN);
 8001c30:	00800304 	movi	r2,12
 8001c34:	d8800015 	stw	r2,0(sp)
 8001c38:	01006a44 	movi	r4,425
 8001c3c:	01408984 	movi	r5,550
 8001c40:	01802f84 	movi	r6,190
 8001c44:	01c04884 	movi	r7,290
 8001c48:	8000f1c0 	call	8000f1c <DrawFillRect>
	return;
 8001c4c:	0001883a 	nop

}
 8001c50:	e037883a 	mov	sp,fp
 8001c54:	dfc00117 	ldw	ra,4(sp)
 8001c58:	df000017 	ldw	fp,0(sp)
 8001c5c:	dec00204 	addi	sp,sp,8
 8001c60:	f800283a 	ret

08001c64 <RequestDotDisplay>:
void RequestDotDisplay (int room_num){
 8001c64:	defffc04 	addi	sp,sp,-16
 8001c68:	dfc00315 	stw	ra,12(sp)
 8001c6c:	df000215 	stw	fp,8(sp)
 8001c70:	df000204 	addi	fp,sp,8
 8001c74:	e13fff15 	stw	r4,-4(fp)

	DrawFillRect(315,335,40*room_num+10,40*(room_num+1)-10,RED);
 8001c78:	e0bfff17 	ldw	r2,-4(fp)
 8001c7c:	10800a24 	muli	r2,r2,40
 8001c80:	11800284 	addi	r6,r2,10
 8001c84:	e0bfff17 	ldw	r2,-4(fp)
 8001c88:	10800044 	addi	r2,r2,1
 8001c8c:	10800a24 	muli	r2,r2,40
 8001c90:	10fffd84 	addi	r3,r2,-10
 8001c94:	00800084 	movi	r2,2
 8001c98:	d8800015 	stw	r2,0(sp)
 8001c9c:	01004ec4 	movi	r4,315
 8001ca0:	014053c4 	movi	r5,335
 8001ca4:	180f883a 	mov	r7,r3
 8001ca8:	8000f1c0 	call	8000f1c <DrawFillRect>
	return;
 8001cac:	0001883a 	nop

}
 8001cb0:	e037883a 	mov	sp,fp
 8001cb4:	dfc00117 	ldw	ra,4(sp)
 8001cb8:	df000017 	ldw	fp,0(sp)
 8001cbc:	dec00204 	addi	sp,sp,8
 8001cc0:	f800283a 	ret

08001cc4 <RequestStringDisplay>:

void RequestStringDisplay (int room_number){
 8001cc4:	defff904 	addi	sp,sp,-28
 8001cc8:	dfc00615 	stw	ra,24(sp)
 8001ccc:	df000515 	stw	fp,20(sp)
 8001cd0:	df000504 	addi	fp,sp,20
 8001cd4:	e13fff15 	stw	r4,-4(fp)
	char* requestString;
	sprintf(requestString,"Access Request for room %d",room_number);
 8001cd8:	e13ffe17 	ldw	r4,-8(fp)
 8001cdc:	014200b4 	movhi	r5,2050
 8001ce0:	297d3504 	addi	r5,r5,-2860
 8001ce4:	e1bfff17 	ldw	r6,-4(fp)
 8001ce8:	80036ec0 	call	80036ec <sprintf>
	DrawString(260,110,BLACK,WHITE,requestString,2,1);
 8001cec:	e0bffe17 	ldw	r2,-8(fp)
 8001cf0:	d8800015 	stw	r2,0(sp)
 8001cf4:	00800084 	movi	r2,2
 8001cf8:	d8800115 	stw	r2,4(sp)
 8001cfc:	00800044 	movi	r2,1
 8001d00:	d8800215 	stw	r2,8(sp)
 8001d04:	01004104 	movi	r4,260
 8001d08:	01401b84 	movi	r5,110
 8001d0c:	000d883a 	mov	r6,zero
 8001d10:	01c00044 	movi	r7,1
 8001d14:	800144c0 	call	800144c <DrawString>
	DrawString(290,230,BLACK,RED,"DENY",2,1);
 8001d18:	008200b4 	movhi	r2,2050
 8001d1c:	10bd3c04 	addi	r2,r2,-2832
 8001d20:	d8800015 	stw	r2,0(sp)
 8001d24:	00800084 	movi	r2,2
 8001d28:	d8800115 	stw	r2,4(sp)
 8001d2c:	00800044 	movi	r2,1
 8001d30:	d8800215 	stw	r2,8(sp)
 8001d34:	01004884 	movi	r4,290
 8001d38:	01403984 	movi	r5,230
 8001d3c:	000d883a 	mov	r6,zero
 8001d40:	01c00084 	movi	r7,2
 8001d44:	800144c0 	call	800144c <DrawString>
	DrawString(455,230,BLACK,GREEN,"APPROVE",2,1);
 8001d48:	008200b4 	movhi	r2,2050
 8001d4c:	10bd3e04 	addi	r2,r2,-2824
 8001d50:	d8800015 	stw	r2,0(sp)
 8001d54:	00800084 	movi	r2,2
 8001d58:	d8800115 	stw	r2,4(sp)
 8001d5c:	00800044 	movi	r2,1
 8001d60:	d8800215 	stw	r2,8(sp)
 8001d64:	010071c4 	movi	r4,455
 8001d68:	01403984 	movi	r5,230
 8001d6c:	000d883a 	mov	r6,zero
 8001d70:	01c00304 	movi	r7,12
 8001d74:	800144c0 	call	800144c <DrawString>
	return;
 8001d78:	0001883a 	nop
}
 8001d7c:	e037883a 	mov	sp,fp
 8001d80:	dfc00117 	ldw	ra,4(sp)
 8001d84:	df000017 	ldw	fp,0(sp)
 8001d88:	dec00204 	addi	sp,sp,8
 8001d8c:	f800283a 	ret

08001d90 <RequestChoice>:

int RequestChoice (void){
 8001d90:	defffc04 	addi	sp,sp,-16
 8001d94:	dfc00315 	stw	ra,12(sp)
 8001d98:	df000215 	stw	fp,8(sp)
 8001d9c:	df000204 	addi	fp,sp,8
	Point p1;
	while(1){
		p1 = GetPress();
 8001da0:	8000b240 	call	8000b24 <GetPress>
 8001da4:	1009883a 	mov	r4,r2
 8001da8:	180b883a 	mov	r5,r3
 8001dac:	e13ffe15 	stw	r4,-8(fp)
 8001db0:	e17fff15 	stw	r5,-4(fp)
		if(p1.x>=250&&p1.x<=375&&p1.y>=190&&p1.y<=290){
 8001db4:	e0bffe17 	ldw	r2,-8(fp)
 8001db8:	10803e90 	cmplti	r2,r2,250
 8001dbc:	10000b1e 	bne	r2,zero,8001dec <RequestChoice+0x5c>
 8001dc0:	e0bffe17 	ldw	r2,-8(fp)
 8001dc4:	10805e08 	cmpgei	r2,r2,376
 8001dc8:	1000081e 	bne	r2,zero,8001dec <RequestChoice+0x5c>
 8001dcc:	e0bfff17 	ldw	r2,-4(fp)
 8001dd0:	10802f90 	cmplti	r2,r2,190
 8001dd4:	1000051e 	bne	r2,zero,8001dec <RequestChoice+0x5c>
 8001dd8:	e0bfff17 	ldw	r2,-4(fp)
 8001ddc:	108048c8 	cmpgei	r2,r2,291
 8001de0:	1000021e 	bne	r2,zero,8001dec <RequestChoice+0x5c>
			return 0;
 8001de4:	0005883a 	mov	r2,zero
 8001de8:	00000f06 	br	8001e28 <RequestChoice+0x98>
		}
		else if(p1.x>=425&&p1.x<=550&&p1.y>=190&&p1.y<=290){
 8001dec:	e0bffe17 	ldw	r2,-8(fp)
 8001df0:	10806a50 	cmplti	r2,r2,425
 8001df4:	10000b1e 	bne	r2,zero,8001e24 <RequestChoice+0x94>
 8001df8:	e0bffe17 	ldw	r2,-8(fp)
 8001dfc:	108089c8 	cmpgei	r2,r2,551
 8001e00:	1000081e 	bne	r2,zero,8001e24 <RequestChoice+0x94>
 8001e04:	e0bfff17 	ldw	r2,-4(fp)
 8001e08:	10802f90 	cmplti	r2,r2,190
 8001e0c:	1000051e 	bne	r2,zero,8001e24 <RequestChoice+0x94>
 8001e10:	e0bfff17 	ldw	r2,-4(fp)
 8001e14:	108048c8 	cmpgei	r2,r2,291
 8001e18:	1000021e 	bne	r2,zero,8001e24 <RequestChoice+0x94>
			return 1;
 8001e1c:	00800044 	movi	r2,1
 8001e20:	00000106 	br	8001e28 <RequestChoice+0x98>
		}
	}
 8001e24:	003fde06 	br	8001da0 <__alt_data_end+0xfc001da0>
	return -1;
}
 8001e28:	e037883a 	mov	sp,fp
 8001e2c:	dfc00117 	ldw	ra,4(sp)
 8001e30:	df000017 	ldw	fp,0(sp)
 8001e34:	dec00204 	addi	sp,sp,8
 8001e38:	f800283a 	ret

08001e3c <BaseChoice>:

int BaseChoice(void){
 8001e3c:	defffc04 	addi	sp,sp,-16
 8001e40:	dfc00315 	stw	ra,12(sp)
 8001e44:	df000215 	stw	fp,8(sp)
 8001e48:	df000204 	addi	fp,sp,8
	Point p1;
	while(1){
		printf("Base Choice\n");
 8001e4c:	010200b4 	movhi	r4,2050
 8001e50:	213d4004 	addi	r4,r4,-2816
 8001e54:	80036800 	call	8003680 <puts>
		p1 = GetPress();
 8001e58:	8000b240 	call	8000b24 <GetPress>
 8001e5c:	1009883a 	mov	r4,r2
 8001e60:	180b883a 	mov	r5,r3
 8001e64:	e13ffe15 	stw	r4,-8(fp)
 8001e68:	e17fff15 	stw	r5,-4(fp)
		if(p1.x >= 100 && p1.x <= 300 && p1.y>=40 && p1.y<=440){
 8001e6c:	e0bffe17 	ldw	r2,-8(fp)
 8001e70:	10801910 	cmplti	r2,r2,100
 8001e74:	1000201e 	bne	r2,zero,8001ef8 <BaseChoice+0xbc>
 8001e78:	e0bffe17 	ldw	r2,-8(fp)
 8001e7c:	10804b48 	cmpgei	r2,r2,301
 8001e80:	10001d1e 	bne	r2,zero,8001ef8 <BaseChoice+0xbc>
 8001e84:	e0bfff17 	ldw	r2,-4(fp)
 8001e88:	10800a10 	cmplti	r2,r2,40
 8001e8c:	10001a1e 	bne	r2,zero,8001ef8 <BaseChoice+0xbc>
 8001e90:	e0bfff17 	ldw	r2,-4(fp)
 8001e94:	10806e48 	cmpgei	r2,r2,441
 8001e98:	1000171e 	bne	r2,zero,8001ef8 <BaseChoice+0xbc>
			printf("Chose #%d\n", p1.y/40);
 8001e9c:	e0ffff17 	ldw	r3,-4(fp)
 8001ea0:	00800a04 	movi	r2,40
 8001ea4:	1885283a 	div	r2,r3,r2
 8001ea8:	010200b4 	movhi	r4,2050
 8001eac:	213d4304 	addi	r4,r4,-2804
 8001eb0:	100b883a 	mov	r5,r2
 8001eb4:	800356c0 	call	800356c <printf>
			return floor(p1.y/40);
 8001eb8:	e0ffff17 	ldw	r3,-4(fp)
 8001ebc:	00800a04 	movi	r2,40
 8001ec0:	1885283a 	div	r2,r3,r2
 8001ec4:	1009883a 	mov	r4,r2
 8001ec8:	800340c0 	call	800340c <__floatsidf>
 8001ecc:	100b883a 	mov	r5,r2
 8001ed0:	180d883a 	mov	r6,r3
 8001ed4:	2809883a 	mov	r4,r5
 8001ed8:	300b883a 	mov	r5,r6
 8001edc:	80027340 	call	8002734 <floor>
 8001ee0:	100b883a 	mov	r5,r2
 8001ee4:	180d883a 	mov	r6,r3
 8001ee8:	2809883a 	mov	r4,r5
 8001eec:	300b883a 	mov	r5,r6
 8001ef0:	80033840 	call	8003384 <__fixdfsi>
 8001ef4:	00000106 	br	8001efc <BaseChoice+0xc0>
		}
	}
 8001ef8:	003fd406 	br	8001e4c <__alt_data_end+0xfc001e4c>
	return -1;
}
 8001efc:	e037883a 	mov	sp,fp
 8001f00:	dfc00117 	ldw	ra,4(sp)
 8001f04:	df000017 	ldw	fp,0(sp)
 8001f08:	dec00204 	addi	sp,sp,8
 8001f0c:	f800283a 	ret

08001f10 <InfoChoice>:

int InfoChoice (void){
 8001f10:	defffc04 	addi	sp,sp,-16
 8001f14:	dfc00315 	stw	ra,12(sp)
 8001f18:	df000215 	stw	fp,8(sp)
 8001f1c:	df000204 	addi	fp,sp,8
	Point p1;
	while(1){
		printf("Info Choice\n");
 8001f20:	010200b4 	movhi	r4,2050
 8001f24:	213d4604 	addi	r4,r4,-2792
 8001f28:	80036800 	call	8003680 <puts>
		p1 = GetPress();
 8001f2c:	8000b240 	call	8000b24 <GetPress>
 8001f30:	1009883a 	mov	r4,r2
 8001f34:	180b883a 	mov	r5,r3
 8001f38:	e13ffe15 	stw	r4,-8(fp)
 8001f3c:	e17fff15 	stw	r5,-4(fp)
		if(p1.x >= 100 && p1.x <= 300 && p1.y>=40 && p1.y<=440){
 8001f40:	e0bffe17 	ldw	r2,-8(fp)
 8001f44:	10801910 	cmplti	r2,r2,100
 8001f48:	1000211e 	bne	r2,zero,8001fd0 <InfoChoice+0xc0>
 8001f4c:	e0bffe17 	ldw	r2,-8(fp)
 8001f50:	10804b48 	cmpgei	r2,r2,301
 8001f54:	10001e1e 	bne	r2,zero,8001fd0 <InfoChoice+0xc0>
 8001f58:	e0bfff17 	ldw	r2,-4(fp)
 8001f5c:	10800a10 	cmplti	r2,r2,40
 8001f60:	10001b1e 	bne	r2,zero,8001fd0 <InfoChoice+0xc0>
 8001f64:	e0bfff17 	ldw	r2,-4(fp)
 8001f68:	10806e48 	cmpgei	r2,r2,441
 8001f6c:	1000181e 	bne	r2,zero,8001fd0 <InfoChoice+0xc0>
			printf("Room #%d\n",(p1.y)/40);
 8001f70:	e0ffff17 	ldw	r3,-4(fp)
 8001f74:	00800a04 	movi	r2,40
 8001f78:	1885283a 	div	r2,r3,r2
 8001f7c:	010200b4 	movhi	r4,2050
 8001f80:	213d4904 	addi	r4,r4,-2780
 8001f84:	100b883a 	mov	r5,r2
 8001f88:	800356c0 	call	800356c <printf>
			return floor((p1.y-10)/40);
 8001f8c:	e0bfff17 	ldw	r2,-4(fp)
 8001f90:	10fffd84 	addi	r3,r2,-10
 8001f94:	00800a04 	movi	r2,40
 8001f98:	1885283a 	div	r2,r3,r2
 8001f9c:	1009883a 	mov	r4,r2
 8001fa0:	800340c0 	call	800340c <__floatsidf>
 8001fa4:	100b883a 	mov	r5,r2
 8001fa8:	180d883a 	mov	r6,r3
 8001fac:	2809883a 	mov	r4,r5
 8001fb0:	300b883a 	mov	r5,r6
 8001fb4:	80027340 	call	8002734 <floor>
 8001fb8:	100b883a 	mov	r5,r2
 8001fbc:	180d883a 	mov	r6,r3
 8001fc0:	2809883a 	mov	r4,r5
 8001fc4:	300b883a 	mov	r5,r6
 8001fc8:	80033840 	call	8003384 <__fixdfsi>
 8001fcc:	00008b06 	br	80021fc <InfoChoice+0x2ec>
		}
		else if (p1.x>=480&&p1.x<=560&&p1.y<=40*7.25-24&&p1.y>=40*6.25-34){
 8001fd0:	e0bffe17 	ldw	r2,-8(fp)
 8001fd4:	10807810 	cmplti	r2,r2,480
 8001fd8:	10001f1e 	bne	r2,zero,8002058 <InfoChoice+0x148>
 8001fdc:	e0bffe17 	ldw	r2,-8(fp)
 8001fe0:	10808c48 	cmpgei	r2,r2,561
 8001fe4:	10001c1e 	bne	r2,zero,8002058 <InfoChoice+0x148>
 8001fe8:	e0bfff17 	ldw	r2,-4(fp)
 8001fec:	1009883a 	mov	r4,r2
 8001ff0:	800340c0 	call	800340c <__floatsidf>
 8001ff4:	100b883a 	mov	r5,r2
 8001ff8:	180d883a 	mov	r6,r3
 8001ffc:	2809883a 	mov	r4,r5
 8002000:	300b883a 	mov	r5,r6
 8002004:	000d883a 	mov	r6,zero
 8002008:	01d01c74 	movhi	r7,16497
 800200c:	39e80004 	addi	r7,r7,-24576
 8002010:	80032a40 	call	80032a4 <__ledf2>
 8002014:	00801016 	blt	zero,r2,8002058 <InfoChoice+0x148>
 8002018:	e0bfff17 	ldw	r2,-4(fp)
 800201c:	1009883a 	mov	r4,r2
 8002020:	800340c0 	call	800340c <__floatsidf>
 8002024:	100b883a 	mov	r5,r2
 8002028:	180d883a 	mov	r6,r3
 800202c:	2809883a 	mov	r4,r5
 8002030:	300b883a 	mov	r5,r6
 8002034:	000d883a 	mov	r6,zero
 8002038:	01d01af4 	movhi	r7,16491
 800203c:	80031c40 	call	80031c4 <__gedf2>
 8002040:	10000516 	blt	r2,zero,8002058 <InfoChoice+0x148>
			//Lights off Function
			printf("Turning Lights Off\n");
 8002044:	010200b4 	movhi	r4,2050
 8002048:	213d4c04 	addi	r4,r4,-2768
 800204c:	80036800 	call	8003680 <puts>
			return 11;
 8002050:	008002c4 	movi	r2,11
 8002054:	00006906 	br	80021fc <InfoChoice+0x2ec>
		}
		else if (p1.x>=570&&p1.x<=650&&p1.y<=40*7.25-24&&p1.y>=40*6.25-34){
 8002058:	e0bffe17 	ldw	r2,-8(fp)
 800205c:	10808e90 	cmplti	r2,r2,570
 8002060:	10001f1e 	bne	r2,zero,80020e0 <InfoChoice+0x1d0>
 8002064:	e0bffe17 	ldw	r2,-8(fp)
 8002068:	1080a2c8 	cmpgei	r2,r2,651
 800206c:	10001c1e 	bne	r2,zero,80020e0 <InfoChoice+0x1d0>
 8002070:	e0bfff17 	ldw	r2,-4(fp)
 8002074:	1009883a 	mov	r4,r2
 8002078:	800340c0 	call	800340c <__floatsidf>
 800207c:	100b883a 	mov	r5,r2
 8002080:	180d883a 	mov	r6,r3
 8002084:	2809883a 	mov	r4,r5
 8002088:	300b883a 	mov	r5,r6
 800208c:	000d883a 	mov	r6,zero
 8002090:	01d01c74 	movhi	r7,16497
 8002094:	39e80004 	addi	r7,r7,-24576
 8002098:	80032a40 	call	80032a4 <__ledf2>
 800209c:	00801016 	blt	zero,r2,80020e0 <InfoChoice+0x1d0>
 80020a0:	e0bfff17 	ldw	r2,-4(fp)
 80020a4:	1009883a 	mov	r4,r2
 80020a8:	800340c0 	call	800340c <__floatsidf>
 80020ac:	100b883a 	mov	r5,r2
 80020b0:	180d883a 	mov	r6,r3
 80020b4:	2809883a 	mov	r4,r5
 80020b8:	300b883a 	mov	r5,r6
 80020bc:	000d883a 	mov	r6,zero
 80020c0:	01d01af4 	movhi	r7,16491
 80020c4:	80031c40 	call	80031c4 <__gedf2>
 80020c8:	10000516 	blt	r2,zero,80020e0 <InfoChoice+0x1d0>
			//Lights on function
			printf("Turning Lights On\n");
 80020cc:	010200b4 	movhi	r4,2050
 80020d0:	213d5104 	addi	r4,r4,-2748
 80020d4:	80036800 	call	8003680 <puts>
			return 12;
 80020d8:	00800304 	movi	r2,12
 80020dc:	00004706 	br	80021fc <InfoChoice+0x2ec>
		}
		else if (p1.x>=480&&p1.x<=560&&p1.y<=40*8.75-24&&p1.y>=40*7.75-34){
 80020e0:	e0bffe17 	ldw	r2,-8(fp)
 80020e4:	10807810 	cmplti	r2,r2,480
 80020e8:	1000201e 	bne	r2,zero,800216c <InfoChoice+0x25c>
 80020ec:	e0bffe17 	ldw	r2,-8(fp)
 80020f0:	10808c48 	cmpgei	r2,r2,561
 80020f4:	10001d1e 	bne	r2,zero,800216c <InfoChoice+0x25c>
 80020f8:	e0bfff17 	ldw	r2,-4(fp)
 80020fc:	1009883a 	mov	r4,r2
 8002100:	800340c0 	call	800340c <__floatsidf>
 8002104:	100b883a 	mov	r5,r2
 8002108:	180d883a 	mov	r6,r3
 800210c:	2809883a 	mov	r4,r5
 8002110:	300b883a 	mov	r5,r6
 8002114:	000d883a 	mov	r6,zero
 8002118:	01d01d34 	movhi	r7,16500
 800211c:	39d80004 	addi	r7,r7,24576
 8002120:	80032a40 	call	80032a4 <__ledf2>
 8002124:	00801116 	blt	zero,r2,800216c <InfoChoice+0x25c>
 8002128:	e0bfff17 	ldw	r2,-4(fp)
 800212c:	1009883a 	mov	r4,r2
 8002130:	800340c0 	call	800340c <__floatsidf>
 8002134:	100b883a 	mov	r5,r2
 8002138:	180d883a 	mov	r6,r3
 800213c:	2809883a 	mov	r4,r5
 8002140:	300b883a 	mov	r5,r6
 8002144:	000d883a 	mov	r6,zero
 8002148:	01d01c74 	movhi	r7,16497
 800214c:	39d00004 	addi	r7,r7,16384
 8002150:	80031c40 	call	80031c4 <__gedf2>
 8002154:	10000516 	blt	r2,zero,800216c <InfoChoice+0x25c>
			//Door lock Function
			printf("lock Door\n");
 8002158:	010200b4 	movhi	r4,2050
 800215c:	213d5604 	addi	r4,r4,-2728
 8002160:	80036800 	call	8003680 <puts>
			return 13;
 8002164:	00800344 	movi	r2,13
 8002168:	00002406 	br	80021fc <InfoChoice+0x2ec>
		}
		else if (p1.x>=570&&p1.x<=650&&p1.y<=40*8.75-24&&p1.y>=40*7.75-34){
 800216c:	e0bffe17 	ldw	r2,-8(fp)
 8002170:	10808e90 	cmplti	r2,r2,570
 8002174:	1000201e 	bne	r2,zero,80021f8 <InfoChoice+0x2e8>
 8002178:	e0bffe17 	ldw	r2,-8(fp)
 800217c:	1080a2c8 	cmpgei	r2,r2,651
 8002180:	10001d1e 	bne	r2,zero,80021f8 <InfoChoice+0x2e8>
 8002184:	e0bfff17 	ldw	r2,-4(fp)
 8002188:	1009883a 	mov	r4,r2
 800218c:	800340c0 	call	800340c <__floatsidf>
 8002190:	100b883a 	mov	r5,r2
 8002194:	180d883a 	mov	r6,r3
 8002198:	2809883a 	mov	r4,r5
 800219c:	300b883a 	mov	r5,r6
 80021a0:	000d883a 	mov	r6,zero
 80021a4:	01d01d34 	movhi	r7,16500
 80021a8:	39d80004 	addi	r7,r7,24576
 80021ac:	80032a40 	call	80032a4 <__ledf2>
 80021b0:	00801116 	blt	zero,r2,80021f8 <InfoChoice+0x2e8>
 80021b4:	e0bfff17 	ldw	r2,-4(fp)
 80021b8:	1009883a 	mov	r4,r2
 80021bc:	800340c0 	call	800340c <__floatsidf>
 80021c0:	100b883a 	mov	r5,r2
 80021c4:	180d883a 	mov	r6,r3
 80021c8:	2809883a 	mov	r4,r5
 80021cc:	300b883a 	mov	r5,r6
 80021d0:	000d883a 	mov	r6,zero
 80021d4:	01d01c74 	movhi	r7,16497
 80021d8:	39d00004 	addi	r7,r7,16384
 80021dc:	80031c40 	call	80031c4 <__gedf2>
 80021e0:	10000516 	blt	r2,zero,80021f8 <InfoChoice+0x2e8>
			//Door Lock function
			printf("Turning Lights Off\n");
 80021e4:	010200b4 	movhi	r4,2050
 80021e8:	213d4c04 	addi	r4,r4,-2768
 80021ec:	80036800 	call	8003680 <puts>
			return 14;
 80021f0:	00800384 	movi	r2,14
 80021f4:	00000106 	br	80021fc <InfoChoice+0x2ec>
		}
	}
 80021f8:	003f4906 	br	8001f20 <__alt_data_end+0xfc001f20>
	return -1;
}
 80021fc:	e037883a 	mov	sp,fp
 8002200:	dfc00117 	ldw	ra,4(sp)
 8002204:	df000017 	ldw	fp,0(sp)
 8002208:	dec00204 	addi	sp,sp,8
 800220c:	f800283a 	ret

08002210 <PrintNumbers>:

void PrintNumbers (int room_num){
 8002210:	defff804 	addi	sp,sp,-32
 8002214:	dfc00715 	stw	ra,28(sp)
 8002218:	df000615 	stw	fp,24(sp)
 800221c:	df000604 	addi	fp,sp,24
 8002220:	e13fff15 	stw	r4,-4(fp)
	int j;
	char* roomString;
	for(j=1;j<=10;j++){
 8002224:	00800044 	movi	r2,1
 8002228:	e0bffd15 	stw	r2,-12(fp)
 800222c:	00002806 	br	80022d0 <PrintNumbers+0xc0>
		sprintf(roomString,"Room %d",j);
 8002230:	e13ffe17 	ldw	r4,-8(fp)
 8002234:	014200b4 	movhi	r5,2050
 8002238:	297d1004 	addi	r5,r5,-3008
 800223c:	e1bffd17 	ldw	r6,-12(fp)
 8002240:	80036ec0 	call	80036ec <sprintf>
		if(j==room_num){
 8002244:	e0fffd17 	ldw	r3,-12(fp)
 8002248:	e0bfff17 	ldw	r2,-4(fp)
 800224c:	18800f1e 	bne	r3,r2,800228c <PrintNumbers+0x7c>
			DrawString(105, 40*j+40/4,BLACK,NAVY,roomString,2,1);
 8002250:	e0bffd17 	ldw	r2,-12(fp)
 8002254:	10800a24 	muli	r2,r2,40
 8002258:	10c00284 	addi	r3,r2,10
 800225c:	e0bffe17 	ldw	r2,-8(fp)
 8002260:	d8800015 	stw	r2,0(sp)
 8002264:	00800084 	movi	r2,2
 8002268:	d8800115 	stw	r2,4(sp)
 800226c:	00800044 	movi	r2,1
 8002270:	d8800215 	stw	r2,8(sp)
 8002274:	01001a44 	movi	r4,105
 8002278:	180b883a 	mov	r5,r3
 800227c:	000d883a 	mov	r6,zero
 8002280:	01c003c4 	movi	r7,15
 8002284:	800144c0 	call	800144c <DrawString>
 8002288:	00000e06 	br	80022c4 <PrintNumbers+0xb4>

		}
		else{
			DrawString(105, 40*j+40/4,BLACK,TEAL,roomString,2,1);
 800228c:	e0bffd17 	ldw	r2,-12(fp)
 8002290:	10800a24 	muli	r2,r2,40
 8002294:	10c00284 	addi	r3,r2,10
 8002298:	e0bffe17 	ldw	r2,-8(fp)
 800229c:	d8800015 	stw	r2,0(sp)
 80022a0:	00800084 	movi	r2,2
 80022a4:	d8800115 	stw	r2,4(sp)
 80022a8:	00800044 	movi	r2,1
 80022ac:	d8800215 	stw	r2,8(sp)
 80022b0:	01001a44 	movi	r4,105
 80022b4:	180b883a 	mov	r5,r3
 80022b8:	000d883a 	mov	r6,zero
 80022bc:	01c00384 	movi	r7,14
 80022c0:	800144c0 	call	800144c <DrawString>
}

void PrintNumbers (int room_num){
	int j;
	char* roomString;
	for(j=1;j<=10;j++){
 80022c4:	e0bffd17 	ldw	r2,-12(fp)
 80022c8:	10800044 	addi	r2,r2,1
 80022cc:	e0bffd15 	stw	r2,-12(fp)
 80022d0:	e0bffd17 	ldw	r2,-12(fp)
 80022d4:	108002d0 	cmplti	r2,r2,11
 80022d8:	103fd51e 	bne	r2,zero,8002230 <__alt_data_end+0xfc002230>
		}
		else{
			DrawString(105, 40*j+40/4,BLACK,TEAL,roomString,2,1);
		}
	}
}
 80022dc:	e037883a 	mov	sp,fp
 80022e0:	dfc00117 	ldw	ra,4(sp)
 80022e4:	df000017 	ldw	fp,0(sp)
 80022e8:	dec00204 	addi	sp,sp,8
 80022ec:	f800283a 	ret

080022f0 <RunDisplay>:

void RunDisplay (void){
 80022f0:	defff904 	addi	sp,sp,-28
 80022f4:	dfc00615 	stw	ra,24(sp)
 80022f8:	df000515 	stw	fp,20(sp)
 80022fc:	df000504 	addi	fp,sp,20
	int last_room_num;
	int curr_room_num;


	int i;
	for(i=0;i<10;i++){
 8002300:	e03ffe15 	stw	zero,-8(fp)
 8002304:	00002406 	br	8002398 <RunDisplay+0xa8>
		roomArray[i].lights = 0;
 8002308:	008200b4 	movhi	r2,2050
 800230c:	108bd904 	addi	r2,r2,12132
 8002310:	e0fffe17 	ldw	r3,-8(fp)
 8002314:	18c002a4 	muli	r3,r3,10
 8002318:	10c5883a 	add	r2,r2,r3
 800231c:	1000000d 	sth	zero,0(r2)
		roomArray[i].door = 0;
 8002320:	008200b4 	movhi	r2,2050
 8002324:	108bd904 	addi	r2,r2,12132
 8002328:	e0fffe17 	ldw	r3,-8(fp)
 800232c:	18c002a4 	muli	r3,r3,10
 8002330:	10c5883a 	add	r2,r2,r3
 8002334:	1000008d 	sth	zero,2(r2)
		roomArray[i].requested = 0;
 8002338:	008200b4 	movhi	r2,2050
 800233c:	108bd904 	addi	r2,r2,12132
 8002340:	e0fffe17 	ldw	r3,-8(fp)
 8002344:	18c002a4 	muli	r3,r3,10
 8002348:	10c5883a 	add	r2,r2,r3
 800234c:	10800104 	addi	r2,r2,4
 8002350:	1000000d 	sth	zero,0(r2)
		roomArray[i].in_use = 0;
 8002354:	008200b4 	movhi	r2,2050
 8002358:	108bd904 	addi	r2,r2,12132
 800235c:	e0fffe17 	ldw	r3,-8(fp)
 8002360:	18c002a4 	muli	r3,r3,10
 8002364:	10c5883a 	add	r2,r2,r3
 8002368:	10800104 	addi	r2,r2,4
 800236c:	1000008d 	sth	zero,2(r2)
		roomArray[i].occupied = 0;
 8002370:	008200b4 	movhi	r2,2050
 8002374:	108bd904 	addi	r2,r2,12132
 8002378:	e0fffe17 	ldw	r3,-8(fp)
 800237c:	18c002a4 	muli	r3,r3,10
 8002380:	10c5883a 	add	r2,r2,r3
 8002384:	10800204 	addi	r2,r2,8
 8002388:	1000000d 	sth	zero,0(r2)
	int last_room_num;
	int curr_room_num;


	int i;
	for(i=0;i<10;i++){
 800238c:	e0bffe17 	ldw	r2,-8(fp)
 8002390:	10800044 	addi	r2,r2,1
 8002394:	e0bffe15 	stw	r2,-8(fp)
 8002398:	e0bffe17 	ldw	r2,-8(fp)
 800239c:	10800290 	cmplti	r2,r2,10
 80023a0:	103fd91e 	bne	r2,zero,8002308 <__alt_data_end+0xfc002308>
		roomArray[i].door = 0;
		roomArray[i].requested = 0;
		roomArray[i].in_use = 0;
		roomArray[i].occupied = 0;
	}
	roomArray[3].requested = 1;
 80023a4:	008200b4 	movhi	r2,2050
 80023a8:	108bd904 	addi	r2,r2,12132
 80023ac:	00c00044 	movi	r3,1
 80023b0:	10c0088d 	sth	r3,34(r2)
	roomArray[4].requested = 1;
 80023b4:	008200b4 	movhi	r2,2050
 80023b8:	108bd904 	addi	r2,r2,12132
 80023bc:	00c00044 	movi	r3,1
 80023c0:	10c00b0d 	sth	r3,44(r2)

	Init_Touch();
 80023c4:	800092c0 	call	800092c <Init_Touch>
	Init_RS232();
 80023c8:	80005b00 	call	80005b0 <Init_RS232>
	BaseDisplay();
 80023cc:	80015940 	call	8001594 <BaseDisplay>
	last_room_num = BaseChoice();
 80023d0:	8001e3c0 	call	8001e3c <BaseChoice>
 80023d4:	e0bffc15 	stw	r2,-16(fp)
	while(1){
		if(last_room_num>=1&&last_room_num<=10){
 80023d8:	e0bffc17 	ldw	r2,-16(fp)
 80023dc:	0080060e 	bge	zero,r2,80023f8 <RunDisplay+0x108>
 80023e0:	e0bffc17 	ldw	r2,-16(fp)
 80023e4:	108002c8 	cmpgei	r2,r2,11
 80023e8:	1000031e 	bne	r2,zero,80023f8 <RunDisplay+0x108>
			curr_room_num = last_room_num;
 80023ec:	e0bffc17 	ldw	r2,-16(fp)
 80023f0:	e0bffd15 	stw	r2,-12(fp)
 80023f4:	00007706 	br	80025d4 <RunDisplay+0x2e4>
		}
		else if (last_room_num==-1){
 80023f8:	e0bffc17 	ldw	r2,-16(fp)
 80023fc:	10bfffd8 	cmpnei	r2,r2,-1
 8002400:	1000041e 	bne	r2,zero,8002414 <RunDisplay+0x124>
			printf("Error, my dude\n");
 8002404:	010200b4 	movhi	r4,2050
 8002408:	213d5904 	addi	r4,r4,-2716
 800240c:	80036800 	call	8003680 <puts>
 8002410:	00007006 	br	80025d4 <RunDisplay+0x2e4>
		}
		else if (last_room_num==11){
 8002414:	e0bffc17 	ldw	r2,-16(fp)
 8002418:	108002d8 	cmpnei	r2,r2,11
 800241c:	10000c1e 	bne	r2,zero,8002450 <RunDisplay+0x160>
			roomArray[curr_room_num-1].lights = 0;
 8002420:	e0bffd17 	ldw	r2,-12(fp)
 8002424:	10ffffc4 	addi	r3,r2,-1
 8002428:	008200b4 	movhi	r2,2050
 800242c:	108bd904 	addi	r2,r2,12132
 8002430:	18c002a4 	muli	r3,r3,10
 8002434:	10c5883a 	add	r2,r2,r3
 8002438:	1000000d 	sth	zero,0(r2)
			if(curr_room_num==1){
 800243c:	e0bffd17 	ldw	r2,-12(fp)
 8002440:	10800058 	cmpnei	r2,r2,1
 8002444:	1000631e 	bne	r2,zero,80025d4 <RunDisplay+0x2e4>
				TurnOnLights();
 8002448:	80007d40 	call	80007d4 <TurnOnLights>
 800244c:	00006106 	br	80025d4 <RunDisplay+0x2e4>
			}
		}
		else if (last_room_num==12){
 8002450:	e0bffc17 	ldw	r2,-16(fp)
 8002454:	10800318 	cmpnei	r2,r2,12
 8002458:	10000d1e 	bne	r2,zero,8002490 <RunDisplay+0x1a0>
			roomArray[curr_room_num-1].lights = 1;
 800245c:	e0bffd17 	ldw	r2,-12(fp)
 8002460:	10ffffc4 	addi	r3,r2,-1
 8002464:	008200b4 	movhi	r2,2050
 8002468:	108bd904 	addi	r2,r2,12132
 800246c:	18c002a4 	muli	r3,r3,10
 8002470:	10c5883a 	add	r2,r2,r3
 8002474:	00c00044 	movi	r3,1
 8002478:	10c0000d 	sth	r3,0(r2)
			if(curr_room_num==1){
 800247c:	e0bffd17 	ldw	r2,-12(fp)
 8002480:	10800058 	cmpnei	r2,r2,1
 8002484:	1000531e 	bne	r2,zero,80025d4 <RunDisplay+0x2e4>
				TurnOnLights();
 8002488:	80007d40 	call	80007d4 <TurnOnLights>
 800248c:	00005106 	br	80025d4 <RunDisplay+0x2e4>
			}
		}
		else if (last_room_num==13){
 8002490:	e0bffc17 	ldw	r2,-16(fp)
 8002494:	10800358 	cmpnei	r2,r2,13
 8002498:	1000211e 	bne	r2,zero,8002520 <RunDisplay+0x230>
			roomArray[curr_room_num-1].door = 0;
 800249c:	e0bffd17 	ldw	r2,-12(fp)
 80024a0:	10ffffc4 	addi	r3,r2,-1
 80024a4:	008200b4 	movhi	r2,2050
 80024a8:	108bd904 	addi	r2,r2,12132
 80024ac:	18c002a4 	muli	r3,r3,10
 80024b0:	10c5883a 	add	r2,r2,r3
 80024b4:	1000008d 	sth	zero,2(r2)
			if(curr_room_num==1){
 80024b8:	e0bffd17 	ldw	r2,-12(fp)
 80024bc:	10800058 	cmpnei	r2,r2,1
 80024c0:	1000011e 	bne	r2,zero,80024c8 <RunDisplay+0x1d8>
				TurnServo();
 80024c4:	80007a40 	call	80007a4 <TurnServo>
			}
			if(roomArray[curr_room_num-1].requested){
 80024c8:	e0bffd17 	ldw	r2,-12(fp)
 80024cc:	10ffffc4 	addi	r3,r2,-1
 80024d0:	008200b4 	movhi	r2,2050
 80024d4:	108bd904 	addi	r2,r2,12132
 80024d8:	18c002a4 	muli	r3,r3,10
 80024dc:	10c5883a 	add	r2,r2,r3
 80024e0:	10800104 	addi	r2,r2,4
 80024e4:	1080000b 	ldhu	r2,0(r2)
 80024e8:	10bfffcc 	andi	r2,r2,65535
 80024ec:	10a0001c 	xori	r2,r2,32768
 80024f0:	10a00004 	addi	r2,r2,-32768
 80024f4:	10003726 	beq	r2,zero,80025d4 <RunDisplay+0x2e4>
				roomArray[curr_room_num-1].requested = 0;
 80024f8:	e0bffd17 	ldw	r2,-12(fp)
 80024fc:	10ffffc4 	addi	r3,r2,-1
 8002500:	008200b4 	movhi	r2,2050
 8002504:	108bd904 	addi	r2,r2,12132
 8002508:	18c002a4 	muli	r3,r3,10
 800250c:	10c5883a 	add	r2,r2,r3
 8002510:	10800104 	addi	r2,r2,4
 8002514:	1000000d 	sth	zero,0(r2)
				ResolvedRequest();
 8002518:	80008600 	call	8000860 <ResolvedRequest>
 800251c:	00002d06 	br	80025d4 <RunDisplay+0x2e4>
			}
		}
		else if (last_room_num==14){
 8002520:	e0bffc17 	ldw	r2,-16(fp)
 8002524:	10800398 	cmpnei	r2,r2,14
 8002528:	10002a1e 	bne	r2,zero,80025d4 <RunDisplay+0x2e4>
			roomArray[curr_room_num-1].door = 1;
 800252c:	e0bffd17 	ldw	r2,-12(fp)
 8002530:	10ffffc4 	addi	r3,r2,-1
 8002534:	008200b4 	movhi	r2,2050
 8002538:	108bd904 	addi	r2,r2,12132
 800253c:	18c002a4 	muli	r3,r3,10
 8002540:	10c5883a 	add	r2,r2,r3
 8002544:	00c00044 	movi	r3,1
 8002548:	10c0008d 	sth	r3,2(r2)
			if(curr_room_num==1){
 800254c:	e0bffd17 	ldw	r2,-12(fp)
 8002550:	10800058 	cmpnei	r2,r2,1
 8002554:	1000011e 	bne	r2,zero,800255c <RunDisplay+0x26c>
					TurnServo();
 8002558:	80007a40 	call	80007a4 <TurnServo>
				}
			if(roomArray[curr_room_num-1].requested){
 800255c:	e0bffd17 	ldw	r2,-12(fp)
 8002560:	10ffffc4 	addi	r3,r2,-1
 8002564:	008200b4 	movhi	r2,2050
 8002568:	108bd904 	addi	r2,r2,12132
 800256c:	18c002a4 	muli	r3,r3,10
 8002570:	10c5883a 	add	r2,r2,r3
 8002574:	10800104 	addi	r2,r2,4
 8002578:	1080000b 	ldhu	r2,0(r2)
 800257c:	10bfffcc 	andi	r2,r2,65535
 8002580:	10a0001c 	xori	r2,r2,32768
 8002584:	10a00004 	addi	r2,r2,-32768
 8002588:	10001226 	beq	r2,zero,80025d4 <RunDisplay+0x2e4>
				roomArray[curr_room_num-1].requested = 0;
 800258c:	e0bffd17 	ldw	r2,-12(fp)
 8002590:	10ffffc4 	addi	r3,r2,-1
 8002594:	008200b4 	movhi	r2,2050
 8002598:	108bd904 	addi	r2,r2,12132
 800259c:	18c002a4 	muli	r3,r3,10
 80025a0:	10c5883a 	add	r2,r2,r3
 80025a4:	10800104 	addi	r2,r2,4
 80025a8:	1000000d 	sth	zero,0(r2)
				roomArray[curr_room_num-1].in_use = 1;
 80025ac:	e0bffd17 	ldw	r2,-12(fp)
 80025b0:	10ffffc4 	addi	r3,r2,-1
 80025b4:	008200b4 	movhi	r2,2050
 80025b8:	108bd904 	addi	r2,r2,12132
 80025bc:	18c002a4 	muli	r3,r3,10
 80025c0:	10c5883a 	add	r2,r2,r3
 80025c4:	10800104 	addi	r2,r2,4
 80025c8:	00c00044 	movi	r3,1
 80025cc:	10c0008d 	sth	r3,2(r2)
				ResolvedRequest();
 80025d0:	80008600 	call	8000860 <ResolvedRequest>
			}
		}


		InfoDisplay(curr_room_num,roomArray[curr_room_num-1].lights,roomArray[curr_room_num-1].door,roomArray[curr_room_num-1].occupied, roomArray[curr_room_num-1].in_use);
 80025d4:	e0bffd17 	ldw	r2,-12(fp)
 80025d8:	10ffffc4 	addi	r3,r2,-1
 80025dc:	008200b4 	movhi	r2,2050
 80025e0:	108bd904 	addi	r2,r2,12132
 80025e4:	18c002a4 	muli	r3,r3,10
 80025e8:	10c5883a 	add	r2,r2,r3
 80025ec:	1080000b 	ldhu	r2,0(r2)
 80025f0:	117fffcc 	andi	r5,r2,65535
 80025f4:	2960001c 	xori	r5,r5,32768
 80025f8:	29600004 	addi	r5,r5,-32768
 80025fc:	e0bffd17 	ldw	r2,-12(fp)
 8002600:	10ffffc4 	addi	r3,r2,-1
 8002604:	008200b4 	movhi	r2,2050
 8002608:	108bd904 	addi	r2,r2,12132
 800260c:	18c002a4 	muli	r3,r3,10
 8002610:	10c5883a 	add	r2,r2,r3
 8002614:	1080008b 	ldhu	r2,2(r2)
 8002618:	11bfffcc 	andi	r6,r2,65535
 800261c:	31a0001c 	xori	r6,r6,32768
 8002620:	31a00004 	addi	r6,r6,-32768
 8002624:	e0bffd17 	ldw	r2,-12(fp)
 8002628:	10ffffc4 	addi	r3,r2,-1
 800262c:	008200b4 	movhi	r2,2050
 8002630:	108bd904 	addi	r2,r2,12132
 8002634:	18c002a4 	muli	r3,r3,10
 8002638:	10c5883a 	add	r2,r2,r3
 800263c:	10800204 	addi	r2,r2,8
 8002640:	1080000b 	ldhu	r2,0(r2)
 8002644:	11ffffcc 	andi	r7,r2,65535
 8002648:	39e0001c 	xori	r7,r7,32768
 800264c:	39e00004 	addi	r7,r7,-32768
 8002650:	e0bffd17 	ldw	r2,-12(fp)
 8002654:	10ffffc4 	addi	r3,r2,-1
 8002658:	008200b4 	movhi	r2,2050
 800265c:	108bd904 	addi	r2,r2,12132
 8002660:	18c002a4 	muli	r3,r3,10
 8002664:	10c5883a 	add	r2,r2,r3
 8002668:	10800104 	addi	r2,r2,4
 800266c:	1080008b 	ldhu	r2,2(r2)
 8002670:	10bfffcc 	andi	r2,r2,65535
 8002674:	10a0001c 	xori	r2,r2,32768
 8002678:	10a00004 	addi	r2,r2,-32768
 800267c:	d8800015 	stw	r2,0(sp)
 8002680:	e13ffd17 	ldw	r4,-12(fp)
 8002684:	80016940 	call	8001694 <InfoDisplay>
		int k;
		for(k=0;k<10;k++){
 8002688:	e03fff15 	stw	zero,-4(fp)
 800268c:	00001306 	br	80026dc <RunDisplay+0x3ec>
			if(roomArray[k].requested==1){
 8002690:	008200b4 	movhi	r2,2050
 8002694:	108bd904 	addi	r2,r2,12132
 8002698:	e0ffff17 	ldw	r3,-4(fp)
 800269c:	18c002a4 	muli	r3,r3,10
 80026a0:	10c5883a 	add	r2,r2,r3
 80026a4:	10800104 	addi	r2,r2,4
 80026a8:	1080000b 	ldhu	r2,0(r2)
 80026ac:	10bfffcc 	andi	r2,r2,65535
 80026b0:	10a0001c 	xori	r2,r2,32768
 80026b4:	10a00004 	addi	r2,r2,-32768
 80026b8:	10800058 	cmpnei	r2,r2,1
 80026bc:	1000041e 	bne	r2,zero,80026d0 <RunDisplay+0x3e0>
				RequestDotDisplay(k+1);
 80026c0:	e0bfff17 	ldw	r2,-4(fp)
 80026c4:	10800044 	addi	r2,r2,1
 80026c8:	1009883a 	mov	r4,r2
 80026cc:	8001c640 	call	8001c64 <RequestDotDisplay>
		}


		InfoDisplay(curr_room_num,roomArray[curr_room_num-1].lights,roomArray[curr_room_num-1].door,roomArray[curr_room_num-1].occupied, roomArray[curr_room_num-1].in_use);
		int k;
		for(k=0;k<10;k++){
 80026d0:	e0bfff17 	ldw	r2,-4(fp)
 80026d4:	10800044 	addi	r2,r2,1
 80026d8:	e0bfff15 	stw	r2,-4(fp)
 80026dc:	e0bfff17 	ldw	r2,-4(fp)
 80026e0:	10800290 	cmplti	r2,r2,10
 80026e4:	103fea1e 	bne	r2,zero,8002690 <__alt_data_end+0xfc002690>
			if(roomArray[k].requested==1){
				RequestDotDisplay(k+1);
			}
		}
		PrintNumbers(curr_room_num);
 80026e8:	e13ffd17 	ldw	r4,-12(fp)
 80026ec:	80022100 	call	8002210 <PrintNumbers>
		last_room_num = InfoChoice();
 80026f0:	8001f100 	call	8001f10 <InfoChoice>
 80026f4:	e0bffc15 	stw	r2,-16(fp)
	}
 80026f8:	003f3706 	br	80023d8 <__alt_data_end+0xfc0023d8>

080026fc <main>:
}



int main (void) {
 80026fc:	defffe04 	addi	sp,sp,-8
 8002700:	dfc00115 	stw	ra,4(sp)
 8002704:	df000015 	stw	fp,0(sp)
 8002708:	d839883a 	mov	fp,sp

	RunDisplay();
 800270c:	80022f00 	call	80022f0 <RunDisplay>

	printf("Finished");
 8002710:	010200b4 	movhi	r4,2050
 8002714:	213d5d04 	addi	r4,r4,-2700
 8002718:	800356c0 	call	800356c <printf>

	return 0;
 800271c:	0005883a 	mov	r2,zero
}
 8002720:	e037883a 	mov	sp,fp
 8002724:	dfc00117 	ldw	ra,4(sp)
 8002728:	df000017 	ldw	fp,0(sp)
 800272c:	dec00204 	addi	sp,sp,8
 8002730:	f800283a 	ret

08002734 <floor>:
 8002734:	defff904 	addi	sp,sp,-28
 8002738:	dc800215 	stw	r18,8(sp)
 800273c:	2825d53a 	srai	r18,r5,20
 8002740:	dd000415 	stw	r20,16(sp)
 8002744:	dcc00315 	stw	r19,12(sp)
 8002748:	9481ffcc 	andi	r18,r18,2047
 800274c:	dc400115 	stw	r17,4(sp)
 8002750:	dc000015 	stw	r16,0(sp)
 8002754:	dfc00615 	stw	ra,24(sp)
 8002758:	dd400515 	stw	r21,20(sp)
 800275c:	94ff0044 	addi	r19,r18,-1023
 8002760:	018004c4 	movi	r6,19
 8002764:	2821883a 	mov	r16,r5
 8002768:	2005883a 	mov	r2,r4
 800276c:	280f883a 	mov	r7,r5
 8002770:	2829883a 	mov	r20,r5
 8002774:	2023883a 	mov	r17,r4
 8002778:	34c01916 	blt	r6,r19,80027e0 <floor+0xac>
 800277c:	98003d16 	blt	r19,zero,8002874 <floor+0x140>
 8002780:	04800434 	movhi	r18,16
 8002784:	94bfffc4 	addi	r18,r18,-1
 8002788:	94e5d83a 	sra	r18,r18,r19
 800278c:	914c703a 	and	r6,r18,r5
 8002790:	310cb03a 	or	r6,r6,r4
 8002794:	30001626 	beq	r6,zero,80027f0 <floor+0xbc>
 8002798:	01a20034 	movhi	r6,34816
 800279c:	01df8e34 	movhi	r7,32312
 80027a0:	319d6704 	addi	r6,r6,30108
 80027a4:	39f90f04 	addi	r7,r7,-7108
 80027a8:	80029280 	call	8002928 <__adddf3>
 80027ac:	1009883a 	mov	r4,r2
 80027b0:	180b883a 	mov	r5,r3
 80027b4:	000d883a 	mov	r6,zero
 80027b8:	000f883a 	mov	r7,zero
 80027bc:	80031c40 	call	80031c4 <__gedf2>
 80027c0:	0080040e 	bge	zero,r2,80027d4 <floor+0xa0>
 80027c4:	80003d16 	blt	r16,zero,80028bc <floor+0x188>
 80027c8:	04a0303a 	nor	r16,zero,r18
 80027cc:	a420703a 	and	r16,r20,r16
 80027d0:	0023883a 	mov	r17,zero
 80027d4:	8805883a 	mov	r2,r17
 80027d8:	8007883a 	mov	r3,r16
 80027dc:	00000506 	br	80027f4 <floor+0xc0>
 80027e0:	01800cc4 	movi	r6,51
 80027e4:	34c00c0e 	bge	r6,r19,8002818 <floor+0xe4>
 80027e8:	01810004 	movi	r6,1024
 80027ec:	99803026 	beq	r19,r6,80028b0 <floor+0x17c>
 80027f0:	3807883a 	mov	r3,r7
 80027f4:	dfc00617 	ldw	ra,24(sp)
 80027f8:	dd400517 	ldw	r21,20(sp)
 80027fc:	dd000417 	ldw	r20,16(sp)
 8002800:	dcc00317 	ldw	r19,12(sp)
 8002804:	dc800217 	ldw	r18,8(sp)
 8002808:	dc400117 	ldw	r17,4(sp)
 800280c:	dc000017 	ldw	r16,0(sp)
 8002810:	dec00704 	addi	sp,sp,28
 8002814:	f800283a 	ret
 8002818:	01bfffc4 	movi	r6,-1
 800281c:	957efb44 	addi	r21,r18,-1043
 8002820:	356ad83a 	srl	r21,r6,r21
 8002824:	a90c703a 	and	r6,r21,r4
 8002828:	303ff126 	beq	r6,zero,80027f0 <__alt_data_end+0xfc0027f0>
 800282c:	01a20034 	movhi	r6,34816
 8002830:	01df8e34 	movhi	r7,32312
 8002834:	319d6704 	addi	r6,r6,30108
 8002838:	39f90f04 	addi	r7,r7,-7108
 800283c:	80029280 	call	8002928 <__adddf3>
 8002840:	1009883a 	mov	r4,r2
 8002844:	180b883a 	mov	r5,r3
 8002848:	000d883a 	mov	r6,zero
 800284c:	000f883a 	mov	r7,zero
 8002850:	80031c40 	call	80031c4 <__gedf2>
 8002854:	00bfdf0e 	bge	zero,r2,80027d4 <__alt_data_end+0xfc0027d4>
 8002858:	80001c16 	blt	r16,zero,80028cc <floor+0x198>
 800285c:	056a303a 	nor	r21,zero,r21
 8002860:	a021883a 	mov	r16,r20
 8002864:	8d62703a 	and	r17,r17,r21
 8002868:	8805883a 	mov	r2,r17
 800286c:	8007883a 	mov	r3,r16
 8002870:	003fe006 	br	80027f4 <__alt_data_end+0xfc0027f4>
 8002874:	01a20034 	movhi	r6,34816
 8002878:	01df8e34 	movhi	r7,32312
 800287c:	319d6704 	addi	r6,r6,30108
 8002880:	39f90f04 	addi	r7,r7,-7108
 8002884:	80029280 	call	8002928 <__adddf3>
 8002888:	1009883a 	mov	r4,r2
 800288c:	180b883a 	mov	r5,r3
 8002890:	000d883a 	mov	r6,zero
 8002894:	000f883a 	mov	r7,zero
 8002898:	80031c40 	call	80031c4 <__gedf2>
 800289c:	00bfcd0e 	bge	zero,r2,80027d4 <__alt_data_end+0xfc0027d4>
 80028a0:	80001516 	blt	r16,zero,80028f8 <floor+0x1c4>
 80028a4:	0023883a 	mov	r17,zero
 80028a8:	0021883a 	mov	r16,zero
 80028ac:	003fc906 	br	80027d4 <__alt_data_end+0xfc0027d4>
 80028b0:	200d883a 	mov	r6,r4
 80028b4:	80029280 	call	8002928 <__adddf3>
 80028b8:	003fce06 	br	80027f4 <__alt_data_end+0xfc0027f4>
 80028bc:	00800434 	movhi	r2,16
 80028c0:	14e7d83a 	sra	r19,r2,r19
 80028c4:	84e9883a 	add	r20,r16,r19
 80028c8:	003fbf06 	br	80027c8 <__alt_data_end+0xfc0027c8>
 80028cc:	00800504 	movi	r2,20
 80028d0:	98801326 	beq	r19,r2,8002920 <floor+0x1ec>
 80028d4:	00810cc4 	movi	r2,1075
 80028d8:	14a5c83a 	sub	r18,r2,r18
 80028dc:	00800044 	movi	r2,1
 80028e0:	1484983a 	sll	r2,r2,r18
 80028e4:	1445883a 	add	r2,r2,r17
 80028e8:	14400b2e 	bgeu	r2,r17,8002918 <floor+0x1e4>
 80028ec:	85000044 	addi	r20,r16,1
 80028f0:	1023883a 	mov	r17,r2
 80028f4:	003fd906 	br	800285c <__alt_data_end+0xfc00285c>
 80028f8:	00a00034 	movhi	r2,32768
 80028fc:	10bfffc4 	addi	r2,r2,-1
 8002900:	8084703a 	and	r2,r16,r2
 8002904:	1462b03a 	or	r17,r2,r17
 8002908:	883fb226 	beq	r17,zero,80027d4 <__alt_data_end+0xfc0027d4>
 800290c:	0023883a 	mov	r17,zero
 8002910:	042ffc34 	movhi	r16,49136
 8002914:	003faf06 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8002918:	1023883a 	mov	r17,r2
 800291c:	003fcf06 	br	800285c <__alt_data_end+0xfc00285c>
 8002920:	85000044 	addi	r20,r16,1
 8002924:	003fcd06 	br	800285c <__alt_data_end+0xfc00285c>

08002928 <__adddf3>:
 8002928:	02000434 	movhi	r8,16
 800292c:	423fffc4 	addi	r8,r8,-1
 8002930:	defffb04 	addi	sp,sp,-20
 8002934:	2a12703a 	and	r9,r5,r8
 8002938:	2806d7fa 	srli	r3,r5,31
 800293c:	3a10703a 	and	r8,r7,r8
 8002940:	3804d53a 	srli	r2,r7,20
 8002944:	3014d77a 	srli	r10,r6,29
 8002948:	dc000015 	stw	r16,0(sp)
 800294c:	481290fa 	slli	r9,r9,3
 8002950:	2820d53a 	srli	r16,r5,20
 8002954:	401090fa 	slli	r8,r8,3
 8002958:	200ad77a 	srli	r5,r4,29
 800295c:	380ed7fa 	srli	r7,r7,31
 8002960:	dc800215 	stw	r18,8(sp)
 8002964:	dc400115 	stw	r17,4(sp)
 8002968:	dfc00415 	stw	ra,16(sp)
 800296c:	dcc00315 	stw	r19,12(sp)
 8002970:	1c803fcc 	andi	r18,r3,255
 8002974:	8401ffcc 	andi	r16,r16,2047
 8002978:	494ab03a 	or	r5,r9,r5
 800297c:	202290fa 	slli	r17,r4,3
 8002980:	1081ffcc 	andi	r2,r2,2047
 8002984:	4290b03a 	or	r8,r8,r10
 8002988:	300c90fa 	slli	r6,r6,3
 800298c:	91c07026 	beq	r18,r7,8002b50 <__adddf3+0x228>
 8002990:	8087c83a 	sub	r3,r16,r2
 8002994:	00c0b30e 	bge	zero,r3,8002c64 <__adddf3+0x33c>
 8002998:	10002a1e 	bne	r2,zero,8002a44 <__adddf3+0x11c>
 800299c:	4184b03a 	or	r2,r8,r6
 80029a0:	1000991e 	bne	r2,zero,8002c08 <__adddf3+0x2e0>
 80029a4:	888001cc 	andi	r2,r17,7
 80029a8:	10005b26 	beq	r2,zero,8002b18 <__adddf3+0x1f0>
 80029ac:	88c003cc 	andi	r3,r17,15
 80029b0:	00800104 	movi	r2,4
 80029b4:	18805826 	beq	r3,r2,8002b18 <__adddf3+0x1f0>
 80029b8:	89800104 	addi	r6,r17,4
 80029bc:	3463803a 	cmpltu	r17,r6,r17
 80029c0:	2c4b883a 	add	r5,r5,r17
 80029c4:	2880202c 	andhi	r2,r5,128
 80029c8:	9007883a 	mov	r3,r18
 80029cc:	3023883a 	mov	r17,r6
 80029d0:	10005426 	beq	r2,zero,8002b24 <__adddf3+0x1fc>
 80029d4:	84000044 	addi	r16,r16,1
 80029d8:	0081ffc4 	movi	r2,2047
 80029dc:	8080c126 	beq	r16,r2,8002ce4 <__adddf3+0x3bc>
 80029e0:	013fe034 	movhi	r4,65408
 80029e4:	213fffc4 	addi	r4,r4,-1
 80029e8:	290a703a 	and	r5,r5,r4
 80029ec:	2804977a 	slli	r2,r5,29
 80029f0:	280a927a 	slli	r5,r5,9
 80029f4:	8822d0fa 	srli	r17,r17,3
 80029f8:	8401ffcc 	andi	r16,r16,2047
 80029fc:	2808d33a 	srli	r4,r5,12
 8002a00:	1444b03a 	or	r2,r2,r17
 8002a04:	8401ffcc 	andi	r16,r16,2047
 8002a08:	800a953a 	slli	r5,r16,20
 8002a0c:	18c03fcc 	andi	r3,r3,255
 8002a10:	04000434 	movhi	r16,16
 8002a14:	180697fa 	slli	r3,r3,31
 8002a18:	843fffc4 	addi	r16,r16,-1
 8002a1c:	2420703a 	and	r16,r4,r16
 8002a20:	8160b03a 	or	r16,r16,r5
 8002a24:	80c6b03a 	or	r3,r16,r3
 8002a28:	dfc00417 	ldw	ra,16(sp)
 8002a2c:	dcc00317 	ldw	r19,12(sp)
 8002a30:	dc800217 	ldw	r18,8(sp)
 8002a34:	dc400117 	ldw	r17,4(sp)
 8002a38:	dc000017 	ldw	r16,0(sp)
 8002a3c:	dec00504 	addi	sp,sp,20
 8002a40:	f800283a 	ret
 8002a44:	0081ffc4 	movi	r2,2047
 8002a48:	80bfd626 	beq	r16,r2,80029a4 <__alt_data_end+0xfc0029a4>
 8002a4c:	42002034 	orhi	r8,r8,128
 8002a50:	00800e04 	movi	r2,56
 8002a54:	10c0a616 	blt	r2,r3,8002cf0 <__adddf3+0x3c8>
 8002a58:	008007c4 	movi	r2,31
 8002a5c:	10c0c916 	blt	r2,r3,8002d84 <__adddf3+0x45c>
 8002a60:	00800804 	movi	r2,32
 8002a64:	10c5c83a 	sub	r2,r2,r3
 8002a68:	408e983a 	sll	r7,r8,r2
 8002a6c:	30c8d83a 	srl	r4,r6,r3
 8002a70:	3084983a 	sll	r2,r6,r2
 8002a74:	40c6d83a 	srl	r3,r8,r3
 8002a78:	390cb03a 	or	r6,r7,r4
 8002a7c:	1004c03a 	cmpne	r2,r2,zero
 8002a80:	308cb03a 	or	r6,r6,r2
 8002a84:	898dc83a 	sub	r6,r17,r6
 8002a88:	89a3803a 	cmpltu	r17,r17,r6
 8002a8c:	28cbc83a 	sub	r5,r5,r3
 8002a90:	2c4bc83a 	sub	r5,r5,r17
 8002a94:	3023883a 	mov	r17,r6
 8002a98:	2880202c 	andhi	r2,r5,128
 8002a9c:	10006d26 	beq	r2,zero,8002c54 <__adddf3+0x32c>
 8002aa0:	04c02034 	movhi	r19,128
 8002aa4:	9cffffc4 	addi	r19,r19,-1
 8002aa8:	2ce6703a 	and	r19,r5,r19
 8002aac:	98007e26 	beq	r19,zero,8002ca8 <__adddf3+0x380>
 8002ab0:	9809883a 	mov	r4,r19
 8002ab4:	80034dc0 	call	80034dc <__clzsi2>
 8002ab8:	10fffe04 	addi	r3,r2,-8
 8002abc:	010007c4 	movi	r4,31
 8002ac0:	20c07f16 	blt	r4,r3,8002cc0 <__adddf3+0x398>
 8002ac4:	01400a04 	movi	r5,40
 8002ac8:	2885c83a 	sub	r2,r5,r2
 8002acc:	888ad83a 	srl	r5,r17,r2
 8002ad0:	98e6983a 	sll	r19,r19,r3
 8002ad4:	88e2983a 	sll	r17,r17,r3
 8002ad8:	2ce6b03a 	or	r19,r5,r19
 8002adc:	1c007c16 	blt	r3,r16,8002cd0 <__adddf3+0x3a8>
 8002ae0:	1c21c83a 	sub	r16,r3,r16
 8002ae4:	81400044 	addi	r5,r16,1
 8002ae8:	00c007c4 	movi	r3,31
 8002aec:	19409816 	blt	r3,r5,8002d50 <__adddf3+0x428>
 8002af0:	1c21c83a 	sub	r16,r3,r16
 8002af4:	8c08983a 	sll	r4,r17,r16
 8002af8:	8946d83a 	srl	r3,r17,r5
 8002afc:	9c20983a 	sll	r16,r19,r16
 8002b00:	2008c03a 	cmpne	r4,r4,zero
 8002b04:	994ad83a 	srl	r5,r19,r5
 8002b08:	1c06b03a 	or	r3,r3,r16
 8002b0c:	1922b03a 	or	r17,r3,r4
 8002b10:	0021883a 	mov	r16,zero
 8002b14:	003fa306 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002b18:	2880202c 	andhi	r2,r5,128
 8002b1c:	9007883a 	mov	r3,r18
 8002b20:	103fac1e 	bne	r2,zero,80029d4 <__alt_data_end+0xfc0029d4>
 8002b24:	2804977a 	slli	r2,r5,29
 8002b28:	8822d0fa 	srli	r17,r17,3
 8002b2c:	0101ffc4 	movi	r4,2047
 8002b30:	280ad0fa 	srli	r5,r5,3
 8002b34:	1444b03a 	or	r2,r2,r17
 8002b38:	81002c26 	beq	r16,r4,8002bec <__adddf3+0x2c4>
 8002b3c:	8120703a 	and	r16,r16,r4
 8002b40:	01000434 	movhi	r4,16
 8002b44:	213fffc4 	addi	r4,r4,-1
 8002b48:	2908703a 	and	r4,r5,r4
 8002b4c:	003fad06 	br	8002a04 <__alt_data_end+0xfc002a04>
 8002b50:	8089c83a 	sub	r4,r16,r2
 8002b54:	01006a0e 	bge	zero,r4,8002d00 <__adddf3+0x3d8>
 8002b58:	10003326 	beq	r2,zero,8002c28 <__adddf3+0x300>
 8002b5c:	0081ffc4 	movi	r2,2047
 8002b60:	80bf9026 	beq	r16,r2,80029a4 <__alt_data_end+0xfc0029a4>
 8002b64:	42002034 	orhi	r8,r8,128
 8002b68:	00800e04 	movi	r2,56
 8002b6c:	1100b116 	blt	r2,r4,8002e34 <__adddf3+0x50c>
 8002b70:	008007c4 	movi	r2,31
 8002b74:	1100e216 	blt	r2,r4,8002f00 <__adddf3+0x5d8>
 8002b78:	00800804 	movi	r2,32
 8002b7c:	1105c83a 	sub	r2,r2,r4
 8002b80:	4092983a 	sll	r9,r8,r2
 8002b84:	310ed83a 	srl	r7,r6,r4
 8002b88:	3084983a 	sll	r2,r6,r2
 8002b8c:	4110d83a 	srl	r8,r8,r4
 8002b90:	49ccb03a 	or	r6,r9,r7
 8002b94:	1004c03a 	cmpne	r2,r2,zero
 8002b98:	308cb03a 	or	r6,r6,r2
 8002b9c:	344d883a 	add	r6,r6,r17
 8002ba0:	3463803a 	cmpltu	r17,r6,r17
 8002ba4:	414b883a 	add	r5,r8,r5
 8002ba8:	2c4b883a 	add	r5,r5,r17
 8002bac:	3023883a 	mov	r17,r6
 8002bb0:	2880202c 	andhi	r2,r5,128
 8002bb4:	10002726 	beq	r2,zero,8002c54 <__adddf3+0x32c>
 8002bb8:	84000044 	addi	r16,r16,1
 8002bbc:	0081ffc4 	movi	r2,2047
 8002bc0:	8080ae26 	beq	r16,r2,8002e7c <__adddf3+0x554>
 8002bc4:	00bfe034 	movhi	r2,65408
 8002bc8:	10bfffc4 	addi	r2,r2,-1
 8002bcc:	288a703a 	and	r5,r5,r2
 8002bd0:	880cd07a 	srli	r6,r17,1
 8002bd4:	280897fa 	slli	r4,r5,31
 8002bd8:	88c0004c 	andi	r3,r17,1
 8002bdc:	30e2b03a 	or	r17,r6,r3
 8002be0:	280ad07a 	srli	r5,r5,1
 8002be4:	8922b03a 	or	r17,r17,r4
 8002be8:	003f6e06 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002bec:	1148b03a 	or	r4,r2,r5
 8002bf0:	20003c26 	beq	r4,zero,8002ce4 <__adddf3+0x3bc>
 8002bf4:	29000234 	orhi	r4,r5,8
 8002bf8:	01400434 	movhi	r5,16
 8002bfc:	297fffc4 	addi	r5,r5,-1
 8002c00:	2148703a 	and	r4,r4,r5
 8002c04:	003f7f06 	br	8002a04 <__alt_data_end+0xfc002a04>
 8002c08:	18ffffc4 	addi	r3,r3,-1
 8002c0c:	18004d1e 	bne	r3,zero,8002d44 <__adddf3+0x41c>
 8002c10:	898dc83a 	sub	r6,r17,r6
 8002c14:	89a3803a 	cmpltu	r17,r17,r6
 8002c18:	2a0bc83a 	sub	r5,r5,r8
 8002c1c:	2c4bc83a 	sub	r5,r5,r17
 8002c20:	3023883a 	mov	r17,r6
 8002c24:	003f9c06 	br	8002a98 <__alt_data_end+0xfc002a98>
 8002c28:	4184b03a 	or	r2,r8,r6
 8002c2c:	103f5d26 	beq	r2,zero,80029a4 <__alt_data_end+0xfc0029a4>
 8002c30:	213fffc4 	addi	r4,r4,-1
 8002c34:	203fd926 	beq	r4,zero,8002b9c <__alt_data_end+0xfc002b9c>
 8002c38:	0081ffc4 	movi	r2,2047
 8002c3c:	80bfca1e 	bne	r16,r2,8002b68 <__alt_data_end+0xfc002b68>
 8002c40:	003f5806 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002c44:	10c8b03a 	or	r4,r2,r3
 8002c48:	20008b26 	beq	r4,zero,8002e78 <__adddf3+0x550>
 8002c4c:	100b883a 	mov	r5,r2
 8002c50:	1823883a 	mov	r17,r3
 8002c54:	888001cc 	andi	r2,r17,7
 8002c58:	103f541e 	bne	r2,zero,80029ac <__alt_data_end+0xfc0029ac>
 8002c5c:	9007883a 	mov	r3,r18
 8002c60:	003fb006 	br	8002b24 <__alt_data_end+0xfc002b24>
 8002c64:	1800531e 	bne	r3,zero,8002db4 <__adddf3+0x48c>
 8002c68:	80800044 	addi	r2,r16,1
 8002c6c:	1081ffcc 	andi	r2,r2,2047
 8002c70:	00c00044 	movi	r3,1
 8002c74:	1880990e 	bge	r3,r2,8002edc <__adddf3+0x5b4>
 8002c78:	8985c83a 	sub	r2,r17,r6
 8002c7c:	8887803a 	cmpltu	r3,r17,r2
 8002c80:	2a27c83a 	sub	r19,r5,r8
 8002c84:	98e7c83a 	sub	r19,r19,r3
 8002c88:	98c0202c 	andhi	r3,r19,128
 8002c8c:	18006226 	beq	r3,zero,8002e18 <__adddf3+0x4f0>
 8002c90:	3463c83a 	sub	r17,r6,r17
 8002c94:	4151c83a 	sub	r8,r8,r5
 8002c98:	344d803a 	cmpltu	r6,r6,r17
 8002c9c:	41a7c83a 	sub	r19,r8,r6
 8002ca0:	3825883a 	mov	r18,r7
 8002ca4:	983f821e 	bne	r19,zero,8002ab0 <__alt_data_end+0xfc002ab0>
 8002ca8:	8809883a 	mov	r4,r17
 8002cac:	80034dc0 	call	80034dc <__clzsi2>
 8002cb0:	10800804 	addi	r2,r2,32
 8002cb4:	10fffe04 	addi	r3,r2,-8
 8002cb8:	010007c4 	movi	r4,31
 8002cbc:	20ff810e 	bge	r4,r3,8002ac4 <__alt_data_end+0xfc002ac4>
 8002cc0:	14fff604 	addi	r19,r2,-40
 8002cc4:	8ce6983a 	sll	r19,r17,r19
 8002cc8:	0023883a 	mov	r17,zero
 8002ccc:	1c3f840e 	bge	r3,r16,8002ae0 <__alt_data_end+0xfc002ae0>
 8002cd0:	017fe034 	movhi	r5,65408
 8002cd4:	297fffc4 	addi	r5,r5,-1
 8002cd8:	80e1c83a 	sub	r16,r16,r3
 8002cdc:	994a703a 	and	r5,r19,r5
 8002ce0:	003f3006 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002ce4:	0009883a 	mov	r4,zero
 8002ce8:	0005883a 	mov	r2,zero
 8002cec:	003f4506 	br	8002a04 <__alt_data_end+0xfc002a04>
 8002cf0:	418cb03a 	or	r6,r8,r6
 8002cf4:	300cc03a 	cmpne	r6,r6,zero
 8002cf8:	0007883a 	mov	r3,zero
 8002cfc:	003f6106 	br	8002a84 <__alt_data_end+0xfc002a84>
 8002d00:	2000921e 	bne	r4,zero,8002f4c <__adddf3+0x624>
 8002d04:	80800044 	addi	r2,r16,1
 8002d08:	11c1ffcc 	andi	r7,r2,2047
 8002d0c:	01000044 	movi	r4,1
 8002d10:	21c0610e 	bge	r4,r7,8002e98 <__adddf3+0x570>
 8002d14:	0101ffc4 	movi	r4,2047
 8002d18:	1100a326 	beq	r2,r4,8002fa8 <__adddf3+0x680>
 8002d1c:	344d883a 	add	r6,r6,r17
 8002d20:	3463803a 	cmpltu	r17,r6,r17
 8002d24:	414b883a 	add	r5,r8,r5
 8002d28:	2c4b883a 	add	r5,r5,r17
 8002d2c:	282297fa 	slli	r17,r5,31
 8002d30:	300cd07a 	srli	r6,r6,1
 8002d34:	280ad07a 	srli	r5,r5,1
 8002d38:	1021883a 	mov	r16,r2
 8002d3c:	89a2b03a 	or	r17,r17,r6
 8002d40:	003f1806 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002d44:	0081ffc4 	movi	r2,2047
 8002d48:	80bf411e 	bne	r16,r2,8002a50 <__alt_data_end+0xfc002a50>
 8002d4c:	003f1506 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002d50:	80bff844 	addi	r2,r16,-31
 8002d54:	00c00804 	movi	r3,32
 8002d58:	9884d83a 	srl	r2,r19,r2
 8002d5c:	28c04a26 	beq	r5,r3,8002e88 <__adddf3+0x560>
 8002d60:	00c00fc4 	movi	r3,63
 8002d64:	1c21c83a 	sub	r16,r3,r16
 8002d68:	9c26983a 	sll	r19,r19,r16
 8002d6c:	9c62b03a 	or	r17,r19,r17
 8002d70:	8822c03a 	cmpne	r17,r17,zero
 8002d74:	88a2b03a 	or	r17,r17,r2
 8002d78:	000b883a 	mov	r5,zero
 8002d7c:	0021883a 	mov	r16,zero
 8002d80:	003fb406 	br	8002c54 <__alt_data_end+0xfc002c54>
 8002d84:	18bff804 	addi	r2,r3,-32
 8002d88:	01000804 	movi	r4,32
 8002d8c:	4084d83a 	srl	r2,r8,r2
 8002d90:	19003f26 	beq	r3,r4,8002e90 <__adddf3+0x568>
 8002d94:	01001004 	movi	r4,64
 8002d98:	20c7c83a 	sub	r3,r4,r3
 8002d9c:	40d0983a 	sll	r8,r8,r3
 8002da0:	418cb03a 	or	r6,r8,r6
 8002da4:	300cc03a 	cmpne	r6,r6,zero
 8002da8:	308cb03a 	or	r6,r6,r2
 8002dac:	0007883a 	mov	r3,zero
 8002db0:	003f3406 	br	8002a84 <__alt_data_end+0xfc002a84>
 8002db4:	80002326 	beq	r16,zero,8002e44 <__adddf3+0x51c>
 8002db8:	0101ffc4 	movi	r4,2047
 8002dbc:	11005e26 	beq	r2,r4,8002f38 <__adddf3+0x610>
 8002dc0:	00c7c83a 	sub	r3,zero,r3
 8002dc4:	29402034 	orhi	r5,r5,128
 8002dc8:	01000e04 	movi	r4,56
 8002dcc:	20c07216 	blt	r4,r3,8002f98 <__adddf3+0x670>
 8002dd0:	010007c4 	movi	r4,31
 8002dd4:	20c0ce16 	blt	r4,r3,8003110 <__adddf3+0x7e8>
 8002dd8:	01000804 	movi	r4,32
 8002ddc:	20c9c83a 	sub	r4,r4,r3
 8002de0:	2914983a 	sll	r10,r5,r4
 8002de4:	88d2d83a 	srl	r9,r17,r3
 8002de8:	8908983a 	sll	r4,r17,r4
 8002dec:	28c6d83a 	srl	r3,r5,r3
 8002df0:	5262b03a 	or	r17,r10,r9
 8002df4:	2008c03a 	cmpne	r4,r4,zero
 8002df8:	8922b03a 	or	r17,r17,r4
 8002dfc:	3463c83a 	sub	r17,r6,r17
 8002e00:	40c7c83a 	sub	r3,r8,r3
 8002e04:	344d803a 	cmpltu	r6,r6,r17
 8002e08:	198bc83a 	sub	r5,r3,r6
 8002e0c:	1021883a 	mov	r16,r2
 8002e10:	3825883a 	mov	r18,r7
 8002e14:	003f2006 	br	8002a98 <__alt_data_end+0xfc002a98>
 8002e18:	9886b03a 	or	r3,r19,r2
 8002e1c:	1800141e 	bne	r3,zero,8002e70 <__adddf3+0x548>
 8002e20:	0007883a 	mov	r3,zero
 8002e24:	000b883a 	mov	r5,zero
 8002e28:	0023883a 	mov	r17,zero
 8002e2c:	0021883a 	mov	r16,zero
 8002e30:	003f3c06 	br	8002b24 <__alt_data_end+0xfc002b24>
 8002e34:	418cb03a 	or	r6,r8,r6
 8002e38:	300cc03a 	cmpne	r6,r6,zero
 8002e3c:	0011883a 	mov	r8,zero
 8002e40:	003f5606 	br	8002b9c <__alt_data_end+0xfc002b9c>
 8002e44:	2c48b03a 	or	r4,r5,r17
 8002e48:	20003b26 	beq	r4,zero,8002f38 <__adddf3+0x610>
 8002e4c:	00c6303a 	nor	r3,zero,r3
 8002e50:	1800371e 	bne	r3,zero,8002f30 <__adddf3+0x608>
 8002e54:	3463c83a 	sub	r17,r6,r17
 8002e58:	414bc83a 	sub	r5,r8,r5
 8002e5c:	344d803a 	cmpltu	r6,r6,r17
 8002e60:	298bc83a 	sub	r5,r5,r6
 8002e64:	1021883a 	mov	r16,r2
 8002e68:	3825883a 	mov	r18,r7
 8002e6c:	003f0a06 	br	8002a98 <__alt_data_end+0xfc002a98>
 8002e70:	1023883a 	mov	r17,r2
 8002e74:	003f0d06 	br	8002aac <__alt_data_end+0xfc002aac>
 8002e78:	0007883a 	mov	r3,zero
 8002e7c:	000b883a 	mov	r5,zero
 8002e80:	0023883a 	mov	r17,zero
 8002e84:	003f2706 	br	8002b24 <__alt_data_end+0xfc002b24>
 8002e88:	0027883a 	mov	r19,zero
 8002e8c:	003fb706 	br	8002d6c <__alt_data_end+0xfc002d6c>
 8002e90:	0011883a 	mov	r8,zero
 8002e94:	003fc206 	br	8002da0 <__alt_data_end+0xfc002da0>
 8002e98:	2c44b03a 	or	r2,r5,r17
 8002e9c:	8000871e 	bne	r16,zero,80030bc <__adddf3+0x794>
 8002ea0:	1000b126 	beq	r2,zero,8003168 <__adddf3+0x840>
 8002ea4:	4184b03a 	or	r2,r8,r6
 8002ea8:	103ebe26 	beq	r2,zero,80029a4 <__alt_data_end+0xfc0029a4>
 8002eac:	3445883a 	add	r2,r6,r17
 8002eb0:	1463803a 	cmpltu	r17,r2,r17
 8002eb4:	414b883a 	add	r5,r8,r5
 8002eb8:	2c4b883a 	add	r5,r5,r17
 8002ebc:	28c0202c 	andhi	r3,r5,128
 8002ec0:	1023883a 	mov	r17,r2
 8002ec4:	183f6326 	beq	r3,zero,8002c54 <__alt_data_end+0xfc002c54>
 8002ec8:	00bfe034 	movhi	r2,65408
 8002ecc:	10bfffc4 	addi	r2,r2,-1
 8002ed0:	2021883a 	mov	r16,r4
 8002ed4:	288a703a 	and	r5,r5,r2
 8002ed8:	003eb206 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002edc:	2c44b03a 	or	r2,r5,r17
 8002ee0:	8000251e 	bne	r16,zero,8002f78 <__adddf3+0x650>
 8002ee4:	10004b1e 	bne	r2,zero,8003014 <__adddf3+0x6ec>
 8002ee8:	4184b03a 	or	r2,r8,r6
 8002eec:	103fe226 	beq	r2,zero,8002e78 <__alt_data_end+0xfc002e78>
 8002ef0:	400b883a 	mov	r5,r8
 8002ef4:	3023883a 	mov	r17,r6
 8002ef8:	3825883a 	mov	r18,r7
 8002efc:	003ea906 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002f00:	20bff804 	addi	r2,r4,-32
 8002f04:	01c00804 	movi	r7,32
 8002f08:	4084d83a 	srl	r2,r8,r2
 8002f0c:	21c07e26 	beq	r4,r7,8003108 <__adddf3+0x7e0>
 8002f10:	01c01004 	movi	r7,64
 8002f14:	3909c83a 	sub	r4,r7,r4
 8002f18:	4110983a 	sll	r8,r8,r4
 8002f1c:	418cb03a 	or	r6,r8,r6
 8002f20:	300cc03a 	cmpne	r6,r6,zero
 8002f24:	308cb03a 	or	r6,r6,r2
 8002f28:	0011883a 	mov	r8,zero
 8002f2c:	003f1b06 	br	8002b9c <__alt_data_end+0xfc002b9c>
 8002f30:	0101ffc4 	movi	r4,2047
 8002f34:	113fa41e 	bne	r2,r4,8002dc8 <__alt_data_end+0xfc002dc8>
 8002f38:	400b883a 	mov	r5,r8
 8002f3c:	3023883a 	mov	r17,r6
 8002f40:	1021883a 	mov	r16,r2
 8002f44:	3825883a 	mov	r18,r7
 8002f48:	003e9606 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002f4c:	80001a1e 	bne	r16,zero,8002fb8 <__adddf3+0x690>
 8002f50:	2c4eb03a 	or	r7,r5,r17
 8002f54:	38005526 	beq	r7,zero,80030ac <__adddf3+0x784>
 8002f58:	0108303a 	nor	r4,zero,r4
 8002f5c:	2000511e 	bne	r4,zero,80030a4 <__adddf3+0x77c>
 8002f60:	89a3883a 	add	r17,r17,r6
 8002f64:	414b883a 	add	r5,r8,r5
 8002f68:	898d803a 	cmpltu	r6,r17,r6
 8002f6c:	298b883a 	add	r5,r5,r6
 8002f70:	1021883a 	mov	r16,r2
 8002f74:	003f0e06 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 8002f78:	1000341e 	bne	r2,zero,800304c <__adddf3+0x724>
 8002f7c:	4184b03a 	or	r2,r8,r6
 8002f80:	10006f26 	beq	r2,zero,8003140 <__adddf3+0x818>
 8002f84:	400b883a 	mov	r5,r8
 8002f88:	3023883a 	mov	r17,r6
 8002f8c:	3825883a 	mov	r18,r7
 8002f90:	0401ffc4 	movi	r16,2047
 8002f94:	003e8306 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8002f98:	2c62b03a 	or	r17,r5,r17
 8002f9c:	8822c03a 	cmpne	r17,r17,zero
 8002fa0:	0007883a 	mov	r3,zero
 8002fa4:	003f9506 	br	8002dfc <__alt_data_end+0xfc002dfc>
 8002fa8:	1021883a 	mov	r16,r2
 8002fac:	000b883a 	mov	r5,zero
 8002fb0:	0023883a 	mov	r17,zero
 8002fb4:	003edb06 	br	8002b24 <__alt_data_end+0xfc002b24>
 8002fb8:	01c1ffc4 	movi	r7,2047
 8002fbc:	11c03b26 	beq	r2,r7,80030ac <__adddf3+0x784>
 8002fc0:	0109c83a 	sub	r4,zero,r4
 8002fc4:	29402034 	orhi	r5,r5,128
 8002fc8:	01c00e04 	movi	r7,56
 8002fcc:	39006216 	blt	r7,r4,8003158 <__adddf3+0x830>
 8002fd0:	01c007c4 	movi	r7,31
 8002fd4:	39006b16 	blt	r7,r4,8003184 <__adddf3+0x85c>
 8002fd8:	01c00804 	movi	r7,32
 8002fdc:	390fc83a 	sub	r7,r7,r4
 8002fe0:	29d4983a 	sll	r10,r5,r7
 8002fe4:	8912d83a 	srl	r9,r17,r4
 8002fe8:	89ce983a 	sll	r7,r17,r7
 8002fec:	2908d83a 	srl	r4,r5,r4
 8002ff0:	5262b03a 	or	r17,r10,r9
 8002ff4:	380ac03a 	cmpne	r5,r7,zero
 8002ff8:	8962b03a 	or	r17,r17,r5
 8002ffc:	89a3883a 	add	r17,r17,r6
 8003000:	2211883a 	add	r8,r4,r8
 8003004:	898d803a 	cmpltu	r6,r17,r6
 8003008:	418b883a 	add	r5,r8,r6
 800300c:	1021883a 	mov	r16,r2
 8003010:	003ee706 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 8003014:	4184b03a 	or	r2,r8,r6
 8003018:	103e6226 	beq	r2,zero,80029a4 <__alt_data_end+0xfc0029a4>
 800301c:	8987c83a 	sub	r3,r17,r6
 8003020:	88c9803a 	cmpltu	r4,r17,r3
 8003024:	2a05c83a 	sub	r2,r5,r8
 8003028:	1105c83a 	sub	r2,r2,r4
 800302c:	1100202c 	andhi	r4,r2,128
 8003030:	203f0426 	beq	r4,zero,8002c44 <__alt_data_end+0xfc002c44>
 8003034:	3463c83a 	sub	r17,r6,r17
 8003038:	414bc83a 	sub	r5,r8,r5
 800303c:	344d803a 	cmpltu	r6,r6,r17
 8003040:	298bc83a 	sub	r5,r5,r6
 8003044:	3825883a 	mov	r18,r7
 8003048:	003e5606 	br	80029a4 <__alt_data_end+0xfc0029a4>
 800304c:	4184b03a 	or	r2,r8,r6
 8003050:	10002b26 	beq	r2,zero,8003100 <__adddf3+0x7d8>
 8003054:	2804d0fa 	srli	r2,r5,3
 8003058:	8822d0fa 	srli	r17,r17,3
 800305c:	280a977a 	slli	r5,r5,29
 8003060:	10c0022c 	andhi	r3,r2,8
 8003064:	2c62b03a 	or	r17,r5,r17
 8003068:	18000826 	beq	r3,zero,800308c <__adddf3+0x764>
 800306c:	4008d0fa 	srli	r4,r8,3
 8003070:	20c0022c 	andhi	r3,r4,8
 8003074:	1800051e 	bne	r3,zero,800308c <__adddf3+0x764>
 8003078:	300cd0fa 	srli	r6,r6,3
 800307c:	4010977a 	slli	r8,r8,29
 8003080:	2005883a 	mov	r2,r4
 8003084:	3825883a 	mov	r18,r7
 8003088:	41a2b03a 	or	r17,r8,r6
 800308c:	880ad77a 	srli	r5,r17,29
 8003090:	100490fa 	slli	r2,r2,3
 8003094:	882290fa 	slli	r17,r17,3
 8003098:	0401ffc4 	movi	r16,2047
 800309c:	288ab03a 	or	r5,r5,r2
 80030a0:	003e4006 	br	80029a4 <__alt_data_end+0xfc0029a4>
 80030a4:	01c1ffc4 	movi	r7,2047
 80030a8:	11ffc71e 	bne	r2,r7,8002fc8 <__alt_data_end+0xfc002fc8>
 80030ac:	400b883a 	mov	r5,r8
 80030b0:	3023883a 	mov	r17,r6
 80030b4:	1021883a 	mov	r16,r2
 80030b8:	003e3a06 	br	80029a4 <__alt_data_end+0xfc0029a4>
 80030bc:	10002d26 	beq	r2,zero,8003174 <__adddf3+0x84c>
 80030c0:	4184b03a 	or	r2,r8,r6
 80030c4:	10000e26 	beq	r2,zero,8003100 <__adddf3+0x7d8>
 80030c8:	2804d0fa 	srli	r2,r5,3
 80030cc:	8822d0fa 	srli	r17,r17,3
 80030d0:	280a977a 	slli	r5,r5,29
 80030d4:	10c0022c 	andhi	r3,r2,8
 80030d8:	2c62b03a 	or	r17,r5,r17
 80030dc:	183feb26 	beq	r3,zero,800308c <__alt_data_end+0xfc00308c>
 80030e0:	4008d0fa 	srli	r4,r8,3
 80030e4:	20c0022c 	andhi	r3,r4,8
 80030e8:	183fe81e 	bne	r3,zero,800308c <__alt_data_end+0xfc00308c>
 80030ec:	300cd0fa 	srli	r6,r6,3
 80030f0:	4010977a 	slli	r8,r8,29
 80030f4:	2005883a 	mov	r2,r4
 80030f8:	41a2b03a 	or	r17,r8,r6
 80030fc:	003fe306 	br	800308c <__alt_data_end+0xfc00308c>
 8003100:	0401ffc4 	movi	r16,2047
 8003104:	003e2706 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8003108:	0011883a 	mov	r8,zero
 800310c:	003f8306 	br	8002f1c <__alt_data_end+0xfc002f1c>
 8003110:	193ff804 	addi	r4,r3,-32
 8003114:	02400804 	movi	r9,32
 8003118:	2908d83a 	srl	r4,r5,r4
 800311c:	1a402526 	beq	r3,r9,80031b4 <__adddf3+0x88c>
 8003120:	02401004 	movi	r9,64
 8003124:	48c7c83a 	sub	r3,r9,r3
 8003128:	28ca983a 	sll	r5,r5,r3
 800312c:	2c62b03a 	or	r17,r5,r17
 8003130:	8822c03a 	cmpne	r17,r17,zero
 8003134:	8922b03a 	or	r17,r17,r4
 8003138:	0007883a 	mov	r3,zero
 800313c:	003f2f06 	br	8002dfc <__alt_data_end+0xfc002dfc>
 8003140:	01402034 	movhi	r5,128
 8003144:	0007883a 	mov	r3,zero
 8003148:	297fffc4 	addi	r5,r5,-1
 800314c:	047ffe04 	movi	r17,-8
 8003150:	0401ffc4 	movi	r16,2047
 8003154:	003e7306 	br	8002b24 <__alt_data_end+0xfc002b24>
 8003158:	2c62b03a 	or	r17,r5,r17
 800315c:	8822c03a 	cmpne	r17,r17,zero
 8003160:	0009883a 	mov	r4,zero
 8003164:	003fa506 	br	8002ffc <__alt_data_end+0xfc002ffc>
 8003168:	400b883a 	mov	r5,r8
 800316c:	3023883a 	mov	r17,r6
 8003170:	003e0c06 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8003174:	400b883a 	mov	r5,r8
 8003178:	3023883a 	mov	r17,r6
 800317c:	0401ffc4 	movi	r16,2047
 8003180:	003e0806 	br	80029a4 <__alt_data_end+0xfc0029a4>
 8003184:	21fff804 	addi	r7,r4,-32
 8003188:	02400804 	movi	r9,32
 800318c:	29ced83a 	srl	r7,r5,r7
 8003190:	22400a26 	beq	r4,r9,80031bc <__adddf3+0x894>
 8003194:	02401004 	movi	r9,64
 8003198:	4909c83a 	sub	r4,r9,r4
 800319c:	290a983a 	sll	r5,r5,r4
 80031a0:	2c62b03a 	or	r17,r5,r17
 80031a4:	8822c03a 	cmpne	r17,r17,zero
 80031a8:	89e2b03a 	or	r17,r17,r7
 80031ac:	0009883a 	mov	r4,zero
 80031b0:	003f9206 	br	8002ffc <__alt_data_end+0xfc002ffc>
 80031b4:	000b883a 	mov	r5,zero
 80031b8:	003fdc06 	br	800312c <__alt_data_end+0xfc00312c>
 80031bc:	000b883a 	mov	r5,zero
 80031c0:	003ff706 	br	80031a0 <__alt_data_end+0xfc0031a0>

080031c4 <__gedf2>:
 80031c4:	2804d53a 	srli	r2,r5,20
 80031c8:	3806d53a 	srli	r3,r7,20
 80031cc:	02000434 	movhi	r8,16
 80031d0:	423fffc4 	addi	r8,r8,-1
 80031d4:	0241ffc4 	movi	r9,2047
 80031d8:	1081ffcc 	andi	r2,r2,2047
 80031dc:	2a14703a 	and	r10,r5,r8
 80031e0:	1a46703a 	and	r3,r3,r9
 80031e4:	3a10703a 	and	r8,r7,r8
 80031e8:	280ad7fa 	srli	r5,r5,31
 80031ec:	380ed7fa 	srli	r7,r7,31
 80031f0:	12400b26 	beq	r2,r9,8003220 <__gedf2+0x5c>
 80031f4:	1a401626 	beq	r3,r9,8003250 <__gedf2+0x8c>
 80031f8:	10000c1e 	bne	r2,zero,800322c <__gedf2+0x68>
 80031fc:	5112b03a 	or	r9,r10,r4
 8003200:	4813003a 	cmpeq	r9,r9,zero
 8003204:	4817883a 	mov	r11,r9
 8003208:	18000c1e 	bne	r3,zero,800323c <__gedf2+0x78>
 800320c:	4198b03a 	or	r12,r8,r6
 8003210:	60000a1e 	bne	r12,zero,800323c <__gedf2+0x78>
 8003214:	48001326 	beq	r9,zero,8003264 <__gedf2+0xa0>
 8003218:	0005883a 	mov	r2,zero
 800321c:	f800283a 	ret
 8003220:	5112b03a 	or	r9,r10,r4
 8003224:	4800191e 	bne	r9,zero,800328c <__gedf2+0xc8>
 8003228:	18800926 	beq	r3,r2,8003250 <__gedf2+0x8c>
 800322c:	18000b1e 	bne	r3,zero,800325c <__gedf2+0x98>
 8003230:	4192b03a 	or	r9,r8,r6
 8003234:	0017883a 	mov	r11,zero
 8003238:	48000a26 	beq	r9,zero,8003264 <__gedf2+0xa0>
 800323c:	39c03fcc 	andi	r7,r7,255
 8003240:	58000726 	beq	r11,zero,8003260 <__gedf2+0x9c>
 8003244:	3800081e 	bne	r7,zero,8003268 <__gedf2+0xa4>
 8003248:	00bfffc4 	movi	r2,-1
 800324c:	f800283a 	ret
 8003250:	4192b03a 	or	r9,r8,r6
 8003254:	48000d1e 	bne	r9,zero,800328c <__gedf2+0xc8>
 8003258:	103fe826 	beq	r2,zero,80031fc <__alt_data_end+0xfc0031fc>
 800325c:	39c03fcc 	andi	r7,r7,255
 8003260:	29c00326 	beq	r5,r7,8003270 <__gedf2+0xac>
 8003264:	283ff81e 	bne	r5,zero,8003248 <__alt_data_end+0xfc003248>
 8003268:	00800044 	movi	r2,1
 800326c:	f800283a 	ret
 8003270:	18bffc16 	blt	r3,r2,8003264 <__alt_data_end+0xfc003264>
 8003274:	10c00316 	blt	r2,r3,8003284 <__gedf2+0xc0>
 8003278:	42bffa36 	bltu	r8,r10,8003264 <__alt_data_end+0xfc003264>
 800327c:	52000526 	beq	r10,r8,8003294 <__gedf2+0xd0>
 8003280:	523fe52e 	bgeu	r10,r8,8003218 <__alt_data_end+0xfc003218>
 8003284:	283ff026 	beq	r5,zero,8003248 <__alt_data_end+0xfc003248>
 8003288:	003ff706 	br	8003268 <__alt_data_end+0xfc003268>
 800328c:	00bfff84 	movi	r2,-2
 8003290:	f800283a 	ret
 8003294:	313ff336 	bltu	r6,r4,8003264 <__alt_data_end+0xfc003264>
 8003298:	21bfdf2e 	bgeu	r4,r6,8003218 <__alt_data_end+0xfc003218>
 800329c:	283fea26 	beq	r5,zero,8003248 <__alt_data_end+0xfc003248>
 80032a0:	003ff106 	br	8003268 <__alt_data_end+0xfc003268>

080032a4 <__ledf2>:
 80032a4:	2804d53a 	srli	r2,r5,20
 80032a8:	3810d53a 	srli	r8,r7,20
 80032ac:	00c00434 	movhi	r3,16
 80032b0:	18ffffc4 	addi	r3,r3,-1
 80032b4:	0241ffc4 	movi	r9,2047
 80032b8:	1081ffcc 	andi	r2,r2,2047
 80032bc:	28d4703a 	and	r10,r5,r3
 80032c0:	4250703a 	and	r8,r8,r9
 80032c4:	38c6703a 	and	r3,r7,r3
 80032c8:	280ad7fa 	srli	r5,r5,31
 80032cc:	380ed7fa 	srli	r7,r7,31
 80032d0:	12400b26 	beq	r2,r9,8003300 <__ledf2+0x5c>
 80032d4:	42401926 	beq	r8,r9,800333c <__ledf2+0x98>
 80032d8:	10000c1e 	bne	r2,zero,800330c <__ledf2+0x68>
 80032dc:	5112b03a 	or	r9,r10,r4
 80032e0:	4813003a 	cmpeq	r9,r9,zero
 80032e4:	4817883a 	mov	r11,r9
 80032e8:	40000f26 	beq	r8,zero,8003328 <__ledf2+0x84>
 80032ec:	39c03fcc 	andi	r7,r7,255
 80032f0:	58001826 	beq	r11,zero,8003354 <__ledf2+0xb0>
 80032f4:	38000a1e 	bne	r7,zero,8003320 <__ledf2+0x7c>
 80032f8:	00bfffc4 	movi	r2,-1
 80032fc:	f800283a 	ret
 8003300:	5112b03a 	or	r9,r10,r4
 8003304:	48000f1e 	bne	r9,zero,8003344 <__ledf2+0xa0>
 8003308:	40800c26 	beq	r8,r2,800333c <__ledf2+0x98>
 800330c:	4000101e 	bne	r8,zero,8003350 <__ledf2+0xac>
 8003310:	1992b03a 	or	r9,r3,r6
 8003314:	0017883a 	mov	r11,zero
 8003318:	483ff41e 	bne	r9,zero,80032ec <__alt_data_end+0xfc0032ec>
 800331c:	283ff61e 	bne	r5,zero,80032f8 <__alt_data_end+0xfc0032f8>
 8003320:	00800044 	movi	r2,1
 8003324:	f800283a 	ret
 8003328:	1998b03a 	or	r12,r3,r6
 800332c:	603fef1e 	bne	r12,zero,80032ec <__alt_data_end+0xfc0032ec>
 8003330:	483ffa26 	beq	r9,zero,800331c <__alt_data_end+0xfc00331c>
 8003334:	0005883a 	mov	r2,zero
 8003338:	f800283a 	ret
 800333c:	1992b03a 	or	r9,r3,r6
 8003340:	48000226 	beq	r9,zero,800334c <__ledf2+0xa8>
 8003344:	00800084 	movi	r2,2
 8003348:	f800283a 	ret
 800334c:	103fe326 	beq	r2,zero,80032dc <__alt_data_end+0xfc0032dc>
 8003350:	39c03fcc 	andi	r7,r7,255
 8003354:	29fff11e 	bne	r5,r7,800331c <__alt_data_end+0xfc00331c>
 8003358:	40bff016 	blt	r8,r2,800331c <__alt_data_end+0xfc00331c>
 800335c:	12000316 	blt	r2,r8,800336c <__ledf2+0xc8>
 8003360:	1abfee36 	bltu	r3,r10,800331c <__alt_data_end+0xfc00331c>
 8003364:	50c00326 	beq	r10,r3,8003374 <__ledf2+0xd0>
 8003368:	50fff22e 	bgeu	r10,r3,8003334 <__alt_data_end+0xfc003334>
 800336c:	283fe226 	beq	r5,zero,80032f8 <__alt_data_end+0xfc0032f8>
 8003370:	003feb06 	br	8003320 <__alt_data_end+0xfc003320>
 8003374:	313fe936 	bltu	r6,r4,800331c <__alt_data_end+0xfc00331c>
 8003378:	21bfee2e 	bgeu	r4,r6,8003334 <__alt_data_end+0xfc003334>
 800337c:	283fde26 	beq	r5,zero,80032f8 <__alt_data_end+0xfc0032f8>
 8003380:	003fe706 	br	8003320 <__alt_data_end+0xfc003320>

08003384 <__fixdfsi>:
 8003384:	2806d53a 	srli	r3,r5,20
 8003388:	00800434 	movhi	r2,16
 800338c:	10bfffc4 	addi	r2,r2,-1
 8003390:	18c1ffcc 	andi	r3,r3,2047
 8003394:	0180ff84 	movi	r6,1022
 8003398:	2884703a 	and	r2,r5,r2
 800339c:	280ad7fa 	srli	r5,r5,31
 80033a0:	30c0130e 	bge	r6,r3,80033f0 <__fixdfsi+0x6c>
 80033a4:	01810744 	movi	r6,1053
 80033a8:	30c00d16 	blt	r6,r3,80033e0 <__fixdfsi+0x5c>
 80033ac:	01810cc4 	movi	r6,1075
 80033b0:	30cdc83a 	sub	r6,r6,r3
 80033b4:	01c007c4 	movi	r7,31
 80033b8:	10800434 	orhi	r2,r2,16
 80033bc:	39800e0e 	bge	r7,r6,80033f8 <__fixdfsi+0x74>
 80033c0:	010104c4 	movi	r4,1043
 80033c4:	20c7c83a 	sub	r3,r4,r3
 80033c8:	10c6d83a 	srl	r3,r2,r3
 80033cc:	29403fcc 	andi	r5,r5,255
 80033d0:	0145c83a 	sub	r2,zero,r5
 80033d4:	1884f03a 	xor	r2,r3,r2
 80033d8:	1145883a 	add	r2,r2,r5
 80033dc:	f800283a 	ret
 80033e0:	00a00034 	movhi	r2,32768
 80033e4:	10bfffc4 	addi	r2,r2,-1
 80033e8:	2885883a 	add	r2,r5,r2
 80033ec:	f800283a 	ret
 80033f0:	0005883a 	mov	r2,zero
 80033f4:	f800283a 	ret
 80033f8:	18fefb44 	addi	r3,r3,-1043
 80033fc:	2188d83a 	srl	r4,r4,r6
 8003400:	10c6983a 	sll	r3,r2,r3
 8003404:	20c6b03a 	or	r3,r4,r3
 8003408:	003ff006 	br	80033cc <__alt_data_end+0xfc0033cc>

0800340c <__floatsidf>:
 800340c:	defffd04 	addi	sp,sp,-12
 8003410:	dc400115 	stw	r17,4(sp)
 8003414:	dfc00215 	stw	ra,8(sp)
 8003418:	dc000015 	stw	r16,0(sp)
 800341c:	2023883a 	mov	r17,r4
 8003420:	20001426 	beq	r4,zero,8003474 <__floatsidf+0x68>
 8003424:	2020d7fa 	srli	r16,r4,31
 8003428:	80000126 	beq	r16,zero,8003430 <__floatsidf+0x24>
 800342c:	0123c83a 	sub	r17,zero,r4
 8003430:	8809883a 	mov	r4,r17
 8003434:	80034dc0 	call	80034dc <__clzsi2>
 8003438:	01410784 	movi	r5,1054
 800343c:	00c00284 	movi	r3,10
 8003440:	288bc83a 	sub	r5,r5,r2
 8003444:	18801c16 	blt	r3,r2,80034b8 <__floatsidf+0xac>
 8003448:	00c002c4 	movi	r3,11
 800344c:	1887c83a 	sub	r3,r3,r2
 8003450:	88c8d83a 	srl	r4,r17,r3
 8003454:	00c00434 	movhi	r3,16
 8003458:	18ffffc4 	addi	r3,r3,-1
 800345c:	10800544 	addi	r2,r2,21
 8003460:	20c8703a 	and	r4,r4,r3
 8003464:	8884983a 	sll	r2,r17,r2
 8003468:	28c1ffcc 	andi	r3,r5,2047
 800346c:	800d883a 	mov	r6,r16
 8003470:	00000406 	br	8003484 <__floatsidf+0x78>
 8003474:	000d883a 	mov	r6,zero
 8003478:	0007883a 	mov	r3,zero
 800347c:	0009883a 	mov	r4,zero
 8003480:	0005883a 	mov	r2,zero
 8003484:	180a953a 	slli	r5,r3,20
 8003488:	31803fcc 	andi	r6,r6,255
 800348c:	00c00434 	movhi	r3,16
 8003490:	300c97fa 	slli	r6,r6,31
 8003494:	18ffffc4 	addi	r3,r3,-1
 8003498:	20c6703a 	and	r3,r4,r3
 800349c:	1946b03a 	or	r3,r3,r5
 80034a0:	1986b03a 	or	r3,r3,r6
 80034a4:	dfc00217 	ldw	ra,8(sp)
 80034a8:	dc400117 	ldw	r17,4(sp)
 80034ac:	dc000017 	ldw	r16,0(sp)
 80034b0:	dec00304 	addi	sp,sp,12
 80034b4:	f800283a 	ret
 80034b8:	10fffd44 	addi	r3,r2,-11
 80034bc:	88c8983a 	sll	r4,r17,r3
 80034c0:	00800434 	movhi	r2,16
 80034c4:	10bfffc4 	addi	r2,r2,-1
 80034c8:	2088703a 	and	r4,r4,r2
 80034cc:	28c1ffcc 	andi	r3,r5,2047
 80034d0:	800d883a 	mov	r6,r16
 80034d4:	0005883a 	mov	r2,zero
 80034d8:	003fea06 	br	8003484 <__alt_data_end+0xfc003484>

080034dc <__clzsi2>:
 80034dc:	00bfffd4 	movui	r2,65535
 80034e0:	11000b36 	bltu	r2,r4,8003510 <__clzsi2+0x34>
 80034e4:	00803fc4 	movi	r2,255
 80034e8:	1100122e 	bgeu	r2,r4,8003534 <__clzsi2+0x58>
 80034ec:	00c00204 	movi	r3,8
 80034f0:	01400604 	movi	r5,24
 80034f4:	20c8d83a 	srl	r4,r4,r3
 80034f8:	008200b4 	movhi	r2,2050
 80034fc:	10bd6004 	addi	r2,r2,-2688
 8003500:	1109883a 	add	r4,r2,r4
 8003504:	20800003 	ldbu	r2,0(r4)
 8003508:	2885c83a 	sub	r2,r5,r2
 800350c:	f800283a 	ret
 8003510:	00804034 	movhi	r2,256
 8003514:	10bfffc4 	addi	r2,r2,-1
 8003518:	11000336 	bltu	r2,r4,8003528 <__clzsi2+0x4c>
 800351c:	00c00404 	movi	r3,16
 8003520:	180b883a 	mov	r5,r3
 8003524:	003ff306 	br	80034f4 <__alt_data_end+0xfc0034f4>
 8003528:	00c00604 	movi	r3,24
 800352c:	01400204 	movi	r5,8
 8003530:	003ff006 	br	80034f4 <__alt_data_end+0xfc0034f4>
 8003534:	0007883a 	mov	r3,zero
 8003538:	01400804 	movi	r5,32
 800353c:	003fed06 	br	80034f4 <__alt_data_end+0xfc0034f4>

08003540 <_printf_r>:
 8003540:	defffd04 	addi	sp,sp,-12
 8003544:	dfc00015 	stw	ra,0(sp)
 8003548:	d9800115 	stw	r6,4(sp)
 800354c:	d9c00215 	stw	r7,8(sp)
 8003550:	280d883a 	mov	r6,r5
 8003554:	21400217 	ldw	r5,8(r4)
 8003558:	d9c00104 	addi	r7,sp,4
 800355c:	80057800 	call	8005780 <___vfprintf_internal_r>
 8003560:	dfc00017 	ldw	ra,0(sp)
 8003564:	dec00304 	addi	sp,sp,12
 8003568:	f800283a 	ret

0800356c <printf>:
 800356c:	defffc04 	addi	sp,sp,-16
 8003570:	dfc00015 	stw	ra,0(sp)
 8003574:	d9400115 	stw	r5,4(sp)
 8003578:	d9800215 	stw	r6,8(sp)
 800357c:	d9c00315 	stw	r7,12(sp)
 8003580:	008200b4 	movhi	r2,2050
 8003584:	1084ed04 	addi	r2,r2,5044
 8003588:	10800017 	ldw	r2,0(r2)
 800358c:	200b883a 	mov	r5,r4
 8003590:	d9800104 	addi	r6,sp,4
 8003594:	11000217 	ldw	r4,8(r2)
 8003598:	800777c0 	call	800777c <__vfprintf_internal>
 800359c:	dfc00017 	ldw	ra,0(sp)
 80035a0:	dec00404 	addi	sp,sp,16
 80035a4:	f800283a 	ret

080035a8 <_putchar_r>:
 80035a8:	21800217 	ldw	r6,8(r4)
 80035ac:	800c0841 	jmpi	800c084 <_putc_r>

080035b0 <putchar>:
 80035b0:	008200b4 	movhi	r2,2050
 80035b4:	1084ed04 	addi	r2,r2,5044
 80035b8:	200b883a 	mov	r5,r4
 80035bc:	11000017 	ldw	r4,0(r2)
 80035c0:	21800217 	ldw	r6,8(r4)
 80035c4:	800c0841 	jmpi	800c084 <_putc_r>

080035c8 <_puts_r>:
 80035c8:	defff604 	addi	sp,sp,-40
 80035cc:	dc000715 	stw	r16,28(sp)
 80035d0:	2021883a 	mov	r16,r4
 80035d4:	2809883a 	mov	r4,r5
 80035d8:	dc400815 	stw	r17,32(sp)
 80035dc:	dfc00915 	stw	ra,36(sp)
 80035e0:	2823883a 	mov	r17,r5
 80035e4:	80037580 	call	8003758 <strlen>
 80035e8:	00c200b4 	movhi	r3,2050
 80035ec:	18c4ed04 	addi	r3,r3,5044
 80035f0:	18c00017 	ldw	r3,0(r3)
 80035f4:	11000044 	addi	r4,r2,1
 80035f8:	d8800115 	stw	r2,4(sp)
 80035fc:	18c00217 	ldw	r3,8(r3)
 8003600:	014200b4 	movhi	r5,2050
 8003604:	297da004 	addi	r5,r5,-2432
 8003608:	1880030b 	ldhu	r2,12(r3)
 800360c:	d9400215 	stw	r5,8(sp)
 8003610:	d9000615 	stw	r4,24(sp)
 8003614:	01400044 	movi	r5,1
 8003618:	01000084 	movi	r4,2
 800361c:	d9000515 	stw	r4,20(sp)
 8003620:	dc400015 	stw	r17,0(sp)
 8003624:	d9400315 	stw	r5,12(sp)
 8003628:	dec00415 	stw	sp,16(sp)
 800362c:	1108000c 	andi	r4,r2,8192
 8003630:	2000061e 	bne	r4,zero,800364c <_puts_r+0x84>
 8003634:	19401917 	ldw	r5,100(r3)
 8003638:	0137ffc4 	movi	r4,-8193
 800363c:	10880014 	ori	r2,r2,8192
 8003640:	2908703a 	and	r4,r5,r4
 8003644:	1880030d 	sth	r2,12(r3)
 8003648:	19001915 	stw	r4,100(r3)
 800364c:	81400217 	ldw	r5,8(r16)
 8003650:	8009883a 	mov	r4,r16
 8003654:	d9800404 	addi	r6,sp,16
 8003658:	8009c040 	call	8009c04 <__sfvwrite_r>
 800365c:	1000061e 	bne	r2,zero,8003678 <_puts_r+0xb0>
 8003660:	00800284 	movi	r2,10
 8003664:	dfc00917 	ldw	ra,36(sp)
 8003668:	dc400817 	ldw	r17,32(sp)
 800366c:	dc000717 	ldw	r16,28(sp)
 8003670:	dec00a04 	addi	sp,sp,40
 8003674:	f800283a 	ret
 8003678:	00bfffc4 	movi	r2,-1
 800367c:	003ff906 	br	8003664 <__alt_data_end+0xfc003664>

08003680 <puts>:
 8003680:	008200b4 	movhi	r2,2050
 8003684:	1084ed04 	addi	r2,r2,5044
 8003688:	200b883a 	mov	r5,r4
 800368c:	11000017 	ldw	r4,0(r2)
 8003690:	80035c81 	jmpi	80035c8 <_puts_r>

08003694 <_sprintf_r>:
 8003694:	deffe404 	addi	sp,sp,-112
 8003698:	2807883a 	mov	r3,r5
 800369c:	dfc01a15 	stw	ra,104(sp)
 80036a0:	d9c01b15 	stw	r7,108(sp)
 80036a4:	00a00034 	movhi	r2,32768
 80036a8:	10bfffc4 	addi	r2,r2,-1
 80036ac:	02008204 	movi	r8,520
 80036b0:	d8800215 	stw	r2,8(sp)
 80036b4:	d8800515 	stw	r2,20(sp)
 80036b8:	d80b883a 	mov	r5,sp
 80036bc:	d9c01b04 	addi	r7,sp,108
 80036c0:	00bfffc4 	movi	r2,-1
 80036c4:	d8c00015 	stw	r3,0(sp)
 80036c8:	d8c00415 	stw	r3,16(sp)
 80036cc:	da00030d 	sth	r8,12(sp)
 80036d0:	d880038d 	sth	r2,14(sp)
 80036d4:	80037f00 	call	80037f0 <___svfprintf_internal_r>
 80036d8:	d8c00017 	ldw	r3,0(sp)
 80036dc:	18000005 	stb	zero,0(r3)
 80036e0:	dfc01a17 	ldw	ra,104(sp)
 80036e4:	dec01c04 	addi	sp,sp,112
 80036e8:	f800283a 	ret

080036ec <sprintf>:
 80036ec:	deffe304 	addi	sp,sp,-116
 80036f0:	2007883a 	mov	r3,r4
 80036f4:	dfc01a15 	stw	ra,104(sp)
 80036f8:	d9801b15 	stw	r6,108(sp)
 80036fc:	d9c01c15 	stw	r7,112(sp)
 8003700:	010200b4 	movhi	r4,2050
 8003704:	2104ed04 	addi	r4,r4,5044
 8003708:	21000017 	ldw	r4,0(r4)
 800370c:	00a00034 	movhi	r2,32768
 8003710:	10bfffc4 	addi	r2,r2,-1
 8003714:	280d883a 	mov	r6,r5
 8003718:	02008204 	movi	r8,520
 800371c:	d8800215 	stw	r2,8(sp)
 8003720:	d8800515 	stw	r2,20(sp)
 8003724:	d80b883a 	mov	r5,sp
 8003728:	d9c01b04 	addi	r7,sp,108
 800372c:	00bfffc4 	movi	r2,-1
 8003730:	d8c00015 	stw	r3,0(sp)
 8003734:	d8c00415 	stw	r3,16(sp)
 8003738:	da00030d 	sth	r8,12(sp)
 800373c:	d880038d 	sth	r2,14(sp)
 8003740:	80037f00 	call	80037f0 <___svfprintf_internal_r>
 8003744:	d8c00017 	ldw	r3,0(sp)
 8003748:	18000005 	stb	zero,0(r3)
 800374c:	dfc01a17 	ldw	ra,104(sp)
 8003750:	dec01d04 	addi	sp,sp,116
 8003754:	f800283a 	ret

08003758 <strlen>:
 8003758:	208000cc 	andi	r2,r4,3
 800375c:	10002026 	beq	r2,zero,80037e0 <strlen+0x88>
 8003760:	20800007 	ldb	r2,0(r4)
 8003764:	10002026 	beq	r2,zero,80037e8 <strlen+0x90>
 8003768:	2005883a 	mov	r2,r4
 800376c:	00000206 	br	8003778 <strlen+0x20>
 8003770:	10c00007 	ldb	r3,0(r2)
 8003774:	18001826 	beq	r3,zero,80037d8 <strlen+0x80>
 8003778:	10800044 	addi	r2,r2,1
 800377c:	10c000cc 	andi	r3,r2,3
 8003780:	183ffb1e 	bne	r3,zero,8003770 <__alt_data_end+0xfc003770>
 8003784:	10c00017 	ldw	r3,0(r2)
 8003788:	01ffbff4 	movhi	r7,65279
 800378c:	39ffbfc4 	addi	r7,r7,-257
 8003790:	00ca303a 	nor	r5,zero,r3
 8003794:	01a02074 	movhi	r6,32897
 8003798:	19c7883a 	add	r3,r3,r7
 800379c:	31a02004 	addi	r6,r6,-32640
 80037a0:	1946703a 	and	r3,r3,r5
 80037a4:	1986703a 	and	r3,r3,r6
 80037a8:	1800091e 	bne	r3,zero,80037d0 <strlen+0x78>
 80037ac:	10800104 	addi	r2,r2,4
 80037b0:	10c00017 	ldw	r3,0(r2)
 80037b4:	19cb883a 	add	r5,r3,r7
 80037b8:	00c6303a 	nor	r3,zero,r3
 80037bc:	28c6703a 	and	r3,r5,r3
 80037c0:	1986703a 	and	r3,r3,r6
 80037c4:	183ff926 	beq	r3,zero,80037ac <__alt_data_end+0xfc0037ac>
 80037c8:	00000106 	br	80037d0 <strlen+0x78>
 80037cc:	10800044 	addi	r2,r2,1
 80037d0:	10c00007 	ldb	r3,0(r2)
 80037d4:	183ffd1e 	bne	r3,zero,80037cc <__alt_data_end+0xfc0037cc>
 80037d8:	1105c83a 	sub	r2,r2,r4
 80037dc:	f800283a 	ret
 80037e0:	2005883a 	mov	r2,r4
 80037e4:	003fe706 	br	8003784 <__alt_data_end+0xfc003784>
 80037e8:	0005883a 	mov	r2,zero
 80037ec:	f800283a 	ret

080037f0 <___svfprintf_internal_r>:
 80037f0:	deffb504 	addi	sp,sp,-300
 80037f4:	dfc04a15 	stw	ra,296(sp)
 80037f8:	ddc04815 	stw	r23,288(sp)
 80037fc:	d9002f15 	stw	r4,188(sp)
 8003800:	282f883a 	mov	r23,r5
 8003804:	d9802915 	stw	r6,164(sp)
 8003808:	d9c02d15 	stw	r7,180(sp)
 800380c:	df004915 	stw	fp,292(sp)
 8003810:	dd804715 	stw	r22,284(sp)
 8003814:	dd404615 	stw	r21,280(sp)
 8003818:	dd004515 	stw	r20,276(sp)
 800381c:	dcc04415 	stw	r19,272(sp)
 8003820:	dc804315 	stw	r18,268(sp)
 8003824:	dc404215 	stw	r17,264(sp)
 8003828:	dc004115 	stw	r16,260(sp)
 800382c:	800a2c40 	call	800a2c4 <_localeconv_r>
 8003830:	10800017 	ldw	r2,0(r2)
 8003834:	1009883a 	mov	r4,r2
 8003838:	d8803515 	stw	r2,212(sp)
 800383c:	80037580 	call	8003758 <strlen>
 8003840:	d8803915 	stw	r2,228(sp)
 8003844:	b880030b 	ldhu	r2,12(r23)
 8003848:	1080200c 	andi	r2,r2,128
 800384c:	10000226 	beq	r2,zero,8003858 <___svfprintf_internal_r+0x68>
 8003850:	b8800417 	ldw	r2,16(r23)
 8003854:	10065d26 	beq	r2,zero,80051cc <___svfprintf_internal_r+0x19dc>
 8003858:	db001dc4 	addi	r12,sp,119
 800385c:	dd801e04 	addi	r22,sp,120
 8003860:	d8800404 	addi	r2,sp,16
 8003864:	050200b4 	movhi	r20,2050
 8003868:	b317c83a 	sub	r11,r22,r12
 800386c:	a53db184 	addi	r20,r20,-2362
 8003870:	db002815 	stw	r12,160(sp)
 8003874:	d8801e15 	stw	r2,120(sp)
 8003878:	d8002015 	stw	zero,128(sp)
 800387c:	d8001f15 	stw	zero,124(sp)
 8003880:	d8003315 	stw	zero,204(sp)
 8003884:	d8003715 	stw	zero,220(sp)
 8003888:	d8003815 	stw	zero,224(sp)
 800388c:	d8003b15 	stw	zero,236(sp)
 8003890:	d8003a15 	stw	zero,232(sp)
 8003894:	d8003015 	stw	zero,192(sp)
 8003898:	1011883a 	mov	r8,r2
 800389c:	dac03d15 	stw	r11,244(sp)
 80038a0:	db002917 	ldw	r12,164(sp)
 80038a4:	60800007 	ldb	r2,0(r12)
 80038a8:	1000ab26 	beq	r2,zero,8003b58 <___svfprintf_internal_r+0x368>
 80038ac:	00c00944 	movi	r3,37
 80038b0:	10c0a926 	beq	r2,r3,8003b58 <___svfprintf_internal_r+0x368>
 80038b4:	6021883a 	mov	r16,r12
 80038b8:	00000106 	br	80038c0 <___svfprintf_internal_r+0xd0>
 80038bc:	10c08426 	beq	r2,r3,8003ad0 <___svfprintf_internal_r+0x2e0>
 80038c0:	84000044 	addi	r16,r16,1
 80038c4:	80800007 	ldb	r2,0(r16)
 80038c8:	103ffc1e 	bne	r2,zero,80038bc <__alt_data_end+0xfc0038bc>
 80038cc:	dac02917 	ldw	r11,164(sp)
 80038d0:	82e3c83a 	sub	r17,r16,r11
 80038d4:	88000f26 	beq	r17,zero,8003914 <___svfprintf_internal_r+0x124>
 80038d8:	d8c02017 	ldw	r3,128(sp)
 80038dc:	d8801f17 	ldw	r2,124(sp)
 80038e0:	dac02917 	ldw	r11,164(sp)
 80038e4:	1c47883a 	add	r3,r3,r17
 80038e8:	10800044 	addi	r2,r2,1
 80038ec:	d8c02015 	stw	r3,128(sp)
 80038f0:	42c00015 	stw	r11,0(r8)
 80038f4:	44400115 	stw	r17,4(r8)
 80038f8:	d8801f15 	stw	r2,124(sp)
 80038fc:	00c001c4 	movi	r3,7
 8003900:	18807616 	blt	r3,r2,8003adc <___svfprintf_internal_r+0x2ec>
 8003904:	42000204 	addi	r8,r8,8
 8003908:	db003017 	ldw	r12,192(sp)
 800390c:	6459883a 	add	r12,r12,r17
 8003910:	db003015 	stw	r12,192(sp)
 8003914:	80800007 	ldb	r2,0(r16)
 8003918:	10007726 	beq	r2,zero,8003af8 <___svfprintf_internal_r+0x308>
 800391c:	80800044 	addi	r2,r16,1
 8003920:	84000047 	ldb	r16,1(r16)
 8003924:	d8002785 	stb	zero,158(sp)
 8003928:	000d883a 	mov	r6,zero
 800392c:	027fffc4 	movi	r9,-1
 8003930:	d8002e15 	stw	zero,184(sp)
 8003934:	0023883a 	mov	r17,zero
 8003938:	01001604 	movi	r4,88
 800393c:	01400244 	movi	r5,9
 8003940:	02800a84 	movi	r10,42
 8003944:	01c01b04 	movi	r7,108
 8003948:	10c00044 	addi	r3,r2,1
 800394c:	80bff804 	addi	r2,r16,-32
 8003950:	2082e436 	bltu	r4,r2,80044e4 <___svfprintf_internal_r+0xcf4>
 8003954:	100490ba 	slli	r2,r2,2
 8003958:	02c20034 	movhi	r11,2048
 800395c:	5ace5b04 	addi	r11,r11,14700
 8003960:	12c5883a 	add	r2,r2,r11
 8003964:	10800017 	ldw	r2,0(r2)
 8003968:	1000683a 	jmp	r2
 800396c:	0800429c 	xori	zero,at,266
 8003970:	080044e4 	muli	zero,at,275
 8003974:	080044e4 	muli	zero,at,275
 8003978:	0800441c 	xori	zero,at,272
 800397c:	080044e4 	muli	zero,at,275
 8003980:	080044e4 	muli	zero,at,275
 8003984:	080044e4 	muli	zero,at,275
 8003988:	080044e4 	muli	zero,at,275
 800398c:	080044e4 	muli	zero,at,275
 8003990:	080044e4 	muli	zero,at,275
 8003994:	080043e0 	cmpeqi	zero,at,271
 8003998:	0800440c 	andi	zero,at,272
 800399c:	080044e4 	muli	zero,at,275
 80039a0:	08003b60 	cmpeqi	zero,at,237
 80039a4:	08003b70 	cmpltui	zero,at,237
 80039a8:	080044e4 	muli	zero,at,275
 80039ac:	08003bb0 	cmpltui	zero,at,238
 80039b0:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039b4:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039b8:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039bc:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039c0:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039c4:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039c8:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039cc:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039d0:	08003bc0 	call	8003bc <__alt_mem_sdram-0x77ffc44>
 80039d4:	080044e4 	muli	zero,at,275
 80039d8:	080044e4 	muli	zero,at,275
 80039dc:	080044e4 	muli	zero,at,275
 80039e0:	080044e4 	muli	zero,at,275
 80039e4:	080044e4 	muli	zero,at,275
 80039e8:	080044e4 	muli	zero,at,275
 80039ec:	080044e4 	muli	zero,at,275
 80039f0:	080044e4 	muli	zero,at,275
 80039f4:	080044e4 	muli	zero,at,275
 80039f8:	080044e4 	muli	zero,at,275
 80039fc:	08003bf4 	orhi	zero,at,239
 8003a00:	080040e0 	cmpeqi	zero,at,259
 8003a04:	080044e4 	muli	zero,at,275
 8003a08:	080040e0 	cmpeqi	zero,at,259
 8003a0c:	080044e4 	muli	zero,at,275
 8003a10:	080044e4 	muli	zero,at,275
 8003a14:	080044e4 	muli	zero,at,275
 8003a18:	080044e4 	muli	zero,at,275
 8003a1c:	080041cc 	andi	zero,at,263
 8003a20:	080044e4 	muli	zero,at,275
 8003a24:	080044e4 	muli	zero,at,275
 8003a28:	08004074 	orhi	zero,at,257
 8003a2c:	080044e4 	muli	zero,at,275
 8003a30:	080044e4 	muli	zero,at,275
 8003a34:	080044e4 	muli	zero,at,275
 8003a38:	080044e4 	muli	zero,at,275
 8003a3c:	080044e4 	muli	zero,at,275
 8003a40:	080040b0 	cmpltui	zero,at,258
 8003a44:	080044e4 	muli	zero,at,275
 8003a48:	080044e4 	muli	zero,at,275
 8003a4c:	080042bc 	xorhi	zero,at,266
 8003a50:	080044e4 	muli	zero,at,275
 8003a54:	080044e4 	muli	zero,at,275
 8003a58:	080044e4 	muli	zero,at,275
 8003a5c:	080044e4 	muli	zero,at,275
 8003a60:	080044e4 	muli	zero,at,275
 8003a64:	080044e4 	muli	zero,at,275
 8003a68:	080044e4 	muli	zero,at,275
 8003a6c:	080044e4 	muli	zero,at,275
 8003a70:	080044e4 	muli	zero,at,275
 8003a74:	080044e4 	muli	zero,at,275
 8003a78:	080043a0 	cmpeqi	zero,at,270
 8003a7c:	080041dc 	xori	zero,at,263
 8003a80:	080040e0 	cmpeqi	zero,at,259
 8003a84:	080040e0 	cmpeqi	zero,at,259
 8003a88:	080040e0 	cmpeqi	zero,at,259
 8003a8c:	08004244 	addi	zero,at,265
 8003a90:	080041dc 	xori	zero,at,263
 8003a94:	080044e4 	muli	zero,at,275
 8003a98:	080044e4 	muli	zero,at,275
 8003a9c:	08004254 	ori	zero,at,265
 8003aa0:	080044e4 	muli	zero,at,275
 8003aa4:	08004268 	cmpgeui	zero,at,265
 8003aa8:	080044a8 	cmpgeui	zero,at,274
 8003aac:	08004184 	addi	zero,at,262
 8003ab0:	08004390 	cmplti	zero,at,270
 8003ab4:	080044e4 	muli	zero,at,275
 8003ab8:	08004318 	cmpnei	zero,at,268
 8003abc:	080044e4 	muli	zero,at,275
 8003ac0:	0800446c 	andhi	zero,at,273
 8003ac4:	080044e4 	muli	zero,at,275
 8003ac8:	080044e4 	muli	zero,at,275
 8003acc:	0800442c 	andhi	zero,at,272
 8003ad0:	db002917 	ldw	r12,164(sp)
 8003ad4:	8323c83a 	sub	r17,r16,r12
 8003ad8:	003f7e06 	br	80038d4 <__alt_data_end+0xfc0038d4>
 8003adc:	d9002f17 	ldw	r4,188(sp)
 8003ae0:	b80b883a 	mov	r5,r23
 8003ae4:	b00d883a 	mov	r6,r22
 8003ae8:	800ca340 	call	800ca34 <__ssprint_r>
 8003aec:	1000081e 	bne	r2,zero,8003b10 <___svfprintf_internal_r+0x320>
 8003af0:	da000404 	addi	r8,sp,16
 8003af4:	003f8406 	br	8003908 <__alt_data_end+0xfc003908>
 8003af8:	d8802017 	ldw	r2,128(sp)
 8003afc:	10000426 	beq	r2,zero,8003b10 <___svfprintf_internal_r+0x320>
 8003b00:	d9002f17 	ldw	r4,188(sp)
 8003b04:	b80b883a 	mov	r5,r23
 8003b08:	d9801e04 	addi	r6,sp,120
 8003b0c:	800ca340 	call	800ca34 <__ssprint_r>
 8003b10:	b880030b 	ldhu	r2,12(r23)
 8003b14:	1080100c 	andi	r2,r2,64
 8003b18:	10000d1e 	bne	r2,zero,8003b50 <___svfprintf_internal_r+0x360>
 8003b1c:	d8803017 	ldw	r2,192(sp)
 8003b20:	dfc04a17 	ldw	ra,296(sp)
 8003b24:	df004917 	ldw	fp,292(sp)
 8003b28:	ddc04817 	ldw	r23,288(sp)
 8003b2c:	dd804717 	ldw	r22,284(sp)
 8003b30:	dd404617 	ldw	r21,280(sp)
 8003b34:	dd004517 	ldw	r20,276(sp)
 8003b38:	dcc04417 	ldw	r19,272(sp)
 8003b3c:	dc804317 	ldw	r18,268(sp)
 8003b40:	dc404217 	ldw	r17,264(sp)
 8003b44:	dc004117 	ldw	r16,260(sp)
 8003b48:	dec04b04 	addi	sp,sp,300
 8003b4c:	f800283a 	ret
 8003b50:	00bfffc4 	movi	r2,-1
 8003b54:	003ff206 	br	8003b20 <__alt_data_end+0xfc003b20>
 8003b58:	dc002917 	ldw	r16,164(sp)
 8003b5c:	003f6d06 	br	8003914 <__alt_data_end+0xfc003914>
 8003b60:	1805883a 	mov	r2,r3
 8003b64:	8c400114 	ori	r17,r17,4
 8003b68:	1c000007 	ldb	r16,0(r3)
 8003b6c:	003f7606 	br	8003948 <__alt_data_end+0xfc003948>
 8003b70:	1c000007 	ldb	r16,0(r3)
 8003b74:	18800044 	addi	r2,r3,1
 8003b78:	8286e726 	beq	r16,r10,8005718 <___svfprintf_internal_r+0x1f28>
 8003b7c:	82fff404 	addi	r11,r16,-48
 8003b80:	1007883a 	mov	r3,r2
 8003b84:	0013883a 	mov	r9,zero
 8003b88:	2aff7036 	bltu	r5,r11,800394c <__alt_data_end+0xfc00394c>
 8003b8c:	1c000007 	ldb	r16,0(r3)
 8003b90:	4a4002a4 	muli	r9,r9,10
 8003b94:	18c00044 	addi	r3,r3,1
 8003b98:	5a53883a 	add	r9,r11,r9
 8003b9c:	82fff404 	addi	r11,r16,-48
 8003ba0:	2afffa2e 	bgeu	r5,r11,8003b8c <__alt_data_end+0xfc003b8c>
 8003ba4:	483f690e 	bge	r9,zero,800394c <__alt_data_end+0xfc00394c>
 8003ba8:	027fffc4 	movi	r9,-1
 8003bac:	003f6706 	br	800394c <__alt_data_end+0xfc00394c>
 8003bb0:	8c402014 	ori	r17,r17,128
 8003bb4:	1805883a 	mov	r2,r3
 8003bb8:	1c000007 	ldb	r16,0(r3)
 8003bbc:	003f6206 	br	8003948 <__alt_data_end+0xfc003948>
 8003bc0:	1805883a 	mov	r2,r3
 8003bc4:	d8002e15 	stw	zero,184(sp)
 8003bc8:	82fff404 	addi	r11,r16,-48
 8003bcc:	0019883a 	mov	r12,zero
 8003bd0:	14000007 	ldb	r16,0(r2)
 8003bd4:	630002a4 	muli	r12,r12,10
 8003bd8:	18c00044 	addi	r3,r3,1
 8003bdc:	1805883a 	mov	r2,r3
 8003be0:	62d9883a 	add	r12,r12,r11
 8003be4:	82fff404 	addi	r11,r16,-48
 8003be8:	2afff92e 	bgeu	r5,r11,8003bd0 <__alt_data_end+0xfc003bd0>
 8003bec:	db002e15 	stw	r12,184(sp)
 8003bf0:	003f5606 	br	800394c <__alt_data_end+0xfc00394c>
 8003bf4:	8c400414 	ori	r17,r17,16
 8003bf8:	d8c02915 	stw	r3,164(sp)
 8003bfc:	d9802785 	stb	r6,158(sp)
 8003c00:	8880080c 	andi	r2,r17,32
 8003c04:	d8c02d17 	ldw	r3,180(sp)
 8003c08:	10017926 	beq	r2,zero,80041f0 <___svfprintf_internal_r+0xa00>
 8003c0c:	db002d17 	ldw	r12,180(sp)
 8003c10:	18800117 	ldw	r2,4(r3)
 8003c14:	1cc00017 	ldw	r19,0(r3)
 8003c18:	63000204 	addi	r12,r12,8
 8003c1c:	db002d15 	stw	r12,180(sp)
 8003c20:	1039883a 	mov	fp,r2
 8003c24:	10017d16 	blt	r2,zero,800421c <___svfprintf_internal_r+0xa2c>
 8003c28:	dd402783 	ldbu	r21,158(sp)
 8003c2c:	da403215 	stw	r9,200(sp)
 8003c30:	00800044 	movi	r2,1
 8003c34:	9f06b03a 	or	r3,r19,fp
 8003c38:	48000216 	blt	r9,zero,8003c44 <___svfprintf_internal_r+0x454>
 8003c3c:	013fdfc4 	movi	r4,-129
 8003c40:	8922703a 	and	r17,r17,r4
 8003c44:	1802371e 	bne	r3,zero,8004524 <___svfprintf_internal_r+0xd34>
 8003c48:	48034526 	beq	r9,zero,8004960 <___svfprintf_internal_r+0x1170>
 8003c4c:	10803fcc 	andi	r2,r2,255
 8003c50:	00c00044 	movi	r3,1
 8003c54:	10c25826 	beq	r2,r3,80045b8 <___svfprintf_internal_r+0xdc8>
 8003c58:	00c00084 	movi	r3,2
 8003c5c:	10c2db26 	beq	r2,r3,80047cc <___svfprintf_internal_r+0xfdc>
 8003c60:	b007883a 	mov	r3,r22
 8003c64:	9808d0fa 	srli	r4,r19,3
 8003c68:	e00a977a 	slli	r5,fp,29
 8003c6c:	e038d0fa 	srli	fp,fp,3
 8003c70:	9cc001cc 	andi	r19,r19,7
 8003c74:	98800c04 	addi	r2,r19,48
 8003c78:	18ffffc4 	addi	r3,r3,-1
 8003c7c:	2926b03a 	or	r19,r5,r4
 8003c80:	18800005 	stb	r2,0(r3)
 8003c84:	9f08b03a 	or	r4,r19,fp
 8003c88:	203ff61e 	bne	r4,zero,8003c64 <__alt_data_end+0xfc003c64>
 8003c8c:	8900004c 	andi	r4,r17,1
 8003c90:	d8c03115 	stw	r3,196(sp)
 8003c94:	2002db26 	beq	r4,zero,8004804 <___svfprintf_internal_r+0x1014>
 8003c98:	10803fcc 	andi	r2,r2,255
 8003c9c:	1080201c 	xori	r2,r2,128
 8003ca0:	10bfe004 	addi	r2,r2,-128
 8003ca4:	01000c04 	movi	r4,48
 8003ca8:	11056626 	beq	r2,r4,8005244 <___svfprintf_internal_r+0x1a54>
 8003cac:	dac03117 	ldw	r11,196(sp)
 8003cb0:	193fffc5 	stb	r4,-1(r3)
 8003cb4:	5affffc4 	addi	r11,r11,-1
 8003cb8:	dac03115 	stw	r11,196(sp)
 8003cbc:	b2e5c83a 	sub	r18,r22,r11
 8003cc0:	9005883a 	mov	r2,r18
 8003cc4:	9240010e 	bge	r18,r9,8003ccc <___svfprintf_internal_r+0x4dc>
 8003cc8:	4805883a 	mov	r2,r9
 8003ccc:	d8802a15 	stw	r2,168(sp)
 8003cd0:	d8003415 	stw	zero,208(sp)
 8003cd4:	a8803fcc 	andi	r2,r21,255
 8003cd8:	1080201c 	xori	r2,r2,128
 8003cdc:	10bfe004 	addi	r2,r2,-128
 8003ce0:	10000326 	beq	r2,zero,8003cf0 <___svfprintf_internal_r+0x500>
 8003ce4:	d8c02a17 	ldw	r3,168(sp)
 8003ce8:	18c00044 	addi	r3,r3,1
 8003cec:	d8c02a15 	stw	r3,168(sp)
 8003cf0:	8ac0008c 	andi	r11,r17,2
 8003cf4:	dac02b15 	stw	r11,172(sp)
 8003cf8:	58000326 	beq	r11,zero,8003d08 <___svfprintf_internal_r+0x518>
 8003cfc:	db002a17 	ldw	r12,168(sp)
 8003d00:	63000084 	addi	r12,r12,2
 8003d04:	db002a15 	stw	r12,168(sp)
 8003d08:	88c0210c 	andi	r3,r17,132
 8003d0c:	d8c02c15 	stw	r3,176(sp)
 8003d10:	1802021e 	bne	r3,zero,800451c <___svfprintf_internal_r+0xd2c>
 8003d14:	dac02e17 	ldw	r11,184(sp)
 8003d18:	db002a17 	ldw	r12,168(sp)
 8003d1c:	5b39c83a 	sub	fp,r11,r12
 8003d20:	0701fe0e 	bge	zero,fp,800451c <___svfprintf_internal_r+0xd2c>
 8003d24:	02400404 	movi	r9,16
 8003d28:	d8c02017 	ldw	r3,128(sp)
 8003d2c:	d8801f17 	ldw	r2,124(sp)
 8003d30:	4f057d0e 	bge	r9,fp,8005328 <___svfprintf_internal_r+0x1b38>
 8003d34:	014200b4 	movhi	r5,2050
 8003d38:	e009883a 	mov	r4,fp
 8003d3c:	297db584 	addi	r5,r5,-2346
 8003d40:	dc003c15 	stw	r16,240(sp)
 8003d44:	9039883a 	mov	fp,r18
 8003d48:	d9403615 	stw	r5,216(sp)
 8003d4c:	8825883a 	mov	r18,r17
 8003d50:	482b883a 	mov	r21,r9
 8003d54:	04c001c4 	movi	r19,7
 8003d58:	dc002f17 	ldw	r16,188(sp)
 8003d5c:	2023883a 	mov	r17,r4
 8003d60:	00000306 	br	8003d70 <___svfprintf_internal_r+0x580>
 8003d64:	8c7ffc04 	addi	r17,r17,-16
 8003d68:	42000204 	addi	r8,r8,8
 8003d6c:	ac40130e 	bge	r21,r17,8003dbc <___svfprintf_internal_r+0x5cc>
 8003d70:	02c200b4 	movhi	r11,2050
 8003d74:	18c00404 	addi	r3,r3,16
 8003d78:	10800044 	addi	r2,r2,1
 8003d7c:	5afdb584 	addi	r11,r11,-2346
 8003d80:	42c00015 	stw	r11,0(r8)
 8003d84:	45400115 	stw	r21,4(r8)
 8003d88:	d8c02015 	stw	r3,128(sp)
 8003d8c:	d8801f15 	stw	r2,124(sp)
 8003d90:	98bff40e 	bge	r19,r2,8003d64 <__alt_data_end+0xfc003d64>
 8003d94:	8009883a 	mov	r4,r16
 8003d98:	b80b883a 	mov	r5,r23
 8003d9c:	b00d883a 	mov	r6,r22
 8003da0:	800ca340 	call	800ca34 <__ssprint_r>
 8003da4:	103f5a1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8003da8:	8c7ffc04 	addi	r17,r17,-16
 8003dac:	d8c02017 	ldw	r3,128(sp)
 8003db0:	d8801f17 	ldw	r2,124(sp)
 8003db4:	da000404 	addi	r8,sp,16
 8003db8:	ac7fed16 	blt	r21,r17,8003d70 <__alt_data_end+0xfc003d70>
 8003dbc:	dc003c17 	ldw	r16,240(sp)
 8003dc0:	8809883a 	mov	r4,r17
 8003dc4:	9023883a 	mov	r17,r18
 8003dc8:	e025883a 	mov	r18,fp
 8003dcc:	2039883a 	mov	fp,r4
 8003dd0:	db003617 	ldw	r12,216(sp)
 8003dd4:	e0c7883a 	add	r3,fp,r3
 8003dd8:	10800044 	addi	r2,r2,1
 8003ddc:	43000015 	stw	r12,0(r8)
 8003de0:	47000115 	stw	fp,4(r8)
 8003de4:	d8c02015 	stw	r3,128(sp)
 8003de8:	d8801f15 	stw	r2,124(sp)
 8003dec:	010001c4 	movi	r4,7
 8003df0:	20833516 	blt	r4,r2,8004ac8 <___svfprintf_internal_r+0x12d8>
 8003df4:	d8802787 	ldb	r2,158(sp)
 8003df8:	42000204 	addi	r8,r8,8
 8003dfc:	10000c26 	beq	r2,zero,8003e30 <___svfprintf_internal_r+0x640>
 8003e00:	d8801f17 	ldw	r2,124(sp)
 8003e04:	d9002784 	addi	r4,sp,158
 8003e08:	18c00044 	addi	r3,r3,1
 8003e0c:	10800044 	addi	r2,r2,1
 8003e10:	41000015 	stw	r4,0(r8)
 8003e14:	01000044 	movi	r4,1
 8003e18:	41000115 	stw	r4,4(r8)
 8003e1c:	d8c02015 	stw	r3,128(sp)
 8003e20:	d8801f15 	stw	r2,124(sp)
 8003e24:	010001c4 	movi	r4,7
 8003e28:	2082df16 	blt	r4,r2,80049a8 <___svfprintf_internal_r+0x11b8>
 8003e2c:	42000204 	addi	r8,r8,8
 8003e30:	dac02b17 	ldw	r11,172(sp)
 8003e34:	58000c26 	beq	r11,zero,8003e68 <___svfprintf_internal_r+0x678>
 8003e38:	d8801f17 	ldw	r2,124(sp)
 8003e3c:	d9002704 	addi	r4,sp,156
 8003e40:	18c00084 	addi	r3,r3,2
 8003e44:	10800044 	addi	r2,r2,1
 8003e48:	41000015 	stw	r4,0(r8)
 8003e4c:	01000084 	movi	r4,2
 8003e50:	41000115 	stw	r4,4(r8)
 8003e54:	d8c02015 	stw	r3,128(sp)
 8003e58:	d8801f15 	stw	r2,124(sp)
 8003e5c:	010001c4 	movi	r4,7
 8003e60:	2082d916 	blt	r4,r2,80049c8 <___svfprintf_internal_r+0x11d8>
 8003e64:	42000204 	addi	r8,r8,8
 8003e68:	db002c17 	ldw	r12,176(sp)
 8003e6c:	00802004 	movi	r2,128
 8003e70:	60822026 	beq	r12,r2,80046f4 <___svfprintf_internal_r+0xf04>
 8003e74:	db003217 	ldw	r12,200(sp)
 8003e78:	64abc83a 	sub	r21,r12,r18
 8003e7c:	0540310e 	bge	zero,r21,8003f44 <___svfprintf_internal_r+0x754>
 8003e80:	07000404 	movi	fp,16
 8003e84:	d8801f17 	ldw	r2,124(sp)
 8003e88:	e544180e 	bge	fp,r21,8004eec <___svfprintf_internal_r+0x16fc>
 8003e8c:	014200b4 	movhi	r5,2050
 8003e90:	a809883a 	mov	r4,r21
 8003e94:	297db184 	addi	r5,r5,-2362
 8003e98:	dc002c15 	stw	r16,176(sp)
 8003e9c:	902b883a 	mov	r21,r18
 8003ea0:	d9402b15 	stw	r5,172(sp)
 8003ea4:	8825883a 	mov	r18,r17
 8003ea8:	04c001c4 	movi	r19,7
 8003eac:	dc002f17 	ldw	r16,188(sp)
 8003eb0:	2023883a 	mov	r17,r4
 8003eb4:	00000306 	br	8003ec4 <___svfprintf_internal_r+0x6d4>
 8003eb8:	8c7ffc04 	addi	r17,r17,-16
 8003ebc:	42000204 	addi	r8,r8,8
 8003ec0:	e440110e 	bge	fp,r17,8003f08 <___svfprintf_internal_r+0x718>
 8003ec4:	18c00404 	addi	r3,r3,16
 8003ec8:	10800044 	addi	r2,r2,1
 8003ecc:	45000015 	stw	r20,0(r8)
 8003ed0:	47000115 	stw	fp,4(r8)
 8003ed4:	d8c02015 	stw	r3,128(sp)
 8003ed8:	d8801f15 	stw	r2,124(sp)
 8003edc:	98bff60e 	bge	r19,r2,8003eb8 <__alt_data_end+0xfc003eb8>
 8003ee0:	8009883a 	mov	r4,r16
 8003ee4:	b80b883a 	mov	r5,r23
 8003ee8:	b00d883a 	mov	r6,r22
 8003eec:	800ca340 	call	800ca34 <__ssprint_r>
 8003ef0:	103f071e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8003ef4:	8c7ffc04 	addi	r17,r17,-16
 8003ef8:	d8c02017 	ldw	r3,128(sp)
 8003efc:	d8801f17 	ldw	r2,124(sp)
 8003f00:	da000404 	addi	r8,sp,16
 8003f04:	e47fef16 	blt	fp,r17,8003ec4 <__alt_data_end+0xfc003ec4>
 8003f08:	dc002c17 	ldw	r16,176(sp)
 8003f0c:	8809883a 	mov	r4,r17
 8003f10:	9023883a 	mov	r17,r18
 8003f14:	a825883a 	mov	r18,r21
 8003f18:	202b883a 	mov	r21,r4
 8003f1c:	dac02b17 	ldw	r11,172(sp)
 8003f20:	1d47883a 	add	r3,r3,r21
 8003f24:	10800044 	addi	r2,r2,1
 8003f28:	42c00015 	stw	r11,0(r8)
 8003f2c:	45400115 	stw	r21,4(r8)
 8003f30:	d8c02015 	stw	r3,128(sp)
 8003f34:	d8801f15 	stw	r2,124(sp)
 8003f38:	010001c4 	movi	r4,7
 8003f3c:	20829216 	blt	r4,r2,8004988 <___svfprintf_internal_r+0x1198>
 8003f40:	42000204 	addi	r8,r8,8
 8003f44:	8880400c 	andi	r2,r17,256
 8003f48:	1001a11e 	bne	r2,zero,80045d0 <___svfprintf_internal_r+0xde0>
 8003f4c:	d8801f17 	ldw	r2,124(sp)
 8003f50:	db003117 	ldw	r12,196(sp)
 8003f54:	1c87883a 	add	r3,r3,r18
 8003f58:	10800044 	addi	r2,r2,1
 8003f5c:	43000015 	stw	r12,0(r8)
 8003f60:	44800115 	stw	r18,4(r8)
 8003f64:	d8c02015 	stw	r3,128(sp)
 8003f68:	d8801f15 	stw	r2,124(sp)
 8003f6c:	010001c4 	movi	r4,7
 8003f70:	20826d16 	blt	r4,r2,8004928 <___svfprintf_internal_r+0x1138>
 8003f74:	42000204 	addi	r8,r8,8
 8003f78:	8c40010c 	andi	r17,r17,4
 8003f7c:	88003226 	beq	r17,zero,8004048 <___svfprintf_internal_r+0x858>
 8003f80:	db002e17 	ldw	r12,184(sp)
 8003f84:	dac02a17 	ldw	r11,168(sp)
 8003f88:	62e1c83a 	sub	r16,r12,r11
 8003f8c:	04002e0e 	bge	zero,r16,8004048 <___svfprintf_internal_r+0x858>
 8003f90:	04400404 	movi	r17,16
 8003f94:	d8801f17 	ldw	r2,124(sp)
 8003f98:	8c05240e 	bge	r17,r16,800542c <___svfprintf_internal_r+0x1c3c>
 8003f9c:	010200b4 	movhi	r4,2050
 8003fa0:	213db584 	addi	r4,r4,-2346
 8003fa4:	d9003615 	stw	r4,216(sp)
 8003fa8:	048001c4 	movi	r18,7
 8003fac:	dcc02f17 	ldw	r19,188(sp)
 8003fb0:	00000306 	br	8003fc0 <___svfprintf_internal_r+0x7d0>
 8003fb4:	843ffc04 	addi	r16,r16,-16
 8003fb8:	42000204 	addi	r8,r8,8
 8003fbc:	8c00130e 	bge	r17,r16,800400c <___svfprintf_internal_r+0x81c>
 8003fc0:	014200b4 	movhi	r5,2050
 8003fc4:	18c00404 	addi	r3,r3,16
 8003fc8:	10800044 	addi	r2,r2,1
 8003fcc:	297db584 	addi	r5,r5,-2346
 8003fd0:	41400015 	stw	r5,0(r8)
 8003fd4:	44400115 	stw	r17,4(r8)
 8003fd8:	d8c02015 	stw	r3,128(sp)
 8003fdc:	d8801f15 	stw	r2,124(sp)
 8003fe0:	90bff40e 	bge	r18,r2,8003fb4 <__alt_data_end+0xfc003fb4>
 8003fe4:	9809883a 	mov	r4,r19
 8003fe8:	b80b883a 	mov	r5,r23
 8003fec:	b00d883a 	mov	r6,r22
 8003ff0:	800ca340 	call	800ca34 <__ssprint_r>
 8003ff4:	103ec61e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8003ff8:	843ffc04 	addi	r16,r16,-16
 8003ffc:	d8c02017 	ldw	r3,128(sp)
 8004000:	d8801f17 	ldw	r2,124(sp)
 8004004:	da000404 	addi	r8,sp,16
 8004008:	8c3fed16 	blt	r17,r16,8003fc0 <__alt_data_end+0xfc003fc0>
 800400c:	dac03617 	ldw	r11,216(sp)
 8004010:	1c07883a 	add	r3,r3,r16
 8004014:	10800044 	addi	r2,r2,1
 8004018:	42c00015 	stw	r11,0(r8)
 800401c:	44000115 	stw	r16,4(r8)
 8004020:	d8c02015 	stw	r3,128(sp)
 8004024:	d8801f15 	stw	r2,124(sp)
 8004028:	010001c4 	movi	r4,7
 800402c:	2080060e 	bge	r4,r2,8004048 <___svfprintf_internal_r+0x858>
 8004030:	d9002f17 	ldw	r4,188(sp)
 8004034:	b80b883a 	mov	r5,r23
 8004038:	b00d883a 	mov	r6,r22
 800403c:	800ca340 	call	800ca34 <__ssprint_r>
 8004040:	103eb31e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004044:	d8c02017 	ldw	r3,128(sp)
 8004048:	d8802a17 	ldw	r2,168(sp)
 800404c:	db002e17 	ldw	r12,184(sp)
 8004050:	1300010e 	bge	r2,r12,8004058 <___svfprintf_internal_r+0x868>
 8004054:	6005883a 	mov	r2,r12
 8004058:	dac03017 	ldw	r11,192(sp)
 800405c:	5897883a 	add	r11,r11,r2
 8004060:	dac03015 	stw	r11,192(sp)
 8004064:	1802381e 	bne	r3,zero,8004948 <___svfprintf_internal_r+0x1158>
 8004068:	d8001f15 	stw	zero,124(sp)
 800406c:	da000404 	addi	r8,sp,16
 8004070:	003e0b06 	br	80038a0 <__alt_data_end+0xfc0038a0>
 8004074:	8c400414 	ori	r17,r17,16
 8004078:	d8c02915 	stw	r3,164(sp)
 800407c:	8880080c 	andi	r2,r17,32
 8004080:	10010c26 	beq	r2,zero,80044b4 <___svfprintf_internal_r+0xcc4>
 8004084:	db002d17 	ldw	r12,180(sp)
 8004088:	0005883a 	mov	r2,zero
 800408c:	64c00017 	ldw	r19,0(r12)
 8004090:	67000117 	ldw	fp,4(r12)
 8004094:	63000204 	addi	r12,r12,8
 8004098:	db002d15 	stw	r12,180(sp)
 800409c:	9f06b03a 	or	r3,r19,fp
 80040a0:	d8002785 	stb	zero,158(sp)
 80040a4:	da403215 	stw	r9,200(sp)
 80040a8:	002b883a 	mov	r21,zero
 80040ac:	003ee206 	br	8003c38 <__alt_data_end+0xfc003c38>
 80040b0:	8c400414 	ori	r17,r17,16
 80040b4:	d8c02915 	stw	r3,164(sp)
 80040b8:	8880080c 	andi	r2,r17,32
 80040bc:	1000ee26 	beq	r2,zero,8004478 <___svfprintf_internal_r+0xc88>
 80040c0:	dac02d17 	ldw	r11,180(sp)
 80040c4:	00800044 	movi	r2,1
 80040c8:	5cc00017 	ldw	r19,0(r11)
 80040cc:	5f000117 	ldw	fp,4(r11)
 80040d0:	5ac00204 	addi	r11,r11,8
 80040d4:	dac02d15 	stw	r11,180(sp)
 80040d8:	9f06b03a 	or	r3,r19,fp
 80040dc:	003ff006 	br	80040a0 <__alt_data_end+0xfc0040a0>
 80040e0:	db002d17 	ldw	r12,180(sp)
 80040e4:	dac02d17 	ldw	r11,180(sp)
 80040e8:	d8c02915 	stw	r3,164(sp)
 80040ec:	63000017 	ldw	r12,0(r12)
 80040f0:	5ac00117 	ldw	r11,4(r11)
 80040f4:	d9802785 	stb	r6,158(sp)
 80040f8:	6009883a 	mov	r4,r12
 80040fc:	580b883a 	mov	r5,r11
 8004100:	db003715 	stw	r12,220(sp)
 8004104:	da004015 	stw	r8,256(sp)
 8004108:	da403f15 	stw	r9,252(sp)
 800410c:	dac03815 	stw	r11,224(sp)
 8004110:	800c78c0 	call	800c78c <__fpclassifyd>
 8004114:	db002d17 	ldw	r12,180(sp)
 8004118:	04800044 	movi	r18,1
 800411c:	da004017 	ldw	r8,256(sp)
 8004120:	64c00204 	addi	r19,r12,8
 8004124:	da403f17 	ldw	r9,252(sp)
 8004128:	d9003717 	ldw	r4,220(sp)
 800412c:	d9403817 	ldw	r5,224(sp)
 8004130:	14832c1e 	bne	r2,r18,8004de4 <___svfprintf_internal_r+0x15f4>
 8004134:	000d883a 	mov	r6,zero
 8004138:	000f883a 	mov	r7,zero
 800413c:	80032a40 	call	80032a4 <__ledf2>
 8004140:	da004017 	ldw	r8,256(sp)
 8004144:	1004c416 	blt	r2,zero,8005458 <___svfprintf_internal_r+0x1c68>
 8004148:	dd402783 	ldbu	r21,158(sp)
 800414c:	008011c4 	movi	r2,71
 8004150:	14041a0e 	bge	r2,r16,80051bc <___svfprintf_internal_r+0x19cc>
 8004154:	00c200b4 	movhi	r3,2050
 8004158:	18fda204 	addi	r3,r3,-2424
 800415c:	d8c03115 	stw	r3,196(sp)
 8004160:	02c000c4 	movi	r11,3
 8004164:	00bfdfc4 	movi	r2,-129
 8004168:	dac02a15 	stw	r11,168(sp)
 800416c:	88a2703a 	and	r17,r17,r2
 8004170:	dcc02d15 	stw	r19,180(sp)
 8004174:	5825883a 	mov	r18,r11
 8004178:	d8003215 	stw	zero,200(sp)
 800417c:	d8003415 	stw	zero,208(sp)
 8004180:	003ed406 	br	8003cd4 <__alt_data_end+0xfc003cd4>
 8004184:	db002d17 	ldw	r12,180(sp)
 8004188:	00800c04 	movi	r2,48
 800418c:	d8802705 	stb	r2,156(sp)
 8004190:	64c00017 	ldw	r19,0(r12)
 8004194:	00801e04 	movi	r2,120
 8004198:	d8802745 	stb	r2,157(sp)
 800419c:	008200b4 	movhi	r2,2050
 80041a0:	10bdaa04 	addi	r2,r2,-2392
 80041a4:	63000104 	addi	r12,r12,4
 80041a8:	d8c02915 	stw	r3,164(sp)
 80041ac:	d8803b15 	stw	r2,236(sp)
 80041b0:	0039883a 	mov	fp,zero
 80041b4:	8c400094 	ori	r17,r17,2
 80041b8:	db002d15 	stw	r12,180(sp)
 80041bc:	00800084 	movi	r2,2
 80041c0:	04001e04 	movi	r16,120
 80041c4:	9807883a 	mov	r3,r19
 80041c8:	003fb506 	br	80040a0 <__alt_data_end+0xfc0040a0>
 80041cc:	8c400214 	ori	r17,r17,8
 80041d0:	1805883a 	mov	r2,r3
 80041d4:	1c000007 	ldb	r16,0(r3)
 80041d8:	003ddb06 	br	8003948 <__alt_data_end+0xfc003948>
 80041dc:	d8c02915 	stw	r3,164(sp)
 80041e0:	d9802785 	stb	r6,158(sp)
 80041e4:	8880080c 	andi	r2,r17,32
 80041e8:	d8c02d17 	ldw	r3,180(sp)
 80041ec:	103e871e 	bne	r2,zero,8003c0c <__alt_data_end+0xfc003c0c>
 80041f0:	8880040c 	andi	r2,r17,16
 80041f4:	10027a1e 	bne	r2,zero,8004be0 <___svfprintf_internal_r+0x13f0>
 80041f8:	8880100c 	andi	r2,r17,64
 80041fc:	10027826 	beq	r2,zero,8004be0 <___svfprintf_internal_r+0x13f0>
 8004200:	1cc0000f 	ldh	r19,0(r3)
 8004204:	db002d17 	ldw	r12,180(sp)
 8004208:	9839d7fa 	srai	fp,r19,31
 800420c:	63000104 	addi	r12,r12,4
 8004210:	db002d15 	stw	r12,180(sp)
 8004214:	e005883a 	mov	r2,fp
 8004218:	103e830e 	bge	r2,zero,8003c28 <__alt_data_end+0xfc003c28>
 800421c:	04e7c83a 	sub	r19,zero,r19
 8004220:	9804c03a 	cmpne	r2,r19,zero
 8004224:	0739c83a 	sub	fp,zero,fp
 8004228:	e0b9c83a 	sub	fp,fp,r2
 800422c:	05400b44 	movi	r21,45
 8004230:	dd402785 	stb	r21,158(sp)
 8004234:	da403215 	stw	r9,200(sp)
 8004238:	00800044 	movi	r2,1
 800423c:	9f06b03a 	or	r3,r19,fp
 8004240:	003e7d06 	br	8003c38 <__alt_data_end+0xfc003c38>
 8004244:	8c401014 	ori	r17,r17,64
 8004248:	1805883a 	mov	r2,r3
 800424c:	1c000007 	ldb	r16,0(r3)
 8004250:	003dbd06 	br	8003948 <__alt_data_end+0xfc003948>
 8004254:	1c000007 	ldb	r16,0(r3)
 8004258:	81c37126 	beq	r16,r7,8005020 <___svfprintf_internal_r+0x1830>
 800425c:	8c400414 	ori	r17,r17,16
 8004260:	1805883a 	mov	r2,r3
 8004264:	003db806 	br	8003948 <__alt_data_end+0xfc003948>
 8004268:	d8c02915 	stw	r3,164(sp)
 800426c:	d9802785 	stb	r6,158(sp)
 8004270:	8880080c 	andi	r2,r17,32
 8004274:	1002f026 	beq	r2,zero,8004e38 <___svfprintf_internal_r+0x1648>
 8004278:	db002d17 	ldw	r12,180(sp)
 800427c:	dac03017 	ldw	r11,192(sp)
 8004280:	60800017 	ldw	r2,0(r12)
 8004284:	5807d7fa 	srai	r3,r11,31
 8004288:	63000104 	addi	r12,r12,4
 800428c:	db002d15 	stw	r12,180(sp)
 8004290:	12c00015 	stw	r11,0(r2)
 8004294:	10c00115 	stw	r3,4(r2)
 8004298:	003d8106 	br	80038a0 <__alt_data_end+0xfc0038a0>
 800429c:	30803fcc 	andi	r2,r6,255
 80042a0:	1080201c 	xori	r2,r2,128
 80042a4:	10bfe004 	addi	r2,r2,-128
 80042a8:	1002fd1e 	bne	r2,zero,8004ea0 <___svfprintf_internal_r+0x16b0>
 80042ac:	1805883a 	mov	r2,r3
 80042b0:	01800804 	movi	r6,32
 80042b4:	1c000007 	ldb	r16,0(r3)
 80042b8:	003da306 	br	8003948 <__alt_data_end+0xfc003948>
 80042bc:	030200b4 	movhi	r12,2050
 80042c0:	633da504 	addi	r12,r12,-2412
 80042c4:	d8c02915 	stw	r3,164(sp)
 80042c8:	d9802785 	stb	r6,158(sp)
 80042cc:	db003b15 	stw	r12,236(sp)
 80042d0:	88c0080c 	andi	r3,r17,32
 80042d4:	d8802d17 	ldw	r2,180(sp)
 80042d8:	18005c26 	beq	r3,zero,800444c <___svfprintf_internal_r+0xc5c>
 80042dc:	dac02d17 	ldw	r11,180(sp)
 80042e0:	14c00017 	ldw	r19,0(r2)
 80042e4:	17000117 	ldw	fp,4(r2)
 80042e8:	5ac00204 	addi	r11,r11,8
 80042ec:	dac02d15 	stw	r11,180(sp)
 80042f0:	8880004c 	andi	r2,r17,1
 80042f4:	10022f26 	beq	r2,zero,8004bb4 <___svfprintf_internal_r+0x13c4>
 80042f8:	9f06b03a 	or	r3,r19,fp
 80042fc:	1802eb26 	beq	r3,zero,8004eac <___svfprintf_internal_r+0x16bc>
 8004300:	00800c04 	movi	r2,48
 8004304:	d8802705 	stb	r2,156(sp)
 8004308:	dc002745 	stb	r16,157(sp)
 800430c:	8c400094 	ori	r17,r17,2
 8004310:	00800084 	movi	r2,2
 8004314:	003f6206 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004318:	dac02d17 	ldw	r11,180(sp)
 800431c:	db002d17 	ldw	r12,180(sp)
 8004320:	d8c02915 	stw	r3,164(sp)
 8004324:	5ac00017 	ldw	r11,0(r11)
 8004328:	d8002785 	stb	zero,158(sp)
 800432c:	64c00104 	addi	r19,r12,4
 8004330:	dac03115 	stw	r11,196(sp)
 8004334:	58042e26 	beq	r11,zero,80053f0 <___svfprintf_internal_r+0x1c00>
 8004338:	d9003117 	ldw	r4,196(sp)
 800433c:	4803c416 	blt	r9,zero,8005250 <___svfprintf_internal_r+0x1a60>
 8004340:	480d883a 	mov	r6,r9
 8004344:	000b883a 	mov	r5,zero
 8004348:	da004015 	stw	r8,256(sp)
 800434c:	da403f15 	stw	r9,252(sp)
 8004350:	800ac580 	call	800ac58 <memchr>
 8004354:	da004017 	ldw	r8,256(sp)
 8004358:	da403f17 	ldw	r9,252(sp)
 800435c:	10048a26 	beq	r2,zero,8005588 <___svfprintf_internal_r+0x1d98>
 8004360:	d8c03117 	ldw	r3,196(sp)
 8004364:	10e5c83a 	sub	r18,r2,r3
 8004368:	4c80010e 	bge	r9,r18,8004370 <___svfprintf_internal_r+0xb80>
 800436c:	4825883a 	mov	r18,r9
 8004370:	9005883a 	mov	r2,r18
 8004374:	9003bb16 	blt	r18,zero,8005264 <___svfprintf_internal_r+0x1a74>
 8004378:	dd402783 	ldbu	r21,158(sp)
 800437c:	d8802a15 	stw	r2,168(sp)
 8004380:	dcc02d15 	stw	r19,180(sp)
 8004384:	d8003215 	stw	zero,200(sp)
 8004388:	d8003415 	stw	zero,208(sp)
 800438c:	003e5106 	br	8003cd4 <__alt_data_end+0xfc003cd4>
 8004390:	8c400814 	ori	r17,r17,32
 8004394:	1805883a 	mov	r2,r3
 8004398:	1c000007 	ldb	r16,0(r3)
 800439c:	003d6a06 	br	8003948 <__alt_data_end+0xfc003948>
 80043a0:	db002d17 	ldw	r12,180(sp)
 80043a4:	d8c02915 	stw	r3,164(sp)
 80043a8:	dac01404 	addi	r11,sp,80
 80043ac:	60800017 	ldw	r2,0(r12)
 80043b0:	00c00044 	movi	r3,1
 80043b4:	63000104 	addi	r12,r12,4
 80043b8:	d8801405 	stb	r2,80(sp)
 80043bc:	d8c02a15 	stw	r3,168(sp)
 80043c0:	d8002785 	stb	zero,158(sp)
 80043c4:	db002d15 	stw	r12,180(sp)
 80043c8:	1825883a 	mov	r18,r3
 80043cc:	d8003215 	stw	zero,200(sp)
 80043d0:	d8003415 	stw	zero,208(sp)
 80043d4:	dac03115 	stw	r11,196(sp)
 80043d8:	0005883a 	mov	r2,zero
 80043dc:	003e4406 	br	8003cf0 <__alt_data_end+0xfc003cf0>
 80043e0:	dac02d17 	ldw	r11,180(sp)
 80043e4:	db002d17 	ldw	r12,180(sp)
 80043e8:	5ac00017 	ldw	r11,0(r11)
 80043ec:	dac02e15 	stw	r11,184(sp)
 80043f0:	62c00104 	addi	r11,r12,4
 80043f4:	db002e17 	ldw	r12,184(sp)
 80043f8:	60030316 	blt	r12,zero,8005008 <___svfprintf_internal_r+0x1818>
 80043fc:	dac02d15 	stw	r11,180(sp)
 8004400:	1805883a 	mov	r2,r3
 8004404:	1c000007 	ldb	r16,0(r3)
 8004408:	003d4f06 	br	8003948 <__alt_data_end+0xfc003948>
 800440c:	1805883a 	mov	r2,r3
 8004410:	01800ac4 	movi	r6,43
 8004414:	1c000007 	ldb	r16,0(r3)
 8004418:	003d4b06 	br	8003948 <__alt_data_end+0xfc003948>
 800441c:	8c400054 	ori	r17,r17,1
 8004420:	1805883a 	mov	r2,r3
 8004424:	1c000007 	ldb	r16,0(r3)
 8004428:	003d4706 	br	8003948 <__alt_data_end+0xfc003948>
 800442c:	008200b4 	movhi	r2,2050
 8004430:	10bdaa04 	addi	r2,r2,-2392
 8004434:	d8c02915 	stw	r3,164(sp)
 8004438:	d8803b15 	stw	r2,236(sp)
 800443c:	d9802785 	stb	r6,158(sp)
 8004440:	88c0080c 	andi	r3,r17,32
 8004444:	d8802d17 	ldw	r2,180(sp)
 8004448:	183fa41e 	bne	r3,zero,80042dc <__alt_data_end+0xfc0042dc>
 800444c:	88c0040c 	andi	r3,r17,16
 8004450:	18028b26 	beq	r3,zero,8004e80 <___svfprintf_internal_r+0x1690>
 8004454:	db002d17 	ldw	r12,180(sp)
 8004458:	14c00017 	ldw	r19,0(r2)
 800445c:	0039883a 	mov	fp,zero
 8004460:	63000104 	addi	r12,r12,4
 8004464:	db002d15 	stw	r12,180(sp)
 8004468:	003fa106 	br	80042f0 <__alt_data_end+0xfc0042f0>
 800446c:	d8c02915 	stw	r3,164(sp)
 8004470:	8880080c 	andi	r2,r17,32
 8004474:	103f121e 	bne	r2,zero,80040c0 <__alt_data_end+0xfc0040c0>
 8004478:	8880040c 	andi	r2,r17,16
 800447c:	1001df1e 	bne	r2,zero,8004bfc <___svfprintf_internal_r+0x140c>
 8004480:	8880100c 	andi	r2,r17,64
 8004484:	1001dd26 	beq	r2,zero,8004bfc <___svfprintf_internal_r+0x140c>
 8004488:	dac02d17 	ldw	r11,180(sp)
 800448c:	0039883a 	mov	fp,zero
 8004490:	00800044 	movi	r2,1
 8004494:	5cc0000b 	ldhu	r19,0(r11)
 8004498:	5ac00104 	addi	r11,r11,4
 800449c:	dac02d15 	stw	r11,180(sp)
 80044a0:	9807883a 	mov	r3,r19
 80044a4:	003efe06 	br	80040a0 <__alt_data_end+0xfc0040a0>
 80044a8:	d8c02915 	stw	r3,164(sp)
 80044ac:	8880080c 	andi	r2,r17,32
 80044b0:	103ef41e 	bne	r2,zero,8004084 <__alt_data_end+0xfc004084>
 80044b4:	8880040c 	andi	r2,r17,16
 80044b8:	1001c11e 	bne	r2,zero,8004bc0 <___svfprintf_internal_r+0x13d0>
 80044bc:	8880100c 	andi	r2,r17,64
 80044c0:	1001bf26 	beq	r2,zero,8004bc0 <___svfprintf_internal_r+0x13d0>
 80044c4:	db002d17 	ldw	r12,180(sp)
 80044c8:	0039883a 	mov	fp,zero
 80044cc:	0005883a 	mov	r2,zero
 80044d0:	64c0000b 	ldhu	r19,0(r12)
 80044d4:	63000104 	addi	r12,r12,4
 80044d8:	db002d15 	stw	r12,180(sp)
 80044dc:	9807883a 	mov	r3,r19
 80044e0:	003eef06 	br	80040a0 <__alt_data_end+0xfc0040a0>
 80044e4:	d8c02915 	stw	r3,164(sp)
 80044e8:	d9802785 	stb	r6,158(sp)
 80044ec:	803d8226 	beq	r16,zero,8003af8 <__alt_data_end+0xfc003af8>
 80044f0:	02c00044 	movi	r11,1
 80044f4:	db001404 	addi	r12,sp,80
 80044f8:	dac02a15 	stw	r11,168(sp)
 80044fc:	dc001405 	stb	r16,80(sp)
 8004500:	d8002785 	stb	zero,158(sp)
 8004504:	5825883a 	mov	r18,r11
 8004508:	d8003215 	stw	zero,200(sp)
 800450c:	d8003415 	stw	zero,208(sp)
 8004510:	db003115 	stw	r12,196(sp)
 8004514:	0005883a 	mov	r2,zero
 8004518:	003df506 	br	8003cf0 <__alt_data_end+0xfc003cf0>
 800451c:	d8c02017 	ldw	r3,128(sp)
 8004520:	003e3606 	br	8003dfc <__alt_data_end+0xfc003dfc>
 8004524:	10803fcc 	andi	r2,r2,255
 8004528:	00c00044 	movi	r3,1
 800452c:	10fdca1e 	bne	r2,r3,8003c58 <__alt_data_end+0xfc003c58>
 8004530:	e000021e 	bne	fp,zero,800453c <___svfprintf_internal_r+0xd4c>
 8004534:	00800244 	movi	r2,9
 8004538:	14c01f2e 	bgeu	r2,r19,80045b8 <___svfprintf_internal_r+0xdc8>
 800453c:	dc002a15 	stw	r16,168(sp)
 8004540:	dc402b15 	stw	r17,172(sp)
 8004544:	9821883a 	mov	r16,r19
 8004548:	e023883a 	mov	r17,fp
 800454c:	b025883a 	mov	r18,r22
 8004550:	4027883a 	mov	r19,r8
 8004554:	4839883a 	mov	fp,r9
 8004558:	8009883a 	mov	r4,r16
 800455c:	880b883a 	mov	r5,r17
 8004560:	01800284 	movi	r6,10
 8004564:	000f883a 	mov	r7,zero
 8004568:	800fff00 	call	800fff0 <__umoddi3>
 800456c:	10800c04 	addi	r2,r2,48
 8004570:	94bfffc4 	addi	r18,r18,-1
 8004574:	8009883a 	mov	r4,r16
 8004578:	880b883a 	mov	r5,r17
 800457c:	01800284 	movi	r6,10
 8004580:	000f883a 	mov	r7,zero
 8004584:	90800005 	stb	r2,0(r18)
 8004588:	800fa300 	call	800fa30 <__udivdi3>
 800458c:	1021883a 	mov	r16,r2
 8004590:	10c4b03a 	or	r2,r2,r3
 8004594:	1823883a 	mov	r17,r3
 8004598:	103fef1e 	bne	r2,zero,8004558 <__alt_data_end+0xfc004558>
 800459c:	dc803115 	stw	r18,196(sp)
 80045a0:	dc002a17 	ldw	r16,168(sp)
 80045a4:	9811883a 	mov	r8,r19
 80045a8:	dc402b17 	ldw	r17,172(sp)
 80045ac:	e013883a 	mov	r9,fp
 80045b0:	b4a5c83a 	sub	r18,r22,r18
 80045b4:	003dc206 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 80045b8:	9cc00c04 	addi	r19,r19,48
 80045bc:	db001dc4 	addi	r12,sp,119
 80045c0:	dcc01dc5 	stb	r19,119(sp)
 80045c4:	dc803d17 	ldw	r18,244(sp)
 80045c8:	db003115 	stw	r12,196(sp)
 80045cc:	003dbc06 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 80045d0:	00801944 	movi	r2,101
 80045d4:	14008d0e 	bge	r2,r16,800480c <___svfprintf_internal_r+0x101c>
 80045d8:	d9003717 	ldw	r4,220(sp)
 80045dc:	d9403817 	ldw	r5,224(sp)
 80045e0:	000d883a 	mov	r6,zero
 80045e4:	000f883a 	mov	r7,zero
 80045e8:	d8c03e15 	stw	r3,248(sp)
 80045ec:	da004015 	stw	r8,256(sp)
 80045f0:	8010f780 	call	8010f78 <__eqdf2>
 80045f4:	d8c03e17 	ldw	r3,248(sp)
 80045f8:	da004017 	ldw	r8,256(sp)
 80045fc:	1000fd1e 	bne	r2,zero,80049f4 <___svfprintf_internal_r+0x1204>
 8004600:	d8801f17 	ldw	r2,124(sp)
 8004604:	010200b4 	movhi	r4,2050
 8004608:	213db104 	addi	r4,r4,-2364
 800460c:	18c00044 	addi	r3,r3,1
 8004610:	10800044 	addi	r2,r2,1
 8004614:	41000015 	stw	r4,0(r8)
 8004618:	01000044 	movi	r4,1
 800461c:	41000115 	stw	r4,4(r8)
 8004620:	d8c02015 	stw	r3,128(sp)
 8004624:	d8801f15 	stw	r2,124(sp)
 8004628:	010001c4 	movi	r4,7
 800462c:	20823316 	blt	r4,r2,8004efc <___svfprintf_internal_r+0x170c>
 8004630:	42000204 	addi	r8,r8,8
 8004634:	d8802617 	ldw	r2,152(sp)
 8004638:	dac03317 	ldw	r11,204(sp)
 800463c:	12c00216 	blt	r2,r11,8004648 <___svfprintf_internal_r+0xe58>
 8004640:	8880004c 	andi	r2,r17,1
 8004644:	103e4c26 	beq	r2,zero,8003f78 <__alt_data_end+0xfc003f78>
 8004648:	db003917 	ldw	r12,228(sp)
 800464c:	d8801f17 	ldw	r2,124(sp)
 8004650:	dac03517 	ldw	r11,212(sp)
 8004654:	1b07883a 	add	r3,r3,r12
 8004658:	10800044 	addi	r2,r2,1
 800465c:	42c00015 	stw	r11,0(r8)
 8004660:	43000115 	stw	r12,4(r8)
 8004664:	d8c02015 	stw	r3,128(sp)
 8004668:	d8801f15 	stw	r2,124(sp)
 800466c:	010001c4 	movi	r4,7
 8004670:	20826f16 	blt	r4,r2,8005030 <___svfprintf_internal_r+0x1840>
 8004674:	42000204 	addi	r8,r8,8
 8004678:	db003317 	ldw	r12,204(sp)
 800467c:	643fffc4 	addi	r16,r12,-1
 8004680:	043e3d0e 	bge	zero,r16,8003f78 <__alt_data_end+0xfc003f78>
 8004684:	04800404 	movi	r18,16
 8004688:	d8801f17 	ldw	r2,124(sp)
 800468c:	94009a0e 	bge	r18,r16,80048f8 <___svfprintf_internal_r+0x1108>
 8004690:	014200b4 	movhi	r5,2050
 8004694:	297db184 	addi	r5,r5,-2362
 8004698:	d9402b15 	stw	r5,172(sp)
 800469c:	054001c4 	movi	r21,7
 80046a0:	dcc02f17 	ldw	r19,188(sp)
 80046a4:	00000306 	br	80046b4 <___svfprintf_internal_r+0xec4>
 80046a8:	42000204 	addi	r8,r8,8
 80046ac:	843ffc04 	addi	r16,r16,-16
 80046b0:	9400940e 	bge	r18,r16,8004904 <___svfprintf_internal_r+0x1114>
 80046b4:	18c00404 	addi	r3,r3,16
 80046b8:	10800044 	addi	r2,r2,1
 80046bc:	45000015 	stw	r20,0(r8)
 80046c0:	44800115 	stw	r18,4(r8)
 80046c4:	d8c02015 	stw	r3,128(sp)
 80046c8:	d8801f15 	stw	r2,124(sp)
 80046cc:	a8bff60e 	bge	r21,r2,80046a8 <__alt_data_end+0xfc0046a8>
 80046d0:	9809883a 	mov	r4,r19
 80046d4:	b80b883a 	mov	r5,r23
 80046d8:	b00d883a 	mov	r6,r22
 80046dc:	800ca340 	call	800ca34 <__ssprint_r>
 80046e0:	103d0b1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 80046e4:	d8c02017 	ldw	r3,128(sp)
 80046e8:	d8801f17 	ldw	r2,124(sp)
 80046ec:	da000404 	addi	r8,sp,16
 80046f0:	003fee06 	br	80046ac <__alt_data_end+0xfc0046ac>
 80046f4:	dac02e17 	ldw	r11,184(sp)
 80046f8:	db002a17 	ldw	r12,168(sp)
 80046fc:	5b2bc83a 	sub	r21,r11,r12
 8004700:	057ddc0e 	bge	zero,r21,8003e74 <__alt_data_end+0xfc003e74>
 8004704:	07000404 	movi	fp,16
 8004708:	d8801f17 	ldw	r2,124(sp)
 800470c:	e5435d0e 	bge	fp,r21,8005484 <___svfprintf_internal_r+0x1c94>
 8004710:	014200b4 	movhi	r5,2050
 8004714:	a809883a 	mov	r4,r21
 8004718:	297db184 	addi	r5,r5,-2362
 800471c:	dc002c15 	stw	r16,176(sp)
 8004720:	902b883a 	mov	r21,r18
 8004724:	d9402b15 	stw	r5,172(sp)
 8004728:	8825883a 	mov	r18,r17
 800472c:	04c001c4 	movi	r19,7
 8004730:	dc002f17 	ldw	r16,188(sp)
 8004734:	2023883a 	mov	r17,r4
 8004738:	00000306 	br	8004748 <___svfprintf_internal_r+0xf58>
 800473c:	8c7ffc04 	addi	r17,r17,-16
 8004740:	42000204 	addi	r8,r8,8
 8004744:	e440110e 	bge	fp,r17,800478c <___svfprintf_internal_r+0xf9c>
 8004748:	18c00404 	addi	r3,r3,16
 800474c:	10800044 	addi	r2,r2,1
 8004750:	45000015 	stw	r20,0(r8)
 8004754:	47000115 	stw	fp,4(r8)
 8004758:	d8c02015 	stw	r3,128(sp)
 800475c:	d8801f15 	stw	r2,124(sp)
 8004760:	98bff60e 	bge	r19,r2,800473c <__alt_data_end+0xfc00473c>
 8004764:	8009883a 	mov	r4,r16
 8004768:	b80b883a 	mov	r5,r23
 800476c:	b00d883a 	mov	r6,r22
 8004770:	800ca340 	call	800ca34 <__ssprint_r>
 8004774:	103ce61e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004778:	8c7ffc04 	addi	r17,r17,-16
 800477c:	d8c02017 	ldw	r3,128(sp)
 8004780:	d8801f17 	ldw	r2,124(sp)
 8004784:	da000404 	addi	r8,sp,16
 8004788:	e47fef16 	blt	fp,r17,8004748 <__alt_data_end+0xfc004748>
 800478c:	dc002c17 	ldw	r16,176(sp)
 8004790:	8809883a 	mov	r4,r17
 8004794:	9023883a 	mov	r17,r18
 8004798:	a825883a 	mov	r18,r21
 800479c:	202b883a 	mov	r21,r4
 80047a0:	dac02b17 	ldw	r11,172(sp)
 80047a4:	1d47883a 	add	r3,r3,r21
 80047a8:	10800044 	addi	r2,r2,1
 80047ac:	42c00015 	stw	r11,0(r8)
 80047b0:	45400115 	stw	r21,4(r8)
 80047b4:	d8c02015 	stw	r3,128(sp)
 80047b8:	d8801f15 	stw	r2,124(sp)
 80047bc:	010001c4 	movi	r4,7
 80047c0:	20818016 	blt	r4,r2,8004dc4 <___svfprintf_internal_r+0x15d4>
 80047c4:	42000204 	addi	r8,r8,8
 80047c8:	003daa06 	br	8003e74 <__alt_data_end+0xfc003e74>
 80047cc:	d9403b17 	ldw	r5,236(sp)
 80047d0:	b007883a 	mov	r3,r22
 80047d4:	988003cc 	andi	r2,r19,15
 80047d8:	e008973a 	slli	r4,fp,28
 80047dc:	2885883a 	add	r2,r5,r2
 80047e0:	9826d13a 	srli	r19,r19,4
 80047e4:	10800003 	ldbu	r2,0(r2)
 80047e8:	e038d13a 	srli	fp,fp,4
 80047ec:	18ffffc4 	addi	r3,r3,-1
 80047f0:	24e6b03a 	or	r19,r4,r19
 80047f4:	18800005 	stb	r2,0(r3)
 80047f8:	9f04b03a 	or	r2,r19,fp
 80047fc:	103ff51e 	bne	r2,zero,80047d4 <__alt_data_end+0xfc0047d4>
 8004800:	d8c03115 	stw	r3,196(sp)
 8004804:	b0e5c83a 	sub	r18,r22,r3
 8004808:	003d2d06 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 800480c:	db003317 	ldw	r12,204(sp)
 8004810:	00800044 	movi	r2,1
 8004814:	18c00044 	addi	r3,r3,1
 8004818:	13014b0e 	bge	r2,r12,8004d48 <___svfprintf_internal_r+0x1558>
 800481c:	dc001f17 	ldw	r16,124(sp)
 8004820:	dac03117 	ldw	r11,196(sp)
 8004824:	00800044 	movi	r2,1
 8004828:	84000044 	addi	r16,r16,1
 800482c:	40800115 	stw	r2,4(r8)
 8004830:	42c00015 	stw	r11,0(r8)
 8004834:	d8c02015 	stw	r3,128(sp)
 8004838:	dc001f15 	stw	r16,124(sp)
 800483c:	008001c4 	movi	r2,7
 8004840:	14014e16 	blt	r2,r16,8004d7c <___svfprintf_internal_r+0x158c>
 8004844:	42000204 	addi	r8,r8,8
 8004848:	db003917 	ldw	r12,228(sp)
 800484c:	dac03517 	ldw	r11,212(sp)
 8004850:	84000044 	addi	r16,r16,1
 8004854:	1b07883a 	add	r3,r3,r12
 8004858:	42c00015 	stw	r11,0(r8)
 800485c:	43000115 	stw	r12,4(r8)
 8004860:	d8c02015 	stw	r3,128(sp)
 8004864:	dc001f15 	stw	r16,124(sp)
 8004868:	008001c4 	movi	r2,7
 800486c:	14014c16 	blt	r2,r16,8004da0 <___svfprintf_internal_r+0x15b0>
 8004870:	44800204 	addi	r18,r8,8
 8004874:	d9003717 	ldw	r4,220(sp)
 8004878:	d9403817 	ldw	r5,224(sp)
 800487c:	000d883a 	mov	r6,zero
 8004880:	000f883a 	mov	r7,zero
 8004884:	d8c03e15 	stw	r3,248(sp)
 8004888:	8010f780 	call	8010f78 <__eqdf2>
 800488c:	d8c03e17 	ldw	r3,248(sp)
 8004890:	db003317 	ldw	r12,204(sp)
 8004894:	10009526 	beq	r2,zero,8004aec <___svfprintf_internal_r+0x12fc>
 8004898:	dac03117 	ldw	r11,196(sp)
 800489c:	60bfffc4 	addi	r2,r12,-1
 80048a0:	1887883a 	add	r3,r3,r2
 80048a4:	59000044 	addi	r4,r11,1
 80048a8:	84000044 	addi	r16,r16,1
 80048ac:	90800115 	stw	r2,4(r18)
 80048b0:	91000015 	stw	r4,0(r18)
 80048b4:	d8c02015 	stw	r3,128(sp)
 80048b8:	dc001f15 	stw	r16,124(sp)
 80048bc:	008001c4 	movi	r2,7
 80048c0:	1400b316 	blt	r2,r16,8004b90 <___svfprintf_internal_r+0x13a0>
 80048c4:	94800204 	addi	r18,r18,8
 80048c8:	dac03a17 	ldw	r11,232(sp)
 80048cc:	dd4022c4 	addi	r21,sp,139
 80048d0:	84000044 	addi	r16,r16,1
 80048d4:	58c7883a 	add	r3,r11,r3
 80048d8:	95400015 	stw	r21,0(r18)
 80048dc:	92c00115 	stw	r11,4(r18)
 80048e0:	d8c02015 	stw	r3,128(sp)
 80048e4:	dc001f15 	stw	r16,124(sp)
 80048e8:	008001c4 	movi	r2,7
 80048ec:	14000e16 	blt	r2,r16,8004928 <___svfprintf_internal_r+0x1138>
 80048f0:	92000204 	addi	r8,r18,8
 80048f4:	003da006 	br	8003f78 <__alt_data_end+0xfc003f78>
 80048f8:	010200b4 	movhi	r4,2050
 80048fc:	213db184 	addi	r4,r4,-2362
 8004900:	d9002b15 	stw	r4,172(sp)
 8004904:	dac02b17 	ldw	r11,172(sp)
 8004908:	1c07883a 	add	r3,r3,r16
 800490c:	44000115 	stw	r16,4(r8)
 8004910:	42c00015 	stw	r11,0(r8)
 8004914:	10800044 	addi	r2,r2,1
 8004918:	d8c02015 	stw	r3,128(sp)
 800491c:	d8801f15 	stw	r2,124(sp)
 8004920:	010001c4 	movi	r4,7
 8004924:	20bd930e 	bge	r4,r2,8003f74 <__alt_data_end+0xfc003f74>
 8004928:	d9002f17 	ldw	r4,188(sp)
 800492c:	b80b883a 	mov	r5,r23
 8004930:	b00d883a 	mov	r6,r22
 8004934:	800ca340 	call	800ca34 <__ssprint_r>
 8004938:	103c751e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 800493c:	d8c02017 	ldw	r3,128(sp)
 8004940:	da000404 	addi	r8,sp,16
 8004944:	003d8c06 	br	8003f78 <__alt_data_end+0xfc003f78>
 8004948:	d9002f17 	ldw	r4,188(sp)
 800494c:	b80b883a 	mov	r5,r23
 8004950:	b00d883a 	mov	r6,r22
 8004954:	800ca340 	call	800ca34 <__ssprint_r>
 8004958:	103dc326 	beq	r2,zero,8004068 <__alt_data_end+0xfc004068>
 800495c:	003c6c06 	br	8003b10 <__alt_data_end+0xfc003b10>
 8004960:	10803fcc 	andi	r2,r2,255
 8004964:	1000201e 	bne	r2,zero,80049e8 <___svfprintf_internal_r+0x11f8>
 8004968:	8880004c 	andi	r2,r17,1
 800496c:	10001e26 	beq	r2,zero,80049e8 <___svfprintf_internal_r+0x11f8>
 8004970:	00800c04 	movi	r2,48
 8004974:	d8c01dc4 	addi	r3,sp,119
 8004978:	d8801dc5 	stb	r2,119(sp)
 800497c:	dc803d17 	ldw	r18,244(sp)
 8004980:	d8c03115 	stw	r3,196(sp)
 8004984:	003cce06 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 8004988:	d9002f17 	ldw	r4,188(sp)
 800498c:	b80b883a 	mov	r5,r23
 8004990:	b00d883a 	mov	r6,r22
 8004994:	800ca340 	call	800ca34 <__ssprint_r>
 8004998:	103c5d1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 800499c:	d8c02017 	ldw	r3,128(sp)
 80049a0:	da000404 	addi	r8,sp,16
 80049a4:	003d6706 	br	8003f44 <__alt_data_end+0xfc003f44>
 80049a8:	d9002f17 	ldw	r4,188(sp)
 80049ac:	b80b883a 	mov	r5,r23
 80049b0:	b00d883a 	mov	r6,r22
 80049b4:	800ca340 	call	800ca34 <__ssprint_r>
 80049b8:	103c551e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 80049bc:	d8c02017 	ldw	r3,128(sp)
 80049c0:	da000404 	addi	r8,sp,16
 80049c4:	003d1a06 	br	8003e30 <__alt_data_end+0xfc003e30>
 80049c8:	d9002f17 	ldw	r4,188(sp)
 80049cc:	b80b883a 	mov	r5,r23
 80049d0:	b00d883a 	mov	r6,r22
 80049d4:	800ca340 	call	800ca34 <__ssprint_r>
 80049d8:	103c4d1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 80049dc:	d8c02017 	ldw	r3,128(sp)
 80049e0:	da000404 	addi	r8,sp,16
 80049e4:	003d2006 	br	8003e68 <__alt_data_end+0xfc003e68>
 80049e8:	0025883a 	mov	r18,zero
 80049ec:	dd803115 	stw	r22,196(sp)
 80049f0:	003cb306 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 80049f4:	dc002617 	ldw	r16,152(sp)
 80049f8:	0401480e 	bge	zero,r16,8004f1c <___svfprintf_internal_r+0x172c>
 80049fc:	db003117 	ldw	r12,196(sp)
 8004a00:	dac03317 	ldw	r11,204(sp)
 8004a04:	62e1883a 	add	r16,r12,r11
 8004a08:	db003417 	ldw	r12,208(sp)
 8004a0c:	5825883a 	mov	r18,r11
 8004a10:	62c0010e 	bge	r12,r11,8004a18 <___svfprintf_internal_r+0x1228>
 8004a14:	6025883a 	mov	r18,r12
 8004a18:	04800b0e 	bge	zero,r18,8004a48 <___svfprintf_internal_r+0x1258>
 8004a1c:	d8801f17 	ldw	r2,124(sp)
 8004a20:	dac03117 	ldw	r11,196(sp)
 8004a24:	1c87883a 	add	r3,r3,r18
 8004a28:	10800044 	addi	r2,r2,1
 8004a2c:	42c00015 	stw	r11,0(r8)
 8004a30:	44800115 	stw	r18,4(r8)
 8004a34:	d8c02015 	stw	r3,128(sp)
 8004a38:	d8801f15 	stw	r2,124(sp)
 8004a3c:	010001c4 	movi	r4,7
 8004a40:	20823f16 	blt	r4,r2,8005340 <___svfprintf_internal_r+0x1b50>
 8004a44:	42000204 	addi	r8,r8,8
 8004a48:	90023b16 	blt	r18,zero,8005338 <___svfprintf_internal_r+0x1b48>
 8004a4c:	db003417 	ldw	r12,208(sp)
 8004a50:	64a5c83a 	sub	r18,r12,r18
 8004a54:	0480780e 	bge	zero,r18,8004c38 <___svfprintf_internal_r+0x1448>
 8004a58:	05400404 	movi	r21,16
 8004a5c:	d8801f17 	ldw	r2,124(sp)
 8004a60:	ac81140e 	bge	r21,r18,8004eb4 <___svfprintf_internal_r+0x16c4>
 8004a64:	014200b4 	movhi	r5,2050
 8004a68:	297db184 	addi	r5,r5,-2362
 8004a6c:	d9402b15 	stw	r5,172(sp)
 8004a70:	070001c4 	movi	fp,7
 8004a74:	dcc02f17 	ldw	r19,188(sp)
 8004a78:	00000306 	br	8004a88 <___svfprintf_internal_r+0x1298>
 8004a7c:	42000204 	addi	r8,r8,8
 8004a80:	94bffc04 	addi	r18,r18,-16
 8004a84:	ac810e0e 	bge	r21,r18,8004ec0 <___svfprintf_internal_r+0x16d0>
 8004a88:	18c00404 	addi	r3,r3,16
 8004a8c:	10800044 	addi	r2,r2,1
 8004a90:	45000015 	stw	r20,0(r8)
 8004a94:	45400115 	stw	r21,4(r8)
 8004a98:	d8c02015 	stw	r3,128(sp)
 8004a9c:	d8801f15 	stw	r2,124(sp)
 8004aa0:	e0bff60e 	bge	fp,r2,8004a7c <__alt_data_end+0xfc004a7c>
 8004aa4:	9809883a 	mov	r4,r19
 8004aa8:	b80b883a 	mov	r5,r23
 8004aac:	b00d883a 	mov	r6,r22
 8004ab0:	800ca340 	call	800ca34 <__ssprint_r>
 8004ab4:	103c161e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004ab8:	d8c02017 	ldw	r3,128(sp)
 8004abc:	d8801f17 	ldw	r2,124(sp)
 8004ac0:	da000404 	addi	r8,sp,16
 8004ac4:	003fee06 	br	8004a80 <__alt_data_end+0xfc004a80>
 8004ac8:	d9002f17 	ldw	r4,188(sp)
 8004acc:	b80b883a 	mov	r5,r23
 8004ad0:	b00d883a 	mov	r6,r22
 8004ad4:	800ca340 	call	800ca34 <__ssprint_r>
 8004ad8:	103c0d1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004adc:	d8c02017 	ldw	r3,128(sp)
 8004ae0:	d8802787 	ldb	r2,158(sp)
 8004ae4:	da000404 	addi	r8,sp,16
 8004ae8:	003cc406 	br	8003dfc <__alt_data_end+0xfc003dfc>
 8004aec:	657fffc4 	addi	r21,r12,-1
 8004af0:	057f750e 	bge	zero,r21,80048c8 <__alt_data_end+0xfc0048c8>
 8004af4:	07000404 	movi	fp,16
 8004af8:	e542ef0e 	bge	fp,r21,80056b8 <___svfprintf_internal_r+0x1ec8>
 8004afc:	010200b4 	movhi	r4,2050
 8004b00:	213db184 	addi	r4,r4,-2362
 8004b04:	d9002b15 	stw	r4,172(sp)
 8004b08:	01c001c4 	movi	r7,7
 8004b0c:	dcc02f17 	ldw	r19,188(sp)
 8004b10:	00000306 	br	8004b20 <___svfprintf_internal_r+0x1330>
 8004b14:	ad7ffc04 	addi	r21,r21,-16
 8004b18:	94800204 	addi	r18,r18,8
 8004b1c:	e540130e 	bge	fp,r21,8004b6c <___svfprintf_internal_r+0x137c>
 8004b20:	18c00404 	addi	r3,r3,16
 8004b24:	84000044 	addi	r16,r16,1
 8004b28:	95000015 	stw	r20,0(r18)
 8004b2c:	97000115 	stw	fp,4(r18)
 8004b30:	d8c02015 	stw	r3,128(sp)
 8004b34:	dc001f15 	stw	r16,124(sp)
 8004b38:	3c3ff60e 	bge	r7,r16,8004b14 <__alt_data_end+0xfc004b14>
 8004b3c:	9809883a 	mov	r4,r19
 8004b40:	b80b883a 	mov	r5,r23
 8004b44:	b00d883a 	mov	r6,r22
 8004b48:	d9c03e15 	stw	r7,248(sp)
 8004b4c:	800ca340 	call	800ca34 <__ssprint_r>
 8004b50:	d9c03e17 	ldw	r7,248(sp)
 8004b54:	103bee1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004b58:	ad7ffc04 	addi	r21,r21,-16
 8004b5c:	d8c02017 	ldw	r3,128(sp)
 8004b60:	dc001f17 	ldw	r16,124(sp)
 8004b64:	dc800404 	addi	r18,sp,16
 8004b68:	e57fed16 	blt	fp,r21,8004b20 <__alt_data_end+0xfc004b20>
 8004b6c:	dac02b17 	ldw	r11,172(sp)
 8004b70:	1d47883a 	add	r3,r3,r21
 8004b74:	84000044 	addi	r16,r16,1
 8004b78:	92c00015 	stw	r11,0(r18)
 8004b7c:	95400115 	stw	r21,4(r18)
 8004b80:	d8c02015 	stw	r3,128(sp)
 8004b84:	dc001f15 	stw	r16,124(sp)
 8004b88:	008001c4 	movi	r2,7
 8004b8c:	143f4d0e 	bge	r2,r16,80048c4 <__alt_data_end+0xfc0048c4>
 8004b90:	d9002f17 	ldw	r4,188(sp)
 8004b94:	b80b883a 	mov	r5,r23
 8004b98:	b00d883a 	mov	r6,r22
 8004b9c:	800ca340 	call	800ca34 <__ssprint_r>
 8004ba0:	103bdb1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004ba4:	d8c02017 	ldw	r3,128(sp)
 8004ba8:	dc001f17 	ldw	r16,124(sp)
 8004bac:	dc800404 	addi	r18,sp,16
 8004bb0:	003f4506 	br	80048c8 <__alt_data_end+0xfc0048c8>
 8004bb4:	00800084 	movi	r2,2
 8004bb8:	9f06b03a 	or	r3,r19,fp
 8004bbc:	003d3806 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004bc0:	dac02d17 	ldw	r11,180(sp)
 8004bc4:	0039883a 	mov	fp,zero
 8004bc8:	0005883a 	mov	r2,zero
 8004bcc:	5cc00017 	ldw	r19,0(r11)
 8004bd0:	5ac00104 	addi	r11,r11,4
 8004bd4:	dac02d15 	stw	r11,180(sp)
 8004bd8:	9807883a 	mov	r3,r19
 8004bdc:	003d3006 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004be0:	1cc00017 	ldw	r19,0(r3)
 8004be4:	dac02d17 	ldw	r11,180(sp)
 8004be8:	9839d7fa 	srai	fp,r19,31
 8004bec:	5ac00104 	addi	r11,r11,4
 8004bf0:	dac02d15 	stw	r11,180(sp)
 8004bf4:	e005883a 	mov	r2,fp
 8004bf8:	003c0a06 	br	8003c24 <__alt_data_end+0xfc003c24>
 8004bfc:	db002d17 	ldw	r12,180(sp)
 8004c00:	0039883a 	mov	fp,zero
 8004c04:	00800044 	movi	r2,1
 8004c08:	64c00017 	ldw	r19,0(r12)
 8004c0c:	63000104 	addi	r12,r12,4
 8004c10:	db002d15 	stw	r12,180(sp)
 8004c14:	9807883a 	mov	r3,r19
 8004c18:	003d2106 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004c1c:	d9002f17 	ldw	r4,188(sp)
 8004c20:	b80b883a 	mov	r5,r23
 8004c24:	b00d883a 	mov	r6,r22
 8004c28:	800ca340 	call	800ca34 <__ssprint_r>
 8004c2c:	103bb81e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004c30:	d8c02017 	ldw	r3,128(sp)
 8004c34:	da000404 	addi	r8,sp,16
 8004c38:	db003117 	ldw	r12,196(sp)
 8004c3c:	dac03417 	ldw	r11,208(sp)
 8004c40:	d8802617 	ldw	r2,152(sp)
 8004c44:	62e5883a 	add	r18,r12,r11
 8004c48:	db003317 	ldw	r12,204(sp)
 8004c4c:	13000216 	blt	r2,r12,8004c58 <___svfprintf_internal_r+0x1468>
 8004c50:	8900004c 	andi	r4,r17,1
 8004c54:	20000c26 	beq	r4,zero,8004c88 <___svfprintf_internal_r+0x1498>
 8004c58:	dac03917 	ldw	r11,228(sp)
 8004c5c:	d9001f17 	ldw	r4,124(sp)
 8004c60:	db003517 	ldw	r12,212(sp)
 8004c64:	1ac7883a 	add	r3,r3,r11
 8004c68:	21000044 	addi	r4,r4,1
 8004c6c:	43000015 	stw	r12,0(r8)
 8004c70:	42c00115 	stw	r11,4(r8)
 8004c74:	d8c02015 	stw	r3,128(sp)
 8004c78:	d9001f15 	stw	r4,124(sp)
 8004c7c:	014001c4 	movi	r5,7
 8004c80:	2901b716 	blt	r5,r4,8005360 <___svfprintf_internal_r+0x1b70>
 8004c84:	42000204 	addi	r8,r8,8
 8004c88:	dac03317 	ldw	r11,204(sp)
 8004c8c:	8489c83a 	sub	r4,r16,r18
 8004c90:	5885c83a 	sub	r2,r11,r2
 8004c94:	1021883a 	mov	r16,r2
 8004c98:	2080010e 	bge	r4,r2,8004ca0 <___svfprintf_internal_r+0x14b0>
 8004c9c:	2021883a 	mov	r16,r4
 8004ca0:	04000a0e 	bge	zero,r16,8004ccc <___svfprintf_internal_r+0x14dc>
 8004ca4:	d9001f17 	ldw	r4,124(sp)
 8004ca8:	1c07883a 	add	r3,r3,r16
 8004cac:	44800015 	stw	r18,0(r8)
 8004cb0:	21000044 	addi	r4,r4,1
 8004cb4:	44000115 	stw	r16,4(r8)
 8004cb8:	d8c02015 	stw	r3,128(sp)
 8004cbc:	d9001f15 	stw	r4,124(sp)
 8004cc0:	014001c4 	movi	r5,7
 8004cc4:	2901bf16 	blt	r5,r4,80053c4 <___svfprintf_internal_r+0x1bd4>
 8004cc8:	42000204 	addi	r8,r8,8
 8004ccc:	8001bb16 	blt	r16,zero,80053bc <___svfprintf_internal_r+0x1bcc>
 8004cd0:	1421c83a 	sub	r16,r2,r16
 8004cd4:	043ca80e 	bge	zero,r16,8003f78 <__alt_data_end+0xfc003f78>
 8004cd8:	04800404 	movi	r18,16
 8004cdc:	d8801f17 	ldw	r2,124(sp)
 8004ce0:	943f050e 	bge	r18,r16,80048f8 <__alt_data_end+0xfc0048f8>
 8004ce4:	014200b4 	movhi	r5,2050
 8004ce8:	297db184 	addi	r5,r5,-2362
 8004cec:	d9402b15 	stw	r5,172(sp)
 8004cf0:	054001c4 	movi	r21,7
 8004cf4:	dcc02f17 	ldw	r19,188(sp)
 8004cf8:	00000306 	br	8004d08 <___svfprintf_internal_r+0x1518>
 8004cfc:	42000204 	addi	r8,r8,8
 8004d00:	843ffc04 	addi	r16,r16,-16
 8004d04:	943eff0e 	bge	r18,r16,8004904 <__alt_data_end+0xfc004904>
 8004d08:	18c00404 	addi	r3,r3,16
 8004d0c:	10800044 	addi	r2,r2,1
 8004d10:	45000015 	stw	r20,0(r8)
 8004d14:	44800115 	stw	r18,4(r8)
 8004d18:	d8c02015 	stw	r3,128(sp)
 8004d1c:	d8801f15 	stw	r2,124(sp)
 8004d20:	a8bff60e 	bge	r21,r2,8004cfc <__alt_data_end+0xfc004cfc>
 8004d24:	9809883a 	mov	r4,r19
 8004d28:	b80b883a 	mov	r5,r23
 8004d2c:	b00d883a 	mov	r6,r22
 8004d30:	800ca340 	call	800ca34 <__ssprint_r>
 8004d34:	103b761e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004d38:	d8c02017 	ldw	r3,128(sp)
 8004d3c:	d8801f17 	ldw	r2,124(sp)
 8004d40:	da000404 	addi	r8,sp,16
 8004d44:	003fee06 	br	8004d00 <__alt_data_end+0xfc004d00>
 8004d48:	8888703a 	and	r4,r17,r2
 8004d4c:	203eb31e 	bne	r4,zero,800481c <__alt_data_end+0xfc00481c>
 8004d50:	dc001f17 	ldw	r16,124(sp)
 8004d54:	db003117 	ldw	r12,196(sp)
 8004d58:	40800115 	stw	r2,4(r8)
 8004d5c:	84000044 	addi	r16,r16,1
 8004d60:	43000015 	stw	r12,0(r8)
 8004d64:	d8c02015 	stw	r3,128(sp)
 8004d68:	dc001f15 	stw	r16,124(sp)
 8004d6c:	008001c4 	movi	r2,7
 8004d70:	143f8716 	blt	r2,r16,8004b90 <__alt_data_end+0xfc004b90>
 8004d74:	44800204 	addi	r18,r8,8
 8004d78:	003ed306 	br	80048c8 <__alt_data_end+0xfc0048c8>
 8004d7c:	d9002f17 	ldw	r4,188(sp)
 8004d80:	b80b883a 	mov	r5,r23
 8004d84:	b00d883a 	mov	r6,r22
 8004d88:	800ca340 	call	800ca34 <__ssprint_r>
 8004d8c:	103b601e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004d90:	d8c02017 	ldw	r3,128(sp)
 8004d94:	dc001f17 	ldw	r16,124(sp)
 8004d98:	da000404 	addi	r8,sp,16
 8004d9c:	003eaa06 	br	8004848 <__alt_data_end+0xfc004848>
 8004da0:	d9002f17 	ldw	r4,188(sp)
 8004da4:	b80b883a 	mov	r5,r23
 8004da8:	b00d883a 	mov	r6,r22
 8004dac:	800ca340 	call	800ca34 <__ssprint_r>
 8004db0:	103b571e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004db4:	d8c02017 	ldw	r3,128(sp)
 8004db8:	dc001f17 	ldw	r16,124(sp)
 8004dbc:	dc800404 	addi	r18,sp,16
 8004dc0:	003eac06 	br	8004874 <__alt_data_end+0xfc004874>
 8004dc4:	d9002f17 	ldw	r4,188(sp)
 8004dc8:	b80b883a 	mov	r5,r23
 8004dcc:	b00d883a 	mov	r6,r22
 8004dd0:	800ca340 	call	800ca34 <__ssprint_r>
 8004dd4:	103b4e1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004dd8:	d8c02017 	ldw	r3,128(sp)
 8004ddc:	da000404 	addi	r8,sp,16
 8004de0:	003c2406 	br	8003e74 <__alt_data_end+0xfc003e74>
 8004de4:	da004015 	stw	r8,256(sp)
 8004de8:	da403f15 	stw	r9,252(sp)
 8004dec:	800c78c0 	call	800c78c <__fpclassifyd>
 8004df0:	da004017 	ldw	r8,256(sp)
 8004df4:	da403f17 	ldw	r9,252(sp)
 8004df8:	1000951e 	bne	r2,zero,8005050 <___svfprintf_internal_r+0x1860>
 8004dfc:	008011c4 	movi	r2,71
 8004e00:	1400fb16 	blt	r2,r16,80051f0 <___svfprintf_internal_r+0x1a00>
 8004e04:	030200b4 	movhi	r12,2050
 8004e08:	633da304 	addi	r12,r12,-2420
 8004e0c:	db003115 	stw	r12,196(sp)
 8004e10:	00c000c4 	movi	r3,3
 8004e14:	00bfdfc4 	movi	r2,-129
 8004e18:	d8c02a15 	stw	r3,168(sp)
 8004e1c:	88a2703a 	and	r17,r17,r2
 8004e20:	dd402783 	ldbu	r21,158(sp)
 8004e24:	dcc02d15 	stw	r19,180(sp)
 8004e28:	1825883a 	mov	r18,r3
 8004e2c:	d8003215 	stw	zero,200(sp)
 8004e30:	d8003415 	stw	zero,208(sp)
 8004e34:	003ba706 	br	8003cd4 <__alt_data_end+0xfc003cd4>
 8004e38:	8880040c 	andi	r2,r17,16
 8004e3c:	1000091e 	bne	r2,zero,8004e64 <___svfprintf_internal_r+0x1674>
 8004e40:	8c40100c 	andi	r17,r17,64
 8004e44:	88000726 	beq	r17,zero,8004e64 <___svfprintf_internal_r+0x1674>
 8004e48:	db002d17 	ldw	r12,180(sp)
 8004e4c:	dac03017 	ldw	r11,192(sp)
 8004e50:	60800017 	ldw	r2,0(r12)
 8004e54:	63000104 	addi	r12,r12,4
 8004e58:	db002d15 	stw	r12,180(sp)
 8004e5c:	12c0000d 	sth	r11,0(r2)
 8004e60:	003a8f06 	br	80038a0 <__alt_data_end+0xfc0038a0>
 8004e64:	db002d17 	ldw	r12,180(sp)
 8004e68:	dac03017 	ldw	r11,192(sp)
 8004e6c:	60800017 	ldw	r2,0(r12)
 8004e70:	63000104 	addi	r12,r12,4
 8004e74:	db002d15 	stw	r12,180(sp)
 8004e78:	12c00015 	stw	r11,0(r2)
 8004e7c:	003a8806 	br	80038a0 <__alt_data_end+0xfc0038a0>
 8004e80:	88c0100c 	andi	r3,r17,64
 8004e84:	1800e926 	beq	r3,zero,800522c <___svfprintf_internal_r+0x1a3c>
 8004e88:	dac02d17 	ldw	r11,180(sp)
 8004e8c:	14c0000b 	ldhu	r19,0(r2)
 8004e90:	0039883a 	mov	fp,zero
 8004e94:	5ac00104 	addi	r11,r11,4
 8004e98:	dac02d15 	stw	r11,180(sp)
 8004e9c:	003d1406 	br	80042f0 <__alt_data_end+0xfc0042f0>
 8004ea0:	1c000007 	ldb	r16,0(r3)
 8004ea4:	1805883a 	mov	r2,r3
 8004ea8:	003aa706 	br	8003948 <__alt_data_end+0xfc003948>
 8004eac:	00800084 	movi	r2,2
 8004eb0:	003c7b06 	br	80040a0 <__alt_data_end+0xfc0040a0>
 8004eb4:	010200b4 	movhi	r4,2050
 8004eb8:	213db184 	addi	r4,r4,-2362
 8004ebc:	d9002b15 	stw	r4,172(sp)
 8004ec0:	dac02b17 	ldw	r11,172(sp)
 8004ec4:	1c87883a 	add	r3,r3,r18
 8004ec8:	10800044 	addi	r2,r2,1
 8004ecc:	42c00015 	stw	r11,0(r8)
 8004ed0:	44800115 	stw	r18,4(r8)
 8004ed4:	d8c02015 	stw	r3,128(sp)
 8004ed8:	d8801f15 	stw	r2,124(sp)
 8004edc:	010001c4 	movi	r4,7
 8004ee0:	20bf4e16 	blt	r4,r2,8004c1c <__alt_data_end+0xfc004c1c>
 8004ee4:	42000204 	addi	r8,r8,8
 8004ee8:	003f5306 	br	8004c38 <__alt_data_end+0xfc004c38>
 8004eec:	010200b4 	movhi	r4,2050
 8004ef0:	213db184 	addi	r4,r4,-2362
 8004ef4:	d9002b15 	stw	r4,172(sp)
 8004ef8:	003c0806 	br	8003f1c <__alt_data_end+0xfc003f1c>
 8004efc:	d9002f17 	ldw	r4,188(sp)
 8004f00:	b80b883a 	mov	r5,r23
 8004f04:	b00d883a 	mov	r6,r22
 8004f08:	800ca340 	call	800ca34 <__ssprint_r>
 8004f0c:	103b001e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004f10:	d8c02017 	ldw	r3,128(sp)
 8004f14:	da000404 	addi	r8,sp,16
 8004f18:	003dc606 	br	8004634 <__alt_data_end+0xfc004634>
 8004f1c:	d8801f17 	ldw	r2,124(sp)
 8004f20:	030200b4 	movhi	r12,2050
 8004f24:	01000044 	movi	r4,1
 8004f28:	18c00044 	addi	r3,r3,1
 8004f2c:	10800044 	addi	r2,r2,1
 8004f30:	633db104 	addi	r12,r12,-2364
 8004f34:	41000115 	stw	r4,4(r8)
 8004f38:	43000015 	stw	r12,0(r8)
 8004f3c:	d8c02015 	stw	r3,128(sp)
 8004f40:	d8801f15 	stw	r2,124(sp)
 8004f44:	010001c4 	movi	r4,7
 8004f48:	2080ad16 	blt	r4,r2,8005200 <___svfprintf_internal_r+0x1a10>
 8004f4c:	42000204 	addi	r8,r8,8
 8004f50:	8000041e 	bne	r16,zero,8004f64 <___svfprintf_internal_r+0x1774>
 8004f54:	dac03317 	ldw	r11,204(sp)
 8004f58:	5800021e 	bne	r11,zero,8004f64 <___svfprintf_internal_r+0x1774>
 8004f5c:	8880004c 	andi	r2,r17,1
 8004f60:	103c0526 	beq	r2,zero,8003f78 <__alt_data_end+0xfc003f78>
 8004f64:	db003917 	ldw	r12,228(sp)
 8004f68:	d8801f17 	ldw	r2,124(sp)
 8004f6c:	dac03517 	ldw	r11,212(sp)
 8004f70:	1b07883a 	add	r3,r3,r12
 8004f74:	10800044 	addi	r2,r2,1
 8004f78:	42c00015 	stw	r11,0(r8)
 8004f7c:	43000115 	stw	r12,4(r8)
 8004f80:	d8c02015 	stw	r3,128(sp)
 8004f84:	d8801f15 	stw	r2,124(sp)
 8004f88:	010001c4 	movi	r4,7
 8004f8c:	20818816 	blt	r4,r2,80055b0 <___svfprintf_internal_r+0x1dc0>
 8004f90:	42000204 	addi	r8,r8,8
 8004f94:	0421c83a 	sub	r16,zero,r16
 8004f98:	0400bc0e 	bge	zero,r16,800528c <___svfprintf_internal_r+0x1a9c>
 8004f9c:	04800404 	movi	r18,16
 8004fa0:	9400f80e 	bge	r18,r16,8005384 <___svfprintf_internal_r+0x1b94>
 8004fa4:	010200b4 	movhi	r4,2050
 8004fa8:	213db184 	addi	r4,r4,-2362
 8004fac:	d9002b15 	stw	r4,172(sp)
 8004fb0:	054001c4 	movi	r21,7
 8004fb4:	dcc02f17 	ldw	r19,188(sp)
 8004fb8:	00000306 	br	8004fc8 <___svfprintf_internal_r+0x17d8>
 8004fbc:	42000204 	addi	r8,r8,8
 8004fc0:	843ffc04 	addi	r16,r16,-16
 8004fc4:	9400f20e 	bge	r18,r16,8005390 <___svfprintf_internal_r+0x1ba0>
 8004fc8:	18c00404 	addi	r3,r3,16
 8004fcc:	10800044 	addi	r2,r2,1
 8004fd0:	45000015 	stw	r20,0(r8)
 8004fd4:	44800115 	stw	r18,4(r8)
 8004fd8:	d8c02015 	stw	r3,128(sp)
 8004fdc:	d8801f15 	stw	r2,124(sp)
 8004fe0:	a8bff60e 	bge	r21,r2,8004fbc <__alt_data_end+0xfc004fbc>
 8004fe4:	9809883a 	mov	r4,r19
 8004fe8:	b80b883a 	mov	r5,r23
 8004fec:	b00d883a 	mov	r6,r22
 8004ff0:	800ca340 	call	800ca34 <__ssprint_r>
 8004ff4:	103ac61e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8004ff8:	d8c02017 	ldw	r3,128(sp)
 8004ffc:	d8801f17 	ldw	r2,124(sp)
 8005000:	da000404 	addi	r8,sp,16
 8005004:	003fee06 	br	8004fc0 <__alt_data_end+0xfc004fc0>
 8005008:	db002e17 	ldw	r12,184(sp)
 800500c:	1805883a 	mov	r2,r3
 8005010:	dac02d15 	stw	r11,180(sp)
 8005014:	0319c83a 	sub	r12,zero,r12
 8005018:	db002e15 	stw	r12,184(sp)
 800501c:	003ad106 	br	8003b64 <__alt_data_end+0xfc003b64>
 8005020:	18800044 	addi	r2,r3,1
 8005024:	8c400814 	ori	r17,r17,32
 8005028:	1c000047 	ldb	r16,1(r3)
 800502c:	003a4606 	br	8003948 <__alt_data_end+0xfc003948>
 8005030:	d9002f17 	ldw	r4,188(sp)
 8005034:	b80b883a 	mov	r5,r23
 8005038:	b00d883a 	mov	r6,r22
 800503c:	800ca340 	call	800ca34 <__ssprint_r>
 8005040:	103ab31e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8005044:	d8c02017 	ldw	r3,128(sp)
 8005048:	da000404 	addi	r8,sp,16
 800504c:	003d8a06 	br	8004678 <__alt_data_end+0xfc004678>
 8005050:	057ff7c4 	movi	r21,-33
 8005054:	00bfffc4 	movi	r2,-1
 8005058:	856a703a 	and	r21,r16,r21
 800505c:	48807126 	beq	r9,r2,8005224 <___svfprintf_internal_r+0x1a34>
 8005060:	008011c4 	movi	r2,71
 8005064:	a8814f26 	beq	r21,r2,80055a4 <___svfprintf_internal_r+0x1db4>
 8005068:	db003817 	ldw	r12,224(sp)
 800506c:	8ac04014 	ori	r11,r17,256
 8005070:	dac02d15 	stw	r11,180(sp)
 8005074:	60015816 	blt	r12,zero,80055d8 <___svfprintf_internal_r+0x1de8>
 8005078:	dc803817 	ldw	r18,224(sp)
 800507c:	d8002a05 	stb	zero,168(sp)
 8005080:	00801984 	movi	r2,102
 8005084:	80808c26 	beq	r16,r2,80052b8 <___svfprintf_internal_r+0x1ac8>
 8005088:	00801184 	movi	r2,70
 800508c:	80808a26 	beq	r16,r2,80052b8 <___svfprintf_internal_r+0x1ac8>
 8005090:	00801144 	movi	r2,69
 8005094:	a8815426 	beq	r21,r2,80055e8 <___svfprintf_internal_r+0x1df8>
 8005098:	4839883a 	mov	fp,r9
 800509c:	d8802604 	addi	r2,sp,152
 80050a0:	d8800115 	stw	r2,4(sp)
 80050a4:	d9002f17 	ldw	r4,188(sp)
 80050a8:	d8802504 	addi	r2,sp,148
 80050ac:	d9403717 	ldw	r5,220(sp)
 80050b0:	d8800215 	stw	r2,8(sp)
 80050b4:	d8802104 	addi	r2,sp,132
 80050b8:	df000015 	stw	fp,0(sp)
 80050bc:	d8800315 	stw	r2,12(sp)
 80050c0:	900d883a 	mov	r6,r18
 80050c4:	01c00084 	movi	r7,2
 80050c8:	da004015 	stw	r8,256(sp)
 80050cc:	da403f15 	stw	r9,252(sp)
 80050d0:	8007ad00 	call	8007ad0 <_dtoa_r>
 80050d4:	d8803115 	stw	r2,196(sp)
 80050d8:	008019c4 	movi	r2,103
 80050dc:	da004017 	ldw	r8,256(sp)
 80050e0:	da403f17 	ldw	r9,252(sp)
 80050e4:	80800226 	beq	r16,r2,80050f0 <___svfprintf_internal_r+0x1900>
 80050e8:	008011c4 	movi	r2,71
 80050ec:	8080841e 	bne	r16,r2,8005300 <___svfprintf_internal_r+0x1b10>
 80050f0:	8880004c 	andi	r2,r17,1
 80050f4:	10015126 	beq	r2,zero,800563c <___svfprintf_internal_r+0x1e4c>
 80050f8:	db003117 	ldw	r12,196(sp)
 80050fc:	6715883a 	add	r10,r12,fp
 8005100:	d9003717 	ldw	r4,220(sp)
 8005104:	900b883a 	mov	r5,r18
 8005108:	000d883a 	mov	r6,zero
 800510c:	000f883a 	mov	r7,zero
 8005110:	da004015 	stw	r8,256(sp)
 8005114:	da403f15 	stw	r9,252(sp)
 8005118:	da803e15 	stw	r10,248(sp)
 800511c:	8010f780 	call	8010f78 <__eqdf2>
 8005120:	da004017 	ldw	r8,256(sp)
 8005124:	da403f17 	ldw	r9,252(sp)
 8005128:	da803e17 	ldw	r10,248(sp)
 800512c:	1000d926 	beq	r2,zero,8005494 <___svfprintf_internal_r+0x1ca4>
 8005130:	d8802117 	ldw	r2,132(sp)
 8005134:	1280062e 	bgeu	r2,r10,8005150 <___svfprintf_internal_r+0x1960>
 8005138:	01000c04 	movi	r4,48
 800513c:	10c00044 	addi	r3,r2,1
 8005140:	d8c02115 	stw	r3,132(sp)
 8005144:	11000005 	stb	r4,0(r2)
 8005148:	d8802117 	ldw	r2,132(sp)
 800514c:	12bffb36 	bltu	r2,r10,800513c <__alt_data_end+0xfc00513c>
 8005150:	db003117 	ldw	r12,196(sp)
 8005154:	1305c83a 	sub	r2,r2,r12
 8005158:	d8803315 	stw	r2,204(sp)
 800515c:	008011c4 	movi	r2,71
 8005160:	a880b626 	beq	r21,r2,800543c <___svfprintf_internal_r+0x1c4c>
 8005164:	00801944 	movi	r2,101
 8005168:	14017e0e 	bge	r2,r16,8005764 <___svfprintf_internal_r+0x1f74>
 800516c:	00801984 	movi	r2,102
 8005170:	80812826 	beq	r16,r2,8005614 <___svfprintf_internal_r+0x1e24>
 8005174:	db002617 	ldw	r12,152(sp)
 8005178:	db003415 	stw	r12,208(sp)
 800517c:	db003417 	ldw	r12,208(sp)
 8005180:	dac03317 	ldw	r11,204(sp)
 8005184:	62c11a16 	blt	r12,r11,80055f0 <___svfprintf_internal_r+0x1e00>
 8005188:	8c40004c 	andi	r17,r17,1
 800518c:	88013d1e 	bne	r17,zero,8005684 <___svfprintf_internal_r+0x1e94>
 8005190:	6005883a 	mov	r2,r12
 8005194:	60012716 	blt	r12,zero,8005634 <___svfprintf_internal_r+0x1e44>
 8005198:	dc803417 	ldw	r18,208(sp)
 800519c:	df002a07 	ldb	fp,168(sp)
 80051a0:	e000b01e 	bne	fp,zero,8005464 <___svfprintf_internal_r+0x1c74>
 80051a4:	dc402d17 	ldw	r17,180(sp)
 80051a8:	dd402783 	ldbu	r21,158(sp)
 80051ac:	d8802a15 	stw	r2,168(sp)
 80051b0:	dcc02d15 	stw	r19,180(sp)
 80051b4:	d8003215 	stw	zero,200(sp)
 80051b8:	003ac606 	br	8003cd4 <__alt_data_end+0xfc003cd4>
 80051bc:	008200b4 	movhi	r2,2050
 80051c0:	10bda104 	addi	r2,r2,-2428
 80051c4:	d8803115 	stw	r2,196(sp)
 80051c8:	003be506 	br	8004160 <__alt_data_end+0xfc004160>
 80051cc:	d9002f17 	ldw	r4,188(sp)
 80051d0:	04001004 	movi	r16,64
 80051d4:	800b883a 	mov	r5,r16
 80051d8:	800a4b00 	call	800a4b0 <_malloc_r>
 80051dc:	b8800015 	stw	r2,0(r23)
 80051e0:	b8800415 	stw	r2,16(r23)
 80051e4:	10016126 	beq	r2,zero,800576c <___svfprintf_internal_r+0x1f7c>
 80051e8:	bc000515 	stw	r16,20(r23)
 80051ec:	00399a06 	br	8003858 <__alt_data_end+0xfc003858>
 80051f0:	008200b4 	movhi	r2,2050
 80051f4:	10bda404 	addi	r2,r2,-2416
 80051f8:	d8803115 	stw	r2,196(sp)
 80051fc:	003f0406 	br	8004e10 <__alt_data_end+0xfc004e10>
 8005200:	d9002f17 	ldw	r4,188(sp)
 8005204:	b80b883a 	mov	r5,r23
 8005208:	b00d883a 	mov	r6,r22
 800520c:	800ca340 	call	800ca34 <__ssprint_r>
 8005210:	103a3f1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8005214:	dc002617 	ldw	r16,152(sp)
 8005218:	d8c02017 	ldw	r3,128(sp)
 800521c:	da000404 	addi	r8,sp,16
 8005220:	003f4b06 	br	8004f50 <__alt_data_end+0xfc004f50>
 8005224:	02400184 	movi	r9,6
 8005228:	003f8f06 	br	8005068 <__alt_data_end+0xfc005068>
 800522c:	db002d17 	ldw	r12,180(sp)
 8005230:	14c00017 	ldw	r19,0(r2)
 8005234:	0039883a 	mov	fp,zero
 8005238:	63000104 	addi	r12,r12,4
 800523c:	db002d15 	stw	r12,180(sp)
 8005240:	003c2b06 	br	80042f0 <__alt_data_end+0xfc0042f0>
 8005244:	d8c03117 	ldw	r3,196(sp)
 8005248:	b0e5c83a 	sub	r18,r22,r3
 800524c:	003a9c06 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 8005250:	da004015 	stw	r8,256(sp)
 8005254:	80037580 	call	8003758 <strlen>
 8005258:	1025883a 	mov	r18,r2
 800525c:	da004017 	ldw	r8,256(sp)
 8005260:	903c450e 	bge	r18,zero,8004378 <__alt_data_end+0xfc004378>
 8005264:	0005883a 	mov	r2,zero
 8005268:	003c4306 	br	8004378 <__alt_data_end+0xfc004378>
 800526c:	d9002f17 	ldw	r4,188(sp)
 8005270:	b80b883a 	mov	r5,r23
 8005274:	b00d883a 	mov	r6,r22
 8005278:	800ca340 	call	800ca34 <__ssprint_r>
 800527c:	103a241e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8005280:	d8c02017 	ldw	r3,128(sp)
 8005284:	d8801f17 	ldw	r2,124(sp)
 8005288:	da000404 	addi	r8,sp,16
 800528c:	db003317 	ldw	r12,204(sp)
 8005290:	dac03117 	ldw	r11,196(sp)
 8005294:	10800044 	addi	r2,r2,1
 8005298:	60c7883a 	add	r3,r12,r3
 800529c:	42c00015 	stw	r11,0(r8)
 80052a0:	43000115 	stw	r12,4(r8)
 80052a4:	d8c02015 	stw	r3,128(sp)
 80052a8:	d8801f15 	stw	r2,124(sp)
 80052ac:	010001c4 	movi	r4,7
 80052b0:	20bb300e 	bge	r4,r2,8003f74 <__alt_data_end+0xfc003f74>
 80052b4:	003d9c06 	br	8004928 <__alt_data_end+0xfc004928>
 80052b8:	d8802604 	addi	r2,sp,152
 80052bc:	d8800115 	stw	r2,4(sp)
 80052c0:	d9002f17 	ldw	r4,188(sp)
 80052c4:	d8802504 	addi	r2,sp,148
 80052c8:	d9403717 	ldw	r5,220(sp)
 80052cc:	d8800215 	stw	r2,8(sp)
 80052d0:	d8802104 	addi	r2,sp,132
 80052d4:	da400015 	stw	r9,0(sp)
 80052d8:	d8800315 	stw	r2,12(sp)
 80052dc:	900d883a 	mov	r6,r18
 80052e0:	01c000c4 	movi	r7,3
 80052e4:	da004015 	stw	r8,256(sp)
 80052e8:	da403f15 	stw	r9,252(sp)
 80052ec:	8007ad00 	call	8007ad0 <_dtoa_r>
 80052f0:	da403f17 	ldw	r9,252(sp)
 80052f4:	da004017 	ldw	r8,256(sp)
 80052f8:	d8803115 	stw	r2,196(sp)
 80052fc:	4839883a 	mov	fp,r9
 8005300:	dac03117 	ldw	r11,196(sp)
 8005304:	00801184 	movi	r2,70
 8005308:	5f15883a 	add	r10,r11,fp
 800530c:	a8bf7c1e 	bne	r21,r2,8005100 <__alt_data_end+0xfc005100>
 8005310:	59000007 	ldb	r4,0(r11)
 8005314:	00800c04 	movi	r2,48
 8005318:	2080ca26 	beq	r4,r2,8005644 <___svfprintf_internal_r+0x1e54>
 800531c:	d8c02617 	ldw	r3,152(sp)
 8005320:	50d5883a 	add	r10,r10,r3
 8005324:	003f7606 	br	8005100 <__alt_data_end+0xfc005100>
 8005328:	010200b4 	movhi	r4,2050
 800532c:	213db584 	addi	r4,r4,-2346
 8005330:	d9003615 	stw	r4,216(sp)
 8005334:	003aa606 	br	8003dd0 <__alt_data_end+0xfc003dd0>
 8005338:	0025883a 	mov	r18,zero
 800533c:	003dc306 	br	8004a4c <__alt_data_end+0xfc004a4c>
 8005340:	d9002f17 	ldw	r4,188(sp)
 8005344:	b80b883a 	mov	r5,r23
 8005348:	b00d883a 	mov	r6,r22
 800534c:	800ca340 	call	800ca34 <__ssprint_r>
 8005350:	1039ef1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8005354:	d8c02017 	ldw	r3,128(sp)
 8005358:	da000404 	addi	r8,sp,16
 800535c:	003dba06 	br	8004a48 <__alt_data_end+0xfc004a48>
 8005360:	d9002f17 	ldw	r4,188(sp)
 8005364:	b80b883a 	mov	r5,r23
 8005368:	b00d883a 	mov	r6,r22
 800536c:	800ca340 	call	800ca34 <__ssprint_r>
 8005370:	1039e71e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 8005374:	d8802617 	ldw	r2,152(sp)
 8005378:	d8c02017 	ldw	r3,128(sp)
 800537c:	da000404 	addi	r8,sp,16
 8005380:	003e4106 	br	8004c88 <__alt_data_end+0xfc004c88>
 8005384:	030200b4 	movhi	r12,2050
 8005388:	633db184 	addi	r12,r12,-2362
 800538c:	db002b15 	stw	r12,172(sp)
 8005390:	dac02b17 	ldw	r11,172(sp)
 8005394:	1c07883a 	add	r3,r3,r16
 8005398:	10800044 	addi	r2,r2,1
 800539c:	42c00015 	stw	r11,0(r8)
 80053a0:	44000115 	stw	r16,4(r8)
 80053a4:	d8c02015 	stw	r3,128(sp)
 80053a8:	d8801f15 	stw	r2,124(sp)
 80053ac:	010001c4 	movi	r4,7
 80053b0:	20bfae16 	blt	r4,r2,800526c <__alt_data_end+0xfc00526c>
 80053b4:	42000204 	addi	r8,r8,8
 80053b8:	003fb406 	br	800528c <__alt_data_end+0xfc00528c>
 80053bc:	0021883a 	mov	r16,zero
 80053c0:	003e4306 	br	8004cd0 <__alt_data_end+0xfc004cd0>
 80053c4:	d9002f17 	ldw	r4,188(sp)
 80053c8:	b80b883a 	mov	r5,r23
 80053cc:	b00d883a 	mov	r6,r22
 80053d0:	800ca340 	call	800ca34 <__ssprint_r>
 80053d4:	1039ce1e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 80053d8:	d8802617 	ldw	r2,152(sp)
 80053dc:	db003317 	ldw	r12,204(sp)
 80053e0:	d8c02017 	ldw	r3,128(sp)
 80053e4:	da000404 	addi	r8,sp,16
 80053e8:	6085c83a 	sub	r2,r12,r2
 80053ec:	003e3706 	br	8004ccc <__alt_data_end+0xfc004ccc>
 80053f0:	00800184 	movi	r2,6
 80053f4:	1240012e 	bgeu	r2,r9,80053fc <___svfprintf_internal_r+0x1c0c>
 80053f8:	1013883a 	mov	r9,r2
 80053fc:	4825883a 	mov	r18,r9
 8005400:	4805883a 	mov	r2,r9
 8005404:	4800a416 	blt	r9,zero,8005698 <___svfprintf_internal_r+0x1ea8>
 8005408:	d8802a15 	stw	r2,168(sp)
 800540c:	008200b4 	movhi	r2,2050
 8005410:	10bdaf04 	addi	r2,r2,-2372
 8005414:	d8803115 	stw	r2,196(sp)
 8005418:	dcc02d15 	stw	r19,180(sp)
 800541c:	d8003215 	stw	zero,200(sp)
 8005420:	d8003415 	stw	zero,208(sp)
 8005424:	0005883a 	mov	r2,zero
 8005428:	003a3106 	br	8003cf0 <__alt_data_end+0xfc003cf0>
 800542c:	030200b4 	movhi	r12,2050
 8005430:	633db584 	addi	r12,r12,-2346
 8005434:	db003615 	stw	r12,216(sp)
 8005438:	003af406 	br	800400c <__alt_data_end+0xfc00400c>
 800543c:	d8c02617 	ldw	r3,152(sp)
 8005440:	00bfff44 	movi	r2,-3
 8005444:	18801516 	blt	r3,r2,800549c <___svfprintf_internal_r+0x1cac>
 8005448:	48c01416 	blt	r9,r3,800549c <___svfprintf_internal_r+0x1cac>
 800544c:	d8c03415 	stw	r3,208(sp)
 8005450:	040019c4 	movi	r16,103
 8005454:	003f4906 	br	800517c <__alt_data_end+0xfc00517c>
 8005458:	05400b44 	movi	r21,45
 800545c:	dd402785 	stb	r21,158(sp)
 8005460:	003b3a06 	br	800414c <__alt_data_end+0xfc00414c>
 8005464:	00c00b44 	movi	r3,45
 8005468:	d8802a15 	stw	r2,168(sp)
 800546c:	dc402d17 	ldw	r17,180(sp)
 8005470:	d8c02785 	stb	r3,158(sp)
 8005474:	dcc02d15 	stw	r19,180(sp)
 8005478:	d8003215 	stw	zero,200(sp)
 800547c:	00800b44 	movi	r2,45
 8005480:	003a1806 	br	8003ce4 <__alt_data_end+0xfc003ce4>
 8005484:	010200b4 	movhi	r4,2050
 8005488:	213db184 	addi	r4,r4,-2362
 800548c:	d9002b15 	stw	r4,172(sp)
 8005490:	003cc306 	br	80047a0 <__alt_data_end+0xfc0047a0>
 8005494:	5005883a 	mov	r2,r10
 8005498:	003f2d06 	br	8005150 <__alt_data_end+0xfc005150>
 800549c:	843fff84 	addi	r16,r16,-2
 80054a0:	1f3fffc4 	addi	fp,r3,-1
 80054a4:	df002615 	stw	fp,152(sp)
 80054a8:	dc0022c5 	stb	r16,139(sp)
 80054ac:	e000a216 	blt	fp,zero,8005738 <___svfprintf_internal_r+0x1f48>
 80054b0:	00800ac4 	movi	r2,43
 80054b4:	d8802305 	stb	r2,140(sp)
 80054b8:	00800244 	movi	r2,9
 80054bc:	1700820e 	bge	r2,fp,80056c8 <___svfprintf_internal_r+0x1ed8>
 80054c0:	dd4022c4 	addi	r21,sp,139
 80054c4:	dc002b15 	stw	r16,172(sp)
 80054c8:	8825883a 	mov	r18,r17
 80054cc:	a821883a 	mov	r16,r21
 80054d0:	4023883a 	mov	r17,r8
 80054d4:	e009883a 	mov	r4,fp
 80054d8:	01400284 	movi	r5,10
 80054dc:	80106400 	call	8010640 <__modsi3>
 80054e0:	10800c04 	addi	r2,r2,48
 80054e4:	843fffc4 	addi	r16,r16,-1
 80054e8:	e009883a 	mov	r4,fp
 80054ec:	01400284 	movi	r5,10
 80054f0:	80800005 	stb	r2,0(r16)
 80054f4:	80105ec0 	call	80105ec <__divsi3>
 80054f8:	1039883a 	mov	fp,r2
 80054fc:	00800244 	movi	r2,9
 8005500:	173ff416 	blt	r2,fp,80054d4 <__alt_data_end+0xfc0054d4>
 8005504:	8811883a 	mov	r8,r17
 8005508:	e0800c04 	addi	r2,fp,48
 800550c:	9023883a 	mov	r17,r18
 8005510:	8025883a 	mov	r18,r16
 8005514:	913fffc4 	addi	r4,r18,-1
 8005518:	90bfffc5 	stb	r2,-1(r18)
 800551c:	dc002b17 	ldw	r16,172(sp)
 8005520:	25408e2e 	bgeu	r4,r21,800575c <___svfprintf_internal_r+0x1f6c>
 8005524:	d9402384 	addi	r5,sp,142
 8005528:	2c8bc83a 	sub	r5,r5,r18
 800552c:	d8c02344 	addi	r3,sp,141
 8005530:	a94b883a 	add	r5,r21,r5
 8005534:	00000106 	br	800553c <___svfprintf_internal_r+0x1d4c>
 8005538:	20800003 	ldbu	r2,0(r4)
 800553c:	18800005 	stb	r2,0(r3)
 8005540:	18c00044 	addi	r3,r3,1
 8005544:	21000044 	addi	r4,r4,1
 8005548:	197ffb1e 	bne	r3,r5,8005538 <__alt_data_end+0xfc005538>
 800554c:	d8802304 	addi	r2,sp,140
 8005550:	1485c83a 	sub	r2,r2,r18
 8005554:	d8c02344 	addi	r3,sp,141
 8005558:	1885883a 	add	r2,r3,r2
 800555c:	dac03317 	ldw	r11,204(sp)
 8005560:	156bc83a 	sub	r21,r2,r21
 8005564:	dd403a15 	stw	r21,232(sp)
 8005568:	00800044 	movi	r2,1
 800556c:	5d65883a 	add	r18,r11,r21
 8005570:	12c0770e 	bge	r2,r11,8005750 <___svfprintf_internal_r+0x1f60>
 8005574:	94800044 	addi	r18,r18,1
 8005578:	9005883a 	mov	r2,r18
 800557c:	90007216 	blt	r18,zero,8005748 <___svfprintf_internal_r+0x1f58>
 8005580:	d8003415 	stw	zero,208(sp)
 8005584:	003f0506 	br	800519c <__alt_data_end+0xfc00519c>
 8005588:	da402a15 	stw	r9,168(sp)
 800558c:	dd402783 	ldbu	r21,158(sp)
 8005590:	4825883a 	mov	r18,r9
 8005594:	dcc02d15 	stw	r19,180(sp)
 8005598:	d8003215 	stw	zero,200(sp)
 800559c:	d8003415 	stw	zero,208(sp)
 80055a0:	0039cc06 	br	8003cd4 <__alt_data_end+0xfc003cd4>
 80055a4:	483eb01e 	bne	r9,zero,8005068 <__alt_data_end+0xfc005068>
 80055a8:	9013883a 	mov	r9,r18
 80055ac:	003eae06 	br	8005068 <__alt_data_end+0xfc005068>
 80055b0:	d9002f17 	ldw	r4,188(sp)
 80055b4:	b80b883a 	mov	r5,r23
 80055b8:	b00d883a 	mov	r6,r22
 80055bc:	800ca340 	call	800ca34 <__ssprint_r>
 80055c0:	1039531e 	bne	r2,zero,8003b10 <__alt_data_end+0xfc003b10>
 80055c4:	dc002617 	ldw	r16,152(sp)
 80055c8:	d8c02017 	ldw	r3,128(sp)
 80055cc:	d8801f17 	ldw	r2,124(sp)
 80055d0:	da000404 	addi	r8,sp,16
 80055d4:	003e6f06 	br	8004f94 <__alt_data_end+0xfc004f94>
 80055d8:	00c00b44 	movi	r3,45
 80055dc:	64a0003c 	xorhi	r18,r12,32768
 80055e0:	d8c02a05 	stb	r3,168(sp)
 80055e4:	003ea606 	br	8005080 <__alt_data_end+0xfc005080>
 80055e8:	4f000044 	addi	fp,r9,1
 80055ec:	003eab06 	br	800509c <__alt_data_end+0xfc00509c>
 80055f0:	d8c03417 	ldw	r3,208(sp)
 80055f4:	00c0410e 	bge	zero,r3,80056fc <___svfprintf_internal_r+0x1f0c>
 80055f8:	04800044 	movi	r18,1
 80055fc:	dac03317 	ldw	r11,204(sp)
 8005600:	92e5883a 	add	r18,r18,r11
 8005604:	9005883a 	mov	r2,r18
 8005608:	903ee40e 	bge	r18,zero,800519c <__alt_data_end+0xfc00519c>
 800560c:	0005883a 	mov	r2,zero
 8005610:	003ee206 	br	800519c <__alt_data_end+0xfc00519c>
 8005614:	d8c02617 	ldw	r3,152(sp)
 8005618:	d8c03415 	stw	r3,208(sp)
 800561c:	00c0310e 	bge	zero,r3,80056e4 <___svfprintf_internal_r+0x1ef4>
 8005620:	48001f1e 	bne	r9,zero,80056a0 <___svfprintf_internal_r+0x1eb0>
 8005624:	8c40004c 	andi	r17,r17,1
 8005628:	88001d1e 	bne	r17,zero,80056a0 <___svfprintf_internal_r+0x1eb0>
 800562c:	1805883a 	mov	r2,r3
 8005630:	183ed90e 	bge	r3,zero,8005198 <__alt_data_end+0xfc005198>
 8005634:	0005883a 	mov	r2,zero
 8005638:	003ed706 	br	8005198 <__alt_data_end+0xfc005198>
 800563c:	d8802117 	ldw	r2,132(sp)
 8005640:	003ec306 	br	8005150 <__alt_data_end+0xfc005150>
 8005644:	d9003717 	ldw	r4,220(sp)
 8005648:	900b883a 	mov	r5,r18
 800564c:	000d883a 	mov	r6,zero
 8005650:	000f883a 	mov	r7,zero
 8005654:	da004015 	stw	r8,256(sp)
 8005658:	da403f15 	stw	r9,252(sp)
 800565c:	da803e15 	stw	r10,248(sp)
 8005660:	8010f780 	call	8010f78 <__eqdf2>
 8005664:	da004017 	ldw	r8,256(sp)
 8005668:	da403f17 	ldw	r9,252(sp)
 800566c:	da803e17 	ldw	r10,248(sp)
 8005670:	103f2a26 	beq	r2,zero,800531c <__alt_data_end+0xfc00531c>
 8005674:	00800044 	movi	r2,1
 8005678:	1707c83a 	sub	r3,r2,fp
 800567c:	d8c02615 	stw	r3,152(sp)
 8005680:	003f2706 	br	8005320 <__alt_data_end+0xfc005320>
 8005684:	db003417 	ldw	r12,208(sp)
 8005688:	64800044 	addi	r18,r12,1
 800568c:	9005883a 	mov	r2,r18
 8005690:	903ec20e 	bge	r18,zero,800519c <__alt_data_end+0xfc00519c>
 8005694:	003fdd06 	br	800560c <__alt_data_end+0xfc00560c>
 8005698:	0005883a 	mov	r2,zero
 800569c:	003f5a06 	br	8005408 <__alt_data_end+0xfc005408>
 80056a0:	dac03417 	ldw	r11,208(sp)
 80056a4:	4a400044 	addi	r9,r9,1
 80056a8:	5a65883a 	add	r18,r11,r9
 80056ac:	9005883a 	mov	r2,r18
 80056b0:	903eba0e 	bge	r18,zero,800519c <__alt_data_end+0xfc00519c>
 80056b4:	003fd506 	br	800560c <__alt_data_end+0xfc00560c>
 80056b8:	008200b4 	movhi	r2,2050
 80056bc:	10bdb184 	addi	r2,r2,-2362
 80056c0:	d8802b15 	stw	r2,172(sp)
 80056c4:	003d2906 	br	8004b6c <__alt_data_end+0xfc004b6c>
 80056c8:	00800c04 	movi	r2,48
 80056cc:	e0c00c04 	addi	r3,fp,48
 80056d0:	d8802345 	stb	r2,141(sp)
 80056d4:	d8c02385 	stb	r3,142(sp)
 80056d8:	d88023c4 	addi	r2,sp,143
 80056dc:	dd4022c4 	addi	r21,sp,139
 80056e0:	003f9e06 	br	800555c <__alt_data_end+0xfc00555c>
 80056e4:	4800081e 	bne	r9,zero,8005708 <___svfprintf_internal_r+0x1f18>
 80056e8:	8c40004c 	andi	r17,r17,1
 80056ec:	8800061e 	bne	r17,zero,8005708 <___svfprintf_internal_r+0x1f18>
 80056f0:	00800044 	movi	r2,1
 80056f4:	1025883a 	mov	r18,r2
 80056f8:	003ea806 	br	800519c <__alt_data_end+0xfc00519c>
 80056fc:	04800084 	movi	r18,2
 8005700:	90e5c83a 	sub	r18,r18,r3
 8005704:	003fbd06 	br	80055fc <__alt_data_end+0xfc0055fc>
 8005708:	4c800084 	addi	r18,r9,2
 800570c:	9005883a 	mov	r2,r18
 8005710:	903ea20e 	bge	r18,zero,800519c <__alt_data_end+0xfc00519c>
 8005714:	003fbd06 	br	800560c <__alt_data_end+0xfc00560c>
 8005718:	dac02d17 	ldw	r11,180(sp)
 800571c:	5a400017 	ldw	r9,0(r11)
 8005720:	5ac00104 	addi	r11,r11,4
 8005724:	dac02d15 	stw	r11,180(sp)
 8005728:	483e3f0e 	bge	r9,zero,8005028 <__alt_data_end+0xfc005028>
 800572c:	027fffc4 	movi	r9,-1
 8005730:	1c000047 	ldb	r16,1(r3)
 8005734:	00388406 	br	8003948 <__alt_data_end+0xfc003948>
 8005738:	00800b44 	movi	r2,45
 800573c:	0739c83a 	sub	fp,zero,fp
 8005740:	d8802305 	stb	r2,140(sp)
 8005744:	003f5c06 	br	80054b8 <__alt_data_end+0xfc0054b8>
 8005748:	0005883a 	mov	r2,zero
 800574c:	003f8c06 	br	8005580 <__alt_data_end+0xfc005580>
 8005750:	88a2703a 	and	r17,r17,r2
 8005754:	883f8826 	beq	r17,zero,8005578 <__alt_data_end+0xfc005578>
 8005758:	003f8606 	br	8005574 <__alt_data_end+0xfc005574>
 800575c:	d8802344 	addi	r2,sp,141
 8005760:	003f7e06 	br	800555c <__alt_data_end+0xfc00555c>
 8005764:	d8c02617 	ldw	r3,152(sp)
 8005768:	003f4d06 	br	80054a0 <__alt_data_end+0xfc0054a0>
 800576c:	dac02f17 	ldw	r11,188(sp)
 8005770:	00800304 	movi	r2,12
 8005774:	58800015 	stw	r2,0(r11)
 8005778:	00bfffc4 	movi	r2,-1
 800577c:	0038e806 	br	8003b20 <__alt_data_end+0xfc003b20>

08005780 <___vfprintf_internal_r>:
 8005780:	defeb604 	addi	sp,sp,-1320
 8005784:	dfc14915 	stw	ra,1316(sp)
 8005788:	ddc14715 	stw	r23,1308(sp)
 800578c:	dd814615 	stw	r22,1304(sp)
 8005790:	282f883a 	mov	r23,r5
 8005794:	202d883a 	mov	r22,r4
 8005798:	d9812a15 	stw	r6,1192(sp)
 800579c:	d9c12d15 	stw	r7,1204(sp)
 80057a0:	df014815 	stw	fp,1312(sp)
 80057a4:	dd414515 	stw	r21,1300(sp)
 80057a8:	dd014415 	stw	r20,1296(sp)
 80057ac:	dcc14315 	stw	r19,1292(sp)
 80057b0:	dc814215 	stw	r18,1288(sp)
 80057b4:	dc414115 	stw	r17,1284(sp)
 80057b8:	dc014015 	stw	r16,1280(sp)
 80057bc:	800a2c40 	call	800a2c4 <_localeconv_r>
 80057c0:	10800017 	ldw	r2,0(r2)
 80057c4:	1009883a 	mov	r4,r2
 80057c8:	d8813515 	stw	r2,1236(sp)
 80057cc:	80037580 	call	8003758 <strlen>
 80057d0:	d8813815 	stw	r2,1248(sp)
 80057d4:	b0000226 	beq	r22,zero,80057e0 <___vfprintf_internal_r+0x60>
 80057d8:	b0800e17 	ldw	r2,56(r22)
 80057dc:	10010426 	beq	r2,zero,8005bf0 <___vfprintf_internal_r+0x470>
 80057e0:	b8c0030b 	ldhu	r3,12(r23)
 80057e4:	1908000c 	andi	r4,r3,8192
 80057e8:	1805883a 	mov	r2,r3
 80057ec:	2000071e 	bne	r4,zero,800580c <___vfprintf_internal_r+0x8c>
 80057f0:	b9001917 	ldw	r4,100(r23)
 80057f4:	18880014 	ori	r2,r3,8192
 80057f8:	00f7ffc4 	movi	r3,-8193
 80057fc:	20c8703a 	and	r4,r4,r3
 8005800:	b880030d 	sth	r2,12(r23)
 8005804:	1007883a 	mov	r3,r2
 8005808:	b9001915 	stw	r4,100(r23)
 800580c:	1100020c 	andi	r4,r2,8
 8005810:	2000a726 	beq	r4,zero,8005ab0 <___vfprintf_internal_r+0x330>
 8005814:	b9000417 	ldw	r4,16(r23)
 8005818:	2000a526 	beq	r4,zero,8005ab0 <___vfprintf_internal_r+0x330>
 800581c:	1080068c 	andi	r2,r2,26
 8005820:	01000284 	movi	r4,10
 8005824:	1100ab26 	beq	r2,r4,8005ad4 <___vfprintf_internal_r+0x354>
 8005828:	dac10e04 	addi	r11,sp,1080
 800582c:	db010dc4 	addi	r12,sp,1079
 8005830:	d8800404 	addi	r2,sp,16
 8005834:	050200b4 	movhi	r20,2050
 8005838:	dac12815 	stw	r11,1184(sp)
 800583c:	5b17c83a 	sub	r11,r11,r12
 8005840:	a53db984 	addi	r20,r20,-2330
 8005844:	db012915 	stw	r12,1188(sp)
 8005848:	d8811e15 	stw	r2,1144(sp)
 800584c:	d8012015 	stw	zero,1152(sp)
 8005850:	d8011f15 	stw	zero,1148(sp)
 8005854:	d8013315 	stw	zero,1228(sp)
 8005858:	d8013715 	stw	zero,1244(sp)
 800585c:	d8013915 	stw	zero,1252(sp)
 8005860:	d8013b15 	stw	zero,1260(sp)
 8005864:	d8013a15 	stw	zero,1256(sp)
 8005868:	d8012f15 	stw	zero,1212(sp)
 800586c:	1011883a 	mov	r8,r2
 8005870:	dac13c15 	stw	r11,1264(sp)
 8005874:	db012a17 	ldw	r12,1192(sp)
 8005878:	60800007 	ldb	r2,0(r12)
 800587c:	1000df26 	beq	r2,zero,8005bfc <___vfprintf_internal_r+0x47c>
 8005880:	00c00944 	movi	r3,37
 8005884:	10c0dd26 	beq	r2,r3,8005bfc <___vfprintf_internal_r+0x47c>
 8005888:	6021883a 	mov	r16,r12
 800588c:	00000106 	br	8005894 <___vfprintf_internal_r+0x114>
 8005890:	10c08426 	beq	r2,r3,8005aa4 <___vfprintf_internal_r+0x324>
 8005894:	84000044 	addi	r16,r16,1
 8005898:	80800007 	ldb	r2,0(r16)
 800589c:	103ffc1e 	bne	r2,zero,8005890 <__alt_data_end+0xfc005890>
 80058a0:	dac12a17 	ldw	r11,1192(sp)
 80058a4:	82e3c83a 	sub	r17,r16,r11
 80058a8:	88000f26 	beq	r17,zero,80058e8 <___vfprintf_internal_r+0x168>
 80058ac:	d8c12017 	ldw	r3,1152(sp)
 80058b0:	d8811f17 	ldw	r2,1148(sp)
 80058b4:	dac12a17 	ldw	r11,1192(sp)
 80058b8:	1c47883a 	add	r3,r3,r17
 80058bc:	10800044 	addi	r2,r2,1
 80058c0:	d8c12015 	stw	r3,1152(sp)
 80058c4:	42c00015 	stw	r11,0(r8)
 80058c8:	44400115 	stw	r17,4(r8)
 80058cc:	d8811f15 	stw	r2,1148(sp)
 80058d0:	00c001c4 	movi	r3,7
 80058d4:	1880b416 	blt	r3,r2,8005ba8 <___vfprintf_internal_r+0x428>
 80058d8:	42000204 	addi	r8,r8,8
 80058dc:	db012f17 	ldw	r12,1212(sp)
 80058e0:	6459883a 	add	r12,r12,r17
 80058e4:	db012f15 	stw	r12,1212(sp)
 80058e8:	80800007 	ldb	r2,0(r16)
 80058ec:	1000b526 	beq	r2,zero,8005bc4 <___vfprintf_internal_r+0x444>
 80058f0:	80800044 	addi	r2,r16,1
 80058f4:	84000047 	ldb	r16,1(r16)
 80058f8:	d8012785 	stb	zero,1182(sp)
 80058fc:	000d883a 	mov	r6,zero
 8005900:	027fffc4 	movi	r9,-1
 8005904:	d8012e15 	stw	zero,1208(sp)
 8005908:	0023883a 	mov	r17,zero
 800590c:	01001604 	movi	r4,88
 8005910:	01400244 	movi	r5,9
 8005914:	02800a84 	movi	r10,42
 8005918:	01c01b04 	movi	r7,108
 800591c:	10c00044 	addi	r3,r2,1
 8005920:	80bff804 	addi	r2,r16,-32
 8005924:	2082f236 	bltu	r4,r2,80064f0 <___vfprintf_internal_r+0xd70>
 8005928:	100490ba 	slli	r2,r2,2
 800592c:	02c20034 	movhi	r11,2048
 8005930:	5ad65004 	addi	r11,r11,22848
 8005934:	12c5883a 	add	r2,r2,r11
 8005938:	10800017 	ldw	r2,0(r2)
 800593c:	1000683a 	jmp	r2
 8005940:	08006338 	rdprs	zero,at,396
 8005944:	080064f0 	cmpltui	zero,at,403
 8005948:	080064f0 	cmpltui	zero,at,403
 800594c:	08006358 	cmpnei	zero,at,397
 8005950:	080064f0 	cmpltui	zero,at,403
 8005954:	080064f0 	cmpltui	zero,at,403
 8005958:	080064f0 	cmpltui	zero,at,403
 800595c:	080064f0 	cmpltui	zero,at,403
 8005960:	080064f0 	cmpltui	zero,at,403
 8005964:	080064f0 	cmpltui	zero,at,403
 8005968:	080064b4 	orhi	zero,at,402
 800596c:	080064e0 	cmpeqi	zero,at,403
 8005970:	080064f0 	cmpltui	zero,at,403
 8005974:	08005c04 	addi	zero,at,368
 8005978:	08005c14 	ori	zero,at,368
 800597c:	080064f0 	cmpltui	zero,at,403
 8005980:	08005c54 	ori	zero,at,369
 8005984:	08006148 	cmpgei	zero,at,389
 8005988:	08006148 	cmpgei	zero,at,389
 800598c:	08006148 	cmpgei	zero,at,389
 8005990:	08006148 	cmpgei	zero,at,389
 8005994:	08006148 	cmpgei	zero,at,389
 8005998:	08006148 	cmpgei	zero,at,389
 800599c:	08006148 	cmpgei	zero,at,389
 80059a0:	08006148 	cmpgei	zero,at,389
 80059a4:	08006148 	cmpgei	zero,at,389
 80059a8:	080064f0 	cmpltui	zero,at,403
 80059ac:	080064f0 	cmpltui	zero,at,403
 80059b0:	080064f0 	cmpltui	zero,at,403
 80059b4:	080064f0 	cmpltui	zero,at,403
 80059b8:	080064f0 	cmpltui	zero,at,403
 80059bc:	080064f0 	cmpltui	zero,at,403
 80059c0:	080064f0 	cmpltui	zero,at,403
 80059c4:	080064f0 	cmpltui	zero,at,403
 80059c8:	080064f0 	cmpltui	zero,at,403
 80059cc:	080064f0 	cmpltui	zero,at,403
 80059d0:	0800617c 	xorhi	zero,at,389
 80059d4:	08005c64 	muli	zero,at,369
 80059d8:	080064f0 	cmpltui	zero,at,403
 80059dc:	08005c64 	muli	zero,at,369
 80059e0:	080064f0 	cmpltui	zero,at,403
 80059e4:	080064f0 	cmpltui	zero,at,403
 80059e8:	080064f0 	cmpltui	zero,at,403
 80059ec:	080064f0 	cmpltui	zero,at,403
 80059f0:	08005d08 	cmpgei	zero,at,372
 80059f4:	080064f0 	cmpltui	zero,at,403
 80059f8:	080064f0 	cmpltui	zero,at,403
 80059fc:	08005d18 	cmpnei	zero,at,372
 8005a00:	080064f0 	cmpltui	zero,at,403
 8005a04:	080064f0 	cmpltui	zero,at,403
 8005a08:	080064f0 	cmpltui	zero,at,403
 8005a0c:	080064f0 	cmpltui	zero,at,403
 8005a10:	080064f0 	cmpltui	zero,at,403
 8005a14:	08006114 	ori	zero,at,388
 8005a18:	080064f0 	cmpltui	zero,at,403
 8005a1c:	080064f0 	cmpltui	zero,at,403
 8005a20:	080061c4 	addi	zero,at,391
 8005a24:	080064f0 	cmpltui	zero,at,403
 8005a28:	080064f0 	cmpltui	zero,at,403
 8005a2c:	080064f0 	cmpltui	zero,at,403
 8005a30:	080064f0 	cmpltui	zero,at,403
 8005a34:	080064f0 	cmpltui	zero,at,403
 8005a38:	080064f0 	cmpltui	zero,at,403
 8005a3c:	080064f0 	cmpltui	zero,at,403
 8005a40:	080064f0 	cmpltui	zero,at,403
 8005a44:	080064f0 	cmpltui	zero,at,403
 8005a48:	080064f0 	cmpltui	zero,at,403
 8005a4c:	080063b8 	rdprs	zero,at,398
 8005a50:	08006368 	cmpgeui	zero,at,397
 8005a54:	08005c64 	muli	zero,at,369
 8005a58:	08005c64 	muli	zero,at,369
 8005a5c:	08005c64 	muli	zero,at,369
 8005a60:	080063a8 	cmpgeui	zero,at,398
 8005a64:	08006368 	cmpgeui	zero,at,397
 8005a68:	080064f0 	cmpltui	zero,at,403
 8005a6c:	080064f0 	cmpltui	zero,at,403
 8005a70:	080062b0 	cmpltui	zero,at,394
 8005a74:	080064f0 	cmpltui	zero,at,403
 8005a78:	080062c4 	addi	zero,at,395
 8005a7c:	080062f8 	rdprs	zero,at,395
 8005a80:	080063f8 	rdprs	zero,at,399
 8005a84:	08006220 	cmpeqi	zero,at,392
 8005a88:	080064f0 	cmpltui	zero,at,403
 8005a8c:	08006440 	call	800644 <__alt_mem_sdram-0x77ff9bc>
 8005a90:	080064f0 	cmpltui	zero,at,403
 8005a94:	08006230 	cmpltui	zero,at,392
 8005a98:	080064f0 	cmpltui	zero,at,403
 8005a9c:	080064f0 	cmpltui	zero,at,403
 8005aa0:	08006270 	cmpltui	zero,at,393
 8005aa4:	db012a17 	ldw	r12,1192(sp)
 8005aa8:	8323c83a 	sub	r17,r16,r12
 8005aac:	003f7e06 	br	80058a8 <__alt_data_end+0xfc0058a8>
 8005ab0:	b009883a 	mov	r4,r22
 8005ab4:	b80b883a 	mov	r5,r23
 8005ab8:	80077a00 	call	80077a0 <__swsetup_r>
 8005abc:	10002d1e 	bne	r2,zero,8005b74 <___vfprintf_internal_r+0x3f4>
 8005ac0:	b8c0030b 	ldhu	r3,12(r23)
 8005ac4:	01000284 	movi	r4,10
 8005ac8:	1805883a 	mov	r2,r3
 8005acc:	1080068c 	andi	r2,r2,26
 8005ad0:	113f551e 	bne	r2,r4,8005828 <__alt_data_end+0xfc005828>
 8005ad4:	b880038b 	ldhu	r2,14(r23)
 8005ad8:	113fffcc 	andi	r4,r2,65535
 8005adc:	2120001c 	xori	r4,r4,32768
 8005ae0:	21200004 	addi	r4,r4,-32768
 8005ae4:	203f5016 	blt	r4,zero,8005828 <__alt_data_end+0xfc005828>
 8005ae8:	bac01917 	ldw	r11,100(r23)
 8005aec:	ba800717 	ldw	r10,28(r23)
 8005af0:	ba400917 	ldw	r9,36(r23)
 8005af4:	d9812a17 	ldw	r6,1192(sp)
 8005af8:	d9c12d17 	ldw	r7,1204(sp)
 8005afc:	02010004 	movi	r8,1024
 8005b00:	18ffff4c 	andi	r3,r3,65533
 8005b04:	d881078d 	sth	r2,1054(sp)
 8005b08:	b009883a 	mov	r4,r22
 8005b0c:	d8800404 	addi	r2,sp,16
 8005b10:	d9410404 	addi	r5,sp,1040
 8005b14:	d8c1070d 	sth	r3,1052(sp)
 8005b18:	dac11d15 	stw	r11,1140(sp)
 8005b1c:	da810b15 	stw	r10,1068(sp)
 8005b20:	da410d15 	stw	r9,1076(sp)
 8005b24:	d8810415 	stw	r2,1040(sp)
 8005b28:	d8810815 	stw	r2,1056(sp)
 8005b2c:	da010615 	stw	r8,1048(sp)
 8005b30:	da010915 	stw	r8,1060(sp)
 8005b34:	d8010a15 	stw	zero,1064(sp)
 8005b38:	80057800 	call	8005780 <___vfprintf_internal_r>
 8005b3c:	1021883a 	mov	r16,r2
 8005b40:	10000416 	blt	r2,zero,8005b54 <___vfprintf_internal_r+0x3d4>
 8005b44:	b009883a 	mov	r4,r22
 8005b48:	d9410404 	addi	r5,sp,1040
 8005b4c:	80091f80 	call	80091f8 <_fflush_r>
 8005b50:	1006ee1e 	bne	r2,zero,800770c <___vfprintf_internal_r+0x1f8c>
 8005b54:	d881070b 	ldhu	r2,1052(sp)
 8005b58:	1080100c 	andi	r2,r2,64
 8005b5c:	10000326 	beq	r2,zero,8005b6c <___vfprintf_internal_r+0x3ec>
 8005b60:	b880030b 	ldhu	r2,12(r23)
 8005b64:	10801014 	ori	r2,r2,64
 8005b68:	b880030d 	sth	r2,12(r23)
 8005b6c:	8005883a 	mov	r2,r16
 8005b70:	00000106 	br	8005b78 <___vfprintf_internal_r+0x3f8>
 8005b74:	00bfffc4 	movi	r2,-1
 8005b78:	dfc14917 	ldw	ra,1316(sp)
 8005b7c:	df014817 	ldw	fp,1312(sp)
 8005b80:	ddc14717 	ldw	r23,1308(sp)
 8005b84:	dd814617 	ldw	r22,1304(sp)
 8005b88:	dd414517 	ldw	r21,1300(sp)
 8005b8c:	dd014417 	ldw	r20,1296(sp)
 8005b90:	dcc14317 	ldw	r19,1292(sp)
 8005b94:	dc814217 	ldw	r18,1288(sp)
 8005b98:	dc414117 	ldw	r17,1284(sp)
 8005b9c:	dc014017 	ldw	r16,1280(sp)
 8005ba0:	dec14a04 	addi	sp,sp,1320
 8005ba4:	f800283a 	ret
 8005ba8:	b009883a 	mov	r4,r22
 8005bac:	b80b883a 	mov	r5,r23
 8005bb0:	d9811e04 	addi	r6,sp,1144
 8005bb4:	800dd600 	call	800dd60 <__sprint_r>
 8005bb8:	1000081e 	bne	r2,zero,8005bdc <___vfprintf_internal_r+0x45c>
 8005bbc:	da000404 	addi	r8,sp,16
 8005bc0:	003f4606 	br	80058dc <__alt_data_end+0xfc0058dc>
 8005bc4:	d8812017 	ldw	r2,1152(sp)
 8005bc8:	10000426 	beq	r2,zero,8005bdc <___vfprintf_internal_r+0x45c>
 8005bcc:	b009883a 	mov	r4,r22
 8005bd0:	b80b883a 	mov	r5,r23
 8005bd4:	d9811e04 	addi	r6,sp,1144
 8005bd8:	800dd600 	call	800dd60 <__sprint_r>
 8005bdc:	b880030b 	ldhu	r2,12(r23)
 8005be0:	1080100c 	andi	r2,r2,64
 8005be4:	103fe31e 	bne	r2,zero,8005b74 <__alt_data_end+0xfc005b74>
 8005be8:	d8812f17 	ldw	r2,1212(sp)
 8005bec:	003fe206 	br	8005b78 <__alt_data_end+0xfc005b78>
 8005bf0:	b009883a 	mov	r4,r22
 8005bf4:	80097a00 	call	80097a0 <__sinit>
 8005bf8:	003ef906 	br	80057e0 <__alt_data_end+0xfc0057e0>
 8005bfc:	dc012a17 	ldw	r16,1192(sp)
 8005c00:	003f3906 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005c04:	1805883a 	mov	r2,r3
 8005c08:	8c400114 	ori	r17,r17,4
 8005c0c:	1c000007 	ldb	r16,0(r3)
 8005c10:	003f4206 	br	800591c <__alt_data_end+0xfc00591c>
 8005c14:	1c000007 	ldb	r16,0(r3)
 8005c18:	18800044 	addi	r2,r3,1
 8005c1c:	8286b326 	beq	r16,r10,80076ec <___vfprintf_internal_r+0x1f6c>
 8005c20:	82fff404 	addi	r11,r16,-48
 8005c24:	1007883a 	mov	r3,r2
 8005c28:	0013883a 	mov	r9,zero
 8005c2c:	2aff3c36 	bltu	r5,r11,8005920 <__alt_data_end+0xfc005920>
 8005c30:	1c000007 	ldb	r16,0(r3)
 8005c34:	4a4002a4 	muli	r9,r9,10
 8005c38:	18c00044 	addi	r3,r3,1
 8005c3c:	5a53883a 	add	r9,r11,r9
 8005c40:	82fff404 	addi	r11,r16,-48
 8005c44:	2afffa2e 	bgeu	r5,r11,8005c30 <__alt_data_end+0xfc005c30>
 8005c48:	483f350e 	bge	r9,zero,8005920 <__alt_data_end+0xfc005920>
 8005c4c:	027fffc4 	movi	r9,-1
 8005c50:	003f3306 	br	8005920 <__alt_data_end+0xfc005920>
 8005c54:	8c402014 	ori	r17,r17,128
 8005c58:	1805883a 	mov	r2,r3
 8005c5c:	1c000007 	ldb	r16,0(r3)
 8005c60:	003f2e06 	br	800591c <__alt_data_end+0xfc00591c>
 8005c64:	db012d17 	ldw	r12,1204(sp)
 8005c68:	dac12d17 	ldw	r11,1204(sp)
 8005c6c:	d8c12a15 	stw	r3,1192(sp)
 8005c70:	63000017 	ldw	r12,0(r12)
 8005c74:	5ac00117 	ldw	r11,4(r11)
 8005c78:	d9812785 	stb	r6,1182(sp)
 8005c7c:	6009883a 	mov	r4,r12
 8005c80:	580b883a 	mov	r5,r11
 8005c84:	db013715 	stw	r12,1244(sp)
 8005c88:	da013f15 	stw	r8,1276(sp)
 8005c8c:	da413e15 	stw	r9,1272(sp)
 8005c90:	dac13915 	stw	r11,1252(sp)
 8005c94:	800c78c0 	call	800c78c <__fpclassifyd>
 8005c98:	db012d17 	ldw	r12,1204(sp)
 8005c9c:	04800044 	movi	r18,1
 8005ca0:	da013f17 	ldw	r8,1276(sp)
 8005ca4:	64c00204 	addi	r19,r12,8
 8005ca8:	da413e17 	ldw	r9,1272(sp)
 8005cac:	d9013717 	ldw	r4,1244(sp)
 8005cb0:	d9413917 	ldw	r5,1252(sp)
 8005cb4:	1484581e 	bne	r2,r18,8006e18 <___vfprintf_internal_r+0x1698>
 8005cb8:	000d883a 	mov	r6,zero
 8005cbc:	000f883a 	mov	r7,zero
 8005cc0:	80032a40 	call	80032a4 <__ledf2>
 8005cc4:	da013f17 	ldw	r8,1276(sp)
 8005cc8:	1005ef16 	blt	r2,zero,8007488 <___vfprintf_internal_r+0x1d08>
 8005ccc:	dd412783 	ldbu	r21,1182(sp)
 8005cd0:	008011c4 	movi	r2,71
 8005cd4:	14053b0e 	bge	r2,r16,80071c4 <___vfprintf_internal_r+0x1a44>
 8005cd8:	00c200b4 	movhi	r3,2050
 8005cdc:	18fda204 	addi	r3,r3,-2424
 8005ce0:	d8c13115 	stw	r3,1220(sp)
 8005ce4:	02c000c4 	movi	r11,3
 8005ce8:	00bfdfc4 	movi	r2,-129
 8005cec:	dac12b15 	stw	r11,1196(sp)
 8005cf0:	88a2703a 	and	r17,r17,r2
 8005cf4:	dcc12d15 	stw	r19,1204(sp)
 8005cf8:	5825883a 	mov	r18,r11
 8005cfc:	d8013215 	stw	zero,1224(sp)
 8005d00:	d8013415 	stw	zero,1232(sp)
 8005d04:	00003206 	br	8005dd0 <___vfprintf_internal_r+0x650>
 8005d08:	8c400214 	ori	r17,r17,8
 8005d0c:	1805883a 	mov	r2,r3
 8005d10:	1c000007 	ldb	r16,0(r3)
 8005d14:	003f0106 	br	800591c <__alt_data_end+0xfc00591c>
 8005d18:	8c400414 	ori	r17,r17,16
 8005d1c:	d8c12a15 	stw	r3,1192(sp)
 8005d20:	88c0080c 	andi	r3,r17,32
 8005d24:	d8812d17 	ldw	r2,1204(sp)
 8005d28:	18017726 	beq	r3,zero,8006308 <___vfprintf_internal_r+0xb88>
 8005d2c:	db012d17 	ldw	r12,1204(sp)
 8005d30:	14c00017 	ldw	r19,0(r2)
 8005d34:	17000117 	ldw	fp,4(r2)
 8005d38:	63000204 	addi	r12,r12,8
 8005d3c:	db012d15 	stw	r12,1204(sp)
 8005d40:	0005883a 	mov	r2,zero
 8005d44:	9f06b03a 	or	r3,r19,fp
 8005d48:	d8012785 	stb	zero,1182(sp)
 8005d4c:	da413215 	stw	r9,1224(sp)
 8005d50:	002b883a 	mov	r21,zero
 8005d54:	48000216 	blt	r9,zero,8005d60 <___vfprintf_internal_r+0x5e0>
 8005d58:	013fdfc4 	movi	r4,-129
 8005d5c:	8922703a 	and	r17,r17,r4
 8005d60:	1801ed1e 	bne	r3,zero,8006518 <___vfprintf_internal_r+0xd98>
 8005d64:	4802e026 	beq	r9,zero,80068e8 <___vfprintf_internal_r+0x1168>
 8005d68:	10803fcc 	andi	r2,r2,255
 8005d6c:	00c00044 	movi	r3,1
 8005d70:	10c20f26 	beq	r2,r3,80065b0 <___vfprintf_internal_r+0xe30>
 8005d74:	00c00084 	movi	r3,2
 8005d78:	10c2fd26 	beq	r2,r3,8006970 <___vfprintf_internal_r+0x11f0>
 8005d7c:	d8c10e04 	addi	r3,sp,1080
 8005d80:	9808d0fa 	srli	r4,r19,3
 8005d84:	e00a977a 	slli	r5,fp,29
 8005d88:	e038d0fa 	srli	fp,fp,3
 8005d8c:	9cc001cc 	andi	r19,r19,7
 8005d90:	98800c04 	addi	r2,r19,48
 8005d94:	18ffffc4 	addi	r3,r3,-1
 8005d98:	2926b03a 	or	r19,r5,r4
 8005d9c:	18800005 	stb	r2,0(r3)
 8005da0:	9f08b03a 	or	r4,r19,fp
 8005da4:	203ff61e 	bne	r4,zero,8005d80 <__alt_data_end+0xfc005d80>
 8005da8:	8900004c 	andi	r4,r17,1
 8005dac:	d8c13115 	stw	r3,1220(sp)
 8005db0:	2003791e 	bne	r4,zero,8006b98 <___vfprintf_internal_r+0x1418>
 8005db4:	dac12817 	ldw	r11,1184(sp)
 8005db8:	58e5c83a 	sub	r18,r11,r3
 8005dbc:	9005883a 	mov	r2,r18
 8005dc0:	9240010e 	bge	r18,r9,8005dc8 <___vfprintf_internal_r+0x648>
 8005dc4:	4805883a 	mov	r2,r9
 8005dc8:	d8812b15 	stw	r2,1196(sp)
 8005dcc:	d8013415 	stw	zero,1232(sp)
 8005dd0:	a8803fcc 	andi	r2,r21,255
 8005dd4:	1080201c 	xori	r2,r2,128
 8005dd8:	10bfe004 	addi	r2,r2,-128
 8005ddc:	10000326 	beq	r2,zero,8005dec <___vfprintf_internal_r+0x66c>
 8005de0:	db012b17 	ldw	r12,1196(sp)
 8005de4:	63000044 	addi	r12,r12,1
 8005de8:	db012b15 	stw	r12,1196(sp)
 8005dec:	88c0008c 	andi	r3,r17,2
 8005df0:	d8c12c15 	stw	r3,1200(sp)
 8005df4:	18000326 	beq	r3,zero,8005e04 <___vfprintf_internal_r+0x684>
 8005df8:	dac12b17 	ldw	r11,1196(sp)
 8005dfc:	5ac00084 	addi	r11,r11,2
 8005e00:	dac12b15 	stw	r11,1196(sp)
 8005e04:	8b00210c 	andi	r12,r17,132
 8005e08:	db013015 	stw	r12,1216(sp)
 8005e0c:	6001c01e 	bne	r12,zero,8006510 <___vfprintf_internal_r+0xd90>
 8005e10:	dac12e17 	ldw	r11,1208(sp)
 8005e14:	db012b17 	ldw	r12,1196(sp)
 8005e18:	5b39c83a 	sub	fp,r11,r12
 8005e1c:	0701bc0e 	bge	zero,fp,8006510 <___vfprintf_internal_r+0xd90>
 8005e20:	02400404 	movi	r9,16
 8005e24:	d8c12017 	ldw	r3,1152(sp)
 8005e28:	d8811f17 	ldw	r2,1148(sp)
 8005e2c:	4f05220e 	bge	r9,fp,80072b8 <___vfprintf_internal_r+0x1b38>
 8005e30:	014200b4 	movhi	r5,2050
 8005e34:	297dbd84 	addi	r5,r5,-2314
 8005e38:	d9413615 	stw	r5,1240(sp)
 8005e3c:	482b883a 	mov	r21,r9
 8005e40:	04c001c4 	movi	r19,7
 8005e44:	00000306 	br	8005e54 <___vfprintf_internal_r+0x6d4>
 8005e48:	e73ffc04 	addi	fp,fp,-16
 8005e4c:	42000204 	addi	r8,r8,8
 8005e50:	af00130e 	bge	r21,fp,8005ea0 <___vfprintf_internal_r+0x720>
 8005e54:	02c200b4 	movhi	r11,2050
 8005e58:	18c00404 	addi	r3,r3,16
 8005e5c:	10800044 	addi	r2,r2,1
 8005e60:	5afdbd84 	addi	r11,r11,-2314
 8005e64:	42c00015 	stw	r11,0(r8)
 8005e68:	45400115 	stw	r21,4(r8)
 8005e6c:	d8c12015 	stw	r3,1152(sp)
 8005e70:	d8811f15 	stw	r2,1148(sp)
 8005e74:	98bff40e 	bge	r19,r2,8005e48 <__alt_data_end+0xfc005e48>
 8005e78:	b009883a 	mov	r4,r22
 8005e7c:	b80b883a 	mov	r5,r23
 8005e80:	d9811e04 	addi	r6,sp,1144
 8005e84:	800dd600 	call	800dd60 <__sprint_r>
 8005e88:	103f541e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8005e8c:	e73ffc04 	addi	fp,fp,-16
 8005e90:	d8c12017 	ldw	r3,1152(sp)
 8005e94:	d8811f17 	ldw	r2,1148(sp)
 8005e98:	da000404 	addi	r8,sp,16
 8005e9c:	af3fed16 	blt	r21,fp,8005e54 <__alt_data_end+0xfc005e54>
 8005ea0:	db013617 	ldw	r12,1240(sp)
 8005ea4:	e0c7883a 	add	r3,fp,r3
 8005ea8:	10800044 	addi	r2,r2,1
 8005eac:	43000015 	stw	r12,0(r8)
 8005eb0:	47000115 	stw	fp,4(r8)
 8005eb4:	d8c12015 	stw	r3,1152(sp)
 8005eb8:	d8811f15 	stw	r2,1148(sp)
 8005ebc:	010001c4 	movi	r4,7
 8005ec0:	2082f416 	blt	r4,r2,8006a94 <___vfprintf_internal_r+0x1314>
 8005ec4:	d8812787 	ldb	r2,1182(sp)
 8005ec8:	42000204 	addi	r8,r8,8
 8005ecc:	10000c26 	beq	r2,zero,8005f00 <___vfprintf_internal_r+0x780>
 8005ed0:	d8811f17 	ldw	r2,1148(sp)
 8005ed4:	d9012784 	addi	r4,sp,1182
 8005ed8:	18c00044 	addi	r3,r3,1
 8005edc:	10800044 	addi	r2,r2,1
 8005ee0:	41000015 	stw	r4,0(r8)
 8005ee4:	01000044 	movi	r4,1
 8005ee8:	41000115 	stw	r4,4(r8)
 8005eec:	d8c12015 	stw	r3,1152(sp)
 8005ef0:	d8811f15 	stw	r2,1148(sp)
 8005ef4:	010001c4 	movi	r4,7
 8005ef8:	20828d16 	blt	r4,r2,8006930 <___vfprintf_internal_r+0x11b0>
 8005efc:	42000204 	addi	r8,r8,8
 8005f00:	dac12c17 	ldw	r11,1200(sp)
 8005f04:	58000c26 	beq	r11,zero,8005f38 <___vfprintf_internal_r+0x7b8>
 8005f08:	d8811f17 	ldw	r2,1148(sp)
 8005f0c:	d9012704 	addi	r4,sp,1180
 8005f10:	18c00084 	addi	r3,r3,2
 8005f14:	10800044 	addi	r2,r2,1
 8005f18:	41000015 	stw	r4,0(r8)
 8005f1c:	01000084 	movi	r4,2
 8005f20:	41000115 	stw	r4,4(r8)
 8005f24:	d8c12015 	stw	r3,1152(sp)
 8005f28:	d8811f15 	stw	r2,1148(sp)
 8005f2c:	010001c4 	movi	r4,7
 8005f30:	20828716 	blt	r4,r2,8006950 <___vfprintf_internal_r+0x11d0>
 8005f34:	42000204 	addi	r8,r8,8
 8005f38:	db013017 	ldw	r12,1216(sp)
 8005f3c:	00802004 	movi	r2,128
 8005f40:	6081e926 	beq	r12,r2,80066e8 <___vfprintf_internal_r+0xf68>
 8005f44:	db013217 	ldw	r12,1224(sp)
 8005f48:	64abc83a 	sub	r21,r12,r18
 8005f4c:	0540260e 	bge	zero,r21,8005fe8 <___vfprintf_internal_r+0x868>
 8005f50:	07000404 	movi	fp,16
 8005f54:	d8811f17 	ldw	r2,1148(sp)
 8005f58:	e5443d0e 	bge	fp,r21,8007050 <___vfprintf_internal_r+0x18d0>
 8005f5c:	014200b4 	movhi	r5,2050
 8005f60:	297db984 	addi	r5,r5,-2330
 8005f64:	d9412c15 	stw	r5,1200(sp)
 8005f68:	04c001c4 	movi	r19,7
 8005f6c:	00000306 	br	8005f7c <___vfprintf_internal_r+0x7fc>
 8005f70:	ad7ffc04 	addi	r21,r21,-16
 8005f74:	42000204 	addi	r8,r8,8
 8005f78:	e540110e 	bge	fp,r21,8005fc0 <___vfprintf_internal_r+0x840>
 8005f7c:	18c00404 	addi	r3,r3,16
 8005f80:	10800044 	addi	r2,r2,1
 8005f84:	45000015 	stw	r20,0(r8)
 8005f88:	47000115 	stw	fp,4(r8)
 8005f8c:	d8c12015 	stw	r3,1152(sp)
 8005f90:	d8811f15 	stw	r2,1148(sp)
 8005f94:	98bff60e 	bge	r19,r2,8005f70 <__alt_data_end+0xfc005f70>
 8005f98:	b009883a 	mov	r4,r22
 8005f9c:	b80b883a 	mov	r5,r23
 8005fa0:	d9811e04 	addi	r6,sp,1144
 8005fa4:	800dd600 	call	800dd60 <__sprint_r>
 8005fa8:	103f0c1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8005fac:	ad7ffc04 	addi	r21,r21,-16
 8005fb0:	d8c12017 	ldw	r3,1152(sp)
 8005fb4:	d8811f17 	ldw	r2,1148(sp)
 8005fb8:	da000404 	addi	r8,sp,16
 8005fbc:	e57fef16 	blt	fp,r21,8005f7c <__alt_data_end+0xfc005f7c>
 8005fc0:	dac12c17 	ldw	r11,1200(sp)
 8005fc4:	1d47883a 	add	r3,r3,r21
 8005fc8:	10800044 	addi	r2,r2,1
 8005fcc:	42c00015 	stw	r11,0(r8)
 8005fd0:	45400115 	stw	r21,4(r8)
 8005fd4:	d8c12015 	stw	r3,1152(sp)
 8005fd8:	d8811f15 	stw	r2,1148(sp)
 8005fdc:	010001c4 	movi	r4,7
 8005fe0:	20824b16 	blt	r4,r2,8006910 <___vfprintf_internal_r+0x1190>
 8005fe4:	42000204 	addi	r8,r8,8
 8005fe8:	8880400c 	andi	r2,r17,256
 8005fec:	1001761e 	bne	r2,zero,80065c8 <___vfprintf_internal_r+0xe48>
 8005ff0:	d8811f17 	ldw	r2,1148(sp)
 8005ff4:	db013117 	ldw	r12,1220(sp)
 8005ff8:	1c87883a 	add	r3,r3,r18
 8005ffc:	10800044 	addi	r2,r2,1
 8006000:	43000015 	stw	r12,0(r8)
 8006004:	44800115 	stw	r18,4(r8)
 8006008:	d8c12015 	stw	r3,1152(sp)
 800600c:	d8811f15 	stw	r2,1148(sp)
 8006010:	010001c4 	movi	r4,7
 8006014:	20822616 	blt	r4,r2,80068b0 <___vfprintf_internal_r+0x1130>
 8006018:	42000204 	addi	r8,r8,8
 800601c:	8c40010c 	andi	r17,r17,4
 8006020:	88003126 	beq	r17,zero,80060e8 <___vfprintf_internal_r+0x968>
 8006024:	db012e17 	ldw	r12,1208(sp)
 8006028:	dac12b17 	ldw	r11,1196(sp)
 800602c:	62e1c83a 	sub	r16,r12,r11
 8006030:	04002d0e 	bge	zero,r16,80060e8 <___vfprintf_internal_r+0x968>
 8006034:	04400404 	movi	r17,16
 8006038:	d8811f17 	ldw	r2,1148(sp)
 800603c:	8c04df0e 	bge	r17,r16,80073bc <___vfprintf_internal_r+0x1c3c>
 8006040:	010200b4 	movhi	r4,2050
 8006044:	213dbd84 	addi	r4,r4,-2314
 8006048:	d9013615 	stw	r4,1240(sp)
 800604c:	048001c4 	movi	r18,7
 8006050:	00000306 	br	8006060 <___vfprintf_internal_r+0x8e0>
 8006054:	843ffc04 	addi	r16,r16,-16
 8006058:	42000204 	addi	r8,r8,8
 800605c:	8c00130e 	bge	r17,r16,80060ac <___vfprintf_internal_r+0x92c>
 8006060:	014200b4 	movhi	r5,2050
 8006064:	18c00404 	addi	r3,r3,16
 8006068:	10800044 	addi	r2,r2,1
 800606c:	297dbd84 	addi	r5,r5,-2314
 8006070:	41400015 	stw	r5,0(r8)
 8006074:	44400115 	stw	r17,4(r8)
 8006078:	d8c12015 	stw	r3,1152(sp)
 800607c:	d8811f15 	stw	r2,1148(sp)
 8006080:	90bff40e 	bge	r18,r2,8006054 <__alt_data_end+0xfc006054>
 8006084:	b009883a 	mov	r4,r22
 8006088:	b80b883a 	mov	r5,r23
 800608c:	d9811e04 	addi	r6,sp,1144
 8006090:	800dd600 	call	800dd60 <__sprint_r>
 8006094:	103ed11e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006098:	843ffc04 	addi	r16,r16,-16
 800609c:	d8c12017 	ldw	r3,1152(sp)
 80060a0:	d8811f17 	ldw	r2,1148(sp)
 80060a4:	da000404 	addi	r8,sp,16
 80060a8:	8c3fed16 	blt	r17,r16,8006060 <__alt_data_end+0xfc006060>
 80060ac:	dac13617 	ldw	r11,1240(sp)
 80060b0:	1c07883a 	add	r3,r3,r16
 80060b4:	10800044 	addi	r2,r2,1
 80060b8:	42c00015 	stw	r11,0(r8)
 80060bc:	44000115 	stw	r16,4(r8)
 80060c0:	d8c12015 	stw	r3,1152(sp)
 80060c4:	d8811f15 	stw	r2,1148(sp)
 80060c8:	010001c4 	movi	r4,7
 80060cc:	2080060e 	bge	r4,r2,80060e8 <___vfprintf_internal_r+0x968>
 80060d0:	b009883a 	mov	r4,r22
 80060d4:	b80b883a 	mov	r5,r23
 80060d8:	d9811e04 	addi	r6,sp,1144
 80060dc:	800dd600 	call	800dd60 <__sprint_r>
 80060e0:	103ebe1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 80060e4:	d8c12017 	ldw	r3,1152(sp)
 80060e8:	d8812b17 	ldw	r2,1196(sp)
 80060ec:	db012e17 	ldw	r12,1208(sp)
 80060f0:	1300010e 	bge	r2,r12,80060f8 <___vfprintf_internal_r+0x978>
 80060f4:	6005883a 	mov	r2,r12
 80060f8:	dac12f17 	ldw	r11,1212(sp)
 80060fc:	5897883a 	add	r11,r11,r2
 8006100:	dac12f15 	stw	r11,1212(sp)
 8006104:	1801f21e 	bne	r3,zero,80068d0 <___vfprintf_internal_r+0x1150>
 8006108:	d8011f15 	stw	zero,1148(sp)
 800610c:	da000404 	addi	r8,sp,16
 8006110:	003dd806 	br	8005874 <__alt_data_end+0xfc005874>
 8006114:	8c400414 	ori	r17,r17,16
 8006118:	d8c12a15 	stw	r3,1192(sp)
 800611c:	88c0080c 	andi	r3,r17,32
 8006120:	d8812d17 	ldw	r2,1204(sp)
 8006124:	18004626 	beq	r3,zero,8006240 <___vfprintf_internal_r+0xac0>
 8006128:	dac12d17 	ldw	r11,1204(sp)
 800612c:	14c00017 	ldw	r19,0(r2)
 8006130:	17000117 	ldw	fp,4(r2)
 8006134:	5ac00204 	addi	r11,r11,8
 8006138:	dac12d15 	stw	r11,1204(sp)
 800613c:	00800044 	movi	r2,1
 8006140:	9f06b03a 	or	r3,r19,fp
 8006144:	003f0006 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006148:	1805883a 	mov	r2,r3
 800614c:	d8012e15 	stw	zero,1208(sp)
 8006150:	82fff404 	addi	r11,r16,-48
 8006154:	0019883a 	mov	r12,zero
 8006158:	14000007 	ldb	r16,0(r2)
 800615c:	630002a4 	muli	r12,r12,10
 8006160:	18c00044 	addi	r3,r3,1
 8006164:	1805883a 	mov	r2,r3
 8006168:	62d9883a 	add	r12,r12,r11
 800616c:	82fff404 	addi	r11,r16,-48
 8006170:	2afff92e 	bgeu	r5,r11,8006158 <__alt_data_end+0xfc006158>
 8006174:	db012e15 	stw	r12,1208(sp)
 8006178:	003de906 	br	8005920 <__alt_data_end+0xfc005920>
 800617c:	8c400414 	ori	r17,r17,16
 8006180:	d8c12a15 	stw	r3,1192(sp)
 8006184:	d9812785 	stb	r6,1182(sp)
 8006188:	8880080c 	andi	r2,r17,32
 800618c:	d8c12d17 	ldw	r3,1204(sp)
 8006190:	10007a26 	beq	r2,zero,800637c <___vfprintf_internal_r+0xbfc>
 8006194:	db012d17 	ldw	r12,1204(sp)
 8006198:	18800117 	ldw	r2,4(r3)
 800619c:	1cc00017 	ldw	r19,0(r3)
 80061a0:	63000204 	addi	r12,r12,8
 80061a4:	db012d15 	stw	r12,1204(sp)
 80061a8:	1039883a 	mov	fp,r2
 80061ac:	10031016 	blt	r2,zero,8006df0 <___vfprintf_internal_r+0x1670>
 80061b0:	dd412783 	ldbu	r21,1182(sp)
 80061b4:	da413215 	stw	r9,1224(sp)
 80061b8:	00800044 	movi	r2,1
 80061bc:	9f06b03a 	or	r3,r19,fp
 80061c0:	003ee406 	br	8005d54 <__alt_data_end+0xfc005d54>
 80061c4:	030200b4 	movhi	r12,2050
 80061c8:	633da504 	addi	r12,r12,-2412
 80061cc:	d8c12a15 	stw	r3,1192(sp)
 80061d0:	d9812785 	stb	r6,1182(sp)
 80061d4:	db013b15 	stw	r12,1260(sp)
 80061d8:	88c0080c 	andi	r3,r17,32
 80061dc:	d8812d17 	ldw	r2,1204(sp)
 80061e0:	18002b26 	beq	r3,zero,8006290 <___vfprintf_internal_r+0xb10>
 80061e4:	dac12d17 	ldw	r11,1204(sp)
 80061e8:	14c00017 	ldw	r19,0(r2)
 80061ec:	17000117 	ldw	fp,4(r2)
 80061f0:	5ac00204 	addi	r11,r11,8
 80061f4:	dac12d15 	stw	r11,1204(sp)
 80061f8:	8880004c 	andi	r2,r17,1
 80061fc:	10025b26 	beq	r2,zero,8006b6c <___vfprintf_internal_r+0x13ec>
 8006200:	9f06b03a 	or	r3,r19,fp
 8006204:	18037026 	beq	r3,zero,8006fc8 <___vfprintf_internal_r+0x1848>
 8006208:	00800c04 	movi	r2,48
 800620c:	d8812705 	stb	r2,1180(sp)
 8006210:	dc012745 	stb	r16,1181(sp)
 8006214:	8c400094 	ori	r17,r17,2
 8006218:	00800084 	movi	r2,2
 800621c:	003eca06 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006220:	8c400814 	ori	r17,r17,32
 8006224:	1805883a 	mov	r2,r3
 8006228:	1c000007 	ldb	r16,0(r3)
 800622c:	003dbb06 	br	800591c <__alt_data_end+0xfc00591c>
 8006230:	d8c12a15 	stw	r3,1192(sp)
 8006234:	88c0080c 	andi	r3,r17,32
 8006238:	d8812d17 	ldw	r2,1204(sp)
 800623c:	183fba1e 	bne	r3,zero,8006128 <__alt_data_end+0xfc006128>
 8006240:	88c0040c 	andi	r3,r17,16
 8006244:	18024c1e 	bne	r3,zero,8006b78 <___vfprintf_internal_r+0x13f8>
 8006248:	88c0100c 	andi	r3,r17,64
 800624c:	18024a26 	beq	r3,zero,8006b78 <___vfprintf_internal_r+0x13f8>
 8006250:	dac12d17 	ldw	r11,1204(sp)
 8006254:	14c0000b 	ldhu	r19,0(r2)
 8006258:	0039883a 	mov	fp,zero
 800625c:	5ac00104 	addi	r11,r11,4
 8006260:	dac12d15 	stw	r11,1204(sp)
 8006264:	00800044 	movi	r2,1
 8006268:	9807883a 	mov	r3,r19
 800626c:	003eb606 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006270:	008200b4 	movhi	r2,2050
 8006274:	10bdaa04 	addi	r2,r2,-2392
 8006278:	d8c12a15 	stw	r3,1192(sp)
 800627c:	d8813b15 	stw	r2,1260(sp)
 8006280:	d9812785 	stb	r6,1182(sp)
 8006284:	88c0080c 	andi	r3,r17,32
 8006288:	d8812d17 	ldw	r2,1204(sp)
 800628c:	183fd51e 	bne	r3,zero,80061e4 <__alt_data_end+0xfc0061e4>
 8006290:	88c0040c 	andi	r3,r17,16
 8006294:	18034126 	beq	r3,zero,8006f9c <___vfprintf_internal_r+0x181c>
 8006298:	db012d17 	ldw	r12,1204(sp)
 800629c:	14c00017 	ldw	r19,0(r2)
 80062a0:	0039883a 	mov	fp,zero
 80062a4:	63000104 	addi	r12,r12,4
 80062a8:	db012d15 	stw	r12,1204(sp)
 80062ac:	003fd206 	br	80061f8 <__alt_data_end+0xfc0061f8>
 80062b0:	1c000007 	ldb	r16,0(r3)
 80062b4:	81c3d626 	beq	r16,r7,8007210 <___vfprintf_internal_r+0x1a90>
 80062b8:	8c400414 	ori	r17,r17,16
 80062bc:	1805883a 	mov	r2,r3
 80062c0:	003d9606 	br	800591c <__alt_data_end+0xfc00591c>
 80062c4:	d8c12a15 	stw	r3,1192(sp)
 80062c8:	d9812785 	stb	r6,1182(sp)
 80062cc:	8880080c 	andi	r2,r17,32
 80062d0:	10033f26 	beq	r2,zero,8006fd0 <___vfprintf_internal_r+0x1850>
 80062d4:	db012d17 	ldw	r12,1204(sp)
 80062d8:	dac12f17 	ldw	r11,1212(sp)
 80062dc:	60800017 	ldw	r2,0(r12)
 80062e0:	5807d7fa 	srai	r3,r11,31
 80062e4:	63000104 	addi	r12,r12,4
 80062e8:	db012d15 	stw	r12,1204(sp)
 80062ec:	12c00015 	stw	r11,0(r2)
 80062f0:	10c00115 	stw	r3,4(r2)
 80062f4:	003d5f06 	br	8005874 <__alt_data_end+0xfc005874>
 80062f8:	d8c12a15 	stw	r3,1192(sp)
 80062fc:	88c0080c 	andi	r3,r17,32
 8006300:	d8812d17 	ldw	r2,1204(sp)
 8006304:	183e891e 	bne	r3,zero,8005d2c <__alt_data_end+0xfc005d2c>
 8006308:	88c0040c 	andi	r3,r17,16
 800630c:	1801ea1e 	bne	r3,zero,8006ab8 <___vfprintf_internal_r+0x1338>
 8006310:	88c0100c 	andi	r3,r17,64
 8006314:	1801e826 	beq	r3,zero,8006ab8 <___vfprintf_internal_r+0x1338>
 8006318:	db012d17 	ldw	r12,1204(sp)
 800631c:	14c0000b 	ldhu	r19,0(r2)
 8006320:	0039883a 	mov	fp,zero
 8006324:	63000104 	addi	r12,r12,4
 8006328:	db012d15 	stw	r12,1204(sp)
 800632c:	0005883a 	mov	r2,zero
 8006330:	9807883a 	mov	r3,r19
 8006334:	003e8406 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006338:	30803fcc 	andi	r2,r6,255
 800633c:	1080201c 	xori	r2,r2,128
 8006340:	10bfe004 	addi	r2,r2,-128
 8006344:	10031d1e 	bne	r2,zero,8006fbc <___vfprintf_internal_r+0x183c>
 8006348:	1805883a 	mov	r2,r3
 800634c:	01800804 	movi	r6,32
 8006350:	1c000007 	ldb	r16,0(r3)
 8006354:	003d7106 	br	800591c <__alt_data_end+0xfc00591c>
 8006358:	8c400054 	ori	r17,r17,1
 800635c:	1805883a 	mov	r2,r3
 8006360:	1c000007 	ldb	r16,0(r3)
 8006364:	003d6d06 	br	800591c <__alt_data_end+0xfc00591c>
 8006368:	d8c12a15 	stw	r3,1192(sp)
 800636c:	d9812785 	stb	r6,1182(sp)
 8006370:	8880080c 	andi	r2,r17,32
 8006374:	d8c12d17 	ldw	r3,1204(sp)
 8006378:	103f861e 	bne	r2,zero,8006194 <__alt_data_end+0xfc006194>
 800637c:	8880040c 	andi	r2,r17,16
 8006380:	1001f31e 	bne	r2,zero,8006b50 <___vfprintf_internal_r+0x13d0>
 8006384:	8880100c 	andi	r2,r17,64
 8006388:	1001f126 	beq	r2,zero,8006b50 <___vfprintf_internal_r+0x13d0>
 800638c:	1cc0000f 	ldh	r19,0(r3)
 8006390:	db012d17 	ldw	r12,1204(sp)
 8006394:	9839d7fa 	srai	fp,r19,31
 8006398:	63000104 	addi	r12,r12,4
 800639c:	db012d15 	stw	r12,1204(sp)
 80063a0:	e005883a 	mov	r2,fp
 80063a4:	003f8106 	br	80061ac <__alt_data_end+0xfc0061ac>
 80063a8:	8c401014 	ori	r17,r17,64
 80063ac:	1805883a 	mov	r2,r3
 80063b0:	1c000007 	ldb	r16,0(r3)
 80063b4:	003d5906 	br	800591c <__alt_data_end+0xfc00591c>
 80063b8:	db012d17 	ldw	r12,1204(sp)
 80063bc:	d8c12a15 	stw	r3,1192(sp)
 80063c0:	00c00044 	movi	r3,1
 80063c4:	60800017 	ldw	r2,0(r12)
 80063c8:	63000104 	addi	r12,r12,4
 80063cc:	d8c12b15 	stw	r3,1196(sp)
 80063d0:	d8012785 	stb	zero,1182(sp)
 80063d4:	d8810405 	stb	r2,1040(sp)
 80063d8:	db012d15 	stw	r12,1204(sp)
 80063dc:	dac10404 	addi	r11,sp,1040
 80063e0:	1825883a 	mov	r18,r3
 80063e4:	d8013215 	stw	zero,1224(sp)
 80063e8:	d8013415 	stw	zero,1232(sp)
 80063ec:	dac13115 	stw	r11,1220(sp)
 80063f0:	0005883a 	mov	r2,zero
 80063f4:	003e7d06 	br	8005dec <__alt_data_end+0xfc005dec>
 80063f8:	db012d17 	ldw	r12,1204(sp)
 80063fc:	00800c04 	movi	r2,48
 8006400:	d8812705 	stb	r2,1180(sp)
 8006404:	64c00017 	ldw	r19,0(r12)
 8006408:	00801e04 	movi	r2,120
 800640c:	d8812745 	stb	r2,1181(sp)
 8006410:	008200b4 	movhi	r2,2050
 8006414:	10bdaa04 	addi	r2,r2,-2392
 8006418:	63000104 	addi	r12,r12,4
 800641c:	d8c12a15 	stw	r3,1192(sp)
 8006420:	d8813b15 	stw	r2,1260(sp)
 8006424:	0039883a 	mov	fp,zero
 8006428:	8c400094 	ori	r17,r17,2
 800642c:	db012d15 	stw	r12,1204(sp)
 8006430:	00800084 	movi	r2,2
 8006434:	04001e04 	movi	r16,120
 8006438:	9807883a 	mov	r3,r19
 800643c:	003e4206 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006440:	dac12d17 	ldw	r11,1204(sp)
 8006444:	db012d17 	ldw	r12,1204(sp)
 8006448:	d8c12a15 	stw	r3,1192(sp)
 800644c:	5ac00017 	ldw	r11,0(r11)
 8006450:	d8012785 	stb	zero,1182(sp)
 8006454:	64c00104 	addi	r19,r12,4
 8006458:	dac13115 	stw	r11,1220(sp)
 800645c:	5803e826 	beq	r11,zero,8007400 <___vfprintf_internal_r+0x1c80>
 8006460:	d9013117 	ldw	r4,1220(sp)
 8006464:	48037a16 	blt	r9,zero,8007250 <___vfprintf_internal_r+0x1ad0>
 8006468:	480d883a 	mov	r6,r9
 800646c:	000b883a 	mov	r5,zero
 8006470:	da013f15 	stw	r8,1276(sp)
 8006474:	da413e15 	stw	r9,1272(sp)
 8006478:	800ac580 	call	800ac58 <memchr>
 800647c:	da013f17 	ldw	r8,1276(sp)
 8006480:	da413e17 	ldw	r9,1272(sp)
 8006484:	10044426 	beq	r2,zero,8007598 <___vfprintf_internal_r+0x1e18>
 8006488:	d8c13117 	ldw	r3,1220(sp)
 800648c:	10e5c83a 	sub	r18,r2,r3
 8006490:	4c834416 	blt	r9,r18,80071a4 <___vfprintf_internal_r+0x1a24>
 8006494:	9005883a 	mov	r2,r18
 8006498:	90037216 	blt	r18,zero,8007264 <___vfprintf_internal_r+0x1ae4>
 800649c:	dd412783 	ldbu	r21,1182(sp)
 80064a0:	d8812b15 	stw	r2,1196(sp)
 80064a4:	dcc12d15 	stw	r19,1204(sp)
 80064a8:	d8013215 	stw	zero,1224(sp)
 80064ac:	d8013415 	stw	zero,1232(sp)
 80064b0:	003e4706 	br	8005dd0 <__alt_data_end+0xfc005dd0>
 80064b4:	dac12d17 	ldw	r11,1204(sp)
 80064b8:	db012d17 	ldw	r12,1204(sp)
 80064bc:	5ac00017 	ldw	r11,0(r11)
 80064c0:	dac12e15 	stw	r11,1208(sp)
 80064c4:	62c00104 	addi	r11,r12,4
 80064c8:	db012e17 	ldw	r12,1208(sp)
 80064cc:	60034a16 	blt	r12,zero,80071f8 <___vfprintf_internal_r+0x1a78>
 80064d0:	dac12d15 	stw	r11,1204(sp)
 80064d4:	1805883a 	mov	r2,r3
 80064d8:	1c000007 	ldb	r16,0(r3)
 80064dc:	003d0f06 	br	800591c <__alt_data_end+0xfc00591c>
 80064e0:	1805883a 	mov	r2,r3
 80064e4:	01800ac4 	movi	r6,43
 80064e8:	1c000007 	ldb	r16,0(r3)
 80064ec:	003d0b06 	br	800591c <__alt_data_end+0xfc00591c>
 80064f0:	d8c12a15 	stw	r3,1192(sp)
 80064f4:	d9812785 	stb	r6,1182(sp)
 80064f8:	803db226 	beq	r16,zero,8005bc4 <__alt_data_end+0xfc005bc4>
 80064fc:	00c00044 	movi	r3,1
 8006500:	d8c12b15 	stw	r3,1196(sp)
 8006504:	dc010405 	stb	r16,1040(sp)
 8006508:	d8012785 	stb	zero,1182(sp)
 800650c:	003fb306 	br	80063dc <__alt_data_end+0xfc0063dc>
 8006510:	d8c12017 	ldw	r3,1152(sp)
 8006514:	003e6d06 	br	8005ecc <__alt_data_end+0xfc005ecc>
 8006518:	10803fcc 	andi	r2,r2,255
 800651c:	00c00044 	movi	r3,1
 8006520:	10fe141e 	bne	r2,r3,8005d74 <__alt_data_end+0xfc005d74>
 8006524:	e000021e 	bne	fp,zero,8006530 <___vfprintf_internal_r+0xdb0>
 8006528:	00800244 	movi	r2,9
 800652c:	14c0202e 	bgeu	r2,r19,80065b0 <___vfprintf_internal_r+0xe30>
 8006530:	dc012b15 	stw	r16,1196(sp)
 8006534:	dc412c15 	stw	r17,1200(sp)
 8006538:	9821883a 	mov	r16,r19
 800653c:	e023883a 	mov	r17,fp
 8006540:	dc810e04 	addi	r18,sp,1080
 8006544:	4027883a 	mov	r19,r8
 8006548:	4839883a 	mov	fp,r9
 800654c:	8009883a 	mov	r4,r16
 8006550:	880b883a 	mov	r5,r17
 8006554:	01800284 	movi	r6,10
 8006558:	000f883a 	mov	r7,zero
 800655c:	800fff00 	call	800fff0 <__umoddi3>
 8006560:	10800c04 	addi	r2,r2,48
 8006564:	94bfffc4 	addi	r18,r18,-1
 8006568:	8009883a 	mov	r4,r16
 800656c:	880b883a 	mov	r5,r17
 8006570:	01800284 	movi	r6,10
 8006574:	000f883a 	mov	r7,zero
 8006578:	90800005 	stb	r2,0(r18)
 800657c:	800fa300 	call	800fa30 <__udivdi3>
 8006580:	1021883a 	mov	r16,r2
 8006584:	10c4b03a 	or	r2,r2,r3
 8006588:	1823883a 	mov	r17,r3
 800658c:	103fef1e 	bne	r2,zero,800654c <__alt_data_end+0xfc00654c>
 8006590:	dac12817 	ldw	r11,1184(sp)
 8006594:	dc813115 	stw	r18,1220(sp)
 8006598:	dc012b17 	ldw	r16,1196(sp)
 800659c:	9811883a 	mov	r8,r19
 80065a0:	dc412c17 	ldw	r17,1200(sp)
 80065a4:	e013883a 	mov	r9,fp
 80065a8:	5ca5c83a 	sub	r18,r11,r18
 80065ac:	003e0306 	br	8005dbc <__alt_data_end+0xfc005dbc>
 80065b0:	9cc00c04 	addi	r19,r19,48
 80065b4:	d8c10dc4 	addi	r3,sp,1079
 80065b8:	dcc10dc5 	stb	r19,1079(sp)
 80065bc:	dc813c17 	ldw	r18,1264(sp)
 80065c0:	d8c13115 	stw	r3,1220(sp)
 80065c4:	003dfd06 	br	8005dbc <__alt_data_end+0xfc005dbc>
 80065c8:	00801944 	movi	r2,101
 80065cc:	1400710e 	bge	r2,r16,8006794 <___vfprintf_internal_r+0x1014>
 80065d0:	d9013717 	ldw	r4,1244(sp)
 80065d4:	d9413917 	ldw	r5,1252(sp)
 80065d8:	000d883a 	mov	r6,zero
 80065dc:	000f883a 	mov	r7,zero
 80065e0:	d8c13d15 	stw	r3,1268(sp)
 80065e4:	da013f15 	stw	r8,1276(sp)
 80065e8:	8010f780 	call	8010f78 <__eqdf2>
 80065ec:	d8c13d17 	ldw	r3,1268(sp)
 80065f0:	da013f17 	ldw	r8,1276(sp)
 80065f4:	1000ef1e 	bne	r2,zero,80069b4 <___vfprintf_internal_r+0x1234>
 80065f8:	d8811f17 	ldw	r2,1148(sp)
 80065fc:	010200b4 	movhi	r4,2050
 8006600:	213db104 	addi	r4,r4,-2364
 8006604:	18c00044 	addi	r3,r3,1
 8006608:	10800044 	addi	r2,r2,1
 800660c:	41000015 	stw	r4,0(r8)
 8006610:	01000044 	movi	r4,1
 8006614:	41000115 	stw	r4,4(r8)
 8006618:	d8c12015 	stw	r3,1152(sp)
 800661c:	d8811f15 	stw	r2,1148(sp)
 8006620:	010001c4 	movi	r4,7
 8006624:	20828e16 	blt	r4,r2,8007060 <___vfprintf_internal_r+0x18e0>
 8006628:	42000204 	addi	r8,r8,8
 800662c:	d8812617 	ldw	r2,1176(sp)
 8006630:	dac13317 	ldw	r11,1228(sp)
 8006634:	12c00216 	blt	r2,r11,8006640 <___vfprintf_internal_r+0xec0>
 8006638:	8880004c 	andi	r2,r17,1
 800663c:	103e7726 	beq	r2,zero,800601c <__alt_data_end+0xfc00601c>
 8006640:	db013817 	ldw	r12,1248(sp)
 8006644:	d8811f17 	ldw	r2,1148(sp)
 8006648:	dac13517 	ldw	r11,1236(sp)
 800664c:	1b07883a 	add	r3,r3,r12
 8006650:	10800044 	addi	r2,r2,1
 8006654:	42c00015 	stw	r11,0(r8)
 8006658:	43000115 	stw	r12,4(r8)
 800665c:	d8c12015 	stw	r3,1152(sp)
 8006660:	d8811f15 	stw	r2,1148(sp)
 8006664:	010001c4 	movi	r4,7
 8006668:	2082ed16 	blt	r4,r2,8007220 <___vfprintf_internal_r+0x1aa0>
 800666c:	42000204 	addi	r8,r8,8
 8006670:	db013317 	ldw	r12,1228(sp)
 8006674:	643fffc4 	addi	r16,r12,-1
 8006678:	043e680e 	bge	zero,r16,800601c <__alt_data_end+0xfc00601c>
 800667c:	04800404 	movi	r18,16
 8006680:	d8811f17 	ldw	r2,1148(sp)
 8006684:	94007e0e 	bge	r18,r16,8006880 <___vfprintf_internal_r+0x1100>
 8006688:	014200b4 	movhi	r5,2050
 800668c:	297db984 	addi	r5,r5,-2330
 8006690:	d9412c15 	stw	r5,1200(sp)
 8006694:	054001c4 	movi	r21,7
 8006698:	00000306 	br	80066a8 <___vfprintf_internal_r+0xf28>
 800669c:	42000204 	addi	r8,r8,8
 80066a0:	843ffc04 	addi	r16,r16,-16
 80066a4:	9400790e 	bge	r18,r16,800688c <___vfprintf_internal_r+0x110c>
 80066a8:	18c00404 	addi	r3,r3,16
 80066ac:	10800044 	addi	r2,r2,1
 80066b0:	45000015 	stw	r20,0(r8)
 80066b4:	44800115 	stw	r18,4(r8)
 80066b8:	d8c12015 	stw	r3,1152(sp)
 80066bc:	d8811f15 	stw	r2,1148(sp)
 80066c0:	a8bff60e 	bge	r21,r2,800669c <__alt_data_end+0xfc00669c>
 80066c4:	b009883a 	mov	r4,r22
 80066c8:	b80b883a 	mov	r5,r23
 80066cc:	d9811e04 	addi	r6,sp,1144
 80066d0:	800dd600 	call	800dd60 <__sprint_r>
 80066d4:	103d411e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 80066d8:	d8c12017 	ldw	r3,1152(sp)
 80066dc:	d8811f17 	ldw	r2,1148(sp)
 80066e0:	da000404 	addi	r8,sp,16
 80066e4:	003fee06 	br	80066a0 <__alt_data_end+0xfc0066a0>
 80066e8:	dac12e17 	ldw	r11,1208(sp)
 80066ec:	db012b17 	ldw	r12,1196(sp)
 80066f0:	5b2bc83a 	sub	r21,r11,r12
 80066f4:	057e130e 	bge	zero,r21,8005f44 <__alt_data_end+0xfc005f44>
 80066f8:	07000404 	movi	fp,16
 80066fc:	d8811f17 	ldw	r2,1148(sp)
 8006700:	e543640e 	bge	fp,r21,8007494 <___vfprintf_internal_r+0x1d14>
 8006704:	014200b4 	movhi	r5,2050
 8006708:	297db984 	addi	r5,r5,-2330
 800670c:	d9412c15 	stw	r5,1200(sp)
 8006710:	04c001c4 	movi	r19,7
 8006714:	00000306 	br	8006724 <___vfprintf_internal_r+0xfa4>
 8006718:	ad7ffc04 	addi	r21,r21,-16
 800671c:	42000204 	addi	r8,r8,8
 8006720:	e540110e 	bge	fp,r21,8006768 <___vfprintf_internal_r+0xfe8>
 8006724:	18c00404 	addi	r3,r3,16
 8006728:	10800044 	addi	r2,r2,1
 800672c:	45000015 	stw	r20,0(r8)
 8006730:	47000115 	stw	fp,4(r8)
 8006734:	d8c12015 	stw	r3,1152(sp)
 8006738:	d8811f15 	stw	r2,1148(sp)
 800673c:	98bff60e 	bge	r19,r2,8006718 <__alt_data_end+0xfc006718>
 8006740:	b009883a 	mov	r4,r22
 8006744:	b80b883a 	mov	r5,r23
 8006748:	d9811e04 	addi	r6,sp,1144
 800674c:	800dd600 	call	800dd60 <__sprint_r>
 8006750:	103d221e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006754:	ad7ffc04 	addi	r21,r21,-16
 8006758:	d8c12017 	ldw	r3,1152(sp)
 800675c:	d8811f17 	ldw	r2,1148(sp)
 8006760:	da000404 	addi	r8,sp,16
 8006764:	e57fef16 	blt	fp,r21,8006724 <__alt_data_end+0xfc006724>
 8006768:	dac12c17 	ldw	r11,1200(sp)
 800676c:	1d47883a 	add	r3,r3,r21
 8006770:	10800044 	addi	r2,r2,1
 8006774:	42c00015 	stw	r11,0(r8)
 8006778:	45400115 	stw	r21,4(r8)
 800677c:	d8c12015 	stw	r3,1152(sp)
 8006780:	d8811f15 	stw	r2,1148(sp)
 8006784:	010001c4 	movi	r4,7
 8006788:	20819116 	blt	r4,r2,8006dd0 <___vfprintf_internal_r+0x1650>
 800678c:	42000204 	addi	r8,r8,8
 8006790:	003dec06 	br	8005f44 <__alt_data_end+0xfc005f44>
 8006794:	db013317 	ldw	r12,1228(sp)
 8006798:	00800044 	movi	r2,1
 800679c:	18c00044 	addi	r3,r3,1
 80067a0:	1301530e 	bge	r2,r12,8006cf0 <___vfprintf_internal_r+0x1570>
 80067a4:	dc011f17 	ldw	r16,1148(sp)
 80067a8:	dac13117 	ldw	r11,1220(sp)
 80067ac:	00800044 	movi	r2,1
 80067b0:	84000044 	addi	r16,r16,1
 80067b4:	40800115 	stw	r2,4(r8)
 80067b8:	42c00015 	stw	r11,0(r8)
 80067bc:	d8c12015 	stw	r3,1152(sp)
 80067c0:	dc011f15 	stw	r16,1148(sp)
 80067c4:	008001c4 	movi	r2,7
 80067c8:	14016b16 	blt	r2,r16,8006d78 <___vfprintf_internal_r+0x15f8>
 80067cc:	42000204 	addi	r8,r8,8
 80067d0:	db013817 	ldw	r12,1248(sp)
 80067d4:	dac13517 	ldw	r11,1236(sp)
 80067d8:	84000044 	addi	r16,r16,1
 80067dc:	1b07883a 	add	r3,r3,r12
 80067e0:	42c00015 	stw	r11,0(r8)
 80067e4:	43000115 	stw	r12,4(r8)
 80067e8:	d8c12015 	stw	r3,1152(sp)
 80067ec:	dc011f15 	stw	r16,1148(sp)
 80067f0:	008001c4 	movi	r2,7
 80067f4:	14016916 	blt	r2,r16,8006d9c <___vfprintf_internal_r+0x161c>
 80067f8:	44800204 	addi	r18,r8,8
 80067fc:	d9013717 	ldw	r4,1244(sp)
 8006800:	d9413917 	ldw	r5,1252(sp)
 8006804:	000d883a 	mov	r6,zero
 8006808:	000f883a 	mov	r7,zero
 800680c:	d8c13d15 	stw	r3,1268(sp)
 8006810:	8010f780 	call	8010f78 <__eqdf2>
 8006814:	d8c13d17 	ldw	r3,1268(sp)
 8006818:	db013317 	ldw	r12,1228(sp)
 800681c:	1000ae26 	beq	r2,zero,8006ad8 <___vfprintf_internal_r+0x1358>
 8006820:	dac13117 	ldw	r11,1220(sp)
 8006824:	60bfffc4 	addi	r2,r12,-1
 8006828:	1887883a 	add	r3,r3,r2
 800682c:	59000044 	addi	r4,r11,1
 8006830:	84000044 	addi	r16,r16,1
 8006834:	90800115 	stw	r2,4(r18)
 8006838:	91000015 	stw	r4,0(r18)
 800683c:	d8c12015 	stw	r3,1152(sp)
 8006840:	dc011f15 	stw	r16,1148(sp)
 8006844:	008001c4 	movi	r2,7
 8006848:	14014216 	blt	r2,r16,8006d54 <___vfprintf_internal_r+0x15d4>
 800684c:	94800204 	addi	r18,r18,8
 8006850:	dac13a17 	ldw	r11,1256(sp)
 8006854:	dd4122c4 	addi	r21,sp,1163
 8006858:	84000044 	addi	r16,r16,1
 800685c:	58c7883a 	add	r3,r11,r3
 8006860:	95400015 	stw	r21,0(r18)
 8006864:	92c00115 	stw	r11,4(r18)
 8006868:	d8c12015 	stw	r3,1152(sp)
 800686c:	dc011f15 	stw	r16,1148(sp)
 8006870:	008001c4 	movi	r2,7
 8006874:	14000e16 	blt	r2,r16,80068b0 <___vfprintf_internal_r+0x1130>
 8006878:	92000204 	addi	r8,r18,8
 800687c:	003de706 	br	800601c <__alt_data_end+0xfc00601c>
 8006880:	010200b4 	movhi	r4,2050
 8006884:	213db984 	addi	r4,r4,-2330
 8006888:	d9012c15 	stw	r4,1200(sp)
 800688c:	dac12c17 	ldw	r11,1200(sp)
 8006890:	1c07883a 	add	r3,r3,r16
 8006894:	44000115 	stw	r16,4(r8)
 8006898:	42c00015 	stw	r11,0(r8)
 800689c:	10800044 	addi	r2,r2,1
 80068a0:	d8c12015 	stw	r3,1152(sp)
 80068a4:	d8811f15 	stw	r2,1148(sp)
 80068a8:	010001c4 	movi	r4,7
 80068ac:	20bdda0e 	bge	r4,r2,8006018 <__alt_data_end+0xfc006018>
 80068b0:	b009883a 	mov	r4,r22
 80068b4:	b80b883a 	mov	r5,r23
 80068b8:	d9811e04 	addi	r6,sp,1144
 80068bc:	800dd600 	call	800dd60 <__sprint_r>
 80068c0:	103cc61e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 80068c4:	d8c12017 	ldw	r3,1152(sp)
 80068c8:	da000404 	addi	r8,sp,16
 80068cc:	003dd306 	br	800601c <__alt_data_end+0xfc00601c>
 80068d0:	b009883a 	mov	r4,r22
 80068d4:	b80b883a 	mov	r5,r23
 80068d8:	d9811e04 	addi	r6,sp,1144
 80068dc:	800dd600 	call	800dd60 <__sprint_r>
 80068e0:	103e0926 	beq	r2,zero,8006108 <__alt_data_end+0xfc006108>
 80068e4:	003cbd06 	br	8005bdc <__alt_data_end+0xfc005bdc>
 80068e8:	10803fcc 	andi	r2,r2,255
 80068ec:	1000651e 	bne	r2,zero,8006a84 <___vfprintf_internal_r+0x1304>
 80068f0:	8880004c 	andi	r2,r17,1
 80068f4:	10013226 	beq	r2,zero,8006dc0 <___vfprintf_internal_r+0x1640>
 80068f8:	00800c04 	movi	r2,48
 80068fc:	d8c10dc4 	addi	r3,sp,1079
 8006900:	d8810dc5 	stb	r2,1079(sp)
 8006904:	dc813c17 	ldw	r18,1264(sp)
 8006908:	d8c13115 	stw	r3,1220(sp)
 800690c:	003d2b06 	br	8005dbc <__alt_data_end+0xfc005dbc>
 8006910:	b009883a 	mov	r4,r22
 8006914:	b80b883a 	mov	r5,r23
 8006918:	d9811e04 	addi	r6,sp,1144
 800691c:	800dd600 	call	800dd60 <__sprint_r>
 8006920:	103cae1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006924:	d8c12017 	ldw	r3,1152(sp)
 8006928:	da000404 	addi	r8,sp,16
 800692c:	003dae06 	br	8005fe8 <__alt_data_end+0xfc005fe8>
 8006930:	b009883a 	mov	r4,r22
 8006934:	b80b883a 	mov	r5,r23
 8006938:	d9811e04 	addi	r6,sp,1144
 800693c:	800dd600 	call	800dd60 <__sprint_r>
 8006940:	103ca61e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006944:	d8c12017 	ldw	r3,1152(sp)
 8006948:	da000404 	addi	r8,sp,16
 800694c:	003d6c06 	br	8005f00 <__alt_data_end+0xfc005f00>
 8006950:	b009883a 	mov	r4,r22
 8006954:	b80b883a 	mov	r5,r23
 8006958:	d9811e04 	addi	r6,sp,1144
 800695c:	800dd600 	call	800dd60 <__sprint_r>
 8006960:	103c9e1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006964:	d8c12017 	ldw	r3,1152(sp)
 8006968:	da000404 	addi	r8,sp,16
 800696c:	003d7206 	br	8005f38 <__alt_data_end+0xfc005f38>
 8006970:	d9413b17 	ldw	r5,1260(sp)
 8006974:	d8c10e04 	addi	r3,sp,1080
 8006978:	988003cc 	andi	r2,r19,15
 800697c:	e008973a 	slli	r4,fp,28
 8006980:	2885883a 	add	r2,r5,r2
 8006984:	9826d13a 	srli	r19,r19,4
 8006988:	10800003 	ldbu	r2,0(r2)
 800698c:	e038d13a 	srli	fp,fp,4
 8006990:	18ffffc4 	addi	r3,r3,-1
 8006994:	24e6b03a 	or	r19,r4,r19
 8006998:	18800005 	stb	r2,0(r3)
 800699c:	9f04b03a 	or	r2,r19,fp
 80069a0:	103ff51e 	bne	r2,zero,8006978 <__alt_data_end+0xfc006978>
 80069a4:	db012817 	ldw	r12,1184(sp)
 80069a8:	d8c13115 	stw	r3,1220(sp)
 80069ac:	60e5c83a 	sub	r18,r12,r3
 80069b0:	003d0206 	br	8005dbc <__alt_data_end+0xfc005dbc>
 80069b4:	dc012617 	ldw	r16,1176(sp)
 80069b8:	0401b10e 	bge	zero,r16,8007080 <___vfprintf_internal_r+0x1900>
 80069bc:	db013117 	ldw	r12,1220(sp)
 80069c0:	dac13317 	ldw	r11,1228(sp)
 80069c4:	62e1883a 	add	r16,r12,r11
 80069c8:	db013417 	ldw	r12,1232(sp)
 80069cc:	5825883a 	mov	r18,r11
 80069d0:	62c0010e 	bge	r12,r11,80069d8 <___vfprintf_internal_r+0x1258>
 80069d4:	6025883a 	mov	r18,r12
 80069d8:	04800b0e 	bge	zero,r18,8006a08 <___vfprintf_internal_r+0x1288>
 80069dc:	d8811f17 	ldw	r2,1148(sp)
 80069e0:	dac13117 	ldw	r11,1220(sp)
 80069e4:	1c87883a 	add	r3,r3,r18
 80069e8:	10800044 	addi	r2,r2,1
 80069ec:	42c00015 	stw	r11,0(r8)
 80069f0:	44800115 	stw	r18,4(r8)
 80069f4:	d8c12015 	stw	r3,1152(sp)
 80069f8:	d8811f15 	stw	r2,1148(sp)
 80069fc:	010001c4 	movi	r4,7
 8006a00:	20824f16 	blt	r4,r2,8007340 <___vfprintf_internal_r+0x1bc0>
 8006a04:	42000204 	addi	r8,r8,8
 8006a08:	90024b16 	blt	r18,zero,8007338 <___vfprintf_internal_r+0x1bb8>
 8006a0c:	db013417 	ldw	r12,1232(sp)
 8006a10:	64a5c83a 	sub	r18,r12,r18
 8006a14:	0480730e 	bge	zero,r18,8006be4 <___vfprintf_internal_r+0x1464>
 8006a18:	05400404 	movi	r21,16
 8006a1c:	d8811f17 	ldw	r2,1148(sp)
 8006a20:	ac817d0e 	bge	r21,r18,8007018 <___vfprintf_internal_r+0x1898>
 8006a24:	014200b4 	movhi	r5,2050
 8006a28:	297db984 	addi	r5,r5,-2330
 8006a2c:	d9412c15 	stw	r5,1200(sp)
 8006a30:	070001c4 	movi	fp,7
 8006a34:	00000306 	br	8006a44 <___vfprintf_internal_r+0x12c4>
 8006a38:	42000204 	addi	r8,r8,8
 8006a3c:	94bffc04 	addi	r18,r18,-16
 8006a40:	ac81780e 	bge	r21,r18,8007024 <___vfprintf_internal_r+0x18a4>
 8006a44:	18c00404 	addi	r3,r3,16
 8006a48:	10800044 	addi	r2,r2,1
 8006a4c:	45000015 	stw	r20,0(r8)
 8006a50:	45400115 	stw	r21,4(r8)
 8006a54:	d8c12015 	stw	r3,1152(sp)
 8006a58:	d8811f15 	stw	r2,1148(sp)
 8006a5c:	e0bff60e 	bge	fp,r2,8006a38 <__alt_data_end+0xfc006a38>
 8006a60:	b009883a 	mov	r4,r22
 8006a64:	b80b883a 	mov	r5,r23
 8006a68:	d9811e04 	addi	r6,sp,1144
 8006a6c:	800dd600 	call	800dd60 <__sprint_r>
 8006a70:	103c5a1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006a74:	d8c12017 	ldw	r3,1152(sp)
 8006a78:	d8811f17 	ldw	r2,1148(sp)
 8006a7c:	da000404 	addi	r8,sp,16
 8006a80:	003fee06 	br	8006a3c <__alt_data_end+0xfc006a3c>
 8006a84:	dac10e04 	addi	r11,sp,1080
 8006a88:	0025883a 	mov	r18,zero
 8006a8c:	dac13115 	stw	r11,1220(sp)
 8006a90:	003cca06 	br	8005dbc <__alt_data_end+0xfc005dbc>
 8006a94:	b009883a 	mov	r4,r22
 8006a98:	b80b883a 	mov	r5,r23
 8006a9c:	d9811e04 	addi	r6,sp,1144
 8006aa0:	800dd600 	call	800dd60 <__sprint_r>
 8006aa4:	103c4d1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006aa8:	d8c12017 	ldw	r3,1152(sp)
 8006aac:	d8812787 	ldb	r2,1182(sp)
 8006ab0:	da000404 	addi	r8,sp,16
 8006ab4:	003d0506 	br	8005ecc <__alt_data_end+0xfc005ecc>
 8006ab8:	dac12d17 	ldw	r11,1204(sp)
 8006abc:	14c00017 	ldw	r19,0(r2)
 8006ac0:	0039883a 	mov	fp,zero
 8006ac4:	5ac00104 	addi	r11,r11,4
 8006ac8:	dac12d15 	stw	r11,1204(sp)
 8006acc:	0005883a 	mov	r2,zero
 8006ad0:	9807883a 	mov	r3,r19
 8006ad4:	003c9c06 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006ad8:	657fffc4 	addi	r21,r12,-1
 8006adc:	057f5c0e 	bge	zero,r21,8006850 <__alt_data_end+0xfc006850>
 8006ae0:	07000404 	movi	fp,16
 8006ae4:	e5408f0e 	bge	fp,r21,8006d24 <___vfprintf_internal_r+0x15a4>
 8006ae8:	010200b4 	movhi	r4,2050
 8006aec:	213db984 	addi	r4,r4,-2330
 8006af0:	d9012c15 	stw	r4,1200(sp)
 8006af4:	01c001c4 	movi	r7,7
 8006af8:	00000306 	br	8006b08 <___vfprintf_internal_r+0x1388>
 8006afc:	94800204 	addi	r18,r18,8
 8006b00:	ad7ffc04 	addi	r21,r21,-16
 8006b04:	e5408a0e 	bge	fp,r21,8006d30 <___vfprintf_internal_r+0x15b0>
 8006b08:	18c00404 	addi	r3,r3,16
 8006b0c:	84000044 	addi	r16,r16,1
 8006b10:	95000015 	stw	r20,0(r18)
 8006b14:	97000115 	stw	fp,4(r18)
 8006b18:	d8c12015 	stw	r3,1152(sp)
 8006b1c:	dc011f15 	stw	r16,1148(sp)
 8006b20:	3c3ff60e 	bge	r7,r16,8006afc <__alt_data_end+0xfc006afc>
 8006b24:	b009883a 	mov	r4,r22
 8006b28:	b80b883a 	mov	r5,r23
 8006b2c:	d9811e04 	addi	r6,sp,1144
 8006b30:	d9c13d15 	stw	r7,1268(sp)
 8006b34:	800dd600 	call	800dd60 <__sprint_r>
 8006b38:	d9c13d17 	ldw	r7,1268(sp)
 8006b3c:	103c271e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006b40:	d8c12017 	ldw	r3,1152(sp)
 8006b44:	dc011f17 	ldw	r16,1148(sp)
 8006b48:	dc800404 	addi	r18,sp,16
 8006b4c:	003fec06 	br	8006b00 <__alt_data_end+0xfc006b00>
 8006b50:	1cc00017 	ldw	r19,0(r3)
 8006b54:	dac12d17 	ldw	r11,1204(sp)
 8006b58:	9839d7fa 	srai	fp,r19,31
 8006b5c:	5ac00104 	addi	r11,r11,4
 8006b60:	dac12d15 	stw	r11,1204(sp)
 8006b64:	e005883a 	mov	r2,fp
 8006b68:	003d9006 	br	80061ac <__alt_data_end+0xfc0061ac>
 8006b6c:	00800084 	movi	r2,2
 8006b70:	9f06b03a 	or	r3,r19,fp
 8006b74:	003c7406 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006b78:	db012d17 	ldw	r12,1204(sp)
 8006b7c:	14c00017 	ldw	r19,0(r2)
 8006b80:	0039883a 	mov	fp,zero
 8006b84:	63000104 	addi	r12,r12,4
 8006b88:	db012d15 	stw	r12,1204(sp)
 8006b8c:	00800044 	movi	r2,1
 8006b90:	9807883a 	mov	r3,r19
 8006b94:	003c6c06 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006b98:	10803fcc 	andi	r2,r2,255
 8006b9c:	1080201c 	xori	r2,r2,128
 8006ba0:	10bfe004 	addi	r2,r2,-128
 8006ba4:	01000c04 	movi	r4,48
 8006ba8:	1101a526 	beq	r2,r4,8007240 <___vfprintf_internal_r+0x1ac0>
 8006bac:	dac13117 	ldw	r11,1220(sp)
 8006bb0:	db012817 	ldw	r12,1184(sp)
 8006bb4:	193fffc5 	stb	r4,-1(r3)
 8006bb8:	5affffc4 	addi	r11,r11,-1
 8006bbc:	dac13115 	stw	r11,1220(sp)
 8006bc0:	62e5c83a 	sub	r18,r12,r11
 8006bc4:	003c7d06 	br	8005dbc <__alt_data_end+0xfc005dbc>
 8006bc8:	b009883a 	mov	r4,r22
 8006bcc:	b80b883a 	mov	r5,r23
 8006bd0:	d9811e04 	addi	r6,sp,1144
 8006bd4:	800dd600 	call	800dd60 <__sprint_r>
 8006bd8:	103c001e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006bdc:	d8c12017 	ldw	r3,1152(sp)
 8006be0:	da000404 	addi	r8,sp,16
 8006be4:	db013117 	ldw	r12,1220(sp)
 8006be8:	dac13417 	ldw	r11,1232(sp)
 8006bec:	d8812617 	ldw	r2,1176(sp)
 8006bf0:	62e5883a 	add	r18,r12,r11
 8006bf4:	db013317 	ldw	r12,1228(sp)
 8006bf8:	13000216 	blt	r2,r12,8006c04 <___vfprintf_internal_r+0x1484>
 8006bfc:	8900004c 	andi	r4,r17,1
 8006c00:	20000c26 	beq	r4,zero,8006c34 <___vfprintf_internal_r+0x14b4>
 8006c04:	dac13817 	ldw	r11,1248(sp)
 8006c08:	d9011f17 	ldw	r4,1148(sp)
 8006c0c:	db013517 	ldw	r12,1236(sp)
 8006c10:	1ac7883a 	add	r3,r3,r11
 8006c14:	21000044 	addi	r4,r4,1
 8006c18:	43000015 	stw	r12,0(r8)
 8006c1c:	42c00115 	stw	r11,4(r8)
 8006c20:	d8c12015 	stw	r3,1152(sp)
 8006c24:	d9011f15 	stw	r4,1148(sp)
 8006c28:	014001c4 	movi	r5,7
 8006c2c:	2901cc16 	blt	r5,r4,8007360 <___vfprintf_internal_r+0x1be0>
 8006c30:	42000204 	addi	r8,r8,8
 8006c34:	dac13317 	ldw	r11,1228(sp)
 8006c38:	8489c83a 	sub	r4,r16,r18
 8006c3c:	5885c83a 	sub	r2,r11,r2
 8006c40:	1021883a 	mov	r16,r2
 8006c44:	2080010e 	bge	r4,r2,8006c4c <___vfprintf_internal_r+0x14cc>
 8006c48:	2021883a 	mov	r16,r4
 8006c4c:	04000a0e 	bge	zero,r16,8006c78 <___vfprintf_internal_r+0x14f8>
 8006c50:	d9011f17 	ldw	r4,1148(sp)
 8006c54:	1c07883a 	add	r3,r3,r16
 8006c58:	44800015 	stw	r18,0(r8)
 8006c5c:	21000044 	addi	r4,r4,1
 8006c60:	44000115 	stw	r16,4(r8)
 8006c64:	d8c12015 	stw	r3,1152(sp)
 8006c68:	d9011f15 	stw	r4,1148(sp)
 8006c6c:	014001c4 	movi	r5,7
 8006c70:	2901d616 	blt	r5,r4,80073cc <___vfprintf_internal_r+0x1c4c>
 8006c74:	42000204 	addi	r8,r8,8
 8006c78:	8001df16 	blt	r16,zero,80073f8 <___vfprintf_internal_r+0x1c78>
 8006c7c:	1421c83a 	sub	r16,r2,r16
 8006c80:	043ce60e 	bge	zero,r16,800601c <__alt_data_end+0xfc00601c>
 8006c84:	04800404 	movi	r18,16
 8006c88:	d8811f17 	ldw	r2,1148(sp)
 8006c8c:	943efc0e 	bge	r18,r16,8006880 <__alt_data_end+0xfc006880>
 8006c90:	014200b4 	movhi	r5,2050
 8006c94:	297db984 	addi	r5,r5,-2330
 8006c98:	d9412c15 	stw	r5,1200(sp)
 8006c9c:	054001c4 	movi	r21,7
 8006ca0:	00000306 	br	8006cb0 <___vfprintf_internal_r+0x1530>
 8006ca4:	42000204 	addi	r8,r8,8
 8006ca8:	843ffc04 	addi	r16,r16,-16
 8006cac:	943ef70e 	bge	r18,r16,800688c <__alt_data_end+0xfc00688c>
 8006cb0:	18c00404 	addi	r3,r3,16
 8006cb4:	10800044 	addi	r2,r2,1
 8006cb8:	45000015 	stw	r20,0(r8)
 8006cbc:	44800115 	stw	r18,4(r8)
 8006cc0:	d8c12015 	stw	r3,1152(sp)
 8006cc4:	d8811f15 	stw	r2,1148(sp)
 8006cc8:	a8bff60e 	bge	r21,r2,8006ca4 <__alt_data_end+0xfc006ca4>
 8006ccc:	b009883a 	mov	r4,r22
 8006cd0:	b80b883a 	mov	r5,r23
 8006cd4:	d9811e04 	addi	r6,sp,1144
 8006cd8:	800dd600 	call	800dd60 <__sprint_r>
 8006cdc:	103bbf1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006ce0:	d8c12017 	ldw	r3,1152(sp)
 8006ce4:	d8811f17 	ldw	r2,1148(sp)
 8006ce8:	da000404 	addi	r8,sp,16
 8006cec:	003fee06 	br	8006ca8 <__alt_data_end+0xfc006ca8>
 8006cf0:	8888703a 	and	r4,r17,r2
 8006cf4:	203eab1e 	bne	r4,zero,80067a4 <__alt_data_end+0xfc0067a4>
 8006cf8:	dc011f17 	ldw	r16,1148(sp)
 8006cfc:	db013117 	ldw	r12,1220(sp)
 8006d00:	40800115 	stw	r2,4(r8)
 8006d04:	84000044 	addi	r16,r16,1
 8006d08:	43000015 	stw	r12,0(r8)
 8006d0c:	d8c12015 	stw	r3,1152(sp)
 8006d10:	dc011f15 	stw	r16,1148(sp)
 8006d14:	008001c4 	movi	r2,7
 8006d18:	14000e16 	blt	r2,r16,8006d54 <___vfprintf_internal_r+0x15d4>
 8006d1c:	44800204 	addi	r18,r8,8
 8006d20:	003ecb06 	br	8006850 <__alt_data_end+0xfc006850>
 8006d24:	008200b4 	movhi	r2,2050
 8006d28:	10bdb984 	addi	r2,r2,-2330
 8006d2c:	d8812c15 	stw	r2,1200(sp)
 8006d30:	dac12c17 	ldw	r11,1200(sp)
 8006d34:	1d47883a 	add	r3,r3,r21
 8006d38:	84000044 	addi	r16,r16,1
 8006d3c:	92c00015 	stw	r11,0(r18)
 8006d40:	95400115 	stw	r21,4(r18)
 8006d44:	d8c12015 	stw	r3,1152(sp)
 8006d48:	dc011f15 	stw	r16,1148(sp)
 8006d4c:	008001c4 	movi	r2,7
 8006d50:	143ebe0e 	bge	r2,r16,800684c <__alt_data_end+0xfc00684c>
 8006d54:	b009883a 	mov	r4,r22
 8006d58:	b80b883a 	mov	r5,r23
 8006d5c:	d9811e04 	addi	r6,sp,1144
 8006d60:	800dd600 	call	800dd60 <__sprint_r>
 8006d64:	103b9d1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006d68:	d8c12017 	ldw	r3,1152(sp)
 8006d6c:	dc011f17 	ldw	r16,1148(sp)
 8006d70:	dc800404 	addi	r18,sp,16
 8006d74:	003eb606 	br	8006850 <__alt_data_end+0xfc006850>
 8006d78:	b009883a 	mov	r4,r22
 8006d7c:	b80b883a 	mov	r5,r23
 8006d80:	d9811e04 	addi	r6,sp,1144
 8006d84:	800dd600 	call	800dd60 <__sprint_r>
 8006d88:	103b941e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006d8c:	d8c12017 	ldw	r3,1152(sp)
 8006d90:	dc011f17 	ldw	r16,1148(sp)
 8006d94:	da000404 	addi	r8,sp,16
 8006d98:	003e8d06 	br	80067d0 <__alt_data_end+0xfc0067d0>
 8006d9c:	b009883a 	mov	r4,r22
 8006da0:	b80b883a 	mov	r5,r23
 8006da4:	d9811e04 	addi	r6,sp,1144
 8006da8:	800dd600 	call	800dd60 <__sprint_r>
 8006dac:	103b8b1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006db0:	d8c12017 	ldw	r3,1152(sp)
 8006db4:	dc011f17 	ldw	r16,1148(sp)
 8006db8:	dc800404 	addi	r18,sp,16
 8006dbc:	003e8f06 	br	80067fc <__alt_data_end+0xfc0067fc>
 8006dc0:	db010e04 	addi	r12,sp,1080
 8006dc4:	0025883a 	mov	r18,zero
 8006dc8:	db013115 	stw	r12,1220(sp)
 8006dcc:	003bfb06 	br	8005dbc <__alt_data_end+0xfc005dbc>
 8006dd0:	b009883a 	mov	r4,r22
 8006dd4:	b80b883a 	mov	r5,r23
 8006dd8:	d9811e04 	addi	r6,sp,1144
 8006ddc:	800dd600 	call	800dd60 <__sprint_r>
 8006de0:	103b7e1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8006de4:	d8c12017 	ldw	r3,1152(sp)
 8006de8:	da000404 	addi	r8,sp,16
 8006dec:	003c5506 	br	8005f44 <__alt_data_end+0xfc005f44>
 8006df0:	04e7c83a 	sub	r19,zero,r19
 8006df4:	9804c03a 	cmpne	r2,r19,zero
 8006df8:	0739c83a 	sub	fp,zero,fp
 8006dfc:	e0b9c83a 	sub	fp,fp,r2
 8006e00:	05400b44 	movi	r21,45
 8006e04:	dd412785 	stb	r21,1182(sp)
 8006e08:	da413215 	stw	r9,1224(sp)
 8006e0c:	00800044 	movi	r2,1
 8006e10:	9f06b03a 	or	r3,r19,fp
 8006e14:	003bcf06 	br	8005d54 <__alt_data_end+0xfc005d54>
 8006e18:	da013f15 	stw	r8,1276(sp)
 8006e1c:	da413e15 	stw	r9,1272(sp)
 8006e20:	800c78c0 	call	800c78c <__fpclassifyd>
 8006e24:	da013f17 	ldw	r8,1276(sp)
 8006e28:	da413e17 	ldw	r9,1272(sp)
 8006e2c:	1000ce26 	beq	r2,zero,8007168 <___vfprintf_internal_r+0x19e8>
 8006e30:	057ff7c4 	movi	r21,-33
 8006e34:	00bfffc4 	movi	r2,-1
 8006e38:	856a703a 	and	r21,r16,r21
 8006e3c:	4881f026 	beq	r9,r2,8007600 <___vfprintf_internal_r+0x1e80>
 8006e40:	008011c4 	movi	r2,71
 8006e44:	a881e526 	beq	r21,r2,80075dc <___vfprintf_internal_r+0x1e5c>
 8006e48:	db013917 	ldw	r12,1252(sp)
 8006e4c:	8ac04014 	ori	r11,r17,256
 8006e50:	dac12d15 	stw	r11,1204(sp)
 8006e54:	6001e416 	blt	r12,zero,80075e8 <___vfprintf_internal_r+0x1e68>
 8006e58:	dc813917 	ldw	r18,1252(sp)
 8006e5c:	d8012b05 	stb	zero,1196(sp)
 8006e60:	00801984 	movi	r2,102
 8006e64:	80811826 	beq	r16,r2,80072c8 <___vfprintf_internal_r+0x1b48>
 8006e68:	00801184 	movi	r2,70
 8006e6c:	80811626 	beq	r16,r2,80072c8 <___vfprintf_internal_r+0x1b48>
 8006e70:	00801144 	movi	r2,69
 8006e74:	a881e026 	beq	r21,r2,80075f8 <___vfprintf_internal_r+0x1e78>
 8006e78:	4839883a 	mov	fp,r9
 8006e7c:	d8812604 	addi	r2,sp,1176
 8006e80:	d8800115 	stw	r2,4(sp)
 8006e84:	d9413717 	ldw	r5,1244(sp)
 8006e88:	d8812504 	addi	r2,sp,1172
 8006e8c:	d8800215 	stw	r2,8(sp)
 8006e90:	d8812104 	addi	r2,sp,1156
 8006e94:	df000015 	stw	fp,0(sp)
 8006e98:	d8800315 	stw	r2,12(sp)
 8006e9c:	b009883a 	mov	r4,r22
 8006ea0:	900d883a 	mov	r6,r18
 8006ea4:	01c00084 	movi	r7,2
 8006ea8:	da013f15 	stw	r8,1276(sp)
 8006eac:	da413e15 	stw	r9,1272(sp)
 8006eb0:	8007ad00 	call	8007ad0 <_dtoa_r>
 8006eb4:	d8813115 	stw	r2,1220(sp)
 8006eb8:	008019c4 	movi	r2,103
 8006ebc:	da013f17 	ldw	r8,1276(sp)
 8006ec0:	da413e17 	ldw	r9,1272(sp)
 8006ec4:	80800226 	beq	r16,r2,8006ed0 <___vfprintf_internal_r+0x1750>
 8006ec8:	008011c4 	movi	r2,71
 8006ecc:	8081101e 	bne	r16,r2,8007310 <___vfprintf_internal_r+0x1b90>
 8006ed0:	8880004c 	andi	r2,r17,1
 8006ed4:	1001df26 	beq	r2,zero,8007654 <___vfprintf_internal_r+0x1ed4>
 8006ed8:	db013117 	ldw	r12,1220(sp)
 8006edc:	6715883a 	add	r10,r12,fp
 8006ee0:	d9013717 	ldw	r4,1244(sp)
 8006ee4:	900b883a 	mov	r5,r18
 8006ee8:	000d883a 	mov	r6,zero
 8006eec:	000f883a 	mov	r7,zero
 8006ef0:	da013f15 	stw	r8,1276(sp)
 8006ef4:	da413e15 	stw	r9,1272(sp)
 8006ef8:	da813d15 	stw	r10,1268(sp)
 8006efc:	8010f780 	call	8010f78 <__eqdf2>
 8006f00:	da013f17 	ldw	r8,1276(sp)
 8006f04:	da413e17 	ldw	r9,1272(sp)
 8006f08:	da813d17 	ldw	r10,1268(sp)
 8006f0c:	10016526 	beq	r2,zero,80074a4 <___vfprintf_internal_r+0x1d24>
 8006f10:	d8812117 	ldw	r2,1156(sp)
 8006f14:	1280062e 	bgeu	r2,r10,8006f30 <___vfprintf_internal_r+0x17b0>
 8006f18:	01000c04 	movi	r4,48
 8006f1c:	10c00044 	addi	r3,r2,1
 8006f20:	d8c12115 	stw	r3,1156(sp)
 8006f24:	11000005 	stb	r4,0(r2)
 8006f28:	d8812117 	ldw	r2,1156(sp)
 8006f2c:	12bffb36 	bltu	r2,r10,8006f1c <__alt_data_end+0xfc006f1c>
 8006f30:	db013117 	ldw	r12,1220(sp)
 8006f34:	1305c83a 	sub	r2,r2,r12
 8006f38:	d8813315 	stw	r2,1228(sp)
 8006f3c:	008011c4 	movi	r2,71
 8006f40:	a8814a26 	beq	r21,r2,800746c <___vfprintf_internal_r+0x1cec>
 8006f44:	00801944 	movi	r2,101
 8006f48:	14020a0e 	bge	r2,r16,8007774 <___vfprintf_internal_r+0x1ff4>
 8006f4c:	00801984 	movi	r2,102
 8006f50:	8081b626 	beq	r16,r2,800762c <___vfprintf_internal_r+0x1eac>
 8006f54:	db012617 	ldw	r12,1176(sp)
 8006f58:	db013415 	stw	r12,1232(sp)
 8006f5c:	db013417 	ldw	r12,1232(sp)
 8006f60:	dac13317 	ldw	r11,1228(sp)
 8006f64:	62c1a816 	blt	r12,r11,8007608 <___vfprintf_internal_r+0x1e88>
 8006f68:	8c40004c 	andi	r17,r17,1
 8006f6c:	8801ca1e 	bne	r17,zero,8007698 <___vfprintf_internal_r+0x1f18>
 8006f70:	6005883a 	mov	r2,r12
 8006f74:	6001b516 	blt	r12,zero,800764c <___vfprintf_internal_r+0x1ecc>
 8006f78:	dc813417 	ldw	r18,1232(sp)
 8006f7c:	df012b07 	ldb	fp,1196(sp)
 8006f80:	e001321e 	bne	fp,zero,800744c <___vfprintf_internal_r+0x1ccc>
 8006f84:	dc412d17 	ldw	r17,1204(sp)
 8006f88:	dd412783 	ldbu	r21,1182(sp)
 8006f8c:	d8812b15 	stw	r2,1196(sp)
 8006f90:	dcc12d15 	stw	r19,1204(sp)
 8006f94:	d8013215 	stw	zero,1224(sp)
 8006f98:	003b8d06 	br	8005dd0 <__alt_data_end+0xfc005dd0>
 8006f9c:	88c0100c 	andi	r3,r17,64
 8006fa0:	18008226 	beq	r3,zero,80071ac <___vfprintf_internal_r+0x1a2c>
 8006fa4:	dac12d17 	ldw	r11,1204(sp)
 8006fa8:	14c0000b 	ldhu	r19,0(r2)
 8006fac:	0039883a 	mov	fp,zero
 8006fb0:	5ac00104 	addi	r11,r11,4
 8006fb4:	dac12d15 	stw	r11,1204(sp)
 8006fb8:	003c8f06 	br	80061f8 <__alt_data_end+0xfc0061f8>
 8006fbc:	1c000007 	ldb	r16,0(r3)
 8006fc0:	1805883a 	mov	r2,r3
 8006fc4:	003a5506 	br	800591c <__alt_data_end+0xfc00591c>
 8006fc8:	00800084 	movi	r2,2
 8006fcc:	003b5e06 	br	8005d48 <__alt_data_end+0xfc005d48>
 8006fd0:	8880040c 	andi	r2,r17,16
 8006fd4:	1000091e 	bne	r2,zero,8006ffc <___vfprintf_internal_r+0x187c>
 8006fd8:	8c40100c 	andi	r17,r17,64
 8006fdc:	88000726 	beq	r17,zero,8006ffc <___vfprintf_internal_r+0x187c>
 8006fe0:	db012d17 	ldw	r12,1204(sp)
 8006fe4:	dac12f17 	ldw	r11,1212(sp)
 8006fe8:	60800017 	ldw	r2,0(r12)
 8006fec:	63000104 	addi	r12,r12,4
 8006ff0:	db012d15 	stw	r12,1204(sp)
 8006ff4:	12c0000d 	sth	r11,0(r2)
 8006ff8:	003a1e06 	br	8005874 <__alt_data_end+0xfc005874>
 8006ffc:	db012d17 	ldw	r12,1204(sp)
 8007000:	dac12f17 	ldw	r11,1212(sp)
 8007004:	60800017 	ldw	r2,0(r12)
 8007008:	63000104 	addi	r12,r12,4
 800700c:	db012d15 	stw	r12,1204(sp)
 8007010:	12c00015 	stw	r11,0(r2)
 8007014:	003a1706 	br	8005874 <__alt_data_end+0xfc005874>
 8007018:	010200b4 	movhi	r4,2050
 800701c:	213db984 	addi	r4,r4,-2330
 8007020:	d9012c15 	stw	r4,1200(sp)
 8007024:	dac12c17 	ldw	r11,1200(sp)
 8007028:	1c87883a 	add	r3,r3,r18
 800702c:	10800044 	addi	r2,r2,1
 8007030:	42c00015 	stw	r11,0(r8)
 8007034:	44800115 	stw	r18,4(r8)
 8007038:	d8c12015 	stw	r3,1152(sp)
 800703c:	d8811f15 	stw	r2,1148(sp)
 8007040:	010001c4 	movi	r4,7
 8007044:	20bee016 	blt	r4,r2,8006bc8 <__alt_data_end+0xfc006bc8>
 8007048:	42000204 	addi	r8,r8,8
 800704c:	003ee506 	br	8006be4 <__alt_data_end+0xfc006be4>
 8007050:	010200b4 	movhi	r4,2050
 8007054:	213db984 	addi	r4,r4,-2330
 8007058:	d9012c15 	stw	r4,1200(sp)
 800705c:	003bd806 	br	8005fc0 <__alt_data_end+0xfc005fc0>
 8007060:	b009883a 	mov	r4,r22
 8007064:	b80b883a 	mov	r5,r23
 8007068:	d9811e04 	addi	r6,sp,1144
 800706c:	800dd600 	call	800dd60 <__sprint_r>
 8007070:	103ada1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8007074:	d8c12017 	ldw	r3,1152(sp)
 8007078:	da000404 	addi	r8,sp,16
 800707c:	003d6b06 	br	800662c <__alt_data_end+0xfc00662c>
 8007080:	d8811f17 	ldw	r2,1148(sp)
 8007084:	030200b4 	movhi	r12,2050
 8007088:	01000044 	movi	r4,1
 800708c:	18c00044 	addi	r3,r3,1
 8007090:	10800044 	addi	r2,r2,1
 8007094:	633db104 	addi	r12,r12,-2364
 8007098:	41000115 	stw	r4,4(r8)
 800709c:	43000015 	stw	r12,0(r8)
 80070a0:	d8c12015 	stw	r3,1152(sp)
 80070a4:	d8811f15 	stw	r2,1148(sp)
 80070a8:	010001c4 	movi	r4,7
 80070ac:	20804916 	blt	r4,r2,80071d4 <___vfprintf_internal_r+0x1a54>
 80070b0:	42000204 	addi	r8,r8,8
 80070b4:	8000041e 	bne	r16,zero,80070c8 <___vfprintf_internal_r+0x1948>
 80070b8:	dac13317 	ldw	r11,1228(sp)
 80070bc:	5800021e 	bne	r11,zero,80070c8 <___vfprintf_internal_r+0x1948>
 80070c0:	8880004c 	andi	r2,r17,1
 80070c4:	103bd526 	beq	r2,zero,800601c <__alt_data_end+0xfc00601c>
 80070c8:	db013817 	ldw	r12,1248(sp)
 80070cc:	d8811f17 	ldw	r2,1148(sp)
 80070d0:	dac13517 	ldw	r11,1236(sp)
 80070d4:	1b07883a 	add	r3,r3,r12
 80070d8:	10800044 	addi	r2,r2,1
 80070dc:	42c00015 	stw	r11,0(r8)
 80070e0:	43000115 	stw	r12,4(r8)
 80070e4:	d8c12015 	stw	r3,1152(sp)
 80070e8:	d8811f15 	stw	r2,1148(sp)
 80070ec:	010001c4 	movi	r4,7
 80070f0:	20813016 	blt	r4,r2,80075b4 <___vfprintf_internal_r+0x1e34>
 80070f4:	42000204 	addi	r8,r8,8
 80070f8:	0421c83a 	sub	r16,zero,r16
 80070fc:	0400630e 	bge	zero,r16,800728c <___vfprintf_internal_r+0x1b0c>
 8007100:	04800404 	movi	r18,16
 8007104:	94009f0e 	bge	r18,r16,8007384 <___vfprintf_internal_r+0x1c04>
 8007108:	010200b4 	movhi	r4,2050
 800710c:	213db984 	addi	r4,r4,-2330
 8007110:	d9012c15 	stw	r4,1200(sp)
 8007114:	054001c4 	movi	r21,7
 8007118:	00000306 	br	8007128 <___vfprintf_internal_r+0x19a8>
 800711c:	42000204 	addi	r8,r8,8
 8007120:	843ffc04 	addi	r16,r16,-16
 8007124:	94009a0e 	bge	r18,r16,8007390 <___vfprintf_internal_r+0x1c10>
 8007128:	18c00404 	addi	r3,r3,16
 800712c:	10800044 	addi	r2,r2,1
 8007130:	45000015 	stw	r20,0(r8)
 8007134:	44800115 	stw	r18,4(r8)
 8007138:	d8c12015 	stw	r3,1152(sp)
 800713c:	d8811f15 	stw	r2,1148(sp)
 8007140:	a8bff60e 	bge	r21,r2,800711c <__alt_data_end+0xfc00711c>
 8007144:	b009883a 	mov	r4,r22
 8007148:	b80b883a 	mov	r5,r23
 800714c:	d9811e04 	addi	r6,sp,1144
 8007150:	800dd600 	call	800dd60 <__sprint_r>
 8007154:	103aa11e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8007158:	d8c12017 	ldw	r3,1152(sp)
 800715c:	d8811f17 	ldw	r2,1148(sp)
 8007160:	da000404 	addi	r8,sp,16
 8007164:	003fee06 	br	8007120 <__alt_data_end+0xfc007120>
 8007168:	008011c4 	movi	r2,71
 800716c:	1400b316 	blt	r2,r16,800743c <___vfprintf_internal_r+0x1cbc>
 8007170:	030200b4 	movhi	r12,2050
 8007174:	633da304 	addi	r12,r12,-2420
 8007178:	db013115 	stw	r12,1220(sp)
 800717c:	00c000c4 	movi	r3,3
 8007180:	00bfdfc4 	movi	r2,-129
 8007184:	d8c12b15 	stw	r3,1196(sp)
 8007188:	88a2703a 	and	r17,r17,r2
 800718c:	dd412783 	ldbu	r21,1182(sp)
 8007190:	dcc12d15 	stw	r19,1204(sp)
 8007194:	1825883a 	mov	r18,r3
 8007198:	d8013215 	stw	zero,1224(sp)
 800719c:	d8013415 	stw	zero,1232(sp)
 80071a0:	003b0b06 	br	8005dd0 <__alt_data_end+0xfc005dd0>
 80071a4:	4825883a 	mov	r18,r9
 80071a8:	003cba06 	br	8006494 <__alt_data_end+0xfc006494>
 80071ac:	db012d17 	ldw	r12,1204(sp)
 80071b0:	14c00017 	ldw	r19,0(r2)
 80071b4:	0039883a 	mov	fp,zero
 80071b8:	63000104 	addi	r12,r12,4
 80071bc:	db012d15 	stw	r12,1204(sp)
 80071c0:	003c0d06 	br	80061f8 <__alt_data_end+0xfc0061f8>
 80071c4:	008200b4 	movhi	r2,2050
 80071c8:	10bda104 	addi	r2,r2,-2428
 80071cc:	d8813115 	stw	r2,1220(sp)
 80071d0:	003ac406 	br	8005ce4 <__alt_data_end+0xfc005ce4>
 80071d4:	b009883a 	mov	r4,r22
 80071d8:	b80b883a 	mov	r5,r23
 80071dc:	d9811e04 	addi	r6,sp,1144
 80071e0:	800dd600 	call	800dd60 <__sprint_r>
 80071e4:	103a7d1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 80071e8:	dc012617 	ldw	r16,1176(sp)
 80071ec:	d8c12017 	ldw	r3,1152(sp)
 80071f0:	da000404 	addi	r8,sp,16
 80071f4:	003faf06 	br	80070b4 <__alt_data_end+0xfc0070b4>
 80071f8:	db012e17 	ldw	r12,1208(sp)
 80071fc:	1805883a 	mov	r2,r3
 8007200:	dac12d15 	stw	r11,1204(sp)
 8007204:	0319c83a 	sub	r12,zero,r12
 8007208:	db012e15 	stw	r12,1208(sp)
 800720c:	003a7e06 	br	8005c08 <__alt_data_end+0xfc005c08>
 8007210:	18800044 	addi	r2,r3,1
 8007214:	8c400814 	ori	r17,r17,32
 8007218:	1c000047 	ldb	r16,1(r3)
 800721c:	0039bf06 	br	800591c <__alt_data_end+0xfc00591c>
 8007220:	b009883a 	mov	r4,r22
 8007224:	b80b883a 	mov	r5,r23
 8007228:	d9811e04 	addi	r6,sp,1144
 800722c:	800dd600 	call	800dd60 <__sprint_r>
 8007230:	103a6a1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8007234:	d8c12017 	ldw	r3,1152(sp)
 8007238:	da000404 	addi	r8,sp,16
 800723c:	003d0c06 	br	8006670 <__alt_data_end+0xfc006670>
 8007240:	db012817 	ldw	r12,1184(sp)
 8007244:	d8c13117 	ldw	r3,1220(sp)
 8007248:	60e5c83a 	sub	r18,r12,r3
 800724c:	003adb06 	br	8005dbc <__alt_data_end+0xfc005dbc>
 8007250:	da013f15 	stw	r8,1276(sp)
 8007254:	80037580 	call	8003758 <strlen>
 8007258:	1025883a 	mov	r18,r2
 800725c:	da013f17 	ldw	r8,1276(sp)
 8007260:	903c8e0e 	bge	r18,zero,800649c <__alt_data_end+0xfc00649c>
 8007264:	0005883a 	mov	r2,zero
 8007268:	003c8c06 	br	800649c <__alt_data_end+0xfc00649c>
 800726c:	b009883a 	mov	r4,r22
 8007270:	b80b883a 	mov	r5,r23
 8007274:	d9811e04 	addi	r6,sp,1144
 8007278:	800dd600 	call	800dd60 <__sprint_r>
 800727c:	103a571e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8007280:	d8c12017 	ldw	r3,1152(sp)
 8007284:	d8811f17 	ldw	r2,1148(sp)
 8007288:	da000404 	addi	r8,sp,16
 800728c:	db013317 	ldw	r12,1228(sp)
 8007290:	dac13117 	ldw	r11,1220(sp)
 8007294:	10800044 	addi	r2,r2,1
 8007298:	60c7883a 	add	r3,r12,r3
 800729c:	42c00015 	stw	r11,0(r8)
 80072a0:	43000115 	stw	r12,4(r8)
 80072a4:	d8c12015 	stw	r3,1152(sp)
 80072a8:	d8811f15 	stw	r2,1148(sp)
 80072ac:	010001c4 	movi	r4,7
 80072b0:	20bb590e 	bge	r4,r2,8006018 <__alt_data_end+0xfc006018>
 80072b4:	003d7e06 	br	80068b0 <__alt_data_end+0xfc0068b0>
 80072b8:	010200b4 	movhi	r4,2050
 80072bc:	213dbd84 	addi	r4,r4,-2314
 80072c0:	d9013615 	stw	r4,1240(sp)
 80072c4:	003af606 	br	8005ea0 <__alt_data_end+0xfc005ea0>
 80072c8:	d8812604 	addi	r2,sp,1176
 80072cc:	d8800115 	stw	r2,4(sp)
 80072d0:	d9413717 	ldw	r5,1244(sp)
 80072d4:	d8812504 	addi	r2,sp,1172
 80072d8:	d8800215 	stw	r2,8(sp)
 80072dc:	d8812104 	addi	r2,sp,1156
 80072e0:	da400015 	stw	r9,0(sp)
 80072e4:	d8800315 	stw	r2,12(sp)
 80072e8:	b009883a 	mov	r4,r22
 80072ec:	900d883a 	mov	r6,r18
 80072f0:	01c000c4 	movi	r7,3
 80072f4:	da013f15 	stw	r8,1276(sp)
 80072f8:	da413e15 	stw	r9,1272(sp)
 80072fc:	8007ad00 	call	8007ad0 <_dtoa_r>
 8007300:	da413e17 	ldw	r9,1272(sp)
 8007304:	da013f17 	ldw	r8,1276(sp)
 8007308:	d8813115 	stw	r2,1220(sp)
 800730c:	4839883a 	mov	fp,r9
 8007310:	dac13117 	ldw	r11,1220(sp)
 8007314:	00801184 	movi	r2,70
 8007318:	5f15883a 	add	r10,r11,fp
 800731c:	a8bef01e 	bne	r21,r2,8006ee0 <__alt_data_end+0xfc006ee0>
 8007320:	59000007 	ldb	r4,0(r11)
 8007324:	00800c04 	movi	r2,48
 8007328:	2080e026 	beq	r4,r2,80076ac <___vfprintf_internal_r+0x1f2c>
 800732c:	d8c12617 	ldw	r3,1176(sp)
 8007330:	50d5883a 	add	r10,r10,r3
 8007334:	003eea06 	br	8006ee0 <__alt_data_end+0xfc006ee0>
 8007338:	0025883a 	mov	r18,zero
 800733c:	003db306 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8007340:	b009883a 	mov	r4,r22
 8007344:	b80b883a 	mov	r5,r23
 8007348:	d9811e04 	addi	r6,sp,1144
 800734c:	800dd600 	call	800dd60 <__sprint_r>
 8007350:	103a221e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8007354:	d8c12017 	ldw	r3,1152(sp)
 8007358:	da000404 	addi	r8,sp,16
 800735c:	003daa06 	br	8006a08 <__alt_data_end+0xfc006a08>
 8007360:	b009883a 	mov	r4,r22
 8007364:	b80b883a 	mov	r5,r23
 8007368:	d9811e04 	addi	r6,sp,1144
 800736c:	800dd600 	call	800dd60 <__sprint_r>
 8007370:	103a1a1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 8007374:	d8812617 	ldw	r2,1176(sp)
 8007378:	d8c12017 	ldw	r3,1152(sp)
 800737c:	da000404 	addi	r8,sp,16
 8007380:	003e2c06 	br	8006c34 <__alt_data_end+0xfc006c34>
 8007384:	030200b4 	movhi	r12,2050
 8007388:	633db984 	addi	r12,r12,-2330
 800738c:	db012c15 	stw	r12,1200(sp)
 8007390:	dac12c17 	ldw	r11,1200(sp)
 8007394:	1c07883a 	add	r3,r3,r16
 8007398:	10800044 	addi	r2,r2,1
 800739c:	42c00015 	stw	r11,0(r8)
 80073a0:	44000115 	stw	r16,4(r8)
 80073a4:	d8c12015 	stw	r3,1152(sp)
 80073a8:	d8811f15 	stw	r2,1148(sp)
 80073ac:	010001c4 	movi	r4,7
 80073b0:	20bfae16 	blt	r4,r2,800726c <__alt_data_end+0xfc00726c>
 80073b4:	42000204 	addi	r8,r8,8
 80073b8:	003fb406 	br	800728c <__alt_data_end+0xfc00728c>
 80073bc:	030200b4 	movhi	r12,2050
 80073c0:	633dbd84 	addi	r12,r12,-2314
 80073c4:	db013615 	stw	r12,1240(sp)
 80073c8:	003b3806 	br	80060ac <__alt_data_end+0xfc0060ac>
 80073cc:	b009883a 	mov	r4,r22
 80073d0:	b80b883a 	mov	r5,r23
 80073d4:	d9811e04 	addi	r6,sp,1144
 80073d8:	800dd600 	call	800dd60 <__sprint_r>
 80073dc:	1039ff1e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 80073e0:	d8812617 	ldw	r2,1176(sp)
 80073e4:	db013317 	ldw	r12,1228(sp)
 80073e8:	d8c12017 	ldw	r3,1152(sp)
 80073ec:	da000404 	addi	r8,sp,16
 80073f0:	6085c83a 	sub	r2,r12,r2
 80073f4:	003e2006 	br	8006c78 <__alt_data_end+0xfc006c78>
 80073f8:	0021883a 	mov	r16,zero
 80073fc:	003e1f06 	br	8006c7c <__alt_data_end+0xfc006c7c>
 8007400:	00800184 	movi	r2,6
 8007404:	1240012e 	bgeu	r2,r9,800740c <___vfprintf_internal_r+0x1c8c>
 8007408:	1013883a 	mov	r9,r2
 800740c:	4825883a 	mov	r18,r9
 8007410:	4805883a 	mov	r2,r9
 8007414:	48009e16 	blt	r9,zero,8007690 <___vfprintf_internal_r+0x1f10>
 8007418:	d8812b15 	stw	r2,1196(sp)
 800741c:	008200b4 	movhi	r2,2050
 8007420:	10bdaf04 	addi	r2,r2,-2372
 8007424:	d8813115 	stw	r2,1220(sp)
 8007428:	dcc12d15 	stw	r19,1204(sp)
 800742c:	d8013215 	stw	zero,1224(sp)
 8007430:	d8013415 	stw	zero,1232(sp)
 8007434:	0005883a 	mov	r2,zero
 8007438:	003a6c06 	br	8005dec <__alt_data_end+0xfc005dec>
 800743c:	008200b4 	movhi	r2,2050
 8007440:	10bda404 	addi	r2,r2,-2416
 8007444:	d8813115 	stw	r2,1220(sp)
 8007448:	003f4c06 	br	800717c <__alt_data_end+0xfc00717c>
 800744c:	00c00b44 	movi	r3,45
 8007450:	d8812b15 	stw	r2,1196(sp)
 8007454:	dc412d17 	ldw	r17,1204(sp)
 8007458:	d8c12785 	stb	r3,1182(sp)
 800745c:	dcc12d15 	stw	r19,1204(sp)
 8007460:	d8013215 	stw	zero,1224(sp)
 8007464:	00800b44 	movi	r2,45
 8007468:	003a5d06 	br	8005de0 <__alt_data_end+0xfc005de0>
 800746c:	d8c12617 	ldw	r3,1176(sp)
 8007470:	00bfff44 	movi	r2,-3
 8007474:	18800d16 	blt	r3,r2,80074ac <___vfprintf_internal_r+0x1d2c>
 8007478:	48c00c16 	blt	r9,r3,80074ac <___vfprintf_internal_r+0x1d2c>
 800747c:	d8c13415 	stw	r3,1232(sp)
 8007480:	040019c4 	movi	r16,103
 8007484:	003eb506 	br	8006f5c <__alt_data_end+0xfc006f5c>
 8007488:	05400b44 	movi	r21,45
 800748c:	dd412785 	stb	r21,1182(sp)
 8007490:	003a0f06 	br	8005cd0 <__alt_data_end+0xfc005cd0>
 8007494:	010200b4 	movhi	r4,2050
 8007498:	213db984 	addi	r4,r4,-2330
 800749c:	d9012c15 	stw	r4,1200(sp)
 80074a0:	003cb106 	br	8006768 <__alt_data_end+0xfc006768>
 80074a4:	5005883a 	mov	r2,r10
 80074a8:	003ea106 	br	8006f30 <__alt_data_end+0xfc006f30>
 80074ac:	843fff84 	addi	r16,r16,-2
 80074b0:	1f3fffc4 	addi	fp,r3,-1
 80074b4:	df012615 	stw	fp,1176(sp)
 80074b8:	dc0122c5 	stb	r16,1163(sp)
 80074bc:	e0009516 	blt	fp,zero,8007714 <___vfprintf_internal_r+0x1f94>
 80074c0:	00800ac4 	movi	r2,43
 80074c4:	d8812305 	stb	r2,1164(sp)
 80074c8:	00800244 	movi	r2,9
 80074cc:	1700690e 	bge	r2,fp,8007674 <___vfprintf_internal_r+0x1ef4>
 80074d0:	dd4122c4 	addi	r21,sp,1163
 80074d4:	dc012c15 	stw	r16,1200(sp)
 80074d8:	8825883a 	mov	r18,r17
 80074dc:	a821883a 	mov	r16,r21
 80074e0:	4023883a 	mov	r17,r8
 80074e4:	e009883a 	mov	r4,fp
 80074e8:	01400284 	movi	r5,10
 80074ec:	80106400 	call	8010640 <__modsi3>
 80074f0:	10800c04 	addi	r2,r2,48
 80074f4:	843fffc4 	addi	r16,r16,-1
 80074f8:	e009883a 	mov	r4,fp
 80074fc:	01400284 	movi	r5,10
 8007500:	80800005 	stb	r2,0(r16)
 8007504:	80105ec0 	call	80105ec <__divsi3>
 8007508:	1039883a 	mov	fp,r2
 800750c:	00800244 	movi	r2,9
 8007510:	173ff416 	blt	r2,fp,80074e4 <__alt_data_end+0xfc0074e4>
 8007514:	8811883a 	mov	r8,r17
 8007518:	e0800c04 	addi	r2,fp,48
 800751c:	9023883a 	mov	r17,r18
 8007520:	8025883a 	mov	r18,r16
 8007524:	913fffc4 	addi	r4,r18,-1
 8007528:	90bfffc5 	stb	r2,-1(r18)
 800752c:	dc012c17 	ldw	r16,1200(sp)
 8007530:	25408e2e 	bgeu	r4,r21,800776c <___vfprintf_internal_r+0x1fec>
 8007534:	d9412384 	addi	r5,sp,1166
 8007538:	2c8bc83a 	sub	r5,r5,r18
 800753c:	d8c12344 	addi	r3,sp,1165
 8007540:	a94b883a 	add	r5,r21,r5
 8007544:	00000106 	br	800754c <___vfprintf_internal_r+0x1dcc>
 8007548:	20800003 	ldbu	r2,0(r4)
 800754c:	18800005 	stb	r2,0(r3)
 8007550:	18c00044 	addi	r3,r3,1
 8007554:	21000044 	addi	r4,r4,1
 8007558:	197ffb1e 	bne	r3,r5,8007548 <__alt_data_end+0xfc007548>
 800755c:	d8812304 	addi	r2,sp,1164
 8007560:	1485c83a 	sub	r2,r2,r18
 8007564:	d8c12344 	addi	r3,sp,1165
 8007568:	1885883a 	add	r2,r3,r2
 800756c:	dac13317 	ldw	r11,1228(sp)
 8007570:	156bc83a 	sub	r21,r2,r21
 8007574:	dd413a15 	stw	r21,1256(sp)
 8007578:	00800044 	movi	r2,1
 800757c:	5d65883a 	add	r18,r11,r21
 8007580:	12c0770e 	bge	r2,r11,8007760 <___vfprintf_internal_r+0x1fe0>
 8007584:	94800044 	addi	r18,r18,1
 8007588:	9005883a 	mov	r2,r18
 800758c:	90007216 	blt	r18,zero,8007758 <___vfprintf_internal_r+0x1fd8>
 8007590:	d8013415 	stw	zero,1232(sp)
 8007594:	003e7906 	br	8006f7c <__alt_data_end+0xfc006f7c>
 8007598:	da412b15 	stw	r9,1196(sp)
 800759c:	dd412783 	ldbu	r21,1182(sp)
 80075a0:	4825883a 	mov	r18,r9
 80075a4:	dcc12d15 	stw	r19,1204(sp)
 80075a8:	d8013215 	stw	zero,1224(sp)
 80075ac:	d8013415 	stw	zero,1232(sp)
 80075b0:	003a0706 	br	8005dd0 <__alt_data_end+0xfc005dd0>
 80075b4:	b009883a 	mov	r4,r22
 80075b8:	b80b883a 	mov	r5,r23
 80075bc:	d9811e04 	addi	r6,sp,1144
 80075c0:	800dd600 	call	800dd60 <__sprint_r>
 80075c4:	1039851e 	bne	r2,zero,8005bdc <__alt_data_end+0xfc005bdc>
 80075c8:	dc012617 	ldw	r16,1176(sp)
 80075cc:	d8c12017 	ldw	r3,1152(sp)
 80075d0:	d8811f17 	ldw	r2,1148(sp)
 80075d4:	da000404 	addi	r8,sp,16
 80075d8:	003ec706 	br	80070f8 <__alt_data_end+0xfc0070f8>
 80075dc:	483e1a1e 	bne	r9,zero,8006e48 <__alt_data_end+0xfc006e48>
 80075e0:	9013883a 	mov	r9,r18
 80075e4:	003e1806 	br	8006e48 <__alt_data_end+0xfc006e48>
 80075e8:	00c00b44 	movi	r3,45
 80075ec:	64a0003c 	xorhi	r18,r12,32768
 80075f0:	d8c12b05 	stb	r3,1196(sp)
 80075f4:	003e1a06 	br	8006e60 <__alt_data_end+0xfc006e60>
 80075f8:	4f000044 	addi	fp,r9,1
 80075fc:	003e1f06 	br	8006e7c <__alt_data_end+0xfc006e7c>
 8007600:	02400184 	movi	r9,6
 8007604:	003e1006 	br	8006e48 <__alt_data_end+0xfc006e48>
 8007608:	d8c13417 	ldw	r3,1232(sp)
 800760c:	00c04b0e 	bge	zero,r3,800773c <___vfprintf_internal_r+0x1fbc>
 8007610:	04800044 	movi	r18,1
 8007614:	dac13317 	ldw	r11,1228(sp)
 8007618:	92e5883a 	add	r18,r18,r11
 800761c:	9005883a 	mov	r2,r18
 8007620:	903e560e 	bge	r18,zero,8006f7c <__alt_data_end+0xfc006f7c>
 8007624:	0005883a 	mov	r2,zero
 8007628:	003e5406 	br	8006f7c <__alt_data_end+0xfc006f7c>
 800762c:	d8c12617 	ldw	r3,1176(sp)
 8007630:	d8c13415 	stw	r3,1232(sp)
 8007634:	00c03b0e 	bge	zero,r3,8007724 <___vfprintf_internal_r+0x1fa4>
 8007638:	4800081e 	bne	r9,zero,800765c <___vfprintf_internal_r+0x1edc>
 800763c:	8c40004c 	andi	r17,r17,1
 8007640:	8800061e 	bne	r17,zero,800765c <___vfprintf_internal_r+0x1edc>
 8007644:	1805883a 	mov	r2,r3
 8007648:	183e4b0e 	bge	r3,zero,8006f78 <__alt_data_end+0xfc006f78>
 800764c:	0005883a 	mov	r2,zero
 8007650:	003e4906 	br	8006f78 <__alt_data_end+0xfc006f78>
 8007654:	d8812117 	ldw	r2,1156(sp)
 8007658:	003e3506 	br	8006f30 <__alt_data_end+0xfc006f30>
 800765c:	dac13417 	ldw	r11,1232(sp)
 8007660:	4a400044 	addi	r9,r9,1
 8007664:	5a65883a 	add	r18,r11,r9
 8007668:	9005883a 	mov	r2,r18
 800766c:	903e430e 	bge	r18,zero,8006f7c <__alt_data_end+0xfc006f7c>
 8007670:	003fec06 	br	8007624 <__alt_data_end+0xfc007624>
 8007674:	00800c04 	movi	r2,48
 8007678:	e0c00c04 	addi	r3,fp,48
 800767c:	d8812345 	stb	r2,1165(sp)
 8007680:	d8c12385 	stb	r3,1166(sp)
 8007684:	d88123c4 	addi	r2,sp,1167
 8007688:	dd4122c4 	addi	r21,sp,1163
 800768c:	003fb706 	br	800756c <__alt_data_end+0xfc00756c>
 8007690:	0005883a 	mov	r2,zero
 8007694:	003f6006 	br	8007418 <__alt_data_end+0xfc007418>
 8007698:	db013417 	ldw	r12,1232(sp)
 800769c:	64800044 	addi	r18,r12,1
 80076a0:	9005883a 	mov	r2,r18
 80076a4:	903e350e 	bge	r18,zero,8006f7c <__alt_data_end+0xfc006f7c>
 80076a8:	003fde06 	br	8007624 <__alt_data_end+0xfc007624>
 80076ac:	d9013717 	ldw	r4,1244(sp)
 80076b0:	900b883a 	mov	r5,r18
 80076b4:	000d883a 	mov	r6,zero
 80076b8:	000f883a 	mov	r7,zero
 80076bc:	da013f15 	stw	r8,1276(sp)
 80076c0:	da413e15 	stw	r9,1272(sp)
 80076c4:	da813d15 	stw	r10,1268(sp)
 80076c8:	8010f780 	call	8010f78 <__eqdf2>
 80076cc:	da013f17 	ldw	r8,1276(sp)
 80076d0:	da413e17 	ldw	r9,1272(sp)
 80076d4:	da813d17 	ldw	r10,1268(sp)
 80076d8:	103f1426 	beq	r2,zero,800732c <__alt_data_end+0xfc00732c>
 80076dc:	00800044 	movi	r2,1
 80076e0:	1707c83a 	sub	r3,r2,fp
 80076e4:	d8c12615 	stw	r3,1176(sp)
 80076e8:	003f1106 	br	8007330 <__alt_data_end+0xfc007330>
 80076ec:	dac12d17 	ldw	r11,1204(sp)
 80076f0:	5a400017 	ldw	r9,0(r11)
 80076f4:	5ac00104 	addi	r11,r11,4
 80076f8:	dac12d15 	stw	r11,1204(sp)
 80076fc:	483ec60e 	bge	r9,zero,8007218 <__alt_data_end+0xfc007218>
 8007700:	027fffc4 	movi	r9,-1
 8007704:	1c000047 	ldb	r16,1(r3)
 8007708:	00388406 	br	800591c <__alt_data_end+0xfc00591c>
 800770c:	043fffc4 	movi	r16,-1
 8007710:	00391006 	br	8005b54 <__alt_data_end+0xfc005b54>
 8007714:	00800b44 	movi	r2,45
 8007718:	0739c83a 	sub	fp,zero,fp
 800771c:	d8812305 	stb	r2,1164(sp)
 8007720:	003f6906 	br	80074c8 <__alt_data_end+0xfc0074c8>
 8007724:	4800081e 	bne	r9,zero,8007748 <___vfprintf_internal_r+0x1fc8>
 8007728:	8c40004c 	andi	r17,r17,1
 800772c:	8800061e 	bne	r17,zero,8007748 <___vfprintf_internal_r+0x1fc8>
 8007730:	00800044 	movi	r2,1
 8007734:	1025883a 	mov	r18,r2
 8007738:	003e1006 	br	8006f7c <__alt_data_end+0xfc006f7c>
 800773c:	04800084 	movi	r18,2
 8007740:	90e5c83a 	sub	r18,r18,r3
 8007744:	003fb306 	br	8007614 <__alt_data_end+0xfc007614>
 8007748:	4c800084 	addi	r18,r9,2
 800774c:	9005883a 	mov	r2,r18
 8007750:	903e0a0e 	bge	r18,zero,8006f7c <__alt_data_end+0xfc006f7c>
 8007754:	003fb306 	br	8007624 <__alt_data_end+0xfc007624>
 8007758:	0005883a 	mov	r2,zero
 800775c:	003f8c06 	br	8007590 <__alt_data_end+0xfc007590>
 8007760:	88a2703a 	and	r17,r17,r2
 8007764:	883f8826 	beq	r17,zero,8007588 <__alt_data_end+0xfc007588>
 8007768:	003f8606 	br	8007584 <__alt_data_end+0xfc007584>
 800776c:	d8812344 	addi	r2,sp,1165
 8007770:	003f7e06 	br	800756c <__alt_data_end+0xfc00756c>
 8007774:	d8c12617 	ldw	r3,1176(sp)
 8007778:	003f4d06 	br	80074b0 <__alt_data_end+0xfc0074b0>

0800777c <__vfprintf_internal>:
 800777c:	2007883a 	mov	r3,r4
 8007780:	010200b4 	movhi	r4,2050
 8007784:	2104ed04 	addi	r4,r4,5044
 8007788:	21000017 	ldw	r4,0(r4)
 800778c:	2805883a 	mov	r2,r5
 8007790:	300f883a 	mov	r7,r6
 8007794:	180b883a 	mov	r5,r3
 8007798:	100d883a 	mov	r6,r2
 800779c:	80057801 	jmpi	8005780 <___vfprintf_internal_r>

080077a0 <__swsetup_r>:
 80077a0:	008200b4 	movhi	r2,2050
 80077a4:	defffd04 	addi	sp,sp,-12
 80077a8:	1084ed04 	addi	r2,r2,5044
 80077ac:	dc400115 	stw	r17,4(sp)
 80077b0:	2023883a 	mov	r17,r4
 80077b4:	11000017 	ldw	r4,0(r2)
 80077b8:	dc000015 	stw	r16,0(sp)
 80077bc:	dfc00215 	stw	ra,8(sp)
 80077c0:	2821883a 	mov	r16,r5
 80077c4:	20000226 	beq	r4,zero,80077d0 <__swsetup_r+0x30>
 80077c8:	20c00e17 	ldw	r3,56(r4)
 80077cc:	18002e26 	beq	r3,zero,8007888 <__swsetup_r+0xe8>
 80077d0:	8080030b 	ldhu	r2,12(r16)
 80077d4:	10c0020c 	andi	r3,r2,8
 80077d8:	100d883a 	mov	r6,r2
 80077dc:	18000f26 	beq	r3,zero,800781c <__swsetup_r+0x7c>
 80077e0:	80c00417 	ldw	r3,16(r16)
 80077e4:	18001526 	beq	r3,zero,800783c <__swsetup_r+0x9c>
 80077e8:	1100004c 	andi	r4,r2,1
 80077ec:	20001c1e 	bne	r4,zero,8007860 <__swsetup_r+0xc0>
 80077f0:	1080008c 	andi	r2,r2,2
 80077f4:	1000261e 	bne	r2,zero,8007890 <__swsetup_r+0xf0>
 80077f8:	80800517 	ldw	r2,20(r16)
 80077fc:	80800215 	stw	r2,8(r16)
 8007800:	18001c26 	beq	r3,zero,8007874 <__swsetup_r+0xd4>
 8007804:	0005883a 	mov	r2,zero
 8007808:	dfc00217 	ldw	ra,8(sp)
 800780c:	dc400117 	ldw	r17,4(sp)
 8007810:	dc000017 	ldw	r16,0(sp)
 8007814:	dec00304 	addi	sp,sp,12
 8007818:	f800283a 	ret
 800781c:	3080040c 	andi	r2,r6,16
 8007820:	10001726 	beq	r2,zero,8007880 <__swsetup_r+0xe0>
 8007824:	3080010c 	andi	r2,r6,4
 8007828:	10001b1e 	bne	r2,zero,8007898 <__swsetup_r+0xf8>
 800782c:	80c00417 	ldw	r3,16(r16)
 8007830:	30800214 	ori	r2,r6,8
 8007834:	8080030d 	sth	r2,12(r16)
 8007838:	183feb1e 	bne	r3,zero,80077e8 <__alt_data_end+0xfc0077e8>
 800783c:	1140a00c 	andi	r5,r2,640
 8007840:	01008004 	movi	r4,512
 8007844:	293fe826 	beq	r5,r4,80077e8 <__alt_data_end+0xfc0077e8>
 8007848:	8809883a 	mov	r4,r17
 800784c:	800b883a 	mov	r5,r16
 8007850:	800a2f80 	call	800a2f8 <__smakebuf_r>
 8007854:	8080030b 	ldhu	r2,12(r16)
 8007858:	80c00417 	ldw	r3,16(r16)
 800785c:	003fe206 	br	80077e8 <__alt_data_end+0xfc0077e8>
 8007860:	80800517 	ldw	r2,20(r16)
 8007864:	80000215 	stw	zero,8(r16)
 8007868:	0085c83a 	sub	r2,zero,r2
 800786c:	80800615 	stw	r2,24(r16)
 8007870:	183fe41e 	bne	r3,zero,8007804 <__alt_data_end+0xfc007804>
 8007874:	8080030b 	ldhu	r2,12(r16)
 8007878:	1080200c 	andi	r2,r2,128
 800787c:	103fe226 	beq	r2,zero,8007808 <__alt_data_end+0xfc007808>
 8007880:	00bfffc4 	movi	r2,-1
 8007884:	003fe006 	br	8007808 <__alt_data_end+0xfc007808>
 8007888:	80097a00 	call	80097a0 <__sinit>
 800788c:	003fd006 	br	80077d0 <__alt_data_end+0xfc0077d0>
 8007890:	0005883a 	mov	r2,zero
 8007894:	003fd906 	br	80077fc <__alt_data_end+0xfc0077fc>
 8007898:	81400c17 	ldw	r5,48(r16)
 800789c:	28000626 	beq	r5,zero,80078b8 <__swsetup_r+0x118>
 80078a0:	80801004 	addi	r2,r16,64
 80078a4:	28800326 	beq	r5,r2,80078b4 <__swsetup_r+0x114>
 80078a8:	8809883a 	mov	r4,r17
 80078ac:	80099140 	call	8009914 <_free_r>
 80078b0:	8180030b 	ldhu	r6,12(r16)
 80078b4:	80000c15 	stw	zero,48(r16)
 80078b8:	80c00417 	ldw	r3,16(r16)
 80078bc:	00bff6c4 	movi	r2,-37
 80078c0:	118c703a 	and	r6,r2,r6
 80078c4:	80000115 	stw	zero,4(r16)
 80078c8:	80c00015 	stw	r3,0(r16)
 80078cc:	003fd806 	br	8007830 <__alt_data_end+0xfc007830>

080078d0 <quorem>:
 80078d0:	defff704 	addi	sp,sp,-36
 80078d4:	dc800215 	stw	r18,8(sp)
 80078d8:	20800417 	ldw	r2,16(r4)
 80078dc:	2c800417 	ldw	r18,16(r5)
 80078e0:	dfc00815 	stw	ra,32(sp)
 80078e4:	ddc00715 	stw	r23,28(sp)
 80078e8:	dd800615 	stw	r22,24(sp)
 80078ec:	dd400515 	stw	r21,20(sp)
 80078f0:	dd000415 	stw	r20,16(sp)
 80078f4:	dcc00315 	stw	r19,12(sp)
 80078f8:	dc400115 	stw	r17,4(sp)
 80078fc:	dc000015 	stw	r16,0(sp)
 8007900:	14807116 	blt	r2,r18,8007ac8 <quorem+0x1f8>
 8007904:	94bfffc4 	addi	r18,r18,-1
 8007908:	94ad883a 	add	r22,r18,r18
 800790c:	b5ad883a 	add	r22,r22,r22
 8007910:	2c400504 	addi	r17,r5,20
 8007914:	8da9883a 	add	r20,r17,r22
 8007918:	25400504 	addi	r21,r4,20
 800791c:	282f883a 	mov	r23,r5
 8007920:	adad883a 	add	r22,r21,r22
 8007924:	a1400017 	ldw	r5,0(r20)
 8007928:	2021883a 	mov	r16,r4
 800792c:	b1000017 	ldw	r4,0(r22)
 8007930:	29400044 	addi	r5,r5,1
 8007934:	801069c0 	call	801069c <__udivsi3>
 8007938:	1027883a 	mov	r19,r2
 800793c:	10002c26 	beq	r2,zero,80079f0 <quorem+0x120>
 8007940:	a813883a 	mov	r9,r21
 8007944:	8811883a 	mov	r8,r17
 8007948:	0009883a 	mov	r4,zero
 800794c:	000d883a 	mov	r6,zero
 8007950:	41c00017 	ldw	r7,0(r8)
 8007954:	49400017 	ldw	r5,0(r9)
 8007958:	42000104 	addi	r8,r8,4
 800795c:	38bfffcc 	andi	r2,r7,65535
 8007960:	14c5383a 	mul	r2,r2,r19
 8007964:	380ed43a 	srli	r7,r7,16
 8007968:	28ffffcc 	andi	r3,r5,65535
 800796c:	2085883a 	add	r2,r4,r2
 8007970:	1008d43a 	srli	r4,r2,16
 8007974:	3ccf383a 	mul	r7,r7,r19
 8007978:	198d883a 	add	r6,r3,r6
 800797c:	10ffffcc 	andi	r3,r2,65535
 8007980:	30c7c83a 	sub	r3,r6,r3
 8007984:	280ad43a 	srli	r5,r5,16
 8007988:	21c9883a 	add	r4,r4,r7
 800798c:	180dd43a 	srai	r6,r3,16
 8007990:	20bfffcc 	andi	r2,r4,65535
 8007994:	288bc83a 	sub	r5,r5,r2
 8007998:	298b883a 	add	r5,r5,r6
 800799c:	280e943a 	slli	r7,r5,16
 80079a0:	18ffffcc 	andi	r3,r3,65535
 80079a4:	2008d43a 	srli	r4,r4,16
 80079a8:	38ceb03a 	or	r7,r7,r3
 80079ac:	49c00015 	stw	r7,0(r9)
 80079b0:	280dd43a 	srai	r6,r5,16
 80079b4:	4a400104 	addi	r9,r9,4
 80079b8:	a23fe52e 	bgeu	r20,r8,8007950 <__alt_data_end+0xfc007950>
 80079bc:	b0800017 	ldw	r2,0(r22)
 80079c0:	10000b1e 	bne	r2,zero,80079f0 <quorem+0x120>
 80079c4:	b0bfff04 	addi	r2,r22,-4
 80079c8:	a880082e 	bgeu	r21,r2,80079ec <quorem+0x11c>
 80079cc:	b0ffff17 	ldw	r3,-4(r22)
 80079d0:	18000326 	beq	r3,zero,80079e0 <quorem+0x110>
 80079d4:	00000506 	br	80079ec <quorem+0x11c>
 80079d8:	10c00017 	ldw	r3,0(r2)
 80079dc:	1800031e 	bne	r3,zero,80079ec <quorem+0x11c>
 80079e0:	10bfff04 	addi	r2,r2,-4
 80079e4:	94bfffc4 	addi	r18,r18,-1
 80079e8:	a8bffb36 	bltu	r21,r2,80079d8 <__alt_data_end+0xfc0079d8>
 80079ec:	84800415 	stw	r18,16(r16)
 80079f0:	8009883a 	mov	r4,r16
 80079f4:	b80b883a 	mov	r5,r23
 80079f8:	800b9b80 	call	800b9b8 <__mcmp>
 80079fc:	10002616 	blt	r2,zero,8007a98 <quorem+0x1c8>
 8007a00:	9cc00044 	addi	r19,r19,1
 8007a04:	a80d883a 	mov	r6,r21
 8007a08:	000b883a 	mov	r5,zero
 8007a0c:	31000017 	ldw	r4,0(r6)
 8007a10:	88800017 	ldw	r2,0(r17)
 8007a14:	31800104 	addi	r6,r6,4
 8007a18:	20ffffcc 	andi	r3,r4,65535
 8007a1c:	194b883a 	add	r5,r3,r5
 8007a20:	10ffffcc 	andi	r3,r2,65535
 8007a24:	28c7c83a 	sub	r3,r5,r3
 8007a28:	1004d43a 	srli	r2,r2,16
 8007a2c:	2008d43a 	srli	r4,r4,16
 8007a30:	180bd43a 	srai	r5,r3,16
 8007a34:	18ffffcc 	andi	r3,r3,65535
 8007a38:	2089c83a 	sub	r4,r4,r2
 8007a3c:	2149883a 	add	r4,r4,r5
 8007a40:	2004943a 	slli	r2,r4,16
 8007a44:	8c400104 	addi	r17,r17,4
 8007a48:	200bd43a 	srai	r5,r4,16
 8007a4c:	10c6b03a 	or	r3,r2,r3
 8007a50:	30ffff15 	stw	r3,-4(r6)
 8007a54:	a47fed2e 	bgeu	r20,r17,8007a0c <__alt_data_end+0xfc007a0c>
 8007a58:	9485883a 	add	r2,r18,r18
 8007a5c:	1085883a 	add	r2,r2,r2
 8007a60:	a887883a 	add	r3,r21,r2
 8007a64:	18800017 	ldw	r2,0(r3)
 8007a68:	10000b1e 	bne	r2,zero,8007a98 <quorem+0x1c8>
 8007a6c:	18bfff04 	addi	r2,r3,-4
 8007a70:	a880082e 	bgeu	r21,r2,8007a94 <quorem+0x1c4>
 8007a74:	18ffff17 	ldw	r3,-4(r3)
 8007a78:	18000326 	beq	r3,zero,8007a88 <quorem+0x1b8>
 8007a7c:	00000506 	br	8007a94 <quorem+0x1c4>
 8007a80:	10c00017 	ldw	r3,0(r2)
 8007a84:	1800031e 	bne	r3,zero,8007a94 <quorem+0x1c4>
 8007a88:	10bfff04 	addi	r2,r2,-4
 8007a8c:	94bfffc4 	addi	r18,r18,-1
 8007a90:	a8bffb36 	bltu	r21,r2,8007a80 <__alt_data_end+0xfc007a80>
 8007a94:	84800415 	stw	r18,16(r16)
 8007a98:	9805883a 	mov	r2,r19
 8007a9c:	dfc00817 	ldw	ra,32(sp)
 8007aa0:	ddc00717 	ldw	r23,28(sp)
 8007aa4:	dd800617 	ldw	r22,24(sp)
 8007aa8:	dd400517 	ldw	r21,20(sp)
 8007aac:	dd000417 	ldw	r20,16(sp)
 8007ab0:	dcc00317 	ldw	r19,12(sp)
 8007ab4:	dc800217 	ldw	r18,8(sp)
 8007ab8:	dc400117 	ldw	r17,4(sp)
 8007abc:	dc000017 	ldw	r16,0(sp)
 8007ac0:	dec00904 	addi	sp,sp,36
 8007ac4:	f800283a 	ret
 8007ac8:	0005883a 	mov	r2,zero
 8007acc:	003ff306 	br	8007a9c <__alt_data_end+0xfc007a9c>

08007ad0 <_dtoa_r>:
 8007ad0:	20801017 	ldw	r2,64(r4)
 8007ad4:	deffde04 	addi	sp,sp,-136
 8007ad8:	dd401d15 	stw	r21,116(sp)
 8007adc:	dcc01b15 	stw	r19,108(sp)
 8007ae0:	dc801a15 	stw	r18,104(sp)
 8007ae4:	dc401915 	stw	r17,100(sp)
 8007ae8:	dc001815 	stw	r16,96(sp)
 8007aec:	dfc02115 	stw	ra,132(sp)
 8007af0:	df002015 	stw	fp,128(sp)
 8007af4:	ddc01f15 	stw	r23,124(sp)
 8007af8:	dd801e15 	stw	r22,120(sp)
 8007afc:	dd001c15 	stw	r20,112(sp)
 8007b00:	d9c00315 	stw	r7,12(sp)
 8007b04:	2021883a 	mov	r16,r4
 8007b08:	302b883a 	mov	r21,r6
 8007b0c:	2825883a 	mov	r18,r5
 8007b10:	dc402417 	ldw	r17,144(sp)
 8007b14:	3027883a 	mov	r19,r6
 8007b18:	10000826 	beq	r2,zero,8007b3c <_dtoa_r+0x6c>
 8007b1c:	21801117 	ldw	r6,68(r4)
 8007b20:	00c00044 	movi	r3,1
 8007b24:	100b883a 	mov	r5,r2
 8007b28:	1986983a 	sll	r3,r3,r6
 8007b2c:	11800115 	stw	r6,4(r2)
 8007b30:	10c00215 	stw	r3,8(r2)
 8007b34:	800b1a00 	call	800b1a0 <_Bfree>
 8007b38:	80001015 	stw	zero,64(r16)
 8007b3c:	a8002d16 	blt	r21,zero,8007bf4 <_dtoa_r+0x124>
 8007b40:	88000015 	stw	zero,0(r17)
 8007b44:	a8dffc2c 	andhi	r3,r21,32752
 8007b48:	009ffc34 	movhi	r2,32752
 8007b4c:	18801b26 	beq	r3,r2,8007bbc <_dtoa_r+0xec>
 8007b50:	9009883a 	mov	r4,r18
 8007b54:	980b883a 	mov	r5,r19
 8007b58:	000d883a 	mov	r6,zero
 8007b5c:	000f883a 	mov	r7,zero
 8007b60:	8010f780 	call	8010f78 <__eqdf2>
 8007b64:	10002a1e 	bne	r2,zero,8007c10 <_dtoa_r+0x140>
 8007b68:	d8c02317 	ldw	r3,140(sp)
 8007b6c:	d9002517 	ldw	r4,148(sp)
 8007b70:	00800044 	movi	r2,1
 8007b74:	18800015 	stw	r2,0(r3)
 8007b78:	2001a226 	beq	r4,zero,8008204 <_dtoa_r+0x734>
 8007b7c:	008200b4 	movhi	r2,2050
 8007b80:	10bdb144 	addi	r2,r2,-2363
 8007b84:	20800015 	stw	r2,0(r4)
 8007b88:	10bfffc4 	addi	r2,r2,-1
 8007b8c:	dfc02117 	ldw	ra,132(sp)
 8007b90:	df002017 	ldw	fp,128(sp)
 8007b94:	ddc01f17 	ldw	r23,124(sp)
 8007b98:	dd801e17 	ldw	r22,120(sp)
 8007b9c:	dd401d17 	ldw	r21,116(sp)
 8007ba0:	dd001c17 	ldw	r20,112(sp)
 8007ba4:	dcc01b17 	ldw	r19,108(sp)
 8007ba8:	dc801a17 	ldw	r18,104(sp)
 8007bac:	dc401917 	ldw	r17,100(sp)
 8007bb0:	dc001817 	ldw	r16,96(sp)
 8007bb4:	dec02204 	addi	sp,sp,136
 8007bb8:	f800283a 	ret
 8007bbc:	d8c02317 	ldw	r3,140(sp)
 8007bc0:	0089c3c4 	movi	r2,9999
 8007bc4:	18800015 	stw	r2,0(r3)
 8007bc8:	90017c26 	beq	r18,zero,80081bc <_dtoa_r+0x6ec>
 8007bcc:	008200b4 	movhi	r2,2050
 8007bd0:	10bdc504 	addi	r2,r2,-2284
 8007bd4:	d9002517 	ldw	r4,148(sp)
 8007bd8:	203fec26 	beq	r4,zero,8007b8c <__alt_data_end+0xfc007b8c>
 8007bdc:	10c000c7 	ldb	r3,3(r2)
 8007be0:	18017d1e 	bne	r3,zero,80081d8 <_dtoa_r+0x708>
 8007be4:	10c000c4 	addi	r3,r2,3
 8007be8:	d9802517 	ldw	r6,148(sp)
 8007bec:	30c00015 	stw	r3,0(r6)
 8007bf0:	003fe606 	br	8007b8c <__alt_data_end+0xfc007b8c>
 8007bf4:	04e00034 	movhi	r19,32768
 8007bf8:	9cffffc4 	addi	r19,r19,-1
 8007bfc:	00800044 	movi	r2,1
 8007c00:	ace6703a 	and	r19,r21,r19
 8007c04:	88800015 	stw	r2,0(r17)
 8007c08:	982b883a 	mov	r21,r19
 8007c0c:	003fcd06 	br	8007b44 <__alt_data_end+0xfc007b44>
 8007c10:	d8800204 	addi	r2,sp,8
 8007c14:	a822d53a 	srli	r17,r21,20
 8007c18:	d8800015 	stw	r2,0(sp)
 8007c1c:	8009883a 	mov	r4,r16
 8007c20:	900b883a 	mov	r5,r18
 8007c24:	980d883a 	mov	r6,r19
 8007c28:	d9c00104 	addi	r7,sp,4
 8007c2c:	800bd2c0 	call	800bd2c <__d2b>
 8007c30:	1039883a 	mov	fp,r2
 8007c34:	88016a1e 	bne	r17,zero,80081e0 <_dtoa_r+0x710>
 8007c38:	dd000217 	ldw	r20,8(sp)
 8007c3c:	dc400117 	ldw	r17,4(sp)
 8007c40:	00befbc4 	movi	r2,-1041
 8007c44:	a463883a 	add	r17,r20,r17
 8007c48:	8882ea16 	blt	r17,r2,80087f4 <_dtoa_r+0xd24>
 8007c4c:	00bf0384 	movi	r2,-1010
 8007c50:	1445c83a 	sub	r2,r2,r17
 8007c54:	89010484 	addi	r4,r17,1042
 8007c58:	a8aa983a 	sll	r21,r21,r2
 8007c5c:	9108d83a 	srl	r4,r18,r4
 8007c60:	a908b03a 	or	r4,r21,r4
 8007c64:	8011ff00 	call	8011ff0 <__floatunsidf>
 8007c68:	017f8434 	movhi	r5,65040
 8007c6c:	01800044 	movi	r6,1
 8007c70:	1009883a 	mov	r4,r2
 8007c74:	194b883a 	add	r5,r3,r5
 8007c78:	8c7fffc4 	addi	r17,r17,-1
 8007c7c:	d9800f15 	stw	r6,60(sp)
 8007c80:	000d883a 	mov	r6,zero
 8007c84:	01cffe34 	movhi	r7,16376
 8007c88:	80117200 	call	8011720 <__subdf3>
 8007c8c:	0198dbf4 	movhi	r6,25455
 8007c90:	01cff4f4 	movhi	r7,16339
 8007c94:	1009883a 	mov	r4,r2
 8007c98:	180b883a 	mov	r5,r3
 8007c9c:	3190d844 	addi	r6,r6,17249
 8007ca0:	39e1e9c4 	addi	r7,r7,-30809
 8007ca4:	8010ffc0 	call	8010ffc <__muldf3>
 8007ca8:	01a2d874 	movhi	r6,35681
 8007cac:	01cff1f4 	movhi	r7,16327
 8007cb0:	180b883a 	mov	r5,r3
 8007cb4:	31b22cc4 	addi	r6,r6,-14157
 8007cb8:	39e28a04 	addi	r7,r7,-30168
 8007cbc:	1009883a 	mov	r4,r2
 8007cc0:	80029280 	call	8002928 <__adddf3>
 8007cc4:	8809883a 	mov	r4,r17
 8007cc8:	102d883a 	mov	r22,r2
 8007ccc:	182b883a 	mov	r21,r3
 8007cd0:	800340c0 	call	800340c <__floatsidf>
 8007cd4:	019427f4 	movhi	r6,20639
 8007cd8:	01cff4f4 	movhi	r7,16339
 8007cdc:	1009883a 	mov	r4,r2
 8007ce0:	180b883a 	mov	r5,r3
 8007ce4:	319e7ec4 	addi	r6,r6,31227
 8007ce8:	39d104c4 	addi	r7,r7,17427
 8007cec:	8010ffc0 	call	8010ffc <__muldf3>
 8007cf0:	b009883a 	mov	r4,r22
 8007cf4:	a80b883a 	mov	r5,r21
 8007cf8:	100d883a 	mov	r6,r2
 8007cfc:	180f883a 	mov	r7,r3
 8007d00:	80029280 	call	8002928 <__adddf3>
 8007d04:	1009883a 	mov	r4,r2
 8007d08:	180b883a 	mov	r5,r3
 8007d0c:	102d883a 	mov	r22,r2
 8007d10:	182b883a 	mov	r21,r3
 8007d14:	80033840 	call	8003384 <__fixdfsi>
 8007d18:	b009883a 	mov	r4,r22
 8007d1c:	a80b883a 	mov	r5,r21
 8007d20:	000d883a 	mov	r6,zero
 8007d24:	000f883a 	mov	r7,zero
 8007d28:	d8800515 	stw	r2,20(sp)
 8007d2c:	80032a40 	call	80032a4 <__ledf2>
 8007d30:	10023116 	blt	r2,zero,80085f8 <_dtoa_r+0xb28>
 8007d34:	d8c00517 	ldw	r3,20(sp)
 8007d38:	00800584 	movi	r2,22
 8007d3c:	10c21f36 	bltu	r2,r3,80085bc <_dtoa_r+0xaec>
 8007d40:	180490fa 	slli	r2,r3,3
 8007d44:	00c200b4 	movhi	r3,2050
 8007d48:	18fde104 	addi	r3,r3,-2172
 8007d4c:	1885883a 	add	r2,r3,r2
 8007d50:	11000017 	ldw	r4,0(r2)
 8007d54:	11400117 	ldw	r5,4(r2)
 8007d58:	900d883a 	mov	r6,r18
 8007d5c:	980f883a 	mov	r7,r19
 8007d60:	80031c40 	call	80031c4 <__gedf2>
 8007d64:	0082a70e 	bge	zero,r2,8008804 <_dtoa_r+0xd34>
 8007d68:	d9000517 	ldw	r4,20(sp)
 8007d6c:	d8000c15 	stw	zero,48(sp)
 8007d70:	213fffc4 	addi	r4,r4,-1
 8007d74:	d9000515 	stw	r4,20(sp)
 8007d78:	a463c83a 	sub	r17,r20,r17
 8007d7c:	8dbfffc4 	addi	r22,r17,-1
 8007d80:	b0021916 	blt	r22,zero,80085e8 <_dtoa_r+0xb18>
 8007d84:	d8000815 	stw	zero,32(sp)
 8007d88:	d8800517 	ldw	r2,20(sp)
 8007d8c:	10020e16 	blt	r2,zero,80085c8 <_dtoa_r+0xaf8>
 8007d90:	b0ad883a 	add	r22,r22,r2
 8007d94:	d8800a15 	stw	r2,40(sp)
 8007d98:	d8000915 	stw	zero,36(sp)
 8007d9c:	d8c00317 	ldw	r3,12(sp)
 8007da0:	00800244 	movi	r2,9
 8007da4:	10c11a36 	bltu	r2,r3,8008210 <_dtoa_r+0x740>
 8007da8:	00800144 	movi	r2,5
 8007dac:	10c4fc0e 	bge	r2,r3,80091a0 <_dtoa_r+0x16d0>
 8007db0:	18ffff04 	addi	r3,r3,-4
 8007db4:	d8c00315 	stw	r3,12(sp)
 8007db8:	0029883a 	mov	r20,zero
 8007dbc:	d9800317 	ldw	r6,12(sp)
 8007dc0:	008000c4 	movi	r2,3
 8007dc4:	3083bd26 	beq	r6,r2,8008cbc <_dtoa_r+0x11ec>
 8007dc8:	1183670e 	bge	r2,r6,8008b68 <_dtoa_r+0x1098>
 8007dcc:	d8c00317 	ldw	r3,12(sp)
 8007dd0:	00800104 	movi	r2,4
 8007dd4:	1882e726 	beq	r3,r2,8008974 <_dtoa_r+0xea4>
 8007dd8:	00800144 	movi	r2,5
 8007ddc:	1884f21e 	bne	r3,r2,80091a8 <_dtoa_r+0x16d8>
 8007de0:	00800044 	movi	r2,1
 8007de4:	d8800b15 	stw	r2,44(sp)
 8007de8:	d8c02217 	ldw	r3,136(sp)
 8007dec:	d9000517 	ldw	r4,20(sp)
 8007df0:	1907883a 	add	r3,r3,r4
 8007df4:	19800044 	addi	r6,r3,1
 8007df8:	d8c00d15 	stw	r3,52(sp)
 8007dfc:	d9800615 	stw	r6,24(sp)
 8007e00:	0183c30e 	bge	zero,r6,8008d10 <_dtoa_r+0x1240>
 8007e04:	d9800617 	ldw	r6,24(sp)
 8007e08:	3023883a 	mov	r17,r6
 8007e0c:	80001115 	stw	zero,68(r16)
 8007e10:	008005c4 	movi	r2,23
 8007e14:	1184f62e 	bgeu	r2,r6,80091f0 <_dtoa_r+0x1720>
 8007e18:	00c00044 	movi	r3,1
 8007e1c:	00800104 	movi	r2,4
 8007e20:	1085883a 	add	r2,r2,r2
 8007e24:	11000504 	addi	r4,r2,20
 8007e28:	180b883a 	mov	r5,r3
 8007e2c:	18c00044 	addi	r3,r3,1
 8007e30:	313ffb2e 	bgeu	r6,r4,8007e20 <__alt_data_end+0xfc007e20>
 8007e34:	81401115 	stw	r5,68(r16)
 8007e38:	8009883a 	mov	r4,r16
 8007e3c:	800b0f80 	call	800b0f8 <_Balloc>
 8007e40:	d8800715 	stw	r2,28(sp)
 8007e44:	80801015 	stw	r2,64(r16)
 8007e48:	00800384 	movi	r2,14
 8007e4c:	1440fd36 	bltu	r2,r17,8008244 <_dtoa_r+0x774>
 8007e50:	a000fc26 	beq	r20,zero,8008244 <_dtoa_r+0x774>
 8007e54:	d8800517 	ldw	r2,20(sp)
 8007e58:	0083b90e 	bge	zero,r2,8008d40 <_dtoa_r+0x1270>
 8007e5c:	d8c00517 	ldw	r3,20(sp)
 8007e60:	108003cc 	andi	r2,r2,15
 8007e64:	100490fa 	slli	r2,r2,3
 8007e68:	182fd13a 	srai	r23,r3,4
 8007e6c:	00c200b4 	movhi	r3,2050
 8007e70:	18fde104 	addi	r3,r3,-2172
 8007e74:	1885883a 	add	r2,r3,r2
 8007e78:	b8c0040c 	andi	r3,r23,16
 8007e7c:	12c00017 	ldw	r11,0(r2)
 8007e80:	12800117 	ldw	r10,4(r2)
 8007e84:	18039726 	beq	r3,zero,8008ce4 <_dtoa_r+0x1214>
 8007e88:	008200b4 	movhi	r2,2050
 8007e8c:	10bdd704 	addi	r2,r2,-2212
 8007e90:	11800817 	ldw	r6,32(r2)
 8007e94:	11c00917 	ldw	r7,36(r2)
 8007e98:	9009883a 	mov	r4,r18
 8007e9c:	980b883a 	mov	r5,r19
 8007ea0:	da801615 	stw	r10,88(sp)
 8007ea4:	dac01515 	stw	r11,84(sp)
 8007ea8:	80106ac0 	call	80106ac <__divdf3>
 8007eac:	da801617 	ldw	r10,88(sp)
 8007eb0:	dac01517 	ldw	r11,84(sp)
 8007eb4:	bdc003cc 	andi	r23,r23,15
 8007eb8:	044000c4 	movi	r17,3
 8007ebc:	d8800e15 	stw	r2,56(sp)
 8007ec0:	182b883a 	mov	r21,r3
 8007ec4:	b8001126 	beq	r23,zero,8007f0c <_dtoa_r+0x43c>
 8007ec8:	050200b4 	movhi	r20,2050
 8007ecc:	a53dd704 	addi	r20,r20,-2212
 8007ed0:	5805883a 	mov	r2,r11
 8007ed4:	5007883a 	mov	r3,r10
 8007ed8:	b980004c 	andi	r6,r23,1
 8007edc:	1009883a 	mov	r4,r2
 8007ee0:	b82fd07a 	srai	r23,r23,1
 8007ee4:	180b883a 	mov	r5,r3
 8007ee8:	30000426 	beq	r6,zero,8007efc <_dtoa_r+0x42c>
 8007eec:	a1800017 	ldw	r6,0(r20)
 8007ef0:	a1c00117 	ldw	r7,4(r20)
 8007ef4:	8c400044 	addi	r17,r17,1
 8007ef8:	8010ffc0 	call	8010ffc <__muldf3>
 8007efc:	a5000204 	addi	r20,r20,8
 8007f00:	b83ff51e 	bne	r23,zero,8007ed8 <__alt_data_end+0xfc007ed8>
 8007f04:	1017883a 	mov	r11,r2
 8007f08:	1815883a 	mov	r10,r3
 8007f0c:	d9000e17 	ldw	r4,56(sp)
 8007f10:	a80b883a 	mov	r5,r21
 8007f14:	580d883a 	mov	r6,r11
 8007f18:	500f883a 	mov	r7,r10
 8007f1c:	80106ac0 	call	80106ac <__divdf3>
 8007f20:	1029883a 	mov	r20,r2
 8007f24:	182b883a 	mov	r21,r3
 8007f28:	d9800c17 	ldw	r6,48(sp)
 8007f2c:	30000626 	beq	r6,zero,8007f48 <_dtoa_r+0x478>
 8007f30:	a009883a 	mov	r4,r20
 8007f34:	a80b883a 	mov	r5,r21
 8007f38:	000d883a 	mov	r6,zero
 8007f3c:	01cffc34 	movhi	r7,16368
 8007f40:	80032a40 	call	80032a4 <__ledf2>
 8007f44:	10043216 	blt	r2,zero,8009010 <_dtoa_r+0x1540>
 8007f48:	8809883a 	mov	r4,r17
 8007f4c:	800340c0 	call	800340c <__floatsidf>
 8007f50:	1009883a 	mov	r4,r2
 8007f54:	180b883a 	mov	r5,r3
 8007f58:	a00d883a 	mov	r6,r20
 8007f5c:	a80f883a 	mov	r7,r21
 8007f60:	8010ffc0 	call	8010ffc <__muldf3>
 8007f64:	000d883a 	mov	r6,zero
 8007f68:	1009883a 	mov	r4,r2
 8007f6c:	180b883a 	mov	r5,r3
 8007f70:	01d00734 	movhi	r7,16412
 8007f74:	80029280 	call	8002928 <__adddf3>
 8007f78:	1023883a 	mov	r17,r2
 8007f7c:	d9800617 	ldw	r6,24(sp)
 8007f80:	00bf3034 	movhi	r2,64704
 8007f84:	1885883a 	add	r2,r3,r2
 8007f88:	d8800e15 	stw	r2,56(sp)
 8007f8c:	30032e26 	beq	r6,zero,8008c48 <_dtoa_r+0x1178>
 8007f90:	d8c00517 	ldw	r3,20(sp)
 8007f94:	da800617 	ldw	r10,24(sp)
 8007f98:	d8c01215 	stw	r3,72(sp)
 8007f9c:	d9000b17 	ldw	r4,44(sp)
 8007fa0:	2003b026 	beq	r4,zero,8008e64 <_dtoa_r+0x1394>
 8007fa4:	50bfffc4 	addi	r2,r10,-1
 8007fa8:	100490fa 	slli	r2,r2,3
 8007fac:	00c200b4 	movhi	r3,2050
 8007fb0:	18fde104 	addi	r3,r3,-2172
 8007fb4:	1885883a 	add	r2,r3,r2
 8007fb8:	11800017 	ldw	r6,0(r2)
 8007fbc:	11c00117 	ldw	r7,4(r2)
 8007fc0:	d8800717 	ldw	r2,28(sp)
 8007fc4:	0009883a 	mov	r4,zero
 8007fc8:	014ff834 	movhi	r5,16352
 8007fcc:	da801615 	stw	r10,88(sp)
 8007fd0:	15c00044 	addi	r23,r2,1
 8007fd4:	80106ac0 	call	80106ac <__divdf3>
 8007fd8:	d9c00e17 	ldw	r7,56(sp)
 8007fdc:	880d883a 	mov	r6,r17
 8007fe0:	1009883a 	mov	r4,r2
 8007fe4:	180b883a 	mov	r5,r3
 8007fe8:	80117200 	call	8011720 <__subdf3>
 8007fec:	a80b883a 	mov	r5,r21
 8007ff0:	a009883a 	mov	r4,r20
 8007ff4:	d8c01015 	stw	r3,64(sp)
 8007ff8:	d8800e15 	stw	r2,56(sp)
 8007ffc:	80033840 	call	8003384 <__fixdfsi>
 8008000:	1009883a 	mov	r4,r2
 8008004:	d8801715 	stw	r2,92(sp)
 8008008:	800340c0 	call	800340c <__floatsidf>
 800800c:	a009883a 	mov	r4,r20
 8008010:	a80b883a 	mov	r5,r21
 8008014:	100d883a 	mov	r6,r2
 8008018:	180f883a 	mov	r7,r3
 800801c:	80117200 	call	8011720 <__subdf3>
 8008020:	da001717 	ldw	r8,92(sp)
 8008024:	1829883a 	mov	r20,r3
 8008028:	d8c00717 	ldw	r3,28(sp)
 800802c:	d9000e17 	ldw	r4,56(sp)
 8008030:	d9401017 	ldw	r5,64(sp)
 8008034:	42000c04 	addi	r8,r8,48
 8008038:	1023883a 	mov	r17,r2
 800803c:	1a000005 	stb	r8,0(r3)
 8008040:	880d883a 	mov	r6,r17
 8008044:	a00f883a 	mov	r7,r20
 8008048:	402b883a 	mov	r21,r8
 800804c:	80031c40 	call	80031c4 <__gedf2>
 8008050:	00844516 	blt	zero,r2,8009168 <_dtoa_r+0x1698>
 8008054:	0009883a 	mov	r4,zero
 8008058:	014ffc34 	movhi	r5,16368
 800805c:	880d883a 	mov	r6,r17
 8008060:	a00f883a 	mov	r7,r20
 8008064:	80117200 	call	8011720 <__subdf3>
 8008068:	d9000e17 	ldw	r4,56(sp)
 800806c:	d9401017 	ldw	r5,64(sp)
 8008070:	100d883a 	mov	r6,r2
 8008074:	180f883a 	mov	r7,r3
 8008078:	80031c40 	call	80031c4 <__gedf2>
 800807c:	da801617 	ldw	r10,88(sp)
 8008080:	00843616 	blt	zero,r2,800915c <_dtoa_r+0x168c>
 8008084:	00800044 	movi	r2,1
 8008088:	12806e0e 	bge	r2,r10,8008244 <_dtoa_r+0x774>
 800808c:	d9000717 	ldw	r4,28(sp)
 8008090:	dd801315 	stw	r22,76(sp)
 8008094:	dc001115 	stw	r16,68(sp)
 8008098:	2295883a 	add	r10,r4,r10
 800809c:	dcc01415 	stw	r19,80(sp)
 80080a0:	502d883a 	mov	r22,r10
 80080a4:	dcc01017 	ldw	r19,64(sp)
 80080a8:	b821883a 	mov	r16,r23
 80080ac:	dc801015 	stw	r18,64(sp)
 80080b0:	dc800e17 	ldw	r18,56(sp)
 80080b4:	00000906 	br	80080dc <_dtoa_r+0x60c>
 80080b8:	80117200 	call	8011720 <__subdf3>
 80080bc:	1009883a 	mov	r4,r2
 80080c0:	180b883a 	mov	r5,r3
 80080c4:	900d883a 	mov	r6,r18
 80080c8:	980f883a 	mov	r7,r19
 80080cc:	80032a40 	call	80032a4 <__ledf2>
 80080d0:	10040e16 	blt	r2,zero,800910c <_dtoa_r+0x163c>
 80080d4:	b821883a 	mov	r16,r23
 80080d8:	bd841026 	beq	r23,r22,800911c <_dtoa_r+0x164c>
 80080dc:	9009883a 	mov	r4,r18
 80080e0:	980b883a 	mov	r5,r19
 80080e4:	000d883a 	mov	r6,zero
 80080e8:	01d00934 	movhi	r7,16420
 80080ec:	8010ffc0 	call	8010ffc <__muldf3>
 80080f0:	000d883a 	mov	r6,zero
 80080f4:	01d00934 	movhi	r7,16420
 80080f8:	8809883a 	mov	r4,r17
 80080fc:	a00b883a 	mov	r5,r20
 8008100:	1025883a 	mov	r18,r2
 8008104:	1827883a 	mov	r19,r3
 8008108:	8010ffc0 	call	8010ffc <__muldf3>
 800810c:	180b883a 	mov	r5,r3
 8008110:	1009883a 	mov	r4,r2
 8008114:	1823883a 	mov	r17,r3
 8008118:	1029883a 	mov	r20,r2
 800811c:	80033840 	call	8003384 <__fixdfsi>
 8008120:	1009883a 	mov	r4,r2
 8008124:	102b883a 	mov	r21,r2
 8008128:	800340c0 	call	800340c <__floatsidf>
 800812c:	a009883a 	mov	r4,r20
 8008130:	880b883a 	mov	r5,r17
 8008134:	100d883a 	mov	r6,r2
 8008138:	180f883a 	mov	r7,r3
 800813c:	80117200 	call	8011720 <__subdf3>
 8008140:	ad400c04 	addi	r21,r21,48
 8008144:	1009883a 	mov	r4,r2
 8008148:	180b883a 	mov	r5,r3
 800814c:	900d883a 	mov	r6,r18
 8008150:	980f883a 	mov	r7,r19
 8008154:	85400005 	stb	r21,0(r16)
 8008158:	1023883a 	mov	r17,r2
 800815c:	1829883a 	mov	r20,r3
 8008160:	80032a40 	call	80032a4 <__ledf2>
 8008164:	bdc00044 	addi	r23,r23,1
 8008168:	0009883a 	mov	r4,zero
 800816c:	014ffc34 	movhi	r5,16368
 8008170:	880d883a 	mov	r6,r17
 8008174:	a00f883a 	mov	r7,r20
 8008178:	103fcf0e 	bge	r2,zero,80080b8 <__alt_data_end+0xfc0080b8>
 800817c:	d9801217 	ldw	r6,72(sp)
 8008180:	dc001117 	ldw	r16,68(sp)
 8008184:	d9800515 	stw	r6,20(sp)
 8008188:	8009883a 	mov	r4,r16
 800818c:	e00b883a 	mov	r5,fp
 8008190:	800b1a00 	call	800b1a0 <_Bfree>
 8008194:	d8c00517 	ldw	r3,20(sp)
 8008198:	d9002317 	ldw	r4,140(sp)
 800819c:	d9802517 	ldw	r6,148(sp)
 80081a0:	b8000005 	stb	zero,0(r23)
 80081a4:	18800044 	addi	r2,r3,1
 80081a8:	20800015 	stw	r2,0(r4)
 80081ac:	30027226 	beq	r6,zero,8008b78 <_dtoa_r+0x10a8>
 80081b0:	35c00015 	stw	r23,0(r6)
 80081b4:	d8800717 	ldw	r2,28(sp)
 80081b8:	003e7406 	br	8007b8c <__alt_data_end+0xfc007b8c>
 80081bc:	00800434 	movhi	r2,16
 80081c0:	10bfffc4 	addi	r2,r2,-1
 80081c4:	a8aa703a 	and	r21,r21,r2
 80081c8:	a83e801e 	bne	r21,zero,8007bcc <__alt_data_end+0xfc007bcc>
 80081cc:	008200b4 	movhi	r2,2050
 80081d0:	10bdc204 	addi	r2,r2,-2296
 80081d4:	003e7f06 	br	8007bd4 <__alt_data_end+0xfc007bd4>
 80081d8:	10c00204 	addi	r3,r2,8
 80081dc:	003e8206 	br	8007be8 <__alt_data_end+0xfc007be8>
 80081e0:	01400434 	movhi	r5,16
 80081e4:	297fffc4 	addi	r5,r5,-1
 80081e8:	994a703a 	and	r5,r19,r5
 80081ec:	9009883a 	mov	r4,r18
 80081f0:	8c7f0044 	addi	r17,r17,-1023
 80081f4:	294ffc34 	orhi	r5,r5,16368
 80081f8:	dd000217 	ldw	r20,8(sp)
 80081fc:	d8000f15 	stw	zero,60(sp)
 8008200:	003e9f06 	br	8007c80 <__alt_data_end+0xfc007c80>
 8008204:	008200b4 	movhi	r2,2050
 8008208:	10bdb104 	addi	r2,r2,-2364
 800820c:	003e5f06 	br	8007b8c <__alt_data_end+0xfc007b8c>
 8008210:	80001115 	stw	zero,68(r16)
 8008214:	8009883a 	mov	r4,r16
 8008218:	000b883a 	mov	r5,zero
 800821c:	800b0f80 	call	800b0f8 <_Balloc>
 8008220:	01bfffc4 	movi	r6,-1
 8008224:	d8800715 	stw	r2,28(sp)
 8008228:	80801015 	stw	r2,64(r16)
 800822c:	00800044 	movi	r2,1
 8008230:	d9800615 	stw	r6,24(sp)
 8008234:	d8800b15 	stw	r2,44(sp)
 8008238:	d8002215 	stw	zero,136(sp)
 800823c:	d9800d15 	stw	r6,52(sp)
 8008240:	d8000315 	stw	zero,12(sp)
 8008244:	d8800117 	ldw	r2,4(sp)
 8008248:	10008e16 	blt	r2,zero,8008484 <_dtoa_r+0x9b4>
 800824c:	d9000517 	ldw	r4,20(sp)
 8008250:	00c00384 	movi	r3,14
 8008254:	19008b16 	blt	r3,r4,8008484 <_dtoa_r+0x9b4>
 8008258:	200490fa 	slli	r2,r4,3
 800825c:	00c200b4 	movhi	r3,2050
 8008260:	d9802217 	ldw	r6,136(sp)
 8008264:	18fde104 	addi	r3,r3,-2172
 8008268:	1885883a 	add	r2,r3,r2
 800826c:	14400017 	ldw	r17,0(r2)
 8008270:	15000117 	ldw	r20,4(r2)
 8008274:	3001c716 	blt	r6,zero,8008994 <_dtoa_r+0xec4>
 8008278:	880d883a 	mov	r6,r17
 800827c:	a00f883a 	mov	r7,r20
 8008280:	9009883a 	mov	r4,r18
 8008284:	980b883a 	mov	r5,r19
 8008288:	80106ac0 	call	80106ac <__divdf3>
 800828c:	180b883a 	mov	r5,r3
 8008290:	1009883a 	mov	r4,r2
 8008294:	80033840 	call	8003384 <__fixdfsi>
 8008298:	1009883a 	mov	r4,r2
 800829c:	102d883a 	mov	r22,r2
 80082a0:	800340c0 	call	800340c <__floatsidf>
 80082a4:	1009883a 	mov	r4,r2
 80082a8:	180b883a 	mov	r5,r3
 80082ac:	880d883a 	mov	r6,r17
 80082b0:	a00f883a 	mov	r7,r20
 80082b4:	8010ffc0 	call	8010ffc <__muldf3>
 80082b8:	9009883a 	mov	r4,r18
 80082bc:	980b883a 	mov	r5,r19
 80082c0:	100d883a 	mov	r6,r2
 80082c4:	180f883a 	mov	r7,r3
 80082c8:	80117200 	call	8011720 <__subdf3>
 80082cc:	d9000717 	ldw	r4,28(sp)
 80082d0:	d9800617 	ldw	r6,24(sp)
 80082d4:	180b883a 	mov	r5,r3
 80082d8:	b0c00c04 	addi	r3,r22,48
 80082dc:	20c00005 	stb	r3,0(r4)
 80082e0:	25c00044 	addi	r23,r4,1
 80082e4:	01000044 	movi	r4,1
 80082e8:	1011883a 	mov	r8,r2
 80082ec:	2807883a 	mov	r3,r5
 80082f0:	31003d26 	beq	r6,r4,80083e8 <_dtoa_r+0x918>
 80082f4:	000d883a 	mov	r6,zero
 80082f8:	01d00934 	movhi	r7,16420
 80082fc:	1009883a 	mov	r4,r2
 8008300:	8010ffc0 	call	8010ffc <__muldf3>
 8008304:	1009883a 	mov	r4,r2
 8008308:	180b883a 	mov	r5,r3
 800830c:	000d883a 	mov	r6,zero
 8008310:	000f883a 	mov	r7,zero
 8008314:	1027883a 	mov	r19,r2
 8008318:	182b883a 	mov	r21,r3
 800831c:	8010f780 	call	8010f78 <__eqdf2>
 8008320:	103f9926 	beq	r2,zero,8008188 <__alt_data_end+0xfc008188>
 8008324:	d8c00617 	ldw	r3,24(sp)
 8008328:	d9000717 	ldw	r4,28(sp)
 800832c:	b825883a 	mov	r18,r23
 8008330:	18bfffc4 	addi	r2,r3,-1
 8008334:	20ad883a 	add	r22,r4,r2
 8008338:	dc000315 	stw	r16,12(sp)
 800833c:	00000a06 	br	8008368 <_dtoa_r+0x898>
 8008340:	8010ffc0 	call	8010ffc <__muldf3>
 8008344:	1009883a 	mov	r4,r2
 8008348:	180b883a 	mov	r5,r3
 800834c:	000d883a 	mov	r6,zero
 8008350:	000f883a 	mov	r7,zero
 8008354:	1027883a 	mov	r19,r2
 8008358:	182b883a 	mov	r21,r3
 800835c:	b825883a 	mov	r18,r23
 8008360:	8010f780 	call	8010f78 <__eqdf2>
 8008364:	10022626 	beq	r2,zero,8008c00 <_dtoa_r+0x1130>
 8008368:	880d883a 	mov	r6,r17
 800836c:	a00f883a 	mov	r7,r20
 8008370:	9809883a 	mov	r4,r19
 8008374:	a80b883a 	mov	r5,r21
 8008378:	80106ac0 	call	80106ac <__divdf3>
 800837c:	180b883a 	mov	r5,r3
 8008380:	1009883a 	mov	r4,r2
 8008384:	80033840 	call	8003384 <__fixdfsi>
 8008388:	1009883a 	mov	r4,r2
 800838c:	1021883a 	mov	r16,r2
 8008390:	800340c0 	call	800340c <__floatsidf>
 8008394:	1009883a 	mov	r4,r2
 8008398:	180b883a 	mov	r5,r3
 800839c:	880d883a 	mov	r6,r17
 80083a0:	a00f883a 	mov	r7,r20
 80083a4:	8010ffc0 	call	8010ffc <__muldf3>
 80083a8:	9809883a 	mov	r4,r19
 80083ac:	a80b883a 	mov	r5,r21
 80083b0:	100d883a 	mov	r6,r2
 80083b4:	180f883a 	mov	r7,r3
 80083b8:	80117200 	call	8011720 <__subdf3>
 80083bc:	82000c04 	addi	r8,r16,48
 80083c0:	92000005 	stb	r8,0(r18)
 80083c4:	1009883a 	mov	r4,r2
 80083c8:	180b883a 	mov	r5,r3
 80083cc:	000d883a 	mov	r6,zero
 80083d0:	01d00934 	movhi	r7,16420
 80083d4:	1011883a 	mov	r8,r2
 80083d8:	bdc00044 	addi	r23,r23,1
 80083dc:	95bfd81e 	bne	r18,r22,8008340 <__alt_data_end+0xfc008340>
 80083e0:	802d883a 	mov	r22,r16
 80083e4:	dc000317 	ldw	r16,12(sp)
 80083e8:	4009883a 	mov	r4,r8
 80083ec:	180b883a 	mov	r5,r3
 80083f0:	400d883a 	mov	r6,r8
 80083f4:	180f883a 	mov	r7,r3
 80083f8:	80029280 	call	8002928 <__adddf3>
 80083fc:	8809883a 	mov	r4,r17
 8008400:	a00b883a 	mov	r5,r20
 8008404:	100d883a 	mov	r6,r2
 8008408:	180f883a 	mov	r7,r3
 800840c:	1027883a 	mov	r19,r2
 8008410:	1825883a 	mov	r18,r3
 8008414:	80032a40 	call	80032a4 <__ledf2>
 8008418:	10000816 	blt	r2,zero,800843c <_dtoa_r+0x96c>
 800841c:	8809883a 	mov	r4,r17
 8008420:	a00b883a 	mov	r5,r20
 8008424:	980d883a 	mov	r6,r19
 8008428:	900f883a 	mov	r7,r18
 800842c:	8010f780 	call	8010f78 <__eqdf2>
 8008430:	103f551e 	bne	r2,zero,8008188 <__alt_data_end+0xfc008188>
 8008434:	b580004c 	andi	r22,r22,1
 8008438:	b03f5326 	beq	r22,zero,8008188 <__alt_data_end+0xfc008188>
 800843c:	bd7fffc3 	ldbu	r21,-1(r23)
 8008440:	b8bfffc4 	addi	r2,r23,-1
 8008444:	1007883a 	mov	r3,r2
 8008448:	01400e44 	movi	r5,57
 800844c:	d9800717 	ldw	r6,28(sp)
 8008450:	00000506 	br	8008468 <_dtoa_r+0x998>
 8008454:	18ffffc4 	addi	r3,r3,-1
 8008458:	30825e26 	beq	r6,r2,8008dd4 <_dtoa_r+0x1304>
 800845c:	1d400003 	ldbu	r21,0(r3)
 8008460:	102f883a 	mov	r23,r2
 8008464:	10bfffc4 	addi	r2,r2,-1
 8008468:	a9003fcc 	andi	r4,r21,255
 800846c:	2100201c 	xori	r4,r4,128
 8008470:	213fe004 	addi	r4,r4,-128
 8008474:	217ff726 	beq	r4,r5,8008454 <__alt_data_end+0xfc008454>
 8008478:	aa000044 	addi	r8,r21,1
 800847c:	12000005 	stb	r8,0(r2)
 8008480:	003f4106 	br	8008188 <__alt_data_end+0xfc008188>
 8008484:	d8c00b17 	ldw	r3,44(sp)
 8008488:	18006726 	beq	r3,zero,8008628 <_dtoa_r+0xb58>
 800848c:	d9000317 	ldw	r4,12(sp)
 8008490:	00c00044 	movi	r3,1
 8008494:	19016a0e 	bge	r3,r4,8008a40 <_dtoa_r+0xf70>
 8008498:	d8800617 	ldw	r2,24(sp)
 800849c:	d8c00917 	ldw	r3,36(sp)
 80084a0:	157fffc4 	addi	r21,r2,-1
 80084a4:	1d420716 	blt	r3,r21,8008cc4 <_dtoa_r+0x11f4>
 80084a8:	1d6bc83a 	sub	r21,r3,r21
 80084ac:	d8800617 	ldw	r2,24(sp)
 80084b0:	1002c716 	blt	r2,zero,8008fd0 <_dtoa_r+0x1500>
 80084b4:	dd000817 	ldw	r20,32(sp)
 80084b8:	d8800617 	ldw	r2,24(sp)
 80084bc:	d9800817 	ldw	r6,32(sp)
 80084c0:	8009883a 	mov	r4,r16
 80084c4:	01400044 	movi	r5,1
 80084c8:	308d883a 	add	r6,r6,r2
 80084cc:	d9800815 	stw	r6,32(sp)
 80084d0:	b0ad883a 	add	r22,r22,r2
 80084d4:	800b4f80 	call	800b4f8 <__i2b>
 80084d8:	1023883a 	mov	r17,r2
 80084dc:	a0000826 	beq	r20,zero,8008500 <_dtoa_r+0xa30>
 80084e0:	0580070e 	bge	zero,r22,8008500 <_dtoa_r+0xa30>
 80084e4:	b005883a 	mov	r2,r22
 80084e8:	a5812016 	blt	r20,r22,800896c <_dtoa_r+0xe9c>
 80084ec:	d8c00817 	ldw	r3,32(sp)
 80084f0:	a0a9c83a 	sub	r20,r20,r2
 80084f4:	b0adc83a 	sub	r22,r22,r2
 80084f8:	1887c83a 	sub	r3,r3,r2
 80084fc:	d8c00815 	stw	r3,32(sp)
 8008500:	d9000917 	ldw	r4,36(sp)
 8008504:	0100140e 	bge	zero,r4,8008558 <_dtoa_r+0xa88>
 8008508:	d9800b17 	ldw	r6,44(sp)
 800850c:	3001e526 	beq	r6,zero,8008ca4 <_dtoa_r+0x11d4>
 8008510:	05400e0e 	bge	zero,r21,800854c <_dtoa_r+0xa7c>
 8008514:	880b883a 	mov	r5,r17
 8008518:	8009883a 	mov	r4,r16
 800851c:	a80d883a 	mov	r6,r21
 8008520:	800b7300 	call	800b730 <__pow5mult>
 8008524:	e00d883a 	mov	r6,fp
 8008528:	8009883a 	mov	r4,r16
 800852c:	100b883a 	mov	r5,r2
 8008530:	1023883a 	mov	r17,r2
 8008534:	800b5340 	call	800b534 <__multiply>
 8008538:	102f883a 	mov	r23,r2
 800853c:	e00b883a 	mov	r5,fp
 8008540:	8009883a 	mov	r4,r16
 8008544:	800b1a00 	call	800b1a0 <_Bfree>
 8008548:	b839883a 	mov	fp,r23
 800854c:	d8800917 	ldw	r2,36(sp)
 8008550:	154dc83a 	sub	r6,r2,r21
 8008554:	3001281e 	bne	r6,zero,80089f8 <_dtoa_r+0xf28>
 8008558:	05c00044 	movi	r23,1
 800855c:	8009883a 	mov	r4,r16
 8008560:	b80b883a 	mov	r5,r23
 8008564:	800b4f80 	call	800b4f8 <__i2b>
 8008568:	d8c00a17 	ldw	r3,40(sp)
 800856c:	102b883a 	mov	r21,r2
 8008570:	00c0310e 	bge	zero,r3,8008638 <_dtoa_r+0xb68>
 8008574:	8009883a 	mov	r4,r16
 8008578:	100b883a 	mov	r5,r2
 800857c:	180d883a 	mov	r6,r3
 8008580:	800b7300 	call	800b730 <__pow5mult>
 8008584:	d9000317 	ldw	r4,12(sp)
 8008588:	102b883a 	mov	r21,r2
 800858c:	b9011f0e 	bge	r23,r4,8008a0c <_dtoa_r+0xf3c>
 8008590:	0027883a 	mov	r19,zero
 8008594:	a8800417 	ldw	r2,16(r21)
 8008598:	10800104 	addi	r2,r2,4
 800859c:	1085883a 	add	r2,r2,r2
 80085a0:	1085883a 	add	r2,r2,r2
 80085a4:	a885883a 	add	r2,r21,r2
 80085a8:	11000017 	ldw	r4,0(r2)
 80085ac:	800b3e00 	call	800b3e0 <__hi0bits>
 80085b0:	00c00804 	movi	r3,32
 80085b4:	1885c83a 	sub	r2,r3,r2
 80085b8:	00002506 	br	8008650 <_dtoa_r+0xb80>
 80085bc:	01800044 	movi	r6,1
 80085c0:	d9800c15 	stw	r6,48(sp)
 80085c4:	003dec06 	br	8007d78 <__alt_data_end+0xfc007d78>
 80085c8:	d8c00817 	ldw	r3,32(sp)
 80085cc:	d9000517 	ldw	r4,20(sp)
 80085d0:	d8000a15 	stw	zero,40(sp)
 80085d4:	1907c83a 	sub	r3,r3,r4
 80085d8:	010dc83a 	sub	r6,zero,r4
 80085dc:	d8c00815 	stw	r3,32(sp)
 80085e0:	d9800915 	stw	r6,36(sp)
 80085e4:	003ded06 	br	8007d9c <__alt_data_end+0xfc007d9c>
 80085e8:	05adc83a 	sub	r22,zero,r22
 80085ec:	dd800815 	stw	r22,32(sp)
 80085f0:	002d883a 	mov	r22,zero
 80085f4:	003de406 	br	8007d88 <__alt_data_end+0xfc007d88>
 80085f8:	d9000517 	ldw	r4,20(sp)
 80085fc:	800340c0 	call	800340c <__floatsidf>
 8008600:	1009883a 	mov	r4,r2
 8008604:	180b883a 	mov	r5,r3
 8008608:	b00d883a 	mov	r6,r22
 800860c:	a80f883a 	mov	r7,r21
 8008610:	8010f780 	call	8010f78 <__eqdf2>
 8008614:	103dc726 	beq	r2,zero,8007d34 <__alt_data_end+0xfc007d34>
 8008618:	d8800517 	ldw	r2,20(sp)
 800861c:	10bfffc4 	addi	r2,r2,-1
 8008620:	d8800515 	stw	r2,20(sp)
 8008624:	003dc306 	br	8007d34 <__alt_data_end+0xfc007d34>
 8008628:	dd400917 	ldw	r21,36(sp)
 800862c:	dd000817 	ldw	r20,32(sp)
 8008630:	0023883a 	mov	r17,zero
 8008634:	003fa906 	br	80084dc <__alt_data_end+0xfc0084dc>
 8008638:	d9800317 	ldw	r6,12(sp)
 800863c:	b981670e 	bge	r23,r6,8008bdc <_dtoa_r+0x110c>
 8008640:	0027883a 	mov	r19,zero
 8008644:	d8c00a17 	ldw	r3,40(sp)
 8008648:	183fd21e 	bne	r3,zero,8008594 <__alt_data_end+0xfc008594>
 800864c:	00800044 	movi	r2,1
 8008650:	1585883a 	add	r2,r2,r22
 8008654:	108007cc 	andi	r2,r2,31
 8008658:	10005f26 	beq	r2,zero,80087d8 <_dtoa_r+0xd08>
 800865c:	00c00804 	movi	r3,32
 8008660:	1887c83a 	sub	r3,r3,r2
 8008664:	01000104 	movi	r4,4
 8008668:	20c2dd0e 	bge	r4,r3,80091e0 <_dtoa_r+0x1710>
 800866c:	d9000817 	ldw	r4,32(sp)
 8008670:	00c00704 	movi	r3,28
 8008674:	1885c83a 	sub	r2,r3,r2
 8008678:	2089883a 	add	r4,r4,r2
 800867c:	d9000815 	stw	r4,32(sp)
 8008680:	a0a9883a 	add	r20,r20,r2
 8008684:	b0ad883a 	add	r22,r22,r2
 8008688:	d8800817 	ldw	r2,32(sp)
 800868c:	0080050e 	bge	zero,r2,80086a4 <_dtoa_r+0xbd4>
 8008690:	e00b883a 	mov	r5,fp
 8008694:	8009883a 	mov	r4,r16
 8008698:	100d883a 	mov	r6,r2
 800869c:	800b8700 	call	800b870 <__lshift>
 80086a0:	1039883a 	mov	fp,r2
 80086a4:	0580050e 	bge	zero,r22,80086bc <_dtoa_r+0xbec>
 80086a8:	a80b883a 	mov	r5,r21
 80086ac:	8009883a 	mov	r4,r16
 80086b0:	b00d883a 	mov	r6,r22
 80086b4:	800b8700 	call	800b870 <__lshift>
 80086b8:	102b883a 	mov	r21,r2
 80086bc:	d8c00c17 	ldw	r3,48(sp)
 80086c0:	1801161e 	bne	r3,zero,8008b1c <_dtoa_r+0x104c>
 80086c4:	d8c00617 	ldw	r3,24(sp)
 80086c8:	00c12d0e 	bge	zero,r3,8008b80 <_dtoa_r+0x10b0>
 80086cc:	d8c00b17 	ldw	r3,44(sp)
 80086d0:	1800571e 	bne	r3,zero,8008830 <_dtoa_r+0xd60>
 80086d4:	dc800717 	ldw	r18,28(sp)
 80086d8:	dcc00617 	ldw	r19,24(sp)
 80086dc:	9029883a 	mov	r20,r18
 80086e0:	00000206 	br	80086ec <_dtoa_r+0xc1c>
 80086e4:	800b1c80 	call	800b1c8 <__multadd>
 80086e8:	1039883a 	mov	fp,r2
 80086ec:	e009883a 	mov	r4,fp
 80086f0:	a80b883a 	mov	r5,r21
 80086f4:	80078d00 	call	80078d0 <quorem>
 80086f8:	10800c04 	addi	r2,r2,48
 80086fc:	90800005 	stb	r2,0(r18)
 8008700:	94800044 	addi	r18,r18,1
 8008704:	9507c83a 	sub	r3,r18,r20
 8008708:	8009883a 	mov	r4,r16
 800870c:	e00b883a 	mov	r5,fp
 8008710:	01800284 	movi	r6,10
 8008714:	000f883a 	mov	r7,zero
 8008718:	1cfff216 	blt	r3,r19,80086e4 <__alt_data_end+0xfc0086e4>
 800871c:	1011883a 	mov	r8,r2
 8008720:	d8800617 	ldw	r2,24(sp)
 8008724:	00822e0e 	bge	zero,r2,8008fe0 <_dtoa_r+0x1510>
 8008728:	d9000717 	ldw	r4,28(sp)
 800872c:	0025883a 	mov	r18,zero
 8008730:	20af883a 	add	r23,r4,r2
 8008734:	e00b883a 	mov	r5,fp
 8008738:	01800044 	movi	r6,1
 800873c:	8009883a 	mov	r4,r16
 8008740:	da001715 	stw	r8,92(sp)
 8008744:	800b8700 	call	800b870 <__lshift>
 8008748:	1009883a 	mov	r4,r2
 800874c:	a80b883a 	mov	r5,r21
 8008750:	1039883a 	mov	fp,r2
 8008754:	800b9b80 	call	800b9b8 <__mcmp>
 8008758:	da001717 	ldw	r8,92(sp)
 800875c:	00816e0e 	bge	zero,r2,8008d18 <_dtoa_r+0x1248>
 8008760:	b93fffc3 	ldbu	r4,-1(r23)
 8008764:	b8bfffc4 	addi	r2,r23,-1
 8008768:	1007883a 	mov	r3,r2
 800876c:	01800e44 	movi	r6,57
 8008770:	d9c00717 	ldw	r7,28(sp)
 8008774:	00000506 	br	800878c <_dtoa_r+0xcbc>
 8008778:	18ffffc4 	addi	r3,r3,-1
 800877c:	38811926 	beq	r7,r2,8008be4 <_dtoa_r+0x1114>
 8008780:	19000003 	ldbu	r4,0(r3)
 8008784:	102f883a 	mov	r23,r2
 8008788:	10bfffc4 	addi	r2,r2,-1
 800878c:	21403fcc 	andi	r5,r4,255
 8008790:	2940201c 	xori	r5,r5,128
 8008794:	297fe004 	addi	r5,r5,-128
 8008798:	29bff726 	beq	r5,r6,8008778 <__alt_data_end+0xfc008778>
 800879c:	21000044 	addi	r4,r4,1
 80087a0:	11000005 	stb	r4,0(r2)
 80087a4:	8009883a 	mov	r4,r16
 80087a8:	a80b883a 	mov	r5,r21
 80087ac:	800b1a00 	call	800b1a0 <_Bfree>
 80087b0:	883e7526 	beq	r17,zero,8008188 <__alt_data_end+0xfc008188>
 80087b4:	90000426 	beq	r18,zero,80087c8 <_dtoa_r+0xcf8>
 80087b8:	94400326 	beq	r18,r17,80087c8 <_dtoa_r+0xcf8>
 80087bc:	8009883a 	mov	r4,r16
 80087c0:	900b883a 	mov	r5,r18
 80087c4:	800b1a00 	call	800b1a0 <_Bfree>
 80087c8:	8009883a 	mov	r4,r16
 80087cc:	880b883a 	mov	r5,r17
 80087d0:	800b1a00 	call	800b1a0 <_Bfree>
 80087d4:	003e6c06 	br	8008188 <__alt_data_end+0xfc008188>
 80087d8:	00800704 	movi	r2,28
 80087dc:	d9800817 	ldw	r6,32(sp)
 80087e0:	a0a9883a 	add	r20,r20,r2
 80087e4:	b0ad883a 	add	r22,r22,r2
 80087e8:	308d883a 	add	r6,r6,r2
 80087ec:	d9800815 	stw	r6,32(sp)
 80087f0:	003fa506 	br	8008688 <__alt_data_end+0xfc008688>
 80087f4:	013efb84 	movi	r4,-1042
 80087f8:	246bc83a 	sub	r21,r4,r17
 80087fc:	9548983a 	sll	r4,r18,r21
 8008800:	003d1806 	br	8007c64 <__alt_data_end+0xfc007c64>
 8008804:	d8000c15 	stw	zero,48(sp)
 8008808:	003d5b06 	br	8007d78 <__alt_data_end+0xfc007d78>
 800880c:	880b883a 	mov	r5,r17
 8008810:	8009883a 	mov	r4,r16
 8008814:	01800284 	movi	r6,10
 8008818:	000f883a 	mov	r7,zero
 800881c:	800b1c80 	call	800b1c8 <__multadd>
 8008820:	1023883a 	mov	r17,r2
 8008824:	d8800d17 	ldw	r2,52(sp)
 8008828:	0082550e 	bge	zero,r2,8009180 <_dtoa_r+0x16b0>
 800882c:	d8800615 	stw	r2,24(sp)
 8008830:	0500050e 	bge	zero,r20,8008848 <_dtoa_r+0xd78>
 8008834:	880b883a 	mov	r5,r17
 8008838:	8009883a 	mov	r4,r16
 800883c:	a00d883a 	mov	r6,r20
 8008840:	800b8700 	call	800b870 <__lshift>
 8008844:	1023883a 	mov	r17,r2
 8008848:	98016a1e 	bne	r19,zero,8008df4 <_dtoa_r+0x1324>
 800884c:	8829883a 	mov	r20,r17
 8008850:	d9000617 	ldw	r4,24(sp)
 8008854:	dcc00717 	ldw	r19,28(sp)
 8008858:	9480004c 	andi	r18,r18,1
 800885c:	20bfffc4 	addi	r2,r4,-1
 8008860:	9885883a 	add	r2,r19,r2
 8008864:	d8800415 	stw	r2,16(sp)
 8008868:	dc800615 	stw	r18,24(sp)
 800886c:	e009883a 	mov	r4,fp
 8008870:	a80b883a 	mov	r5,r21
 8008874:	80078d00 	call	80078d0 <quorem>
 8008878:	e009883a 	mov	r4,fp
 800887c:	880b883a 	mov	r5,r17
 8008880:	102f883a 	mov	r23,r2
 8008884:	800b9b80 	call	800b9b8 <__mcmp>
 8008888:	8009883a 	mov	r4,r16
 800888c:	a80b883a 	mov	r5,r21
 8008890:	a00d883a 	mov	r6,r20
 8008894:	102d883a 	mov	r22,r2
 8008898:	800ba180 	call	800ba18 <__mdiff>
 800889c:	1007883a 	mov	r3,r2
 80088a0:	10800317 	ldw	r2,12(r2)
 80088a4:	bc800c04 	addi	r18,r23,48
 80088a8:	1000971e 	bne	r2,zero,8008b08 <_dtoa_r+0x1038>
 80088ac:	180b883a 	mov	r5,r3
 80088b0:	e009883a 	mov	r4,fp
 80088b4:	d8c01515 	stw	r3,84(sp)
 80088b8:	800b9b80 	call	800b9b8 <__mcmp>
 80088bc:	d8c01517 	ldw	r3,84(sp)
 80088c0:	8009883a 	mov	r4,r16
 80088c4:	d8801515 	stw	r2,84(sp)
 80088c8:	180b883a 	mov	r5,r3
 80088cc:	800b1a00 	call	800b1a0 <_Bfree>
 80088d0:	d8801517 	ldw	r2,84(sp)
 80088d4:	1000041e 	bne	r2,zero,80088e8 <_dtoa_r+0xe18>
 80088d8:	d9800317 	ldw	r6,12(sp)
 80088dc:	3000021e 	bne	r6,zero,80088e8 <_dtoa_r+0xe18>
 80088e0:	d8c00617 	ldw	r3,24(sp)
 80088e4:	18007626 	beq	r3,zero,8008ac0 <_dtoa_r+0xff0>
 80088e8:	b0005b16 	blt	r22,zero,8008a58 <_dtoa_r+0xf88>
 80088ec:	b000041e 	bne	r22,zero,8008900 <_dtoa_r+0xe30>
 80088f0:	d9000317 	ldw	r4,12(sp)
 80088f4:	2000021e 	bne	r4,zero,8008900 <_dtoa_r+0xe30>
 80088f8:	d8c00617 	ldw	r3,24(sp)
 80088fc:	18005626 	beq	r3,zero,8008a58 <_dtoa_r+0xf88>
 8008900:	00814d16 	blt	zero,r2,8008e38 <_dtoa_r+0x1368>
 8008904:	d8c00417 	ldw	r3,16(sp)
 8008908:	9d800044 	addi	r22,r19,1
 800890c:	9c800005 	stb	r18,0(r19)
 8008910:	b02f883a 	mov	r23,r22
 8008914:	98c14c26 	beq	r19,r3,8008e48 <_dtoa_r+0x1378>
 8008918:	e00b883a 	mov	r5,fp
 800891c:	8009883a 	mov	r4,r16
 8008920:	01800284 	movi	r6,10
 8008924:	000f883a 	mov	r7,zero
 8008928:	800b1c80 	call	800b1c8 <__multadd>
 800892c:	1039883a 	mov	fp,r2
 8008930:	8d006d26 	beq	r17,r20,8008ae8 <_dtoa_r+0x1018>
 8008934:	880b883a 	mov	r5,r17
 8008938:	01800284 	movi	r6,10
 800893c:	000f883a 	mov	r7,zero
 8008940:	8009883a 	mov	r4,r16
 8008944:	800b1c80 	call	800b1c8 <__multadd>
 8008948:	a00b883a 	mov	r5,r20
 800894c:	8009883a 	mov	r4,r16
 8008950:	01800284 	movi	r6,10
 8008954:	000f883a 	mov	r7,zero
 8008958:	1023883a 	mov	r17,r2
 800895c:	800b1c80 	call	800b1c8 <__multadd>
 8008960:	1029883a 	mov	r20,r2
 8008964:	b027883a 	mov	r19,r22
 8008968:	003fc006 	br	800886c <__alt_data_end+0xfc00886c>
 800896c:	a005883a 	mov	r2,r20
 8008970:	003ede06 	br	80084ec <__alt_data_end+0xfc0084ec>
 8008974:	01000044 	movi	r4,1
 8008978:	d9000b15 	stw	r4,44(sp)
 800897c:	d9802217 	ldw	r6,136(sp)
 8008980:	0180dc0e 	bge	zero,r6,8008cf4 <_dtoa_r+0x1224>
 8008984:	3023883a 	mov	r17,r6
 8008988:	d9800d15 	stw	r6,52(sp)
 800898c:	d9800615 	stw	r6,24(sp)
 8008990:	003d1e06 	br	8007e0c <__alt_data_end+0xfc007e0c>
 8008994:	d8800617 	ldw	r2,24(sp)
 8008998:	00be3716 	blt	zero,r2,8008278 <__alt_data_end+0xfc008278>
 800899c:	1000be1e 	bne	r2,zero,8008c98 <_dtoa_r+0x11c8>
 80089a0:	8809883a 	mov	r4,r17
 80089a4:	a00b883a 	mov	r5,r20
 80089a8:	000d883a 	mov	r6,zero
 80089ac:	01d00534 	movhi	r7,16404
 80089b0:	8010ffc0 	call	8010ffc <__muldf3>
 80089b4:	1009883a 	mov	r4,r2
 80089b8:	180b883a 	mov	r5,r3
 80089bc:	900d883a 	mov	r6,r18
 80089c0:	980f883a 	mov	r7,r19
 80089c4:	80031c40 	call	80031c4 <__gedf2>
 80089c8:	002b883a 	mov	r21,zero
 80089cc:	0023883a 	mov	r17,zero
 80089d0:	10007a16 	blt	r2,zero,8008bbc <_dtoa_r+0x10ec>
 80089d4:	d9002217 	ldw	r4,136(sp)
 80089d8:	ddc00717 	ldw	r23,28(sp)
 80089dc:	0108303a 	nor	r4,zero,r4
 80089e0:	d9000515 	stw	r4,20(sp)
 80089e4:	8009883a 	mov	r4,r16
 80089e8:	a80b883a 	mov	r5,r21
 80089ec:	800b1a00 	call	800b1a0 <_Bfree>
 80089f0:	883f751e 	bne	r17,zero,80087c8 <__alt_data_end+0xfc0087c8>
 80089f4:	003de406 	br	8008188 <__alt_data_end+0xfc008188>
 80089f8:	e00b883a 	mov	r5,fp
 80089fc:	8009883a 	mov	r4,r16
 8008a00:	800b7300 	call	800b730 <__pow5mult>
 8008a04:	1039883a 	mov	fp,r2
 8008a08:	003ed306 	br	8008558 <__alt_data_end+0xfc008558>
 8008a0c:	903ee01e 	bne	r18,zero,8008590 <__alt_data_end+0xfc008590>
 8008a10:	00800434 	movhi	r2,16
 8008a14:	10bfffc4 	addi	r2,r2,-1
 8008a18:	9884703a 	and	r2,r19,r2
 8008a1c:	103f081e 	bne	r2,zero,8008640 <__alt_data_end+0xfc008640>
 8008a20:	9cdffc2c 	andhi	r19,r19,32752
 8008a24:	983f0626 	beq	r19,zero,8008640 <__alt_data_end+0xfc008640>
 8008a28:	d8800817 	ldw	r2,32(sp)
 8008a2c:	b5800044 	addi	r22,r22,1
 8008a30:	04c00044 	movi	r19,1
 8008a34:	10800044 	addi	r2,r2,1
 8008a38:	d8800815 	stw	r2,32(sp)
 8008a3c:	003f0106 	br	8008644 <__alt_data_end+0xfc008644>
 8008a40:	d9800f17 	ldw	r6,60(sp)
 8008a44:	30016826 	beq	r6,zero,8008fe8 <_dtoa_r+0x1518>
 8008a48:	10810cc4 	addi	r2,r2,1075
 8008a4c:	dd400917 	ldw	r21,36(sp)
 8008a50:	dd000817 	ldw	r20,32(sp)
 8008a54:	003e9906 	br	80084bc <__alt_data_end+0xfc0084bc>
 8008a58:	9011883a 	mov	r8,r18
 8008a5c:	4007883a 	mov	r3,r8
 8008a60:	e02d883a 	mov	r22,fp
 8008a64:	0080100e 	bge	zero,r2,8008aa8 <_dtoa_r+0xfd8>
 8008a68:	01800044 	movi	r6,1
 8008a6c:	8009883a 	mov	r4,r16
 8008a70:	e00b883a 	mov	r5,fp
 8008a74:	da001515 	stw	r8,84(sp)
 8008a78:	da001715 	stw	r8,92(sp)
 8008a7c:	800b8700 	call	800b870 <__lshift>
 8008a80:	1009883a 	mov	r4,r2
 8008a84:	a80b883a 	mov	r5,r21
 8008a88:	102d883a 	mov	r22,r2
 8008a8c:	800b9b80 	call	800b9b8 <__mcmp>
 8008a90:	d8c01517 	ldw	r3,84(sp)
 8008a94:	da001717 	ldw	r8,92(sp)
 8008a98:	0081a50e 	bge	zero,r2,8009130 <_dtoa_r+0x1660>
 8008a9c:	00800e44 	movi	r2,57
 8008aa0:	40817b26 	beq	r8,r2,8009090 <_dtoa_r+0x15c0>
 8008aa4:	40c00044 	addi	r3,r8,1
 8008aa8:	8825883a 	mov	r18,r17
 8008aac:	9dc00044 	addi	r23,r19,1
 8008ab0:	98c00005 	stb	r3,0(r19)
 8008ab4:	a023883a 	mov	r17,r20
 8008ab8:	b039883a 	mov	fp,r22
 8008abc:	003f3906 	br	80087a4 <__alt_data_end+0xfc0087a4>
 8008ac0:	00800e44 	movi	r2,57
 8008ac4:	9011883a 	mov	r8,r18
 8008ac8:	90817226 	beq	r18,r2,8009094 <_dtoa_r+0x15c4>
 8008acc:	0580010e 	bge	zero,r22,8008ad4 <_dtoa_r+0x1004>
 8008ad0:	ba000c44 	addi	r8,r23,49
 8008ad4:	8825883a 	mov	r18,r17
 8008ad8:	9dc00044 	addi	r23,r19,1
 8008adc:	9a000005 	stb	r8,0(r19)
 8008ae0:	a023883a 	mov	r17,r20
 8008ae4:	003f2f06 	br	80087a4 <__alt_data_end+0xfc0087a4>
 8008ae8:	880b883a 	mov	r5,r17
 8008aec:	8009883a 	mov	r4,r16
 8008af0:	01800284 	movi	r6,10
 8008af4:	000f883a 	mov	r7,zero
 8008af8:	800b1c80 	call	800b1c8 <__multadd>
 8008afc:	1023883a 	mov	r17,r2
 8008b00:	1029883a 	mov	r20,r2
 8008b04:	003f9706 	br	8008964 <__alt_data_end+0xfc008964>
 8008b08:	8009883a 	mov	r4,r16
 8008b0c:	180b883a 	mov	r5,r3
 8008b10:	800b1a00 	call	800b1a0 <_Bfree>
 8008b14:	00800044 	movi	r2,1
 8008b18:	003f7306 	br	80088e8 <__alt_data_end+0xfc0088e8>
 8008b1c:	e009883a 	mov	r4,fp
 8008b20:	a80b883a 	mov	r5,r21
 8008b24:	800b9b80 	call	800b9b8 <__mcmp>
 8008b28:	103ee60e 	bge	r2,zero,80086c4 <__alt_data_end+0xfc0086c4>
 8008b2c:	8009883a 	mov	r4,r16
 8008b30:	e00b883a 	mov	r5,fp
 8008b34:	01800284 	movi	r6,10
 8008b38:	000f883a 	mov	r7,zero
 8008b3c:	800b1c80 	call	800b1c8 <__multadd>
 8008b40:	d9000517 	ldw	r4,20(sp)
 8008b44:	d9800b17 	ldw	r6,44(sp)
 8008b48:	1039883a 	mov	fp,r2
 8008b4c:	213fffc4 	addi	r4,r4,-1
 8008b50:	d9000515 	stw	r4,20(sp)
 8008b54:	303f2d1e 	bne	r6,zero,800880c <__alt_data_end+0xfc00880c>
 8008b58:	d9000d17 	ldw	r4,52(sp)
 8008b5c:	0101780e 	bge	zero,r4,8009140 <_dtoa_r+0x1670>
 8008b60:	d9000615 	stw	r4,24(sp)
 8008b64:	003edb06 	br	80086d4 <__alt_data_end+0xfc0086d4>
 8008b68:	00800084 	movi	r2,2
 8008b6c:	30818e1e 	bne	r6,r2,80091a8 <_dtoa_r+0x16d8>
 8008b70:	d8000b15 	stw	zero,44(sp)
 8008b74:	003f8106 	br	800897c <__alt_data_end+0xfc00897c>
 8008b78:	d8800717 	ldw	r2,28(sp)
 8008b7c:	003c0306 	br	8007b8c <__alt_data_end+0xfc007b8c>
 8008b80:	d9000317 	ldw	r4,12(sp)
 8008b84:	00800084 	movi	r2,2
 8008b88:	113ed00e 	bge	r2,r4,80086cc <__alt_data_end+0xfc0086cc>
 8008b8c:	d8c00617 	ldw	r3,24(sp)
 8008b90:	183f901e 	bne	r3,zero,80089d4 <__alt_data_end+0xfc0089d4>
 8008b94:	a80b883a 	mov	r5,r21
 8008b98:	8009883a 	mov	r4,r16
 8008b9c:	01800144 	movi	r6,5
 8008ba0:	000f883a 	mov	r7,zero
 8008ba4:	800b1c80 	call	800b1c8 <__multadd>
 8008ba8:	e009883a 	mov	r4,fp
 8008bac:	100b883a 	mov	r5,r2
 8008bb0:	102b883a 	mov	r21,r2
 8008bb4:	800b9b80 	call	800b9b8 <__mcmp>
 8008bb8:	00bf860e 	bge	zero,r2,80089d4 <__alt_data_end+0xfc0089d4>
 8008bbc:	d9800717 	ldw	r6,28(sp)
 8008bc0:	00800c44 	movi	r2,49
 8008bc4:	30800005 	stb	r2,0(r6)
 8008bc8:	d8800517 	ldw	r2,20(sp)
 8008bcc:	35c00044 	addi	r23,r6,1
 8008bd0:	10800044 	addi	r2,r2,1
 8008bd4:	d8800515 	stw	r2,20(sp)
 8008bd8:	003f8206 	br	80089e4 <__alt_data_end+0xfc0089e4>
 8008bdc:	903e981e 	bne	r18,zero,8008640 <__alt_data_end+0xfc008640>
 8008be0:	003f8b06 	br	8008a10 <__alt_data_end+0xfc008a10>
 8008be4:	d9800517 	ldw	r6,20(sp)
 8008be8:	d8c00717 	ldw	r3,28(sp)
 8008bec:	00800c44 	movi	r2,49
 8008bf0:	31800044 	addi	r6,r6,1
 8008bf4:	d9800515 	stw	r6,20(sp)
 8008bf8:	18800005 	stb	r2,0(r3)
 8008bfc:	003ee906 	br	80087a4 <__alt_data_end+0xfc0087a4>
 8008c00:	dc000317 	ldw	r16,12(sp)
 8008c04:	003d6006 	br	8008188 <__alt_data_end+0xfc008188>
 8008c08:	8809883a 	mov	r4,r17
 8008c0c:	800340c0 	call	800340c <__floatsidf>
 8008c10:	a009883a 	mov	r4,r20
 8008c14:	a80b883a 	mov	r5,r21
 8008c18:	100d883a 	mov	r6,r2
 8008c1c:	180f883a 	mov	r7,r3
 8008c20:	8010ffc0 	call	8010ffc <__muldf3>
 8008c24:	1009883a 	mov	r4,r2
 8008c28:	180b883a 	mov	r5,r3
 8008c2c:	000d883a 	mov	r6,zero
 8008c30:	01d00734 	movhi	r7,16412
 8008c34:	80029280 	call	8002928 <__adddf3>
 8008c38:	1023883a 	mov	r17,r2
 8008c3c:	00bf3034 	movhi	r2,64704
 8008c40:	1885883a 	add	r2,r3,r2
 8008c44:	d8800e15 	stw	r2,56(sp)
 8008c48:	a009883a 	mov	r4,r20
 8008c4c:	a80b883a 	mov	r5,r21
 8008c50:	000d883a 	mov	r6,zero
 8008c54:	01d00534 	movhi	r7,16404
 8008c58:	80117200 	call	8011720 <__subdf3>
 8008c5c:	d9c00e17 	ldw	r7,56(sp)
 8008c60:	1009883a 	mov	r4,r2
 8008c64:	180b883a 	mov	r5,r3
 8008c68:	880d883a 	mov	r6,r17
 8008c6c:	102b883a 	mov	r21,r2
 8008c70:	1829883a 	mov	r20,r3
 8008c74:	80031c40 	call	80031c4 <__gedf2>
 8008c78:	00807716 	blt	zero,r2,8008e58 <_dtoa_r+0x1388>
 8008c7c:	d8800e17 	ldw	r2,56(sp)
 8008c80:	a809883a 	mov	r4,r21
 8008c84:	a00b883a 	mov	r5,r20
 8008c88:	11e0003c 	xorhi	r7,r2,32768
 8008c8c:	880d883a 	mov	r6,r17
 8008c90:	80032a40 	call	80032a4 <__ledf2>
 8008c94:	103d6b0e 	bge	r2,zero,8008244 <__alt_data_end+0xfc008244>
 8008c98:	002b883a 	mov	r21,zero
 8008c9c:	0023883a 	mov	r17,zero
 8008ca0:	003f4c06 	br	80089d4 <__alt_data_end+0xfc0089d4>
 8008ca4:	d9800917 	ldw	r6,36(sp)
 8008ca8:	e00b883a 	mov	r5,fp
 8008cac:	8009883a 	mov	r4,r16
 8008cb0:	800b7300 	call	800b730 <__pow5mult>
 8008cb4:	1039883a 	mov	fp,r2
 8008cb8:	003e2706 	br	8008558 <__alt_data_end+0xfc008558>
 8008cbc:	d8000b15 	stw	zero,44(sp)
 8008cc0:	003c4906 	br	8007de8 <__alt_data_end+0xfc007de8>
 8008cc4:	d9000917 	ldw	r4,36(sp)
 8008cc8:	d9800a17 	ldw	r6,40(sp)
 8008ccc:	dd400915 	stw	r21,36(sp)
 8008cd0:	a905c83a 	sub	r2,r21,r4
 8008cd4:	308d883a 	add	r6,r6,r2
 8008cd8:	d9800a15 	stw	r6,40(sp)
 8008cdc:	002b883a 	mov	r21,zero
 8008ce0:	003df206 	br	80084ac <__alt_data_end+0xfc0084ac>
 8008ce4:	dc800e15 	stw	r18,56(sp)
 8008ce8:	982b883a 	mov	r21,r19
 8008cec:	04400084 	movi	r17,2
 8008cf0:	003c7406 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 8008cf4:	04400044 	movi	r17,1
 8008cf8:	dc400d15 	stw	r17,52(sp)
 8008cfc:	dc400615 	stw	r17,24(sp)
 8008d00:	dc402215 	stw	r17,136(sp)
 8008d04:	80001115 	stw	zero,68(r16)
 8008d08:	000b883a 	mov	r5,zero
 8008d0c:	003c4a06 	br	8007e38 <__alt_data_end+0xfc007e38>
 8008d10:	3023883a 	mov	r17,r6
 8008d14:	003ffb06 	br	8008d04 <__alt_data_end+0xfc008d04>
 8008d18:	1000021e 	bne	r2,zero,8008d24 <_dtoa_r+0x1254>
 8008d1c:	4200004c 	andi	r8,r8,1
 8008d20:	403e8f1e 	bne	r8,zero,8008760 <__alt_data_end+0xfc008760>
 8008d24:	01000c04 	movi	r4,48
 8008d28:	00000106 	br	8008d30 <_dtoa_r+0x1260>
 8008d2c:	102f883a 	mov	r23,r2
 8008d30:	b8bfffc4 	addi	r2,r23,-1
 8008d34:	10c00007 	ldb	r3,0(r2)
 8008d38:	193ffc26 	beq	r3,r4,8008d2c <__alt_data_end+0xfc008d2c>
 8008d3c:	003e9906 	br	80087a4 <__alt_data_end+0xfc0087a4>
 8008d40:	d9000517 	ldw	r4,20(sp)
 8008d44:	012fc83a 	sub	r23,zero,r4
 8008d48:	b800ad26 	beq	r23,zero,8009000 <_dtoa_r+0x1530>
 8008d4c:	b88003cc 	andi	r2,r23,15
 8008d50:	100490fa 	slli	r2,r2,3
 8008d54:	00c200b4 	movhi	r3,2050
 8008d58:	18fde104 	addi	r3,r3,-2172
 8008d5c:	1885883a 	add	r2,r3,r2
 8008d60:	11800017 	ldw	r6,0(r2)
 8008d64:	11c00117 	ldw	r7,4(r2)
 8008d68:	b82fd13a 	srai	r23,r23,4
 8008d6c:	9009883a 	mov	r4,r18
 8008d70:	980b883a 	mov	r5,r19
 8008d74:	8010ffc0 	call	8010ffc <__muldf3>
 8008d78:	1029883a 	mov	r20,r2
 8008d7c:	182b883a 	mov	r21,r3
 8008d80:	b800f426 	beq	r23,zero,8009154 <_dtoa_r+0x1684>
 8008d84:	020200b4 	movhi	r8,2050
 8008d88:	423dd704 	addi	r8,r8,-2212
 8008d8c:	8029883a 	mov	r20,r16
 8008d90:	04400084 	movi	r17,2
 8008d94:	4021883a 	mov	r16,r8
 8008d98:	b980004c 	andi	r6,r23,1
 8008d9c:	1009883a 	mov	r4,r2
 8008da0:	b82fd07a 	srai	r23,r23,1
 8008da4:	180b883a 	mov	r5,r3
 8008da8:	30000426 	beq	r6,zero,8008dbc <_dtoa_r+0x12ec>
 8008dac:	81800017 	ldw	r6,0(r16)
 8008db0:	81c00117 	ldw	r7,4(r16)
 8008db4:	8c400044 	addi	r17,r17,1
 8008db8:	8010ffc0 	call	8010ffc <__muldf3>
 8008dbc:	84000204 	addi	r16,r16,8
 8008dc0:	b83ff51e 	bne	r23,zero,8008d98 <__alt_data_end+0xfc008d98>
 8008dc4:	a021883a 	mov	r16,r20
 8008dc8:	182b883a 	mov	r21,r3
 8008dcc:	1029883a 	mov	r20,r2
 8008dd0:	003c5506 	br	8007f28 <__alt_data_end+0xfc007f28>
 8008dd4:	d9800517 	ldw	r6,20(sp)
 8008dd8:	d9000717 	ldw	r4,28(sp)
 8008ddc:	00c00c04 	movi	r3,48
 8008de0:	31800044 	addi	r6,r6,1
 8008de4:	d9800515 	stw	r6,20(sp)
 8008de8:	20c00005 	stb	r3,0(r4)
 8008dec:	02000c44 	movi	r8,49
 8008df0:	003da206 	br	800847c <__alt_data_end+0xfc00847c>
 8008df4:	89400117 	ldw	r5,4(r17)
 8008df8:	8009883a 	mov	r4,r16
 8008dfc:	800b0f80 	call	800b0f8 <_Balloc>
 8008e00:	89800417 	ldw	r6,16(r17)
 8008e04:	11000304 	addi	r4,r2,12
 8008e08:	89400304 	addi	r5,r17,12
 8008e0c:	31800084 	addi	r6,r6,2
 8008e10:	318d883a 	add	r6,r6,r6
 8008e14:	318d883a 	add	r6,r6,r6
 8008e18:	1027883a 	mov	r19,r2
 8008e1c:	800ad400 	call	800ad40 <memcpy>
 8008e20:	8009883a 	mov	r4,r16
 8008e24:	980b883a 	mov	r5,r19
 8008e28:	01800044 	movi	r6,1
 8008e2c:	800b8700 	call	800b870 <__lshift>
 8008e30:	1029883a 	mov	r20,r2
 8008e34:	003e8606 	br	8008850 <__alt_data_end+0xfc008850>
 8008e38:	00800e44 	movi	r2,57
 8008e3c:	90809526 	beq	r18,r2,8009094 <_dtoa_r+0x15c4>
 8008e40:	92000044 	addi	r8,r18,1
 8008e44:	003f2306 	br	8008ad4 <__alt_data_end+0xfc008ad4>
 8008e48:	9011883a 	mov	r8,r18
 8008e4c:	8825883a 	mov	r18,r17
 8008e50:	a023883a 	mov	r17,r20
 8008e54:	003e3706 	br	8008734 <__alt_data_end+0xfc008734>
 8008e58:	002b883a 	mov	r21,zero
 8008e5c:	0023883a 	mov	r17,zero
 8008e60:	003f5606 	br	8008bbc <__alt_data_end+0xfc008bbc>
 8008e64:	51bfffc4 	addi	r6,r10,-1
 8008e68:	300490fa 	slli	r2,r6,3
 8008e6c:	00c200b4 	movhi	r3,2050
 8008e70:	18fde104 	addi	r3,r3,-2172
 8008e74:	1885883a 	add	r2,r3,r2
 8008e78:	d9c00e17 	ldw	r7,56(sp)
 8008e7c:	11000017 	ldw	r4,0(r2)
 8008e80:	11400117 	ldw	r5,4(r2)
 8008e84:	d8800717 	ldw	r2,28(sp)
 8008e88:	d9801015 	stw	r6,64(sp)
 8008e8c:	880d883a 	mov	r6,r17
 8008e90:	da801615 	stw	r10,88(sp)
 8008e94:	15c00044 	addi	r23,r2,1
 8008e98:	8010ffc0 	call	8010ffc <__muldf3>
 8008e9c:	a80b883a 	mov	r5,r21
 8008ea0:	a009883a 	mov	r4,r20
 8008ea4:	d8c01115 	stw	r3,68(sp)
 8008ea8:	d8800e15 	stw	r2,56(sp)
 8008eac:	80033840 	call	8003384 <__fixdfsi>
 8008eb0:	1009883a 	mov	r4,r2
 8008eb4:	1023883a 	mov	r17,r2
 8008eb8:	800340c0 	call	800340c <__floatsidf>
 8008ebc:	a009883a 	mov	r4,r20
 8008ec0:	a80b883a 	mov	r5,r21
 8008ec4:	100d883a 	mov	r6,r2
 8008ec8:	180f883a 	mov	r7,r3
 8008ecc:	80117200 	call	8011720 <__subdf3>
 8008ed0:	1813883a 	mov	r9,r3
 8008ed4:	d8c00717 	ldw	r3,28(sp)
 8008ed8:	8c400c04 	addi	r17,r17,48
 8008edc:	1011883a 	mov	r8,r2
 8008ee0:	1c400005 	stb	r17,0(r3)
 8008ee4:	da801617 	ldw	r10,88(sp)
 8008ee8:	00800044 	movi	r2,1
 8008eec:	50802326 	beq	r10,r2,8008f7c <_dtoa_r+0x14ac>
 8008ef0:	d8800717 	ldw	r2,28(sp)
 8008ef4:	b82b883a 	mov	r21,r23
 8008ef8:	dc001315 	stw	r16,76(sp)
 8008efc:	12a9883a 	add	r20,r2,r10
 8008f00:	4807883a 	mov	r3,r9
 8008f04:	4005883a 	mov	r2,r8
 8008f08:	dc801415 	stw	r18,80(sp)
 8008f0c:	000d883a 	mov	r6,zero
 8008f10:	01d00934 	movhi	r7,16420
 8008f14:	1009883a 	mov	r4,r2
 8008f18:	180b883a 	mov	r5,r3
 8008f1c:	8010ffc0 	call	8010ffc <__muldf3>
 8008f20:	180b883a 	mov	r5,r3
 8008f24:	1009883a 	mov	r4,r2
 8008f28:	1821883a 	mov	r16,r3
 8008f2c:	1025883a 	mov	r18,r2
 8008f30:	80033840 	call	8003384 <__fixdfsi>
 8008f34:	1009883a 	mov	r4,r2
 8008f38:	1023883a 	mov	r17,r2
 8008f3c:	800340c0 	call	800340c <__floatsidf>
 8008f40:	9009883a 	mov	r4,r18
 8008f44:	800b883a 	mov	r5,r16
 8008f48:	100d883a 	mov	r6,r2
 8008f4c:	180f883a 	mov	r7,r3
 8008f50:	8c400c04 	addi	r17,r17,48
 8008f54:	80117200 	call	8011720 <__subdf3>
 8008f58:	ad400044 	addi	r21,r21,1
 8008f5c:	ac7fffc5 	stb	r17,-1(r21)
 8008f60:	ad3fea1e 	bne	r21,r20,8008f0c <__alt_data_end+0xfc008f0c>
 8008f64:	1813883a 	mov	r9,r3
 8008f68:	d8c01017 	ldw	r3,64(sp)
 8008f6c:	dc001317 	ldw	r16,76(sp)
 8008f70:	dc801417 	ldw	r18,80(sp)
 8008f74:	1011883a 	mov	r8,r2
 8008f78:	b8ef883a 	add	r23,r23,r3
 8008f7c:	d9000e17 	ldw	r4,56(sp)
 8008f80:	d9401117 	ldw	r5,68(sp)
 8008f84:	000d883a 	mov	r6,zero
 8008f88:	01cff834 	movhi	r7,16352
 8008f8c:	da001715 	stw	r8,92(sp)
 8008f90:	da401515 	stw	r9,84(sp)
 8008f94:	80029280 	call	8002928 <__adddf3>
 8008f98:	da001717 	ldw	r8,92(sp)
 8008f9c:	da401517 	ldw	r9,84(sp)
 8008fa0:	1009883a 	mov	r4,r2
 8008fa4:	400d883a 	mov	r6,r8
 8008fa8:	480f883a 	mov	r7,r9
 8008fac:	180b883a 	mov	r5,r3
 8008fb0:	80032a40 	call	80032a4 <__ledf2>
 8008fb4:	da001717 	ldw	r8,92(sp)
 8008fb8:	da401517 	ldw	r9,84(sp)
 8008fbc:	10003b0e 	bge	r2,zero,80090ac <_dtoa_r+0x15dc>
 8008fc0:	d9001217 	ldw	r4,72(sp)
 8008fc4:	bd7fffc3 	ldbu	r21,-1(r23)
 8008fc8:	d9000515 	stw	r4,20(sp)
 8008fcc:	003d1c06 	br	8008440 <__alt_data_end+0xfc008440>
 8008fd0:	d8c00817 	ldw	r3,32(sp)
 8008fd4:	18a9c83a 	sub	r20,r3,r2
 8008fd8:	0005883a 	mov	r2,zero
 8008fdc:	003d3706 	br	80084bc <__alt_data_end+0xfc0084bc>
 8008fe0:	00800044 	movi	r2,1
 8008fe4:	003dd006 	br	8008728 <__alt_data_end+0xfc008728>
 8008fe8:	d8c00217 	ldw	r3,8(sp)
 8008fec:	00800d84 	movi	r2,54
 8008ff0:	dd400917 	ldw	r21,36(sp)
 8008ff4:	10c5c83a 	sub	r2,r2,r3
 8008ff8:	dd000817 	ldw	r20,32(sp)
 8008ffc:	003d2f06 	br	80084bc <__alt_data_end+0xfc0084bc>
 8009000:	9029883a 	mov	r20,r18
 8009004:	982b883a 	mov	r21,r19
 8009008:	04400084 	movi	r17,2
 800900c:	003bc606 	br	8007f28 <__alt_data_end+0xfc007f28>
 8009010:	d8800617 	ldw	r2,24(sp)
 8009014:	103efc26 	beq	r2,zero,8008c08 <__alt_data_end+0xfc008c08>
 8009018:	d8c00d17 	ldw	r3,52(sp)
 800901c:	00fc890e 	bge	zero,r3,8008244 <__alt_data_end+0xfc008244>
 8009020:	a80b883a 	mov	r5,r21
 8009024:	a009883a 	mov	r4,r20
 8009028:	000d883a 	mov	r6,zero
 800902c:	01d00934 	movhi	r7,16420
 8009030:	8010ffc0 	call	8010ffc <__muldf3>
 8009034:	89000044 	addi	r4,r17,1
 8009038:	1029883a 	mov	r20,r2
 800903c:	182b883a 	mov	r21,r3
 8009040:	800340c0 	call	800340c <__floatsidf>
 8009044:	a009883a 	mov	r4,r20
 8009048:	a80b883a 	mov	r5,r21
 800904c:	100d883a 	mov	r6,r2
 8009050:	180f883a 	mov	r7,r3
 8009054:	8010ffc0 	call	8010ffc <__muldf3>
 8009058:	1009883a 	mov	r4,r2
 800905c:	180b883a 	mov	r5,r3
 8009060:	000d883a 	mov	r6,zero
 8009064:	01d00734 	movhi	r7,16412
 8009068:	80029280 	call	8002928 <__adddf3>
 800906c:	d9000517 	ldw	r4,20(sp)
 8009070:	1023883a 	mov	r17,r2
 8009074:	00bf3034 	movhi	r2,64704
 8009078:	213fffc4 	addi	r4,r4,-1
 800907c:	1885883a 	add	r2,r3,r2
 8009080:	d9001215 	stw	r4,72(sp)
 8009084:	d8800e15 	stw	r2,56(sp)
 8009088:	da800d17 	ldw	r10,52(sp)
 800908c:	003bc306 	br	8007f9c <__alt_data_end+0xfc007f9c>
 8009090:	b039883a 	mov	fp,r22
 8009094:	01000e44 	movi	r4,57
 8009098:	8825883a 	mov	r18,r17
 800909c:	9dc00044 	addi	r23,r19,1
 80090a0:	99000005 	stb	r4,0(r19)
 80090a4:	a023883a 	mov	r17,r20
 80090a8:	003dae06 	br	8008764 <__alt_data_end+0xfc008764>
 80090ac:	d9800e17 	ldw	r6,56(sp)
 80090b0:	d9c01117 	ldw	r7,68(sp)
 80090b4:	0009883a 	mov	r4,zero
 80090b8:	014ff834 	movhi	r5,16352
 80090bc:	da001715 	stw	r8,92(sp)
 80090c0:	da401515 	stw	r9,84(sp)
 80090c4:	80117200 	call	8011720 <__subdf3>
 80090c8:	da001717 	ldw	r8,92(sp)
 80090cc:	da401517 	ldw	r9,84(sp)
 80090d0:	1009883a 	mov	r4,r2
 80090d4:	180b883a 	mov	r5,r3
 80090d8:	400d883a 	mov	r6,r8
 80090dc:	480f883a 	mov	r7,r9
 80090e0:	80031c40 	call	80031c4 <__gedf2>
 80090e4:	00bc570e 	bge	zero,r2,8008244 <__alt_data_end+0xfc008244>
 80090e8:	01000c04 	movi	r4,48
 80090ec:	00000106 	br	80090f4 <_dtoa_r+0x1624>
 80090f0:	102f883a 	mov	r23,r2
 80090f4:	b8bfffc4 	addi	r2,r23,-1
 80090f8:	10c00007 	ldb	r3,0(r2)
 80090fc:	193ffc26 	beq	r3,r4,80090f0 <__alt_data_end+0xfc0090f0>
 8009100:	d9801217 	ldw	r6,72(sp)
 8009104:	d9800515 	stw	r6,20(sp)
 8009108:	003c1f06 	br	8008188 <__alt_data_end+0xfc008188>
 800910c:	d8801217 	ldw	r2,72(sp)
 8009110:	dc001117 	ldw	r16,68(sp)
 8009114:	d8800515 	stw	r2,20(sp)
 8009118:	003cc906 	br	8008440 <__alt_data_end+0xfc008440>
 800911c:	dd801317 	ldw	r22,76(sp)
 8009120:	dc001117 	ldw	r16,68(sp)
 8009124:	dcc01417 	ldw	r19,80(sp)
 8009128:	dc801017 	ldw	r18,64(sp)
 800912c:	003c4506 	br	8008244 <__alt_data_end+0xfc008244>
 8009130:	103e5d1e 	bne	r2,zero,8008aa8 <__alt_data_end+0xfc008aa8>
 8009134:	4080004c 	andi	r2,r8,1
 8009138:	103e5b26 	beq	r2,zero,8008aa8 <__alt_data_end+0xfc008aa8>
 800913c:	003e5706 	br	8008a9c <__alt_data_end+0xfc008a9c>
 8009140:	d8c00317 	ldw	r3,12(sp)
 8009144:	00800084 	movi	r2,2
 8009148:	10c00a16 	blt	r2,r3,8009174 <_dtoa_r+0x16a4>
 800914c:	d9000d17 	ldw	r4,52(sp)
 8009150:	003e8306 	br	8008b60 <__alt_data_end+0xfc008b60>
 8009154:	04400084 	movi	r17,2
 8009158:	003b7306 	br	8007f28 <__alt_data_end+0xfc007f28>
 800915c:	d9801217 	ldw	r6,72(sp)
 8009160:	d9800515 	stw	r6,20(sp)
 8009164:	003cb606 	br	8008440 <__alt_data_end+0xfc008440>
 8009168:	d9001217 	ldw	r4,72(sp)
 800916c:	d9000515 	stw	r4,20(sp)
 8009170:	003c0506 	br	8008188 <__alt_data_end+0xfc008188>
 8009174:	d9800d17 	ldw	r6,52(sp)
 8009178:	d9800615 	stw	r6,24(sp)
 800917c:	003e8306 	br	8008b8c <__alt_data_end+0xfc008b8c>
 8009180:	d9800317 	ldw	r6,12(sp)
 8009184:	00800084 	movi	r2,2
 8009188:	11800216 	blt	r2,r6,8009194 <_dtoa_r+0x16c4>
 800918c:	d8800d17 	ldw	r2,52(sp)
 8009190:	003da606 	br	800882c <__alt_data_end+0xfc00882c>
 8009194:	d8800d17 	ldw	r2,52(sp)
 8009198:	d8800615 	stw	r2,24(sp)
 800919c:	003e7b06 	br	8008b8c <__alt_data_end+0xfc008b8c>
 80091a0:	05000044 	movi	r20,1
 80091a4:	003b0506 	br	8007dbc <__alt_data_end+0xfc007dbc>
 80091a8:	8009883a 	mov	r4,r16
 80091ac:	80001115 	stw	zero,68(r16)
 80091b0:	000b883a 	mov	r5,zero
 80091b4:	800b0f80 	call	800b0f8 <_Balloc>
 80091b8:	d8800715 	stw	r2,28(sp)
 80091bc:	d8c00717 	ldw	r3,28(sp)
 80091c0:	00bfffc4 	movi	r2,-1
 80091c4:	01000044 	movi	r4,1
 80091c8:	d8800615 	stw	r2,24(sp)
 80091cc:	80c01015 	stw	r3,64(r16)
 80091d0:	d9000b15 	stw	r4,44(sp)
 80091d4:	d8002215 	stw	zero,136(sp)
 80091d8:	d8800d15 	stw	r2,52(sp)
 80091dc:	003c1906 	br	8008244 <__alt_data_end+0xfc008244>
 80091e0:	193d2926 	beq	r3,r4,8008688 <__alt_data_end+0xfc008688>
 80091e4:	00c00f04 	movi	r3,60
 80091e8:	1885c83a 	sub	r2,r3,r2
 80091ec:	003d7b06 	br	80087dc <__alt_data_end+0xfc0087dc>
 80091f0:	000b883a 	mov	r5,zero
 80091f4:	003b1006 	br	8007e38 <__alt_data_end+0xfc007e38>

080091f8 <_fflush_r>:
 80091f8:	defffb04 	addi	sp,sp,-20
 80091fc:	dcc00315 	stw	r19,12(sp)
 8009200:	dc000015 	stw	r16,0(sp)
 8009204:	dfc00415 	stw	ra,16(sp)
 8009208:	dc800215 	stw	r18,8(sp)
 800920c:	dc400115 	stw	r17,4(sp)
 8009210:	2027883a 	mov	r19,r4
 8009214:	2821883a 	mov	r16,r5
 8009218:	20000226 	beq	r4,zero,8009224 <_fflush_r+0x2c>
 800921c:	20800e17 	ldw	r2,56(r4)
 8009220:	10005326 	beq	r2,zero,8009370 <_fflush_r+0x178>
 8009224:	8080030b 	ldhu	r2,12(r16)
 8009228:	10ffffcc 	andi	r3,r2,65535
 800922c:	18e0001c 	xori	r3,r3,32768
 8009230:	18e00004 	addi	r3,r3,-32768
 8009234:	18002c26 	beq	r3,zero,80092e8 <_fflush_r+0xf0>
 8009238:	10c0020c 	andi	r3,r2,8
 800923c:	1800321e 	bne	r3,zero,8009308 <_fflush_r+0x110>
 8009240:	80c00117 	ldw	r3,4(r16)
 8009244:	10820014 	ori	r2,r2,2048
 8009248:	8080030d 	sth	r2,12(r16)
 800924c:	00c0570e 	bge	zero,r3,80093ac <_fflush_r+0x1b4>
 8009250:	82000a17 	ldw	r8,40(r16)
 8009254:	40002426 	beq	r8,zero,80092e8 <_fflush_r+0xf0>
 8009258:	9c400017 	ldw	r17,0(r19)
 800925c:	10c4000c 	andi	r3,r2,4096
 8009260:	98000015 	stw	zero,0(r19)
 8009264:	18004626 	beq	r3,zero,8009380 <_fflush_r+0x188>
 8009268:	81801417 	ldw	r6,80(r16)
 800926c:	10c0010c 	andi	r3,r2,4
 8009270:	18000626 	beq	r3,zero,800928c <_fflush_r+0x94>
 8009274:	80c00117 	ldw	r3,4(r16)
 8009278:	80800c17 	ldw	r2,48(r16)
 800927c:	30cdc83a 	sub	r6,r6,r3
 8009280:	10000226 	beq	r2,zero,800928c <_fflush_r+0x94>
 8009284:	80800f17 	ldw	r2,60(r16)
 8009288:	308dc83a 	sub	r6,r6,r2
 800928c:	81400717 	ldw	r5,28(r16)
 8009290:	9809883a 	mov	r4,r19
 8009294:	000f883a 	mov	r7,zero
 8009298:	403ee83a 	callr	r8
 800929c:	00ffffc4 	movi	r3,-1
 80092a0:	10c04526 	beq	r2,r3,80093b8 <_fflush_r+0x1c0>
 80092a4:	80c0030b 	ldhu	r3,12(r16)
 80092a8:	81000417 	ldw	r4,16(r16)
 80092ac:	80000115 	stw	zero,4(r16)
 80092b0:	197dffcc 	andi	r5,r3,63487
 80092b4:	8140030d 	sth	r5,12(r16)
 80092b8:	81000015 	stw	r4,0(r16)
 80092bc:	18c4000c 	andi	r3,r3,4096
 80092c0:	18000126 	beq	r3,zero,80092c8 <_fflush_r+0xd0>
 80092c4:	80801415 	stw	r2,80(r16)
 80092c8:	81400c17 	ldw	r5,48(r16)
 80092cc:	9c400015 	stw	r17,0(r19)
 80092d0:	28000526 	beq	r5,zero,80092e8 <_fflush_r+0xf0>
 80092d4:	80801004 	addi	r2,r16,64
 80092d8:	28800226 	beq	r5,r2,80092e4 <_fflush_r+0xec>
 80092dc:	9809883a 	mov	r4,r19
 80092e0:	80099140 	call	8009914 <_free_r>
 80092e4:	80000c15 	stw	zero,48(r16)
 80092e8:	0005883a 	mov	r2,zero
 80092ec:	dfc00417 	ldw	ra,16(sp)
 80092f0:	dcc00317 	ldw	r19,12(sp)
 80092f4:	dc800217 	ldw	r18,8(sp)
 80092f8:	dc400117 	ldw	r17,4(sp)
 80092fc:	dc000017 	ldw	r16,0(sp)
 8009300:	dec00504 	addi	sp,sp,20
 8009304:	f800283a 	ret
 8009308:	84800417 	ldw	r18,16(r16)
 800930c:	903ff626 	beq	r18,zero,80092e8 <__alt_data_end+0xfc0092e8>
 8009310:	84400017 	ldw	r17,0(r16)
 8009314:	108000cc 	andi	r2,r2,3
 8009318:	84800015 	stw	r18,0(r16)
 800931c:	8ca3c83a 	sub	r17,r17,r18
 8009320:	10001526 	beq	r2,zero,8009378 <_fflush_r+0x180>
 8009324:	0005883a 	mov	r2,zero
 8009328:	80800215 	stw	r2,8(r16)
 800932c:	04400316 	blt	zero,r17,800933c <_fflush_r+0x144>
 8009330:	003fed06 	br	80092e8 <__alt_data_end+0xfc0092e8>
 8009334:	90a5883a 	add	r18,r18,r2
 8009338:	047feb0e 	bge	zero,r17,80092e8 <__alt_data_end+0xfc0092e8>
 800933c:	80800917 	ldw	r2,36(r16)
 8009340:	81400717 	ldw	r5,28(r16)
 8009344:	880f883a 	mov	r7,r17
 8009348:	900d883a 	mov	r6,r18
 800934c:	9809883a 	mov	r4,r19
 8009350:	103ee83a 	callr	r2
 8009354:	88a3c83a 	sub	r17,r17,r2
 8009358:	00bff616 	blt	zero,r2,8009334 <__alt_data_end+0xfc009334>
 800935c:	80c0030b 	ldhu	r3,12(r16)
 8009360:	00bfffc4 	movi	r2,-1
 8009364:	18c01014 	ori	r3,r3,64
 8009368:	80c0030d 	sth	r3,12(r16)
 800936c:	003fdf06 	br	80092ec <__alt_data_end+0xfc0092ec>
 8009370:	80097a00 	call	80097a0 <__sinit>
 8009374:	003fab06 	br	8009224 <__alt_data_end+0xfc009224>
 8009378:	80800517 	ldw	r2,20(r16)
 800937c:	003fea06 	br	8009328 <__alt_data_end+0xfc009328>
 8009380:	81400717 	ldw	r5,28(r16)
 8009384:	000d883a 	mov	r6,zero
 8009388:	9809883a 	mov	r4,r19
 800938c:	01c00044 	movi	r7,1
 8009390:	403ee83a 	callr	r8
 8009394:	100d883a 	mov	r6,r2
 8009398:	00bfffc4 	movi	r2,-1
 800939c:	30801326 	beq	r6,r2,80093ec <_fflush_r+0x1f4>
 80093a0:	8080030b 	ldhu	r2,12(r16)
 80093a4:	82000a17 	ldw	r8,40(r16)
 80093a8:	003fb006 	br	800926c <__alt_data_end+0xfc00926c>
 80093ac:	80c00f17 	ldw	r3,60(r16)
 80093b0:	00ffa716 	blt	zero,r3,8009250 <__alt_data_end+0xfc009250>
 80093b4:	003fcc06 	br	80092e8 <__alt_data_end+0xfc0092e8>
 80093b8:	98c00017 	ldw	r3,0(r19)
 80093bc:	183fb926 	beq	r3,zero,80092a4 <__alt_data_end+0xfc0092a4>
 80093c0:	01000744 	movi	r4,29
 80093c4:	19000226 	beq	r3,r4,80093d0 <_fflush_r+0x1d8>
 80093c8:	01000584 	movi	r4,22
 80093cc:	1900101e 	bne	r3,r4,8009410 <_fflush_r+0x218>
 80093d0:	8080030b 	ldhu	r2,12(r16)
 80093d4:	80c00417 	ldw	r3,16(r16)
 80093d8:	80000115 	stw	zero,4(r16)
 80093dc:	10bdffcc 	andi	r2,r2,63487
 80093e0:	8080030d 	sth	r2,12(r16)
 80093e4:	80c00015 	stw	r3,0(r16)
 80093e8:	003fb706 	br	80092c8 <__alt_data_end+0xfc0092c8>
 80093ec:	98800017 	ldw	r2,0(r19)
 80093f0:	103feb26 	beq	r2,zero,80093a0 <__alt_data_end+0xfc0093a0>
 80093f4:	00c00744 	movi	r3,29
 80093f8:	10c00226 	beq	r2,r3,8009404 <_fflush_r+0x20c>
 80093fc:	00c00584 	movi	r3,22
 8009400:	10ffd61e 	bne	r2,r3,800935c <__alt_data_end+0xfc00935c>
 8009404:	9c400015 	stw	r17,0(r19)
 8009408:	0005883a 	mov	r2,zero
 800940c:	003fb706 	br	80092ec <__alt_data_end+0xfc0092ec>
 8009410:	80c0030b 	ldhu	r3,12(r16)
 8009414:	18c01014 	ori	r3,r3,64
 8009418:	80c0030d 	sth	r3,12(r16)
 800941c:	003fb306 	br	80092ec <__alt_data_end+0xfc0092ec>

08009420 <fflush>:
 8009420:	20000526 	beq	r4,zero,8009438 <fflush+0x18>
 8009424:	008200b4 	movhi	r2,2050
 8009428:	1084ed04 	addi	r2,r2,5044
 800942c:	200b883a 	mov	r5,r4
 8009430:	11000017 	ldw	r4,0(r2)
 8009434:	80091f81 	jmpi	80091f8 <_fflush_r>
 8009438:	008200b4 	movhi	r2,2050
 800943c:	1084ec04 	addi	r2,r2,5040
 8009440:	11000017 	ldw	r4,0(r2)
 8009444:	01420074 	movhi	r5,2049
 8009448:	29647e04 	addi	r5,r5,-28168
 800944c:	800a1601 	jmpi	800a160 <_fwalk_reent>

08009450 <__fp_lock>:
 8009450:	0005883a 	mov	r2,zero
 8009454:	f800283a 	ret

08009458 <__fp_unlock>:
 8009458:	0005883a 	mov	r2,zero
 800945c:	f800283a 	ret

08009460 <_cleanup_r>:
 8009460:	01420074 	movhi	r5,2049
 8009464:	297d3704 	addi	r5,r5,-2852
 8009468:	800a0a81 	jmpi	800a0a8 <_fwalk>

0800946c <__sinit.part.1>:
 800946c:	defff604 	addi	sp,sp,-40
 8009470:	00c20074 	movhi	r3,2049
 8009474:	dfc00915 	stw	ra,36(sp)
 8009478:	df000815 	stw	fp,32(sp)
 800947c:	ddc00715 	stw	r23,28(sp)
 8009480:	dd800615 	stw	r22,24(sp)
 8009484:	dd400515 	stw	r21,20(sp)
 8009488:	dd000415 	stw	r20,16(sp)
 800948c:	dcc00315 	stw	r19,12(sp)
 8009490:	dc800215 	stw	r18,8(sp)
 8009494:	dc400115 	stw	r17,4(sp)
 8009498:	dc000015 	stw	r16,0(sp)
 800949c:	18e51804 	addi	r3,r3,-27552
 80094a0:	24000117 	ldw	r16,4(r4)
 80094a4:	20c00f15 	stw	r3,60(r4)
 80094a8:	07000044 	movi	fp,1
 80094ac:	00c000c4 	movi	r3,3
 80094b0:	2080bb04 	addi	r2,r4,748
 80094b4:	20c0b915 	stw	r3,740(r4)
 80094b8:	27000e15 	stw	fp,56(r4)
 80094bc:	2080ba15 	stw	r2,744(r4)
 80094c0:	2000b815 	stw	zero,736(r4)
 80094c4:	05c00204 	movi	r23,8
 80094c8:	00800104 	movi	r2,4
 80094cc:	2025883a 	mov	r18,r4
 80094d0:	b80d883a 	mov	r6,r23
 80094d4:	81001704 	addi	r4,r16,92
 80094d8:	000b883a 	mov	r5,zero
 80094dc:	80000015 	stw	zero,0(r16)
 80094e0:	80000115 	stw	zero,4(r16)
 80094e4:	80000215 	stw	zero,8(r16)
 80094e8:	8080030d 	sth	r2,12(r16)
 80094ec:	80001915 	stw	zero,100(r16)
 80094f0:	8000038d 	sth	zero,14(r16)
 80094f4:	80000415 	stw	zero,16(r16)
 80094f8:	80000515 	stw	zero,20(r16)
 80094fc:	80000615 	stw	zero,24(r16)
 8009500:	800afd40 	call	800afd4 <memset>
 8009504:	05820074 	movhi	r22,2049
 8009508:	94400217 	ldw	r17,8(r18)
 800950c:	05420074 	movhi	r21,2049
 8009510:	05020074 	movhi	r20,2049
 8009514:	04c20074 	movhi	r19,2049
 8009518:	b5b21504 	addi	r22,r22,-14252
 800951c:	ad722c04 	addi	r21,r21,-14160
 8009520:	a5324b04 	addi	r20,r20,-14036
 8009524:	9cf26204 	addi	r19,r19,-13944
 8009528:	85800815 	stw	r22,32(r16)
 800952c:	85400915 	stw	r21,36(r16)
 8009530:	85000a15 	stw	r20,40(r16)
 8009534:	84c00b15 	stw	r19,44(r16)
 8009538:	84000715 	stw	r16,28(r16)
 800953c:	00800284 	movi	r2,10
 8009540:	89001704 	addi	r4,r17,92
 8009544:	b80d883a 	mov	r6,r23
 8009548:	000b883a 	mov	r5,zero
 800954c:	88000015 	stw	zero,0(r17)
 8009550:	88000115 	stw	zero,4(r17)
 8009554:	88000215 	stw	zero,8(r17)
 8009558:	8880030d 	sth	r2,12(r17)
 800955c:	88001915 	stw	zero,100(r17)
 8009560:	8f00038d 	sth	fp,14(r17)
 8009564:	88000415 	stw	zero,16(r17)
 8009568:	88000515 	stw	zero,20(r17)
 800956c:	88000615 	stw	zero,24(r17)
 8009570:	800afd40 	call	800afd4 <memset>
 8009574:	94000317 	ldw	r16,12(r18)
 8009578:	00800484 	movi	r2,18
 800957c:	8c400715 	stw	r17,28(r17)
 8009580:	8d800815 	stw	r22,32(r17)
 8009584:	8d400915 	stw	r21,36(r17)
 8009588:	8d000a15 	stw	r20,40(r17)
 800958c:	8cc00b15 	stw	r19,44(r17)
 8009590:	8080030d 	sth	r2,12(r16)
 8009594:	00800084 	movi	r2,2
 8009598:	80000015 	stw	zero,0(r16)
 800959c:	80000115 	stw	zero,4(r16)
 80095a0:	80000215 	stw	zero,8(r16)
 80095a4:	80001915 	stw	zero,100(r16)
 80095a8:	8080038d 	sth	r2,14(r16)
 80095ac:	80000415 	stw	zero,16(r16)
 80095b0:	80000515 	stw	zero,20(r16)
 80095b4:	80000615 	stw	zero,24(r16)
 80095b8:	81001704 	addi	r4,r16,92
 80095bc:	000b883a 	mov	r5,zero
 80095c0:	b80d883a 	mov	r6,r23
 80095c4:	800afd40 	call	800afd4 <memset>
 80095c8:	84000715 	stw	r16,28(r16)
 80095cc:	85800815 	stw	r22,32(r16)
 80095d0:	85400915 	stw	r21,36(r16)
 80095d4:	85000a15 	stw	r20,40(r16)
 80095d8:	84c00b15 	stw	r19,44(r16)
 80095dc:	dfc00917 	ldw	ra,36(sp)
 80095e0:	df000817 	ldw	fp,32(sp)
 80095e4:	ddc00717 	ldw	r23,28(sp)
 80095e8:	dd800617 	ldw	r22,24(sp)
 80095ec:	dd400517 	ldw	r21,20(sp)
 80095f0:	dd000417 	ldw	r20,16(sp)
 80095f4:	dcc00317 	ldw	r19,12(sp)
 80095f8:	dc800217 	ldw	r18,8(sp)
 80095fc:	dc400117 	ldw	r17,4(sp)
 8009600:	dc000017 	ldw	r16,0(sp)
 8009604:	dec00a04 	addi	sp,sp,40
 8009608:	f800283a 	ret

0800960c <__sfmoreglue>:
 800960c:	defffc04 	addi	sp,sp,-16
 8009610:	dc400115 	stw	r17,4(sp)
 8009614:	2c401a24 	muli	r17,r5,104
 8009618:	dc800215 	stw	r18,8(sp)
 800961c:	2825883a 	mov	r18,r5
 8009620:	89400304 	addi	r5,r17,12
 8009624:	dc000015 	stw	r16,0(sp)
 8009628:	dfc00315 	stw	ra,12(sp)
 800962c:	800a4b00 	call	800a4b0 <_malloc_r>
 8009630:	1021883a 	mov	r16,r2
 8009634:	10000726 	beq	r2,zero,8009654 <__sfmoreglue+0x48>
 8009638:	11000304 	addi	r4,r2,12
 800963c:	10000015 	stw	zero,0(r2)
 8009640:	14800115 	stw	r18,4(r2)
 8009644:	11000215 	stw	r4,8(r2)
 8009648:	000b883a 	mov	r5,zero
 800964c:	880d883a 	mov	r6,r17
 8009650:	800afd40 	call	800afd4 <memset>
 8009654:	8005883a 	mov	r2,r16
 8009658:	dfc00317 	ldw	ra,12(sp)
 800965c:	dc800217 	ldw	r18,8(sp)
 8009660:	dc400117 	ldw	r17,4(sp)
 8009664:	dc000017 	ldw	r16,0(sp)
 8009668:	dec00404 	addi	sp,sp,16
 800966c:	f800283a 	ret

08009670 <__sfp>:
 8009670:	008200b4 	movhi	r2,2050
 8009674:	defffb04 	addi	sp,sp,-20
 8009678:	1084ec04 	addi	r2,r2,5040
 800967c:	dc800215 	stw	r18,8(sp)
 8009680:	14800017 	ldw	r18,0(r2)
 8009684:	dcc00315 	stw	r19,12(sp)
 8009688:	dfc00415 	stw	ra,16(sp)
 800968c:	90800e17 	ldw	r2,56(r18)
 8009690:	dc400115 	stw	r17,4(sp)
 8009694:	dc000015 	stw	r16,0(sp)
 8009698:	2027883a 	mov	r19,r4
 800969c:	1000021e 	bne	r2,zero,80096a8 <__sfp+0x38>
 80096a0:	9009883a 	mov	r4,r18
 80096a4:	800946c0 	call	800946c <__sinit.part.1>
 80096a8:	9480b804 	addi	r18,r18,736
 80096ac:	047fffc4 	movi	r17,-1
 80096b0:	91400117 	ldw	r5,4(r18)
 80096b4:	94000217 	ldw	r16,8(r18)
 80096b8:	297fffc4 	addi	r5,r5,-1
 80096bc:	28000a16 	blt	r5,zero,80096e8 <__sfp+0x78>
 80096c0:	8080030f 	ldh	r2,12(r16)
 80096c4:	10000c26 	beq	r2,zero,80096f8 <__sfp+0x88>
 80096c8:	80c01d04 	addi	r3,r16,116
 80096cc:	00000206 	br	80096d8 <__sfp+0x68>
 80096d0:	18bfe60f 	ldh	r2,-104(r3)
 80096d4:	10000826 	beq	r2,zero,80096f8 <__sfp+0x88>
 80096d8:	297fffc4 	addi	r5,r5,-1
 80096dc:	1c3ffd04 	addi	r16,r3,-12
 80096e0:	18c01a04 	addi	r3,r3,104
 80096e4:	2c7ffa1e 	bne	r5,r17,80096d0 <__alt_data_end+0xfc0096d0>
 80096e8:	90800017 	ldw	r2,0(r18)
 80096ec:	10001d26 	beq	r2,zero,8009764 <__sfp+0xf4>
 80096f0:	1025883a 	mov	r18,r2
 80096f4:	003fee06 	br	80096b0 <__alt_data_end+0xfc0096b0>
 80096f8:	00bfffc4 	movi	r2,-1
 80096fc:	8080038d 	sth	r2,14(r16)
 8009700:	00800044 	movi	r2,1
 8009704:	8080030d 	sth	r2,12(r16)
 8009708:	80001915 	stw	zero,100(r16)
 800970c:	80000015 	stw	zero,0(r16)
 8009710:	80000215 	stw	zero,8(r16)
 8009714:	80000115 	stw	zero,4(r16)
 8009718:	80000415 	stw	zero,16(r16)
 800971c:	80000515 	stw	zero,20(r16)
 8009720:	80000615 	stw	zero,24(r16)
 8009724:	81001704 	addi	r4,r16,92
 8009728:	000b883a 	mov	r5,zero
 800972c:	01800204 	movi	r6,8
 8009730:	800afd40 	call	800afd4 <memset>
 8009734:	8005883a 	mov	r2,r16
 8009738:	80000c15 	stw	zero,48(r16)
 800973c:	80000d15 	stw	zero,52(r16)
 8009740:	80001115 	stw	zero,68(r16)
 8009744:	80001215 	stw	zero,72(r16)
 8009748:	dfc00417 	ldw	ra,16(sp)
 800974c:	dcc00317 	ldw	r19,12(sp)
 8009750:	dc800217 	ldw	r18,8(sp)
 8009754:	dc400117 	ldw	r17,4(sp)
 8009758:	dc000017 	ldw	r16,0(sp)
 800975c:	dec00504 	addi	sp,sp,20
 8009760:	f800283a 	ret
 8009764:	9809883a 	mov	r4,r19
 8009768:	01400104 	movi	r5,4
 800976c:	800960c0 	call	800960c <__sfmoreglue>
 8009770:	90800015 	stw	r2,0(r18)
 8009774:	103fde1e 	bne	r2,zero,80096f0 <__alt_data_end+0xfc0096f0>
 8009778:	00800304 	movi	r2,12
 800977c:	98800015 	stw	r2,0(r19)
 8009780:	0005883a 	mov	r2,zero
 8009784:	003ff006 	br	8009748 <__alt_data_end+0xfc009748>

08009788 <_cleanup>:
 8009788:	008200b4 	movhi	r2,2050
 800978c:	1084ec04 	addi	r2,r2,5040
 8009790:	11000017 	ldw	r4,0(r2)
 8009794:	01420074 	movhi	r5,2049
 8009798:	297d3704 	addi	r5,r5,-2852
 800979c:	800a0a81 	jmpi	800a0a8 <_fwalk>

080097a0 <__sinit>:
 80097a0:	20800e17 	ldw	r2,56(r4)
 80097a4:	10000126 	beq	r2,zero,80097ac <__sinit+0xc>
 80097a8:	f800283a 	ret
 80097ac:	800946c1 	jmpi	800946c <__sinit.part.1>

080097b0 <__sfp_lock_acquire>:
 80097b0:	f800283a 	ret

080097b4 <__sfp_lock_release>:
 80097b4:	f800283a 	ret

080097b8 <__sinit_lock_acquire>:
 80097b8:	f800283a 	ret

080097bc <__sinit_lock_release>:
 80097bc:	f800283a 	ret

080097c0 <__fp_lock_all>:
 80097c0:	008200b4 	movhi	r2,2050
 80097c4:	1084ed04 	addi	r2,r2,5044
 80097c8:	11000017 	ldw	r4,0(r2)
 80097cc:	01420074 	movhi	r5,2049
 80097d0:	29651404 	addi	r5,r5,-27568
 80097d4:	800a0a81 	jmpi	800a0a8 <_fwalk>

080097d8 <__fp_unlock_all>:
 80097d8:	008200b4 	movhi	r2,2050
 80097dc:	1084ed04 	addi	r2,r2,5044
 80097e0:	11000017 	ldw	r4,0(r2)
 80097e4:	01420074 	movhi	r5,2049
 80097e8:	29651604 	addi	r5,r5,-27560
 80097ec:	800a0a81 	jmpi	800a0a8 <_fwalk>

080097f0 <_malloc_trim_r>:
 80097f0:	defffb04 	addi	sp,sp,-20
 80097f4:	dcc00315 	stw	r19,12(sp)
 80097f8:	04c200b4 	movhi	r19,2050
 80097fc:	dc800215 	stw	r18,8(sp)
 8009800:	dc400115 	stw	r17,4(sp)
 8009804:	dc000015 	stw	r16,0(sp)
 8009808:	dfc00415 	stw	ra,16(sp)
 800980c:	2821883a 	mov	r16,r5
 8009810:	9cff5d04 	addi	r19,r19,-652
 8009814:	2025883a 	mov	r18,r4
 8009818:	80126540 	call	8012654 <__malloc_lock>
 800981c:	98800217 	ldw	r2,8(r19)
 8009820:	14400117 	ldw	r17,4(r2)
 8009824:	00bfff04 	movi	r2,-4
 8009828:	88a2703a 	and	r17,r17,r2
 800982c:	8c21c83a 	sub	r16,r17,r16
 8009830:	8403fbc4 	addi	r16,r16,4079
 8009834:	8020d33a 	srli	r16,r16,12
 8009838:	0083ffc4 	movi	r2,4095
 800983c:	843fffc4 	addi	r16,r16,-1
 8009840:	8020933a 	slli	r16,r16,12
 8009844:	1400060e 	bge	r2,r16,8009860 <_malloc_trim_r+0x70>
 8009848:	9009883a 	mov	r4,r18
 800984c:	000b883a 	mov	r5,zero
 8009850:	800c8000 	call	800c800 <_sbrk_r>
 8009854:	98c00217 	ldw	r3,8(r19)
 8009858:	1c47883a 	add	r3,r3,r17
 800985c:	10c00a26 	beq	r2,r3,8009888 <_malloc_trim_r+0x98>
 8009860:	9009883a 	mov	r4,r18
 8009864:	80126740 	call	8012674 <__malloc_unlock>
 8009868:	0005883a 	mov	r2,zero
 800986c:	dfc00417 	ldw	ra,16(sp)
 8009870:	dcc00317 	ldw	r19,12(sp)
 8009874:	dc800217 	ldw	r18,8(sp)
 8009878:	dc400117 	ldw	r17,4(sp)
 800987c:	dc000017 	ldw	r16,0(sp)
 8009880:	dec00504 	addi	sp,sp,20
 8009884:	f800283a 	ret
 8009888:	9009883a 	mov	r4,r18
 800988c:	040bc83a 	sub	r5,zero,r16
 8009890:	800c8000 	call	800c800 <_sbrk_r>
 8009894:	00ffffc4 	movi	r3,-1
 8009898:	10c00d26 	beq	r2,r3,80098d0 <_malloc_trim_r+0xe0>
 800989c:	00c200b4 	movhi	r3,2050
 80098a0:	18cbcf04 	addi	r3,r3,12092
 80098a4:	18800017 	ldw	r2,0(r3)
 80098a8:	99000217 	ldw	r4,8(r19)
 80098ac:	8c23c83a 	sub	r17,r17,r16
 80098b0:	8c400054 	ori	r17,r17,1
 80098b4:	1421c83a 	sub	r16,r2,r16
 80098b8:	24400115 	stw	r17,4(r4)
 80098bc:	9009883a 	mov	r4,r18
 80098c0:	1c000015 	stw	r16,0(r3)
 80098c4:	80126740 	call	8012674 <__malloc_unlock>
 80098c8:	00800044 	movi	r2,1
 80098cc:	003fe706 	br	800986c <__alt_data_end+0xfc00986c>
 80098d0:	9009883a 	mov	r4,r18
 80098d4:	000b883a 	mov	r5,zero
 80098d8:	800c8000 	call	800c800 <_sbrk_r>
 80098dc:	99000217 	ldw	r4,8(r19)
 80098e0:	014003c4 	movi	r5,15
 80098e4:	1107c83a 	sub	r3,r2,r4
 80098e8:	28ffdd0e 	bge	r5,r3,8009860 <__alt_data_end+0xfc009860>
 80098ec:	014200b4 	movhi	r5,2050
 80098f0:	2944ef04 	addi	r5,r5,5052
 80098f4:	29400017 	ldw	r5,0(r5)
 80098f8:	18c00054 	ori	r3,r3,1
 80098fc:	20c00115 	stw	r3,4(r4)
 8009900:	00c200b4 	movhi	r3,2050
 8009904:	1145c83a 	sub	r2,r2,r5
 8009908:	18cbcf04 	addi	r3,r3,12092
 800990c:	18800015 	stw	r2,0(r3)
 8009910:	003fd306 	br	8009860 <__alt_data_end+0xfc009860>

08009914 <_free_r>:
 8009914:	28004c26 	beq	r5,zero,8009a48 <_free_r+0x134>
 8009918:	defffd04 	addi	sp,sp,-12
 800991c:	dc400115 	stw	r17,4(sp)
 8009920:	dc000015 	stw	r16,0(sp)
 8009924:	2023883a 	mov	r17,r4
 8009928:	2821883a 	mov	r16,r5
 800992c:	dfc00215 	stw	ra,8(sp)
 8009930:	80126540 	call	8012654 <__malloc_lock>
 8009934:	813fff17 	ldw	r4,-4(r16)
 8009938:	00bfff84 	movi	r2,-2
 800993c:	024200b4 	movhi	r9,2050
 8009940:	81bffe04 	addi	r6,r16,-8
 8009944:	2084703a 	and	r2,r4,r2
 8009948:	4a7f5d04 	addi	r9,r9,-652
 800994c:	308b883a 	add	r5,r6,r2
 8009950:	2a000117 	ldw	r8,4(r5)
 8009954:	49c00217 	ldw	r7,8(r9)
 8009958:	00ffff04 	movi	r3,-4
 800995c:	40c6703a 	and	r3,r8,r3
 8009960:	39405326 	beq	r7,r5,8009ab0 <_free_r+0x19c>
 8009964:	28c00115 	stw	r3,4(r5)
 8009968:	2100004c 	andi	r4,r4,1
 800996c:	2000091e 	bne	r4,zero,8009994 <_free_r+0x80>
 8009970:	81fffe17 	ldw	r7,-8(r16)
 8009974:	4a000204 	addi	r8,r9,8
 8009978:	31cdc83a 	sub	r6,r6,r7
 800997c:	31000217 	ldw	r4,8(r6)
 8009980:	11c5883a 	add	r2,r2,r7
 8009984:	22006126 	beq	r4,r8,8009b0c <_free_r+0x1f8>
 8009988:	31c00317 	ldw	r7,12(r6)
 800998c:	21c00315 	stw	r7,12(r4)
 8009990:	39000215 	stw	r4,8(r7)
 8009994:	28c9883a 	add	r4,r5,r3
 8009998:	21c00117 	ldw	r7,4(r4)
 800999c:	39c0004c 	andi	r7,r7,1
 80099a0:	38000d1e 	bne	r7,zero,80099d8 <_free_r+0xc4>
 80099a4:	29000217 	ldw	r4,8(r5)
 80099a8:	10c5883a 	add	r2,r2,r3
 80099ac:	00c200b4 	movhi	r3,2050
 80099b0:	18ff5f04 	addi	r3,r3,-644
 80099b4:	20c07526 	beq	r4,r3,8009b8c <_free_r+0x278>
 80099b8:	29c00317 	ldw	r7,12(r5)
 80099bc:	11400054 	ori	r5,r2,1
 80099c0:	3087883a 	add	r3,r6,r2
 80099c4:	21c00315 	stw	r7,12(r4)
 80099c8:	39000215 	stw	r4,8(r7)
 80099cc:	31400115 	stw	r5,4(r6)
 80099d0:	18800015 	stw	r2,0(r3)
 80099d4:	00000406 	br	80099e8 <_free_r+0xd4>
 80099d8:	10c00054 	ori	r3,r2,1
 80099dc:	30c00115 	stw	r3,4(r6)
 80099e0:	3087883a 	add	r3,r6,r2
 80099e4:	18800015 	stw	r2,0(r3)
 80099e8:	00c07fc4 	movi	r3,511
 80099ec:	18801736 	bltu	r3,r2,8009a4c <_free_r+0x138>
 80099f0:	1004d0fa 	srli	r2,r2,3
 80099f4:	01400044 	movi	r5,1
 80099f8:	49000117 	ldw	r4,4(r9)
 80099fc:	1087883a 	add	r3,r2,r2
 8009a00:	18c7883a 	add	r3,r3,r3
 8009a04:	1005d0ba 	srai	r2,r2,2
 8009a08:	18c7883a 	add	r3,r3,r3
 8009a0c:	1a47883a 	add	r3,r3,r9
 8009a10:	19c00217 	ldw	r7,8(r3)
 8009a14:	2884983a 	sll	r2,r5,r2
 8009a18:	30c00315 	stw	r3,12(r6)
 8009a1c:	31c00215 	stw	r7,8(r6)
 8009a20:	1104b03a 	or	r2,r2,r4
 8009a24:	19800215 	stw	r6,8(r3)
 8009a28:	48800115 	stw	r2,4(r9)
 8009a2c:	39800315 	stw	r6,12(r7)
 8009a30:	8809883a 	mov	r4,r17
 8009a34:	dfc00217 	ldw	ra,8(sp)
 8009a38:	dc400117 	ldw	r17,4(sp)
 8009a3c:	dc000017 	ldw	r16,0(sp)
 8009a40:	dec00304 	addi	sp,sp,12
 8009a44:	80126741 	jmpi	8012674 <__malloc_unlock>
 8009a48:	f800283a 	ret
 8009a4c:	1006d27a 	srli	r3,r2,9
 8009a50:	01000104 	movi	r4,4
 8009a54:	20c04036 	bltu	r4,r3,8009b58 <_free_r+0x244>
 8009a58:	1006d1ba 	srli	r3,r2,6
 8009a5c:	19400e04 	addi	r5,r3,56
 8009a60:	2947883a 	add	r3,r5,r5
 8009a64:	18c7883a 	add	r3,r3,r3
 8009a68:	18c7883a 	add	r3,r3,r3
 8009a6c:	1a49883a 	add	r4,r3,r9
 8009a70:	20c00217 	ldw	r3,8(r4)
 8009a74:	01c200b4 	movhi	r7,2050
 8009a78:	39ff5d04 	addi	r7,r7,-652
 8009a7c:	19003b26 	beq	r3,r4,8009b6c <_free_r+0x258>
 8009a80:	01ffff04 	movi	r7,-4
 8009a84:	19400117 	ldw	r5,4(r3)
 8009a88:	29ca703a 	and	r5,r5,r7
 8009a8c:	1140022e 	bgeu	r2,r5,8009a98 <_free_r+0x184>
 8009a90:	18c00217 	ldw	r3,8(r3)
 8009a94:	20fffb1e 	bne	r4,r3,8009a84 <__alt_data_end+0xfc009a84>
 8009a98:	18800317 	ldw	r2,12(r3)
 8009a9c:	30800315 	stw	r2,12(r6)
 8009aa0:	30c00215 	stw	r3,8(r6)
 8009aa4:	11800215 	stw	r6,8(r2)
 8009aa8:	19800315 	stw	r6,12(r3)
 8009aac:	003fe006 	br	8009a30 <__alt_data_end+0xfc009a30>
 8009ab0:	2100004c 	andi	r4,r4,1
 8009ab4:	1885883a 	add	r2,r3,r2
 8009ab8:	2000071e 	bne	r4,zero,8009ad8 <_free_r+0x1c4>
 8009abc:	817ffe17 	ldw	r5,-8(r16)
 8009ac0:	314dc83a 	sub	r6,r6,r5
 8009ac4:	30c00317 	ldw	r3,12(r6)
 8009ac8:	31000217 	ldw	r4,8(r6)
 8009acc:	1145883a 	add	r2,r2,r5
 8009ad0:	20c00315 	stw	r3,12(r4)
 8009ad4:	19000215 	stw	r4,8(r3)
 8009ad8:	10c00054 	ori	r3,r2,1
 8009adc:	30c00115 	stw	r3,4(r6)
 8009ae0:	00c200b4 	movhi	r3,2050
 8009ae4:	18c4f004 	addi	r3,r3,5056
 8009ae8:	18c00017 	ldw	r3,0(r3)
 8009aec:	49800215 	stw	r6,8(r9)
 8009af0:	10ffcf36 	bltu	r2,r3,8009a30 <__alt_data_end+0xfc009a30>
 8009af4:	008200b4 	movhi	r2,2050
 8009af8:	108bc704 	addi	r2,r2,12060
 8009afc:	11400017 	ldw	r5,0(r2)
 8009b00:	8809883a 	mov	r4,r17
 8009b04:	80097f00 	call	80097f0 <_malloc_trim_r>
 8009b08:	003fc906 	br	8009a30 <__alt_data_end+0xfc009a30>
 8009b0c:	28c9883a 	add	r4,r5,r3
 8009b10:	21000117 	ldw	r4,4(r4)
 8009b14:	2100004c 	andi	r4,r4,1
 8009b18:	20000a1e 	bne	r4,zero,8009b44 <_free_r+0x230>
 8009b1c:	29000317 	ldw	r4,12(r5)
 8009b20:	29400217 	ldw	r5,8(r5)
 8009b24:	10c5883a 	add	r2,r2,r3
 8009b28:	10c00054 	ori	r3,r2,1
 8009b2c:	29000315 	stw	r4,12(r5)
 8009b30:	21400215 	stw	r5,8(r4)
 8009b34:	30c00115 	stw	r3,4(r6)
 8009b38:	308d883a 	add	r6,r6,r2
 8009b3c:	30800015 	stw	r2,0(r6)
 8009b40:	003fbb06 	br	8009a30 <__alt_data_end+0xfc009a30>
 8009b44:	10c00054 	ori	r3,r2,1
 8009b48:	30c00115 	stw	r3,4(r6)
 8009b4c:	308d883a 	add	r6,r6,r2
 8009b50:	30800015 	stw	r2,0(r6)
 8009b54:	003fb606 	br	8009a30 <__alt_data_end+0xfc009a30>
 8009b58:	01000504 	movi	r4,20
 8009b5c:	20c01436 	bltu	r4,r3,8009bb0 <_free_r+0x29c>
 8009b60:	194016c4 	addi	r5,r3,91
 8009b64:	2947883a 	add	r3,r5,r5
 8009b68:	003fbe06 	br	8009a64 <__alt_data_end+0xfc009a64>
 8009b6c:	280bd0ba 	srai	r5,r5,2
 8009b70:	00800044 	movi	r2,1
 8009b74:	39000117 	ldw	r4,4(r7)
 8009b78:	114a983a 	sll	r5,r2,r5
 8009b7c:	1805883a 	mov	r2,r3
 8009b80:	2908b03a 	or	r4,r5,r4
 8009b84:	39000115 	stw	r4,4(r7)
 8009b88:	003fc406 	br	8009a9c <__alt_data_end+0xfc009a9c>
 8009b8c:	49800515 	stw	r6,20(r9)
 8009b90:	49800415 	stw	r6,16(r9)
 8009b94:	10c00054 	ori	r3,r2,1
 8009b98:	31000315 	stw	r4,12(r6)
 8009b9c:	31000215 	stw	r4,8(r6)
 8009ba0:	30c00115 	stw	r3,4(r6)
 8009ba4:	308d883a 	add	r6,r6,r2
 8009ba8:	30800015 	stw	r2,0(r6)
 8009bac:	003fa006 	br	8009a30 <__alt_data_end+0xfc009a30>
 8009bb0:	01001504 	movi	r4,84
 8009bb4:	20c00436 	bltu	r4,r3,8009bc8 <_free_r+0x2b4>
 8009bb8:	1006d33a 	srli	r3,r2,12
 8009bbc:	19401b84 	addi	r5,r3,110
 8009bc0:	2947883a 	add	r3,r5,r5
 8009bc4:	003fa706 	br	8009a64 <__alt_data_end+0xfc009a64>
 8009bc8:	01005504 	movi	r4,340
 8009bcc:	20c00436 	bltu	r4,r3,8009be0 <_free_r+0x2cc>
 8009bd0:	1006d3fa 	srli	r3,r2,15
 8009bd4:	19401dc4 	addi	r5,r3,119
 8009bd8:	2947883a 	add	r3,r5,r5
 8009bdc:	003fa106 	br	8009a64 <__alt_data_end+0xfc009a64>
 8009be0:	01015504 	movi	r4,1364
 8009be4:	20c00436 	bltu	r4,r3,8009bf8 <_free_r+0x2e4>
 8009be8:	1006d4ba 	srli	r3,r2,18
 8009bec:	19401f04 	addi	r5,r3,124
 8009bf0:	2947883a 	add	r3,r5,r5
 8009bf4:	003f9b06 	br	8009a64 <__alt_data_end+0xfc009a64>
 8009bf8:	00c03f04 	movi	r3,252
 8009bfc:	01401f84 	movi	r5,126
 8009c00:	003f9806 	br	8009a64 <__alt_data_end+0xfc009a64>

08009c04 <__sfvwrite_r>:
 8009c04:	30800217 	ldw	r2,8(r6)
 8009c08:	10004526 	beq	r2,zero,8009d20 <__sfvwrite_r+0x11c>
 8009c0c:	28c0030b 	ldhu	r3,12(r5)
 8009c10:	defff404 	addi	sp,sp,-48
 8009c14:	dd400715 	stw	r21,28(sp)
 8009c18:	dcc00515 	stw	r19,20(sp)
 8009c1c:	dc000215 	stw	r16,8(sp)
 8009c20:	dfc00b15 	stw	ra,44(sp)
 8009c24:	df000a15 	stw	fp,40(sp)
 8009c28:	ddc00915 	stw	r23,36(sp)
 8009c2c:	dd800815 	stw	r22,32(sp)
 8009c30:	dd000615 	stw	r20,24(sp)
 8009c34:	dc800415 	stw	r18,16(sp)
 8009c38:	dc400315 	stw	r17,12(sp)
 8009c3c:	1880020c 	andi	r2,r3,8
 8009c40:	2821883a 	mov	r16,r5
 8009c44:	202b883a 	mov	r21,r4
 8009c48:	3027883a 	mov	r19,r6
 8009c4c:	10002526 	beq	r2,zero,8009ce4 <__sfvwrite_r+0xe0>
 8009c50:	28800417 	ldw	r2,16(r5)
 8009c54:	10002326 	beq	r2,zero,8009ce4 <__sfvwrite_r+0xe0>
 8009c58:	1880008c 	andi	r2,r3,2
 8009c5c:	9c400017 	ldw	r17,0(r19)
 8009c60:	10003126 	beq	r2,zero,8009d28 <__sfvwrite_r+0x124>
 8009c64:	0029883a 	mov	r20,zero
 8009c68:	0025883a 	mov	r18,zero
 8009c6c:	05810004 	movi	r22,1024
 8009c70:	a00d883a 	mov	r6,r20
 8009c74:	a809883a 	mov	r4,r21
 8009c78:	90002526 	beq	r18,zero,8009d10 <__sfvwrite_r+0x10c>
 8009c7c:	900f883a 	mov	r7,r18
 8009c80:	81400717 	ldw	r5,28(r16)
 8009c84:	b480012e 	bgeu	r22,r18,8009c8c <__sfvwrite_r+0x88>
 8009c88:	01c10004 	movi	r7,1024
 8009c8c:	80800917 	ldw	r2,36(r16)
 8009c90:	103ee83a 	callr	r2
 8009c94:	0080510e 	bge	zero,r2,8009ddc <__sfvwrite_r+0x1d8>
 8009c98:	98c00217 	ldw	r3,8(r19)
 8009c9c:	a0a9883a 	add	r20,r20,r2
 8009ca0:	90a5c83a 	sub	r18,r18,r2
 8009ca4:	1885c83a 	sub	r2,r3,r2
 8009ca8:	98800215 	stw	r2,8(r19)
 8009cac:	103ff01e 	bne	r2,zero,8009c70 <__alt_data_end+0xfc009c70>
 8009cb0:	0005883a 	mov	r2,zero
 8009cb4:	dfc00b17 	ldw	ra,44(sp)
 8009cb8:	df000a17 	ldw	fp,40(sp)
 8009cbc:	ddc00917 	ldw	r23,36(sp)
 8009cc0:	dd800817 	ldw	r22,32(sp)
 8009cc4:	dd400717 	ldw	r21,28(sp)
 8009cc8:	dd000617 	ldw	r20,24(sp)
 8009ccc:	dcc00517 	ldw	r19,20(sp)
 8009cd0:	dc800417 	ldw	r18,16(sp)
 8009cd4:	dc400317 	ldw	r17,12(sp)
 8009cd8:	dc000217 	ldw	r16,8(sp)
 8009cdc:	dec00c04 	addi	sp,sp,48
 8009ce0:	f800283a 	ret
 8009ce4:	a809883a 	mov	r4,r21
 8009ce8:	800b883a 	mov	r5,r16
 8009cec:	80077a00 	call	80077a0 <__swsetup_r>
 8009cf0:	80c0030b 	ldhu	r3,12(r16)
 8009cf4:	103fd826 	beq	r2,zero,8009c58 <__alt_data_end+0xfc009c58>
 8009cf8:	18c01014 	ori	r3,r3,64
 8009cfc:	80c0030d 	sth	r3,12(r16)
 8009d00:	00c00244 	movi	r3,9
 8009d04:	00bfffc4 	movi	r2,-1
 8009d08:	a8c00015 	stw	r3,0(r21)
 8009d0c:	003fe906 	br	8009cb4 <__alt_data_end+0xfc009cb4>
 8009d10:	8d000017 	ldw	r20,0(r17)
 8009d14:	8c800117 	ldw	r18,4(r17)
 8009d18:	8c400204 	addi	r17,r17,8
 8009d1c:	003fd406 	br	8009c70 <__alt_data_end+0xfc009c70>
 8009d20:	0005883a 	mov	r2,zero
 8009d24:	f800283a 	ret
 8009d28:	1880004c 	andi	r2,r3,1
 8009d2c:	1000301e 	bne	r2,zero,8009df0 <__sfvwrite_r+0x1ec>
 8009d30:	002f883a 	mov	r23,zero
 8009d34:	0025883a 	mov	r18,zero
 8009d38:	90001c26 	beq	r18,zero,8009dac <__sfvwrite_r+0x1a8>
 8009d3c:	1880800c 	andi	r2,r3,512
 8009d40:	85000217 	ldw	r20,8(r16)
 8009d44:	10006c26 	beq	r2,zero,8009ef8 <__sfvwrite_r+0x2f4>
 8009d48:	a02d883a 	mov	r22,r20
 8009d4c:	95008536 	bltu	r18,r20,8009f64 <__sfvwrite_r+0x360>
 8009d50:	1881200c 	andi	r2,r3,1152
 8009d54:	10009d1e 	bne	r2,zero,8009fcc <__sfvwrite_r+0x3c8>
 8009d58:	81000017 	ldw	r4,0(r16)
 8009d5c:	a039883a 	mov	fp,r20
 8009d60:	9029883a 	mov	r20,r18
 8009d64:	b80b883a 	mov	r5,r23
 8009d68:	b00d883a 	mov	r6,r22
 8009d6c:	800ae780 	call	800ae78 <memmove>
 8009d70:	80c00217 	ldw	r3,8(r16)
 8009d74:	81000017 	ldw	r4,0(r16)
 8009d78:	9005883a 	mov	r2,r18
 8009d7c:	1f39c83a 	sub	fp,r3,fp
 8009d80:	258f883a 	add	r7,r4,r22
 8009d84:	87000215 	stw	fp,8(r16)
 8009d88:	81c00015 	stw	r7,0(r16)
 8009d8c:	98c00217 	ldw	r3,8(r19)
 8009d90:	b8af883a 	add	r23,r23,r2
 8009d94:	90a5c83a 	sub	r18,r18,r2
 8009d98:	1d05c83a 	sub	r2,r3,r20
 8009d9c:	98800215 	stw	r2,8(r19)
 8009da0:	103fc326 	beq	r2,zero,8009cb0 <__alt_data_end+0xfc009cb0>
 8009da4:	80c0030b 	ldhu	r3,12(r16)
 8009da8:	903fe41e 	bne	r18,zero,8009d3c <__alt_data_end+0xfc009d3c>
 8009dac:	8dc00017 	ldw	r23,0(r17)
 8009db0:	8c800117 	ldw	r18,4(r17)
 8009db4:	8c400204 	addi	r17,r17,8
 8009db8:	003fdf06 	br	8009d38 <__alt_data_end+0xfc009d38>
 8009dbc:	800c1ec0 	call	800c1ec <_realloc_r>
 8009dc0:	102d883a 	mov	r22,r2
 8009dc4:	1000a01e 	bne	r2,zero,800a048 <__sfvwrite_r+0x444>
 8009dc8:	81400417 	ldw	r5,16(r16)
 8009dcc:	a809883a 	mov	r4,r21
 8009dd0:	80099140 	call	8009914 <_free_r>
 8009dd4:	00800304 	movi	r2,12
 8009dd8:	a8800015 	stw	r2,0(r21)
 8009ddc:	80c0030b 	ldhu	r3,12(r16)
 8009de0:	00bfffc4 	movi	r2,-1
 8009de4:	18c01014 	ori	r3,r3,64
 8009de8:	80c0030d 	sth	r3,12(r16)
 8009dec:	003fb106 	br	8009cb4 <__alt_data_end+0xfc009cb4>
 8009df0:	0029883a 	mov	r20,zero
 8009df4:	0011883a 	mov	r8,zero
 8009df8:	0039883a 	mov	fp,zero
 8009dfc:	0025883a 	mov	r18,zero
 8009e00:	90001f26 	beq	r18,zero,8009e80 <__sfvwrite_r+0x27c>
 8009e04:	40006826 	beq	r8,zero,8009fa8 <__sfvwrite_r+0x3a4>
 8009e08:	a02f883a 	mov	r23,r20
 8009e0c:	9500012e 	bgeu	r18,r20,8009e14 <__sfvwrite_r+0x210>
 8009e10:	902f883a 	mov	r23,r18
 8009e14:	81000017 	ldw	r4,0(r16)
 8009e18:	80800417 	ldw	r2,16(r16)
 8009e1c:	b82d883a 	mov	r22,r23
 8009e20:	81800217 	ldw	r6,8(r16)
 8009e24:	81c00517 	ldw	r7,20(r16)
 8009e28:	1100022e 	bgeu	r2,r4,8009e34 <__sfvwrite_r+0x230>
 8009e2c:	31c7883a 	add	r3,r6,r7
 8009e30:	1dc01816 	blt	r3,r23,8009e94 <__sfvwrite_r+0x290>
 8009e34:	b9c03f16 	blt	r23,r7,8009f34 <__sfvwrite_r+0x330>
 8009e38:	80800917 	ldw	r2,36(r16)
 8009e3c:	81400717 	ldw	r5,28(r16)
 8009e40:	a809883a 	mov	r4,r21
 8009e44:	da000115 	stw	r8,4(sp)
 8009e48:	e00d883a 	mov	r6,fp
 8009e4c:	103ee83a 	callr	r2
 8009e50:	102d883a 	mov	r22,r2
 8009e54:	da000117 	ldw	r8,4(sp)
 8009e58:	00bfe00e 	bge	zero,r2,8009ddc <__alt_data_end+0xfc009ddc>
 8009e5c:	a5a9c83a 	sub	r20,r20,r22
 8009e60:	a0001f26 	beq	r20,zero,8009ee0 <__sfvwrite_r+0x2dc>
 8009e64:	98800217 	ldw	r2,8(r19)
 8009e68:	e5b9883a 	add	fp,fp,r22
 8009e6c:	95a5c83a 	sub	r18,r18,r22
 8009e70:	15adc83a 	sub	r22,r2,r22
 8009e74:	9d800215 	stw	r22,8(r19)
 8009e78:	b03f8d26 	beq	r22,zero,8009cb0 <__alt_data_end+0xfc009cb0>
 8009e7c:	903fe11e 	bne	r18,zero,8009e04 <__alt_data_end+0xfc009e04>
 8009e80:	8f000017 	ldw	fp,0(r17)
 8009e84:	8c800117 	ldw	r18,4(r17)
 8009e88:	0011883a 	mov	r8,zero
 8009e8c:	8c400204 	addi	r17,r17,8
 8009e90:	003fdb06 	br	8009e00 <__alt_data_end+0xfc009e00>
 8009e94:	180d883a 	mov	r6,r3
 8009e98:	e00b883a 	mov	r5,fp
 8009e9c:	da000115 	stw	r8,4(sp)
 8009ea0:	d8c00015 	stw	r3,0(sp)
 8009ea4:	800ae780 	call	800ae78 <memmove>
 8009ea8:	d8c00017 	ldw	r3,0(sp)
 8009eac:	80800017 	ldw	r2,0(r16)
 8009eb0:	a809883a 	mov	r4,r21
 8009eb4:	800b883a 	mov	r5,r16
 8009eb8:	10c5883a 	add	r2,r2,r3
 8009ebc:	80800015 	stw	r2,0(r16)
 8009ec0:	d8c00015 	stw	r3,0(sp)
 8009ec4:	80091f80 	call	80091f8 <_fflush_r>
 8009ec8:	d8c00017 	ldw	r3,0(sp)
 8009ecc:	da000117 	ldw	r8,4(sp)
 8009ed0:	103fc21e 	bne	r2,zero,8009ddc <__alt_data_end+0xfc009ddc>
 8009ed4:	182d883a 	mov	r22,r3
 8009ed8:	a5a9c83a 	sub	r20,r20,r22
 8009edc:	a03fe11e 	bne	r20,zero,8009e64 <__alt_data_end+0xfc009e64>
 8009ee0:	a809883a 	mov	r4,r21
 8009ee4:	800b883a 	mov	r5,r16
 8009ee8:	80091f80 	call	80091f8 <_fflush_r>
 8009eec:	103fbb1e 	bne	r2,zero,8009ddc <__alt_data_end+0xfc009ddc>
 8009ef0:	0011883a 	mov	r8,zero
 8009ef4:	003fdb06 	br	8009e64 <__alt_data_end+0xfc009e64>
 8009ef8:	81000017 	ldw	r4,0(r16)
 8009efc:	80800417 	ldw	r2,16(r16)
 8009f00:	1100012e 	bgeu	r2,r4,8009f08 <__sfvwrite_r+0x304>
 8009f04:	a4805a36 	bltu	r20,r18,800a070 <__sfvwrite_r+0x46c>
 8009f08:	81c00517 	ldw	r7,20(r16)
 8009f0c:	91c01a36 	bltu	r18,r7,8009f78 <__sfvwrite_r+0x374>
 8009f10:	80800917 	ldw	r2,36(r16)
 8009f14:	81400717 	ldw	r5,28(r16)
 8009f18:	a809883a 	mov	r4,r21
 8009f1c:	b80d883a 	mov	r6,r23
 8009f20:	103ee83a 	callr	r2
 8009f24:	1029883a 	mov	r20,r2
 8009f28:	00bfac0e 	bge	zero,r2,8009ddc <__alt_data_end+0xfc009ddc>
 8009f2c:	a005883a 	mov	r2,r20
 8009f30:	003f9606 	br	8009d8c <__alt_data_end+0xfc009d8c>
 8009f34:	b80d883a 	mov	r6,r23
 8009f38:	e00b883a 	mov	r5,fp
 8009f3c:	da000115 	stw	r8,4(sp)
 8009f40:	800ae780 	call	800ae78 <memmove>
 8009f44:	80800217 	ldw	r2,8(r16)
 8009f48:	80c00017 	ldw	r3,0(r16)
 8009f4c:	da000117 	ldw	r8,4(sp)
 8009f50:	15c5c83a 	sub	r2,r2,r23
 8009f54:	1def883a 	add	r23,r3,r23
 8009f58:	80800215 	stw	r2,8(r16)
 8009f5c:	85c00015 	stw	r23,0(r16)
 8009f60:	003fbe06 	br	8009e5c <__alt_data_end+0xfc009e5c>
 8009f64:	81000017 	ldw	r4,0(r16)
 8009f68:	9039883a 	mov	fp,r18
 8009f6c:	9029883a 	mov	r20,r18
 8009f70:	902d883a 	mov	r22,r18
 8009f74:	003f7b06 	br	8009d64 <__alt_data_end+0xfc009d64>
 8009f78:	b80b883a 	mov	r5,r23
 8009f7c:	900d883a 	mov	r6,r18
 8009f80:	800ae780 	call	800ae78 <memmove>
 8009f84:	80c00217 	ldw	r3,8(r16)
 8009f88:	80800017 	ldw	r2,0(r16)
 8009f8c:	9029883a 	mov	r20,r18
 8009f90:	1c87c83a 	sub	r3,r3,r18
 8009f94:	1485883a 	add	r2,r2,r18
 8009f98:	80800015 	stw	r2,0(r16)
 8009f9c:	80c00215 	stw	r3,8(r16)
 8009fa0:	9005883a 	mov	r2,r18
 8009fa4:	003f7906 	br	8009d8c <__alt_data_end+0xfc009d8c>
 8009fa8:	e009883a 	mov	r4,fp
 8009fac:	01400284 	movi	r5,10
 8009fb0:	900d883a 	mov	r6,r18
 8009fb4:	800ac580 	call	800ac58 <memchr>
 8009fb8:	10003826 	beq	r2,zero,800a09c <__sfvwrite_r+0x498>
 8009fbc:	10800044 	addi	r2,r2,1
 8009fc0:	1729c83a 	sub	r20,r2,fp
 8009fc4:	02000044 	movi	r8,1
 8009fc8:	003f8f06 	br	8009e08 <__alt_data_end+0xfc009e08>
 8009fcc:	80800517 	ldw	r2,20(r16)
 8009fd0:	81400417 	ldw	r5,16(r16)
 8009fd4:	87000017 	ldw	fp,0(r16)
 8009fd8:	10a9883a 	add	r20,r2,r2
 8009fdc:	a085883a 	add	r2,r20,r2
 8009fe0:	1028d7fa 	srli	r20,r2,31
 8009fe4:	e179c83a 	sub	fp,fp,r5
 8009fe8:	e1000044 	addi	r4,fp,1
 8009fec:	a085883a 	add	r2,r20,r2
 8009ff0:	1029d07a 	srai	r20,r2,1
 8009ff4:	2485883a 	add	r2,r4,r18
 8009ff8:	a00d883a 	mov	r6,r20
 8009ffc:	a080022e 	bgeu	r20,r2,800a008 <__sfvwrite_r+0x404>
 800a000:	1029883a 	mov	r20,r2
 800a004:	100d883a 	mov	r6,r2
 800a008:	18c1000c 	andi	r3,r3,1024
 800a00c:	a809883a 	mov	r4,r21
 800a010:	183f6a26 	beq	r3,zero,8009dbc <__alt_data_end+0xfc009dbc>
 800a014:	300b883a 	mov	r5,r6
 800a018:	800a4b00 	call	800a4b0 <_malloc_r>
 800a01c:	102d883a 	mov	r22,r2
 800a020:	103f6c26 	beq	r2,zero,8009dd4 <__alt_data_end+0xfc009dd4>
 800a024:	81400417 	ldw	r5,16(r16)
 800a028:	1009883a 	mov	r4,r2
 800a02c:	e00d883a 	mov	r6,fp
 800a030:	800ad400 	call	800ad40 <memcpy>
 800a034:	8080030b 	ldhu	r2,12(r16)
 800a038:	00fedfc4 	movi	r3,-1153
 800a03c:	10c4703a 	and	r2,r2,r3
 800a040:	10802014 	ori	r2,r2,128
 800a044:	8080030d 	sth	r2,12(r16)
 800a048:	b709883a 	add	r4,r22,fp
 800a04c:	a707c83a 	sub	r3,r20,fp
 800a050:	85800415 	stw	r22,16(r16)
 800a054:	85000515 	stw	r20,20(r16)
 800a058:	81000015 	stw	r4,0(r16)
 800a05c:	9039883a 	mov	fp,r18
 800a060:	80c00215 	stw	r3,8(r16)
 800a064:	9029883a 	mov	r20,r18
 800a068:	902d883a 	mov	r22,r18
 800a06c:	003f3d06 	br	8009d64 <__alt_data_end+0xfc009d64>
 800a070:	b80b883a 	mov	r5,r23
 800a074:	a00d883a 	mov	r6,r20
 800a078:	800ae780 	call	800ae78 <memmove>
 800a07c:	80800017 	ldw	r2,0(r16)
 800a080:	a809883a 	mov	r4,r21
 800a084:	800b883a 	mov	r5,r16
 800a088:	1505883a 	add	r2,r2,r20
 800a08c:	80800015 	stw	r2,0(r16)
 800a090:	80091f80 	call	80091f8 <_fflush_r>
 800a094:	103fa526 	beq	r2,zero,8009f2c <__alt_data_end+0xfc009f2c>
 800a098:	003f5006 	br	8009ddc <__alt_data_end+0xfc009ddc>
 800a09c:	95000044 	addi	r20,r18,1
 800a0a0:	02000044 	movi	r8,1
 800a0a4:	003f5806 	br	8009e08 <__alt_data_end+0xfc009e08>

0800a0a8 <_fwalk>:
 800a0a8:	defff804 	addi	sp,sp,-32
 800a0ac:	dd400515 	stw	r21,20(sp)
 800a0b0:	2540b804 	addi	r21,r4,736
 800a0b4:	dd800615 	stw	r22,24(sp)
 800a0b8:	dd000415 	stw	r20,16(sp)
 800a0bc:	dfc00715 	stw	ra,28(sp)
 800a0c0:	dcc00315 	stw	r19,12(sp)
 800a0c4:	dc800215 	stw	r18,8(sp)
 800a0c8:	dc400115 	stw	r17,4(sp)
 800a0cc:	dc000015 	stw	r16,0(sp)
 800a0d0:	2829883a 	mov	r20,r5
 800a0d4:	002d883a 	mov	r22,zero
 800a0d8:	80097b00 	call	80097b0 <__sfp_lock_acquire>
 800a0dc:	a8001426 	beq	r21,zero,800a130 <_fwalk+0x88>
 800a0e0:	04ffffc4 	movi	r19,-1
 800a0e4:	ac400117 	ldw	r17,4(r21)
 800a0e8:	ac800217 	ldw	r18,8(r21)
 800a0ec:	8c7fffc4 	addi	r17,r17,-1
 800a0f0:	88000d16 	blt	r17,zero,800a128 <_fwalk+0x80>
 800a0f4:	94000304 	addi	r16,r18,12
 800a0f8:	94800384 	addi	r18,r18,14
 800a0fc:	80c0000f 	ldh	r3,0(r16)
 800a100:	8c7fffc4 	addi	r17,r17,-1
 800a104:	813ffd04 	addi	r4,r16,-12
 800a108:	18000426 	beq	r3,zero,800a11c <_fwalk+0x74>
 800a10c:	90c0000f 	ldh	r3,0(r18)
 800a110:	1cc00226 	beq	r3,r19,800a11c <_fwalk+0x74>
 800a114:	a03ee83a 	callr	r20
 800a118:	b0acb03a 	or	r22,r22,r2
 800a11c:	84001a04 	addi	r16,r16,104
 800a120:	94801a04 	addi	r18,r18,104
 800a124:	8cfff51e 	bne	r17,r19,800a0fc <__alt_data_end+0xfc00a0fc>
 800a128:	ad400017 	ldw	r21,0(r21)
 800a12c:	a83fed1e 	bne	r21,zero,800a0e4 <__alt_data_end+0xfc00a0e4>
 800a130:	80097b40 	call	80097b4 <__sfp_lock_release>
 800a134:	b005883a 	mov	r2,r22
 800a138:	dfc00717 	ldw	ra,28(sp)
 800a13c:	dd800617 	ldw	r22,24(sp)
 800a140:	dd400517 	ldw	r21,20(sp)
 800a144:	dd000417 	ldw	r20,16(sp)
 800a148:	dcc00317 	ldw	r19,12(sp)
 800a14c:	dc800217 	ldw	r18,8(sp)
 800a150:	dc400117 	ldw	r17,4(sp)
 800a154:	dc000017 	ldw	r16,0(sp)
 800a158:	dec00804 	addi	sp,sp,32
 800a15c:	f800283a 	ret

0800a160 <_fwalk_reent>:
 800a160:	defff804 	addi	sp,sp,-32
 800a164:	dd400515 	stw	r21,20(sp)
 800a168:	2540b804 	addi	r21,r4,736
 800a16c:	dd800615 	stw	r22,24(sp)
 800a170:	dd000415 	stw	r20,16(sp)
 800a174:	dcc00315 	stw	r19,12(sp)
 800a178:	dfc00715 	stw	ra,28(sp)
 800a17c:	dc800215 	stw	r18,8(sp)
 800a180:	dc400115 	stw	r17,4(sp)
 800a184:	dc000015 	stw	r16,0(sp)
 800a188:	2027883a 	mov	r19,r4
 800a18c:	2829883a 	mov	r20,r5
 800a190:	002d883a 	mov	r22,zero
 800a194:	80097b00 	call	80097b0 <__sfp_lock_acquire>
 800a198:	a8001326 	beq	r21,zero,800a1e8 <_fwalk_reent+0x88>
 800a19c:	04bfffc4 	movi	r18,-1
 800a1a0:	ac400117 	ldw	r17,4(r21)
 800a1a4:	ac000217 	ldw	r16,8(r21)
 800a1a8:	8c7fffc4 	addi	r17,r17,-1
 800a1ac:	88000c16 	blt	r17,zero,800a1e0 <_fwalk_reent+0x80>
 800a1b0:	84000304 	addi	r16,r16,12
 800a1b4:	80c0000f 	ldh	r3,0(r16)
 800a1b8:	8c7fffc4 	addi	r17,r17,-1
 800a1bc:	817ffd04 	addi	r5,r16,-12
 800a1c0:	18000526 	beq	r3,zero,800a1d8 <_fwalk_reent+0x78>
 800a1c4:	80c0008f 	ldh	r3,2(r16)
 800a1c8:	9809883a 	mov	r4,r19
 800a1cc:	1c800226 	beq	r3,r18,800a1d8 <_fwalk_reent+0x78>
 800a1d0:	a03ee83a 	callr	r20
 800a1d4:	b0acb03a 	or	r22,r22,r2
 800a1d8:	84001a04 	addi	r16,r16,104
 800a1dc:	8cbff51e 	bne	r17,r18,800a1b4 <__alt_data_end+0xfc00a1b4>
 800a1e0:	ad400017 	ldw	r21,0(r21)
 800a1e4:	a83fee1e 	bne	r21,zero,800a1a0 <__alt_data_end+0xfc00a1a0>
 800a1e8:	80097b40 	call	80097b4 <__sfp_lock_release>
 800a1ec:	b005883a 	mov	r2,r22
 800a1f0:	dfc00717 	ldw	ra,28(sp)
 800a1f4:	dd800617 	ldw	r22,24(sp)
 800a1f8:	dd400517 	ldw	r21,20(sp)
 800a1fc:	dd000417 	ldw	r20,16(sp)
 800a200:	dcc00317 	ldw	r19,12(sp)
 800a204:	dc800217 	ldw	r18,8(sp)
 800a208:	dc400117 	ldw	r17,4(sp)
 800a20c:	dc000017 	ldw	r16,0(sp)
 800a210:	dec00804 	addi	sp,sp,32
 800a214:	f800283a 	ret

0800a218 <_setlocale_r>:
 800a218:	30001b26 	beq	r6,zero,800a288 <_setlocale_r+0x70>
 800a21c:	014200b4 	movhi	r5,2050
 800a220:	defffe04 	addi	sp,sp,-8
 800a224:	297dc704 	addi	r5,r5,-2276
 800a228:	3009883a 	mov	r4,r6
 800a22c:	dc000015 	stw	r16,0(sp)
 800a230:	dfc00115 	stw	ra,4(sp)
 800a234:	3021883a 	mov	r16,r6
 800a238:	800c9900 	call	800c990 <strcmp>
 800a23c:	1000061e 	bne	r2,zero,800a258 <_setlocale_r+0x40>
 800a240:	008200b4 	movhi	r2,2050
 800a244:	10bdc604 	addi	r2,r2,-2280
 800a248:	dfc00117 	ldw	ra,4(sp)
 800a24c:	dc000017 	ldw	r16,0(sp)
 800a250:	dec00204 	addi	sp,sp,8
 800a254:	f800283a 	ret
 800a258:	014200b4 	movhi	r5,2050
 800a25c:	297dc604 	addi	r5,r5,-2280
 800a260:	8009883a 	mov	r4,r16
 800a264:	800c9900 	call	800c990 <strcmp>
 800a268:	103ff526 	beq	r2,zero,800a240 <__alt_data_end+0xfc00a240>
 800a26c:	014200b4 	movhi	r5,2050
 800a270:	297da904 	addi	r5,r5,-2396
 800a274:	8009883a 	mov	r4,r16
 800a278:	800c9900 	call	800c990 <strcmp>
 800a27c:	103ff026 	beq	r2,zero,800a240 <__alt_data_end+0xfc00a240>
 800a280:	0005883a 	mov	r2,zero
 800a284:	003ff006 	br	800a248 <__alt_data_end+0xfc00a248>
 800a288:	008200b4 	movhi	r2,2050
 800a28c:	10bdc604 	addi	r2,r2,-2280
 800a290:	f800283a 	ret

0800a294 <__locale_charset>:
 800a294:	008200b4 	movhi	r2,2050
 800a298:	10bf4704 	addi	r2,r2,-740
 800a29c:	f800283a 	ret

0800a2a0 <__locale_mb_cur_max>:
 800a2a0:	008200b4 	movhi	r2,2050
 800a2a4:	1084ee04 	addi	r2,r2,5048
 800a2a8:	10800017 	ldw	r2,0(r2)
 800a2ac:	f800283a 	ret

0800a2b0 <__locale_msgcharset>:
 800a2b0:	008200b4 	movhi	r2,2050
 800a2b4:	10bf3f04 	addi	r2,r2,-772
 800a2b8:	f800283a 	ret

0800a2bc <__locale_cjk_lang>:
 800a2bc:	0005883a 	mov	r2,zero
 800a2c0:	f800283a 	ret

0800a2c4 <_localeconv_r>:
 800a2c4:	008200b4 	movhi	r2,2050
 800a2c8:	10bf4f04 	addi	r2,r2,-708
 800a2cc:	f800283a 	ret

0800a2d0 <setlocale>:
 800a2d0:	00c200b4 	movhi	r3,2050
 800a2d4:	18c4ed04 	addi	r3,r3,5044
 800a2d8:	2005883a 	mov	r2,r4
 800a2dc:	19000017 	ldw	r4,0(r3)
 800a2e0:	280d883a 	mov	r6,r5
 800a2e4:	100b883a 	mov	r5,r2
 800a2e8:	800a2181 	jmpi	800a218 <_setlocale_r>

0800a2ec <localeconv>:
 800a2ec:	008200b4 	movhi	r2,2050
 800a2f0:	10bf4f04 	addi	r2,r2,-708
 800a2f4:	f800283a 	ret

0800a2f8 <__smakebuf_r>:
 800a2f8:	2880030b 	ldhu	r2,12(r5)
 800a2fc:	10c0008c 	andi	r3,r2,2
 800a300:	1800401e 	bne	r3,zero,800a404 <__smakebuf_r+0x10c>
 800a304:	deffec04 	addi	sp,sp,-80
 800a308:	dc000f15 	stw	r16,60(sp)
 800a30c:	2821883a 	mov	r16,r5
 800a310:	2940038f 	ldh	r5,14(r5)
 800a314:	dc401015 	stw	r17,64(sp)
 800a318:	dfc01315 	stw	ra,76(sp)
 800a31c:	dcc01215 	stw	r19,72(sp)
 800a320:	dc801115 	stw	r18,68(sp)
 800a324:	2023883a 	mov	r17,r4
 800a328:	28001b16 	blt	r5,zero,800a398 <__smakebuf_r+0xa0>
 800a32c:	d80d883a 	mov	r6,sp
 800a330:	800f6cc0 	call	800f6cc <_fstat_r>
 800a334:	10001716 	blt	r2,zero,800a394 <__smakebuf_r+0x9c>
 800a338:	d8800117 	ldw	r2,4(sp)
 800a33c:	00e00014 	movui	r3,32768
 800a340:	10bc000c 	andi	r2,r2,61440
 800a344:	10c03726 	beq	r2,r3,800a424 <__smakebuf_r+0x12c>
 800a348:	80c0030b 	ldhu	r3,12(r16)
 800a34c:	18c20014 	ori	r3,r3,2048
 800a350:	80c0030d 	sth	r3,12(r16)
 800a354:	00c80004 	movi	r3,8192
 800a358:	10c03c1e 	bne	r2,r3,800a44c <__smakebuf_r+0x154>
 800a35c:	8140038f 	ldh	r5,14(r16)
 800a360:	8809883a 	mov	r4,r17
 800a364:	800f7240 	call	800f724 <_isatty_r>
 800a368:	10004e26 	beq	r2,zero,800a4a4 <__smakebuf_r+0x1ac>
 800a36c:	8080030b 	ldhu	r2,12(r16)
 800a370:	04c00044 	movi	r19,1
 800a374:	80c010c4 	addi	r3,r16,67
 800a378:	14c4b03a 	or	r2,r2,r19
 800a37c:	8080030d 	sth	r2,12(r16)
 800a380:	80c00015 	stw	r3,0(r16)
 800a384:	80c00415 	stw	r3,16(r16)
 800a388:	84c00515 	stw	r19,20(r16)
 800a38c:	04810004 	movi	r18,1024
 800a390:	00000706 	br	800a3b0 <__smakebuf_r+0xb8>
 800a394:	8080030b 	ldhu	r2,12(r16)
 800a398:	10c0200c 	andi	r3,r2,128
 800a39c:	18001f1e 	bne	r3,zero,800a41c <__smakebuf_r+0x124>
 800a3a0:	04810004 	movi	r18,1024
 800a3a4:	10820014 	ori	r2,r2,2048
 800a3a8:	8080030d 	sth	r2,12(r16)
 800a3ac:	0027883a 	mov	r19,zero
 800a3b0:	8809883a 	mov	r4,r17
 800a3b4:	900b883a 	mov	r5,r18
 800a3b8:	800a4b00 	call	800a4b0 <_malloc_r>
 800a3bc:	10002e26 	beq	r2,zero,800a478 <__smakebuf_r+0x180>
 800a3c0:	80c0030b 	ldhu	r3,12(r16)
 800a3c4:	01020074 	movhi	r4,2049
 800a3c8:	21251804 	addi	r4,r4,-27552
 800a3cc:	89000f15 	stw	r4,60(r17)
 800a3d0:	18c02014 	ori	r3,r3,128
 800a3d4:	80c0030d 	sth	r3,12(r16)
 800a3d8:	80800015 	stw	r2,0(r16)
 800a3dc:	80800415 	stw	r2,16(r16)
 800a3e0:	84800515 	stw	r18,20(r16)
 800a3e4:	98001c1e 	bne	r19,zero,800a458 <__smakebuf_r+0x160>
 800a3e8:	dfc01317 	ldw	ra,76(sp)
 800a3ec:	dcc01217 	ldw	r19,72(sp)
 800a3f0:	dc801117 	ldw	r18,68(sp)
 800a3f4:	dc401017 	ldw	r17,64(sp)
 800a3f8:	dc000f17 	ldw	r16,60(sp)
 800a3fc:	dec01404 	addi	sp,sp,80
 800a400:	f800283a 	ret
 800a404:	288010c4 	addi	r2,r5,67
 800a408:	28800015 	stw	r2,0(r5)
 800a40c:	28800415 	stw	r2,16(r5)
 800a410:	00800044 	movi	r2,1
 800a414:	28800515 	stw	r2,20(r5)
 800a418:	f800283a 	ret
 800a41c:	04801004 	movi	r18,64
 800a420:	003fe006 	br	800a3a4 <__alt_data_end+0xfc00a3a4>
 800a424:	81000a17 	ldw	r4,40(r16)
 800a428:	00c20074 	movhi	r3,2049
 800a42c:	18f24b04 	addi	r3,r3,-14036
 800a430:	20ffc51e 	bne	r4,r3,800a348 <__alt_data_end+0xfc00a348>
 800a434:	80c0030b 	ldhu	r3,12(r16)
 800a438:	01010004 	movi	r4,1024
 800a43c:	81001315 	stw	r4,76(r16)
 800a440:	1906b03a 	or	r3,r3,r4
 800a444:	80c0030d 	sth	r3,12(r16)
 800a448:	003fc206 	br	800a354 <__alt_data_end+0xfc00a354>
 800a44c:	0027883a 	mov	r19,zero
 800a450:	04810004 	movi	r18,1024
 800a454:	003fd606 	br	800a3b0 <__alt_data_end+0xfc00a3b0>
 800a458:	8140038f 	ldh	r5,14(r16)
 800a45c:	8809883a 	mov	r4,r17
 800a460:	800f7240 	call	800f724 <_isatty_r>
 800a464:	103fe026 	beq	r2,zero,800a3e8 <__alt_data_end+0xfc00a3e8>
 800a468:	8080030b 	ldhu	r2,12(r16)
 800a46c:	10800054 	ori	r2,r2,1
 800a470:	8080030d 	sth	r2,12(r16)
 800a474:	003fdc06 	br	800a3e8 <__alt_data_end+0xfc00a3e8>
 800a478:	8080030b 	ldhu	r2,12(r16)
 800a47c:	10c0800c 	andi	r3,r2,512
 800a480:	183fd91e 	bne	r3,zero,800a3e8 <__alt_data_end+0xfc00a3e8>
 800a484:	10800094 	ori	r2,r2,2
 800a488:	80c010c4 	addi	r3,r16,67
 800a48c:	8080030d 	sth	r2,12(r16)
 800a490:	00800044 	movi	r2,1
 800a494:	80c00015 	stw	r3,0(r16)
 800a498:	80c00415 	stw	r3,16(r16)
 800a49c:	80800515 	stw	r2,20(r16)
 800a4a0:	003fd106 	br	800a3e8 <__alt_data_end+0xfc00a3e8>
 800a4a4:	04c00044 	movi	r19,1
 800a4a8:	04810004 	movi	r18,1024
 800a4ac:	003fc006 	br	800a3b0 <__alt_data_end+0xfc00a3b0>

0800a4b0 <_malloc_r>:
 800a4b0:	defff504 	addi	sp,sp,-44
 800a4b4:	dc800315 	stw	r18,12(sp)
 800a4b8:	dfc00a15 	stw	ra,40(sp)
 800a4bc:	df000915 	stw	fp,36(sp)
 800a4c0:	ddc00815 	stw	r23,32(sp)
 800a4c4:	dd800715 	stw	r22,28(sp)
 800a4c8:	dd400615 	stw	r21,24(sp)
 800a4cc:	dd000515 	stw	r20,20(sp)
 800a4d0:	dcc00415 	stw	r19,16(sp)
 800a4d4:	dc400215 	stw	r17,8(sp)
 800a4d8:	dc000115 	stw	r16,4(sp)
 800a4dc:	288002c4 	addi	r2,r5,11
 800a4e0:	00c00584 	movi	r3,22
 800a4e4:	2025883a 	mov	r18,r4
 800a4e8:	18802a2e 	bgeu	r3,r2,800a594 <_malloc_r+0xe4>
 800a4ec:	047ffe04 	movi	r17,-8
 800a4f0:	1462703a 	and	r17,r2,r17
 800a4f4:	88009e16 	blt	r17,zero,800a770 <_malloc_r+0x2c0>
 800a4f8:	89409d36 	bltu	r17,r5,800a770 <_malloc_r+0x2c0>
 800a4fc:	80126540 	call	8012654 <__malloc_lock>
 800a500:	00807dc4 	movi	r2,503
 800a504:	14402736 	bltu	r2,r17,800a5a4 <_malloc_r+0xf4>
 800a508:	8806d0fa 	srli	r3,r17,3
 800a50c:	04c200b4 	movhi	r19,2050
 800a510:	9cff5d04 	addi	r19,r19,-652
 800a514:	18c5883a 	add	r2,r3,r3
 800a518:	1085883a 	add	r2,r2,r2
 800a51c:	1085883a 	add	r2,r2,r2
 800a520:	9885883a 	add	r2,r19,r2
 800a524:	14000317 	ldw	r16,12(r2)
 800a528:	80814a26 	beq	r16,r2,800aa54 <_malloc_r+0x5a4>
 800a52c:	80c00117 	ldw	r3,4(r16)
 800a530:	81000317 	ldw	r4,12(r16)
 800a534:	00bfff04 	movi	r2,-4
 800a538:	1884703a 	and	r2,r3,r2
 800a53c:	81400217 	ldw	r5,8(r16)
 800a540:	8085883a 	add	r2,r16,r2
 800a544:	10c00117 	ldw	r3,4(r2)
 800a548:	29000315 	stw	r4,12(r5)
 800a54c:	21400215 	stw	r5,8(r4)
 800a550:	18c00054 	ori	r3,r3,1
 800a554:	10c00115 	stw	r3,4(r2)
 800a558:	9009883a 	mov	r4,r18
 800a55c:	80126740 	call	8012674 <__malloc_unlock>
 800a560:	80800204 	addi	r2,r16,8
 800a564:	dfc00a17 	ldw	ra,40(sp)
 800a568:	df000917 	ldw	fp,36(sp)
 800a56c:	ddc00817 	ldw	r23,32(sp)
 800a570:	dd800717 	ldw	r22,28(sp)
 800a574:	dd400617 	ldw	r21,24(sp)
 800a578:	dd000517 	ldw	r20,20(sp)
 800a57c:	dcc00417 	ldw	r19,16(sp)
 800a580:	dc800317 	ldw	r18,12(sp)
 800a584:	dc400217 	ldw	r17,8(sp)
 800a588:	dc000117 	ldw	r16,4(sp)
 800a58c:	dec00b04 	addi	sp,sp,44
 800a590:	f800283a 	ret
 800a594:	04400404 	movi	r17,16
 800a598:	89407536 	bltu	r17,r5,800a770 <_malloc_r+0x2c0>
 800a59c:	80126540 	call	8012654 <__malloc_lock>
 800a5a0:	003fd906 	br	800a508 <__alt_data_end+0xfc00a508>
 800a5a4:	8806d27a 	srli	r3,r17,9
 800a5a8:	18007526 	beq	r3,zero,800a780 <_malloc_r+0x2d0>
 800a5ac:	00800104 	movi	r2,4
 800a5b0:	10c0ef36 	bltu	r2,r3,800a970 <_malloc_r+0x4c0>
 800a5b4:	8806d1ba 	srli	r3,r17,6
 800a5b8:	19c00e04 	addi	r7,r3,56
 800a5bc:	39cb883a 	add	r5,r7,r7
 800a5c0:	04c200b4 	movhi	r19,2050
 800a5c4:	294b883a 	add	r5,r5,r5
 800a5c8:	9cff5d04 	addi	r19,r19,-652
 800a5cc:	294b883a 	add	r5,r5,r5
 800a5d0:	994b883a 	add	r5,r19,r5
 800a5d4:	2c000317 	ldw	r16,12(r5)
 800a5d8:	2c000e26 	beq	r5,r16,800a614 <_malloc_r+0x164>
 800a5dc:	80800117 	ldw	r2,4(r16)
 800a5e0:	01bfff04 	movi	r6,-4
 800a5e4:	010003c4 	movi	r4,15
 800a5e8:	1184703a 	and	r2,r2,r6
 800a5ec:	1447c83a 	sub	r3,r2,r17
 800a5f0:	20c00716 	blt	r4,r3,800a610 <_malloc_r+0x160>
 800a5f4:	1800650e 	bge	r3,zero,800a78c <_malloc_r+0x2dc>
 800a5f8:	84000317 	ldw	r16,12(r16)
 800a5fc:	2c000526 	beq	r5,r16,800a614 <_malloc_r+0x164>
 800a600:	80800117 	ldw	r2,4(r16)
 800a604:	1184703a 	and	r2,r2,r6
 800a608:	1447c83a 	sub	r3,r2,r17
 800a60c:	20fff90e 	bge	r4,r3,800a5f4 <__alt_data_end+0xfc00a5f4>
 800a610:	39ffffc4 	addi	r7,r7,-1
 800a614:	38c00044 	addi	r3,r7,1
 800a618:	018200b4 	movhi	r6,2050
 800a61c:	9c000417 	ldw	r16,16(r19)
 800a620:	31bf5d04 	addi	r6,r6,-652
 800a624:	32400204 	addi	r9,r6,8
 800a628:	82410326 	beq	r16,r9,800aa38 <_malloc_r+0x588>
 800a62c:	81000117 	ldw	r4,4(r16)
 800a630:	00bfff04 	movi	r2,-4
 800a634:	208e703a 	and	r7,r4,r2
 800a638:	3c45c83a 	sub	r2,r7,r17
 800a63c:	010003c4 	movi	r4,15
 800a640:	2080ee16 	blt	r4,r2,800a9fc <_malloc_r+0x54c>
 800a644:	32400515 	stw	r9,20(r6)
 800a648:	32400415 	stw	r9,16(r6)
 800a64c:	1000510e 	bge	r2,zero,800a794 <_malloc_r+0x2e4>
 800a650:	00807fc4 	movi	r2,511
 800a654:	11c0ce36 	bltu	r2,r7,800a990 <_malloc_r+0x4e0>
 800a658:	3808d0fa 	srli	r4,r7,3
 800a65c:	01c00044 	movi	r7,1
 800a660:	30800117 	ldw	r2,4(r6)
 800a664:	210b883a 	add	r5,r4,r4
 800a668:	294b883a 	add	r5,r5,r5
 800a66c:	2009d0ba 	srai	r4,r4,2
 800a670:	294b883a 	add	r5,r5,r5
 800a674:	298b883a 	add	r5,r5,r6
 800a678:	2a000217 	ldw	r8,8(r5)
 800a67c:	3908983a 	sll	r4,r7,r4
 800a680:	81400315 	stw	r5,12(r16)
 800a684:	82000215 	stw	r8,8(r16)
 800a688:	2088b03a 	or	r4,r4,r2
 800a68c:	2c000215 	stw	r16,8(r5)
 800a690:	31000115 	stw	r4,4(r6)
 800a694:	44000315 	stw	r16,12(r8)
 800a698:	1805d0ba 	srai	r2,r3,2
 800a69c:	01400044 	movi	r5,1
 800a6a0:	288a983a 	sll	r5,r5,r2
 800a6a4:	21404336 	bltu	r4,r5,800a7b4 <_malloc_r+0x304>
 800a6a8:	2144703a 	and	r2,r4,r5
 800a6ac:	10000a1e 	bne	r2,zero,800a6d8 <_malloc_r+0x228>
 800a6b0:	00bfff04 	movi	r2,-4
 800a6b4:	294b883a 	add	r5,r5,r5
 800a6b8:	1886703a 	and	r3,r3,r2
 800a6bc:	2144703a 	and	r2,r4,r5
 800a6c0:	18c00104 	addi	r3,r3,4
 800a6c4:	1000041e 	bne	r2,zero,800a6d8 <_malloc_r+0x228>
 800a6c8:	294b883a 	add	r5,r5,r5
 800a6cc:	2144703a 	and	r2,r4,r5
 800a6d0:	18c00104 	addi	r3,r3,4
 800a6d4:	103ffc26 	beq	r2,zero,800a6c8 <__alt_data_end+0xfc00a6c8>
 800a6d8:	023fff04 	movi	r8,-4
 800a6dc:	01c003c4 	movi	r7,15
 800a6e0:	18c5883a 	add	r2,r3,r3
 800a6e4:	1085883a 	add	r2,r2,r2
 800a6e8:	1085883a 	add	r2,r2,r2
 800a6ec:	9895883a 	add	r10,r19,r2
 800a6f0:	52c00304 	addi	r11,r10,12
 800a6f4:	1819883a 	mov	r12,r3
 800a6f8:	5c000017 	ldw	r16,0(r11)
 800a6fc:	59bffd04 	addi	r6,r11,-12
 800a700:	8180041e 	bne	r16,r6,800a714 <_malloc_r+0x264>
 800a704:	0000ce06 	br	800aa40 <_malloc_r+0x590>
 800a708:	2000d70e 	bge	r4,zero,800aa68 <_malloc_r+0x5b8>
 800a70c:	84000317 	ldw	r16,12(r16)
 800a710:	8180cb26 	beq	r16,r6,800aa40 <_malloc_r+0x590>
 800a714:	80800117 	ldw	r2,4(r16)
 800a718:	1204703a 	and	r2,r2,r8
 800a71c:	1449c83a 	sub	r4,r2,r17
 800a720:	393ff90e 	bge	r7,r4,800a708 <__alt_data_end+0xfc00a708>
 800a724:	80800317 	ldw	r2,12(r16)
 800a728:	80c00217 	ldw	r3,8(r16)
 800a72c:	89400054 	ori	r5,r17,1
 800a730:	81400115 	stw	r5,4(r16)
 800a734:	18800315 	stw	r2,12(r3)
 800a738:	10c00215 	stw	r3,8(r2)
 800a73c:	8463883a 	add	r17,r16,r17
 800a740:	9c400515 	stw	r17,20(r19)
 800a744:	9c400415 	stw	r17,16(r19)
 800a748:	20800054 	ori	r2,r4,1
 800a74c:	88800115 	stw	r2,4(r17)
 800a750:	8a400315 	stw	r9,12(r17)
 800a754:	8a400215 	stw	r9,8(r17)
 800a758:	8923883a 	add	r17,r17,r4
 800a75c:	89000015 	stw	r4,0(r17)
 800a760:	9009883a 	mov	r4,r18
 800a764:	80126740 	call	8012674 <__malloc_unlock>
 800a768:	80800204 	addi	r2,r16,8
 800a76c:	003f7d06 	br	800a564 <__alt_data_end+0xfc00a564>
 800a770:	00800304 	movi	r2,12
 800a774:	90800015 	stw	r2,0(r18)
 800a778:	0005883a 	mov	r2,zero
 800a77c:	003f7906 	br	800a564 <__alt_data_end+0xfc00a564>
 800a780:	01401f84 	movi	r5,126
 800a784:	01c00fc4 	movi	r7,63
 800a788:	003f8d06 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800a78c:	81000317 	ldw	r4,12(r16)
 800a790:	003f6a06 	br	800a53c <__alt_data_end+0xfc00a53c>
 800a794:	81c5883a 	add	r2,r16,r7
 800a798:	10c00117 	ldw	r3,4(r2)
 800a79c:	9009883a 	mov	r4,r18
 800a7a0:	18c00054 	ori	r3,r3,1
 800a7a4:	10c00115 	stw	r3,4(r2)
 800a7a8:	80126740 	call	8012674 <__malloc_unlock>
 800a7ac:	80800204 	addi	r2,r16,8
 800a7b0:	003f6c06 	br	800a564 <__alt_data_end+0xfc00a564>
 800a7b4:	9c000217 	ldw	r16,8(r19)
 800a7b8:	00bfff04 	movi	r2,-4
 800a7bc:	85800117 	ldw	r22,4(r16)
 800a7c0:	b0ac703a 	and	r22,r22,r2
 800a7c4:	b4400336 	bltu	r22,r17,800a7d4 <_malloc_r+0x324>
 800a7c8:	b445c83a 	sub	r2,r22,r17
 800a7cc:	00c003c4 	movi	r3,15
 800a7d0:	18805d16 	blt	r3,r2,800a948 <_malloc_r+0x498>
 800a7d4:	05c200b4 	movhi	r23,2050
 800a7d8:	008200b4 	movhi	r2,2050
 800a7dc:	bdc4ef04 	addi	r23,r23,5052
 800a7e0:	108bc704 	addi	r2,r2,12060
 800a7e4:	15400017 	ldw	r21,0(r2)
 800a7e8:	b9000017 	ldw	r4,0(r23)
 800a7ec:	00ffffc4 	movi	r3,-1
 800a7f0:	858d883a 	add	r6,r16,r22
 800a7f4:	8d6b883a 	add	r21,r17,r21
 800a7f8:	20c0e426 	beq	r4,r3,800ab8c <_malloc_r+0x6dc>
 800a7fc:	ad4403c4 	addi	r21,r21,4111
 800a800:	00fc0004 	movi	r3,-4096
 800a804:	a8ea703a 	and	r21,r21,r3
 800a808:	9009883a 	mov	r4,r18
 800a80c:	a80b883a 	mov	r5,r21
 800a810:	d9800015 	stw	r6,0(sp)
 800a814:	800c8000 	call	800c800 <_sbrk_r>
 800a818:	00ffffc4 	movi	r3,-1
 800a81c:	1029883a 	mov	r20,r2
 800a820:	d9800017 	ldw	r6,0(sp)
 800a824:	10c0a426 	beq	r2,r3,800aab8 <_malloc_r+0x608>
 800a828:	1180a236 	bltu	r2,r6,800aab4 <_malloc_r+0x604>
 800a82c:	070200b4 	movhi	fp,2050
 800a830:	e70bcf04 	addi	fp,fp,12092
 800a834:	e0c00017 	ldw	r3,0(fp)
 800a838:	a8c7883a 	add	r3,r21,r3
 800a83c:	e0c00015 	stw	r3,0(fp)
 800a840:	3500da26 	beq	r6,r20,800abac <_malloc_r+0x6fc>
 800a844:	b9000017 	ldw	r4,0(r23)
 800a848:	00bfffc4 	movi	r2,-1
 800a84c:	2080e426 	beq	r4,r2,800abe0 <_malloc_r+0x730>
 800a850:	a185c83a 	sub	r2,r20,r6
 800a854:	1885883a 	add	r2,r3,r2
 800a858:	e0800015 	stw	r2,0(fp)
 800a85c:	a0c001cc 	andi	r3,r20,7
 800a860:	1800b526 	beq	r3,zero,800ab38 <_malloc_r+0x688>
 800a864:	a0e9c83a 	sub	r20,r20,r3
 800a868:	00840204 	movi	r2,4104
 800a86c:	a5000204 	addi	r20,r20,8
 800a870:	10c7c83a 	sub	r3,r2,r3
 800a874:	a545883a 	add	r2,r20,r21
 800a878:	1083ffcc 	andi	r2,r2,4095
 800a87c:	18abc83a 	sub	r21,r3,r2
 800a880:	9009883a 	mov	r4,r18
 800a884:	a80b883a 	mov	r5,r21
 800a888:	800c8000 	call	800c800 <_sbrk_r>
 800a88c:	00ffffc4 	movi	r3,-1
 800a890:	10c0d026 	beq	r2,r3,800abd4 <_malloc_r+0x724>
 800a894:	1507c83a 	sub	r3,r2,r20
 800a898:	a8c7883a 	add	r3,r21,r3
 800a89c:	18c00054 	ori	r3,r3,1
 800a8a0:	e0800017 	ldw	r2,0(fp)
 800a8a4:	9d000215 	stw	r20,8(r19)
 800a8a8:	a0c00115 	stw	r3,4(r20)
 800a8ac:	a887883a 	add	r3,r21,r2
 800a8b0:	e0c00015 	stw	r3,0(fp)
 800a8b4:	84c00e26 	beq	r16,r19,800a8f0 <_malloc_r+0x440>
 800a8b8:	018003c4 	movi	r6,15
 800a8bc:	3580a02e 	bgeu	r6,r22,800ab40 <_malloc_r+0x690>
 800a8c0:	81400117 	ldw	r5,4(r16)
 800a8c4:	013ffe04 	movi	r4,-8
 800a8c8:	b0bffd04 	addi	r2,r22,-12
 800a8cc:	1104703a 	and	r2,r2,r4
 800a8d0:	2900004c 	andi	r4,r5,1
 800a8d4:	1108b03a 	or	r4,r2,r4
 800a8d8:	81000115 	stw	r4,4(r16)
 800a8dc:	01400144 	movi	r5,5
 800a8e0:	8089883a 	add	r4,r16,r2
 800a8e4:	21400115 	stw	r5,4(r4)
 800a8e8:	21400215 	stw	r5,8(r4)
 800a8ec:	3080c036 	bltu	r6,r2,800abf0 <_malloc_r+0x740>
 800a8f0:	008200b4 	movhi	r2,2050
 800a8f4:	108bc604 	addi	r2,r2,12056
 800a8f8:	11000017 	ldw	r4,0(r2)
 800a8fc:	20c0012e 	bgeu	r4,r3,800a904 <_malloc_r+0x454>
 800a900:	10c00015 	stw	r3,0(r2)
 800a904:	008200b4 	movhi	r2,2050
 800a908:	108bc504 	addi	r2,r2,12052
 800a90c:	11000017 	ldw	r4,0(r2)
 800a910:	9c000217 	ldw	r16,8(r19)
 800a914:	20c0012e 	bgeu	r4,r3,800a91c <_malloc_r+0x46c>
 800a918:	10c00015 	stw	r3,0(r2)
 800a91c:	80c00117 	ldw	r3,4(r16)
 800a920:	00bfff04 	movi	r2,-4
 800a924:	1886703a 	and	r3,r3,r2
 800a928:	1c45c83a 	sub	r2,r3,r17
 800a92c:	1c400236 	bltu	r3,r17,800a938 <_malloc_r+0x488>
 800a930:	00c003c4 	movi	r3,15
 800a934:	18800416 	blt	r3,r2,800a948 <_malloc_r+0x498>
 800a938:	9009883a 	mov	r4,r18
 800a93c:	80126740 	call	8012674 <__malloc_unlock>
 800a940:	0005883a 	mov	r2,zero
 800a944:	003f0706 	br	800a564 <__alt_data_end+0xfc00a564>
 800a948:	88c00054 	ori	r3,r17,1
 800a94c:	80c00115 	stw	r3,4(r16)
 800a950:	8463883a 	add	r17,r16,r17
 800a954:	10800054 	ori	r2,r2,1
 800a958:	9c400215 	stw	r17,8(r19)
 800a95c:	88800115 	stw	r2,4(r17)
 800a960:	9009883a 	mov	r4,r18
 800a964:	80126740 	call	8012674 <__malloc_unlock>
 800a968:	80800204 	addi	r2,r16,8
 800a96c:	003efd06 	br	800a564 <__alt_data_end+0xfc00a564>
 800a970:	00800504 	movi	r2,20
 800a974:	10c0482e 	bgeu	r2,r3,800aa98 <_malloc_r+0x5e8>
 800a978:	00801504 	movi	r2,84
 800a97c:	10c06836 	bltu	r2,r3,800ab20 <_malloc_r+0x670>
 800a980:	8806d33a 	srli	r3,r17,12
 800a984:	19c01b84 	addi	r7,r3,110
 800a988:	39cb883a 	add	r5,r7,r7
 800a98c:	003f0c06 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800a990:	3804d27a 	srli	r2,r7,9
 800a994:	01000104 	movi	r4,4
 800a998:	2080422e 	bgeu	r4,r2,800aaa4 <_malloc_r+0x5f4>
 800a99c:	01000504 	movi	r4,20
 800a9a0:	20807c36 	bltu	r4,r2,800ab94 <_malloc_r+0x6e4>
 800a9a4:	110016c4 	addi	r4,r2,91
 800a9a8:	210b883a 	add	r5,r4,r4
 800a9ac:	294b883a 	add	r5,r5,r5
 800a9b0:	294b883a 	add	r5,r5,r5
 800a9b4:	994b883a 	add	r5,r19,r5
 800a9b8:	28800217 	ldw	r2,8(r5)
 800a9bc:	020200b4 	movhi	r8,2050
 800a9c0:	423f5d04 	addi	r8,r8,-652
 800a9c4:	11406326 	beq	r2,r5,800ab54 <_malloc_r+0x6a4>
 800a9c8:	01bfff04 	movi	r6,-4
 800a9cc:	11000117 	ldw	r4,4(r2)
 800a9d0:	2188703a 	and	r4,r4,r6
 800a9d4:	3900022e 	bgeu	r7,r4,800a9e0 <_malloc_r+0x530>
 800a9d8:	10800217 	ldw	r2,8(r2)
 800a9dc:	28bffb1e 	bne	r5,r2,800a9cc <__alt_data_end+0xfc00a9cc>
 800a9e0:	11800317 	ldw	r6,12(r2)
 800a9e4:	99000117 	ldw	r4,4(r19)
 800a9e8:	81800315 	stw	r6,12(r16)
 800a9ec:	80800215 	stw	r2,8(r16)
 800a9f0:	34000215 	stw	r16,8(r6)
 800a9f4:	14000315 	stw	r16,12(r2)
 800a9f8:	003f2706 	br	800a698 <__alt_data_end+0xfc00a698>
 800a9fc:	88c00054 	ori	r3,r17,1
 800aa00:	80c00115 	stw	r3,4(r16)
 800aa04:	8463883a 	add	r17,r16,r17
 800aa08:	34400515 	stw	r17,20(r6)
 800aa0c:	34400415 	stw	r17,16(r6)
 800aa10:	10c00054 	ori	r3,r2,1
 800aa14:	8a400315 	stw	r9,12(r17)
 800aa18:	8a400215 	stw	r9,8(r17)
 800aa1c:	88c00115 	stw	r3,4(r17)
 800aa20:	88a3883a 	add	r17,r17,r2
 800aa24:	88800015 	stw	r2,0(r17)
 800aa28:	9009883a 	mov	r4,r18
 800aa2c:	80126740 	call	8012674 <__malloc_unlock>
 800aa30:	80800204 	addi	r2,r16,8
 800aa34:	003ecb06 	br	800a564 <__alt_data_end+0xfc00a564>
 800aa38:	31000117 	ldw	r4,4(r6)
 800aa3c:	003f1606 	br	800a698 <__alt_data_end+0xfc00a698>
 800aa40:	63000044 	addi	r12,r12,1
 800aa44:	608000cc 	andi	r2,r12,3
 800aa48:	5ac00204 	addi	r11,r11,8
 800aa4c:	103f2a1e 	bne	r2,zero,800a6f8 <__alt_data_end+0xfc00a6f8>
 800aa50:	00002106 	br	800aad8 <_malloc_r+0x628>
 800aa54:	80800204 	addi	r2,r16,8
 800aa58:	84000517 	ldw	r16,20(r16)
 800aa5c:	143eb31e 	bne	r2,r16,800a52c <__alt_data_end+0xfc00a52c>
 800aa60:	18c00084 	addi	r3,r3,2
 800aa64:	003eec06 	br	800a618 <__alt_data_end+0xfc00a618>
 800aa68:	8085883a 	add	r2,r16,r2
 800aa6c:	10c00117 	ldw	r3,4(r2)
 800aa70:	81000317 	ldw	r4,12(r16)
 800aa74:	81400217 	ldw	r5,8(r16)
 800aa78:	18c00054 	ori	r3,r3,1
 800aa7c:	10c00115 	stw	r3,4(r2)
 800aa80:	29000315 	stw	r4,12(r5)
 800aa84:	21400215 	stw	r5,8(r4)
 800aa88:	9009883a 	mov	r4,r18
 800aa8c:	80126740 	call	8012674 <__malloc_unlock>
 800aa90:	80800204 	addi	r2,r16,8
 800aa94:	003eb306 	br	800a564 <__alt_data_end+0xfc00a564>
 800aa98:	19c016c4 	addi	r7,r3,91
 800aa9c:	39cb883a 	add	r5,r7,r7
 800aaa0:	003ec706 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800aaa4:	3804d1ba 	srli	r2,r7,6
 800aaa8:	11000e04 	addi	r4,r2,56
 800aaac:	210b883a 	add	r5,r4,r4
 800aab0:	003fbe06 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800aab4:	84ff5d26 	beq	r16,r19,800a82c <__alt_data_end+0xfc00a82c>
 800aab8:	9c000217 	ldw	r16,8(r19)
 800aabc:	00bfff04 	movi	r2,-4
 800aac0:	80c00117 	ldw	r3,4(r16)
 800aac4:	1886703a 	and	r3,r3,r2
 800aac8:	003f9706 	br	800a928 <__alt_data_end+0xfc00a928>
 800aacc:	52800017 	ldw	r10,0(r10)
 800aad0:	18ffffc4 	addi	r3,r3,-1
 800aad4:	50805c1e 	bne	r10,r2,800ac48 <_malloc_r+0x798>
 800aad8:	190000cc 	andi	r4,r3,3
 800aadc:	50bffe04 	addi	r2,r10,-8
 800aae0:	203ffa1e 	bne	r4,zero,800aacc <__alt_data_end+0xfc00aacc>
 800aae4:	98800117 	ldw	r2,4(r19)
 800aae8:	0146303a 	nor	r3,zero,r5
 800aaec:	1884703a 	and	r2,r3,r2
 800aaf0:	98800115 	stw	r2,4(r19)
 800aaf4:	294b883a 	add	r5,r5,r5
 800aaf8:	117f2e36 	bltu	r2,r5,800a7b4 <__alt_data_end+0xfc00a7b4>
 800aafc:	283f2d26 	beq	r5,zero,800a7b4 <__alt_data_end+0xfc00a7b4>
 800ab00:	1146703a 	and	r3,r2,r5
 800ab04:	1800521e 	bne	r3,zero,800ac50 <_malloc_r+0x7a0>
 800ab08:	6007883a 	mov	r3,r12
 800ab0c:	294b883a 	add	r5,r5,r5
 800ab10:	1148703a 	and	r4,r2,r5
 800ab14:	18c00104 	addi	r3,r3,4
 800ab18:	203ffc26 	beq	r4,zero,800ab0c <__alt_data_end+0xfc00ab0c>
 800ab1c:	003ef006 	br	800a6e0 <__alt_data_end+0xfc00a6e0>
 800ab20:	00805504 	movi	r2,340
 800ab24:	10c01336 	bltu	r2,r3,800ab74 <_malloc_r+0x6c4>
 800ab28:	8806d3fa 	srli	r3,r17,15
 800ab2c:	19c01dc4 	addi	r7,r3,119
 800ab30:	39cb883a 	add	r5,r7,r7
 800ab34:	003ea206 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800ab38:	00c40004 	movi	r3,4096
 800ab3c:	003f4d06 	br	800a874 <__alt_data_end+0xfc00a874>
 800ab40:	00800044 	movi	r2,1
 800ab44:	a0800115 	stw	r2,4(r20)
 800ab48:	a021883a 	mov	r16,r20
 800ab4c:	0007883a 	mov	r3,zero
 800ab50:	003f7506 	br	800a928 <__alt_data_end+0xfc00a928>
 800ab54:	200bd0ba 	srai	r5,r4,2
 800ab58:	01800044 	movi	r6,1
 800ab5c:	41000117 	ldw	r4,4(r8)
 800ab60:	314a983a 	sll	r5,r6,r5
 800ab64:	100d883a 	mov	r6,r2
 800ab68:	2908b03a 	or	r4,r5,r4
 800ab6c:	41000115 	stw	r4,4(r8)
 800ab70:	003f9d06 	br	800a9e8 <__alt_data_end+0xfc00a9e8>
 800ab74:	00815504 	movi	r2,1364
 800ab78:	10c01336 	bltu	r2,r3,800abc8 <_malloc_r+0x718>
 800ab7c:	8806d4ba 	srli	r3,r17,18
 800ab80:	19c01f04 	addi	r7,r3,124
 800ab84:	39cb883a 	add	r5,r7,r7
 800ab88:	003e8d06 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800ab8c:	ad400404 	addi	r21,r21,16
 800ab90:	003f1d06 	br	800a808 <__alt_data_end+0xfc00a808>
 800ab94:	01001504 	movi	r4,84
 800ab98:	20801c36 	bltu	r4,r2,800ac0c <_malloc_r+0x75c>
 800ab9c:	3804d33a 	srli	r2,r7,12
 800aba0:	11001b84 	addi	r4,r2,110
 800aba4:	210b883a 	add	r5,r4,r4
 800aba8:	003f8006 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800abac:	3083ffcc 	andi	r2,r6,4095
 800abb0:	103f241e 	bne	r2,zero,800a844 <__alt_data_end+0xfc00a844>
 800abb4:	99000217 	ldw	r4,8(r19)
 800abb8:	ad85883a 	add	r2,r21,r22
 800abbc:	10800054 	ori	r2,r2,1
 800abc0:	20800115 	stw	r2,4(r4)
 800abc4:	003f4a06 	br	800a8f0 <__alt_data_end+0xfc00a8f0>
 800abc8:	01403f04 	movi	r5,252
 800abcc:	01c01f84 	movi	r7,126
 800abd0:	003e7b06 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800abd4:	00c00044 	movi	r3,1
 800abd8:	002b883a 	mov	r21,zero
 800abdc:	003f3006 	br	800a8a0 <__alt_data_end+0xfc00a8a0>
 800abe0:	008200b4 	movhi	r2,2050
 800abe4:	1084ef04 	addi	r2,r2,5052
 800abe8:	15000015 	stw	r20,0(r2)
 800abec:	003f1b06 	br	800a85c <__alt_data_end+0xfc00a85c>
 800abf0:	9009883a 	mov	r4,r18
 800abf4:	81400204 	addi	r5,r16,8
 800abf8:	80099140 	call	8009914 <_free_r>
 800abfc:	008200b4 	movhi	r2,2050
 800ac00:	108bcf04 	addi	r2,r2,12092
 800ac04:	10c00017 	ldw	r3,0(r2)
 800ac08:	003f3906 	br	800a8f0 <__alt_data_end+0xfc00a8f0>
 800ac0c:	01005504 	movi	r4,340
 800ac10:	20800436 	bltu	r4,r2,800ac24 <_malloc_r+0x774>
 800ac14:	3804d3fa 	srli	r2,r7,15
 800ac18:	11001dc4 	addi	r4,r2,119
 800ac1c:	210b883a 	add	r5,r4,r4
 800ac20:	003f6206 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ac24:	01015504 	movi	r4,1364
 800ac28:	20800436 	bltu	r4,r2,800ac3c <_malloc_r+0x78c>
 800ac2c:	3804d4ba 	srli	r2,r7,18
 800ac30:	11001f04 	addi	r4,r2,124
 800ac34:	210b883a 	add	r5,r4,r4
 800ac38:	003f5c06 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ac3c:	01403f04 	movi	r5,252
 800ac40:	01001f84 	movi	r4,126
 800ac44:	003f5906 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ac48:	98800117 	ldw	r2,4(r19)
 800ac4c:	003fa906 	br	800aaf4 <__alt_data_end+0xfc00aaf4>
 800ac50:	6007883a 	mov	r3,r12
 800ac54:	003ea206 	br	800a6e0 <__alt_data_end+0xfc00a6e0>

0800ac58 <memchr>:
 800ac58:	208000cc 	andi	r2,r4,3
 800ac5c:	280f883a 	mov	r7,r5
 800ac60:	10003526 	beq	r2,zero,800ad38 <memchr+0xe0>
 800ac64:	30bfffc4 	addi	r2,r6,-1
 800ac68:	30001b26 	beq	r6,zero,800acd8 <memchr+0x80>
 800ac6c:	21800003 	ldbu	r6,0(r4)
 800ac70:	28c03fcc 	andi	r3,r5,255
 800ac74:	30c01a26 	beq	r6,r3,800ace0 <memchr+0x88>
 800ac78:	180d883a 	mov	r6,r3
 800ac7c:	00000406 	br	800ac90 <memchr+0x38>
 800ac80:	10001526 	beq	r2,zero,800acd8 <memchr+0x80>
 800ac84:	20c00003 	ldbu	r3,0(r4)
 800ac88:	10bfffc4 	addi	r2,r2,-1
 800ac8c:	19801426 	beq	r3,r6,800ace0 <memchr+0x88>
 800ac90:	21000044 	addi	r4,r4,1
 800ac94:	20c000cc 	andi	r3,r4,3
 800ac98:	183ff91e 	bne	r3,zero,800ac80 <__alt_data_end+0xfc00ac80>
 800ac9c:	024000c4 	movi	r9,3
 800aca0:	48801136 	bltu	r9,r2,800ace8 <memchr+0x90>
 800aca4:	10000c26 	beq	r2,zero,800acd8 <memchr+0x80>
 800aca8:	20c00003 	ldbu	r3,0(r4)
 800acac:	29403fcc 	andi	r5,r5,255
 800acb0:	19400b26 	beq	r3,r5,800ace0 <memchr+0x88>
 800acb4:	20c00044 	addi	r3,r4,1
 800acb8:	2085883a 	add	r2,r4,r2
 800acbc:	39803fcc 	andi	r6,r7,255
 800acc0:	00000306 	br	800acd0 <memchr+0x78>
 800acc4:	18c00044 	addi	r3,r3,1
 800acc8:	197fffc3 	ldbu	r5,-1(r3)
 800accc:	29800426 	beq	r5,r6,800ace0 <memchr+0x88>
 800acd0:	1809883a 	mov	r4,r3
 800acd4:	18bffb1e 	bne	r3,r2,800acc4 <__alt_data_end+0xfc00acc4>
 800acd8:	0005883a 	mov	r2,zero
 800acdc:	f800283a 	ret
 800ace0:	2005883a 	mov	r2,r4
 800ace4:	f800283a 	ret
 800ace8:	28c03fcc 	andi	r3,r5,255
 800acec:	1810923a 	slli	r8,r3,8
 800acf0:	02ffbff4 	movhi	r11,65279
 800acf4:	02a02074 	movhi	r10,32897
 800acf8:	40c6b03a 	or	r3,r8,r3
 800acfc:	1810943a 	slli	r8,r3,16
 800ad00:	5affbfc4 	addi	r11,r11,-257
 800ad04:	52a02004 	addi	r10,r10,-32640
 800ad08:	40d0b03a 	or	r8,r8,r3
 800ad0c:	20c00017 	ldw	r3,0(r4)
 800ad10:	40c6f03a 	xor	r3,r8,r3
 800ad14:	1acd883a 	add	r6,r3,r11
 800ad18:	00c6303a 	nor	r3,zero,r3
 800ad1c:	30c6703a 	and	r3,r6,r3
 800ad20:	1a86703a 	and	r3,r3,r10
 800ad24:	183fdf1e 	bne	r3,zero,800aca4 <__alt_data_end+0xfc00aca4>
 800ad28:	10bfff04 	addi	r2,r2,-4
 800ad2c:	21000104 	addi	r4,r4,4
 800ad30:	48bff636 	bltu	r9,r2,800ad0c <__alt_data_end+0xfc00ad0c>
 800ad34:	003fdb06 	br	800aca4 <__alt_data_end+0xfc00aca4>
 800ad38:	3005883a 	mov	r2,r6
 800ad3c:	003fd706 	br	800ac9c <__alt_data_end+0xfc00ac9c>

0800ad40 <memcpy>:
 800ad40:	deffff04 	addi	sp,sp,-4
 800ad44:	dc000015 	stw	r16,0(sp)
 800ad48:	00c003c4 	movi	r3,15
 800ad4c:	2005883a 	mov	r2,r4
 800ad50:	1980432e 	bgeu	r3,r6,800ae60 <memcpy+0x120>
 800ad54:	2146b03a 	or	r3,r4,r5
 800ad58:	18c000cc 	andi	r3,r3,3
 800ad5c:	1800421e 	bne	r3,zero,800ae68 <memcpy+0x128>
 800ad60:	343ffc04 	addi	r16,r6,-16
 800ad64:	8020d13a 	srli	r16,r16,4
 800ad68:	28c00104 	addi	r3,r5,4
 800ad6c:	23400104 	addi	r13,r4,4
 800ad70:	801e913a 	slli	r15,r16,4
 800ad74:	2b000204 	addi	r12,r5,8
 800ad78:	22c00204 	addi	r11,r4,8
 800ad7c:	7bc00504 	addi	r15,r15,20
 800ad80:	2a800304 	addi	r10,r5,12
 800ad84:	22400304 	addi	r9,r4,12
 800ad88:	2bdf883a 	add	r15,r5,r15
 800ad8c:	2811883a 	mov	r8,r5
 800ad90:	200f883a 	mov	r7,r4
 800ad94:	41000017 	ldw	r4,0(r8)
 800ad98:	39c00404 	addi	r7,r7,16
 800ad9c:	18c00404 	addi	r3,r3,16
 800ada0:	393ffc15 	stw	r4,-16(r7)
 800ada4:	1bbffc17 	ldw	r14,-16(r3)
 800ada8:	6b400404 	addi	r13,r13,16
 800adac:	5ac00404 	addi	r11,r11,16
 800adb0:	6bbffc15 	stw	r14,-16(r13)
 800adb4:	63800017 	ldw	r14,0(r12)
 800adb8:	4a400404 	addi	r9,r9,16
 800adbc:	42000404 	addi	r8,r8,16
 800adc0:	5bbffc15 	stw	r14,-16(r11)
 800adc4:	53800017 	ldw	r14,0(r10)
 800adc8:	63000404 	addi	r12,r12,16
 800adcc:	52800404 	addi	r10,r10,16
 800add0:	4bbffc15 	stw	r14,-16(r9)
 800add4:	1bffef1e 	bne	r3,r15,800ad94 <__alt_data_end+0xfc00ad94>
 800add8:	81c00044 	addi	r7,r16,1
 800addc:	380e913a 	slli	r7,r7,4
 800ade0:	310003cc 	andi	r4,r6,15
 800ade4:	02c000c4 	movi	r11,3
 800ade8:	11c7883a 	add	r3,r2,r7
 800adec:	29cb883a 	add	r5,r5,r7
 800adf0:	59001f2e 	bgeu	r11,r4,800ae70 <memcpy+0x130>
 800adf4:	1813883a 	mov	r9,r3
 800adf8:	2811883a 	mov	r8,r5
 800adfc:	200f883a 	mov	r7,r4
 800ae00:	42800017 	ldw	r10,0(r8)
 800ae04:	4a400104 	addi	r9,r9,4
 800ae08:	39ffff04 	addi	r7,r7,-4
 800ae0c:	4abfff15 	stw	r10,-4(r9)
 800ae10:	42000104 	addi	r8,r8,4
 800ae14:	59fffa36 	bltu	r11,r7,800ae00 <__alt_data_end+0xfc00ae00>
 800ae18:	213fff04 	addi	r4,r4,-4
 800ae1c:	2008d0ba 	srli	r4,r4,2
 800ae20:	318000cc 	andi	r6,r6,3
 800ae24:	21000044 	addi	r4,r4,1
 800ae28:	2109883a 	add	r4,r4,r4
 800ae2c:	2109883a 	add	r4,r4,r4
 800ae30:	1907883a 	add	r3,r3,r4
 800ae34:	290b883a 	add	r5,r5,r4
 800ae38:	30000626 	beq	r6,zero,800ae54 <memcpy+0x114>
 800ae3c:	198d883a 	add	r6,r3,r6
 800ae40:	29c00003 	ldbu	r7,0(r5)
 800ae44:	18c00044 	addi	r3,r3,1
 800ae48:	29400044 	addi	r5,r5,1
 800ae4c:	19ffffc5 	stb	r7,-1(r3)
 800ae50:	19bffb1e 	bne	r3,r6,800ae40 <__alt_data_end+0xfc00ae40>
 800ae54:	dc000017 	ldw	r16,0(sp)
 800ae58:	dec00104 	addi	sp,sp,4
 800ae5c:	f800283a 	ret
 800ae60:	2007883a 	mov	r3,r4
 800ae64:	003ff406 	br	800ae38 <__alt_data_end+0xfc00ae38>
 800ae68:	2007883a 	mov	r3,r4
 800ae6c:	003ff306 	br	800ae3c <__alt_data_end+0xfc00ae3c>
 800ae70:	200d883a 	mov	r6,r4
 800ae74:	003ff006 	br	800ae38 <__alt_data_end+0xfc00ae38>

0800ae78 <memmove>:
 800ae78:	2005883a 	mov	r2,r4
 800ae7c:	29000b2e 	bgeu	r5,r4,800aeac <memmove+0x34>
 800ae80:	298f883a 	add	r7,r5,r6
 800ae84:	21c0092e 	bgeu	r4,r7,800aeac <memmove+0x34>
 800ae88:	2187883a 	add	r3,r4,r6
 800ae8c:	198bc83a 	sub	r5,r3,r6
 800ae90:	30004b26 	beq	r6,zero,800afc0 <memmove+0x148>
 800ae94:	39ffffc4 	addi	r7,r7,-1
 800ae98:	39000003 	ldbu	r4,0(r7)
 800ae9c:	18ffffc4 	addi	r3,r3,-1
 800aea0:	19000005 	stb	r4,0(r3)
 800aea4:	197ffb1e 	bne	r3,r5,800ae94 <__alt_data_end+0xfc00ae94>
 800aea8:	f800283a 	ret
 800aeac:	00c003c4 	movi	r3,15
 800aeb0:	1980412e 	bgeu	r3,r6,800afb8 <memmove+0x140>
 800aeb4:	1146b03a 	or	r3,r2,r5
 800aeb8:	18c000cc 	andi	r3,r3,3
 800aebc:	1800411e 	bne	r3,zero,800afc4 <memmove+0x14c>
 800aec0:	33fffc04 	addi	r15,r6,-16
 800aec4:	781ed13a 	srli	r15,r15,4
 800aec8:	28c00104 	addi	r3,r5,4
 800aecc:	13400104 	addi	r13,r2,4
 800aed0:	781c913a 	slli	r14,r15,4
 800aed4:	2b000204 	addi	r12,r5,8
 800aed8:	12c00204 	addi	r11,r2,8
 800aedc:	73800504 	addi	r14,r14,20
 800aee0:	2a800304 	addi	r10,r5,12
 800aee4:	12400304 	addi	r9,r2,12
 800aee8:	2b9d883a 	add	r14,r5,r14
 800aeec:	2811883a 	mov	r8,r5
 800aef0:	100f883a 	mov	r7,r2
 800aef4:	41000017 	ldw	r4,0(r8)
 800aef8:	39c00404 	addi	r7,r7,16
 800aefc:	18c00404 	addi	r3,r3,16
 800af00:	393ffc15 	stw	r4,-16(r7)
 800af04:	193ffc17 	ldw	r4,-16(r3)
 800af08:	6b400404 	addi	r13,r13,16
 800af0c:	5ac00404 	addi	r11,r11,16
 800af10:	693ffc15 	stw	r4,-16(r13)
 800af14:	61000017 	ldw	r4,0(r12)
 800af18:	4a400404 	addi	r9,r9,16
 800af1c:	42000404 	addi	r8,r8,16
 800af20:	593ffc15 	stw	r4,-16(r11)
 800af24:	51000017 	ldw	r4,0(r10)
 800af28:	63000404 	addi	r12,r12,16
 800af2c:	52800404 	addi	r10,r10,16
 800af30:	493ffc15 	stw	r4,-16(r9)
 800af34:	1bbfef1e 	bne	r3,r14,800aef4 <__alt_data_end+0xfc00aef4>
 800af38:	79000044 	addi	r4,r15,1
 800af3c:	2008913a 	slli	r4,r4,4
 800af40:	328003cc 	andi	r10,r6,15
 800af44:	02c000c4 	movi	r11,3
 800af48:	1107883a 	add	r3,r2,r4
 800af4c:	290b883a 	add	r5,r5,r4
 800af50:	5a801e2e 	bgeu	r11,r10,800afcc <memmove+0x154>
 800af54:	1813883a 	mov	r9,r3
 800af58:	2811883a 	mov	r8,r5
 800af5c:	500f883a 	mov	r7,r10
 800af60:	41000017 	ldw	r4,0(r8)
 800af64:	4a400104 	addi	r9,r9,4
 800af68:	39ffff04 	addi	r7,r7,-4
 800af6c:	493fff15 	stw	r4,-4(r9)
 800af70:	42000104 	addi	r8,r8,4
 800af74:	59fffa36 	bltu	r11,r7,800af60 <__alt_data_end+0xfc00af60>
 800af78:	513fff04 	addi	r4,r10,-4
 800af7c:	2008d0ba 	srli	r4,r4,2
 800af80:	318000cc 	andi	r6,r6,3
 800af84:	21000044 	addi	r4,r4,1
 800af88:	2109883a 	add	r4,r4,r4
 800af8c:	2109883a 	add	r4,r4,r4
 800af90:	1907883a 	add	r3,r3,r4
 800af94:	290b883a 	add	r5,r5,r4
 800af98:	30000926 	beq	r6,zero,800afc0 <memmove+0x148>
 800af9c:	198d883a 	add	r6,r3,r6
 800afa0:	29c00003 	ldbu	r7,0(r5)
 800afa4:	18c00044 	addi	r3,r3,1
 800afa8:	29400044 	addi	r5,r5,1
 800afac:	19ffffc5 	stb	r7,-1(r3)
 800afb0:	19bffb1e 	bne	r3,r6,800afa0 <__alt_data_end+0xfc00afa0>
 800afb4:	f800283a 	ret
 800afb8:	1007883a 	mov	r3,r2
 800afbc:	003ff606 	br	800af98 <__alt_data_end+0xfc00af98>
 800afc0:	f800283a 	ret
 800afc4:	1007883a 	mov	r3,r2
 800afc8:	003ff406 	br	800af9c <__alt_data_end+0xfc00af9c>
 800afcc:	500d883a 	mov	r6,r10
 800afd0:	003ff106 	br	800af98 <__alt_data_end+0xfc00af98>

0800afd4 <memset>:
 800afd4:	20c000cc 	andi	r3,r4,3
 800afd8:	2005883a 	mov	r2,r4
 800afdc:	18004326 	beq	r3,zero,800b0ec <memset+0x118>
 800afe0:	31ffffc4 	addi	r7,r6,-1
 800afe4:	30004026 	beq	r6,zero,800b0e8 <memset+0x114>
 800afe8:	2813883a 	mov	r9,r5
 800afec:	200d883a 	mov	r6,r4
 800aff0:	2007883a 	mov	r3,r4
 800aff4:	00000406 	br	800b008 <memset+0x34>
 800aff8:	3a3fffc4 	addi	r8,r7,-1
 800affc:	31800044 	addi	r6,r6,1
 800b000:	38003926 	beq	r7,zero,800b0e8 <memset+0x114>
 800b004:	400f883a 	mov	r7,r8
 800b008:	18c00044 	addi	r3,r3,1
 800b00c:	32400005 	stb	r9,0(r6)
 800b010:	1a0000cc 	andi	r8,r3,3
 800b014:	403ff81e 	bne	r8,zero,800aff8 <__alt_data_end+0xfc00aff8>
 800b018:	010000c4 	movi	r4,3
 800b01c:	21c02d2e 	bgeu	r4,r7,800b0d4 <memset+0x100>
 800b020:	29803fcc 	andi	r6,r5,255
 800b024:	3008923a 	slli	r4,r6,8
 800b028:	218cb03a 	or	r6,r4,r6
 800b02c:	3008943a 	slli	r4,r6,16
 800b030:	218cb03a 	or	r6,r4,r6
 800b034:	010003c4 	movi	r4,15
 800b038:	21c0182e 	bgeu	r4,r7,800b09c <memset+0xc8>
 800b03c:	3b3ffc04 	addi	r12,r7,-16
 800b040:	6018d13a 	srli	r12,r12,4
 800b044:	1a000104 	addi	r8,r3,4
 800b048:	1ac00204 	addi	r11,r3,8
 800b04c:	6008913a 	slli	r4,r12,4
 800b050:	1a800304 	addi	r10,r3,12
 800b054:	1813883a 	mov	r9,r3
 800b058:	21000504 	addi	r4,r4,20
 800b05c:	1909883a 	add	r4,r3,r4
 800b060:	49800015 	stw	r6,0(r9)
 800b064:	41800015 	stw	r6,0(r8)
 800b068:	59800015 	stw	r6,0(r11)
 800b06c:	51800015 	stw	r6,0(r10)
 800b070:	42000404 	addi	r8,r8,16
 800b074:	4a400404 	addi	r9,r9,16
 800b078:	5ac00404 	addi	r11,r11,16
 800b07c:	52800404 	addi	r10,r10,16
 800b080:	413ff71e 	bne	r8,r4,800b060 <__alt_data_end+0xfc00b060>
 800b084:	63000044 	addi	r12,r12,1
 800b088:	6018913a 	slli	r12,r12,4
 800b08c:	39c003cc 	andi	r7,r7,15
 800b090:	010000c4 	movi	r4,3
 800b094:	1b07883a 	add	r3,r3,r12
 800b098:	21c00e2e 	bgeu	r4,r7,800b0d4 <memset+0x100>
 800b09c:	1813883a 	mov	r9,r3
 800b0a0:	3811883a 	mov	r8,r7
 800b0a4:	010000c4 	movi	r4,3
 800b0a8:	49800015 	stw	r6,0(r9)
 800b0ac:	423fff04 	addi	r8,r8,-4
 800b0b0:	4a400104 	addi	r9,r9,4
 800b0b4:	223ffc36 	bltu	r4,r8,800b0a8 <__alt_data_end+0xfc00b0a8>
 800b0b8:	393fff04 	addi	r4,r7,-4
 800b0bc:	2008d0ba 	srli	r4,r4,2
 800b0c0:	39c000cc 	andi	r7,r7,3
 800b0c4:	21000044 	addi	r4,r4,1
 800b0c8:	2109883a 	add	r4,r4,r4
 800b0cc:	2109883a 	add	r4,r4,r4
 800b0d0:	1907883a 	add	r3,r3,r4
 800b0d4:	38000426 	beq	r7,zero,800b0e8 <memset+0x114>
 800b0d8:	19cf883a 	add	r7,r3,r7
 800b0dc:	19400005 	stb	r5,0(r3)
 800b0e0:	18c00044 	addi	r3,r3,1
 800b0e4:	19fffd1e 	bne	r3,r7,800b0dc <__alt_data_end+0xfc00b0dc>
 800b0e8:	f800283a 	ret
 800b0ec:	2007883a 	mov	r3,r4
 800b0f0:	300f883a 	mov	r7,r6
 800b0f4:	003fc806 	br	800b018 <__alt_data_end+0xfc00b018>

0800b0f8 <_Balloc>:
 800b0f8:	20801317 	ldw	r2,76(r4)
 800b0fc:	defffc04 	addi	sp,sp,-16
 800b100:	dc400115 	stw	r17,4(sp)
 800b104:	dc000015 	stw	r16,0(sp)
 800b108:	dfc00315 	stw	ra,12(sp)
 800b10c:	dc800215 	stw	r18,8(sp)
 800b110:	2023883a 	mov	r17,r4
 800b114:	2821883a 	mov	r16,r5
 800b118:	10000f26 	beq	r2,zero,800b158 <_Balloc+0x60>
 800b11c:	8407883a 	add	r3,r16,r16
 800b120:	18c7883a 	add	r3,r3,r3
 800b124:	10c7883a 	add	r3,r2,r3
 800b128:	18800017 	ldw	r2,0(r3)
 800b12c:	10001126 	beq	r2,zero,800b174 <_Balloc+0x7c>
 800b130:	11000017 	ldw	r4,0(r2)
 800b134:	19000015 	stw	r4,0(r3)
 800b138:	10000415 	stw	zero,16(r2)
 800b13c:	10000315 	stw	zero,12(r2)
 800b140:	dfc00317 	ldw	ra,12(sp)
 800b144:	dc800217 	ldw	r18,8(sp)
 800b148:	dc400117 	ldw	r17,4(sp)
 800b14c:	dc000017 	ldw	r16,0(sp)
 800b150:	dec00404 	addi	sp,sp,16
 800b154:	f800283a 	ret
 800b158:	01400104 	movi	r5,4
 800b15c:	01800844 	movi	r6,33
 800b160:	800f3180 	call	800f318 <_calloc_r>
 800b164:	88801315 	stw	r2,76(r17)
 800b168:	103fec1e 	bne	r2,zero,800b11c <__alt_data_end+0xfc00b11c>
 800b16c:	0005883a 	mov	r2,zero
 800b170:	003ff306 	br	800b140 <__alt_data_end+0xfc00b140>
 800b174:	01400044 	movi	r5,1
 800b178:	2c24983a 	sll	r18,r5,r16
 800b17c:	8809883a 	mov	r4,r17
 800b180:	91800144 	addi	r6,r18,5
 800b184:	318d883a 	add	r6,r6,r6
 800b188:	318d883a 	add	r6,r6,r6
 800b18c:	800f3180 	call	800f318 <_calloc_r>
 800b190:	103ff626 	beq	r2,zero,800b16c <__alt_data_end+0xfc00b16c>
 800b194:	14000115 	stw	r16,4(r2)
 800b198:	14800215 	stw	r18,8(r2)
 800b19c:	003fe606 	br	800b138 <__alt_data_end+0xfc00b138>

0800b1a0 <_Bfree>:
 800b1a0:	28000826 	beq	r5,zero,800b1c4 <_Bfree+0x24>
 800b1a4:	28c00117 	ldw	r3,4(r5)
 800b1a8:	20801317 	ldw	r2,76(r4)
 800b1ac:	18c7883a 	add	r3,r3,r3
 800b1b0:	18c7883a 	add	r3,r3,r3
 800b1b4:	10c5883a 	add	r2,r2,r3
 800b1b8:	10c00017 	ldw	r3,0(r2)
 800b1bc:	28c00015 	stw	r3,0(r5)
 800b1c0:	11400015 	stw	r5,0(r2)
 800b1c4:	f800283a 	ret

0800b1c8 <__multadd>:
 800b1c8:	defffa04 	addi	sp,sp,-24
 800b1cc:	dc000115 	stw	r16,4(sp)
 800b1d0:	2c000417 	ldw	r16,16(r5)
 800b1d4:	dc800315 	stw	r18,12(sp)
 800b1d8:	dc400215 	stw	r17,8(sp)
 800b1dc:	dfc00515 	stw	ra,20(sp)
 800b1e0:	dcc00415 	stw	r19,16(sp)
 800b1e4:	2823883a 	mov	r17,r5
 800b1e8:	2025883a 	mov	r18,r4
 800b1ec:	2a400504 	addi	r9,r5,20
 800b1f0:	0015883a 	mov	r10,zero
 800b1f4:	4a000017 	ldw	r8,0(r9)
 800b1f8:	4a400104 	addi	r9,r9,4
 800b1fc:	52800044 	addi	r10,r10,1
 800b200:	40ffffcc 	andi	r3,r8,65535
 800b204:	1987383a 	mul	r3,r3,r6
 800b208:	4010d43a 	srli	r8,r8,16
 800b20c:	19cf883a 	add	r7,r3,r7
 800b210:	4191383a 	mul	r8,r8,r6
 800b214:	3816d43a 	srli	r11,r7,16
 800b218:	38ffffcc 	andi	r3,r7,65535
 800b21c:	5a0f883a 	add	r7,r11,r8
 800b220:	3810943a 	slli	r8,r7,16
 800b224:	380ed43a 	srli	r7,r7,16
 800b228:	40c7883a 	add	r3,r8,r3
 800b22c:	48ffff15 	stw	r3,-4(r9)
 800b230:	543ff016 	blt	r10,r16,800b1f4 <__alt_data_end+0xfc00b1f4>
 800b234:	38000926 	beq	r7,zero,800b25c <__multadd+0x94>
 800b238:	88800217 	ldw	r2,8(r17)
 800b23c:	80800f0e 	bge	r16,r2,800b27c <__multadd+0xb4>
 800b240:	80800144 	addi	r2,r16,5
 800b244:	1085883a 	add	r2,r2,r2
 800b248:	1085883a 	add	r2,r2,r2
 800b24c:	8885883a 	add	r2,r17,r2
 800b250:	11c00015 	stw	r7,0(r2)
 800b254:	84000044 	addi	r16,r16,1
 800b258:	8c000415 	stw	r16,16(r17)
 800b25c:	8805883a 	mov	r2,r17
 800b260:	dfc00517 	ldw	ra,20(sp)
 800b264:	dcc00417 	ldw	r19,16(sp)
 800b268:	dc800317 	ldw	r18,12(sp)
 800b26c:	dc400217 	ldw	r17,8(sp)
 800b270:	dc000117 	ldw	r16,4(sp)
 800b274:	dec00604 	addi	sp,sp,24
 800b278:	f800283a 	ret
 800b27c:	89400117 	ldw	r5,4(r17)
 800b280:	9009883a 	mov	r4,r18
 800b284:	d9c00015 	stw	r7,0(sp)
 800b288:	29400044 	addi	r5,r5,1
 800b28c:	800b0f80 	call	800b0f8 <_Balloc>
 800b290:	89800417 	ldw	r6,16(r17)
 800b294:	89400304 	addi	r5,r17,12
 800b298:	11000304 	addi	r4,r2,12
 800b29c:	31800084 	addi	r6,r6,2
 800b2a0:	318d883a 	add	r6,r6,r6
 800b2a4:	318d883a 	add	r6,r6,r6
 800b2a8:	1027883a 	mov	r19,r2
 800b2ac:	800ad400 	call	800ad40 <memcpy>
 800b2b0:	89000117 	ldw	r4,4(r17)
 800b2b4:	90c01317 	ldw	r3,76(r18)
 800b2b8:	d9c00017 	ldw	r7,0(sp)
 800b2bc:	2109883a 	add	r4,r4,r4
 800b2c0:	2109883a 	add	r4,r4,r4
 800b2c4:	1907883a 	add	r3,r3,r4
 800b2c8:	18800017 	ldw	r2,0(r3)
 800b2cc:	88800015 	stw	r2,0(r17)
 800b2d0:	1c400015 	stw	r17,0(r3)
 800b2d4:	9823883a 	mov	r17,r19
 800b2d8:	003fd906 	br	800b240 <__alt_data_end+0xfc00b240>

0800b2dc <__s2b>:
 800b2dc:	defff904 	addi	sp,sp,-28
 800b2e0:	dc400115 	stw	r17,4(sp)
 800b2e4:	dc000015 	stw	r16,0(sp)
 800b2e8:	2023883a 	mov	r17,r4
 800b2ec:	2821883a 	mov	r16,r5
 800b2f0:	39000204 	addi	r4,r7,8
 800b2f4:	01400244 	movi	r5,9
 800b2f8:	dcc00315 	stw	r19,12(sp)
 800b2fc:	dc800215 	stw	r18,8(sp)
 800b300:	dfc00615 	stw	ra,24(sp)
 800b304:	dd400515 	stw	r21,20(sp)
 800b308:	dd000415 	stw	r20,16(sp)
 800b30c:	3825883a 	mov	r18,r7
 800b310:	3027883a 	mov	r19,r6
 800b314:	80105ec0 	call	80105ec <__divsi3>
 800b318:	00c00044 	movi	r3,1
 800b31c:	000b883a 	mov	r5,zero
 800b320:	1880030e 	bge	r3,r2,800b330 <__s2b+0x54>
 800b324:	18c7883a 	add	r3,r3,r3
 800b328:	29400044 	addi	r5,r5,1
 800b32c:	18bffd16 	blt	r3,r2,800b324 <__alt_data_end+0xfc00b324>
 800b330:	8809883a 	mov	r4,r17
 800b334:	800b0f80 	call	800b0f8 <_Balloc>
 800b338:	d8c00717 	ldw	r3,28(sp)
 800b33c:	10c00515 	stw	r3,20(r2)
 800b340:	00c00044 	movi	r3,1
 800b344:	10c00415 	stw	r3,16(r2)
 800b348:	00c00244 	movi	r3,9
 800b34c:	1cc0210e 	bge	r3,r19,800b3d4 <__s2b+0xf8>
 800b350:	80eb883a 	add	r21,r16,r3
 800b354:	a829883a 	mov	r20,r21
 800b358:	84e1883a 	add	r16,r16,r19
 800b35c:	a1c00007 	ldb	r7,0(r20)
 800b360:	8809883a 	mov	r4,r17
 800b364:	a5000044 	addi	r20,r20,1
 800b368:	100b883a 	mov	r5,r2
 800b36c:	01800284 	movi	r6,10
 800b370:	39fff404 	addi	r7,r7,-48
 800b374:	800b1c80 	call	800b1c8 <__multadd>
 800b378:	a43ff81e 	bne	r20,r16,800b35c <__alt_data_end+0xfc00b35c>
 800b37c:	ace1883a 	add	r16,r21,r19
 800b380:	843ffe04 	addi	r16,r16,-8
 800b384:	9c800a0e 	bge	r19,r18,800b3b0 <__s2b+0xd4>
 800b388:	94e5c83a 	sub	r18,r18,r19
 800b38c:	84a5883a 	add	r18,r16,r18
 800b390:	81c00007 	ldb	r7,0(r16)
 800b394:	8809883a 	mov	r4,r17
 800b398:	84000044 	addi	r16,r16,1
 800b39c:	100b883a 	mov	r5,r2
 800b3a0:	01800284 	movi	r6,10
 800b3a4:	39fff404 	addi	r7,r7,-48
 800b3a8:	800b1c80 	call	800b1c8 <__multadd>
 800b3ac:	84bff81e 	bne	r16,r18,800b390 <__alt_data_end+0xfc00b390>
 800b3b0:	dfc00617 	ldw	ra,24(sp)
 800b3b4:	dd400517 	ldw	r21,20(sp)
 800b3b8:	dd000417 	ldw	r20,16(sp)
 800b3bc:	dcc00317 	ldw	r19,12(sp)
 800b3c0:	dc800217 	ldw	r18,8(sp)
 800b3c4:	dc400117 	ldw	r17,4(sp)
 800b3c8:	dc000017 	ldw	r16,0(sp)
 800b3cc:	dec00704 	addi	sp,sp,28
 800b3d0:	f800283a 	ret
 800b3d4:	84000284 	addi	r16,r16,10
 800b3d8:	1827883a 	mov	r19,r3
 800b3dc:	003fe906 	br	800b384 <__alt_data_end+0xfc00b384>

0800b3e0 <__hi0bits>:
 800b3e0:	20bfffec 	andhi	r2,r4,65535
 800b3e4:	1000141e 	bne	r2,zero,800b438 <__hi0bits+0x58>
 800b3e8:	2008943a 	slli	r4,r4,16
 800b3ec:	00800404 	movi	r2,16
 800b3f0:	20ffc02c 	andhi	r3,r4,65280
 800b3f4:	1800021e 	bne	r3,zero,800b400 <__hi0bits+0x20>
 800b3f8:	2008923a 	slli	r4,r4,8
 800b3fc:	10800204 	addi	r2,r2,8
 800b400:	20fc002c 	andhi	r3,r4,61440
 800b404:	1800021e 	bne	r3,zero,800b410 <__hi0bits+0x30>
 800b408:	2008913a 	slli	r4,r4,4
 800b40c:	10800104 	addi	r2,r2,4
 800b410:	20f0002c 	andhi	r3,r4,49152
 800b414:	1800031e 	bne	r3,zero,800b424 <__hi0bits+0x44>
 800b418:	2109883a 	add	r4,r4,r4
 800b41c:	10800084 	addi	r2,r2,2
 800b420:	2109883a 	add	r4,r4,r4
 800b424:	20000316 	blt	r4,zero,800b434 <__hi0bits+0x54>
 800b428:	2110002c 	andhi	r4,r4,16384
 800b42c:	2000041e 	bne	r4,zero,800b440 <__hi0bits+0x60>
 800b430:	00800804 	movi	r2,32
 800b434:	f800283a 	ret
 800b438:	0005883a 	mov	r2,zero
 800b43c:	003fec06 	br	800b3f0 <__alt_data_end+0xfc00b3f0>
 800b440:	10800044 	addi	r2,r2,1
 800b444:	f800283a 	ret

0800b448 <__lo0bits>:
 800b448:	20c00017 	ldw	r3,0(r4)
 800b44c:	188001cc 	andi	r2,r3,7
 800b450:	10000826 	beq	r2,zero,800b474 <__lo0bits+0x2c>
 800b454:	1880004c 	andi	r2,r3,1
 800b458:	1000211e 	bne	r2,zero,800b4e0 <__lo0bits+0x98>
 800b45c:	1880008c 	andi	r2,r3,2
 800b460:	1000211e 	bne	r2,zero,800b4e8 <__lo0bits+0xa0>
 800b464:	1806d0ba 	srli	r3,r3,2
 800b468:	00800084 	movi	r2,2
 800b46c:	20c00015 	stw	r3,0(r4)
 800b470:	f800283a 	ret
 800b474:	18bfffcc 	andi	r2,r3,65535
 800b478:	10001326 	beq	r2,zero,800b4c8 <__lo0bits+0x80>
 800b47c:	0005883a 	mov	r2,zero
 800b480:	19403fcc 	andi	r5,r3,255
 800b484:	2800021e 	bne	r5,zero,800b490 <__lo0bits+0x48>
 800b488:	1806d23a 	srli	r3,r3,8
 800b48c:	10800204 	addi	r2,r2,8
 800b490:	194003cc 	andi	r5,r3,15
 800b494:	2800021e 	bne	r5,zero,800b4a0 <__lo0bits+0x58>
 800b498:	1806d13a 	srli	r3,r3,4
 800b49c:	10800104 	addi	r2,r2,4
 800b4a0:	194000cc 	andi	r5,r3,3
 800b4a4:	2800021e 	bne	r5,zero,800b4b0 <__lo0bits+0x68>
 800b4a8:	1806d0ba 	srli	r3,r3,2
 800b4ac:	10800084 	addi	r2,r2,2
 800b4b0:	1940004c 	andi	r5,r3,1
 800b4b4:	2800081e 	bne	r5,zero,800b4d8 <__lo0bits+0x90>
 800b4b8:	1806d07a 	srli	r3,r3,1
 800b4bc:	1800051e 	bne	r3,zero,800b4d4 <__lo0bits+0x8c>
 800b4c0:	00800804 	movi	r2,32
 800b4c4:	f800283a 	ret
 800b4c8:	1806d43a 	srli	r3,r3,16
 800b4cc:	00800404 	movi	r2,16
 800b4d0:	003feb06 	br	800b480 <__alt_data_end+0xfc00b480>
 800b4d4:	10800044 	addi	r2,r2,1
 800b4d8:	20c00015 	stw	r3,0(r4)
 800b4dc:	f800283a 	ret
 800b4e0:	0005883a 	mov	r2,zero
 800b4e4:	f800283a 	ret
 800b4e8:	1806d07a 	srli	r3,r3,1
 800b4ec:	00800044 	movi	r2,1
 800b4f0:	20c00015 	stw	r3,0(r4)
 800b4f4:	f800283a 	ret

0800b4f8 <__i2b>:
 800b4f8:	defffd04 	addi	sp,sp,-12
 800b4fc:	dc000015 	stw	r16,0(sp)
 800b500:	04000044 	movi	r16,1
 800b504:	dc400115 	stw	r17,4(sp)
 800b508:	2823883a 	mov	r17,r5
 800b50c:	800b883a 	mov	r5,r16
 800b510:	dfc00215 	stw	ra,8(sp)
 800b514:	800b0f80 	call	800b0f8 <_Balloc>
 800b518:	14400515 	stw	r17,20(r2)
 800b51c:	14000415 	stw	r16,16(r2)
 800b520:	dfc00217 	ldw	ra,8(sp)
 800b524:	dc400117 	ldw	r17,4(sp)
 800b528:	dc000017 	ldw	r16,0(sp)
 800b52c:	dec00304 	addi	sp,sp,12
 800b530:	f800283a 	ret

0800b534 <__multiply>:
 800b534:	defffa04 	addi	sp,sp,-24
 800b538:	dcc00315 	stw	r19,12(sp)
 800b53c:	dc800215 	stw	r18,8(sp)
 800b540:	2cc00417 	ldw	r19,16(r5)
 800b544:	34800417 	ldw	r18,16(r6)
 800b548:	dd000415 	stw	r20,16(sp)
 800b54c:	dc400115 	stw	r17,4(sp)
 800b550:	dfc00515 	stw	ra,20(sp)
 800b554:	dc000015 	stw	r16,0(sp)
 800b558:	2829883a 	mov	r20,r5
 800b55c:	3023883a 	mov	r17,r6
 800b560:	9c807016 	blt	r19,r18,800b724 <__multiply+0x1f0>
 800b564:	9005883a 	mov	r2,r18
 800b568:	9825883a 	mov	r18,r19
 800b56c:	1027883a 	mov	r19,r2
 800b570:	a0800217 	ldw	r2,8(r20)
 800b574:	94e1883a 	add	r16,r18,r19
 800b578:	a1400117 	ldw	r5,4(r20)
 800b57c:	1400010e 	bge	r2,r16,800b584 <__multiply+0x50>
 800b580:	29400044 	addi	r5,r5,1
 800b584:	800b0f80 	call	800b0f8 <_Balloc>
 800b588:	8417883a 	add	r11,r16,r16
 800b58c:	13000504 	addi	r12,r2,20
 800b590:	5ad7883a 	add	r11,r11,r11
 800b594:	62d7883a 	add	r11,r12,r11
 800b598:	6007883a 	mov	r3,r12
 800b59c:	62c0032e 	bgeu	r12,r11,800b5ac <__multiply+0x78>
 800b5a0:	18000015 	stw	zero,0(r3)
 800b5a4:	18c00104 	addi	r3,r3,4
 800b5a8:	1afffd36 	bltu	r3,r11,800b5a0 <__alt_data_end+0xfc00b5a0>
 800b5ac:	9ce7883a 	add	r19,r19,r19
 800b5b0:	94a5883a 	add	r18,r18,r18
 800b5b4:	89800504 	addi	r6,r17,20
 800b5b8:	9ce7883a 	add	r19,r19,r19
 800b5bc:	a3800504 	addi	r14,r20,20
 800b5c0:	94a5883a 	add	r18,r18,r18
 800b5c4:	34db883a 	add	r13,r6,r19
 800b5c8:	7495883a 	add	r10,r14,r18
 800b5cc:	3340422e 	bgeu	r6,r13,800b6d8 <__multiply+0x1a4>
 800b5d0:	34400017 	ldw	r17,0(r6)
 800b5d4:	8cbfffcc 	andi	r18,r17,65535
 800b5d8:	90001b26 	beq	r18,zero,800b648 <__multiply+0x114>
 800b5dc:	6013883a 	mov	r9,r12
 800b5e0:	7023883a 	mov	r17,r14
 800b5e4:	0011883a 	mov	r8,zero
 800b5e8:	88c00017 	ldw	r3,0(r17)
 800b5ec:	4bc00017 	ldw	r15,0(r9)
 800b5f0:	8c400104 	addi	r17,r17,4
 800b5f4:	19ffffcc 	andi	r7,r3,65535
 800b5f8:	3c8f383a 	mul	r7,r7,r18
 800b5fc:	1808d43a 	srli	r4,r3,16
 800b600:	797fffcc 	andi	r5,r15,65535
 800b604:	29cb883a 	add	r5,r5,r7
 800b608:	2a0b883a 	add	r5,r5,r8
 800b60c:	2489383a 	mul	r4,r4,r18
 800b610:	7806d43a 	srli	r3,r15,16
 800b614:	2810d43a 	srli	r8,r5,16
 800b618:	297fffcc 	andi	r5,r5,65535
 800b61c:	1907883a 	add	r3,r3,r4
 800b620:	1a07883a 	add	r3,r3,r8
 800b624:	1808943a 	slli	r4,r3,16
 800b628:	480f883a 	mov	r7,r9
 800b62c:	1810d43a 	srli	r8,r3,16
 800b630:	214ab03a 	or	r5,r4,r5
 800b634:	49400015 	stw	r5,0(r9)
 800b638:	4a400104 	addi	r9,r9,4
 800b63c:	8abfea36 	bltu	r17,r10,800b5e8 <__alt_data_end+0xfc00b5e8>
 800b640:	3a000115 	stw	r8,4(r7)
 800b644:	34400017 	ldw	r17,0(r6)
 800b648:	8822d43a 	srli	r17,r17,16
 800b64c:	88001f26 	beq	r17,zero,800b6cc <__multiply+0x198>
 800b650:	60c00017 	ldw	r3,0(r12)
 800b654:	7013883a 	mov	r9,r14
 800b658:	601f883a 	mov	r15,r12
 800b65c:	1811883a 	mov	r8,r3
 800b660:	6027883a 	mov	r19,r12
 800b664:	000f883a 	mov	r7,zero
 800b668:	00000106 	br	800b670 <__multiply+0x13c>
 800b66c:	9027883a 	mov	r19,r18
 800b670:	4940000b 	ldhu	r5,0(r9)
 800b674:	4010d43a 	srli	r8,r8,16
 800b678:	193fffcc 	andi	r4,r3,65535
 800b67c:	2c4b383a 	mul	r5,r5,r17
 800b680:	7bc00104 	addi	r15,r15,4
 800b684:	4a400104 	addi	r9,r9,4
 800b688:	2a0b883a 	add	r5,r5,r8
 800b68c:	29cb883a 	add	r5,r5,r7
 800b690:	2806943a 	slli	r3,r5,16
 800b694:	9c800104 	addi	r18,r19,4
 800b698:	280ad43a 	srli	r5,r5,16
 800b69c:	1908b03a 	or	r4,r3,r4
 800b6a0:	793fff15 	stw	r4,-4(r15)
 800b6a4:	48ffff17 	ldw	r3,-4(r9)
 800b6a8:	92000017 	ldw	r8,0(r18)
 800b6ac:	1806d43a 	srli	r3,r3,16
 800b6b0:	413fffcc 	andi	r4,r8,65535
 800b6b4:	1c47383a 	mul	r3,r3,r17
 800b6b8:	1907883a 	add	r3,r3,r4
 800b6bc:	1947883a 	add	r3,r3,r5
 800b6c0:	180ed43a 	srli	r7,r3,16
 800b6c4:	4abfe936 	bltu	r9,r10,800b66c <__alt_data_end+0xfc00b66c>
 800b6c8:	98c00115 	stw	r3,4(r19)
 800b6cc:	31800104 	addi	r6,r6,4
 800b6d0:	63000104 	addi	r12,r12,4
 800b6d4:	337fbe36 	bltu	r6,r13,800b5d0 <__alt_data_end+0xfc00b5d0>
 800b6d8:	0400090e 	bge	zero,r16,800b700 <__multiply+0x1cc>
 800b6dc:	58ffff17 	ldw	r3,-4(r11)
 800b6e0:	5affff04 	addi	r11,r11,-4
 800b6e4:	18000326 	beq	r3,zero,800b6f4 <__multiply+0x1c0>
 800b6e8:	00000506 	br	800b700 <__multiply+0x1cc>
 800b6ec:	58c00017 	ldw	r3,0(r11)
 800b6f0:	1800031e 	bne	r3,zero,800b700 <__multiply+0x1cc>
 800b6f4:	843fffc4 	addi	r16,r16,-1
 800b6f8:	5affff04 	addi	r11,r11,-4
 800b6fc:	803ffb1e 	bne	r16,zero,800b6ec <__alt_data_end+0xfc00b6ec>
 800b700:	14000415 	stw	r16,16(r2)
 800b704:	dfc00517 	ldw	ra,20(sp)
 800b708:	dd000417 	ldw	r20,16(sp)
 800b70c:	dcc00317 	ldw	r19,12(sp)
 800b710:	dc800217 	ldw	r18,8(sp)
 800b714:	dc400117 	ldw	r17,4(sp)
 800b718:	dc000017 	ldw	r16,0(sp)
 800b71c:	dec00604 	addi	sp,sp,24
 800b720:	f800283a 	ret
 800b724:	3029883a 	mov	r20,r6
 800b728:	2823883a 	mov	r17,r5
 800b72c:	003f9006 	br	800b570 <__alt_data_end+0xfc00b570>

0800b730 <__pow5mult>:
 800b730:	defffa04 	addi	sp,sp,-24
 800b734:	dcc00315 	stw	r19,12(sp)
 800b738:	dc800215 	stw	r18,8(sp)
 800b73c:	dc000015 	stw	r16,0(sp)
 800b740:	dfc00515 	stw	ra,20(sp)
 800b744:	dd000415 	stw	r20,16(sp)
 800b748:	dc400115 	stw	r17,4(sp)
 800b74c:	308000cc 	andi	r2,r6,3
 800b750:	3021883a 	mov	r16,r6
 800b754:	2027883a 	mov	r19,r4
 800b758:	2825883a 	mov	r18,r5
 800b75c:	10002e1e 	bne	r2,zero,800b818 <__pow5mult+0xe8>
 800b760:	8021d0ba 	srai	r16,r16,2
 800b764:	80001a26 	beq	r16,zero,800b7d0 <__pow5mult+0xa0>
 800b768:	9c401217 	ldw	r17,72(r19)
 800b76c:	8800061e 	bne	r17,zero,800b788 <__pow5mult+0x58>
 800b770:	00003406 	br	800b844 <__pow5mult+0x114>
 800b774:	8021d07a 	srai	r16,r16,1
 800b778:	80001526 	beq	r16,zero,800b7d0 <__pow5mult+0xa0>
 800b77c:	88800017 	ldw	r2,0(r17)
 800b780:	10001c26 	beq	r2,zero,800b7f4 <__pow5mult+0xc4>
 800b784:	1023883a 	mov	r17,r2
 800b788:	80c0004c 	andi	r3,r16,1
 800b78c:	183ff926 	beq	r3,zero,800b774 <__alt_data_end+0xfc00b774>
 800b790:	900b883a 	mov	r5,r18
 800b794:	880d883a 	mov	r6,r17
 800b798:	9809883a 	mov	r4,r19
 800b79c:	800b5340 	call	800b534 <__multiply>
 800b7a0:	90001b26 	beq	r18,zero,800b810 <__pow5mult+0xe0>
 800b7a4:	91c00117 	ldw	r7,4(r18)
 800b7a8:	98c01317 	ldw	r3,76(r19)
 800b7ac:	8021d07a 	srai	r16,r16,1
 800b7b0:	39cf883a 	add	r7,r7,r7
 800b7b4:	39cf883a 	add	r7,r7,r7
 800b7b8:	19c7883a 	add	r3,r3,r7
 800b7bc:	19000017 	ldw	r4,0(r3)
 800b7c0:	91000015 	stw	r4,0(r18)
 800b7c4:	1c800015 	stw	r18,0(r3)
 800b7c8:	1025883a 	mov	r18,r2
 800b7cc:	803feb1e 	bne	r16,zero,800b77c <__alt_data_end+0xfc00b77c>
 800b7d0:	9005883a 	mov	r2,r18
 800b7d4:	dfc00517 	ldw	ra,20(sp)
 800b7d8:	dd000417 	ldw	r20,16(sp)
 800b7dc:	dcc00317 	ldw	r19,12(sp)
 800b7e0:	dc800217 	ldw	r18,8(sp)
 800b7e4:	dc400117 	ldw	r17,4(sp)
 800b7e8:	dc000017 	ldw	r16,0(sp)
 800b7ec:	dec00604 	addi	sp,sp,24
 800b7f0:	f800283a 	ret
 800b7f4:	9809883a 	mov	r4,r19
 800b7f8:	880b883a 	mov	r5,r17
 800b7fc:	880d883a 	mov	r6,r17
 800b800:	800b5340 	call	800b534 <__multiply>
 800b804:	88800015 	stw	r2,0(r17)
 800b808:	10000015 	stw	zero,0(r2)
 800b80c:	003fdd06 	br	800b784 <__alt_data_end+0xfc00b784>
 800b810:	1025883a 	mov	r18,r2
 800b814:	003fd706 	br	800b774 <__alt_data_end+0xfc00b774>
 800b818:	10bfffc4 	addi	r2,r2,-1
 800b81c:	1085883a 	add	r2,r2,r2
 800b820:	00c200b4 	movhi	r3,2050
 800b824:	18fdca04 	addi	r3,r3,-2264
 800b828:	1085883a 	add	r2,r2,r2
 800b82c:	1885883a 	add	r2,r3,r2
 800b830:	11800017 	ldw	r6,0(r2)
 800b834:	000f883a 	mov	r7,zero
 800b838:	800b1c80 	call	800b1c8 <__multadd>
 800b83c:	1025883a 	mov	r18,r2
 800b840:	003fc706 	br	800b760 <__alt_data_end+0xfc00b760>
 800b844:	05000044 	movi	r20,1
 800b848:	9809883a 	mov	r4,r19
 800b84c:	a00b883a 	mov	r5,r20
 800b850:	800b0f80 	call	800b0f8 <_Balloc>
 800b854:	1023883a 	mov	r17,r2
 800b858:	00809c44 	movi	r2,625
 800b85c:	88800515 	stw	r2,20(r17)
 800b860:	8d000415 	stw	r20,16(r17)
 800b864:	9c401215 	stw	r17,72(r19)
 800b868:	88000015 	stw	zero,0(r17)
 800b86c:	003fc606 	br	800b788 <__alt_data_end+0xfc00b788>

0800b870 <__lshift>:
 800b870:	defff904 	addi	sp,sp,-28
 800b874:	dd000415 	stw	r20,16(sp)
 800b878:	dcc00315 	stw	r19,12(sp)
 800b87c:	3029d17a 	srai	r20,r6,5
 800b880:	2cc00417 	ldw	r19,16(r5)
 800b884:	28800217 	ldw	r2,8(r5)
 800b888:	dd400515 	stw	r21,20(sp)
 800b88c:	a4e7883a 	add	r19,r20,r19
 800b890:	dc800215 	stw	r18,8(sp)
 800b894:	dc400115 	stw	r17,4(sp)
 800b898:	dc000015 	stw	r16,0(sp)
 800b89c:	dfc00615 	stw	ra,24(sp)
 800b8a0:	9c000044 	addi	r16,r19,1
 800b8a4:	2823883a 	mov	r17,r5
 800b8a8:	302b883a 	mov	r21,r6
 800b8ac:	2025883a 	mov	r18,r4
 800b8b0:	29400117 	ldw	r5,4(r5)
 800b8b4:	1400030e 	bge	r2,r16,800b8c4 <__lshift+0x54>
 800b8b8:	1085883a 	add	r2,r2,r2
 800b8bc:	29400044 	addi	r5,r5,1
 800b8c0:	143ffd16 	blt	r2,r16,800b8b8 <__alt_data_end+0xfc00b8b8>
 800b8c4:	9009883a 	mov	r4,r18
 800b8c8:	800b0f80 	call	800b0f8 <_Balloc>
 800b8cc:	11c00504 	addi	r7,r2,20
 800b8d0:	0500090e 	bge	zero,r20,800b8f8 <__lshift+0x88>
 800b8d4:	3811883a 	mov	r8,r7
 800b8d8:	0007883a 	mov	r3,zero
 800b8dc:	40000015 	stw	zero,0(r8)
 800b8e0:	18c00044 	addi	r3,r3,1
 800b8e4:	42000104 	addi	r8,r8,4
 800b8e8:	1d3ffc1e 	bne	r3,r20,800b8dc <__alt_data_end+0xfc00b8dc>
 800b8ec:	18c7883a 	add	r3,r3,r3
 800b8f0:	18c7883a 	add	r3,r3,r3
 800b8f4:	38cf883a 	add	r7,r7,r3
 800b8f8:	89000417 	ldw	r4,16(r17)
 800b8fc:	88c00504 	addi	r3,r17,20
 800b900:	a98007cc 	andi	r6,r21,31
 800b904:	2109883a 	add	r4,r4,r4
 800b908:	2109883a 	add	r4,r4,r4
 800b90c:	1909883a 	add	r4,r3,r4
 800b910:	30002326 	beq	r6,zero,800b9a0 <__lshift+0x130>
 800b914:	01400804 	movi	r5,32
 800b918:	298bc83a 	sub	r5,r5,r6
 800b91c:	0013883a 	mov	r9,zero
 800b920:	1a000017 	ldw	r8,0(r3)
 800b924:	3815883a 	mov	r10,r7
 800b928:	39c00104 	addi	r7,r7,4
 800b92c:	4190983a 	sll	r8,r8,r6
 800b930:	18c00104 	addi	r3,r3,4
 800b934:	4a10b03a 	or	r8,r9,r8
 800b938:	3a3fff15 	stw	r8,-4(r7)
 800b93c:	1a3fff17 	ldw	r8,-4(r3)
 800b940:	4152d83a 	srl	r9,r8,r5
 800b944:	193ff636 	bltu	r3,r4,800b920 <__alt_data_end+0xfc00b920>
 800b948:	52400115 	stw	r9,4(r10)
 800b94c:	48000126 	beq	r9,zero,800b954 <__lshift+0xe4>
 800b950:	9c000084 	addi	r16,r19,2
 800b954:	89000117 	ldw	r4,4(r17)
 800b958:	90c01317 	ldw	r3,76(r18)
 800b95c:	843fffc4 	addi	r16,r16,-1
 800b960:	2109883a 	add	r4,r4,r4
 800b964:	2109883a 	add	r4,r4,r4
 800b968:	1907883a 	add	r3,r3,r4
 800b96c:	19000017 	ldw	r4,0(r3)
 800b970:	14000415 	stw	r16,16(r2)
 800b974:	89000015 	stw	r4,0(r17)
 800b978:	1c400015 	stw	r17,0(r3)
 800b97c:	dfc00617 	ldw	ra,24(sp)
 800b980:	dd400517 	ldw	r21,20(sp)
 800b984:	dd000417 	ldw	r20,16(sp)
 800b988:	dcc00317 	ldw	r19,12(sp)
 800b98c:	dc800217 	ldw	r18,8(sp)
 800b990:	dc400117 	ldw	r17,4(sp)
 800b994:	dc000017 	ldw	r16,0(sp)
 800b998:	dec00704 	addi	sp,sp,28
 800b99c:	f800283a 	ret
 800b9a0:	19400017 	ldw	r5,0(r3)
 800b9a4:	39c00104 	addi	r7,r7,4
 800b9a8:	18c00104 	addi	r3,r3,4
 800b9ac:	397fff15 	stw	r5,-4(r7)
 800b9b0:	193ffb36 	bltu	r3,r4,800b9a0 <__alt_data_end+0xfc00b9a0>
 800b9b4:	003fe706 	br	800b954 <__alt_data_end+0xfc00b954>

0800b9b8 <__mcmp>:
 800b9b8:	20800417 	ldw	r2,16(r4)
 800b9bc:	28c00417 	ldw	r3,16(r5)
 800b9c0:	10c5c83a 	sub	r2,r2,r3
 800b9c4:	1000111e 	bne	r2,zero,800ba0c <__mcmp+0x54>
 800b9c8:	18c7883a 	add	r3,r3,r3
 800b9cc:	18c7883a 	add	r3,r3,r3
 800b9d0:	21000504 	addi	r4,r4,20
 800b9d4:	29400504 	addi	r5,r5,20
 800b9d8:	20c5883a 	add	r2,r4,r3
 800b9dc:	28cb883a 	add	r5,r5,r3
 800b9e0:	00000106 	br	800b9e8 <__mcmp+0x30>
 800b9e4:	20800a2e 	bgeu	r4,r2,800ba10 <__mcmp+0x58>
 800b9e8:	10bfff04 	addi	r2,r2,-4
 800b9ec:	297fff04 	addi	r5,r5,-4
 800b9f0:	11800017 	ldw	r6,0(r2)
 800b9f4:	28c00017 	ldw	r3,0(r5)
 800b9f8:	30fffa26 	beq	r6,r3,800b9e4 <__alt_data_end+0xfc00b9e4>
 800b9fc:	30c00236 	bltu	r6,r3,800ba08 <__mcmp+0x50>
 800ba00:	00800044 	movi	r2,1
 800ba04:	f800283a 	ret
 800ba08:	00bfffc4 	movi	r2,-1
 800ba0c:	f800283a 	ret
 800ba10:	0005883a 	mov	r2,zero
 800ba14:	f800283a 	ret

0800ba18 <__mdiff>:
 800ba18:	defffb04 	addi	sp,sp,-20
 800ba1c:	dc000015 	stw	r16,0(sp)
 800ba20:	2821883a 	mov	r16,r5
 800ba24:	dcc00315 	stw	r19,12(sp)
 800ba28:	300b883a 	mov	r5,r6
 800ba2c:	2027883a 	mov	r19,r4
 800ba30:	8009883a 	mov	r4,r16
 800ba34:	dc800215 	stw	r18,8(sp)
 800ba38:	dfc00415 	stw	ra,16(sp)
 800ba3c:	dc400115 	stw	r17,4(sp)
 800ba40:	3025883a 	mov	r18,r6
 800ba44:	800b9b80 	call	800b9b8 <__mcmp>
 800ba48:	10005226 	beq	r2,zero,800bb94 <__mdiff+0x17c>
 800ba4c:	10004c16 	blt	r2,zero,800bb80 <__mdiff+0x168>
 800ba50:	0023883a 	mov	r17,zero
 800ba54:	81400117 	ldw	r5,4(r16)
 800ba58:	9809883a 	mov	r4,r19
 800ba5c:	800b0f80 	call	800b0f8 <_Balloc>
 800ba60:	83400417 	ldw	r13,16(r16)
 800ba64:	93800417 	ldw	r14,16(r18)
 800ba68:	81000504 	addi	r4,r16,20
 800ba6c:	6b59883a 	add	r12,r13,r13
 800ba70:	739d883a 	add	r14,r14,r14
 800ba74:	6319883a 	add	r12,r12,r12
 800ba78:	91800504 	addi	r6,r18,20
 800ba7c:	739d883a 	add	r14,r14,r14
 800ba80:	14400315 	stw	r17,12(r2)
 800ba84:	2319883a 	add	r12,r4,r12
 800ba88:	339d883a 	add	r14,r6,r14
 800ba8c:	12400504 	addi	r9,r2,20
 800ba90:	0007883a 	mov	r3,zero
 800ba94:	22000017 	ldw	r8,0(r4)
 800ba98:	32800017 	ldw	r10,0(r6)
 800ba9c:	4ac00104 	addi	r11,r9,4
 800baa0:	41ffffcc 	andi	r7,r8,65535
 800baa4:	38c7883a 	add	r3,r7,r3
 800baa8:	51ffffcc 	andi	r7,r10,65535
 800baac:	19cfc83a 	sub	r7,r3,r7
 800bab0:	4010d43a 	srli	r8,r8,16
 800bab4:	5014d43a 	srli	r10,r10,16
 800bab8:	3807d43a 	srai	r3,r7,16
 800babc:	39ffffcc 	andi	r7,r7,65535
 800bac0:	4291c83a 	sub	r8,r8,r10
 800bac4:	40c7883a 	add	r3,r8,r3
 800bac8:	1810943a 	slli	r8,r3,16
 800bacc:	31800104 	addi	r6,r6,4
 800bad0:	21000104 	addi	r4,r4,4
 800bad4:	41ceb03a 	or	r7,r8,r7
 800bad8:	49c00015 	stw	r7,0(r9)
 800badc:	1807d43a 	srai	r3,r3,16
 800bae0:	580b883a 	mov	r5,r11
 800bae4:	5813883a 	mov	r9,r11
 800bae8:	33bfea36 	bltu	r6,r14,800ba94 <__alt_data_end+0xfc00ba94>
 800baec:	2011883a 	mov	r8,r4
 800baf0:	2300152e 	bgeu	r4,r12,800bb48 <__mdiff+0x130>
 800baf4:	21400017 	ldw	r5,0(r4)
 800baf8:	4a400104 	addi	r9,r9,4
 800bafc:	21000104 	addi	r4,r4,4
 800bb00:	29ffffcc 	andi	r7,r5,65535
 800bb04:	38c7883a 	add	r3,r7,r3
 800bb08:	280ad43a 	srli	r5,r5,16
 800bb0c:	180dd43a 	srai	r6,r3,16
 800bb10:	19ffffcc 	andi	r7,r3,65535
 800bb14:	3147883a 	add	r3,r6,r5
 800bb18:	180a943a 	slli	r5,r3,16
 800bb1c:	1807d43a 	srai	r3,r3,16
 800bb20:	29ceb03a 	or	r7,r5,r7
 800bb24:	49ffff15 	stw	r7,-4(r9)
 800bb28:	233ff236 	bltu	r4,r12,800baf4 <__alt_data_end+0xfc00baf4>
 800bb2c:	0206303a 	nor	r3,zero,r8
 800bb30:	1b07883a 	add	r3,r3,r12
 800bb34:	1806d0ba 	srli	r3,r3,2
 800bb38:	18c00044 	addi	r3,r3,1
 800bb3c:	18c7883a 	add	r3,r3,r3
 800bb40:	18c7883a 	add	r3,r3,r3
 800bb44:	58cb883a 	add	r5,r11,r3
 800bb48:	28ffff04 	addi	r3,r5,-4
 800bb4c:	3800041e 	bne	r7,zero,800bb60 <__mdiff+0x148>
 800bb50:	18ffff04 	addi	r3,r3,-4
 800bb54:	19000017 	ldw	r4,0(r3)
 800bb58:	6b7fffc4 	addi	r13,r13,-1
 800bb5c:	203ffc26 	beq	r4,zero,800bb50 <__alt_data_end+0xfc00bb50>
 800bb60:	13400415 	stw	r13,16(r2)
 800bb64:	dfc00417 	ldw	ra,16(sp)
 800bb68:	dcc00317 	ldw	r19,12(sp)
 800bb6c:	dc800217 	ldw	r18,8(sp)
 800bb70:	dc400117 	ldw	r17,4(sp)
 800bb74:	dc000017 	ldw	r16,0(sp)
 800bb78:	dec00504 	addi	sp,sp,20
 800bb7c:	f800283a 	ret
 800bb80:	8005883a 	mov	r2,r16
 800bb84:	04400044 	movi	r17,1
 800bb88:	9021883a 	mov	r16,r18
 800bb8c:	1025883a 	mov	r18,r2
 800bb90:	003fb006 	br	800ba54 <__alt_data_end+0xfc00ba54>
 800bb94:	9809883a 	mov	r4,r19
 800bb98:	000b883a 	mov	r5,zero
 800bb9c:	800b0f80 	call	800b0f8 <_Balloc>
 800bba0:	00c00044 	movi	r3,1
 800bba4:	10c00415 	stw	r3,16(r2)
 800bba8:	10000515 	stw	zero,20(r2)
 800bbac:	003fed06 	br	800bb64 <__alt_data_end+0xfc00bb64>

0800bbb0 <__ulp>:
 800bbb0:	295ffc2c 	andhi	r5,r5,32752
 800bbb4:	00bf3034 	movhi	r2,64704
 800bbb8:	2887883a 	add	r3,r5,r2
 800bbbc:	00c0020e 	bge	zero,r3,800bbc8 <__ulp+0x18>
 800bbc0:	0005883a 	mov	r2,zero
 800bbc4:	f800283a 	ret
 800bbc8:	00c7c83a 	sub	r3,zero,r3
 800bbcc:	180bd53a 	srai	r5,r3,20
 800bbd0:	008004c4 	movi	r2,19
 800bbd4:	11400a0e 	bge	r2,r5,800bc00 <__ulp+0x50>
 800bbd8:	00800c84 	movi	r2,50
 800bbdc:	0007883a 	mov	r3,zero
 800bbe0:	11400516 	blt	r2,r5,800bbf8 <__ulp+0x48>
 800bbe4:	00800cc4 	movi	r2,51
 800bbe8:	114bc83a 	sub	r5,r2,r5
 800bbec:	00800044 	movi	r2,1
 800bbf0:	1144983a 	sll	r2,r2,r5
 800bbf4:	f800283a 	ret
 800bbf8:	00800044 	movi	r2,1
 800bbfc:	f800283a 	ret
 800bc00:	00800234 	movhi	r2,8
 800bc04:	1147d83a 	sra	r3,r2,r5
 800bc08:	0005883a 	mov	r2,zero
 800bc0c:	f800283a 	ret

0800bc10 <__b2d>:
 800bc10:	defffa04 	addi	sp,sp,-24
 800bc14:	dc000015 	stw	r16,0(sp)
 800bc18:	24000417 	ldw	r16,16(r4)
 800bc1c:	dc400115 	stw	r17,4(sp)
 800bc20:	24400504 	addi	r17,r4,20
 800bc24:	8421883a 	add	r16,r16,r16
 800bc28:	8421883a 	add	r16,r16,r16
 800bc2c:	8c21883a 	add	r16,r17,r16
 800bc30:	dc800215 	stw	r18,8(sp)
 800bc34:	84bfff17 	ldw	r18,-4(r16)
 800bc38:	dd000415 	stw	r20,16(sp)
 800bc3c:	dcc00315 	stw	r19,12(sp)
 800bc40:	9009883a 	mov	r4,r18
 800bc44:	2829883a 	mov	r20,r5
 800bc48:	dfc00515 	stw	ra,20(sp)
 800bc4c:	800b3e00 	call	800b3e0 <__hi0bits>
 800bc50:	00c00804 	movi	r3,32
 800bc54:	1887c83a 	sub	r3,r3,r2
 800bc58:	a0c00015 	stw	r3,0(r20)
 800bc5c:	00c00284 	movi	r3,10
 800bc60:	84ffff04 	addi	r19,r16,-4
 800bc64:	18801216 	blt	r3,r2,800bcb0 <__b2d+0xa0>
 800bc68:	014002c4 	movi	r5,11
 800bc6c:	2889c83a 	sub	r4,r5,r2
 800bc70:	9106d83a 	srl	r3,r18,r4
 800bc74:	18cffc34 	orhi	r3,r3,16368
 800bc78:	8cc0282e 	bgeu	r17,r19,800bd1c <__b2d+0x10c>
 800bc7c:	817ffe17 	ldw	r5,-8(r16)
 800bc80:	290ad83a 	srl	r5,r5,r4
 800bc84:	10800544 	addi	r2,r2,21
 800bc88:	9084983a 	sll	r2,r18,r2
 800bc8c:	2884b03a 	or	r2,r5,r2
 800bc90:	dfc00517 	ldw	ra,20(sp)
 800bc94:	dd000417 	ldw	r20,16(sp)
 800bc98:	dcc00317 	ldw	r19,12(sp)
 800bc9c:	dc800217 	ldw	r18,8(sp)
 800bca0:	dc400117 	ldw	r17,4(sp)
 800bca4:	dc000017 	ldw	r16,0(sp)
 800bca8:	dec00604 	addi	sp,sp,24
 800bcac:	f800283a 	ret
 800bcb0:	113ffd44 	addi	r4,r2,-11
 800bcb4:	8cc00f2e 	bgeu	r17,r19,800bcf4 <__b2d+0xe4>
 800bcb8:	81bffe04 	addi	r6,r16,-8
 800bcbc:	817ffe17 	ldw	r5,-8(r16)
 800bcc0:	20001326 	beq	r4,zero,800bd10 <__b2d+0x100>
 800bcc4:	00c00ac4 	movi	r3,43
 800bcc8:	1885c83a 	sub	r2,r3,r2
 800bccc:	2886d83a 	srl	r3,r5,r2
 800bcd0:	9124983a 	sll	r18,r18,r4
 800bcd4:	90e4b03a 	or	r18,r18,r3
 800bcd8:	90cffc34 	orhi	r3,r18,16368
 800bcdc:	8980112e 	bgeu	r17,r6,800bd24 <__b2d+0x114>
 800bce0:	81bffd17 	ldw	r6,-12(r16)
 800bce4:	308cd83a 	srl	r6,r6,r2
 800bce8:	2904983a 	sll	r2,r5,r4
 800bcec:	1184b03a 	or	r2,r2,r6
 800bcf0:	003fe706 	br	800bc90 <__alt_data_end+0xfc00bc90>
 800bcf4:	20000526 	beq	r4,zero,800bd0c <__b2d+0xfc>
 800bcf8:	9124983a 	sll	r18,r18,r4
 800bcfc:	000d883a 	mov	r6,zero
 800bd00:	000b883a 	mov	r5,zero
 800bd04:	90cffc34 	orhi	r3,r18,16368
 800bd08:	003ff706 	br	800bce8 <__alt_data_end+0xfc00bce8>
 800bd0c:	000b883a 	mov	r5,zero
 800bd10:	90cffc34 	orhi	r3,r18,16368
 800bd14:	2805883a 	mov	r2,r5
 800bd18:	003fdd06 	br	800bc90 <__alt_data_end+0xfc00bc90>
 800bd1c:	000b883a 	mov	r5,zero
 800bd20:	003fd806 	br	800bc84 <__alt_data_end+0xfc00bc84>
 800bd24:	000d883a 	mov	r6,zero
 800bd28:	003fef06 	br	800bce8 <__alt_data_end+0xfc00bce8>

0800bd2c <__d2b>:
 800bd2c:	defff704 	addi	sp,sp,-36
 800bd30:	dc000215 	stw	r16,8(sp)
 800bd34:	3021883a 	mov	r16,r6
 800bd38:	dc400315 	stw	r17,12(sp)
 800bd3c:	8022907a 	slli	r17,r16,1
 800bd40:	dd400715 	stw	r21,28(sp)
 800bd44:	282b883a 	mov	r21,r5
 800bd48:	01400044 	movi	r5,1
 800bd4c:	dd000615 	stw	r20,24(sp)
 800bd50:	dcc00515 	stw	r19,20(sp)
 800bd54:	dc800415 	stw	r18,16(sp)
 800bd58:	dfc00815 	stw	ra,32(sp)
 800bd5c:	3829883a 	mov	r20,r7
 800bd60:	dc800917 	ldw	r18,36(sp)
 800bd64:	8822d57a 	srli	r17,r17,21
 800bd68:	800b0f80 	call	800b0f8 <_Balloc>
 800bd6c:	1027883a 	mov	r19,r2
 800bd70:	00800434 	movhi	r2,16
 800bd74:	10bfffc4 	addi	r2,r2,-1
 800bd78:	808c703a 	and	r6,r16,r2
 800bd7c:	88000126 	beq	r17,zero,800bd84 <__d2b+0x58>
 800bd80:	31800434 	orhi	r6,r6,16
 800bd84:	d9800015 	stw	r6,0(sp)
 800bd88:	a8001f26 	beq	r21,zero,800be08 <__d2b+0xdc>
 800bd8c:	d9000104 	addi	r4,sp,4
 800bd90:	dd400115 	stw	r21,4(sp)
 800bd94:	800b4480 	call	800b448 <__lo0bits>
 800bd98:	d8c00017 	ldw	r3,0(sp)
 800bd9c:	1000291e 	bne	r2,zero,800be44 <__d2b+0x118>
 800bda0:	d9000117 	ldw	r4,4(sp)
 800bda4:	99000515 	stw	r4,20(r19)
 800bda8:	1820c03a 	cmpne	r16,r3,zero
 800bdac:	84000044 	addi	r16,r16,1
 800bdb0:	98c00615 	stw	r3,24(r19)
 800bdb4:	9c000415 	stw	r16,16(r19)
 800bdb8:	88001b1e 	bne	r17,zero,800be28 <__d2b+0xfc>
 800bdbc:	800690ba 	slli	r3,r16,2
 800bdc0:	10bef384 	addi	r2,r2,-1074
 800bdc4:	a0800015 	stw	r2,0(r20)
 800bdc8:	98c5883a 	add	r2,r19,r3
 800bdcc:	11000417 	ldw	r4,16(r2)
 800bdd0:	8020917a 	slli	r16,r16,5
 800bdd4:	800b3e00 	call	800b3e0 <__hi0bits>
 800bdd8:	8085c83a 	sub	r2,r16,r2
 800bddc:	90800015 	stw	r2,0(r18)
 800bde0:	9805883a 	mov	r2,r19
 800bde4:	dfc00817 	ldw	ra,32(sp)
 800bde8:	dd400717 	ldw	r21,28(sp)
 800bdec:	dd000617 	ldw	r20,24(sp)
 800bdf0:	dcc00517 	ldw	r19,20(sp)
 800bdf4:	dc800417 	ldw	r18,16(sp)
 800bdf8:	dc400317 	ldw	r17,12(sp)
 800bdfc:	dc000217 	ldw	r16,8(sp)
 800be00:	dec00904 	addi	sp,sp,36
 800be04:	f800283a 	ret
 800be08:	d809883a 	mov	r4,sp
 800be0c:	800b4480 	call	800b448 <__lo0bits>
 800be10:	d8c00017 	ldw	r3,0(sp)
 800be14:	04000044 	movi	r16,1
 800be18:	9c000415 	stw	r16,16(r19)
 800be1c:	98c00515 	stw	r3,20(r19)
 800be20:	10800804 	addi	r2,r2,32
 800be24:	883fe526 	beq	r17,zero,800bdbc <__alt_data_end+0xfc00bdbc>
 800be28:	8c7ef344 	addi	r17,r17,-1075
 800be2c:	88a3883a 	add	r17,r17,r2
 800be30:	00c00d44 	movi	r3,53
 800be34:	a4400015 	stw	r17,0(r20)
 800be38:	1885c83a 	sub	r2,r3,r2
 800be3c:	90800015 	stw	r2,0(r18)
 800be40:	003fe706 	br	800bde0 <__alt_data_end+0xfc00bde0>
 800be44:	01000804 	movi	r4,32
 800be48:	2089c83a 	sub	r4,r4,r2
 800be4c:	1908983a 	sll	r4,r3,r4
 800be50:	d9400117 	ldw	r5,4(sp)
 800be54:	1886d83a 	srl	r3,r3,r2
 800be58:	2148b03a 	or	r4,r4,r5
 800be5c:	99000515 	stw	r4,20(r19)
 800be60:	d8c00015 	stw	r3,0(sp)
 800be64:	003fd006 	br	800bda8 <__alt_data_end+0xfc00bda8>

0800be68 <__ratio>:
 800be68:	defff904 	addi	sp,sp,-28
 800be6c:	dc400315 	stw	r17,12(sp)
 800be70:	2823883a 	mov	r17,r5
 800be74:	d9400104 	addi	r5,sp,4
 800be78:	dfc00615 	stw	ra,24(sp)
 800be7c:	dcc00515 	stw	r19,20(sp)
 800be80:	dc800415 	stw	r18,16(sp)
 800be84:	2027883a 	mov	r19,r4
 800be88:	dc000215 	stw	r16,8(sp)
 800be8c:	800bc100 	call	800bc10 <__b2d>
 800be90:	8809883a 	mov	r4,r17
 800be94:	d80b883a 	mov	r5,sp
 800be98:	1025883a 	mov	r18,r2
 800be9c:	1821883a 	mov	r16,r3
 800bea0:	800bc100 	call	800bc10 <__b2d>
 800bea4:	8a400417 	ldw	r9,16(r17)
 800bea8:	9a000417 	ldw	r8,16(r19)
 800beac:	100d883a 	mov	r6,r2
 800beb0:	d8800017 	ldw	r2,0(sp)
 800beb4:	4251c83a 	sub	r8,r8,r9
 800beb8:	4012917a 	slli	r9,r8,5
 800bebc:	da000117 	ldw	r8,4(sp)
 800bec0:	4091c83a 	sub	r8,r8,r2
 800bec4:	4251883a 	add	r8,r8,r9
 800bec8:	02000d0e 	bge	zero,r8,800bf00 <__ratio+0x98>
 800becc:	4010953a 	slli	r8,r8,20
 800bed0:	4421883a 	add	r16,r8,r16
 800bed4:	9009883a 	mov	r4,r18
 800bed8:	800b883a 	mov	r5,r16
 800bedc:	180f883a 	mov	r7,r3
 800bee0:	80106ac0 	call	80106ac <__divdf3>
 800bee4:	dfc00617 	ldw	ra,24(sp)
 800bee8:	dcc00517 	ldw	r19,20(sp)
 800beec:	dc800417 	ldw	r18,16(sp)
 800bef0:	dc400317 	ldw	r17,12(sp)
 800bef4:	dc000217 	ldw	r16,8(sp)
 800bef8:	dec00704 	addi	sp,sp,28
 800befc:	f800283a 	ret
 800bf00:	4010953a 	slli	r8,r8,20
 800bf04:	1a07c83a 	sub	r3,r3,r8
 800bf08:	003ff206 	br	800bed4 <__alt_data_end+0xfc00bed4>

0800bf0c <_mprec_log10>:
 800bf0c:	defffe04 	addi	sp,sp,-8
 800bf10:	dc000015 	stw	r16,0(sp)
 800bf14:	dfc00115 	stw	ra,4(sp)
 800bf18:	008005c4 	movi	r2,23
 800bf1c:	2021883a 	mov	r16,r4
 800bf20:	11000d0e 	bge	r2,r4,800bf58 <_mprec_log10+0x4c>
 800bf24:	0005883a 	mov	r2,zero
 800bf28:	00cffc34 	movhi	r3,16368
 800bf2c:	843fffc4 	addi	r16,r16,-1
 800bf30:	1009883a 	mov	r4,r2
 800bf34:	180b883a 	mov	r5,r3
 800bf38:	000d883a 	mov	r6,zero
 800bf3c:	01d00934 	movhi	r7,16420
 800bf40:	8010ffc0 	call	8010ffc <__muldf3>
 800bf44:	803ff91e 	bne	r16,zero,800bf2c <__alt_data_end+0xfc00bf2c>
 800bf48:	dfc00117 	ldw	ra,4(sp)
 800bf4c:	dc000017 	ldw	r16,0(sp)
 800bf50:	dec00204 	addi	sp,sp,8
 800bf54:	f800283a 	ret
 800bf58:	202090fa 	slli	r16,r4,3
 800bf5c:	008200b4 	movhi	r2,2050
 800bf60:	10bde104 	addi	r2,r2,-2172
 800bf64:	1421883a 	add	r16,r2,r16
 800bf68:	80800017 	ldw	r2,0(r16)
 800bf6c:	80c00117 	ldw	r3,4(r16)
 800bf70:	dfc00117 	ldw	ra,4(sp)
 800bf74:	dc000017 	ldw	r16,0(sp)
 800bf78:	dec00204 	addi	sp,sp,8
 800bf7c:	f800283a 	ret

0800bf80 <__copybits>:
 800bf80:	297fffc4 	addi	r5,r5,-1
 800bf84:	280fd17a 	srai	r7,r5,5
 800bf88:	30c00417 	ldw	r3,16(r6)
 800bf8c:	30800504 	addi	r2,r6,20
 800bf90:	39c00044 	addi	r7,r7,1
 800bf94:	18c7883a 	add	r3,r3,r3
 800bf98:	39cf883a 	add	r7,r7,r7
 800bf9c:	18c7883a 	add	r3,r3,r3
 800bfa0:	39cf883a 	add	r7,r7,r7
 800bfa4:	10c7883a 	add	r3,r2,r3
 800bfa8:	21cf883a 	add	r7,r4,r7
 800bfac:	10c00d2e 	bgeu	r2,r3,800bfe4 <__copybits+0x64>
 800bfb0:	200b883a 	mov	r5,r4
 800bfb4:	12000017 	ldw	r8,0(r2)
 800bfb8:	29400104 	addi	r5,r5,4
 800bfbc:	10800104 	addi	r2,r2,4
 800bfc0:	2a3fff15 	stw	r8,-4(r5)
 800bfc4:	10fffb36 	bltu	r2,r3,800bfb4 <__alt_data_end+0xfc00bfb4>
 800bfc8:	1985c83a 	sub	r2,r3,r6
 800bfcc:	10bffac4 	addi	r2,r2,-21
 800bfd0:	1004d0ba 	srli	r2,r2,2
 800bfd4:	10800044 	addi	r2,r2,1
 800bfd8:	1085883a 	add	r2,r2,r2
 800bfdc:	1085883a 	add	r2,r2,r2
 800bfe0:	2089883a 	add	r4,r4,r2
 800bfe4:	21c0032e 	bgeu	r4,r7,800bff4 <__copybits+0x74>
 800bfe8:	20000015 	stw	zero,0(r4)
 800bfec:	21000104 	addi	r4,r4,4
 800bff0:	21fffd36 	bltu	r4,r7,800bfe8 <__alt_data_end+0xfc00bfe8>
 800bff4:	f800283a 	ret

0800bff8 <__any_on>:
 800bff8:	20c00417 	ldw	r3,16(r4)
 800bffc:	2805d17a 	srai	r2,r5,5
 800c000:	21000504 	addi	r4,r4,20
 800c004:	18800d0e 	bge	r3,r2,800c03c <__any_on+0x44>
 800c008:	18c7883a 	add	r3,r3,r3
 800c00c:	18c7883a 	add	r3,r3,r3
 800c010:	20c7883a 	add	r3,r4,r3
 800c014:	20c0192e 	bgeu	r4,r3,800c07c <__any_on+0x84>
 800c018:	18bfff17 	ldw	r2,-4(r3)
 800c01c:	18ffff04 	addi	r3,r3,-4
 800c020:	1000041e 	bne	r2,zero,800c034 <__any_on+0x3c>
 800c024:	20c0142e 	bgeu	r4,r3,800c078 <__any_on+0x80>
 800c028:	18ffff04 	addi	r3,r3,-4
 800c02c:	19400017 	ldw	r5,0(r3)
 800c030:	283ffc26 	beq	r5,zero,800c024 <__alt_data_end+0xfc00c024>
 800c034:	00800044 	movi	r2,1
 800c038:	f800283a 	ret
 800c03c:	10c00a0e 	bge	r2,r3,800c068 <__any_on+0x70>
 800c040:	1085883a 	add	r2,r2,r2
 800c044:	1085883a 	add	r2,r2,r2
 800c048:	294007cc 	andi	r5,r5,31
 800c04c:	2087883a 	add	r3,r4,r2
 800c050:	283ff026 	beq	r5,zero,800c014 <__alt_data_end+0xfc00c014>
 800c054:	19800017 	ldw	r6,0(r3)
 800c058:	3144d83a 	srl	r2,r6,r5
 800c05c:	114a983a 	sll	r5,r2,r5
 800c060:	29bff41e 	bne	r5,r6,800c034 <__alt_data_end+0xfc00c034>
 800c064:	003feb06 	br	800c014 <__alt_data_end+0xfc00c014>
 800c068:	1085883a 	add	r2,r2,r2
 800c06c:	1085883a 	add	r2,r2,r2
 800c070:	2087883a 	add	r3,r4,r2
 800c074:	003fe706 	br	800c014 <__alt_data_end+0xfc00c014>
 800c078:	f800283a 	ret
 800c07c:	0005883a 	mov	r2,zero
 800c080:	f800283a 	ret

0800c084 <_putc_r>:
 800c084:	defffc04 	addi	sp,sp,-16
 800c088:	dc000215 	stw	r16,8(sp)
 800c08c:	dfc00315 	stw	ra,12(sp)
 800c090:	2021883a 	mov	r16,r4
 800c094:	20000226 	beq	r4,zero,800c0a0 <_putc_r+0x1c>
 800c098:	20800e17 	ldw	r2,56(r4)
 800c09c:	10001b26 	beq	r2,zero,800c10c <_putc_r+0x88>
 800c0a0:	30800217 	ldw	r2,8(r6)
 800c0a4:	10bfffc4 	addi	r2,r2,-1
 800c0a8:	30800215 	stw	r2,8(r6)
 800c0ac:	10000a16 	blt	r2,zero,800c0d8 <_putc_r+0x54>
 800c0b0:	30800017 	ldw	r2,0(r6)
 800c0b4:	11400005 	stb	r5,0(r2)
 800c0b8:	30800017 	ldw	r2,0(r6)
 800c0bc:	10c00044 	addi	r3,r2,1
 800c0c0:	30c00015 	stw	r3,0(r6)
 800c0c4:	10800003 	ldbu	r2,0(r2)
 800c0c8:	dfc00317 	ldw	ra,12(sp)
 800c0cc:	dc000217 	ldw	r16,8(sp)
 800c0d0:	dec00404 	addi	sp,sp,16
 800c0d4:	f800283a 	ret
 800c0d8:	30c00617 	ldw	r3,24(r6)
 800c0dc:	10c00616 	blt	r2,r3,800c0f8 <_putc_r+0x74>
 800c0e0:	30800017 	ldw	r2,0(r6)
 800c0e4:	00c00284 	movi	r3,10
 800c0e8:	11400005 	stb	r5,0(r2)
 800c0ec:	30800017 	ldw	r2,0(r6)
 800c0f0:	11400003 	ldbu	r5,0(r2)
 800c0f4:	28fff11e 	bne	r5,r3,800c0bc <__alt_data_end+0xfc00c0bc>
 800c0f8:	8009883a 	mov	r4,r16
 800c0fc:	dfc00317 	ldw	ra,12(sp)
 800c100:	dc000217 	ldw	r16,8(sp)
 800c104:	dec00404 	addi	sp,sp,16
 800c108:	800f0f81 	jmpi	800f0f8 <__swbuf_r>
 800c10c:	d9400015 	stw	r5,0(sp)
 800c110:	d9800115 	stw	r6,4(sp)
 800c114:	80097a00 	call	80097a0 <__sinit>
 800c118:	d9800117 	ldw	r6,4(sp)
 800c11c:	d9400017 	ldw	r5,0(sp)
 800c120:	003fdf06 	br	800c0a0 <__alt_data_end+0xfc00c0a0>

0800c124 <putc>:
 800c124:	defffc04 	addi	sp,sp,-16
 800c128:	dc400115 	stw	r17,4(sp)
 800c12c:	044200b4 	movhi	r17,2050
 800c130:	8c44ed04 	addi	r17,r17,5044
 800c134:	dc800215 	stw	r18,8(sp)
 800c138:	2025883a 	mov	r18,r4
 800c13c:	89000017 	ldw	r4,0(r17)
 800c140:	dc000015 	stw	r16,0(sp)
 800c144:	dfc00315 	stw	ra,12(sp)
 800c148:	2821883a 	mov	r16,r5
 800c14c:	20000226 	beq	r4,zero,800c158 <putc+0x34>
 800c150:	20c00e17 	ldw	r3,56(r4)
 800c154:	18001a26 	beq	r3,zero,800c1c0 <putc+0x9c>
 800c158:	80800217 	ldw	r2,8(r16)
 800c15c:	10bfffc4 	addi	r2,r2,-1
 800c160:	80800215 	stw	r2,8(r16)
 800c164:	10000c16 	blt	r2,zero,800c198 <putc+0x74>
 800c168:	80800017 	ldw	r2,0(r16)
 800c16c:	14800005 	stb	r18,0(r2)
 800c170:	80800017 	ldw	r2,0(r16)
 800c174:	10c00044 	addi	r3,r2,1
 800c178:	80c00015 	stw	r3,0(r16)
 800c17c:	10800003 	ldbu	r2,0(r2)
 800c180:	dfc00317 	ldw	ra,12(sp)
 800c184:	dc800217 	ldw	r18,8(sp)
 800c188:	dc400117 	ldw	r17,4(sp)
 800c18c:	dc000017 	ldw	r16,0(sp)
 800c190:	dec00404 	addi	sp,sp,16
 800c194:	f800283a 	ret
 800c198:	80c00617 	ldw	r3,24(r16)
 800c19c:	10c00a16 	blt	r2,r3,800c1c8 <putc+0xa4>
 800c1a0:	80800017 	ldw	r2,0(r16)
 800c1a4:	00c00284 	movi	r3,10
 800c1a8:	14800005 	stb	r18,0(r2)
 800c1ac:	80800017 	ldw	r2,0(r16)
 800c1b0:	11400003 	ldbu	r5,0(r2)
 800c1b4:	28ffef1e 	bne	r5,r3,800c174 <__alt_data_end+0xfc00c174>
 800c1b8:	89000017 	ldw	r4,0(r17)
 800c1bc:	00000406 	br	800c1d0 <putc+0xac>
 800c1c0:	80097a00 	call	80097a0 <__sinit>
 800c1c4:	003fe406 	br	800c158 <__alt_data_end+0xfc00c158>
 800c1c8:	89000017 	ldw	r4,0(r17)
 800c1cc:	900b883a 	mov	r5,r18
 800c1d0:	800d883a 	mov	r6,r16
 800c1d4:	dfc00317 	ldw	ra,12(sp)
 800c1d8:	dc800217 	ldw	r18,8(sp)
 800c1dc:	dc400117 	ldw	r17,4(sp)
 800c1e0:	dc000017 	ldw	r16,0(sp)
 800c1e4:	dec00404 	addi	sp,sp,16
 800c1e8:	800f0f81 	jmpi	800f0f8 <__swbuf_r>

0800c1ec <_realloc_r>:
 800c1ec:	defff604 	addi	sp,sp,-40
 800c1f0:	dcc00315 	stw	r19,12(sp)
 800c1f4:	dc400115 	stw	r17,4(sp)
 800c1f8:	dfc00915 	stw	ra,36(sp)
 800c1fc:	df000815 	stw	fp,32(sp)
 800c200:	ddc00715 	stw	r23,28(sp)
 800c204:	dd800615 	stw	r22,24(sp)
 800c208:	dd400515 	stw	r21,20(sp)
 800c20c:	dd000415 	stw	r20,16(sp)
 800c210:	dc800215 	stw	r18,8(sp)
 800c214:	dc000015 	stw	r16,0(sp)
 800c218:	2827883a 	mov	r19,r5
 800c21c:	3023883a 	mov	r17,r6
 800c220:	2800bf26 	beq	r5,zero,800c520 <_realloc_r+0x334>
 800c224:	2025883a 	mov	r18,r4
 800c228:	80126540 	call	8012654 <__malloc_lock>
 800c22c:	98ffff17 	ldw	r3,-4(r19)
 800c230:	01bfff04 	movi	r6,-4
 800c234:	890002c4 	addi	r4,r17,11
 800c238:	01c00584 	movi	r7,22
 800c23c:	9d7ffe04 	addi	r21,r19,-8
 800c240:	19a0703a 	and	r16,r3,r6
 800c244:	39003f2e 	bgeu	r7,r4,800c344 <_realloc_r+0x158>
 800c248:	053ffe04 	movi	r20,-8
 800c24c:	2528703a 	and	r20,r4,r20
 800c250:	a00f883a 	mov	r7,r20
 800c254:	a0008216 	blt	r20,zero,800c460 <_realloc_r+0x274>
 800c258:	a4408136 	bltu	r20,r17,800c460 <_realloc_r+0x274>
 800c25c:	81c03c0e 	bge	r16,r7,800c350 <_realloc_r+0x164>
 800c260:	070200b4 	movhi	fp,2050
 800c264:	e73f5d04 	addi	fp,fp,-652
 800c268:	e1000217 	ldw	r4,8(fp)
 800c26c:	ac05883a 	add	r2,r21,r16
 800c270:	2080bf26 	beq	r4,r2,800c570 <_realloc_r+0x384>
 800c274:	11000117 	ldw	r4,4(r2)
 800c278:	023fff84 	movi	r8,-2
 800c27c:	2210703a 	and	r8,r4,r8
 800c280:	1211883a 	add	r8,r2,r8
 800c284:	41400117 	ldw	r5,4(r8)
 800c288:	2940004c 	andi	r5,r5,1
 800c28c:	28004a1e 	bne	r5,zero,800c3b8 <_realloc_r+0x1cc>
 800c290:	017fff04 	movi	r5,-4
 800c294:	2148703a 	and	r4,r4,r5
 800c298:	2409883a 	add	r4,r4,r16
 800c29c:	21c0ad0e 	bge	r4,r7,800c554 <_realloc_r+0x368>
 800c2a0:	18c0004c 	andi	r3,r3,1
 800c2a4:	18007f1e 	bne	r3,zero,800c4a4 <_realloc_r+0x2b8>
 800c2a8:	9dfffe17 	ldw	r23,-8(r19)
 800c2ac:	adefc83a 	sub	r23,r21,r23
 800c2b0:	bd800117 	ldw	r22,4(r23)
 800c2b4:	b14a703a 	and	r5,r22,r5
 800c2b8:	216d883a 	add	r22,r4,r5
 800c2bc:	b1c04516 	blt	r22,r7,800c3d4 <_realloc_r+0x1e8>
 800c2c0:	10c00317 	ldw	r3,12(r2)
 800c2c4:	10800217 	ldw	r2,8(r2)
 800c2c8:	81bfff04 	addi	r6,r16,-4
 800c2cc:	bc400204 	addi	r17,r23,8
 800c2d0:	10c00315 	stw	r3,12(r2)
 800c2d4:	18800215 	stw	r2,8(r3)
 800c2d8:	b9400217 	ldw	r5,8(r23)
 800c2dc:	b8c00317 	ldw	r3,12(r23)
 800c2e0:	00800904 	movi	r2,36
 800c2e4:	28c00315 	stw	r3,12(r5)
 800c2e8:	19400215 	stw	r5,8(r3)
 800c2ec:	1180ef36 	bltu	r2,r6,800c6ac <_realloc_r+0x4c0>
 800c2f0:	008004c4 	movi	r2,19
 800c2f4:	1180da2e 	bgeu	r2,r6,800c660 <_realloc_r+0x474>
 800c2f8:	98800017 	ldw	r2,0(r19)
 800c2fc:	b8800215 	stw	r2,8(r23)
 800c300:	98800117 	ldw	r2,4(r19)
 800c304:	b8800315 	stw	r2,12(r23)
 800c308:	008006c4 	movi	r2,27
 800c30c:	1180fc2e 	bgeu	r2,r6,800c700 <_realloc_r+0x514>
 800c310:	98800217 	ldw	r2,8(r19)
 800c314:	b8800415 	stw	r2,16(r23)
 800c318:	98800317 	ldw	r2,12(r19)
 800c31c:	b8800515 	stw	r2,20(r23)
 800c320:	00800904 	movi	r2,36
 800c324:	3080421e 	bne	r6,r2,800c430 <_realloc_r+0x244>
 800c328:	98800417 	ldw	r2,16(r19)
 800c32c:	9cc00604 	addi	r19,r19,24
 800c330:	b8c00804 	addi	r3,r23,32
 800c334:	b8800615 	stw	r2,24(r23)
 800c338:	98bfff17 	ldw	r2,-4(r19)
 800c33c:	b8800715 	stw	r2,28(r23)
 800c340:	00003d06 	br	800c438 <_realloc_r+0x24c>
 800c344:	01c00404 	movi	r7,16
 800c348:	3829883a 	mov	r20,r7
 800c34c:	003fc206 	br	800c258 <__alt_data_end+0xfc00c258>
 800c350:	9823883a 	mov	r17,r19
 800c354:	850fc83a 	sub	r7,r16,r20
 800c358:	008003c4 	movi	r2,15
 800c35c:	18c0004c 	andi	r3,r3,1
 800c360:	11c04336 	bltu	r2,r7,800c470 <_realloc_r+0x284>
 800c364:	1c06b03a 	or	r3,r3,r16
 800c368:	a8c00115 	stw	r3,4(r21)
 800c36c:	ac21883a 	add	r16,r21,r16
 800c370:	80c00117 	ldw	r3,4(r16)
 800c374:	18c00054 	ori	r3,r3,1
 800c378:	80c00115 	stw	r3,4(r16)
 800c37c:	9009883a 	mov	r4,r18
 800c380:	80126740 	call	8012674 <__malloc_unlock>
 800c384:	8805883a 	mov	r2,r17
 800c388:	dfc00917 	ldw	ra,36(sp)
 800c38c:	df000817 	ldw	fp,32(sp)
 800c390:	ddc00717 	ldw	r23,28(sp)
 800c394:	dd800617 	ldw	r22,24(sp)
 800c398:	dd400517 	ldw	r21,20(sp)
 800c39c:	dd000417 	ldw	r20,16(sp)
 800c3a0:	dcc00317 	ldw	r19,12(sp)
 800c3a4:	dc800217 	ldw	r18,8(sp)
 800c3a8:	dc400117 	ldw	r17,4(sp)
 800c3ac:	dc000017 	ldw	r16,0(sp)
 800c3b0:	dec00a04 	addi	sp,sp,40
 800c3b4:	f800283a 	ret
 800c3b8:	18c0004c 	andi	r3,r3,1
 800c3bc:	1800391e 	bne	r3,zero,800c4a4 <_realloc_r+0x2b8>
 800c3c0:	9dfffe17 	ldw	r23,-8(r19)
 800c3c4:	00bfff04 	movi	r2,-4
 800c3c8:	adefc83a 	sub	r23,r21,r23
 800c3cc:	b9400117 	ldw	r5,4(r23)
 800c3d0:	288a703a 	and	r5,r5,r2
 800c3d4:	2c2d883a 	add	r22,r5,r16
 800c3d8:	b1c03216 	blt	r22,r7,800c4a4 <_realloc_r+0x2b8>
 800c3dc:	b8800317 	ldw	r2,12(r23)
 800c3e0:	b8c00217 	ldw	r3,8(r23)
 800c3e4:	81bfff04 	addi	r6,r16,-4
 800c3e8:	01000904 	movi	r4,36
 800c3ec:	18800315 	stw	r2,12(r3)
 800c3f0:	10c00215 	stw	r3,8(r2)
 800c3f4:	bc400204 	addi	r17,r23,8
 800c3f8:	2180ac36 	bltu	r4,r6,800c6ac <_realloc_r+0x4c0>
 800c3fc:	008004c4 	movi	r2,19
 800c400:	1180972e 	bgeu	r2,r6,800c660 <_realloc_r+0x474>
 800c404:	98800017 	ldw	r2,0(r19)
 800c408:	b8800215 	stw	r2,8(r23)
 800c40c:	98800117 	ldw	r2,4(r19)
 800c410:	b8800315 	stw	r2,12(r23)
 800c414:	008006c4 	movi	r2,27
 800c418:	1180b92e 	bgeu	r2,r6,800c700 <_realloc_r+0x514>
 800c41c:	98800217 	ldw	r2,8(r19)
 800c420:	b8800415 	stw	r2,16(r23)
 800c424:	98800317 	ldw	r2,12(r19)
 800c428:	b8800515 	stw	r2,20(r23)
 800c42c:	313fbe26 	beq	r6,r4,800c328 <__alt_data_end+0xfc00c328>
 800c430:	b8c00604 	addi	r3,r23,24
 800c434:	9cc00404 	addi	r19,r19,16
 800c438:	98800017 	ldw	r2,0(r19)
 800c43c:	b021883a 	mov	r16,r22
 800c440:	b82b883a 	mov	r21,r23
 800c444:	18800015 	stw	r2,0(r3)
 800c448:	98800117 	ldw	r2,4(r19)
 800c44c:	18800115 	stw	r2,4(r3)
 800c450:	98800217 	ldw	r2,8(r19)
 800c454:	18800215 	stw	r2,8(r3)
 800c458:	b8c00117 	ldw	r3,4(r23)
 800c45c:	003fbd06 	br	800c354 <__alt_data_end+0xfc00c354>
 800c460:	00800304 	movi	r2,12
 800c464:	90800015 	stw	r2,0(r18)
 800c468:	0005883a 	mov	r2,zero
 800c46c:	003fc606 	br	800c388 <__alt_data_end+0xfc00c388>
 800c470:	1d06b03a 	or	r3,r3,r20
 800c474:	ad0b883a 	add	r5,r21,r20
 800c478:	a8c00115 	stw	r3,4(r21)
 800c47c:	38800054 	ori	r2,r7,1
 800c480:	28800115 	stw	r2,4(r5)
 800c484:	29cf883a 	add	r7,r5,r7
 800c488:	38800117 	ldw	r2,4(r7)
 800c48c:	9009883a 	mov	r4,r18
 800c490:	29400204 	addi	r5,r5,8
 800c494:	10800054 	ori	r2,r2,1
 800c498:	38800115 	stw	r2,4(r7)
 800c49c:	80099140 	call	8009914 <_free_r>
 800c4a0:	003fb606 	br	800c37c <__alt_data_end+0xfc00c37c>
 800c4a4:	880b883a 	mov	r5,r17
 800c4a8:	9009883a 	mov	r4,r18
 800c4ac:	800a4b00 	call	800a4b0 <_malloc_r>
 800c4b0:	1023883a 	mov	r17,r2
 800c4b4:	1000aa26 	beq	r2,zero,800c760 <_realloc_r+0x574>
 800c4b8:	98ffff17 	ldw	r3,-4(r19)
 800c4bc:	113ffe04 	addi	r4,r2,-8
 800c4c0:	00bfff84 	movi	r2,-2
 800c4c4:	1884703a 	and	r2,r3,r2
 800c4c8:	a885883a 	add	r2,r21,r2
 800c4cc:	20808626 	beq	r4,r2,800c6e8 <_realloc_r+0x4fc>
 800c4d0:	81bfff04 	addi	r6,r16,-4
 800c4d4:	00800904 	movi	r2,36
 800c4d8:	11807036 	bltu	r2,r6,800c69c <_realloc_r+0x4b0>
 800c4dc:	00c004c4 	movi	r3,19
 800c4e0:	19805636 	bltu	r3,r6,800c63c <_realloc_r+0x450>
 800c4e4:	8805883a 	mov	r2,r17
 800c4e8:	9807883a 	mov	r3,r19
 800c4ec:	19000017 	ldw	r4,0(r3)
 800c4f0:	11000015 	stw	r4,0(r2)
 800c4f4:	19000117 	ldw	r4,4(r3)
 800c4f8:	11000115 	stw	r4,4(r2)
 800c4fc:	18c00217 	ldw	r3,8(r3)
 800c500:	10c00215 	stw	r3,8(r2)
 800c504:	980b883a 	mov	r5,r19
 800c508:	9009883a 	mov	r4,r18
 800c50c:	80099140 	call	8009914 <_free_r>
 800c510:	9009883a 	mov	r4,r18
 800c514:	80126740 	call	8012674 <__malloc_unlock>
 800c518:	8805883a 	mov	r2,r17
 800c51c:	003f9a06 	br	800c388 <__alt_data_end+0xfc00c388>
 800c520:	300b883a 	mov	r5,r6
 800c524:	dfc00917 	ldw	ra,36(sp)
 800c528:	df000817 	ldw	fp,32(sp)
 800c52c:	ddc00717 	ldw	r23,28(sp)
 800c530:	dd800617 	ldw	r22,24(sp)
 800c534:	dd400517 	ldw	r21,20(sp)
 800c538:	dd000417 	ldw	r20,16(sp)
 800c53c:	dcc00317 	ldw	r19,12(sp)
 800c540:	dc800217 	ldw	r18,8(sp)
 800c544:	dc400117 	ldw	r17,4(sp)
 800c548:	dc000017 	ldw	r16,0(sp)
 800c54c:	dec00a04 	addi	sp,sp,40
 800c550:	800a4b01 	jmpi	800a4b0 <_malloc_r>
 800c554:	11400317 	ldw	r5,12(r2)
 800c558:	10800217 	ldw	r2,8(r2)
 800c55c:	9823883a 	mov	r17,r19
 800c560:	2021883a 	mov	r16,r4
 800c564:	11400315 	stw	r5,12(r2)
 800c568:	28800215 	stw	r2,8(r5)
 800c56c:	003f7906 	br	800c354 <__alt_data_end+0xfc00c354>
 800c570:	21000117 	ldw	r4,4(r4)
 800c574:	00bfff04 	movi	r2,-4
 800c578:	a1800404 	addi	r6,r20,16
 800c57c:	2088703a 	and	r4,r4,r2
 800c580:	2409883a 	add	r4,r4,r16
 800c584:	2180380e 	bge	r4,r6,800c668 <_realloc_r+0x47c>
 800c588:	18c0004c 	andi	r3,r3,1
 800c58c:	183fc51e 	bne	r3,zero,800c4a4 <__alt_data_end+0xfc00c4a4>
 800c590:	9dfffe17 	ldw	r23,-8(r19)
 800c594:	adefc83a 	sub	r23,r21,r23
 800c598:	b9400117 	ldw	r5,4(r23)
 800c59c:	288a703a 	and	r5,r5,r2
 800c5a0:	216d883a 	add	r22,r4,r5
 800c5a4:	b1bf8b16 	blt	r22,r6,800c3d4 <__alt_data_end+0xfc00c3d4>
 800c5a8:	b8800317 	ldw	r2,12(r23)
 800c5ac:	b8c00217 	ldw	r3,8(r23)
 800c5b0:	81bfff04 	addi	r6,r16,-4
 800c5b4:	01000904 	movi	r4,36
 800c5b8:	18800315 	stw	r2,12(r3)
 800c5bc:	10c00215 	stw	r3,8(r2)
 800c5c0:	bc400204 	addi	r17,r23,8
 800c5c4:	21805a36 	bltu	r4,r6,800c730 <_realloc_r+0x544>
 800c5c8:	008004c4 	movi	r2,19
 800c5cc:	1180562e 	bgeu	r2,r6,800c728 <_realloc_r+0x53c>
 800c5d0:	98800017 	ldw	r2,0(r19)
 800c5d4:	b8800215 	stw	r2,8(r23)
 800c5d8:	98800117 	ldw	r2,4(r19)
 800c5dc:	b8800315 	stw	r2,12(r23)
 800c5e0:	008006c4 	movi	r2,27
 800c5e4:	11805636 	bltu	r2,r6,800c740 <_realloc_r+0x554>
 800c5e8:	b8800404 	addi	r2,r23,16
 800c5ec:	9cc00204 	addi	r19,r19,8
 800c5f0:	98c00017 	ldw	r3,0(r19)
 800c5f4:	10c00015 	stw	r3,0(r2)
 800c5f8:	98c00117 	ldw	r3,4(r19)
 800c5fc:	10c00115 	stw	r3,4(r2)
 800c600:	98c00217 	ldw	r3,8(r19)
 800c604:	10c00215 	stw	r3,8(r2)
 800c608:	bd07883a 	add	r3,r23,r20
 800c60c:	b505c83a 	sub	r2,r22,r20
 800c610:	e0c00215 	stw	r3,8(fp)
 800c614:	10800054 	ori	r2,r2,1
 800c618:	18800115 	stw	r2,4(r3)
 800c61c:	b8800117 	ldw	r2,4(r23)
 800c620:	9009883a 	mov	r4,r18
 800c624:	1080004c 	andi	r2,r2,1
 800c628:	a0a8b03a 	or	r20,r20,r2
 800c62c:	bd000115 	stw	r20,4(r23)
 800c630:	80126740 	call	8012674 <__malloc_unlock>
 800c634:	8805883a 	mov	r2,r17
 800c638:	003f5306 	br	800c388 <__alt_data_end+0xfc00c388>
 800c63c:	98c00017 	ldw	r3,0(r19)
 800c640:	88c00015 	stw	r3,0(r17)
 800c644:	98c00117 	ldw	r3,4(r19)
 800c648:	88c00115 	stw	r3,4(r17)
 800c64c:	00c006c4 	movi	r3,27
 800c650:	19801d36 	bltu	r3,r6,800c6c8 <_realloc_r+0x4dc>
 800c654:	88800204 	addi	r2,r17,8
 800c658:	98c00204 	addi	r3,r19,8
 800c65c:	003fa306 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c660:	8807883a 	mov	r3,r17
 800c664:	003f7406 	br	800c438 <__alt_data_end+0xfc00c438>
 800c668:	ad2b883a 	add	r21,r21,r20
 800c66c:	2505c83a 	sub	r2,r4,r20
 800c670:	e5400215 	stw	r21,8(fp)
 800c674:	10800054 	ori	r2,r2,1
 800c678:	a8800115 	stw	r2,4(r21)
 800c67c:	98bfff17 	ldw	r2,-4(r19)
 800c680:	9009883a 	mov	r4,r18
 800c684:	1080004c 	andi	r2,r2,1
 800c688:	a0a8b03a 	or	r20,r20,r2
 800c68c:	9d3fff15 	stw	r20,-4(r19)
 800c690:	80126740 	call	8012674 <__malloc_unlock>
 800c694:	9805883a 	mov	r2,r19
 800c698:	003f3b06 	br	800c388 <__alt_data_end+0xfc00c388>
 800c69c:	8809883a 	mov	r4,r17
 800c6a0:	980b883a 	mov	r5,r19
 800c6a4:	800ae780 	call	800ae78 <memmove>
 800c6a8:	003f9606 	br	800c504 <__alt_data_end+0xfc00c504>
 800c6ac:	8809883a 	mov	r4,r17
 800c6b0:	980b883a 	mov	r5,r19
 800c6b4:	800ae780 	call	800ae78 <memmove>
 800c6b8:	b8c00117 	ldw	r3,4(r23)
 800c6bc:	b021883a 	mov	r16,r22
 800c6c0:	b82b883a 	mov	r21,r23
 800c6c4:	003f2306 	br	800c354 <__alt_data_end+0xfc00c354>
 800c6c8:	98c00217 	ldw	r3,8(r19)
 800c6cc:	88c00215 	stw	r3,8(r17)
 800c6d0:	98c00317 	ldw	r3,12(r19)
 800c6d4:	88c00315 	stw	r3,12(r17)
 800c6d8:	30800c26 	beq	r6,r2,800c70c <_realloc_r+0x520>
 800c6dc:	88800404 	addi	r2,r17,16
 800c6e0:	98c00404 	addi	r3,r19,16
 800c6e4:	003f8106 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c6e8:	893fff17 	ldw	r4,-4(r17)
 800c6ec:	00bfff04 	movi	r2,-4
 800c6f0:	9823883a 	mov	r17,r19
 800c6f4:	2084703a 	and	r2,r4,r2
 800c6f8:	80a1883a 	add	r16,r16,r2
 800c6fc:	003f1506 	br	800c354 <__alt_data_end+0xfc00c354>
 800c700:	b8c00404 	addi	r3,r23,16
 800c704:	9cc00204 	addi	r19,r19,8
 800c708:	003f4b06 	br	800c438 <__alt_data_end+0xfc00c438>
 800c70c:	99000417 	ldw	r4,16(r19)
 800c710:	88800604 	addi	r2,r17,24
 800c714:	98c00604 	addi	r3,r19,24
 800c718:	89000415 	stw	r4,16(r17)
 800c71c:	99000517 	ldw	r4,20(r19)
 800c720:	89000515 	stw	r4,20(r17)
 800c724:	003f7106 	br	800c4ec <__alt_data_end+0xfc00c4ec>
 800c728:	8805883a 	mov	r2,r17
 800c72c:	003fb006 	br	800c5f0 <__alt_data_end+0xfc00c5f0>
 800c730:	8809883a 	mov	r4,r17
 800c734:	980b883a 	mov	r5,r19
 800c738:	800ae780 	call	800ae78 <memmove>
 800c73c:	003fb206 	br	800c608 <__alt_data_end+0xfc00c608>
 800c740:	98800217 	ldw	r2,8(r19)
 800c744:	b8800415 	stw	r2,16(r23)
 800c748:	98800317 	ldw	r2,12(r19)
 800c74c:	b8800515 	stw	r2,20(r23)
 800c750:	31000726 	beq	r6,r4,800c770 <_realloc_r+0x584>
 800c754:	b8800604 	addi	r2,r23,24
 800c758:	9cc00404 	addi	r19,r19,16
 800c75c:	003fa406 	br	800c5f0 <__alt_data_end+0xfc00c5f0>
 800c760:	9009883a 	mov	r4,r18
 800c764:	80126740 	call	8012674 <__malloc_unlock>
 800c768:	0005883a 	mov	r2,zero
 800c76c:	003f0606 	br	800c388 <__alt_data_end+0xfc00c388>
 800c770:	98c00417 	ldw	r3,16(r19)
 800c774:	9cc00604 	addi	r19,r19,24
 800c778:	b8800804 	addi	r2,r23,32
 800c77c:	b8c00615 	stw	r3,24(r23)
 800c780:	98ffff17 	ldw	r3,-4(r19)
 800c784:	b8c00715 	stw	r3,28(r23)
 800c788:	003f9906 	br	800c5f0 <__alt_data_end+0xfc00c5f0>

0800c78c <__fpclassifyd>:
 800c78c:	00a00034 	movhi	r2,32768
 800c790:	10bfffc4 	addi	r2,r2,-1
 800c794:	2884703a 	and	r2,r5,r2
 800c798:	10000726 	beq	r2,zero,800c7b8 <__fpclassifyd+0x2c>
 800c79c:	00fffc34 	movhi	r3,65520
 800c7a0:	019ff834 	movhi	r6,32736
 800c7a4:	28c7883a 	add	r3,r5,r3
 800c7a8:	31bfffc4 	addi	r6,r6,-1
 800c7ac:	30c00536 	bltu	r6,r3,800c7c4 <__fpclassifyd+0x38>
 800c7b0:	00800104 	movi	r2,4
 800c7b4:	f800283a 	ret
 800c7b8:	2000021e 	bne	r4,zero,800c7c4 <__fpclassifyd+0x38>
 800c7bc:	00800084 	movi	r2,2
 800c7c0:	f800283a 	ret
 800c7c4:	00dffc34 	movhi	r3,32752
 800c7c8:	019ff834 	movhi	r6,32736
 800c7cc:	28cb883a 	add	r5,r5,r3
 800c7d0:	31bfffc4 	addi	r6,r6,-1
 800c7d4:	317ff62e 	bgeu	r6,r5,800c7b0 <__alt_data_end+0xfc00c7b0>
 800c7d8:	01400434 	movhi	r5,16
 800c7dc:	297fffc4 	addi	r5,r5,-1
 800c7e0:	28800236 	bltu	r5,r2,800c7ec <__fpclassifyd+0x60>
 800c7e4:	008000c4 	movi	r2,3
 800c7e8:	f800283a 	ret
 800c7ec:	10c00226 	beq	r2,r3,800c7f8 <__fpclassifyd+0x6c>
 800c7f0:	0005883a 	mov	r2,zero
 800c7f4:	f800283a 	ret
 800c7f8:	2005003a 	cmpeq	r2,r4,zero
 800c7fc:	f800283a 	ret

0800c800 <_sbrk_r>:
 800c800:	defffd04 	addi	sp,sp,-12
 800c804:	dc000015 	stw	r16,0(sp)
 800c808:	040200b4 	movhi	r16,2050
 800c80c:	dc400115 	stw	r17,4(sp)
 800c810:	840bc804 	addi	r16,r16,12064
 800c814:	2023883a 	mov	r17,r4
 800c818:	2809883a 	mov	r4,r5
 800c81c:	dfc00215 	stw	ra,8(sp)
 800c820:	80000015 	stw	zero,0(r16)
 800c824:	80128400 	call	8012840 <sbrk>
 800c828:	00ffffc4 	movi	r3,-1
 800c82c:	10c00526 	beq	r2,r3,800c844 <_sbrk_r+0x44>
 800c830:	dfc00217 	ldw	ra,8(sp)
 800c834:	dc400117 	ldw	r17,4(sp)
 800c838:	dc000017 	ldw	r16,0(sp)
 800c83c:	dec00304 	addi	sp,sp,12
 800c840:	f800283a 	ret
 800c844:	80c00017 	ldw	r3,0(r16)
 800c848:	183ff926 	beq	r3,zero,800c830 <__alt_data_end+0xfc00c830>
 800c84c:	88c00015 	stw	r3,0(r17)
 800c850:	003ff706 	br	800c830 <__alt_data_end+0xfc00c830>

0800c854 <__sread>:
 800c854:	defffe04 	addi	sp,sp,-8
 800c858:	dc000015 	stw	r16,0(sp)
 800c85c:	2821883a 	mov	r16,r5
 800c860:	2940038f 	ldh	r5,14(r5)
 800c864:	dfc00115 	stw	ra,4(sp)
 800c868:	800f7d40 	call	800f7d4 <_read_r>
 800c86c:	10000716 	blt	r2,zero,800c88c <__sread+0x38>
 800c870:	80c01417 	ldw	r3,80(r16)
 800c874:	1887883a 	add	r3,r3,r2
 800c878:	80c01415 	stw	r3,80(r16)
 800c87c:	dfc00117 	ldw	ra,4(sp)
 800c880:	dc000017 	ldw	r16,0(sp)
 800c884:	dec00204 	addi	sp,sp,8
 800c888:	f800283a 	ret
 800c88c:	80c0030b 	ldhu	r3,12(r16)
 800c890:	18fbffcc 	andi	r3,r3,61439
 800c894:	80c0030d 	sth	r3,12(r16)
 800c898:	dfc00117 	ldw	ra,4(sp)
 800c89c:	dc000017 	ldw	r16,0(sp)
 800c8a0:	dec00204 	addi	sp,sp,8
 800c8a4:	f800283a 	ret

0800c8a8 <__seofread>:
 800c8a8:	0005883a 	mov	r2,zero
 800c8ac:	f800283a 	ret

0800c8b0 <__swrite>:
 800c8b0:	2880030b 	ldhu	r2,12(r5)
 800c8b4:	defffb04 	addi	sp,sp,-20
 800c8b8:	dcc00315 	stw	r19,12(sp)
 800c8bc:	dc800215 	stw	r18,8(sp)
 800c8c0:	dc400115 	stw	r17,4(sp)
 800c8c4:	dc000015 	stw	r16,0(sp)
 800c8c8:	dfc00415 	stw	ra,16(sp)
 800c8cc:	10c0400c 	andi	r3,r2,256
 800c8d0:	2821883a 	mov	r16,r5
 800c8d4:	2027883a 	mov	r19,r4
 800c8d8:	3025883a 	mov	r18,r6
 800c8dc:	3823883a 	mov	r17,r7
 800c8e0:	18000526 	beq	r3,zero,800c8f8 <__swrite+0x48>
 800c8e4:	2940038f 	ldh	r5,14(r5)
 800c8e8:	000d883a 	mov	r6,zero
 800c8ec:	01c00084 	movi	r7,2
 800c8f0:	800f7780 	call	800f778 <_lseek_r>
 800c8f4:	8080030b 	ldhu	r2,12(r16)
 800c8f8:	8140038f 	ldh	r5,14(r16)
 800c8fc:	10bbffcc 	andi	r2,r2,61439
 800c900:	9809883a 	mov	r4,r19
 800c904:	900d883a 	mov	r6,r18
 800c908:	880f883a 	mov	r7,r17
 800c90c:	8080030d 	sth	r2,12(r16)
 800c910:	dfc00417 	ldw	ra,16(sp)
 800c914:	dcc00317 	ldw	r19,12(sp)
 800c918:	dc800217 	ldw	r18,8(sp)
 800c91c:	dc400117 	ldw	r17,4(sp)
 800c920:	dc000017 	ldw	r16,0(sp)
 800c924:	dec00504 	addi	sp,sp,20
 800c928:	800f2681 	jmpi	800f268 <_write_r>

0800c92c <__sseek>:
 800c92c:	defffe04 	addi	sp,sp,-8
 800c930:	dc000015 	stw	r16,0(sp)
 800c934:	2821883a 	mov	r16,r5
 800c938:	2940038f 	ldh	r5,14(r5)
 800c93c:	dfc00115 	stw	ra,4(sp)
 800c940:	800f7780 	call	800f778 <_lseek_r>
 800c944:	00ffffc4 	movi	r3,-1
 800c948:	10c00826 	beq	r2,r3,800c96c <__sseek+0x40>
 800c94c:	80c0030b 	ldhu	r3,12(r16)
 800c950:	80801415 	stw	r2,80(r16)
 800c954:	18c40014 	ori	r3,r3,4096
 800c958:	80c0030d 	sth	r3,12(r16)
 800c95c:	dfc00117 	ldw	ra,4(sp)
 800c960:	dc000017 	ldw	r16,0(sp)
 800c964:	dec00204 	addi	sp,sp,8
 800c968:	f800283a 	ret
 800c96c:	80c0030b 	ldhu	r3,12(r16)
 800c970:	18fbffcc 	andi	r3,r3,61439
 800c974:	80c0030d 	sth	r3,12(r16)
 800c978:	dfc00117 	ldw	ra,4(sp)
 800c97c:	dc000017 	ldw	r16,0(sp)
 800c980:	dec00204 	addi	sp,sp,8
 800c984:	f800283a 	ret

0800c988 <__sclose>:
 800c988:	2940038f 	ldh	r5,14(r5)
 800c98c:	800f2c41 	jmpi	800f2c4 <_close_r>

0800c990 <strcmp>:
 800c990:	2144b03a 	or	r2,r4,r5
 800c994:	108000cc 	andi	r2,r2,3
 800c998:	1000171e 	bne	r2,zero,800c9f8 <strcmp+0x68>
 800c99c:	20800017 	ldw	r2,0(r4)
 800c9a0:	28c00017 	ldw	r3,0(r5)
 800c9a4:	10c0141e 	bne	r2,r3,800c9f8 <strcmp+0x68>
 800c9a8:	027fbff4 	movhi	r9,65279
 800c9ac:	4a7fbfc4 	addi	r9,r9,-257
 800c9b0:	0086303a 	nor	r3,zero,r2
 800c9b4:	02202074 	movhi	r8,32897
 800c9b8:	1245883a 	add	r2,r2,r9
 800c9bc:	42202004 	addi	r8,r8,-32640
 800c9c0:	10c4703a 	and	r2,r2,r3
 800c9c4:	1204703a 	and	r2,r2,r8
 800c9c8:	10000226 	beq	r2,zero,800c9d4 <strcmp+0x44>
 800c9cc:	00001706 	br	800ca2c <strcmp+0x9c>
 800c9d0:	1000161e 	bne	r2,zero,800ca2c <strcmp+0x9c>
 800c9d4:	21000104 	addi	r4,r4,4
 800c9d8:	20c00017 	ldw	r3,0(r4)
 800c9dc:	29400104 	addi	r5,r5,4
 800c9e0:	29800017 	ldw	r6,0(r5)
 800c9e4:	1a4f883a 	add	r7,r3,r9
 800c9e8:	00c4303a 	nor	r2,zero,r3
 800c9ec:	3884703a 	and	r2,r7,r2
 800c9f0:	1204703a 	and	r2,r2,r8
 800c9f4:	19bff626 	beq	r3,r6,800c9d0 <__alt_data_end+0xfc00c9d0>
 800c9f8:	20800007 	ldb	r2,0(r4)
 800c9fc:	1000051e 	bne	r2,zero,800ca14 <strcmp+0x84>
 800ca00:	00000606 	br	800ca1c <strcmp+0x8c>
 800ca04:	21000044 	addi	r4,r4,1
 800ca08:	20800007 	ldb	r2,0(r4)
 800ca0c:	29400044 	addi	r5,r5,1
 800ca10:	10000226 	beq	r2,zero,800ca1c <strcmp+0x8c>
 800ca14:	28c00007 	ldb	r3,0(r5)
 800ca18:	10fffa26 	beq	r2,r3,800ca04 <__alt_data_end+0xfc00ca04>
 800ca1c:	20800003 	ldbu	r2,0(r4)
 800ca20:	28c00003 	ldbu	r3,0(r5)
 800ca24:	10c5c83a 	sub	r2,r2,r3
 800ca28:	f800283a 	ret
 800ca2c:	0005883a 	mov	r2,zero
 800ca30:	f800283a 	ret

0800ca34 <__ssprint_r>:
 800ca34:	30800217 	ldw	r2,8(r6)
 800ca38:	defff604 	addi	sp,sp,-40
 800ca3c:	ddc00715 	stw	r23,28(sp)
 800ca40:	dcc00315 	stw	r19,12(sp)
 800ca44:	dfc00915 	stw	ra,36(sp)
 800ca48:	df000815 	stw	fp,32(sp)
 800ca4c:	dd800615 	stw	r22,24(sp)
 800ca50:	dd400515 	stw	r21,20(sp)
 800ca54:	dd000415 	stw	r20,16(sp)
 800ca58:	dc800215 	stw	r18,8(sp)
 800ca5c:	dc400115 	stw	r17,4(sp)
 800ca60:	dc000015 	stw	r16,0(sp)
 800ca64:	3027883a 	mov	r19,r6
 800ca68:	35c00017 	ldw	r23,0(r6)
 800ca6c:	10005526 	beq	r2,zero,800cbc4 <__ssprint_r+0x190>
 800ca70:	2029883a 	mov	r20,r4
 800ca74:	29000017 	ldw	r4,0(r5)
 800ca78:	2821883a 	mov	r16,r5
 800ca7c:	0039883a 	mov	fp,zero
 800ca80:	0023883a 	mov	r17,zero
 800ca84:	88003926 	beq	r17,zero,800cb6c <__ssprint_r+0x138>
 800ca88:	84800217 	ldw	r18,8(r16)
 800ca8c:	902d883a 	mov	r22,r18
 800ca90:	8c803a36 	bltu	r17,r18,800cb7c <__ssprint_r+0x148>
 800ca94:	80c0030b 	ldhu	r3,12(r16)
 800ca98:	1881200c 	andi	r2,r3,1152
 800ca9c:	10002626 	beq	r2,zero,800cb38 <__ssprint_r+0x104>
 800caa0:	80800517 	ldw	r2,20(r16)
 800caa4:	81400417 	ldw	r5,16(r16)
 800caa8:	89c00044 	addi	r7,r17,1
 800caac:	108d883a 	add	r6,r2,r2
 800cab0:	3085883a 	add	r2,r6,r2
 800cab4:	100cd7fa 	srli	r6,r2,31
 800cab8:	216dc83a 	sub	r22,r4,r5
 800cabc:	3d89883a 	add	r4,r7,r22
 800cac0:	3085883a 	add	r2,r6,r2
 800cac4:	1025d07a 	srai	r18,r2,1
 800cac8:	900d883a 	mov	r6,r18
 800cacc:	9100022e 	bgeu	r18,r4,800cad8 <__ssprint_r+0xa4>
 800cad0:	2025883a 	mov	r18,r4
 800cad4:	200d883a 	mov	r6,r4
 800cad8:	18c1000c 	andi	r3,r3,1024
 800cadc:	a009883a 	mov	r4,r20
 800cae0:	18002926 	beq	r3,zero,800cb88 <__ssprint_r+0x154>
 800cae4:	300b883a 	mov	r5,r6
 800cae8:	800a4b00 	call	800a4b0 <_malloc_r>
 800caec:	102b883a 	mov	r21,r2
 800caf0:	10002b26 	beq	r2,zero,800cba0 <__ssprint_r+0x16c>
 800caf4:	81400417 	ldw	r5,16(r16)
 800caf8:	1009883a 	mov	r4,r2
 800cafc:	b00d883a 	mov	r6,r22
 800cb00:	800ad400 	call	800ad40 <memcpy>
 800cb04:	8080030b 	ldhu	r2,12(r16)
 800cb08:	00fedfc4 	movi	r3,-1153
 800cb0c:	10c4703a 	and	r2,r2,r3
 800cb10:	10802014 	ori	r2,r2,128
 800cb14:	8080030d 	sth	r2,12(r16)
 800cb18:	ad89883a 	add	r4,r21,r22
 800cb1c:	95adc83a 	sub	r22,r18,r22
 800cb20:	84800515 	stw	r18,20(r16)
 800cb24:	85800215 	stw	r22,8(r16)
 800cb28:	85400415 	stw	r21,16(r16)
 800cb2c:	81000015 	stw	r4,0(r16)
 800cb30:	8825883a 	mov	r18,r17
 800cb34:	882d883a 	mov	r22,r17
 800cb38:	e00b883a 	mov	r5,fp
 800cb3c:	b00d883a 	mov	r6,r22
 800cb40:	800ae780 	call	800ae78 <memmove>
 800cb44:	80c00217 	ldw	r3,8(r16)
 800cb48:	81000017 	ldw	r4,0(r16)
 800cb4c:	98800217 	ldw	r2,8(r19)
 800cb50:	1ca5c83a 	sub	r18,r3,r18
 800cb54:	2589883a 	add	r4,r4,r22
 800cb58:	84800215 	stw	r18,8(r16)
 800cb5c:	81000015 	stw	r4,0(r16)
 800cb60:	1463c83a 	sub	r17,r2,r17
 800cb64:	9c400215 	stw	r17,8(r19)
 800cb68:	88001626 	beq	r17,zero,800cbc4 <__ssprint_r+0x190>
 800cb6c:	bf000017 	ldw	fp,0(r23)
 800cb70:	bc400117 	ldw	r17,4(r23)
 800cb74:	bdc00204 	addi	r23,r23,8
 800cb78:	003fc206 	br	800ca84 <__alt_data_end+0xfc00ca84>
 800cb7c:	8825883a 	mov	r18,r17
 800cb80:	882d883a 	mov	r22,r17
 800cb84:	003fec06 	br	800cb38 <__alt_data_end+0xfc00cb38>
 800cb88:	800c1ec0 	call	800c1ec <_realloc_r>
 800cb8c:	102b883a 	mov	r21,r2
 800cb90:	103fe11e 	bne	r2,zero,800cb18 <__alt_data_end+0xfc00cb18>
 800cb94:	81400417 	ldw	r5,16(r16)
 800cb98:	a009883a 	mov	r4,r20
 800cb9c:	80099140 	call	8009914 <_free_r>
 800cba0:	80c0030b 	ldhu	r3,12(r16)
 800cba4:	00800304 	movi	r2,12
 800cba8:	a0800015 	stw	r2,0(r20)
 800cbac:	18c01014 	ori	r3,r3,64
 800cbb0:	80c0030d 	sth	r3,12(r16)
 800cbb4:	00bfffc4 	movi	r2,-1
 800cbb8:	98000215 	stw	zero,8(r19)
 800cbbc:	98000115 	stw	zero,4(r19)
 800cbc0:	00000206 	br	800cbcc <__ssprint_r+0x198>
 800cbc4:	98000115 	stw	zero,4(r19)
 800cbc8:	0005883a 	mov	r2,zero
 800cbcc:	dfc00917 	ldw	ra,36(sp)
 800cbd0:	df000817 	ldw	fp,32(sp)
 800cbd4:	ddc00717 	ldw	r23,28(sp)
 800cbd8:	dd800617 	ldw	r22,24(sp)
 800cbdc:	dd400517 	ldw	r21,20(sp)
 800cbe0:	dd000417 	ldw	r20,16(sp)
 800cbe4:	dcc00317 	ldw	r19,12(sp)
 800cbe8:	dc800217 	ldw	r18,8(sp)
 800cbec:	dc400117 	ldw	r17,4(sp)
 800cbf0:	dc000017 	ldw	r16,0(sp)
 800cbf4:	dec00a04 	addi	sp,sp,40
 800cbf8:	f800283a 	ret

0800cbfc <___svfiprintf_internal_r>:
 800cbfc:	2880030b 	ldhu	r2,12(r5)
 800cc00:	deffc904 	addi	sp,sp,-220
 800cc04:	dd403215 	stw	r21,200(sp)
 800cc08:	dfc03615 	stw	ra,216(sp)
 800cc0c:	df003515 	stw	fp,212(sp)
 800cc10:	ddc03415 	stw	r23,208(sp)
 800cc14:	dd803315 	stw	r22,204(sp)
 800cc18:	dd003115 	stw	r20,196(sp)
 800cc1c:	dcc03015 	stw	r19,192(sp)
 800cc20:	dc802f15 	stw	r18,188(sp)
 800cc24:	dc402e15 	stw	r17,184(sp)
 800cc28:	dc002d15 	stw	r16,180(sp)
 800cc2c:	d9402715 	stw	r5,156(sp)
 800cc30:	d9002915 	stw	r4,164(sp)
 800cc34:	1080200c 	andi	r2,r2,128
 800cc38:	d9c02315 	stw	r7,140(sp)
 800cc3c:	302b883a 	mov	r21,r6
 800cc40:	10000226 	beq	r2,zero,800cc4c <___svfiprintf_internal_r+0x50>
 800cc44:	28800417 	ldw	r2,16(r5)
 800cc48:	1003ce26 	beq	r2,zero,800db84 <___svfiprintf_internal_r+0xf88>
 800cc4c:	dac01a04 	addi	r11,sp,104
 800cc50:	da8019c4 	addi	r10,sp,103
 800cc54:	dc802917 	ldw	r18,164(sp)
 800cc58:	dd002717 	ldw	r20,156(sp)
 800cc5c:	04c200b4 	movhi	r19,2050
 800cc60:	dac01e15 	stw	r11,120(sp)
 800cc64:	5a97c83a 	sub	r11,r11,r10
 800cc68:	9cfe1304 	addi	r19,r19,-1972
 800cc6c:	da801f15 	stw	r10,124(sp)
 800cc70:	dec01a15 	stw	sp,104(sp)
 800cc74:	d8001c15 	stw	zero,112(sp)
 800cc78:	d8001b15 	stw	zero,108(sp)
 800cc7c:	d8002a15 	stw	zero,168(sp)
 800cc80:	d8002415 	stw	zero,144(sp)
 800cc84:	d811883a 	mov	r8,sp
 800cc88:	dac02b15 	stw	r11,172(sp)
 800cc8c:	a8800007 	ldb	r2,0(r21)
 800cc90:	10026826 	beq	r2,zero,800d634 <___svfiprintf_internal_r+0xa38>
 800cc94:	01000944 	movi	r4,37
 800cc98:	11026626 	beq	r2,r4,800d634 <___svfiprintf_internal_r+0xa38>
 800cc9c:	a805883a 	mov	r2,r21
 800cca0:	00000106 	br	800cca8 <___svfiprintf_internal_r+0xac>
 800cca4:	19000326 	beq	r3,r4,800ccb4 <___svfiprintf_internal_r+0xb8>
 800cca8:	10800044 	addi	r2,r2,1
 800ccac:	10c00007 	ldb	r3,0(r2)
 800ccb0:	183ffc1e 	bne	r3,zero,800cca4 <__alt_data_end+0xfc00cca4>
 800ccb4:	1561c83a 	sub	r16,r2,r21
 800ccb8:	102d883a 	mov	r22,r2
 800ccbc:	80000e26 	beq	r16,zero,800ccf8 <___svfiprintf_internal_r+0xfc>
 800ccc0:	d8c01c17 	ldw	r3,112(sp)
 800ccc4:	d8801b17 	ldw	r2,108(sp)
 800ccc8:	45400015 	stw	r21,0(r8)
 800cccc:	1c07883a 	add	r3,r3,r16
 800ccd0:	10800044 	addi	r2,r2,1
 800ccd4:	d8c01c15 	stw	r3,112(sp)
 800ccd8:	44000115 	stw	r16,4(r8)
 800ccdc:	d8801b15 	stw	r2,108(sp)
 800cce0:	00c001c4 	movi	r3,7
 800cce4:	1882d616 	blt	r3,r2,800d840 <___svfiprintf_internal_r+0xc44>
 800cce8:	42000204 	addi	r8,r8,8
 800ccec:	da802417 	ldw	r10,144(sp)
 800ccf0:	5415883a 	add	r10,r10,r16
 800ccf4:	da802415 	stw	r10,144(sp)
 800ccf8:	b0800007 	ldb	r2,0(r22)
 800ccfc:	10027326 	beq	r2,zero,800d6cc <___svfiprintf_internal_r+0xad0>
 800cd00:	b1000047 	ldb	r4,1(r22)
 800cd04:	b5400044 	addi	r21,r22,1
 800cd08:	d8001d85 	stb	zero,118(sp)
 800cd0c:	000d883a 	mov	r6,zero
 800cd10:	043fffc4 	movi	r16,-1
 800cd14:	d8002115 	stw	zero,132(sp)
 800cd18:	0023883a 	mov	r17,zero
 800cd1c:	00c01604 	movi	r3,88
 800cd20:	01400244 	movi	r5,9
 800cd24:	02400a84 	movi	r9,42
 800cd28:	01c01b04 	movi	r7,108
 800cd2c:	ad400044 	addi	r21,r21,1
 800cd30:	20bff804 	addi	r2,r4,-32
 800cd34:	18819536 	bltu	r3,r2,800d38c <___svfiprintf_internal_r+0x790>
 800cd38:	100490ba 	slli	r2,r2,2
 800cd3c:	02c20074 	movhi	r11,2049
 800cd40:	5af35404 	addi	r11,r11,-12976
 800cd44:	12c5883a 	add	r2,r2,r11
 800cd48:	10800017 	ldw	r2,0(r2)
 800cd4c:	1000683a 	jmp	r2
 800cd50:	0800d28c 	andi	zero,at,842
 800cd54:	0800d38c 	andi	zero,at,846
 800cd58:	0800d38c 	andi	zero,at,846
 800cd5c:	0800d280 	call	800d28 <__alt_mem_sdram-0x77ff2d8>
 800cd60:	0800d38c 	andi	zero,at,846
 800cd64:	0800d38c 	andi	zero,at,846
 800cd68:	0800d38c 	andi	zero,at,846
 800cd6c:	0800d38c 	andi	zero,at,846
 800cd70:	0800d38c 	andi	zero,at,846
 800cd74:	0800d38c 	andi	zero,at,846
 800cd78:	0800cfb0 	cmpltui	zero,at,830
 800cd7c:	0800d3c0 	call	800d3c <__alt_mem_sdram-0x77ff2c4>
 800cd80:	0800d38c 	andi	zero,at,846
 800cd84:	0800cfd8 	cmpnei	zero,at,831
 800cd88:	0800d3cc 	andi	zero,at,847
 800cd8c:	0800d38c 	andi	zero,at,846
 800cd90:	0800d3b4 	orhi	zero,at,846
 800cd94:	0800d354 	ori	zero,at,845
 800cd98:	0800d354 	ori	zero,at,845
 800cd9c:	0800d354 	ori	zero,at,845
 800cda0:	0800d354 	ori	zero,at,845
 800cda4:	0800d354 	ori	zero,at,845
 800cda8:	0800d354 	ori	zero,at,845
 800cdac:	0800d354 	ori	zero,at,845
 800cdb0:	0800d354 	ori	zero,at,845
 800cdb4:	0800d354 	ori	zero,at,845
 800cdb8:	0800d38c 	andi	zero,at,846
 800cdbc:	0800d38c 	andi	zero,at,846
 800cdc0:	0800d38c 	andi	zero,at,846
 800cdc4:	0800d38c 	andi	zero,at,846
 800cdc8:	0800d38c 	andi	zero,at,846
 800cdcc:	0800d38c 	andi	zero,at,846
 800cdd0:	0800d38c 	andi	zero,at,846
 800cdd4:	0800d38c 	andi	zero,at,846
 800cdd8:	0800d38c 	andi	zero,at,846
 800cddc:	0800d38c 	andi	zero,at,846
 800cde0:	0800d2ec 	andhi	zero,at,843
 800cde4:	0800d38c 	andi	zero,at,846
 800cde8:	0800d38c 	andi	zero,at,846
 800cdec:	0800d38c 	andi	zero,at,846
 800cdf0:	0800d38c 	andi	zero,at,846
 800cdf4:	0800d38c 	andi	zero,at,846
 800cdf8:	0800d38c 	andi	zero,at,846
 800cdfc:	0800d38c 	andi	zero,at,846
 800ce00:	0800d38c 	andi	zero,at,846
 800ce04:	0800d38c 	andi	zero,at,846
 800ce08:	0800d38c 	andi	zero,at,846
 800ce0c:	0800cf80 	call	800cf8 <__alt_mem_sdram-0x77ff308>
 800ce10:	0800d38c 	andi	zero,at,846
 800ce14:	0800d38c 	andi	zero,at,846
 800ce18:	0800d38c 	andi	zero,at,846
 800ce1c:	0800d38c 	andi	zero,at,846
 800ce20:	0800d38c 	andi	zero,at,846
 800ce24:	0800ceb4 	orhi	zero,at,826
 800ce28:	0800d38c 	andi	zero,at,846
 800ce2c:	0800d38c 	andi	zero,at,846
 800ce30:	0800d1e0 	cmpeqi	zero,at,839
 800ce34:	0800d38c 	andi	zero,at,846
 800ce38:	0800d38c 	andi	zero,at,846
 800ce3c:	0800d38c 	andi	zero,at,846
 800ce40:	0800d38c 	andi	zero,at,846
 800ce44:	0800d38c 	andi	zero,at,846
 800ce48:	0800d38c 	andi	zero,at,846
 800ce4c:	0800d38c 	andi	zero,at,846
 800ce50:	0800d38c 	andi	zero,at,846
 800ce54:	0800d38c 	andi	zero,at,846
 800ce58:	0800d38c 	andi	zero,at,846
 800ce5c:	0800d0cc 	andi	zero,at,835
 800ce60:	0800d08c 	andi	zero,at,834
 800ce64:	0800d38c 	andi	zero,at,846
 800ce68:	0800d38c 	andi	zero,at,846
 800ce6c:	0800d38c 	andi	zero,at,846
 800ce70:	0800d23c 	xorhi	zero,at,840
 800ce74:	0800d08c 	andi	zero,at,834
 800ce78:	0800d38c 	andi	zero,at,846
 800ce7c:	0800d38c 	andi	zero,at,846
 800ce80:	0800d228 	cmpgeui	zero,at,840
 800ce84:	0800d38c 	andi	zero,at,846
 800ce88:	0800d248 	cmpgei	zero,at,841
 800ce8c:	0800cf84 	addi	zero,at,830
 800ce90:	0800d04c 	andi	zero,at,833
 800ce94:	0800d040 	call	800d04 <__alt_mem_sdram-0x77ff2fc>
 800ce98:	0800d38c 	andi	zero,at,846
 800ce9c:	0800cfe4 	muli	zero,at,831
 800cea0:	0800d38c 	andi	zero,at,846
 800cea4:	0800ceb8 	rdprs	zero,at,826
 800cea8:	0800d38c 	andi	zero,at,846
 800ceac:	0800d38c 	andi	zero,at,846
 800ceb0:	0800d2a8 	cmpgeui	zero,at,842
 800ceb4:	8c400414 	ori	r17,r17,16
 800ceb8:	88c0080c 	andi	r3,r17,32
 800cebc:	d8802317 	ldw	r2,140(sp)
 800cec0:	18029626 	beq	r3,zero,800d91c <___svfiprintf_internal_r+0xd20>
 800cec4:	dac02317 	ldw	r11,140(sp)
 800cec8:	12400017 	ldw	r9,0(r2)
 800cecc:	12800117 	ldw	r10,4(r2)
 800ced0:	5ac00204 	addi	r11,r11,8
 800ced4:	dac02315 	stw	r11,140(sp)
 800ced8:	00800044 	movi	r2,1
 800cedc:	4a86b03a 	or	r3,r9,r10
 800cee0:	d8001d85 	stb	zero,118(sp)
 800cee4:	8039883a 	mov	fp,r16
 800cee8:	0017883a 	mov	r11,zero
 800ceec:	80000216 	blt	r16,zero,800cef8 <___svfiprintf_internal_r+0x2fc>
 800cef0:	013fdfc4 	movi	r4,-129
 800cef4:	8922703a 	and	r17,r17,r4
 800cef8:	1801d01e 	bne	r3,zero,800d63c <___svfiprintf_internal_r+0xa40>
 800cefc:	80024426 	beq	r16,zero,800d810 <___svfiprintf_internal_r+0xc14>
 800cf00:	10803fcc 	andi	r2,r2,255
 800cf04:	00c00044 	movi	r3,1
 800cf08:	10c2b326 	beq	r2,r3,800d9d8 <___svfiprintf_internal_r+0xddc>
 800cf0c:	00c00084 	movi	r3,2
 800cf10:	10c25b26 	beq	r2,r3,800d880 <___svfiprintf_internal_r+0xc84>
 800cf14:	d8c01a04 	addi	r3,sp,104
 800cf18:	4808d0fa 	srli	r4,r9,3
 800cf1c:	500a977a 	slli	r5,r10,29
 800cf20:	5014d0fa 	srli	r10,r10,3
 800cf24:	4a4001cc 	andi	r9,r9,7
 800cf28:	48800c04 	addi	r2,r9,48
 800cf2c:	18ffffc4 	addi	r3,r3,-1
 800cf30:	2912b03a 	or	r9,r5,r4
 800cf34:	18800005 	stb	r2,0(r3)
 800cf38:	4a88b03a 	or	r4,r9,r10
 800cf3c:	203ff61e 	bne	r4,zero,800cf18 <__alt_data_end+0xfc00cf18>
 800cf40:	8900004c 	andi	r4,r17,1
 800cf44:	d8c02615 	stw	r3,152(sp)
 800cf48:	2002951e 	bne	r4,zero,800d9a0 <___svfiprintf_internal_r+0xda4>
 800cf4c:	da801e17 	ldw	r10,120(sp)
 800cf50:	50f9c83a 	sub	fp,r10,r3
 800cf54:	df002015 	stw	fp,128(sp)
 800cf58:	e400010e 	bge	fp,r16,800cf60 <___svfiprintf_internal_r+0x364>
 800cf5c:	dc002015 	stw	r16,128(sp)
 800cf60:	5ac03fcc 	andi	r11,r11,255
 800cf64:	5ac0201c 	xori	r11,r11,128
 800cf68:	5affe004 	addi	r11,r11,-128
 800cf6c:	58006326 	beq	r11,zero,800d0fc <___svfiprintf_internal_r+0x500>
 800cf70:	d8c02017 	ldw	r3,128(sp)
 800cf74:	18c00044 	addi	r3,r3,1
 800cf78:	d8c02015 	stw	r3,128(sp)
 800cf7c:	00005f06 	br	800d0fc <___svfiprintf_internal_r+0x500>
 800cf80:	8c400414 	ori	r17,r17,16
 800cf84:	88c0080c 	andi	r3,r17,32
 800cf88:	d8802317 	ldw	r2,140(sp)
 800cf8c:	18027826 	beq	r3,zero,800d970 <___svfiprintf_internal_r+0xd74>
 800cf90:	dac02317 	ldw	r11,140(sp)
 800cf94:	12400017 	ldw	r9,0(r2)
 800cf98:	12800117 	ldw	r10,4(r2)
 800cf9c:	5ac00204 	addi	r11,r11,8
 800cfa0:	dac02315 	stw	r11,140(sp)
 800cfa4:	0005883a 	mov	r2,zero
 800cfa8:	4a86b03a 	or	r3,r9,r10
 800cfac:	003fcc06 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800cfb0:	da802317 	ldw	r10,140(sp)
 800cfb4:	dac02317 	ldw	r11,140(sp)
 800cfb8:	52800017 	ldw	r10,0(r10)
 800cfbc:	58800104 	addi	r2,r11,4
 800cfc0:	da802115 	stw	r10,132(sp)
 800cfc4:	50028a0e 	bge	r10,zero,800d9f0 <___svfiprintf_internal_r+0xdf4>
 800cfc8:	da802117 	ldw	r10,132(sp)
 800cfcc:	d8802315 	stw	r2,140(sp)
 800cfd0:	0295c83a 	sub	r10,zero,r10
 800cfd4:	da802115 	stw	r10,132(sp)
 800cfd8:	8c400114 	ori	r17,r17,4
 800cfdc:	a9000007 	ldb	r4,0(r21)
 800cfe0:	003f5206 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800cfe4:	da802317 	ldw	r10,140(sp)
 800cfe8:	dac02317 	ldw	r11,140(sp)
 800cfec:	d8001d85 	stb	zero,118(sp)
 800cff0:	52800017 	ldw	r10,0(r10)
 800cff4:	5dc00104 	addi	r23,r11,4
 800cff8:	da802615 	stw	r10,152(sp)
 800cffc:	5002eb26 	beq	r10,zero,800dbac <___svfiprintf_internal_r+0xfb0>
 800d000:	d9002617 	ldw	r4,152(sp)
 800d004:	8002d716 	blt	r16,zero,800db64 <___svfiprintf_internal_r+0xf68>
 800d008:	000b883a 	mov	r5,zero
 800d00c:	800d883a 	mov	r6,r16
 800d010:	da002c15 	stw	r8,176(sp)
 800d014:	800ac580 	call	800ac58 <memchr>
 800d018:	da002c17 	ldw	r8,176(sp)
 800d01c:	1002fb26 	beq	r2,zero,800dc0c <___svfiprintf_internal_r+0x1010>
 800d020:	d8c02617 	ldw	r3,152(sp)
 800d024:	10f9c83a 	sub	fp,r2,r3
 800d028:	8700010e 	bge	r16,fp,800d030 <___svfiprintf_internal_r+0x434>
 800d02c:	8039883a 	mov	fp,r16
 800d030:	dac01d83 	ldbu	r11,118(sp)
 800d034:	ddc02315 	stw	r23,140(sp)
 800d038:	0021883a 	mov	r16,zero
 800d03c:	003fc506 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800d040:	8c400814 	ori	r17,r17,32
 800d044:	a9000007 	ldb	r4,0(r21)
 800d048:	003f3806 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d04c:	dac02317 	ldw	r11,140(sp)
 800d050:	00800c04 	movi	r2,48
 800d054:	d8801d05 	stb	r2,116(sp)
 800d058:	5a400017 	ldw	r9,0(r11)
 800d05c:	00801e04 	movi	r2,120
 800d060:	d8801d45 	stb	r2,117(sp)
 800d064:	008200b4 	movhi	r2,2050
 800d068:	10bdaa04 	addi	r2,r2,-2392
 800d06c:	5ac00104 	addi	r11,r11,4
 800d070:	d8802a15 	stw	r2,168(sp)
 800d074:	0015883a 	mov	r10,zero
 800d078:	8c400094 	ori	r17,r17,2
 800d07c:	dac02315 	stw	r11,140(sp)
 800d080:	00800084 	movi	r2,2
 800d084:	4807883a 	mov	r3,r9
 800d088:	003f9506 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d08c:	d9801d85 	stb	r6,118(sp)
 800d090:	8880080c 	andi	r2,r17,32
 800d094:	d8c02317 	ldw	r3,140(sp)
 800d098:	10009926 	beq	r2,zero,800d300 <___svfiprintf_internal_r+0x704>
 800d09c:	dac02317 	ldw	r11,140(sp)
 800d0a0:	18800117 	ldw	r2,4(r3)
 800d0a4:	1a400017 	ldw	r9,0(r3)
 800d0a8:	5ac00204 	addi	r11,r11,8
 800d0ac:	dac02315 	stw	r11,140(sp)
 800d0b0:	1015883a 	mov	r10,r2
 800d0b4:	10009d16 	blt	r2,zero,800d32c <___svfiprintf_internal_r+0x730>
 800d0b8:	dac01d83 	ldbu	r11,118(sp)
 800d0bc:	8039883a 	mov	fp,r16
 800d0c0:	00800044 	movi	r2,1
 800d0c4:	4a86b03a 	or	r3,r9,r10
 800d0c8:	003f8806 	br	800ceec <__alt_data_end+0xfc00ceec>
 800d0cc:	dac02317 	ldw	r11,140(sp)
 800d0d0:	00c00044 	movi	r3,1
 800d0d4:	da801004 	addi	r10,sp,64
 800d0d8:	58800017 	ldw	r2,0(r11)
 800d0dc:	5ac00104 	addi	r11,r11,4
 800d0e0:	d8c02015 	stw	r3,128(sp)
 800d0e4:	d8001d85 	stb	zero,118(sp)
 800d0e8:	d8801005 	stb	r2,64(sp)
 800d0ec:	dac02315 	stw	r11,140(sp)
 800d0f0:	1839883a 	mov	fp,r3
 800d0f4:	da802615 	stw	r10,152(sp)
 800d0f8:	0021883a 	mov	r16,zero
 800d0fc:	8a80008c 	andi	r10,r17,2
 800d100:	da802215 	stw	r10,136(sp)
 800d104:	50000326 	beq	r10,zero,800d114 <___svfiprintf_internal_r+0x518>
 800d108:	dac02017 	ldw	r11,128(sp)
 800d10c:	5ac00084 	addi	r11,r11,2
 800d110:	dac02015 	stw	r11,128(sp)
 800d114:	88c0210c 	andi	r3,r17,132
 800d118:	d8c02515 	stw	r3,148(sp)
 800d11c:	1800bb1e 	bne	r3,zero,800d40c <___svfiprintf_internal_r+0x810>
 800d120:	da802117 	ldw	r10,132(sp)
 800d124:	dac02017 	ldw	r11,128(sp)
 800d128:	52edc83a 	sub	r22,r10,r11
 800d12c:	0580b70e 	bge	zero,r22,800d40c <___svfiprintf_internal_r+0x810>
 800d130:	02400404 	movi	r9,16
 800d134:	d8c01c17 	ldw	r3,112(sp)
 800d138:	d8801b17 	ldw	r2,108(sp)
 800d13c:	4d82a70e 	bge	r9,r22,800dbdc <___svfiprintf_internal_r+0xfe0>
 800d140:	014200b4 	movhi	r5,2050
 800d144:	297e1704 	addi	r5,r5,-1956
 800d148:	d9402815 	stw	r5,160(sp)
 800d14c:	05c001c4 	movi	r23,7
 800d150:	00000306 	br	800d160 <___svfiprintf_internal_r+0x564>
 800d154:	b5bffc04 	addi	r22,r22,-16
 800d158:	42000204 	addi	r8,r8,8
 800d15c:	4d80150e 	bge	r9,r22,800d1b4 <___svfiprintf_internal_r+0x5b8>
 800d160:	028200b4 	movhi	r10,2050
 800d164:	18c00404 	addi	r3,r3,16
 800d168:	10800044 	addi	r2,r2,1
 800d16c:	52be1704 	addi	r10,r10,-1956
 800d170:	42800015 	stw	r10,0(r8)
 800d174:	42400115 	stw	r9,4(r8)
 800d178:	d8c01c15 	stw	r3,112(sp)
 800d17c:	d8801b15 	stw	r2,108(sp)
 800d180:	b8bff40e 	bge	r23,r2,800d154 <__alt_data_end+0xfc00d154>
 800d184:	9009883a 	mov	r4,r18
 800d188:	a00b883a 	mov	r5,r20
 800d18c:	d9801a04 	addi	r6,sp,104
 800d190:	da402c15 	stw	r9,176(sp)
 800d194:	800ca340 	call	800ca34 <__ssprint_r>
 800d198:	da402c17 	ldw	r9,176(sp)
 800d19c:	1001511e 	bne	r2,zero,800d6e4 <___svfiprintf_internal_r+0xae8>
 800d1a0:	b5bffc04 	addi	r22,r22,-16
 800d1a4:	d8c01c17 	ldw	r3,112(sp)
 800d1a8:	d8801b17 	ldw	r2,108(sp)
 800d1ac:	d811883a 	mov	r8,sp
 800d1b0:	4dbfeb16 	blt	r9,r22,800d160 <__alt_data_end+0xfc00d160>
 800d1b4:	dac02817 	ldw	r11,160(sp)
 800d1b8:	b0c7883a 	add	r3,r22,r3
 800d1bc:	10800044 	addi	r2,r2,1
 800d1c0:	42c00015 	stw	r11,0(r8)
 800d1c4:	45800115 	stw	r22,4(r8)
 800d1c8:	d8c01c15 	stw	r3,112(sp)
 800d1cc:	d8801b15 	stw	r2,108(sp)
 800d1d0:	010001c4 	movi	r4,7
 800d1d4:	2081dd16 	blt	r4,r2,800d94c <___svfiprintf_internal_r+0xd50>
 800d1d8:	42000204 	addi	r8,r8,8
 800d1dc:	00008d06 	br	800d414 <___svfiprintf_internal_r+0x818>
 800d1e0:	00c200b4 	movhi	r3,2050
 800d1e4:	18fda504 	addi	r3,r3,-2412
 800d1e8:	d8c02a15 	stw	r3,168(sp)
 800d1ec:	d9801d85 	stb	r6,118(sp)
 800d1f0:	88c0080c 	andi	r3,r17,32
 800d1f4:	d8802317 	ldw	r2,140(sp)
 800d1f8:	18003226 	beq	r3,zero,800d2c4 <___svfiprintf_internal_r+0x6c8>
 800d1fc:	da802317 	ldw	r10,140(sp)
 800d200:	12400017 	ldw	r9,0(r2)
 800d204:	52800204 	addi	r10,r10,8
 800d208:	da802315 	stw	r10,140(sp)
 800d20c:	12800117 	ldw	r10,4(r2)
 800d210:	8880004c 	andi	r2,r17,1
 800d214:	1001be26 	beq	r2,zero,800d910 <___svfiprintf_internal_r+0xd14>
 800d218:	4a86b03a 	or	r3,r9,r10
 800d21c:	1802291e 	bne	r3,zero,800dac4 <___svfiprintf_internal_r+0xec8>
 800d220:	00800084 	movi	r2,2
 800d224:	003f2e06 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d228:	a9000007 	ldb	r4,0(r21)
 800d22c:	a805883a 	mov	r2,r21
 800d230:	21c22a26 	beq	r4,r7,800dadc <___svfiprintf_internal_r+0xee0>
 800d234:	8c400414 	ori	r17,r17,16
 800d238:	003ebc06 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d23c:	8c401014 	ori	r17,r17,64
 800d240:	a9000007 	ldb	r4,0(r21)
 800d244:	003eb906 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d248:	d9801d85 	stb	r6,118(sp)
 800d24c:	8880080c 	andi	r2,r17,32
 800d250:	1002131e 	bne	r2,zero,800daa0 <___svfiprintf_internal_r+0xea4>
 800d254:	8880040c 	andi	r2,r17,16
 800d258:	1002241e 	bne	r2,zero,800daec <___svfiprintf_internal_r+0xef0>
 800d25c:	8c40100c 	andi	r17,r17,64
 800d260:	88022226 	beq	r17,zero,800daec <___svfiprintf_internal_r+0xef0>
 800d264:	dac02317 	ldw	r11,140(sp)
 800d268:	da802417 	ldw	r10,144(sp)
 800d26c:	58800017 	ldw	r2,0(r11)
 800d270:	5ac00104 	addi	r11,r11,4
 800d274:	dac02315 	stw	r11,140(sp)
 800d278:	1280000d 	sth	r10,0(r2)
 800d27c:	003e8306 	br	800cc8c <__alt_data_end+0xfc00cc8c>
 800d280:	8c400054 	ori	r17,r17,1
 800d284:	a9000007 	ldb	r4,0(r21)
 800d288:	003ea806 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d28c:	30803fcc 	andi	r2,r6,255
 800d290:	1080201c 	xori	r2,r2,128
 800d294:	10bfe004 	addi	r2,r2,-128
 800d298:	1001ff1e 	bne	r2,zero,800da98 <___svfiprintf_internal_r+0xe9c>
 800d29c:	01800804 	movi	r6,32
 800d2a0:	a9000007 	ldb	r4,0(r21)
 800d2a4:	003ea106 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d2a8:	02c200b4 	movhi	r11,2050
 800d2ac:	5afdaa04 	addi	r11,r11,-2392
 800d2b0:	dac02a15 	stw	r11,168(sp)
 800d2b4:	d9801d85 	stb	r6,118(sp)
 800d2b8:	88c0080c 	andi	r3,r17,32
 800d2bc:	d8802317 	ldw	r2,140(sp)
 800d2c0:	183fce1e 	bne	r3,zero,800d1fc <__alt_data_end+0xfc00d1fc>
 800d2c4:	88c0040c 	andi	r3,r17,16
 800d2c8:	1801ed1e 	bne	r3,zero,800da80 <___svfiprintf_internal_r+0xe84>
 800d2cc:	88c0100c 	andi	r3,r17,64
 800d2d0:	18021a26 	beq	r3,zero,800db3c <___svfiprintf_internal_r+0xf40>
 800d2d4:	da802317 	ldw	r10,140(sp)
 800d2d8:	1240000b 	ldhu	r9,0(r2)
 800d2dc:	52800104 	addi	r10,r10,4
 800d2e0:	da802315 	stw	r10,140(sp)
 800d2e4:	0015883a 	mov	r10,zero
 800d2e8:	003fc906 	br	800d210 <__alt_data_end+0xfc00d210>
 800d2ec:	8c400414 	ori	r17,r17,16
 800d2f0:	d9801d85 	stb	r6,118(sp)
 800d2f4:	8880080c 	andi	r2,r17,32
 800d2f8:	d8c02317 	ldw	r3,140(sp)
 800d2fc:	103f671e 	bne	r2,zero,800d09c <__alt_data_end+0xfc00d09c>
 800d300:	8880040c 	andi	r2,r17,16
 800d304:	1001c71e 	bne	r2,zero,800da24 <___svfiprintf_internal_r+0xe28>
 800d308:	8880100c 	andi	r2,r17,64
 800d30c:	1001c526 	beq	r2,zero,800da24 <___svfiprintf_internal_r+0xe28>
 800d310:	1a40000f 	ldh	r9,0(r3)
 800d314:	dac02317 	ldw	r11,140(sp)
 800d318:	4815d7fa 	srai	r10,r9,31
 800d31c:	5ac00104 	addi	r11,r11,4
 800d320:	dac02315 	stw	r11,140(sp)
 800d324:	5005883a 	mov	r2,r10
 800d328:	103f630e 	bge	r2,zero,800d0b8 <__alt_data_end+0xfc00d0b8>
 800d32c:	0253c83a 	sub	r9,zero,r9
 800d330:	4804c03a 	cmpne	r2,r9,zero
 800d334:	0295c83a 	sub	r10,zero,r10
 800d338:	5095c83a 	sub	r10,r10,r2
 800d33c:	02c00b44 	movi	r11,45
 800d340:	dac01d85 	stb	r11,118(sp)
 800d344:	8039883a 	mov	fp,r16
 800d348:	00800044 	movi	r2,1
 800d34c:	4a86b03a 	or	r3,r9,r10
 800d350:	003ee606 	br	800ceec <__alt_data_end+0xfc00ceec>
 800d354:	a815883a 	mov	r10,r21
 800d358:	d8002115 	stw	zero,132(sp)
 800d35c:	20bff404 	addi	r2,r4,-48
 800d360:	51000007 	ldb	r4,0(r10)
 800d364:	da802117 	ldw	r10,132(sp)
 800d368:	ad400044 	addi	r21,r21,1
 800d36c:	52c002a4 	muli	r11,r10,10
 800d370:	a815883a 	mov	r10,r21
 800d374:	5885883a 	add	r2,r11,r2
 800d378:	d8802115 	stw	r2,132(sp)
 800d37c:	20bff404 	addi	r2,r4,-48
 800d380:	28bff72e 	bgeu	r5,r2,800d360 <__alt_data_end+0xfc00d360>
 800d384:	20bff804 	addi	r2,r4,-32
 800d388:	18be6b2e 	bgeu	r3,r2,800cd38 <__alt_data_end+0xfc00cd38>
 800d38c:	d9801d85 	stb	r6,118(sp)
 800d390:	2000ce26 	beq	r4,zero,800d6cc <___svfiprintf_internal_r+0xad0>
 800d394:	02800044 	movi	r10,1
 800d398:	dac01004 	addi	r11,sp,64
 800d39c:	da802015 	stw	r10,128(sp)
 800d3a0:	d9001005 	stb	r4,64(sp)
 800d3a4:	d8001d85 	stb	zero,118(sp)
 800d3a8:	5039883a 	mov	fp,r10
 800d3ac:	dac02615 	stw	r11,152(sp)
 800d3b0:	003f5106 	br	800d0f8 <__alt_data_end+0xfc00d0f8>
 800d3b4:	8c402014 	ori	r17,r17,128
 800d3b8:	a9000007 	ldb	r4,0(r21)
 800d3bc:	003e5b06 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d3c0:	01800ac4 	movi	r6,43
 800d3c4:	a9000007 	ldb	r4,0(r21)
 800d3c8:	003e5806 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d3cc:	a9000007 	ldb	r4,0(r21)
 800d3d0:	aa800044 	addi	r10,r21,1
 800d3d4:	22421426 	beq	r4,r9,800dc28 <___svfiprintf_internal_r+0x102c>
 800d3d8:	20bff404 	addi	r2,r4,-48
 800d3dc:	502b883a 	mov	r21,r10
 800d3e0:	0021883a 	mov	r16,zero
 800d3e4:	28be5236 	bltu	r5,r2,800cd30 <__alt_data_end+0xfc00cd30>
 800d3e8:	a9000007 	ldb	r4,0(r21)
 800d3ec:	840002a4 	muli	r16,r16,10
 800d3f0:	ad400044 	addi	r21,r21,1
 800d3f4:	1421883a 	add	r16,r2,r16
 800d3f8:	20bff404 	addi	r2,r4,-48
 800d3fc:	28bffa2e 	bgeu	r5,r2,800d3e8 <__alt_data_end+0xfc00d3e8>
 800d400:	803e4b0e 	bge	r16,zero,800cd30 <__alt_data_end+0xfc00cd30>
 800d404:	043fffc4 	movi	r16,-1
 800d408:	003e4906 	br	800cd30 <__alt_data_end+0xfc00cd30>
 800d40c:	d8c01c17 	ldw	r3,112(sp)
 800d410:	d8801b17 	ldw	r2,108(sp)
 800d414:	d9001d87 	ldb	r4,118(sp)
 800d418:	20000b26 	beq	r4,zero,800d448 <___svfiprintf_internal_r+0x84c>
 800d41c:	d9001d84 	addi	r4,sp,118
 800d420:	18c00044 	addi	r3,r3,1
 800d424:	10800044 	addi	r2,r2,1
 800d428:	41000015 	stw	r4,0(r8)
 800d42c:	01000044 	movi	r4,1
 800d430:	41000115 	stw	r4,4(r8)
 800d434:	d8c01c15 	stw	r3,112(sp)
 800d438:	d8801b15 	stw	r2,108(sp)
 800d43c:	010001c4 	movi	r4,7
 800d440:	20811e16 	blt	r4,r2,800d8bc <___svfiprintf_internal_r+0xcc0>
 800d444:	42000204 	addi	r8,r8,8
 800d448:	da802217 	ldw	r10,136(sp)
 800d44c:	50000b26 	beq	r10,zero,800d47c <___svfiprintf_internal_r+0x880>
 800d450:	d9001d04 	addi	r4,sp,116
 800d454:	18c00084 	addi	r3,r3,2
 800d458:	10800044 	addi	r2,r2,1
 800d45c:	41000015 	stw	r4,0(r8)
 800d460:	01000084 	movi	r4,2
 800d464:	41000115 	stw	r4,4(r8)
 800d468:	d8c01c15 	stw	r3,112(sp)
 800d46c:	d8801b15 	stw	r2,108(sp)
 800d470:	010001c4 	movi	r4,7
 800d474:	20811a16 	blt	r4,r2,800d8e0 <___svfiprintf_internal_r+0xce4>
 800d478:	42000204 	addi	r8,r8,8
 800d47c:	dac02517 	ldw	r11,148(sp)
 800d480:	01002004 	movi	r4,128
 800d484:	5900a826 	beq	r11,r4,800d728 <___svfiprintf_internal_r+0xb2c>
 800d488:	8721c83a 	sub	r16,r16,fp
 800d48c:	0400260e 	bge	zero,r16,800d528 <___svfiprintf_internal_r+0x92c>
 800d490:	01c00404 	movi	r7,16
 800d494:	3c01a50e 	bge	r7,r16,800db2c <___svfiprintf_internal_r+0xf30>
 800d498:	010200b4 	movhi	r4,2050
 800d49c:	213e1304 	addi	r4,r4,-1972
 800d4a0:	d9002215 	stw	r4,136(sp)
 800d4a4:	382f883a 	mov	r23,r7
 800d4a8:	058001c4 	movi	r22,7
 800d4ac:	00000306 	br	800d4bc <___svfiprintf_internal_r+0x8c0>
 800d4b0:	843ffc04 	addi	r16,r16,-16
 800d4b4:	42000204 	addi	r8,r8,8
 800d4b8:	bc00110e 	bge	r23,r16,800d500 <___svfiprintf_internal_r+0x904>
 800d4bc:	18c00404 	addi	r3,r3,16
 800d4c0:	10800044 	addi	r2,r2,1
 800d4c4:	44c00015 	stw	r19,0(r8)
 800d4c8:	45c00115 	stw	r23,4(r8)
 800d4cc:	d8c01c15 	stw	r3,112(sp)
 800d4d0:	d8801b15 	stw	r2,108(sp)
 800d4d4:	b0bff60e 	bge	r22,r2,800d4b0 <__alt_data_end+0xfc00d4b0>
 800d4d8:	9009883a 	mov	r4,r18
 800d4dc:	a00b883a 	mov	r5,r20
 800d4e0:	d9801a04 	addi	r6,sp,104
 800d4e4:	800ca340 	call	800ca34 <__ssprint_r>
 800d4e8:	10007e1e 	bne	r2,zero,800d6e4 <___svfiprintf_internal_r+0xae8>
 800d4ec:	843ffc04 	addi	r16,r16,-16
 800d4f0:	d8c01c17 	ldw	r3,112(sp)
 800d4f4:	d8801b17 	ldw	r2,108(sp)
 800d4f8:	d811883a 	mov	r8,sp
 800d4fc:	bc3fef16 	blt	r23,r16,800d4bc <__alt_data_end+0xfc00d4bc>
 800d500:	da802217 	ldw	r10,136(sp)
 800d504:	1c07883a 	add	r3,r3,r16
 800d508:	10800044 	addi	r2,r2,1
 800d50c:	42800015 	stw	r10,0(r8)
 800d510:	44000115 	stw	r16,4(r8)
 800d514:	d8c01c15 	stw	r3,112(sp)
 800d518:	d8801b15 	stw	r2,108(sp)
 800d51c:	010001c4 	movi	r4,7
 800d520:	2080ce16 	blt	r4,r2,800d85c <___svfiprintf_internal_r+0xc60>
 800d524:	42000204 	addi	r8,r8,8
 800d528:	dac02617 	ldw	r11,152(sp)
 800d52c:	e0c7883a 	add	r3,fp,r3
 800d530:	10800044 	addi	r2,r2,1
 800d534:	42c00015 	stw	r11,0(r8)
 800d538:	47000115 	stw	fp,4(r8)
 800d53c:	d8c01c15 	stw	r3,112(sp)
 800d540:	d8801b15 	stw	r2,108(sp)
 800d544:	010001c4 	movi	r4,7
 800d548:	2080a316 	blt	r4,r2,800d7d8 <___svfiprintf_internal_r+0xbdc>
 800d54c:	42000204 	addi	r8,r8,8
 800d550:	8c40010c 	andi	r17,r17,4
 800d554:	88002b26 	beq	r17,zero,800d604 <___svfiprintf_internal_r+0xa08>
 800d558:	da802117 	ldw	r10,132(sp)
 800d55c:	dac02017 	ldw	r11,128(sp)
 800d560:	52e1c83a 	sub	r16,r10,r11
 800d564:	0400270e 	bge	zero,r16,800d604 <___svfiprintf_internal_r+0xa08>
 800d568:	04400404 	movi	r17,16
 800d56c:	d8801b17 	ldw	r2,108(sp)
 800d570:	8c019e0e 	bge	r17,r16,800dbec <___svfiprintf_internal_r+0xff0>
 800d574:	014200b4 	movhi	r5,2050
 800d578:	297e1704 	addi	r5,r5,-1956
 800d57c:	d9402815 	stw	r5,160(sp)
 800d580:	070001c4 	movi	fp,7
 800d584:	00000306 	br	800d594 <___svfiprintf_internal_r+0x998>
 800d588:	843ffc04 	addi	r16,r16,-16
 800d58c:	42000204 	addi	r8,r8,8
 800d590:	8c00130e 	bge	r17,r16,800d5e0 <___svfiprintf_internal_r+0x9e4>
 800d594:	028200b4 	movhi	r10,2050
 800d598:	18c00404 	addi	r3,r3,16
 800d59c:	10800044 	addi	r2,r2,1
 800d5a0:	52be1704 	addi	r10,r10,-1956
 800d5a4:	42800015 	stw	r10,0(r8)
 800d5a8:	44400115 	stw	r17,4(r8)
 800d5ac:	d8c01c15 	stw	r3,112(sp)
 800d5b0:	d8801b15 	stw	r2,108(sp)
 800d5b4:	e0bff40e 	bge	fp,r2,800d588 <__alt_data_end+0xfc00d588>
 800d5b8:	9009883a 	mov	r4,r18
 800d5bc:	a00b883a 	mov	r5,r20
 800d5c0:	d9801a04 	addi	r6,sp,104
 800d5c4:	800ca340 	call	800ca34 <__ssprint_r>
 800d5c8:	1000461e 	bne	r2,zero,800d6e4 <___svfiprintf_internal_r+0xae8>
 800d5cc:	843ffc04 	addi	r16,r16,-16
 800d5d0:	d8c01c17 	ldw	r3,112(sp)
 800d5d4:	d8801b17 	ldw	r2,108(sp)
 800d5d8:	d811883a 	mov	r8,sp
 800d5dc:	8c3fed16 	blt	r17,r16,800d594 <__alt_data_end+0xfc00d594>
 800d5e0:	dac02817 	ldw	r11,160(sp)
 800d5e4:	1c07883a 	add	r3,r3,r16
 800d5e8:	10800044 	addi	r2,r2,1
 800d5ec:	42c00015 	stw	r11,0(r8)
 800d5f0:	44000115 	stw	r16,4(r8)
 800d5f4:	d8c01c15 	stw	r3,112(sp)
 800d5f8:	d8801b15 	stw	r2,108(sp)
 800d5fc:	010001c4 	movi	r4,7
 800d600:	2080fe16 	blt	r4,r2,800d9fc <___svfiprintf_internal_r+0xe00>
 800d604:	dd802017 	ldw	r22,128(sp)
 800d608:	da802117 	ldw	r10,132(sp)
 800d60c:	b280010e 	bge	r22,r10,800d614 <___svfiprintf_internal_r+0xa18>
 800d610:	502d883a 	mov	r22,r10
 800d614:	dac02417 	ldw	r11,144(sp)
 800d618:	5d97883a 	add	r11,r11,r22
 800d61c:	dac02415 	stw	r11,144(sp)
 800d620:	1800751e 	bne	r3,zero,800d7f8 <___svfiprintf_internal_r+0xbfc>
 800d624:	a8800007 	ldb	r2,0(r21)
 800d628:	d8001b15 	stw	zero,108(sp)
 800d62c:	d811883a 	mov	r8,sp
 800d630:	103d981e 	bne	r2,zero,800cc94 <__alt_data_end+0xfc00cc94>
 800d634:	a82d883a 	mov	r22,r21
 800d638:	003daf06 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800d63c:	10803fcc 	andi	r2,r2,255
 800d640:	00c00044 	movi	r3,1
 800d644:	10fe311e 	bne	r2,r3,800cf0c <__alt_data_end+0xfc00cf0c>
 800d648:	5000e126 	beq	r10,zero,800d9d0 <___svfiprintf_internal_r+0xdd4>
 800d64c:	dc402015 	stw	r17,128(sp)
 800d650:	dc002215 	stw	r16,136(sp)
 800d654:	dd801a04 	addi	r22,sp,104
 800d658:	402f883a 	mov	r23,r8
 800d65c:	5839883a 	mov	fp,r11
 800d660:	4821883a 	mov	r16,r9
 800d664:	5023883a 	mov	r17,r10
 800d668:	8009883a 	mov	r4,r16
 800d66c:	880b883a 	mov	r5,r17
 800d670:	01800284 	movi	r6,10
 800d674:	000f883a 	mov	r7,zero
 800d678:	800fff00 	call	800fff0 <__umoddi3>
 800d67c:	10800c04 	addi	r2,r2,48
 800d680:	b5bfffc4 	addi	r22,r22,-1
 800d684:	8009883a 	mov	r4,r16
 800d688:	880b883a 	mov	r5,r17
 800d68c:	01800284 	movi	r6,10
 800d690:	000f883a 	mov	r7,zero
 800d694:	b0800005 	stb	r2,0(r22)
 800d698:	800fa300 	call	800fa30 <__udivdi3>
 800d69c:	1021883a 	mov	r16,r2
 800d6a0:	10c4b03a 	or	r2,r2,r3
 800d6a4:	1823883a 	mov	r17,r3
 800d6a8:	103fef1e 	bne	r2,zero,800d668 <__alt_data_end+0xfc00d668>
 800d6ac:	da801e17 	ldw	r10,120(sp)
 800d6b0:	e017883a 	mov	r11,fp
 800d6b4:	b811883a 	mov	r8,r23
 800d6b8:	dc402017 	ldw	r17,128(sp)
 800d6bc:	dc002217 	ldw	r16,136(sp)
 800d6c0:	dd802615 	stw	r22,152(sp)
 800d6c4:	55b9c83a 	sub	fp,r10,r22
 800d6c8:	003e2206 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800d6cc:	d8801c17 	ldw	r2,112(sp)
 800d6d0:	10000426 	beq	r2,zero,800d6e4 <___svfiprintf_internal_r+0xae8>
 800d6d4:	d9002917 	ldw	r4,164(sp)
 800d6d8:	d9402717 	ldw	r5,156(sp)
 800d6dc:	d9801a04 	addi	r6,sp,104
 800d6e0:	800ca340 	call	800ca34 <__ssprint_r>
 800d6e4:	da802717 	ldw	r10,156(sp)
 800d6e8:	5080030b 	ldhu	r2,12(r10)
 800d6ec:	1080100c 	andi	r2,r2,64
 800d6f0:	1000511e 	bne	r2,zero,800d838 <___svfiprintf_internal_r+0xc3c>
 800d6f4:	d8802417 	ldw	r2,144(sp)
 800d6f8:	dfc03617 	ldw	ra,216(sp)
 800d6fc:	df003517 	ldw	fp,212(sp)
 800d700:	ddc03417 	ldw	r23,208(sp)
 800d704:	dd803317 	ldw	r22,204(sp)
 800d708:	dd403217 	ldw	r21,200(sp)
 800d70c:	dd003117 	ldw	r20,196(sp)
 800d710:	dcc03017 	ldw	r19,192(sp)
 800d714:	dc802f17 	ldw	r18,188(sp)
 800d718:	dc402e17 	ldw	r17,184(sp)
 800d71c:	dc002d17 	ldw	r16,180(sp)
 800d720:	dec03704 	addi	sp,sp,220
 800d724:	f800283a 	ret
 800d728:	da802117 	ldw	r10,132(sp)
 800d72c:	dac02017 	ldw	r11,128(sp)
 800d730:	52edc83a 	sub	r22,r10,r11
 800d734:	05bf540e 	bge	zero,r22,800d488 <__alt_data_end+0xfc00d488>
 800d738:	02400404 	movi	r9,16
 800d73c:	4d812f0e 	bge	r9,r22,800dbfc <___svfiprintf_internal_r+0x1000>
 800d740:	014200b4 	movhi	r5,2050
 800d744:	297e1304 	addi	r5,r5,-1972
 800d748:	d9402215 	stw	r5,136(sp)
 800d74c:	05c001c4 	movi	r23,7
 800d750:	00000306 	br	800d760 <___svfiprintf_internal_r+0xb64>
 800d754:	b5bffc04 	addi	r22,r22,-16
 800d758:	42000204 	addi	r8,r8,8
 800d75c:	4d80130e 	bge	r9,r22,800d7ac <___svfiprintf_internal_r+0xbb0>
 800d760:	18c00404 	addi	r3,r3,16
 800d764:	10800044 	addi	r2,r2,1
 800d768:	44c00015 	stw	r19,0(r8)
 800d76c:	42400115 	stw	r9,4(r8)
 800d770:	d8c01c15 	stw	r3,112(sp)
 800d774:	d8801b15 	stw	r2,108(sp)
 800d778:	b8bff60e 	bge	r23,r2,800d754 <__alt_data_end+0xfc00d754>
 800d77c:	9009883a 	mov	r4,r18
 800d780:	a00b883a 	mov	r5,r20
 800d784:	d9801a04 	addi	r6,sp,104
 800d788:	da402c15 	stw	r9,176(sp)
 800d78c:	800ca340 	call	800ca34 <__ssprint_r>
 800d790:	da402c17 	ldw	r9,176(sp)
 800d794:	103fd31e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d798:	b5bffc04 	addi	r22,r22,-16
 800d79c:	d8c01c17 	ldw	r3,112(sp)
 800d7a0:	d8801b17 	ldw	r2,108(sp)
 800d7a4:	d811883a 	mov	r8,sp
 800d7a8:	4dbfed16 	blt	r9,r22,800d760 <__alt_data_end+0xfc00d760>
 800d7ac:	da802217 	ldw	r10,136(sp)
 800d7b0:	1d87883a 	add	r3,r3,r22
 800d7b4:	10800044 	addi	r2,r2,1
 800d7b8:	42800015 	stw	r10,0(r8)
 800d7bc:	45800115 	stw	r22,4(r8)
 800d7c0:	d8c01c15 	stw	r3,112(sp)
 800d7c4:	d8801b15 	stw	r2,108(sp)
 800d7c8:	010001c4 	movi	r4,7
 800d7cc:	2080ce16 	blt	r4,r2,800db08 <___svfiprintf_internal_r+0xf0c>
 800d7d0:	42000204 	addi	r8,r8,8
 800d7d4:	003f2c06 	br	800d488 <__alt_data_end+0xfc00d488>
 800d7d8:	9009883a 	mov	r4,r18
 800d7dc:	a00b883a 	mov	r5,r20
 800d7e0:	d9801a04 	addi	r6,sp,104
 800d7e4:	800ca340 	call	800ca34 <__ssprint_r>
 800d7e8:	103fbe1e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d7ec:	d8c01c17 	ldw	r3,112(sp)
 800d7f0:	d811883a 	mov	r8,sp
 800d7f4:	003f5606 	br	800d550 <__alt_data_end+0xfc00d550>
 800d7f8:	9009883a 	mov	r4,r18
 800d7fc:	a00b883a 	mov	r5,r20
 800d800:	d9801a04 	addi	r6,sp,104
 800d804:	800ca340 	call	800ca34 <__ssprint_r>
 800d808:	103f8626 	beq	r2,zero,800d624 <__alt_data_end+0xfc00d624>
 800d80c:	003fb506 	br	800d6e4 <__alt_data_end+0xfc00d6e4>
 800d810:	10803fcc 	andi	r2,r2,255
 800d814:	10003b1e 	bne	r2,zero,800d904 <___svfiprintf_internal_r+0xd08>
 800d818:	8880004c 	andi	r2,r17,1
 800d81c:	10007e26 	beq	r2,zero,800da18 <___svfiprintf_internal_r+0xe1c>
 800d820:	00800c04 	movi	r2,48
 800d824:	d8c019c4 	addi	r3,sp,103
 800d828:	d88019c5 	stb	r2,103(sp)
 800d82c:	df002b17 	ldw	fp,172(sp)
 800d830:	d8c02615 	stw	r3,152(sp)
 800d834:	003dc706 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800d838:	00bfffc4 	movi	r2,-1
 800d83c:	003fae06 	br	800d6f8 <__alt_data_end+0xfc00d6f8>
 800d840:	9009883a 	mov	r4,r18
 800d844:	a00b883a 	mov	r5,r20
 800d848:	d9801a04 	addi	r6,sp,104
 800d84c:	800ca340 	call	800ca34 <__ssprint_r>
 800d850:	103fa41e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d854:	d811883a 	mov	r8,sp
 800d858:	003d2406 	br	800ccec <__alt_data_end+0xfc00ccec>
 800d85c:	9009883a 	mov	r4,r18
 800d860:	a00b883a 	mov	r5,r20
 800d864:	d9801a04 	addi	r6,sp,104
 800d868:	800ca340 	call	800ca34 <__ssprint_r>
 800d86c:	103f9d1e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d870:	d8c01c17 	ldw	r3,112(sp)
 800d874:	d8801b17 	ldw	r2,108(sp)
 800d878:	d811883a 	mov	r8,sp
 800d87c:	003f2a06 	br	800d528 <__alt_data_end+0xfc00d528>
 800d880:	d9402a17 	ldw	r5,168(sp)
 800d884:	d8c01a04 	addi	r3,sp,104
 800d888:	488003cc 	andi	r2,r9,15
 800d88c:	5008973a 	slli	r4,r10,28
 800d890:	2885883a 	add	r2,r5,r2
 800d894:	4812d13a 	srli	r9,r9,4
 800d898:	10800003 	ldbu	r2,0(r2)
 800d89c:	5014d13a 	srli	r10,r10,4
 800d8a0:	18ffffc4 	addi	r3,r3,-1
 800d8a4:	2252b03a 	or	r9,r4,r9
 800d8a8:	18800005 	stb	r2,0(r3)
 800d8ac:	4a84b03a 	or	r2,r9,r10
 800d8b0:	103ff51e 	bne	r2,zero,800d888 <__alt_data_end+0xfc00d888>
 800d8b4:	d8c02615 	stw	r3,152(sp)
 800d8b8:	003da406 	br	800cf4c <__alt_data_end+0xfc00cf4c>
 800d8bc:	9009883a 	mov	r4,r18
 800d8c0:	a00b883a 	mov	r5,r20
 800d8c4:	d9801a04 	addi	r6,sp,104
 800d8c8:	800ca340 	call	800ca34 <__ssprint_r>
 800d8cc:	103f851e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d8d0:	d8c01c17 	ldw	r3,112(sp)
 800d8d4:	d8801b17 	ldw	r2,108(sp)
 800d8d8:	d811883a 	mov	r8,sp
 800d8dc:	003eda06 	br	800d448 <__alt_data_end+0xfc00d448>
 800d8e0:	9009883a 	mov	r4,r18
 800d8e4:	a00b883a 	mov	r5,r20
 800d8e8:	d9801a04 	addi	r6,sp,104
 800d8ec:	800ca340 	call	800ca34 <__ssprint_r>
 800d8f0:	103f7c1e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d8f4:	d8c01c17 	ldw	r3,112(sp)
 800d8f8:	d8801b17 	ldw	r2,108(sp)
 800d8fc:	d811883a 	mov	r8,sp
 800d900:	003ede06 	br	800d47c <__alt_data_end+0xfc00d47c>
 800d904:	da801a04 	addi	r10,sp,104
 800d908:	da802615 	stw	r10,152(sp)
 800d90c:	003d9106 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800d910:	00800084 	movi	r2,2
 800d914:	4a86b03a 	or	r3,r9,r10
 800d918:	003d7106 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d91c:	88c0040c 	andi	r3,r17,16
 800d920:	18004f1e 	bne	r3,zero,800da60 <___svfiprintf_internal_r+0xe64>
 800d924:	88c0100c 	andi	r3,r17,64
 800d928:	18004d26 	beq	r3,zero,800da60 <___svfiprintf_internal_r+0xe64>
 800d92c:	dac02317 	ldw	r11,140(sp)
 800d930:	1240000b 	ldhu	r9,0(r2)
 800d934:	0015883a 	mov	r10,zero
 800d938:	5ac00104 	addi	r11,r11,4
 800d93c:	dac02315 	stw	r11,140(sp)
 800d940:	00800044 	movi	r2,1
 800d944:	4807883a 	mov	r3,r9
 800d948:	003d6506 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d94c:	9009883a 	mov	r4,r18
 800d950:	a00b883a 	mov	r5,r20
 800d954:	d9801a04 	addi	r6,sp,104
 800d958:	800ca340 	call	800ca34 <__ssprint_r>
 800d95c:	103f611e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800d960:	d8c01c17 	ldw	r3,112(sp)
 800d964:	d8801b17 	ldw	r2,108(sp)
 800d968:	d811883a 	mov	r8,sp
 800d96c:	003ea906 	br	800d414 <__alt_data_end+0xfc00d414>
 800d970:	88c0040c 	andi	r3,r17,16
 800d974:	1800321e 	bne	r3,zero,800da40 <___svfiprintf_internal_r+0xe44>
 800d978:	88c0100c 	andi	r3,r17,64
 800d97c:	18003026 	beq	r3,zero,800da40 <___svfiprintf_internal_r+0xe44>
 800d980:	dac02317 	ldw	r11,140(sp)
 800d984:	1240000b 	ldhu	r9,0(r2)
 800d988:	0015883a 	mov	r10,zero
 800d98c:	5ac00104 	addi	r11,r11,4
 800d990:	dac02315 	stw	r11,140(sp)
 800d994:	0005883a 	mov	r2,zero
 800d998:	4807883a 	mov	r3,r9
 800d99c:	003d5006 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d9a0:	10803fcc 	andi	r2,r2,255
 800d9a4:	1080201c 	xori	r2,r2,128
 800d9a8:	10bfe004 	addi	r2,r2,-128
 800d9ac:	01000c04 	movi	r4,48
 800d9b0:	11006826 	beq	r2,r4,800db54 <___svfiprintf_internal_r+0xf58>
 800d9b4:	da802617 	ldw	r10,152(sp)
 800d9b8:	d8801e17 	ldw	r2,120(sp)
 800d9bc:	193fffc5 	stb	r4,-1(r3)
 800d9c0:	52bfffc4 	addi	r10,r10,-1
 800d9c4:	da802615 	stw	r10,152(sp)
 800d9c8:	12b9c83a 	sub	fp,r2,r10
 800d9cc:	003d6106 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800d9d0:	00800244 	movi	r2,9
 800d9d4:	127f1d36 	bltu	r2,r9,800d64c <__alt_data_end+0xfc00d64c>
 800d9d8:	4a400c04 	addi	r9,r9,48
 800d9dc:	d8c019c4 	addi	r3,sp,103
 800d9e0:	da4019c5 	stb	r9,103(sp)
 800d9e4:	df002b17 	ldw	fp,172(sp)
 800d9e8:	d8c02615 	stw	r3,152(sp)
 800d9ec:	003d5906 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800d9f0:	d8802315 	stw	r2,140(sp)
 800d9f4:	a9000007 	ldb	r4,0(r21)
 800d9f8:	003ccc06 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d9fc:	9009883a 	mov	r4,r18
 800da00:	a00b883a 	mov	r5,r20
 800da04:	d9801a04 	addi	r6,sp,104
 800da08:	800ca340 	call	800ca34 <__ssprint_r>
 800da0c:	103f351e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800da10:	d8c01c17 	ldw	r3,112(sp)
 800da14:	003efb06 	br	800d604 <__alt_data_end+0xfc00d604>
 800da18:	d8c01a04 	addi	r3,sp,104
 800da1c:	d8c02615 	stw	r3,152(sp)
 800da20:	003d4c06 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800da24:	da802317 	ldw	r10,140(sp)
 800da28:	1a400017 	ldw	r9,0(r3)
 800da2c:	52800104 	addi	r10,r10,4
 800da30:	da802315 	stw	r10,140(sp)
 800da34:	4815d7fa 	srai	r10,r9,31
 800da38:	5005883a 	mov	r2,r10
 800da3c:	003d9d06 	br	800d0b4 <__alt_data_end+0xfc00d0b4>
 800da40:	da802317 	ldw	r10,140(sp)
 800da44:	12400017 	ldw	r9,0(r2)
 800da48:	0005883a 	mov	r2,zero
 800da4c:	52800104 	addi	r10,r10,4
 800da50:	da802315 	stw	r10,140(sp)
 800da54:	4807883a 	mov	r3,r9
 800da58:	0015883a 	mov	r10,zero
 800da5c:	003d2006 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800da60:	da802317 	ldw	r10,140(sp)
 800da64:	12400017 	ldw	r9,0(r2)
 800da68:	00800044 	movi	r2,1
 800da6c:	52800104 	addi	r10,r10,4
 800da70:	da802315 	stw	r10,140(sp)
 800da74:	4807883a 	mov	r3,r9
 800da78:	0015883a 	mov	r10,zero
 800da7c:	003d1806 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800da80:	dac02317 	ldw	r11,140(sp)
 800da84:	12400017 	ldw	r9,0(r2)
 800da88:	0015883a 	mov	r10,zero
 800da8c:	5ac00104 	addi	r11,r11,4
 800da90:	dac02315 	stw	r11,140(sp)
 800da94:	003dde06 	br	800d210 <__alt_data_end+0xfc00d210>
 800da98:	a9000007 	ldb	r4,0(r21)
 800da9c:	003ca306 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800daa0:	dac02317 	ldw	r11,140(sp)
 800daa4:	da802417 	ldw	r10,144(sp)
 800daa8:	58800017 	ldw	r2,0(r11)
 800daac:	5007d7fa 	srai	r3,r10,31
 800dab0:	5ac00104 	addi	r11,r11,4
 800dab4:	dac02315 	stw	r11,140(sp)
 800dab8:	12800015 	stw	r10,0(r2)
 800dabc:	10c00115 	stw	r3,4(r2)
 800dac0:	003c7206 	br	800cc8c <__alt_data_end+0xfc00cc8c>
 800dac4:	00800c04 	movi	r2,48
 800dac8:	d8801d05 	stb	r2,116(sp)
 800dacc:	d9001d45 	stb	r4,117(sp)
 800dad0:	8c400094 	ori	r17,r17,2
 800dad4:	00800084 	movi	r2,2
 800dad8:	003d0106 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800dadc:	ad400044 	addi	r21,r21,1
 800dae0:	8c400814 	ori	r17,r17,32
 800dae4:	11000047 	ldb	r4,1(r2)
 800dae8:	003c9006 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800daec:	dac02317 	ldw	r11,140(sp)
 800daf0:	da802417 	ldw	r10,144(sp)
 800daf4:	58800017 	ldw	r2,0(r11)
 800daf8:	5ac00104 	addi	r11,r11,4
 800dafc:	dac02315 	stw	r11,140(sp)
 800db00:	12800015 	stw	r10,0(r2)
 800db04:	003c6106 	br	800cc8c <__alt_data_end+0xfc00cc8c>
 800db08:	9009883a 	mov	r4,r18
 800db0c:	a00b883a 	mov	r5,r20
 800db10:	d9801a04 	addi	r6,sp,104
 800db14:	800ca340 	call	800ca34 <__ssprint_r>
 800db18:	103ef21e 	bne	r2,zero,800d6e4 <__alt_data_end+0xfc00d6e4>
 800db1c:	d8c01c17 	ldw	r3,112(sp)
 800db20:	d8801b17 	ldw	r2,108(sp)
 800db24:	d811883a 	mov	r8,sp
 800db28:	003e5706 	br	800d488 <__alt_data_end+0xfc00d488>
 800db2c:	02c200b4 	movhi	r11,2050
 800db30:	5afe1304 	addi	r11,r11,-1972
 800db34:	dac02215 	stw	r11,136(sp)
 800db38:	003e7106 	br	800d500 <__alt_data_end+0xfc00d500>
 800db3c:	dac02317 	ldw	r11,140(sp)
 800db40:	12400017 	ldw	r9,0(r2)
 800db44:	0015883a 	mov	r10,zero
 800db48:	5ac00104 	addi	r11,r11,4
 800db4c:	dac02315 	stw	r11,140(sp)
 800db50:	003daf06 	br	800d210 <__alt_data_end+0xfc00d210>
 800db54:	da801e17 	ldw	r10,120(sp)
 800db58:	d8c02617 	ldw	r3,152(sp)
 800db5c:	50f9c83a 	sub	fp,r10,r3
 800db60:	003cfc06 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800db64:	da002c15 	stw	r8,176(sp)
 800db68:	80037580 	call	8003758 <strlen>
 800db6c:	1039883a 	mov	fp,r2
 800db70:	dac01d83 	ldbu	r11,118(sp)
 800db74:	ddc02315 	stw	r23,140(sp)
 800db78:	0021883a 	mov	r16,zero
 800db7c:	da002c17 	ldw	r8,176(sp)
 800db80:	003cf406 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800db84:	04001004 	movi	r16,64
 800db88:	800b883a 	mov	r5,r16
 800db8c:	800a4b00 	call	800a4b0 <_malloc_r>
 800db90:	da802717 	ldw	r10,156(sp)
 800db94:	50800015 	stw	r2,0(r10)
 800db98:	50800415 	stw	r2,16(r10)
 800db9c:	10002c26 	beq	r2,zero,800dc50 <___svfiprintf_internal_r+0x1054>
 800dba0:	da802717 	ldw	r10,156(sp)
 800dba4:	54000515 	stw	r16,20(r10)
 800dba8:	003c2806 	br	800cc4c <__alt_data_end+0xfc00cc4c>
 800dbac:	00800184 	movi	r2,6
 800dbb0:	1400012e 	bgeu	r2,r16,800dbb8 <___svfiprintf_internal_r+0xfbc>
 800dbb4:	1021883a 	mov	r16,r2
 800dbb8:	8039883a 	mov	fp,r16
 800dbbc:	802d883a 	mov	r22,r16
 800dbc0:	80001716 	blt	r16,zero,800dc20 <___svfiprintf_internal_r+0x1024>
 800dbc4:	008200b4 	movhi	r2,2050
 800dbc8:	10bdaf04 	addi	r2,r2,-2372
 800dbcc:	dd802015 	stw	r22,128(sp)
 800dbd0:	ddc02315 	stw	r23,140(sp)
 800dbd4:	d8802615 	stw	r2,152(sp)
 800dbd8:	003d4706 	br	800d0f8 <__alt_data_end+0xfc00d0f8>
 800dbdc:	010200b4 	movhi	r4,2050
 800dbe0:	213e1704 	addi	r4,r4,-1956
 800dbe4:	d9002815 	stw	r4,160(sp)
 800dbe8:	003d7206 	br	800d1b4 <__alt_data_end+0xfc00d1b4>
 800dbec:	010200b4 	movhi	r4,2050
 800dbf0:	213e1704 	addi	r4,r4,-1956
 800dbf4:	d9002815 	stw	r4,160(sp)
 800dbf8:	003e7906 	br	800d5e0 <__alt_data_end+0xfc00d5e0>
 800dbfc:	010200b4 	movhi	r4,2050
 800dc00:	213e1304 	addi	r4,r4,-1972
 800dc04:	d9002215 	stw	r4,136(sp)
 800dc08:	003ee806 	br	800d7ac <__alt_data_end+0xfc00d7ac>
 800dc0c:	8039883a 	mov	fp,r16
 800dc10:	dac01d83 	ldbu	r11,118(sp)
 800dc14:	ddc02315 	stw	r23,140(sp)
 800dc18:	0021883a 	mov	r16,zero
 800dc1c:	003ccd06 	br	800cf54 <__alt_data_end+0xfc00cf54>
 800dc20:	002d883a 	mov	r22,zero
 800dc24:	003fe706 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800dc28:	dac02317 	ldw	r11,140(sp)
 800dc2c:	a805883a 	mov	r2,r21
 800dc30:	502b883a 	mov	r21,r10
 800dc34:	5c000017 	ldw	r16,0(r11)
 800dc38:	59000104 	addi	r4,r11,4
 800dc3c:	d9002315 	stw	r4,140(sp)
 800dc40:	803fa80e 	bge	r16,zero,800dae4 <__alt_data_end+0xfc00dae4>
 800dc44:	043fffc4 	movi	r16,-1
 800dc48:	11000047 	ldb	r4,1(r2)
 800dc4c:	003c3706 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800dc50:	dac02917 	ldw	r11,164(sp)
 800dc54:	00800304 	movi	r2,12
 800dc58:	58800015 	stw	r2,0(r11)
 800dc5c:	00bfffc4 	movi	r2,-1
 800dc60:	003ea506 	br	800d6f8 <__alt_data_end+0xfc00d6f8>

0800dc64 <__sprint_r.part.0>:
 800dc64:	28801917 	ldw	r2,100(r5)
 800dc68:	defff604 	addi	sp,sp,-40
 800dc6c:	dd400515 	stw	r21,20(sp)
 800dc70:	dcc00315 	stw	r19,12(sp)
 800dc74:	dfc00915 	stw	ra,36(sp)
 800dc78:	df000815 	stw	fp,32(sp)
 800dc7c:	ddc00715 	stw	r23,28(sp)
 800dc80:	dd800615 	stw	r22,24(sp)
 800dc84:	dd000415 	stw	r20,16(sp)
 800dc88:	dc800215 	stw	r18,8(sp)
 800dc8c:	dc400115 	stw	r17,4(sp)
 800dc90:	dc000015 	stw	r16,0(sp)
 800dc94:	1088000c 	andi	r2,r2,8192
 800dc98:	2827883a 	mov	r19,r5
 800dc9c:	302b883a 	mov	r21,r6
 800dca0:	10002d26 	beq	r2,zero,800dd58 <__sprint_r.part.0+0xf4>
 800dca4:	30800217 	ldw	r2,8(r6)
 800dca8:	35800017 	ldw	r22,0(r6)
 800dcac:	10002826 	beq	r2,zero,800dd50 <__sprint_r.part.0+0xec>
 800dcb0:	2029883a 	mov	r20,r4
 800dcb4:	b5c00104 	addi	r23,r22,4
 800dcb8:	04bfffc4 	movi	r18,-1
 800dcbc:	bc400017 	ldw	r17,0(r23)
 800dcc0:	b4000017 	ldw	r16,0(r22)
 800dcc4:	0039883a 	mov	fp,zero
 800dcc8:	8822d0ba 	srli	r17,r17,2
 800dccc:	04400316 	blt	zero,r17,800dcdc <__sprint_r.part.0+0x78>
 800dcd0:	00001706 	br	800dd30 <__sprint_r.part.0+0xcc>
 800dcd4:	84000104 	addi	r16,r16,4
 800dcd8:	8f001526 	beq	r17,fp,800dd30 <__sprint_r.part.0+0xcc>
 800dcdc:	81400017 	ldw	r5,0(r16)
 800dce0:	a009883a 	mov	r4,r20
 800dce4:	980d883a 	mov	r6,r19
 800dce8:	800f4f00 	call	800f4f0 <_fputwc_r>
 800dcec:	e7000044 	addi	fp,fp,1
 800dcf0:	14bff81e 	bne	r2,r18,800dcd4 <__alt_data_end+0xfc00dcd4>
 800dcf4:	9005883a 	mov	r2,r18
 800dcf8:	a8000215 	stw	zero,8(r21)
 800dcfc:	a8000115 	stw	zero,4(r21)
 800dd00:	dfc00917 	ldw	ra,36(sp)
 800dd04:	df000817 	ldw	fp,32(sp)
 800dd08:	ddc00717 	ldw	r23,28(sp)
 800dd0c:	dd800617 	ldw	r22,24(sp)
 800dd10:	dd400517 	ldw	r21,20(sp)
 800dd14:	dd000417 	ldw	r20,16(sp)
 800dd18:	dcc00317 	ldw	r19,12(sp)
 800dd1c:	dc800217 	ldw	r18,8(sp)
 800dd20:	dc400117 	ldw	r17,4(sp)
 800dd24:	dc000017 	ldw	r16,0(sp)
 800dd28:	dec00a04 	addi	sp,sp,40
 800dd2c:	f800283a 	ret
 800dd30:	a8c00217 	ldw	r3,8(r21)
 800dd34:	8c63883a 	add	r17,r17,r17
 800dd38:	8c63883a 	add	r17,r17,r17
 800dd3c:	1c45c83a 	sub	r2,r3,r17
 800dd40:	a8800215 	stw	r2,8(r21)
 800dd44:	b5800204 	addi	r22,r22,8
 800dd48:	bdc00204 	addi	r23,r23,8
 800dd4c:	103fdb1e 	bne	r2,zero,800dcbc <__alt_data_end+0xfc00dcbc>
 800dd50:	0005883a 	mov	r2,zero
 800dd54:	003fe806 	br	800dcf8 <__alt_data_end+0xfc00dcf8>
 800dd58:	8009c040 	call	8009c04 <__sfvwrite_r>
 800dd5c:	003fe606 	br	800dcf8 <__alt_data_end+0xfc00dcf8>

0800dd60 <__sprint_r>:
 800dd60:	30c00217 	ldw	r3,8(r6)
 800dd64:	18000126 	beq	r3,zero,800dd6c <__sprint_r+0xc>
 800dd68:	800dc641 	jmpi	800dc64 <__sprint_r.part.0>
 800dd6c:	30000115 	stw	zero,4(r6)
 800dd70:	0005883a 	mov	r2,zero
 800dd74:	f800283a 	ret

0800dd78 <___vfiprintf_internal_r>:
 800dd78:	defeca04 	addi	sp,sp,-1240
 800dd7c:	dd813215 	stw	r22,1224(sp)
 800dd80:	dd013015 	stw	r20,1216(sp)
 800dd84:	dfc13515 	stw	ra,1236(sp)
 800dd88:	df013415 	stw	fp,1232(sp)
 800dd8c:	ddc13315 	stw	r23,1228(sp)
 800dd90:	dd413115 	stw	r21,1220(sp)
 800dd94:	dcc12f15 	stw	r19,1212(sp)
 800dd98:	dc812e15 	stw	r18,1208(sp)
 800dd9c:	dc412d15 	stw	r17,1204(sp)
 800dda0:	dc012c15 	stw	r16,1200(sp)
 800dda4:	d9012015 	stw	r4,1152(sp)
 800dda8:	d9c12115 	stw	r7,1156(sp)
 800ddac:	2829883a 	mov	r20,r5
 800ddb0:	302d883a 	mov	r22,r6
 800ddb4:	20000226 	beq	r4,zero,800ddc0 <___vfiprintf_internal_r+0x48>
 800ddb8:	20800e17 	ldw	r2,56(r4)
 800ddbc:	1001d326 	beq	r2,zero,800e50c <___vfiprintf_internal_r+0x794>
 800ddc0:	a0c0030b 	ldhu	r3,12(r20)
 800ddc4:	1908000c 	andi	r4,r3,8192
 800ddc8:	1805883a 	mov	r2,r3
 800ddcc:	2000071e 	bne	r4,zero,800ddec <___vfiprintf_internal_r+0x74>
 800ddd0:	a1001917 	ldw	r4,100(r20)
 800ddd4:	18880014 	ori	r2,r3,8192
 800ddd8:	00f7ffc4 	movi	r3,-8193
 800dddc:	20c8703a 	and	r4,r4,r3
 800dde0:	a080030d 	sth	r2,12(r20)
 800dde4:	1007883a 	mov	r3,r2
 800dde8:	a1001915 	stw	r4,100(r20)
 800ddec:	1100020c 	andi	r4,r2,8
 800ddf0:	20018926 	beq	r4,zero,800e418 <___vfiprintf_internal_r+0x6a0>
 800ddf4:	a1000417 	ldw	r4,16(r20)
 800ddf8:	20018726 	beq	r4,zero,800e418 <___vfiprintf_internal_r+0x6a0>
 800ddfc:	1080068c 	andi	r2,r2,26
 800de00:	01000284 	movi	r4,10
 800de04:	11018d26 	beq	r2,r4,800e43c <___vfiprintf_internal_r+0x6c4>
 800de08:	da810a04 	addi	r10,sp,1064
 800de0c:	dac109c4 	addi	r11,sp,1063
 800de10:	070200b4 	movhi	fp,2050
 800de14:	05c200b4 	movhi	r23,2050
 800de18:	da811e15 	stw	r10,1144(sp)
 800de1c:	52d5c83a 	sub	r10,r10,r11
 800de20:	e73e1f04 	addi	fp,fp,-1924
 800de24:	bdfe1b04 	addi	r23,r23,-1940
 800de28:	dac11f15 	stw	r11,1148(sp)
 800de2c:	dec11a15 	stw	sp,1128(sp)
 800de30:	d8011c15 	stw	zero,1136(sp)
 800de34:	d8011b15 	stw	zero,1132(sp)
 800de38:	d8012615 	stw	zero,1176(sp)
 800de3c:	d8012215 	stw	zero,1160(sp)
 800de40:	da812715 	stw	r10,1180(sp)
 800de44:	d811883a 	mov	r8,sp
 800de48:	b021883a 	mov	r16,r22
 800de4c:	80800007 	ldb	r2,0(r16)
 800de50:	10039c26 	beq	r2,zero,800ecc4 <___vfiprintf_internal_r+0xf4c>
 800de54:	01000944 	movi	r4,37
 800de58:	11039a26 	beq	r2,r4,800ecc4 <___vfiprintf_internal_r+0xf4c>
 800de5c:	8005883a 	mov	r2,r16
 800de60:	00000106 	br	800de68 <___vfiprintf_internal_r+0xf0>
 800de64:	19000326 	beq	r3,r4,800de74 <___vfiprintf_internal_r+0xfc>
 800de68:	10800044 	addi	r2,r2,1
 800de6c:	10c00007 	ldb	r3,0(r2)
 800de70:	183ffc1e 	bne	r3,zero,800de64 <__alt_data_end+0xfc00de64>
 800de74:	1425c83a 	sub	r18,r2,r16
 800de78:	1023883a 	mov	r17,r2
 800de7c:	90001026 	beq	r18,zero,800dec0 <___vfiprintf_internal_r+0x148>
 800de80:	d8c11c17 	ldw	r3,1136(sp)
 800de84:	d8811b17 	ldw	r2,1132(sp)
 800de88:	44000015 	stw	r16,0(r8)
 800de8c:	90c7883a 	add	r3,r18,r3
 800de90:	10800044 	addi	r2,r2,1
 800de94:	44800115 	stw	r18,4(r8)
 800de98:	d8c11c15 	stw	r3,1136(sp)
 800de9c:	d8811b15 	stw	r2,1132(sp)
 800dea0:	010001c4 	movi	r4,7
 800dea4:	2080750e 	bge	r4,r2,800e07c <___vfiprintf_internal_r+0x304>
 800dea8:	18039d1e 	bne	r3,zero,800ed20 <___vfiprintf_internal_r+0xfa8>
 800deac:	dac12217 	ldw	r11,1160(sp)
 800deb0:	d8011b15 	stw	zero,1132(sp)
 800deb4:	d811883a 	mov	r8,sp
 800deb8:	5c97883a 	add	r11,r11,r18
 800debc:	dac12215 	stw	r11,1160(sp)
 800dec0:	88800007 	ldb	r2,0(r17)
 800dec4:	1002e026 	beq	r2,zero,800ea48 <___vfiprintf_internal_r+0xcd0>
 800dec8:	88c00047 	ldb	r3,1(r17)
 800decc:	8c000044 	addi	r16,r17,1
 800ded0:	d8011d85 	stb	zero,1142(sp)
 800ded4:	000d883a 	mov	r6,zero
 800ded8:	027fffc4 	movi	r9,-1
 800dedc:	0027883a 	mov	r19,zero
 800dee0:	002b883a 	mov	r21,zero
 800dee4:	01001604 	movi	r4,88
 800dee8:	01400244 	movi	r5,9
 800deec:	03000a84 	movi	r12,42
 800def0:	01c01b04 	movi	r7,108
 800def4:	84000044 	addi	r16,r16,1
 800def8:	18bff804 	addi	r2,r3,-32
 800defc:	20825f36 	bltu	r4,r2,800e87c <___vfiprintf_internal_r+0xb04>
 800df00:	100490ba 	slli	r2,r2,2
 800df04:	02820074 	movhi	r10,2049
 800df08:	52b7c604 	addi	r10,r10,-8424
 800df0c:	1285883a 	add	r2,r2,r10
 800df10:	10800017 	ldw	r2,0(r2)
 800df14:	1000683a 	jmp	r2
 800df18:	0800e6ec 	andhi	zero,at,923
 800df1c:	0800e87c 	xorhi	zero,at,929
 800df20:	0800e87c 	xorhi	zero,at,929
 800df24:	0800e870 	cmpltui	zero,at,929
 800df28:	0800e87c 	xorhi	zero,at,929
 800df2c:	0800e87c 	xorhi	zero,at,929
 800df30:	0800e87c 	xorhi	zero,at,929
 800df34:	0800e87c 	xorhi	zero,at,929
 800df38:	0800e87c 	xorhi	zero,at,929
 800df3c:	0800e87c 	xorhi	zero,at,929
 800df40:	0800e848 	cmpgei	zero,at,929
 800df44:	0800e864 	muli	zero,at,929
 800df48:	0800e87c 	xorhi	zero,at,929
 800df4c:	0800e51c 	xori	zero,at,916
 800df50:	0800e67c 	xorhi	zero,at,921
 800df54:	0800e87c 	xorhi	zero,at,929
 800df58:	0800e600 	call	800e60 <__alt_mem_sdram-0x77ff1a0>
 800df5c:	0800e60c 	andi	zero,at,920
 800df60:	0800e60c 	andi	zero,at,920
 800df64:	0800e60c 	andi	zero,at,920
 800df68:	0800e60c 	andi	zero,at,920
 800df6c:	0800e60c 	andi	zero,at,920
 800df70:	0800e60c 	andi	zero,at,920
 800df74:	0800e60c 	andi	zero,at,920
 800df78:	0800e60c 	andi	zero,at,920
 800df7c:	0800e60c 	andi	zero,at,920
 800df80:	0800e87c 	xorhi	zero,at,929
 800df84:	0800e87c 	xorhi	zero,at,929
 800df88:	0800e87c 	xorhi	zero,at,929
 800df8c:	0800e87c 	xorhi	zero,at,929
 800df90:	0800e87c 	xorhi	zero,at,929
 800df94:	0800e87c 	xorhi	zero,at,929
 800df98:	0800e87c 	xorhi	zero,at,929
 800df9c:	0800e87c 	xorhi	zero,at,929
 800dfa0:	0800e87c 	xorhi	zero,at,929
 800dfa4:	0800e87c 	xorhi	zero,at,929
 800dfa8:	0800e638 	rdprs	zero,at,920
 800dfac:	0800e87c 	xorhi	zero,at,929
 800dfb0:	0800e87c 	xorhi	zero,at,929
 800dfb4:	0800e87c 	xorhi	zero,at,929
 800dfb8:	0800e87c 	xorhi	zero,at,929
 800dfbc:	0800e87c 	xorhi	zero,at,929
 800dfc0:	0800e87c 	xorhi	zero,at,929
 800dfc4:	0800e87c 	xorhi	zero,at,929
 800dfc8:	0800e87c 	xorhi	zero,at,929
 800dfcc:	0800e87c 	xorhi	zero,at,929
 800dfd0:	0800e87c 	xorhi	zero,at,929
 800dfd4:	0800e0cc 	andi	zero,at,899
 800dfd8:	0800e87c 	xorhi	zero,at,929
 800dfdc:	0800e87c 	xorhi	zero,at,929
 800dfe0:	0800e87c 	xorhi	zero,at,929
 800dfe4:	0800e87c 	xorhi	zero,at,929
 800dfe8:	0800e87c 	xorhi	zero,at,929
 800dfec:	0800e090 	cmplti	zero,at,898
 800dff0:	0800e87c 	xorhi	zero,at,929
 800dff4:	0800e87c 	xorhi	zero,at,929
 800dff8:	0800e578 	rdprs	zero,at,917
 800dffc:	0800e87c 	xorhi	zero,at,929
 800e000:	0800e87c 	xorhi	zero,at,929
 800e004:	0800e87c 	xorhi	zero,at,929
 800e008:	0800e87c 	xorhi	zero,at,929
 800e00c:	0800e87c 	xorhi	zero,at,929
 800e010:	0800e87c 	xorhi	zero,at,929
 800e014:	0800e87c 	xorhi	zero,at,929
 800e018:	0800e87c 	xorhi	zero,at,929
 800e01c:	0800e87c 	xorhi	zero,at,929
 800e020:	0800e87c 	xorhi	zero,at,929
 800e024:	0800e5d0 	cmplti	zero,at,919
 800e028:	0800e768 	cmpgeui	zero,at,925
 800e02c:	0800e87c 	xorhi	zero,at,929
 800e030:	0800e87c 	xorhi	zero,at,929
 800e034:	0800e87c 	xorhi	zero,at,929
 800e038:	0800e7f0 	cmpltui	zero,at,927
 800e03c:	0800e768 	cmpgeui	zero,at,925
 800e040:	0800e87c 	xorhi	zero,at,929
 800e044:	0800e87c 	xorhi	zero,at,929
 800e048:	0800e7fc 	xorhi	zero,at,927
 800e04c:	0800e87c 	xorhi	zero,at,929
 800e050:	0800e6bc 	xorhi	zero,at,922
 800e054:	0800e0d0 	cmplti	zero,at,899
 800e058:	0800e7a4 	muli	zero,at,926
 800e05c:	0800e7e4 	muli	zero,at,927
 800e060:	0800e87c 	xorhi	zero,at,929
 800e064:	0800e708 	cmpgei	zero,at,924
 800e068:	0800e87c 	xorhi	zero,at,929
 800e06c:	0800e094 	ori	zero,at,898
 800e070:	0800e87c 	xorhi	zero,at,929
 800e074:	0800e87c 	xorhi	zero,at,929
 800e078:	0800e80c 	andi	zero,at,928
 800e07c:	42000204 	addi	r8,r8,8
 800e080:	dac12217 	ldw	r11,1160(sp)
 800e084:	5c97883a 	add	r11,r11,r18
 800e088:	dac12215 	stw	r11,1160(sp)
 800e08c:	003f8c06 	br	800dec0 <__alt_data_end+0xfc00dec0>
 800e090:	ad400414 	ori	r21,r21,16
 800e094:	a880080c 	andi	r2,r21,32
 800e098:	10012f1e 	bne	r2,zero,800e558 <___vfiprintf_internal_r+0x7e0>
 800e09c:	a880040c 	andi	r2,r21,16
 800e0a0:	1001ff1e 	bne	r2,zero,800e8a0 <___vfiprintf_internal_r+0xb28>
 800e0a4:	a880100c 	andi	r2,r21,64
 800e0a8:	1001fd26 	beq	r2,zero,800e8a0 <___vfiprintf_internal_r+0xb28>
 800e0ac:	da812117 	ldw	r10,1156(sp)
 800e0b0:	002d883a 	mov	r22,zero
 800e0b4:	00800044 	movi	r2,1
 800e0b8:	5480000b 	ldhu	r18,0(r10)
 800e0bc:	52800104 	addi	r10,r10,4
 800e0c0:	da812115 	stw	r10,1156(sp)
 800e0c4:	9009883a 	mov	r4,r18
 800e0c8:	00000a06 	br	800e0f4 <___vfiprintf_internal_r+0x37c>
 800e0cc:	ad400414 	ori	r21,r21,16
 800e0d0:	a880080c 	andi	r2,r21,32
 800e0d4:	10011426 	beq	r2,zero,800e528 <___vfiprintf_internal_r+0x7b0>
 800e0d8:	da812117 	ldw	r10,1156(sp)
 800e0dc:	0005883a 	mov	r2,zero
 800e0e0:	54800017 	ldw	r18,0(r10)
 800e0e4:	55800117 	ldw	r22,4(r10)
 800e0e8:	52800204 	addi	r10,r10,8
 800e0ec:	da812115 	stw	r10,1156(sp)
 800e0f0:	9588b03a 	or	r4,r18,r22
 800e0f4:	d8011d85 	stb	zero,1142(sp)
 800e0f8:	4823883a 	mov	r17,r9
 800e0fc:	0019883a 	mov	r12,zero
 800e100:	48000216 	blt	r9,zero,800e10c <___vfiprintf_internal_r+0x394>
 800e104:	00ffdfc4 	movi	r3,-129
 800e108:	a8ea703a 	and	r21,r21,r3
 800e10c:	2002221e 	bne	r4,zero,800e998 <___vfiprintf_internal_r+0xc20>
 800e110:	4802c726 	beq	r9,zero,800ec30 <___vfiprintf_internal_r+0xeb8>
 800e114:	10803fcc 	andi	r2,r2,255
 800e118:	00c00044 	movi	r3,1
 800e11c:	10c24426 	beq	r2,r3,800ea30 <___vfiprintf_internal_r+0xcb8>
 800e120:	00c00084 	movi	r3,2
 800e124:	10c2cc26 	beq	r2,r3,800ec58 <___vfiprintf_internal_r+0xee0>
 800e128:	d8c10a04 	addi	r3,sp,1064
 800e12c:	9008d0fa 	srli	r4,r18,3
 800e130:	b00a977a 	slli	r5,r22,29
 800e134:	b02cd0fa 	srli	r22,r22,3
 800e138:	948001cc 	andi	r18,r18,7
 800e13c:	90800c04 	addi	r2,r18,48
 800e140:	18ffffc4 	addi	r3,r3,-1
 800e144:	2924b03a 	or	r18,r5,r4
 800e148:	18800005 	stb	r2,0(r3)
 800e14c:	9588b03a 	or	r4,r18,r22
 800e150:	203ff61e 	bne	r4,zero,800e12c <__alt_data_end+0xfc00e12c>
 800e154:	a900004c 	andi	r4,r21,1
 800e158:	d8c12415 	stw	r3,1168(sp)
 800e15c:	2002fb1e 	bne	r4,zero,800ed4c <___vfiprintf_internal_r+0xfd4>
 800e160:	da811e17 	ldw	r10,1144(sp)
 800e164:	50e3c83a 	sub	r17,r10,r3
 800e168:	8825883a 	mov	r18,r17
 800e16c:	8a40010e 	bge	r17,r9,800e174 <___vfiprintf_internal_r+0x3fc>
 800e170:	4825883a 	mov	r18,r9
 800e174:	63003fcc 	andi	r12,r12,255
 800e178:	6300201c 	xori	r12,r12,128
 800e17c:	633fe004 	addi	r12,r12,-128
 800e180:	60000126 	beq	r12,zero,800e188 <___vfiprintf_internal_r+0x410>
 800e184:	94800044 	addi	r18,r18,1
 800e188:	ab80008c 	andi	r14,r21,2
 800e18c:	70000126 	beq	r14,zero,800e194 <___vfiprintf_internal_r+0x41c>
 800e190:	94800084 	addi	r18,r18,2
 800e194:	ad80210c 	andi	r22,r21,132
 800e198:	b001df1e 	bne	r22,zero,800e918 <___vfiprintf_internal_r+0xba0>
 800e19c:	9c8fc83a 	sub	r7,r19,r18
 800e1a0:	01c1dd0e 	bge	zero,r7,800e918 <___vfiprintf_internal_r+0xba0>
 800e1a4:	03000404 	movi	r12,16
 800e1a8:	d8811c17 	ldw	r2,1136(sp)
 800e1ac:	61c3920e 	bge	r12,r7,800eff8 <___vfiprintf_internal_r+0x1280>
 800e1b0:	028200b4 	movhi	r10,2050
 800e1b4:	52be1f04 	addi	r10,r10,-1924
 800e1b8:	dc012915 	stw	r16,1188(sp)
 800e1bc:	d9811b17 	ldw	r6,1132(sp)
 800e1c0:	da812315 	stw	r10,1164(sp)
 800e1c4:	00c001c4 	movi	r3,7
 800e1c8:	da412515 	stw	r9,1172(sp)
 800e1cc:	db812815 	stw	r14,1184(sp)
 800e1d0:	3821883a 	mov	r16,r7
 800e1d4:	00000506 	br	800e1ec <___vfiprintf_internal_r+0x474>
 800e1d8:	31400084 	addi	r5,r6,2
 800e1dc:	42000204 	addi	r8,r8,8
 800e1e0:	200d883a 	mov	r6,r4
 800e1e4:	843ffc04 	addi	r16,r16,-16
 800e1e8:	64000d0e 	bge	r12,r16,800e220 <___vfiprintf_internal_r+0x4a8>
 800e1ec:	10800404 	addi	r2,r2,16
 800e1f0:	31000044 	addi	r4,r6,1
 800e1f4:	47000015 	stw	fp,0(r8)
 800e1f8:	43000115 	stw	r12,4(r8)
 800e1fc:	d8811c15 	stw	r2,1136(sp)
 800e200:	d9011b15 	stw	r4,1132(sp)
 800e204:	193ff40e 	bge	r3,r4,800e1d8 <__alt_data_end+0xfc00e1d8>
 800e208:	1001b51e 	bne	r2,zero,800e8e0 <___vfiprintf_internal_r+0xb68>
 800e20c:	843ffc04 	addi	r16,r16,-16
 800e210:	000d883a 	mov	r6,zero
 800e214:	01400044 	movi	r5,1
 800e218:	d811883a 	mov	r8,sp
 800e21c:	643ff316 	blt	r12,r16,800e1ec <__alt_data_end+0xfc00e1ec>
 800e220:	800f883a 	mov	r7,r16
 800e224:	da412517 	ldw	r9,1172(sp)
 800e228:	db812817 	ldw	r14,1184(sp)
 800e22c:	dc012917 	ldw	r16,1188(sp)
 800e230:	dac12317 	ldw	r11,1164(sp)
 800e234:	3887883a 	add	r3,r7,r2
 800e238:	41c00115 	stw	r7,4(r8)
 800e23c:	42c00015 	stw	r11,0(r8)
 800e240:	d8c11c15 	stw	r3,1136(sp)
 800e244:	d9411b15 	stw	r5,1132(sp)
 800e248:	008001c4 	movi	r2,7
 800e24c:	11429316 	blt	r2,r5,800ec9c <___vfiprintf_internal_r+0xf24>
 800e250:	d9011d87 	ldb	r4,1142(sp)
 800e254:	42000204 	addi	r8,r8,8
 800e258:	28800044 	addi	r2,r5,1
 800e25c:	2001b31e 	bne	r4,zero,800e92c <___vfiprintf_internal_r+0xbb4>
 800e260:	70000c26 	beq	r14,zero,800e294 <___vfiprintf_internal_r+0x51c>
 800e264:	d9011d04 	addi	r4,sp,1140
 800e268:	18c00084 	addi	r3,r3,2
 800e26c:	41000015 	stw	r4,0(r8)
 800e270:	01000084 	movi	r4,2
 800e274:	41000115 	stw	r4,4(r8)
 800e278:	d8c11c15 	stw	r3,1136(sp)
 800e27c:	d8811b15 	stw	r2,1132(sp)
 800e280:	010001c4 	movi	r4,7
 800e284:	20826516 	blt	r4,r2,800ec1c <___vfiprintf_internal_r+0xea4>
 800e288:	100b883a 	mov	r5,r2
 800e28c:	42000204 	addi	r8,r8,8
 800e290:	10800044 	addi	r2,r2,1
 800e294:	01002004 	movi	r4,128
 800e298:	b1021a26 	beq	r22,r4,800eb04 <___vfiprintf_internal_r+0xd8c>
 800e29c:	4c6dc83a 	sub	r22,r9,r17
 800e2a0:	0580230e 	bge	zero,r22,800e330 <___vfiprintf_internal_r+0x5b8>
 800e2a4:	01c00404 	movi	r7,16
 800e2a8:	3d83300e 	bge	r7,r22,800ef6c <___vfiprintf_internal_r+0x11f4>
 800e2ac:	008200b4 	movhi	r2,2050
 800e2b0:	10be1b04 	addi	r2,r2,-1940
 800e2b4:	d8812315 	stw	r2,1164(sp)
 800e2b8:	030001c4 	movi	r12,7
 800e2bc:	00000506 	br	800e2d4 <___vfiprintf_internal_r+0x55c>
 800e2c0:	28800084 	addi	r2,r5,2
 800e2c4:	42000204 	addi	r8,r8,8
 800e2c8:	200b883a 	mov	r5,r4
 800e2cc:	b5bffc04 	addi	r22,r22,-16
 800e2d0:	3d800d0e 	bge	r7,r22,800e308 <___vfiprintf_internal_r+0x590>
 800e2d4:	18c00404 	addi	r3,r3,16
 800e2d8:	29000044 	addi	r4,r5,1
 800e2dc:	45c00015 	stw	r23,0(r8)
 800e2e0:	41c00115 	stw	r7,4(r8)
 800e2e4:	d8c11c15 	stw	r3,1136(sp)
 800e2e8:	d9011b15 	stw	r4,1132(sp)
 800e2ec:	613ff40e 	bge	r12,r4,800e2c0 <__alt_data_end+0xfc00e2c0>
 800e2f0:	18019b1e 	bne	r3,zero,800e960 <___vfiprintf_internal_r+0xbe8>
 800e2f4:	b5bffc04 	addi	r22,r22,-16
 800e2f8:	000b883a 	mov	r5,zero
 800e2fc:	00800044 	movi	r2,1
 800e300:	d811883a 	mov	r8,sp
 800e304:	3dbff316 	blt	r7,r22,800e2d4 <__alt_data_end+0xfc00e2d4>
 800e308:	da812317 	ldw	r10,1164(sp)
 800e30c:	1d87883a 	add	r3,r3,r22
 800e310:	45800115 	stw	r22,4(r8)
 800e314:	42800015 	stw	r10,0(r8)
 800e318:	d8c11c15 	stw	r3,1136(sp)
 800e31c:	d8811b15 	stw	r2,1132(sp)
 800e320:	010001c4 	movi	r4,7
 800e324:	2081dd16 	blt	r4,r2,800ea9c <___vfiprintf_internal_r+0xd24>
 800e328:	42000204 	addi	r8,r8,8
 800e32c:	10800044 	addi	r2,r2,1
 800e330:	da812417 	ldw	r10,1168(sp)
 800e334:	1c47883a 	add	r3,r3,r17
 800e338:	44400115 	stw	r17,4(r8)
 800e33c:	42800015 	stw	r10,0(r8)
 800e340:	d8c11c15 	stw	r3,1136(sp)
 800e344:	d8811b15 	stw	r2,1132(sp)
 800e348:	010001c4 	movi	r4,7
 800e34c:	2081dc0e 	bge	r4,r2,800eac0 <___vfiprintf_internal_r+0xd48>
 800e350:	1802611e 	bne	r3,zero,800ecd8 <___vfiprintf_internal_r+0xf60>
 800e354:	d8011b15 	stw	zero,1132(sp)
 800e358:	aac0010c 	andi	r11,r21,4
 800e35c:	58002726 	beq	r11,zero,800e3fc <___vfiprintf_internal_r+0x684>
 800e360:	9ca3c83a 	sub	r17,r19,r18
 800e364:	d811883a 	mov	r8,sp
 800e368:	0443510e 	bge	zero,r17,800f0b0 <___vfiprintf_internal_r+0x1338>
 800e36c:	01c00404 	movi	r7,16
 800e370:	3c43320e 	bge	r7,r17,800f03c <___vfiprintf_internal_r+0x12c4>
 800e374:	008200b4 	movhi	r2,2050
 800e378:	10be1f04 	addi	r2,r2,-1924
 800e37c:	d9011b17 	ldw	r4,1132(sp)
 800e380:	d8812315 	stw	r2,1164(sp)
 800e384:	382d883a 	mov	r22,r7
 800e388:	054001c4 	movi	r21,7
 800e38c:	00000506 	br	800e3a4 <___vfiprintf_internal_r+0x62c>
 800e390:	21400084 	addi	r5,r4,2
 800e394:	42000204 	addi	r8,r8,8
 800e398:	1009883a 	mov	r4,r2
 800e39c:	8c7ffc04 	addi	r17,r17,-16
 800e3a0:	b4400d0e 	bge	r22,r17,800e3d8 <___vfiprintf_internal_r+0x660>
 800e3a4:	18c00404 	addi	r3,r3,16
 800e3a8:	20800044 	addi	r2,r4,1
 800e3ac:	47000015 	stw	fp,0(r8)
 800e3b0:	45800115 	stw	r22,4(r8)
 800e3b4:	d8c11c15 	stw	r3,1136(sp)
 800e3b8:	d8811b15 	stw	r2,1132(sp)
 800e3bc:	a8bff40e 	bge	r21,r2,800e390 <__alt_data_end+0xfc00e390>
 800e3c0:	1801ac1e 	bne	r3,zero,800ea74 <___vfiprintf_internal_r+0xcfc>
 800e3c4:	8c7ffc04 	addi	r17,r17,-16
 800e3c8:	0009883a 	mov	r4,zero
 800e3cc:	01400044 	movi	r5,1
 800e3d0:	d811883a 	mov	r8,sp
 800e3d4:	b47ff316 	blt	r22,r17,800e3a4 <__alt_data_end+0xfc00e3a4>
 800e3d8:	da812317 	ldw	r10,1164(sp)
 800e3dc:	1c47883a 	add	r3,r3,r17
 800e3e0:	44400115 	stw	r17,4(r8)
 800e3e4:	42800015 	stw	r10,0(r8)
 800e3e8:	d8c11c15 	stw	r3,1136(sp)
 800e3ec:	d9411b15 	stw	r5,1132(sp)
 800e3f0:	008001c4 	movi	r2,7
 800e3f4:	1141b70e 	bge	r2,r5,800ead4 <___vfiprintf_internal_r+0xd5c>
 800e3f8:	1802cf1e 	bne	r3,zero,800ef38 <___vfiprintf_internal_r+0x11c0>
 800e3fc:	94c2ca16 	blt	r18,r19,800ef28 <___vfiprintf_internal_r+0x11b0>
 800e400:	dac12217 	ldw	r11,1160(sp)
 800e404:	5c97883a 	add	r11,r11,r18
 800e408:	dac12215 	stw	r11,1160(sp)
 800e40c:	d8011b15 	stw	zero,1132(sp)
 800e410:	d811883a 	mov	r8,sp
 800e414:	003e8d06 	br	800de4c <__alt_data_end+0xfc00de4c>
 800e418:	d9012017 	ldw	r4,1152(sp)
 800e41c:	a00b883a 	mov	r5,r20
 800e420:	80077a00 	call	80077a0 <__swsetup_r>
 800e424:	10002c1e 	bne	r2,zero,800e4d8 <___vfiprintf_internal_r+0x760>
 800e428:	a0c0030b 	ldhu	r3,12(r20)
 800e42c:	01000284 	movi	r4,10
 800e430:	1805883a 	mov	r2,r3
 800e434:	1080068c 	andi	r2,r2,26
 800e438:	113e731e 	bne	r2,r4,800de08 <__alt_data_end+0xfc00de08>
 800e43c:	a080038b 	ldhu	r2,14(r20)
 800e440:	113fffcc 	andi	r4,r2,65535
 800e444:	2120001c 	xori	r4,r4,32768
 800e448:	21200004 	addi	r4,r4,-32768
 800e44c:	203e6e16 	blt	r4,zero,800de08 <__alt_data_end+0xfc00de08>
 800e450:	a3001917 	ldw	r12,100(r20)
 800e454:	a2c00717 	ldw	r11,28(r20)
 800e458:	a2800917 	ldw	r10,36(r20)
 800e45c:	d9012017 	ldw	r4,1152(sp)
 800e460:	d9c12117 	ldw	r7,1156(sp)
 800e464:	02410004 	movi	r9,1024
 800e468:	18ffff4c 	andi	r3,r3,65533
 800e46c:	da4b883a 	add	r5,sp,r9
 800e470:	b00d883a 	mov	r6,r22
 800e474:	d8c1030d 	sth	r3,1036(sp)
 800e478:	db011915 	stw	r12,1124(sp)
 800e47c:	d881038d 	sth	r2,1038(sp)
 800e480:	dac10715 	stw	r11,1052(sp)
 800e484:	da810915 	stw	r10,1060(sp)
 800e488:	dec10015 	stw	sp,1024(sp)
 800e48c:	dec10415 	stw	sp,1040(sp)
 800e490:	da410215 	stw	r9,1032(sp)
 800e494:	da410515 	stw	r9,1044(sp)
 800e498:	d8010615 	stw	zero,1048(sp)
 800e49c:	800dd780 	call	800dd78 <___vfiprintf_internal_r>
 800e4a0:	1021883a 	mov	r16,r2
 800e4a4:	10000416 	blt	r2,zero,800e4b8 <___vfiprintf_internal_r+0x740>
 800e4a8:	d9012017 	ldw	r4,1152(sp)
 800e4ac:	d9410004 	addi	r5,sp,1024
 800e4b0:	80091f80 	call	80091f8 <_fflush_r>
 800e4b4:	1002fc1e 	bne	r2,zero,800f0a8 <___vfiprintf_internal_r+0x1330>
 800e4b8:	d881030b 	ldhu	r2,1036(sp)
 800e4bc:	1080100c 	andi	r2,r2,64
 800e4c0:	10000326 	beq	r2,zero,800e4d0 <___vfiprintf_internal_r+0x758>
 800e4c4:	a080030b 	ldhu	r2,12(r20)
 800e4c8:	10801014 	ori	r2,r2,64
 800e4cc:	a080030d 	sth	r2,12(r20)
 800e4d0:	8005883a 	mov	r2,r16
 800e4d4:	00000106 	br	800e4dc <___vfiprintf_internal_r+0x764>
 800e4d8:	00bfffc4 	movi	r2,-1
 800e4dc:	dfc13517 	ldw	ra,1236(sp)
 800e4e0:	df013417 	ldw	fp,1232(sp)
 800e4e4:	ddc13317 	ldw	r23,1228(sp)
 800e4e8:	dd813217 	ldw	r22,1224(sp)
 800e4ec:	dd413117 	ldw	r21,1220(sp)
 800e4f0:	dd013017 	ldw	r20,1216(sp)
 800e4f4:	dcc12f17 	ldw	r19,1212(sp)
 800e4f8:	dc812e17 	ldw	r18,1208(sp)
 800e4fc:	dc412d17 	ldw	r17,1204(sp)
 800e500:	dc012c17 	ldw	r16,1200(sp)
 800e504:	dec13604 	addi	sp,sp,1240
 800e508:	f800283a 	ret
 800e50c:	80097a00 	call	80097a0 <__sinit>
 800e510:	003e2b06 	br	800ddc0 <__alt_data_end+0xfc00ddc0>
 800e514:	04e7c83a 	sub	r19,zero,r19
 800e518:	d8812115 	stw	r2,1156(sp)
 800e51c:	ad400114 	ori	r21,r21,4
 800e520:	80c00007 	ldb	r3,0(r16)
 800e524:	003e7306 	br	800def4 <__alt_data_end+0xfc00def4>
 800e528:	a880040c 	andi	r2,r21,16
 800e52c:	1000e41e 	bne	r2,zero,800e8c0 <___vfiprintf_internal_r+0xb48>
 800e530:	a880100c 	andi	r2,r21,64
 800e534:	1000e226 	beq	r2,zero,800e8c0 <___vfiprintf_internal_r+0xb48>
 800e538:	da812117 	ldw	r10,1156(sp)
 800e53c:	002d883a 	mov	r22,zero
 800e540:	0005883a 	mov	r2,zero
 800e544:	5480000b 	ldhu	r18,0(r10)
 800e548:	52800104 	addi	r10,r10,4
 800e54c:	da812115 	stw	r10,1156(sp)
 800e550:	9009883a 	mov	r4,r18
 800e554:	003ee706 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800e558:	da812117 	ldw	r10,1156(sp)
 800e55c:	00800044 	movi	r2,1
 800e560:	54800017 	ldw	r18,0(r10)
 800e564:	55800117 	ldw	r22,4(r10)
 800e568:	52800204 	addi	r10,r10,8
 800e56c:	da812115 	stw	r10,1156(sp)
 800e570:	9588b03a 	or	r4,r18,r22
 800e574:	003edf06 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800e578:	02c200b4 	movhi	r11,2050
 800e57c:	5afda504 	addi	r11,r11,-2412
 800e580:	d9811d85 	stb	r6,1142(sp)
 800e584:	dac12615 	stw	r11,1176(sp)
 800e588:	a900080c 	andi	r4,r21,32
 800e58c:	d8812117 	ldw	r2,1156(sp)
 800e590:	2000a526 	beq	r4,zero,800e828 <___vfiprintf_internal_r+0xab0>
 800e594:	da812117 	ldw	r10,1156(sp)
 800e598:	14800017 	ldw	r18,0(r2)
 800e59c:	15800117 	ldw	r22,4(r2)
 800e5a0:	52800204 	addi	r10,r10,8
 800e5a4:	da812115 	stw	r10,1156(sp)
 800e5a8:	a880004c 	andi	r2,r21,1
 800e5ac:	1001d926 	beq	r2,zero,800ed14 <___vfiprintf_internal_r+0xf9c>
 800e5b0:	9588b03a 	or	r4,r18,r22
 800e5b4:	20024426 	beq	r4,zero,800eec8 <___vfiprintf_internal_r+0x1150>
 800e5b8:	00800c04 	movi	r2,48
 800e5bc:	d8811d05 	stb	r2,1140(sp)
 800e5c0:	d8c11d45 	stb	r3,1141(sp)
 800e5c4:	ad400094 	ori	r21,r21,2
 800e5c8:	00800084 	movi	r2,2
 800e5cc:	003ec906 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800e5d0:	da812117 	ldw	r10,1156(sp)
 800e5d4:	04800044 	movi	r18,1
 800e5d8:	dac10004 	addi	r11,sp,1024
 800e5dc:	50800017 	ldw	r2,0(r10)
 800e5e0:	52800104 	addi	r10,r10,4
 800e5e4:	d8011d85 	stb	zero,1142(sp)
 800e5e8:	d8810005 	stb	r2,1024(sp)
 800e5ec:	da812115 	stw	r10,1156(sp)
 800e5f0:	9023883a 	mov	r17,r18
 800e5f4:	dac12415 	stw	r11,1168(sp)
 800e5f8:	0013883a 	mov	r9,zero
 800e5fc:	003ee206 	br	800e188 <__alt_data_end+0xfc00e188>
 800e600:	ad402014 	ori	r21,r21,128
 800e604:	80c00007 	ldb	r3,0(r16)
 800e608:	003e3a06 	br	800def4 <__alt_data_end+0xfc00def4>
 800e60c:	8015883a 	mov	r10,r16
 800e610:	0027883a 	mov	r19,zero
 800e614:	18bff404 	addi	r2,r3,-48
 800e618:	50c00007 	ldb	r3,0(r10)
 800e61c:	9cc002a4 	muli	r19,r19,10
 800e620:	84000044 	addi	r16,r16,1
 800e624:	8015883a 	mov	r10,r16
 800e628:	98a7883a 	add	r19,r19,r2
 800e62c:	18bff404 	addi	r2,r3,-48
 800e630:	28bff92e 	bgeu	r5,r2,800e618 <__alt_data_end+0xfc00e618>
 800e634:	003e3006 	br	800def8 <__alt_data_end+0xfc00def8>
 800e638:	ad400414 	ori	r21,r21,16
 800e63c:	d9811d85 	stb	r6,1142(sp)
 800e640:	a880080c 	andi	r2,r21,32
 800e644:	d8c12117 	ldw	r3,1156(sp)
 800e648:	10004b26 	beq	r2,zero,800e778 <___vfiprintf_internal_r+0xa00>
 800e64c:	da812117 	ldw	r10,1156(sp)
 800e650:	18800117 	ldw	r2,4(r3)
 800e654:	1c800017 	ldw	r18,0(r3)
 800e658:	52800204 	addi	r10,r10,8
 800e65c:	da812115 	stw	r10,1156(sp)
 800e660:	102d883a 	mov	r22,r2
 800e664:	1001f116 	blt	r2,zero,800ee2c <___vfiprintf_internal_r+0x10b4>
 800e668:	db011d83 	ldbu	r12,1142(sp)
 800e66c:	4823883a 	mov	r17,r9
 800e670:	00800044 	movi	r2,1
 800e674:	9588b03a 	or	r4,r18,r22
 800e678:	003ea106 	br	800e100 <__alt_data_end+0xfc00e100>
 800e67c:	80c00007 	ldb	r3,0(r16)
 800e680:	82800044 	addi	r10,r16,1
 800e684:	1b027f26 	beq	r3,r12,800f084 <___vfiprintf_internal_r+0x130c>
 800e688:	18bff404 	addi	r2,r3,-48
 800e68c:	5021883a 	mov	r16,r10
 800e690:	0013883a 	mov	r9,zero
 800e694:	28be1836 	bltu	r5,r2,800def8 <__alt_data_end+0xfc00def8>
 800e698:	80c00007 	ldb	r3,0(r16)
 800e69c:	4a4002a4 	muli	r9,r9,10
 800e6a0:	84000044 	addi	r16,r16,1
 800e6a4:	1253883a 	add	r9,r2,r9
 800e6a8:	18bff404 	addi	r2,r3,-48
 800e6ac:	28bffa2e 	bgeu	r5,r2,800e698 <__alt_data_end+0xfc00e698>
 800e6b0:	483e110e 	bge	r9,zero,800def8 <__alt_data_end+0xfc00def8>
 800e6b4:	027fffc4 	movi	r9,-1
 800e6b8:	003e0f06 	br	800def8 <__alt_data_end+0xfc00def8>
 800e6bc:	d9811d85 	stb	r6,1142(sp)
 800e6c0:	a880080c 	andi	r2,r21,32
 800e6c4:	1001ee26 	beq	r2,zero,800ee80 <___vfiprintf_internal_r+0x1108>
 800e6c8:	da812117 	ldw	r10,1156(sp)
 800e6cc:	dac12217 	ldw	r11,1160(sp)
 800e6d0:	50800017 	ldw	r2,0(r10)
 800e6d4:	5807d7fa 	srai	r3,r11,31
 800e6d8:	52800104 	addi	r10,r10,4
 800e6dc:	da812115 	stw	r10,1156(sp)
 800e6e0:	12c00015 	stw	r11,0(r2)
 800e6e4:	10c00115 	stw	r3,4(r2)
 800e6e8:	003dd806 	br	800de4c <__alt_data_end+0xfc00de4c>
 800e6ec:	30803fcc 	andi	r2,r6,255
 800e6f0:	1080201c 	xori	r2,r2,128
 800e6f4:	10bfe004 	addi	r2,r2,-128
 800e6f8:	1001df1e 	bne	r2,zero,800ee78 <___vfiprintf_internal_r+0x1100>
 800e6fc:	01800804 	movi	r6,32
 800e700:	80c00007 	ldb	r3,0(r16)
 800e704:	003dfb06 	br	800def4 <__alt_data_end+0xfc00def4>
 800e708:	da812117 	ldw	r10,1156(sp)
 800e70c:	dac12117 	ldw	r11,1156(sp)
 800e710:	d8011d85 	stb	zero,1142(sp)
 800e714:	52800017 	ldw	r10,0(r10)
 800e718:	5d800104 	addi	r22,r11,4
 800e71c:	da812415 	stw	r10,1168(sp)
 800e720:	50023b26 	beq	r10,zero,800f010 <___vfiprintf_internal_r+0x1298>
 800e724:	d9012417 	ldw	r4,1168(sp)
 800e728:	48021f16 	blt	r9,zero,800efa8 <___vfiprintf_internal_r+0x1230>
 800e72c:	480d883a 	mov	r6,r9
 800e730:	000b883a 	mov	r5,zero
 800e734:	da012a15 	stw	r8,1192(sp)
 800e738:	da412b15 	stw	r9,1196(sp)
 800e73c:	800ac580 	call	800ac58 <memchr>
 800e740:	da012a17 	ldw	r8,1192(sp)
 800e744:	da412b17 	ldw	r9,1196(sp)
 800e748:	10024726 	beq	r2,zero,800f068 <___vfiprintf_internal_r+0x12f0>
 800e74c:	d8c12417 	ldw	r3,1168(sp)
 800e750:	10e3c83a 	sub	r17,r2,r3
 800e754:	4c41f616 	blt	r9,r17,800ef30 <___vfiprintf_internal_r+0x11b8>
 800e758:	db011d83 	ldbu	r12,1142(sp)
 800e75c:	dd812115 	stw	r22,1156(sp)
 800e760:	0013883a 	mov	r9,zero
 800e764:	003e8006 	br	800e168 <__alt_data_end+0xfc00e168>
 800e768:	d9811d85 	stb	r6,1142(sp)
 800e76c:	a880080c 	andi	r2,r21,32
 800e770:	d8c12117 	ldw	r3,1156(sp)
 800e774:	103fb51e 	bne	r2,zero,800e64c <__alt_data_end+0xfc00e64c>
 800e778:	a880040c 	andi	r2,r21,16
 800e77c:	10015e1e 	bne	r2,zero,800ecf8 <___vfiprintf_internal_r+0xf80>
 800e780:	a880100c 	andi	r2,r21,64
 800e784:	10015c26 	beq	r2,zero,800ecf8 <___vfiprintf_internal_r+0xf80>
 800e788:	1c80000f 	ldh	r18,0(r3)
 800e78c:	da812117 	ldw	r10,1156(sp)
 800e790:	902dd7fa 	srai	r22,r18,31
 800e794:	52800104 	addi	r10,r10,4
 800e798:	da812115 	stw	r10,1156(sp)
 800e79c:	b005883a 	mov	r2,r22
 800e7a0:	003fb006 	br	800e664 <__alt_data_end+0xfc00e664>
 800e7a4:	da812117 	ldw	r10,1156(sp)
 800e7a8:	00800c04 	movi	r2,48
 800e7ac:	02c200b4 	movhi	r11,2050
 800e7b0:	54800017 	ldw	r18,0(r10)
 800e7b4:	d8811d05 	stb	r2,1140(sp)
 800e7b8:	52800104 	addi	r10,r10,4
 800e7bc:	00801e04 	movi	r2,120
 800e7c0:	5afdaa04 	addi	r11,r11,-2392
 800e7c4:	d8811d45 	stb	r2,1141(sp)
 800e7c8:	002d883a 	mov	r22,zero
 800e7cc:	ad400094 	ori	r21,r21,2
 800e7d0:	da812115 	stw	r10,1156(sp)
 800e7d4:	dac12615 	stw	r11,1176(sp)
 800e7d8:	00800084 	movi	r2,2
 800e7dc:	9009883a 	mov	r4,r18
 800e7e0:	003e4406 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800e7e4:	ad400814 	ori	r21,r21,32
 800e7e8:	80c00007 	ldb	r3,0(r16)
 800e7ec:	003dc106 	br	800def4 <__alt_data_end+0xfc00def4>
 800e7f0:	ad401014 	ori	r21,r21,64
 800e7f4:	80c00007 	ldb	r3,0(r16)
 800e7f8:	003dbe06 	br	800def4 <__alt_data_end+0xfc00def4>
 800e7fc:	80c00007 	ldb	r3,0(r16)
 800e800:	19c1de26 	beq	r3,r7,800ef7c <___vfiprintf_internal_r+0x1204>
 800e804:	ad400414 	ori	r21,r21,16
 800e808:	003dba06 	br	800def4 <__alt_data_end+0xfc00def4>
 800e80c:	008200b4 	movhi	r2,2050
 800e810:	10bdaa04 	addi	r2,r2,-2392
 800e814:	d8812615 	stw	r2,1176(sp)
 800e818:	d9811d85 	stb	r6,1142(sp)
 800e81c:	a900080c 	andi	r4,r21,32
 800e820:	d8812117 	ldw	r2,1156(sp)
 800e824:	203f5b1e 	bne	r4,zero,800e594 <__alt_data_end+0xfc00e594>
 800e828:	a900040c 	andi	r4,r21,16
 800e82c:	2001a826 	beq	r4,zero,800eed0 <___vfiprintf_internal_r+0x1158>
 800e830:	dac12117 	ldw	r11,1156(sp)
 800e834:	14800017 	ldw	r18,0(r2)
 800e838:	002d883a 	mov	r22,zero
 800e83c:	5ac00104 	addi	r11,r11,4
 800e840:	dac12115 	stw	r11,1156(sp)
 800e844:	003f5806 	br	800e5a8 <__alt_data_end+0xfc00e5a8>
 800e848:	da812117 	ldw	r10,1156(sp)
 800e84c:	54c00017 	ldw	r19,0(r10)
 800e850:	50800104 	addi	r2,r10,4
 800e854:	983f2f16 	blt	r19,zero,800e514 <__alt_data_end+0xfc00e514>
 800e858:	d8812115 	stw	r2,1156(sp)
 800e85c:	80c00007 	ldb	r3,0(r16)
 800e860:	003da406 	br	800def4 <__alt_data_end+0xfc00def4>
 800e864:	01800ac4 	movi	r6,43
 800e868:	80c00007 	ldb	r3,0(r16)
 800e86c:	003da106 	br	800def4 <__alt_data_end+0xfc00def4>
 800e870:	ad400054 	ori	r21,r21,1
 800e874:	80c00007 	ldb	r3,0(r16)
 800e878:	003d9e06 	br	800def4 <__alt_data_end+0xfc00def4>
 800e87c:	d9811d85 	stb	r6,1142(sp)
 800e880:	18007126 	beq	r3,zero,800ea48 <___vfiprintf_internal_r+0xcd0>
 800e884:	04800044 	movi	r18,1
 800e888:	d8c10005 	stb	r3,1024(sp)
 800e88c:	d8c10004 	addi	r3,sp,1024
 800e890:	d8011d85 	stb	zero,1142(sp)
 800e894:	9023883a 	mov	r17,r18
 800e898:	d8c12415 	stw	r3,1168(sp)
 800e89c:	003f5606 	br	800e5f8 <__alt_data_end+0xfc00e5f8>
 800e8a0:	dac12117 	ldw	r11,1156(sp)
 800e8a4:	002d883a 	mov	r22,zero
 800e8a8:	00800044 	movi	r2,1
 800e8ac:	5c800017 	ldw	r18,0(r11)
 800e8b0:	5ac00104 	addi	r11,r11,4
 800e8b4:	dac12115 	stw	r11,1156(sp)
 800e8b8:	9009883a 	mov	r4,r18
 800e8bc:	003e0d06 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800e8c0:	dac12117 	ldw	r11,1156(sp)
 800e8c4:	002d883a 	mov	r22,zero
 800e8c8:	0005883a 	mov	r2,zero
 800e8cc:	5c800017 	ldw	r18,0(r11)
 800e8d0:	5ac00104 	addi	r11,r11,4
 800e8d4:	dac12115 	stw	r11,1156(sp)
 800e8d8:	9009883a 	mov	r4,r18
 800e8dc:	003e0506 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800e8e0:	d9012017 	ldw	r4,1152(sp)
 800e8e4:	a00b883a 	mov	r5,r20
 800e8e8:	d9811a04 	addi	r6,sp,1128
 800e8ec:	d8c12a15 	stw	r3,1192(sp)
 800e8f0:	db012b15 	stw	r12,1196(sp)
 800e8f4:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800e8f8:	d8c12a17 	ldw	r3,1192(sp)
 800e8fc:	db012b17 	ldw	r12,1196(sp)
 800e900:	1000571e 	bne	r2,zero,800ea60 <___vfiprintf_internal_r+0xce8>
 800e904:	d9811b17 	ldw	r6,1132(sp)
 800e908:	d8811c17 	ldw	r2,1136(sp)
 800e90c:	d811883a 	mov	r8,sp
 800e910:	31400044 	addi	r5,r6,1
 800e914:	003e3306 	br	800e1e4 <__alt_data_end+0xfc00e1e4>
 800e918:	d9411b17 	ldw	r5,1132(sp)
 800e91c:	d8c11c17 	ldw	r3,1136(sp)
 800e920:	28800044 	addi	r2,r5,1
 800e924:	d9011d87 	ldb	r4,1142(sp)
 800e928:	203e4d26 	beq	r4,zero,800e260 <__alt_data_end+0xfc00e260>
 800e92c:	01000044 	movi	r4,1
 800e930:	d9411d84 	addi	r5,sp,1142
 800e934:	1907883a 	add	r3,r3,r4
 800e938:	41400015 	stw	r5,0(r8)
 800e93c:	41000115 	stw	r4,4(r8)
 800e940:	d8c11c15 	stw	r3,1136(sp)
 800e944:	d8811b15 	stw	r2,1132(sp)
 800e948:	014001c4 	movi	r5,7
 800e94c:	2880aa16 	blt	r5,r2,800ebf8 <___vfiprintf_internal_r+0xe80>
 800e950:	100b883a 	mov	r5,r2
 800e954:	42000204 	addi	r8,r8,8
 800e958:	10800044 	addi	r2,r2,1
 800e95c:	003e4006 	br	800e260 <__alt_data_end+0xfc00e260>
 800e960:	d9012017 	ldw	r4,1152(sp)
 800e964:	a00b883a 	mov	r5,r20
 800e968:	d9811a04 	addi	r6,sp,1128
 800e96c:	d9c12a15 	stw	r7,1192(sp)
 800e970:	db012b15 	stw	r12,1196(sp)
 800e974:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800e978:	d9c12a17 	ldw	r7,1192(sp)
 800e97c:	db012b17 	ldw	r12,1196(sp)
 800e980:	1000371e 	bne	r2,zero,800ea60 <___vfiprintf_internal_r+0xce8>
 800e984:	d9411b17 	ldw	r5,1132(sp)
 800e988:	d8c11c17 	ldw	r3,1136(sp)
 800e98c:	d811883a 	mov	r8,sp
 800e990:	28800044 	addi	r2,r5,1
 800e994:	003e4d06 	br	800e2cc <__alt_data_end+0xfc00e2cc>
 800e998:	10803fcc 	andi	r2,r2,255
 800e99c:	00c00044 	movi	r3,1
 800e9a0:	10fddf1e 	bne	r2,r3,800e120 <__alt_data_end+0xfc00e120>
 800e9a4:	b000021e 	bne	r22,zero,800e9b0 <___vfiprintf_internal_r+0xc38>
 800e9a8:	00800244 	movi	r2,9
 800e9ac:	1480202e 	bgeu	r2,r18,800ea30 <___vfiprintf_internal_r+0xcb8>
 800e9b0:	dc012515 	stw	r16,1172(sp)
 800e9b4:	dc410a04 	addi	r17,sp,1064
 800e9b8:	9021883a 	mov	r16,r18
 800e9bc:	da012415 	stw	r8,1168(sp)
 800e9c0:	b025883a 	mov	r18,r22
 800e9c4:	da412315 	stw	r9,1164(sp)
 800e9c8:	602d883a 	mov	r22,r12
 800e9cc:	8009883a 	mov	r4,r16
 800e9d0:	900b883a 	mov	r5,r18
 800e9d4:	01800284 	movi	r6,10
 800e9d8:	000f883a 	mov	r7,zero
 800e9dc:	800fff00 	call	800fff0 <__umoddi3>
 800e9e0:	10800c04 	addi	r2,r2,48
 800e9e4:	8c7fffc4 	addi	r17,r17,-1
 800e9e8:	8009883a 	mov	r4,r16
 800e9ec:	900b883a 	mov	r5,r18
 800e9f0:	01800284 	movi	r6,10
 800e9f4:	000f883a 	mov	r7,zero
 800e9f8:	88800005 	stb	r2,0(r17)
 800e9fc:	800fa300 	call	800fa30 <__udivdi3>
 800ea00:	1021883a 	mov	r16,r2
 800ea04:	10c4b03a 	or	r2,r2,r3
 800ea08:	1825883a 	mov	r18,r3
 800ea0c:	103fef1e 	bne	r2,zero,800e9cc <__alt_data_end+0xfc00e9cc>
 800ea10:	da811e17 	ldw	r10,1144(sp)
 800ea14:	da012417 	ldw	r8,1168(sp)
 800ea18:	da412317 	ldw	r9,1164(sp)
 800ea1c:	dc412415 	stw	r17,1168(sp)
 800ea20:	b019883a 	mov	r12,r22
 800ea24:	dc012517 	ldw	r16,1172(sp)
 800ea28:	5463c83a 	sub	r17,r10,r17
 800ea2c:	003dce06 	br	800e168 <__alt_data_end+0xfc00e168>
 800ea30:	94800c04 	addi	r18,r18,48
 800ea34:	d8c109c4 	addi	r3,sp,1063
 800ea38:	dc8109c5 	stb	r18,1063(sp)
 800ea3c:	dc412717 	ldw	r17,1180(sp)
 800ea40:	d8c12415 	stw	r3,1168(sp)
 800ea44:	003dc806 	br	800e168 <__alt_data_end+0xfc00e168>
 800ea48:	d8811c17 	ldw	r2,1136(sp)
 800ea4c:	10000426 	beq	r2,zero,800ea60 <___vfiprintf_internal_r+0xce8>
 800ea50:	d9012017 	ldw	r4,1152(sp)
 800ea54:	a00b883a 	mov	r5,r20
 800ea58:	d9811a04 	addi	r6,sp,1128
 800ea5c:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ea60:	a080030b 	ldhu	r2,12(r20)
 800ea64:	1080100c 	andi	r2,r2,64
 800ea68:	103e9b1e 	bne	r2,zero,800e4d8 <__alt_data_end+0xfc00e4d8>
 800ea6c:	d8812217 	ldw	r2,1160(sp)
 800ea70:	003e9a06 	br	800e4dc <__alt_data_end+0xfc00e4dc>
 800ea74:	d9012017 	ldw	r4,1152(sp)
 800ea78:	a00b883a 	mov	r5,r20
 800ea7c:	d9811a04 	addi	r6,sp,1128
 800ea80:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ea84:	103ff61e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ea88:	d9011b17 	ldw	r4,1132(sp)
 800ea8c:	d8c11c17 	ldw	r3,1136(sp)
 800ea90:	d811883a 	mov	r8,sp
 800ea94:	21400044 	addi	r5,r4,1
 800ea98:	003e4006 	br	800e39c <__alt_data_end+0xfc00e39c>
 800ea9c:	1800d61e 	bne	r3,zero,800edf8 <___vfiprintf_internal_r+0x1080>
 800eaa0:	dac12417 	ldw	r11,1168(sp)
 800eaa4:	00800044 	movi	r2,1
 800eaa8:	dc400115 	stw	r17,4(sp)
 800eaac:	dac00015 	stw	r11,0(sp)
 800eab0:	dc411c15 	stw	r17,1136(sp)
 800eab4:	d8811b15 	stw	r2,1132(sp)
 800eab8:	8807883a 	mov	r3,r17
 800eabc:	d811883a 	mov	r8,sp
 800eac0:	42000204 	addi	r8,r8,8
 800eac4:	aac0010c 	andi	r11,r21,4
 800eac8:	58000226 	beq	r11,zero,800ead4 <___vfiprintf_internal_r+0xd5c>
 800eacc:	9ca3c83a 	sub	r17,r19,r18
 800ead0:	047e2616 	blt	zero,r17,800e36c <__alt_data_end+0xfc00e36c>
 800ead4:	94c0010e 	bge	r18,r19,800eadc <___vfiprintf_internal_r+0xd64>
 800ead8:	9825883a 	mov	r18,r19
 800eadc:	da812217 	ldw	r10,1160(sp)
 800eae0:	5495883a 	add	r10,r10,r18
 800eae4:	da812215 	stw	r10,1160(sp)
 800eae8:	183e4826 	beq	r3,zero,800e40c <__alt_data_end+0xfc00e40c>
 800eaec:	d9012017 	ldw	r4,1152(sp)
 800eaf0:	a00b883a 	mov	r5,r20
 800eaf4:	d9811a04 	addi	r6,sp,1128
 800eaf8:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800eafc:	103e4326 	beq	r2,zero,800e40c <__alt_data_end+0xfc00e40c>
 800eb00:	003fd706 	br	800ea60 <__alt_data_end+0xfc00ea60>
 800eb04:	9cadc83a 	sub	r22,r19,r18
 800eb08:	05bde40e 	bge	zero,r22,800e29c <__alt_data_end+0xfc00e29c>
 800eb0c:	03000404 	movi	r12,16
 800eb10:	6581500e 	bge	r12,r22,800f054 <___vfiprintf_internal_r+0x12dc>
 800eb14:	008200b4 	movhi	r2,2050
 800eb18:	10be1b04 	addi	r2,r2,-1940
 800eb1c:	d8812315 	stw	r2,1164(sp)
 800eb20:	8005883a 	mov	r2,r16
 800eb24:	038001c4 	movi	r14,7
 800eb28:	b021883a 	mov	r16,r22
 800eb2c:	da412515 	stw	r9,1172(sp)
 800eb30:	102d883a 	mov	r22,r2
 800eb34:	00000506 	br	800eb4c <___vfiprintf_internal_r+0xdd4>
 800eb38:	29000084 	addi	r4,r5,2
 800eb3c:	42000204 	addi	r8,r8,8
 800eb40:	100b883a 	mov	r5,r2
 800eb44:	843ffc04 	addi	r16,r16,-16
 800eb48:	64000d0e 	bge	r12,r16,800eb80 <___vfiprintf_internal_r+0xe08>
 800eb4c:	18c00404 	addi	r3,r3,16
 800eb50:	28800044 	addi	r2,r5,1
 800eb54:	45c00015 	stw	r23,0(r8)
 800eb58:	43000115 	stw	r12,4(r8)
 800eb5c:	d8c11c15 	stw	r3,1136(sp)
 800eb60:	d8811b15 	stw	r2,1132(sp)
 800eb64:	70bff40e 	bge	r14,r2,800eb38 <__alt_data_end+0xfc00eb38>
 800eb68:	1800151e 	bne	r3,zero,800ebc0 <___vfiprintf_internal_r+0xe48>
 800eb6c:	843ffc04 	addi	r16,r16,-16
 800eb70:	000b883a 	mov	r5,zero
 800eb74:	01000044 	movi	r4,1
 800eb78:	d811883a 	mov	r8,sp
 800eb7c:	643ff316 	blt	r12,r16,800eb4c <__alt_data_end+0xfc00eb4c>
 800eb80:	da412517 	ldw	r9,1172(sp)
 800eb84:	b005883a 	mov	r2,r22
 800eb88:	802d883a 	mov	r22,r16
 800eb8c:	1021883a 	mov	r16,r2
 800eb90:	da812317 	ldw	r10,1164(sp)
 800eb94:	1d87883a 	add	r3,r3,r22
 800eb98:	45800115 	stw	r22,4(r8)
 800eb9c:	42800015 	stw	r10,0(r8)
 800eba0:	d8c11c15 	stw	r3,1136(sp)
 800eba4:	d9011b15 	stw	r4,1132(sp)
 800eba8:	008001c4 	movi	r2,7
 800ebac:	11008d16 	blt	r2,r4,800ede4 <___vfiprintf_internal_r+0x106c>
 800ebb0:	42000204 	addi	r8,r8,8
 800ebb4:	20800044 	addi	r2,r4,1
 800ebb8:	200b883a 	mov	r5,r4
 800ebbc:	003db706 	br	800e29c <__alt_data_end+0xfc00e29c>
 800ebc0:	d9012017 	ldw	r4,1152(sp)
 800ebc4:	a00b883a 	mov	r5,r20
 800ebc8:	d9811a04 	addi	r6,sp,1128
 800ebcc:	db012b15 	stw	r12,1196(sp)
 800ebd0:	db812a15 	stw	r14,1192(sp)
 800ebd4:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ebd8:	db012b17 	ldw	r12,1196(sp)
 800ebdc:	db812a17 	ldw	r14,1192(sp)
 800ebe0:	103f9f1e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ebe4:	d9411b17 	ldw	r5,1132(sp)
 800ebe8:	d8c11c17 	ldw	r3,1136(sp)
 800ebec:	d811883a 	mov	r8,sp
 800ebf0:	29000044 	addi	r4,r5,1
 800ebf4:	003fd306 	br	800eb44 <__alt_data_end+0xfc00eb44>
 800ebf8:	18006c1e 	bne	r3,zero,800edac <___vfiprintf_internal_r+0x1034>
 800ebfc:	70004f26 	beq	r14,zero,800ed3c <___vfiprintf_internal_r+0xfc4>
 800ec00:	d8811d04 	addi	r2,sp,1140
 800ec04:	00c00084 	movi	r3,2
 800ec08:	d8800015 	stw	r2,0(sp)
 800ec0c:	d8c00115 	stw	r3,4(sp)
 800ec10:	2005883a 	mov	r2,r4
 800ec14:	d811883a 	mov	r8,sp
 800ec18:	003d9b06 	br	800e288 <__alt_data_end+0xfc00e288>
 800ec1c:	1800571e 	bne	r3,zero,800ed7c <___vfiprintf_internal_r+0x1004>
 800ec20:	000b883a 	mov	r5,zero
 800ec24:	00800044 	movi	r2,1
 800ec28:	d811883a 	mov	r8,sp
 800ec2c:	003d9906 	br	800e294 <__alt_data_end+0xfc00e294>
 800ec30:	10803fcc 	andi	r2,r2,255
 800ec34:	1000251e 	bne	r2,zero,800eccc <___vfiprintf_internal_r+0xf54>
 800ec38:	a880004c 	andi	r2,r21,1
 800ec3c:	10007826 	beq	r2,zero,800ee20 <___vfiprintf_internal_r+0x10a8>
 800ec40:	00800c04 	movi	r2,48
 800ec44:	d8c109c4 	addi	r3,sp,1063
 800ec48:	d88109c5 	stb	r2,1063(sp)
 800ec4c:	dc412717 	ldw	r17,1180(sp)
 800ec50:	d8c12415 	stw	r3,1168(sp)
 800ec54:	003d4406 	br	800e168 <__alt_data_end+0xfc00e168>
 800ec58:	d9012617 	ldw	r4,1176(sp)
 800ec5c:	dc410a04 	addi	r17,sp,1064
 800ec60:	908003cc 	andi	r2,r18,15
 800ec64:	b006973a 	slli	r3,r22,28
 800ec68:	2085883a 	add	r2,r4,r2
 800ec6c:	9024d13a 	srli	r18,r18,4
 800ec70:	10800003 	ldbu	r2,0(r2)
 800ec74:	b02cd13a 	srli	r22,r22,4
 800ec78:	8c7fffc4 	addi	r17,r17,-1
 800ec7c:	1ca4b03a 	or	r18,r3,r18
 800ec80:	88800005 	stb	r2,0(r17)
 800ec84:	9584b03a 	or	r2,r18,r22
 800ec88:	103ff51e 	bne	r2,zero,800ec60 <__alt_data_end+0xfc00ec60>
 800ec8c:	dac11e17 	ldw	r11,1144(sp)
 800ec90:	dc412415 	stw	r17,1168(sp)
 800ec94:	5c63c83a 	sub	r17,r11,r17
 800ec98:	003d3306 	br	800e168 <__alt_data_end+0xfc00e168>
 800ec9c:	1800941e 	bne	r3,zero,800eef0 <___vfiprintf_internal_r+0x1178>
 800eca0:	d8811d87 	ldb	r2,1142(sp)
 800eca4:	10006b26 	beq	r2,zero,800ee54 <___vfiprintf_internal_r+0x10dc>
 800eca8:	00c00044 	movi	r3,1
 800ecac:	d9011d84 	addi	r4,sp,1142
 800ecb0:	1805883a 	mov	r2,r3
 800ecb4:	d9000015 	stw	r4,0(sp)
 800ecb8:	d8c00115 	stw	r3,4(sp)
 800ecbc:	d811883a 	mov	r8,sp
 800ecc0:	003f2306 	br	800e950 <__alt_data_end+0xfc00e950>
 800ecc4:	8023883a 	mov	r17,r16
 800ecc8:	003c7d06 	br	800dec0 <__alt_data_end+0xfc00dec0>
 800eccc:	da810a04 	addi	r10,sp,1064
 800ecd0:	da812415 	stw	r10,1168(sp)
 800ecd4:	003d2406 	br	800e168 <__alt_data_end+0xfc00e168>
 800ecd8:	d9012017 	ldw	r4,1152(sp)
 800ecdc:	a00b883a 	mov	r5,r20
 800ece0:	d9811a04 	addi	r6,sp,1128
 800ece4:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ece8:	103f5d1e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ecec:	d8c11c17 	ldw	r3,1136(sp)
 800ecf0:	d811883a 	mov	r8,sp
 800ecf4:	003f7306 	br	800eac4 <__alt_data_end+0xfc00eac4>
 800ecf8:	1c800017 	ldw	r18,0(r3)
 800ecfc:	dac12117 	ldw	r11,1156(sp)
 800ed00:	902dd7fa 	srai	r22,r18,31
 800ed04:	5ac00104 	addi	r11,r11,4
 800ed08:	dac12115 	stw	r11,1156(sp)
 800ed0c:	b005883a 	mov	r2,r22
 800ed10:	003e5406 	br	800e664 <__alt_data_end+0xfc00e664>
 800ed14:	00800084 	movi	r2,2
 800ed18:	9588b03a 	or	r4,r18,r22
 800ed1c:	003cf506 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800ed20:	d9012017 	ldw	r4,1152(sp)
 800ed24:	a00b883a 	mov	r5,r20
 800ed28:	d9811a04 	addi	r6,sp,1128
 800ed2c:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ed30:	103f4b1e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ed34:	d811883a 	mov	r8,sp
 800ed38:	003cd106 	br	800e080 <__alt_data_end+0xfc00e080>
 800ed3c:	000b883a 	mov	r5,zero
 800ed40:	2005883a 	mov	r2,r4
 800ed44:	d811883a 	mov	r8,sp
 800ed48:	003d5206 	br	800e294 <__alt_data_end+0xfc00e294>
 800ed4c:	10803fcc 	andi	r2,r2,255
 800ed50:	1080201c 	xori	r2,r2,128
 800ed54:	10bfe004 	addi	r2,r2,-128
 800ed58:	01000c04 	movi	r4,48
 800ed5c:	11008e26 	beq	r2,r4,800ef98 <___vfiprintf_internal_r+0x1220>
 800ed60:	da812417 	ldw	r10,1168(sp)
 800ed64:	dac11e17 	ldw	r11,1144(sp)
 800ed68:	193fffc5 	stb	r4,-1(r3)
 800ed6c:	52bfffc4 	addi	r10,r10,-1
 800ed70:	da812415 	stw	r10,1168(sp)
 800ed74:	5aa3c83a 	sub	r17,r11,r10
 800ed78:	003cfb06 	br	800e168 <__alt_data_end+0xfc00e168>
 800ed7c:	d9012017 	ldw	r4,1152(sp)
 800ed80:	a00b883a 	mov	r5,r20
 800ed84:	d9811a04 	addi	r6,sp,1128
 800ed88:	da412b15 	stw	r9,1196(sp)
 800ed8c:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ed90:	da412b17 	ldw	r9,1196(sp)
 800ed94:	103f321e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ed98:	d9411b17 	ldw	r5,1132(sp)
 800ed9c:	d8c11c17 	ldw	r3,1136(sp)
 800eda0:	d811883a 	mov	r8,sp
 800eda4:	28800044 	addi	r2,r5,1
 800eda8:	003d3a06 	br	800e294 <__alt_data_end+0xfc00e294>
 800edac:	d9012017 	ldw	r4,1152(sp)
 800edb0:	a00b883a 	mov	r5,r20
 800edb4:	d9811a04 	addi	r6,sp,1128
 800edb8:	da412b15 	stw	r9,1196(sp)
 800edbc:	db812a15 	stw	r14,1192(sp)
 800edc0:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800edc4:	da412b17 	ldw	r9,1196(sp)
 800edc8:	db812a17 	ldw	r14,1192(sp)
 800edcc:	103f241e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800edd0:	d9411b17 	ldw	r5,1132(sp)
 800edd4:	d8c11c17 	ldw	r3,1136(sp)
 800edd8:	d811883a 	mov	r8,sp
 800eddc:	28800044 	addi	r2,r5,1
 800ede0:	003d1f06 	br	800e260 <__alt_data_end+0xfc00e260>
 800ede4:	1800781e 	bne	r3,zero,800efc8 <___vfiprintf_internal_r+0x1250>
 800ede8:	000b883a 	mov	r5,zero
 800edec:	00800044 	movi	r2,1
 800edf0:	d811883a 	mov	r8,sp
 800edf4:	003d2906 	br	800e29c <__alt_data_end+0xfc00e29c>
 800edf8:	d9012017 	ldw	r4,1152(sp)
 800edfc:	a00b883a 	mov	r5,r20
 800ee00:	d9811a04 	addi	r6,sp,1128
 800ee04:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ee08:	103f151e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ee0c:	d8811b17 	ldw	r2,1132(sp)
 800ee10:	d8c11c17 	ldw	r3,1136(sp)
 800ee14:	d811883a 	mov	r8,sp
 800ee18:	10800044 	addi	r2,r2,1
 800ee1c:	003d4406 	br	800e330 <__alt_data_end+0xfc00e330>
 800ee20:	dac10a04 	addi	r11,sp,1064
 800ee24:	dac12415 	stw	r11,1168(sp)
 800ee28:	003ccf06 	br	800e168 <__alt_data_end+0xfc00e168>
 800ee2c:	04a5c83a 	sub	r18,zero,r18
 800ee30:	9004c03a 	cmpne	r2,r18,zero
 800ee34:	05adc83a 	sub	r22,zero,r22
 800ee38:	b0adc83a 	sub	r22,r22,r2
 800ee3c:	03000b44 	movi	r12,45
 800ee40:	db011d85 	stb	r12,1142(sp)
 800ee44:	4823883a 	mov	r17,r9
 800ee48:	00800044 	movi	r2,1
 800ee4c:	9588b03a 	or	r4,r18,r22
 800ee50:	003cab06 	br	800e100 <__alt_data_end+0xfc00e100>
 800ee54:	000b883a 	mov	r5,zero
 800ee58:	00800044 	movi	r2,1
 800ee5c:	d811883a 	mov	r8,sp
 800ee60:	703d0c26 	beq	r14,zero,800e294 <__alt_data_end+0xfc00e294>
 800ee64:	00c00084 	movi	r3,2
 800ee68:	d9011d04 	addi	r4,sp,1140
 800ee6c:	d9000015 	stw	r4,0(sp)
 800ee70:	d8c00115 	stw	r3,4(sp)
 800ee74:	003d0406 	br	800e288 <__alt_data_end+0xfc00e288>
 800ee78:	80c00007 	ldb	r3,0(r16)
 800ee7c:	003c1d06 	br	800def4 <__alt_data_end+0xfc00def4>
 800ee80:	a880040c 	andi	r2,r21,16
 800ee84:	1000091e 	bne	r2,zero,800eeac <___vfiprintf_internal_r+0x1134>
 800ee88:	aac0100c 	andi	r11,r21,64
 800ee8c:	58000726 	beq	r11,zero,800eeac <___vfiprintf_internal_r+0x1134>
 800ee90:	da812117 	ldw	r10,1156(sp)
 800ee94:	dac12217 	ldw	r11,1160(sp)
 800ee98:	50800017 	ldw	r2,0(r10)
 800ee9c:	52800104 	addi	r10,r10,4
 800eea0:	da812115 	stw	r10,1156(sp)
 800eea4:	12c0000d 	sth	r11,0(r2)
 800eea8:	003be806 	br	800de4c <__alt_data_end+0xfc00de4c>
 800eeac:	da812117 	ldw	r10,1156(sp)
 800eeb0:	dac12217 	ldw	r11,1160(sp)
 800eeb4:	50800017 	ldw	r2,0(r10)
 800eeb8:	52800104 	addi	r10,r10,4
 800eebc:	da812115 	stw	r10,1156(sp)
 800eec0:	12c00015 	stw	r11,0(r2)
 800eec4:	003be106 	br	800de4c <__alt_data_end+0xfc00de4c>
 800eec8:	00800084 	movi	r2,2
 800eecc:	003c8906 	br	800e0f4 <__alt_data_end+0xfc00e0f4>
 800eed0:	a900100c 	andi	r4,r21,64
 800eed4:	20001f26 	beq	r4,zero,800ef54 <___vfiprintf_internal_r+0x11dc>
 800eed8:	da812117 	ldw	r10,1156(sp)
 800eedc:	1480000b 	ldhu	r18,0(r2)
 800eee0:	002d883a 	mov	r22,zero
 800eee4:	52800104 	addi	r10,r10,4
 800eee8:	da812115 	stw	r10,1156(sp)
 800eeec:	003dae06 	br	800e5a8 <__alt_data_end+0xfc00e5a8>
 800eef0:	d9012017 	ldw	r4,1152(sp)
 800eef4:	a00b883a 	mov	r5,r20
 800eef8:	d9811a04 	addi	r6,sp,1128
 800eefc:	da412b15 	stw	r9,1196(sp)
 800ef00:	db812a15 	stw	r14,1192(sp)
 800ef04:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ef08:	da412b17 	ldw	r9,1196(sp)
 800ef0c:	db812a17 	ldw	r14,1192(sp)
 800ef10:	103ed31e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ef14:	d9411b17 	ldw	r5,1132(sp)
 800ef18:	d8c11c17 	ldw	r3,1136(sp)
 800ef1c:	d811883a 	mov	r8,sp
 800ef20:	28800044 	addi	r2,r5,1
 800ef24:	003e7f06 	br	800e924 <__alt_data_end+0xfc00e924>
 800ef28:	9825883a 	mov	r18,r19
 800ef2c:	003d3406 	br	800e400 <__alt_data_end+0xfc00e400>
 800ef30:	4823883a 	mov	r17,r9
 800ef34:	003e0806 	br	800e758 <__alt_data_end+0xfc00e758>
 800ef38:	d9012017 	ldw	r4,1152(sp)
 800ef3c:	a00b883a 	mov	r5,r20
 800ef40:	d9811a04 	addi	r6,sp,1128
 800ef44:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800ef48:	103ec51e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ef4c:	d8c11c17 	ldw	r3,1136(sp)
 800ef50:	003ee006 	br	800ead4 <__alt_data_end+0xfc00ead4>
 800ef54:	dac12117 	ldw	r11,1156(sp)
 800ef58:	14800017 	ldw	r18,0(r2)
 800ef5c:	002d883a 	mov	r22,zero
 800ef60:	5ac00104 	addi	r11,r11,4
 800ef64:	dac12115 	stw	r11,1156(sp)
 800ef68:	003d8f06 	br	800e5a8 <__alt_data_end+0xfc00e5a8>
 800ef6c:	02c200b4 	movhi	r11,2050
 800ef70:	5afe1b04 	addi	r11,r11,-1940
 800ef74:	dac12315 	stw	r11,1164(sp)
 800ef78:	003ce306 	br	800e308 <__alt_data_end+0xfc00e308>
 800ef7c:	80c00043 	ldbu	r3,1(r16)
 800ef80:	ad400814 	ori	r21,r21,32
 800ef84:	84000044 	addi	r16,r16,1
 800ef88:	18c03fcc 	andi	r3,r3,255
 800ef8c:	18c0201c 	xori	r3,r3,128
 800ef90:	18ffe004 	addi	r3,r3,-128
 800ef94:	003bd706 	br	800def4 <__alt_data_end+0xfc00def4>
 800ef98:	dac11e17 	ldw	r11,1144(sp)
 800ef9c:	d8c12417 	ldw	r3,1168(sp)
 800efa0:	58e3c83a 	sub	r17,r11,r3
 800efa4:	003c7006 	br	800e168 <__alt_data_end+0xfc00e168>
 800efa8:	da012a15 	stw	r8,1192(sp)
 800efac:	80037580 	call	8003758 <strlen>
 800efb0:	1023883a 	mov	r17,r2
 800efb4:	db011d83 	ldbu	r12,1142(sp)
 800efb8:	dd812115 	stw	r22,1156(sp)
 800efbc:	0013883a 	mov	r9,zero
 800efc0:	da012a17 	ldw	r8,1192(sp)
 800efc4:	003c6806 	br	800e168 <__alt_data_end+0xfc00e168>
 800efc8:	d9012017 	ldw	r4,1152(sp)
 800efcc:	a00b883a 	mov	r5,r20
 800efd0:	d9811a04 	addi	r6,sp,1128
 800efd4:	da412b15 	stw	r9,1196(sp)
 800efd8:	800dc640 	call	800dc64 <__sprint_r.part.0>
 800efdc:	da412b17 	ldw	r9,1196(sp)
 800efe0:	103e9f1e 	bne	r2,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800efe4:	d9411b17 	ldw	r5,1132(sp)
 800efe8:	d8c11c17 	ldw	r3,1136(sp)
 800efec:	d811883a 	mov	r8,sp
 800eff0:	28800044 	addi	r2,r5,1
 800eff4:	003ca906 	br	800e29c <__alt_data_end+0xfc00e29c>
 800eff8:	d9411b17 	ldw	r5,1132(sp)
 800effc:	010200b4 	movhi	r4,2050
 800f000:	213e1f04 	addi	r4,r4,-1924
 800f004:	d9012315 	stw	r4,1164(sp)
 800f008:	29400044 	addi	r5,r5,1
 800f00c:	003c8806 	br	800e230 <__alt_data_end+0xfc00e230>
 800f010:	00800184 	movi	r2,6
 800f014:	1240012e 	bgeu	r2,r9,800f01c <___vfiprintf_internal_r+0x12a4>
 800f018:	1013883a 	mov	r9,r2
 800f01c:	4823883a 	mov	r17,r9
 800f020:	4825883a 	mov	r18,r9
 800f024:	48001516 	blt	r9,zero,800f07c <___vfiprintf_internal_r+0x1304>
 800f028:	008200b4 	movhi	r2,2050
 800f02c:	10bdaf04 	addi	r2,r2,-2372
 800f030:	dd812115 	stw	r22,1156(sp)
 800f034:	d8812415 	stw	r2,1168(sp)
 800f038:	003d6f06 	br	800e5f8 <__alt_data_end+0xfc00e5f8>
 800f03c:	d9411b17 	ldw	r5,1132(sp)
 800f040:	02c200b4 	movhi	r11,2050
 800f044:	5afe1f04 	addi	r11,r11,-1924
 800f048:	dac12315 	stw	r11,1164(sp)
 800f04c:	29400044 	addi	r5,r5,1
 800f050:	003ce106 	br	800e3d8 <__alt_data_end+0xfc00e3d8>
 800f054:	010200b4 	movhi	r4,2050
 800f058:	213e1b04 	addi	r4,r4,-1940
 800f05c:	d9012315 	stw	r4,1164(sp)
 800f060:	1009883a 	mov	r4,r2
 800f064:	003eca06 	br	800eb90 <__alt_data_end+0xfc00eb90>
 800f068:	4823883a 	mov	r17,r9
 800f06c:	db011d83 	ldbu	r12,1142(sp)
 800f070:	dd812115 	stw	r22,1156(sp)
 800f074:	0013883a 	mov	r9,zero
 800f078:	003c3b06 	br	800e168 <__alt_data_end+0xfc00e168>
 800f07c:	0025883a 	mov	r18,zero
 800f080:	003fe906 	br	800f028 <__alt_data_end+0xfc00f028>
 800f084:	dac12117 	ldw	r11,1156(sp)
 800f088:	8005883a 	mov	r2,r16
 800f08c:	5021883a 	mov	r16,r10
 800f090:	5a400017 	ldw	r9,0(r11)
 800f094:	58c00104 	addi	r3,r11,4
 800f098:	d8c12115 	stw	r3,1156(sp)
 800f09c:	48000a16 	blt	r9,zero,800f0c8 <___vfiprintf_internal_r+0x1350>
 800f0a0:	10c00047 	ldb	r3,1(r2)
 800f0a4:	003b9306 	br	800def4 <__alt_data_end+0xfc00def4>
 800f0a8:	043fffc4 	movi	r16,-1
 800f0ac:	003d0206 	br	800e4b8 <__alt_data_end+0xfc00e4b8>
 800f0b0:	94c0010e 	bge	r18,r19,800f0b8 <___vfiprintf_internal_r+0x1340>
 800f0b4:	9825883a 	mov	r18,r19
 800f0b8:	da812217 	ldw	r10,1160(sp)
 800f0bc:	5495883a 	add	r10,r10,r18
 800f0c0:	da812215 	stw	r10,1160(sp)
 800f0c4:	003cd106 	br	800e40c <__alt_data_end+0xfc00e40c>
 800f0c8:	027fffc4 	movi	r9,-1
 800f0cc:	10c00047 	ldb	r3,1(r2)
 800f0d0:	003b8806 	br	800def4 <__alt_data_end+0xfc00def4>

0800f0d4 <__vfiprintf_internal>:
 800f0d4:	2007883a 	mov	r3,r4
 800f0d8:	010200b4 	movhi	r4,2050
 800f0dc:	2104ed04 	addi	r4,r4,5044
 800f0e0:	21000017 	ldw	r4,0(r4)
 800f0e4:	2805883a 	mov	r2,r5
 800f0e8:	300f883a 	mov	r7,r6
 800f0ec:	180b883a 	mov	r5,r3
 800f0f0:	100d883a 	mov	r6,r2
 800f0f4:	800dd781 	jmpi	800dd78 <___vfiprintf_internal_r>

0800f0f8 <__swbuf_r>:
 800f0f8:	defffc04 	addi	sp,sp,-16
 800f0fc:	dc800215 	stw	r18,8(sp)
 800f100:	dc400115 	stw	r17,4(sp)
 800f104:	dc000015 	stw	r16,0(sp)
 800f108:	dfc00315 	stw	ra,12(sp)
 800f10c:	2025883a 	mov	r18,r4
 800f110:	2823883a 	mov	r17,r5
 800f114:	3021883a 	mov	r16,r6
 800f118:	20000226 	beq	r4,zero,800f124 <__swbuf_r+0x2c>
 800f11c:	20800e17 	ldw	r2,56(r4)
 800f120:	10004126 	beq	r2,zero,800f228 <__swbuf_r+0x130>
 800f124:	80c00617 	ldw	r3,24(r16)
 800f128:	8180030b 	ldhu	r6,12(r16)
 800f12c:	80c00215 	stw	r3,8(r16)
 800f130:	30c0020c 	andi	r3,r6,8
 800f134:	18003526 	beq	r3,zero,800f20c <__swbuf_r+0x114>
 800f138:	80c00417 	ldw	r3,16(r16)
 800f13c:	18003326 	beq	r3,zero,800f20c <__swbuf_r+0x114>
 800f140:	3088000c 	andi	r2,r6,8192
 800f144:	8c403fcc 	andi	r17,r17,255
 800f148:	10001726 	beq	r2,zero,800f1a8 <__swbuf_r+0xb0>
 800f14c:	80800017 	ldw	r2,0(r16)
 800f150:	81000517 	ldw	r4,20(r16)
 800f154:	10c7c83a 	sub	r3,r2,r3
 800f158:	19001d0e 	bge	r3,r4,800f1d0 <__swbuf_r+0xd8>
 800f15c:	18c00044 	addi	r3,r3,1
 800f160:	81400217 	ldw	r5,8(r16)
 800f164:	11000044 	addi	r4,r2,1
 800f168:	81000015 	stw	r4,0(r16)
 800f16c:	297fffc4 	addi	r5,r5,-1
 800f170:	81400215 	stw	r5,8(r16)
 800f174:	14400005 	stb	r17,0(r2)
 800f178:	80800517 	ldw	r2,20(r16)
 800f17c:	10c01d26 	beq	r2,r3,800f1f4 <__swbuf_r+0xfc>
 800f180:	8080030b 	ldhu	r2,12(r16)
 800f184:	1080004c 	andi	r2,r2,1
 800f188:	1000181e 	bne	r2,zero,800f1ec <__swbuf_r+0xf4>
 800f18c:	8805883a 	mov	r2,r17
 800f190:	dfc00317 	ldw	ra,12(sp)
 800f194:	dc800217 	ldw	r18,8(sp)
 800f198:	dc400117 	ldw	r17,4(sp)
 800f19c:	dc000017 	ldw	r16,0(sp)
 800f1a0:	dec00404 	addi	sp,sp,16
 800f1a4:	f800283a 	ret
 800f1a8:	81001917 	ldw	r4,100(r16)
 800f1ac:	00b7ffc4 	movi	r2,-8193
 800f1b0:	31880014 	ori	r6,r6,8192
 800f1b4:	2084703a 	and	r2,r4,r2
 800f1b8:	80801915 	stw	r2,100(r16)
 800f1bc:	80800017 	ldw	r2,0(r16)
 800f1c0:	81000517 	ldw	r4,20(r16)
 800f1c4:	8180030d 	sth	r6,12(r16)
 800f1c8:	10c7c83a 	sub	r3,r2,r3
 800f1cc:	193fe316 	blt	r3,r4,800f15c <__alt_data_end+0xfc00f15c>
 800f1d0:	9009883a 	mov	r4,r18
 800f1d4:	800b883a 	mov	r5,r16
 800f1d8:	80091f80 	call	80091f8 <_fflush_r>
 800f1dc:	1000091e 	bne	r2,zero,800f204 <__swbuf_r+0x10c>
 800f1e0:	80800017 	ldw	r2,0(r16)
 800f1e4:	00c00044 	movi	r3,1
 800f1e8:	003fdd06 	br	800f160 <__alt_data_end+0xfc00f160>
 800f1ec:	00800284 	movi	r2,10
 800f1f0:	88bfe61e 	bne	r17,r2,800f18c <__alt_data_end+0xfc00f18c>
 800f1f4:	9009883a 	mov	r4,r18
 800f1f8:	800b883a 	mov	r5,r16
 800f1fc:	80091f80 	call	80091f8 <_fflush_r>
 800f200:	103fe226 	beq	r2,zero,800f18c <__alt_data_end+0xfc00f18c>
 800f204:	00bfffc4 	movi	r2,-1
 800f208:	003fe106 	br	800f190 <__alt_data_end+0xfc00f190>
 800f20c:	9009883a 	mov	r4,r18
 800f210:	800b883a 	mov	r5,r16
 800f214:	80077a00 	call	80077a0 <__swsetup_r>
 800f218:	1000051e 	bne	r2,zero,800f230 <__swbuf_r+0x138>
 800f21c:	8180030b 	ldhu	r6,12(r16)
 800f220:	80c00417 	ldw	r3,16(r16)
 800f224:	003fc606 	br	800f140 <__alt_data_end+0xfc00f140>
 800f228:	80097a00 	call	80097a0 <__sinit>
 800f22c:	003fbd06 	br	800f124 <__alt_data_end+0xfc00f124>
 800f230:	80c0030b 	ldhu	r3,12(r16)
 800f234:	00bfffc4 	movi	r2,-1
 800f238:	18c01014 	ori	r3,r3,64
 800f23c:	80c0030d 	sth	r3,12(r16)
 800f240:	00c00244 	movi	r3,9
 800f244:	90c00015 	stw	r3,0(r18)
 800f248:	003fd106 	br	800f190 <__alt_data_end+0xfc00f190>

0800f24c <__swbuf>:
 800f24c:	00c200b4 	movhi	r3,2050
 800f250:	18c4ed04 	addi	r3,r3,5044
 800f254:	2005883a 	mov	r2,r4
 800f258:	19000017 	ldw	r4,0(r3)
 800f25c:	280d883a 	mov	r6,r5
 800f260:	100b883a 	mov	r5,r2
 800f264:	800f0f81 	jmpi	800f0f8 <__swbuf_r>

0800f268 <_write_r>:
 800f268:	defffd04 	addi	sp,sp,-12
 800f26c:	dc000015 	stw	r16,0(sp)
 800f270:	040200b4 	movhi	r16,2050
 800f274:	dc400115 	stw	r17,4(sp)
 800f278:	840bc804 	addi	r16,r16,12064
 800f27c:	2023883a 	mov	r17,r4
 800f280:	2809883a 	mov	r4,r5
 800f284:	300b883a 	mov	r5,r6
 800f288:	380d883a 	mov	r6,r7
 800f28c:	dfc00215 	stw	ra,8(sp)
 800f290:	80000015 	stw	zero,0(r16)
 800f294:	80129700 	call	8012970 <write>
 800f298:	00ffffc4 	movi	r3,-1
 800f29c:	10c00526 	beq	r2,r3,800f2b4 <_write_r+0x4c>
 800f2a0:	dfc00217 	ldw	ra,8(sp)
 800f2a4:	dc400117 	ldw	r17,4(sp)
 800f2a8:	dc000017 	ldw	r16,0(sp)
 800f2ac:	dec00304 	addi	sp,sp,12
 800f2b0:	f800283a 	ret
 800f2b4:	80c00017 	ldw	r3,0(r16)
 800f2b8:	183ff926 	beq	r3,zero,800f2a0 <__alt_data_end+0xfc00f2a0>
 800f2bc:	88c00015 	stw	r3,0(r17)
 800f2c0:	003ff706 	br	800f2a0 <__alt_data_end+0xfc00f2a0>

0800f2c4 <_close_r>:
 800f2c4:	defffd04 	addi	sp,sp,-12
 800f2c8:	dc000015 	stw	r16,0(sp)
 800f2cc:	040200b4 	movhi	r16,2050
 800f2d0:	dc400115 	stw	r17,4(sp)
 800f2d4:	840bc804 	addi	r16,r16,12064
 800f2d8:	2023883a 	mov	r17,r4
 800f2dc:	2809883a 	mov	r4,r5
 800f2e0:	dfc00215 	stw	ra,8(sp)
 800f2e4:	80000015 	stw	zero,0(r16)
 800f2e8:	80120e40 	call	80120e4 <close>
 800f2ec:	00ffffc4 	movi	r3,-1
 800f2f0:	10c00526 	beq	r2,r3,800f308 <_close_r+0x44>
 800f2f4:	dfc00217 	ldw	ra,8(sp)
 800f2f8:	dc400117 	ldw	r17,4(sp)
 800f2fc:	dc000017 	ldw	r16,0(sp)
 800f300:	dec00304 	addi	sp,sp,12
 800f304:	f800283a 	ret
 800f308:	80c00017 	ldw	r3,0(r16)
 800f30c:	183ff926 	beq	r3,zero,800f2f4 <__alt_data_end+0xfc00f2f4>
 800f310:	88c00015 	stw	r3,0(r17)
 800f314:	003ff706 	br	800f2f4 <__alt_data_end+0xfc00f2f4>

0800f318 <_calloc_r>:
 800f318:	298b383a 	mul	r5,r5,r6
 800f31c:	defffe04 	addi	sp,sp,-8
 800f320:	dc000015 	stw	r16,0(sp)
 800f324:	dfc00115 	stw	ra,4(sp)
 800f328:	800a4b00 	call	800a4b0 <_malloc_r>
 800f32c:	1021883a 	mov	r16,r2
 800f330:	10002826 	beq	r2,zero,800f3d4 <_calloc_r+0xbc>
 800f334:	11bfff17 	ldw	r6,-4(r2)
 800f338:	00bfff04 	movi	r2,-4
 800f33c:	00c00904 	movi	r3,36
 800f340:	308c703a 	and	r6,r6,r2
 800f344:	308d883a 	add	r6,r6,r2
 800f348:	19801436 	bltu	r3,r6,800f39c <_calloc_r+0x84>
 800f34c:	008004c4 	movi	r2,19
 800f350:	11800936 	bltu	r2,r6,800f378 <_calloc_r+0x60>
 800f354:	8005883a 	mov	r2,r16
 800f358:	10000015 	stw	zero,0(r2)
 800f35c:	10000115 	stw	zero,4(r2)
 800f360:	10000215 	stw	zero,8(r2)
 800f364:	8005883a 	mov	r2,r16
 800f368:	dfc00117 	ldw	ra,4(sp)
 800f36c:	dc000017 	ldw	r16,0(sp)
 800f370:	dec00204 	addi	sp,sp,8
 800f374:	f800283a 	ret
 800f378:	80000015 	stw	zero,0(r16)
 800f37c:	80000115 	stw	zero,4(r16)
 800f380:	008006c4 	movi	r2,27
 800f384:	11800d2e 	bgeu	r2,r6,800f3bc <_calloc_r+0xa4>
 800f388:	80000215 	stw	zero,8(r16)
 800f38c:	80000315 	stw	zero,12(r16)
 800f390:	30c00c26 	beq	r6,r3,800f3c4 <_calloc_r+0xac>
 800f394:	80800404 	addi	r2,r16,16
 800f398:	003fef06 	br	800f358 <__alt_data_end+0xfc00f358>
 800f39c:	8009883a 	mov	r4,r16
 800f3a0:	000b883a 	mov	r5,zero
 800f3a4:	800afd40 	call	800afd4 <memset>
 800f3a8:	8005883a 	mov	r2,r16
 800f3ac:	dfc00117 	ldw	ra,4(sp)
 800f3b0:	dc000017 	ldw	r16,0(sp)
 800f3b4:	dec00204 	addi	sp,sp,8
 800f3b8:	f800283a 	ret
 800f3bc:	80800204 	addi	r2,r16,8
 800f3c0:	003fe506 	br	800f358 <__alt_data_end+0xfc00f358>
 800f3c4:	80000415 	stw	zero,16(r16)
 800f3c8:	80800604 	addi	r2,r16,24
 800f3cc:	80000515 	stw	zero,20(r16)
 800f3d0:	003fe106 	br	800f358 <__alt_data_end+0xfc00f358>
 800f3d4:	0005883a 	mov	r2,zero
 800f3d8:	003fe306 	br	800f368 <__alt_data_end+0xfc00f368>

0800f3dc <_fclose_r>:
 800f3dc:	28003226 	beq	r5,zero,800f4a8 <_fclose_r+0xcc>
 800f3e0:	defffc04 	addi	sp,sp,-16
 800f3e4:	dc400115 	stw	r17,4(sp)
 800f3e8:	2023883a 	mov	r17,r4
 800f3ec:	dc000015 	stw	r16,0(sp)
 800f3f0:	dfc00315 	stw	ra,12(sp)
 800f3f4:	dc800215 	stw	r18,8(sp)
 800f3f8:	2821883a 	mov	r16,r5
 800f3fc:	80097b00 	call	80097b0 <__sfp_lock_acquire>
 800f400:	88000226 	beq	r17,zero,800f40c <_fclose_r+0x30>
 800f404:	88800e17 	ldw	r2,56(r17)
 800f408:	10002926 	beq	r2,zero,800f4b0 <_fclose_r+0xd4>
 800f40c:	8080030f 	ldh	r2,12(r16)
 800f410:	10002226 	beq	r2,zero,800f49c <_fclose_r+0xc0>
 800f414:	8809883a 	mov	r4,r17
 800f418:	800b883a 	mov	r5,r16
 800f41c:	80091f80 	call	80091f8 <_fflush_r>
 800f420:	1025883a 	mov	r18,r2
 800f424:	80800b17 	ldw	r2,44(r16)
 800f428:	10000426 	beq	r2,zero,800f43c <_fclose_r+0x60>
 800f42c:	81400717 	ldw	r5,28(r16)
 800f430:	8809883a 	mov	r4,r17
 800f434:	103ee83a 	callr	r2
 800f438:	10002616 	blt	r2,zero,800f4d4 <_fclose_r+0xf8>
 800f43c:	8080030b 	ldhu	r2,12(r16)
 800f440:	1080200c 	andi	r2,r2,128
 800f444:	10001f1e 	bne	r2,zero,800f4c4 <_fclose_r+0xe8>
 800f448:	81400c17 	ldw	r5,48(r16)
 800f44c:	28000526 	beq	r5,zero,800f464 <_fclose_r+0x88>
 800f450:	80801004 	addi	r2,r16,64
 800f454:	28800226 	beq	r5,r2,800f460 <_fclose_r+0x84>
 800f458:	8809883a 	mov	r4,r17
 800f45c:	80099140 	call	8009914 <_free_r>
 800f460:	80000c15 	stw	zero,48(r16)
 800f464:	81401117 	ldw	r5,68(r16)
 800f468:	28000326 	beq	r5,zero,800f478 <_fclose_r+0x9c>
 800f46c:	8809883a 	mov	r4,r17
 800f470:	80099140 	call	8009914 <_free_r>
 800f474:	80001115 	stw	zero,68(r16)
 800f478:	8000030d 	sth	zero,12(r16)
 800f47c:	80097b40 	call	80097b4 <__sfp_lock_release>
 800f480:	9005883a 	mov	r2,r18
 800f484:	dfc00317 	ldw	ra,12(sp)
 800f488:	dc800217 	ldw	r18,8(sp)
 800f48c:	dc400117 	ldw	r17,4(sp)
 800f490:	dc000017 	ldw	r16,0(sp)
 800f494:	dec00404 	addi	sp,sp,16
 800f498:	f800283a 	ret
 800f49c:	80097b40 	call	80097b4 <__sfp_lock_release>
 800f4a0:	0005883a 	mov	r2,zero
 800f4a4:	003ff706 	br	800f484 <__alt_data_end+0xfc00f484>
 800f4a8:	0005883a 	mov	r2,zero
 800f4ac:	f800283a 	ret
 800f4b0:	8809883a 	mov	r4,r17
 800f4b4:	80097a00 	call	80097a0 <__sinit>
 800f4b8:	8080030f 	ldh	r2,12(r16)
 800f4bc:	103fd51e 	bne	r2,zero,800f414 <__alt_data_end+0xfc00f414>
 800f4c0:	003ff606 	br	800f49c <__alt_data_end+0xfc00f49c>
 800f4c4:	81400417 	ldw	r5,16(r16)
 800f4c8:	8809883a 	mov	r4,r17
 800f4cc:	80099140 	call	8009914 <_free_r>
 800f4d0:	003fdd06 	br	800f448 <__alt_data_end+0xfc00f448>
 800f4d4:	04bfffc4 	movi	r18,-1
 800f4d8:	003fd806 	br	800f43c <__alt_data_end+0xfc00f43c>

0800f4dc <fclose>:
 800f4dc:	008200b4 	movhi	r2,2050
 800f4e0:	1084ed04 	addi	r2,r2,5044
 800f4e4:	200b883a 	mov	r5,r4
 800f4e8:	11000017 	ldw	r4,0(r2)
 800f4ec:	800f3dc1 	jmpi	800f3dc <_fclose_r>

0800f4f0 <_fputwc_r>:
 800f4f0:	3080030b 	ldhu	r2,12(r6)
 800f4f4:	defff804 	addi	sp,sp,-32
 800f4f8:	dcc00415 	stw	r19,16(sp)
 800f4fc:	dc800315 	stw	r18,12(sp)
 800f500:	dc000115 	stw	r16,4(sp)
 800f504:	dfc00715 	stw	ra,28(sp)
 800f508:	dd400615 	stw	r21,24(sp)
 800f50c:	dd000515 	stw	r20,20(sp)
 800f510:	dc400215 	stw	r17,8(sp)
 800f514:	10c8000c 	andi	r3,r2,8192
 800f518:	3021883a 	mov	r16,r6
 800f51c:	2027883a 	mov	r19,r4
 800f520:	2825883a 	mov	r18,r5
 800f524:	1800051e 	bne	r3,zero,800f53c <_fputwc_r+0x4c>
 800f528:	30c01917 	ldw	r3,100(r6)
 800f52c:	10880014 	ori	r2,r2,8192
 800f530:	3080030d 	sth	r2,12(r6)
 800f534:	18880014 	ori	r2,r3,8192
 800f538:	30801915 	stw	r2,100(r6)
 800f53c:	800a2a00 	call	800a2a0 <__locale_mb_cur_max>
 800f540:	00c00044 	movi	r3,1
 800f544:	10c03e26 	beq	r2,r3,800f640 <_fputwc_r+0x150>
 800f548:	9809883a 	mov	r4,r19
 800f54c:	d80b883a 	mov	r5,sp
 800f550:	900d883a 	mov	r6,r18
 800f554:	81c01704 	addi	r7,r16,92
 800f558:	800f8300 	call	800f830 <_wcrtomb_r>
 800f55c:	1029883a 	mov	r20,r2
 800f560:	00bfffc4 	movi	r2,-1
 800f564:	a0802026 	beq	r20,r2,800f5e8 <_fputwc_r+0xf8>
 800f568:	d9400003 	ldbu	r5,0(sp)
 800f56c:	a0001c26 	beq	r20,zero,800f5e0 <_fputwc_r+0xf0>
 800f570:	0023883a 	mov	r17,zero
 800f574:	05400284 	movi	r21,10
 800f578:	00000906 	br	800f5a0 <_fputwc_r+0xb0>
 800f57c:	80800017 	ldw	r2,0(r16)
 800f580:	11400005 	stb	r5,0(r2)
 800f584:	80c00017 	ldw	r3,0(r16)
 800f588:	18c00044 	addi	r3,r3,1
 800f58c:	80c00015 	stw	r3,0(r16)
 800f590:	8c400044 	addi	r17,r17,1
 800f594:	dc45883a 	add	r2,sp,r17
 800f598:	8d00112e 	bgeu	r17,r20,800f5e0 <_fputwc_r+0xf0>
 800f59c:	11400003 	ldbu	r5,0(r2)
 800f5a0:	80c00217 	ldw	r3,8(r16)
 800f5a4:	18ffffc4 	addi	r3,r3,-1
 800f5a8:	80c00215 	stw	r3,8(r16)
 800f5ac:	183ff30e 	bge	r3,zero,800f57c <__alt_data_end+0xfc00f57c>
 800f5b0:	80800617 	ldw	r2,24(r16)
 800f5b4:	18801916 	blt	r3,r2,800f61c <_fputwc_r+0x12c>
 800f5b8:	80800017 	ldw	r2,0(r16)
 800f5bc:	11400005 	stb	r5,0(r2)
 800f5c0:	80800017 	ldw	r2,0(r16)
 800f5c4:	10c00003 	ldbu	r3,0(r2)
 800f5c8:	10800044 	addi	r2,r2,1
 800f5cc:	1d402326 	beq	r3,r21,800f65c <_fputwc_r+0x16c>
 800f5d0:	80800015 	stw	r2,0(r16)
 800f5d4:	8c400044 	addi	r17,r17,1
 800f5d8:	dc45883a 	add	r2,sp,r17
 800f5dc:	8d3fef36 	bltu	r17,r20,800f59c <__alt_data_end+0xfc00f59c>
 800f5e0:	9005883a 	mov	r2,r18
 800f5e4:	00000406 	br	800f5f8 <_fputwc_r+0x108>
 800f5e8:	80c0030b 	ldhu	r3,12(r16)
 800f5ec:	a005883a 	mov	r2,r20
 800f5f0:	18c01014 	ori	r3,r3,64
 800f5f4:	80c0030d 	sth	r3,12(r16)
 800f5f8:	dfc00717 	ldw	ra,28(sp)
 800f5fc:	dd400617 	ldw	r21,24(sp)
 800f600:	dd000517 	ldw	r20,20(sp)
 800f604:	dcc00417 	ldw	r19,16(sp)
 800f608:	dc800317 	ldw	r18,12(sp)
 800f60c:	dc400217 	ldw	r17,8(sp)
 800f610:	dc000117 	ldw	r16,4(sp)
 800f614:	dec00804 	addi	sp,sp,32
 800f618:	f800283a 	ret
 800f61c:	9809883a 	mov	r4,r19
 800f620:	29403fcc 	andi	r5,r5,255
 800f624:	800d883a 	mov	r6,r16
 800f628:	800f0f80 	call	800f0f8 <__swbuf_r>
 800f62c:	10bfffe0 	cmpeqi	r2,r2,-1
 800f630:	10803fcc 	andi	r2,r2,255
 800f634:	103fd626 	beq	r2,zero,800f590 <__alt_data_end+0xfc00f590>
 800f638:	00bfffc4 	movi	r2,-1
 800f63c:	003fee06 	br	800f5f8 <__alt_data_end+0xfc00f5f8>
 800f640:	90ffffc4 	addi	r3,r18,-1
 800f644:	01003f84 	movi	r4,254
 800f648:	20ffbf36 	bltu	r4,r3,800f548 <__alt_data_end+0xfc00f548>
 800f64c:	900b883a 	mov	r5,r18
 800f650:	dc800005 	stb	r18,0(sp)
 800f654:	1029883a 	mov	r20,r2
 800f658:	003fc506 	br	800f570 <__alt_data_end+0xfc00f570>
 800f65c:	9809883a 	mov	r4,r19
 800f660:	a80b883a 	mov	r5,r21
 800f664:	800d883a 	mov	r6,r16
 800f668:	800f0f80 	call	800f0f8 <__swbuf_r>
 800f66c:	10bfffe0 	cmpeqi	r2,r2,-1
 800f670:	003fef06 	br	800f630 <__alt_data_end+0xfc00f630>

0800f674 <fputwc>:
 800f674:	defffc04 	addi	sp,sp,-16
 800f678:	dc000115 	stw	r16,4(sp)
 800f67c:	040200b4 	movhi	r16,2050
 800f680:	8404ed04 	addi	r16,r16,5044
 800f684:	dc400215 	stw	r17,8(sp)
 800f688:	2023883a 	mov	r17,r4
 800f68c:	81000017 	ldw	r4,0(r16)
 800f690:	dfc00315 	stw	ra,12(sp)
 800f694:	280d883a 	mov	r6,r5
 800f698:	20000626 	beq	r4,zero,800f6b4 <fputwc+0x40>
 800f69c:	20800e17 	ldw	r2,56(r4)
 800f6a0:	1000041e 	bne	r2,zero,800f6b4 <fputwc+0x40>
 800f6a4:	d9400015 	stw	r5,0(sp)
 800f6a8:	80097a00 	call	80097a0 <__sinit>
 800f6ac:	81000017 	ldw	r4,0(r16)
 800f6b0:	d9800017 	ldw	r6,0(sp)
 800f6b4:	880b883a 	mov	r5,r17
 800f6b8:	dfc00317 	ldw	ra,12(sp)
 800f6bc:	dc400217 	ldw	r17,8(sp)
 800f6c0:	dc000117 	ldw	r16,4(sp)
 800f6c4:	dec00404 	addi	sp,sp,16
 800f6c8:	800f4f01 	jmpi	800f4f0 <_fputwc_r>

0800f6cc <_fstat_r>:
 800f6cc:	defffd04 	addi	sp,sp,-12
 800f6d0:	dc000015 	stw	r16,0(sp)
 800f6d4:	040200b4 	movhi	r16,2050
 800f6d8:	dc400115 	stw	r17,4(sp)
 800f6dc:	840bc804 	addi	r16,r16,12064
 800f6e0:	2023883a 	mov	r17,r4
 800f6e4:	2809883a 	mov	r4,r5
 800f6e8:	300b883a 	mov	r5,r6
 800f6ec:	dfc00215 	stw	ra,8(sp)
 800f6f0:	80000015 	stw	zero,0(r16)
 800f6f4:	80122300 	call	8012230 <fstat>
 800f6f8:	00ffffc4 	movi	r3,-1
 800f6fc:	10c00526 	beq	r2,r3,800f714 <_fstat_r+0x48>
 800f700:	dfc00217 	ldw	ra,8(sp)
 800f704:	dc400117 	ldw	r17,4(sp)
 800f708:	dc000017 	ldw	r16,0(sp)
 800f70c:	dec00304 	addi	sp,sp,12
 800f710:	f800283a 	ret
 800f714:	80c00017 	ldw	r3,0(r16)
 800f718:	183ff926 	beq	r3,zero,800f700 <__alt_data_end+0xfc00f700>
 800f71c:	88c00015 	stw	r3,0(r17)
 800f720:	003ff706 	br	800f700 <__alt_data_end+0xfc00f700>

0800f724 <_isatty_r>:
 800f724:	defffd04 	addi	sp,sp,-12
 800f728:	dc000015 	stw	r16,0(sp)
 800f72c:	040200b4 	movhi	r16,2050
 800f730:	dc400115 	stw	r17,4(sp)
 800f734:	840bc804 	addi	r16,r16,12064
 800f738:	2023883a 	mov	r17,r4
 800f73c:	2809883a 	mov	r4,r5
 800f740:	dfc00215 	stw	ra,8(sp)
 800f744:	80000015 	stw	zero,0(r16)
 800f748:	80123300 	call	8012330 <isatty>
 800f74c:	00ffffc4 	movi	r3,-1
 800f750:	10c00526 	beq	r2,r3,800f768 <_isatty_r+0x44>
 800f754:	dfc00217 	ldw	ra,8(sp)
 800f758:	dc400117 	ldw	r17,4(sp)
 800f75c:	dc000017 	ldw	r16,0(sp)
 800f760:	dec00304 	addi	sp,sp,12
 800f764:	f800283a 	ret
 800f768:	80c00017 	ldw	r3,0(r16)
 800f76c:	183ff926 	beq	r3,zero,800f754 <__alt_data_end+0xfc00f754>
 800f770:	88c00015 	stw	r3,0(r17)
 800f774:	003ff706 	br	800f754 <__alt_data_end+0xfc00f754>

0800f778 <_lseek_r>:
 800f778:	defffd04 	addi	sp,sp,-12
 800f77c:	dc000015 	stw	r16,0(sp)
 800f780:	040200b4 	movhi	r16,2050
 800f784:	dc400115 	stw	r17,4(sp)
 800f788:	840bc804 	addi	r16,r16,12064
 800f78c:	2023883a 	mov	r17,r4
 800f790:	2809883a 	mov	r4,r5
 800f794:	300b883a 	mov	r5,r6
 800f798:	380d883a 	mov	r6,r7
 800f79c:	dfc00215 	stw	ra,8(sp)
 800f7a0:	80000015 	stw	zero,0(r16)
 800f7a4:	80125080 	call	8012508 <lseek>
 800f7a8:	00ffffc4 	movi	r3,-1
 800f7ac:	10c00526 	beq	r2,r3,800f7c4 <_lseek_r+0x4c>
 800f7b0:	dfc00217 	ldw	ra,8(sp)
 800f7b4:	dc400117 	ldw	r17,4(sp)
 800f7b8:	dc000017 	ldw	r16,0(sp)
 800f7bc:	dec00304 	addi	sp,sp,12
 800f7c0:	f800283a 	ret
 800f7c4:	80c00017 	ldw	r3,0(r16)
 800f7c8:	183ff926 	beq	r3,zero,800f7b0 <__alt_data_end+0xfc00f7b0>
 800f7cc:	88c00015 	stw	r3,0(r17)
 800f7d0:	003ff706 	br	800f7b0 <__alt_data_end+0xfc00f7b0>

0800f7d4 <_read_r>:
 800f7d4:	defffd04 	addi	sp,sp,-12
 800f7d8:	dc000015 	stw	r16,0(sp)
 800f7dc:	040200b4 	movhi	r16,2050
 800f7e0:	dc400115 	stw	r17,4(sp)
 800f7e4:	840bc804 	addi	r16,r16,12064
 800f7e8:	2023883a 	mov	r17,r4
 800f7ec:	2809883a 	mov	r4,r5
 800f7f0:	300b883a 	mov	r5,r6
 800f7f4:	380d883a 	mov	r6,r7
 800f7f8:	dfc00215 	stw	ra,8(sp)
 800f7fc:	80000015 	stw	zero,0(r16)
 800f800:	80126e40 	call	80126e4 <read>
 800f804:	00ffffc4 	movi	r3,-1
 800f808:	10c00526 	beq	r2,r3,800f820 <_read_r+0x4c>
 800f80c:	dfc00217 	ldw	ra,8(sp)
 800f810:	dc400117 	ldw	r17,4(sp)
 800f814:	dc000017 	ldw	r16,0(sp)
 800f818:	dec00304 	addi	sp,sp,12
 800f81c:	f800283a 	ret
 800f820:	80c00017 	ldw	r3,0(r16)
 800f824:	183ff926 	beq	r3,zero,800f80c <__alt_data_end+0xfc00f80c>
 800f828:	88c00015 	stw	r3,0(r17)
 800f82c:	003ff706 	br	800f80c <__alt_data_end+0xfc00f80c>

0800f830 <_wcrtomb_r>:
 800f830:	defff604 	addi	sp,sp,-40
 800f834:	008200b4 	movhi	r2,2050
 800f838:	dc800815 	stw	r18,32(sp)
 800f83c:	dc400715 	stw	r17,28(sp)
 800f840:	dc000615 	stw	r16,24(sp)
 800f844:	1084f104 	addi	r2,r2,5060
 800f848:	dfc00915 	stw	ra,36(sp)
 800f84c:	2021883a 	mov	r16,r4
 800f850:	3823883a 	mov	r17,r7
 800f854:	14800017 	ldw	r18,0(r2)
 800f858:	28001426 	beq	r5,zero,800f8ac <_wcrtomb_r+0x7c>
 800f85c:	d9400415 	stw	r5,16(sp)
 800f860:	d9800515 	stw	r6,20(sp)
 800f864:	800a2940 	call	800a294 <__locale_charset>
 800f868:	d9400417 	ldw	r5,16(sp)
 800f86c:	d9800517 	ldw	r6,20(sp)
 800f870:	8009883a 	mov	r4,r16
 800f874:	dc400015 	stw	r17,0(sp)
 800f878:	100f883a 	mov	r7,r2
 800f87c:	903ee83a 	callr	r18
 800f880:	00ffffc4 	movi	r3,-1
 800f884:	10c0031e 	bne	r2,r3,800f894 <_wcrtomb_r+0x64>
 800f888:	88000015 	stw	zero,0(r17)
 800f88c:	00c02284 	movi	r3,138
 800f890:	80c00015 	stw	r3,0(r16)
 800f894:	dfc00917 	ldw	ra,36(sp)
 800f898:	dc800817 	ldw	r18,32(sp)
 800f89c:	dc400717 	ldw	r17,28(sp)
 800f8a0:	dc000617 	ldw	r16,24(sp)
 800f8a4:	dec00a04 	addi	sp,sp,40
 800f8a8:	f800283a 	ret
 800f8ac:	800a2940 	call	800a294 <__locale_charset>
 800f8b0:	8009883a 	mov	r4,r16
 800f8b4:	dc400015 	stw	r17,0(sp)
 800f8b8:	d9400104 	addi	r5,sp,4
 800f8bc:	000d883a 	mov	r6,zero
 800f8c0:	100f883a 	mov	r7,r2
 800f8c4:	903ee83a 	callr	r18
 800f8c8:	003fed06 	br	800f880 <__alt_data_end+0xfc00f880>

0800f8cc <wcrtomb>:
 800f8cc:	defff504 	addi	sp,sp,-44
 800f8d0:	dc400515 	stw	r17,20(sp)
 800f8d4:	dc000415 	stw	r16,16(sp)
 800f8d8:	dfc00a15 	stw	ra,40(sp)
 800f8dc:	dd400915 	stw	r21,36(sp)
 800f8e0:	dd000815 	stw	r20,32(sp)
 800f8e4:	dcc00715 	stw	r19,28(sp)
 800f8e8:	dc800615 	stw	r18,24(sp)
 800f8ec:	2021883a 	mov	r16,r4
 800f8f0:	3023883a 	mov	r17,r6
 800f8f4:	20001d26 	beq	r4,zero,800f96c <wcrtomb+0xa0>
 800f8f8:	048200b4 	movhi	r18,2050
 800f8fc:	9484ed04 	addi	r18,r18,5044
 800f900:	008200b4 	movhi	r2,2050
 800f904:	95400017 	ldw	r21,0(r18)
 800f908:	1084f104 	addi	r2,r2,5060
 800f90c:	15000017 	ldw	r20,0(r2)
 800f910:	2827883a 	mov	r19,r5
 800f914:	800a2940 	call	800a294 <__locale_charset>
 800f918:	a809883a 	mov	r4,r21
 800f91c:	dc400015 	stw	r17,0(sp)
 800f920:	800b883a 	mov	r5,r16
 800f924:	980d883a 	mov	r6,r19
 800f928:	100f883a 	mov	r7,r2
 800f92c:	a03ee83a 	callr	r20
 800f930:	00ffffc4 	movi	r3,-1
 800f934:	10c0041e 	bne	r2,r3,800f948 <wcrtomb+0x7c>
 800f938:	90c00017 	ldw	r3,0(r18)
 800f93c:	01002284 	movi	r4,138
 800f940:	88000015 	stw	zero,0(r17)
 800f944:	19000015 	stw	r4,0(r3)
 800f948:	dfc00a17 	ldw	ra,40(sp)
 800f94c:	dd400917 	ldw	r21,36(sp)
 800f950:	dd000817 	ldw	r20,32(sp)
 800f954:	dcc00717 	ldw	r19,28(sp)
 800f958:	dc800617 	ldw	r18,24(sp)
 800f95c:	dc400517 	ldw	r17,20(sp)
 800f960:	dc000417 	ldw	r16,16(sp)
 800f964:	dec00b04 	addi	sp,sp,44
 800f968:	f800283a 	ret
 800f96c:	048200b4 	movhi	r18,2050
 800f970:	9484ed04 	addi	r18,r18,5044
 800f974:	008200b4 	movhi	r2,2050
 800f978:	94c00017 	ldw	r19,0(r18)
 800f97c:	1084f104 	addi	r2,r2,5060
 800f980:	14000017 	ldw	r16,0(r2)
 800f984:	800a2940 	call	800a294 <__locale_charset>
 800f988:	9809883a 	mov	r4,r19
 800f98c:	dc400015 	stw	r17,0(sp)
 800f990:	d9400104 	addi	r5,sp,4
 800f994:	000d883a 	mov	r6,zero
 800f998:	100f883a 	mov	r7,r2
 800f99c:	803ee83a 	callr	r16
 800f9a0:	003fe306 	br	800f930 <__alt_data_end+0xfc00f930>

0800f9a4 <__ascii_wctomb>:
 800f9a4:	28000526 	beq	r5,zero,800f9bc <__ascii_wctomb+0x18>
 800f9a8:	00803fc4 	movi	r2,255
 800f9ac:	11800536 	bltu	r2,r6,800f9c4 <__ascii_wctomb+0x20>
 800f9b0:	29800005 	stb	r6,0(r5)
 800f9b4:	00800044 	movi	r2,1
 800f9b8:	f800283a 	ret
 800f9bc:	0005883a 	mov	r2,zero
 800f9c0:	f800283a 	ret
 800f9c4:	00802284 	movi	r2,138
 800f9c8:	20800015 	stw	r2,0(r4)
 800f9cc:	00bfffc4 	movi	r2,-1
 800f9d0:	f800283a 	ret

0800f9d4 <_wctomb_r>:
 800f9d4:	008200b4 	movhi	r2,2050
 800f9d8:	defff904 	addi	sp,sp,-28
 800f9dc:	1084f104 	addi	r2,r2,5060
 800f9e0:	dfc00615 	stw	ra,24(sp)
 800f9e4:	dc400515 	stw	r17,20(sp)
 800f9e8:	dc000415 	stw	r16,16(sp)
 800f9ec:	3823883a 	mov	r17,r7
 800f9f0:	14000017 	ldw	r16,0(r2)
 800f9f4:	d9000115 	stw	r4,4(sp)
 800f9f8:	d9400215 	stw	r5,8(sp)
 800f9fc:	d9800315 	stw	r6,12(sp)
 800fa00:	800a2940 	call	800a294 <__locale_charset>
 800fa04:	d9000117 	ldw	r4,4(sp)
 800fa08:	d9400217 	ldw	r5,8(sp)
 800fa0c:	d9800317 	ldw	r6,12(sp)
 800fa10:	dc400015 	stw	r17,0(sp)
 800fa14:	100f883a 	mov	r7,r2
 800fa18:	803ee83a 	callr	r16
 800fa1c:	dfc00617 	ldw	ra,24(sp)
 800fa20:	dc400517 	ldw	r17,20(sp)
 800fa24:	dc000417 	ldw	r16,16(sp)
 800fa28:	dec00704 	addi	sp,sp,28
 800fa2c:	f800283a 	ret

0800fa30 <__udivdi3>:
 800fa30:	defff504 	addi	sp,sp,-44
 800fa34:	dcc00415 	stw	r19,16(sp)
 800fa38:	dc000115 	stw	r16,4(sp)
 800fa3c:	dfc00a15 	stw	ra,40(sp)
 800fa40:	df000915 	stw	fp,36(sp)
 800fa44:	ddc00815 	stw	r23,32(sp)
 800fa48:	dd800715 	stw	r22,28(sp)
 800fa4c:	dd400615 	stw	r21,24(sp)
 800fa50:	dd000515 	stw	r20,20(sp)
 800fa54:	dc800315 	stw	r18,12(sp)
 800fa58:	dc400215 	stw	r17,8(sp)
 800fa5c:	2027883a 	mov	r19,r4
 800fa60:	2821883a 	mov	r16,r5
 800fa64:	3800421e 	bne	r7,zero,800fb70 <__udivdi3+0x140>
 800fa68:	3025883a 	mov	r18,r6
 800fa6c:	2023883a 	mov	r17,r4
 800fa70:	2980542e 	bgeu	r5,r6,800fbc4 <__udivdi3+0x194>
 800fa74:	00bfffd4 	movui	r2,65535
 800fa78:	282d883a 	mov	r22,r5
 800fa7c:	1180a836 	bltu	r2,r6,800fd20 <__udivdi3+0x2f0>
 800fa80:	00803fc4 	movi	r2,255
 800fa84:	1181422e 	bgeu	r2,r6,800ff90 <__udivdi3+0x560>
 800fa88:	00800204 	movi	r2,8
 800fa8c:	1007883a 	mov	r3,r2
 800fa90:	3084d83a 	srl	r2,r6,r2
 800fa94:	010200b4 	movhi	r4,2050
 800fa98:	213d6004 	addi	r4,r4,-2688
 800fa9c:	2085883a 	add	r2,r4,r2
 800faa0:	10800003 	ldbu	r2,0(r2)
 800faa4:	10c7883a 	add	r3,r2,r3
 800faa8:	00800804 	movi	r2,32
 800faac:	10c5c83a 	sub	r2,r2,r3
 800fab0:	10000526 	beq	r2,zero,800fac8 <__udivdi3+0x98>
 800fab4:	80a0983a 	sll	r16,r16,r2
 800fab8:	98c6d83a 	srl	r3,r19,r3
 800fabc:	30a4983a 	sll	r18,r6,r2
 800fac0:	98a2983a 	sll	r17,r19,r2
 800fac4:	80ecb03a 	or	r22,r16,r3
 800fac8:	902ad43a 	srli	r21,r18,16
 800facc:	b009883a 	mov	r4,r22
 800fad0:	953fffcc 	andi	r20,r18,65535
 800fad4:	a80b883a 	mov	r5,r21
 800fad8:	80106a40 	call	80106a4 <__umodsi3>
 800fadc:	b009883a 	mov	r4,r22
 800fae0:	a80b883a 	mov	r5,r21
 800fae4:	1027883a 	mov	r19,r2
 800fae8:	801069c0 	call	801069c <__udivsi3>
 800faec:	1021883a 	mov	r16,r2
 800faf0:	8806d43a 	srli	r3,r17,16
 800faf4:	9804943a 	slli	r2,r19,16
 800faf8:	8527383a 	mul	r19,r16,r20
 800fafc:	10c4b03a 	or	r2,r2,r3
 800fb00:	14c0052e 	bgeu	r2,r19,800fb18 <__udivdi3+0xe8>
 800fb04:	1485883a 	add	r2,r2,r18
 800fb08:	80ffffc4 	addi	r3,r16,-1
 800fb0c:	14800136 	bltu	r2,r18,800fb14 <__udivdi3+0xe4>
 800fb10:	14c13436 	bltu	r2,r19,800ffe4 <__udivdi3+0x5b4>
 800fb14:	1821883a 	mov	r16,r3
 800fb18:	14e7c83a 	sub	r19,r2,r19
 800fb1c:	9809883a 	mov	r4,r19
 800fb20:	a80b883a 	mov	r5,r21
 800fb24:	80106a40 	call	80106a4 <__umodsi3>
 800fb28:	102d883a 	mov	r22,r2
 800fb2c:	9809883a 	mov	r4,r19
 800fb30:	a80b883a 	mov	r5,r21
 800fb34:	801069c0 	call	801069c <__udivsi3>
 800fb38:	b02c943a 	slli	r22,r22,16
 800fb3c:	1529383a 	mul	r20,r2,r20
 800fb40:	8c7fffcc 	andi	r17,r17,65535
 800fb44:	b462b03a 	or	r17,r22,r17
 800fb48:	8d00052e 	bgeu	r17,r20,800fb60 <__udivdi3+0x130>
 800fb4c:	8ca3883a 	add	r17,r17,r18
 800fb50:	10ffffc4 	addi	r3,r2,-1
 800fb54:	8c80f636 	bltu	r17,r18,800ff30 <__udivdi3+0x500>
 800fb58:	8d00f52e 	bgeu	r17,r20,800ff30 <__udivdi3+0x500>
 800fb5c:	10bfff84 	addi	r2,r2,-2
 800fb60:	8020943a 	slli	r16,r16,16
 800fb64:	0007883a 	mov	r3,zero
 800fb68:	1404b03a 	or	r2,r2,r16
 800fb6c:	00005b06 	br	800fcdc <__udivdi3+0x2ac>
 800fb70:	29c05836 	bltu	r5,r7,800fcd4 <__udivdi3+0x2a4>
 800fb74:	00bfffd4 	movui	r2,65535
 800fb78:	11c0642e 	bgeu	r2,r7,800fd0c <__udivdi3+0x2dc>
 800fb7c:	00804034 	movhi	r2,256
 800fb80:	10bfffc4 	addi	r2,r2,-1
 800fb84:	11c0f32e 	bgeu	r2,r7,800ff54 <__udivdi3+0x524>
 800fb88:	00c00604 	movi	r3,24
 800fb8c:	180b883a 	mov	r5,r3
 800fb90:	38c6d83a 	srl	r3,r7,r3
 800fb94:	008200b4 	movhi	r2,2050
 800fb98:	10bd6004 	addi	r2,r2,-2688
 800fb9c:	10c7883a 	add	r3,r2,r3
 800fba0:	18c00003 	ldbu	r3,0(r3)
 800fba4:	01000804 	movi	r4,32
 800fba8:	1947883a 	add	r3,r3,r5
 800fbac:	20e5c83a 	sub	r18,r4,r3
 800fbb0:	9000661e 	bne	r18,zero,800fd4c <__udivdi3+0x31c>
 800fbb4:	3c00f936 	bltu	r7,r16,800ff9c <__udivdi3+0x56c>
 800fbb8:	9985403a 	cmpgeu	r2,r19,r6
 800fbbc:	0007883a 	mov	r3,zero
 800fbc0:	00004606 	br	800fcdc <__udivdi3+0x2ac>
 800fbc4:	3000041e 	bne	r6,zero,800fbd8 <__udivdi3+0x1a8>
 800fbc8:	01000044 	movi	r4,1
 800fbcc:	000b883a 	mov	r5,zero
 800fbd0:	801069c0 	call	801069c <__udivsi3>
 800fbd4:	1025883a 	mov	r18,r2
 800fbd8:	00bfffd4 	movui	r2,65535
 800fbdc:	1480562e 	bgeu	r2,r18,800fd38 <__udivdi3+0x308>
 800fbe0:	00804034 	movhi	r2,256
 800fbe4:	10bfffc4 	addi	r2,r2,-1
 800fbe8:	1480e32e 	bgeu	r2,r18,800ff78 <__udivdi3+0x548>
 800fbec:	00800604 	movi	r2,24
 800fbf0:	1007883a 	mov	r3,r2
 800fbf4:	9084d83a 	srl	r2,r18,r2
 800fbf8:	010200b4 	movhi	r4,2050
 800fbfc:	213d6004 	addi	r4,r4,-2688
 800fc00:	2085883a 	add	r2,r4,r2
 800fc04:	10800003 	ldbu	r2,0(r2)
 800fc08:	10c5883a 	add	r2,r2,r3
 800fc0c:	00c00804 	movi	r3,32
 800fc10:	1887c83a 	sub	r3,r3,r2
 800fc14:	1800911e 	bne	r3,zero,800fe5c <__udivdi3+0x42c>
 800fc18:	9028d43a 	srli	r20,r18,16
 800fc1c:	84a1c83a 	sub	r16,r16,r18
 800fc20:	957fffcc 	andi	r21,r18,65535
 800fc24:	00c00044 	movi	r3,1
 800fc28:	8009883a 	mov	r4,r16
 800fc2c:	a00b883a 	mov	r5,r20
 800fc30:	d8c00015 	stw	r3,0(sp)
 800fc34:	80106a40 	call	80106a4 <__umodsi3>
 800fc38:	8009883a 	mov	r4,r16
 800fc3c:	a00b883a 	mov	r5,r20
 800fc40:	1027883a 	mov	r19,r2
 800fc44:	801069c0 	call	801069c <__udivsi3>
 800fc48:	1021883a 	mov	r16,r2
 800fc4c:	880cd43a 	srli	r6,r17,16
 800fc50:	9804943a 	slli	r2,r19,16
 800fc54:	8567383a 	mul	r19,r16,r21
 800fc58:	d8c00017 	ldw	r3,0(sp)
 800fc5c:	1188b03a 	or	r4,r2,r6
 800fc60:	24c0052e 	bgeu	r4,r19,800fc78 <__udivdi3+0x248>
 800fc64:	2489883a 	add	r4,r4,r18
 800fc68:	80bfffc4 	addi	r2,r16,-1
 800fc6c:	24800136 	bltu	r4,r18,800fc74 <__udivdi3+0x244>
 800fc70:	24c0d936 	bltu	r4,r19,800ffd8 <__udivdi3+0x5a8>
 800fc74:	1021883a 	mov	r16,r2
 800fc78:	24e7c83a 	sub	r19,r4,r19
 800fc7c:	9809883a 	mov	r4,r19
 800fc80:	a00b883a 	mov	r5,r20
 800fc84:	d8c00015 	stw	r3,0(sp)
 800fc88:	80106a40 	call	80106a4 <__umodsi3>
 800fc8c:	102d883a 	mov	r22,r2
 800fc90:	9809883a 	mov	r4,r19
 800fc94:	a00b883a 	mov	r5,r20
 800fc98:	801069c0 	call	801069c <__udivsi3>
 800fc9c:	b02c943a 	slli	r22,r22,16
 800fca0:	156b383a 	mul	r21,r2,r21
 800fca4:	8c7fffcc 	andi	r17,r17,65535
 800fca8:	b462b03a 	or	r17,r22,r17
 800fcac:	d8c00017 	ldw	r3,0(sp)
 800fcb0:	8d40052e 	bgeu	r17,r21,800fcc8 <__udivdi3+0x298>
 800fcb4:	8ca3883a 	add	r17,r17,r18
 800fcb8:	113fffc4 	addi	r4,r2,-1
 800fcbc:	8c809a36 	bltu	r17,r18,800ff28 <__udivdi3+0x4f8>
 800fcc0:	8d40992e 	bgeu	r17,r21,800ff28 <__udivdi3+0x4f8>
 800fcc4:	10bfff84 	addi	r2,r2,-2
 800fcc8:	8020943a 	slli	r16,r16,16
 800fccc:	1404b03a 	or	r2,r2,r16
 800fcd0:	00000206 	br	800fcdc <__udivdi3+0x2ac>
 800fcd4:	0007883a 	mov	r3,zero
 800fcd8:	0005883a 	mov	r2,zero
 800fcdc:	dfc00a17 	ldw	ra,40(sp)
 800fce0:	df000917 	ldw	fp,36(sp)
 800fce4:	ddc00817 	ldw	r23,32(sp)
 800fce8:	dd800717 	ldw	r22,28(sp)
 800fcec:	dd400617 	ldw	r21,24(sp)
 800fcf0:	dd000517 	ldw	r20,20(sp)
 800fcf4:	dcc00417 	ldw	r19,16(sp)
 800fcf8:	dc800317 	ldw	r18,12(sp)
 800fcfc:	dc400217 	ldw	r17,8(sp)
 800fd00:	dc000117 	ldw	r16,4(sp)
 800fd04:	dec00b04 	addi	sp,sp,44
 800fd08:	f800283a 	ret
 800fd0c:	00803fc4 	movi	r2,255
 800fd10:	11c0932e 	bgeu	r2,r7,800ff60 <__udivdi3+0x530>
 800fd14:	00c00204 	movi	r3,8
 800fd18:	180b883a 	mov	r5,r3
 800fd1c:	003f9c06 	br	800fb90 <__alt_data_end+0xfc00fb90>
 800fd20:	00804034 	movhi	r2,256
 800fd24:	10bfffc4 	addi	r2,r2,-1
 800fd28:	1180902e 	bgeu	r2,r6,800ff6c <__udivdi3+0x53c>
 800fd2c:	00800604 	movi	r2,24
 800fd30:	1007883a 	mov	r3,r2
 800fd34:	003f5606 	br	800fa90 <__alt_data_end+0xfc00fa90>
 800fd38:	00803fc4 	movi	r2,255
 800fd3c:	1480912e 	bgeu	r2,r18,800ff84 <__udivdi3+0x554>
 800fd40:	00800204 	movi	r2,8
 800fd44:	1007883a 	mov	r3,r2
 800fd48:	003faa06 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 800fd4c:	30eed83a 	srl	r23,r6,r3
 800fd50:	3c8e983a 	sll	r7,r7,r18
 800fd54:	80f8d83a 	srl	fp,r16,r3
 800fd58:	98c6d83a 	srl	r3,r19,r3
 800fd5c:	3deeb03a 	or	r23,r7,r23
 800fd60:	b828d43a 	srli	r20,r23,16
 800fd64:	84a0983a 	sll	r16,r16,r18
 800fd68:	e009883a 	mov	r4,fp
 800fd6c:	a00b883a 	mov	r5,r20
 800fd70:	80e2b03a 	or	r17,r16,r3
 800fd74:	34aa983a 	sll	r21,r6,r18
 800fd78:	80106a40 	call	80106a4 <__umodsi3>
 800fd7c:	e009883a 	mov	r4,fp
 800fd80:	a00b883a 	mov	r5,r20
 800fd84:	102d883a 	mov	r22,r2
 800fd88:	801069c0 	call	801069c <__udivsi3>
 800fd8c:	1021883a 	mov	r16,r2
 800fd90:	bf3fffcc 	andi	fp,r23,65535
 800fd94:	b004943a 	slli	r2,r22,16
 800fd98:	8808d43a 	srli	r4,r17,16
 800fd9c:	872d383a 	mul	r22,r16,fp
 800fda0:	1104b03a 	or	r2,r2,r4
 800fda4:	1580042e 	bgeu	r2,r22,800fdb8 <__udivdi3+0x388>
 800fda8:	15c5883a 	add	r2,r2,r23
 800fdac:	80ffffc4 	addi	r3,r16,-1
 800fdb0:	15c0812e 	bgeu	r2,r23,800ffb8 <__udivdi3+0x588>
 800fdb4:	1821883a 	mov	r16,r3
 800fdb8:	15adc83a 	sub	r22,r2,r22
 800fdbc:	b009883a 	mov	r4,r22
 800fdc0:	a00b883a 	mov	r5,r20
 800fdc4:	80106a40 	call	80106a4 <__umodsi3>
 800fdc8:	a00b883a 	mov	r5,r20
 800fdcc:	b009883a 	mov	r4,r22
 800fdd0:	d8800015 	stw	r2,0(sp)
 800fdd4:	801069c0 	call	801069c <__udivsi3>
 800fdd8:	d8c00017 	ldw	r3,0(sp)
 800fddc:	170b383a 	mul	r5,r2,fp
 800fde0:	8c7fffcc 	andi	r17,r17,65535
 800fde4:	1806943a 	slli	r3,r3,16
 800fde8:	1c46b03a 	or	r3,r3,r17
 800fdec:	1940042e 	bgeu	r3,r5,800fe00 <__udivdi3+0x3d0>
 800fdf0:	1dc7883a 	add	r3,r3,r23
 800fdf4:	113fffc4 	addi	r4,r2,-1
 800fdf8:	1dc06b2e 	bgeu	r3,r23,800ffa8 <__udivdi3+0x578>
 800fdfc:	2005883a 	mov	r2,r4
 800fe00:	8020943a 	slli	r16,r16,16
 800fe04:	a9ffffcc 	andi	r7,r21,65535
 800fe08:	a82ad43a 	srli	r21,r21,16
 800fe0c:	1404b03a 	or	r2,r2,r16
 800fe10:	113fffcc 	andi	r4,r2,65535
 800fe14:	100cd43a 	srli	r6,r2,16
 800fe18:	21d3383a 	mul	r9,r4,r7
 800fe1c:	2549383a 	mul	r4,r4,r21
 800fe20:	31cf383a 	mul	r7,r6,r7
 800fe24:	4810d43a 	srli	r8,r9,16
 800fe28:	1947c83a 	sub	r3,r3,r5
 800fe2c:	3909883a 	add	r4,r7,r4
 800fe30:	2209883a 	add	r4,r4,r8
 800fe34:	354d383a 	mul	r6,r6,r21
 800fe38:	21c0022e 	bgeu	r4,r7,800fe44 <__udivdi3+0x414>
 800fe3c:	01400074 	movhi	r5,1
 800fe40:	314d883a 	add	r6,r6,r5
 800fe44:	202ad43a 	srli	r21,r4,16
 800fe48:	354d883a 	add	r6,r6,r21
 800fe4c:	19803f36 	bltu	r3,r6,800ff4c <__udivdi3+0x51c>
 800fe50:	19803926 	beq	r3,r6,800ff38 <__udivdi3+0x508>
 800fe54:	0007883a 	mov	r3,zero
 800fe58:	003fa006 	br	800fcdc <__alt_data_end+0xfc00fcdc>
 800fe5c:	90e4983a 	sll	r18,r18,r3
 800fe60:	80aad83a 	srl	r21,r16,r2
 800fe64:	80e0983a 	sll	r16,r16,r3
 800fe68:	9028d43a 	srli	r20,r18,16
 800fe6c:	9884d83a 	srl	r2,r19,r2
 800fe70:	a809883a 	mov	r4,r21
 800fe74:	a00b883a 	mov	r5,r20
 800fe78:	80acb03a 	or	r22,r16,r2
 800fe7c:	98e2983a 	sll	r17,r19,r3
 800fe80:	80106a40 	call	80106a4 <__umodsi3>
 800fe84:	a809883a 	mov	r4,r21
 800fe88:	a00b883a 	mov	r5,r20
 800fe8c:	1021883a 	mov	r16,r2
 800fe90:	801069c0 	call	801069c <__udivsi3>
 800fe94:	957fffcc 	andi	r21,r18,65535
 800fe98:	8020943a 	slli	r16,r16,16
 800fe9c:	b00ad43a 	srli	r5,r22,16
 800fea0:	1567383a 	mul	r19,r2,r21
 800fea4:	102f883a 	mov	r23,r2
 800fea8:	8148b03a 	or	r4,r16,r5
 800feac:	24c0062e 	bgeu	r4,r19,800fec8 <__udivdi3+0x498>
 800feb0:	2489883a 	add	r4,r4,r18
 800feb4:	10bfffc4 	addi	r2,r2,-1
 800feb8:	24804536 	bltu	r4,r18,800ffd0 <__udivdi3+0x5a0>
 800febc:	24c0442e 	bgeu	r4,r19,800ffd0 <__udivdi3+0x5a0>
 800fec0:	bdffff84 	addi	r23,r23,-2
 800fec4:	2489883a 	add	r4,r4,r18
 800fec8:	24e7c83a 	sub	r19,r4,r19
 800fecc:	9809883a 	mov	r4,r19
 800fed0:	a00b883a 	mov	r5,r20
 800fed4:	80106a40 	call	80106a4 <__umodsi3>
 800fed8:	1021883a 	mov	r16,r2
 800fedc:	9809883a 	mov	r4,r19
 800fee0:	a00b883a 	mov	r5,r20
 800fee4:	801069c0 	call	801069c <__udivsi3>
 800fee8:	8020943a 	slli	r16,r16,16
 800feec:	1007883a 	mov	r3,r2
 800fef0:	1545383a 	mul	r2,r2,r21
 800fef4:	b13fffcc 	andi	r4,r22,65535
 800fef8:	8108b03a 	or	r4,r16,r4
 800fefc:	2080062e 	bgeu	r4,r2,800ff18 <__udivdi3+0x4e8>
 800ff00:	2489883a 	add	r4,r4,r18
 800ff04:	197fffc4 	addi	r5,r3,-1
 800ff08:	24802f36 	bltu	r4,r18,800ffc8 <__udivdi3+0x598>
 800ff0c:	20802e2e 	bgeu	r4,r2,800ffc8 <__udivdi3+0x598>
 800ff10:	18ffff84 	addi	r3,r3,-2
 800ff14:	2489883a 	add	r4,r4,r18
 800ff18:	b82e943a 	slli	r23,r23,16
 800ff1c:	20a1c83a 	sub	r16,r4,r2
 800ff20:	1dc6b03a 	or	r3,r3,r23
 800ff24:	003f4006 	br	800fc28 <__alt_data_end+0xfc00fc28>
 800ff28:	2005883a 	mov	r2,r4
 800ff2c:	003f6606 	br	800fcc8 <__alt_data_end+0xfc00fcc8>
 800ff30:	1805883a 	mov	r2,r3
 800ff34:	003f0a06 	br	800fb60 <__alt_data_end+0xfc00fb60>
 800ff38:	2006943a 	slli	r3,r4,16
 800ff3c:	9c88983a 	sll	r4,r19,r18
 800ff40:	4a7fffcc 	andi	r9,r9,65535
 800ff44:	1a47883a 	add	r3,r3,r9
 800ff48:	20ffc22e 	bgeu	r4,r3,800fe54 <__alt_data_end+0xfc00fe54>
 800ff4c:	10bfffc4 	addi	r2,r2,-1
 800ff50:	003fc006 	br	800fe54 <__alt_data_end+0xfc00fe54>
 800ff54:	00c00404 	movi	r3,16
 800ff58:	180b883a 	mov	r5,r3
 800ff5c:	003f0c06 	br	800fb90 <__alt_data_end+0xfc00fb90>
 800ff60:	0007883a 	mov	r3,zero
 800ff64:	000b883a 	mov	r5,zero
 800ff68:	003f0906 	br	800fb90 <__alt_data_end+0xfc00fb90>
 800ff6c:	00800404 	movi	r2,16
 800ff70:	1007883a 	mov	r3,r2
 800ff74:	003ec606 	br	800fa90 <__alt_data_end+0xfc00fa90>
 800ff78:	00800404 	movi	r2,16
 800ff7c:	1007883a 	mov	r3,r2
 800ff80:	003f1c06 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 800ff84:	0005883a 	mov	r2,zero
 800ff88:	0007883a 	mov	r3,zero
 800ff8c:	003f1906 	br	800fbf4 <__alt_data_end+0xfc00fbf4>
 800ff90:	0005883a 	mov	r2,zero
 800ff94:	0007883a 	mov	r3,zero
 800ff98:	003ebd06 	br	800fa90 <__alt_data_end+0xfc00fa90>
 800ff9c:	0007883a 	mov	r3,zero
 800ffa0:	00800044 	movi	r2,1
 800ffa4:	003f4d06 	br	800fcdc <__alt_data_end+0xfc00fcdc>
 800ffa8:	197f942e 	bgeu	r3,r5,800fdfc <__alt_data_end+0xfc00fdfc>
 800ffac:	10bfff84 	addi	r2,r2,-2
 800ffb0:	1dc7883a 	add	r3,r3,r23
 800ffb4:	003f9206 	br	800fe00 <__alt_data_end+0xfc00fe00>
 800ffb8:	15bf7e2e 	bgeu	r2,r22,800fdb4 <__alt_data_end+0xfc00fdb4>
 800ffbc:	843fff84 	addi	r16,r16,-2
 800ffc0:	15c5883a 	add	r2,r2,r23
 800ffc4:	003f7c06 	br	800fdb8 <__alt_data_end+0xfc00fdb8>
 800ffc8:	2807883a 	mov	r3,r5
 800ffcc:	003fd206 	br	800ff18 <__alt_data_end+0xfc00ff18>
 800ffd0:	102f883a 	mov	r23,r2
 800ffd4:	003fbc06 	br	800fec8 <__alt_data_end+0xfc00fec8>
 800ffd8:	843fff84 	addi	r16,r16,-2
 800ffdc:	2489883a 	add	r4,r4,r18
 800ffe0:	003f2506 	br	800fc78 <__alt_data_end+0xfc00fc78>
 800ffe4:	843fff84 	addi	r16,r16,-2
 800ffe8:	1485883a 	add	r2,r2,r18
 800ffec:	003eca06 	br	800fb18 <__alt_data_end+0xfc00fb18>

0800fff0 <__umoddi3>:
 800fff0:	defff404 	addi	sp,sp,-48
 800fff4:	ddc00915 	stw	r23,36(sp)
 800fff8:	dc400315 	stw	r17,12(sp)
 800fffc:	dc000215 	stw	r16,8(sp)
 8010000:	dfc00b15 	stw	ra,44(sp)
 8010004:	df000a15 	stw	fp,40(sp)
 8010008:	dd800815 	stw	r22,32(sp)
 801000c:	dd400715 	stw	r21,28(sp)
 8010010:	dd000615 	stw	r20,24(sp)
 8010014:	dcc00515 	stw	r19,20(sp)
 8010018:	dc800415 	stw	r18,16(sp)
 801001c:	2021883a 	mov	r16,r4
 8010020:	2823883a 	mov	r17,r5
 8010024:	282f883a 	mov	r23,r5
 8010028:	3800381e 	bne	r7,zero,801010c <__umoddi3+0x11c>
 801002c:	3027883a 	mov	r19,r6
 8010030:	2029883a 	mov	r20,r4
 8010034:	29804e2e 	bgeu	r5,r6,8010170 <__umoddi3+0x180>
 8010038:	00bfffd4 	movui	r2,65535
 801003c:	11809c36 	bltu	r2,r6,80102b0 <__umoddi3+0x2c0>
 8010040:	00803fc4 	movi	r2,255
 8010044:	11813b2e 	bgeu	r2,r6,8010534 <__umoddi3+0x544>
 8010048:	01400204 	movi	r5,8
 801004c:	2805883a 	mov	r2,r5
 8010050:	314ad83a 	srl	r5,r6,r5
 8010054:	00c200b4 	movhi	r3,2050
 8010058:	18fd6004 	addi	r3,r3,-2688
 801005c:	194b883a 	add	r5,r3,r5
 8010060:	29000003 	ldbu	r4,0(r5)
 8010064:	2089883a 	add	r4,r4,r2
 8010068:	00800804 	movi	r2,32
 801006c:	1105c83a 	sub	r2,r2,r4
 8010070:	1000ec26 	beq	r2,zero,8010424 <__umoddi3+0x434>
 8010074:	88a2983a 	sll	r17,r17,r2
 8010078:	8108d83a 	srl	r4,r16,r4
 801007c:	30a6983a 	sll	r19,r6,r2
 8010080:	80a8983a 	sll	r20,r16,r2
 8010084:	1025883a 	mov	r18,r2
 8010088:	892eb03a 	or	r23,r17,r4
 801008c:	982cd43a 	srli	r22,r19,16
 8010090:	b809883a 	mov	r4,r23
 8010094:	9d7fffcc 	andi	r21,r19,65535
 8010098:	b00b883a 	mov	r5,r22
 801009c:	80106a40 	call	80106a4 <__umodsi3>
 80100a0:	b809883a 	mov	r4,r23
 80100a4:	b00b883a 	mov	r5,r22
 80100a8:	1021883a 	mov	r16,r2
 80100ac:	801069c0 	call	801069c <__udivsi3>
 80100b0:	8020943a 	slli	r16,r16,16
 80100b4:	a00cd43a 	srli	r6,r20,16
 80100b8:	1545383a 	mul	r2,r2,r21
 80100bc:	8188b03a 	or	r4,r16,r6
 80100c0:	2080042e 	bgeu	r4,r2,80100d4 <__umoddi3+0xe4>
 80100c4:	24c9883a 	add	r4,r4,r19
 80100c8:	24c00236 	bltu	r4,r19,80100d4 <__umoddi3+0xe4>
 80100cc:	2080012e 	bgeu	r4,r2,80100d4 <__umoddi3+0xe4>
 80100d0:	24c9883a 	add	r4,r4,r19
 80100d4:	20a3c83a 	sub	r17,r4,r2
 80100d8:	8809883a 	mov	r4,r17
 80100dc:	b00b883a 	mov	r5,r22
 80100e0:	80106a40 	call	80106a4 <__umodsi3>
 80100e4:	8809883a 	mov	r4,r17
 80100e8:	b00b883a 	mov	r5,r22
 80100ec:	1021883a 	mov	r16,r2
 80100f0:	801069c0 	call	801069c <__udivsi3>
 80100f4:	8006943a 	slli	r3,r16,16
 80100f8:	1545383a 	mul	r2,r2,r21
 80100fc:	a13fffcc 	andi	r4,r20,65535
 8010100:	1906b03a 	or	r3,r3,r4
 8010104:	1880532e 	bgeu	r3,r2,8010254 <__umoddi3+0x264>
 8010108:	00004e06 	br	8010244 <__umoddi3+0x254>
 801010c:	29c05536 	bltu	r5,r7,8010264 <__umoddi3+0x274>
 8010110:	00bfffd4 	movui	r2,65535
 8010114:	11c0612e 	bgeu	r2,r7,801029c <__umoddi3+0x2ac>
 8010118:	00804034 	movhi	r2,256
 801011c:	10bfffc4 	addi	r2,r2,-1
 8010120:	11c0f82e 	bgeu	r2,r7,8010504 <__umoddi3+0x514>
 8010124:	01400604 	movi	r5,24
 8010128:	282b883a 	mov	r21,r5
 801012c:	394ad83a 	srl	r5,r7,r5
 8010130:	00c200b4 	movhi	r3,2050
 8010134:	18fd6004 	addi	r3,r3,-2688
 8010138:	194b883a 	add	r5,r3,r5
 801013c:	28800003 	ldbu	r2,0(r5)
 8010140:	00c00804 	movi	r3,32
 8010144:	156b883a 	add	r21,r2,r21
 8010148:	1d69c83a 	sub	r20,r3,r21
 801014c:	a000631e 	bne	r20,zero,80102dc <__umoddi3+0x2ec>
 8010150:	3c400136 	bltu	r7,r17,8010158 <__umoddi3+0x168>
 8010154:	81810436 	bltu	r16,r6,8010568 <__umoddi3+0x578>
 8010158:	8185c83a 	sub	r2,r16,r6
 801015c:	89e3c83a 	sub	r17,r17,r7
 8010160:	8087803a 	cmpltu	r3,r16,r2
 8010164:	88efc83a 	sub	r23,r17,r3
 8010168:	b807883a 	mov	r3,r23
 801016c:	00003f06 	br	801026c <__umoddi3+0x27c>
 8010170:	3000041e 	bne	r6,zero,8010184 <__umoddi3+0x194>
 8010174:	01000044 	movi	r4,1
 8010178:	000b883a 	mov	r5,zero
 801017c:	801069c0 	call	801069c <__udivsi3>
 8010180:	1027883a 	mov	r19,r2
 8010184:	00bfffd4 	movui	r2,65535
 8010188:	14c04f2e 	bgeu	r2,r19,80102c8 <__umoddi3+0x2d8>
 801018c:	00804034 	movhi	r2,256
 8010190:	10bfffc4 	addi	r2,r2,-1
 8010194:	14c0e42e 	bgeu	r2,r19,8010528 <__umoddi3+0x538>
 8010198:	00800604 	movi	r2,24
 801019c:	1007883a 	mov	r3,r2
 80101a0:	9884d83a 	srl	r2,r19,r2
 80101a4:	010200b4 	movhi	r4,2050
 80101a8:	213d6004 	addi	r4,r4,-2688
 80101ac:	2085883a 	add	r2,r4,r2
 80101b0:	11000003 	ldbu	r4,0(r2)
 80101b4:	00800804 	movi	r2,32
 80101b8:	20c7883a 	add	r3,r4,r3
 80101bc:	10c5c83a 	sub	r2,r2,r3
 80101c0:	10009a1e 	bne	r2,zero,801042c <__umoddi3+0x43c>
 80101c4:	982cd43a 	srli	r22,r19,16
 80101c8:	8ce3c83a 	sub	r17,r17,r19
 80101cc:	9c3fffcc 	andi	r16,r19,65535
 80101d0:	0025883a 	mov	r18,zero
 80101d4:	8809883a 	mov	r4,r17
 80101d8:	b00b883a 	mov	r5,r22
 80101dc:	80106a40 	call	80106a4 <__umodsi3>
 80101e0:	8809883a 	mov	r4,r17
 80101e4:	b00b883a 	mov	r5,r22
 80101e8:	102b883a 	mov	r21,r2
 80101ec:	801069c0 	call	801069c <__udivsi3>
 80101f0:	a806943a 	slli	r3,r21,16
 80101f4:	a008d43a 	srli	r4,r20,16
 80101f8:	1405383a 	mul	r2,r2,r16
 80101fc:	190cb03a 	or	r6,r3,r4
 8010200:	3080032e 	bgeu	r6,r2,8010210 <__umoddi3+0x220>
 8010204:	34cd883a 	add	r6,r6,r19
 8010208:	34c00136 	bltu	r6,r19,8010210 <__umoddi3+0x220>
 801020c:	3080d436 	bltu	r6,r2,8010560 <__umoddi3+0x570>
 8010210:	30abc83a 	sub	r21,r6,r2
 8010214:	a809883a 	mov	r4,r21
 8010218:	b00b883a 	mov	r5,r22
 801021c:	80106a40 	call	80106a4 <__umodsi3>
 8010220:	1023883a 	mov	r17,r2
 8010224:	a809883a 	mov	r4,r21
 8010228:	b00b883a 	mov	r5,r22
 801022c:	801069c0 	call	801069c <__udivsi3>
 8010230:	8822943a 	slli	r17,r17,16
 8010234:	1405383a 	mul	r2,r2,r16
 8010238:	a13fffcc 	andi	r4,r20,65535
 801023c:	8906b03a 	or	r3,r17,r4
 8010240:	1880042e 	bgeu	r3,r2,8010254 <__umoddi3+0x264>
 8010244:	1cc7883a 	add	r3,r3,r19
 8010248:	1cc00236 	bltu	r3,r19,8010254 <__umoddi3+0x264>
 801024c:	1880012e 	bgeu	r3,r2,8010254 <__umoddi3+0x264>
 8010250:	1cc7883a 	add	r3,r3,r19
 8010254:	1887c83a 	sub	r3,r3,r2
 8010258:	1c84d83a 	srl	r2,r3,r18
 801025c:	0007883a 	mov	r3,zero
 8010260:	00000206 	br	801026c <__umoddi3+0x27c>
 8010264:	2005883a 	mov	r2,r4
 8010268:	2807883a 	mov	r3,r5
 801026c:	dfc00b17 	ldw	ra,44(sp)
 8010270:	df000a17 	ldw	fp,40(sp)
 8010274:	ddc00917 	ldw	r23,36(sp)
 8010278:	dd800817 	ldw	r22,32(sp)
 801027c:	dd400717 	ldw	r21,28(sp)
 8010280:	dd000617 	ldw	r20,24(sp)
 8010284:	dcc00517 	ldw	r19,20(sp)
 8010288:	dc800417 	ldw	r18,16(sp)
 801028c:	dc400317 	ldw	r17,12(sp)
 8010290:	dc000217 	ldw	r16,8(sp)
 8010294:	dec00c04 	addi	sp,sp,48
 8010298:	f800283a 	ret
 801029c:	00803fc4 	movi	r2,255
 80102a0:	11c0952e 	bgeu	r2,r7,80104f8 <__umoddi3+0x508>
 80102a4:	01400204 	movi	r5,8
 80102a8:	282b883a 	mov	r21,r5
 80102ac:	003f9f06 	br	801012c <__alt_data_end+0xfc01012c>
 80102b0:	00804034 	movhi	r2,256
 80102b4:	10bfffc4 	addi	r2,r2,-1
 80102b8:	1180952e 	bgeu	r2,r6,8010510 <__umoddi3+0x520>
 80102bc:	01400604 	movi	r5,24
 80102c0:	2805883a 	mov	r2,r5
 80102c4:	003f6206 	br	8010050 <__alt_data_end+0xfc010050>
 80102c8:	00803fc4 	movi	r2,255
 80102cc:	14c0932e 	bgeu	r2,r19,801051c <__umoddi3+0x52c>
 80102d0:	00800204 	movi	r2,8
 80102d4:	1007883a 	mov	r3,r2
 80102d8:	003fb106 	br	80101a0 <__alt_data_end+0xfc0101a0>
 80102dc:	3548d83a 	srl	r4,r6,r21
 80102e0:	3d0e983a 	sll	r7,r7,r20
 80102e4:	8d10983a 	sll	r8,r17,r20
 80102e8:	8d6cd83a 	srl	r22,r17,r21
 80102ec:	3922b03a 	or	r17,r7,r4
 80102f0:	882ed43a 	srli	r23,r17,16
 80102f4:	8564d83a 	srl	r18,r16,r21
 80102f8:	b009883a 	mov	r4,r22
 80102fc:	b80b883a 	mov	r5,r23
 8010300:	44a4b03a 	or	r18,r8,r18
 8010304:	3526983a 	sll	r19,r6,r20
 8010308:	80106a40 	call	80106a4 <__umodsi3>
 801030c:	b009883a 	mov	r4,r22
 8010310:	b80b883a 	mov	r5,r23
 8010314:	1039883a 	mov	fp,r2
 8010318:	801069c0 	call	801069c <__udivsi3>
 801031c:	102d883a 	mov	r22,r2
 8010320:	8a3fffcc 	andi	r8,r17,65535
 8010324:	e004943a 	slli	r2,fp,16
 8010328:	900cd43a 	srli	r6,r18,16
 801032c:	b239383a 	mul	fp,r22,r8
 8010330:	8520983a 	sll	r16,r16,r20
 8010334:	118ab03a 	or	r5,r2,r6
 8010338:	2f00042e 	bgeu	r5,fp,801034c <__umoddi3+0x35c>
 801033c:	2c4b883a 	add	r5,r5,r17
 8010340:	b0bfffc4 	addi	r2,r22,-1
 8010344:	2c40822e 	bgeu	r5,r17,8010550 <__umoddi3+0x560>
 8010348:	102d883a 	mov	r22,r2
 801034c:	2f39c83a 	sub	fp,r5,fp
 8010350:	e009883a 	mov	r4,fp
 8010354:	b80b883a 	mov	r5,r23
 8010358:	da000115 	stw	r8,4(sp)
 801035c:	80106a40 	call	80106a4 <__umodsi3>
 8010360:	e009883a 	mov	r4,fp
 8010364:	b80b883a 	mov	r5,r23
 8010368:	d8800015 	stw	r2,0(sp)
 801036c:	801069c0 	call	801069c <__udivsi3>
 8010370:	d9800017 	ldw	r6,0(sp)
 8010374:	da000117 	ldw	r8,4(sp)
 8010378:	94bfffcc 	andi	r18,r18,65535
 801037c:	300c943a 	slli	r6,r6,16
 8010380:	1209383a 	mul	r4,r2,r8
 8010384:	3490b03a 	or	r8,r6,r18
 8010388:	4100042e 	bgeu	r8,r4,801039c <__umoddi3+0x3ac>
 801038c:	4451883a 	add	r8,r8,r17
 8010390:	10ffffc4 	addi	r3,r2,-1
 8010394:	44406a2e 	bgeu	r8,r17,8010540 <__umoddi3+0x550>
 8010398:	1805883a 	mov	r2,r3
 801039c:	b012943a 	slli	r9,r22,16
 80103a0:	9abfffcc 	andi	r10,r19,65535
 80103a4:	980ed43a 	srli	r7,r19,16
 80103a8:	124ab03a 	or	r5,r2,r9
 80103ac:	2a7fffcc 	andi	r9,r5,65535
 80103b0:	280ad43a 	srli	r5,r5,16
 80103b4:	4a8d383a 	mul	r6,r9,r10
 80103b8:	49d3383a 	mul	r9,r9,r7
 80103bc:	2a95383a 	mul	r10,r5,r10
 80103c0:	3004d43a 	srli	r2,r6,16
 80103c4:	4111c83a 	sub	r8,r8,r4
 80103c8:	5253883a 	add	r9,r10,r9
 80103cc:	4893883a 	add	r9,r9,r2
 80103d0:	29cb383a 	mul	r5,r5,r7
 80103d4:	4a80022e 	bgeu	r9,r10,80103e0 <__umoddi3+0x3f0>
 80103d8:	00800074 	movhi	r2,1
 80103dc:	288b883a 	add	r5,r5,r2
 80103e0:	4808d43a 	srli	r4,r9,16
 80103e4:	4812943a 	slli	r9,r9,16
 80103e8:	31bfffcc 	andi	r6,r6,65535
 80103ec:	290b883a 	add	r5,r5,r4
 80103f0:	498d883a 	add	r6,r9,r6
 80103f4:	41403a36 	bltu	r8,r5,80104e0 <__umoddi3+0x4f0>
 80103f8:	41405d26 	beq	r8,r5,8010570 <__umoddi3+0x580>
 80103fc:	4149c83a 	sub	r4,r8,r5
 8010400:	300f883a 	mov	r7,r6
 8010404:	81cfc83a 	sub	r7,r16,r7
 8010408:	81c7803a 	cmpltu	r3,r16,r7
 801040c:	20c7c83a 	sub	r3,r4,r3
 8010410:	1d44983a 	sll	r2,r3,r21
 8010414:	3d0ed83a 	srl	r7,r7,r20
 8010418:	1d06d83a 	srl	r3,r3,r20
 801041c:	11c4b03a 	or	r2,r2,r7
 8010420:	003f9206 	br	801026c <__alt_data_end+0xfc01026c>
 8010424:	0025883a 	mov	r18,zero
 8010428:	003f1806 	br	801008c <__alt_data_end+0xfc01008c>
 801042c:	98a6983a 	sll	r19,r19,r2
 8010430:	88e8d83a 	srl	r20,r17,r3
 8010434:	80c6d83a 	srl	r3,r16,r3
 8010438:	982cd43a 	srli	r22,r19,16
 801043c:	88a2983a 	sll	r17,r17,r2
 8010440:	a009883a 	mov	r4,r20
 8010444:	b00b883a 	mov	r5,r22
 8010448:	88eab03a 	or	r21,r17,r3
 801044c:	1025883a 	mov	r18,r2
 8010450:	80106a40 	call	80106a4 <__umodsi3>
 8010454:	a009883a 	mov	r4,r20
 8010458:	b00b883a 	mov	r5,r22
 801045c:	1023883a 	mov	r17,r2
 8010460:	801069c0 	call	801069c <__udivsi3>
 8010464:	9f3fffcc 	andi	fp,r19,65535
 8010468:	8822943a 	slli	r17,r17,16
 801046c:	a80ad43a 	srli	r5,r21,16
 8010470:	1705383a 	mul	r2,r2,fp
 8010474:	84a8983a 	sll	r20,r16,r18
 8010478:	8948b03a 	or	r4,r17,r5
 801047c:	2080042e 	bgeu	r4,r2,8010490 <__umoddi3+0x4a0>
 8010480:	24c9883a 	add	r4,r4,r19
 8010484:	24c00236 	bltu	r4,r19,8010490 <__umoddi3+0x4a0>
 8010488:	2080012e 	bgeu	r4,r2,8010490 <__umoddi3+0x4a0>
 801048c:	24c9883a 	add	r4,r4,r19
 8010490:	20afc83a 	sub	r23,r4,r2
 8010494:	b809883a 	mov	r4,r23
 8010498:	b00b883a 	mov	r5,r22
 801049c:	80106a40 	call	80106a4 <__umodsi3>
 80104a0:	1023883a 	mov	r17,r2
 80104a4:	b809883a 	mov	r4,r23
 80104a8:	b00b883a 	mov	r5,r22
 80104ac:	801069c0 	call	801069c <__udivsi3>
 80104b0:	8822943a 	slli	r17,r17,16
 80104b4:	1705383a 	mul	r2,r2,fp
 80104b8:	a93fffcc 	andi	r4,r21,65535
 80104bc:	8908b03a 	or	r4,r17,r4
 80104c0:	2080042e 	bgeu	r4,r2,80104d4 <__umoddi3+0x4e4>
 80104c4:	24c9883a 	add	r4,r4,r19
 80104c8:	24c00236 	bltu	r4,r19,80104d4 <__umoddi3+0x4e4>
 80104cc:	2080012e 	bgeu	r4,r2,80104d4 <__umoddi3+0x4e4>
 80104d0:	24c9883a 	add	r4,r4,r19
 80104d4:	20a3c83a 	sub	r17,r4,r2
 80104d8:	e021883a 	mov	r16,fp
 80104dc:	003f3d06 	br	80101d4 <__alt_data_end+0xfc0101d4>
 80104e0:	34cfc83a 	sub	r7,r6,r19
 80104e4:	2c4bc83a 	sub	r5,r5,r17
 80104e8:	31cd803a 	cmpltu	r6,r6,r7
 80104ec:	298dc83a 	sub	r6,r5,r6
 80104f0:	4189c83a 	sub	r4,r8,r6
 80104f4:	003fc306 	br	8010404 <__alt_data_end+0xfc010404>
 80104f8:	000b883a 	mov	r5,zero
 80104fc:	002b883a 	mov	r21,zero
 8010500:	003f0a06 	br	801012c <__alt_data_end+0xfc01012c>
 8010504:	01400404 	movi	r5,16
 8010508:	282b883a 	mov	r21,r5
 801050c:	003f0706 	br	801012c <__alt_data_end+0xfc01012c>
 8010510:	01400404 	movi	r5,16
 8010514:	2805883a 	mov	r2,r5
 8010518:	003ecd06 	br	8010050 <__alt_data_end+0xfc010050>
 801051c:	0005883a 	mov	r2,zero
 8010520:	0007883a 	mov	r3,zero
 8010524:	003f1e06 	br	80101a0 <__alt_data_end+0xfc0101a0>
 8010528:	00800404 	movi	r2,16
 801052c:	1007883a 	mov	r3,r2
 8010530:	003f1b06 	br	80101a0 <__alt_data_end+0xfc0101a0>
 8010534:	000b883a 	mov	r5,zero
 8010538:	0005883a 	mov	r2,zero
 801053c:	003ec406 	br	8010050 <__alt_data_end+0xfc010050>
 8010540:	413f952e 	bgeu	r8,r4,8010398 <__alt_data_end+0xfc010398>
 8010544:	10bfff84 	addi	r2,r2,-2
 8010548:	4451883a 	add	r8,r8,r17
 801054c:	003f9306 	br	801039c <__alt_data_end+0xfc01039c>
 8010550:	2f3f7d2e 	bgeu	r5,fp,8010348 <__alt_data_end+0xfc010348>
 8010554:	b5bfff84 	addi	r22,r22,-2
 8010558:	2c4b883a 	add	r5,r5,r17
 801055c:	003f7b06 	br	801034c <__alt_data_end+0xfc01034c>
 8010560:	34cd883a 	add	r6,r6,r19
 8010564:	003f2a06 	br	8010210 <__alt_data_end+0xfc010210>
 8010568:	8005883a 	mov	r2,r16
 801056c:	003efe06 	br	8010168 <__alt_data_end+0xfc010168>
 8010570:	81bfdb36 	bltu	r16,r6,80104e0 <__alt_data_end+0xfc0104e0>
 8010574:	300f883a 	mov	r7,r6
 8010578:	0009883a 	mov	r4,zero
 801057c:	003fa106 	br	8010404 <__alt_data_end+0xfc010404>

08010580 <udivmodsi4>:
 8010580:	2900182e 	bgeu	r5,r4,80105e4 <udivmodsi4+0x64>
 8010584:	28001716 	blt	r5,zero,80105e4 <udivmodsi4+0x64>
 8010588:	00800804 	movi	r2,32
 801058c:	00c00044 	movi	r3,1
 8010590:	00000206 	br	801059c <udivmodsi4+0x1c>
 8010594:	10001126 	beq	r2,zero,80105dc <udivmodsi4+0x5c>
 8010598:	28000516 	blt	r5,zero,80105b0 <udivmodsi4+0x30>
 801059c:	294b883a 	add	r5,r5,r5
 80105a0:	10bfffc4 	addi	r2,r2,-1
 80105a4:	18c7883a 	add	r3,r3,r3
 80105a8:	293ffa36 	bltu	r5,r4,8010594 <__alt_data_end+0xfc010594>
 80105ac:	18000b26 	beq	r3,zero,80105dc <udivmodsi4+0x5c>
 80105b0:	0005883a 	mov	r2,zero
 80105b4:	21400236 	bltu	r4,r5,80105c0 <udivmodsi4+0x40>
 80105b8:	2149c83a 	sub	r4,r4,r5
 80105bc:	10c4b03a 	or	r2,r2,r3
 80105c0:	1806d07a 	srli	r3,r3,1
 80105c4:	280ad07a 	srli	r5,r5,1
 80105c8:	183ffa1e 	bne	r3,zero,80105b4 <__alt_data_end+0xfc0105b4>
 80105cc:	3000011e 	bne	r6,zero,80105d4 <udivmodsi4+0x54>
 80105d0:	f800283a 	ret
 80105d4:	2005883a 	mov	r2,r4
 80105d8:	f800283a 	ret
 80105dc:	0005883a 	mov	r2,zero
 80105e0:	003ffa06 	br	80105cc <__alt_data_end+0xfc0105cc>
 80105e4:	00c00044 	movi	r3,1
 80105e8:	003ff106 	br	80105b0 <__alt_data_end+0xfc0105b0>

080105ec <__divsi3>:
 80105ec:	defffe04 	addi	sp,sp,-8
 80105f0:	dfc00115 	stw	ra,4(sp)
 80105f4:	dc000015 	stw	r16,0(sp)
 80105f8:	20000b16 	blt	r4,zero,8010628 <__divsi3+0x3c>
 80105fc:	0021883a 	mov	r16,zero
 8010600:	28000c16 	blt	r5,zero,8010634 <__divsi3+0x48>
 8010604:	000d883a 	mov	r6,zero
 8010608:	80105800 	call	8010580 <udivmodsi4>
 801060c:	0407c83a 	sub	r3,zero,r16
 8010610:	1884f03a 	xor	r2,r3,r2
 8010614:	1405883a 	add	r2,r2,r16
 8010618:	dfc00117 	ldw	ra,4(sp)
 801061c:	dc000017 	ldw	r16,0(sp)
 8010620:	dec00204 	addi	sp,sp,8
 8010624:	f800283a 	ret
 8010628:	0109c83a 	sub	r4,zero,r4
 801062c:	04000044 	movi	r16,1
 8010630:	283ff40e 	bge	r5,zero,8010604 <__alt_data_end+0xfc010604>
 8010634:	014bc83a 	sub	r5,zero,r5
 8010638:	8400005c 	xori	r16,r16,1
 801063c:	003ff106 	br	8010604 <__alt_data_end+0xfc010604>

08010640 <__modsi3>:
 8010640:	defffd04 	addi	sp,sp,-12
 8010644:	dfc00215 	stw	ra,8(sp)
 8010648:	dc400115 	stw	r17,4(sp)
 801064c:	dc000015 	stw	r16,0(sp)
 8010650:	20000c16 	blt	r4,zero,8010684 <__modsi3+0x44>
 8010654:	0023883a 	mov	r17,zero
 8010658:	0021883a 	mov	r16,zero
 801065c:	28000d16 	blt	r5,zero,8010694 <__modsi3+0x54>
 8010660:	01800044 	movi	r6,1
 8010664:	80105800 	call	8010580 <udivmodsi4>
 8010668:	1404f03a 	xor	r2,r2,r16
 801066c:	8885883a 	add	r2,r17,r2
 8010670:	dfc00217 	ldw	ra,8(sp)
 8010674:	dc400117 	ldw	r17,4(sp)
 8010678:	dc000017 	ldw	r16,0(sp)
 801067c:	dec00304 	addi	sp,sp,12
 8010680:	f800283a 	ret
 8010684:	0109c83a 	sub	r4,zero,r4
 8010688:	04400044 	movi	r17,1
 801068c:	043fffc4 	movi	r16,-1
 8010690:	283ff30e 	bge	r5,zero,8010660 <__alt_data_end+0xfc010660>
 8010694:	014bc83a 	sub	r5,zero,r5
 8010698:	003ff106 	br	8010660 <__alt_data_end+0xfc010660>

0801069c <__udivsi3>:
 801069c:	000d883a 	mov	r6,zero
 80106a0:	80105801 	jmpi	8010580 <udivmodsi4>

080106a4 <__umodsi3>:
 80106a4:	01800044 	movi	r6,1
 80106a8:	80105801 	jmpi	8010580 <udivmodsi4>

080106ac <__divdf3>:
 80106ac:	defff204 	addi	sp,sp,-56
 80106b0:	dd000815 	stw	r20,32(sp)
 80106b4:	2828d53a 	srli	r20,r5,20
 80106b8:	dd800a15 	stw	r22,40(sp)
 80106bc:	282cd7fa 	srli	r22,r5,31
 80106c0:	dc000415 	stw	r16,16(sp)
 80106c4:	04000434 	movhi	r16,16
 80106c8:	df000c15 	stw	fp,48(sp)
 80106cc:	dcc00715 	stw	r19,28(sp)
 80106d0:	dc800615 	stw	r18,24(sp)
 80106d4:	dc400515 	stw	r17,20(sp)
 80106d8:	843fffc4 	addi	r16,r16,-1
 80106dc:	dfc00d15 	stw	ra,52(sp)
 80106e0:	ddc00b15 	stw	r23,44(sp)
 80106e4:	dd400915 	stw	r21,36(sp)
 80106e8:	a501ffcc 	andi	r20,r20,2047
 80106ec:	2025883a 	mov	r18,r4
 80106f0:	2027883a 	mov	r19,r4
 80106f4:	2c22703a 	and	r17,r5,r16
 80106f8:	b7003fcc 	andi	fp,r22,255
 80106fc:	a0005e26 	beq	r20,zero,8010878 <__divdf3+0x1cc>
 8010700:	0081ffc4 	movi	r2,2047
 8010704:	a0803526 	beq	r20,r2,80107dc <__divdf3+0x130>
 8010708:	8c000434 	orhi	r16,r17,16
 801070c:	2004d77a 	srli	r2,r4,29
 8010710:	802090fa 	slli	r16,r16,3
 8010714:	202690fa 	slli	r19,r4,3
 8010718:	a53f0044 	addi	r20,r20,-1023
 801071c:	80a2b03a 	or	r17,r16,r2
 8010720:	0025883a 	mov	r18,zero
 8010724:	0011883a 	mov	r8,zero
 8010728:	380ad53a 	srli	r5,r7,20
 801072c:	382ed7fa 	srli	r23,r7,31
 8010730:	04000434 	movhi	r16,16
 8010734:	843fffc4 	addi	r16,r16,-1
 8010738:	2941ffcc 	andi	r5,r5,2047
 801073c:	302b883a 	mov	r21,r6
 8010740:	3c20703a 	and	r16,r7,r16
 8010744:	ba403fcc 	andi	r9,r23,255
 8010748:	28006726 	beq	r5,zero,80108e8 <__divdf3+0x23c>
 801074c:	0081ffc4 	movi	r2,2047
 8010750:	28805f26 	beq	r5,r2,80108d0 <__divdf3+0x224>
 8010754:	84000434 	orhi	r16,r16,16
 8010758:	3004d77a 	srli	r2,r6,29
 801075c:	802090fa 	slli	r16,r16,3
 8010760:	302a90fa 	slli	r21,r6,3
 8010764:	297f0044 	addi	r5,r5,-1023
 8010768:	80a0b03a 	or	r16,r16,r2
 801076c:	000f883a 	mov	r7,zero
 8010770:	3c86b03a 	or	r3,r7,r18
 8010774:	180690ba 	slli	r3,r3,2
 8010778:	00820074 	movhi	r2,2049
 801077c:	1081e704 	addi	r2,r2,1948
 8010780:	1887883a 	add	r3,r3,r2
 8010784:	18c00017 	ldw	r3,0(r3)
 8010788:	b5c8f03a 	xor	r4,r22,r23
 801078c:	200d883a 	mov	r6,r4
 8010790:	24803fcc 	andi	r18,r4,255
 8010794:	a169c83a 	sub	r20,r20,r5
 8010798:	1800683a 	jmp	r3
 801079c:	080109e4 	muli	zero,at,1063
 80107a0:	08010814 	ori	zero,at,1056
 80107a4:	080109a8 	cmpgeui	zero,at,1062
 80107a8:	080107f8 	rdprs	zero,at,1055
 80107ac:	080109a8 	cmpgeui	zero,at,1062
 80107b0:	0801097c 	xorhi	zero,at,1061
 80107b4:	080109a8 	cmpgeui	zero,at,1062
 80107b8:	080107f8 	rdprs	zero,at,1055
 80107bc:	08010814 	ori	zero,at,1056
 80107c0:	08010814 	ori	zero,at,1056
 80107c4:	0801097c 	xorhi	zero,at,1061
 80107c8:	080107f8 	rdprs	zero,at,1055
 80107cc:	08010808 	cmpgei	zero,at,1056
 80107d0:	08010808 	cmpgei	zero,at,1056
 80107d4:	08010808 	cmpgei	zero,at,1056
 80107d8:	080109b8 	rdprs	zero,at,1062
 80107dc:	8904b03a 	or	r2,r17,r4
 80107e0:	1000631e 	bne	r2,zero,8010970 <__divdf3+0x2c4>
 80107e4:	04800204 	movi	r18,8
 80107e8:	0023883a 	mov	r17,zero
 80107ec:	0027883a 	mov	r19,zero
 80107f0:	02000084 	movi	r8,2
 80107f4:	003fcc06 	br	8010728 <__alt_data_end+0xfc010728>
 80107f8:	8023883a 	mov	r17,r16
 80107fc:	a827883a 	mov	r19,r21
 8010800:	4839883a 	mov	fp,r9
 8010804:	3811883a 	mov	r8,r7
 8010808:	00800084 	movi	r2,2
 801080c:	40812a1e 	bne	r8,r2,8010cb8 <__divdf3+0x60c>
 8010810:	e025883a 	mov	r18,fp
 8010814:	9180004c 	andi	r6,r18,1
 8010818:	0101ffc4 	movi	r4,2047
 801081c:	000b883a 	mov	r5,zero
 8010820:	0027883a 	mov	r19,zero
 8010824:	2008953a 	slli	r4,r4,20
 8010828:	30c03fcc 	andi	r3,r6,255
 801082c:	04000434 	movhi	r16,16
 8010830:	180697fa 	slli	r3,r3,31
 8010834:	843fffc4 	addi	r16,r16,-1
 8010838:	2c20703a 	and	r16,r5,r16
 801083c:	8120b03a 	or	r16,r16,r4
 8010840:	80c6b03a 	or	r3,r16,r3
 8010844:	9805883a 	mov	r2,r19
 8010848:	dfc00d17 	ldw	ra,52(sp)
 801084c:	df000c17 	ldw	fp,48(sp)
 8010850:	ddc00b17 	ldw	r23,44(sp)
 8010854:	dd800a17 	ldw	r22,40(sp)
 8010858:	dd400917 	ldw	r21,36(sp)
 801085c:	dd000817 	ldw	r20,32(sp)
 8010860:	dcc00717 	ldw	r19,28(sp)
 8010864:	dc800617 	ldw	r18,24(sp)
 8010868:	dc400517 	ldw	r17,20(sp)
 801086c:	dc000417 	ldw	r16,16(sp)
 8010870:	dec00e04 	addi	sp,sp,56
 8010874:	f800283a 	ret
 8010878:	8904b03a 	or	r2,r17,r4
 801087c:	10003726 	beq	r2,zero,801095c <__divdf3+0x2b0>
 8010880:	88011c26 	beq	r17,zero,8010cf4 <__divdf3+0x648>
 8010884:	8809883a 	mov	r4,r17
 8010888:	d9800315 	stw	r6,12(sp)
 801088c:	d9c00115 	stw	r7,4(sp)
 8010890:	80034dc0 	call	80034dc <__clzsi2>
 8010894:	d9800317 	ldw	r6,12(sp)
 8010898:	d9c00117 	ldw	r7,4(sp)
 801089c:	1007883a 	mov	r3,r2
 80108a0:	01000a04 	movi	r4,40
 80108a4:	1cfffe04 	addi	r19,r3,-8
 80108a8:	20c9c83a 	sub	r4,r4,r3
 80108ac:	8cca983a 	sll	r5,r17,r19
 80108b0:	9108d83a 	srl	r4,r18,r4
 80108b4:	94e6983a 	sll	r19,r18,r19
 80108b8:	2162b03a 	or	r17,r4,r5
 80108bc:	053f0344 	movi	r20,-1011
 80108c0:	a0e9c83a 	sub	r20,r20,r3
 80108c4:	0025883a 	mov	r18,zero
 80108c8:	0011883a 	mov	r8,zero
 80108cc:	003f9606 	br	8010728 <__alt_data_end+0xfc010728>
 80108d0:	8184b03a 	or	r2,r16,r6
 80108d4:	10001f1e 	bne	r2,zero,8010954 <__divdf3+0x2a8>
 80108d8:	0021883a 	mov	r16,zero
 80108dc:	002b883a 	mov	r21,zero
 80108e0:	01c00084 	movi	r7,2
 80108e4:	003fa206 	br	8010770 <__alt_data_end+0xfc010770>
 80108e8:	8184b03a 	or	r2,r16,r6
 80108ec:	10001526 	beq	r2,zero,8010944 <__divdf3+0x298>
 80108f0:	80010c26 	beq	r16,zero,8010d24 <__divdf3+0x678>
 80108f4:	8009883a 	mov	r4,r16
 80108f8:	d9800315 	stw	r6,12(sp)
 80108fc:	da000215 	stw	r8,8(sp)
 8010900:	da400015 	stw	r9,0(sp)
 8010904:	80034dc0 	call	80034dc <__clzsi2>
 8010908:	d9800317 	ldw	r6,12(sp)
 801090c:	da000217 	ldw	r8,8(sp)
 8010910:	da400017 	ldw	r9,0(sp)
 8010914:	1007883a 	mov	r3,r2
 8010918:	01000a04 	movi	r4,40
 801091c:	1d7ffe04 	addi	r21,r3,-8
 8010920:	20c9c83a 	sub	r4,r4,r3
 8010924:	8560983a 	sll	r16,r16,r21
 8010928:	3108d83a 	srl	r4,r6,r4
 801092c:	356a983a 	sll	r21,r6,r21
 8010930:	2420b03a 	or	r16,r4,r16
 8010934:	017f0344 	movi	r5,-1011
 8010938:	28cbc83a 	sub	r5,r5,r3
 801093c:	000f883a 	mov	r7,zero
 8010940:	003f8b06 	br	8010770 <__alt_data_end+0xfc010770>
 8010944:	0021883a 	mov	r16,zero
 8010948:	002b883a 	mov	r21,zero
 801094c:	01c00044 	movi	r7,1
 8010950:	003f8706 	br	8010770 <__alt_data_end+0xfc010770>
 8010954:	01c000c4 	movi	r7,3
 8010958:	003f8506 	br	8010770 <__alt_data_end+0xfc010770>
 801095c:	04800104 	movi	r18,4
 8010960:	0023883a 	mov	r17,zero
 8010964:	0027883a 	mov	r19,zero
 8010968:	02000044 	movi	r8,1
 801096c:	003f6e06 	br	8010728 <__alt_data_end+0xfc010728>
 8010970:	04800304 	movi	r18,12
 8010974:	020000c4 	movi	r8,3
 8010978:	003f6b06 	br	8010728 <__alt_data_end+0xfc010728>
 801097c:	01400434 	movhi	r5,16
 8010980:	000d883a 	mov	r6,zero
 8010984:	297fffc4 	addi	r5,r5,-1
 8010988:	04ffffc4 	movi	r19,-1
 801098c:	0101ffc4 	movi	r4,2047
 8010990:	003fa406 	br	8010824 <__alt_data_end+0xfc010824>
 8010994:	043f0084 	movi	r16,-1022
 8010998:	8521c83a 	sub	r16,r16,r20
 801099c:	00800e04 	movi	r2,56
 80109a0:	1401200e 	bge	r2,r16,8010e24 <__divdf3+0x778>
 80109a4:	9180004c 	andi	r6,r18,1
 80109a8:	0009883a 	mov	r4,zero
 80109ac:	000b883a 	mov	r5,zero
 80109b0:	0027883a 	mov	r19,zero
 80109b4:	003f9b06 	br	8010824 <__alt_data_end+0xfc010824>
 80109b8:	8880022c 	andhi	r2,r17,8
 80109bc:	1000c726 	beq	r2,zero,8010cdc <__divdf3+0x630>
 80109c0:	8080022c 	andhi	r2,r16,8
 80109c4:	1000c51e 	bne	r2,zero,8010cdc <__divdf3+0x630>
 80109c8:	00800434 	movhi	r2,16
 80109cc:	81400234 	orhi	r5,r16,8
 80109d0:	10bfffc4 	addi	r2,r2,-1
 80109d4:	b80d883a 	mov	r6,r23
 80109d8:	288a703a 	and	r5,r5,r2
 80109dc:	a827883a 	mov	r19,r21
 80109e0:	003fea06 	br	801098c <__alt_data_end+0xfc01098c>
 80109e4:	8440ea36 	bltu	r16,r17,8010d90 <__divdf3+0x6e4>
 80109e8:	8c00e826 	beq	r17,r16,8010d8c <__divdf3+0x6e0>
 80109ec:	a53fffc4 	addi	r20,r20,-1
 80109f0:	882d883a 	mov	r22,r17
 80109f4:	000d883a 	mov	r6,zero
 80109f8:	a804d63a 	srli	r2,r21,24
 80109fc:	8020923a 	slli	r16,r16,8
 8010a00:	b009883a 	mov	r4,r22
 8010a04:	d9800315 	stw	r6,12(sp)
 8010a08:	1420b03a 	or	r16,r2,r16
 8010a0c:	802ed43a 	srli	r23,r16,16
 8010a10:	873fffcc 	andi	fp,r16,65535
 8010a14:	a82a923a 	slli	r21,r21,8
 8010a18:	b80b883a 	mov	r5,r23
 8010a1c:	801069c0 	call	801069c <__udivsi3>
 8010a20:	b009883a 	mov	r4,r22
 8010a24:	b80b883a 	mov	r5,r23
 8010a28:	1023883a 	mov	r17,r2
 8010a2c:	80106a40 	call	80106a4 <__umodsi3>
 8010a30:	1004943a 	slli	r2,r2,16
 8010a34:	9808d43a 	srli	r4,r19,16
 8010a38:	8f2d383a 	mul	r22,r17,fp
 8010a3c:	d9800317 	ldw	r6,12(sp)
 8010a40:	1106b03a 	or	r3,r2,r4
 8010a44:	1d80062e 	bgeu	r3,r22,8010a60 <__divdf3+0x3b4>
 8010a48:	1c07883a 	add	r3,r3,r16
 8010a4c:	88bfffc4 	addi	r2,r17,-1
 8010a50:	1c00dc36 	bltu	r3,r16,8010dc4 <__divdf3+0x718>
 8010a54:	1d80db2e 	bgeu	r3,r22,8010dc4 <__divdf3+0x718>
 8010a58:	8c7fff84 	addi	r17,r17,-2
 8010a5c:	1c07883a 	add	r3,r3,r16
 8010a60:	1dadc83a 	sub	r22,r3,r22
 8010a64:	b009883a 	mov	r4,r22
 8010a68:	b80b883a 	mov	r5,r23
 8010a6c:	d9800315 	stw	r6,12(sp)
 8010a70:	801069c0 	call	801069c <__udivsi3>
 8010a74:	b009883a 	mov	r4,r22
 8010a78:	b80b883a 	mov	r5,r23
 8010a7c:	d8800015 	stw	r2,0(sp)
 8010a80:	80106a40 	call	80106a4 <__umodsi3>
 8010a84:	da400017 	ldw	r9,0(sp)
 8010a88:	1004943a 	slli	r2,r2,16
 8010a8c:	9cffffcc 	andi	r19,r19,65535
 8010a90:	4f07383a 	mul	r3,r9,fp
 8010a94:	14c8b03a 	or	r4,r2,r19
 8010a98:	d9800317 	ldw	r6,12(sp)
 8010a9c:	20c0062e 	bgeu	r4,r3,8010ab8 <__divdf3+0x40c>
 8010aa0:	2409883a 	add	r4,r4,r16
 8010aa4:	48bfffc4 	addi	r2,r9,-1
 8010aa8:	2400c436 	bltu	r4,r16,8010dbc <__divdf3+0x710>
 8010aac:	20c0c32e 	bgeu	r4,r3,8010dbc <__divdf3+0x710>
 8010ab0:	4a7fff84 	addi	r9,r9,-2
 8010ab4:	2409883a 	add	r4,r4,r16
 8010ab8:	8822943a 	slli	r17,r17,16
 8010abc:	a80ed43a 	srli	r7,r21,16
 8010ac0:	aa3fffcc 	andi	r8,r21,65535
 8010ac4:	4c62b03a 	or	r17,r9,r17
 8010ac8:	8816d43a 	srli	r11,r17,16
 8010acc:	897fffcc 	andi	r5,r17,65535
 8010ad0:	2a15383a 	mul	r10,r5,r8
 8010ad4:	5a19383a 	mul	r12,r11,r8
 8010ad8:	29cb383a 	mul	r5,r5,r7
 8010adc:	5012d43a 	srli	r9,r10,16
 8010ae0:	20c5c83a 	sub	r2,r4,r3
 8010ae4:	614b883a 	add	r5,r12,r5
 8010ae8:	2a4b883a 	add	r5,r5,r9
 8010aec:	59c7383a 	mul	r3,r11,r7
 8010af0:	2b00022e 	bgeu	r5,r12,8010afc <__divdf3+0x450>
 8010af4:	01000074 	movhi	r4,1
 8010af8:	1907883a 	add	r3,r3,r4
 8010afc:	2808d43a 	srli	r4,r5,16
 8010b00:	280a943a 	slli	r5,r5,16
 8010b04:	54ffffcc 	andi	r19,r10,65535
 8010b08:	1907883a 	add	r3,r3,r4
 8010b0c:	2ccb883a 	add	r5,r5,r19
 8010b10:	10c09336 	bltu	r2,r3,8010d60 <__divdf3+0x6b4>
 8010b14:	10c0ad26 	beq	r2,r3,8010dcc <__divdf3+0x720>
 8010b18:	10c7c83a 	sub	r3,r2,r3
 8010b1c:	3167c83a 	sub	r19,r6,r5
 8010b20:	34ed803a 	cmpltu	r22,r6,r19
 8010b24:	1dadc83a 	sub	r22,r3,r22
 8010b28:	b400b226 	beq	r22,r16,8010df4 <__divdf3+0x748>
 8010b2c:	b009883a 	mov	r4,r22
 8010b30:	b80b883a 	mov	r5,r23
 8010b34:	d9c00115 	stw	r7,4(sp)
 8010b38:	da000215 	stw	r8,8(sp)
 8010b3c:	801069c0 	call	801069c <__udivsi3>
 8010b40:	b009883a 	mov	r4,r22
 8010b44:	b80b883a 	mov	r5,r23
 8010b48:	d8800315 	stw	r2,12(sp)
 8010b4c:	80106a40 	call	80106a4 <__umodsi3>
 8010b50:	d9800317 	ldw	r6,12(sp)
 8010b54:	1004943a 	slli	r2,r2,16
 8010b58:	9808d43a 	srli	r4,r19,16
 8010b5c:	372d383a 	mul	r22,r6,fp
 8010b60:	d9c00117 	ldw	r7,4(sp)
 8010b64:	1106b03a 	or	r3,r2,r4
 8010b68:	da000217 	ldw	r8,8(sp)
 8010b6c:	1d80062e 	bgeu	r3,r22,8010b88 <__divdf3+0x4dc>
 8010b70:	1c07883a 	add	r3,r3,r16
 8010b74:	30bfffc4 	addi	r2,r6,-1
 8010b78:	1c00a036 	bltu	r3,r16,8010dfc <__divdf3+0x750>
 8010b7c:	1d809f2e 	bgeu	r3,r22,8010dfc <__divdf3+0x750>
 8010b80:	31bfff84 	addi	r6,r6,-2
 8010b84:	1c07883a 	add	r3,r3,r16
 8010b88:	1dadc83a 	sub	r22,r3,r22
 8010b8c:	b009883a 	mov	r4,r22
 8010b90:	b80b883a 	mov	r5,r23
 8010b94:	d9800315 	stw	r6,12(sp)
 8010b98:	d9c00115 	stw	r7,4(sp)
 8010b9c:	da000215 	stw	r8,8(sp)
 8010ba0:	801069c0 	call	801069c <__udivsi3>
 8010ba4:	b009883a 	mov	r4,r22
 8010ba8:	b80b883a 	mov	r5,r23
 8010bac:	d8800015 	stw	r2,0(sp)
 8010bb0:	80106a40 	call	80106a4 <__umodsi3>
 8010bb4:	da400017 	ldw	r9,0(sp)
 8010bb8:	1004943a 	slli	r2,r2,16
 8010bbc:	993fffcc 	andi	r4,r19,65535
 8010bc0:	4f39383a 	mul	fp,r9,fp
 8010bc4:	1106b03a 	or	r3,r2,r4
 8010bc8:	d9800317 	ldw	r6,12(sp)
 8010bcc:	d9c00117 	ldw	r7,4(sp)
 8010bd0:	da000217 	ldw	r8,8(sp)
 8010bd4:	1f00062e 	bgeu	r3,fp,8010bf0 <__divdf3+0x544>
 8010bd8:	1c07883a 	add	r3,r3,r16
 8010bdc:	48bfffc4 	addi	r2,r9,-1
 8010be0:	1c008836 	bltu	r3,r16,8010e04 <__divdf3+0x758>
 8010be4:	1f00872e 	bgeu	r3,fp,8010e04 <__divdf3+0x758>
 8010be8:	4a7fff84 	addi	r9,r9,-2
 8010bec:	1c07883a 	add	r3,r3,r16
 8010bf0:	3008943a 	slli	r4,r6,16
 8010bf4:	1f07c83a 	sub	r3,r3,fp
 8010bf8:	4926b03a 	or	r19,r9,r4
 8010bfc:	993fffcc 	andi	r4,r19,65535
 8010c00:	980cd43a 	srli	r6,r19,16
 8010c04:	220b383a 	mul	r5,r4,r8
 8010c08:	21c5383a 	mul	r2,r4,r7
 8010c0c:	3211383a 	mul	r8,r6,r8
 8010c10:	2808d43a 	srli	r4,r5,16
 8010c14:	31cf383a 	mul	r7,r6,r7
 8010c18:	4085883a 	add	r2,r8,r2
 8010c1c:	1105883a 	add	r2,r2,r4
 8010c20:	1200022e 	bgeu	r2,r8,8010c2c <__divdf3+0x580>
 8010c24:	01000074 	movhi	r4,1
 8010c28:	390f883a 	add	r7,r7,r4
 8010c2c:	1008d43a 	srli	r4,r2,16
 8010c30:	1004943a 	slli	r2,r2,16
 8010c34:	297fffcc 	andi	r5,r5,65535
 8010c38:	390f883a 	add	r7,r7,r4
 8010c3c:	1145883a 	add	r2,r2,r5
 8010c40:	19c06536 	bltu	r3,r7,8010dd8 <__divdf3+0x72c>
 8010c44:	19c09f26 	beq	r3,r7,8010ec4 <__divdf3+0x818>
 8010c48:	9cc00054 	ori	r19,r19,1
 8010c4c:	a100ffc4 	addi	r4,r20,1023
 8010c50:	013f500e 	bge	zero,r4,8010994 <__alt_data_end+0xfc010994>
 8010c54:	988001cc 	andi	r2,r19,7
 8010c58:	10000726 	beq	r2,zero,8010c78 <__divdf3+0x5cc>
 8010c5c:	98c003cc 	andi	r3,r19,15
 8010c60:	00800104 	movi	r2,4
 8010c64:	18800426 	beq	r3,r2,8010c78 <__divdf3+0x5cc>
 8010c68:	9885883a 	add	r2,r19,r2
 8010c6c:	14e1803a 	cmpltu	r16,r2,r19
 8010c70:	8c23883a 	add	r17,r17,r16
 8010c74:	1027883a 	mov	r19,r2
 8010c78:	8880402c 	andhi	r2,r17,256
 8010c7c:	10000426 	beq	r2,zero,8010c90 <__divdf3+0x5e4>
 8010c80:	00bfc034 	movhi	r2,65280
 8010c84:	10bfffc4 	addi	r2,r2,-1
 8010c88:	a1010004 	addi	r4,r20,1024
 8010c8c:	88a2703a 	and	r17,r17,r2
 8010c90:	0081ff84 	movi	r2,2046
 8010c94:	113edf16 	blt	r2,r4,8010814 <__alt_data_end+0xfc010814>
 8010c98:	9826d0fa 	srli	r19,r19,3
 8010c9c:	8804977a 	slli	r2,r17,29
 8010ca0:	8820927a 	slli	r16,r17,9
 8010ca4:	2101ffcc 	andi	r4,r4,2047
 8010ca8:	14e6b03a 	or	r19,r2,r19
 8010cac:	800ad33a 	srli	r5,r16,12
 8010cb0:	9180004c 	andi	r6,r18,1
 8010cb4:	003edb06 	br	8010824 <__alt_data_end+0xfc010824>
 8010cb8:	008000c4 	movi	r2,3
 8010cbc:	4080a826 	beq	r8,r2,8010f60 <__divdf3+0x8b4>
 8010cc0:	00800044 	movi	r2,1
 8010cc4:	4080551e 	bne	r8,r2,8010e1c <__divdf3+0x770>
 8010cc8:	e00d883a 	mov	r6,fp
 8010ccc:	0009883a 	mov	r4,zero
 8010cd0:	000b883a 	mov	r5,zero
 8010cd4:	0027883a 	mov	r19,zero
 8010cd8:	003ed206 	br	8010824 <__alt_data_end+0xfc010824>
 8010cdc:	00800434 	movhi	r2,16
 8010ce0:	89400234 	orhi	r5,r17,8
 8010ce4:	10bfffc4 	addi	r2,r2,-1
 8010ce8:	b00d883a 	mov	r6,r22
 8010cec:	288a703a 	and	r5,r5,r2
 8010cf0:	003f2606 	br	801098c <__alt_data_end+0xfc01098c>
 8010cf4:	d9800315 	stw	r6,12(sp)
 8010cf8:	d9c00115 	stw	r7,4(sp)
 8010cfc:	80034dc0 	call	80034dc <__clzsi2>
 8010d00:	10c00804 	addi	r3,r2,32
 8010d04:	010009c4 	movi	r4,39
 8010d08:	d9800317 	ldw	r6,12(sp)
 8010d0c:	d9c00117 	ldw	r7,4(sp)
 8010d10:	20fee30e 	bge	r4,r3,80108a0 <__alt_data_end+0xfc0108a0>
 8010d14:	117ffe04 	addi	r5,r2,-8
 8010d18:	9162983a 	sll	r17,r18,r5
 8010d1c:	0027883a 	mov	r19,zero
 8010d20:	003ee606 	br	80108bc <__alt_data_end+0xfc0108bc>
 8010d24:	3009883a 	mov	r4,r6
 8010d28:	d9800315 	stw	r6,12(sp)
 8010d2c:	da000215 	stw	r8,8(sp)
 8010d30:	da400015 	stw	r9,0(sp)
 8010d34:	80034dc0 	call	80034dc <__clzsi2>
 8010d38:	10c00804 	addi	r3,r2,32
 8010d3c:	010009c4 	movi	r4,39
 8010d40:	d9800317 	ldw	r6,12(sp)
 8010d44:	da000217 	ldw	r8,8(sp)
 8010d48:	da400017 	ldw	r9,0(sp)
 8010d4c:	20fef20e 	bge	r4,r3,8010918 <__alt_data_end+0xfc010918>
 8010d50:	10bffe04 	addi	r2,r2,-8
 8010d54:	a8a0983a 	sll	r16,r21,r2
 8010d58:	002b883a 	mov	r21,zero
 8010d5c:	003ef506 	br	8010934 <__alt_data_end+0xfc010934>
 8010d60:	354d883a 	add	r6,r6,r21
 8010d64:	3549803a 	cmpltu	r4,r6,r21
 8010d68:	2409883a 	add	r4,r4,r16
 8010d6c:	2089883a 	add	r4,r4,r2
 8010d70:	88bfffc4 	addi	r2,r17,-1
 8010d74:	81000c2e 	bgeu	r16,r4,8010da8 <__divdf3+0x6fc>
 8010d78:	20c04436 	bltu	r4,r3,8010e8c <__divdf3+0x7e0>
 8010d7c:	19006f26 	beq	r3,r4,8010f3c <__divdf3+0x890>
 8010d80:	20c7c83a 	sub	r3,r4,r3
 8010d84:	1023883a 	mov	r17,r2
 8010d88:	003f6406 	br	8010b1c <__alt_data_end+0xfc010b1c>
 8010d8c:	9d7f1736 	bltu	r19,r21,80109ec <__alt_data_end+0xfc0109ec>
 8010d90:	9806d07a 	srli	r3,r19,1
 8010d94:	880497fa 	slli	r2,r17,31
 8010d98:	980c97fa 	slli	r6,r19,31
 8010d9c:	882cd07a 	srli	r22,r17,1
 8010da0:	18a6b03a 	or	r19,r3,r2
 8010da4:	003f1406 	br	80109f8 <__alt_data_end+0xfc0109f8>
 8010da8:	243ff51e 	bne	r4,r16,8010d80 <__alt_data_end+0xfc010d80>
 8010dac:	357ff22e 	bgeu	r6,r21,8010d78 <__alt_data_end+0xfc010d78>
 8010db0:	80c7c83a 	sub	r3,r16,r3
 8010db4:	1023883a 	mov	r17,r2
 8010db8:	003f5806 	br	8010b1c <__alt_data_end+0xfc010b1c>
 8010dbc:	1013883a 	mov	r9,r2
 8010dc0:	003f3d06 	br	8010ab8 <__alt_data_end+0xfc010ab8>
 8010dc4:	1023883a 	mov	r17,r2
 8010dc8:	003f2506 	br	8010a60 <__alt_data_end+0xfc010a60>
 8010dcc:	317fe436 	bltu	r6,r5,8010d60 <__alt_data_end+0xfc010d60>
 8010dd0:	0007883a 	mov	r3,zero
 8010dd4:	003f5106 	br	8010b1c <__alt_data_end+0xfc010b1c>
 8010dd8:	1c07883a 	add	r3,r3,r16
 8010ddc:	993fffc4 	addi	r4,r19,-1
 8010de0:	1c000a2e 	bgeu	r3,r16,8010e0c <__divdf3+0x760>
 8010de4:	2027883a 	mov	r19,r4
 8010de8:	19ff971e 	bne	r3,r7,8010c48 <__alt_data_end+0xfc010c48>
 8010dec:	a8bf961e 	bne	r21,r2,8010c48 <__alt_data_end+0xfc010c48>
 8010df0:	003f9606 	br	8010c4c <__alt_data_end+0xfc010c4c>
 8010df4:	04ffffc4 	movi	r19,-1
 8010df8:	003f9406 	br	8010c4c <__alt_data_end+0xfc010c4c>
 8010dfc:	100d883a 	mov	r6,r2
 8010e00:	003f6106 	br	8010b88 <__alt_data_end+0xfc010b88>
 8010e04:	1013883a 	mov	r9,r2
 8010e08:	003f7906 	br	8010bf0 <__alt_data_end+0xfc010bf0>
 8010e0c:	19c02636 	bltu	r3,r7,8010ea8 <__divdf3+0x7fc>
 8010e10:	38c04d26 	beq	r7,r3,8010f48 <__divdf3+0x89c>
 8010e14:	2027883a 	mov	r19,r4
 8010e18:	003f8b06 	br	8010c48 <__alt_data_end+0xfc010c48>
 8010e1c:	e025883a 	mov	r18,fp
 8010e20:	003f8a06 	br	8010c4c <__alt_data_end+0xfc010c4c>
 8010e24:	008007c4 	movi	r2,31
 8010e28:	14002a16 	blt	r2,r16,8010ed4 <__divdf3+0x828>
 8010e2c:	a5010784 	addi	r20,r20,1054
 8010e30:	8d04983a 	sll	r2,r17,r20
 8010e34:	9c06d83a 	srl	r3,r19,r16
 8010e38:	9d28983a 	sll	r20,r19,r20
 8010e3c:	8c20d83a 	srl	r16,r17,r16
 8010e40:	1886b03a 	or	r3,r3,r2
 8010e44:	a004c03a 	cmpne	r2,r20,zero
 8010e48:	1884b03a 	or	r2,r3,r2
 8010e4c:	10c001cc 	andi	r3,r2,7
 8010e50:	18000726 	beq	r3,zero,8010e70 <__divdf3+0x7c4>
 8010e54:	110003cc 	andi	r4,r2,15
 8010e58:	00c00104 	movi	r3,4
 8010e5c:	20c00426 	beq	r4,r3,8010e70 <__divdf3+0x7c4>
 8010e60:	10c00104 	addi	r3,r2,4
 8010e64:	1885803a 	cmpltu	r2,r3,r2
 8010e68:	80a1883a 	add	r16,r16,r2
 8010e6c:	1805883a 	mov	r2,r3
 8010e70:	80c0202c 	andhi	r3,r16,128
 8010e74:	18002d26 	beq	r3,zero,8010f2c <__divdf3+0x880>
 8010e78:	9180004c 	andi	r6,r18,1
 8010e7c:	01000044 	movi	r4,1
 8010e80:	000b883a 	mov	r5,zero
 8010e84:	0027883a 	mov	r19,zero
 8010e88:	003e6606 	br	8010824 <__alt_data_end+0xfc010824>
 8010e8c:	354d883a 	add	r6,r6,r21
 8010e90:	356d803a 	cmpltu	r22,r6,r21
 8010e94:	b42d883a 	add	r22,r22,r16
 8010e98:	b12d883a 	add	r22,r22,r4
 8010e9c:	8c7fff84 	addi	r17,r17,-2
 8010ea0:	b0c7c83a 	sub	r3,r22,r3
 8010ea4:	003f1d06 	br	8010b1c <__alt_data_end+0xfc010b1c>
 8010ea8:	ad4b883a 	add	r5,r21,r21
 8010eac:	2d6b803a 	cmpltu	r21,r5,r21
 8010eb0:	ac2b883a 	add	r21,r21,r16
 8010eb4:	1d47883a 	add	r3,r3,r21
 8010eb8:	993fff84 	addi	r4,r19,-2
 8010ebc:	282b883a 	mov	r21,r5
 8010ec0:	003fc806 	br	8010de4 <__alt_data_end+0xfc010de4>
 8010ec4:	103fc41e 	bne	r2,zero,8010dd8 <__alt_data_end+0xfc010dd8>
 8010ec8:	002b883a 	mov	r21,zero
 8010ecc:	a8bf5e1e 	bne	r21,r2,8010c48 <__alt_data_end+0xfc010c48>
 8010ed0:	003f5e06 	br	8010c4c <__alt_data_end+0xfc010c4c>
 8010ed4:	00bef884 	movi	r2,-1054
 8010ed8:	1505c83a 	sub	r2,r2,r20
 8010edc:	00c00804 	movi	r3,32
 8010ee0:	8884d83a 	srl	r2,r17,r2
 8010ee4:	80c01c26 	beq	r16,r3,8010f58 <__divdf3+0x8ac>
 8010ee8:	a0c10f84 	addi	r3,r20,1086
 8010eec:	88c6983a 	sll	r3,r17,r3
 8010ef0:	1cc6b03a 	or	r3,r3,r19
 8010ef4:	1806c03a 	cmpne	r3,r3,zero
 8010ef8:	1884b03a 	or	r2,r3,r2
 8010efc:	140001cc 	andi	r16,r2,7
 8010f00:	8000061e 	bne	r16,zero,8010f1c <__divdf3+0x870>
 8010f04:	000b883a 	mov	r5,zero
 8010f08:	1004d0fa 	srli	r2,r2,3
 8010f0c:	9180004c 	andi	r6,r18,1
 8010f10:	0009883a 	mov	r4,zero
 8010f14:	1426b03a 	or	r19,r2,r16
 8010f18:	003e4206 	br	8010824 <__alt_data_end+0xfc010824>
 8010f1c:	110003cc 	andi	r4,r2,15
 8010f20:	00c00104 	movi	r3,4
 8010f24:	0021883a 	mov	r16,zero
 8010f28:	20ffcd1e 	bne	r4,r3,8010e60 <__alt_data_end+0xfc010e60>
 8010f2c:	800a927a 	slli	r5,r16,9
 8010f30:	8020977a 	slli	r16,r16,29
 8010f34:	280ad33a 	srli	r5,r5,12
 8010f38:	003ff306 	br	8010f08 <__alt_data_end+0xfc010f08>
 8010f3c:	317fd336 	bltu	r6,r5,8010e8c <__alt_data_end+0xfc010e8c>
 8010f40:	1023883a 	mov	r17,r2
 8010f44:	003fa206 	br	8010dd0 <__alt_data_end+0xfc010dd0>
 8010f48:	a8bfd736 	bltu	r21,r2,8010ea8 <__alt_data_end+0xfc010ea8>
 8010f4c:	2027883a 	mov	r19,r4
 8010f50:	a8bf3d1e 	bne	r21,r2,8010c48 <__alt_data_end+0xfc010c48>
 8010f54:	003f3d06 	br	8010c4c <__alt_data_end+0xfc010c4c>
 8010f58:	0007883a 	mov	r3,zero
 8010f5c:	003fe406 	br	8010ef0 <__alt_data_end+0xfc010ef0>
 8010f60:	00800434 	movhi	r2,16
 8010f64:	89400234 	orhi	r5,r17,8
 8010f68:	10bfffc4 	addi	r2,r2,-1
 8010f6c:	e00d883a 	mov	r6,fp
 8010f70:	288a703a 	and	r5,r5,r2
 8010f74:	003e8506 	br	801098c <__alt_data_end+0xfc01098c>

08010f78 <__eqdf2>:
 8010f78:	2804d53a 	srli	r2,r5,20
 8010f7c:	3806d53a 	srli	r3,r7,20
 8010f80:	02000434 	movhi	r8,16
 8010f84:	423fffc4 	addi	r8,r8,-1
 8010f88:	1081ffcc 	andi	r2,r2,2047
 8010f8c:	0241ffc4 	movi	r9,2047
 8010f90:	2a14703a 	and	r10,r5,r8
 8010f94:	18c1ffcc 	andi	r3,r3,2047
 8010f98:	3a10703a 	and	r8,r7,r8
 8010f9c:	280ad7fa 	srli	r5,r5,31
 8010fa0:	380ed7fa 	srli	r7,r7,31
 8010fa4:	12400f26 	beq	r2,r9,8010fe4 <__eqdf2+0x6c>
 8010fa8:	0241ffc4 	movi	r9,2047
 8010fac:	1a400326 	beq	r3,r9,8010fbc <__eqdf2+0x44>
 8010fb0:	10c00526 	beq	r2,r3,8010fc8 <__eqdf2+0x50>
 8010fb4:	00800044 	movi	r2,1
 8010fb8:	f800283a 	ret
 8010fbc:	4192b03a 	or	r9,r8,r6
 8010fc0:	483ffc1e 	bne	r9,zero,8010fb4 <__alt_data_end+0xfc010fb4>
 8010fc4:	10fffb1e 	bne	r2,r3,8010fb4 <__alt_data_end+0xfc010fb4>
 8010fc8:	523ffa1e 	bne	r10,r8,8010fb4 <__alt_data_end+0xfc010fb4>
 8010fcc:	21bff91e 	bne	r4,r6,8010fb4 <__alt_data_end+0xfc010fb4>
 8010fd0:	29c00826 	beq	r5,r7,8010ff4 <__eqdf2+0x7c>
 8010fd4:	103ff71e 	bne	r2,zero,8010fb4 <__alt_data_end+0xfc010fb4>
 8010fd8:	5104b03a 	or	r2,r10,r4
 8010fdc:	1004c03a 	cmpne	r2,r2,zero
 8010fe0:	f800283a 	ret
 8010fe4:	5112b03a 	or	r9,r10,r4
 8010fe8:	483fef26 	beq	r9,zero,8010fa8 <__alt_data_end+0xfc010fa8>
 8010fec:	00800044 	movi	r2,1
 8010ff0:	f800283a 	ret
 8010ff4:	0005883a 	mov	r2,zero
 8010ff8:	f800283a 	ret

08010ffc <__muldf3>:
 8010ffc:	defff204 	addi	sp,sp,-56
 8011000:	2804d53a 	srli	r2,r5,20
 8011004:	dd800a15 	stw	r22,40(sp)
 8011008:	282cd7fa 	srli	r22,r5,31
 801100c:	dc000415 	stw	r16,16(sp)
 8011010:	04000434 	movhi	r16,16
 8011014:	df000c15 	stw	fp,48(sp)
 8011018:	dd000815 	stw	r20,32(sp)
 801101c:	dcc00715 	stw	r19,28(sp)
 8011020:	dc800615 	stw	r18,24(sp)
 8011024:	dc400515 	stw	r17,20(sp)
 8011028:	843fffc4 	addi	r16,r16,-1
 801102c:	dfc00d15 	stw	ra,52(sp)
 8011030:	ddc00b15 	stw	r23,44(sp)
 8011034:	dd400915 	stw	r21,36(sp)
 8011038:	1501ffcc 	andi	r20,r2,2047
 801103c:	2023883a 	mov	r17,r4
 8011040:	2025883a 	mov	r18,r4
 8011044:	2c20703a 	and	r16,r5,r16
 8011048:	b027883a 	mov	r19,r22
 801104c:	b7003fcc 	andi	fp,r22,255
 8011050:	a0005926 	beq	r20,zero,80111b8 <__muldf3+0x1bc>
 8011054:	0081ffc4 	movi	r2,2047
 8011058:	a0803426 	beq	r20,r2,801112c <__muldf3+0x130>
 801105c:	84000434 	orhi	r16,r16,16
 8011060:	2004d77a 	srli	r2,r4,29
 8011064:	802090fa 	slli	r16,r16,3
 8011068:	202490fa 	slli	r18,r4,3
 801106c:	a53f0044 	addi	r20,r20,-1023
 8011070:	80a0b03a 	or	r16,r16,r2
 8011074:	002b883a 	mov	r21,zero
 8011078:	0015883a 	mov	r10,zero
 801107c:	3812d53a 	srli	r9,r7,20
 8011080:	3806d7fa 	srli	r3,r7,31
 8011084:	02000434 	movhi	r8,16
 8011088:	423fffc4 	addi	r8,r8,-1
 801108c:	4941ffcc 	andi	r5,r9,2047
 8011090:	302f883a 	mov	r23,r6
 8011094:	3a22703a 	and	r17,r7,r8
 8011098:	1ac03fcc 	andi	r11,r3,255
 801109c:	28006226 	beq	r5,zero,8011228 <__muldf3+0x22c>
 80110a0:	0081ffc4 	movi	r2,2047
 80110a4:	28805a26 	beq	r5,r2,8011210 <__muldf3+0x214>
 80110a8:	8a000434 	orhi	r8,r17,16
 80110ac:	3004d77a 	srli	r2,r6,29
 80110b0:	401090fa 	slli	r8,r8,3
 80110b4:	302e90fa 	slli	r23,r6,3
 80110b8:	297f0044 	addi	r5,r5,-1023
 80110bc:	40a2b03a 	or	r17,r8,r2
 80110c0:	0013883a 	mov	r9,zero
 80110c4:	4d4cb03a 	or	r6,r9,r21
 80110c8:	300c90ba 	slli	r6,r6,2
 80110cc:	02020074 	movhi	r8,2049
 80110d0:	42043b04 	addi	r8,r8,4332
 80110d4:	320d883a 	add	r6,r6,r8
 80110d8:	31800017 	ldw	r6,0(r6)
 80110dc:	a14b883a 	add	r5,r20,r5
 80110e0:	1dacf03a 	xor	r22,r3,r22
 80110e4:	2b000044 	addi	r12,r5,1
 80110e8:	3000683a 	jmp	r6
 80110ec:	08011328 	cmpgeui	zero,at,1100
 80110f0:	08011314 	ori	zero,at,1100
 80110f4:	08011314 	ori	zero,at,1100
 80110f8:	08011300 	call	801130 <__alt_mem_sdram-0x77feed0>
 80110fc:	08011148 	cmpgei	zero,at,1093
 8011100:	08011148 	cmpgei	zero,at,1093
 8011104:	080112e8 	cmpgeui	zero,at,1099
 8011108:	08011300 	call	801130 <__alt_mem_sdram-0x77feed0>
 801110c:	08011148 	cmpgei	zero,at,1093
 8011110:	080112e8 	cmpgeui	zero,at,1099
 8011114:	08011148 	cmpgei	zero,at,1093
 8011118:	08011300 	call	801130 <__alt_mem_sdram-0x77feed0>
 801111c:	0801114c 	andi	zero,at,1093
 8011120:	0801114c 	andi	zero,at,1093
 8011124:	0801114c 	andi	zero,at,1093
 8011128:	08011524 	muli	zero,at,1108
 801112c:	8104b03a 	or	r2,r16,r4
 8011130:	10006a1e 	bne	r2,zero,80112dc <__muldf3+0x2e0>
 8011134:	05400204 	movi	r21,8
 8011138:	0021883a 	mov	r16,zero
 801113c:	0025883a 	mov	r18,zero
 8011140:	02800084 	movi	r10,2
 8011144:	003fcd06 	br	801107c <__alt_data_end+0xfc01107c>
 8011148:	b039883a 	mov	fp,r22
 801114c:	00800084 	movi	r2,2
 8011150:	50804e1e 	bne	r10,r2,801128c <__muldf3+0x290>
 8011154:	e4c0004c 	andi	r19,fp,1
 8011158:	0101ffc4 	movi	r4,2047
 801115c:	0021883a 	mov	r16,zero
 8011160:	0025883a 	mov	r18,zero
 8011164:	2008953a 	slli	r4,r4,20
 8011168:	98c03fcc 	andi	r3,r19,255
 801116c:	01400434 	movhi	r5,16
 8011170:	297fffc4 	addi	r5,r5,-1
 8011174:	180697fa 	slli	r3,r3,31
 8011178:	8160703a 	and	r16,r16,r5
 801117c:	8120b03a 	or	r16,r16,r4
 8011180:	80c6b03a 	or	r3,r16,r3
 8011184:	9005883a 	mov	r2,r18
 8011188:	dfc00d17 	ldw	ra,52(sp)
 801118c:	df000c17 	ldw	fp,48(sp)
 8011190:	ddc00b17 	ldw	r23,44(sp)
 8011194:	dd800a17 	ldw	r22,40(sp)
 8011198:	dd400917 	ldw	r21,36(sp)
 801119c:	dd000817 	ldw	r20,32(sp)
 80111a0:	dcc00717 	ldw	r19,28(sp)
 80111a4:	dc800617 	ldw	r18,24(sp)
 80111a8:	dc400517 	ldw	r17,20(sp)
 80111ac:	dc000417 	ldw	r16,16(sp)
 80111b0:	dec00e04 	addi	sp,sp,56
 80111b4:	f800283a 	ret
 80111b8:	8104b03a 	or	r2,r16,r4
 80111bc:	10004226 	beq	r2,zero,80112c8 <__muldf3+0x2cc>
 80111c0:	8000f926 	beq	r16,zero,80115a8 <__muldf3+0x5ac>
 80111c4:	8009883a 	mov	r4,r16
 80111c8:	d9800315 	stw	r6,12(sp)
 80111cc:	d9c00015 	stw	r7,0(sp)
 80111d0:	80034dc0 	call	80034dc <__clzsi2>
 80111d4:	d9800317 	ldw	r6,12(sp)
 80111d8:	d9c00017 	ldw	r7,0(sp)
 80111dc:	1007883a 	mov	r3,r2
 80111e0:	01000a04 	movi	r4,40
 80111e4:	18bffe04 	addi	r2,r3,-8
 80111e8:	20c9c83a 	sub	r4,r4,r3
 80111ec:	80a0983a 	sll	r16,r16,r2
 80111f0:	8908d83a 	srl	r4,r17,r4
 80111f4:	88a4983a 	sll	r18,r17,r2
 80111f8:	2420b03a 	or	r16,r4,r16
 80111fc:	017f0344 	movi	r5,-1011
 8011200:	28e9c83a 	sub	r20,r5,r3
 8011204:	002b883a 	mov	r21,zero
 8011208:	0015883a 	mov	r10,zero
 801120c:	003f9b06 	br	801107c <__alt_data_end+0xfc01107c>
 8011210:	8984b03a 	or	r2,r17,r6
 8011214:	10002a1e 	bne	r2,zero,80112c0 <__muldf3+0x2c4>
 8011218:	0023883a 	mov	r17,zero
 801121c:	002f883a 	mov	r23,zero
 8011220:	02400084 	movi	r9,2
 8011224:	003fa706 	br	80110c4 <__alt_data_end+0xfc0110c4>
 8011228:	8984b03a 	or	r2,r17,r6
 801122c:	10002026 	beq	r2,zero,80112b0 <__muldf3+0x2b4>
 8011230:	8800cc26 	beq	r17,zero,8011564 <__muldf3+0x568>
 8011234:	8809883a 	mov	r4,r17
 8011238:	d8c00215 	stw	r3,8(sp)
 801123c:	d9800315 	stw	r6,12(sp)
 8011240:	da800015 	stw	r10,0(sp)
 8011244:	dac00115 	stw	r11,4(sp)
 8011248:	80034dc0 	call	80034dc <__clzsi2>
 801124c:	d8c00217 	ldw	r3,8(sp)
 8011250:	d9800317 	ldw	r6,12(sp)
 8011254:	da800017 	ldw	r10,0(sp)
 8011258:	dac00117 	ldw	r11,4(sp)
 801125c:	1009883a 	mov	r4,r2
 8011260:	01400a04 	movi	r5,40
 8011264:	25fffe04 	addi	r23,r4,-8
 8011268:	290bc83a 	sub	r5,r5,r4
 801126c:	8dd0983a 	sll	r8,r17,r23
 8011270:	314ad83a 	srl	r5,r6,r5
 8011274:	35ee983a 	sll	r23,r6,r23
 8011278:	2a22b03a 	or	r17,r5,r8
 801127c:	017f0344 	movi	r5,-1011
 8011280:	290bc83a 	sub	r5,r5,r4
 8011284:	0013883a 	mov	r9,zero
 8011288:	003f8e06 	br	80110c4 <__alt_data_end+0xfc0110c4>
 801128c:	008000c4 	movi	r2,3
 8011290:	50811d26 	beq	r10,r2,8011708 <__muldf3+0x70c>
 8011294:	00800044 	movi	r2,1
 8011298:	5080e01e 	bne	r10,r2,801161c <__muldf3+0x620>
 801129c:	e0a6703a 	and	r19,fp,r2
 80112a0:	0009883a 	mov	r4,zero
 80112a4:	0021883a 	mov	r16,zero
 80112a8:	0025883a 	mov	r18,zero
 80112ac:	003fad06 	br	8011164 <__alt_data_end+0xfc011164>
 80112b0:	0023883a 	mov	r17,zero
 80112b4:	002f883a 	mov	r23,zero
 80112b8:	02400044 	movi	r9,1
 80112bc:	003f8106 	br	80110c4 <__alt_data_end+0xfc0110c4>
 80112c0:	024000c4 	movi	r9,3
 80112c4:	003f7f06 	br	80110c4 <__alt_data_end+0xfc0110c4>
 80112c8:	05400104 	movi	r21,4
 80112cc:	0021883a 	mov	r16,zero
 80112d0:	0025883a 	mov	r18,zero
 80112d4:	02800044 	movi	r10,1
 80112d8:	003f6806 	br	801107c <__alt_data_end+0xfc01107c>
 80112dc:	05400304 	movi	r21,12
 80112e0:	028000c4 	movi	r10,3
 80112e4:	003f6506 	br	801107c <__alt_data_end+0xfc01107c>
 80112e8:	04000434 	movhi	r16,16
 80112ec:	0027883a 	mov	r19,zero
 80112f0:	843fffc4 	addi	r16,r16,-1
 80112f4:	04bfffc4 	movi	r18,-1
 80112f8:	0101ffc4 	movi	r4,2047
 80112fc:	003f9906 	br	8011164 <__alt_data_end+0xfc011164>
 8011300:	8821883a 	mov	r16,r17
 8011304:	b825883a 	mov	r18,r23
 8011308:	5839883a 	mov	fp,r11
 801130c:	4815883a 	mov	r10,r9
 8011310:	003f8e06 	br	801114c <__alt_data_end+0xfc01114c>
 8011314:	8821883a 	mov	r16,r17
 8011318:	b825883a 	mov	r18,r23
 801131c:	b039883a 	mov	fp,r22
 8011320:	4815883a 	mov	r10,r9
 8011324:	003f8906 	br	801114c <__alt_data_end+0xfc01114c>
 8011328:	b80cd43a 	srli	r6,r23,16
 801132c:	9006d43a 	srli	r3,r18,16
 8011330:	90bfffcc 	andi	r2,r18,65535
 8011334:	bdffffcc 	andi	r23,r23,65535
 8011338:	b891383a 	mul	r8,r23,r2
 801133c:	b8c9383a 	mul	r4,r23,r3
 8011340:	309b383a 	mul	r13,r6,r2
 8011344:	400ed43a 	srli	r7,r8,16
 8011348:	30df383a 	mul	r15,r6,r3
 801134c:	235b883a 	add	r13,r4,r13
 8011350:	69db883a 	add	r13,r13,r7
 8011354:	6900022e 	bgeu	r13,r4,8011360 <__muldf3+0x364>
 8011358:	01000074 	movhi	r4,1
 801135c:	791f883a 	add	r15,r15,r4
 8011360:	8828d43a 	srli	r20,r17,16
 8011364:	8c7fffcc 	andi	r17,r17,65535
 8011368:	888f383a 	mul	r7,r17,r2
 801136c:	88d3383a 	mul	r9,r17,r3
 8011370:	a0a5383a 	mul	r18,r20,r2
 8011374:	3816d43a 	srli	r11,r7,16
 8011378:	6814943a 	slli	r10,r13,16
 801137c:	4ca5883a 	add	r18,r9,r18
 8011380:	423fffcc 	andi	r8,r8,65535
 8011384:	92e5883a 	add	r18,r18,r11
 8011388:	6808d43a 	srli	r4,r13,16
 801138c:	5215883a 	add	r10,r10,r8
 8011390:	a0c7383a 	mul	r3,r20,r3
 8011394:	9240022e 	bgeu	r18,r9,80113a0 <__muldf3+0x3a4>
 8011398:	00800074 	movhi	r2,1
 801139c:	1887883a 	add	r3,r3,r2
 80113a0:	802ad43a 	srli	r21,r16,16
 80113a4:	80bfffcc 	andi	r2,r16,65535
 80113a8:	b893383a 	mul	r9,r23,r2
 80113ac:	3091383a 	mul	r8,r6,r2
 80113b0:	bd6f383a 	mul	r23,r23,r21
 80113b4:	9026943a 	slli	r19,r18,16
 80113b8:	481ad43a 	srli	r13,r9,16
 80113bc:	9024d43a 	srli	r18,r18,16
 80113c0:	39ffffcc 	andi	r7,r7,65535
 80113c4:	ba11883a 	add	r8,r23,r8
 80113c8:	99e7883a 	add	r19,r19,r7
 80113cc:	4351883a 	add	r8,r8,r13
 80113d0:	1c97883a 	add	r11,r3,r18
 80113d4:	354d383a 	mul	r6,r6,r21
 80113d8:	9925883a 	add	r18,r19,r4
 80113dc:	45c0022e 	bgeu	r8,r23,80113e8 <__muldf3+0x3ec>
 80113e0:	00c00074 	movhi	r3,1
 80113e4:	30cd883a 	add	r6,r6,r3
 80113e8:	8889383a 	mul	r4,r17,r2
 80113ec:	8d63383a 	mul	r17,r17,r21
 80113f0:	a085383a 	mul	r2,r20,r2
 80113f4:	200ed43a 	srli	r7,r4,16
 80113f8:	401cd43a 	srli	r14,r8,16
 80113fc:	401a943a 	slli	r13,r8,16
 8011400:	8885883a 	add	r2,r17,r2
 8011404:	4a3fffcc 	andi	r8,r9,65535
 8011408:	11c5883a 	add	r2,r2,r7
 801140c:	339d883a 	add	r14,r6,r14
 8011410:	6a11883a 	add	r8,r13,r8
 8011414:	a561383a 	mul	r16,r20,r21
 8011418:	1440022e 	bgeu	r2,r17,8011424 <__muldf3+0x428>
 801141c:	00c00074 	movhi	r3,1
 8011420:	80e1883a 	add	r16,r16,r3
 8011424:	1006943a 	slli	r3,r2,16
 8011428:	213fffcc 	andi	r4,r4,65535
 801142c:	93db883a 	add	r13,r18,r15
 8011430:	1909883a 	add	r4,r3,r4
 8011434:	22c7883a 	add	r3,r4,r11
 8011438:	6cd3803a 	cmpltu	r9,r13,r19
 801143c:	6a09883a 	add	r4,r13,r8
 8011440:	1a5b883a 	add	r13,r3,r9
 8011444:	2211803a 	cmpltu	r8,r4,r8
 8011448:	734d883a 	add	r6,r14,r13
 801144c:	100ed43a 	srli	r7,r2,16
 8011450:	6a53803a 	cmpltu	r9,r13,r9
 8011454:	3205883a 	add	r2,r6,r8
 8011458:	1ac7803a 	cmpltu	r3,r3,r11
 801145c:	1211803a 	cmpltu	r8,r2,r8
 8011460:	48c6b03a 	or	r3,r9,r3
 8011464:	338d803a 	cmpltu	r6,r6,r14
 8011468:	19c7883a 	add	r3,r3,r7
 801146c:	418cb03a 	or	r6,r8,r6
 8011470:	1987883a 	add	r3,r3,r6
 8011474:	2024927a 	slli	r18,r4,9
 8011478:	1c07883a 	add	r3,r3,r16
 801147c:	1806927a 	slli	r3,r3,9
 8011480:	1020d5fa 	srli	r16,r2,23
 8011484:	2008d5fa 	srli	r4,r4,23
 8011488:	9294b03a 	or	r10,r18,r10
 801148c:	1004927a 	slli	r2,r2,9
 8011490:	5024c03a 	cmpne	r18,r10,zero
 8011494:	1c20b03a 	or	r16,r3,r16
 8011498:	9108b03a 	or	r4,r18,r4
 801149c:	80c0402c 	andhi	r3,r16,256
 80114a0:	20a4b03a 	or	r18,r4,r2
 80114a4:	18000726 	beq	r3,zero,80114c4 <__muldf3+0x4c8>
 80114a8:	9006d07a 	srli	r3,r18,1
 80114ac:	800897fa 	slli	r4,r16,31
 80114b0:	9080004c 	andi	r2,r18,1
 80114b4:	8020d07a 	srli	r16,r16,1
 80114b8:	10c4b03a 	or	r2,r2,r3
 80114bc:	1124b03a 	or	r18,r2,r4
 80114c0:	600b883a 	mov	r5,r12
 80114c4:	2900ffc4 	addi	r4,r5,1023
 80114c8:	01004b0e 	bge	zero,r4,80115f8 <__muldf3+0x5fc>
 80114cc:	908001cc 	andi	r2,r18,7
 80114d0:	10000726 	beq	r2,zero,80114f0 <__muldf3+0x4f4>
 80114d4:	90c003cc 	andi	r3,r18,15
 80114d8:	00800104 	movi	r2,4
 80114dc:	18800426 	beq	r3,r2,80114f0 <__muldf3+0x4f4>
 80114e0:	9087883a 	add	r3,r18,r2
 80114e4:	1c85803a 	cmpltu	r2,r3,r18
 80114e8:	80a1883a 	add	r16,r16,r2
 80114ec:	1825883a 	mov	r18,r3
 80114f0:	8080402c 	andhi	r2,r16,256
 80114f4:	10000426 	beq	r2,zero,8011508 <__muldf3+0x50c>
 80114f8:	00bfc034 	movhi	r2,65280
 80114fc:	10bfffc4 	addi	r2,r2,-1
 8011500:	29010004 	addi	r4,r5,1024
 8011504:	80a0703a 	and	r16,r16,r2
 8011508:	0081ff84 	movi	r2,2046
 801150c:	1100320e 	bge	r2,r4,80115d8 <__muldf3+0x5dc>
 8011510:	b4c0004c 	andi	r19,r22,1
 8011514:	0101ffc4 	movi	r4,2047
 8011518:	0021883a 	mov	r16,zero
 801151c:	0025883a 	mov	r18,zero
 8011520:	003f1006 	br	8011164 <__alt_data_end+0xfc011164>
 8011524:	8080022c 	andhi	r2,r16,8
 8011528:	10000926 	beq	r2,zero,8011550 <__muldf3+0x554>
 801152c:	8880022c 	andhi	r2,r17,8
 8011530:	1000071e 	bne	r2,zero,8011550 <__muldf3+0x554>
 8011534:	00800434 	movhi	r2,16
 8011538:	8c000234 	orhi	r16,r17,8
 801153c:	10bfffc4 	addi	r2,r2,-1
 8011540:	1827883a 	mov	r19,r3
 8011544:	80a0703a 	and	r16,r16,r2
 8011548:	b825883a 	mov	r18,r23
 801154c:	003f6a06 	br	80112f8 <__alt_data_end+0xfc0112f8>
 8011550:	00800434 	movhi	r2,16
 8011554:	84000234 	orhi	r16,r16,8
 8011558:	10bfffc4 	addi	r2,r2,-1
 801155c:	80a0703a 	and	r16,r16,r2
 8011560:	003f6506 	br	80112f8 <__alt_data_end+0xfc0112f8>
 8011564:	3009883a 	mov	r4,r6
 8011568:	d8c00215 	stw	r3,8(sp)
 801156c:	d9800315 	stw	r6,12(sp)
 8011570:	da800015 	stw	r10,0(sp)
 8011574:	dac00115 	stw	r11,4(sp)
 8011578:	80034dc0 	call	80034dc <__clzsi2>
 801157c:	11000804 	addi	r4,r2,32
 8011580:	014009c4 	movi	r5,39
 8011584:	d8c00217 	ldw	r3,8(sp)
 8011588:	d9800317 	ldw	r6,12(sp)
 801158c:	da800017 	ldw	r10,0(sp)
 8011590:	dac00117 	ldw	r11,4(sp)
 8011594:	293f320e 	bge	r5,r4,8011260 <__alt_data_end+0xfc011260>
 8011598:	10bffe04 	addi	r2,r2,-8
 801159c:	b8a2983a 	sll	r17,r23,r2
 80115a0:	002f883a 	mov	r23,zero
 80115a4:	003f3506 	br	801127c <__alt_data_end+0xfc01127c>
 80115a8:	d9800315 	stw	r6,12(sp)
 80115ac:	d9c00015 	stw	r7,0(sp)
 80115b0:	80034dc0 	call	80034dc <__clzsi2>
 80115b4:	10c00804 	addi	r3,r2,32
 80115b8:	010009c4 	movi	r4,39
 80115bc:	d9800317 	ldw	r6,12(sp)
 80115c0:	d9c00017 	ldw	r7,0(sp)
 80115c4:	20ff060e 	bge	r4,r3,80111e0 <__alt_data_end+0xfc0111e0>
 80115c8:	10bffe04 	addi	r2,r2,-8
 80115cc:	88a0983a 	sll	r16,r17,r2
 80115d0:	0025883a 	mov	r18,zero
 80115d4:	003f0906 	br	80111fc <__alt_data_end+0xfc0111fc>
 80115d8:	9004d0fa 	srli	r2,r18,3
 80115dc:	8024977a 	slli	r18,r16,29
 80115e0:	8020927a 	slli	r16,r16,9
 80115e4:	2101ffcc 	andi	r4,r4,2047
 80115e8:	90a4b03a 	or	r18,r18,r2
 80115ec:	8020d33a 	srli	r16,r16,12
 80115f0:	b4c0004c 	andi	r19,r22,1
 80115f4:	003edb06 	br	8011164 <__alt_data_end+0xfc011164>
 80115f8:	00ff0084 	movi	r3,-1022
 80115fc:	1947c83a 	sub	r3,r3,r5
 8011600:	00800e04 	movi	r2,56
 8011604:	10c0080e 	bge	r2,r3,8011628 <__muldf3+0x62c>
 8011608:	b4c0004c 	andi	r19,r22,1
 801160c:	0009883a 	mov	r4,zero
 8011610:	0021883a 	mov	r16,zero
 8011614:	0025883a 	mov	r18,zero
 8011618:	003ed206 	br	8011164 <__alt_data_end+0xfc011164>
 801161c:	600b883a 	mov	r5,r12
 8011620:	e02d883a 	mov	r22,fp
 8011624:	003fa706 	br	80114c4 <__alt_data_end+0xfc0114c4>
 8011628:	008007c4 	movi	r2,31
 801162c:	10c01816 	blt	r2,r3,8011690 <__muldf3+0x694>
 8011630:	29410784 	addi	r5,r5,1054
 8011634:	8144983a 	sll	r2,r16,r5
 8011638:	90c8d83a 	srl	r4,r18,r3
 801163c:	914a983a 	sll	r5,r18,r5
 8011640:	80c6d83a 	srl	r3,r16,r3
 8011644:	2088b03a 	or	r4,r4,r2
 8011648:	2804c03a 	cmpne	r2,r5,zero
 801164c:	2084b03a 	or	r2,r4,r2
 8011650:	110001cc 	andi	r4,r2,7
 8011654:	20000726 	beq	r4,zero,8011674 <__muldf3+0x678>
 8011658:	114003cc 	andi	r5,r2,15
 801165c:	01000104 	movi	r4,4
 8011660:	29000426 	beq	r5,r4,8011674 <__muldf3+0x678>
 8011664:	11000104 	addi	r4,r2,4
 8011668:	2085803a 	cmpltu	r2,r4,r2
 801166c:	1887883a 	add	r3,r3,r2
 8011670:	2005883a 	mov	r2,r4
 8011674:	1900202c 	andhi	r4,r3,128
 8011678:	20001826 	beq	r4,zero,80116dc <__muldf3+0x6e0>
 801167c:	b4c0004c 	andi	r19,r22,1
 8011680:	01000044 	movi	r4,1
 8011684:	0021883a 	mov	r16,zero
 8011688:	0025883a 	mov	r18,zero
 801168c:	003eb506 	br	8011164 <__alt_data_end+0xfc011164>
 8011690:	00bef884 	movi	r2,-1054
 8011694:	1145c83a 	sub	r2,r2,r5
 8011698:	8088d83a 	srl	r4,r16,r2
 801169c:	00800804 	movi	r2,32
 80116a0:	18801726 	beq	r3,r2,8011700 <__muldf3+0x704>
 80116a4:	28810f84 	addi	r2,r5,1086
 80116a8:	8084983a 	sll	r2,r16,r2
 80116ac:	1484b03a 	or	r2,r2,r18
 80116b0:	1004c03a 	cmpne	r2,r2,zero
 80116b4:	1104b03a 	or	r2,r2,r4
 80116b8:	10c001cc 	andi	r3,r2,7
 80116bc:	18000b1e 	bne	r3,zero,80116ec <__muldf3+0x6f0>
 80116c0:	0021883a 	mov	r16,zero
 80116c4:	1004d0fa 	srli	r2,r2,3
 80116c8:	b4c0004c 	andi	r19,r22,1
 80116cc:	0009883a 	mov	r4,zero
 80116d0:	10e4b03a 	or	r18,r2,r3
 80116d4:	003ea306 	br	8011164 <__alt_data_end+0xfc011164>
 80116d8:	0007883a 	mov	r3,zero
 80116dc:	1820927a 	slli	r16,r3,9
 80116e0:	1806977a 	slli	r3,r3,29
 80116e4:	8020d33a 	srli	r16,r16,12
 80116e8:	003ff606 	br	80116c4 <__alt_data_end+0xfc0116c4>
 80116ec:	110003cc 	andi	r4,r2,15
 80116f0:	00c00104 	movi	r3,4
 80116f4:	20fff826 	beq	r4,r3,80116d8 <__alt_data_end+0xfc0116d8>
 80116f8:	0007883a 	mov	r3,zero
 80116fc:	003fd906 	br	8011664 <__alt_data_end+0xfc011664>
 8011700:	0005883a 	mov	r2,zero
 8011704:	003fe906 	br	80116ac <__alt_data_end+0xfc0116ac>
 8011708:	00800434 	movhi	r2,16
 801170c:	84000234 	orhi	r16,r16,8
 8011710:	10bfffc4 	addi	r2,r2,-1
 8011714:	e4c0004c 	andi	r19,fp,1
 8011718:	80a0703a 	and	r16,r16,r2
 801171c:	003ef606 	br	80112f8 <__alt_data_end+0xfc0112f8>

08011720 <__subdf3>:
 8011720:	00c00434 	movhi	r3,16
 8011724:	18ffffc4 	addi	r3,r3,-1
 8011728:	defffb04 	addi	sp,sp,-20
 801172c:	28d2703a 	and	r9,r5,r3
 8011730:	3814d53a 	srli	r10,r7,20
 8011734:	38c6703a 	and	r3,r7,r3
 8011738:	3004d77a 	srli	r2,r6,29
 801173c:	dc800215 	stw	r18,8(sp)
 8011740:	dc000015 	stw	r16,0(sp)
 8011744:	2824d7fa 	srli	r18,r5,31
 8011748:	2820d53a 	srli	r16,r5,20
 801174c:	481290fa 	slli	r9,r9,3
 8011750:	200ad77a 	srli	r5,r4,29
 8011754:	180690fa 	slli	r3,r3,3
 8011758:	dc400115 	stw	r17,4(sp)
 801175c:	dfc00415 	stw	ra,16(sp)
 8011760:	202290fa 	slli	r17,r4,3
 8011764:	dcc00315 	stw	r19,12(sp)
 8011768:	5281ffcc 	andi	r10,r10,2047
 801176c:	0101ffc4 	movi	r4,2047
 8011770:	9011883a 	mov	r8,r18
 8011774:	8401ffcc 	andi	r16,r16,2047
 8011778:	94803fcc 	andi	r18,r18,255
 801177c:	494ab03a 	or	r5,r9,r5
 8011780:	380ed7fa 	srli	r7,r7,31
 8011784:	1886b03a 	or	r3,r3,r2
 8011788:	300c90fa 	slli	r6,r6,3
 801178c:	51009026 	beq	r10,r4,80119d0 <__subdf3+0x2b0>
 8011790:	39c0005c 	xori	r7,r7,1
 8011794:	8285c83a 	sub	r2,r16,r10
 8011798:	91c06f26 	beq	r18,r7,8011958 <__subdf3+0x238>
 801179c:	0080b10e 	bge	zero,r2,8011a64 <__subdf3+0x344>
 80117a0:	50002a1e 	bne	r10,zero,801184c <__subdf3+0x12c>
 80117a4:	1988b03a 	or	r4,r3,r6
 80117a8:	2000941e 	bne	r4,zero,80119fc <__subdf3+0x2dc>
 80117ac:	888001cc 	andi	r2,r17,7
 80117b0:	10005b26 	beq	r2,zero,8011920 <__subdf3+0x200>
 80117b4:	88c003cc 	andi	r3,r17,15
 80117b8:	00800104 	movi	r2,4
 80117bc:	18805826 	beq	r3,r2,8011920 <__subdf3+0x200>
 80117c0:	88c00104 	addi	r3,r17,4
 80117c4:	1c63803a 	cmpltu	r17,r3,r17
 80117c8:	2c4b883a 	add	r5,r5,r17
 80117cc:	2880202c 	andhi	r2,r5,128
 80117d0:	9200004c 	andi	r8,r18,1
 80117d4:	1823883a 	mov	r17,r3
 80117d8:	10005426 	beq	r2,zero,801192c <__subdf3+0x20c>
 80117dc:	84000044 	addi	r16,r16,1
 80117e0:	0081ffc4 	movi	r2,2047
 80117e4:	8080bf26 	beq	r16,r2,8011ae4 <__subdf3+0x3c4>
 80117e8:	013fe034 	movhi	r4,65408
 80117ec:	213fffc4 	addi	r4,r4,-1
 80117f0:	290a703a 	and	r5,r5,r4
 80117f4:	2804977a 	slli	r2,r5,29
 80117f8:	280a927a 	slli	r5,r5,9
 80117fc:	8822d0fa 	srli	r17,r17,3
 8011800:	8401ffcc 	andi	r16,r16,2047
 8011804:	2808d33a 	srli	r4,r5,12
 8011808:	1444b03a 	or	r2,r2,r17
 801180c:	8401ffcc 	andi	r16,r16,2047
 8011810:	800a953a 	slli	r5,r16,20
 8011814:	40c03fcc 	andi	r3,r8,255
 8011818:	04000434 	movhi	r16,16
 801181c:	180697fa 	slli	r3,r3,31
 8011820:	843fffc4 	addi	r16,r16,-1
 8011824:	2420703a 	and	r16,r4,r16
 8011828:	8160b03a 	or	r16,r16,r5
 801182c:	80c6b03a 	or	r3,r16,r3
 8011830:	dfc00417 	ldw	ra,16(sp)
 8011834:	dcc00317 	ldw	r19,12(sp)
 8011838:	dc800217 	ldw	r18,8(sp)
 801183c:	dc400117 	ldw	r17,4(sp)
 8011840:	dc000017 	ldw	r16,0(sp)
 8011844:	dec00504 	addi	sp,sp,20
 8011848:	f800283a 	ret
 801184c:	0101ffc4 	movi	r4,2047
 8011850:	813fd626 	beq	r16,r4,80117ac <__alt_data_end+0xfc0117ac>
 8011854:	18c02034 	orhi	r3,r3,128
 8011858:	01000e04 	movi	r4,56
 801185c:	2080a416 	blt	r4,r2,8011af0 <__subdf3+0x3d0>
 8011860:	010007c4 	movi	r4,31
 8011864:	2080c716 	blt	r4,r2,8011b84 <__subdf3+0x464>
 8011868:	01000804 	movi	r4,32
 801186c:	2089c83a 	sub	r4,r4,r2
 8011870:	1910983a 	sll	r8,r3,r4
 8011874:	308ed83a 	srl	r7,r6,r2
 8011878:	3108983a 	sll	r4,r6,r4
 801187c:	1884d83a 	srl	r2,r3,r2
 8011880:	41ccb03a 	or	r6,r8,r7
 8011884:	2008c03a 	cmpne	r4,r4,zero
 8011888:	310cb03a 	or	r6,r6,r4
 801188c:	898dc83a 	sub	r6,r17,r6
 8011890:	89a3803a 	cmpltu	r17,r17,r6
 8011894:	288bc83a 	sub	r5,r5,r2
 8011898:	2c4bc83a 	sub	r5,r5,r17
 801189c:	3023883a 	mov	r17,r6
 80118a0:	2880202c 	andhi	r2,r5,128
 80118a4:	10006b26 	beq	r2,zero,8011a54 <__subdf3+0x334>
 80118a8:	04c02034 	movhi	r19,128
 80118ac:	9cffffc4 	addi	r19,r19,-1
 80118b0:	2ce6703a 	and	r19,r5,r19
 80118b4:	98007c26 	beq	r19,zero,8011aa8 <__subdf3+0x388>
 80118b8:	9809883a 	mov	r4,r19
 80118bc:	80034dc0 	call	80034dc <__clzsi2>
 80118c0:	10fffe04 	addi	r3,r2,-8
 80118c4:	010007c4 	movi	r4,31
 80118c8:	20c07d16 	blt	r4,r3,8011ac0 <__subdf3+0x3a0>
 80118cc:	01400a04 	movi	r5,40
 80118d0:	2885c83a 	sub	r2,r5,r2
 80118d4:	888ad83a 	srl	r5,r17,r2
 80118d8:	98e6983a 	sll	r19,r19,r3
 80118dc:	88e2983a 	sll	r17,r17,r3
 80118e0:	2ce6b03a 	or	r19,r5,r19
 80118e4:	1c007a16 	blt	r3,r16,8011ad0 <__subdf3+0x3b0>
 80118e8:	1c21c83a 	sub	r16,r3,r16
 80118ec:	81400044 	addi	r5,r16,1
 80118f0:	00c007c4 	movi	r3,31
 80118f4:	19409616 	blt	r3,r5,8011b50 <__subdf3+0x430>
 80118f8:	1c21c83a 	sub	r16,r3,r16
 80118fc:	8c08983a 	sll	r4,r17,r16
 8011900:	8946d83a 	srl	r3,r17,r5
 8011904:	9c20983a 	sll	r16,r19,r16
 8011908:	2008c03a 	cmpne	r4,r4,zero
 801190c:	994ad83a 	srl	r5,r19,r5
 8011910:	1c06b03a 	or	r3,r3,r16
 8011914:	1922b03a 	or	r17,r3,r4
 8011918:	0021883a 	mov	r16,zero
 801191c:	003fa306 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011920:	2880202c 	andhi	r2,r5,128
 8011924:	9200004c 	andi	r8,r18,1
 8011928:	103fac1e 	bne	r2,zero,80117dc <__alt_data_end+0xfc0117dc>
 801192c:	2804977a 	slli	r2,r5,29
 8011930:	8822d0fa 	srli	r17,r17,3
 8011934:	00c1ffc4 	movi	r3,2047
 8011938:	280ad0fa 	srli	r5,r5,3
 801193c:	1444b03a 	or	r2,r2,r17
 8011940:	80c02726 	beq	r16,r3,80119e0 <__subdf3+0x2c0>
 8011944:	01000434 	movhi	r4,16
 8011948:	213fffc4 	addi	r4,r4,-1
 801194c:	80e0703a 	and	r16,r16,r3
 8011950:	2908703a 	and	r4,r5,r4
 8011954:	003fad06 	br	801180c <__alt_data_end+0xfc01180c>
 8011958:	0080690e 	bge	zero,r2,8011b00 <__subdf3+0x3e0>
 801195c:	50002f26 	beq	r10,zero,8011a1c <__subdf3+0x2fc>
 8011960:	0101ffc4 	movi	r4,2047
 8011964:	813f9126 	beq	r16,r4,80117ac <__alt_data_end+0xfc0117ac>
 8011968:	18c02034 	orhi	r3,r3,128
 801196c:	01000e04 	movi	r4,56
 8011970:	2080b00e 	bge	r4,r2,8011c34 <__subdf3+0x514>
 8011974:	198cb03a 	or	r6,r3,r6
 8011978:	300ec03a 	cmpne	r7,r6,zero
 801197c:	0005883a 	mov	r2,zero
 8011980:	3c4f883a 	add	r7,r7,r17
 8011984:	3c63803a 	cmpltu	r17,r7,r17
 8011988:	114b883a 	add	r5,r2,r5
 801198c:	2c4b883a 	add	r5,r5,r17
 8011990:	3823883a 	mov	r17,r7
 8011994:	2880202c 	andhi	r2,r5,128
 8011998:	10002e26 	beq	r2,zero,8011a54 <__subdf3+0x334>
 801199c:	84000044 	addi	r16,r16,1
 80119a0:	0081ffc4 	movi	r2,2047
 80119a4:	8080de26 	beq	r16,r2,8011d20 <__subdf3+0x600>
 80119a8:	00bfe034 	movhi	r2,65408
 80119ac:	10bfffc4 	addi	r2,r2,-1
 80119b0:	288a703a 	and	r5,r5,r2
 80119b4:	880cd07a 	srli	r6,r17,1
 80119b8:	280897fa 	slli	r4,r5,31
 80119bc:	88c0004c 	andi	r3,r17,1
 80119c0:	30e2b03a 	or	r17,r6,r3
 80119c4:	280ad07a 	srli	r5,r5,1
 80119c8:	8922b03a 	or	r17,r17,r4
 80119cc:	003f7706 	br	80117ac <__alt_data_end+0xfc0117ac>
 80119d0:	1984b03a 	or	r2,r3,r6
 80119d4:	103f6e26 	beq	r2,zero,8011790 <__alt_data_end+0xfc011790>
 80119d8:	39c03fcc 	andi	r7,r7,255
 80119dc:	003f6d06 	br	8011794 <__alt_data_end+0xfc011794>
 80119e0:	1146b03a 	or	r3,r2,r5
 80119e4:	18003f26 	beq	r3,zero,8011ae4 <__subdf3+0x3c4>
 80119e8:	00c00434 	movhi	r3,16
 80119ec:	29000234 	orhi	r4,r5,8
 80119f0:	18ffffc4 	addi	r3,r3,-1
 80119f4:	20c8703a 	and	r4,r4,r3
 80119f8:	003f8406 	br	801180c <__alt_data_end+0xfc01180c>
 80119fc:	10bfffc4 	addi	r2,r2,-1
 8011a00:	1000501e 	bne	r2,zero,8011b44 <__subdf3+0x424>
 8011a04:	898fc83a 	sub	r7,r17,r6
 8011a08:	89e3803a 	cmpltu	r17,r17,r7
 8011a0c:	28cbc83a 	sub	r5,r5,r3
 8011a10:	2c4bc83a 	sub	r5,r5,r17
 8011a14:	3823883a 	mov	r17,r7
 8011a18:	003fa106 	br	80118a0 <__alt_data_end+0xfc0118a0>
 8011a1c:	1988b03a 	or	r4,r3,r6
 8011a20:	203f6226 	beq	r4,zero,80117ac <__alt_data_end+0xfc0117ac>
 8011a24:	10bfffc4 	addi	r2,r2,-1
 8011a28:	10009b1e 	bne	r2,zero,8011c98 <__subdf3+0x578>
 8011a2c:	344d883a 	add	r6,r6,r17
 8011a30:	3463803a 	cmpltu	r17,r6,r17
 8011a34:	194b883a 	add	r5,r3,r5
 8011a38:	2c4b883a 	add	r5,r5,r17
 8011a3c:	3023883a 	mov	r17,r6
 8011a40:	003fd406 	br	8011994 <__alt_data_end+0xfc011994>
 8011a44:	1106b03a 	or	r3,r2,r4
 8011a48:	1800b426 	beq	r3,zero,8011d1c <__subdf3+0x5fc>
 8011a4c:	100b883a 	mov	r5,r2
 8011a50:	2023883a 	mov	r17,r4
 8011a54:	888001cc 	andi	r2,r17,7
 8011a58:	103f561e 	bne	r2,zero,80117b4 <__alt_data_end+0xfc0117b4>
 8011a5c:	9200004c 	andi	r8,r18,1
 8011a60:	003fb206 	br	801192c <__alt_data_end+0xfc01192c>
 8011a64:	1000531e 	bne	r2,zero,8011bb4 <__subdf3+0x494>
 8011a68:	80800044 	addi	r2,r16,1
 8011a6c:	1081ffcc 	andi	r2,r2,2047
 8011a70:	01000044 	movi	r4,1
 8011a74:	2080a00e 	bge	r4,r2,8011cf8 <__subdf3+0x5d8>
 8011a78:	8985c83a 	sub	r2,r17,r6
 8011a7c:	8889803a 	cmpltu	r4,r17,r2
 8011a80:	28e7c83a 	sub	r19,r5,r3
 8011a84:	9927c83a 	sub	r19,r19,r4
 8011a88:	9900202c 	andhi	r4,r19,128
 8011a8c:	20006226 	beq	r4,zero,8011c18 <__subdf3+0x4f8>
 8011a90:	3463c83a 	sub	r17,r6,r17
 8011a94:	194bc83a 	sub	r5,r3,r5
 8011a98:	344d803a 	cmpltu	r6,r6,r17
 8011a9c:	29a7c83a 	sub	r19,r5,r6
 8011aa0:	3825883a 	mov	r18,r7
 8011aa4:	983f841e 	bne	r19,zero,80118b8 <__alt_data_end+0xfc0118b8>
 8011aa8:	8809883a 	mov	r4,r17
 8011aac:	80034dc0 	call	80034dc <__clzsi2>
 8011ab0:	10800804 	addi	r2,r2,32
 8011ab4:	10fffe04 	addi	r3,r2,-8
 8011ab8:	010007c4 	movi	r4,31
 8011abc:	20ff830e 	bge	r4,r3,80118cc <__alt_data_end+0xfc0118cc>
 8011ac0:	14fff604 	addi	r19,r2,-40
 8011ac4:	8ce6983a 	sll	r19,r17,r19
 8011ac8:	0023883a 	mov	r17,zero
 8011acc:	1c3f860e 	bge	r3,r16,80118e8 <__alt_data_end+0xfc0118e8>
 8011ad0:	017fe034 	movhi	r5,65408
 8011ad4:	297fffc4 	addi	r5,r5,-1
 8011ad8:	80e1c83a 	sub	r16,r16,r3
 8011adc:	994a703a 	and	r5,r19,r5
 8011ae0:	003f3206 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011ae4:	0009883a 	mov	r4,zero
 8011ae8:	0005883a 	mov	r2,zero
 8011aec:	003f4706 	br	801180c <__alt_data_end+0xfc01180c>
 8011af0:	198cb03a 	or	r6,r3,r6
 8011af4:	300cc03a 	cmpne	r6,r6,zero
 8011af8:	0005883a 	mov	r2,zero
 8011afc:	003f6306 	br	801188c <__alt_data_end+0xfc01188c>
 8011b00:	10009d1e 	bne	r2,zero,8011d78 <__subdf3+0x658>
 8011b04:	81c00044 	addi	r7,r16,1
 8011b08:	3881ffcc 	andi	r2,r7,2047
 8011b0c:	02400044 	movi	r9,1
 8011b10:	4880680e 	bge	r9,r2,8011cb4 <__subdf3+0x594>
 8011b14:	0081ffc4 	movi	r2,2047
 8011b18:	3880ae26 	beq	r7,r2,8011dd4 <__subdf3+0x6b4>
 8011b1c:	344d883a 	add	r6,r6,r17
 8011b20:	3463803a 	cmpltu	r17,r6,r17
 8011b24:	194b883a 	add	r5,r3,r5
 8011b28:	2c4b883a 	add	r5,r5,r17
 8011b2c:	282297fa 	slli	r17,r5,31
 8011b30:	300cd07a 	srli	r6,r6,1
 8011b34:	280ad07a 	srli	r5,r5,1
 8011b38:	3821883a 	mov	r16,r7
 8011b3c:	89a2b03a 	or	r17,r17,r6
 8011b40:	003f1a06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011b44:	0101ffc4 	movi	r4,2047
 8011b48:	813f431e 	bne	r16,r4,8011858 <__alt_data_end+0xfc011858>
 8011b4c:	003f1706 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011b50:	80bff844 	addi	r2,r16,-31
 8011b54:	00c00804 	movi	r3,32
 8011b58:	9884d83a 	srl	r2,r19,r2
 8011b5c:	28c05126 	beq	r5,r3,8011ca4 <__subdf3+0x584>
 8011b60:	00c00fc4 	movi	r3,63
 8011b64:	1c21c83a 	sub	r16,r3,r16
 8011b68:	9c26983a 	sll	r19,r19,r16
 8011b6c:	9c62b03a 	or	r17,r19,r17
 8011b70:	8822c03a 	cmpne	r17,r17,zero
 8011b74:	88a2b03a 	or	r17,r17,r2
 8011b78:	000b883a 	mov	r5,zero
 8011b7c:	0021883a 	mov	r16,zero
 8011b80:	003fb406 	br	8011a54 <__alt_data_end+0xfc011a54>
 8011b84:	113ff804 	addi	r4,r2,-32
 8011b88:	01c00804 	movi	r7,32
 8011b8c:	1908d83a 	srl	r4,r3,r4
 8011b90:	11c04626 	beq	r2,r7,8011cac <__subdf3+0x58c>
 8011b94:	01c01004 	movi	r7,64
 8011b98:	3885c83a 	sub	r2,r7,r2
 8011b9c:	1884983a 	sll	r2,r3,r2
 8011ba0:	118cb03a 	or	r6,r2,r6
 8011ba4:	300cc03a 	cmpne	r6,r6,zero
 8011ba8:	310cb03a 	or	r6,r6,r4
 8011bac:	0005883a 	mov	r2,zero
 8011bb0:	003f3606 	br	801188c <__alt_data_end+0xfc01188c>
 8011bb4:	80002b26 	beq	r16,zero,8011c64 <__subdf3+0x544>
 8011bb8:	0101ffc4 	movi	r4,2047
 8011bbc:	51006926 	beq	r10,r4,8011d64 <__subdf3+0x644>
 8011bc0:	0085c83a 	sub	r2,zero,r2
 8011bc4:	29402034 	orhi	r5,r5,128
 8011bc8:	01000e04 	movi	r4,56
 8011bcc:	20807d16 	blt	r4,r2,8011dc4 <__subdf3+0x6a4>
 8011bd0:	010007c4 	movi	r4,31
 8011bd4:	2080d916 	blt	r4,r2,8011f3c <__subdf3+0x81c>
 8011bd8:	01000804 	movi	r4,32
 8011bdc:	2089c83a 	sub	r4,r4,r2
 8011be0:	2912983a 	sll	r9,r5,r4
 8011be4:	8890d83a 	srl	r8,r17,r2
 8011be8:	8908983a 	sll	r4,r17,r4
 8011bec:	2884d83a 	srl	r2,r5,r2
 8011bf0:	4a22b03a 	or	r17,r9,r8
 8011bf4:	2008c03a 	cmpne	r4,r4,zero
 8011bf8:	8922b03a 	or	r17,r17,r4
 8011bfc:	3463c83a 	sub	r17,r6,r17
 8011c00:	1885c83a 	sub	r2,r3,r2
 8011c04:	344d803a 	cmpltu	r6,r6,r17
 8011c08:	118bc83a 	sub	r5,r2,r6
 8011c0c:	5021883a 	mov	r16,r10
 8011c10:	3825883a 	mov	r18,r7
 8011c14:	003f2206 	br	80118a0 <__alt_data_end+0xfc0118a0>
 8011c18:	9886b03a 	or	r3,r19,r2
 8011c1c:	18001c1e 	bne	r3,zero,8011c90 <__subdf3+0x570>
 8011c20:	0011883a 	mov	r8,zero
 8011c24:	000b883a 	mov	r5,zero
 8011c28:	0023883a 	mov	r17,zero
 8011c2c:	0021883a 	mov	r16,zero
 8011c30:	003f3e06 	br	801192c <__alt_data_end+0xfc01192c>
 8011c34:	010007c4 	movi	r4,31
 8011c38:	20803c16 	blt	r4,r2,8011d2c <__subdf3+0x60c>
 8011c3c:	01000804 	movi	r4,32
 8011c40:	2089c83a 	sub	r4,r4,r2
 8011c44:	1912983a 	sll	r9,r3,r4
 8011c48:	308ed83a 	srl	r7,r6,r2
 8011c4c:	3108983a 	sll	r4,r6,r4
 8011c50:	1884d83a 	srl	r2,r3,r2
 8011c54:	49ceb03a 	or	r7,r9,r7
 8011c58:	2008c03a 	cmpne	r4,r4,zero
 8011c5c:	390eb03a 	or	r7,r7,r4
 8011c60:	003f4706 	br	8011980 <__alt_data_end+0xfc011980>
 8011c64:	2c48b03a 	or	r4,r5,r17
 8011c68:	20003e26 	beq	r4,zero,8011d64 <__subdf3+0x644>
 8011c6c:	0084303a 	nor	r2,zero,r2
 8011c70:	10003a1e 	bne	r2,zero,8011d5c <__subdf3+0x63c>
 8011c74:	3463c83a 	sub	r17,r6,r17
 8011c78:	194bc83a 	sub	r5,r3,r5
 8011c7c:	344d803a 	cmpltu	r6,r6,r17
 8011c80:	298bc83a 	sub	r5,r5,r6
 8011c84:	5021883a 	mov	r16,r10
 8011c88:	3825883a 	mov	r18,r7
 8011c8c:	003f0406 	br	80118a0 <__alt_data_end+0xfc0118a0>
 8011c90:	1023883a 	mov	r17,r2
 8011c94:	003f0706 	br	80118b4 <__alt_data_end+0xfc0118b4>
 8011c98:	0101ffc4 	movi	r4,2047
 8011c9c:	813f331e 	bne	r16,r4,801196c <__alt_data_end+0xfc01196c>
 8011ca0:	003ec206 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011ca4:	0027883a 	mov	r19,zero
 8011ca8:	003fb006 	br	8011b6c <__alt_data_end+0xfc011b6c>
 8011cac:	0005883a 	mov	r2,zero
 8011cb0:	003fbb06 	br	8011ba0 <__alt_data_end+0xfc011ba0>
 8011cb4:	2c44b03a 	or	r2,r5,r17
 8011cb8:	80008b1e 	bne	r16,zero,8011ee8 <__subdf3+0x7c8>
 8011cbc:	1000b526 	beq	r2,zero,8011f94 <__subdf3+0x874>
 8011cc0:	1984b03a 	or	r2,r3,r6
 8011cc4:	103eb926 	beq	r2,zero,80117ac <__alt_data_end+0xfc0117ac>
 8011cc8:	3449883a 	add	r4,r6,r17
 8011ccc:	2463803a 	cmpltu	r17,r4,r17
 8011cd0:	194b883a 	add	r5,r3,r5
 8011cd4:	2c4b883a 	add	r5,r5,r17
 8011cd8:	2880202c 	andhi	r2,r5,128
 8011cdc:	2023883a 	mov	r17,r4
 8011ce0:	103f5c26 	beq	r2,zero,8011a54 <__alt_data_end+0xfc011a54>
 8011ce4:	00bfe034 	movhi	r2,65408
 8011ce8:	10bfffc4 	addi	r2,r2,-1
 8011cec:	4821883a 	mov	r16,r9
 8011cf0:	288a703a 	and	r5,r5,r2
 8011cf4:	003ead06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011cf8:	2c44b03a 	or	r2,r5,r17
 8011cfc:	8000291e 	bne	r16,zero,8011da4 <__subdf3+0x684>
 8011d00:	10004f1e 	bne	r2,zero,8011e40 <__subdf3+0x720>
 8011d04:	1984b03a 	or	r2,r3,r6
 8011d08:	10000426 	beq	r2,zero,8011d1c <__subdf3+0x5fc>
 8011d0c:	180b883a 	mov	r5,r3
 8011d10:	3023883a 	mov	r17,r6
 8011d14:	3825883a 	mov	r18,r7
 8011d18:	003ea406 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011d1c:	0011883a 	mov	r8,zero
 8011d20:	000b883a 	mov	r5,zero
 8011d24:	0023883a 	mov	r17,zero
 8011d28:	003f0006 	br	801192c <__alt_data_end+0xfc01192c>
 8011d2c:	11fff804 	addi	r7,r2,-32
 8011d30:	19c8d83a 	srl	r4,r3,r7
 8011d34:	01c00804 	movi	r7,32
 8011d38:	11c07e26 	beq	r2,r7,8011f34 <__subdf3+0x814>
 8011d3c:	01c01004 	movi	r7,64
 8011d40:	3885c83a 	sub	r2,r7,r2
 8011d44:	1884983a 	sll	r2,r3,r2
 8011d48:	118cb03a 	or	r6,r2,r6
 8011d4c:	300ec03a 	cmpne	r7,r6,zero
 8011d50:	390eb03a 	or	r7,r7,r4
 8011d54:	0005883a 	mov	r2,zero
 8011d58:	003f0906 	br	8011980 <__alt_data_end+0xfc011980>
 8011d5c:	0101ffc4 	movi	r4,2047
 8011d60:	513f991e 	bne	r10,r4,8011bc8 <__alt_data_end+0xfc011bc8>
 8011d64:	180b883a 	mov	r5,r3
 8011d68:	3023883a 	mov	r17,r6
 8011d6c:	5021883a 	mov	r16,r10
 8011d70:	3825883a 	mov	r18,r7
 8011d74:	003e8d06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011d78:	80001a1e 	bne	r16,zero,8011de4 <__subdf3+0x6c4>
 8011d7c:	2c48b03a 	or	r4,r5,r17
 8011d80:	20005526 	beq	r4,zero,8011ed8 <__subdf3+0x7b8>
 8011d84:	0084303a 	nor	r2,zero,r2
 8011d88:	1000511e 	bne	r2,zero,8011ed0 <__subdf3+0x7b0>
 8011d8c:	89a3883a 	add	r17,r17,r6
 8011d90:	194b883a 	add	r5,r3,r5
 8011d94:	898d803a 	cmpltu	r6,r17,r6
 8011d98:	298b883a 	add	r5,r5,r6
 8011d9c:	5021883a 	mov	r16,r10
 8011da0:	003efc06 	br	8011994 <__alt_data_end+0xfc011994>
 8011da4:	1000341e 	bne	r2,zero,8011e78 <__subdf3+0x758>
 8011da8:	1984b03a 	or	r2,r3,r6
 8011dac:	10006f26 	beq	r2,zero,8011f6c <__subdf3+0x84c>
 8011db0:	180b883a 	mov	r5,r3
 8011db4:	3023883a 	mov	r17,r6
 8011db8:	3825883a 	mov	r18,r7
 8011dbc:	0401ffc4 	movi	r16,2047
 8011dc0:	003e7a06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011dc4:	2c62b03a 	or	r17,r5,r17
 8011dc8:	8822c03a 	cmpne	r17,r17,zero
 8011dcc:	0005883a 	mov	r2,zero
 8011dd0:	003f8a06 	br	8011bfc <__alt_data_end+0xfc011bfc>
 8011dd4:	3821883a 	mov	r16,r7
 8011dd8:	000b883a 	mov	r5,zero
 8011ddc:	0023883a 	mov	r17,zero
 8011de0:	003ed206 	br	801192c <__alt_data_end+0xfc01192c>
 8011de4:	0101ffc4 	movi	r4,2047
 8011de8:	51003b26 	beq	r10,r4,8011ed8 <__subdf3+0x7b8>
 8011dec:	0085c83a 	sub	r2,zero,r2
 8011df0:	29402034 	orhi	r5,r5,128
 8011df4:	01000e04 	movi	r4,56
 8011df8:	20806216 	blt	r4,r2,8011f84 <__subdf3+0x864>
 8011dfc:	010007c4 	movi	r4,31
 8011e00:	20806b16 	blt	r4,r2,8011fb0 <__subdf3+0x890>
 8011e04:	01000804 	movi	r4,32
 8011e08:	2089c83a 	sub	r4,r4,r2
 8011e0c:	2912983a 	sll	r9,r5,r4
 8011e10:	888ed83a 	srl	r7,r17,r2
 8011e14:	8908983a 	sll	r4,r17,r4
 8011e18:	2884d83a 	srl	r2,r5,r2
 8011e1c:	49e2b03a 	or	r17,r9,r7
 8011e20:	2008c03a 	cmpne	r4,r4,zero
 8011e24:	8922b03a 	or	r17,r17,r4
 8011e28:	89a3883a 	add	r17,r17,r6
 8011e2c:	10c5883a 	add	r2,r2,r3
 8011e30:	898d803a 	cmpltu	r6,r17,r6
 8011e34:	118b883a 	add	r5,r2,r6
 8011e38:	5021883a 	mov	r16,r10
 8011e3c:	003ed506 	br	8011994 <__alt_data_end+0xfc011994>
 8011e40:	1984b03a 	or	r2,r3,r6
 8011e44:	103e5926 	beq	r2,zero,80117ac <__alt_data_end+0xfc0117ac>
 8011e48:	8989c83a 	sub	r4,r17,r6
 8011e4c:	8911803a 	cmpltu	r8,r17,r4
 8011e50:	28c5c83a 	sub	r2,r5,r3
 8011e54:	1205c83a 	sub	r2,r2,r8
 8011e58:	1200202c 	andhi	r8,r2,128
 8011e5c:	403ef926 	beq	r8,zero,8011a44 <__alt_data_end+0xfc011a44>
 8011e60:	3463c83a 	sub	r17,r6,r17
 8011e64:	194bc83a 	sub	r5,r3,r5
 8011e68:	344d803a 	cmpltu	r6,r6,r17
 8011e6c:	298bc83a 	sub	r5,r5,r6
 8011e70:	3825883a 	mov	r18,r7
 8011e74:	003e4d06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011e78:	1984b03a 	or	r2,r3,r6
 8011e7c:	10002b26 	beq	r2,zero,8011f2c <__subdf3+0x80c>
 8011e80:	2808d0fa 	srli	r4,r5,3
 8011e84:	8822d0fa 	srli	r17,r17,3
 8011e88:	280a977a 	slli	r5,r5,29
 8011e8c:	2080022c 	andhi	r2,r4,8
 8011e90:	2c62b03a 	or	r17,r5,r17
 8011e94:	10000826 	beq	r2,zero,8011eb8 <__subdf3+0x798>
 8011e98:	1810d0fa 	srli	r8,r3,3
 8011e9c:	4080022c 	andhi	r2,r8,8
 8011ea0:	1000051e 	bne	r2,zero,8011eb8 <__subdf3+0x798>
 8011ea4:	300cd0fa 	srli	r6,r6,3
 8011ea8:	1804977a 	slli	r2,r3,29
 8011eac:	4009883a 	mov	r4,r8
 8011eb0:	3825883a 	mov	r18,r7
 8011eb4:	11a2b03a 	or	r17,r2,r6
 8011eb8:	880ad77a 	srli	r5,r17,29
 8011ebc:	200890fa 	slli	r4,r4,3
 8011ec0:	882290fa 	slli	r17,r17,3
 8011ec4:	0401ffc4 	movi	r16,2047
 8011ec8:	290ab03a 	or	r5,r5,r4
 8011ecc:	003e3706 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011ed0:	0101ffc4 	movi	r4,2047
 8011ed4:	513fc71e 	bne	r10,r4,8011df4 <__alt_data_end+0xfc011df4>
 8011ed8:	180b883a 	mov	r5,r3
 8011edc:	3023883a 	mov	r17,r6
 8011ee0:	5021883a 	mov	r16,r10
 8011ee4:	003e3106 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011ee8:	10002d26 	beq	r2,zero,8011fa0 <__subdf3+0x880>
 8011eec:	1984b03a 	or	r2,r3,r6
 8011ef0:	10000e26 	beq	r2,zero,8011f2c <__subdf3+0x80c>
 8011ef4:	2808d0fa 	srli	r4,r5,3
 8011ef8:	8822d0fa 	srli	r17,r17,3
 8011efc:	280a977a 	slli	r5,r5,29
 8011f00:	2080022c 	andhi	r2,r4,8
 8011f04:	2c62b03a 	or	r17,r5,r17
 8011f08:	103feb26 	beq	r2,zero,8011eb8 <__alt_data_end+0xfc011eb8>
 8011f0c:	180ed0fa 	srli	r7,r3,3
 8011f10:	3880022c 	andhi	r2,r7,8
 8011f14:	103fe81e 	bne	r2,zero,8011eb8 <__alt_data_end+0xfc011eb8>
 8011f18:	300cd0fa 	srli	r6,r6,3
 8011f1c:	1804977a 	slli	r2,r3,29
 8011f20:	3809883a 	mov	r4,r7
 8011f24:	11a2b03a 	or	r17,r2,r6
 8011f28:	003fe306 	br	8011eb8 <__alt_data_end+0xfc011eb8>
 8011f2c:	0401ffc4 	movi	r16,2047
 8011f30:	003e1e06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011f34:	0005883a 	mov	r2,zero
 8011f38:	003f8306 	br	8011d48 <__alt_data_end+0xfc011d48>
 8011f3c:	113ff804 	addi	r4,r2,-32
 8011f40:	02000804 	movi	r8,32
 8011f44:	2908d83a 	srl	r4,r5,r4
 8011f48:	12002526 	beq	r2,r8,8011fe0 <__subdf3+0x8c0>
 8011f4c:	02001004 	movi	r8,64
 8011f50:	4085c83a 	sub	r2,r8,r2
 8011f54:	288a983a 	sll	r5,r5,r2
 8011f58:	2c62b03a 	or	r17,r5,r17
 8011f5c:	8822c03a 	cmpne	r17,r17,zero
 8011f60:	8922b03a 	or	r17,r17,r4
 8011f64:	0005883a 	mov	r2,zero
 8011f68:	003f2406 	br	8011bfc <__alt_data_end+0xfc011bfc>
 8011f6c:	01402034 	movhi	r5,128
 8011f70:	0011883a 	mov	r8,zero
 8011f74:	297fffc4 	addi	r5,r5,-1
 8011f78:	047ffe04 	movi	r17,-8
 8011f7c:	0401ffc4 	movi	r16,2047
 8011f80:	003e6a06 	br	801192c <__alt_data_end+0xfc01192c>
 8011f84:	2c62b03a 	or	r17,r5,r17
 8011f88:	8822c03a 	cmpne	r17,r17,zero
 8011f8c:	0005883a 	mov	r2,zero
 8011f90:	003fa506 	br	8011e28 <__alt_data_end+0xfc011e28>
 8011f94:	180b883a 	mov	r5,r3
 8011f98:	3023883a 	mov	r17,r6
 8011f9c:	003e0306 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011fa0:	180b883a 	mov	r5,r3
 8011fa4:	3023883a 	mov	r17,r6
 8011fa8:	0401ffc4 	movi	r16,2047
 8011fac:	003dff06 	br	80117ac <__alt_data_end+0xfc0117ac>
 8011fb0:	113ff804 	addi	r4,r2,-32
 8011fb4:	01c00804 	movi	r7,32
 8011fb8:	2908d83a 	srl	r4,r5,r4
 8011fbc:	11c00a26 	beq	r2,r7,8011fe8 <__subdf3+0x8c8>
 8011fc0:	01c01004 	movi	r7,64
 8011fc4:	3885c83a 	sub	r2,r7,r2
 8011fc8:	288a983a 	sll	r5,r5,r2
 8011fcc:	2c62b03a 	or	r17,r5,r17
 8011fd0:	8822c03a 	cmpne	r17,r17,zero
 8011fd4:	8922b03a 	or	r17,r17,r4
 8011fd8:	0005883a 	mov	r2,zero
 8011fdc:	003f9206 	br	8011e28 <__alt_data_end+0xfc011e28>
 8011fe0:	000b883a 	mov	r5,zero
 8011fe4:	003fdc06 	br	8011f58 <__alt_data_end+0xfc011f58>
 8011fe8:	000b883a 	mov	r5,zero
 8011fec:	003ff706 	br	8011fcc <__alt_data_end+0xfc011fcc>

08011ff0 <__floatunsidf>:
 8011ff0:	defffe04 	addi	sp,sp,-8
 8011ff4:	dc000015 	stw	r16,0(sp)
 8011ff8:	dfc00115 	stw	ra,4(sp)
 8011ffc:	2021883a 	mov	r16,r4
 8012000:	20001026 	beq	r4,zero,8012044 <__floatunsidf+0x54>
 8012004:	80034dc0 	call	80034dc <__clzsi2>
 8012008:	01410784 	movi	r5,1054
 801200c:	100d883a 	mov	r6,r2
 8012010:	288bc83a 	sub	r5,r5,r2
 8012014:	00800284 	movi	r2,10
 8012018:	11801616 	blt	r2,r6,8012074 <__floatunsidf+0x84>
 801201c:	008002c4 	movi	r2,11
 8012020:	1185c83a 	sub	r2,r2,r6
 8012024:	8084d83a 	srl	r2,r16,r2
 8012028:	00c00434 	movhi	r3,16
 801202c:	31c00544 	addi	r7,r6,21
 8012030:	18ffffc4 	addi	r3,r3,-1
 8012034:	81e0983a 	sll	r16,r16,r7
 8012038:	10cc703a 	and	r6,r2,r3
 801203c:	2941ffcc 	andi	r5,r5,2047
 8012040:	00000206 	br	801204c <__floatunsidf+0x5c>
 8012044:	000b883a 	mov	r5,zero
 8012048:	000d883a 	mov	r6,zero
 801204c:	280a953a 	slli	r5,r5,20
 8012050:	00c00434 	movhi	r3,16
 8012054:	18ffffc4 	addi	r3,r3,-1
 8012058:	30c6703a 	and	r3,r6,r3
 801205c:	8005883a 	mov	r2,r16
 8012060:	1946b03a 	or	r3,r3,r5
 8012064:	dfc00117 	ldw	ra,4(sp)
 8012068:	dc000017 	ldw	r16,0(sp)
 801206c:	dec00204 	addi	sp,sp,8
 8012070:	f800283a 	ret
 8012074:	31bffd44 	addi	r6,r6,-11
 8012078:	818c983a 	sll	r6,r16,r6
 801207c:	00800434 	movhi	r2,16
 8012080:	10bfffc4 	addi	r2,r2,-1
 8012084:	2941ffcc 	andi	r5,r5,2047
 8012088:	0021883a 	mov	r16,zero
 801208c:	308c703a 	and	r6,r6,r2
 8012090:	003fee06 	br	801204c <__alt_data_end+0xfc01204c>

08012094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012094:	defffe04 	addi	sp,sp,-8
 8012098:	dfc00115 	stw	ra,4(sp)
 801209c:	df000015 	stw	fp,0(sp)
 80120a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80120a4:	008200b4 	movhi	r2,2050
 80120a8:	1084f704 	addi	r2,r2,5084
 80120ac:	10800017 	ldw	r2,0(r2)
 80120b0:	10000526 	beq	r2,zero,80120c8 <alt_get_errno+0x34>
 80120b4:	008200b4 	movhi	r2,2050
 80120b8:	1084f704 	addi	r2,r2,5084
 80120bc:	10800017 	ldw	r2,0(r2)
 80120c0:	103ee83a 	callr	r2
 80120c4:	00000206 	br	80120d0 <alt_get_errno+0x3c>
 80120c8:	008200b4 	movhi	r2,2050
 80120cc:	108bc804 	addi	r2,r2,12064
}
 80120d0:	e037883a 	mov	sp,fp
 80120d4:	dfc00117 	ldw	ra,4(sp)
 80120d8:	df000017 	ldw	fp,0(sp)
 80120dc:	dec00204 	addi	sp,sp,8
 80120e0:	f800283a 	ret

080120e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80120e4:	defffb04 	addi	sp,sp,-20
 80120e8:	dfc00415 	stw	ra,16(sp)
 80120ec:	df000315 	stw	fp,12(sp)
 80120f0:	df000304 	addi	fp,sp,12
 80120f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80120f8:	e0bfff17 	ldw	r2,-4(fp)
 80120fc:	10000616 	blt	r2,zero,8012118 <close+0x34>
 8012100:	e0bfff17 	ldw	r2,-4(fp)
 8012104:	10c00324 	muli	r3,r2,12
 8012108:	008200b4 	movhi	r2,2050
 801210c:	10806904 	addi	r2,r2,420
 8012110:	1885883a 	add	r2,r3,r2
 8012114:	00000106 	br	801211c <close+0x38>
 8012118:	0005883a 	mov	r2,zero
 801211c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8012120:	e0bffd17 	ldw	r2,-12(fp)
 8012124:	10001926 	beq	r2,zero,801218c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8012128:	e0bffd17 	ldw	r2,-12(fp)
 801212c:	10800017 	ldw	r2,0(r2)
 8012130:	10800417 	ldw	r2,16(r2)
 8012134:	10000626 	beq	r2,zero,8012150 <close+0x6c>
 8012138:	e0bffd17 	ldw	r2,-12(fp)
 801213c:	10800017 	ldw	r2,0(r2)
 8012140:	10800417 	ldw	r2,16(r2)
 8012144:	e13ffd17 	ldw	r4,-12(fp)
 8012148:	103ee83a 	callr	r2
 801214c:	00000106 	br	8012154 <close+0x70>
 8012150:	0005883a 	mov	r2,zero
 8012154:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8012158:	e13fff17 	ldw	r4,-4(fp)
 801215c:	80127e00 	call	80127e0 <alt_release_fd>
    if (rval < 0)
 8012160:	e0bffe17 	ldw	r2,-8(fp)
 8012164:	1000070e 	bge	r2,zero,8012184 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8012168:	80120940 	call	8012094 <alt_get_errno>
 801216c:	1007883a 	mov	r3,r2
 8012170:	e0bffe17 	ldw	r2,-8(fp)
 8012174:	0085c83a 	sub	r2,zero,r2
 8012178:	18800015 	stw	r2,0(r3)
      return -1;
 801217c:	00bfffc4 	movi	r2,-1
 8012180:	00000706 	br	80121a0 <close+0xbc>
    }
    return 0;
 8012184:	0005883a 	mov	r2,zero
 8012188:	00000506 	br	80121a0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801218c:	80120940 	call	8012094 <alt_get_errno>
 8012190:	1007883a 	mov	r3,r2
 8012194:	00801444 	movi	r2,81
 8012198:	18800015 	stw	r2,0(r3)
    return -1;
 801219c:	00bfffc4 	movi	r2,-1
  }
}
 80121a0:	e037883a 	mov	sp,fp
 80121a4:	dfc00117 	ldw	ra,4(sp)
 80121a8:	df000017 	ldw	fp,0(sp)
 80121ac:	dec00204 	addi	sp,sp,8
 80121b0:	f800283a 	ret

080121b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80121b4:	defffc04 	addi	sp,sp,-16
 80121b8:	df000315 	stw	fp,12(sp)
 80121bc:	df000304 	addi	fp,sp,12
 80121c0:	e13ffd15 	stw	r4,-12(fp)
 80121c4:	e17ffe15 	stw	r5,-8(fp)
 80121c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80121cc:	e0bfff17 	ldw	r2,-4(fp)
}
 80121d0:	e037883a 	mov	sp,fp
 80121d4:	df000017 	ldw	fp,0(sp)
 80121d8:	dec00104 	addi	sp,sp,4
 80121dc:	f800283a 	ret

080121e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80121e0:	defffe04 	addi	sp,sp,-8
 80121e4:	dfc00115 	stw	ra,4(sp)
 80121e8:	df000015 	stw	fp,0(sp)
 80121ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80121f0:	008200b4 	movhi	r2,2050
 80121f4:	1084f704 	addi	r2,r2,5084
 80121f8:	10800017 	ldw	r2,0(r2)
 80121fc:	10000526 	beq	r2,zero,8012214 <alt_get_errno+0x34>
 8012200:	008200b4 	movhi	r2,2050
 8012204:	1084f704 	addi	r2,r2,5084
 8012208:	10800017 	ldw	r2,0(r2)
 801220c:	103ee83a 	callr	r2
 8012210:	00000206 	br	801221c <alt_get_errno+0x3c>
 8012214:	008200b4 	movhi	r2,2050
 8012218:	108bc804 	addi	r2,r2,12064
}
 801221c:	e037883a 	mov	sp,fp
 8012220:	dfc00117 	ldw	ra,4(sp)
 8012224:	df000017 	ldw	fp,0(sp)
 8012228:	dec00204 	addi	sp,sp,8
 801222c:	f800283a 	ret

08012230 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8012230:	defffb04 	addi	sp,sp,-20
 8012234:	dfc00415 	stw	ra,16(sp)
 8012238:	df000315 	stw	fp,12(sp)
 801223c:	df000304 	addi	fp,sp,12
 8012240:	e13ffe15 	stw	r4,-8(fp)
 8012244:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012248:	e0bffe17 	ldw	r2,-8(fp)
 801224c:	10000616 	blt	r2,zero,8012268 <fstat+0x38>
 8012250:	e0bffe17 	ldw	r2,-8(fp)
 8012254:	10c00324 	muli	r3,r2,12
 8012258:	008200b4 	movhi	r2,2050
 801225c:	10806904 	addi	r2,r2,420
 8012260:	1885883a 	add	r2,r3,r2
 8012264:	00000106 	br	801226c <fstat+0x3c>
 8012268:	0005883a 	mov	r2,zero
 801226c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8012270:	e0bffd17 	ldw	r2,-12(fp)
 8012274:	10001026 	beq	r2,zero,80122b8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8012278:	e0bffd17 	ldw	r2,-12(fp)
 801227c:	10800017 	ldw	r2,0(r2)
 8012280:	10800817 	ldw	r2,32(r2)
 8012284:	10000726 	beq	r2,zero,80122a4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8012288:	e0bffd17 	ldw	r2,-12(fp)
 801228c:	10800017 	ldw	r2,0(r2)
 8012290:	10800817 	ldw	r2,32(r2)
 8012294:	e13ffd17 	ldw	r4,-12(fp)
 8012298:	e17fff17 	ldw	r5,-4(fp)
 801229c:	103ee83a 	callr	r2
 80122a0:	00000a06 	br	80122cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80122a4:	e0bfff17 	ldw	r2,-4(fp)
 80122a8:	00c80004 	movi	r3,8192
 80122ac:	10c00115 	stw	r3,4(r2)
      return 0;
 80122b0:	0005883a 	mov	r2,zero
 80122b4:	00000506 	br	80122cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80122b8:	80121e00 	call	80121e0 <alt_get_errno>
 80122bc:	1007883a 	mov	r3,r2
 80122c0:	00801444 	movi	r2,81
 80122c4:	18800015 	stw	r2,0(r3)
    return -1;
 80122c8:	00bfffc4 	movi	r2,-1
  }
}
 80122cc:	e037883a 	mov	sp,fp
 80122d0:	dfc00117 	ldw	ra,4(sp)
 80122d4:	df000017 	ldw	fp,0(sp)
 80122d8:	dec00204 	addi	sp,sp,8
 80122dc:	f800283a 	ret

080122e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80122e0:	defffe04 	addi	sp,sp,-8
 80122e4:	dfc00115 	stw	ra,4(sp)
 80122e8:	df000015 	stw	fp,0(sp)
 80122ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80122f0:	008200b4 	movhi	r2,2050
 80122f4:	1084f704 	addi	r2,r2,5084
 80122f8:	10800017 	ldw	r2,0(r2)
 80122fc:	10000526 	beq	r2,zero,8012314 <alt_get_errno+0x34>
 8012300:	008200b4 	movhi	r2,2050
 8012304:	1084f704 	addi	r2,r2,5084
 8012308:	10800017 	ldw	r2,0(r2)
 801230c:	103ee83a 	callr	r2
 8012310:	00000206 	br	801231c <alt_get_errno+0x3c>
 8012314:	008200b4 	movhi	r2,2050
 8012318:	108bc804 	addi	r2,r2,12064
}
 801231c:	e037883a 	mov	sp,fp
 8012320:	dfc00117 	ldw	ra,4(sp)
 8012324:	df000017 	ldw	fp,0(sp)
 8012328:	dec00204 	addi	sp,sp,8
 801232c:	f800283a 	ret

08012330 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8012330:	deffed04 	addi	sp,sp,-76
 8012334:	dfc01215 	stw	ra,72(sp)
 8012338:	df001115 	stw	fp,68(sp)
 801233c:	df001104 	addi	fp,sp,68
 8012340:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012344:	e0bfff17 	ldw	r2,-4(fp)
 8012348:	10000616 	blt	r2,zero,8012364 <isatty+0x34>
 801234c:	e0bfff17 	ldw	r2,-4(fp)
 8012350:	10c00324 	muli	r3,r2,12
 8012354:	008200b4 	movhi	r2,2050
 8012358:	10806904 	addi	r2,r2,420
 801235c:	1885883a 	add	r2,r3,r2
 8012360:	00000106 	br	8012368 <isatty+0x38>
 8012364:	0005883a 	mov	r2,zero
 8012368:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801236c:	e0bfef17 	ldw	r2,-68(fp)
 8012370:	10000e26 	beq	r2,zero,80123ac <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8012374:	e0bfef17 	ldw	r2,-68(fp)
 8012378:	10800017 	ldw	r2,0(r2)
 801237c:	10800817 	ldw	r2,32(r2)
 8012380:	1000021e 	bne	r2,zero,801238c <isatty+0x5c>
    {
      return 1;
 8012384:	00800044 	movi	r2,1
 8012388:	00000d06 	br	80123c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 801238c:	e0bff004 	addi	r2,fp,-64
 8012390:	e13fff17 	ldw	r4,-4(fp)
 8012394:	100b883a 	mov	r5,r2
 8012398:	80122300 	call	8012230 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 801239c:	e0bff117 	ldw	r2,-60(fp)
 80123a0:	10880020 	cmpeqi	r2,r2,8192
 80123a4:	10803fcc 	andi	r2,r2,255
 80123a8:	00000506 	br	80123c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80123ac:	80122e00 	call	80122e0 <alt_get_errno>
 80123b0:	1007883a 	mov	r3,r2
 80123b4:	00801444 	movi	r2,81
 80123b8:	18800015 	stw	r2,0(r3)
    return 0;
 80123bc:	0005883a 	mov	r2,zero
  }
}
 80123c0:	e037883a 	mov	sp,fp
 80123c4:	dfc00117 	ldw	ra,4(sp)
 80123c8:	df000017 	ldw	fp,0(sp)
 80123cc:	dec00204 	addi	sp,sp,8
 80123d0:	f800283a 	ret

080123d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80123d4:	defffc04 	addi	sp,sp,-16
 80123d8:	df000315 	stw	fp,12(sp)
 80123dc:	df000304 	addi	fp,sp,12
 80123e0:	e13ffd15 	stw	r4,-12(fp)
 80123e4:	e17ffe15 	stw	r5,-8(fp)
 80123e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80123ec:	e0fffe17 	ldw	r3,-8(fp)
 80123f0:	e0bffd17 	ldw	r2,-12(fp)
 80123f4:	18800c26 	beq	r3,r2,8012428 <alt_load_section+0x54>
  {
    while( to != end )
 80123f8:	00000806 	br	801241c <alt_load_section+0x48>
    {
      *to++ = *from++;
 80123fc:	e0bffe17 	ldw	r2,-8(fp)
 8012400:	10c00104 	addi	r3,r2,4
 8012404:	e0fffe15 	stw	r3,-8(fp)
 8012408:	e0fffd17 	ldw	r3,-12(fp)
 801240c:	19000104 	addi	r4,r3,4
 8012410:	e13ffd15 	stw	r4,-12(fp)
 8012414:	18c00017 	ldw	r3,0(r3)
 8012418:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 801241c:	e0fffe17 	ldw	r3,-8(fp)
 8012420:	e0bfff17 	ldw	r2,-4(fp)
 8012424:	18bff51e 	bne	r3,r2,80123fc <__alt_data_end+0xfc0123fc>
    {
      *to++ = *from++;
    }
  }
}
 8012428:	e037883a 	mov	sp,fp
 801242c:	df000017 	ldw	fp,0(sp)
 8012430:	dec00104 	addi	sp,sp,4
 8012434:	f800283a 	ret

08012438 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8012438:	defffe04 	addi	sp,sp,-8
 801243c:	dfc00115 	stw	ra,4(sp)
 8012440:	df000015 	stw	fp,0(sp)
 8012444:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8012448:	010200b4 	movhi	r4,2050
 801244c:	2104fc04 	addi	r4,r4,5104
 8012450:	014200b4 	movhi	r5,2050
 8012454:	297e3604 	addi	r5,r5,-1832
 8012458:	018200b4 	movhi	r6,2050
 801245c:	3184fc04 	addi	r6,r6,5104
 8012460:	80123d40 	call	80123d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8012464:	01020034 	movhi	r4,2048
 8012468:	21000804 	addi	r4,r4,32
 801246c:	01420034 	movhi	r5,2048
 8012470:	29400804 	addi	r5,r5,32
 8012474:	01820034 	movhi	r6,2048
 8012478:	31806f04 	addi	r6,r6,444
 801247c:	80123d40 	call	80123d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8012480:	01020074 	movhi	r4,2049
 8012484:	2113a104 	addi	r4,r4,20100
 8012488:	01420074 	movhi	r5,2049
 801248c:	2953a104 	addi	r5,r5,20100
 8012490:	018200b4 	movhi	r6,2050
 8012494:	31be3604 	addi	r6,r6,-1832
 8012498:	80123d40 	call	80123d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801249c:	8013dcc0 	call	8013dcc <alt_dcache_flush_all>
  alt_icache_flush_all();
 80124a0:	80140240 	call	8014024 <alt_icache_flush_all>
}
 80124a4:	e037883a 	mov	sp,fp
 80124a8:	dfc00117 	ldw	ra,4(sp)
 80124ac:	df000017 	ldw	fp,0(sp)
 80124b0:	dec00204 	addi	sp,sp,8
 80124b4:	f800283a 	ret

080124b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80124b8:	defffe04 	addi	sp,sp,-8
 80124bc:	dfc00115 	stw	ra,4(sp)
 80124c0:	df000015 	stw	fp,0(sp)
 80124c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80124c8:	008200b4 	movhi	r2,2050
 80124cc:	1084f704 	addi	r2,r2,5084
 80124d0:	10800017 	ldw	r2,0(r2)
 80124d4:	10000526 	beq	r2,zero,80124ec <alt_get_errno+0x34>
 80124d8:	008200b4 	movhi	r2,2050
 80124dc:	1084f704 	addi	r2,r2,5084
 80124e0:	10800017 	ldw	r2,0(r2)
 80124e4:	103ee83a 	callr	r2
 80124e8:	00000206 	br	80124f4 <alt_get_errno+0x3c>
 80124ec:	008200b4 	movhi	r2,2050
 80124f0:	108bc804 	addi	r2,r2,12064
}
 80124f4:	e037883a 	mov	sp,fp
 80124f8:	dfc00117 	ldw	ra,4(sp)
 80124fc:	df000017 	ldw	fp,0(sp)
 8012500:	dec00204 	addi	sp,sp,8
 8012504:	f800283a 	ret

08012508 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8012508:	defff904 	addi	sp,sp,-28
 801250c:	dfc00615 	stw	ra,24(sp)
 8012510:	df000515 	stw	fp,20(sp)
 8012514:	df000504 	addi	fp,sp,20
 8012518:	e13ffd15 	stw	r4,-12(fp)
 801251c:	e17ffe15 	stw	r5,-8(fp)
 8012520:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8012524:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012528:	e0bffd17 	ldw	r2,-12(fp)
 801252c:	10000616 	blt	r2,zero,8012548 <lseek+0x40>
 8012530:	e0bffd17 	ldw	r2,-12(fp)
 8012534:	10c00324 	muli	r3,r2,12
 8012538:	008200b4 	movhi	r2,2050
 801253c:	10806904 	addi	r2,r2,420
 8012540:	1885883a 	add	r2,r3,r2
 8012544:	00000106 	br	801254c <lseek+0x44>
 8012548:	0005883a 	mov	r2,zero
 801254c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8012550:	e0bffc17 	ldw	r2,-16(fp)
 8012554:	10001026 	beq	r2,zero,8012598 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8012558:	e0bffc17 	ldw	r2,-16(fp)
 801255c:	10800017 	ldw	r2,0(r2)
 8012560:	10800717 	ldw	r2,28(r2)
 8012564:	10000926 	beq	r2,zero,801258c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8012568:	e0bffc17 	ldw	r2,-16(fp)
 801256c:	10800017 	ldw	r2,0(r2)
 8012570:	10800717 	ldw	r2,28(r2)
 8012574:	e13ffc17 	ldw	r4,-16(fp)
 8012578:	e17ffe17 	ldw	r5,-8(fp)
 801257c:	e1bfff17 	ldw	r6,-4(fp)
 8012580:	103ee83a 	callr	r2
 8012584:	e0bffb15 	stw	r2,-20(fp)
 8012588:	00000506 	br	80125a0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801258c:	00bfde84 	movi	r2,-134
 8012590:	e0bffb15 	stw	r2,-20(fp)
 8012594:	00000206 	br	80125a0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8012598:	00bfebc4 	movi	r2,-81
 801259c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80125a0:	e0bffb17 	ldw	r2,-20(fp)
 80125a4:	1000070e 	bge	r2,zero,80125c4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 80125a8:	80124b80 	call	80124b8 <alt_get_errno>
 80125ac:	1007883a 	mov	r3,r2
 80125b0:	e0bffb17 	ldw	r2,-20(fp)
 80125b4:	0085c83a 	sub	r2,zero,r2
 80125b8:	18800015 	stw	r2,0(r3)
    rc = -1;
 80125bc:	00bfffc4 	movi	r2,-1
 80125c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80125c4:	e0bffb17 	ldw	r2,-20(fp)
}
 80125c8:	e037883a 	mov	sp,fp
 80125cc:	dfc00117 	ldw	ra,4(sp)
 80125d0:	df000017 	ldw	fp,0(sp)
 80125d4:	dec00204 	addi	sp,sp,8
 80125d8:	f800283a 	ret

080125dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80125dc:	defffd04 	addi	sp,sp,-12
 80125e0:	dfc00215 	stw	ra,8(sp)
 80125e4:	df000115 	stw	fp,4(sp)
 80125e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80125ec:	0009883a 	mov	r4,zero
 80125f0:	8012aa00 	call	8012aa0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80125f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80125f8:	8012ad40 	call	8012ad4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80125fc:	010200b4 	movhi	r4,2050
 8012600:	213e2604 	addi	r4,r4,-1896
 8012604:	014200b4 	movhi	r5,2050
 8012608:	297e2604 	addi	r5,r5,-1896
 801260c:	018200b4 	movhi	r6,2050
 8012610:	31be2604 	addi	r6,r6,-1896
 8012614:	80143e40 	call	80143e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8012618:	8013edc0 	call	8013edc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 801261c:	01020074 	movhi	r4,2049
 8012620:	210fce04 	addi	r4,r4,16184
 8012624:	8014ae00 	call	8014ae0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8012628:	d126dd17 	ldw	r4,-25740(gp)
 801262c:	d0e6de17 	ldw	r3,-25736(gp)
 8012630:	d0a6df17 	ldw	r2,-25732(gp)
 8012634:	180b883a 	mov	r5,r3
 8012638:	100d883a 	mov	r6,r2
 801263c:	80026fc0 	call	80026fc <main>
 8012640:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8012644:	01000044 	movi	r4,1
 8012648:	80120e40 	call	80120e4 <close>
  exit (result);
 801264c:	e13fff17 	ldw	r4,-4(fp)
 8012650:	8014af40 	call	8014af4 <exit>

08012654 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8012654:	defffe04 	addi	sp,sp,-8
 8012658:	df000115 	stw	fp,4(sp)
 801265c:	df000104 	addi	fp,sp,4
 8012660:	e13fff15 	stw	r4,-4(fp)
}
 8012664:	e037883a 	mov	sp,fp
 8012668:	df000017 	ldw	fp,0(sp)
 801266c:	dec00104 	addi	sp,sp,4
 8012670:	f800283a 	ret

08012674 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8012674:	defffe04 	addi	sp,sp,-8
 8012678:	df000115 	stw	fp,4(sp)
 801267c:	df000104 	addi	fp,sp,4
 8012680:	e13fff15 	stw	r4,-4(fp)
}
 8012684:	e037883a 	mov	sp,fp
 8012688:	df000017 	ldw	fp,0(sp)
 801268c:	dec00104 	addi	sp,sp,4
 8012690:	f800283a 	ret

08012694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012694:	defffe04 	addi	sp,sp,-8
 8012698:	dfc00115 	stw	ra,4(sp)
 801269c:	df000015 	stw	fp,0(sp)
 80126a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80126a4:	008200b4 	movhi	r2,2050
 80126a8:	1084f704 	addi	r2,r2,5084
 80126ac:	10800017 	ldw	r2,0(r2)
 80126b0:	10000526 	beq	r2,zero,80126c8 <alt_get_errno+0x34>
 80126b4:	008200b4 	movhi	r2,2050
 80126b8:	1084f704 	addi	r2,r2,5084
 80126bc:	10800017 	ldw	r2,0(r2)
 80126c0:	103ee83a 	callr	r2
 80126c4:	00000206 	br	80126d0 <alt_get_errno+0x3c>
 80126c8:	008200b4 	movhi	r2,2050
 80126cc:	108bc804 	addi	r2,r2,12064
}
 80126d0:	e037883a 	mov	sp,fp
 80126d4:	dfc00117 	ldw	ra,4(sp)
 80126d8:	df000017 	ldw	fp,0(sp)
 80126dc:	dec00204 	addi	sp,sp,8
 80126e0:	f800283a 	ret

080126e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80126e4:	defff904 	addi	sp,sp,-28
 80126e8:	dfc00615 	stw	ra,24(sp)
 80126ec:	df000515 	stw	fp,20(sp)
 80126f0:	df000504 	addi	fp,sp,20
 80126f4:	e13ffd15 	stw	r4,-12(fp)
 80126f8:	e17ffe15 	stw	r5,-8(fp)
 80126fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012700:	e0bffd17 	ldw	r2,-12(fp)
 8012704:	10000616 	blt	r2,zero,8012720 <read+0x3c>
 8012708:	e0bffd17 	ldw	r2,-12(fp)
 801270c:	10c00324 	muli	r3,r2,12
 8012710:	008200b4 	movhi	r2,2050
 8012714:	10806904 	addi	r2,r2,420
 8012718:	1885883a 	add	r2,r3,r2
 801271c:	00000106 	br	8012724 <read+0x40>
 8012720:	0005883a 	mov	r2,zero
 8012724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8012728:	e0bffb17 	ldw	r2,-20(fp)
 801272c:	10002226 	beq	r2,zero,80127b8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8012730:	e0bffb17 	ldw	r2,-20(fp)
 8012734:	10800217 	ldw	r2,8(r2)
 8012738:	108000cc 	andi	r2,r2,3
 801273c:	10800060 	cmpeqi	r2,r2,1
 8012740:	1000181e 	bne	r2,zero,80127a4 <read+0xc0>
        (fd->dev->read))
 8012744:	e0bffb17 	ldw	r2,-20(fp)
 8012748:	10800017 	ldw	r2,0(r2)
 801274c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8012750:	10001426 	beq	r2,zero,80127a4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8012754:	e0bffb17 	ldw	r2,-20(fp)
 8012758:	10800017 	ldw	r2,0(r2)
 801275c:	10800517 	ldw	r2,20(r2)
 8012760:	e0ffff17 	ldw	r3,-4(fp)
 8012764:	e13ffb17 	ldw	r4,-20(fp)
 8012768:	e17ffe17 	ldw	r5,-8(fp)
 801276c:	180d883a 	mov	r6,r3
 8012770:	103ee83a 	callr	r2
 8012774:	e0bffc15 	stw	r2,-16(fp)
 8012778:	e0bffc17 	ldw	r2,-16(fp)
 801277c:	1000070e 	bge	r2,zero,801279c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8012780:	80126940 	call	8012694 <alt_get_errno>
 8012784:	1007883a 	mov	r3,r2
 8012788:	e0bffc17 	ldw	r2,-16(fp)
 801278c:	0085c83a 	sub	r2,zero,r2
 8012790:	18800015 	stw	r2,0(r3)
          return -1;
 8012794:	00bfffc4 	movi	r2,-1
 8012798:	00000c06 	br	80127cc <read+0xe8>
        }
        return rval;
 801279c:	e0bffc17 	ldw	r2,-16(fp)
 80127a0:	00000a06 	br	80127cc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 80127a4:	80126940 	call	8012694 <alt_get_errno>
 80127a8:	1007883a 	mov	r3,r2
 80127ac:	00800344 	movi	r2,13
 80127b0:	18800015 	stw	r2,0(r3)
 80127b4:	00000406 	br	80127c8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80127b8:	80126940 	call	8012694 <alt_get_errno>
 80127bc:	1007883a 	mov	r3,r2
 80127c0:	00801444 	movi	r2,81
 80127c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80127c8:	00bfffc4 	movi	r2,-1
}
 80127cc:	e037883a 	mov	sp,fp
 80127d0:	dfc00117 	ldw	ra,4(sp)
 80127d4:	df000017 	ldw	fp,0(sp)
 80127d8:	dec00204 	addi	sp,sp,8
 80127dc:	f800283a 	ret

080127e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80127e0:	defffe04 	addi	sp,sp,-8
 80127e4:	df000115 	stw	fp,4(sp)
 80127e8:	df000104 	addi	fp,sp,4
 80127ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 80127f0:	e0bfff17 	ldw	r2,-4(fp)
 80127f4:	108000d0 	cmplti	r2,r2,3
 80127f8:	10000d1e 	bne	r2,zero,8012830 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80127fc:	008200b4 	movhi	r2,2050
 8012800:	10806904 	addi	r2,r2,420
 8012804:	e0ffff17 	ldw	r3,-4(fp)
 8012808:	18c00324 	muli	r3,r3,12
 801280c:	10c5883a 	add	r2,r2,r3
 8012810:	10800204 	addi	r2,r2,8
 8012814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8012818:	008200b4 	movhi	r2,2050
 801281c:	10806904 	addi	r2,r2,420
 8012820:	e0ffff17 	ldw	r3,-4(fp)
 8012824:	18c00324 	muli	r3,r3,12
 8012828:	10c5883a 	add	r2,r2,r3
 801282c:	10000015 	stw	zero,0(r2)
  }
}
 8012830:	e037883a 	mov	sp,fp
 8012834:	df000017 	ldw	fp,0(sp)
 8012838:	dec00104 	addi	sp,sp,4
 801283c:	f800283a 	ret

08012840 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8012840:	defff904 	addi	sp,sp,-28
 8012844:	df000615 	stw	fp,24(sp)
 8012848:	df000604 	addi	fp,sp,24
 801284c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012850:	0005303a 	rdctl	r2,status
 8012854:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012858:	e0fffc17 	ldw	r3,-16(fp)
 801285c:	00bfff84 	movi	r2,-2
 8012860:	1884703a 	and	r2,r3,r2
 8012864:	1001703a 	wrctl	status,r2
  
  return context;
 8012868:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 801286c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8012870:	d0a00c17 	ldw	r2,-32720(gp)
 8012874:	10c000c4 	addi	r3,r2,3
 8012878:	00bfff04 	movi	r2,-4
 801287c:	1884703a 	and	r2,r3,r2
 8012880:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8012884:	d0e00c17 	ldw	r3,-32720(gp)
 8012888:	e0bfff17 	ldw	r2,-4(fp)
 801288c:	1887883a 	add	r3,r3,r2
 8012890:	00830034 	movhi	r2,3072
 8012894:	10800004 	addi	r2,r2,0
 8012898:	10c0062e 	bgeu	r2,r3,80128b4 <sbrk+0x74>
 801289c:	e0bffa17 	ldw	r2,-24(fp)
 80128a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80128a4:	e0bffd17 	ldw	r2,-12(fp)
 80128a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80128ac:	00bfffc4 	movi	r2,-1
 80128b0:	00000b06 	br	80128e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80128b4:	d0a00c17 	ldw	r2,-32720(gp)
 80128b8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 80128bc:	d0e00c17 	ldw	r3,-32720(gp)
 80128c0:	e0bfff17 	ldw	r2,-4(fp)
 80128c4:	1885883a 	add	r2,r3,r2
 80128c8:	d0a00c15 	stw	r2,-32720(gp)
 80128cc:	e0bffa17 	ldw	r2,-24(fp)
 80128d0:	e0bffe15 	stw	r2,-8(fp)
 80128d4:	e0bffe17 	ldw	r2,-8(fp)
 80128d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80128dc:	e0bffb17 	ldw	r2,-20(fp)
} 
 80128e0:	e037883a 	mov	sp,fp
 80128e4:	df000017 	ldw	fp,0(sp)
 80128e8:	dec00104 	addi	sp,sp,4
 80128ec:	f800283a 	ret

080128f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80128f0:	defffd04 	addi	sp,sp,-12
 80128f4:	dfc00215 	stw	ra,8(sp)
 80128f8:	df000115 	stw	fp,4(sp)
 80128fc:	df000104 	addi	fp,sp,4
 8012900:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8012904:	e13fff17 	ldw	r4,-4(fp)
 8012908:	8013ca40 	call	8013ca4 <alt_busy_sleep>
}
 801290c:	e037883a 	mov	sp,fp
 8012910:	dfc00117 	ldw	ra,4(sp)
 8012914:	df000017 	ldw	fp,0(sp)
 8012918:	dec00204 	addi	sp,sp,8
 801291c:	f800283a 	ret

08012920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012920:	defffe04 	addi	sp,sp,-8
 8012924:	dfc00115 	stw	ra,4(sp)
 8012928:	df000015 	stw	fp,0(sp)
 801292c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012930:	008200b4 	movhi	r2,2050
 8012934:	1084f704 	addi	r2,r2,5084
 8012938:	10800017 	ldw	r2,0(r2)
 801293c:	10000526 	beq	r2,zero,8012954 <alt_get_errno+0x34>
 8012940:	008200b4 	movhi	r2,2050
 8012944:	1084f704 	addi	r2,r2,5084
 8012948:	10800017 	ldw	r2,0(r2)
 801294c:	103ee83a 	callr	r2
 8012950:	00000206 	br	801295c <alt_get_errno+0x3c>
 8012954:	008200b4 	movhi	r2,2050
 8012958:	108bc804 	addi	r2,r2,12064
}
 801295c:	e037883a 	mov	sp,fp
 8012960:	dfc00117 	ldw	ra,4(sp)
 8012964:	df000017 	ldw	fp,0(sp)
 8012968:	dec00204 	addi	sp,sp,8
 801296c:	f800283a 	ret

08012970 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8012970:	defff904 	addi	sp,sp,-28
 8012974:	dfc00615 	stw	ra,24(sp)
 8012978:	df000515 	stw	fp,20(sp)
 801297c:	df000504 	addi	fp,sp,20
 8012980:	e13ffd15 	stw	r4,-12(fp)
 8012984:	e17ffe15 	stw	r5,-8(fp)
 8012988:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801298c:	e0bffd17 	ldw	r2,-12(fp)
 8012990:	10000616 	blt	r2,zero,80129ac <write+0x3c>
 8012994:	e0bffd17 	ldw	r2,-12(fp)
 8012998:	10c00324 	muli	r3,r2,12
 801299c:	008200b4 	movhi	r2,2050
 80129a0:	10806904 	addi	r2,r2,420
 80129a4:	1885883a 	add	r2,r3,r2
 80129a8:	00000106 	br	80129b0 <write+0x40>
 80129ac:	0005883a 	mov	r2,zero
 80129b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80129b4:	e0bffb17 	ldw	r2,-20(fp)
 80129b8:	10002126 	beq	r2,zero,8012a40 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80129bc:	e0bffb17 	ldw	r2,-20(fp)
 80129c0:	10800217 	ldw	r2,8(r2)
 80129c4:	108000cc 	andi	r2,r2,3
 80129c8:	10001826 	beq	r2,zero,8012a2c <write+0xbc>
 80129cc:	e0bffb17 	ldw	r2,-20(fp)
 80129d0:	10800017 	ldw	r2,0(r2)
 80129d4:	10800617 	ldw	r2,24(r2)
 80129d8:	10001426 	beq	r2,zero,8012a2c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80129dc:	e0bffb17 	ldw	r2,-20(fp)
 80129e0:	10800017 	ldw	r2,0(r2)
 80129e4:	10800617 	ldw	r2,24(r2)
 80129e8:	e0ffff17 	ldw	r3,-4(fp)
 80129ec:	e13ffb17 	ldw	r4,-20(fp)
 80129f0:	e17ffe17 	ldw	r5,-8(fp)
 80129f4:	180d883a 	mov	r6,r3
 80129f8:	103ee83a 	callr	r2
 80129fc:	e0bffc15 	stw	r2,-16(fp)
 8012a00:	e0bffc17 	ldw	r2,-16(fp)
 8012a04:	1000070e 	bge	r2,zero,8012a24 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8012a08:	80129200 	call	8012920 <alt_get_errno>
 8012a0c:	1007883a 	mov	r3,r2
 8012a10:	e0bffc17 	ldw	r2,-16(fp)
 8012a14:	0085c83a 	sub	r2,zero,r2
 8012a18:	18800015 	stw	r2,0(r3)
        return -1;
 8012a1c:	00bfffc4 	movi	r2,-1
 8012a20:	00000c06 	br	8012a54 <write+0xe4>
      }
      return rval;
 8012a24:	e0bffc17 	ldw	r2,-16(fp)
 8012a28:	00000a06 	br	8012a54 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8012a2c:	80129200 	call	8012920 <alt_get_errno>
 8012a30:	1007883a 	mov	r3,r2
 8012a34:	00800344 	movi	r2,13
 8012a38:	18800015 	stw	r2,0(r3)
 8012a3c:	00000406 	br	8012a50 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8012a40:	80129200 	call	8012920 <alt_get_errno>
 8012a44:	1007883a 	mov	r3,r2
 8012a48:	00801444 	movi	r2,81
 8012a4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8012a50:	00bfffc4 	movi	r2,-1
}
 8012a54:	e037883a 	mov	sp,fp
 8012a58:	dfc00117 	ldw	ra,4(sp)
 8012a5c:	df000017 	ldw	fp,0(sp)
 8012a60:	dec00204 	addi	sp,sp,8
 8012a64:	f800283a 	ret

08012a68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8012a68:	defffd04 	addi	sp,sp,-12
 8012a6c:	dfc00215 	stw	ra,8(sp)
 8012a70:	df000115 	stw	fp,4(sp)
 8012a74:	df000104 	addi	fp,sp,4
 8012a78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8012a7c:	e13fff17 	ldw	r4,-4(fp)
 8012a80:	014200b4 	movhi	r5,2050
 8012a84:	2944f404 	addi	r5,r5,5072
 8012a88:	8013e380 	call	8013e38 <alt_dev_llist_insert>
}
 8012a8c:	e037883a 	mov	sp,fp
 8012a90:	dfc00117 	ldw	ra,4(sp)
 8012a94:	df000017 	ldw	fp,0(sp)
 8012a98:	dec00204 	addi	sp,sp,8
 8012a9c:	f800283a 	ret

08012aa0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8012aa0:	defffd04 	addi	sp,sp,-12
 8012aa4:	dfc00215 	stw	ra,8(sp)
 8012aa8:	df000115 	stw	fp,4(sp)
 8012aac:	df000104 	addi	fp,sp,4
 8012ab0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8012ab4:	801486c0 	call	801486c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8012ab8:	00800044 	movi	r2,1
 8012abc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8012ac0:	e037883a 	mov	sp,fp
 8012ac4:	dfc00117 	ldw	ra,4(sp)
 8012ac8:	df000017 	ldw	fp,0(sp)
 8012acc:	dec00204 	addi	sp,sp,8
 8012ad0:	f800283a 	ret

08012ad4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8012ad4:	defffe04 	addi	sp,sp,-8
 8012ad8:	dfc00115 	stw	ra,4(sp)
 8012adc:	df000015 	stw	fp,0(sp)
 8012ae0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8012ae4:	01082004 	movi	r4,8320
 8012ae8:	000b883a 	mov	r5,zero
 8012aec:	01800104 	movi	r6,4
 8012af0:	01c0fa04 	movi	r7,1000
 8012af4:	80136040 	call	8013604 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8012af8:	010200b4 	movhi	r4,2050
 8012afc:	2100d304 	addi	r4,r4,844
 8012b00:	000b883a 	mov	r5,zero
 8012b04:	01800144 	movi	r6,5
 8012b08:	8012ca80 	call	8012ca8 <altera_avalon_jtag_uart_init>
 8012b0c:	010200b4 	movhi	r4,2050
 8012b10:	2100c904 	addi	r4,r4,804
 8012b14:	8012a680 	call	8012a68 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8012b18:	010200b4 	movhi	r4,2050
 8012b1c:	2104e104 	addi	r4,r4,4996
 8012b20:	801373c0 	call	801373c <alt_up_character_lcd_init>
 8012b24:	010200b4 	movhi	r4,2050
 8012b28:	2104e104 	addi	r4,r4,4996
 8012b2c:	8012a680 	call	8012a68 <alt_dev_reg>
}
 8012b30:	e037883a 	mov	sp,fp
 8012b34:	dfc00117 	ldw	ra,4(sp)
 8012b38:	df000017 	ldw	fp,0(sp)
 8012b3c:	dec00204 	addi	sp,sp,8
 8012b40:	f800283a 	ret

08012b44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8012b44:	defffa04 	addi	sp,sp,-24
 8012b48:	dfc00515 	stw	ra,20(sp)
 8012b4c:	df000415 	stw	fp,16(sp)
 8012b50:	df000404 	addi	fp,sp,16
 8012b54:	e13ffd15 	stw	r4,-12(fp)
 8012b58:	e17ffe15 	stw	r5,-8(fp)
 8012b5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8012b60:	e0bffd17 	ldw	r2,-12(fp)
 8012b64:	10800017 	ldw	r2,0(r2)
 8012b68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8012b6c:	e0bffc17 	ldw	r2,-16(fp)
 8012b70:	10c00a04 	addi	r3,r2,40
 8012b74:	e0bffd17 	ldw	r2,-12(fp)
 8012b78:	10800217 	ldw	r2,8(r2)
 8012b7c:	1809883a 	mov	r4,r3
 8012b80:	e17ffe17 	ldw	r5,-8(fp)
 8012b84:	e1bfff17 	ldw	r6,-4(fp)
 8012b88:	100f883a 	mov	r7,r2
 8012b8c:	801316c0 	call	801316c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8012b90:	e037883a 	mov	sp,fp
 8012b94:	dfc00117 	ldw	ra,4(sp)
 8012b98:	df000017 	ldw	fp,0(sp)
 8012b9c:	dec00204 	addi	sp,sp,8
 8012ba0:	f800283a 	ret

08012ba4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8012ba4:	defffa04 	addi	sp,sp,-24
 8012ba8:	dfc00515 	stw	ra,20(sp)
 8012bac:	df000415 	stw	fp,16(sp)
 8012bb0:	df000404 	addi	fp,sp,16
 8012bb4:	e13ffd15 	stw	r4,-12(fp)
 8012bb8:	e17ffe15 	stw	r5,-8(fp)
 8012bbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8012bc0:	e0bffd17 	ldw	r2,-12(fp)
 8012bc4:	10800017 	ldw	r2,0(r2)
 8012bc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8012bcc:	e0bffc17 	ldw	r2,-16(fp)
 8012bd0:	10c00a04 	addi	r3,r2,40
 8012bd4:	e0bffd17 	ldw	r2,-12(fp)
 8012bd8:	10800217 	ldw	r2,8(r2)
 8012bdc:	1809883a 	mov	r4,r3
 8012be0:	e17ffe17 	ldw	r5,-8(fp)
 8012be4:	e1bfff17 	ldw	r6,-4(fp)
 8012be8:	100f883a 	mov	r7,r2
 8012bec:	80133780 	call	8013378 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8012bf0:	e037883a 	mov	sp,fp
 8012bf4:	dfc00117 	ldw	ra,4(sp)
 8012bf8:	df000017 	ldw	fp,0(sp)
 8012bfc:	dec00204 	addi	sp,sp,8
 8012c00:	f800283a 	ret

08012c04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8012c04:	defffc04 	addi	sp,sp,-16
 8012c08:	dfc00315 	stw	ra,12(sp)
 8012c0c:	df000215 	stw	fp,8(sp)
 8012c10:	df000204 	addi	fp,sp,8
 8012c14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8012c18:	e0bfff17 	ldw	r2,-4(fp)
 8012c1c:	10800017 	ldw	r2,0(r2)
 8012c20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8012c24:	e0bffe17 	ldw	r2,-8(fp)
 8012c28:	10c00a04 	addi	r3,r2,40
 8012c2c:	e0bfff17 	ldw	r2,-4(fp)
 8012c30:	10800217 	ldw	r2,8(r2)
 8012c34:	1809883a 	mov	r4,r3
 8012c38:	100b883a 	mov	r5,r2
 8012c3c:	80130180 	call	8013018 <altera_avalon_jtag_uart_close>
}
 8012c40:	e037883a 	mov	sp,fp
 8012c44:	dfc00117 	ldw	ra,4(sp)
 8012c48:	df000017 	ldw	fp,0(sp)
 8012c4c:	dec00204 	addi	sp,sp,8
 8012c50:	f800283a 	ret

08012c54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8012c54:	defffa04 	addi	sp,sp,-24
 8012c58:	dfc00515 	stw	ra,20(sp)
 8012c5c:	df000415 	stw	fp,16(sp)
 8012c60:	df000404 	addi	fp,sp,16
 8012c64:	e13ffd15 	stw	r4,-12(fp)
 8012c68:	e17ffe15 	stw	r5,-8(fp)
 8012c6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8012c70:	e0bffd17 	ldw	r2,-12(fp)
 8012c74:	10800017 	ldw	r2,0(r2)
 8012c78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8012c7c:	e0bffc17 	ldw	r2,-16(fp)
 8012c80:	10800a04 	addi	r2,r2,40
 8012c84:	1009883a 	mov	r4,r2
 8012c88:	e17ffe17 	ldw	r5,-8(fp)
 8012c8c:	e1bfff17 	ldw	r6,-4(fp)
 8012c90:	80130800 	call	8013080 <altera_avalon_jtag_uart_ioctl>
}
 8012c94:	e037883a 	mov	sp,fp
 8012c98:	dfc00117 	ldw	ra,4(sp)
 8012c9c:	df000017 	ldw	fp,0(sp)
 8012ca0:	dec00204 	addi	sp,sp,8
 8012ca4:	f800283a 	ret

08012ca8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8012ca8:	defffa04 	addi	sp,sp,-24
 8012cac:	dfc00515 	stw	ra,20(sp)
 8012cb0:	df000415 	stw	fp,16(sp)
 8012cb4:	df000404 	addi	fp,sp,16
 8012cb8:	e13ffd15 	stw	r4,-12(fp)
 8012cbc:	e17ffe15 	stw	r5,-8(fp)
 8012cc0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8012cc4:	e0bffd17 	ldw	r2,-12(fp)
 8012cc8:	00c00044 	movi	r3,1
 8012ccc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8012cd0:	e0bffd17 	ldw	r2,-12(fp)
 8012cd4:	10800017 	ldw	r2,0(r2)
 8012cd8:	10800104 	addi	r2,r2,4
 8012cdc:	1007883a 	mov	r3,r2
 8012ce0:	e0bffd17 	ldw	r2,-12(fp)
 8012ce4:	10800817 	ldw	r2,32(r2)
 8012ce8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8012cec:	e0fffe17 	ldw	r3,-8(fp)
 8012cf0:	e0bfff17 	ldw	r2,-4(fp)
 8012cf4:	d8000015 	stw	zero,0(sp)
 8012cf8:	1809883a 	mov	r4,r3
 8012cfc:	100b883a 	mov	r5,r2
 8012d00:	01820074 	movhi	r6,2049
 8012d04:	318b5b04 	addi	r6,r6,11628
 8012d08:	e1fffd17 	ldw	r7,-12(fp)
 8012d0c:	80140540 	call	8014054 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8012d10:	e0bffd17 	ldw	r2,-12(fp)
 8012d14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8012d18:	e0bffd17 	ldw	r2,-12(fp)
 8012d1c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8012d20:	008200b4 	movhi	r2,2050
 8012d24:	108bcd04 	addi	r2,r2,12084
 8012d28:	10800017 	ldw	r2,0(r2)
 8012d2c:	1809883a 	mov	r4,r3
 8012d30:	100b883a 	mov	r5,r2
 8012d34:	01820074 	movhi	r6,2049
 8012d38:	318bdc04 	addi	r6,r6,12144
 8012d3c:	e1fffd17 	ldw	r7,-12(fp)
 8012d40:	8013b640 	call	8013b64 <alt_alarm_start>
 8012d44:	1000040e 	bge	r2,zero,8012d58 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8012d48:	e0fffd17 	ldw	r3,-12(fp)
 8012d4c:	00a00034 	movhi	r2,32768
 8012d50:	10bfffc4 	addi	r2,r2,-1
 8012d54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8012d58:	e037883a 	mov	sp,fp
 8012d5c:	dfc00117 	ldw	ra,4(sp)
 8012d60:	df000017 	ldw	fp,0(sp)
 8012d64:	dec00204 	addi	sp,sp,8
 8012d68:	f800283a 	ret

08012d6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8012d6c:	defff804 	addi	sp,sp,-32
 8012d70:	df000715 	stw	fp,28(sp)
 8012d74:	df000704 	addi	fp,sp,28
 8012d78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8012d7c:	e0bfff17 	ldw	r2,-4(fp)
 8012d80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8012d84:	e0bffb17 	ldw	r2,-20(fp)
 8012d88:	10800017 	ldw	r2,0(r2)
 8012d8c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012d90:	e0bffc17 	ldw	r2,-16(fp)
 8012d94:	10800104 	addi	r2,r2,4
 8012d98:	10800037 	ldwio	r2,0(r2)
 8012d9c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8012da0:	e0bffd17 	ldw	r2,-12(fp)
 8012da4:	1080c00c 	andi	r2,r2,768
 8012da8:	1000011e 	bne	r2,zero,8012db0 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8012dac:	00006c06 	br	8012f60 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8012db0:	e0bffd17 	ldw	r2,-12(fp)
 8012db4:	1080400c 	andi	r2,r2,256
 8012db8:	10003426 	beq	r2,zero,8012e8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8012dbc:	00800074 	movhi	r2,1
 8012dc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012dc4:	e0bffb17 	ldw	r2,-20(fp)
 8012dc8:	10800a17 	ldw	r2,40(r2)
 8012dcc:	10800044 	addi	r2,r2,1
 8012dd0:	1081ffcc 	andi	r2,r2,2047
 8012dd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8012dd8:	e0bffb17 	ldw	r2,-20(fp)
 8012ddc:	10c00b17 	ldw	r3,44(r2)
 8012de0:	e0bffe17 	ldw	r2,-8(fp)
 8012de4:	1880011e 	bne	r3,r2,8012dec <altera_avalon_jtag_uart_irq+0x80>
          break;
 8012de8:	00001606 	br	8012e44 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8012dec:	e0bffc17 	ldw	r2,-16(fp)
 8012df0:	10800037 	ldwio	r2,0(r2)
 8012df4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8012df8:	e0bff917 	ldw	r2,-28(fp)
 8012dfc:	10a0000c 	andi	r2,r2,32768
 8012e00:	1000011e 	bne	r2,zero,8012e08 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8012e04:	00000f06 	br	8012e44 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8012e08:	e0bffb17 	ldw	r2,-20(fp)
 8012e0c:	10800a17 	ldw	r2,40(r2)
 8012e10:	e0fff917 	ldw	r3,-28(fp)
 8012e14:	1809883a 	mov	r4,r3
 8012e18:	e0fffb17 	ldw	r3,-20(fp)
 8012e1c:	1885883a 	add	r2,r3,r2
 8012e20:	10800e04 	addi	r2,r2,56
 8012e24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012e28:	e0bffb17 	ldw	r2,-20(fp)
 8012e2c:	10800a17 	ldw	r2,40(r2)
 8012e30:	10800044 	addi	r2,r2,1
 8012e34:	10c1ffcc 	andi	r3,r2,2047
 8012e38:	e0bffb17 	ldw	r2,-20(fp)
 8012e3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8012e40:	003fe006 	br	8012dc4 <__alt_data_end+0xfc012dc4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8012e44:	e0bff917 	ldw	r2,-28(fp)
 8012e48:	10bfffec 	andhi	r2,r2,65535
 8012e4c:	10000f26 	beq	r2,zero,8012e8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8012e50:	e0bffb17 	ldw	r2,-20(fp)
 8012e54:	10c00817 	ldw	r3,32(r2)
 8012e58:	00bfff84 	movi	r2,-2
 8012e5c:	1886703a 	and	r3,r3,r2
 8012e60:	e0bffb17 	ldw	r2,-20(fp)
 8012e64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8012e68:	e0bffc17 	ldw	r2,-16(fp)
 8012e6c:	10800104 	addi	r2,r2,4
 8012e70:	1007883a 	mov	r3,r2
 8012e74:	e0bffb17 	ldw	r2,-20(fp)
 8012e78:	10800817 	ldw	r2,32(r2)
 8012e7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012e80:	e0bffc17 	ldw	r2,-16(fp)
 8012e84:	10800104 	addi	r2,r2,4
 8012e88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8012e8c:	e0bffd17 	ldw	r2,-12(fp)
 8012e90:	1080800c 	andi	r2,r2,512
 8012e94:	10003126 	beq	r2,zero,8012f5c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8012e98:	e0bffd17 	ldw	r2,-12(fp)
 8012e9c:	1004d43a 	srli	r2,r2,16
 8012ea0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8012ea4:	00001406 	br	8012ef8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8012ea8:	e0bffc17 	ldw	r2,-16(fp)
 8012eac:	e0fffb17 	ldw	r3,-20(fp)
 8012eb0:	18c00d17 	ldw	r3,52(r3)
 8012eb4:	e13ffb17 	ldw	r4,-20(fp)
 8012eb8:	20c7883a 	add	r3,r4,r3
 8012ebc:	18c20e04 	addi	r3,r3,2104
 8012ec0:	18c00003 	ldbu	r3,0(r3)
 8012ec4:	18c03fcc 	andi	r3,r3,255
 8012ec8:	18c0201c 	xori	r3,r3,128
 8012ecc:	18ffe004 	addi	r3,r3,-128
 8012ed0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8012ed4:	e0bffb17 	ldw	r2,-20(fp)
 8012ed8:	10800d17 	ldw	r2,52(r2)
 8012edc:	10800044 	addi	r2,r2,1
 8012ee0:	10c1ffcc 	andi	r3,r2,2047
 8012ee4:	e0bffb17 	ldw	r2,-20(fp)
 8012ee8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8012eec:	e0bffa17 	ldw	r2,-24(fp)
 8012ef0:	10bfffc4 	addi	r2,r2,-1
 8012ef4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8012ef8:	e0bffa17 	ldw	r2,-24(fp)
 8012efc:	10000526 	beq	r2,zero,8012f14 <altera_avalon_jtag_uart_irq+0x1a8>
 8012f00:	e0bffb17 	ldw	r2,-20(fp)
 8012f04:	10c00d17 	ldw	r3,52(r2)
 8012f08:	e0bffb17 	ldw	r2,-20(fp)
 8012f0c:	10800c17 	ldw	r2,48(r2)
 8012f10:	18bfe51e 	bne	r3,r2,8012ea8 <__alt_data_end+0xfc012ea8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8012f14:	e0bffa17 	ldw	r2,-24(fp)
 8012f18:	10001026 	beq	r2,zero,8012f5c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8012f1c:	e0bffb17 	ldw	r2,-20(fp)
 8012f20:	10c00817 	ldw	r3,32(r2)
 8012f24:	00bfff44 	movi	r2,-3
 8012f28:	1886703a 	and	r3,r3,r2
 8012f2c:	e0bffb17 	ldw	r2,-20(fp)
 8012f30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8012f34:	e0bffb17 	ldw	r2,-20(fp)
 8012f38:	10800017 	ldw	r2,0(r2)
 8012f3c:	10800104 	addi	r2,r2,4
 8012f40:	1007883a 	mov	r3,r2
 8012f44:	e0bffb17 	ldw	r2,-20(fp)
 8012f48:	10800817 	ldw	r2,32(r2)
 8012f4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8012f50:	e0bffc17 	ldw	r2,-16(fp)
 8012f54:	10800104 	addi	r2,r2,4
 8012f58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8012f5c:	003f8c06 	br	8012d90 <__alt_data_end+0xfc012d90>
}
 8012f60:	e037883a 	mov	sp,fp
 8012f64:	df000017 	ldw	fp,0(sp)
 8012f68:	dec00104 	addi	sp,sp,4
 8012f6c:	f800283a 	ret

08012f70 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8012f70:	defff804 	addi	sp,sp,-32
 8012f74:	df000715 	stw	fp,28(sp)
 8012f78:	df000704 	addi	fp,sp,28
 8012f7c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8012f80:	e0bffb17 	ldw	r2,-20(fp)
 8012f84:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8012f88:	e0bff917 	ldw	r2,-28(fp)
 8012f8c:	10800017 	ldw	r2,0(r2)
 8012f90:	10800104 	addi	r2,r2,4
 8012f94:	10800037 	ldwio	r2,0(r2)
 8012f98:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8012f9c:	e0bffa17 	ldw	r2,-24(fp)
 8012fa0:	1081000c 	andi	r2,r2,1024
 8012fa4:	10000b26 	beq	r2,zero,8012fd4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8012fa8:	e0bff917 	ldw	r2,-28(fp)
 8012fac:	10800017 	ldw	r2,0(r2)
 8012fb0:	10800104 	addi	r2,r2,4
 8012fb4:	1007883a 	mov	r3,r2
 8012fb8:	e0bff917 	ldw	r2,-28(fp)
 8012fbc:	10800817 	ldw	r2,32(r2)
 8012fc0:	10810014 	ori	r2,r2,1024
 8012fc4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8012fc8:	e0bff917 	ldw	r2,-28(fp)
 8012fcc:	10000915 	stw	zero,36(r2)
 8012fd0:	00000a06 	br	8012ffc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8012fd4:	e0bff917 	ldw	r2,-28(fp)
 8012fd8:	10c00917 	ldw	r3,36(r2)
 8012fdc:	00a00034 	movhi	r2,32768
 8012fe0:	10bfff04 	addi	r2,r2,-4
 8012fe4:	10c00536 	bltu	r2,r3,8012ffc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8012fe8:	e0bff917 	ldw	r2,-28(fp)
 8012fec:	10800917 	ldw	r2,36(r2)
 8012ff0:	10c00044 	addi	r3,r2,1
 8012ff4:	e0bff917 	ldw	r2,-28(fp)
 8012ff8:	10c00915 	stw	r3,36(r2)
 8012ffc:	008200b4 	movhi	r2,2050
 8013000:	108bcd04 	addi	r2,r2,12084
 8013004:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8013008:	e037883a 	mov	sp,fp
 801300c:	df000017 	ldw	fp,0(sp)
 8013010:	dec00104 	addi	sp,sp,4
 8013014:	f800283a 	ret

08013018 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8013018:	defffd04 	addi	sp,sp,-12
 801301c:	df000215 	stw	fp,8(sp)
 8013020:	df000204 	addi	fp,sp,8
 8013024:	e13ffe15 	stw	r4,-8(fp)
 8013028:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801302c:	00000506 	br	8013044 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8013030:	e0bfff17 	ldw	r2,-4(fp)
 8013034:	1090000c 	andi	r2,r2,16384
 8013038:	10000226 	beq	r2,zero,8013044 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801303c:	00bffd44 	movi	r2,-11
 8013040:	00000b06 	br	8013070 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013044:	e0bffe17 	ldw	r2,-8(fp)
 8013048:	10c00d17 	ldw	r3,52(r2)
 801304c:	e0bffe17 	ldw	r2,-8(fp)
 8013050:	10800c17 	ldw	r2,48(r2)
 8013054:	18800526 	beq	r3,r2,801306c <altera_avalon_jtag_uart_close+0x54>
 8013058:	e0bffe17 	ldw	r2,-8(fp)
 801305c:	10c00917 	ldw	r3,36(r2)
 8013060:	e0bffe17 	ldw	r2,-8(fp)
 8013064:	10800117 	ldw	r2,4(r2)
 8013068:	18bff136 	bltu	r3,r2,8013030 <__alt_data_end+0xfc013030>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801306c:	0005883a 	mov	r2,zero
}
 8013070:	e037883a 	mov	sp,fp
 8013074:	df000017 	ldw	fp,0(sp)
 8013078:	dec00104 	addi	sp,sp,4
 801307c:	f800283a 	ret

08013080 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8013080:	defffa04 	addi	sp,sp,-24
 8013084:	df000515 	stw	fp,20(sp)
 8013088:	df000504 	addi	fp,sp,20
 801308c:	e13ffd15 	stw	r4,-12(fp)
 8013090:	e17ffe15 	stw	r5,-8(fp)
 8013094:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8013098:	00bff9c4 	movi	r2,-25
 801309c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80130a0:	e0bffe17 	ldw	r2,-8(fp)
 80130a4:	10da8060 	cmpeqi	r3,r2,27137
 80130a8:	1800031e 	bne	r3,zero,80130b8 <altera_avalon_jtag_uart_ioctl+0x38>
 80130ac:	109a80a0 	cmpeqi	r2,r2,27138
 80130b0:	1000191e 	bne	r2,zero,8013118 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80130b4:	00002806 	br	8013158 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80130b8:	e0bffd17 	ldw	r2,-12(fp)
 80130bc:	10c00117 	ldw	r3,4(r2)
 80130c0:	00a00034 	movhi	r2,32768
 80130c4:	10bfffc4 	addi	r2,r2,-1
 80130c8:	18801226 	beq	r3,r2,8013114 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 80130cc:	e0bfff17 	ldw	r2,-4(fp)
 80130d0:	10800017 	ldw	r2,0(r2)
 80130d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80130d8:	e0bffc17 	ldw	r2,-16(fp)
 80130dc:	10800090 	cmplti	r2,r2,2
 80130e0:	1000061e 	bne	r2,zero,80130fc <altera_avalon_jtag_uart_ioctl+0x7c>
 80130e4:	e0fffc17 	ldw	r3,-16(fp)
 80130e8:	00a00034 	movhi	r2,32768
 80130ec:	10bfffc4 	addi	r2,r2,-1
 80130f0:	18800226 	beq	r3,r2,80130fc <altera_avalon_jtag_uart_ioctl+0x7c>
 80130f4:	e0bffc17 	ldw	r2,-16(fp)
 80130f8:	00000206 	br	8013104 <altera_avalon_jtag_uart_ioctl+0x84>
 80130fc:	00a00034 	movhi	r2,32768
 8013100:	10bfff84 	addi	r2,r2,-2
 8013104:	e0fffd17 	ldw	r3,-12(fp)
 8013108:	18800115 	stw	r2,4(r3)
      rc = 0;
 801310c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013110:	00001106 	br	8013158 <altera_avalon_jtag_uart_ioctl+0xd8>
 8013114:	00001006 	br	8013158 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8013118:	e0bffd17 	ldw	r2,-12(fp)
 801311c:	10c00117 	ldw	r3,4(r2)
 8013120:	00a00034 	movhi	r2,32768
 8013124:	10bfffc4 	addi	r2,r2,-1
 8013128:	18800a26 	beq	r3,r2,8013154 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801312c:	e0bffd17 	ldw	r2,-12(fp)
 8013130:	10c00917 	ldw	r3,36(r2)
 8013134:	e0bffd17 	ldw	r2,-12(fp)
 8013138:	10800117 	ldw	r2,4(r2)
 801313c:	1885803a 	cmpltu	r2,r3,r2
 8013140:	10c03fcc 	andi	r3,r2,255
 8013144:	e0bfff17 	ldw	r2,-4(fp)
 8013148:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801314c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013150:	00000006 	br	8013154 <altera_avalon_jtag_uart_ioctl+0xd4>
 8013154:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8013158:	e0bffb17 	ldw	r2,-20(fp)
}
 801315c:	e037883a 	mov	sp,fp
 8013160:	df000017 	ldw	fp,0(sp)
 8013164:	dec00104 	addi	sp,sp,4
 8013168:	f800283a 	ret

0801316c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801316c:	defff304 	addi	sp,sp,-52
 8013170:	dfc00c15 	stw	ra,48(sp)
 8013174:	df000b15 	stw	fp,44(sp)
 8013178:	df000b04 	addi	fp,sp,44
 801317c:	e13ffc15 	stw	r4,-16(fp)
 8013180:	e17ffd15 	stw	r5,-12(fp)
 8013184:	e1bffe15 	stw	r6,-8(fp)
 8013188:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 801318c:	e0bffd17 	ldw	r2,-12(fp)
 8013190:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013194:	00004906 	br	80132bc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8013198:	e0bffc17 	ldw	r2,-16(fp)
 801319c:	10800a17 	ldw	r2,40(r2)
 80131a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80131a4:	e0bffc17 	ldw	r2,-16(fp)
 80131a8:	10800b17 	ldw	r2,44(r2)
 80131ac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80131b0:	e0fff717 	ldw	r3,-36(fp)
 80131b4:	e0bff817 	ldw	r2,-32(fp)
 80131b8:	18800536 	bltu	r3,r2,80131d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80131bc:	e0fff717 	ldw	r3,-36(fp)
 80131c0:	e0bff817 	ldw	r2,-32(fp)
 80131c4:	1885c83a 	sub	r2,r3,r2
 80131c8:	e0bff615 	stw	r2,-40(fp)
 80131cc:	00000406 	br	80131e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80131d0:	00c20004 	movi	r3,2048
 80131d4:	e0bff817 	ldw	r2,-32(fp)
 80131d8:	1885c83a 	sub	r2,r3,r2
 80131dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80131e0:	e0bff617 	ldw	r2,-40(fp)
 80131e4:	1000011e 	bne	r2,zero,80131ec <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 80131e8:	00001d06 	br	8013260 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 80131ec:	e0fffe17 	ldw	r3,-8(fp)
 80131f0:	e0bff617 	ldw	r2,-40(fp)
 80131f4:	1880022e 	bgeu	r3,r2,8013200 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 80131f8:	e0bffe17 	ldw	r2,-8(fp)
 80131fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8013200:	e0bff817 	ldw	r2,-32(fp)
 8013204:	10800e04 	addi	r2,r2,56
 8013208:	e0fffc17 	ldw	r3,-16(fp)
 801320c:	1885883a 	add	r2,r3,r2
 8013210:	e13ff517 	ldw	r4,-44(fp)
 8013214:	100b883a 	mov	r5,r2
 8013218:	e1bff617 	ldw	r6,-40(fp)
 801321c:	800ad400 	call	800ad40 <memcpy>
      ptr   += n;
 8013220:	e0fff517 	ldw	r3,-44(fp)
 8013224:	e0bff617 	ldw	r2,-40(fp)
 8013228:	1885883a 	add	r2,r3,r2
 801322c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8013230:	e0fffe17 	ldw	r3,-8(fp)
 8013234:	e0bff617 	ldw	r2,-40(fp)
 8013238:	1885c83a 	sub	r2,r3,r2
 801323c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013240:	e0fff817 	ldw	r3,-32(fp)
 8013244:	e0bff617 	ldw	r2,-40(fp)
 8013248:	1885883a 	add	r2,r3,r2
 801324c:	10c1ffcc 	andi	r3,r2,2047
 8013250:	e0bffc17 	ldw	r2,-16(fp)
 8013254:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8013258:	e0bffe17 	ldw	r2,-8(fp)
 801325c:	00bfce16 	blt	zero,r2,8013198 <__alt_data_end+0xfc013198>

    /* If we read any data then return it */
    if (ptr != buffer)
 8013260:	e0fff517 	ldw	r3,-44(fp)
 8013264:	e0bffd17 	ldw	r2,-12(fp)
 8013268:	18800126 	beq	r3,r2,8013270 <altera_avalon_jtag_uart_read+0x104>
      break;
 801326c:	00001506 	br	80132c4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8013270:	e0bfff17 	ldw	r2,-4(fp)
 8013274:	1090000c 	andi	r2,r2,16384
 8013278:	10000126 	beq	r2,zero,8013280 <altera_avalon_jtag_uart_read+0x114>
      break;
 801327c:	00001106 	br	80132c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8013280:	0001883a 	nop
 8013284:	e0bffc17 	ldw	r2,-16(fp)
 8013288:	10c00a17 	ldw	r3,40(r2)
 801328c:	e0bff717 	ldw	r2,-36(fp)
 8013290:	1880051e 	bne	r3,r2,80132a8 <altera_avalon_jtag_uart_read+0x13c>
 8013294:	e0bffc17 	ldw	r2,-16(fp)
 8013298:	10c00917 	ldw	r3,36(r2)
 801329c:	e0bffc17 	ldw	r2,-16(fp)
 80132a0:	10800117 	ldw	r2,4(r2)
 80132a4:	18bff736 	bltu	r3,r2,8013284 <__alt_data_end+0xfc013284>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80132a8:	e0bffc17 	ldw	r2,-16(fp)
 80132ac:	10c00a17 	ldw	r3,40(r2)
 80132b0:	e0bff717 	ldw	r2,-36(fp)
 80132b4:	1880011e 	bne	r3,r2,80132bc <altera_avalon_jtag_uart_read+0x150>
      break;
 80132b8:	00000206 	br	80132c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80132bc:	e0bffe17 	ldw	r2,-8(fp)
 80132c0:	00bfb516 	blt	zero,r2,8013198 <__alt_data_end+0xfc013198>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80132c4:	e0fff517 	ldw	r3,-44(fp)
 80132c8:	e0bffd17 	ldw	r2,-12(fp)
 80132cc:	18801826 	beq	r3,r2,8013330 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80132d0:	0005303a 	rdctl	r2,status
 80132d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80132d8:	e0fffa17 	ldw	r3,-24(fp)
 80132dc:	00bfff84 	movi	r2,-2
 80132e0:	1884703a 	and	r2,r3,r2
 80132e4:	1001703a 	wrctl	status,r2
  
  return context;
 80132e8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80132ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80132f0:	e0bffc17 	ldw	r2,-16(fp)
 80132f4:	10800817 	ldw	r2,32(r2)
 80132f8:	10c00054 	ori	r3,r2,1
 80132fc:	e0bffc17 	ldw	r2,-16(fp)
 8013300:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013304:	e0bffc17 	ldw	r2,-16(fp)
 8013308:	10800017 	ldw	r2,0(r2)
 801330c:	10800104 	addi	r2,r2,4
 8013310:	1007883a 	mov	r3,r2
 8013314:	e0bffc17 	ldw	r2,-16(fp)
 8013318:	10800817 	ldw	r2,32(r2)
 801331c:	18800035 	stwio	r2,0(r3)
 8013320:	e0bff917 	ldw	r2,-28(fp)
 8013324:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013328:	e0bffb17 	ldw	r2,-20(fp)
 801332c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8013330:	e0fff517 	ldw	r3,-44(fp)
 8013334:	e0bffd17 	ldw	r2,-12(fp)
 8013338:	18800426 	beq	r3,r2,801334c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 801333c:	e0fff517 	ldw	r3,-44(fp)
 8013340:	e0bffd17 	ldw	r2,-12(fp)
 8013344:	1885c83a 	sub	r2,r3,r2
 8013348:	00000606 	br	8013364 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 801334c:	e0bfff17 	ldw	r2,-4(fp)
 8013350:	1090000c 	andi	r2,r2,16384
 8013354:	10000226 	beq	r2,zero,8013360 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8013358:	00bffd44 	movi	r2,-11
 801335c:	00000106 	br	8013364 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8013360:	00bffec4 	movi	r2,-5
}
 8013364:	e037883a 	mov	sp,fp
 8013368:	dfc00117 	ldw	ra,4(sp)
 801336c:	df000017 	ldw	fp,0(sp)
 8013370:	dec00204 	addi	sp,sp,8
 8013374:	f800283a 	ret

08013378 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8013378:	defff304 	addi	sp,sp,-52
 801337c:	dfc00c15 	stw	ra,48(sp)
 8013380:	df000b15 	stw	fp,44(sp)
 8013384:	df000b04 	addi	fp,sp,44
 8013388:	e13ffc15 	stw	r4,-16(fp)
 801338c:	e17ffd15 	stw	r5,-12(fp)
 8013390:	e1bffe15 	stw	r6,-8(fp)
 8013394:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8013398:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801339c:	e0bffd17 	ldw	r2,-12(fp)
 80133a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80133a4:	00003806 	br	8013488 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80133a8:	e0bffc17 	ldw	r2,-16(fp)
 80133ac:	10800c17 	ldw	r2,48(r2)
 80133b0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 80133b4:	e0bffc17 	ldw	r2,-16(fp)
 80133b8:	10800d17 	ldw	r2,52(r2)
 80133bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80133c0:	e0fff817 	ldw	r3,-32(fp)
 80133c4:	e0bff517 	ldw	r2,-44(fp)
 80133c8:	1880062e 	bgeu	r3,r2,80133e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80133cc:	e0fff517 	ldw	r3,-44(fp)
 80133d0:	e0bff817 	ldw	r2,-32(fp)
 80133d4:	1885c83a 	sub	r2,r3,r2
 80133d8:	10bfffc4 	addi	r2,r2,-1
 80133dc:	e0bff615 	stw	r2,-40(fp)
 80133e0:	00000b06 	br	8013410 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80133e4:	e0bff517 	ldw	r2,-44(fp)
 80133e8:	10000526 	beq	r2,zero,8013400 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80133ec:	00c20004 	movi	r3,2048
 80133f0:	e0bff817 	ldw	r2,-32(fp)
 80133f4:	1885c83a 	sub	r2,r3,r2
 80133f8:	e0bff615 	stw	r2,-40(fp)
 80133fc:	00000406 	br	8013410 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8013400:	00c1ffc4 	movi	r3,2047
 8013404:	e0bff817 	ldw	r2,-32(fp)
 8013408:	1885c83a 	sub	r2,r3,r2
 801340c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8013410:	e0bff617 	ldw	r2,-40(fp)
 8013414:	1000011e 	bne	r2,zero,801341c <altera_avalon_jtag_uart_write+0xa4>
        break;
 8013418:	00001d06 	br	8013490 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 801341c:	e0fffe17 	ldw	r3,-8(fp)
 8013420:	e0bff617 	ldw	r2,-40(fp)
 8013424:	1880022e 	bgeu	r3,r2,8013430 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8013428:	e0bffe17 	ldw	r2,-8(fp)
 801342c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8013430:	e0bff817 	ldw	r2,-32(fp)
 8013434:	10820e04 	addi	r2,r2,2104
 8013438:	e0fffc17 	ldw	r3,-16(fp)
 801343c:	1885883a 	add	r2,r3,r2
 8013440:	1009883a 	mov	r4,r2
 8013444:	e17ffd17 	ldw	r5,-12(fp)
 8013448:	e1bff617 	ldw	r6,-40(fp)
 801344c:	800ad400 	call	800ad40 <memcpy>
      ptr   += n;
 8013450:	e0fffd17 	ldw	r3,-12(fp)
 8013454:	e0bff617 	ldw	r2,-40(fp)
 8013458:	1885883a 	add	r2,r3,r2
 801345c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8013460:	e0fffe17 	ldw	r3,-8(fp)
 8013464:	e0bff617 	ldw	r2,-40(fp)
 8013468:	1885c83a 	sub	r2,r3,r2
 801346c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013470:	e0fff817 	ldw	r3,-32(fp)
 8013474:	e0bff617 	ldw	r2,-40(fp)
 8013478:	1885883a 	add	r2,r3,r2
 801347c:	10c1ffcc 	andi	r3,r2,2047
 8013480:	e0bffc17 	ldw	r2,-16(fp)
 8013484:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8013488:	e0bffe17 	ldw	r2,-8(fp)
 801348c:	00bfc616 	blt	zero,r2,80133a8 <__alt_data_end+0xfc0133a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013490:	0005303a 	rdctl	r2,status
 8013494:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013498:	e0fffa17 	ldw	r3,-24(fp)
 801349c:	00bfff84 	movi	r2,-2
 80134a0:	1884703a 	and	r2,r3,r2
 80134a4:	1001703a 	wrctl	status,r2
  
  return context;
 80134a8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80134ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80134b0:	e0bffc17 	ldw	r2,-16(fp)
 80134b4:	10800817 	ldw	r2,32(r2)
 80134b8:	10c00094 	ori	r3,r2,2
 80134bc:	e0bffc17 	ldw	r2,-16(fp)
 80134c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80134c4:	e0bffc17 	ldw	r2,-16(fp)
 80134c8:	10800017 	ldw	r2,0(r2)
 80134cc:	10800104 	addi	r2,r2,4
 80134d0:	1007883a 	mov	r3,r2
 80134d4:	e0bffc17 	ldw	r2,-16(fp)
 80134d8:	10800817 	ldw	r2,32(r2)
 80134dc:	18800035 	stwio	r2,0(r3)
 80134e0:	e0bff917 	ldw	r2,-28(fp)
 80134e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80134e8:	e0bffb17 	ldw	r2,-20(fp)
 80134ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80134f0:	e0bffe17 	ldw	r2,-8(fp)
 80134f4:	0080120e 	bge	zero,r2,8013540 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 80134f8:	e0bfff17 	ldw	r2,-4(fp)
 80134fc:	1090000c 	andi	r2,r2,16384
 8013500:	10000126 	beq	r2,zero,8013508 <altera_avalon_jtag_uart_write+0x190>
        break;
 8013504:	00001006 	br	8013548 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8013508:	0001883a 	nop
 801350c:	e0bffc17 	ldw	r2,-16(fp)
 8013510:	10c00d17 	ldw	r3,52(r2)
 8013514:	e0bff517 	ldw	r2,-44(fp)
 8013518:	1880051e 	bne	r3,r2,8013530 <altera_avalon_jtag_uart_write+0x1b8>
 801351c:	e0bffc17 	ldw	r2,-16(fp)
 8013520:	10c00917 	ldw	r3,36(r2)
 8013524:	e0bffc17 	ldw	r2,-16(fp)
 8013528:	10800117 	ldw	r2,4(r2)
 801352c:	18bff736 	bltu	r3,r2,801350c <__alt_data_end+0xfc01350c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8013530:	e0bffc17 	ldw	r2,-16(fp)
 8013534:	10800917 	ldw	r2,36(r2)
 8013538:	10000126 	beq	r2,zero,8013540 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801353c:	00000206 	br	8013548 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8013540:	e0bffe17 	ldw	r2,-8(fp)
 8013544:	00bf9716 	blt	zero,r2,80133a4 <__alt_data_end+0xfc0133a4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8013548:	e0fffd17 	ldw	r3,-12(fp)
 801354c:	e0bff717 	ldw	r2,-36(fp)
 8013550:	18800426 	beq	r3,r2,8013564 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8013554:	e0fffd17 	ldw	r3,-12(fp)
 8013558:	e0bff717 	ldw	r2,-36(fp)
 801355c:	1885c83a 	sub	r2,r3,r2
 8013560:	00000606 	br	801357c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8013564:	e0bfff17 	ldw	r2,-4(fp)
 8013568:	1090000c 	andi	r2,r2,16384
 801356c:	10000226 	beq	r2,zero,8013578 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8013570:	00bffd44 	movi	r2,-11
 8013574:	00000106 	br	801357c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8013578:	00bffec4 	movi	r2,-5
}
 801357c:	e037883a 	mov	sp,fp
 8013580:	dfc00117 	ldw	ra,4(sp)
 8013584:	df000017 	ldw	fp,0(sp)
 8013588:	dec00204 	addi	sp,sp,8
 801358c:	f800283a 	ret

08013590 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8013590:	defffa04 	addi	sp,sp,-24
 8013594:	dfc00515 	stw	ra,20(sp)
 8013598:	df000415 	stw	fp,16(sp)
 801359c:	df000404 	addi	fp,sp,16
 80135a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80135a4:	0007883a 	mov	r3,zero
 80135a8:	e0bfff17 	ldw	r2,-4(fp)
 80135ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80135b0:	e0bfff17 	ldw	r2,-4(fp)
 80135b4:	10800104 	addi	r2,r2,4
 80135b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80135bc:	0005303a 	rdctl	r2,status
 80135c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80135c4:	e0fffd17 	ldw	r3,-12(fp)
 80135c8:	00bfff84 	movi	r2,-2
 80135cc:	1884703a 	and	r2,r3,r2
 80135d0:	1001703a 	wrctl	status,r2
  
  return context;
 80135d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80135d8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80135dc:	80147680 	call	8014768 <alt_tick>
 80135e0:	e0bffc17 	ldw	r2,-16(fp)
 80135e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80135e8:	e0bffe17 	ldw	r2,-8(fp)
 80135ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80135f0:	e037883a 	mov	sp,fp
 80135f4:	dfc00117 	ldw	ra,4(sp)
 80135f8:	df000017 	ldw	fp,0(sp)
 80135fc:	dec00204 	addi	sp,sp,8
 8013600:	f800283a 	ret

08013604 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8013604:	defff804 	addi	sp,sp,-32
 8013608:	dfc00715 	stw	ra,28(sp)
 801360c:	df000615 	stw	fp,24(sp)
 8013610:	df000604 	addi	fp,sp,24
 8013614:	e13ffc15 	stw	r4,-16(fp)
 8013618:	e17ffd15 	stw	r5,-12(fp)
 801361c:	e1bffe15 	stw	r6,-8(fp)
 8013620:	e1ffff15 	stw	r7,-4(fp)
 8013624:	e0bfff17 	ldw	r2,-4(fp)
 8013628:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801362c:	008200b4 	movhi	r2,2050
 8013630:	108bcd04 	addi	r2,r2,12084
 8013634:	10800017 	ldw	r2,0(r2)
 8013638:	1000041e 	bne	r2,zero,801364c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 801363c:	008200b4 	movhi	r2,2050
 8013640:	108bcd04 	addi	r2,r2,12084
 8013644:	e0fffb17 	ldw	r3,-20(fp)
 8013648:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801364c:	e0bffc17 	ldw	r2,-16(fp)
 8013650:	10800104 	addi	r2,r2,4
 8013654:	00c001c4 	movi	r3,7
 8013658:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801365c:	d8000015 	stw	zero,0(sp)
 8013660:	e13ffd17 	ldw	r4,-12(fp)
 8013664:	e17ffe17 	ldw	r5,-8(fp)
 8013668:	01820074 	movhi	r6,2049
 801366c:	318d6404 	addi	r6,r6,13712
 8013670:	e1fffc17 	ldw	r7,-16(fp)
 8013674:	80140540 	call	8014054 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8013678:	e037883a 	mov	sp,fp
 801367c:	dfc00117 	ldw	ra,4(sp)
 8013680:	df000017 	ldw	fp,0(sp)
 8013684:	dec00204 	addi	sp,sp,8
 8013688:	f800283a 	ret

0801368c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 801368c:	defffc04 	addi	sp,sp,-16
 8013690:	df000315 	stw	fp,12(sp)
 8013694:	df000304 	addi	fp,sp,12
 8013698:	e13ffe15 	stw	r4,-8(fp)
 801369c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 80136a0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 80136a4:	e0bfff17 	ldw	r2,-4(fp)
 80136a8:	1000061e 	bne	r2,zero,80136c4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 80136ac:	e0bffe17 	ldw	r2,-8(fp)
 80136b0:	1007883a 	mov	r3,r2
 80136b4:	e0bffd03 	ldbu	r2,-12(fp)
 80136b8:	1884b03a 	or	r2,r3,r2
 80136bc:	e0bffd05 	stb	r2,-12(fp)
 80136c0:	00000806 	br	80136e4 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 80136c4:	e0bffe17 	ldw	r2,-8(fp)
 80136c8:	1007883a 	mov	r3,r2
 80136cc:	e0bffd03 	ldbu	r2,-12(fp)
 80136d0:	1884b03a 	or	r2,r3,r2
 80136d4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 80136d8:	e0bffd03 	ldbu	r2,-12(fp)
 80136dc:	10801014 	ori	r2,r2,64
 80136e0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 80136e4:	e0fffd03 	ldbu	r3,-12(fp)
 80136e8:	00bfe004 	movi	r2,-128
 80136ec:	1884b03a 	or	r2,r3,r2
}
 80136f0:	e037883a 	mov	sp,fp
 80136f4:	df000017 	ldw	fp,0(sp)
 80136f8:	dec00104 	addi	sp,sp,4
 80136fc:	f800283a 	ret

08013700 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8013700:	defffd04 	addi	sp,sp,-12
 8013704:	df000215 	stw	fp,8(sp)
 8013708:	df000204 	addi	fp,sp,8
 801370c:	e13ffe15 	stw	r4,-8(fp)
 8013710:	2805883a 	mov	r2,r5
 8013714:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8013718:	e0bffe17 	ldw	r2,-8(fp)
 801371c:	10800a17 	ldw	r2,40(r2)
 8013720:	1007883a 	mov	r3,r2
 8013724:	e0bfff03 	ldbu	r2,-4(fp)
 8013728:	18800025 	stbio	r2,0(r3)
}
 801372c:	e037883a 	mov	sp,fp
 8013730:	df000017 	ldw	fp,0(sp)
 8013734:	dec00104 	addi	sp,sp,4
 8013738:	f800283a 	ret

0801373c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 801373c:	defffe04 	addi	sp,sp,-8
 8013740:	df000115 	stw	fp,4(sp)
 8013744:	df000104 	addi	fp,sp,4
 8013748:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 801374c:	e0bfff17 	ldw	r2,-4(fp)
 8013750:	10800a17 	ldw	r2,40(r2)
 8013754:	1007883a 	mov	r3,r2
 8013758:	00800044 	movi	r2,1
 801375c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8013760:	e037883a 	mov	sp,fp
 8013764:	df000017 	ldw	fp,0(sp)
 8013768:	dec00104 	addi	sp,sp,4
 801376c:	f800283a 	ret

08013770 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8013770:	defffc04 	addi	sp,sp,-16
 8013774:	dfc00315 	stw	ra,12(sp)
 8013778:	df000215 	stw	fp,8(sp)
 801377c:	df000204 	addi	fp,sp,8
 8013780:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8013784:	e13fff17 	ldw	r4,-4(fp)
 8013788:	014200b4 	movhi	r5,2050
 801378c:	2944f404 	addi	r5,r5,5072
 8013790:	8013f940 	call	8013f94 <alt_find_dev>
 8013794:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8013798:	e0bffe17 	ldw	r2,-8(fp)
}
 801379c:	e037883a 	mov	sp,fp
 80137a0:	dfc00117 	ldw	ra,4(sp)
 80137a4:	df000017 	ldw	fp,0(sp)
 80137a8:	dec00204 	addi	sp,sp,8
 80137ac:	f800283a 	ret

080137b0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 80137b0:	defffb04 	addi	sp,sp,-20
 80137b4:	df000415 	stw	fp,16(sp)
 80137b8:	df000404 	addi	fp,sp,16
 80137bc:	e13ffd15 	stw	r4,-12(fp)
 80137c0:	e17ffe15 	stw	r5,-8(fp)
 80137c4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 80137c8:	e03ffc15 	stw	zero,-16(fp)
 80137cc:	00000f06 	br	801380c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 80137d0:	e0bffd17 	ldw	r2,-12(fp)
 80137d4:	10800a17 	ldw	r2,40(r2)
 80137d8:	10800044 	addi	r2,r2,1
 80137dc:	1009883a 	mov	r4,r2
 80137e0:	e0fffe17 	ldw	r3,-8(fp)
 80137e4:	e0bffc17 	ldw	r2,-16(fp)
 80137e8:	1885883a 	add	r2,r3,r2
 80137ec:	10800003 	ldbu	r2,0(r2)
 80137f0:	10803fcc 	andi	r2,r2,255
 80137f4:	1080201c 	xori	r2,r2,128
 80137f8:	10bfe004 	addi	r2,r2,-128
 80137fc:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8013800:	e0bffc17 	ldw	r2,-16(fp)
 8013804:	10800044 	addi	r2,r2,1
 8013808:	e0bffc15 	stw	r2,-16(fp)
 801380c:	e0fffc17 	ldw	r3,-16(fp)
 8013810:	e0bfff17 	ldw	r2,-4(fp)
 8013814:	18bfee36 	bltu	r3,r2,80137d0 <__alt_data_end+0xfc0137d0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8013818:	e037883a 	mov	sp,fp
 801381c:	df000017 	ldw	fp,0(sp)
 8013820:	dec00104 	addi	sp,sp,4
 8013824:	f800283a 	ret

08013828 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8013828:	defffd04 	addi	sp,sp,-12
 801382c:	df000215 	stw	fp,8(sp)
 8013830:	df000204 	addi	fp,sp,8
 8013834:	e13ffe15 	stw	r4,-8(fp)
 8013838:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 801383c:	00000d06 	br	8013874 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 8013840:	e0bffe17 	ldw	r2,-8(fp)
 8013844:	10800a17 	ldw	r2,40(r2)
 8013848:	10800044 	addi	r2,r2,1
 801384c:	1007883a 	mov	r3,r2
 8013850:	e0bfff17 	ldw	r2,-4(fp)
 8013854:	10800003 	ldbu	r2,0(r2)
 8013858:	10803fcc 	andi	r2,r2,255
 801385c:	1080201c 	xori	r2,r2,128
 8013860:	10bfe004 	addi	r2,r2,-128
 8013864:	18800025 	stbio	r2,0(r3)
		++ptr;
 8013868:	e0bfff17 	ldw	r2,-4(fp)
 801386c:	10800044 	addi	r2,r2,1
 8013870:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8013874:	e0bfff17 	ldw	r2,-4(fp)
 8013878:	10800003 	ldbu	r2,0(r2)
 801387c:	10803fcc 	andi	r2,r2,255
 8013880:	1080201c 	xori	r2,r2,128
 8013884:	10bfe004 	addi	r2,r2,-128
 8013888:	103fed1e 	bne	r2,zero,8013840 <__alt_data_end+0xfc013840>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 801388c:	e037883a 	mov	sp,fp
 8013890:	df000017 	ldw	fp,0(sp)
 8013894:	dec00104 	addi	sp,sp,4
 8013898:	f800283a 	ret

0801389c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 801389c:	defffb04 	addi	sp,sp,-20
 80138a0:	dfc00415 	stw	ra,16(sp)
 80138a4:	df000315 	stw	fp,12(sp)
 80138a8:	df000304 	addi	fp,sp,12
 80138ac:	e13ffd15 	stw	r4,-12(fp)
 80138b0:	e17ffe15 	stw	r5,-8(fp)
 80138b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 80138b8:	e0bffd17 	ldw	r2,-12(fp)
 80138bc:	10c00017 	ldw	r3,0(r2)
 80138c0:	e0bfff17 	ldw	r2,-4(fp)
 80138c4:	1809883a 	mov	r4,r3
 80138c8:	e17ffe17 	ldw	r5,-8(fp)
 80138cc:	100d883a 	mov	r6,r2
 80138d0:	80137b00 	call	80137b0 <alt_up_character_lcd_write>
	return 0;
 80138d4:	0005883a 	mov	r2,zero
}
 80138d8:	e037883a 	mov	sp,fp
 80138dc:	dfc00117 	ldw	ra,4(sp)
 80138e0:	df000017 	ldw	fp,0(sp)
 80138e4:	dec00204 	addi	sp,sp,8
 80138e8:	f800283a 	ret

080138ec <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 80138ec:	defffa04 	addi	sp,sp,-24
 80138f0:	dfc00515 	stw	ra,20(sp)
 80138f4:	df000415 	stw	fp,16(sp)
 80138f8:	df000404 	addi	fp,sp,16
 80138fc:	e13ffd15 	stw	r4,-12(fp)
 8013900:	e17ffe15 	stw	r5,-8(fp)
 8013904:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8013908:	e0bffe17 	ldw	r2,-8(fp)
 801390c:	10800a28 	cmpgeui	r2,r2,40
 8013910:	1000031e 	bne	r2,zero,8013920 <alt_up_character_lcd_set_cursor_pos+0x34>
 8013914:	e0bfff17 	ldw	r2,-4(fp)
 8013918:	108000b0 	cmpltui	r2,r2,2
 801391c:	1000021e 	bne	r2,zero,8013928 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8013920:	00bfffc4 	movi	r2,-1
 8013924:	00000906 	br	801394c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8013928:	e13ffe17 	ldw	r4,-8(fp)
 801392c:	e17fff17 	ldw	r5,-4(fp)
 8013930:	801368c0 	call	801368c <get_DDRAM_addr>
 8013934:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8013938:	e0bffc03 	ldbu	r2,-16(fp)
 801393c:	e13ffd17 	ldw	r4,-12(fp)
 8013940:	100b883a 	mov	r5,r2
 8013944:	80137000 	call	8013700 <alt_up_character_lcd_send_cmd>
	return 0;
 8013948:	0005883a 	mov	r2,zero
}
 801394c:	e037883a 	mov	sp,fp
 8013950:	dfc00117 	ldw	ra,4(sp)
 8013954:	df000017 	ldw	fp,0(sp)
 8013958:	dec00204 	addi	sp,sp,8
 801395c:	f800283a 	ret

08013960 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8013960:	defffb04 	addi	sp,sp,-20
 8013964:	dfc00415 	stw	ra,16(sp)
 8013968:	df000315 	stw	fp,12(sp)
 801396c:	df000304 	addi	fp,sp,12
 8013970:	e13ffe15 	stw	r4,-8(fp)
 8013974:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8013978:	e0bfff17 	ldw	r2,-4(fp)
 801397c:	1000011e 	bne	r2,zero,8013984 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 8013980:	00001406 	br	80139d4 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8013984:	e0bfff17 	ldw	r2,-4(fp)
 8013988:	0080020e 	bge	zero,r2,8013994 <alt_up_character_lcd_shift_cursor+0x34>
 801398c:	00800504 	movi	r2,20
 8013990:	00000106 	br	8013998 <alt_up_character_lcd_shift_cursor+0x38>
 8013994:	00800404 	movi	r2,16
 8013998:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801399c:	e0bfff17 	ldw	r2,-4(fp)
 80139a0:	1000010e 	bge	r2,zero,80139a8 <alt_up_character_lcd_shift_cursor+0x48>
 80139a4:	0085c83a 	sub	r2,zero,r2
 80139a8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80139ac:	00000406 	br	80139c0 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80139b0:	e0bffd43 	ldbu	r2,-11(fp)
 80139b4:	e13ffe17 	ldw	r4,-8(fp)
 80139b8:	100b883a 	mov	r5,r2
 80139bc:	80137000 	call	8013700 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80139c0:	e0bffd03 	ldbu	r2,-12(fp)
 80139c4:	10ffffc4 	addi	r3,r2,-1
 80139c8:	e0fffd05 	stb	r3,-12(fp)
 80139cc:	10803fcc 	andi	r2,r2,255
 80139d0:	103ff71e 	bne	r2,zero,80139b0 <__alt_data_end+0xfc0139b0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80139d4:	e037883a 	mov	sp,fp
 80139d8:	dfc00117 	ldw	ra,4(sp)
 80139dc:	df000017 	ldw	fp,0(sp)
 80139e0:	dec00204 	addi	sp,sp,8
 80139e4:	f800283a 	ret

080139e8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80139e8:	defffb04 	addi	sp,sp,-20
 80139ec:	dfc00415 	stw	ra,16(sp)
 80139f0:	df000315 	stw	fp,12(sp)
 80139f4:	df000304 	addi	fp,sp,12
 80139f8:	e13ffe15 	stw	r4,-8(fp)
 80139fc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8013a00:	e0bfff17 	ldw	r2,-4(fp)
 8013a04:	1000011e 	bne	r2,zero,8013a0c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 8013a08:	00001406 	br	8013a5c <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8013a0c:	e0bfff17 	ldw	r2,-4(fp)
 8013a10:	0080020e 	bge	zero,r2,8013a1c <alt_up_character_lcd_shift_display+0x34>
 8013a14:	00800704 	movi	r2,28
 8013a18:	00000106 	br	8013a20 <alt_up_character_lcd_shift_display+0x38>
 8013a1c:	00800604 	movi	r2,24
 8013a20:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8013a24:	e0bfff17 	ldw	r2,-4(fp)
 8013a28:	1000010e 	bge	r2,zero,8013a30 <alt_up_character_lcd_shift_display+0x48>
 8013a2c:	0085c83a 	sub	r2,zero,r2
 8013a30:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8013a34:	00000406 	br	8013a48 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8013a38:	e0bffd43 	ldbu	r2,-11(fp)
 8013a3c:	e13ffe17 	ldw	r4,-8(fp)
 8013a40:	100b883a 	mov	r5,r2
 8013a44:	80137000 	call	8013700 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8013a48:	e0bffd03 	ldbu	r2,-12(fp)
 8013a4c:	10ffffc4 	addi	r3,r2,-1
 8013a50:	e0fffd05 	stb	r3,-12(fp)
 8013a54:	10803fcc 	andi	r2,r2,255
 8013a58:	103ff71e 	bne	r2,zero,8013a38 <__alt_data_end+0xfc013a38>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8013a5c:	e037883a 	mov	sp,fp
 8013a60:	dfc00117 	ldw	ra,4(sp)
 8013a64:	df000017 	ldw	fp,0(sp)
 8013a68:	dec00204 	addi	sp,sp,8
 8013a6c:	f800283a 	ret

08013a70 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8013a70:	defffa04 	addi	sp,sp,-24
 8013a74:	dfc00515 	stw	ra,20(sp)
 8013a78:	df000415 	stw	fp,16(sp)
 8013a7c:	df000404 	addi	fp,sp,16
 8013a80:	e13ffd15 	stw	r4,-12(fp)
 8013a84:	e17ffe15 	stw	r5,-8(fp)
 8013a88:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8013a8c:	e0bffe17 	ldw	r2,-8(fp)
 8013a90:	10800a28 	cmpgeui	r2,r2,40
 8013a94:	1000031e 	bne	r2,zero,8013aa4 <alt_up_character_lcd_erase_pos+0x34>
 8013a98:	e0bfff17 	ldw	r2,-4(fp)
 8013a9c:	108000b0 	cmpltui	r2,r2,2
 8013aa0:	1000021e 	bne	r2,zero,8013aac <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8013aa4:	00bfffc4 	movi	r2,-1
 8013aa8:	00000f06 	br	8013ae8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8013aac:	e13ffe17 	ldw	r4,-8(fp)
 8013ab0:	e17fff17 	ldw	r5,-4(fp)
 8013ab4:	801368c0 	call	801368c <get_DDRAM_addr>
 8013ab8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8013abc:	e0bffc03 	ldbu	r2,-16(fp)
 8013ac0:	e13ffd17 	ldw	r4,-12(fp)
 8013ac4:	100b883a 	mov	r5,r2
 8013ac8:	80137000 	call	8013700 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8013acc:	e0bffd17 	ldw	r2,-12(fp)
 8013ad0:	10800a17 	ldw	r2,40(r2)
 8013ad4:	10800044 	addi	r2,r2,1
 8013ad8:	1007883a 	mov	r3,r2
 8013adc:	00800084 	movi	r2,2
 8013ae0:	18800025 	stbio	r2,0(r3)
	return 0;
 8013ae4:	0005883a 	mov	r2,zero
}
 8013ae8:	e037883a 	mov	sp,fp
 8013aec:	dfc00117 	ldw	ra,4(sp)
 8013af0:	df000017 	ldw	fp,0(sp)
 8013af4:	dec00204 	addi	sp,sp,8
 8013af8:	f800283a 	ret

08013afc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8013afc:	defffd04 	addi	sp,sp,-12
 8013b00:	dfc00215 	stw	ra,8(sp)
 8013b04:	df000115 	stw	fp,4(sp)
 8013b08:	df000104 	addi	fp,sp,4
 8013b0c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8013b10:	e13fff17 	ldw	r4,-4(fp)
 8013b14:	01400304 	movi	r5,12
 8013b18:	80137000 	call	8013700 <alt_up_character_lcd_send_cmd>
}
 8013b1c:	e037883a 	mov	sp,fp
 8013b20:	dfc00117 	ldw	ra,4(sp)
 8013b24:	df000017 	ldw	fp,0(sp)
 8013b28:	dec00204 	addi	sp,sp,8
 8013b2c:	f800283a 	ret

08013b30 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8013b30:	defffd04 	addi	sp,sp,-12
 8013b34:	dfc00215 	stw	ra,8(sp)
 8013b38:	df000115 	stw	fp,4(sp)
 8013b3c:	df000104 	addi	fp,sp,4
 8013b40:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8013b44:	e13fff17 	ldw	r4,-4(fp)
 8013b48:	014003c4 	movi	r5,15
 8013b4c:	80137000 	call	8013700 <alt_up_character_lcd_send_cmd>
}
 8013b50:	e037883a 	mov	sp,fp
 8013b54:	dfc00117 	ldw	ra,4(sp)
 8013b58:	df000017 	ldw	fp,0(sp)
 8013b5c:	dec00204 	addi	sp,sp,8
 8013b60:	f800283a 	ret

08013b64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8013b64:	defff504 	addi	sp,sp,-44
 8013b68:	df000a15 	stw	fp,40(sp)
 8013b6c:	df000a04 	addi	fp,sp,40
 8013b70:	e13ffc15 	stw	r4,-16(fp)
 8013b74:	e17ffd15 	stw	r5,-12(fp)
 8013b78:	e1bffe15 	stw	r6,-8(fp)
 8013b7c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8013b80:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8013b84:	008200b4 	movhi	r2,2050
 8013b88:	108bcd04 	addi	r2,r2,12084
 8013b8c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8013b90:	10003f26 	beq	r2,zero,8013c90 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8013b94:	e0bffc17 	ldw	r2,-16(fp)
 8013b98:	10003b26 	beq	r2,zero,8013c88 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8013b9c:	e0bffc17 	ldw	r2,-16(fp)
 8013ba0:	e0fffe17 	ldw	r3,-8(fp)
 8013ba4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8013ba8:	e0bffc17 	ldw	r2,-16(fp)
 8013bac:	e0ffff17 	ldw	r3,-4(fp)
 8013bb0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013bb4:	0005303a 	rdctl	r2,status
 8013bb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013bbc:	e0fff817 	ldw	r3,-32(fp)
 8013bc0:	00bfff84 	movi	r2,-2
 8013bc4:	1884703a 	and	r2,r3,r2
 8013bc8:	1001703a 	wrctl	status,r2
  
  return context;
 8013bcc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8013bd0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8013bd4:	008200b4 	movhi	r2,2050
 8013bd8:	108bce04 	addi	r2,r2,12088
 8013bdc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8013be0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8013be4:	e0fffd17 	ldw	r3,-12(fp)
 8013be8:	e0bff617 	ldw	r2,-40(fp)
 8013bec:	1885883a 	add	r2,r3,r2
 8013bf0:	10c00044 	addi	r3,r2,1
 8013bf4:	e0bffc17 	ldw	r2,-16(fp)
 8013bf8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8013bfc:	e0bffc17 	ldw	r2,-16(fp)
 8013c00:	10c00217 	ldw	r3,8(r2)
 8013c04:	e0bff617 	ldw	r2,-40(fp)
 8013c08:	1880042e 	bgeu	r3,r2,8013c1c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8013c0c:	e0bffc17 	ldw	r2,-16(fp)
 8013c10:	00c00044 	movi	r3,1
 8013c14:	10c00405 	stb	r3,16(r2)
 8013c18:	00000206 	br	8013c24 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8013c1c:	e0bffc17 	ldw	r2,-16(fp)
 8013c20:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8013c24:	e0fffc17 	ldw	r3,-16(fp)
 8013c28:	008200b4 	movhi	r2,2050
 8013c2c:	1084fa04 	addi	r2,r2,5096
 8013c30:	e0bff915 	stw	r2,-28(fp)
 8013c34:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8013c38:	e0bffa17 	ldw	r2,-24(fp)
 8013c3c:	e0fff917 	ldw	r3,-28(fp)
 8013c40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8013c44:	e0bff917 	ldw	r2,-28(fp)
 8013c48:	10c00017 	ldw	r3,0(r2)
 8013c4c:	e0bffa17 	ldw	r2,-24(fp)
 8013c50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8013c54:	e0bff917 	ldw	r2,-28(fp)
 8013c58:	10800017 	ldw	r2,0(r2)
 8013c5c:	e0fffa17 	ldw	r3,-24(fp)
 8013c60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8013c64:	e0bff917 	ldw	r2,-28(fp)
 8013c68:	e0fffa17 	ldw	r3,-24(fp)
 8013c6c:	10c00015 	stw	r3,0(r2)
 8013c70:	e0bff717 	ldw	r2,-36(fp)
 8013c74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013c78:	e0bffb17 	ldw	r2,-20(fp)
 8013c7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8013c80:	0005883a 	mov	r2,zero
 8013c84:	00000306 	br	8013c94 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8013c88:	00bffa84 	movi	r2,-22
 8013c8c:	00000106 	br	8013c94 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8013c90:	00bfde84 	movi	r2,-134
  }
}
 8013c94:	e037883a 	mov	sp,fp
 8013c98:	df000017 	ldw	fp,0(sp)
 8013c9c:	dec00104 	addi	sp,sp,4
 8013ca0:	f800283a 	ret

08013ca4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8013ca4:	defffb04 	addi	sp,sp,-20
 8013ca8:	df000415 	stw	fp,16(sp)
 8013cac:	df000404 	addi	fp,sp,16
 8013cb0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8013cb4:	008000c4 	movi	r2,3
 8013cb8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8013cbc:	e0fffd17 	ldw	r3,-12(fp)
 8013cc0:	008003f4 	movhi	r2,15
 8013cc4:	10909004 	addi	r2,r2,16960
 8013cc8:	1887383a 	mul	r3,r3,r2
 8013ccc:	0080bef4 	movhi	r2,763
 8013cd0:	10bc2004 	addi	r2,r2,-3968
 8013cd4:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8013cd8:	00a00034 	movhi	r2,32768
 8013cdc:	10bfffc4 	addi	r2,r2,-1
 8013ce0:	10c5203a 	divu	r2,r2,r3
 8013ce4:	e0ffff17 	ldw	r3,-4(fp)
 8013ce8:	1885203a 	divu	r2,r3,r2
 8013cec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8013cf0:	e0bffe17 	ldw	r2,-8(fp)
 8013cf4:	10002526 	beq	r2,zero,8013d8c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 8013cf8:	e03ffc15 	stw	zero,-16(fp)
 8013cfc:	00001406 	br	8013d50 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8013d00:	00a00034 	movhi	r2,32768
 8013d04:	10bfffc4 	addi	r2,r2,-1
 8013d08:	10bfffc4 	addi	r2,r2,-1
 8013d0c:	103ffe1e 	bne	r2,zero,8013d08 <__alt_data_end+0xfc013d08>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8013d10:	e0fffd17 	ldw	r3,-12(fp)
 8013d14:	008003f4 	movhi	r2,15
 8013d18:	10909004 	addi	r2,r2,16960
 8013d1c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8013d20:	0080bef4 	movhi	r2,763
 8013d24:	10bc2004 	addi	r2,r2,-3968
 8013d28:	10c7203a 	divu	r3,r2,r3
 8013d2c:	00a00034 	movhi	r2,32768
 8013d30:	10bfffc4 	addi	r2,r2,-1
 8013d34:	10c5203a 	divu	r2,r2,r3
 8013d38:	e0ffff17 	ldw	r3,-4(fp)
 8013d3c:	1885c83a 	sub	r2,r3,r2
 8013d40:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8013d44:	e0bffc17 	ldw	r2,-16(fp)
 8013d48:	10800044 	addi	r2,r2,1
 8013d4c:	e0bffc15 	stw	r2,-16(fp)
 8013d50:	e0fffc17 	ldw	r3,-16(fp)
 8013d54:	e0bffe17 	ldw	r2,-8(fp)
 8013d58:	18bfe916 	blt	r3,r2,8013d00 <__alt_data_end+0xfc013d00>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8013d5c:	e0fffd17 	ldw	r3,-12(fp)
 8013d60:	008003f4 	movhi	r2,15
 8013d64:	10909004 	addi	r2,r2,16960
 8013d68:	1887383a 	mul	r3,r3,r2
 8013d6c:	0080bef4 	movhi	r2,763
 8013d70:	10bc2004 	addi	r2,r2,-3968
 8013d74:	10c7203a 	divu	r3,r2,r3
 8013d78:	e0bfff17 	ldw	r2,-4(fp)
 8013d7c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8013d80:	10bfffc4 	addi	r2,r2,-1
 8013d84:	103ffe1e 	bne	r2,zero,8013d80 <__alt_data_end+0xfc013d80>
 8013d88:	00000b06 	br	8013db8 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8013d8c:	e0fffd17 	ldw	r3,-12(fp)
 8013d90:	008003f4 	movhi	r2,15
 8013d94:	10909004 	addi	r2,r2,16960
 8013d98:	1887383a 	mul	r3,r3,r2
 8013d9c:	0080bef4 	movhi	r2,763
 8013da0:	10bc2004 	addi	r2,r2,-3968
 8013da4:	10c7203a 	divu	r3,r2,r3
 8013da8:	e0bfff17 	ldw	r2,-4(fp)
 8013dac:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8013db0:	10bfffc4 	addi	r2,r2,-1
 8013db4:	00bffe16 	blt	zero,r2,8013db0 <__alt_data_end+0xfc013db0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8013db8:	0005883a 	mov	r2,zero
}
 8013dbc:	e037883a 	mov	sp,fp
 8013dc0:	df000017 	ldw	fp,0(sp)
 8013dc4:	dec00104 	addi	sp,sp,4
 8013dc8:	f800283a 	ret

08013dcc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8013dcc:	deffff04 	addi	sp,sp,-4
 8013dd0:	df000015 	stw	fp,0(sp)
 8013dd4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8013dd8:	e037883a 	mov	sp,fp
 8013ddc:	df000017 	ldw	fp,0(sp)
 8013de0:	dec00104 	addi	sp,sp,4
 8013de4:	f800283a 	ret

08013de8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013de8:	defffe04 	addi	sp,sp,-8
 8013dec:	dfc00115 	stw	ra,4(sp)
 8013df0:	df000015 	stw	fp,0(sp)
 8013df4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013df8:	008200b4 	movhi	r2,2050
 8013dfc:	1084f704 	addi	r2,r2,5084
 8013e00:	10800017 	ldw	r2,0(r2)
 8013e04:	10000526 	beq	r2,zero,8013e1c <alt_get_errno+0x34>
 8013e08:	008200b4 	movhi	r2,2050
 8013e0c:	1084f704 	addi	r2,r2,5084
 8013e10:	10800017 	ldw	r2,0(r2)
 8013e14:	103ee83a 	callr	r2
 8013e18:	00000206 	br	8013e24 <alt_get_errno+0x3c>
 8013e1c:	008200b4 	movhi	r2,2050
 8013e20:	108bc804 	addi	r2,r2,12064
}
 8013e24:	e037883a 	mov	sp,fp
 8013e28:	dfc00117 	ldw	ra,4(sp)
 8013e2c:	df000017 	ldw	fp,0(sp)
 8013e30:	dec00204 	addi	sp,sp,8
 8013e34:	f800283a 	ret

08013e38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8013e38:	defffa04 	addi	sp,sp,-24
 8013e3c:	dfc00515 	stw	ra,20(sp)
 8013e40:	df000415 	stw	fp,16(sp)
 8013e44:	df000404 	addi	fp,sp,16
 8013e48:	e13ffe15 	stw	r4,-8(fp)
 8013e4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8013e50:	e0bffe17 	ldw	r2,-8(fp)
 8013e54:	10000326 	beq	r2,zero,8013e64 <alt_dev_llist_insert+0x2c>
 8013e58:	e0bffe17 	ldw	r2,-8(fp)
 8013e5c:	10800217 	ldw	r2,8(r2)
 8013e60:	1000061e 	bne	r2,zero,8013e7c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8013e64:	8013de80 	call	8013de8 <alt_get_errno>
 8013e68:	1007883a 	mov	r3,r2
 8013e6c:	00800584 	movi	r2,22
 8013e70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8013e74:	00bffa84 	movi	r2,-22
 8013e78:	00001306 	br	8013ec8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8013e7c:	e0bffe17 	ldw	r2,-8(fp)
 8013e80:	e0ffff17 	ldw	r3,-4(fp)
 8013e84:	e0fffc15 	stw	r3,-16(fp)
 8013e88:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8013e8c:	e0bffd17 	ldw	r2,-12(fp)
 8013e90:	e0fffc17 	ldw	r3,-16(fp)
 8013e94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8013e98:	e0bffc17 	ldw	r2,-16(fp)
 8013e9c:	10c00017 	ldw	r3,0(r2)
 8013ea0:	e0bffd17 	ldw	r2,-12(fp)
 8013ea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8013ea8:	e0bffc17 	ldw	r2,-16(fp)
 8013eac:	10800017 	ldw	r2,0(r2)
 8013eb0:	e0fffd17 	ldw	r3,-12(fp)
 8013eb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8013eb8:	e0bffc17 	ldw	r2,-16(fp)
 8013ebc:	e0fffd17 	ldw	r3,-12(fp)
 8013ec0:	10c00015 	stw	r3,0(r2)

  return 0;  
 8013ec4:	0005883a 	mov	r2,zero
}
 8013ec8:	e037883a 	mov	sp,fp
 8013ecc:	dfc00117 	ldw	ra,4(sp)
 8013ed0:	df000017 	ldw	fp,0(sp)
 8013ed4:	dec00204 	addi	sp,sp,8
 8013ed8:	f800283a 	ret

08013edc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8013edc:	defffd04 	addi	sp,sp,-12
 8013ee0:	dfc00215 	stw	ra,8(sp)
 8013ee4:	df000115 	stw	fp,4(sp)
 8013ee8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8013eec:	00820074 	movhi	r2,2049
 8013ef0:	1093a004 	addi	r2,r2,20096
 8013ef4:	e0bfff15 	stw	r2,-4(fp)
 8013ef8:	00000606 	br	8013f14 <_do_ctors+0x38>
        (*ctor) (); 
 8013efc:	e0bfff17 	ldw	r2,-4(fp)
 8013f00:	10800017 	ldw	r2,0(r2)
 8013f04:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8013f08:	e0bfff17 	ldw	r2,-4(fp)
 8013f0c:	10bfff04 	addi	r2,r2,-4
 8013f10:	e0bfff15 	stw	r2,-4(fp)
 8013f14:	e0ffff17 	ldw	r3,-4(fp)
 8013f18:	00820074 	movhi	r2,2049
 8013f1c:	1093a104 	addi	r2,r2,20100
 8013f20:	18bff62e 	bgeu	r3,r2,8013efc <__alt_data_end+0xfc013efc>
        (*ctor) (); 
}
 8013f24:	e037883a 	mov	sp,fp
 8013f28:	dfc00117 	ldw	ra,4(sp)
 8013f2c:	df000017 	ldw	fp,0(sp)
 8013f30:	dec00204 	addi	sp,sp,8
 8013f34:	f800283a 	ret

08013f38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8013f38:	defffd04 	addi	sp,sp,-12
 8013f3c:	dfc00215 	stw	ra,8(sp)
 8013f40:	df000115 	stw	fp,4(sp)
 8013f44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8013f48:	00820074 	movhi	r2,2049
 8013f4c:	1093a004 	addi	r2,r2,20096
 8013f50:	e0bfff15 	stw	r2,-4(fp)
 8013f54:	00000606 	br	8013f70 <_do_dtors+0x38>
        (*dtor) (); 
 8013f58:	e0bfff17 	ldw	r2,-4(fp)
 8013f5c:	10800017 	ldw	r2,0(r2)
 8013f60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8013f64:	e0bfff17 	ldw	r2,-4(fp)
 8013f68:	10bfff04 	addi	r2,r2,-4
 8013f6c:	e0bfff15 	stw	r2,-4(fp)
 8013f70:	e0ffff17 	ldw	r3,-4(fp)
 8013f74:	00820074 	movhi	r2,2049
 8013f78:	1093a104 	addi	r2,r2,20100
 8013f7c:	18bff62e 	bgeu	r3,r2,8013f58 <__alt_data_end+0xfc013f58>
        (*dtor) (); 
}
 8013f80:	e037883a 	mov	sp,fp
 8013f84:	dfc00117 	ldw	ra,4(sp)
 8013f88:	df000017 	ldw	fp,0(sp)
 8013f8c:	dec00204 	addi	sp,sp,8
 8013f90:	f800283a 	ret

08013f94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8013f94:	defffa04 	addi	sp,sp,-24
 8013f98:	dfc00515 	stw	ra,20(sp)
 8013f9c:	df000415 	stw	fp,16(sp)
 8013fa0:	df000404 	addi	fp,sp,16
 8013fa4:	e13ffe15 	stw	r4,-8(fp)
 8013fa8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8013fac:	e0bfff17 	ldw	r2,-4(fp)
 8013fb0:	10800017 	ldw	r2,0(r2)
 8013fb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8013fb8:	e13ffe17 	ldw	r4,-8(fp)
 8013fbc:	80037580 	call	8003758 <strlen>
 8013fc0:	10800044 	addi	r2,r2,1
 8013fc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8013fc8:	00000d06 	br	8014000 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8013fcc:	e0bffc17 	ldw	r2,-16(fp)
 8013fd0:	10c00217 	ldw	r3,8(r2)
 8013fd4:	e0bffd17 	ldw	r2,-12(fp)
 8013fd8:	1809883a 	mov	r4,r3
 8013fdc:	e17ffe17 	ldw	r5,-8(fp)
 8013fe0:	100d883a 	mov	r6,r2
 8013fe4:	8014b2c0 	call	8014b2c <memcmp>
 8013fe8:	1000021e 	bne	r2,zero,8013ff4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8013fec:	e0bffc17 	ldw	r2,-16(fp)
 8013ff0:	00000706 	br	8014010 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8013ff4:	e0bffc17 	ldw	r2,-16(fp)
 8013ff8:	10800017 	ldw	r2,0(r2)
 8013ffc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014000:	e0fffc17 	ldw	r3,-16(fp)
 8014004:	e0bfff17 	ldw	r2,-4(fp)
 8014008:	18bff01e 	bne	r3,r2,8013fcc <__alt_data_end+0xfc013fcc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801400c:	0005883a 	mov	r2,zero
}
 8014010:	e037883a 	mov	sp,fp
 8014014:	dfc00117 	ldw	ra,4(sp)
 8014018:	df000017 	ldw	fp,0(sp)
 801401c:	dec00204 	addi	sp,sp,8
 8014020:	f800283a 	ret

08014024 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8014024:	defffe04 	addi	sp,sp,-8
 8014028:	dfc00115 	stw	ra,4(sp)
 801402c:	df000015 	stw	fp,0(sp)
 8014030:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8014034:	0009883a 	mov	r4,zero
 8014038:	01440004 	movi	r5,4096
 801403c:	8014a540 	call	8014a54 <alt_icache_flush>
#endif
}
 8014040:	e037883a 	mov	sp,fp
 8014044:	dfc00117 	ldw	ra,4(sp)
 8014048:	df000017 	ldw	fp,0(sp)
 801404c:	dec00204 	addi	sp,sp,8
 8014050:	f800283a 	ret

08014054 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014054:	defff904 	addi	sp,sp,-28
 8014058:	dfc00615 	stw	ra,24(sp)
 801405c:	df000515 	stw	fp,20(sp)
 8014060:	df000504 	addi	fp,sp,20
 8014064:	e13ffc15 	stw	r4,-16(fp)
 8014068:	e17ffd15 	stw	r5,-12(fp)
 801406c:	e1bffe15 	stw	r6,-8(fp)
 8014070:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8014074:	e0800217 	ldw	r2,8(fp)
 8014078:	d8800015 	stw	r2,0(sp)
 801407c:	e13ffc17 	ldw	r4,-16(fp)
 8014080:	e17ffd17 	ldw	r5,-12(fp)
 8014084:	e1bffe17 	ldw	r6,-8(fp)
 8014088:	e1ffff17 	ldw	r7,-4(fp)
 801408c:	80142340 	call	8014234 <alt_iic_isr_register>
}  
 8014090:	e037883a 	mov	sp,fp
 8014094:	dfc00117 	ldw	ra,4(sp)
 8014098:	df000017 	ldw	fp,0(sp)
 801409c:	dec00204 	addi	sp,sp,8
 80140a0:	f800283a 	ret

080140a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80140a4:	defff904 	addi	sp,sp,-28
 80140a8:	df000615 	stw	fp,24(sp)
 80140ac:	df000604 	addi	fp,sp,24
 80140b0:	e13ffe15 	stw	r4,-8(fp)
 80140b4:	e17fff15 	stw	r5,-4(fp)
 80140b8:	e0bfff17 	ldw	r2,-4(fp)
 80140bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80140c0:	0005303a 	rdctl	r2,status
 80140c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80140c8:	e0fffb17 	ldw	r3,-20(fp)
 80140cc:	00bfff84 	movi	r2,-2
 80140d0:	1884703a 	and	r2,r3,r2
 80140d4:	1001703a 	wrctl	status,r2
  
  return context;
 80140d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80140dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80140e0:	e0bffa17 	ldw	r2,-24(fp)
 80140e4:	00c00044 	movi	r3,1
 80140e8:	1884983a 	sll	r2,r3,r2
 80140ec:	1007883a 	mov	r3,r2
 80140f0:	008200b4 	movhi	r2,2050
 80140f4:	108bcc04 	addi	r2,r2,12080
 80140f8:	10800017 	ldw	r2,0(r2)
 80140fc:	1886b03a 	or	r3,r3,r2
 8014100:	008200b4 	movhi	r2,2050
 8014104:	108bcc04 	addi	r2,r2,12080
 8014108:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801410c:	008200b4 	movhi	r2,2050
 8014110:	108bcc04 	addi	r2,r2,12080
 8014114:	10800017 	ldw	r2,0(r2)
 8014118:	100170fa 	wrctl	ienable,r2
 801411c:	e0bffc17 	ldw	r2,-16(fp)
 8014120:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014124:	e0bffd17 	ldw	r2,-12(fp)
 8014128:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801412c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8014130:	0001883a 	nop
}
 8014134:	e037883a 	mov	sp,fp
 8014138:	df000017 	ldw	fp,0(sp)
 801413c:	dec00104 	addi	sp,sp,4
 8014140:	f800283a 	ret

08014144 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8014144:	defff904 	addi	sp,sp,-28
 8014148:	df000615 	stw	fp,24(sp)
 801414c:	df000604 	addi	fp,sp,24
 8014150:	e13ffe15 	stw	r4,-8(fp)
 8014154:	e17fff15 	stw	r5,-4(fp)
 8014158:	e0bfff17 	ldw	r2,-4(fp)
 801415c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014160:	0005303a 	rdctl	r2,status
 8014164:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014168:	e0fffb17 	ldw	r3,-20(fp)
 801416c:	00bfff84 	movi	r2,-2
 8014170:	1884703a 	and	r2,r3,r2
 8014174:	1001703a 	wrctl	status,r2
  
  return context;
 8014178:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801417c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8014180:	e0bffa17 	ldw	r2,-24(fp)
 8014184:	00c00044 	movi	r3,1
 8014188:	1884983a 	sll	r2,r3,r2
 801418c:	0084303a 	nor	r2,zero,r2
 8014190:	1007883a 	mov	r3,r2
 8014194:	008200b4 	movhi	r2,2050
 8014198:	108bcc04 	addi	r2,r2,12080
 801419c:	10800017 	ldw	r2,0(r2)
 80141a0:	1886703a 	and	r3,r3,r2
 80141a4:	008200b4 	movhi	r2,2050
 80141a8:	108bcc04 	addi	r2,r2,12080
 80141ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80141b0:	008200b4 	movhi	r2,2050
 80141b4:	108bcc04 	addi	r2,r2,12080
 80141b8:	10800017 	ldw	r2,0(r2)
 80141bc:	100170fa 	wrctl	ienable,r2
 80141c0:	e0bffc17 	ldw	r2,-16(fp)
 80141c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80141c8:	e0bffd17 	ldw	r2,-12(fp)
 80141cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80141d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80141d4:	0001883a 	nop
}
 80141d8:	e037883a 	mov	sp,fp
 80141dc:	df000017 	ldw	fp,0(sp)
 80141e0:	dec00104 	addi	sp,sp,4
 80141e4:	f800283a 	ret

080141e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80141e8:	defffc04 	addi	sp,sp,-16
 80141ec:	df000315 	stw	fp,12(sp)
 80141f0:	df000304 	addi	fp,sp,12
 80141f4:	e13ffe15 	stw	r4,-8(fp)
 80141f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80141fc:	000530fa 	rdctl	r2,ienable
 8014200:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8014204:	e0bfff17 	ldw	r2,-4(fp)
 8014208:	00c00044 	movi	r3,1
 801420c:	1884983a 	sll	r2,r3,r2
 8014210:	1007883a 	mov	r3,r2
 8014214:	e0bffd17 	ldw	r2,-12(fp)
 8014218:	1884703a 	and	r2,r3,r2
 801421c:	1004c03a 	cmpne	r2,r2,zero
 8014220:	10803fcc 	andi	r2,r2,255
}
 8014224:	e037883a 	mov	sp,fp
 8014228:	df000017 	ldw	fp,0(sp)
 801422c:	dec00104 	addi	sp,sp,4
 8014230:	f800283a 	ret

08014234 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014234:	defff504 	addi	sp,sp,-44
 8014238:	dfc00a15 	stw	ra,40(sp)
 801423c:	df000915 	stw	fp,36(sp)
 8014240:	df000904 	addi	fp,sp,36
 8014244:	e13ffc15 	stw	r4,-16(fp)
 8014248:	e17ffd15 	stw	r5,-12(fp)
 801424c:	e1bffe15 	stw	r6,-8(fp)
 8014250:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8014254:	00bffa84 	movi	r2,-22
 8014258:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801425c:	e0bffd17 	ldw	r2,-12(fp)
 8014260:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014264:	e0bff817 	ldw	r2,-32(fp)
 8014268:	10800808 	cmpgei	r2,r2,32
 801426c:	1000271e 	bne	r2,zero,801430c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014270:	0005303a 	rdctl	r2,status
 8014274:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014278:	e0fffa17 	ldw	r3,-24(fp)
 801427c:	00bfff84 	movi	r2,-2
 8014280:	1884703a 	and	r2,r3,r2
 8014284:	1001703a 	wrctl	status,r2
  
  return context;
 8014288:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801428c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8014290:	008200b4 	movhi	r2,2050
 8014294:	108bf204 	addi	r2,r2,12232
 8014298:	e0fff817 	ldw	r3,-32(fp)
 801429c:	180690fa 	slli	r3,r3,3
 80142a0:	10c5883a 	add	r2,r2,r3
 80142a4:	e0fffe17 	ldw	r3,-8(fp)
 80142a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80142ac:	008200b4 	movhi	r2,2050
 80142b0:	108bf204 	addi	r2,r2,12232
 80142b4:	e0fff817 	ldw	r3,-32(fp)
 80142b8:	180690fa 	slli	r3,r3,3
 80142bc:	10c5883a 	add	r2,r2,r3
 80142c0:	10800104 	addi	r2,r2,4
 80142c4:	e0ffff17 	ldw	r3,-4(fp)
 80142c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80142cc:	e0bffe17 	ldw	r2,-8(fp)
 80142d0:	10000526 	beq	r2,zero,80142e8 <alt_iic_isr_register+0xb4>
 80142d4:	e0bff817 	ldw	r2,-32(fp)
 80142d8:	e13ffc17 	ldw	r4,-16(fp)
 80142dc:	100b883a 	mov	r5,r2
 80142e0:	80140a40 	call	80140a4 <alt_ic_irq_enable>
 80142e4:	00000406 	br	80142f8 <alt_iic_isr_register+0xc4>
 80142e8:	e0bff817 	ldw	r2,-32(fp)
 80142ec:	e13ffc17 	ldw	r4,-16(fp)
 80142f0:	100b883a 	mov	r5,r2
 80142f4:	80141440 	call	8014144 <alt_ic_irq_disable>
 80142f8:	e0bff715 	stw	r2,-36(fp)
 80142fc:	e0bff917 	ldw	r2,-28(fp)
 8014300:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014304:	e0bffb17 	ldw	r2,-20(fp)
 8014308:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801430c:	e0bff717 	ldw	r2,-36(fp)
}
 8014310:	e037883a 	mov	sp,fp
 8014314:	dfc00117 	ldw	ra,4(sp)
 8014318:	df000017 	ldw	fp,0(sp)
 801431c:	dec00204 	addi	sp,sp,8
 8014320:	f800283a 	ret

08014324 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8014324:	defff904 	addi	sp,sp,-28
 8014328:	dfc00615 	stw	ra,24(sp)
 801432c:	df000515 	stw	fp,20(sp)
 8014330:	df000504 	addi	fp,sp,20
 8014334:	e13ffc15 	stw	r4,-16(fp)
 8014338:	e17ffd15 	stw	r5,-12(fp)
 801433c:	e1bffe15 	stw	r6,-8(fp)
 8014340:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8014344:	e13ffd17 	ldw	r4,-12(fp)
 8014348:	e17ffe17 	ldw	r5,-8(fp)
 801434c:	e1bfff17 	ldw	r6,-4(fp)
 8014350:	80145780 	call	8014578 <open>
 8014354:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8014358:	e0bffb17 	ldw	r2,-20(fp)
 801435c:	10001c16 	blt	r2,zero,80143d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8014360:	008200b4 	movhi	r2,2050
 8014364:	10806904 	addi	r2,r2,420
 8014368:	e0fffb17 	ldw	r3,-20(fp)
 801436c:	18c00324 	muli	r3,r3,12
 8014370:	10c5883a 	add	r2,r2,r3
 8014374:	10c00017 	ldw	r3,0(r2)
 8014378:	e0bffc17 	ldw	r2,-16(fp)
 801437c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8014380:	008200b4 	movhi	r2,2050
 8014384:	10806904 	addi	r2,r2,420
 8014388:	e0fffb17 	ldw	r3,-20(fp)
 801438c:	18c00324 	muli	r3,r3,12
 8014390:	10c5883a 	add	r2,r2,r3
 8014394:	10800104 	addi	r2,r2,4
 8014398:	10c00017 	ldw	r3,0(r2)
 801439c:	e0bffc17 	ldw	r2,-16(fp)
 80143a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80143a4:	008200b4 	movhi	r2,2050
 80143a8:	10806904 	addi	r2,r2,420
 80143ac:	e0fffb17 	ldw	r3,-20(fp)
 80143b0:	18c00324 	muli	r3,r3,12
 80143b4:	10c5883a 	add	r2,r2,r3
 80143b8:	10800204 	addi	r2,r2,8
 80143bc:	10c00017 	ldw	r3,0(r2)
 80143c0:	e0bffc17 	ldw	r2,-16(fp)
 80143c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80143c8:	e13ffb17 	ldw	r4,-20(fp)
 80143cc:	80127e00 	call	80127e0 <alt_release_fd>
  }
} 
 80143d0:	e037883a 	mov	sp,fp
 80143d4:	dfc00117 	ldw	ra,4(sp)
 80143d8:	df000017 	ldw	fp,0(sp)
 80143dc:	dec00204 	addi	sp,sp,8
 80143e0:	f800283a 	ret

080143e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80143e4:	defffb04 	addi	sp,sp,-20
 80143e8:	dfc00415 	stw	ra,16(sp)
 80143ec:	df000315 	stw	fp,12(sp)
 80143f0:	df000304 	addi	fp,sp,12
 80143f4:	e13ffd15 	stw	r4,-12(fp)
 80143f8:	e17ffe15 	stw	r5,-8(fp)
 80143fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8014400:	010200b4 	movhi	r4,2050
 8014404:	21006c04 	addi	r4,r4,432
 8014408:	e17ffd17 	ldw	r5,-12(fp)
 801440c:	01800044 	movi	r6,1
 8014410:	01c07fc4 	movi	r7,511
 8014414:	80143240 	call	8014324 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8014418:	010200b4 	movhi	r4,2050
 801441c:	21006904 	addi	r4,r4,420
 8014420:	e17ffe17 	ldw	r5,-8(fp)
 8014424:	000d883a 	mov	r6,zero
 8014428:	01c07fc4 	movi	r7,511
 801442c:	80143240 	call	8014324 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8014430:	010200b4 	movhi	r4,2050
 8014434:	21006f04 	addi	r4,r4,444
 8014438:	e17fff17 	ldw	r5,-4(fp)
 801443c:	01800044 	movi	r6,1
 8014440:	01c07fc4 	movi	r7,511
 8014444:	80143240 	call	8014324 <alt_open_fd>
}  
 8014448:	e037883a 	mov	sp,fp
 801444c:	dfc00117 	ldw	ra,4(sp)
 8014450:	df000017 	ldw	fp,0(sp)
 8014454:	dec00204 	addi	sp,sp,8
 8014458:	f800283a 	ret

0801445c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801445c:	defffe04 	addi	sp,sp,-8
 8014460:	dfc00115 	stw	ra,4(sp)
 8014464:	df000015 	stw	fp,0(sp)
 8014468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801446c:	008200b4 	movhi	r2,2050
 8014470:	1084f704 	addi	r2,r2,5084
 8014474:	10800017 	ldw	r2,0(r2)
 8014478:	10000526 	beq	r2,zero,8014490 <alt_get_errno+0x34>
 801447c:	008200b4 	movhi	r2,2050
 8014480:	1084f704 	addi	r2,r2,5084
 8014484:	10800017 	ldw	r2,0(r2)
 8014488:	103ee83a 	callr	r2
 801448c:	00000206 	br	8014498 <alt_get_errno+0x3c>
 8014490:	008200b4 	movhi	r2,2050
 8014494:	108bc804 	addi	r2,r2,12064
}
 8014498:	e037883a 	mov	sp,fp
 801449c:	dfc00117 	ldw	ra,4(sp)
 80144a0:	df000017 	ldw	fp,0(sp)
 80144a4:	dec00204 	addi	sp,sp,8
 80144a8:	f800283a 	ret

080144ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80144ac:	defffd04 	addi	sp,sp,-12
 80144b0:	df000215 	stw	fp,8(sp)
 80144b4:	df000204 	addi	fp,sp,8
 80144b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80144bc:	e0bfff17 	ldw	r2,-4(fp)
 80144c0:	10800217 	ldw	r2,8(r2)
 80144c4:	10d00034 	orhi	r3,r2,16384
 80144c8:	e0bfff17 	ldw	r2,-4(fp)
 80144cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80144d0:	e03ffe15 	stw	zero,-8(fp)
 80144d4:	00001d06 	br	801454c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80144d8:	008200b4 	movhi	r2,2050
 80144dc:	10806904 	addi	r2,r2,420
 80144e0:	e0fffe17 	ldw	r3,-8(fp)
 80144e4:	18c00324 	muli	r3,r3,12
 80144e8:	10c5883a 	add	r2,r2,r3
 80144ec:	10c00017 	ldw	r3,0(r2)
 80144f0:	e0bfff17 	ldw	r2,-4(fp)
 80144f4:	10800017 	ldw	r2,0(r2)
 80144f8:	1880111e 	bne	r3,r2,8014540 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80144fc:	008200b4 	movhi	r2,2050
 8014500:	10806904 	addi	r2,r2,420
 8014504:	e0fffe17 	ldw	r3,-8(fp)
 8014508:	18c00324 	muli	r3,r3,12
 801450c:	10c5883a 	add	r2,r2,r3
 8014510:	10800204 	addi	r2,r2,8
 8014514:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014518:	1000090e 	bge	r2,zero,8014540 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801451c:	e0bffe17 	ldw	r2,-8(fp)
 8014520:	10c00324 	muli	r3,r2,12
 8014524:	008200b4 	movhi	r2,2050
 8014528:	10806904 	addi	r2,r2,420
 801452c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014530:	e0bfff17 	ldw	r2,-4(fp)
 8014534:	18800226 	beq	r3,r2,8014540 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8014538:	00bffcc4 	movi	r2,-13
 801453c:	00000a06 	br	8014568 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014540:	e0bffe17 	ldw	r2,-8(fp)
 8014544:	10800044 	addi	r2,r2,1
 8014548:	e0bffe15 	stw	r2,-8(fp)
 801454c:	008200b4 	movhi	r2,2050
 8014550:	1084f604 	addi	r2,r2,5080
 8014554:	10800017 	ldw	r2,0(r2)
 8014558:	1007883a 	mov	r3,r2
 801455c:	e0bffe17 	ldw	r2,-8(fp)
 8014560:	18bfdd2e 	bgeu	r3,r2,80144d8 <__alt_data_end+0xfc0144d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8014564:	0005883a 	mov	r2,zero
}
 8014568:	e037883a 	mov	sp,fp
 801456c:	df000017 	ldw	fp,0(sp)
 8014570:	dec00104 	addi	sp,sp,4
 8014574:	f800283a 	ret

08014578 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8014578:	defff604 	addi	sp,sp,-40
 801457c:	dfc00915 	stw	ra,36(sp)
 8014580:	df000815 	stw	fp,32(sp)
 8014584:	df000804 	addi	fp,sp,32
 8014588:	e13ffd15 	stw	r4,-12(fp)
 801458c:	e17ffe15 	stw	r5,-8(fp)
 8014590:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8014594:	00bfffc4 	movi	r2,-1
 8014598:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801459c:	00bffb44 	movi	r2,-19
 80145a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80145a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80145a8:	e13ffd17 	ldw	r4,-12(fp)
 80145ac:	014200b4 	movhi	r5,2050
 80145b0:	2944f404 	addi	r5,r5,5072
 80145b4:	8013f940 	call	8013f94 <alt_find_dev>
 80145b8:	e0bff815 	stw	r2,-32(fp)
 80145bc:	e0bff817 	ldw	r2,-32(fp)
 80145c0:	1000051e 	bne	r2,zero,80145d8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80145c4:	e13ffd17 	ldw	r4,-12(fp)
 80145c8:	801488c0 	call	801488c <alt_find_file>
 80145cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80145d0:	00800044 	movi	r2,1
 80145d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80145d8:	e0bff817 	ldw	r2,-32(fp)
 80145dc:	10002926 	beq	r2,zero,8014684 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80145e0:	e13ff817 	ldw	r4,-32(fp)
 80145e4:	80149a00 	call	80149a0 <alt_get_fd>
 80145e8:	e0bff915 	stw	r2,-28(fp)
 80145ec:	e0bff917 	ldw	r2,-28(fp)
 80145f0:	1000030e 	bge	r2,zero,8014600 <open+0x88>
    {
      status = index;
 80145f4:	e0bff917 	ldw	r2,-28(fp)
 80145f8:	e0bffa15 	stw	r2,-24(fp)
 80145fc:	00002306 	br	801468c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 8014600:	e0bff917 	ldw	r2,-28(fp)
 8014604:	10c00324 	muli	r3,r2,12
 8014608:	008200b4 	movhi	r2,2050
 801460c:	10806904 	addi	r2,r2,420
 8014610:	1885883a 	add	r2,r3,r2
 8014614:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8014618:	e0fffe17 	ldw	r3,-8(fp)
 801461c:	00900034 	movhi	r2,16384
 8014620:	10bfffc4 	addi	r2,r2,-1
 8014624:	1886703a 	and	r3,r3,r2
 8014628:	e0bffc17 	ldw	r2,-16(fp)
 801462c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8014630:	e0bffb17 	ldw	r2,-20(fp)
 8014634:	1000051e 	bne	r2,zero,801464c <open+0xd4>
 8014638:	e13ffc17 	ldw	r4,-16(fp)
 801463c:	80144ac0 	call	80144ac <alt_file_locked>
 8014640:	e0bffa15 	stw	r2,-24(fp)
 8014644:	e0bffa17 	ldw	r2,-24(fp)
 8014648:	10001016 	blt	r2,zero,801468c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801464c:	e0bff817 	ldw	r2,-32(fp)
 8014650:	10800317 	ldw	r2,12(r2)
 8014654:	10000826 	beq	r2,zero,8014678 <open+0x100>
 8014658:	e0bff817 	ldw	r2,-32(fp)
 801465c:	10800317 	ldw	r2,12(r2)
 8014660:	e13ffc17 	ldw	r4,-16(fp)
 8014664:	e17ffd17 	ldw	r5,-12(fp)
 8014668:	e1bffe17 	ldw	r6,-8(fp)
 801466c:	e1ffff17 	ldw	r7,-4(fp)
 8014670:	103ee83a 	callr	r2
 8014674:	00000106 	br	801467c <open+0x104>
 8014678:	0005883a 	mov	r2,zero
 801467c:	e0bffa15 	stw	r2,-24(fp)
 8014680:	00000206 	br	801468c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8014684:	00bffb44 	movi	r2,-19
 8014688:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801468c:	e0bffa17 	ldw	r2,-24(fp)
 8014690:	1000090e 	bge	r2,zero,80146b8 <open+0x140>
  {
    alt_release_fd (index);  
 8014694:	e13ff917 	ldw	r4,-28(fp)
 8014698:	80127e00 	call	80127e0 <alt_release_fd>
    ALT_ERRNO = -status;
 801469c:	801445c0 	call	801445c <alt_get_errno>
 80146a0:	1007883a 	mov	r3,r2
 80146a4:	e0bffa17 	ldw	r2,-24(fp)
 80146a8:	0085c83a 	sub	r2,zero,r2
 80146ac:	18800015 	stw	r2,0(r3)
    return -1;
 80146b0:	00bfffc4 	movi	r2,-1
 80146b4:	00000106 	br	80146bc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 80146b8:	e0bff917 	ldw	r2,-28(fp)
}
 80146bc:	e037883a 	mov	sp,fp
 80146c0:	dfc00117 	ldw	ra,4(sp)
 80146c4:	df000017 	ldw	fp,0(sp)
 80146c8:	dec00204 	addi	sp,sp,8
 80146cc:	f800283a 	ret

080146d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80146d0:	defffa04 	addi	sp,sp,-24
 80146d4:	df000515 	stw	fp,20(sp)
 80146d8:	df000504 	addi	fp,sp,20
 80146dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80146e0:	0005303a 	rdctl	r2,status
 80146e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80146e8:	e0fffc17 	ldw	r3,-16(fp)
 80146ec:	00bfff84 	movi	r2,-2
 80146f0:	1884703a 	and	r2,r3,r2
 80146f4:	1001703a 	wrctl	status,r2
  
  return context;
 80146f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80146fc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8014700:	e0bfff17 	ldw	r2,-4(fp)
 8014704:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8014708:	e0bffd17 	ldw	r2,-12(fp)
 801470c:	10800017 	ldw	r2,0(r2)
 8014710:	e0fffd17 	ldw	r3,-12(fp)
 8014714:	18c00117 	ldw	r3,4(r3)
 8014718:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 801471c:	e0bffd17 	ldw	r2,-12(fp)
 8014720:	10800117 	ldw	r2,4(r2)
 8014724:	e0fffd17 	ldw	r3,-12(fp)
 8014728:	18c00017 	ldw	r3,0(r3)
 801472c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8014730:	e0bffd17 	ldw	r2,-12(fp)
 8014734:	e0fffd17 	ldw	r3,-12(fp)
 8014738:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 801473c:	e0bffd17 	ldw	r2,-12(fp)
 8014740:	e0fffd17 	ldw	r3,-12(fp)
 8014744:	10c00015 	stw	r3,0(r2)
 8014748:	e0bffb17 	ldw	r2,-20(fp)
 801474c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014750:	e0bffe17 	ldw	r2,-8(fp)
 8014754:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8014758:	e037883a 	mov	sp,fp
 801475c:	df000017 	ldw	fp,0(sp)
 8014760:	dec00104 	addi	sp,sp,4
 8014764:	f800283a 	ret

08014768 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8014768:	defffb04 	addi	sp,sp,-20
 801476c:	dfc00415 	stw	ra,16(sp)
 8014770:	df000315 	stw	fp,12(sp)
 8014774:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8014778:	d0a00e17 	ldw	r2,-32712(gp)
 801477c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8014780:	d0a6e217 	ldw	r2,-25720(gp)
 8014784:	10800044 	addi	r2,r2,1
 8014788:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801478c:	00002e06 	br	8014848 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8014790:	e0bffd17 	ldw	r2,-12(fp)
 8014794:	10800017 	ldw	r2,0(r2)
 8014798:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801479c:	e0bffd17 	ldw	r2,-12(fp)
 80147a0:	10800403 	ldbu	r2,16(r2)
 80147a4:	10803fcc 	andi	r2,r2,255
 80147a8:	10000426 	beq	r2,zero,80147bc <alt_tick+0x54>
 80147ac:	d0a6e217 	ldw	r2,-25720(gp)
 80147b0:	1000021e 	bne	r2,zero,80147bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80147b4:	e0bffd17 	ldw	r2,-12(fp)
 80147b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80147bc:	e0bffd17 	ldw	r2,-12(fp)
 80147c0:	10800217 	ldw	r2,8(r2)
 80147c4:	d0e6e217 	ldw	r3,-25720(gp)
 80147c8:	18801d36 	bltu	r3,r2,8014840 <alt_tick+0xd8>
 80147cc:	e0bffd17 	ldw	r2,-12(fp)
 80147d0:	10800403 	ldbu	r2,16(r2)
 80147d4:	10803fcc 	andi	r2,r2,255
 80147d8:	1000191e 	bne	r2,zero,8014840 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80147dc:	e0bffd17 	ldw	r2,-12(fp)
 80147e0:	10800317 	ldw	r2,12(r2)
 80147e4:	e0fffd17 	ldw	r3,-12(fp)
 80147e8:	18c00517 	ldw	r3,20(r3)
 80147ec:	1809883a 	mov	r4,r3
 80147f0:	103ee83a 	callr	r2
 80147f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80147f8:	e0bfff17 	ldw	r2,-4(fp)
 80147fc:	1000031e 	bne	r2,zero,801480c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8014800:	e13ffd17 	ldw	r4,-12(fp)
 8014804:	80146d00 	call	80146d0 <alt_alarm_stop>
 8014808:	00000d06 	br	8014840 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801480c:	e0bffd17 	ldw	r2,-12(fp)
 8014810:	10c00217 	ldw	r3,8(r2)
 8014814:	e0bfff17 	ldw	r2,-4(fp)
 8014818:	1887883a 	add	r3,r3,r2
 801481c:	e0bffd17 	ldw	r2,-12(fp)
 8014820:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8014824:	e0bffd17 	ldw	r2,-12(fp)
 8014828:	10c00217 	ldw	r3,8(r2)
 801482c:	d0a6e217 	ldw	r2,-25720(gp)
 8014830:	1880032e 	bgeu	r3,r2,8014840 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8014834:	e0bffd17 	ldw	r2,-12(fp)
 8014838:	00c00044 	movi	r3,1
 801483c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8014840:	e0bffe17 	ldw	r2,-8(fp)
 8014844:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8014848:	e0fffd17 	ldw	r3,-12(fp)
 801484c:	d0a00e04 	addi	r2,gp,-32712
 8014850:	18bfcf1e 	bne	r3,r2,8014790 <__alt_data_end+0xfc014790>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8014854:	0001883a 	nop
}
 8014858:	e037883a 	mov	sp,fp
 801485c:	dfc00117 	ldw	ra,4(sp)
 8014860:	df000017 	ldw	fp,0(sp)
 8014864:	dec00204 	addi	sp,sp,8
 8014868:	f800283a 	ret

0801486c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 801486c:	deffff04 	addi	sp,sp,-4
 8014870:	df000015 	stw	fp,0(sp)
 8014874:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8014878:	000170fa 	wrctl	ienable,zero
}
 801487c:	e037883a 	mov	sp,fp
 8014880:	df000017 	ldw	fp,0(sp)
 8014884:	dec00104 	addi	sp,sp,4
 8014888:	f800283a 	ret

0801488c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801488c:	defffb04 	addi	sp,sp,-20
 8014890:	dfc00415 	stw	ra,16(sp)
 8014894:	df000315 	stw	fp,12(sp)
 8014898:	df000304 	addi	fp,sp,12
 801489c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80148a0:	008200b4 	movhi	r2,2050
 80148a4:	1084f204 	addi	r2,r2,5064
 80148a8:	10800017 	ldw	r2,0(r2)
 80148ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80148b0:	00003106 	br	8014978 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 80148b4:	e0bffd17 	ldw	r2,-12(fp)
 80148b8:	10800217 	ldw	r2,8(r2)
 80148bc:	1009883a 	mov	r4,r2
 80148c0:	80037580 	call	8003758 <strlen>
 80148c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80148c8:	e0bffd17 	ldw	r2,-12(fp)
 80148cc:	10c00217 	ldw	r3,8(r2)
 80148d0:	e0bffe17 	ldw	r2,-8(fp)
 80148d4:	10bfffc4 	addi	r2,r2,-1
 80148d8:	1885883a 	add	r2,r3,r2
 80148dc:	10800003 	ldbu	r2,0(r2)
 80148e0:	10803fcc 	andi	r2,r2,255
 80148e4:	1080201c 	xori	r2,r2,128
 80148e8:	10bfe004 	addi	r2,r2,-128
 80148ec:	10800bd8 	cmpnei	r2,r2,47
 80148f0:	1000031e 	bne	r2,zero,8014900 <alt_find_file+0x74>
    {
      len -= 1;
 80148f4:	e0bffe17 	ldw	r2,-8(fp)
 80148f8:	10bfffc4 	addi	r2,r2,-1
 80148fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014900:	e0bffe17 	ldw	r2,-8(fp)
 8014904:	e0ffff17 	ldw	r3,-4(fp)
 8014908:	1885883a 	add	r2,r3,r2
 801490c:	10800003 	ldbu	r2,0(r2)
 8014910:	10803fcc 	andi	r2,r2,255
 8014914:	1080201c 	xori	r2,r2,128
 8014918:	10bfe004 	addi	r2,r2,-128
 801491c:	10800be0 	cmpeqi	r2,r2,47
 8014920:	1000081e 	bne	r2,zero,8014944 <alt_find_file+0xb8>
 8014924:	e0bffe17 	ldw	r2,-8(fp)
 8014928:	e0ffff17 	ldw	r3,-4(fp)
 801492c:	1885883a 	add	r2,r3,r2
 8014930:	10800003 	ldbu	r2,0(r2)
 8014934:	10803fcc 	andi	r2,r2,255
 8014938:	1080201c 	xori	r2,r2,128
 801493c:	10bfe004 	addi	r2,r2,-128
 8014940:	10000a1e 	bne	r2,zero,801496c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8014944:	e0bffd17 	ldw	r2,-12(fp)
 8014948:	10c00217 	ldw	r3,8(r2)
 801494c:	e0bffe17 	ldw	r2,-8(fp)
 8014950:	1809883a 	mov	r4,r3
 8014954:	e17fff17 	ldw	r5,-4(fp)
 8014958:	100d883a 	mov	r6,r2
 801495c:	8014b2c0 	call	8014b2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8014960:	1000021e 	bne	r2,zero,801496c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8014964:	e0bffd17 	ldw	r2,-12(fp)
 8014968:	00000806 	br	801498c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 801496c:	e0bffd17 	ldw	r2,-12(fp)
 8014970:	10800017 	ldw	r2,0(r2)
 8014974:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8014978:	e0fffd17 	ldw	r3,-12(fp)
 801497c:	008200b4 	movhi	r2,2050
 8014980:	1084f204 	addi	r2,r2,5064
 8014984:	18bfcb1e 	bne	r3,r2,80148b4 <__alt_data_end+0xfc0148b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8014988:	0005883a 	mov	r2,zero
}
 801498c:	e037883a 	mov	sp,fp
 8014990:	dfc00117 	ldw	ra,4(sp)
 8014994:	df000017 	ldw	fp,0(sp)
 8014998:	dec00204 	addi	sp,sp,8
 801499c:	f800283a 	ret

080149a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80149a0:	defffc04 	addi	sp,sp,-16
 80149a4:	df000315 	stw	fp,12(sp)
 80149a8:	df000304 	addi	fp,sp,12
 80149ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80149b0:	00bffa04 	movi	r2,-24
 80149b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80149b8:	e03ffd15 	stw	zero,-12(fp)
 80149bc:	00001d06 	br	8014a34 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 80149c0:	008200b4 	movhi	r2,2050
 80149c4:	10806904 	addi	r2,r2,420
 80149c8:	e0fffd17 	ldw	r3,-12(fp)
 80149cc:	18c00324 	muli	r3,r3,12
 80149d0:	10c5883a 	add	r2,r2,r3
 80149d4:	10800017 	ldw	r2,0(r2)
 80149d8:	1000131e 	bne	r2,zero,8014a28 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 80149dc:	008200b4 	movhi	r2,2050
 80149e0:	10806904 	addi	r2,r2,420
 80149e4:	e0fffd17 	ldw	r3,-12(fp)
 80149e8:	18c00324 	muli	r3,r3,12
 80149ec:	10c5883a 	add	r2,r2,r3
 80149f0:	e0ffff17 	ldw	r3,-4(fp)
 80149f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80149f8:	008200b4 	movhi	r2,2050
 80149fc:	1084f604 	addi	r2,r2,5080
 8014a00:	10c00017 	ldw	r3,0(r2)
 8014a04:	e0bffd17 	ldw	r2,-12(fp)
 8014a08:	1880040e 	bge	r3,r2,8014a1c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8014a0c:	008200b4 	movhi	r2,2050
 8014a10:	1084f604 	addi	r2,r2,5080
 8014a14:	e0fffd17 	ldw	r3,-12(fp)
 8014a18:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8014a1c:	e0bffd17 	ldw	r2,-12(fp)
 8014a20:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8014a24:	00000606 	br	8014a40 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8014a28:	e0bffd17 	ldw	r2,-12(fp)
 8014a2c:	10800044 	addi	r2,r2,1
 8014a30:	e0bffd15 	stw	r2,-12(fp)
 8014a34:	e0bffd17 	ldw	r2,-12(fp)
 8014a38:	10800810 	cmplti	r2,r2,32
 8014a3c:	103fe01e 	bne	r2,zero,80149c0 <__alt_data_end+0xfc0149c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8014a40:	e0bffe17 	ldw	r2,-8(fp)
}
 8014a44:	e037883a 	mov	sp,fp
 8014a48:	df000017 	ldw	fp,0(sp)
 8014a4c:	dec00104 	addi	sp,sp,4
 8014a50:	f800283a 	ret

08014a54 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8014a54:	defffb04 	addi	sp,sp,-20
 8014a58:	df000415 	stw	fp,16(sp)
 8014a5c:	df000404 	addi	fp,sp,16
 8014a60:	e13ffe15 	stw	r4,-8(fp)
 8014a64:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8014a68:	e0bfff17 	ldw	r2,-4(fp)
 8014a6c:	10840070 	cmpltui	r2,r2,4097
 8014a70:	1000021e 	bne	r2,zero,8014a7c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8014a74:	00840004 	movi	r2,4096
 8014a78:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8014a7c:	e0fffe17 	ldw	r3,-8(fp)
 8014a80:	e0bfff17 	ldw	r2,-4(fp)
 8014a84:	1885883a 	add	r2,r3,r2
 8014a88:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8014a8c:	e0bffe17 	ldw	r2,-8(fp)
 8014a90:	e0bffc15 	stw	r2,-16(fp)
 8014a94:	00000506 	br	8014aac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8014a98:	e0bffc17 	ldw	r2,-16(fp)
 8014a9c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8014aa0:	e0bffc17 	ldw	r2,-16(fp)
 8014aa4:	10800804 	addi	r2,r2,32
 8014aa8:	e0bffc15 	stw	r2,-16(fp)
 8014aac:	e0fffc17 	ldw	r3,-16(fp)
 8014ab0:	e0bffd17 	ldw	r2,-12(fp)
 8014ab4:	18bff836 	bltu	r3,r2,8014a98 <__alt_data_end+0xfc014a98>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8014ab8:	e0bffe17 	ldw	r2,-8(fp)
 8014abc:	108007cc 	andi	r2,r2,31
 8014ac0:	10000226 	beq	r2,zero,8014acc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8014ac4:	e0bffc17 	ldw	r2,-16(fp)
 8014ac8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8014acc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8014ad0:	e037883a 	mov	sp,fp
 8014ad4:	df000017 	ldw	fp,0(sp)
 8014ad8:	dec00104 	addi	sp,sp,4
 8014adc:	f800283a 	ret

08014ae0 <atexit>:
 8014ae0:	200b883a 	mov	r5,r4
 8014ae4:	000d883a 	mov	r6,zero
 8014ae8:	0009883a 	mov	r4,zero
 8014aec:	000f883a 	mov	r7,zero
 8014af0:	8014ba81 	jmpi	8014ba8 <__register_exitproc>

08014af4 <exit>:
 8014af4:	defffe04 	addi	sp,sp,-8
 8014af8:	000b883a 	mov	r5,zero
 8014afc:	dc000015 	stw	r16,0(sp)
 8014b00:	dfc00115 	stw	ra,4(sp)
 8014b04:	2021883a 	mov	r16,r4
 8014b08:	8014cbc0 	call	8014cbc <__call_exitprocs>
 8014b0c:	008200b4 	movhi	r2,2050
 8014b10:	1084ec04 	addi	r2,r2,5040
 8014b14:	11000017 	ldw	r4,0(r2)
 8014b18:	20800f17 	ldw	r2,60(r4)
 8014b1c:	10000126 	beq	r2,zero,8014b24 <exit+0x30>
 8014b20:	103ee83a 	callr	r2
 8014b24:	8009883a 	mov	r4,r16
 8014b28:	8014e500 	call	8014e50 <_exit>

08014b2c <memcmp>:
 8014b2c:	01c000c4 	movi	r7,3
 8014b30:	3980192e 	bgeu	r7,r6,8014b98 <memcmp+0x6c>
 8014b34:	2144b03a 	or	r2,r4,r5
 8014b38:	11c4703a 	and	r2,r2,r7
 8014b3c:	10000f26 	beq	r2,zero,8014b7c <memcmp+0x50>
 8014b40:	20800003 	ldbu	r2,0(r4)
 8014b44:	28c00003 	ldbu	r3,0(r5)
 8014b48:	10c0151e 	bne	r2,r3,8014ba0 <memcmp+0x74>
 8014b4c:	31bfff84 	addi	r6,r6,-2
 8014b50:	01ffffc4 	movi	r7,-1
 8014b54:	00000406 	br	8014b68 <memcmp+0x3c>
 8014b58:	20800003 	ldbu	r2,0(r4)
 8014b5c:	28c00003 	ldbu	r3,0(r5)
 8014b60:	31bfffc4 	addi	r6,r6,-1
 8014b64:	10c00e1e 	bne	r2,r3,8014ba0 <memcmp+0x74>
 8014b68:	21000044 	addi	r4,r4,1
 8014b6c:	29400044 	addi	r5,r5,1
 8014b70:	31fff91e 	bne	r6,r7,8014b58 <__alt_data_end+0xfc014b58>
 8014b74:	0005883a 	mov	r2,zero
 8014b78:	f800283a 	ret
 8014b7c:	20c00017 	ldw	r3,0(r4)
 8014b80:	28800017 	ldw	r2,0(r5)
 8014b84:	1880041e 	bne	r3,r2,8014b98 <memcmp+0x6c>
 8014b88:	31bfff04 	addi	r6,r6,-4
 8014b8c:	21000104 	addi	r4,r4,4
 8014b90:	29400104 	addi	r5,r5,4
 8014b94:	39bff936 	bltu	r7,r6,8014b7c <__alt_data_end+0xfc014b7c>
 8014b98:	303fe91e 	bne	r6,zero,8014b40 <__alt_data_end+0xfc014b40>
 8014b9c:	003ff506 	br	8014b74 <__alt_data_end+0xfc014b74>
 8014ba0:	10c5c83a 	sub	r2,r2,r3
 8014ba4:	f800283a 	ret

08014ba8 <__register_exitproc>:
 8014ba8:	008200b4 	movhi	r2,2050
 8014bac:	defffa04 	addi	sp,sp,-24
 8014bb0:	1084ec04 	addi	r2,r2,5040
 8014bb4:	dc000315 	stw	r16,12(sp)
 8014bb8:	14000017 	ldw	r16,0(r2)
 8014bbc:	dc400415 	stw	r17,16(sp)
 8014bc0:	dfc00515 	stw	ra,20(sp)
 8014bc4:	80805217 	ldw	r2,328(r16)
 8014bc8:	2023883a 	mov	r17,r4
 8014bcc:	10003626 	beq	r2,zero,8014ca8 <__register_exitproc+0x100>
 8014bd0:	10c00117 	ldw	r3,4(r2)
 8014bd4:	010007c4 	movi	r4,31
 8014bd8:	20c00e16 	blt	r4,r3,8014c14 <__register_exitproc+0x6c>
 8014bdc:	1a400044 	addi	r9,r3,1
 8014be0:	8800211e 	bne	r17,zero,8014c68 <__register_exitproc+0xc0>
 8014be4:	18c00084 	addi	r3,r3,2
 8014be8:	18c7883a 	add	r3,r3,r3
 8014bec:	18c7883a 	add	r3,r3,r3
 8014bf0:	12400115 	stw	r9,4(r2)
 8014bf4:	10c7883a 	add	r3,r2,r3
 8014bf8:	19400015 	stw	r5,0(r3)
 8014bfc:	0005883a 	mov	r2,zero
 8014c00:	dfc00517 	ldw	ra,20(sp)
 8014c04:	dc400417 	ldw	r17,16(sp)
 8014c08:	dc000317 	ldw	r16,12(sp)
 8014c0c:	dec00604 	addi	sp,sp,24
 8014c10:	f800283a 	ret
 8014c14:	00800034 	movhi	r2,0
 8014c18:	10800004 	addi	r2,r2,0
 8014c1c:	10002526 	beq	r2,zero,8014cb4 <__register_exitproc+0x10c>
 8014c20:	01006404 	movi	r4,400
 8014c24:	d9400015 	stw	r5,0(sp)
 8014c28:	d9800115 	stw	r6,4(sp)
 8014c2c:	d9c00215 	stw	r7,8(sp)
 8014c30:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8014c34:	d9400017 	ldw	r5,0(sp)
 8014c38:	d9800117 	ldw	r6,4(sp)
 8014c3c:	d9c00217 	ldw	r7,8(sp)
 8014c40:	10001c26 	beq	r2,zero,8014cb4 <__register_exitproc+0x10c>
 8014c44:	80c05217 	ldw	r3,328(r16)
 8014c48:	10000115 	stw	zero,4(r2)
 8014c4c:	02400044 	movi	r9,1
 8014c50:	10c00015 	stw	r3,0(r2)
 8014c54:	80805215 	stw	r2,328(r16)
 8014c58:	10006215 	stw	zero,392(r2)
 8014c5c:	10006315 	stw	zero,396(r2)
 8014c60:	0007883a 	mov	r3,zero
 8014c64:	883fdf26 	beq	r17,zero,8014be4 <__alt_data_end+0xfc014be4>
 8014c68:	18d1883a 	add	r8,r3,r3
 8014c6c:	4211883a 	add	r8,r8,r8
 8014c70:	1211883a 	add	r8,r2,r8
 8014c74:	41802215 	stw	r6,136(r8)
 8014c78:	01000044 	movi	r4,1
 8014c7c:	11806217 	ldw	r6,392(r2)
 8014c80:	20c8983a 	sll	r4,r4,r3
 8014c84:	310cb03a 	or	r6,r6,r4
 8014c88:	11806215 	stw	r6,392(r2)
 8014c8c:	41c04215 	stw	r7,264(r8)
 8014c90:	01800084 	movi	r6,2
 8014c94:	89bfd31e 	bne	r17,r6,8014be4 <__alt_data_end+0xfc014be4>
 8014c98:	11806317 	ldw	r6,396(r2)
 8014c9c:	3108b03a 	or	r4,r6,r4
 8014ca0:	11006315 	stw	r4,396(r2)
 8014ca4:	003fcf06 	br	8014be4 <__alt_data_end+0xfc014be4>
 8014ca8:	80805304 	addi	r2,r16,332
 8014cac:	80805215 	stw	r2,328(r16)
 8014cb0:	003fc706 	br	8014bd0 <__alt_data_end+0xfc014bd0>
 8014cb4:	00bfffc4 	movi	r2,-1
 8014cb8:	003fd106 	br	8014c00 <__alt_data_end+0xfc014c00>

08014cbc <__call_exitprocs>:
 8014cbc:	008200b4 	movhi	r2,2050
 8014cc0:	1084ec04 	addi	r2,r2,5040
 8014cc4:	10800017 	ldw	r2,0(r2)
 8014cc8:	defff404 	addi	sp,sp,-48
 8014ccc:	dd800815 	stw	r22,32(sp)
 8014cd0:	d8800015 	stw	r2,0(sp)
 8014cd4:	10805204 	addi	r2,r2,328
 8014cd8:	dd000615 	stw	r20,24(sp)
 8014cdc:	dc800415 	stw	r18,16(sp)
 8014ce0:	dfc00b15 	stw	ra,44(sp)
 8014ce4:	df000a15 	stw	fp,40(sp)
 8014ce8:	ddc00915 	stw	r23,36(sp)
 8014cec:	dd400715 	stw	r21,28(sp)
 8014cf0:	dcc00515 	stw	r19,20(sp)
 8014cf4:	dc400315 	stw	r17,12(sp)
 8014cf8:	dc000215 	stw	r16,8(sp)
 8014cfc:	2025883a 	mov	r18,r4
 8014d00:	2829883a 	mov	r20,r5
 8014d04:	d8800115 	stw	r2,4(sp)
 8014d08:	05bfffc4 	movi	r22,-1
 8014d0c:	d8800017 	ldw	r2,0(sp)
 8014d10:	14c05217 	ldw	r19,328(r2)
 8014d14:	98001d26 	beq	r19,zero,8014d8c <__call_exitprocs+0xd0>
 8014d18:	dd400117 	ldw	r21,4(sp)
 8014d1c:	98800117 	ldw	r2,4(r19)
 8014d20:	173fffc4 	addi	fp,r2,-1
 8014d24:	e0000d16 	blt	fp,zero,8014d5c <__call_exitprocs+0xa0>
 8014d28:	14000044 	addi	r16,r2,1
 8014d2c:	8421883a 	add	r16,r16,r16
 8014d30:	8421883a 	add	r16,r16,r16
 8014d34:	84402004 	addi	r17,r16,128
 8014d38:	9c63883a 	add	r17,r19,r17
 8014d3c:	9c21883a 	add	r16,r19,r16
 8014d40:	a0001e26 	beq	r20,zero,8014dbc <__call_exitprocs+0x100>
 8014d44:	80804017 	ldw	r2,256(r16)
 8014d48:	15001c26 	beq	r2,r20,8014dbc <__call_exitprocs+0x100>
 8014d4c:	e73fffc4 	addi	fp,fp,-1
 8014d50:	843fff04 	addi	r16,r16,-4
 8014d54:	8c7fff04 	addi	r17,r17,-4
 8014d58:	e5bff91e 	bne	fp,r22,8014d40 <__alt_data_end+0xfc014d40>
 8014d5c:	00800034 	movhi	r2,0
 8014d60:	10800004 	addi	r2,r2,0
 8014d64:	10000926 	beq	r2,zero,8014d8c <__call_exitprocs+0xd0>
 8014d68:	98800117 	ldw	r2,4(r19)
 8014d6c:	1000311e 	bne	r2,zero,8014e34 <__call_exitprocs+0x178>
 8014d70:	98800017 	ldw	r2,0(r19)
 8014d74:	10003426 	beq	r2,zero,8014e48 <__call_exitprocs+0x18c>
 8014d78:	9809883a 	mov	r4,r19
 8014d7c:	a8800015 	stw	r2,0(r21)
 8014d80:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8014d84:	acc00017 	ldw	r19,0(r21)
 8014d88:	983fe41e 	bne	r19,zero,8014d1c <__alt_data_end+0xfc014d1c>
 8014d8c:	dfc00b17 	ldw	ra,44(sp)
 8014d90:	df000a17 	ldw	fp,40(sp)
 8014d94:	ddc00917 	ldw	r23,36(sp)
 8014d98:	dd800817 	ldw	r22,32(sp)
 8014d9c:	dd400717 	ldw	r21,28(sp)
 8014da0:	dd000617 	ldw	r20,24(sp)
 8014da4:	dcc00517 	ldw	r19,20(sp)
 8014da8:	dc800417 	ldw	r18,16(sp)
 8014dac:	dc400317 	ldw	r17,12(sp)
 8014db0:	dc000217 	ldw	r16,8(sp)
 8014db4:	dec00c04 	addi	sp,sp,48
 8014db8:	f800283a 	ret
 8014dbc:	98800117 	ldw	r2,4(r19)
 8014dc0:	80c00017 	ldw	r3,0(r16)
 8014dc4:	10bfffc4 	addi	r2,r2,-1
 8014dc8:	17001526 	beq	r2,fp,8014e20 <__call_exitprocs+0x164>
 8014dcc:	80000015 	stw	zero,0(r16)
 8014dd0:	183fde26 	beq	r3,zero,8014d4c <__alt_data_end+0xfc014d4c>
 8014dd4:	00800044 	movi	r2,1
 8014dd8:	1708983a 	sll	r4,r2,fp
 8014ddc:	98806217 	ldw	r2,392(r19)
 8014de0:	9dc00117 	ldw	r23,4(r19)
 8014de4:	2084703a 	and	r2,r4,r2
 8014de8:	1000061e 	bne	r2,zero,8014e04 <__call_exitprocs+0x148>
 8014dec:	183ee83a 	callr	r3
 8014df0:	98800117 	ldw	r2,4(r19)
 8014df4:	15ffc51e 	bne	r2,r23,8014d0c <__alt_data_end+0xfc014d0c>
 8014df8:	a8800017 	ldw	r2,0(r21)
 8014dfc:	14ffd326 	beq	r2,r19,8014d4c <__alt_data_end+0xfc014d4c>
 8014e00:	003fc206 	br	8014d0c <__alt_data_end+0xfc014d0c>
 8014e04:	98806317 	ldw	r2,396(r19)
 8014e08:	2084703a 	and	r2,r4,r2
 8014e0c:	1000061e 	bne	r2,zero,8014e28 <__call_exitprocs+0x16c>
 8014e10:	89400017 	ldw	r5,0(r17)
 8014e14:	9009883a 	mov	r4,r18
 8014e18:	183ee83a 	callr	r3
 8014e1c:	003ff406 	br	8014df0 <__alt_data_end+0xfc014df0>
 8014e20:	9f000115 	stw	fp,4(r19)
 8014e24:	003fea06 	br	8014dd0 <__alt_data_end+0xfc014dd0>
 8014e28:	89000017 	ldw	r4,0(r17)
 8014e2c:	183ee83a 	callr	r3
 8014e30:	003fef06 	br	8014df0 <__alt_data_end+0xfc014df0>
 8014e34:	98800017 	ldw	r2,0(r19)
 8014e38:	982b883a 	mov	r21,r19
 8014e3c:	1027883a 	mov	r19,r2
 8014e40:	983fb61e 	bne	r19,zero,8014d1c <__alt_data_end+0xfc014d1c>
 8014e44:	003fd106 	br	8014d8c <__alt_data_end+0xfc014d8c>
 8014e48:	0005883a 	mov	r2,zero
 8014e4c:	003ffa06 	br	8014e38 <__alt_data_end+0xfc014e38>

08014e50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8014e50:	defffd04 	addi	sp,sp,-12
 8014e54:	df000215 	stw	fp,8(sp)
 8014e58:	df000204 	addi	fp,sp,8
 8014e5c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8014e60:	0001883a 	nop
 8014e64:	e0bfff17 	ldw	r2,-4(fp)
 8014e68:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8014e6c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8014e70:	10000226 	beq	r2,zero,8014e7c <_exit+0x2c>
    ALT_SIM_FAIL();
 8014e74:	002af070 	cmpltui	zero,zero,43969
 8014e78:	00000106 	br	8014e80 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8014e7c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8014e80:	003fff06 	br	8014e80 <__alt_data_end+0xfc014e80>
