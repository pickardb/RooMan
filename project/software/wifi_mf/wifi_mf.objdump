
wifi_mf.elf:     file format elf32-littlenios2
wifi_mf.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00020704 memsz 0x00020704 flags r-x
    LOAD off    0x00021724 vaddr 0x08020724 paddr 0x08022264 align 2**12
         filesz 0x00001b40 memsz 0x00001b40 flags rw-
    LOAD off    0x00023da4 vaddr 0x08023da4 paddr 0x08023da4 align 2**12
         filesz 0x00000000 memsz 0x00000250 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015a20  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ab48  08015bdc  08015bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  08020724  08022264  00021724  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000250  08023da4  08023da4  00023da4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08023ff4  08023ff4  00023264  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00023264  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e68  00000000  00000000  00023288  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002af29  00000000  00000000  000240f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a654  00000000  00000000  0004f019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d786  00000000  00000000  0005966d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003038  00000000  00000000  00066df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004242  00000000  00000000  00069e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b642  00000000  00000000  0006e06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000896b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000014c8  00000000  00000000  00089700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008eb06  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008eb09  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008eb15  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008eb16  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008eb17  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008eb22  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008eb2d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0008eb38  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000026  00000000  00000000  0008eb43  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0008eb69  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006f74b  00000000  00000000  000936b5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08015bdc l    d  .rodata	00000000 .rodata
08020724 l    d  .rwdata	00000000 .rwdata
08023da4 l    d  .bss	00000000 .bss
08023ff4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../wifi_mf_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0802074c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08020516 l     O .rodata	00000010 zeroes.4166
08020526 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08020536 l     O .rodata	00000010 zeroes.4181
08020546 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08009470 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800aff0 l     F .text	00000008 __fp_lock
0800aff8 l     F .text	00000008 __fp_unlock
0800b00c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08020f98 l     O .rwdata	00000020 lc_ctype_charset
08020f78 l     O .rwdata	00000020 lc_message_charset
08020fb8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08020574 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08020698 l     O .rodata	00000010 zeroes.4110
080206a8 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0800f008 l     F .text	000000fc __sprint_r.part.0
080206c8 l     O .rodata	00000010 blanks.4125
080206b8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08011924 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
08012d14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08012e34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08012e60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08012f60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08013054 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08013138 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08013314 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08022254 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
08013570 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08013678 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080137c0 l     F .text	00000038 alt_dev_reg
08021198 l     O .rwdata	00001060 jtag_uart_0
080221f8 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08013ac4 l     F .text	00000204 altera_avalon_jtag_uart_irq
08013cc8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080142e8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08014b40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801507c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080151b4 l     F .text	00000050 alt_get_errno
08015204 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080004a0 g     F .text	00000054 sign
080050f4 g     F .text	00000018 putchar
0800d304 g     F .text	00000074 _mprec_log10
0800d3f0 g     F .text	0000008c __any_on
08010ac8 g     F .text	00000054 _isatty_r
08020580 g     O .rodata	00000028 __mprec_tinytens
0801325c g     F .text	00000078 alt_main
0800510c g     F .text	000000b8 _puts_r
08023ef4 g     O .bss	00000100 alt_irq
08000ec8 g     F .text	000000fc GetBasePen
08010b1c g     F .text	0000005c _lseek_r
08022264 g       *ABS*	00000000 __flash_rwdata_start
08014458 g     F .text	0000003c alt_up_character_lcd_send_cmd
0801231c g     F .text	00000084 .hidden __eqdf2
08000304 g     F .text	0000007c ProgramPalette
08023ff4 g       *ABS*	00000000 __alt_heap_start
08001560 g     F .text	0000017c readDataFromTx
08000914 g     F .text	000001b0 OutGraphicsCharFont2
080050b0 g     F .text	0000003c printf
08015e76 g     O .rodata	00000a64 Font10x14
08010bd4 g     F .text	0000009c _wcrtomb_r
08000e78 g     F .text	00000050 GetPress
0800dcd0 g     F .text	0000005c __sseek
0800b340 g     F .text	00000010 __sinit
0801049c g     F .text	00000154 __swbuf_r
0800bdb8 g     F .text	0000007c _setlocale_r
08000d4c g     F .text	00000030 WaitForTouch
0800b1ac g     F .text	00000064 __sfmoreglue
080132f4 g     F .text	00000020 __malloc_unlock
08001b78 g     F .text	00000064 Wifi_Send_Sms
0800c270 g     F .text	0000015c memmove
0800b328 g     F .text	00000018 _cleanup
0800c4f0 g     F .text	000000a8 _Balloc
08003dc8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
080143e4 g     F .text	00000074 get_DDRAM_addr
08000ac4 g     F .text	00000148 DrawString
08000000 g     F .entry	0000001c __reset
080025b0 g     F .text	00000074 waitForInterrupt
080135c0 g     F .text	00000088 times
08001af8 g     F .text	00000050 Wifi_Print_Response
08000020 g       *ABS*	00000000 __flash_exceptions_start
08010a70 g     F .text	00000058 _fstat_r
08023db4 g     O .bss	00000004 errno
08003338 g     F .text	000001f4 floor
0800dc4c g     F .text	00000008 __seofread
0800dfa0 g     F .text	00001068 ___svfiprintf_internal_r
08023dc8 g     O .bss	00000004 alt_argv
0802a224 g       *ABS*	00000000 _gp
08013648 g     F .text	00000030 usleep
08001074 g     F .text	00000060 putcharRS232
08001770 g     F .text	00000030 reset
08021018 g     O .rwdata	00000180 alt_fd_list
0800118c g     F .text	00000030 RS232TestForReceivedData
080050ec g     F .text	00000008 _putchar_r
08014cec g     F .text	00000090 alt_find_dev
0800c138 g     F .text	00000138 memcpy
08007318 g     F .text	00000008 _times_r
080145f4 g     F .text	00000050 alt_up_character_lcd_write_fd
08001014 g     F .text	00000060 Init_RS232
0800b000 g     F .text	0000000c _cleanup_r
08004734 g     F .text	000000d0 .hidden __floatsidf
08001dbc g     F .text	00000660 InfoDisplay
0801513c g     F .text	00000078 alt_io_redirect
08003ea8 g     F .text	000000e0 .hidden __ltdf2
08015bdc g       *ABS*	00000000 __DTOR_END__
080051c4 g     F .text	00000014 puts
08002950 g     F .text	00000188 InfoChoice
0800db84 g     F .text	00000074 __fpclassifyd
0800d260 g     F .text	000000a4 __ratio
08010478 g     F .text	00000024 __vfiprintf_internal
08013ec4 g     F .text	0000020c altera_avalon_jtag_uart_read
080048b4 g     F .text	00000014 malloc
08005084 g     F .text	0000002c _printf_r
08011a40 g     F .text	00000008 .hidden __udivsi3
08012fb0 g     F .text	000000a4 isatty
080205d0 g     O .rodata	000000c8 __mprec_tens
08002ad8 g     F .text	000000e4 PrintNumbers
0801a96c g     O .rodata	00005794 Font38x59
0800be34 g     F .text	0000000c __locale_charset
08000380 g     F .text	00000090 DrawHorizontalLine
080157ac g     F .text	0000008c alt_icache_flush
0800241c g     F .text	00000060 RequestCloseDisplay
08023db0 g     O .bss	00000004 __malloc_top_pad
08022234 g     O .rwdata	00000004 __mb_cur_max
0800be64 g     F .text	0000000c _localeconv_r
0800c8f0 g     F .text	0000003c __i2b
0800b7a4 g     F .text	000004a4 __sfvwrite_r
080018b8 g     F .text	00000094 configureBluetoothDongle
080051d8 g     F .text	00000054 _sbrk_r
080013c0 g     F .text	0000005c putcharBluetooth
08010b78 g     F .text	0000005c _read_r
0802224c g     O .rwdata	00000004 alt_max_fd
08010780 g     F .text	00000100 _fclose_r
0800173c g     F .text	00000034 enterCommandMode
0800afc0 g     F .text	00000030 fflush
08023dac g     O .bss	00000004 __malloc_max_sbrked_mem
08000d7c g     F .text	000000fc GetPen
0800352c g     F .text	0000089c .hidden __adddf3
0800d008 g     F .text	0000011c __b2d
08011394 g     F .text	00000590 .hidden __umoddi3
08013188 g     F .text	000000d4 lseek
08001804 g     F .text	00000034 setPassword
08022224 g     O .rwdata	00000004 _global_impure_ptr
0800d5e4 g     F .text	000005a0 _realloc_r
080024dc g     F .text	000000d4 BaseChoice
08023ff4 g       *ABS*	00000000 __bss_end
08014f8c g     F .text	000000f0 alt_iic_isr_register
080154c0 g     F .text	00000104 alt_tick
08010dd4 g     F .text	000005c0 .hidden __udivdi3
08010894 g     F .text	00000184 _fputwc_r
080205a8 g     O .rodata	00000028 __mprec_bigtens
0800c6d4 g     F .text	00000104 __s2b
08012c70 g     F .text	000000a4 .hidden __floatunsidf
08001a28 g     F .text	00000048 Wifi_Get_Char
0800cdb0 g     F .text	00000060 __mcmp
08000cac g     F .text	0000006c Init_Touch
0800b360 g     F .text	00000018 __fp_lock_all
08014f40 g     F .text	0000004c alt_ic_irq_enabled
08015428 g     F .text	00000098 alt_alarm_stop
080168da g     O .rodata	0000140a Font16x27
08023dd0 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08020ff0 g     O .rwdata	00000028 alt_dev_null
08000768 g     F .text	000001ac OutGraphicsCharFont1
08014888 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08014b24 g     F .text	0000001c alt_dcache_flush_all
0800c7d8 g     F .text	00000068 __hi0bits
0800198c g     F .text	0000004c Wifi_Init
080046ac g     F .text	00000088 .hidden __fixdfsi
080011bc g     F .text	0000004c GetRangeData
08022264 g       *ABS*	00000000 __ram_rwdata_end
08022244 g     O .rwdata	00000008 alt_dev_list
080136c8 g     F .text	000000f8 write
0800d47c g     F .text	000000a0 _putc_r
08000410 g     F .text	00000090 DrawVerticalLine
08020724 g       *ABS*	00000000 __ram_rodata_end
08012eb0 g     F .text	000000b0 fstat
08003ea8 g     F .text	000000e0 .hidden __ledf2
08000d18 g     F .text	00000034 ScreenTouched
0800cb28 g     F .text	00000140 __pow5mult
0800f11c g     F .text	0000135c ___vfiprintf_internal_r
08023dc0 g     O .bss	00000004 __nlocale_changed
08011a48 g     F .text	00000008 .hidden __umodsi3
08023ff4 g       *ABS*	00000000 end
08013a00 g     F .text	000000c4 altera_avalon_jtag_uart_init
08015bdc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801435c g     F .text	00000088 alt_avalon_timer_sc_init
08004804 g     F .text	00000064 .hidden __clzsi2
080140d0 g     F .text	00000218 altera_avalon_jtag_uart_write
0800b350 g     F .text	00000004 __sfp_lock_acquire
0800c050 g     F .text	000000e8 memchr
08014508 g     F .text	00000078 alt_up_character_lcd_write
08007320 g     F .text	00001ffc ___vfprintf_internal_r
0800522c g     F .text	00000058 _sprintf_r
0800b4b4 g     F .text	000002f0 _free_r
08001474 g     F .text	0000005c wait
0800be40 g     F .text	00000010 __locale_mb_cur_max
08020724 g     O .rwdata	00000028 WIFI_MESSAGE_DEPENDENT_IS_SAFE
08015a14 g     F .text	00000194 __call_exitprocs
08023dbc g     O .bss	00000004 __mlocale_changed
08001394 g     F .text	0000002c SendSolved
0802222c g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08023dd4 g     O .bss	00000004 _alt_tick_rate
0800cc68 g     F .text	00000148 __lshift
08000fc4 g     F .text	00000050 GetBasePress
08023dd8 g     O .bss	00000004 _alt_nticks
08013364 g     F .text	000000fc read
0801382c g     F .text	00000070 alt_sys_init
08014740 g     F .text	00000088 alt_up_character_lcd_shift_display
0800ddd8 g     F .text	000001c8 __ssprint_r
08015900 g     F .text	00000114 __register_exitproc
0800247c g     F .text	00000060 RequestOpenDisplay
0800c92c g     F .text	000001fc __multiply
080147c8 g     F .text	0000008c alt_up_character_lcd_erase_pos
08013d70 g     F .text	00000068 altera_avalon_jtag_uart_close
08020724 g       *ABS*	00000000 __ram_rwdata_start
08015bdc g       *ABS*	00000000 __ram_rodata_start
08023ddc g     O .bss	00000028 __malloc_current_mallinfo
0800d124 g     F .text	0000013c __d2b
08023e04 g     O .bss	000000f0 roomArray
0801389c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080156f8 g     F .text	000000b4 alt_get_fd
080149fc g     F .text	00000128 alt_busy_sleep
08010668 g     F .text	00000054 _close_r
08015884 g     F .text	0000007c memcmp
0801395c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08023ff4 g       *ABS*	00000000 __alt_stack_base
080139ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080032b4 g     F .text	00000048 TestSerial
08000600 g     F .text	00000084 DrawRect
08009340 g     F .text	00000130 __swsetup_r
08001234 g     F .text	0000002c CloseServo
08011a50 g     F .text	000008cc .hidden __divdf3
0800b210 g     F .text	00000118 __sfp
0800d378 g     F .text	00000078 __copybits
08020b70 g     O .rwdata	00000408 __malloc_av_
0800b35c g     F .text	00000004 __sinit_lock_release
08003f88 g     F .text	00000724 .hidden __muldf3
0800dbf8 g     F .text	00000054 __sread
080155e4 g     F .text	00000114 alt_find_file
08014b90 g     F .text	000000a4 alt_dev_llist_insert
080132d4 g     F .text	00000020 __malloc_lock
080134c0 g     F .text	000000b0 sbrk
08005388 g     F .text	00001f90 ___svfprintf_internal_r
0800ad98 g     F .text	00000228 _fflush_r
080106bc g     F .text	000000c4 _calloc_r
08002624 g     F .text	0000032c InfoSelect
08023da4 g       *ABS*	00000000 __bss_start
080004f4 g     F .text	000000a0 DrawBresenhamLine
0800c3cc g     F .text	00000124 memset
080032fc g     F .text	0000003c main
08023dcc g     O .bss	00000004 alt_envp
08023da8 g     O .bss	00000004 __malloc_max_total_mem
080138fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080105f0 g     F .text	0000001c __swbuf
080010d4 g     F .text	00000060 getbitRS232
08000274 g     F .text	00000090 ReadAPixel
080146b8 g     F .text	00000088 alt_up_character_lcd_shift_cursor
0800dd2c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08010880 g     F .text	00000014 fclose
08023da4 g     O .bss	00000004 auto_approve
08009670 g     F .text	00001728 _dtoa_r
08002bbc g     F .text	00000100 InitRoomArray
080048dc g     F .text	000007a8 _malloc_r
08010d48 g     F .text	00000030 __ascii_wctomb
08022250 g     O .rwdata	00000004 alt_errno
08002cbc g     F .text	000005f8 RunDisplay
0800bc48 g     F .text	000000b8 _fwalk
0800d51c g     F .text	000000c8 putc
08011990 g     F .text	00000054 .hidden __divsi3
080144c8 g     F .text	00000040 alt_up_character_lcd_open_dev
0800b390 g     F .text	00000124 _malloc_trim_r
08015bdc g       *ABS*	00000000 __CTOR_END__
08014494 g     F .text	00000034 alt_up_character_lcd_init
0800dd34 g     F .text	000000a4 strcmp
08015bdc g       *ABS*	00000000 __flash_rodata_start
08015bdc g       *ABS*	00000000 __DTOR_LIST__
08001bdc g     F .text	00000058 delay
0801231c g     F .text	00000084 .hidden __nedf2
080137f8 g     F .text	00000034 alt_irq_init
08013460 g     F .text	00000060 alt_release_fd
08005284 g     F .text	0000006c sprintf
08014854 g     F .text	00000034 alt_up_character_lcd_cursor_off
080203cc g     O .rodata	00000100 .hidden __clz_tab
08023db8 g     O .bss	00000004 _PathLocale
08015838 g     F .text	00000014 atexit
0801060c g     F .text	0000005c _write_r
0800be70 g     F .text	0000001c setlocale
0800141c g     F .text	00000058 getcharBluetooth
08001260 g     F .text	0000002c TurnOnLights
08001cbc g     F .text	00000100 BaseDisplay
08022228 g     O .rwdata	00000004 _impure_ptr
08023dc4 g     O .bss	00000004 alt_argc
080001f8 g     F .text	0000007c WriteAPixel
08014c90 g     F .text	0000005c _do_dtors
08001c34 g     F .text	00000088 delay_double
0800be5c g     F .text	00000008 __locale_cjk_lang
080012e4 g     F .text	000000b0 GetTemp
08015bdc g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0800cfa8 g     F .text	00000060 __ulp
08001b48 g     F .text	00000030 Wifi_For_Received_Data
080017a0 g     F .text	00000030 setAuthenticationMode
0800b378 g     F .text	00000018 __fp_unlock_all
08000594 g     F .text	0000006c DrawFillRect
0802223c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800be8c g     F .text	0000000c localeconv
080016dc g     F .text	00000060 initBluetooth
08001134 g     F .text	00000058 getcharRS232
08014dac g     F .text	00000050 alt_ic_isr_register
08022264 g       *ABS*	00000000 _edata
08023ff4 g       *ABS*	00000000 _end
08001208 g     F .text	0000002c OpenServo
080001bc g       *ABS*	00000000 __ram_exceptions_end
08013dd8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080019d8 g     F .text	00000050 Wifi_Send_Char
08014e9c g     F .text	000000a4 alt_ic_irq_disable
0800dc54 g     F .text	0000007c __swrite
08022230 g     O .rwdata	00000004 __malloc_trim_threshold
080155c4 g     F .text	00000020 altera_nios2_qsys_irq_init
0800be50 g     F .text	0000000c __locale_msgcharset
0801584c g     F .text	00000038 exit
080012b8 g     F .text	0000002c sendTempRequest
0800bd00 g     F .text	000000b8 _fwalk_reent
0800ce10 g     F .text	00000198 __mdiff
0800128c g     F .text	0000002c TurnOffLights
080119e4 g     F .text	0000005c .hidden __modsi3
0800194c g     F .text	00000040 configureMasterBluetoothDongle
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800b354 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08014580 g     F .text	00000074 alt_up_character_lcd_string
08017ce4 g     O .rodata	00002c88 Font22x40
08000c64 g     F .text	00000048 getCharTouch
08015ba8 g     F .text	00000034 _exit
080148bc g     F .text	00000140 alt_alarm_start
08001888 g     F .text	00000030 exitCommandMode
080017d0 g     F .text	00000034 name
0800be98 g     F .text	000001b8 __smakebuf_r
080052f0 g     F .text	00000098 strlen
080152d0 g     F .text	00000158 open
08003dc8 g     F .text	000000e0 .hidden __gedf2
08000684 g     F .text	000000e4 DrawFillRectBorder
08004868 g     F .text	0000004c clock
08022238 g     O .rwdata	00000004 __wctomb
0800f104 g     F .text	00000018 __sprint_r
08014d7c g     F .text	00000030 alt_icache_flush_all
080014d0 g     F .text	00000090 writeDataToTx
08014644 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08022258 g     O .rwdata	00000004 alt_priority_mask
08014dfc g     F .text	000000a0 alt_ic_irq_enable
0800931c g     F .text	00000024 __vfprintf_internal
08010d78 g     F .text	0000005c _wctomb_r
080123a0 g     F .text	000008d0 .hidden __subdf3
0800c840 g     F .text	000000b0 __lo0bits
0802225c g     O .rwdata	00000008 alt_alarm_list
08014c34 g     F .text	0000005c _do_ctors
08010c70 g     F .text	000000d8 wcrtomb
08012d64 g     F .text	000000d0 close
08001a70 g     F .text	00000088 Wifi_Send_String
08000c0c g     F .text	00000058 putCharTouch
08001838 g     F .text	00000050 AttemptBluetoothConnection
080130b8 g     F .text	00000080 alt_load
08010a18 g     F .text	00000058 fputwc
080048c8 g     F .text	00000014 free
0800b358 g     F .text	00000004 __sinit_lock_acquire
0800c5c0 g     F .text	00000114 __multadd
0800c598 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	108fbd04 	addi	r2,r2,16116
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	108fbd04 	addi	r2,r2,16116
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6a88914 	ori	gp,gp,41508
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	108f6914 	ori	r2,r2,15780

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cffd14 	ori	r3,r3,16372

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80130b80 	call	80130b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	801325c0 	call	801325c <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <WriteAPixel>:
 * This function waits for a touch screen release event and returns X,Y coord
 *****************************************************************************/


void WriteAPixel(int x, int y, int Colour)
{
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 8000210:	0001883a 	nop
 8000214:	00a10034 	movhi	r2,33792
 8000218:	1080000b 	ldhu	r2,0(r2)
 800021c:	10bfffcc 	andi	r2,r2,65535
 8000220:	1080004c 	andi	r2,r2,1
 8000224:	103ffb26 	beq	r2,zero,8000214 <__alt_data_end+0xfc000214>
	GraphicsX1Reg = x; // write coords to x1, y1
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10800084 	addi	r2,r2,2
 8000230:	e0fffd17 	ldw	r3,-12(fp)
 8000234:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0fffe17 	ldw	r3,-8(fp)
 8000244:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour; // set pixel colour
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10800384 	addi	r2,r2,14
 8000250:	e0ffff17 	ldw	r3,-4(fp)
 8000254:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel; // give graphics "write pixel" command
 8000258:	00a10034 	movhi	r2,33792
 800025c:	00c00284 	movi	r3,10
 8000260:	10c0000d 	sth	r3,0(r2)
}
 8000264:	e037883a 	mov	sp,fp
 8000268:	df000017 	ldw	fp,0(sp)
 800026c:	dec00104 	addi	sp,sp,4
 8000270:	f800283a 	ret

08000274 <ReadAPixel>:
/*********************************************************************************************
 * This function read a single pixel from the x,y coords specified and returns its colour
 * Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 *********************************************************************************************/
int ReadAPixel(int x, int y)
{
 8000274:	defffd04 	addi	sp,sp,-12
 8000278:	df000215 	stw	fp,8(sp)
 800027c:	df000204 	addi	fp,sp,8
 8000280:	e13ffe15 	stw	r4,-8(fp)
 8000284:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS; // is graphics ready for new command
 8000288:	0001883a 	nop
 800028c:	00a10034 	movhi	r2,33792
 8000290:	1080000b 	ldhu	r2,0(r2)
 8000294:	10bfffcc 	andi	r2,r2,65535
 8000298:	1080004c 	andi	r2,r2,1
 800029c:	103ffb26 	beq	r2,zero,800028c <__alt_data_end+0xfc00028c>
	GraphicsX1Reg = x; // write coords to x1, y1
 80002a0:	00a10034 	movhi	r2,33792
 80002a4:	10800084 	addi	r2,r2,2
 80002a8:	e0fffe17 	ldw	r3,-8(fp)
 80002ac:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10800104 	addi	r2,r2,4
 80002b8:	e0ffff17 	ldw	r3,-4(fp)
 80002bc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel; // give graphics a "get pixel" command
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	00c002c4 	movi	r3,11
 80002c8:	10c0000d 	sth	r3,0(r2)
	WAIT_FOR_GRAPHICS; // is graphics done reading pixel
 80002cc:	0001883a 	nop
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	1080000b 	ldhu	r2,0(r2)
 80002d8:	10bfffcc 	andi	r2,r2,65535
 80002dc:	1080004c 	andi	r2,r2,1
 80002e0:	103ffb26 	beq	r2,zero,80002d0 <__alt_data_end+0xfc0002d0>
	return (int)(GraphicsColourReg) ; // return the palette number (colour)
 80002e4:	00a10034 	movhi	r2,33792
 80002e8:	10800384 	addi	r2,r2,14
 80002ec:	1080000b 	ldhu	r2,0(r2)
 80002f0:	10bfffcc 	andi	r2,r2,65535
}
 80002f4:	e037883a 	mov	sp,fp
 80002f8:	df000017 	ldw	fp,0(sp)
 80002fc:	dec00104 	addi	sp,sp,4
 8000300:	f800283a 	ret

08000304 <ProgramPalette>:
 ** subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 **
 ************************************************************************************/
void ProgramPalette(int PaletteNumber, int RGB)
{
 8000304:	defffd04 	addi	sp,sp,-12
 8000308:	df000215 	stw	fp,8(sp)
 800030c:	df000204 	addi	fp,sp,8
 8000310:	e13ffe15 	stw	r4,-8(fp)
 8000314:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000318:	0001883a 	nop
 800031c:	00a10034 	movhi	r2,33792
 8000320:	1080000b 	ldhu	r2,0(r2)
 8000324:	10bfffcc 	andi	r2,r2,65535
 8000328:	1080004c 	andi	r2,r2,1
 800032c:	103ffb26 	beq	r2,zero,800031c <__alt_data_end+0xfc00031c>
	GraphicsColourReg = PaletteNumber;
 8000330:	00a10034 	movhi	r2,33792
 8000334:	10800384 	addi	r2,r2,14
 8000338:	e0fffe17 	ldw	r3,-8(fp)
 800033c:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16 ; // program red value in ls.8 bit of X1 reg
 8000340:	00a10034 	movhi	r2,33792
 8000344:	10800084 	addi	r2,r2,2
 8000348:	e0ffff17 	ldw	r3,-4(fp)
 800034c:	1807d43a 	srai	r3,r3,16
 8000350:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB ; // program green and blue into ls 16 bit of Y1 reg
 8000354:	00a10034 	movhi	r2,33792
 8000358:	10800104 	addi	r2,r2,4
 800035c:	e0ffff17 	ldw	r3,-4(fp)
 8000360:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour; // issue command
 8000364:	00a10034 	movhi	r2,33792
 8000368:	00c00404 	movi	r3,16
 800036c:	10c0000d 	sth	r3,0(r2)
}
 8000370:	e037883a 	mov	sp,fp
 8000374:	df000017 	ldw	fp,0(sp)
 8000378:	dec00104 	addi	sp,sp,4
 800037c:	f800283a 	ret

08000380 <DrawHorizontalLine>:
/*********************************************************************************************
This function draw a horizontal line, 1 pixel at a time starting at the x,y coords specified
 *********************************************************************************************/
void DrawHorizontalLine(int x1, int x2, int y, int Colour)
{
 8000380:	defffb04 	addi	sp,sp,-20
 8000384:	df000415 	stw	fp,16(sp)
 8000388:	df000404 	addi	fp,sp,16
 800038c:	e13ffc15 	stw	r4,-16(fp)
 8000390:	e17ffd15 	stw	r5,-12(fp)
 8000394:	e1bffe15 	stw	r6,-8(fp)
 8000398:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 800039c:	0001883a 	nop
 80003a0:	00a10034 	movhi	r2,33792
 80003a4:	1080000b 	ldhu	r2,0(r2)
 80003a8:	10bfffcc 	andi	r2,r2,65535
 80003ac:	1080004c 	andi	r2,r2,1
 80003b0:	103ffb26 	beq	r2,zero,80003a0 <__alt_data_end+0xfc0003a0>

	GraphicsX1Reg = x1;
 80003b4:	00a10034 	movhi	r2,33792
 80003b8:	10800084 	addi	r2,r2,2
 80003bc:	e0fffc17 	ldw	r3,-16(fp)
 80003c0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 80003c4:	00a10034 	movhi	r2,33792
 80003c8:	10800184 	addi	r2,r2,6
 80003cc:	e0fffd17 	ldw	r3,-12(fp)
 80003d0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80003d4:	00a10034 	movhi	r2,33792
 80003d8:	10800104 	addi	r2,r2,4
 80003dc:	e0fffe17 	ldw	r3,-8(fp)
 80003e0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 80003e4:	00a10034 	movhi	r2,33792
 80003e8:	10800384 	addi	r2,r2,14
 80003ec:	e0ffff17 	ldw	r3,-4(fp)
 80003f0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 80003f4:	00a10034 	movhi	r2,33792
 80003f8:	00c00044 	movi	r3,1
 80003fc:	10c0000d 	sth	r3,0(r2)
}
 8000400:	e037883a 	mov	sp,fp
 8000404:	df000017 	ldw	fp,0(sp)
 8000408:	dec00104 	addi	sp,sp,4
 800040c:	f800283a 	ret

08000410 <DrawVerticalLine>:

/*********************************************************************************************
This function draw a vertical line, 1 pixel at a time starting at the x,y coords specified
 *********************************************************************************************/
void DrawVerticalLine(int y1, int y2, int x, int Colour)
{
 8000410:	defffb04 	addi	sp,sp,-20
 8000414:	df000415 	stw	fp,16(sp)
 8000418:	df000404 	addi	fp,sp,16
 800041c:	e13ffc15 	stw	r4,-16(fp)
 8000420:	e17ffd15 	stw	r5,-12(fp)
 8000424:	e1bffe15 	stw	r6,-8(fp)
 8000428:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 800042c:	0001883a 	nop
 8000430:	00a10034 	movhi	r2,33792
 8000434:	1080000b 	ldhu	r2,0(r2)
 8000438:	10bfffcc 	andi	r2,r2,65535
 800043c:	1080004c 	andi	r2,r2,1
 8000440:	103ffb26 	beq	r2,zero,8000430 <__alt_data_end+0xfc000430>

	GraphicsY1Reg = y1;
 8000444:	00a10034 	movhi	r2,33792
 8000448:	10800104 	addi	r2,r2,4
 800044c:	e0fffc17 	ldw	r3,-16(fp)
 8000450:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000454:	00a10034 	movhi	r2,33792
 8000458:	10800204 	addi	r2,r2,8
 800045c:	e0fffd17 	ldw	r3,-12(fp)
 8000460:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = x;
 8000464:	00a10034 	movhi	r2,33792
 8000468:	10800084 	addi	r2,r2,2
 800046c:	e0fffe17 	ldw	r3,-8(fp)
 8000470:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000474:	00a10034 	movhi	r2,33792
 8000478:	10800384 	addi	r2,r2,14
 800047c:	e0ffff17 	ldw	r3,-4(fp)
 8000480:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000484:	00a10034 	movhi	r2,33792
 8000488:	00c00084 	movi	r3,2
 800048c:	10c0000d 	sth	r3,0(r2)
}
 8000490:	e037883a 	mov	sp,fp
 8000494:	df000017 	ldw	fp,0(sp)
 8000498:	dec00104 	addi	sp,sp,4
 800049c:	f800283a 	ret

080004a0 <sign>:

int sign (int n1, int n2){
 80004a0:	defffd04 	addi	sp,sp,-12
 80004a4:	df000215 	stw	fp,8(sp)
 80004a8:	df000204 	addi	fp,sp,8
 80004ac:	e13ffe15 	stw	r4,-8(fp)
 80004b0:	e17fff15 	stw	r5,-4(fp)
	if(n2-n1>0){
 80004b4:	e0ffff17 	ldw	r3,-4(fp)
 80004b8:	e0bffe17 	ldw	r2,-8(fp)
 80004bc:	1885c83a 	sub	r2,r3,r2
 80004c0:	0080020e 	bge	zero,r2,80004cc <sign+0x2c>
		return 1;
 80004c4:	00800044 	movi	r2,1
 80004c8:	00000606 	br	80004e4 <sign+0x44>
	}
	else if (n2==n1){
 80004cc:	e0ffff17 	ldw	r3,-4(fp)
 80004d0:	e0bffe17 	ldw	r2,-8(fp)
 80004d4:	1880021e 	bne	r3,r2,80004e0 <sign+0x40>
		return 0;
 80004d8:	0005883a 	mov	r2,zero
 80004dc:	00000106 	br	80004e4 <sign+0x44>
	}
	else {
		return -1;
 80004e0:	00bfffc4 	movi	r2,-1
	}
}
 80004e4:	e037883a 	mov	sp,fp
 80004e8:	df000017 	ldw	fp,0(sp)
 80004ec:	dec00104 	addi	sp,sp,4
 80004f0:	f800283a 	ret

080004f4 <DrawBresenhamLine>:

/*******************************************************************************
 ** Implementation of Bresenhams line drawing algorithm
 *******************************************************************************/
void DrawBresenhamLine(int x1, int x2, int y1, int y2, int Colour)
{
 80004f4:	defffb04 	addi	sp,sp,-20
 80004f8:	df000415 	stw	fp,16(sp)
 80004fc:	df000404 	addi	fp,sp,16
 8000500:	e13ffc15 	stw	r4,-16(fp)
 8000504:	e17ffd15 	stw	r5,-12(fp)
 8000508:	e1bffe15 	stw	r6,-8(fp)
 800050c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000510:	0001883a 	nop
 8000514:	00a10034 	movhi	r2,33792
 8000518:	1080000b 	ldhu	r2,0(r2)
 800051c:	10bfffcc 	andi	r2,r2,65535
 8000520:	1080004c 	andi	r2,r2,1
 8000524:	103ffb26 	beq	r2,zero,8000514 <__alt_data_end+0xfc000514>

	GraphicsX1Reg = x1;
 8000528:	00a10034 	movhi	r2,33792
 800052c:	10800084 	addi	r2,r2,2
 8000530:	e0fffc17 	ldw	r3,-16(fp)
 8000534:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000538:	00a10034 	movhi	r2,33792
 800053c:	10800184 	addi	r2,r2,6
 8000540:	e0fffd17 	ldw	r3,-12(fp)
 8000544:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000548:	00a10034 	movhi	r2,33792
 800054c:	10800104 	addi	r2,r2,4
 8000550:	e0fffe17 	ldw	r3,-8(fp)
 8000554:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000558:	00a10034 	movhi	r2,33792
 800055c:	10800204 	addi	r2,r2,8
 8000560:	e0ffff17 	ldw	r3,-4(fp)
 8000564:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000568:	00a10034 	movhi	r2,33792
 800056c:	10800384 	addi	r2,r2,14
 8000570:	e0c00117 	ldw	r3,4(fp)
 8000574:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 8000578:	00a10034 	movhi	r2,33792
 800057c:	00c000c4 	movi	r3,3
 8000580:	10c0000d 	sth	r3,0(r2)
}
 8000584:	e037883a 	mov	sp,fp
 8000588:	df000017 	ldw	fp,0(sp)
 800058c:	dec00104 	addi	sp,sp,4
 8000590:	f800283a 	ret

08000594 <DrawFillRect>:

void DrawFillRect(int x1, int x2, int y1, int y2, int colour){
 8000594:	defff904 	addi	sp,sp,-28
 8000598:	dfc00615 	stw	ra,24(sp)
 800059c:	df000515 	stw	fp,20(sp)
 80005a0:	df000504 	addi	fp,sp,20
 80005a4:	e13ffc15 	stw	r4,-16(fp)
 80005a8:	e17ffd15 	stw	r5,-12(fp)
 80005ac:	e1bffe15 	stw	r6,-8(fp)
 80005b0:	e1ffff15 	stw	r7,-4(fp)
	int j;
	for(j=y1;j<+y2;j++){
 80005b4:	e0bffe17 	ldw	r2,-8(fp)
 80005b8:	e0bffb15 	stw	r2,-20(fp)
 80005bc:	00000806 	br	80005e0 <DrawFillRect+0x4c>
		DrawHorizontalLine(x1,x2,j,colour);
 80005c0:	e13ffc17 	ldw	r4,-16(fp)
 80005c4:	e17ffd17 	ldw	r5,-12(fp)
 80005c8:	e1bffb17 	ldw	r6,-20(fp)
 80005cc:	e1c00217 	ldw	r7,8(fp)
 80005d0:	80003800 	call	8000380 <DrawHorizontalLine>
	GraphicsCommandReg = DrawLine;
}

void DrawFillRect(int x1, int x2, int y1, int y2, int colour){
	int j;
	for(j=y1;j<+y2;j++){
 80005d4:	e0bffb17 	ldw	r2,-20(fp)
 80005d8:	10800044 	addi	r2,r2,1
 80005dc:	e0bffb15 	stw	r2,-20(fp)
 80005e0:	e0fffb17 	ldw	r3,-20(fp)
 80005e4:	e0bfff17 	ldw	r2,-4(fp)
 80005e8:	18bff516 	blt	r3,r2,80005c0 <__alt_data_end+0xfc0005c0>
		DrawHorizontalLine(x1,x2,j,colour);
	}
}
 80005ec:	e037883a 	mov	sp,fp
 80005f0:	dfc00117 	ldw	ra,4(sp)
 80005f4:	df000017 	ldw	fp,0(sp)
 80005f8:	dec00204 	addi	sp,sp,8
 80005fc:	f800283a 	ret

08000600 <DrawRect>:

void DrawRect(int x1, int x2, int y1, int y2, int borderColour){
 8000600:	defffa04 	addi	sp,sp,-24
 8000604:	dfc00515 	stw	ra,20(sp)
 8000608:	df000415 	stw	fp,16(sp)
 800060c:	df000404 	addi	fp,sp,16
 8000610:	e13ffc15 	stw	r4,-16(fp)
 8000614:	e17ffd15 	stw	r5,-12(fp)
 8000618:	e1bffe15 	stw	r6,-8(fp)
 800061c:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1,x2,y1,borderColour);
 8000620:	e13ffc17 	ldw	r4,-16(fp)
 8000624:	e17ffd17 	ldw	r5,-12(fp)
 8000628:	e1bffe17 	ldw	r6,-8(fp)
 800062c:	e1c00217 	ldw	r7,8(fp)
 8000630:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawHorizontalLine(x1,x2,y2,borderColour);
 8000634:	e13ffc17 	ldw	r4,-16(fp)
 8000638:	e17ffd17 	ldw	r5,-12(fp)
 800063c:	e1bfff17 	ldw	r6,-4(fp)
 8000640:	e1c00217 	ldw	r7,8(fp)
 8000644:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawVerticalLine(y1,y2,x1,borderColour);
 8000648:	e13ffe17 	ldw	r4,-8(fp)
 800064c:	e17fff17 	ldw	r5,-4(fp)
 8000650:	e1bffc17 	ldw	r6,-16(fp)
 8000654:	e1c00217 	ldw	r7,8(fp)
 8000658:	80004100 	call	8000410 <DrawVerticalLine>
	DrawVerticalLine(y1,y2,x2,borderColour);
 800065c:	e13ffe17 	ldw	r4,-8(fp)
 8000660:	e17fff17 	ldw	r5,-4(fp)
 8000664:	e1bffd17 	ldw	r6,-12(fp)
 8000668:	e1c00217 	ldw	r7,8(fp)
 800066c:	80004100 	call	8000410 <DrawVerticalLine>
}
 8000670:	e037883a 	mov	sp,fp
 8000674:	dfc00117 	ldw	ra,4(sp)
 8000678:	df000017 	ldw	fp,0(sp)
 800067c:	dec00204 	addi	sp,sp,8
 8000680:	f800283a 	ret

08000684 <DrawFillRectBorder>:

void DrawFillRectBorder(int x1, int x2, int y1, int y2, int colour, int borderColour){
 8000684:	defff804 	addi	sp,sp,-32
 8000688:	dfc00715 	stw	ra,28(sp)
 800068c:	df000615 	stw	fp,24(sp)
 8000690:	df000604 	addi	fp,sp,24
 8000694:	e13ffc15 	stw	r4,-16(fp)
 8000698:	e17ffd15 	stw	r5,-12(fp)
 800069c:	e1bffe15 	stw	r6,-8(fp)
 80006a0:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1,x2,y1,borderColour);
 80006a4:	e13ffc17 	ldw	r4,-16(fp)
 80006a8:	e17ffd17 	ldw	r5,-12(fp)
 80006ac:	e1bffe17 	ldw	r6,-8(fp)
 80006b0:	e1c00317 	ldw	r7,12(fp)
 80006b4:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawHorizontalLine(x1,x2,y2,borderColour);
 80006b8:	e13ffc17 	ldw	r4,-16(fp)
 80006bc:	e17ffd17 	ldw	r5,-12(fp)
 80006c0:	e1bfff17 	ldw	r6,-4(fp)
 80006c4:	e1c00317 	ldw	r7,12(fp)
 80006c8:	80003800 	call	8000380 <DrawHorizontalLine>
	DrawVerticalLine(y1,y2,x1,borderColour);
 80006cc:	e13ffe17 	ldw	r4,-8(fp)
 80006d0:	e17fff17 	ldw	r5,-4(fp)
 80006d4:	e1bffc17 	ldw	r6,-16(fp)
 80006d8:	e1c00317 	ldw	r7,12(fp)
 80006dc:	80004100 	call	8000410 <DrawVerticalLine>
	DrawVerticalLine(y1,y2,x2,borderColour);
 80006e0:	e13ffe17 	ldw	r4,-8(fp)
 80006e4:	e17fff17 	ldw	r5,-4(fp)
 80006e8:	e1bffd17 	ldw	r6,-12(fp)
 80006ec:	e1c00317 	ldw	r7,12(fp)
 80006f0:	80004100 	call	8000410 <DrawVerticalLine>
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
 80006f4:	e0bffc17 	ldw	r2,-16(fp)
 80006f8:	10800044 	addi	r2,r2,1
 80006fc:	e0bffa15 	stw	r2,-24(fp)
 8000700:	00001106 	br	8000748 <DrawFillRectBorder+0xc4>
		for(j=y1+1;j<+y2;j++){
 8000704:	e0bffe17 	ldw	r2,-8(fp)
 8000708:	10800044 	addi	r2,r2,1
 800070c:	e0bffb15 	stw	r2,-20(fp)
 8000710:	00000706 	br	8000730 <DrawFillRectBorder+0xac>
			WriteAPixel(i,j,colour);
 8000714:	e13ffa17 	ldw	r4,-24(fp)
 8000718:	e17ffb17 	ldw	r5,-20(fp)
 800071c:	e1800217 	ldw	r6,8(fp)
 8000720:	80001f80 	call	80001f8 <WriteAPixel>
	DrawVerticalLine(y1,y2,x1,borderColour);
	DrawVerticalLine(y1,y2,x2,borderColour);
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
		for(j=y1+1;j<+y2;j++){
 8000724:	e0bffb17 	ldw	r2,-20(fp)
 8000728:	10800044 	addi	r2,r2,1
 800072c:	e0bffb15 	stw	r2,-20(fp)
 8000730:	e0fffb17 	ldw	r3,-20(fp)
 8000734:	e0bfff17 	ldw	r2,-4(fp)
 8000738:	18bff616 	blt	r3,r2,8000714 <__alt_data_end+0xfc000714>
	DrawHorizontalLine(x1,x2,y2,borderColour);
	DrawVerticalLine(y1,y2,x1,borderColour);
	DrawVerticalLine(y1,y2,x2,borderColour);
	int i;
	int j;
	for(i=x1+1;i<+x2;i++){
 800073c:	e0bffa17 	ldw	r2,-24(fp)
 8000740:	10800044 	addi	r2,r2,1
 8000744:	e0bffa15 	stw	r2,-24(fp)
 8000748:	e0fffa17 	ldw	r3,-24(fp)
 800074c:	e0bffd17 	ldw	r2,-12(fp)
 8000750:	18bfec16 	blt	r3,r2,8000704 <__alt_data_end+0xfc000704>
		for(j=y1+1;j<+y2;j++){
			WriteAPixel(i,j,colour);
		}
	}
}
 8000754:	e037883a 	mov	sp,fp
 8000758:	dfc00117 	ldw	ra,4(sp)
 800075c:	df000017 	ldw	fp,0(sp)
 8000760:	dec00204 	addi	sp,sp,8
 8000764:	f800283a 	ret

08000768 <OutGraphicsCharFont1>:
 ** e.g. writing a space character with Erase set to true will set all pixels in the
 ** character to the background colour
 **
 *************************************************************************************************/
void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 8000768:	defff204 	addi	sp,sp,-56
 800076c:	dfc00d15 	stw	ra,52(sp)
 8000770:	df000c15 	stw	fp,48(sp)
 8000774:	ddc00b15 	stw	r23,44(sp)
 8000778:	dd800a15 	stw	r22,40(sp)
 800077c:	dd400915 	stw	r21,36(sp)
 8000780:	dd000815 	stw	r20,32(sp)
 8000784:	dcc00715 	stw	r19,28(sp)
 8000788:	dc800615 	stw	r18,24(sp)
 800078c:	dc400515 	stw	r17,20(sp)
 8000790:	dc000415 	stw	r16,16(sp)
 8000794:	df000c04 	addi	fp,sp,48
 8000798:	e13ff415 	stw	r4,-48(fp)
 800079c:	e17ff515 	stw	r5,-44(fp)
 80007a0:	e1bff615 	stw	r6,-40(fp)
 80007a4:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 80007a8:	e53ff417 	ldw	r20,-48(fp)
 80007ac:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 80007b0:	e0bff617 	ldw	r2,-40(fp)
 80007b4:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 80007b8:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 80007bc:	e0bff417 	ldw	r2,-48(fp)
 80007c0:	10bfffcc 	andi	r2,r2,65535
 80007c4:	10a0001c 	xori	r2,r2,32768
 80007c8:	10a00004 	addi	r2,r2,-32768
 80007cc:	1080c808 	cmpgei	r2,r2,800
 80007d0:	1000061e 	bne	r2,zero,80007ec <OutGraphicsCharFont1+0x84>
 80007d4:	e0bff517 	ldw	r2,-44(fp)
 80007d8:	10bfffcc 	andi	r2,r2,65535
 80007dc:	10a0001c 	xori	r2,r2,32768
 80007e0:	10a00004 	addi	r2,r2,-32768
 80007e4:	10807810 	cmplti	r2,r2,480
 80007e8:	1000011e 	bne	r2,zero,80007f0 <OutGraphicsCharFont1+0x88>
		return ;
 80007ec:	00003c06 	br	80008e0 <OutGraphicsCharFont1+0x178>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 80007f0:	8805883a 	mov	r2,r17
 80007f4:	10bfffcc 	andi	r2,r2,65535
 80007f8:	10a0001c 	xori	r2,r2,32768
 80007fc:	10a00004 	addi	r2,r2,-32768
 8000800:	10800810 	cmplti	r2,r2,32
 8000804:	1000361e 	bne	r2,zero,80008e0 <OutGraphicsCharFont1+0x178>
 8000808:	8805883a 	mov	r2,r17
 800080c:	10bfffcc 	andi	r2,r2,65535
 8000810:	10a0001c 	xori	r2,r2,32768
 8000814:	10a00004 	addi	r2,r2,-32768
 8000818:	10801fc8 	cmpgei	r2,r2,127
 800081c:	1000301e 	bne	r2,zero,80008e0 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 8000820:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++) {
 8000824:	0021883a 	mov	r16,zero
 8000828:	00002706 	br	80008c8 <OutGraphicsCharFont1+0x160>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 800082c:	00820074 	movhi	r2,2049
 8000830:	1096f704 	addi	r2,r2,23516
 8000834:	88c001e4 	muli	r3,r17,7
 8000838:	1c07883a 	add	r3,r3,r16
 800083c:	10c5883a 	add	r2,r2,r3
 8000840:	10800003 	ldbu	r2,0(r2)
 8000844:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 8000848:	04c00404 	movi	r19,16
			for(column = 0; (char)(column) < (char)(5); column ++) {
 800084c:	0025883a 	mov	r18,zero
 8000850:	00001606 	br	80008ac <OutGraphicsCharFont1+0x144>
				// if a pixel in the character display it
				if((pixels & BitMask))
 8000854:	b4c4703a 	and	r2,r22,r19
 8000858:	10000926 	beq	r2,zero,8000880 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX+column, theY+row, theColour) ;
 800085c:	a489883a 	add	r4,r20,r18
 8000860:	ac07883a 	add	r3,r21,r16
 8000864:	b8803fcc 	andi	r2,r23,255
 8000868:	1080201c 	xori	r2,r2,128
 800086c:	10bfe004 	addi	r2,r2,-128
 8000870:	180b883a 	mov	r5,r3
 8000874:	100d883a 	mov	r6,r2
 8000878:	80001f80 	call	80001f8 <WriteAPixel>
 800087c:	00000906 	br	80008a4 <OutGraphicsCharFont1+0x13c>
				else {
					if(Erase == 1)
 8000880:	e0800317 	ldw	r2,12(fp)
 8000884:	10800058 	cmpnei	r2,r2,1
 8000888:	1000061e 	bne	r2,zero,80008a4 <OutGraphicsCharFont1+0x13c>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 800088c:	a487883a 	add	r3,r20,r18
 8000890:	ac05883a 	add	r2,r21,r16
 8000894:	1809883a 	mov	r4,r3
 8000898:	100b883a 	mov	r5,r2
 800089c:	e1bff717 	ldw	r6,-36(fp)
 80008a0:	80001f80 	call	80001f8 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 80008a4:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;
			for(column = 0; (char)(column) < (char)(5); column ++) {
 80008a8:	94800044 	addi	r18,r18,1
 80008ac:	9005883a 	mov	r2,r18
 80008b0:	10803fcc 	andi	r2,r2,255
 80008b4:	1080201c 	xori	r2,r2,128
 80008b8:	10bfe004 	addi	r2,r2,-128
 80008bc:	10800150 	cmplti	r2,r2,5
 80008c0:	103fe41e 	bne	r2,zero,8000854 <__alt_data_end+0xfc000854>
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
		return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++) {
 80008c4:	84000044 	addi	r16,r16,1
 80008c8:	8005883a 	mov	r2,r16
 80008cc:	10803fcc 	andi	r2,r2,255
 80008d0:	1080201c 	xori	r2,r2,128
 80008d4:	10bfe004 	addi	r2,r2,-128
 80008d8:	108001d0 	cmplti	r2,r2,7
 80008dc:	103fd31e 	bne	r2,zero,800082c <__alt_data_end+0xfc00082c>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 80008e0:	e6fff804 	addi	sp,fp,-32
 80008e4:	dfc00917 	ldw	ra,36(sp)
 80008e8:	df000817 	ldw	fp,32(sp)
 80008ec:	ddc00717 	ldw	r23,28(sp)
 80008f0:	dd800617 	ldw	r22,24(sp)
 80008f4:	dd400517 	ldw	r21,20(sp)
 80008f8:	dd000417 	ldw	r20,16(sp)
 80008fc:	dcc00317 	ldw	r19,12(sp)
 8000900:	dc800217 	ldw	r18,8(sp)
 8000904:	dc400117 	ldw	r17,4(sp)
 8000908:	dc000017 	ldw	r16,0(sp)
 800090c:	dec00a04 	addi	sp,sp,40
 8000910:	f800283a 	ret

08000914 <OutGraphicsCharFont2>:

void OutGraphicsCharFont2(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 8000914:	defff204 	addi	sp,sp,-56
 8000918:	dfc00d15 	stw	ra,52(sp)
 800091c:	df000c15 	stw	fp,48(sp)
 8000920:	ddc00b15 	stw	r23,44(sp)
 8000924:	dd800a15 	stw	r22,40(sp)
 8000928:	dd400915 	stw	r21,36(sp)
 800092c:	dd000815 	stw	r20,32(sp)
 8000930:	dcc00715 	stw	r19,28(sp)
 8000934:	dc800615 	stw	r18,24(sp)
 8000938:	dc400515 	stw	r17,20(sp)
 800093c:	dc000415 	stw	r16,16(sp)
 8000940:	df000c04 	addi	fp,sp,48
 8000944:	e13ff415 	stw	r4,-48(fp)
 8000948:	e17ff515 	stw	r5,-44(fp)
 800094c:	e1bff615 	stw	r6,-40(fp)
 8000950:	e1fff715 	stw	r7,-36(fp)
	// using register variables (as opposed to stack based ones) may make execution faster
	// depends on compiler and CPU
	register int row, column, theX = x, theY = y ;
 8000954:	e53ff417 	ldw	r20,-48(fp)
 8000958:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour ;
 800095c:	e0bff617 	ldw	r2,-40(fp)
 8000960:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 8000964:	e4400217 	ldw	r17,8(fp)
	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 8000968:	e0bff417 	ldw	r2,-48(fp)
 800096c:	10bfffcc 	andi	r2,r2,65535
 8000970:	10a0001c 	xori	r2,r2,32768
 8000974:	10a00004 	addi	r2,r2,-32768
 8000978:	1080c808 	cmpgei	r2,r2,800
 800097c:	1000061e 	bne	r2,zero,8000998 <OutGraphicsCharFont2+0x84>
 8000980:	e0bff517 	ldw	r2,-44(fp)
 8000984:	10bfffcc 	andi	r2,r2,65535
 8000988:	10a0001c 	xori	r2,r2,32768
 800098c:	10a00004 	addi	r2,r2,-32768
 8000990:	10807810 	cmplti	r2,r2,480
 8000994:	1000011e 	bne	r2,zero,800099c <OutGraphicsCharFont2+0x88>
		return ;
 8000998:	00003d06 	br	8000a90 <OutGraphicsCharFont2+0x17c>
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 800099c:	8805883a 	mov	r2,r17
 80009a0:	10bfffcc 	andi	r2,r2,65535
 80009a4:	10a0001c 	xori	r2,r2,32768
 80009a8:	10a00004 	addi	r2,r2,-32768
 80009ac:	10800810 	cmplti	r2,r2,32
 80009b0:	1000371e 	bne	r2,zero,8000a90 <OutGraphicsCharFont2+0x17c>
 80009b4:	8805883a 	mov	r2,r17
 80009b8:	10bfffcc 	andi	r2,r2,65535
 80009bc:	10a0001c 	xori	r2,r2,32768
 80009c0:	10a00004 	addi	r2,r2,-32768
 80009c4:	10801fc8 	cmpgei	r2,r2,127
 80009c8:	1000311e 	bne	r2,zero,8000a90 <OutGraphicsCharFont2+0x17c>
		theC = theC - 0x20 ;
 80009cc:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(14); row ++) {
 80009d0:	0021883a 	mov	r16,zero
 80009d4:	00002806 	br	8000a78 <OutGraphicsCharFont2+0x164>
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font10x14[theC][row] ;
 80009d8:	00820074 	movhi	r2,2049
 80009dc:	10979d84 	addi	r2,r2,24182
 80009e0:	88c003a4 	muli	r3,r17,14
 80009e4:	1c07883a 	add	r3,r3,r16
 80009e8:	18c7883a 	add	r3,r3,r3
 80009ec:	10c5883a 	add	r2,r2,r3
 80009f0:	1080000b 	ldhu	r2,0(r2)
 80009f4:	15bfffcc 	andi	r22,r2,65535
			BitMask = 1 << 9 ;
 80009f8:	04c08004 	movi	r19,512
			for(column = 0; (char)(column) < (char)(10); column ++) {
 80009fc:	0025883a 	mov	r18,zero
 8000a00:	00001606 	br	8000a5c <OutGraphicsCharFont2+0x148>
				// if a pixel in the character display it
				if((pixels & BitMask))
 8000a04:	b4c4703a 	and	r2,r22,r19
 8000a08:	10000926 	beq	r2,zero,8000a30 <OutGraphicsCharFont2+0x11c>
					WriteAPixel(theX+column, theY+row, theColour) ;
 8000a0c:	a489883a 	add	r4,r20,r18
 8000a10:	ac07883a 	add	r3,r21,r16
 8000a14:	b8803fcc 	andi	r2,r23,255
 8000a18:	1080201c 	xori	r2,r2,128
 8000a1c:	10bfe004 	addi	r2,r2,-128
 8000a20:	180b883a 	mov	r5,r3
 8000a24:	100d883a 	mov	r6,r2
 8000a28:	80001f80 	call	80001f8 <WriteAPixel>
 8000a2c:	00000906 	br	8000a54 <OutGraphicsCharFont2+0x140>
				else {
					if(Erase == 1)
 8000a30:	e0800317 	ldw	r2,12(fp)
 8000a34:	10800058 	cmpnei	r2,r2,1
 8000a38:	1000061e 	bne	r2,zero,8000a54 <OutGraphicsCharFont2+0x140>
						// if pixel is part of background (not part of character)
						// erase the background to value of variable BackGroundColour
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8000a3c:	a487883a 	add	r3,r20,r18
 8000a40:	ac05883a 	add	r2,r21,r16
 8000a44:	1809883a 	mov	r4,r3
 8000a48:	100b883a 	mov	r5,r2
 8000a4c:	e1bff717 	ldw	r6,-36(fp)
 8000a50:	80001f80 	call	80001f8 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 8000a54:	9827d07a 	srai	r19,r19,1
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(14); row ++) {
			// get the bit pattern for row 0 of the character from the software font
			pixels = Font10x14[theC][row] ;
			BitMask = 1 << 9 ;
			for(column = 0; (char)(column) < (char)(10); column ++) {
 8000a58:	94800044 	addi	r18,r18,1
 8000a5c:	9005883a 	mov	r2,r18
 8000a60:	10803fcc 	andi	r2,r2,255
 8000a64:	1080201c 	xori	r2,r2,128
 8000a68:	10bfe004 	addi	r2,r2,-128
 8000a6c:	10800290 	cmplti	r2,r2,10
 8000a70:	103fe41e 	bne	r2,zero,8000a04 <__alt_data_end+0xfc000a04>
	if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
		return ;
	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(14); row ++) {
 8000a74:	84000044 	addi	r16,r16,1
 8000a78:	8005883a 	mov	r2,r16
 8000a7c:	10803fcc 	andi	r2,r2,255
 8000a80:	1080201c 	xori	r2,r2,128
 8000a84:	10bfe004 	addi	r2,r2,-128
 8000a88:	10800390 	cmplti	r2,r2,14
 8000a8c:	103fd21e 	bne	r2,zero,80009d8 <__alt_data_end+0xfc0009d8>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000a90:	e6fff804 	addi	sp,fp,-32
 8000a94:	dfc00917 	ldw	ra,36(sp)
 8000a98:	df000817 	ldw	fp,32(sp)
 8000a9c:	ddc00717 	ldw	r23,28(sp)
 8000aa0:	dd800617 	ldw	r22,24(sp)
 8000aa4:	dd400517 	ldw	r21,20(sp)
 8000aa8:	dd000417 	ldw	r20,16(sp)
 8000aac:	dcc00317 	ldw	r19,12(sp)
 8000ab0:	dc800217 	ldw	r18,8(sp)
 8000ab4:	dc400117 	ldw	r17,4(sp)
 8000ab8:	dc000017 	ldw	r16,0(sp)
 8000abc:	dec00a04 	addi	sp,sp,40
 8000ac0:	f800283a 	ret

08000ac4 <DrawString>:



void DrawString(int x,int y, int colour, int background, char* string, int font, int erase){
 8000ac4:	defff704 	addi	sp,sp,-36
 8000ac8:	dfc00815 	stw	ra,32(sp)
 8000acc:	df000715 	stw	fp,28(sp)
 8000ad0:	df000704 	addi	fp,sp,28
 8000ad4:	e13ffc15 	stw	r4,-16(fp)
 8000ad8:	e17ffd15 	stw	r5,-12(fp)
 8000adc:	e1bffe15 	stw	r6,-8(fp)
 8000ae0:	e1ffff15 	stw	r7,-4(fp)
	int i;
	if(font==1){
 8000ae4:	e0800317 	ldw	r2,12(fp)
 8000ae8:	10800058 	cmpnei	r2,r2,1
 8000aec:	1000201e 	bne	r2,zero,8000b70 <DrawString+0xac>
		for(i=0; string[i] != '\0';i++){
 8000af0:	e03ffb15 	stw	zero,-20(fp)
 8000af4:	00001506 	br	8000b4c <DrawString+0x88>
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
 8000af8:	e0bffb17 	ldw	r2,-20(fp)
 8000afc:	e0c00217 	ldw	r3,8(fp)
 8000b00:	1885883a 	add	r2,r3,r2
 8000b04:	10800003 	ldbu	r2,0(r2)
 8000b08:	10803fcc 	andi	r2,r2,255
 8000b0c:	1080201c 	xori	r2,r2,128
 8000b10:	10bfe004 	addi	r2,r2,-128
 8000b14:	d8800015 	stw	r2,0(sp)
 8000b18:	e0800417 	ldw	r2,16(fp)
 8000b1c:	d8800115 	stw	r2,4(sp)
 8000b20:	e13ffc17 	ldw	r4,-16(fp)
 8000b24:	e17ffd17 	ldw	r5,-12(fp)
 8000b28:	e1bffe17 	ldw	r6,-8(fp)
 8000b2c:	e1ffff17 	ldw	r7,-4(fp)
 8000b30:	80007680 	call	8000768 <OutGraphicsCharFont1>
			x += 10;
 8000b34:	e0bffc17 	ldw	r2,-16(fp)
 8000b38:	10800284 	addi	r2,r2,10
 8000b3c:	e0bffc15 	stw	r2,-16(fp)


void DrawString(int x,int y, int colour, int background, char* string, int font, int erase){
	int i;
	if(font==1){
		for(i=0; string[i] != '\0';i++){
 8000b40:	e0bffb17 	ldw	r2,-20(fp)
 8000b44:	10800044 	addi	r2,r2,1
 8000b48:	e0bffb15 	stw	r2,-20(fp)
 8000b4c:	e0bffb17 	ldw	r2,-20(fp)
 8000b50:	e0c00217 	ldw	r3,8(fp)
 8000b54:	1885883a 	add	r2,r3,r2
 8000b58:	10800003 	ldbu	r2,0(r2)
 8000b5c:	10803fcc 	andi	r2,r2,255
 8000b60:	1080201c 	xori	r2,r2,128
 8000b64:	10bfe004 	addi	r2,r2,-128
 8000b68:	103fe31e 	bne	r2,zero,8000af8 <__alt_data_end+0xfc000af8>
 8000b6c:	00002206 	br	8000bf8 <DrawString+0x134>
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
	else if (font ==2){
 8000b70:	e0800317 	ldw	r2,12(fp)
 8000b74:	10800098 	cmpnei	r2,r2,2
 8000b78:	10001f1e 	bne	r2,zero,8000bf8 <DrawString+0x134>
		for(i=0; string[i] != '\0';i++){
 8000b7c:	e03ffb15 	stw	zero,-20(fp)
 8000b80:	00001506 	br	8000bd8 <DrawString+0x114>
			OutGraphicsCharFont2(x,y,colour,background,string[i],erase);
 8000b84:	e0bffb17 	ldw	r2,-20(fp)
 8000b88:	e0c00217 	ldw	r3,8(fp)
 8000b8c:	1885883a 	add	r2,r3,r2
 8000b90:	10800003 	ldbu	r2,0(r2)
 8000b94:	10803fcc 	andi	r2,r2,255
 8000b98:	1080201c 	xori	r2,r2,128
 8000b9c:	10bfe004 	addi	r2,r2,-128
 8000ba0:	d8800015 	stw	r2,0(sp)
 8000ba4:	e0800417 	ldw	r2,16(fp)
 8000ba8:	d8800115 	stw	r2,4(sp)
 8000bac:	e13ffc17 	ldw	r4,-16(fp)
 8000bb0:	e17ffd17 	ldw	r5,-12(fp)
 8000bb4:	e1bffe17 	ldw	r6,-8(fp)
 8000bb8:	e1ffff17 	ldw	r7,-4(fp)
 8000bbc:	80009140 	call	8000914 <OutGraphicsCharFont2>
			x += 10;
 8000bc0:	e0bffc17 	ldw	r2,-16(fp)
 8000bc4:	10800284 	addi	r2,r2,10
 8000bc8:	e0bffc15 	stw	r2,-16(fp)
			OutGraphicsCharFont1(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
	else if (font ==2){
		for(i=0; string[i] != '\0';i++){
 8000bcc:	e0bffb17 	ldw	r2,-20(fp)
 8000bd0:	10800044 	addi	r2,r2,1
 8000bd4:	e0bffb15 	stw	r2,-20(fp)
 8000bd8:	e0bffb17 	ldw	r2,-20(fp)
 8000bdc:	e0c00217 	ldw	r3,8(fp)
 8000be0:	1885883a 	add	r2,r3,r2
 8000be4:	10800003 	ldbu	r2,0(r2)
 8000be8:	10803fcc 	andi	r2,r2,255
 8000bec:	1080201c 	xori	r2,r2,128
 8000bf0:	10bfe004 	addi	r2,r2,-128
 8000bf4:	103fe31e 	bne	r2,zero,8000b84 <__alt_data_end+0xfc000b84>
			OutGraphicsCharFont2(x,y,colour,background,string[i],erase);
			x += 10;
		}
	}
}
 8000bf8:	e037883a 	mov	sp,fp
 8000bfc:	dfc00117 	ldw	ra,4(sp)
 8000c00:	df000017 	ldw	fp,0(sp)
 8000c04:	dec00204 	addi	sp,sp,8
 8000c08:	f800283a 	ret

08000c0c <putCharTouch>:

/*******************************************************************************************
 * This function writes a single pixel to the x,y coords specified using the specified colour
 * Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
 ********************************************************************************************/
int putCharTouch(char c){
 8000c0c:	defffe04 	addi	sp,sp,-8
 8000c10:	df000115 	stw	fp,4(sp)
 8000c14:	df000104 	addi	fp,sp,4
 8000c18:	2005883a 	mov	r2,r4
 8000c1c:	e0bfff05 	stb	r2,-4(fp)
	// Wait for TX bit in status register to turn 1 (means transmit is empty)
	while((Touchscreen_Status & 0x02) != 0x02);
 8000c20:	0001883a 	nop
 8000c24:	00a10034 	movhi	r2,33792
 8000c28:	10808c04 	addi	r2,r2,560
 8000c2c:	10800003 	ldbu	r2,0(r2)
 8000c30:	10803fcc 	andi	r2,r2,255
 8000c34:	1080008c 	andi	r2,r2,2
 8000c38:	103ffa26 	beq	r2,zero,8000c24 <__alt_data_end+0xfc000c24>
	// Send the data to TX (reduce to 8 bits)
	Touchscreen_TxData = c;
 8000c3c:	00a10034 	movhi	r2,33792
 8000c40:	10808c84 	addi	r2,r2,562
 8000c44:	e0ffff03 	ldbu	r3,-4(fp)
 8000c48:	10c00005 	stb	r3,0(r2)
	return c & 0xFF;
 8000c4c:	e0bfff07 	ldb	r2,-4(fp)
 8000c50:	10803fcc 	andi	r2,r2,255
}
 8000c54:	e037883a 	mov	sp,fp
 8000c58:	df000017 	ldw	fp,0(sp)
 8000c5c:	dec00104 	addi	sp,sp,4
 8000c60:	f800283a 	ret

08000c64 <getCharTouch>:

int getCharTouch(void)
{
 8000c64:	deffff04 	addi	sp,sp,-4
 8000c68:	df000015 	stw	fp,0(sp)
 8000c6c:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received character from 6850 RxData register.
	while ((Touchscreen_Status & 0x01) != 0x01);
 8000c70:	0001883a 	nop
 8000c74:	00a10034 	movhi	r2,33792
 8000c78:	10808c04 	addi	r2,r2,560
 8000c7c:	10800003 	ldbu	r2,0(r2)
 8000c80:	10803fcc 	andi	r2,r2,255
 8000c84:	1080004c 	andi	r2,r2,1
 8000c88:	103ffa26 	beq	r2,zero,8000c74 <__alt_data_end+0xfc000c74>
	return Touchscreen_RxData;
 8000c8c:	00a10034 	movhi	r2,33792
 8000c90:	10808c84 	addi	r2,r2,562
 8000c94:	10800003 	ldbu	r2,0(r2)
 8000c98:	10803fcc 	andi	r2,r2,255
}
 8000c9c:	e037883a 	mov	sp,fp
 8000ca0:	df000017 	ldw	fp,0(sp)
 8000ca4:	dec00104 	addi	sp,sp,4
 8000ca8:	f800283a 	ret

08000cac <Init_Touch>:

/*****************************************************************************
 ** Initialise touch screen controller
 *****************************************************************************/
void Init_Touch(void)
{
 8000cac:	defffe04 	addi	sp,sp,-8
 8000cb0:	dfc00115 	stw	ra,4(sp)
 8000cb4:	df000015 	stw	fp,0(sp)
 8000cb8:	d839883a 	mov	fp,sp
	// Program 6850 and baud rate generator to communicate with touchscreen
	// send touchscreen controller an "enable touch" command

	// Divide by 16 clock, RTS Low, 8 bits of data, no parity,
	// 1 stop bit, transmitter interrupt disabled
	Touchscreen_Control = 0x15;
 8000cbc:	00a10034 	movhi	r2,33792
 8000cc0:	10808c04 	addi	r2,r2,560
 8000cc4:	00c00544 	movi	r3,21
 8000cc8:	10c00005 	stb	r3,0(r2)
	// 9600 BAUD
	Touchscreen_Baud = 0x05;
 8000ccc:	00a10034 	movhi	r2,33792
 8000cd0:	10808d04 	addi	r2,r2,564
 8000cd4:	00c00144 	movi	r3,5
 8000cd8:	10c00005 	stb	r3,0(r2)

	// slight delay to process
	usleep(10000);
 8000cdc:	0109c404 	movi	r4,10000
 8000ce0:	80136480 	call	8013648 <usleep>

	// Send TOUCH_ENABLE command
	putCharTouch(0x55);
 8000ce4:	01001544 	movi	r4,85
 8000ce8:	8000c0c0 	call	8000c0c <putCharTouch>
	putCharTouch(0x01);
 8000cec:	01000044 	movi	r4,1
 8000cf0:	8000c0c0 	call	8000c0c <putCharTouch>
	putCharTouch(0x12);
 8000cf4:	01000484 	movi	r4,18
 8000cf8:	8000c0c0 	call	8000c0c <putCharTouch>

	usleep(10000);
 8000cfc:	0109c404 	movi	r4,10000
 8000d00:	80136480 	call	8013648 <usleep>
}
 8000d04:	e037883a 	mov	sp,fp
 8000d08:	dfc00117 	ldw	ra,4(sp)
 8000d0c:	df000017 	ldw	fp,0(sp)
 8000d10:	dec00204 	addi	sp,sp,8
 8000d14:	f800283a 	ret

08000d18 <ScreenTouched>:

/*****************************************************************************
 ** test if screen touched
 *****************************************************************************/
int ScreenTouched( void )
{
 8000d18:	deffff04 	addi	sp,sp,-4
 8000d1c:	df000015 	stw	fp,0(sp)
 8000d20:	d839883a 	mov	fp,sp
	// return TRUE if any data received from 6850 connected to touchscreen
	// or FALSE otherwise

	return (Touchscreen_RxData == 0x80);
 8000d24:	00a10034 	movhi	r2,33792
 8000d28:	10808c84 	addi	r2,r2,562
 8000d2c:	10800003 	ldbu	r2,0(r2)
 8000d30:	10803fcc 	andi	r2,r2,255
 8000d34:	10802020 	cmpeqi	r2,r2,128
 8000d38:	10803fcc 	andi	r2,r2,255
}
 8000d3c:	e037883a 	mov	sp,fp
 8000d40:	df000017 	ldw	fp,0(sp)
 8000d44:	dec00104 	addi	sp,sp,4
 8000d48:	f800283a 	ret

08000d4c <WaitForTouch>:

/*****************************************************************************
 ** wait for screen to be touched
 *****************************************************************************/
void WaitForTouch()
{
 8000d4c:	defffe04 	addi	sp,sp,-8
 8000d50:	dfc00115 	stw	ra,4(sp)
 8000d54:	df000015 	stw	fp,0(sp)
 8000d58:	d839883a 	mov	fp,sp
	while(!ScreenTouched()){
 8000d5c:	0001883a 	nop
 8000d60:	8000d180 	call	8000d18 <ScreenTouched>
 8000d64:	103ffe26 	beq	r2,zero,8000d60 <__alt_data_end+0xfc000d60>
	}
}
 8000d68:	e037883a 	mov	sp,fp
 8000d6c:	dfc00117 	ldw	ra,4(sp)
 8000d70:	df000017 	ldw	fp,0(sp)
 8000d74:	dec00204 	addi	sp,sp,8
 8000d78:	f800283a 	ret

08000d7c <GetPen>:
/*****************************************************************************
 * This function waits for a touch screen press event and returns X,Y coord
 *****************************************************************************/


Point GetPen(void){
 8000d7c:	defff704 	addi	sp,sp,-36
 8000d80:	dfc00815 	stw	ra,32(sp)
 8000d84:	df000715 	stw	fp,28(sp)
 8000d88:	df000704 	addi	fp,sp,28
	Point p1;
	int packets[4];
	char command;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
 8000d8c:	8000d4c0 	call	8000d4c <WaitForTouch>
	int i;
	for(i = 0; i < 4; i++){
 8000d90:	e03ff915 	stw	zero,-28(fp)
 8000d94:	00000c06 	br	8000dc8 <GetPen+0x4c>
		packets[i] = getCharTouch();
 8000d98:	8000c640 	call	8000c64 <getCharTouch>
 8000d9c:	1007883a 	mov	r3,r2
 8000da0:	e0bff917 	ldw	r2,-28(fp)
 8000da4:	1085883a 	add	r2,r2,r2
 8000da8:	1085883a 	add	r2,r2,r2
 8000dac:	e13ff904 	addi	r4,fp,-28
 8000db0:	2085883a 	add	r2,r4,r2
 8000db4:	10800304 	addi	r2,r2,12
 8000db8:	10c00015 	stw	r3,0(r2)
	char command;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
	int i;
	for(i = 0; i < 4; i++){
 8000dbc:	e0bff917 	ldw	r2,-28(fp)
 8000dc0:	10800044 	addi	r2,r2,1
 8000dc4:	e0bff915 	stw	r2,-28(fp)
 8000dc8:	e0bff917 	ldw	r2,-28(fp)
 8000dcc:	10800110 	cmplti	r2,r2,4
 8000dd0:	103ff11e 	bne	r2,zero,8000d98 <__alt_data_end+0xfc000d98>
		packets[i] = getCharTouch();
	}

	// Get x11 : x7 from 2nd packet, and concatenate to x6 : x0 from 1st packet
	p1.x = (packets[1] << 7) | packets[0];
 8000dd4:	e0bffd17 	ldw	r2,-12(fp)
 8000dd8:	100691fa 	slli	r3,r2,7
 8000ddc:	e0bffc17 	ldw	r2,-16(fp)
 8000de0:	1884b03a 	or	r2,r3,r2
 8000de4:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (packets[3] << 7) | packets[2];
 8000de8:	e0bfff17 	ldw	r2,-4(fp)
 8000dec:	100691fa 	slli	r3,r2,7
 8000df0:	e0bffe17 	ldw	r2,-8(fp)
 8000df4:	1884b03a 	or	r2,r3,r2
 8000df8:	e0bffb15 	stw	r2,-20(fp)

	// Map from controller resolution to screen pixel
	p1.x = p1.x * 799 / 4095;
 8000dfc:	e0bffa17 	ldw	r2,-24(fp)
 8000e00:	10c0c7e4 	muli	r3,r2,799
 8000e04:	0083ffc4 	movi	r2,4095
 8000e08:	1885283a 	div	r2,r3,r2
 8000e0c:	e0bffa15 	stw	r2,-24(fp)
	p1.y = p1.y  * 479 / 4095;
 8000e10:	e0bffb17 	ldw	r2,-20(fp)
 8000e14:	10c077e4 	muli	r3,r2,479
 8000e18:	0083ffc4 	movi	r2,4095
 8000e1c:	1885283a 	div	r2,r3,r2
 8000e20:	e0bffb15 	stw	r2,-20(fp)

	printf("x = %d ", p1.x);
 8000e24:	e0bffa17 	ldw	r2,-24(fp)
 8000e28:	010200b4 	movhi	r4,2050
 8000e2c:	21004004 	addi	r4,r4,256
 8000e30:	100b883a 	mov	r5,r2
 8000e34:	80050b00 	call	80050b0 <printf>
	printf("y = %d\n", p1.y);
 8000e38:	e0bffb17 	ldw	r2,-20(fp)
 8000e3c:	010200b4 	movhi	r4,2050
 8000e40:	21004204 	addi	r4,r4,264
 8000e44:	100b883a 	mov	r5,r2
 8000e48:	80050b00 	call	80050b0 <printf>
		}
		else {
			roomArray[0].requested = 0;
		}*/

	return p1;
 8000e4c:	e0bffa17 	ldw	r2,-24(fp)
 8000e50:	e0fffb17 	ldw	r3,-20(fp)
 8000e54:	1009883a 	mov	r4,r2
 8000e58:	180b883a 	mov	r5,r3
}
 8000e5c:	2005883a 	mov	r2,r4
 8000e60:	2807883a 	mov	r3,r5
 8000e64:	e037883a 	mov	sp,fp
 8000e68:	dfc00117 	ldw	ra,4(sp)
 8000e6c:	df000017 	ldw	fp,0(sp)
 8000e70:	dec00204 	addi	sp,sp,8
 8000e74:	f800283a 	ret

08000e78 <GetPress>:

Point GetPress(void)
{
 8000e78:	defffc04 	addi	sp,sp,-16
 8000e7c:	dfc00315 	stw	ra,12(sp)
 8000e80:	df000215 	stw	fp,8(sp)
 8000e84:	df000204 	addi	fp,sp,8
	Point p1;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	p1 = GetPen();
 8000e88:	8000d7c0 	call	8000d7c <GetPen>
 8000e8c:	1009883a 	mov	r4,r2
 8000e90:	180b883a 	mov	r5,r3
 8000e94:	e13ffe15 	stw	r4,-8(fp)
 8000e98:	e17fff15 	stw	r5,-4(fp)
	return p1;
 8000e9c:	e0bffe17 	ldw	r2,-8(fp)
 8000ea0:	e0ffff17 	ldw	r3,-4(fp)
 8000ea4:	1009883a 	mov	r4,r2
 8000ea8:	180b883a 	mov	r5,r3
}
 8000eac:	2005883a 	mov	r2,r4
 8000eb0:	2807883a 	mov	r3,r5
 8000eb4:	e037883a 	mov	sp,fp
 8000eb8:	dfc00117 	ldw	ra,4(sp)
 8000ebc:	df000017 	ldw	fp,0(sp)
 8000ec0:	dec00204 	addi	sp,sp,8
 8000ec4:	f800283a 	ret

08000ec8 <GetBasePen>:

Point GetBasePen(void){
 8000ec8:	defff704 	addi	sp,sp,-36
 8000ecc:	dfc00815 	stw	ra,32(sp)
 8000ed0:	df000715 	stw	fp,28(sp)
 8000ed4:	df000704 	addi	fp,sp,28
	Point p1;
	int packets[4];
	char command;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
 8000ed8:	8000d4c0 	call	8000d4c <WaitForTouch>
	int i;
	for(i = 0; i < 4; i++){
 8000edc:	e03ff915 	stw	zero,-28(fp)
 8000ee0:	00000c06 	br	8000f14 <GetBasePen+0x4c>
		packets[i] = getCharTouch();
 8000ee4:	8000c640 	call	8000c64 <getCharTouch>
 8000ee8:	1007883a 	mov	r3,r2
 8000eec:	e0bff917 	ldw	r2,-28(fp)
 8000ef0:	1085883a 	add	r2,r2,r2
 8000ef4:	1085883a 	add	r2,r2,r2
 8000ef8:	e13ff904 	addi	r4,fp,-28
 8000efc:	2085883a 	add	r2,r4,r2
 8000f00:	10800304 	addi	r2,r2,12
 8000f04:	10c00015 	stw	r3,0(r2)
	char command;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	WaitForTouch();
	int i;
	for(i = 0; i < 4; i++){
 8000f08:	e0bff917 	ldw	r2,-28(fp)
 8000f0c:	10800044 	addi	r2,r2,1
 8000f10:	e0bff915 	stw	r2,-28(fp)
 8000f14:	e0bff917 	ldw	r2,-28(fp)
 8000f18:	10800110 	cmplti	r2,r2,4
 8000f1c:	103ff11e 	bne	r2,zero,8000ee4 <__alt_data_end+0xfc000ee4>
		packets[i] = getCharTouch();
	}

	// Get x11 : x7 from 2nd packet, and concatenate to x6 : x0 from 1st packet
	p1.x = (packets[1] << 7) | packets[0];
 8000f20:	e0bffd17 	ldw	r2,-12(fp)
 8000f24:	100691fa 	slli	r3,r2,7
 8000f28:	e0bffc17 	ldw	r2,-16(fp)
 8000f2c:	1884b03a 	or	r2,r3,r2
 8000f30:	e0bffa15 	stw	r2,-24(fp)
	p1.y = (packets[3] << 7) | packets[2];
 8000f34:	e0bfff17 	ldw	r2,-4(fp)
 8000f38:	100691fa 	slli	r3,r2,7
 8000f3c:	e0bffe17 	ldw	r2,-8(fp)
 8000f40:	1884b03a 	or	r2,r3,r2
 8000f44:	e0bffb15 	stw	r2,-20(fp)

	// Map from controller resolution to screen pixel
	p1.x = p1.x * 799 / 4095;
 8000f48:	e0bffa17 	ldw	r2,-24(fp)
 8000f4c:	10c0c7e4 	muli	r3,r2,799
 8000f50:	0083ffc4 	movi	r2,4095
 8000f54:	1885283a 	div	r2,r3,r2
 8000f58:	e0bffa15 	stw	r2,-24(fp)
	p1.y = p1.y  * 479 / 4095;
 8000f5c:	e0bffb17 	ldw	r2,-20(fp)
 8000f60:	10c077e4 	muli	r3,r2,479
 8000f64:	0083ffc4 	movi	r2,4095
 8000f68:	1885283a 	div	r2,r3,r2
 8000f6c:	e0bffb15 	stw	r2,-20(fp)

	printf("x = %d ", p1.x);
 8000f70:	e0bffa17 	ldw	r2,-24(fp)
 8000f74:	010200b4 	movhi	r4,2050
 8000f78:	21004004 	addi	r4,r4,256
 8000f7c:	100b883a 	mov	r5,r2
 8000f80:	80050b00 	call	80050b0 <printf>
	printf("y = %d\n", p1.y);
 8000f84:	e0bffb17 	ldw	r2,-20(fp)
 8000f88:	010200b4 	movhi	r4,2050
 8000f8c:	21004204 	addi	r4,r4,264
 8000f90:	100b883a 	mov	r5,r2
 8000f94:	80050b00 	call	80050b0 <printf>
		}
		else {
			roomArray[0].requested = 0;
		}*/

	return p1;
 8000f98:	e0bffa17 	ldw	r2,-24(fp)
 8000f9c:	e0fffb17 	ldw	r3,-20(fp)
 8000fa0:	1009883a 	mov	r4,r2
 8000fa4:	180b883a 	mov	r5,r3
}
 8000fa8:	2005883a 	mov	r2,r4
 8000fac:	2807883a 	mov	r3,r5
 8000fb0:	e037883a 	mov	sp,fp
 8000fb4:	dfc00117 	ldw	ra,4(sp)
 8000fb8:	df000017 	ldw	fp,0(sp)
 8000fbc:	dec00204 	addi	sp,sp,8
 8000fc0:	f800283a 	ret

08000fc4 <GetBasePress>:

Point GetBasePress(void)
{
 8000fc4:	defffc04 	addi	sp,sp,-16
 8000fc8:	dfc00315 	stw	ra,12(sp)
 8000fcc:	df000215 	stw	fp,8(sp)
 8000fd0:	df000204 	addi	fp,sp,8
	Point p1;
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	p1 = GetBasePen();
 8000fd4:	8000ec80 	call	8000ec8 <GetBasePen>
 8000fd8:	1009883a 	mov	r4,r2
 8000fdc:	180b883a 	mov	r5,r3
 8000fe0:	e13ffe15 	stw	r4,-8(fp)
 8000fe4:	e17fff15 	stw	r5,-4(fp)
	return p1;
 8000fe8:	e0bffe17 	ldw	r2,-8(fp)
 8000fec:	e0ffff17 	ldw	r3,-4(fp)
 8000ff0:	1009883a 	mov	r4,r2
 8000ff4:	180b883a 	mov	r5,r3
}
 8000ff8:	2005883a 	mov	r2,r4
 8000ffc:	2807883a 	mov	r3,r5
 8001000:	e037883a 	mov	sp,fp
 8001004:	dfc00117 	ldw	ra,4(sp)
 8001008:	df000017 	ldw	fp,0(sp)
 800100c:	dec00204 	addi	sp,sp,8
 8001010:	f800283a 	ret

08001014 <Init_RS232>:
#define occupiedMessage '1'
#define freeMessage '2'
#define requestRoomMessage '3'


void Init_RS232(void) {
 8001014:	defffe04 	addi	sp,sp,-8
 8001018:	dfc00115 	stw	ra,4(sp)
 800101c:	df000015 	stw	fp,0(sp)
 8001020:	d839883a 	mov	fp,sp
	 * Set up 6850 Control register to utilise a dive by 16 clock.
	 * set RTS low, use 8 bits of data, no parity, 1 stop bit,
	 * transmitter interrupt disabled
	 * program baud rate generator to use 115k baud
	 */
	printf("Initializing control register\n");
 8001024:	010200b4 	movhi	r4,2050
 8001028:	21004404 	addi	r4,r4,272
 800102c:	80051c40 	call	80051c4 <puts>
	RS232_Control = 0b00000011;
 8001030:	00a10034 	movhi	r2,33792
 8001034:	10808004 	addi	r2,r2,512
 8001038:	00c000c4 	movi	r3,3
 800103c:	10c00005 	stb	r3,0(r2)
	RS232_Control = 0b10010101;
 8001040:	00a10034 	movhi	r2,33792
 8001044:	10808004 	addi	r2,r2,512
 8001048:	00ffe544 	movi	r3,-107
 800104c:	10c00005 	stb	r3,0(r2)
	RS232_Baud 	  = 0b00000111; // program for 9600 baud
 8001050:	00a10034 	movhi	r2,33792
 8001054:	10808104 	addi	r2,r2,516
 8001058:	00c001c4 	movi	r3,7
 800105c:	10c00005 	stb	r3,0(r2)
}
 8001060:	e037883a 	mov	sp,fp
 8001064:	dfc00117 	ldw	ra,4(sp)
 8001068:	df000017 	ldw	fp,0(sp)
 800106c:	dec00204 	addi	sp,sp,8
 8001070:	f800283a 	ret

08001074 <putcharRS232>:


int putcharRS232(char c) {
 8001074:	defffd04 	addi	sp,sp,-12
 8001078:	df000215 	stw	fp,8(sp)
 800107c:	df000204 	addi	fp,sp,8
 8001080:	2005883a 	mov	r2,r4
 8001084:	e0bfff05 	stb	r2,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 8001088:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 800108c:	00000606 	br	80010a8 <putcharRS232+0x34>
		read_status_bit = RS232_Status & 0b10;
 8001090:	00a10034 	movhi	r2,33792
 8001094:	10808004 	addi	r2,r2,512
 8001098:	10800003 	ldbu	r2,0(r2)
 800109c:	10803fcc 	andi	r2,r2,255
 80010a0:	1080008c 	andi	r2,r2,2
 80010a4:	e0bffe15 	stw	r2,-8(fp)

int putcharRS232(char c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80010a8:	e0bffe17 	ldw	r2,-8(fp)
 80010ac:	103ff826 	beq	r2,zero,8001090 <__alt_data_end+0xfc001090>
		read_status_bit = RS232_Status & 0b10;
	}
	RS232_TxData = c;
 80010b0:	00a10034 	movhi	r2,33792
 80010b4:	10808084 	addi	r2,r2,514
 80010b8:	e0ffff03 	ldbu	r3,-4(fp)
 80010bc:	10c00005 	stb	r3,0(r2)
	return c;
 80010c0:	e0bfff07 	ldb	r2,-4(fp)
}
 80010c4:	e037883a 	mov	sp,fp
 80010c8:	df000017 	ldw	fp,0(sp)
 80010cc:	dec00104 	addi	sp,sp,4
 80010d0:	f800283a 	ret

080010d4 <getbitRS232>:

int getbitRS232(void) {
 80010d4:	defffd04 	addi	sp,sp,-12
 80010d8:	df000215 	stw	fp,8(sp)
 80010dc:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 80010e0:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 80010e4:	00000606 	br	8001100 <getbitRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 80010e8:	00a10034 	movhi	r2,33792
 80010ec:	10808004 	addi	r2,r2,512
 80010f0:	10800003 	ldbu	r2,0(r2)
 80010f4:	10803fcc 	andi	r2,r2,255
 80010f8:	1080004c 	andi	r2,r2,1
 80010fc:	e0bffe15 	stw	r2,-8(fp)

int getbitRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8001100:	e0bffe17 	ldw	r2,-8(fp)
 8001104:	103ff826 	beq	r2,zero,80010e8 <__alt_data_end+0xfc0010e8>
		read_status_bit = RS232_Status & 0b01;
	}
	int character = RS232_RxData & 0b00000001;
 8001108:	00a10034 	movhi	r2,33792
 800110c:	10808084 	addi	r2,r2,514
 8001110:	10800003 	ldbu	r2,0(r2)
 8001114:	10803fcc 	andi	r2,r2,255
 8001118:	1080004c 	andi	r2,r2,1
 800111c:	e0bfff15 	stw	r2,-4(fp)
	return character;
 8001120:	e0bfff17 	ldw	r2,-4(fp)
}
 8001124:	e037883a 	mov	sp,fp
 8001128:	df000017 	ldw	fp,0(sp)
 800112c:	dec00104 	addi	sp,sp,4
 8001130:	f800283a 	ret

08001134 <getcharRS232>:

char getcharRS232(void) {
 8001134:	defffd04 	addi	sp,sp,-12
 8001138:	df000215 	stw	fp,8(sp)
 800113c:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8001140:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 8001144:	00000606 	br	8001160 <getcharRS232+0x2c>
		read_status_bit = RS232_Status & 0b01;
 8001148:	00a10034 	movhi	r2,33792
 800114c:	10808004 	addi	r2,r2,512
 8001150:	10800003 	ldbu	r2,0(r2)
 8001154:	10803fcc 	andi	r2,r2,255
 8001158:	1080004c 	andi	r2,r2,1
 800115c:	e0bffe15 	stw	r2,-8(fp)

char getcharRS232(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8001160:	e0bffe17 	ldw	r2,-8(fp)
 8001164:	103ff826 	beq	r2,zero,8001148 <__alt_data_end+0xfc001148>
		read_status_bit = RS232_Status & 0b01;
	}
	char character = RS232_RxData;
 8001168:	00a10034 	movhi	r2,33792
 800116c:	10808084 	addi	r2,r2,514
 8001170:	10800003 	ldbu	r2,0(r2)
 8001174:	e0bfff05 	stb	r2,-4(fp)
	return character;
 8001178:	e0bfff03 	ldbu	r2,-4(fp)
}
 800117c:	e037883a 	mov	sp,fp
 8001180:	df000017 	ldw	fp,0(sp)
 8001184:	dec00104 	addi	sp,sp,4
 8001188:	f800283a 	ret

0800118c <RS232TestForReceivedData>:

int RS232TestForReceivedData(void) {
 800118c:	deffff04 	addi	sp,sp,-4
 8001190:	df000015 	stw	fp,0(sp)
 8001194:	d839883a 	mov	fp,sp
	return RS232_Status & 0b1;
 8001198:	00a10034 	movhi	r2,33792
 800119c:	10808004 	addi	r2,r2,512
 80011a0:	10800003 	ldbu	r2,0(r2)
 80011a4:	10803fcc 	andi	r2,r2,255
 80011a8:	1080004c 	andi	r2,r2,1
}
 80011ac:	e037883a 	mov	sp,fp
 80011b0:	df000017 	ldw	fp,0(sp)
 80011b4:	dec00104 	addi	sp,sp,4
 80011b8:	f800283a 	ret

080011bc <GetRangeData>:

int GetRangeData(void) {
 80011bc:	defffd04 	addi	sp,sp,-12
 80011c0:	dfc00215 	stw	ra,8(sp)
 80011c4:	df000115 	stw	fp,4(sp)
 80011c8:	df000104 	addi	fp,sp,4
	char received_data;
	putcharRS232(updateRoomStatusCommand);
 80011cc:	01001884 	movi	r4,98
 80011d0:	80010740 	call	8001074 <putcharRS232>
	received_data = getcharRS232();
 80011d4:	80011340 	call	8001134 <getcharRS232>
 80011d8:	e0bfff05 	stb	r2,-4(fp)
	if(received_data=='1'){
 80011dc:	e0bfff07 	ldb	r2,-4(fp)
 80011e0:	10800c58 	cmpnei	r2,r2,49
 80011e4:	1000021e 	bne	r2,zero,80011f0 <GetRangeData+0x34>
		return 1;
 80011e8:	00800044 	movi	r2,1
 80011ec:	00000106 	br	80011f4 <GetRangeData+0x38>
	}
	return 0;
 80011f0:	0005883a 	mov	r2,zero
}
 80011f4:	e037883a 	mov	sp,fp
 80011f8:	dfc00117 	ldw	ra,4(sp)
 80011fc:	df000017 	ldw	fp,0(sp)
 8001200:	dec00204 	addi	sp,sp,8
 8001204:	f800283a 	ret

08001208 <OpenServo>:

void OpenServo(void) {
 8001208:	defffe04 	addi	sp,sp,-8
 800120c:	dfc00115 	stw	ra,4(sp)
 8001210:	df000015 	stw	fp,0(sp)
 8001214:	d839883a 	mov	fp,sp
	putcharRS232(doorOpenCommand);
 8001218:	01001944 	movi	r4,101
 800121c:	80010740 	call	8001074 <putcharRS232>
}
 8001220:	e037883a 	mov	sp,fp
 8001224:	dfc00117 	ldw	ra,4(sp)
 8001228:	df000017 	ldw	fp,0(sp)
 800122c:	dec00204 	addi	sp,sp,8
 8001230:	f800283a 	ret

08001234 <CloseServo>:

void CloseServo(void) {
 8001234:	defffe04 	addi	sp,sp,-8
 8001238:	dfc00115 	stw	ra,4(sp)
 800123c:	df000015 	stw	fp,0(sp)
 8001240:	d839883a 	mov	fp,sp
	putcharRS232(doorCloseCommand);
 8001244:	01001984 	movi	r4,102
 8001248:	80010740 	call	8001074 <putcharRS232>
}
 800124c:	e037883a 	mov	sp,fp
 8001250:	dfc00117 	ldw	ra,4(sp)
 8001254:	df000017 	ldw	fp,0(sp)
 8001258:	dec00204 	addi	sp,sp,8
 800125c:	f800283a 	ret

08001260 <TurnOnLights>:

void TurnOnLights(void) {
 8001260:	defffe04 	addi	sp,sp,-8
 8001264:	dfc00115 	stw	ra,4(sp)
 8001268:	df000015 	stw	fp,0(sp)
 800126c:	d839883a 	mov	fp,sp
	putcharRS232(lightOnCommand);
 8001270:	010018c4 	movi	r4,99
 8001274:	80010740 	call	8001074 <putcharRS232>
}
 8001278:	e037883a 	mov	sp,fp
 800127c:	dfc00117 	ldw	ra,4(sp)
 8001280:	df000017 	ldw	fp,0(sp)
 8001284:	dec00204 	addi	sp,sp,8
 8001288:	f800283a 	ret

0800128c <TurnOffLights>:

void TurnOffLights(void) {
 800128c:	defffe04 	addi	sp,sp,-8
 8001290:	dfc00115 	stw	ra,4(sp)
 8001294:	df000015 	stw	fp,0(sp)
 8001298:	d839883a 	mov	fp,sp
	putcharRS232(lightOffCommand);
 800129c:	01001904 	movi	r4,100
 80012a0:	80010740 	call	8001074 <putcharRS232>
}
 80012a4:	e037883a 	mov	sp,fp
 80012a8:	dfc00117 	ldw	ra,4(sp)
 80012ac:	df000017 	ldw	fp,0(sp)
 80012b0:	dec00204 	addi	sp,sp,8
 80012b4:	f800283a 	ret

080012b8 <sendTempRequest>:

void sendTempRequest(void){
 80012b8:	defffe04 	addi	sp,sp,-8
 80012bc:	dfc00115 	stw	ra,4(sp)
 80012c0:	df000015 	stw	fp,0(sp)
 80012c4:	d839883a 	mov	fp,sp
	putcharRS232(tempRequestCommand);
 80012c8:	01001a04 	movi	r4,104
 80012cc:	80010740 	call	8001074 <putcharRS232>
}
 80012d0:	e037883a 	mov	sp,fp
 80012d4:	dfc00117 	ldw	ra,4(sp)
 80012d8:	df000017 	ldw	fp,0(sp)
 80012dc:	dec00204 	addi	sp,sp,8
 80012e0:	f800283a 	ret

080012e4 <GetTemp>:

int GetTemp(void){
 80012e4:	defffc04 	addi	sp,sp,-16
 80012e8:	dfc00315 	stw	ra,12(sp)
 80012ec:	df000215 	stw	fp,8(sp)
 80012f0:	df000204 	addi	fp,sp,8
	printf("Getting temp\n");
 80012f4:	010200b4 	movhi	r4,2050
 80012f8:	21004c04 	addi	r4,r4,304
 80012fc:	80051c40 	call	80051c4 <puts>
	int tens = getcharRS232()-48;
 8001300:	80011340 	call	8001134 <getcharRS232>
 8001304:	10803fcc 	andi	r2,r2,255
 8001308:	1080201c 	xori	r2,r2,128
 800130c:	10bfe004 	addi	r2,r2,-128
 8001310:	10bff404 	addi	r2,r2,-48
 8001314:	e0bffe15 	stw	r2,-8(fp)
	printf("tens is %d\n",tens);
 8001318:	010200b4 	movhi	r4,2050
 800131c:	21005004 	addi	r4,r4,320
 8001320:	e17ffe17 	ldw	r5,-8(fp)
 8001324:	80050b00 	call	80050b0 <printf>
	int ones = getcharRS232()-48;
 8001328:	80011340 	call	8001134 <getcharRS232>
 800132c:	10803fcc 	andi	r2,r2,255
 8001330:	1080201c 	xori	r2,r2,128
 8001334:	10bfe004 	addi	r2,r2,-128
 8001338:	10bff404 	addi	r2,r2,-48
 800133c:	e0bfff15 	stw	r2,-4(fp)
	printf("ones is %d\n",ones);
 8001340:	010200b4 	movhi	r4,2050
 8001344:	21005304 	addi	r4,r4,332
 8001348:	e17fff17 	ldw	r5,-4(fp)
 800134c:	80050b00 	call	80050b0 <printf>
	printf("temp is %d\n",10*tens+ones);
 8001350:	e0bffe17 	ldw	r2,-8(fp)
 8001354:	10c002a4 	muli	r3,r2,10
 8001358:	e0bfff17 	ldw	r2,-4(fp)
 800135c:	1885883a 	add	r2,r3,r2
 8001360:	010200b4 	movhi	r4,2050
 8001364:	21005604 	addi	r4,r4,344
 8001368:	100b883a 	mov	r5,r2
 800136c:	80050b00 	call	80050b0 <printf>
	return 10*tens+ones;
 8001370:	e0bffe17 	ldw	r2,-8(fp)
 8001374:	10c002a4 	muli	r3,r2,10
 8001378:	e0bfff17 	ldw	r2,-4(fp)
 800137c:	1885883a 	add	r2,r3,r2
}
 8001380:	e037883a 	mov	sp,fp
 8001384:	dfc00117 	ldw	ra,4(sp)
 8001388:	df000017 	ldw	fp,0(sp)
 800138c:	dec00204 	addi	sp,sp,8
 8001390:	f800283a 	ret

08001394 <SendSolved>:

void SendSolved (void){
 8001394:	defffe04 	addi	sp,sp,-8
 8001398:	dfc00115 	stw	ra,4(sp)
 800139c:	df000015 	stw	fp,0(sp)
 80013a0:	d839883a 	mov	fp,sp
	putcharRS232(solvedCommand);
 80013a4:	01001844 	movi	r4,97
 80013a8:	80010740 	call	8001074 <putcharRS232>
}
 80013ac:	e037883a 	mov	sp,fp
 80013b0:	dfc00117 	ldw	ra,4(sp)
 80013b4:	df000017 	ldw	fp,0(sp)
 80013b8:	dec00204 	addi	sp,sp,8
 80013bc:	f800283a 	ret

080013c0 <putcharBluetooth>:
 * to read or write to data via the RS232 port
 *
 * Refer to 6850 data sheet for details of registers
 */

int putcharBluetooth(int c) {
 80013c0:	defffd04 	addi	sp,sp,-12
 80013c4:	df000215 	stw	fp,8(sp)
 80013c8:	df000204 	addi	fp,sp,8
 80013cc:	e13fff15 	stw	r4,-4(fp)
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
 80013d0:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 80013d4:	00000606 	br	80013f0 <putcharBluetooth+0x30>
		read_status_bit = RS232_Status & 0b10;
 80013d8:	00a10034 	movhi	r2,33792
 80013dc:	10808004 	addi	r2,r2,512
 80013e0:	10800003 	ldbu	r2,0(r2)
 80013e4:	10803fcc 	andi	r2,r2,255
 80013e8:	1080008c 	andi	r2,r2,2
 80013ec:	e0bffe15 	stw	r2,-8(fp)

int putcharBluetooth(int c) {
	// Poll tx bit in 6850 status register. Wait for it to become '1'
	// Write 'c' to the 6850 TxData register to output the character
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 80013f0:	e0bffe17 	ldw	r2,-8(fp)
 80013f4:	103ff826 	beq	r2,zero,80013d8 <__alt_data_end+0xfc0013d8>
		read_status_bit = RS232_Status & 0b10;
	}
	RS232_TxData = c;
 80013f8:	00a10034 	movhi	r2,33792
 80013fc:	10808084 	addi	r2,r2,514
 8001400:	e0ffff17 	ldw	r3,-4(fp)
 8001404:	10c00005 	stb	r3,0(r2)
	//printf("set char %c", c);
	return c;
 8001408:	e0bfff17 	ldw	r2,-4(fp)
}
 800140c:	e037883a 	mov	sp,fp
 8001410:	df000017 	ldw	fp,0(sp)
 8001414:	dec00104 	addi	sp,sp,4
 8001418:	f800283a 	ret

0800141c <getcharBluetooth>:

char getcharBluetooth(void) {
 800141c:	defffd04 	addi	sp,sp,-12
 8001420:	df000215 	stw	fp,8(sp)
 8001424:	df000204 	addi	fp,sp,8
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
 8001428:	e03ffe15 	stw	zero,-8(fp)
	while(read_status_bit == 0) {
 800142c:	00000606 	br	8001448 <getcharBluetooth+0x2c>
		read_status_bit = RS232_Status & 0b01;
 8001430:	00a10034 	movhi	r2,33792
 8001434:	10808004 	addi	r2,r2,512
 8001438:	10800003 	ldbu	r2,0(r2)
 800143c:	10803fcc 	andi	r2,r2,255
 8001440:	1080004c 	andi	r2,r2,1
 8001444:	e0bffe15 	stw	r2,-8(fp)

char getcharBluetooth(void) {
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	// read received characer from 6850 RxData resgister.
	int read_status_bit = 0;
	while(read_status_bit == 0) {
 8001448:	e0bffe17 	ldw	r2,-8(fp)
 800144c:	103ff826 	beq	r2,zero,8001430 <__alt_data_end+0xfc001430>
		read_status_bit = RS232_Status & 0b01;
	}
	char character = RS232_RxData;
 8001450:	00a10034 	movhi	r2,33792
 8001454:	10808084 	addi	r2,r2,514
 8001458:	10800003 	ldbu	r2,0(r2)
 800145c:	e0bfff05 	stb	r2,-4(fp)
	//printf("char %c", character);
	return character;
 8001460:	e0bfff03 	ldbu	r2,-4(fp)
}
 8001464:	e037883a 	mov	sp,fp
 8001468:	df000017 	ldw	fp,0(sp)
 800146c:	dec00104 	addi	sp,sp,4
 8001470:	f800283a 	ret

08001474 <wait>:

void wait(){
 8001474:	defffd04 	addi	sp,sp,-12
 8001478:	df000215 	stw	fp,8(sp)
 800147c:	df000204 	addi	fp,sp,8
	int i=0;
 8001480:	e03ffe15 	stw	zero,-8(fp)
	while(i<1000){
 8001484:	00000b06 	br	80014b4 <wait+0x40>
		i++;
 8001488:	e0bffe17 	ldw	r2,-8(fp)
 800148c:	10800044 	addi	r2,r2,1
 8001490:	e0bffe15 	stw	r2,-8(fp)

		int j=0;
 8001494:	e03fff15 	stw	zero,-4(fp)
		while(j<1000){
 8001498:	00000306 	br	80014a8 <wait+0x34>
			j++;
 800149c:	e0bfff17 	ldw	r2,-4(fp)
 80014a0:	10800044 	addi	r2,r2,1
 80014a4:	e0bfff15 	stw	r2,-4(fp)
	int i=0;
	while(i<1000){
		i++;

		int j=0;
		while(j<1000){
 80014a8:	e0bfff17 	ldw	r2,-4(fp)
 80014ac:	1080fa10 	cmplti	r2,r2,1000
 80014b0:	103ffa1e 	bne	r2,zero,800149c <__alt_data_end+0xfc00149c>
	return character;
}

void wait(){
	int i=0;
	while(i<1000){
 80014b4:	e0bffe17 	ldw	r2,-8(fp)
 80014b8:	1080fa10 	cmplti	r2,r2,1000
 80014bc:	103ff21e 	bne	r2,zero,8001488 <__alt_data_end+0xfc001488>
		int j=0;
		while(j<1000){
			j++;
		}
	}
}
 80014c0:	e037883a 	mov	sp,fp
 80014c4:	df000017 	ldw	fp,0(sp)
 80014c8:	dec00104 	addi	sp,sp,4
 80014cc:	f800283a 	ret

080014d0 <writeDataToTx>:

void writeDataToTx(char * data){
 80014d0:	defffc04 	addi	sp,sp,-16
 80014d4:	dfc00315 	stw	ra,12(sp)
 80014d8:	df000215 	stw	fp,8(sp)
 80014dc:	df000204 	addi	fp,sp,8
 80014e0:	e13fff15 	stw	r4,-4(fp)
	int i;
	printf("Sending %s\n", data);
 80014e4:	010200b4 	movhi	r4,2050
 80014e8:	21005904 	addi	r4,r4,356
 80014ec:	e17fff17 	ldw	r5,-4(fp)
 80014f0:	80050b00 	call	80050b0 <printf>
	for(i=0; data[i]!=NULL; i++){
 80014f4:	e03ffe15 	stw	zero,-8(fp)
 80014f8:	00000c06 	br	800152c <writeDataToTx+0x5c>
		// IORD_8DIRECT(RS232_TxData, data[i]);
		// *RS232_TxData = data[i];
		putcharBluetooth(data[i]);
 80014fc:	e0bffe17 	ldw	r2,-8(fp)
 8001500:	e0ffff17 	ldw	r3,-4(fp)
 8001504:	1885883a 	add	r2,r3,r2
 8001508:	10800003 	ldbu	r2,0(r2)
 800150c:	10803fcc 	andi	r2,r2,255
 8001510:	1080201c 	xori	r2,r2,128
 8001514:	10bfe004 	addi	r2,r2,-128
 8001518:	1009883a 	mov	r4,r2
 800151c:	80013c00 	call	80013c0 <putcharBluetooth>
}

void writeDataToTx(char * data){
	int i;
	printf("Sending %s\n", data);
	for(i=0; data[i]!=NULL; i++){
 8001520:	e0bffe17 	ldw	r2,-8(fp)
 8001524:	10800044 	addi	r2,r2,1
 8001528:	e0bffe15 	stw	r2,-8(fp)
 800152c:	e0bffe17 	ldw	r2,-8(fp)
 8001530:	e0ffff17 	ldw	r3,-4(fp)
 8001534:	1885883a 	add	r2,r3,r2
 8001538:	10800003 	ldbu	r2,0(r2)
 800153c:	10803fcc 	andi	r2,r2,255
 8001540:	1080201c 	xori	r2,r2,128
 8001544:	10bfe004 	addi	r2,r2,-128
 8001548:	103fec1e 	bne	r2,zero,80014fc <__alt_data_end+0xfc0014fc>
		// IORD_8DIRECT(RS232_TxData, data[i]);
		// *RS232_TxData = data[i];
		putcharBluetooth(data[i]);
	}
}
 800154c:	e037883a 	mov	sp,fp
 8001550:	dfc00117 	ldw	ra,4(sp)
 8001554:	df000017 	ldw	fp,0(sp)
 8001558:	dec00204 	addi	sp,sp,8
 800155c:	f800283a 	ret

08001560 <readDataFromTx>:

void readDataFromTx(){
 8001560:	defff904 	addi	sp,sp,-28
 8001564:	dfc00615 	stw	ra,24(sp)
 8001568:	df000515 	stw	fp,20(sp)
 800156c:	dc000415 	stw	r16,16(sp)
 8001570:	df000504 	addi	fp,sp,20
 8001574:	d815883a 	mov	r10,sp
 8001578:	5021883a 	mov	r16,r10
	int bufferSize = 365;
 800157c:	02805b44 	movi	r10,365
 8001580:	e2bffc15 	stw	r10,-16(fp)
	char buffer[bufferSize];
 8001584:	e2bffc17 	ldw	r10,-16(fp)
 8001588:	52ffffc4 	addi	r11,r10,-1
 800158c:	e2fffd15 	stw	r11,-12(fp)
 8001590:	5017883a 	mov	r11,r10
 8001594:	5811883a 	mov	r8,r11
 8001598:	0013883a 	mov	r9,zero
 800159c:	4016d77a 	srli	r11,r8,29
 80015a0:	480a90fa 	slli	r5,r9,3
 80015a4:	594ab03a 	or	r5,r11,r5
 80015a8:	400890fa 	slli	r4,r8,3
 80015ac:	5009883a 	mov	r4,r10
 80015b0:	200d883a 	mov	r6,r4
 80015b4:	000f883a 	mov	r7,zero
 80015b8:	3008d77a 	srli	r4,r6,29
 80015bc:	380690fa 	slli	r3,r7,3
 80015c0:	20c6b03a 	or	r3,r4,r3
 80015c4:	300490fa 	slli	r2,r6,3
 80015c8:	5005883a 	mov	r2,r10
 80015cc:	108000c4 	addi	r2,r2,3
 80015d0:	1004d0ba 	srli	r2,r2,2
 80015d4:	1085883a 	add	r2,r2,r2
 80015d8:	1085883a 	add	r2,r2,r2
 80015dc:	d8b7c83a 	sub	sp,sp,r2
 80015e0:	d805883a 	mov	r2,sp
 80015e4:	1005883a 	mov	r2,r2
 80015e8:	e0bffe15 	stw	r2,-8(fp)
	int i;

	for(i=0; i<bufferSize-1; i++){
 80015ec:	e03ffb15 	stw	zero,-20(fp)
 80015f0:	00001306 	br	8001640 <readDataFromTx+0xe0>
		buffer[i] = getcharBluetooth();
 80015f4:	800141c0 	call	800141c <getcharBluetooth>
 80015f8:	1009883a 	mov	r4,r2
 80015fc:	e0fffe17 	ldw	r3,-8(fp)
 8001600:	e0bffb17 	ldw	r2,-20(fp)
 8001604:	1885883a 	add	r2,r3,r2
 8001608:	11000005 	stb	r4,0(r2)
		if(buffer[i] == '\n'){
 800160c:	e0fffe17 	ldw	r3,-8(fp)
 8001610:	e0bffb17 	ldw	r2,-20(fp)
 8001614:	1885883a 	add	r2,r3,r2
 8001618:	10800003 	ldbu	r2,0(r2)
 800161c:	10803fcc 	andi	r2,r2,255
 8001620:	1080201c 	xori	r2,r2,128
 8001624:	10bfe004 	addi	r2,r2,-128
 8001628:	10800298 	cmpnei	r2,r2,10
 800162c:	1000011e 	bne	r2,zero,8001634 <readDataFromTx+0xd4>
			break;
 8001630:	00000706 	br	8001650 <readDataFromTx+0xf0>
void readDataFromTx(){
	int bufferSize = 365;
	char buffer[bufferSize];
	int i;

	for(i=0; i<bufferSize-1; i++){
 8001634:	e0bffb17 	ldw	r2,-20(fp)
 8001638:	10800044 	addi	r2,r2,1
 800163c:	e0bffb15 	stw	r2,-20(fp)
 8001640:	e0bffc17 	ldw	r2,-16(fp)
 8001644:	10bfffc4 	addi	r2,r2,-1
 8001648:	e0fffb17 	ldw	r3,-20(fp)
 800164c:	18bfe916 	blt	r3,r2,80015f4 <__alt_data_end+0xfc0015f4>
		buffer[i] = getcharBluetooth();
		if(buffer[i] == '\n'){
			break;
		}
	}
	buffer[i] = NULL;
 8001650:	e0fffe17 	ldw	r3,-8(fp)
 8001654:	e0bffb17 	ldw	r2,-20(fp)
 8001658:	1885883a 	add	r2,r3,r2
 800165c:	10000005 	stb	zero,0(r2)

	i=0;
 8001660:	e03ffb15 	stw	zero,-20(fp)
	while(buffer[i]!=NULL){
 8001664:	00000c06 	br	8001698 <readDataFromTx+0x138>
		printf("%c", buffer[i]);
 8001668:	e0fffe17 	ldw	r3,-8(fp)
 800166c:	e0bffb17 	ldw	r2,-20(fp)
 8001670:	1885883a 	add	r2,r3,r2
 8001674:	10800003 	ldbu	r2,0(r2)
 8001678:	10803fcc 	andi	r2,r2,255
 800167c:	1080201c 	xori	r2,r2,128
 8001680:	10bfe004 	addi	r2,r2,-128
 8001684:	1009883a 	mov	r4,r2
 8001688:	80050f40 	call	80050f4 <putchar>
		i++;
 800168c:	e0bffb17 	ldw	r2,-20(fp)
 8001690:	10800044 	addi	r2,r2,1
 8001694:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	buffer[i] = NULL;

	i=0;
	while(buffer[i]!=NULL){
 8001698:	e0fffe17 	ldw	r3,-8(fp)
 800169c:	e0bffb17 	ldw	r2,-20(fp)
 80016a0:	1885883a 	add	r2,r3,r2
 80016a4:	10800003 	ldbu	r2,0(r2)
 80016a8:	10803fcc 	andi	r2,r2,255
 80016ac:	1080201c 	xori	r2,r2,128
 80016b0:	10bfe004 	addi	r2,r2,-128
 80016b4:	103fec1e 	bne	r2,zero,8001668 <__alt_data_end+0xfc001668>
		printf("%c", buffer[i]);
		i++;
	}
	printf("\n");
 80016b8:	01000284 	movi	r4,10
 80016bc:	80050f40 	call	80050f4 <putchar>
 80016c0:	8037883a 	mov	sp,r16
}
 80016c4:	e6ffff04 	addi	sp,fp,-4
 80016c8:	dfc00217 	ldw	ra,8(sp)
 80016cc:	df000117 	ldw	fp,4(sp)
 80016d0:	dc000017 	ldw	r16,0(sp)
 80016d4:	dec00304 	addi	sp,sp,12
 80016d8:	f800283a 	ret

080016dc <initBluetooth>:

void initBluetooth(){
 80016dc:	defffe04 	addi	sp,sp,-8
 80016e0:	dfc00115 	stw	ra,4(sp)
 80016e4:	df000015 	stw	fp,0(sp)
 80016e8:	d839883a 	mov	fp,sp
	printf("Initializing bluetooth control register\n");
 80016ec:	010200b4 	movhi	r4,2050
 80016f0:	21005c04 	addi	r4,r4,368
 80016f4:	80051c40 	call	80051c4 <puts>
	RS232_Control = 0b00000011;
 80016f8:	00a10034 	movhi	r2,33792
 80016fc:	10808004 	addi	r2,r2,512
 8001700:	00c000c4 	movi	r3,3
 8001704:	10c00005 	stb	r3,0(r2)
	RS232_Control = 0b10010101;
 8001708:	00a10034 	movhi	r2,33792
 800170c:	10808004 	addi	r2,r2,512
 8001710:	00ffe544 	movi	r3,-107
 8001714:	10c00005 	stb	r3,0(r2)
	RS232_Baud = 0b00000001;
 8001718:	00a10034 	movhi	r2,33792
 800171c:	10808104 	addi	r2,r2,516
 8001720:	00c00044 	movi	r3,1
 8001724:	10c00005 	stb	r3,0(r2)
}
 8001728:	e037883a 	mov	sp,fp
 800172c:	dfc00117 	ldw	ra,4(sp)
 8001730:	df000017 	ldw	fp,0(sp)
 8001734:	dec00204 	addi	sp,sp,8
 8001738:	f800283a 	ret

0800173c <enterCommandMode>:

void enterCommandMode(){
 800173c:	defffe04 	addi	sp,sp,-8
 8001740:	dfc00115 	stw	ra,4(sp)
 8001744:	df000015 	stw	fp,0(sp)
 8001748:	d839883a 	mov	fp,sp
	writeDataToTx("$$$");
 800174c:	010200b4 	movhi	r4,2050
 8001750:	21006604 	addi	r4,r4,408
 8001754:	80014d00 	call	80014d0 <writeDataToTx>
	getcharBluetooth(); //pull garbage value
 8001758:	800141c0 	call	800141c <getcharBluetooth>
}
 800175c:	e037883a 	mov	sp,fp
 8001760:	dfc00117 	ldw	ra,4(sp)
 8001764:	df000017 	ldw	fp,0(sp)
 8001768:	dec00204 	addi	sp,sp,8
 800176c:	f800283a 	ret

08001770 <reset>:

void reset(){
 8001770:	defffe04 	addi	sp,sp,-8
 8001774:	dfc00115 	stw	ra,4(sp)
 8001778:	df000015 	stw	fp,0(sp)
 800177c:	d839883a 	mov	fp,sp
	writeDataToTx("SF,1\r\n");
 8001780:	010200b4 	movhi	r4,2050
 8001784:	21006704 	addi	r4,r4,412
 8001788:	80014d00 	call	80014d0 <writeDataToTx>
}
 800178c:	e037883a 	mov	sp,fp
 8001790:	dfc00117 	ldw	ra,4(sp)
 8001794:	df000017 	ldw	fp,0(sp)
 8001798:	dec00204 	addi	sp,sp,8
 800179c:	f800283a 	ret

080017a0 <setAuthenticationMode>:

void setAuthenticationMode(){
 80017a0:	defffe04 	addi	sp,sp,-8
 80017a4:	dfc00115 	stw	ra,4(sp)
 80017a8:	df000015 	stw	fp,0(sp)
 80017ac:	d839883a 	mov	fp,sp
	writeDataToTx("SA,4\r\n");
 80017b0:	010200b4 	movhi	r4,2050
 80017b4:	21006904 	addi	r4,r4,420
 80017b8:	80014d00 	call	80014d0 <writeDataToTx>
}
 80017bc:	e037883a 	mov	sp,fp
 80017c0:	dfc00117 	ldw	ra,4(sp)
 80017c4:	df000017 	ldw	fp,0(sp)
 80017c8:	dec00204 	addi	sp,sp,8
 80017cc:	f800283a 	ret

080017d0 <name>:

void name(char * newName){
 80017d0:	defffd04 	addi	sp,sp,-12
 80017d4:	dfc00215 	stw	ra,8(sp)
 80017d8:	df000115 	stw	fp,4(sp)
 80017dc:	df000104 	addi	fp,sp,4
 80017e0:	e13fff15 	stw	r4,-4(fp)
	// RS232_TxData = "SN," + newName + "\r\n";
	writeDataToTx("SN,group14-Slave\r\n");
 80017e4:	010200b4 	movhi	r4,2050
 80017e8:	21006b04 	addi	r4,r4,428
 80017ec:	80014d00 	call	80014d0 <writeDataToTx>
}
 80017f0:	e037883a 	mov	sp,fp
 80017f4:	dfc00117 	ldw	ra,4(sp)
 80017f8:	df000017 	ldw	fp,0(sp)
 80017fc:	dec00204 	addi	sp,sp,8
 8001800:	f800283a 	ret

08001804 <setPassword>:

void setPassword(char * newPassword){
 8001804:	defffd04 	addi	sp,sp,-12
 8001808:	dfc00215 	stw	ra,8(sp)
 800180c:	df000115 	stw	fp,4(sp)
 8001810:	df000104 	addi	fp,sp,4
 8001814:	e13fff15 	stw	r4,-4(fp)
	writeDataToTx("SP,1414\r\n");
 8001818:	010200b4 	movhi	r4,2050
 800181c:	21007004 	addi	r4,r4,448
 8001820:	80014d00 	call	80014d0 <writeDataToTx>
}
 8001824:	e037883a 	mov	sp,fp
 8001828:	dfc00117 	ldw	ra,4(sp)
 800182c:	df000017 	ldw	fp,0(sp)
 8001830:	dec00204 	addi	sp,sp,8
 8001834:	f800283a 	ret

08001838 <AttemptBluetoothConnection>:

void AttemptBluetoothConnection(){
 8001838:	defffe04 	addi	sp,sp,-8
 800183c:	dfc00115 	stw	ra,4(sp)
 8001840:	df000015 	stw	fp,0(sp)
 8001844:	d839883a 	mov	fp,sp
	wait();wait();
 8001848:	80014740 	call	8001474 <wait>
 800184c:	80014740 	call	8001474 <wait>
	initBluetooth();
 8001850:	80016dc0 	call	80016dc <initBluetooth>

	wait();wait();
 8001854:	80014740 	call	8001474 <wait>
 8001858:	80014740 	call	8001474 <wait>
	enterCommandMode();
 800185c:	800173c0 	call	800173c <enterCommandMode>

	wait();wait();
 8001860:	80014740 	call	8001474 <wait>
 8001864:	80014740 	call	8001474 <wait>
	writeDataToTx("C\r\n");
 8001868:	010200b4 	movhi	r4,2050
 800186c:	21007304 	addi	r4,r4,460
 8001870:	80014d00 	call	80014d0 <writeDataToTx>
}
 8001874:	e037883a 	mov	sp,fp
 8001878:	dfc00117 	ldw	ra,4(sp)
 800187c:	df000017 	ldw	fp,0(sp)
 8001880:	dec00204 	addi	sp,sp,8
 8001884:	f800283a 	ret

08001888 <exitCommandMode>:

void exitCommandMode(){
 8001888:	defffe04 	addi	sp,sp,-8
 800188c:	dfc00115 	stw	ra,4(sp)
 8001890:	df000015 	stw	fp,0(sp)
 8001894:	d839883a 	mov	fp,sp
	writeDataToTx("---\r\n");
 8001898:	010200b4 	movhi	r4,2050
 800189c:	21007404 	addi	r4,r4,464
 80018a0:	80014d00 	call	80014d0 <writeDataToTx>
}
 80018a4:	e037883a 	mov	sp,fp
 80018a8:	dfc00117 	ldw	ra,4(sp)
 80018ac:	df000017 	ldw	fp,0(sp)
 80018b0:	dec00204 	addi	sp,sp,8
 80018b4:	f800283a 	ret

080018b8 <configureBluetoothDongle>:

int configureBluetoothDongle(){
 80018b8:	defffe04 	addi	sp,sp,-8
 80018bc:	dfc00115 	stw	ra,4(sp)
 80018c0:	df000015 	stw	fp,0(sp)
 80018c4:	d839883a 	mov	fp,sp

	wait();wait();
 80018c8:	80014740 	call	8001474 <wait>
 80018cc:	80014740 	call	8001474 <wait>
	initBluetooth();
 80018d0:	80016dc0 	call	80016dc <initBluetooth>

	wait();wait();
 80018d4:	80014740 	call	8001474 <wait>
 80018d8:	80014740 	call	8001474 <wait>
	enterCommandMode();
 80018dc:	800173c0 	call	800173c <enterCommandMode>
	readDataFromTx();
 80018e0:	80015600 	call	8001560 <readDataFromTx>

	wait();wait();
 80018e4:	80014740 	call	8001474 <wait>
 80018e8:	80014740 	call	8001474 <wait>
	name("group14");
 80018ec:	010200b4 	movhi	r4,2050
 80018f0:	21007604 	addi	r4,r4,472
 80018f4:	80017d00 	call	80017d0 <name>
	readDataFromTx();
 80018f8:	80015600 	call	8001560 <readDataFromTx>

	wait();wait();
 80018fc:	80014740 	call	8001474 <wait>
 8001900:	80014740 	call	8001474 <wait>
	setPassword("1414");
 8001904:	010200b4 	movhi	r4,2050
 8001908:	21007804 	addi	r4,r4,480
 800190c:	80018040 	call	8001804 <setPassword>
	readDataFromTx();
 8001910:	80015600 	call	8001560 <readDataFromTx>

	wait();wait();
 8001914:	80014740 	call	8001474 <wait>
 8001918:	80014740 	call	8001474 <wait>
	setAuthenticationMode();
 800191c:	80017a00 	call	80017a0 <setAuthenticationMode>
	readDataFromTx();
 8001920:	80015600 	call	8001560 <readDataFromTx>

	wait();wait();
 8001924:	80014740 	call	8001474 <wait>
 8001928:	80014740 	call	8001474 <wait>
	exitCommandMode();
 800192c:	80018880 	call	8001888 <exitCommandMode>
	readDataFromTx();
 8001930:	80015600 	call	8001560 <readDataFromTx>

	return 1;
 8001934:	00800044 	movi	r2,1
}
 8001938:	e037883a 	mov	sp,fp
 800193c:	dfc00117 	ldw	ra,4(sp)
 8001940:	df000017 	ldw	fp,0(sp)
 8001944:	dec00204 	addi	sp,sp,8
 8001948:	f800283a 	ret

0800194c <configureMasterBluetoothDongle>:

int configureMasterBluetoothDongle(){
 800194c:	defffe04 	addi	sp,sp,-8
 8001950:	dfc00115 	stw	ra,4(sp)
 8001954:	df000015 	stw	fp,0(sp)
 8001958:	d839883a 	mov	fp,sp
	wait();wait();
 800195c:	80014740 	call	8001474 <wait>
 8001960:	80014740 	call	8001474 <wait>
	initBluetooth();
 8001964:	80016dc0 	call	80016dc <initBluetooth>

	wait();wait();
 8001968:	80014740 	call	8001474 <wait>
 800196c:	80014740 	call	8001474 <wait>
	enterCommandMode();
 8001970:	800173c0 	call	800173c <enterCommandMode>
	readDataFromTx();
 8001974:	80015600 	call	8001560 <readDataFromTx>
}
 8001978:	e037883a 	mov	sp,fp
 800197c:	dfc00117 	ldw	ra,4(sp)
 8001980:	df000017 	ldw	fp,0(sp)
 8001984:	dec00204 	addi	sp,sp,8
 8001988:	f800283a 	ret

0800198c <Wifi_Init>:
#define Wifi_Baud (*(volatile unsigned char *)(0x84000214))

char WIFI_MESSAGE_DEPENDENT_IS_SAFE[] =
		"The dependent has confirm their safety.";

void Wifi_Init(void) {
 800198c:	deffff04 	addi	sp,sp,-4
 8001990:	df000015 	stw	fp,0(sp)
 8001994:	d839883a 	mov	fp,sp

	Wifi_Control = 0x03;
 8001998:	00a10034 	movhi	r2,33792
 800199c:	10808404 	addi	r2,r2,528
 80019a0:	00c000c4 	movi	r3,3
 80019a4:	10c00005 	stb	r3,0(r2)
	Wifi_Control = 0x15;
 80019a8:	00a10034 	movhi	r2,33792
 80019ac:	10808404 	addi	r2,r2,528
 80019b0:	00c00544 	movi	r3,21
 80019b4:	10c00005 	stb	r3,0(r2)
	// Program baud rate generator to use 115k baud.
	Wifi_Baud = 0x01;
 80019b8:	00a10034 	movhi	r2,33792
 80019bc:	10808504 	addi	r2,r2,532
 80019c0:	00c00044 	movi	r3,1
 80019c4:	10c00005 	stb	r3,0(r2)


}
 80019c8:	e037883a 	mov	sp,fp
 80019cc:	df000017 	ldw	fp,0(sp)
 80019d0:	dec00104 	addi	sp,sp,4
 80019d4:	f800283a 	ret

080019d8 <Wifi_Send_Char>:

/**
 * Send a single character to the RS232 chip.
 */
int Wifi_Send_Char(int char_data) {
 80019d8:	defffe04 	addi	sp,sp,-8
 80019dc:	df000115 	stw	fp,4(sp)
 80019e0:	df000104 	addi	fp,sp,4
 80019e4:	e13fff15 	stw	r4,-4(fp)
	// Poll Tx bit in 6850 status register and await for it to become '1'
	while (!(0x02 & Wifi_Status)) {
 80019e8:	0001883a 	nop
 80019ec:	00a10034 	movhi	r2,33792
 80019f0:	10808404 	addi	r2,r2,528
 80019f4:	10800003 	ldbu	r2,0(r2)
 80019f8:	1080008c 	andi	r2,r2,2
 80019fc:	10803fcc 	andi	r2,r2,255
 8001a00:	103ffa26 	beq	r2,zero,80019ec <__alt_data_end+0xfc0019ec>
	};

	// Write the character to the 6850 TxData register.
	Wifi_TxData = char_data;
 8001a04:	00a10034 	movhi	r2,33792
 8001a08:	10808484 	addi	r2,r2,530
 8001a0c:	e0ffff17 	ldw	r3,-4(fp)
 8001a10:	10c00005 	stb	r3,0(r2)

	return char_data;
 8001a14:	e0bfff17 	ldw	r2,-4(fp)
}
 8001a18:	e037883a 	mov	sp,fp
 8001a1c:	df000017 	ldw	fp,0(sp)
 8001a20:	dec00104 	addi	sp,sp,4
 8001a24:	f800283a 	ret

08001a28 <Wifi_Get_Char>:

int Wifi_Get_Char(void) {
 8001a28:	deffff04 	addi	sp,sp,-4
 8001a2c:	df000015 	stw	fp,0(sp)
 8001a30:	d839883a 	mov	fp,sp
	// Poll RX bit in 6850 status register and await for it to become '1'
	while (!(0x01 & Wifi_Status)) {
 8001a34:	0001883a 	nop
 8001a38:	00a10034 	movhi	r2,33792
 8001a3c:	10808404 	addi	r2,r2,528
 8001a40:	10800003 	ldbu	r2,0(r2)
 8001a44:	1080004c 	andi	r2,r2,1
 8001a48:	10803fcc 	andi	r2,r2,255
 8001a4c:	103ffa26 	beq	r2,zero,8001a38 <__alt_data_end+0xfc001a38>
	};

	// Read the received character from 6850 RxData register.
	return (int) Wifi_RxData;
 8001a50:	00a10034 	movhi	r2,33792
 8001a54:	10808484 	addi	r2,r2,530
 8001a58:	10800003 	ldbu	r2,0(r2)
 8001a5c:	10803fcc 	andi	r2,r2,255
}
 8001a60:	e037883a 	mov	sp,fp
 8001a64:	df000017 	ldw	fp,0(sp)
 8001a68:	dec00104 	addi	sp,sp,4
 8001a6c:	f800283a 	ret

08001a70 <Wifi_Send_String>:

void Wifi_Send_String(char command[]) {
 8001a70:	defffb04 	addi	sp,sp,-20
 8001a74:	dfc00415 	stw	ra,16(sp)
 8001a78:	df000315 	stw	fp,12(sp)
 8001a7c:	dc000215 	stw	r16,8(sp)
 8001a80:	df000304 	addi	fp,sp,12
 8001a84:	e13ffe15 	stw	r4,-8(fp)
	int i;

	for (i = 0; i < strlen(command); i++) {
 8001a88:	e03ffd15 	stw	zero,-12(fp)
 8001a8c:	00000c06 	br	8001ac0 <Wifi_Send_String+0x50>
		Wifi_Send_Char(command[i]);
 8001a90:	e0bffd17 	ldw	r2,-12(fp)
 8001a94:	e0fffe17 	ldw	r3,-8(fp)
 8001a98:	1885883a 	add	r2,r3,r2
 8001a9c:	10800003 	ldbu	r2,0(r2)
 8001aa0:	10803fcc 	andi	r2,r2,255
 8001aa4:	1080201c 	xori	r2,r2,128
 8001aa8:	10bfe004 	addi	r2,r2,-128
 8001aac:	1009883a 	mov	r4,r2
 8001ab0:	80019d80 	call	80019d8 <Wifi_Send_Char>
}

void Wifi_Send_String(char command[]) {
	int i;

	for (i = 0; i < strlen(command); i++) {
 8001ab4:	e0bffd17 	ldw	r2,-12(fp)
 8001ab8:	10800044 	addi	r2,r2,1
 8001abc:	e0bffd15 	stw	r2,-12(fp)
 8001ac0:	e43ffd17 	ldw	r16,-12(fp)
 8001ac4:	e13ffe17 	ldw	r4,-8(fp)
 8001ac8:	80052f00 	call	80052f0 <strlen>
 8001acc:	80bff036 	bltu	r16,r2,8001a90 <__alt_data_end+0xfc001a90>
		Wifi_Send_Char(command[i]);
	}

	// Send the termination flags, without them the RS232 chip won't know when
	// the command ends and when the next command starts.
	Wifi_Send_Char('\r');
 8001ad0:	01000344 	movi	r4,13
 8001ad4:	80019d80 	call	80019d8 <Wifi_Send_Char>
	Wifi_Send_Char('\n');
 8001ad8:	01000284 	movi	r4,10
 8001adc:	80019d80 	call	80019d8 <Wifi_Send_Char>
}
 8001ae0:	e6ffff04 	addi	sp,fp,-4
 8001ae4:	dfc00217 	ldw	ra,8(sp)
 8001ae8:	df000117 	ldw	fp,4(sp)
 8001aec:	dc000017 	ldw	r16,0(sp)
 8001af0:	dec00304 	addi	sp,sp,12
 8001af4:	f800283a 	ret

08001af8 <Wifi_Print_Response>:


/*
 * Receive a string form the RS232 chip by polling until we reach a newline
 */
void Wifi_Print_Response(){
 8001af8:	defffd04 	addi	sp,sp,-12
 8001afc:	dfc00215 	stw	ra,8(sp)
 8001b00:	df000115 	stw	fp,4(sp)
 8001b04:	df000104 	addi	fp,sp,4
	char response;
	while(response != '\n'){
 8001b08:	00000506 	br	8001b20 <Wifi_Print_Response+0x28>
		response = (char)Wifi_Get_Char();
 8001b0c:	8001a280 	call	8001a28 <Wifi_Get_Char>
 8001b10:	e0bfff05 	stb	r2,-4(fp)
		printf("%c", response);
 8001b14:	e0bfff07 	ldb	r2,-4(fp)
 8001b18:	1009883a 	mov	r4,r2
 8001b1c:	80050f40 	call	80050f4 <putchar>
/*
 * Receive a string form the RS232 chip by polling until we reach a newline
 */
void Wifi_Print_Response(){
	char response;
	while(response != '\n'){
 8001b20:	e0bfff07 	ldb	r2,-4(fp)
 8001b24:	10800298 	cmpnei	r2,r2,10
 8001b28:	103ff81e 	bne	r2,zero,8001b0c <__alt_data_end+0xfc001b0c>
		response = (char)Wifi_Get_Char();
		printf("%c", response);
	}
	printf("\n");
 8001b2c:	01000284 	movi	r4,10
 8001b30:	80050f40 	call	80050f4 <putchar>
}
 8001b34:	e037883a 	mov	sp,fp
 8001b38:	dfc00117 	ldw	ra,4(sp)
 8001b3c:	df000017 	ldw	fp,0(sp)
 8001b40:	dec00204 	addi	sp,sp,8
 8001b44:	f800283a 	ret

08001b48 <Wifi_For_Received_Data>:

/**
 * Polls the 6850 to determine if any character has been received.
 * It doesn't wait for one, or read it, it simply tests to see if one is available to read
 */
int Wifi_For_Received_Data(void) {
 8001b48:	deffff04 	addi	sp,sp,-4
 8001b4c:	df000015 	stw	fp,0(sp)
 8001b50:	d839883a 	mov	fp,sp
	// Test Rx bit in the STATUS register
	// if RX bit is set, return TRUE, otherwise return FALSE
	return 0x01 & Wifi_Status;
 8001b54:	00a10034 	movhi	r2,33792
 8001b58:	10808404 	addi	r2,r2,528
 8001b5c:	10800003 	ldbu	r2,0(r2)
 8001b60:	10803fcc 	andi	r2,r2,255
 8001b64:	1080004c 	andi	r2,r2,1
}
 8001b68:	e037883a 	mov	sp,fp
 8001b6c:	df000017 	ldw	fp,0(sp)
 8001b70:	dec00104 	addi	sp,sp,4
 8001b74:	f800283a 	ret

08001b78 <Wifi_Send_Sms>:

void Wifi_Send_Sms(char message[]) {
 8001b78:	defffd04 	addi	sp,sp,-12
 8001b7c:	dfc00215 	stw	ra,8(sp)
 8001b80:	df000115 	stw	fp,4(sp)
 8001b84:	df000104 	addi	fp,sp,4
 8001b88:	e13fff15 	stw	r4,-4(fp)
	//char lua_sms_command[256];
	printf("Test starts");
 8001b8c:	010200b4 	movhi	r4,2050
 8001b90:	21007a04 	addi	r4,r4,488
 8001b94:	80050b00 	call	80050b0 <printf>
	Wifi_Send_String("dofile(\"project2.lua\")");
 8001b98:	010200b4 	movhi	r4,2050
 8001b9c:	21007d04 	addi	r4,r4,500
 8001ba0:	8001a700 	call	8001a70 <Wifi_Send_String>
	Wifi_Send_String("check_wifi()");
 8001ba4:	010200b4 	movhi	r4,2050
 8001ba8:	21008304 	addi	r4,r4,524
 8001bac:	8001a700 	call	8001a70 <Wifi_Send_String>
	//sprintf(message,
		//	"send_sms(\"%s\")", message);

	Wifi_Send_String(message);
 8001bb0:	e13fff17 	ldw	r4,-4(fp)
 8001bb4:	8001a700 	call	8001a70 <Wifi_Send_String>
	printf("Test passed");
 8001bb8:	010200b4 	movhi	r4,2050
 8001bbc:	21008704 	addi	r4,r4,540
 8001bc0:	80050b00 	call	80050b0 <printf>
	Wifi_Print_Response();
 8001bc4:	8001af80 	call	8001af8 <Wifi_Print_Response>
}
 8001bc8:	e037883a 	mov	sp,fp
 8001bcc:	dfc00117 	ldw	ra,4(sp)
 8001bd0:	df000017 	ldw	fp,0(sp)
 8001bd4:	dec00204 	addi	sp,sp,8
 8001bd8:	f800283a 	ret

08001bdc <delay>:

int auto_approve = 0;



void delay(int number_of_seconds) {
 8001bdc:	defffb04 	addi	sp,sp,-20
 8001be0:	dfc00415 	stw	ra,16(sp)
 8001be4:	df000315 	stw	fp,12(sp)
 8001be8:	df000304 	addi	fp,sp,12
 8001bec:	e13fff15 	stw	r4,-4(fp)
	int milli_seconds = 1000 * number_of_seconds;
 8001bf0:	e0bfff17 	ldw	r2,-4(fp)
 8001bf4:	1080fa24 	muli	r2,r2,1000
 8001bf8:	e0bffd15 	stw	r2,-12(fp)
	clock_t start_time = clock();
 8001bfc:	80048680 	call	8004868 <clock>
 8001c00:	e0bffe15 	stw	r2,-8(fp)
	while (clock() < start_time + milli_seconds){}
 8001c04:	0001883a 	nop
 8001c08:	80048680 	call	8004868 <clock>
 8001c0c:	1009883a 	mov	r4,r2
 8001c10:	e0fffd17 	ldw	r3,-12(fp)
 8001c14:	e0bffe17 	ldw	r2,-8(fp)
 8001c18:	1885883a 	add	r2,r3,r2
 8001c1c:	20bffa36 	bltu	r4,r2,8001c08 <__alt_data_end+0xfc001c08>
}
 8001c20:	e037883a 	mov	sp,fp
 8001c24:	dfc00117 	ldw	ra,4(sp)
 8001c28:	df000017 	ldw	fp,0(sp)
 8001c2c:	dec00204 	addi	sp,sp,8
 8001c30:	f800283a 	ret

08001c34 <delay_double>:

void delay_double(double number_of_seconds) {
 8001c34:	defffa04 	addi	sp,sp,-24
 8001c38:	dfc00515 	stw	ra,20(sp)
 8001c3c:	df000415 	stw	fp,16(sp)
 8001c40:	df000404 	addi	fp,sp,16
 8001c44:	e13ffe15 	stw	r4,-8(fp)
 8001c48:	e17fff15 	stw	r5,-4(fp)
	int milli_seconds = 1000 * number_of_seconds;
 8001c4c:	e13ffe17 	ldw	r4,-8(fp)
 8001c50:	e17fff17 	ldw	r5,-4(fp)
 8001c54:	000d883a 	mov	r6,zero
 8001c58:	01d023f4 	movhi	r7,16527
 8001c5c:	39d00004 	addi	r7,r7,16384
 8001c60:	8003f880 	call	8003f88 <__muldf3>
 8001c64:	1009883a 	mov	r4,r2
 8001c68:	180b883a 	mov	r5,r3
 8001c6c:	2005883a 	mov	r2,r4
 8001c70:	2807883a 	mov	r3,r5
 8001c74:	1009883a 	mov	r4,r2
 8001c78:	180b883a 	mov	r5,r3
 8001c7c:	80046ac0 	call	80046ac <__fixdfsi>
 8001c80:	e0bffc15 	stw	r2,-16(fp)
	clock_t start_time = clock();
 8001c84:	80048680 	call	8004868 <clock>
 8001c88:	e0bffd15 	stw	r2,-12(fp)
	while (clock() < start_time + milli_seconds){}
 8001c8c:	0001883a 	nop
 8001c90:	80048680 	call	8004868 <clock>
 8001c94:	1009883a 	mov	r4,r2
 8001c98:	e0fffc17 	ldw	r3,-16(fp)
 8001c9c:	e0bffd17 	ldw	r2,-12(fp)
 8001ca0:	1885883a 	add	r2,r3,r2
 8001ca4:	20bffa36 	bltu	r4,r2,8001c90 <__alt_data_end+0xfc001c90>
}
 8001ca8:	e037883a 	mov	sp,fp
 8001cac:	dfc00117 	ldw	ra,4(sp)
 8001cb0:	df000017 	ldw	fp,0(sp)
 8001cb4:	dec00204 	addi	sp,sp,8
 8001cb8:	f800283a 	ret

08001cbc <BaseDisplay>:


void BaseDisplay(void) {
 8001cbc:	defff904 	addi	sp,sp,-28
 8001cc0:	dfc00615 	stw	ra,24(sp)
 8001cc4:	df000515 	stw	fp,20(sp)
 8001cc8:	df000504 	addi	fp,sp,20
	int i;
	char* roomString;

	for (i = 0; i < 800; i++)
 8001ccc:	e03ffe15 	stw	zero,-8(fp)
 8001cd0:	00000806 	br	8001cf4 <BaseDisplay+0x38>
		DrawHorizontalLine(0, 800, i, TEAL);
 8001cd4:	0009883a 	mov	r4,zero
 8001cd8:	0140c804 	movi	r5,800
 8001cdc:	e1bffe17 	ldw	r6,-8(fp)
 8001ce0:	01c00384 	movi	r7,14
 8001ce4:	80003800 	call	8000380 <DrawHorizontalLine>

void BaseDisplay(void) {
	int i;
	char* roomString;

	for (i = 0; i < 800; i++)
 8001ce8:	e0bffe17 	ldw	r2,-8(fp)
 8001cec:	10800044 	addi	r2,r2,1
 8001cf0:	e0bffe15 	stw	r2,-8(fp)
 8001cf4:	e0bffe17 	ldw	r2,-8(fp)
 8001cf8:	1080c810 	cmplti	r2,r2,800
 8001cfc:	103ff51e 	bne	r2,zero,8001cd4 <__alt_data_end+0xfc001cd4>
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001d00:	00800044 	movi	r2,1
 8001d04:	e0bffe15 	stw	r2,-8(fp)
 8001d08:	00002106 	br	8001d90 <BaseDisplay+0xd4>
		sprintf(roomString, "Room %d", i);
 8001d0c:	e13fff17 	ldw	r4,-4(fp)
 8001d10:	014200b4 	movhi	r5,2050
 8001d14:	29408a04 	addi	r5,r5,552
 8001d18:	e1bffe17 	ldw	r6,-8(fp)
 8001d1c:	80052840 	call	8005284 <sprintf>
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
 8001d20:	e0bffe17 	ldw	r2,-8(fp)
 8001d24:	10c00a24 	muli	r3,r2,40
 8001d28:	e0bffe17 	ldw	r2,-8(fp)
 8001d2c:	10800044 	addi	r2,r2,1
 8001d30:	10800a24 	muli	r2,r2,40
 8001d34:	d8000015 	stw	zero,0(sp)
 8001d38:	01001904 	movi	r4,100
 8001d3c:	01404b04 	movi	r5,300
 8001d40:	180d883a 	mov	r6,r3
 8001d44:	100f883a 	mov	r7,r2
 8001d48:	80006000 	call	8000600 <DrawRect>
		DrawString(105, 40 * i + 40 / 4, BLACK, TEAL, roomString, 2, 1);
 8001d4c:	e0bffe17 	ldw	r2,-8(fp)
 8001d50:	10800a24 	muli	r2,r2,40
 8001d54:	10c00284 	addi	r3,r2,10
 8001d58:	e0bfff17 	ldw	r2,-4(fp)
 8001d5c:	d8800015 	stw	r2,0(sp)
 8001d60:	00800084 	movi	r2,2
 8001d64:	d8800115 	stw	r2,4(sp)
 8001d68:	00800044 	movi	r2,1
 8001d6c:	d8800215 	stw	r2,8(sp)
 8001d70:	01001a44 	movi	r4,105
 8001d74:	180b883a 	mov	r5,r3
 8001d78:	000d883a 	mov	r6,zero
 8001d7c:	01c00384 	movi	r7,14
 8001d80:	8000ac40 	call	8000ac4 <DrawString>
	int i;
	char* roomString;

	for (i = 0; i < 800; i++)
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001d84:	e0bffe17 	ldw	r2,-8(fp)
 8001d88:	10800044 	addi	r2,r2,1
 8001d8c:	e0bffe15 	stw	r2,-8(fp)
 8001d90:	e0bffe17 	ldw	r2,-8(fp)
 8001d94:	108002d0 	cmplti	r2,r2,11
 8001d98:	103fdc1e 	bne	r2,zero,8001d0c <__alt_data_end+0xfc001d0c>
		sprintf(roomString, "Room %d", i);
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
		DrawString(105, 40 * i + 40 / 4, BLACK, TEAL, roomString, 2, 1);
	}
	printf("Base Displayed \n");
 8001d9c:	010200b4 	movhi	r4,2050
 8001da0:	21008c04 	addi	r4,r4,560
 8001da4:	80051c40 	call	80051c4 <puts>
}
 8001da8:	e037883a 	mov	sp,fp
 8001dac:	dfc00117 	ldw	ra,4(sp)
 8001db0:	df000017 	ldw	fp,0(sp)
 8001db4:	dec00204 	addi	sp,sp,8
 8001db8:	f800283a 	ret

08001dbc <InfoDisplay>:

void InfoDisplay(int room_num, int lights, int door, int occupied, int in_use, int temp) {
 8001dbc:	defff504 	addi	sp,sp,-44
 8001dc0:	dfc00a15 	stw	ra,40(sp)
 8001dc4:	df000915 	stw	fp,36(sp)
 8001dc8:	df000904 	addi	fp,sp,36
 8001dcc:	e13ffc15 	stw	r4,-16(fp)
 8001dd0:	e17ffd15 	stw	r5,-12(fp)
 8001dd4:	e1bffe15 	stw	r6,-8(fp)
 8001dd8:	e1ffff15 	stw	r7,-4(fp)
	int i;

	//Cover Last Data
	for (i = 0; i < 480; i++)
 8001ddc:	e03ffa15 	stw	zero,-24(fp)
 8001de0:	00000806 	br	8001e04 <InfoDisplay+0x48>
		DrawHorizontalLine(0, 800, i, TEAL);
 8001de4:	0009883a 	mov	r4,zero
 8001de8:	0140c804 	movi	r5,800
 8001dec:	e1bffa17 	ldw	r6,-24(fp)
 8001df0:	01c00384 	movi	r7,14
 8001df4:	80003800 	call	8000380 <DrawHorizontalLine>

void InfoDisplay(int room_num, int lights, int door, int occupied, int in_use, int temp) {
	int i;

	//Cover Last Data
	for (i = 0; i < 480; i++)
 8001df8:	e0bffa17 	ldw	r2,-24(fp)
 8001dfc:	10800044 	addi	r2,r2,1
 8001e00:	e0bffa15 	stw	r2,-24(fp)
 8001e04:	e0bffa17 	ldw	r2,-24(fp)
 8001e08:	10807810 	cmplti	r2,r2,480
 8001e0c:	103ff51e 	bne	r2,zero,8001de4 <__alt_data_end+0xfc001de4>
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001e10:	00800044 	movi	r2,1
 8001e14:	e0bffa15 	stw	r2,-24(fp)
 8001e18:	00000e06 	br	8001e54 <InfoDisplay+0x98>
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
 8001e1c:	e0bffa17 	ldw	r2,-24(fp)
 8001e20:	10c00a24 	muli	r3,r2,40
 8001e24:	e0bffa17 	ldw	r2,-24(fp)
 8001e28:	10800044 	addi	r2,r2,1
 8001e2c:	10800a24 	muli	r2,r2,40
 8001e30:	d8000015 	stw	zero,0(sp)
 8001e34:	01001904 	movi	r4,100
 8001e38:	01404b04 	movi	r5,300
 8001e3c:	180d883a 	mov	r6,r3
 8001e40:	100f883a 	mov	r7,r2
 8001e44:	80006000 	call	8000600 <DrawRect>
	int i;

	//Cover Last Data
	for (i = 0; i < 480; i++)
		DrawHorizontalLine(0, 800, i, TEAL);
	for (i = 1; i <= 10; i++) {
 8001e48:	e0bffa17 	ldw	r2,-24(fp)
 8001e4c:	10800044 	addi	r2,r2,1
 8001e50:	e0bffa15 	stw	r2,-24(fp)
 8001e54:	e0bffa17 	ldw	r2,-24(fp)
 8001e58:	108002d0 	cmplti	r2,r2,11
 8001e5c:	103fef1e 	bne	r2,zero,8001e1c <__alt_data_end+0xfc001e1c>
		DrawRect(100, 300, 40 * i, 40 * (i + 1), BLACK);
	}
	//Change Colour of selected Room
	DrawFillRect(101, 299, 40 * room_num + 1, 40 * (room_num + 1) - 1, NAVY);
 8001e60:	e0bffc17 	ldw	r2,-16(fp)
 8001e64:	10800a24 	muli	r2,r2,40
 8001e68:	11800044 	addi	r6,r2,1
 8001e6c:	e0bffc17 	ldw	r2,-16(fp)
 8001e70:	10800044 	addi	r2,r2,1
 8001e74:	10800a24 	muli	r2,r2,40
 8001e78:	10ffffc4 	addi	r3,r2,-1
 8001e7c:	008003c4 	movi	r2,15
 8001e80:	d8800015 	stw	r2,0(sp)
 8001e84:	01001944 	movi	r4,101
 8001e88:	01404ac4 	movi	r5,299
 8001e8c:	180f883a 	mov	r7,r3
 8001e90:	80005940 	call	8000594 <DrawFillRect>

	char* roomDeetsString;
	sprintf(roomDeetsString, "Room %d Details & Options", room_num);
 8001e94:	e13ffb17 	ldw	r4,-20(fp)
 8001e98:	014200b4 	movhi	r5,2050
 8001e9c:	29409004 	addi	r5,r5,576
 8001ea0:	e1bffc17 	ldw	r6,-16(fp)
 8001ea4:	80052840 	call	8005284 <sprintf>
	DrawRect(350, 750, 40, 40 * 11, BLACK);
 8001ea8:	d8000015 	stw	zero,0(sp)
 8001eac:	01005784 	movi	r4,350
 8001eb0:	0140bb84 	movi	r5,750
 8001eb4:	01800a04 	movi	r6,40
 8001eb8:	01c06e04 	movi	r7,440
 8001ebc:	80006000 	call	8000600 <DrawRect>
	DrawString(360, 40 * 1.25, BLACK, TEAL, roomDeetsString, 2, 1);
 8001ec0:	e0bffb17 	ldw	r2,-20(fp)
 8001ec4:	d8800015 	stw	r2,0(sp)
 8001ec8:	00800084 	movi	r2,2
 8001ecc:	d8800115 	stw	r2,4(sp)
 8001ed0:	00800044 	movi	r2,1
 8001ed4:	d8800215 	stw	r2,8(sp)
 8001ed8:	01005a04 	movi	r4,360
 8001edc:	01400c84 	movi	r5,50
 8001ee0:	000d883a 	mov	r6,zero
 8001ee4:	01c00384 	movi	r7,14
 8001ee8:	8000ac40 	call	8000ac4 <DrawString>
	DrawString(400, 40 * 2.25 - 14, BLACK, TEAL, "In Use: ", 2, 1);
 8001eec:	008200b4 	movhi	r2,2050
 8001ef0:	10809704 	addi	r2,r2,604
 8001ef4:	d8800015 	stw	r2,0(sp)
 8001ef8:	00800084 	movi	r2,2
 8001efc:	d8800115 	stw	r2,4(sp)
 8001f00:	00800044 	movi	r2,1
 8001f04:	d8800215 	stw	r2,8(sp)
 8001f08:	01006404 	movi	r4,400
 8001f0c:	01401304 	movi	r5,76
 8001f10:	000d883a 	mov	r6,zero
 8001f14:	01c00384 	movi	r7,14
 8001f18:	8000ac40 	call	8000ac4 <DrawString>

	if (in_use) {
 8001f1c:	e0800217 	ldw	r2,8(fp)
 8001f20:	10000d26 	beq	r2,zero,8001f58 <InfoDisplay+0x19c>
		DrawString(530, 40 * 2.25 - 14, GREEN, TEAL, "YES", 2, 1);
 8001f24:	008200b4 	movhi	r2,2050
 8001f28:	10809a04 	addi	r2,r2,616
 8001f2c:	d8800015 	stw	r2,0(sp)
 8001f30:	00800084 	movi	r2,2
 8001f34:	d8800115 	stw	r2,4(sp)
 8001f38:	00800044 	movi	r2,1
 8001f3c:	d8800215 	stw	r2,8(sp)
 8001f40:	01008484 	movi	r4,530
 8001f44:	01401304 	movi	r5,76
 8001f48:	01800304 	movi	r6,12
 8001f4c:	01c00384 	movi	r7,14
 8001f50:	8000ac40 	call	8000ac4 <DrawString>
 8001f54:	00000c06 	br	8001f88 <InfoDisplay+0x1cc>
	} else {
		DrawString(530, 40 * 2.25 - 14, CRIMSON, TEAL, "NO", 2, 1);
 8001f58:	008200b4 	movhi	r2,2050
 8001f5c:	10809b04 	addi	r2,r2,620
 8001f60:	d8800015 	stw	r2,0(sp)
 8001f64:	00800084 	movi	r2,2
 8001f68:	d8800115 	stw	r2,4(sp)
 8001f6c:	00800044 	movi	r2,1
 8001f70:	d8800215 	stw	r2,8(sp)
 8001f74:	01008484 	movi	r4,530
 8001f78:	01401304 	movi	r5,76
 8001f7c:	018004c4 	movi	r6,19
 8001f80:	01c00384 	movi	r7,14
 8001f84:	8000ac40 	call	8000ac4 <DrawString>

	}
	DrawString(400, 40 * 3.25 - 14, BLACK, TEAL, "Occupied: ", 2, 1);
 8001f88:	008200b4 	movhi	r2,2050
 8001f8c:	10809c04 	addi	r2,r2,624
 8001f90:	d8800015 	stw	r2,0(sp)
 8001f94:	00800084 	movi	r2,2
 8001f98:	d8800115 	stw	r2,4(sp)
 8001f9c:	00800044 	movi	r2,1
 8001fa0:	d8800215 	stw	r2,8(sp)
 8001fa4:	01006404 	movi	r4,400
 8001fa8:	01401d04 	movi	r5,116
 8001fac:	000d883a 	mov	r6,zero
 8001fb0:	01c00384 	movi	r7,14
 8001fb4:	8000ac40 	call	8000ac4 <DrawString>
	if (occupied) {
 8001fb8:	e0bfff17 	ldw	r2,-4(fp)
 8001fbc:	10000d26 	beq	r2,zero,8001ff4 <InfoDisplay+0x238>
		DrawString(530, 40 * 3.25 - 14, GREEN, TEAL, "YES", 2, 1);
 8001fc0:	008200b4 	movhi	r2,2050
 8001fc4:	10809a04 	addi	r2,r2,616
 8001fc8:	d8800015 	stw	r2,0(sp)
 8001fcc:	00800084 	movi	r2,2
 8001fd0:	d8800115 	stw	r2,4(sp)
 8001fd4:	00800044 	movi	r2,1
 8001fd8:	d8800215 	stw	r2,8(sp)
 8001fdc:	01008484 	movi	r4,530
 8001fe0:	01401d04 	movi	r5,116
 8001fe4:	01800304 	movi	r6,12
 8001fe8:	01c00384 	movi	r7,14
 8001fec:	8000ac40 	call	8000ac4 <DrawString>
 8001ff0:	00000c06 	br	8002024 <InfoDisplay+0x268>
	} else {
		DrawString(530, 40 * 3.25 - 14, CRIMSON, TEAL, "NO", 2, 1);
 8001ff4:	008200b4 	movhi	r2,2050
 8001ff8:	10809b04 	addi	r2,r2,620
 8001ffc:	d8800015 	stw	r2,0(sp)
 8002000:	00800084 	movi	r2,2
 8002004:	d8800115 	stw	r2,4(sp)
 8002008:	00800044 	movi	r2,1
 800200c:	d8800215 	stw	r2,8(sp)
 8002010:	01008484 	movi	r4,530
 8002014:	01401d04 	movi	r5,116
 8002018:	018004c4 	movi	r6,19
 800201c:	01c00384 	movi	r7,14
 8002020:	8000ac40 	call	8000ac4 <DrawString>
	}

	DrawString(400, 40 * 4.25 - 14, BLACK, TEAL, "Lights: ", 2, 1);
 8002024:	008200b4 	movhi	r2,2050
 8002028:	10809f04 	addi	r2,r2,636
 800202c:	d8800015 	stw	r2,0(sp)
 8002030:	00800084 	movi	r2,2
 8002034:	d8800115 	stw	r2,4(sp)
 8002038:	00800044 	movi	r2,1
 800203c:	d8800215 	stw	r2,8(sp)
 8002040:	01006404 	movi	r4,400
 8002044:	01402704 	movi	r5,156
 8002048:	000d883a 	mov	r6,zero
 800204c:	01c00384 	movi	r7,14
 8002050:	8000ac40 	call	8000ac4 <DrawString>
	if (lights) {
 8002054:	e0bffd17 	ldw	r2,-12(fp)
 8002058:	10000d26 	beq	r2,zero,8002090 <InfoDisplay+0x2d4>
		DrawString(530, 40 * 4.25 - 14, GREEN, TEAL, "ON", 2, 1);
 800205c:	008200b4 	movhi	r2,2050
 8002060:	1080a204 	addi	r2,r2,648
 8002064:	d8800015 	stw	r2,0(sp)
 8002068:	00800084 	movi	r2,2
 800206c:	d8800115 	stw	r2,4(sp)
 8002070:	00800044 	movi	r2,1
 8002074:	d8800215 	stw	r2,8(sp)
 8002078:	01008484 	movi	r4,530
 800207c:	01402704 	movi	r5,156
 8002080:	01800304 	movi	r6,12
 8002084:	01c00384 	movi	r7,14
 8002088:	8000ac40 	call	8000ac4 <DrawString>
 800208c:	00000c06 	br	80020c0 <InfoDisplay+0x304>
	} else {
		DrawString(530, 40 * 4.25 - 14, CRIMSON, TEAL, "OFF", 2, 1);
 8002090:	008200b4 	movhi	r2,2050
 8002094:	1080a304 	addi	r2,r2,652
 8002098:	d8800015 	stw	r2,0(sp)
 800209c:	00800084 	movi	r2,2
 80020a0:	d8800115 	stw	r2,4(sp)
 80020a4:	00800044 	movi	r2,1
 80020a8:	d8800215 	stw	r2,8(sp)
 80020ac:	01008484 	movi	r4,530
 80020b0:	01402704 	movi	r5,156
 80020b4:	018004c4 	movi	r6,19
 80020b8:	01c00384 	movi	r7,14
 80020bc:	8000ac40 	call	8000ac4 <DrawString>
	}

	DrawString(400, 40 * 5.25 - 14, BLACK, TEAL, "Door: ", 2, 1);
 80020c0:	008200b4 	movhi	r2,2050
 80020c4:	1080a404 	addi	r2,r2,656
 80020c8:	d8800015 	stw	r2,0(sp)
 80020cc:	00800084 	movi	r2,2
 80020d0:	d8800115 	stw	r2,4(sp)
 80020d4:	00800044 	movi	r2,1
 80020d8:	d8800215 	stw	r2,8(sp)
 80020dc:	01006404 	movi	r4,400
 80020e0:	01403104 	movi	r5,196
 80020e4:	000d883a 	mov	r6,zero
 80020e8:	01c00384 	movi	r7,14
 80020ec:	8000ac40 	call	8000ac4 <DrawString>
	if (door) {
 80020f0:	e0bffe17 	ldw	r2,-8(fp)
 80020f4:	10000d26 	beq	r2,zero,800212c <InfoDisplay+0x370>
		DrawString(530, 40 * 5.25 - 14, GREEN, TEAL, "UNLOCKED", 2, 1);
 80020f8:	008200b4 	movhi	r2,2050
 80020fc:	1080a604 	addi	r2,r2,664
 8002100:	d8800015 	stw	r2,0(sp)
 8002104:	00800084 	movi	r2,2
 8002108:	d8800115 	stw	r2,4(sp)
 800210c:	00800044 	movi	r2,1
 8002110:	d8800215 	stw	r2,8(sp)
 8002114:	01008484 	movi	r4,530
 8002118:	01403104 	movi	r5,196
 800211c:	01800304 	movi	r6,12
 8002120:	01c00384 	movi	r7,14
 8002124:	8000ac40 	call	8000ac4 <DrawString>
 8002128:	00000c06 	br	800215c <InfoDisplay+0x3a0>
	} else {
		DrawString(530, 40 * 5.25 - 14, CRIMSON, TEAL, "LOCKED", 2, 1);
 800212c:	008200b4 	movhi	r2,2050
 8002130:	1080a904 	addi	r2,r2,676
 8002134:	d8800015 	stw	r2,0(sp)
 8002138:	00800084 	movi	r2,2
 800213c:	d8800115 	stw	r2,4(sp)
 8002140:	00800044 	movi	r2,1
 8002144:	d8800215 	stw	r2,8(sp)
 8002148:	01008484 	movi	r4,530
 800214c:	01403104 	movi	r5,196
 8002150:	018004c4 	movi	r6,19
 8002154:	01c00384 	movi	r7,14
 8002158:	8000ac40 	call	8000ac4 <DrawString>
	}

	DrawString(400, 40 * 6.25 - 14, BLACK, TEAL, "Lights: ", 2, 1);
 800215c:	008200b4 	movhi	r2,2050
 8002160:	10809f04 	addi	r2,r2,636
 8002164:	d8800015 	stw	r2,0(sp)
 8002168:	00800084 	movi	r2,2
 800216c:	d8800115 	stw	r2,4(sp)
 8002170:	00800044 	movi	r2,1
 8002174:	d8800215 	stw	r2,8(sp)
 8002178:	01006404 	movi	r4,400
 800217c:	01403b04 	movi	r5,236
 8002180:	000d883a 	mov	r6,zero
 8002184:	01c00384 	movi	r7,14
 8002188:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(480, 560, 40 * 6.25 - 34, 40 * 7.25 - 24, CRIMSON);
 800218c:	008004c4 	movi	r2,19
 8002190:	d8800015 	stw	r2,0(sp)
 8002194:	01007804 	movi	r4,480
 8002198:	01408c04 	movi	r5,560
 800219c:	01803604 	movi	r6,216
 80021a0:	01c04284 	movi	r7,266
 80021a4:	80005940 	call	8000594 <DrawFillRect>
	DrawString(490, 40 * 6.25 - 14, BLACK, CRIMSON, "OFF", 2, 1);
 80021a8:	008200b4 	movhi	r2,2050
 80021ac:	1080a304 	addi	r2,r2,652
 80021b0:	d8800015 	stw	r2,0(sp)
 80021b4:	00800084 	movi	r2,2
 80021b8:	d8800115 	stw	r2,4(sp)
 80021bc:	00800044 	movi	r2,1
 80021c0:	d8800215 	stw	r2,8(sp)
 80021c4:	01007a84 	movi	r4,490
 80021c8:	01403b04 	movi	r5,236
 80021cc:	000d883a 	mov	r6,zero
 80021d0:	01c004c4 	movi	r7,19
 80021d4:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(570, 650, 40 * 6.25 - 34, 40 * 7.25 - 24, GREEN);
 80021d8:	00800304 	movi	r2,12
 80021dc:	d8800015 	stw	r2,0(sp)
 80021e0:	01008e84 	movi	r4,570
 80021e4:	0140a284 	movi	r5,650
 80021e8:	01803604 	movi	r6,216
 80021ec:	01c04284 	movi	r7,266
 80021f0:	80005940 	call	8000594 <DrawFillRect>
	DrawString(580, 40 * 6.25 - 14, BLACK, GREEN, "ON", 2, 1);
 80021f4:	008200b4 	movhi	r2,2050
 80021f8:	1080a204 	addi	r2,r2,648
 80021fc:	d8800015 	stw	r2,0(sp)
 8002200:	00800084 	movi	r2,2
 8002204:	d8800115 	stw	r2,4(sp)
 8002208:	00800044 	movi	r2,1
 800220c:	d8800215 	stw	r2,8(sp)
 8002210:	01009104 	movi	r4,580
 8002214:	01403b04 	movi	r5,236
 8002218:	000d883a 	mov	r6,zero
 800221c:	01c00304 	movi	r7,12
 8002220:	8000ac40 	call	8000ac4 <DrawString>

	DrawString(400, 40 * 7.75 - 14, BLACK, TEAL, "Door: ", 2, 1);
 8002224:	008200b4 	movhi	r2,2050
 8002228:	1080a404 	addi	r2,r2,656
 800222c:	d8800015 	stw	r2,0(sp)
 8002230:	00800084 	movi	r2,2
 8002234:	d8800115 	stw	r2,4(sp)
 8002238:	00800044 	movi	r2,1
 800223c:	d8800215 	stw	r2,8(sp)
 8002240:	01006404 	movi	r4,400
 8002244:	01404a04 	movi	r5,296
 8002248:	000d883a 	mov	r6,zero
 800224c:	01c00384 	movi	r7,14
 8002250:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(480, 560, 40 * 7.75 - 34, 40 * 8.75 - 24, CRIMSON);
 8002254:	008004c4 	movi	r2,19
 8002258:	d8800015 	stw	r2,0(sp)
 800225c:	01007804 	movi	r4,480
 8002260:	01408c04 	movi	r5,560
 8002264:	01804504 	movi	r6,276
 8002268:	01c05184 	movi	r7,326
 800226c:	80005940 	call	8000594 <DrawFillRect>
	DrawString(490, 40 * 7.75 - 14, BLACK, CRIMSON, "LOCK", 2, 1);
 8002270:	008200b4 	movhi	r2,2050
 8002274:	1080ab04 	addi	r2,r2,684
 8002278:	d8800015 	stw	r2,0(sp)
 800227c:	00800084 	movi	r2,2
 8002280:	d8800115 	stw	r2,4(sp)
 8002284:	00800044 	movi	r2,1
 8002288:	d8800215 	stw	r2,8(sp)
 800228c:	01007a84 	movi	r4,490
 8002290:	01404a04 	movi	r5,296
 8002294:	000d883a 	mov	r6,zero
 8002298:	01c004c4 	movi	r7,19
 800229c:	8000ac40 	call	8000ac4 <DrawString>
	DrawFillRect(570, 650, 40 * 7.75 - 34, 40 * 8.75 - 24, GREEN);
 80022a0:	00800304 	movi	r2,12
 80022a4:	d8800015 	stw	r2,0(sp)
 80022a8:	01008e84 	movi	r4,570
 80022ac:	0140a284 	movi	r5,650
 80022b0:	01804504 	movi	r6,276
 80022b4:	01c05184 	movi	r7,326
 80022b8:	80005940 	call	8000594 <DrawFillRect>
	DrawString(580, 40 * 7.75 - 14, BLACK, GREEN, "UNLOCK", 2, 1);
 80022bc:	008200b4 	movhi	r2,2050
 80022c0:	1080ad04 	addi	r2,r2,692
 80022c4:	d8800015 	stw	r2,0(sp)
 80022c8:	00800084 	movi	r2,2
 80022cc:	d8800115 	stw	r2,4(sp)
 80022d0:	00800044 	movi	r2,1
 80022d4:	d8800215 	stw	r2,8(sp)
 80022d8:	01009104 	movi	r4,580
 80022dc:	01404a04 	movi	r5,296
 80022e0:	000d883a 	mov	r6,zero
 80022e4:	01c00304 	movi	r7,12
 80022e8:	8000ac40 	call	8000ac4 <DrawString>

	if(temp>0){
 80022ec:	e0800317 	ldw	r2,12(fp)
 80022f0:	00801c0e 	bge	zero,r2,8002364 <InfoDisplay+0x5a8>
		DrawString(400,40*8.5+12,BLACK,TEAL,"Temperature:",2,1);
 80022f4:	008200b4 	movhi	r2,2050
 80022f8:	1080af04 	addi	r2,r2,700
 80022fc:	d8800015 	stw	r2,0(sp)
 8002300:	00800084 	movi	r2,2
 8002304:	d8800115 	stw	r2,4(sp)
 8002308:	00800044 	movi	r2,1
 800230c:	d8800215 	stw	r2,8(sp)
 8002310:	01006404 	movi	r4,400
 8002314:	01405804 	movi	r5,352
 8002318:	000d883a 	mov	r6,zero
 800231c:	01c00384 	movi	r7,14
 8002320:	8000ac40 	call	8000ac4 <DrawString>
		sprintf(roomDeetsString, "%d", temp);
 8002324:	e13ffb17 	ldw	r4,-20(fp)
 8002328:	014200b4 	movhi	r5,2050
 800232c:	2940b304 	addi	r5,r5,716
 8002330:	e1800317 	ldw	r6,12(fp)
 8002334:	80052840 	call	8005284 <sprintf>
		DrawString(530,40*8.5+12,BLACK,TEAL,roomDeetsString,2,1);
 8002338:	e0bffb17 	ldw	r2,-20(fp)
 800233c:	d8800015 	stw	r2,0(sp)
 8002340:	00800084 	movi	r2,2
 8002344:	d8800115 	stw	r2,4(sp)
 8002348:	00800044 	movi	r2,1
 800234c:	d8800215 	stw	r2,8(sp)
 8002350:	01008484 	movi	r4,530
 8002354:	01405804 	movi	r5,352
 8002358:	000d883a 	mov	r6,zero
 800235c:	01c00384 	movi	r7,14
 8002360:	8000ac40 	call	8000ac4 <DrawString>
	}


	if(auto_approve){
 8002364:	d0a6e017 	ldw	r2,-25728(gp)
 8002368:	10001426 	beq	r2,zero,80023bc <InfoDisplay+0x600>
		DrawFillRect(480,650,40*9.5,40*10.5,GREEN);
 800236c:	00800304 	movi	r2,12
 8002370:	d8800015 	stw	r2,0(sp)
 8002374:	01007804 	movi	r4,480
 8002378:	0140a284 	movi	r5,650
 800237c:	01805f04 	movi	r6,380
 8002380:	01c06904 	movi	r7,420
 8002384:	80005940 	call	8000594 <DrawFillRect>
		DrawString(505,40*9.5+12,BLACK,GREEN,"Auto-Approve",2,1);
 8002388:	008200b4 	movhi	r2,2050
 800238c:	1080b404 	addi	r2,r2,720
 8002390:	d8800015 	stw	r2,0(sp)
 8002394:	00800084 	movi	r2,2
 8002398:	d8800115 	stw	r2,4(sp)
 800239c:	00800044 	movi	r2,1
 80023a0:	d8800215 	stw	r2,8(sp)
 80023a4:	01007e44 	movi	r4,505
 80023a8:	01406204 	movi	r5,392
 80023ac:	000d883a 	mov	r6,zero
 80023b0:	01c00304 	movi	r7,12
 80023b4:	8000ac40 	call	8000ac4 <DrawString>
 80023b8:	00001306 	br	8002408 <InfoDisplay+0x64c>
	}
	else{
		DrawFillRect(480,650,40*9.5,40*10.5,CRIMSON);
 80023bc:	008004c4 	movi	r2,19
 80023c0:	d8800015 	stw	r2,0(sp)
 80023c4:	01007804 	movi	r4,480
 80023c8:	0140a284 	movi	r5,650
 80023cc:	01805f04 	movi	r6,380
 80023d0:	01c06904 	movi	r7,420
 80023d4:	80005940 	call	8000594 <DrawFillRect>
		DrawString(505,40*9.5+12,BLACK,CRIMSON,"Auto-Approve",2,1);
 80023d8:	008200b4 	movhi	r2,2050
 80023dc:	1080b404 	addi	r2,r2,720
 80023e0:	d8800015 	stw	r2,0(sp)
 80023e4:	00800084 	movi	r2,2
 80023e8:	d8800115 	stw	r2,4(sp)
 80023ec:	00800044 	movi	r2,1
 80023f0:	d8800215 	stw	r2,8(sp)
 80023f4:	01007e44 	movi	r4,505
 80023f8:	01406204 	movi	r5,392
 80023fc:	000d883a 	mov	r6,zero
 8002400:	01c004c4 	movi	r7,19
 8002404:	8000ac40 	call	8000ac4 <DrawString>
	}

}
 8002408:	e037883a 	mov	sp,fp
 800240c:	dfc00117 	ldw	ra,4(sp)
 8002410:	df000017 	ldw	fp,0(sp)
 8002414:	dec00204 	addi	sp,sp,8
 8002418:	f800283a 	ret

0800241c <RequestCloseDisplay>:

void RequestCloseDisplay(int room_num) {
 800241c:	defffc04 	addi	sp,sp,-16
 8002420:	dfc00315 	stw	ra,12(sp)
 8002424:	df000215 	stw	fp,8(sp)
 8002428:	df000204 	addi	fp,sp,8
 800242c:	e13fff15 	stw	r4,-4(fp)

	DrawFillRect(315, 335, 40 * room_num + 10, 40 * (room_num + 1) - 10, RED);
 8002430:	e0bfff17 	ldw	r2,-4(fp)
 8002434:	10800a24 	muli	r2,r2,40
 8002438:	11800284 	addi	r6,r2,10
 800243c:	e0bfff17 	ldw	r2,-4(fp)
 8002440:	10800044 	addi	r2,r2,1
 8002444:	10800a24 	muli	r2,r2,40
 8002448:	10fffd84 	addi	r3,r2,-10
 800244c:	00800084 	movi	r2,2
 8002450:	d8800015 	stw	r2,0(sp)
 8002454:	01004ec4 	movi	r4,315
 8002458:	014053c4 	movi	r5,335
 800245c:	180f883a 	mov	r7,r3
 8002460:	80005940 	call	8000594 <DrawFillRect>
	return;
 8002464:	0001883a 	nop

}
 8002468:	e037883a 	mov	sp,fp
 800246c:	dfc00117 	ldw	ra,4(sp)
 8002470:	df000017 	ldw	fp,0(sp)
 8002474:	dec00204 	addi	sp,sp,8
 8002478:	f800283a 	ret

0800247c <RequestOpenDisplay>:

void RequestOpenDisplay(int room_num) {
 800247c:	defffc04 	addi	sp,sp,-16
 8002480:	dfc00315 	stw	ra,12(sp)
 8002484:	df000215 	stw	fp,8(sp)
 8002488:	df000204 	addi	fp,sp,8
 800248c:	e13fff15 	stw	r4,-4(fp)

	DrawFillRect(315, 335, 40 * room_num + 10, 40 * (room_num + 1) - 10, GREEN);
 8002490:	e0bfff17 	ldw	r2,-4(fp)
 8002494:	10800a24 	muli	r2,r2,40
 8002498:	11800284 	addi	r6,r2,10
 800249c:	e0bfff17 	ldw	r2,-4(fp)
 80024a0:	10800044 	addi	r2,r2,1
 80024a4:	10800a24 	muli	r2,r2,40
 80024a8:	10fffd84 	addi	r3,r2,-10
 80024ac:	00800304 	movi	r2,12
 80024b0:	d8800015 	stw	r2,0(sp)
 80024b4:	01004ec4 	movi	r4,315
 80024b8:	014053c4 	movi	r5,335
 80024bc:	180f883a 	mov	r7,r3
 80024c0:	80005940 	call	8000594 <DrawFillRect>
	return;
 80024c4:	0001883a 	nop

}
 80024c8:	e037883a 	mov	sp,fp
 80024cc:	dfc00117 	ldw	ra,4(sp)
 80024d0:	df000017 	ldw	fp,0(sp)
 80024d4:	dec00204 	addi	sp,sp,8
 80024d8:	f800283a 	ret

080024dc <BaseChoice>:

int BaseChoice(void) {
 80024dc:	defffc04 	addi	sp,sp,-16
 80024e0:	dfc00315 	stw	ra,12(sp)
 80024e4:	df000215 	stw	fp,8(sp)
 80024e8:	df000204 	addi	fp,sp,8
	Point p1;
	while (1) {
		printf("Base Choice\n");
 80024ec:	010200b4 	movhi	r4,2050
 80024f0:	2100b804 	addi	r4,r4,736
 80024f4:	80051c40 	call	80051c4 <puts>
		p1 = GetBasePress();
 80024f8:	8000fc40 	call	8000fc4 <GetBasePress>
 80024fc:	1009883a 	mov	r4,r2
 8002500:	180b883a 	mov	r5,r3
 8002504:	e13ffe15 	stw	r4,-8(fp)
 8002508:	e17fff15 	stw	r5,-4(fp)
		if (p1.x >= 100 && p1.x <= 300 && p1.y >= 40 && p1.y <= 440) {
 800250c:	e0bffe17 	ldw	r2,-8(fp)
 8002510:	10801910 	cmplti	r2,r2,100
 8002514:	1000201e 	bne	r2,zero,8002598 <BaseChoice+0xbc>
 8002518:	e0bffe17 	ldw	r2,-8(fp)
 800251c:	10804b48 	cmpgei	r2,r2,301
 8002520:	10001d1e 	bne	r2,zero,8002598 <BaseChoice+0xbc>
 8002524:	e0bfff17 	ldw	r2,-4(fp)
 8002528:	10800a10 	cmplti	r2,r2,40
 800252c:	10001a1e 	bne	r2,zero,8002598 <BaseChoice+0xbc>
 8002530:	e0bfff17 	ldw	r2,-4(fp)
 8002534:	10806e48 	cmpgei	r2,r2,441
 8002538:	1000171e 	bne	r2,zero,8002598 <BaseChoice+0xbc>
			printf("Chose room# %d\n", p1.y / 40);
 800253c:	e0ffff17 	ldw	r3,-4(fp)
 8002540:	00800a04 	movi	r2,40
 8002544:	1885283a 	div	r2,r3,r2
 8002548:	010200b4 	movhi	r4,2050
 800254c:	2100bb04 	addi	r4,r4,748
 8002550:	100b883a 	mov	r5,r2
 8002554:	80050b00 	call	80050b0 <printf>
			return floor(p1.y / 40);
 8002558:	e0ffff17 	ldw	r3,-4(fp)
 800255c:	00800a04 	movi	r2,40
 8002560:	1885283a 	div	r2,r3,r2
 8002564:	1009883a 	mov	r4,r2
 8002568:	80047340 	call	8004734 <__floatsidf>
 800256c:	100b883a 	mov	r5,r2
 8002570:	180d883a 	mov	r6,r3
 8002574:	2809883a 	mov	r4,r5
 8002578:	300b883a 	mov	r5,r6
 800257c:	80033380 	call	8003338 <floor>
 8002580:	100b883a 	mov	r5,r2
 8002584:	180d883a 	mov	r6,r3
 8002588:	2809883a 	mov	r4,r5
 800258c:	300b883a 	mov	r5,r6
 8002590:	80046ac0 	call	80046ac <__fixdfsi>
 8002594:	00000106 	br	800259c <BaseChoice+0xc0>
		}
	}
 8002598:	003fd406 	br	80024ec <__alt_data_end+0xfc0024ec>
	return -1;
}
 800259c:	e037883a 	mov	sp,fp
 80025a0:	dfc00117 	ldw	ra,4(sp)
 80025a4:	df000017 	ldw	fp,0(sp)
 80025a8:	dec00204 	addi	sp,sp,8
 80025ac:	f800283a 	ret

080025b0 <waitForInterrupt>:

char waitForInterrupt (void){
 80025b0:	defffd04 	addi	sp,sp,-12
 80025b4:	dfc00215 	stw	ra,8(sp)
 80025b8:	df000115 	stw	fp,4(sp)
 80025bc:	df000104 	addi	fp,sp,4
	char received_data;
	while(!ScreenTouched()){
 80025c0:	00001006 	br	8002604 <waitForInterrupt+0x54>
		if(RS232TestForReceivedData()){
 80025c4:	800118c0 	call	800118c <RS232TestForReceivedData>
 80025c8:	10000e26 	beq	r2,zero,8002604 <waitForInterrupt+0x54>
			delay_double(0.1);
 80025cc:	012666b4 	movhi	r4,39322
 80025d0:	21266684 	addi	r4,r4,-26214
 80025d4:	014feeb4 	movhi	r5,16314
 80025d8:	29666644 	addi	r5,r5,-26215
 80025dc:	8001c340 	call	8001c34 <delay_double>
			received_data = getcharRS232();
 80025e0:	80011340 	call	8001134 <getcharRS232>
 80025e4:	e0bfff05 	stb	r2,-4(fp)
			printf("Received: %c\n", received_data);
 80025e8:	e0bfff07 	ldb	r2,-4(fp)
 80025ec:	010200b4 	movhi	r4,2050
 80025f0:	2100bf04 	addi	r4,r4,764
 80025f4:	100b883a 	mov	r5,r2
 80025f8:	80050b00 	call	80050b0 <printf>
			return received_data;
 80025fc:	e0bfff03 	ldbu	r2,-4(fp)
 8002600:	00000306 	br	8002610 <waitForInterrupt+0x60>
	return -1;
}

char waitForInterrupt (void){
	char received_data;
	while(!ScreenTouched()){
 8002604:	8000d180 	call	8000d18 <ScreenTouched>
 8002608:	103fee26 	beq	r2,zero,80025c4 <__alt_data_end+0xfc0025c4>
			received_data = getcharRS232();
			printf("Received: %c\n", received_data);
			return received_data;
		}
	}
	return 0;
 800260c:	0005883a 	mov	r2,zero
}
 8002610:	e037883a 	mov	sp,fp
 8002614:	dfc00117 	ldw	ra,4(sp)
 8002618:	df000017 	ldw	fp,0(sp)
 800261c:	dec00204 	addi	sp,sp,8
 8002620:	f800283a 	ret

08002624 <InfoSelect>:

int InfoSelect (Point p1){
 8002624:	defffc04 	addi	sp,sp,-16
 8002628:	dfc00315 	stw	ra,12(sp)
 800262c:	df000215 	stw	fp,8(sp)
 8002630:	df000204 	addi	fp,sp,8
 8002634:	e13ffe15 	stw	r4,-8(fp)
 8002638:	e17fff15 	stw	r5,-4(fp)
	if (p1.x >= 100 && p1.x <= 300 && p1.y >= 40 && p1.y <= 440) {
 800263c:	e0bffe17 	ldw	r2,-8(fp)
 8002640:	10801910 	cmplti	r2,r2,100
 8002644:	1000211e 	bne	r2,zero,80026cc <InfoSelect+0xa8>
 8002648:	e0bffe17 	ldw	r2,-8(fp)
 800264c:	10804b48 	cmpgei	r2,r2,301
 8002650:	10001e1e 	bne	r2,zero,80026cc <InfoSelect+0xa8>
 8002654:	e0bfff17 	ldw	r2,-4(fp)
 8002658:	10800a10 	cmplti	r2,r2,40
 800265c:	10001b1e 	bne	r2,zero,80026cc <InfoSelect+0xa8>
 8002660:	e0bfff17 	ldw	r2,-4(fp)
 8002664:	10806e48 	cmpgei	r2,r2,441
 8002668:	1000181e 	bne	r2,zero,80026cc <InfoSelect+0xa8>
		printf("Chose room# %d\n", (p1.y) / 40);
 800266c:	e0ffff17 	ldw	r3,-4(fp)
 8002670:	00800a04 	movi	r2,40
 8002674:	1885283a 	div	r2,r3,r2
 8002678:	010200b4 	movhi	r4,2050
 800267c:	2100bb04 	addi	r4,r4,748
 8002680:	100b883a 	mov	r5,r2
 8002684:	80050b00 	call	80050b0 <printf>
		return floor((p1.y - 10) / 40);
 8002688:	e0bfff17 	ldw	r2,-4(fp)
 800268c:	10fffd84 	addi	r3,r2,-10
 8002690:	00800a04 	movi	r2,40
 8002694:	1885283a 	div	r2,r3,r2
 8002698:	1009883a 	mov	r4,r2
 800269c:	80047340 	call	8004734 <__floatsidf>
 80026a0:	100b883a 	mov	r5,r2
 80026a4:	180d883a 	mov	r6,r3
 80026a8:	2809883a 	mov	r4,r5
 80026ac:	300b883a 	mov	r5,r6
 80026b0:	80033380 	call	8003338 <floor>
 80026b4:	100b883a 	mov	r5,r2
 80026b8:	180d883a 	mov	r6,r3
 80026bc:	2809883a 	mov	r4,r5
 80026c0:	300b883a 	mov	r5,r6
 80026c4:	80046ac0 	call	80046ac <__fixdfsi>
 80026c8:	00009c06 	br	800293c <InfoSelect+0x318>
	} else if (p1.x >= 480 && p1.x <= 560 && p1.y <= 40 * 7.25 - 24
 80026cc:	e0bffe17 	ldw	r2,-8(fp)
 80026d0:	10807810 	cmplti	r2,r2,480
 80026d4:	10001f1e 	bne	r2,zero,8002754 <InfoSelect+0x130>
 80026d8:	e0bffe17 	ldw	r2,-8(fp)
 80026dc:	10808c48 	cmpgei	r2,r2,561
 80026e0:	10001c1e 	bne	r2,zero,8002754 <InfoSelect+0x130>
 80026e4:	e0bfff17 	ldw	r2,-4(fp)
 80026e8:	1009883a 	mov	r4,r2
 80026ec:	80047340 	call	8004734 <__floatsidf>
 80026f0:	100b883a 	mov	r5,r2
 80026f4:	180d883a 	mov	r6,r3
 80026f8:	2809883a 	mov	r4,r5
 80026fc:	300b883a 	mov	r5,r6
 8002700:	000d883a 	mov	r6,zero
 8002704:	01d01c74 	movhi	r7,16497
 8002708:	39e80004 	addi	r7,r7,-24576
 800270c:	8003ea80 	call	8003ea8 <__ledf2>
 8002710:	00801016 	blt	zero,r2,8002754 <InfoSelect+0x130>
			&& p1.y >= 40 * 6.25 - 34) {
 8002714:	e0bfff17 	ldw	r2,-4(fp)
 8002718:	1009883a 	mov	r4,r2
 800271c:	80047340 	call	8004734 <__floatsidf>
 8002720:	100b883a 	mov	r5,r2
 8002724:	180d883a 	mov	r6,r3
 8002728:	2809883a 	mov	r4,r5
 800272c:	300b883a 	mov	r5,r6
 8002730:	000d883a 	mov	r6,zero
 8002734:	01d01af4 	movhi	r7,16491
 8002738:	8003dc80 	call	8003dc8 <__gedf2>
 800273c:	10000516 	blt	r2,zero,8002754 <InfoSelect+0x130>
		//Lights off Function
		printf("Turning Lights Off\n");
 8002740:	010200b4 	movhi	r4,2050
 8002744:	2100c304 	addi	r4,r4,780
 8002748:	80051c40 	call	80051c4 <puts>
		return LIGHTS_OFF;
 800274c:	008002c4 	movi	r2,11
 8002750:	00007a06 	br	800293c <InfoSelect+0x318>
	} else if (p1.x >= 570 && p1.x <= 650 && p1.y <= 40 * 7.25 - 24
 8002754:	e0bffe17 	ldw	r2,-8(fp)
 8002758:	10808e90 	cmplti	r2,r2,570
 800275c:	10001f1e 	bne	r2,zero,80027dc <InfoSelect+0x1b8>
 8002760:	e0bffe17 	ldw	r2,-8(fp)
 8002764:	1080a2c8 	cmpgei	r2,r2,651
 8002768:	10001c1e 	bne	r2,zero,80027dc <InfoSelect+0x1b8>
 800276c:	e0bfff17 	ldw	r2,-4(fp)
 8002770:	1009883a 	mov	r4,r2
 8002774:	80047340 	call	8004734 <__floatsidf>
 8002778:	100b883a 	mov	r5,r2
 800277c:	180d883a 	mov	r6,r3
 8002780:	2809883a 	mov	r4,r5
 8002784:	300b883a 	mov	r5,r6
 8002788:	000d883a 	mov	r6,zero
 800278c:	01d01c74 	movhi	r7,16497
 8002790:	39e80004 	addi	r7,r7,-24576
 8002794:	8003ea80 	call	8003ea8 <__ledf2>
 8002798:	00801016 	blt	zero,r2,80027dc <InfoSelect+0x1b8>
			&& p1.y >= 40 * 6.25 - 34) {
 800279c:	e0bfff17 	ldw	r2,-4(fp)
 80027a0:	1009883a 	mov	r4,r2
 80027a4:	80047340 	call	8004734 <__floatsidf>
 80027a8:	100b883a 	mov	r5,r2
 80027ac:	180d883a 	mov	r6,r3
 80027b0:	2809883a 	mov	r4,r5
 80027b4:	300b883a 	mov	r5,r6
 80027b8:	000d883a 	mov	r6,zero
 80027bc:	01d01af4 	movhi	r7,16491
 80027c0:	8003dc80 	call	8003dc8 <__gedf2>
 80027c4:	10000516 	blt	r2,zero,80027dc <InfoSelect+0x1b8>
		//Lights on function
		printf("Turning Lights On\n");
 80027c8:	010200b4 	movhi	r4,2050
 80027cc:	2100c804 	addi	r4,r4,800
 80027d0:	80051c40 	call	80051c4 <puts>
		return LIGHTS_ON;
 80027d4:	00800304 	movi	r2,12
 80027d8:	00005806 	br	800293c <InfoSelect+0x318>
	} else if (p1.x >= 480 && p1.x <= 560 && p1.y <= 40 * 8.75 - 24
 80027dc:	e0bffe17 	ldw	r2,-8(fp)
 80027e0:	10807810 	cmplti	r2,r2,480
 80027e4:	1000201e 	bne	r2,zero,8002868 <InfoSelect+0x244>
 80027e8:	e0bffe17 	ldw	r2,-8(fp)
 80027ec:	10808c48 	cmpgei	r2,r2,561
 80027f0:	10001d1e 	bne	r2,zero,8002868 <InfoSelect+0x244>
 80027f4:	e0bfff17 	ldw	r2,-4(fp)
 80027f8:	1009883a 	mov	r4,r2
 80027fc:	80047340 	call	8004734 <__floatsidf>
 8002800:	100b883a 	mov	r5,r2
 8002804:	180d883a 	mov	r6,r3
 8002808:	2809883a 	mov	r4,r5
 800280c:	300b883a 	mov	r5,r6
 8002810:	000d883a 	mov	r6,zero
 8002814:	01d01d34 	movhi	r7,16500
 8002818:	39d80004 	addi	r7,r7,24576
 800281c:	8003ea80 	call	8003ea8 <__ledf2>
 8002820:	00801116 	blt	zero,r2,8002868 <InfoSelect+0x244>
			&& p1.y >= 40 * 7.75 - 34) {
 8002824:	e0bfff17 	ldw	r2,-4(fp)
 8002828:	1009883a 	mov	r4,r2
 800282c:	80047340 	call	8004734 <__floatsidf>
 8002830:	100b883a 	mov	r5,r2
 8002834:	180d883a 	mov	r6,r3
 8002838:	2809883a 	mov	r4,r5
 800283c:	300b883a 	mov	r5,r6
 8002840:	000d883a 	mov	r6,zero
 8002844:	01d01c74 	movhi	r7,16497
 8002848:	39d00004 	addi	r7,r7,16384
 800284c:	8003dc80 	call	8003dc8 <__gedf2>
 8002850:	10000516 	blt	r2,zero,8002868 <InfoSelect+0x244>
		//Door lock Function
		printf("Locking Door\n");
 8002854:	010200b4 	movhi	r4,2050
 8002858:	2100cd04 	addi	r4,r4,820
 800285c:	80051c40 	call	80051c4 <puts>
		return LOCK_DOOR;
 8002860:	00800344 	movi	r2,13
 8002864:	00003506 	br	800293c <InfoSelect+0x318>
	} else if (p1.x >= 570 && p1.x <= 650 && p1.y <= 40 * 8.75 - 24
 8002868:	e0bffe17 	ldw	r2,-8(fp)
 800286c:	10808e90 	cmplti	r2,r2,570
 8002870:	1000201e 	bne	r2,zero,80028f4 <InfoSelect+0x2d0>
 8002874:	e0bffe17 	ldw	r2,-8(fp)
 8002878:	1080a2c8 	cmpgei	r2,r2,651
 800287c:	10001d1e 	bne	r2,zero,80028f4 <InfoSelect+0x2d0>
 8002880:	e0bfff17 	ldw	r2,-4(fp)
 8002884:	1009883a 	mov	r4,r2
 8002888:	80047340 	call	8004734 <__floatsidf>
 800288c:	100b883a 	mov	r5,r2
 8002890:	180d883a 	mov	r6,r3
 8002894:	2809883a 	mov	r4,r5
 8002898:	300b883a 	mov	r5,r6
 800289c:	000d883a 	mov	r6,zero
 80028a0:	01d01d34 	movhi	r7,16500
 80028a4:	39d80004 	addi	r7,r7,24576
 80028a8:	8003ea80 	call	8003ea8 <__ledf2>
 80028ac:	00801116 	blt	zero,r2,80028f4 <InfoSelect+0x2d0>
			&& p1.y >= 40 * 7.75 - 34) {
 80028b0:	e0bfff17 	ldw	r2,-4(fp)
 80028b4:	1009883a 	mov	r4,r2
 80028b8:	80047340 	call	8004734 <__floatsidf>
 80028bc:	100b883a 	mov	r5,r2
 80028c0:	180d883a 	mov	r6,r3
 80028c4:	2809883a 	mov	r4,r5
 80028c8:	300b883a 	mov	r5,r6
 80028cc:	000d883a 	mov	r6,zero
 80028d0:	01d01c74 	movhi	r7,16497
 80028d4:	39d00004 	addi	r7,r7,16384
 80028d8:	8003dc80 	call	8003dc8 <__gedf2>
 80028dc:	10000516 	blt	r2,zero,80028f4 <InfoSelect+0x2d0>
		//Door unlock function
		printf("Unlocking door\n");
 80028e0:	010200b4 	movhi	r4,2050
 80028e4:	2100d104 	addi	r4,r4,836
 80028e8:	80051c40 	call	80051c4 <puts>
		return UNLOCK_DOOR;
 80028ec:	00800384 	movi	r2,14
 80028f0:	00001206 	br	800293c <InfoSelect+0x318>
	}
	else if (p1.x>=480 && p1.x<=650 && p1.y >= 40*9 && p1.y <= 40*10){
 80028f4:	e0bffe17 	ldw	r2,-8(fp)
 80028f8:	10807810 	cmplti	r2,r2,480
 80028fc:	10000e1e 	bne	r2,zero,8002938 <InfoSelect+0x314>
 8002900:	e0bffe17 	ldw	r2,-8(fp)
 8002904:	1080a2c8 	cmpgei	r2,r2,651
 8002908:	10000b1e 	bne	r2,zero,8002938 <InfoSelect+0x314>
 800290c:	e0bfff17 	ldw	r2,-4(fp)
 8002910:	10805a10 	cmplti	r2,r2,360
 8002914:	1000081e 	bne	r2,zero,8002938 <InfoSelect+0x314>
 8002918:	e0bfff17 	ldw	r2,-4(fp)
 800291c:	10806448 	cmpgei	r2,r2,401
 8002920:	1000051e 	bne	r2,zero,8002938 <InfoSelect+0x314>
		printf("Toggle Auto Approve\n");
 8002924:	010200b4 	movhi	r4,2050
 8002928:	2100d504 	addi	r4,r4,852
 800292c:	80051c40 	call	80051c4 <puts>
		return AUTO_APPROVE;
 8002930:	008003c4 	movi	r2,15
 8002934:	00000106 	br	800293c <InfoSelect+0x318>
	}
	return 0;
 8002938:	0005883a 	mov	r2,zero
}
 800293c:	e037883a 	mov	sp,fp
 8002940:	dfc00117 	ldw	ra,4(sp)
 8002944:	df000017 	ldw	fp,0(sp)
 8002948:	dec00204 	addi	sp,sp,8
 800294c:	f800283a 	ret

08002950 <InfoChoice>:

int InfoChoice( int curr_room_num) {
 8002950:	defff704 	addi	sp,sp,-36
 8002954:	dfc00815 	stw	ra,32(sp)
 8002958:	df000715 	stw	fp,28(sp)
 800295c:	dc000615 	stw	r16,24(sp)
 8002960:	df000704 	addi	fp,sp,28
 8002964:	e13ffe15 	stw	r4,-8(fp)
	Point p1;
	char command;
	int ret;
	char *message = (char*)malloc(1000 * sizeof(char));
 8002968:	0100fa04 	movi	r4,1000
 800296c:	80048b40 	call	80048b4 <malloc>
 8002970:	e0bff915 	stw	r2,-28(fp)
	while (1) {
		printf("Info Choice\n");
 8002974:	010200b4 	movhi	r4,2050
 8002978:	2100da04 	addi	r4,r4,872
 800297c:	80051c40 	call	80051c4 <puts>
		//p1 = GetPress();
		command = waitForInterrupt();
 8002980:	80025b00 	call	80025b0 <waitForInterrupt>
 8002984:	e0bffa05 	stb	r2,-24(fp)
		if(command==0){
 8002988:	e0bffa07 	ldb	r2,-24(fp)
 800298c:	10000d1e 	bne	r2,zero,80029c4 <InfoChoice+0x74>
			p1 = GetBasePress();
 8002990:	8000fc40 	call	8000fc4 <GetBasePress>
 8002994:	1009883a 	mov	r4,r2
 8002998:	180b883a 	mov	r5,r3
 800299c:	e13ffc15 	stw	r4,-16(fp)
 80029a0:	e17ffd15 	stw	r5,-12(fp)
			ret = InfoSelect(p1);
 80029a4:	e13ffc17 	ldw	r4,-16(fp)
 80029a8:	e17ffd17 	ldw	r5,-12(fp)
 80029ac:	80026240 	call	8002624 <InfoSelect>
 80029b0:	e0bffb15 	stw	r2,-20(fp)
			if(ret)return ret;
 80029b4:	e0bffb17 	ldw	r2,-20(fp)
 80029b8:	10004026 	beq	r2,zero,8002abc <InfoChoice+0x16c>
 80029bc:	e0bffb17 	ldw	r2,-20(fp)
 80029c0:	00003f06 	br	8002ac0 <InfoChoice+0x170>
		}
		else if(command=='t'){
 80029c4:	e0bffa07 	ldb	r2,-24(fp)
 80029c8:	10801d18 	cmpnei	r2,r2,116
 80029cc:	10000b1e 	bne	r2,zero,80029fc <InfoChoice+0xac>
			//TempReadingFunction
			roomArray[curr_room_num-1].temp = GetTemp();
 80029d0:	e0bffe17 	ldw	r2,-8(fp)
 80029d4:	143fffc4 	addi	r16,r2,-1
 80029d8:	80012e40 	call	80012e4 <GetTemp>
 80029dc:	1009883a 	mov	r4,r2
 80029e0:	008200b4 	movhi	r2,2050
 80029e4:	108f8104 	addi	r2,r2,15876
 80029e8:	80c00624 	muli	r3,r16,24
 80029ec:	10c5883a 	add	r2,r2,r3
 80029f0:	11000015 	stw	r4,0(r2)
			return 99;
 80029f4:	008018c4 	movi	r2,99
 80029f8:	00003106 	br	8002ac0 <InfoChoice+0x170>
		}
		else if (command=='3'){
 80029fc:	e0bffa07 	ldb	r2,-24(fp)
 8002a00:	10800cd8 	cmpnei	r2,r2,51
 8002a04:	10002d1e 	bne	r2,zero,8002abc <InfoChoice+0x16c>
			roomArray[curr_room_num-1].requested = 1;
 8002a08:	e0bffe17 	ldw	r2,-8(fp)
 8002a0c:	10ffffc4 	addi	r3,r2,-1
 8002a10:	008200b4 	movhi	r2,2050
 8002a14:	108f8104 	addi	r2,r2,15876
 8002a18:	18c00624 	muli	r3,r3,24
 8002a1c:	10c5883a 	add	r2,r2,r3
 8002a20:	10800304 	addi	r2,r2,12
 8002a24:	00c00044 	movi	r3,1
 8002a28:	10c00015 	stw	r3,0(r2)
			sprintf(message, "send_sms(\"The room requested: %d\")", curr_room_num);
 8002a2c:	e13ff917 	ldw	r4,-28(fp)
 8002a30:	014200b4 	movhi	r5,2050
 8002a34:	2940dd04 	addi	r5,r5,884
 8002a38:	e1bffe17 	ldw	r6,-8(fp)
 8002a3c:	80052840 	call	8005284 <sprintf>
			Wifi_Send_Sms(message);
 8002a40:	e13ff917 	ldw	r4,-28(fp)
 8002a44:	8001b780 	call	8001b78 <Wifi_Send_Sms>
			if(auto_approve && roomArray[curr_room_num-1].in_use == 0){
 8002a48:	d0a6e017 	ldw	r2,-25728(gp)
 8002a4c:	10000b26 	beq	r2,zero,8002a7c <InfoChoice+0x12c>
 8002a50:	e0bffe17 	ldw	r2,-8(fp)
 8002a54:	10ffffc4 	addi	r3,r2,-1
 8002a58:	008200b4 	movhi	r2,2050
 8002a5c:	108f8104 	addi	r2,r2,15876
 8002a60:	18c00624 	muli	r3,r3,24
 8002a64:	10c5883a 	add	r2,r2,r3
 8002a68:	10800404 	addi	r2,r2,16
 8002a6c:	10800017 	ldw	r2,0(r2)
 8002a70:	1000021e 	bne	r2,zero,8002a7c <InfoChoice+0x12c>
				return UNLOCK_DOOR;
 8002a74:	00800384 	movi	r2,14
 8002a78:	00001106 	br	8002ac0 <InfoChoice+0x170>
			}
			else if(auto_approve && roomArray[curr_room_num-1].in_use == 1){
 8002a7c:	d0a6e017 	ldw	r2,-25728(gp)
 8002a80:	10000c26 	beq	r2,zero,8002ab4 <InfoChoice+0x164>
 8002a84:	e0bffe17 	ldw	r2,-8(fp)
 8002a88:	10ffffc4 	addi	r3,r2,-1
 8002a8c:	008200b4 	movhi	r2,2050
 8002a90:	108f8104 	addi	r2,r2,15876
 8002a94:	18c00624 	muli	r3,r3,24
 8002a98:	10c5883a 	add	r2,r2,r3
 8002a9c:	10800404 	addi	r2,r2,16
 8002aa0:	10800017 	ldw	r2,0(r2)
 8002aa4:	10800058 	cmpnei	r2,r2,1
 8002aa8:	1000021e 	bne	r2,zero,8002ab4 <InfoChoice+0x164>
				return LOCK_DOOR;
 8002aac:	00800344 	movi	r2,13
 8002ab0:	00000306 	br	8002ac0 <InfoChoice+0x170>
			}
			return 99;
 8002ab4:	008018c4 	movi	r2,99
 8002ab8:	00000106 	br	8002ac0 <InfoChoice+0x170>
		}

	}
 8002abc:	003fad06 	br	8002974 <__alt_data_end+0xfc002974>
	return -1;
}
 8002ac0:	e6ffff04 	addi	sp,fp,-4
 8002ac4:	dfc00217 	ldw	ra,8(sp)
 8002ac8:	df000117 	ldw	fp,4(sp)
 8002acc:	dc000017 	ldw	r16,0(sp)
 8002ad0:	dec00304 	addi	sp,sp,12
 8002ad4:	f800283a 	ret

08002ad8 <PrintNumbers>:

void PrintNumbers(int room_num) {
 8002ad8:	defff804 	addi	sp,sp,-32
 8002adc:	dfc00715 	stw	ra,28(sp)
 8002ae0:	df000615 	stw	fp,24(sp)
 8002ae4:	df000604 	addi	fp,sp,24
 8002ae8:	e13fff15 	stw	r4,-4(fp)
	int j;
	char* roomString = NULL;
 8002aec:	e03ffe15 	stw	zero,-8(fp)
	for (j = 1; j <= 10; j++) {
 8002af0:	00800044 	movi	r2,1
 8002af4:	e0bffd15 	stw	r2,-12(fp)
 8002af8:	00002806 	br	8002b9c <PrintNumbers+0xc4>
		sprintf(roomString, "Room %d", j);
 8002afc:	e13ffe17 	ldw	r4,-8(fp)
 8002b00:	014200b4 	movhi	r5,2050
 8002b04:	29408a04 	addi	r5,r5,552
 8002b08:	e1bffd17 	ldw	r6,-12(fp)
 8002b0c:	80052840 	call	8005284 <sprintf>
		if (j == room_num) {
 8002b10:	e0fffd17 	ldw	r3,-12(fp)
 8002b14:	e0bfff17 	ldw	r2,-4(fp)
 8002b18:	18800f1e 	bne	r3,r2,8002b58 <PrintNumbers+0x80>
			DrawString(105, 40 * j + 40 / 4, BLACK, NAVY, roomString, 2, 1);
 8002b1c:	e0bffd17 	ldw	r2,-12(fp)
 8002b20:	10800a24 	muli	r2,r2,40
 8002b24:	10c00284 	addi	r3,r2,10
 8002b28:	e0bffe17 	ldw	r2,-8(fp)
 8002b2c:	d8800015 	stw	r2,0(sp)
 8002b30:	00800084 	movi	r2,2
 8002b34:	d8800115 	stw	r2,4(sp)
 8002b38:	00800044 	movi	r2,1
 8002b3c:	d8800215 	stw	r2,8(sp)
 8002b40:	01001a44 	movi	r4,105
 8002b44:	180b883a 	mov	r5,r3
 8002b48:	000d883a 	mov	r6,zero
 8002b4c:	01c003c4 	movi	r7,15
 8002b50:	8000ac40 	call	8000ac4 <DrawString>
 8002b54:	00000e06 	br	8002b90 <PrintNumbers+0xb8>

		} else {
			DrawString(105, 40 * j + 40 / 4, BLACK, TEAL, roomString, 2, 1);
 8002b58:	e0bffd17 	ldw	r2,-12(fp)
 8002b5c:	10800a24 	muli	r2,r2,40
 8002b60:	10c00284 	addi	r3,r2,10
 8002b64:	e0bffe17 	ldw	r2,-8(fp)
 8002b68:	d8800015 	stw	r2,0(sp)
 8002b6c:	00800084 	movi	r2,2
 8002b70:	d8800115 	stw	r2,4(sp)
 8002b74:	00800044 	movi	r2,1
 8002b78:	d8800215 	stw	r2,8(sp)
 8002b7c:	01001a44 	movi	r4,105
 8002b80:	180b883a 	mov	r5,r3
 8002b84:	000d883a 	mov	r6,zero
 8002b88:	01c00384 	movi	r7,14
 8002b8c:	8000ac40 	call	8000ac4 <DrawString>
}

void PrintNumbers(int room_num) {
	int j;
	char* roomString = NULL;
	for (j = 1; j <= 10; j++) {
 8002b90:	e0bffd17 	ldw	r2,-12(fp)
 8002b94:	10800044 	addi	r2,r2,1
 8002b98:	e0bffd15 	stw	r2,-12(fp)
 8002b9c:	e0bffd17 	ldw	r2,-12(fp)
 8002ba0:	108002d0 	cmplti	r2,r2,11
 8002ba4:	103fd51e 	bne	r2,zero,8002afc <__alt_data_end+0xfc002afc>

		} else {
			DrawString(105, 40 * j + 40 / 4, BLACK, TEAL, roomString, 2, 1);
		}
	}
}
 8002ba8:	e037883a 	mov	sp,fp
 8002bac:	dfc00117 	ldw	ra,4(sp)
 8002bb0:	df000017 	ldw	fp,0(sp)
 8002bb4:	dec00204 	addi	sp,sp,8
 8002bb8:	f800283a 	ret

08002bbc <InitRoomArray>:

void InitRoomArray(void){
 8002bbc:	defffe04 	addi	sp,sp,-8
 8002bc0:	df000115 	stw	fp,4(sp)
 8002bc4:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < 10; i++) {
 8002bc8:	e03fff15 	stw	zero,-4(fp)
 8002bcc:	00002c06 	br	8002c80 <InitRoomArray+0xc4>
		roomArray[i].lights = 0;
 8002bd0:	008200b4 	movhi	r2,2050
 8002bd4:	108f8104 	addi	r2,r2,15876
 8002bd8:	e0ffff17 	ldw	r3,-4(fp)
 8002bdc:	18c00624 	muli	r3,r3,24
 8002be0:	10c5883a 	add	r2,r2,r3
 8002be4:	10800104 	addi	r2,r2,4
 8002be8:	10000015 	stw	zero,0(r2)
		roomArray[i].door = 0;
 8002bec:	008200b4 	movhi	r2,2050
 8002bf0:	108f8104 	addi	r2,r2,15876
 8002bf4:	e0ffff17 	ldw	r3,-4(fp)
 8002bf8:	18c00624 	muli	r3,r3,24
 8002bfc:	10c5883a 	add	r2,r2,r3
 8002c00:	10800204 	addi	r2,r2,8
 8002c04:	10000015 	stw	zero,0(r2)
		roomArray[i].requested = 0;
 8002c08:	008200b4 	movhi	r2,2050
 8002c0c:	108f8104 	addi	r2,r2,15876
 8002c10:	e0ffff17 	ldw	r3,-4(fp)
 8002c14:	18c00624 	muli	r3,r3,24
 8002c18:	10c5883a 	add	r2,r2,r3
 8002c1c:	10800304 	addi	r2,r2,12
 8002c20:	10000015 	stw	zero,0(r2)
		roomArray[i].in_use = 0;
 8002c24:	008200b4 	movhi	r2,2050
 8002c28:	108f8104 	addi	r2,r2,15876
 8002c2c:	e0ffff17 	ldw	r3,-4(fp)
 8002c30:	18c00624 	muli	r3,r3,24
 8002c34:	10c5883a 	add	r2,r2,r3
 8002c38:	10800404 	addi	r2,r2,16
 8002c3c:	10000015 	stw	zero,0(r2)
		roomArray[i].occupied = 0;
 8002c40:	008200b4 	movhi	r2,2050
 8002c44:	108f8104 	addi	r2,r2,15876
 8002c48:	e0ffff17 	ldw	r3,-4(fp)
 8002c4c:	18c00624 	muli	r3,r3,24
 8002c50:	10c5883a 	add	r2,r2,r3
 8002c54:	10800504 	addi	r2,r2,20
 8002c58:	10000015 	stw	zero,0(r2)
		roomArray[i].temp = 0;
 8002c5c:	008200b4 	movhi	r2,2050
 8002c60:	108f8104 	addi	r2,r2,15876
 8002c64:	e0ffff17 	ldw	r3,-4(fp)
 8002c68:	18c00624 	muli	r3,r3,24
 8002c6c:	10c5883a 	add	r2,r2,r3
 8002c70:	10000015 	stw	zero,0(r2)
	}
}

void InitRoomArray(void){
	int i;
	for (i = 0; i < 10; i++) {
 8002c74:	e0bfff17 	ldw	r2,-4(fp)
 8002c78:	10800044 	addi	r2,r2,1
 8002c7c:	e0bfff15 	stw	r2,-4(fp)
 8002c80:	e0bfff17 	ldw	r2,-4(fp)
 8002c84:	10800290 	cmplti	r2,r2,10
 8002c88:	103fd11e 	bne	r2,zero,8002bd0 <__alt_data_end+0xfc002bd0>
		roomArray[i].requested = 0;
		roomArray[i].in_use = 0;
		roomArray[i].occupied = 0;
		roomArray[i].temp = 0;
	}
	roomArray[3].requested = 1;
 8002c8c:	008200b4 	movhi	r2,2050
 8002c90:	108f8104 	addi	r2,r2,15876
 8002c94:	00c00044 	movi	r3,1
 8002c98:	10c01515 	stw	r3,84(r2)
	roomArray[4].requested = 1;
 8002c9c:	008200b4 	movhi	r2,2050
 8002ca0:	108f8104 	addi	r2,r2,15876
 8002ca4:	00c00044 	movi	r3,1
 8002ca8:	10c01b15 	stw	r3,108(r2)
}
 8002cac:	e037883a 	mov	sp,fp
 8002cb0:	df000017 	ldw	fp,0(sp)
 8002cb4:	dec00104 	addi	sp,sp,4
 8002cb8:	f800283a 	ret

08002cbc <RunDisplay>:

void RunDisplay(void) {
 8002cbc:	defff804 	addi	sp,sp,-32
 8002cc0:	dfc00715 	stw	ra,28(sp)
 8002cc4:	df000615 	stw	fp,24(sp)
 8002cc8:	dc000515 	stw	r16,20(sp)
 8002ccc:	df000604 	addi	fp,sp,24
	int last_room_num;
	int curr_room_num;
	int k;

	AttemptBluetoothConnection();
 8002cd0:	80018380 	call	8001838 <AttemptBluetoothConnection>
	InitRoomArray();
 8002cd4:	8002bbc0 	call	8002bbc <InitRoomArray>
	Init_Touch();
 8002cd8:	8000cac0 	call	8000cac <Init_Touch>
	//Init_RS232();
	BaseDisplay();
 8002cdc:	8001cbc0 	call	8001cbc <BaseDisplay>
	last_room_num = BaseChoice();
 8002ce0:	80024dc0 	call	80024dc <BaseChoice>
 8002ce4:	e0bffc15 	stw	r2,-16(fp)

	Wifi_Init();
 8002ce8:	800198c0 	call	800198c <Wifi_Init>

	while (1) {
		if (last_room_num >= 1 && last_room_num <= 10) {
 8002cec:	e0bffc17 	ldw	r2,-16(fp)
 8002cf0:	0080060e 	bge	zero,r2,8002d0c <RunDisplay+0x50>
 8002cf4:	e0bffc17 	ldw	r2,-16(fp)
 8002cf8:	108002c8 	cmpgei	r2,r2,11
 8002cfc:	1000031e 	bne	r2,zero,8002d0c <RunDisplay+0x50>
			curr_room_num = last_room_num;
 8002d00:	e0bffc17 	ldw	r2,-16(fp)
 8002d04:	e0bffd15 	stw	r2,-12(fp)
 8002d08:	0000f806 	br	80030ec <RunDisplay+0x430>
		}
		else if (last_room_num == ERROR) {
 8002d0c:	e0bffc17 	ldw	r2,-16(fp)
 8002d10:	10bfffd8 	cmpnei	r2,r2,-1
 8002d14:	1000041e 	bne	r2,zero,8002d28 <RunDisplay+0x6c>
			printf("Error, my dude\n");
 8002d18:	010200b4 	movhi	r4,2050
 8002d1c:	2100e604 	addi	r4,r4,920
 8002d20:	80051c40 	call	80051c4 <puts>
 8002d24:	0000f106 	br	80030ec <RunDisplay+0x430>
		}
		else if (last_room_num == LIGHTS_OFF) {
 8002d28:	e0bffc17 	ldw	r2,-16(fp)
 8002d2c:	108002d8 	cmpnei	r2,r2,11
 8002d30:	10000d1e 	bne	r2,zero,8002d68 <RunDisplay+0xac>
			roomArray[curr_room_num - 1].lights = 0;
 8002d34:	e0bffd17 	ldw	r2,-12(fp)
 8002d38:	10ffffc4 	addi	r3,r2,-1
 8002d3c:	008200b4 	movhi	r2,2050
 8002d40:	108f8104 	addi	r2,r2,15876
 8002d44:	18c00624 	muli	r3,r3,24
 8002d48:	10c5883a 	add	r2,r2,r3
 8002d4c:	10800104 	addi	r2,r2,4
 8002d50:	10000015 	stw	zero,0(r2)
			if (curr_room_num == 1) {
 8002d54:	e0bffd17 	ldw	r2,-12(fp)
 8002d58:	10800058 	cmpnei	r2,r2,1
 8002d5c:	1000e31e 	bne	r2,zero,80030ec <RunDisplay+0x430>
				TurnOffLights();
 8002d60:	800128c0 	call	800128c <TurnOffLights>
 8002d64:	0000e106 	br	80030ec <RunDisplay+0x430>
			}
		}
		else if (last_room_num == LIGHTS_ON) {
 8002d68:	e0bffc17 	ldw	r2,-16(fp)
 8002d6c:	10800318 	cmpnei	r2,r2,12
 8002d70:	10000e1e 	bne	r2,zero,8002dac <RunDisplay+0xf0>
			roomArray[curr_room_num - 1].lights = 1;
 8002d74:	e0bffd17 	ldw	r2,-12(fp)
 8002d78:	10ffffc4 	addi	r3,r2,-1
 8002d7c:	008200b4 	movhi	r2,2050
 8002d80:	108f8104 	addi	r2,r2,15876
 8002d84:	18c00624 	muli	r3,r3,24
 8002d88:	10c5883a 	add	r2,r2,r3
 8002d8c:	10800104 	addi	r2,r2,4
 8002d90:	00c00044 	movi	r3,1
 8002d94:	10c00015 	stw	r3,0(r2)
			if (curr_room_num == 1) {
 8002d98:	e0bffd17 	ldw	r2,-12(fp)
 8002d9c:	10800058 	cmpnei	r2,r2,1
 8002da0:	1000d21e 	bne	r2,zero,80030ec <RunDisplay+0x430>
				TurnOnLights();
 8002da4:	80012600 	call	8001260 <TurnOnLights>
 8002da8:	0000d006 	br	80030ec <RunDisplay+0x430>
			}
		}
		else if (last_room_num == LOCK_DOOR) {
 8002dac:	e0bffc17 	ldw	r2,-16(fp)
 8002db0:	10800358 	cmpnei	r2,r2,13
 8002db4:	1000581e 	bne	r2,zero,8002f18 <RunDisplay+0x25c>
			roomArray[curr_room_num - 1].door = 0;
 8002db8:	e0bffd17 	ldw	r2,-12(fp)
 8002dbc:	10ffffc4 	addi	r3,r2,-1
 8002dc0:	008200b4 	movhi	r2,2050
 8002dc4:	108f8104 	addi	r2,r2,15876
 8002dc8:	18c00624 	muli	r3,r3,24
 8002dcc:	10c5883a 	add	r2,r2,r3
 8002dd0:	10800204 	addi	r2,r2,8
 8002dd4:	10000015 	stw	zero,0(r2)
			if (curr_room_num == 1) {
 8002dd8:	e0bffd17 	ldw	r2,-12(fp)
 8002ddc:	10800058 	cmpnei	r2,r2,1
 8002de0:	1000011e 	bne	r2,zero,8002de8 <RunDisplay+0x12c>
				CloseServo();
 8002de4:	80012340 	call	8001234 <CloseServo>
			}
			if (roomArray[curr_room_num - 1].in_use==0 && roomArray[curr_room_num - 1].requested ) {
 8002de8:	e0bffd17 	ldw	r2,-12(fp)
 8002dec:	10ffffc4 	addi	r3,r2,-1
 8002df0:	008200b4 	movhi	r2,2050
 8002df4:	108f8104 	addi	r2,r2,15876
 8002df8:	18c00624 	muli	r3,r3,24
 8002dfc:	10c5883a 	add	r2,r2,r3
 8002e00:	10800404 	addi	r2,r2,16
 8002e04:	10800017 	ldw	r2,0(r2)
 8002e08:	1000121e 	bne	r2,zero,8002e54 <RunDisplay+0x198>
 8002e0c:	e0bffd17 	ldw	r2,-12(fp)
 8002e10:	10ffffc4 	addi	r3,r2,-1
 8002e14:	008200b4 	movhi	r2,2050
 8002e18:	108f8104 	addi	r2,r2,15876
 8002e1c:	18c00624 	muli	r3,r3,24
 8002e20:	10c5883a 	add	r2,r2,r3
 8002e24:	10800304 	addi	r2,r2,12
 8002e28:	10800017 	ldw	r2,0(r2)
 8002e2c:	10000926 	beq	r2,zero,8002e54 <RunDisplay+0x198>
				roomArray[curr_room_num - 1].requested = 0;
 8002e30:	e0bffd17 	ldw	r2,-12(fp)
 8002e34:	10ffffc4 	addi	r3,r2,-1
 8002e38:	008200b4 	movhi	r2,2050
 8002e3c:	108f8104 	addi	r2,r2,15876
 8002e40:	18c00624 	muli	r3,r3,24
 8002e44:	10c5883a 	add	r2,r2,r3
 8002e48:	10800304 	addi	r2,r2,12
 8002e4c:	10000015 	stw	zero,0(r2)
 8002e50:	0000a606 	br	80030ec <RunDisplay+0x430>
			}
			else if (roomArray[curr_room_num - 1].in_use==1 && roomArray[curr_room_num - 1].requested ) {
 8002e54:	e0bffd17 	ldw	r2,-12(fp)
 8002e58:	10ffffc4 	addi	r3,r2,-1
 8002e5c:	008200b4 	movhi	r2,2050
 8002e60:	108f8104 	addi	r2,r2,15876
 8002e64:	18c00624 	muli	r3,r3,24
 8002e68:	10c5883a 	add	r2,r2,r3
 8002e6c:	10800404 	addi	r2,r2,16
 8002e70:	10800017 	ldw	r2,0(r2)
 8002e74:	10800058 	cmpnei	r2,r2,1
 8002e78:	10009c1e 	bne	r2,zero,80030ec <RunDisplay+0x430>
 8002e7c:	e0bffd17 	ldw	r2,-12(fp)
 8002e80:	10ffffc4 	addi	r3,r2,-1
 8002e84:	008200b4 	movhi	r2,2050
 8002e88:	108f8104 	addi	r2,r2,15876
 8002e8c:	18c00624 	muli	r3,r3,24
 8002e90:	10c5883a 	add	r2,r2,r3
 8002e94:	10800304 	addi	r2,r2,12
 8002e98:	10800017 	ldw	r2,0(r2)
 8002e9c:	10009326 	beq	r2,zero,80030ec <RunDisplay+0x430>
				roomArray[curr_room_num - 1].requested = 0;
 8002ea0:	e0bffd17 	ldw	r2,-12(fp)
 8002ea4:	10ffffc4 	addi	r3,r2,-1
 8002ea8:	008200b4 	movhi	r2,2050
 8002eac:	108f8104 	addi	r2,r2,15876
 8002eb0:	18c00624 	muli	r3,r3,24
 8002eb4:	10c5883a 	add	r2,r2,r3
 8002eb8:	10800304 	addi	r2,r2,12
 8002ebc:	10000015 	stw	zero,0(r2)
				roomArray[curr_room_num-1].in_use = 0;
 8002ec0:	e0bffd17 	ldw	r2,-12(fp)
 8002ec4:	10ffffc4 	addi	r3,r2,-1
 8002ec8:	008200b4 	movhi	r2,2050
 8002ecc:	108f8104 	addi	r2,r2,15876
 8002ed0:	18c00624 	muli	r3,r3,24
 8002ed4:	10c5883a 	add	r2,r2,r3
 8002ed8:	10800404 	addi	r2,r2,16
 8002edc:	10000015 	stw	zero,0(r2)
				roomArray[curr_room_num-1].lights = 0;
 8002ee0:	e0bffd17 	ldw	r2,-12(fp)
 8002ee4:	10ffffc4 	addi	r3,r2,-1
 8002ee8:	008200b4 	movhi	r2,2050
 8002eec:	108f8104 	addi	r2,r2,15876
 8002ef0:	18c00624 	muli	r3,r3,24
 8002ef4:	10c5883a 	add	r2,r2,r3
 8002ef8:	10800104 	addi	r2,r2,4
 8002efc:	10000015 	stw	zero,0(r2)
				if (curr_room_num == 1) {
 8002f00:	e0bffd17 	ldw	r2,-12(fp)
 8002f04:	10800058 	cmpnei	r2,r2,1
 8002f08:	1000781e 	bne	r2,zero,80030ec <RunDisplay+0x430>
					CloseServo();
 8002f0c:	80012340 	call	8001234 <CloseServo>
					TurnOffLights();
 8002f10:	800128c0 	call	800128c <TurnOffLights>
 8002f14:	00007506 	br	80030ec <RunDisplay+0x430>
				}
			}
		} else if (last_room_num == UNLOCK_DOOR) {
 8002f18:	e0bffc17 	ldw	r2,-16(fp)
 8002f1c:	10800398 	cmpnei	r2,r2,14
 8002f20:	10003f1e 	bne	r2,zero,8003020 <RunDisplay+0x364>
			roomArray[curr_room_num - 1].door = 1;
 8002f24:	e0bffd17 	ldw	r2,-12(fp)
 8002f28:	10ffffc4 	addi	r3,r2,-1
 8002f2c:	008200b4 	movhi	r2,2050
 8002f30:	108f8104 	addi	r2,r2,15876
 8002f34:	18c00624 	muli	r3,r3,24
 8002f38:	10c5883a 	add	r2,r2,r3
 8002f3c:	10800204 	addi	r2,r2,8
 8002f40:	00c00044 	movi	r3,1
 8002f44:	10c00015 	stw	r3,0(r2)
			if (curr_room_num == 1) {
 8002f48:	e0bffd17 	ldw	r2,-12(fp)
 8002f4c:	10800058 	cmpnei	r2,r2,1
 8002f50:	1000011e 	bne	r2,zero,8002f58 <RunDisplay+0x29c>
				OpenServo();
 8002f54:	80012080 	call	8001208 <OpenServo>
			}
			if (roomArray[curr_room_num - 1].requested && roomArray[curr_room_num - 1].in_use==0) {
 8002f58:	e0bffd17 	ldw	r2,-12(fp)
 8002f5c:	10ffffc4 	addi	r3,r2,-1
 8002f60:	008200b4 	movhi	r2,2050
 8002f64:	108f8104 	addi	r2,r2,15876
 8002f68:	18c00624 	muli	r3,r3,24
 8002f6c:	10c5883a 	add	r2,r2,r3
 8002f70:	10800304 	addi	r2,r2,12
 8002f74:	10800017 	ldw	r2,0(r2)
 8002f78:	10005c26 	beq	r2,zero,80030ec <RunDisplay+0x430>
 8002f7c:	e0bffd17 	ldw	r2,-12(fp)
 8002f80:	10ffffc4 	addi	r3,r2,-1
 8002f84:	008200b4 	movhi	r2,2050
 8002f88:	108f8104 	addi	r2,r2,15876
 8002f8c:	18c00624 	muli	r3,r3,24
 8002f90:	10c5883a 	add	r2,r2,r3
 8002f94:	10800404 	addi	r2,r2,16
 8002f98:	10800017 	ldw	r2,0(r2)
 8002f9c:	1000531e 	bne	r2,zero,80030ec <RunDisplay+0x430>
				roomArray[curr_room_num - 1].requested = 0;
 8002fa0:	e0bffd17 	ldw	r2,-12(fp)
 8002fa4:	10ffffc4 	addi	r3,r2,-1
 8002fa8:	008200b4 	movhi	r2,2050
 8002fac:	108f8104 	addi	r2,r2,15876
 8002fb0:	18c00624 	muli	r3,r3,24
 8002fb4:	10c5883a 	add	r2,r2,r3
 8002fb8:	10800304 	addi	r2,r2,12
 8002fbc:	10000015 	stw	zero,0(r2)
				roomArray[curr_room_num - 1].in_use = 1;
 8002fc0:	e0bffd17 	ldw	r2,-12(fp)
 8002fc4:	10ffffc4 	addi	r3,r2,-1
 8002fc8:	008200b4 	movhi	r2,2050
 8002fcc:	108f8104 	addi	r2,r2,15876
 8002fd0:	18c00624 	muli	r3,r3,24
 8002fd4:	10c5883a 	add	r2,r2,r3
 8002fd8:	10800404 	addi	r2,r2,16
 8002fdc:	00c00044 	movi	r3,1
 8002fe0:	10c00015 	stw	r3,0(r2)
				roomArray[curr_room_num - 1].lights = 1;
 8002fe4:	e0bffd17 	ldw	r2,-12(fp)
 8002fe8:	10ffffc4 	addi	r3,r2,-1
 8002fec:	008200b4 	movhi	r2,2050
 8002ff0:	108f8104 	addi	r2,r2,15876
 8002ff4:	18c00624 	muli	r3,r3,24
 8002ff8:	10c5883a 	add	r2,r2,r3
 8002ffc:	10800104 	addi	r2,r2,4
 8003000:	00c00044 	movi	r3,1
 8003004:	10c00015 	stw	r3,0(r2)
				if (curr_room_num == 1) {
 8003008:	e0bffd17 	ldw	r2,-12(fp)
 800300c:	10800058 	cmpnei	r2,r2,1
 8003010:	1000361e 	bne	r2,zero,80030ec <RunDisplay+0x430>
					OpenServo();
 8003014:	80012080 	call	8001208 <OpenServo>
					TurnOnLights();
 8003018:	80012600 	call	8001260 <TurnOnLights>
 800301c:	00003306 	br	80030ec <RunDisplay+0x430>

				}
			}
		}
		else if (last_room_num == AUTO_APPROVE){
 8003020:	e0bffc17 	ldw	r2,-16(fp)
 8003024:	108003d8 	cmpnei	r2,r2,15
 8003028:	1000301e 	bne	r2,zero,80030ec <RunDisplay+0x430>
			if(auto_approve){
 800302c:	d0a6e017 	ldw	r2,-25728(gp)
 8003030:	10000226 	beq	r2,zero,800303c <RunDisplay+0x380>
				auto_approve=0;
 8003034:	d026e015 	stw	zero,-25728(gp)
 8003038:	00002c06 	br	80030ec <RunDisplay+0x430>
			}
			else{
				auto_approve = 1;
 800303c:	00800044 	movi	r2,1
 8003040:	d0a6e015 	stw	r2,-25728(gp)
				for (k = 0; k < 10; k++) {
 8003044:	e03ffe15 	stw	zero,-8(fp)
 8003048:	00002506 	br	80030e0 <RunDisplay+0x424>
					if(roomArray[k].requested){
 800304c:	008200b4 	movhi	r2,2050
 8003050:	108f8104 	addi	r2,r2,15876
 8003054:	e0fffe17 	ldw	r3,-8(fp)
 8003058:	18c00624 	muli	r3,r3,24
 800305c:	10c5883a 	add	r2,r2,r3
 8003060:	10800304 	addi	r2,r2,12
 8003064:	10800017 	ldw	r2,0(r2)
 8003068:	10001a26 	beq	r2,zero,80030d4 <RunDisplay+0x418>
						roomArray[k].requested=0;
 800306c:	008200b4 	movhi	r2,2050
 8003070:	108f8104 	addi	r2,r2,15876
 8003074:	e0fffe17 	ldw	r3,-8(fp)
 8003078:	18c00624 	muli	r3,r3,24
 800307c:	10c5883a 	add	r2,r2,r3
 8003080:	10800304 	addi	r2,r2,12
 8003084:	10000015 	stw	zero,0(r2)
						roomArray[k].in_use = 1;
 8003088:	008200b4 	movhi	r2,2050
 800308c:	108f8104 	addi	r2,r2,15876
 8003090:	e0fffe17 	ldw	r3,-8(fp)
 8003094:	18c00624 	muli	r3,r3,24
 8003098:	10c5883a 	add	r2,r2,r3
 800309c:	10800404 	addi	r2,r2,16
 80030a0:	00c00044 	movi	r3,1
 80030a4:	10c00015 	stw	r3,0(r2)
						roomArray[k].door = 1;
 80030a8:	008200b4 	movhi	r2,2050
 80030ac:	108f8104 	addi	r2,r2,15876
 80030b0:	e0fffe17 	ldw	r3,-8(fp)
 80030b4:	18c00624 	muli	r3,r3,24
 80030b8:	10c5883a 	add	r2,r2,r3
 80030bc:	10800204 	addi	r2,r2,8
 80030c0:	00c00044 	movi	r3,1
 80030c4:	10c00015 	stw	r3,0(r2)
						if (k == 0) {
 80030c8:	e0bffe17 	ldw	r2,-8(fp)
 80030cc:	1000011e 	bne	r2,zero,80030d4 <RunDisplay+0x418>
							OpenServo();
 80030d0:	80012080 	call	8001208 <OpenServo>
			if(auto_approve){
				auto_approve=0;
			}
			else{
				auto_approve = 1;
				for (k = 0; k < 10; k++) {
 80030d4:	e0bffe17 	ldw	r2,-8(fp)
 80030d8:	10800044 	addi	r2,r2,1
 80030dc:	e0bffe15 	stw	r2,-8(fp)
 80030e0:	e0bffe17 	ldw	r2,-8(fp)
 80030e4:	10800290 	cmplti	r2,r2,10
 80030e8:	103fd81e 	bne	r2,zero,800304c <__alt_data_end+0xfc00304c>
					}
				}
			}
		}
		//delay_double(0.1);
		roomArray[curr_room_num-1].occupied = GetRangeData();
 80030ec:	e0bffd17 	ldw	r2,-12(fp)
 80030f0:	143fffc4 	addi	r16,r2,-1
 80030f4:	80011bc0 	call	80011bc <GetRangeData>
 80030f8:	1009883a 	mov	r4,r2
 80030fc:	008200b4 	movhi	r2,2050
 8003100:	108f8104 	addi	r2,r2,15876
 8003104:	80c00624 	muli	r3,r16,24
 8003108:	10c5883a 	add	r2,r2,r3
 800310c:	10800504 	addi	r2,r2,20
 8003110:	11000015 	stw	r4,0(r2)
		printf("Starting Info Display\n");
 8003114:	010200b4 	movhi	r4,2050
 8003118:	2100ea04 	addi	r4,r4,936
 800311c:	80051c40 	call	80051c4 <puts>
		InfoDisplay(curr_room_num, roomArray[curr_room_num - 1].lights,roomArray[curr_room_num - 1].door,roomArray[curr_room_num - 1].occupied,roomArray[curr_room_num - 1].in_use, roomArray[curr_room_num - 1].temp);
 8003120:	e0bffd17 	ldw	r2,-12(fp)
 8003124:	10ffffc4 	addi	r3,r2,-1
 8003128:	008200b4 	movhi	r2,2050
 800312c:	108f8104 	addi	r2,r2,15876
 8003130:	18c00624 	muli	r3,r3,24
 8003134:	10c5883a 	add	r2,r2,r3
 8003138:	10800104 	addi	r2,r2,4
 800313c:	11400017 	ldw	r5,0(r2)
 8003140:	e0bffd17 	ldw	r2,-12(fp)
 8003144:	10ffffc4 	addi	r3,r2,-1
 8003148:	008200b4 	movhi	r2,2050
 800314c:	108f8104 	addi	r2,r2,15876
 8003150:	18c00624 	muli	r3,r3,24
 8003154:	10c5883a 	add	r2,r2,r3
 8003158:	10800204 	addi	r2,r2,8
 800315c:	11800017 	ldw	r6,0(r2)
 8003160:	e0bffd17 	ldw	r2,-12(fp)
 8003164:	10ffffc4 	addi	r3,r2,-1
 8003168:	008200b4 	movhi	r2,2050
 800316c:	108f8104 	addi	r2,r2,15876
 8003170:	18c00624 	muli	r3,r3,24
 8003174:	10c5883a 	add	r2,r2,r3
 8003178:	10800504 	addi	r2,r2,20
 800317c:	11c00017 	ldw	r7,0(r2)
 8003180:	e0bffd17 	ldw	r2,-12(fp)
 8003184:	10ffffc4 	addi	r3,r2,-1
 8003188:	008200b4 	movhi	r2,2050
 800318c:	108f8104 	addi	r2,r2,15876
 8003190:	18c00624 	muli	r3,r3,24
 8003194:	10c5883a 	add	r2,r2,r3
 8003198:	10800404 	addi	r2,r2,16
 800319c:	10c00017 	ldw	r3,0(r2)
 80031a0:	e0bffd17 	ldw	r2,-12(fp)
 80031a4:	113fffc4 	addi	r4,r2,-1
 80031a8:	008200b4 	movhi	r2,2050
 80031ac:	108f8104 	addi	r2,r2,15876
 80031b0:	21000624 	muli	r4,r4,24
 80031b4:	1105883a 	add	r2,r2,r4
 80031b8:	10800017 	ldw	r2,0(r2)
 80031bc:	d8c00015 	stw	r3,0(sp)
 80031c0:	d8800115 	stw	r2,4(sp)
 80031c4:	e13ffd17 	ldw	r4,-12(fp)
 80031c8:	8001dbc0 	call	8001dbc <InfoDisplay>
		for (k = 0; k < 10; k++) {
 80031cc:	e03ffe15 	stw	zero,-8(fp)
 80031d0:	00002f06 	br	8003290 <RunDisplay+0x5d4>
			if (roomArray[k].requested == 1 && roomArray[k].in_use==1) {
 80031d4:	008200b4 	movhi	r2,2050
 80031d8:	108f8104 	addi	r2,r2,15876
 80031dc:	e0fffe17 	ldw	r3,-8(fp)
 80031e0:	18c00624 	muli	r3,r3,24
 80031e4:	10c5883a 	add	r2,r2,r3
 80031e8:	10800304 	addi	r2,r2,12
 80031ec:	10800017 	ldw	r2,0(r2)
 80031f0:	10800058 	cmpnei	r2,r2,1
 80031f4:	10000e1e 	bne	r2,zero,8003230 <RunDisplay+0x574>
 80031f8:	008200b4 	movhi	r2,2050
 80031fc:	108f8104 	addi	r2,r2,15876
 8003200:	e0fffe17 	ldw	r3,-8(fp)
 8003204:	18c00624 	muli	r3,r3,24
 8003208:	10c5883a 	add	r2,r2,r3
 800320c:	10800404 	addi	r2,r2,16
 8003210:	10800017 	ldw	r2,0(r2)
 8003214:	10800058 	cmpnei	r2,r2,1
 8003218:	1000051e 	bne	r2,zero,8003230 <RunDisplay+0x574>
				RequestCloseDisplay(k +1);
 800321c:	e0bffe17 	ldw	r2,-8(fp)
 8003220:	10800044 	addi	r2,r2,1
 8003224:	1009883a 	mov	r4,r2
 8003228:	800241c0 	call	800241c <RequestCloseDisplay>
 800322c:	00001506 	br	8003284 <RunDisplay+0x5c8>
			}
			else if (roomArray[k].requested == 1 && roomArray[k].in_use==0) {
 8003230:	008200b4 	movhi	r2,2050
 8003234:	108f8104 	addi	r2,r2,15876
 8003238:	e0fffe17 	ldw	r3,-8(fp)
 800323c:	18c00624 	muli	r3,r3,24
 8003240:	10c5883a 	add	r2,r2,r3
 8003244:	10800304 	addi	r2,r2,12
 8003248:	10800017 	ldw	r2,0(r2)
 800324c:	10800058 	cmpnei	r2,r2,1
 8003250:	10000c1e 	bne	r2,zero,8003284 <RunDisplay+0x5c8>
 8003254:	008200b4 	movhi	r2,2050
 8003258:	108f8104 	addi	r2,r2,15876
 800325c:	e0fffe17 	ldw	r3,-8(fp)
 8003260:	18c00624 	muli	r3,r3,24
 8003264:	10c5883a 	add	r2,r2,r3
 8003268:	10800404 	addi	r2,r2,16
 800326c:	10800017 	ldw	r2,0(r2)
 8003270:	1000041e 	bne	r2,zero,8003284 <RunDisplay+0x5c8>
				RequestOpenDisplay(k +1);
 8003274:	e0bffe17 	ldw	r2,-8(fp)
 8003278:	10800044 	addi	r2,r2,1
 800327c:	1009883a 	mov	r4,r2
 8003280:	800247c0 	call	800247c <RequestOpenDisplay>
		}
		//delay_double(0.1);
		roomArray[curr_room_num-1].occupied = GetRangeData();
		printf("Starting Info Display\n");
		InfoDisplay(curr_room_num, roomArray[curr_room_num - 1].lights,roomArray[curr_room_num - 1].door,roomArray[curr_room_num - 1].occupied,roomArray[curr_room_num - 1].in_use, roomArray[curr_room_num - 1].temp);
		for (k = 0; k < 10; k++) {
 8003284:	e0bffe17 	ldw	r2,-8(fp)
 8003288:	10800044 	addi	r2,r2,1
 800328c:	e0bffe15 	stw	r2,-8(fp)
 8003290:	e0bffe17 	ldw	r2,-8(fp)
 8003294:	10800290 	cmplti	r2,r2,10
 8003298:	103fce1e 	bne	r2,zero,80031d4 <__alt_data_end+0xfc0031d4>
			else if (roomArray[k].requested == 1 && roomArray[k].in_use==0) {
				RequestOpenDisplay(k +1);
			}
		}
		//delay(2);
		PrintNumbers(curr_room_num);
 800329c:	e13ffd17 	ldw	r4,-12(fp)
 80032a0:	8002ad80 	call	8002ad8 <PrintNumbers>
		//sendTempRequest();
		last_room_num = InfoChoice(curr_room_num);
 80032a4:	e13ffd17 	ldw	r4,-12(fp)
 80032a8:	80029500 	call	8002950 <InfoChoice>
 80032ac:	e0bffc15 	stw	r2,-16(fp)
	}
 80032b0:	003e8e06 	br	8002cec <__alt_data_end+0xfc002cec>

080032b4 <TestSerial>:
}

void TestSerial(void){
 80032b4:	defffe04 	addi	sp,sp,-8
 80032b8:	dfc00115 	stw	ra,4(sp)
 80032bc:	df000015 	stw	fp,0(sp)
 80032c0:	d839883a 	mov	fp,sp
	Init_RS232();
 80032c4:	80010140 	call	8001014 <Init_RS232>
	while(1){
		TurnOnLights();
 80032c8:	80012600 	call	8001260 <TurnOnLights>
		delay_double(0.1);
 80032cc:	012666b4 	movhi	r4,39322
 80032d0:	21266684 	addi	r4,r4,-26214
 80032d4:	014feeb4 	movhi	r5,16314
 80032d8:	29666644 	addi	r5,r5,-26215
 80032dc:	8001c340 	call	8001c34 <delay_double>
		TurnOffLights();
 80032e0:	800128c0 	call	800128c <TurnOffLights>
		delay_double(0.1);
 80032e4:	012666b4 	movhi	r4,39322
 80032e8:	21266684 	addi	r4,r4,-26214
 80032ec:	014feeb4 	movhi	r5,16314
 80032f0:	29666644 	addi	r5,r5,-26215
 80032f4:	8001c340 	call	8001c34 <delay_double>
	}
 80032f8:	003ff306 	br	80032c8 <__alt_data_end+0xfc0032c8>

080032fc <main>:
}

int main(void) {
 80032fc:	defffe04 	addi	sp,sp,-8
 8003300:	dfc00115 	stw	ra,4(sp)
 8003304:	df000015 	stw	fp,0(sp)
 8003308:	d839883a 	mov	fp,sp


	TestSerial();
 800330c:	80032b40 	call	80032b4 <TestSerial>
	RunDisplay();
 8003310:	8002cbc0 	call	8002cbc <RunDisplay>

	printf("Finished");
 8003314:	010200b4 	movhi	r4,2050
 8003318:	2100f004 	addi	r4,r4,960
 800331c:	80050b00 	call	80050b0 <printf>

	return 0;
 8003320:	0005883a 	mov	r2,zero
}
 8003324:	e037883a 	mov	sp,fp
 8003328:	dfc00117 	ldw	ra,4(sp)
 800332c:	df000017 	ldw	fp,0(sp)
 8003330:	dec00204 	addi	sp,sp,8
 8003334:	f800283a 	ret

08003338 <floor>:
 8003338:	defff904 	addi	sp,sp,-28
 800333c:	dc800215 	stw	r18,8(sp)
 8003340:	2825d53a 	srai	r18,r5,20
 8003344:	dd000415 	stw	r20,16(sp)
 8003348:	dcc00315 	stw	r19,12(sp)
 800334c:	9481ffcc 	andi	r18,r18,2047
 8003350:	dc400115 	stw	r17,4(sp)
 8003354:	dc000015 	stw	r16,0(sp)
 8003358:	dfc00615 	stw	ra,24(sp)
 800335c:	dd400515 	stw	r21,20(sp)
 8003360:	94ff0044 	addi	r19,r18,-1023
 8003364:	018004c4 	movi	r6,19
 8003368:	2821883a 	mov	r16,r5
 800336c:	2005883a 	mov	r2,r4
 8003370:	280f883a 	mov	r7,r5
 8003374:	2829883a 	mov	r20,r5
 8003378:	2023883a 	mov	r17,r4
 800337c:	34c01916 	blt	r6,r19,80033e4 <floor+0xac>
 8003380:	98003d16 	blt	r19,zero,8003478 <floor+0x140>
 8003384:	04800434 	movhi	r18,16
 8003388:	94bfffc4 	addi	r18,r18,-1
 800338c:	94e5d83a 	sra	r18,r18,r19
 8003390:	914c703a 	and	r6,r18,r5
 8003394:	310cb03a 	or	r6,r6,r4
 8003398:	30001626 	beq	r6,zero,80033f4 <floor+0xbc>
 800339c:	01a20034 	movhi	r6,34816
 80033a0:	01df8e34 	movhi	r7,32312
 80033a4:	319d6704 	addi	r6,r6,30108
 80033a8:	39f90f04 	addi	r7,r7,-7108
 80033ac:	800352c0 	call	800352c <__adddf3>
 80033b0:	1009883a 	mov	r4,r2
 80033b4:	180b883a 	mov	r5,r3
 80033b8:	000d883a 	mov	r6,zero
 80033bc:	000f883a 	mov	r7,zero
 80033c0:	8003dc80 	call	8003dc8 <__gedf2>
 80033c4:	0080040e 	bge	zero,r2,80033d8 <floor+0xa0>
 80033c8:	80003d16 	blt	r16,zero,80034c0 <floor+0x188>
 80033cc:	04a0303a 	nor	r16,zero,r18
 80033d0:	a420703a 	and	r16,r20,r16
 80033d4:	0023883a 	mov	r17,zero
 80033d8:	8805883a 	mov	r2,r17
 80033dc:	8007883a 	mov	r3,r16
 80033e0:	00000506 	br	80033f8 <floor+0xc0>
 80033e4:	01800cc4 	movi	r6,51
 80033e8:	34c00c0e 	bge	r6,r19,800341c <floor+0xe4>
 80033ec:	01810004 	movi	r6,1024
 80033f0:	99803026 	beq	r19,r6,80034b4 <floor+0x17c>
 80033f4:	3807883a 	mov	r3,r7
 80033f8:	dfc00617 	ldw	ra,24(sp)
 80033fc:	dd400517 	ldw	r21,20(sp)
 8003400:	dd000417 	ldw	r20,16(sp)
 8003404:	dcc00317 	ldw	r19,12(sp)
 8003408:	dc800217 	ldw	r18,8(sp)
 800340c:	dc400117 	ldw	r17,4(sp)
 8003410:	dc000017 	ldw	r16,0(sp)
 8003414:	dec00704 	addi	sp,sp,28
 8003418:	f800283a 	ret
 800341c:	01bfffc4 	movi	r6,-1
 8003420:	957efb44 	addi	r21,r18,-1043
 8003424:	356ad83a 	srl	r21,r6,r21
 8003428:	a90c703a 	and	r6,r21,r4
 800342c:	303ff126 	beq	r6,zero,80033f4 <__alt_data_end+0xfc0033f4>
 8003430:	01a20034 	movhi	r6,34816
 8003434:	01df8e34 	movhi	r7,32312
 8003438:	319d6704 	addi	r6,r6,30108
 800343c:	39f90f04 	addi	r7,r7,-7108
 8003440:	800352c0 	call	800352c <__adddf3>
 8003444:	1009883a 	mov	r4,r2
 8003448:	180b883a 	mov	r5,r3
 800344c:	000d883a 	mov	r6,zero
 8003450:	000f883a 	mov	r7,zero
 8003454:	8003dc80 	call	8003dc8 <__gedf2>
 8003458:	00bfdf0e 	bge	zero,r2,80033d8 <__alt_data_end+0xfc0033d8>
 800345c:	80001c16 	blt	r16,zero,80034d0 <floor+0x198>
 8003460:	056a303a 	nor	r21,zero,r21
 8003464:	a021883a 	mov	r16,r20
 8003468:	8d62703a 	and	r17,r17,r21
 800346c:	8805883a 	mov	r2,r17
 8003470:	8007883a 	mov	r3,r16
 8003474:	003fe006 	br	80033f8 <__alt_data_end+0xfc0033f8>
 8003478:	01a20034 	movhi	r6,34816
 800347c:	01df8e34 	movhi	r7,32312
 8003480:	319d6704 	addi	r6,r6,30108
 8003484:	39f90f04 	addi	r7,r7,-7108
 8003488:	800352c0 	call	800352c <__adddf3>
 800348c:	1009883a 	mov	r4,r2
 8003490:	180b883a 	mov	r5,r3
 8003494:	000d883a 	mov	r6,zero
 8003498:	000f883a 	mov	r7,zero
 800349c:	8003dc80 	call	8003dc8 <__gedf2>
 80034a0:	00bfcd0e 	bge	zero,r2,80033d8 <__alt_data_end+0xfc0033d8>
 80034a4:	80001516 	blt	r16,zero,80034fc <floor+0x1c4>
 80034a8:	0023883a 	mov	r17,zero
 80034ac:	0021883a 	mov	r16,zero
 80034b0:	003fc906 	br	80033d8 <__alt_data_end+0xfc0033d8>
 80034b4:	200d883a 	mov	r6,r4
 80034b8:	800352c0 	call	800352c <__adddf3>
 80034bc:	003fce06 	br	80033f8 <__alt_data_end+0xfc0033f8>
 80034c0:	00800434 	movhi	r2,16
 80034c4:	14e7d83a 	sra	r19,r2,r19
 80034c8:	84e9883a 	add	r20,r16,r19
 80034cc:	003fbf06 	br	80033cc <__alt_data_end+0xfc0033cc>
 80034d0:	00800504 	movi	r2,20
 80034d4:	98801326 	beq	r19,r2,8003524 <floor+0x1ec>
 80034d8:	00810cc4 	movi	r2,1075
 80034dc:	14a5c83a 	sub	r18,r2,r18
 80034e0:	00800044 	movi	r2,1
 80034e4:	1484983a 	sll	r2,r2,r18
 80034e8:	1445883a 	add	r2,r2,r17
 80034ec:	14400b2e 	bgeu	r2,r17,800351c <floor+0x1e4>
 80034f0:	85000044 	addi	r20,r16,1
 80034f4:	1023883a 	mov	r17,r2
 80034f8:	003fd906 	br	8003460 <__alt_data_end+0xfc003460>
 80034fc:	00a00034 	movhi	r2,32768
 8003500:	10bfffc4 	addi	r2,r2,-1
 8003504:	8084703a 	and	r2,r16,r2
 8003508:	1462b03a 	or	r17,r2,r17
 800350c:	883fb226 	beq	r17,zero,80033d8 <__alt_data_end+0xfc0033d8>
 8003510:	0023883a 	mov	r17,zero
 8003514:	042ffc34 	movhi	r16,49136
 8003518:	003faf06 	br	80033d8 <__alt_data_end+0xfc0033d8>
 800351c:	1023883a 	mov	r17,r2
 8003520:	003fcf06 	br	8003460 <__alt_data_end+0xfc003460>
 8003524:	85000044 	addi	r20,r16,1
 8003528:	003fcd06 	br	8003460 <__alt_data_end+0xfc003460>

0800352c <__adddf3>:
 800352c:	02000434 	movhi	r8,16
 8003530:	423fffc4 	addi	r8,r8,-1
 8003534:	defffb04 	addi	sp,sp,-20
 8003538:	2a12703a 	and	r9,r5,r8
 800353c:	2806d7fa 	srli	r3,r5,31
 8003540:	3a10703a 	and	r8,r7,r8
 8003544:	3804d53a 	srli	r2,r7,20
 8003548:	3014d77a 	srli	r10,r6,29
 800354c:	dc000015 	stw	r16,0(sp)
 8003550:	481290fa 	slli	r9,r9,3
 8003554:	2820d53a 	srli	r16,r5,20
 8003558:	401090fa 	slli	r8,r8,3
 800355c:	200ad77a 	srli	r5,r4,29
 8003560:	380ed7fa 	srli	r7,r7,31
 8003564:	dc800215 	stw	r18,8(sp)
 8003568:	dc400115 	stw	r17,4(sp)
 800356c:	dfc00415 	stw	ra,16(sp)
 8003570:	dcc00315 	stw	r19,12(sp)
 8003574:	1c803fcc 	andi	r18,r3,255
 8003578:	8401ffcc 	andi	r16,r16,2047
 800357c:	494ab03a 	or	r5,r9,r5
 8003580:	202290fa 	slli	r17,r4,3
 8003584:	1081ffcc 	andi	r2,r2,2047
 8003588:	4290b03a 	or	r8,r8,r10
 800358c:	300c90fa 	slli	r6,r6,3
 8003590:	91c07026 	beq	r18,r7,8003754 <__adddf3+0x228>
 8003594:	8087c83a 	sub	r3,r16,r2
 8003598:	00c0b30e 	bge	zero,r3,8003868 <__adddf3+0x33c>
 800359c:	10002a1e 	bne	r2,zero,8003648 <__adddf3+0x11c>
 80035a0:	4184b03a 	or	r2,r8,r6
 80035a4:	1000991e 	bne	r2,zero,800380c <__adddf3+0x2e0>
 80035a8:	888001cc 	andi	r2,r17,7
 80035ac:	10005b26 	beq	r2,zero,800371c <__adddf3+0x1f0>
 80035b0:	88c003cc 	andi	r3,r17,15
 80035b4:	00800104 	movi	r2,4
 80035b8:	18805826 	beq	r3,r2,800371c <__adddf3+0x1f0>
 80035bc:	89800104 	addi	r6,r17,4
 80035c0:	3463803a 	cmpltu	r17,r6,r17
 80035c4:	2c4b883a 	add	r5,r5,r17
 80035c8:	2880202c 	andhi	r2,r5,128
 80035cc:	9007883a 	mov	r3,r18
 80035d0:	3023883a 	mov	r17,r6
 80035d4:	10005426 	beq	r2,zero,8003728 <__adddf3+0x1fc>
 80035d8:	84000044 	addi	r16,r16,1
 80035dc:	0081ffc4 	movi	r2,2047
 80035e0:	8080c126 	beq	r16,r2,80038e8 <__adddf3+0x3bc>
 80035e4:	013fe034 	movhi	r4,65408
 80035e8:	213fffc4 	addi	r4,r4,-1
 80035ec:	290a703a 	and	r5,r5,r4
 80035f0:	2804977a 	slli	r2,r5,29
 80035f4:	280a927a 	slli	r5,r5,9
 80035f8:	8822d0fa 	srli	r17,r17,3
 80035fc:	8401ffcc 	andi	r16,r16,2047
 8003600:	2808d33a 	srli	r4,r5,12
 8003604:	1444b03a 	or	r2,r2,r17
 8003608:	8401ffcc 	andi	r16,r16,2047
 800360c:	800a953a 	slli	r5,r16,20
 8003610:	18c03fcc 	andi	r3,r3,255
 8003614:	04000434 	movhi	r16,16
 8003618:	180697fa 	slli	r3,r3,31
 800361c:	843fffc4 	addi	r16,r16,-1
 8003620:	2420703a 	and	r16,r4,r16
 8003624:	8160b03a 	or	r16,r16,r5
 8003628:	80c6b03a 	or	r3,r16,r3
 800362c:	dfc00417 	ldw	ra,16(sp)
 8003630:	dcc00317 	ldw	r19,12(sp)
 8003634:	dc800217 	ldw	r18,8(sp)
 8003638:	dc400117 	ldw	r17,4(sp)
 800363c:	dc000017 	ldw	r16,0(sp)
 8003640:	dec00504 	addi	sp,sp,20
 8003644:	f800283a 	ret
 8003648:	0081ffc4 	movi	r2,2047
 800364c:	80bfd626 	beq	r16,r2,80035a8 <__alt_data_end+0xfc0035a8>
 8003650:	42002034 	orhi	r8,r8,128
 8003654:	00800e04 	movi	r2,56
 8003658:	10c0a616 	blt	r2,r3,80038f4 <__adddf3+0x3c8>
 800365c:	008007c4 	movi	r2,31
 8003660:	10c0c916 	blt	r2,r3,8003988 <__adddf3+0x45c>
 8003664:	00800804 	movi	r2,32
 8003668:	10c5c83a 	sub	r2,r2,r3
 800366c:	408e983a 	sll	r7,r8,r2
 8003670:	30c8d83a 	srl	r4,r6,r3
 8003674:	3084983a 	sll	r2,r6,r2
 8003678:	40c6d83a 	srl	r3,r8,r3
 800367c:	390cb03a 	or	r6,r7,r4
 8003680:	1004c03a 	cmpne	r2,r2,zero
 8003684:	308cb03a 	or	r6,r6,r2
 8003688:	898dc83a 	sub	r6,r17,r6
 800368c:	89a3803a 	cmpltu	r17,r17,r6
 8003690:	28cbc83a 	sub	r5,r5,r3
 8003694:	2c4bc83a 	sub	r5,r5,r17
 8003698:	3023883a 	mov	r17,r6
 800369c:	2880202c 	andhi	r2,r5,128
 80036a0:	10006d26 	beq	r2,zero,8003858 <__adddf3+0x32c>
 80036a4:	04c02034 	movhi	r19,128
 80036a8:	9cffffc4 	addi	r19,r19,-1
 80036ac:	2ce6703a 	and	r19,r5,r19
 80036b0:	98007e26 	beq	r19,zero,80038ac <__adddf3+0x380>
 80036b4:	9809883a 	mov	r4,r19
 80036b8:	80048040 	call	8004804 <__clzsi2>
 80036bc:	10fffe04 	addi	r3,r2,-8
 80036c0:	010007c4 	movi	r4,31
 80036c4:	20c07f16 	blt	r4,r3,80038c4 <__adddf3+0x398>
 80036c8:	01400a04 	movi	r5,40
 80036cc:	2885c83a 	sub	r2,r5,r2
 80036d0:	888ad83a 	srl	r5,r17,r2
 80036d4:	98e6983a 	sll	r19,r19,r3
 80036d8:	88e2983a 	sll	r17,r17,r3
 80036dc:	2ce6b03a 	or	r19,r5,r19
 80036e0:	1c007c16 	blt	r3,r16,80038d4 <__adddf3+0x3a8>
 80036e4:	1c21c83a 	sub	r16,r3,r16
 80036e8:	81400044 	addi	r5,r16,1
 80036ec:	00c007c4 	movi	r3,31
 80036f0:	19409816 	blt	r3,r5,8003954 <__adddf3+0x428>
 80036f4:	1c21c83a 	sub	r16,r3,r16
 80036f8:	8c08983a 	sll	r4,r17,r16
 80036fc:	8946d83a 	srl	r3,r17,r5
 8003700:	9c20983a 	sll	r16,r19,r16
 8003704:	2008c03a 	cmpne	r4,r4,zero
 8003708:	994ad83a 	srl	r5,r19,r5
 800370c:	1c06b03a 	or	r3,r3,r16
 8003710:	1922b03a 	or	r17,r3,r4
 8003714:	0021883a 	mov	r16,zero
 8003718:	003fa306 	br	80035a8 <__alt_data_end+0xfc0035a8>
 800371c:	2880202c 	andhi	r2,r5,128
 8003720:	9007883a 	mov	r3,r18
 8003724:	103fac1e 	bne	r2,zero,80035d8 <__alt_data_end+0xfc0035d8>
 8003728:	2804977a 	slli	r2,r5,29
 800372c:	8822d0fa 	srli	r17,r17,3
 8003730:	0101ffc4 	movi	r4,2047
 8003734:	280ad0fa 	srli	r5,r5,3
 8003738:	1444b03a 	or	r2,r2,r17
 800373c:	81002c26 	beq	r16,r4,80037f0 <__adddf3+0x2c4>
 8003740:	8120703a 	and	r16,r16,r4
 8003744:	01000434 	movhi	r4,16
 8003748:	213fffc4 	addi	r4,r4,-1
 800374c:	2908703a 	and	r4,r5,r4
 8003750:	003fad06 	br	8003608 <__alt_data_end+0xfc003608>
 8003754:	8089c83a 	sub	r4,r16,r2
 8003758:	01006a0e 	bge	zero,r4,8003904 <__adddf3+0x3d8>
 800375c:	10003326 	beq	r2,zero,800382c <__adddf3+0x300>
 8003760:	0081ffc4 	movi	r2,2047
 8003764:	80bf9026 	beq	r16,r2,80035a8 <__alt_data_end+0xfc0035a8>
 8003768:	42002034 	orhi	r8,r8,128
 800376c:	00800e04 	movi	r2,56
 8003770:	1100b116 	blt	r2,r4,8003a38 <__adddf3+0x50c>
 8003774:	008007c4 	movi	r2,31
 8003778:	1100e216 	blt	r2,r4,8003b04 <__adddf3+0x5d8>
 800377c:	00800804 	movi	r2,32
 8003780:	1105c83a 	sub	r2,r2,r4
 8003784:	4092983a 	sll	r9,r8,r2
 8003788:	310ed83a 	srl	r7,r6,r4
 800378c:	3084983a 	sll	r2,r6,r2
 8003790:	4110d83a 	srl	r8,r8,r4
 8003794:	49ccb03a 	or	r6,r9,r7
 8003798:	1004c03a 	cmpne	r2,r2,zero
 800379c:	308cb03a 	or	r6,r6,r2
 80037a0:	344d883a 	add	r6,r6,r17
 80037a4:	3463803a 	cmpltu	r17,r6,r17
 80037a8:	414b883a 	add	r5,r8,r5
 80037ac:	2c4b883a 	add	r5,r5,r17
 80037b0:	3023883a 	mov	r17,r6
 80037b4:	2880202c 	andhi	r2,r5,128
 80037b8:	10002726 	beq	r2,zero,8003858 <__adddf3+0x32c>
 80037bc:	84000044 	addi	r16,r16,1
 80037c0:	0081ffc4 	movi	r2,2047
 80037c4:	8080ae26 	beq	r16,r2,8003a80 <__adddf3+0x554>
 80037c8:	00bfe034 	movhi	r2,65408
 80037cc:	10bfffc4 	addi	r2,r2,-1
 80037d0:	288a703a 	and	r5,r5,r2
 80037d4:	880cd07a 	srli	r6,r17,1
 80037d8:	280897fa 	slli	r4,r5,31
 80037dc:	88c0004c 	andi	r3,r17,1
 80037e0:	30e2b03a 	or	r17,r6,r3
 80037e4:	280ad07a 	srli	r5,r5,1
 80037e8:	8922b03a 	or	r17,r17,r4
 80037ec:	003f6e06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80037f0:	1148b03a 	or	r4,r2,r5
 80037f4:	20003c26 	beq	r4,zero,80038e8 <__adddf3+0x3bc>
 80037f8:	29000234 	orhi	r4,r5,8
 80037fc:	01400434 	movhi	r5,16
 8003800:	297fffc4 	addi	r5,r5,-1
 8003804:	2148703a 	and	r4,r4,r5
 8003808:	003f7f06 	br	8003608 <__alt_data_end+0xfc003608>
 800380c:	18ffffc4 	addi	r3,r3,-1
 8003810:	18004d1e 	bne	r3,zero,8003948 <__adddf3+0x41c>
 8003814:	898dc83a 	sub	r6,r17,r6
 8003818:	89a3803a 	cmpltu	r17,r17,r6
 800381c:	2a0bc83a 	sub	r5,r5,r8
 8003820:	2c4bc83a 	sub	r5,r5,r17
 8003824:	3023883a 	mov	r17,r6
 8003828:	003f9c06 	br	800369c <__alt_data_end+0xfc00369c>
 800382c:	4184b03a 	or	r2,r8,r6
 8003830:	103f5d26 	beq	r2,zero,80035a8 <__alt_data_end+0xfc0035a8>
 8003834:	213fffc4 	addi	r4,r4,-1
 8003838:	203fd926 	beq	r4,zero,80037a0 <__alt_data_end+0xfc0037a0>
 800383c:	0081ffc4 	movi	r2,2047
 8003840:	80bfca1e 	bne	r16,r2,800376c <__alt_data_end+0xfc00376c>
 8003844:	003f5806 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003848:	10c8b03a 	or	r4,r2,r3
 800384c:	20008b26 	beq	r4,zero,8003a7c <__adddf3+0x550>
 8003850:	100b883a 	mov	r5,r2
 8003854:	1823883a 	mov	r17,r3
 8003858:	888001cc 	andi	r2,r17,7
 800385c:	103f541e 	bne	r2,zero,80035b0 <__alt_data_end+0xfc0035b0>
 8003860:	9007883a 	mov	r3,r18
 8003864:	003fb006 	br	8003728 <__alt_data_end+0xfc003728>
 8003868:	1800531e 	bne	r3,zero,80039b8 <__adddf3+0x48c>
 800386c:	80800044 	addi	r2,r16,1
 8003870:	1081ffcc 	andi	r2,r2,2047
 8003874:	00c00044 	movi	r3,1
 8003878:	1880990e 	bge	r3,r2,8003ae0 <__adddf3+0x5b4>
 800387c:	8985c83a 	sub	r2,r17,r6
 8003880:	8887803a 	cmpltu	r3,r17,r2
 8003884:	2a27c83a 	sub	r19,r5,r8
 8003888:	98e7c83a 	sub	r19,r19,r3
 800388c:	98c0202c 	andhi	r3,r19,128
 8003890:	18006226 	beq	r3,zero,8003a1c <__adddf3+0x4f0>
 8003894:	3463c83a 	sub	r17,r6,r17
 8003898:	4151c83a 	sub	r8,r8,r5
 800389c:	344d803a 	cmpltu	r6,r6,r17
 80038a0:	41a7c83a 	sub	r19,r8,r6
 80038a4:	3825883a 	mov	r18,r7
 80038a8:	983f821e 	bne	r19,zero,80036b4 <__alt_data_end+0xfc0036b4>
 80038ac:	8809883a 	mov	r4,r17
 80038b0:	80048040 	call	8004804 <__clzsi2>
 80038b4:	10800804 	addi	r2,r2,32
 80038b8:	10fffe04 	addi	r3,r2,-8
 80038bc:	010007c4 	movi	r4,31
 80038c0:	20ff810e 	bge	r4,r3,80036c8 <__alt_data_end+0xfc0036c8>
 80038c4:	14fff604 	addi	r19,r2,-40
 80038c8:	8ce6983a 	sll	r19,r17,r19
 80038cc:	0023883a 	mov	r17,zero
 80038d0:	1c3f840e 	bge	r3,r16,80036e4 <__alt_data_end+0xfc0036e4>
 80038d4:	017fe034 	movhi	r5,65408
 80038d8:	297fffc4 	addi	r5,r5,-1
 80038dc:	80e1c83a 	sub	r16,r16,r3
 80038e0:	994a703a 	and	r5,r19,r5
 80038e4:	003f3006 	br	80035a8 <__alt_data_end+0xfc0035a8>
 80038e8:	0009883a 	mov	r4,zero
 80038ec:	0005883a 	mov	r2,zero
 80038f0:	003f4506 	br	8003608 <__alt_data_end+0xfc003608>
 80038f4:	418cb03a 	or	r6,r8,r6
 80038f8:	300cc03a 	cmpne	r6,r6,zero
 80038fc:	0007883a 	mov	r3,zero
 8003900:	003f6106 	br	8003688 <__alt_data_end+0xfc003688>
 8003904:	2000921e 	bne	r4,zero,8003b50 <__adddf3+0x624>
 8003908:	80800044 	addi	r2,r16,1
 800390c:	11c1ffcc 	andi	r7,r2,2047
 8003910:	01000044 	movi	r4,1
 8003914:	21c0610e 	bge	r4,r7,8003a9c <__adddf3+0x570>
 8003918:	0101ffc4 	movi	r4,2047
 800391c:	1100a326 	beq	r2,r4,8003bac <__adddf3+0x680>
 8003920:	344d883a 	add	r6,r6,r17
 8003924:	3463803a 	cmpltu	r17,r6,r17
 8003928:	414b883a 	add	r5,r8,r5
 800392c:	2c4b883a 	add	r5,r5,r17
 8003930:	282297fa 	slli	r17,r5,31
 8003934:	300cd07a 	srli	r6,r6,1
 8003938:	280ad07a 	srli	r5,r5,1
 800393c:	1021883a 	mov	r16,r2
 8003940:	89a2b03a 	or	r17,r17,r6
 8003944:	003f1806 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003948:	0081ffc4 	movi	r2,2047
 800394c:	80bf411e 	bne	r16,r2,8003654 <__alt_data_end+0xfc003654>
 8003950:	003f1506 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003954:	80bff844 	addi	r2,r16,-31
 8003958:	00c00804 	movi	r3,32
 800395c:	9884d83a 	srl	r2,r19,r2
 8003960:	28c04a26 	beq	r5,r3,8003a8c <__adddf3+0x560>
 8003964:	00c00fc4 	movi	r3,63
 8003968:	1c21c83a 	sub	r16,r3,r16
 800396c:	9c26983a 	sll	r19,r19,r16
 8003970:	9c62b03a 	or	r17,r19,r17
 8003974:	8822c03a 	cmpne	r17,r17,zero
 8003978:	88a2b03a 	or	r17,r17,r2
 800397c:	000b883a 	mov	r5,zero
 8003980:	0021883a 	mov	r16,zero
 8003984:	003fb406 	br	8003858 <__alt_data_end+0xfc003858>
 8003988:	18bff804 	addi	r2,r3,-32
 800398c:	01000804 	movi	r4,32
 8003990:	4084d83a 	srl	r2,r8,r2
 8003994:	19003f26 	beq	r3,r4,8003a94 <__adddf3+0x568>
 8003998:	01001004 	movi	r4,64
 800399c:	20c7c83a 	sub	r3,r4,r3
 80039a0:	40d0983a 	sll	r8,r8,r3
 80039a4:	418cb03a 	or	r6,r8,r6
 80039a8:	300cc03a 	cmpne	r6,r6,zero
 80039ac:	308cb03a 	or	r6,r6,r2
 80039b0:	0007883a 	mov	r3,zero
 80039b4:	003f3406 	br	8003688 <__alt_data_end+0xfc003688>
 80039b8:	80002326 	beq	r16,zero,8003a48 <__adddf3+0x51c>
 80039bc:	0101ffc4 	movi	r4,2047
 80039c0:	11005e26 	beq	r2,r4,8003b3c <__adddf3+0x610>
 80039c4:	00c7c83a 	sub	r3,zero,r3
 80039c8:	29402034 	orhi	r5,r5,128
 80039cc:	01000e04 	movi	r4,56
 80039d0:	20c07216 	blt	r4,r3,8003b9c <__adddf3+0x670>
 80039d4:	010007c4 	movi	r4,31
 80039d8:	20c0ce16 	blt	r4,r3,8003d14 <__adddf3+0x7e8>
 80039dc:	01000804 	movi	r4,32
 80039e0:	20c9c83a 	sub	r4,r4,r3
 80039e4:	2914983a 	sll	r10,r5,r4
 80039e8:	88d2d83a 	srl	r9,r17,r3
 80039ec:	8908983a 	sll	r4,r17,r4
 80039f0:	28c6d83a 	srl	r3,r5,r3
 80039f4:	5262b03a 	or	r17,r10,r9
 80039f8:	2008c03a 	cmpne	r4,r4,zero
 80039fc:	8922b03a 	or	r17,r17,r4
 8003a00:	3463c83a 	sub	r17,r6,r17
 8003a04:	40c7c83a 	sub	r3,r8,r3
 8003a08:	344d803a 	cmpltu	r6,r6,r17
 8003a0c:	198bc83a 	sub	r5,r3,r6
 8003a10:	1021883a 	mov	r16,r2
 8003a14:	3825883a 	mov	r18,r7
 8003a18:	003f2006 	br	800369c <__alt_data_end+0xfc00369c>
 8003a1c:	9886b03a 	or	r3,r19,r2
 8003a20:	1800141e 	bne	r3,zero,8003a74 <__adddf3+0x548>
 8003a24:	0007883a 	mov	r3,zero
 8003a28:	000b883a 	mov	r5,zero
 8003a2c:	0023883a 	mov	r17,zero
 8003a30:	0021883a 	mov	r16,zero
 8003a34:	003f3c06 	br	8003728 <__alt_data_end+0xfc003728>
 8003a38:	418cb03a 	or	r6,r8,r6
 8003a3c:	300cc03a 	cmpne	r6,r6,zero
 8003a40:	0011883a 	mov	r8,zero
 8003a44:	003f5606 	br	80037a0 <__alt_data_end+0xfc0037a0>
 8003a48:	2c48b03a 	or	r4,r5,r17
 8003a4c:	20003b26 	beq	r4,zero,8003b3c <__adddf3+0x610>
 8003a50:	00c6303a 	nor	r3,zero,r3
 8003a54:	1800371e 	bne	r3,zero,8003b34 <__adddf3+0x608>
 8003a58:	3463c83a 	sub	r17,r6,r17
 8003a5c:	414bc83a 	sub	r5,r8,r5
 8003a60:	344d803a 	cmpltu	r6,r6,r17
 8003a64:	298bc83a 	sub	r5,r5,r6
 8003a68:	1021883a 	mov	r16,r2
 8003a6c:	3825883a 	mov	r18,r7
 8003a70:	003f0a06 	br	800369c <__alt_data_end+0xfc00369c>
 8003a74:	1023883a 	mov	r17,r2
 8003a78:	003f0d06 	br	80036b0 <__alt_data_end+0xfc0036b0>
 8003a7c:	0007883a 	mov	r3,zero
 8003a80:	000b883a 	mov	r5,zero
 8003a84:	0023883a 	mov	r17,zero
 8003a88:	003f2706 	br	8003728 <__alt_data_end+0xfc003728>
 8003a8c:	0027883a 	mov	r19,zero
 8003a90:	003fb706 	br	8003970 <__alt_data_end+0xfc003970>
 8003a94:	0011883a 	mov	r8,zero
 8003a98:	003fc206 	br	80039a4 <__alt_data_end+0xfc0039a4>
 8003a9c:	2c44b03a 	or	r2,r5,r17
 8003aa0:	8000871e 	bne	r16,zero,8003cc0 <__adddf3+0x794>
 8003aa4:	1000b126 	beq	r2,zero,8003d6c <__adddf3+0x840>
 8003aa8:	4184b03a 	or	r2,r8,r6
 8003aac:	103ebe26 	beq	r2,zero,80035a8 <__alt_data_end+0xfc0035a8>
 8003ab0:	3445883a 	add	r2,r6,r17
 8003ab4:	1463803a 	cmpltu	r17,r2,r17
 8003ab8:	414b883a 	add	r5,r8,r5
 8003abc:	2c4b883a 	add	r5,r5,r17
 8003ac0:	28c0202c 	andhi	r3,r5,128
 8003ac4:	1023883a 	mov	r17,r2
 8003ac8:	183f6326 	beq	r3,zero,8003858 <__alt_data_end+0xfc003858>
 8003acc:	00bfe034 	movhi	r2,65408
 8003ad0:	10bfffc4 	addi	r2,r2,-1
 8003ad4:	2021883a 	mov	r16,r4
 8003ad8:	288a703a 	and	r5,r5,r2
 8003adc:	003eb206 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003ae0:	2c44b03a 	or	r2,r5,r17
 8003ae4:	8000251e 	bne	r16,zero,8003b7c <__adddf3+0x650>
 8003ae8:	10004b1e 	bne	r2,zero,8003c18 <__adddf3+0x6ec>
 8003aec:	4184b03a 	or	r2,r8,r6
 8003af0:	103fe226 	beq	r2,zero,8003a7c <__alt_data_end+0xfc003a7c>
 8003af4:	400b883a 	mov	r5,r8
 8003af8:	3023883a 	mov	r17,r6
 8003afc:	3825883a 	mov	r18,r7
 8003b00:	003ea906 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003b04:	20bff804 	addi	r2,r4,-32
 8003b08:	01c00804 	movi	r7,32
 8003b0c:	4084d83a 	srl	r2,r8,r2
 8003b10:	21c07e26 	beq	r4,r7,8003d0c <__adddf3+0x7e0>
 8003b14:	01c01004 	movi	r7,64
 8003b18:	3909c83a 	sub	r4,r7,r4
 8003b1c:	4110983a 	sll	r8,r8,r4
 8003b20:	418cb03a 	or	r6,r8,r6
 8003b24:	300cc03a 	cmpne	r6,r6,zero
 8003b28:	308cb03a 	or	r6,r6,r2
 8003b2c:	0011883a 	mov	r8,zero
 8003b30:	003f1b06 	br	80037a0 <__alt_data_end+0xfc0037a0>
 8003b34:	0101ffc4 	movi	r4,2047
 8003b38:	113fa41e 	bne	r2,r4,80039cc <__alt_data_end+0xfc0039cc>
 8003b3c:	400b883a 	mov	r5,r8
 8003b40:	3023883a 	mov	r17,r6
 8003b44:	1021883a 	mov	r16,r2
 8003b48:	3825883a 	mov	r18,r7
 8003b4c:	003e9606 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003b50:	80001a1e 	bne	r16,zero,8003bbc <__adddf3+0x690>
 8003b54:	2c4eb03a 	or	r7,r5,r17
 8003b58:	38005526 	beq	r7,zero,8003cb0 <__adddf3+0x784>
 8003b5c:	0108303a 	nor	r4,zero,r4
 8003b60:	2000511e 	bne	r4,zero,8003ca8 <__adddf3+0x77c>
 8003b64:	89a3883a 	add	r17,r17,r6
 8003b68:	414b883a 	add	r5,r8,r5
 8003b6c:	898d803a 	cmpltu	r6,r17,r6
 8003b70:	298b883a 	add	r5,r5,r6
 8003b74:	1021883a 	mov	r16,r2
 8003b78:	003f0e06 	br	80037b4 <__alt_data_end+0xfc0037b4>
 8003b7c:	1000341e 	bne	r2,zero,8003c50 <__adddf3+0x724>
 8003b80:	4184b03a 	or	r2,r8,r6
 8003b84:	10006f26 	beq	r2,zero,8003d44 <__adddf3+0x818>
 8003b88:	400b883a 	mov	r5,r8
 8003b8c:	3023883a 	mov	r17,r6
 8003b90:	3825883a 	mov	r18,r7
 8003b94:	0401ffc4 	movi	r16,2047
 8003b98:	003e8306 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003b9c:	2c62b03a 	or	r17,r5,r17
 8003ba0:	8822c03a 	cmpne	r17,r17,zero
 8003ba4:	0007883a 	mov	r3,zero
 8003ba8:	003f9506 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003bac:	1021883a 	mov	r16,r2
 8003bb0:	000b883a 	mov	r5,zero
 8003bb4:	0023883a 	mov	r17,zero
 8003bb8:	003edb06 	br	8003728 <__alt_data_end+0xfc003728>
 8003bbc:	01c1ffc4 	movi	r7,2047
 8003bc0:	11c03b26 	beq	r2,r7,8003cb0 <__adddf3+0x784>
 8003bc4:	0109c83a 	sub	r4,zero,r4
 8003bc8:	29402034 	orhi	r5,r5,128
 8003bcc:	01c00e04 	movi	r7,56
 8003bd0:	39006216 	blt	r7,r4,8003d5c <__adddf3+0x830>
 8003bd4:	01c007c4 	movi	r7,31
 8003bd8:	39006b16 	blt	r7,r4,8003d88 <__adddf3+0x85c>
 8003bdc:	01c00804 	movi	r7,32
 8003be0:	390fc83a 	sub	r7,r7,r4
 8003be4:	29d4983a 	sll	r10,r5,r7
 8003be8:	8912d83a 	srl	r9,r17,r4
 8003bec:	89ce983a 	sll	r7,r17,r7
 8003bf0:	2908d83a 	srl	r4,r5,r4
 8003bf4:	5262b03a 	or	r17,r10,r9
 8003bf8:	380ac03a 	cmpne	r5,r7,zero
 8003bfc:	8962b03a 	or	r17,r17,r5
 8003c00:	89a3883a 	add	r17,r17,r6
 8003c04:	2211883a 	add	r8,r4,r8
 8003c08:	898d803a 	cmpltu	r6,r17,r6
 8003c0c:	418b883a 	add	r5,r8,r6
 8003c10:	1021883a 	mov	r16,r2
 8003c14:	003ee706 	br	80037b4 <__alt_data_end+0xfc0037b4>
 8003c18:	4184b03a 	or	r2,r8,r6
 8003c1c:	103e6226 	beq	r2,zero,80035a8 <__alt_data_end+0xfc0035a8>
 8003c20:	8987c83a 	sub	r3,r17,r6
 8003c24:	88c9803a 	cmpltu	r4,r17,r3
 8003c28:	2a05c83a 	sub	r2,r5,r8
 8003c2c:	1105c83a 	sub	r2,r2,r4
 8003c30:	1100202c 	andhi	r4,r2,128
 8003c34:	203f0426 	beq	r4,zero,8003848 <__alt_data_end+0xfc003848>
 8003c38:	3463c83a 	sub	r17,r6,r17
 8003c3c:	414bc83a 	sub	r5,r8,r5
 8003c40:	344d803a 	cmpltu	r6,r6,r17
 8003c44:	298bc83a 	sub	r5,r5,r6
 8003c48:	3825883a 	mov	r18,r7
 8003c4c:	003e5606 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003c50:	4184b03a 	or	r2,r8,r6
 8003c54:	10002b26 	beq	r2,zero,8003d04 <__adddf3+0x7d8>
 8003c58:	2804d0fa 	srli	r2,r5,3
 8003c5c:	8822d0fa 	srli	r17,r17,3
 8003c60:	280a977a 	slli	r5,r5,29
 8003c64:	10c0022c 	andhi	r3,r2,8
 8003c68:	2c62b03a 	or	r17,r5,r17
 8003c6c:	18000826 	beq	r3,zero,8003c90 <__adddf3+0x764>
 8003c70:	4008d0fa 	srli	r4,r8,3
 8003c74:	20c0022c 	andhi	r3,r4,8
 8003c78:	1800051e 	bne	r3,zero,8003c90 <__adddf3+0x764>
 8003c7c:	300cd0fa 	srli	r6,r6,3
 8003c80:	4010977a 	slli	r8,r8,29
 8003c84:	2005883a 	mov	r2,r4
 8003c88:	3825883a 	mov	r18,r7
 8003c8c:	41a2b03a 	or	r17,r8,r6
 8003c90:	880ad77a 	srli	r5,r17,29
 8003c94:	100490fa 	slli	r2,r2,3
 8003c98:	882290fa 	slli	r17,r17,3
 8003c9c:	0401ffc4 	movi	r16,2047
 8003ca0:	288ab03a 	or	r5,r5,r2
 8003ca4:	003e4006 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003ca8:	01c1ffc4 	movi	r7,2047
 8003cac:	11ffc71e 	bne	r2,r7,8003bcc <__alt_data_end+0xfc003bcc>
 8003cb0:	400b883a 	mov	r5,r8
 8003cb4:	3023883a 	mov	r17,r6
 8003cb8:	1021883a 	mov	r16,r2
 8003cbc:	003e3a06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003cc0:	10002d26 	beq	r2,zero,8003d78 <__adddf3+0x84c>
 8003cc4:	4184b03a 	or	r2,r8,r6
 8003cc8:	10000e26 	beq	r2,zero,8003d04 <__adddf3+0x7d8>
 8003ccc:	2804d0fa 	srli	r2,r5,3
 8003cd0:	8822d0fa 	srli	r17,r17,3
 8003cd4:	280a977a 	slli	r5,r5,29
 8003cd8:	10c0022c 	andhi	r3,r2,8
 8003cdc:	2c62b03a 	or	r17,r5,r17
 8003ce0:	183feb26 	beq	r3,zero,8003c90 <__alt_data_end+0xfc003c90>
 8003ce4:	4008d0fa 	srli	r4,r8,3
 8003ce8:	20c0022c 	andhi	r3,r4,8
 8003cec:	183fe81e 	bne	r3,zero,8003c90 <__alt_data_end+0xfc003c90>
 8003cf0:	300cd0fa 	srli	r6,r6,3
 8003cf4:	4010977a 	slli	r8,r8,29
 8003cf8:	2005883a 	mov	r2,r4
 8003cfc:	41a2b03a 	or	r17,r8,r6
 8003d00:	003fe306 	br	8003c90 <__alt_data_end+0xfc003c90>
 8003d04:	0401ffc4 	movi	r16,2047
 8003d08:	003e2706 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003d0c:	0011883a 	mov	r8,zero
 8003d10:	003f8306 	br	8003b20 <__alt_data_end+0xfc003b20>
 8003d14:	193ff804 	addi	r4,r3,-32
 8003d18:	02400804 	movi	r9,32
 8003d1c:	2908d83a 	srl	r4,r5,r4
 8003d20:	1a402526 	beq	r3,r9,8003db8 <__adddf3+0x88c>
 8003d24:	02401004 	movi	r9,64
 8003d28:	48c7c83a 	sub	r3,r9,r3
 8003d2c:	28ca983a 	sll	r5,r5,r3
 8003d30:	2c62b03a 	or	r17,r5,r17
 8003d34:	8822c03a 	cmpne	r17,r17,zero
 8003d38:	8922b03a 	or	r17,r17,r4
 8003d3c:	0007883a 	mov	r3,zero
 8003d40:	003f2f06 	br	8003a00 <__alt_data_end+0xfc003a00>
 8003d44:	01402034 	movhi	r5,128
 8003d48:	0007883a 	mov	r3,zero
 8003d4c:	297fffc4 	addi	r5,r5,-1
 8003d50:	047ffe04 	movi	r17,-8
 8003d54:	0401ffc4 	movi	r16,2047
 8003d58:	003e7306 	br	8003728 <__alt_data_end+0xfc003728>
 8003d5c:	2c62b03a 	or	r17,r5,r17
 8003d60:	8822c03a 	cmpne	r17,r17,zero
 8003d64:	0009883a 	mov	r4,zero
 8003d68:	003fa506 	br	8003c00 <__alt_data_end+0xfc003c00>
 8003d6c:	400b883a 	mov	r5,r8
 8003d70:	3023883a 	mov	r17,r6
 8003d74:	003e0c06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003d78:	400b883a 	mov	r5,r8
 8003d7c:	3023883a 	mov	r17,r6
 8003d80:	0401ffc4 	movi	r16,2047
 8003d84:	003e0806 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003d88:	21fff804 	addi	r7,r4,-32
 8003d8c:	02400804 	movi	r9,32
 8003d90:	29ced83a 	srl	r7,r5,r7
 8003d94:	22400a26 	beq	r4,r9,8003dc0 <__adddf3+0x894>
 8003d98:	02401004 	movi	r9,64
 8003d9c:	4909c83a 	sub	r4,r9,r4
 8003da0:	290a983a 	sll	r5,r5,r4
 8003da4:	2c62b03a 	or	r17,r5,r17
 8003da8:	8822c03a 	cmpne	r17,r17,zero
 8003dac:	89e2b03a 	or	r17,r17,r7
 8003db0:	0009883a 	mov	r4,zero
 8003db4:	003f9206 	br	8003c00 <__alt_data_end+0xfc003c00>
 8003db8:	000b883a 	mov	r5,zero
 8003dbc:	003fdc06 	br	8003d30 <__alt_data_end+0xfc003d30>
 8003dc0:	000b883a 	mov	r5,zero
 8003dc4:	003ff706 	br	8003da4 <__alt_data_end+0xfc003da4>

08003dc8 <__gedf2>:
 8003dc8:	2804d53a 	srli	r2,r5,20
 8003dcc:	3806d53a 	srli	r3,r7,20
 8003dd0:	02000434 	movhi	r8,16
 8003dd4:	423fffc4 	addi	r8,r8,-1
 8003dd8:	0241ffc4 	movi	r9,2047
 8003ddc:	1081ffcc 	andi	r2,r2,2047
 8003de0:	2a14703a 	and	r10,r5,r8
 8003de4:	1a46703a 	and	r3,r3,r9
 8003de8:	3a10703a 	and	r8,r7,r8
 8003dec:	280ad7fa 	srli	r5,r5,31
 8003df0:	380ed7fa 	srli	r7,r7,31
 8003df4:	12400b26 	beq	r2,r9,8003e24 <__gedf2+0x5c>
 8003df8:	1a401626 	beq	r3,r9,8003e54 <__gedf2+0x8c>
 8003dfc:	10000c1e 	bne	r2,zero,8003e30 <__gedf2+0x68>
 8003e00:	5112b03a 	or	r9,r10,r4
 8003e04:	4813003a 	cmpeq	r9,r9,zero
 8003e08:	4817883a 	mov	r11,r9
 8003e0c:	18000c1e 	bne	r3,zero,8003e40 <__gedf2+0x78>
 8003e10:	4198b03a 	or	r12,r8,r6
 8003e14:	60000a1e 	bne	r12,zero,8003e40 <__gedf2+0x78>
 8003e18:	48001326 	beq	r9,zero,8003e68 <__gedf2+0xa0>
 8003e1c:	0005883a 	mov	r2,zero
 8003e20:	f800283a 	ret
 8003e24:	5112b03a 	or	r9,r10,r4
 8003e28:	4800191e 	bne	r9,zero,8003e90 <__gedf2+0xc8>
 8003e2c:	18800926 	beq	r3,r2,8003e54 <__gedf2+0x8c>
 8003e30:	18000b1e 	bne	r3,zero,8003e60 <__gedf2+0x98>
 8003e34:	4192b03a 	or	r9,r8,r6
 8003e38:	0017883a 	mov	r11,zero
 8003e3c:	48000a26 	beq	r9,zero,8003e68 <__gedf2+0xa0>
 8003e40:	39c03fcc 	andi	r7,r7,255
 8003e44:	58000726 	beq	r11,zero,8003e64 <__gedf2+0x9c>
 8003e48:	3800081e 	bne	r7,zero,8003e6c <__gedf2+0xa4>
 8003e4c:	00bfffc4 	movi	r2,-1
 8003e50:	f800283a 	ret
 8003e54:	4192b03a 	or	r9,r8,r6
 8003e58:	48000d1e 	bne	r9,zero,8003e90 <__gedf2+0xc8>
 8003e5c:	103fe826 	beq	r2,zero,8003e00 <__alt_data_end+0xfc003e00>
 8003e60:	39c03fcc 	andi	r7,r7,255
 8003e64:	29c00326 	beq	r5,r7,8003e74 <__gedf2+0xac>
 8003e68:	283ff81e 	bne	r5,zero,8003e4c <__alt_data_end+0xfc003e4c>
 8003e6c:	00800044 	movi	r2,1
 8003e70:	f800283a 	ret
 8003e74:	18bffc16 	blt	r3,r2,8003e68 <__alt_data_end+0xfc003e68>
 8003e78:	10c00316 	blt	r2,r3,8003e88 <__gedf2+0xc0>
 8003e7c:	42bffa36 	bltu	r8,r10,8003e68 <__alt_data_end+0xfc003e68>
 8003e80:	52000526 	beq	r10,r8,8003e98 <__gedf2+0xd0>
 8003e84:	523fe52e 	bgeu	r10,r8,8003e1c <__alt_data_end+0xfc003e1c>
 8003e88:	283ff026 	beq	r5,zero,8003e4c <__alt_data_end+0xfc003e4c>
 8003e8c:	003ff706 	br	8003e6c <__alt_data_end+0xfc003e6c>
 8003e90:	00bfff84 	movi	r2,-2
 8003e94:	f800283a 	ret
 8003e98:	313ff336 	bltu	r6,r4,8003e68 <__alt_data_end+0xfc003e68>
 8003e9c:	21bfdf2e 	bgeu	r4,r6,8003e1c <__alt_data_end+0xfc003e1c>
 8003ea0:	283fea26 	beq	r5,zero,8003e4c <__alt_data_end+0xfc003e4c>
 8003ea4:	003ff106 	br	8003e6c <__alt_data_end+0xfc003e6c>

08003ea8 <__ledf2>:
 8003ea8:	2804d53a 	srli	r2,r5,20
 8003eac:	3810d53a 	srli	r8,r7,20
 8003eb0:	00c00434 	movhi	r3,16
 8003eb4:	18ffffc4 	addi	r3,r3,-1
 8003eb8:	0241ffc4 	movi	r9,2047
 8003ebc:	1081ffcc 	andi	r2,r2,2047
 8003ec0:	28d4703a 	and	r10,r5,r3
 8003ec4:	4250703a 	and	r8,r8,r9
 8003ec8:	38c6703a 	and	r3,r7,r3
 8003ecc:	280ad7fa 	srli	r5,r5,31
 8003ed0:	380ed7fa 	srli	r7,r7,31
 8003ed4:	12400b26 	beq	r2,r9,8003f04 <__ledf2+0x5c>
 8003ed8:	42401926 	beq	r8,r9,8003f40 <__ledf2+0x98>
 8003edc:	10000c1e 	bne	r2,zero,8003f10 <__ledf2+0x68>
 8003ee0:	5112b03a 	or	r9,r10,r4
 8003ee4:	4813003a 	cmpeq	r9,r9,zero
 8003ee8:	4817883a 	mov	r11,r9
 8003eec:	40000f26 	beq	r8,zero,8003f2c <__ledf2+0x84>
 8003ef0:	39c03fcc 	andi	r7,r7,255
 8003ef4:	58001826 	beq	r11,zero,8003f58 <__ledf2+0xb0>
 8003ef8:	38000a1e 	bne	r7,zero,8003f24 <__ledf2+0x7c>
 8003efc:	00bfffc4 	movi	r2,-1
 8003f00:	f800283a 	ret
 8003f04:	5112b03a 	or	r9,r10,r4
 8003f08:	48000f1e 	bne	r9,zero,8003f48 <__ledf2+0xa0>
 8003f0c:	40800c26 	beq	r8,r2,8003f40 <__ledf2+0x98>
 8003f10:	4000101e 	bne	r8,zero,8003f54 <__ledf2+0xac>
 8003f14:	1992b03a 	or	r9,r3,r6
 8003f18:	0017883a 	mov	r11,zero
 8003f1c:	483ff41e 	bne	r9,zero,8003ef0 <__alt_data_end+0xfc003ef0>
 8003f20:	283ff61e 	bne	r5,zero,8003efc <__alt_data_end+0xfc003efc>
 8003f24:	00800044 	movi	r2,1
 8003f28:	f800283a 	ret
 8003f2c:	1998b03a 	or	r12,r3,r6
 8003f30:	603fef1e 	bne	r12,zero,8003ef0 <__alt_data_end+0xfc003ef0>
 8003f34:	483ffa26 	beq	r9,zero,8003f20 <__alt_data_end+0xfc003f20>
 8003f38:	0005883a 	mov	r2,zero
 8003f3c:	f800283a 	ret
 8003f40:	1992b03a 	or	r9,r3,r6
 8003f44:	48000226 	beq	r9,zero,8003f50 <__ledf2+0xa8>
 8003f48:	00800084 	movi	r2,2
 8003f4c:	f800283a 	ret
 8003f50:	103fe326 	beq	r2,zero,8003ee0 <__alt_data_end+0xfc003ee0>
 8003f54:	39c03fcc 	andi	r7,r7,255
 8003f58:	29fff11e 	bne	r5,r7,8003f20 <__alt_data_end+0xfc003f20>
 8003f5c:	40bff016 	blt	r8,r2,8003f20 <__alt_data_end+0xfc003f20>
 8003f60:	12000316 	blt	r2,r8,8003f70 <__ledf2+0xc8>
 8003f64:	1abfee36 	bltu	r3,r10,8003f20 <__alt_data_end+0xfc003f20>
 8003f68:	50c00326 	beq	r10,r3,8003f78 <__ledf2+0xd0>
 8003f6c:	50fff22e 	bgeu	r10,r3,8003f38 <__alt_data_end+0xfc003f38>
 8003f70:	283fe226 	beq	r5,zero,8003efc <__alt_data_end+0xfc003efc>
 8003f74:	003feb06 	br	8003f24 <__alt_data_end+0xfc003f24>
 8003f78:	313fe936 	bltu	r6,r4,8003f20 <__alt_data_end+0xfc003f20>
 8003f7c:	21bfee2e 	bgeu	r4,r6,8003f38 <__alt_data_end+0xfc003f38>
 8003f80:	283fde26 	beq	r5,zero,8003efc <__alt_data_end+0xfc003efc>
 8003f84:	003fe706 	br	8003f24 <__alt_data_end+0xfc003f24>

08003f88 <__muldf3>:
 8003f88:	defff204 	addi	sp,sp,-56
 8003f8c:	2804d53a 	srli	r2,r5,20
 8003f90:	dd800a15 	stw	r22,40(sp)
 8003f94:	282cd7fa 	srli	r22,r5,31
 8003f98:	dc000415 	stw	r16,16(sp)
 8003f9c:	04000434 	movhi	r16,16
 8003fa0:	df000c15 	stw	fp,48(sp)
 8003fa4:	dd000815 	stw	r20,32(sp)
 8003fa8:	dcc00715 	stw	r19,28(sp)
 8003fac:	dc800615 	stw	r18,24(sp)
 8003fb0:	dc400515 	stw	r17,20(sp)
 8003fb4:	843fffc4 	addi	r16,r16,-1
 8003fb8:	dfc00d15 	stw	ra,52(sp)
 8003fbc:	ddc00b15 	stw	r23,44(sp)
 8003fc0:	dd400915 	stw	r21,36(sp)
 8003fc4:	1501ffcc 	andi	r20,r2,2047
 8003fc8:	2023883a 	mov	r17,r4
 8003fcc:	2025883a 	mov	r18,r4
 8003fd0:	2c20703a 	and	r16,r5,r16
 8003fd4:	b027883a 	mov	r19,r22
 8003fd8:	b7003fcc 	andi	fp,r22,255
 8003fdc:	a0005926 	beq	r20,zero,8004144 <__muldf3+0x1bc>
 8003fe0:	0081ffc4 	movi	r2,2047
 8003fe4:	a0803426 	beq	r20,r2,80040b8 <__muldf3+0x130>
 8003fe8:	84000434 	orhi	r16,r16,16
 8003fec:	2004d77a 	srli	r2,r4,29
 8003ff0:	802090fa 	slli	r16,r16,3
 8003ff4:	202490fa 	slli	r18,r4,3
 8003ff8:	a53f0044 	addi	r20,r20,-1023
 8003ffc:	80a0b03a 	or	r16,r16,r2
 8004000:	002b883a 	mov	r21,zero
 8004004:	0015883a 	mov	r10,zero
 8004008:	3812d53a 	srli	r9,r7,20
 800400c:	3806d7fa 	srli	r3,r7,31
 8004010:	02000434 	movhi	r8,16
 8004014:	423fffc4 	addi	r8,r8,-1
 8004018:	4941ffcc 	andi	r5,r9,2047
 800401c:	302f883a 	mov	r23,r6
 8004020:	3a22703a 	and	r17,r7,r8
 8004024:	1ac03fcc 	andi	r11,r3,255
 8004028:	28006226 	beq	r5,zero,80041b4 <__muldf3+0x22c>
 800402c:	0081ffc4 	movi	r2,2047
 8004030:	28805a26 	beq	r5,r2,800419c <__muldf3+0x214>
 8004034:	8a000434 	orhi	r8,r17,16
 8004038:	3004d77a 	srli	r2,r6,29
 800403c:	401090fa 	slli	r8,r8,3
 8004040:	302e90fa 	slli	r23,r6,3
 8004044:	297f0044 	addi	r5,r5,-1023
 8004048:	40a2b03a 	or	r17,r8,r2
 800404c:	0013883a 	mov	r9,zero
 8004050:	4d4cb03a 	or	r6,r9,r21
 8004054:	300c90ba 	slli	r6,r6,2
 8004058:	02020034 	movhi	r8,2048
 800405c:	42101e04 	addi	r8,r8,16504
 8004060:	320d883a 	add	r6,r6,r8
 8004064:	31800017 	ldw	r6,0(r6)
 8004068:	a14b883a 	add	r5,r20,r5
 800406c:	1dacf03a 	xor	r22,r3,r22
 8004070:	2b000044 	addi	r12,r5,1
 8004074:	3000683a 	jmp	r6
 8004078:	080042b4 	orhi	zero,at,266
 800407c:	080042a0 	cmpeqi	zero,at,266
 8004080:	080042a0 	cmpeqi	zero,at,266
 8004084:	0800428c 	andi	zero,at,266
 8004088:	080040d4 	ori	zero,at,259
 800408c:	080040d4 	ori	zero,at,259
 8004090:	08004274 	orhi	zero,at,265
 8004094:	0800428c 	andi	zero,at,266
 8004098:	080040d4 	ori	zero,at,259
 800409c:	08004274 	orhi	zero,at,265
 80040a0:	080040d4 	ori	zero,at,259
 80040a4:	0800428c 	andi	zero,at,266
 80040a8:	080040d8 	cmpnei	zero,at,259
 80040ac:	080040d8 	cmpnei	zero,at,259
 80040b0:	080040d8 	cmpnei	zero,at,259
 80040b4:	080044b0 	cmpltui	zero,at,274
 80040b8:	8104b03a 	or	r2,r16,r4
 80040bc:	10006a1e 	bne	r2,zero,8004268 <__muldf3+0x2e0>
 80040c0:	05400204 	movi	r21,8
 80040c4:	0021883a 	mov	r16,zero
 80040c8:	0025883a 	mov	r18,zero
 80040cc:	02800084 	movi	r10,2
 80040d0:	003fcd06 	br	8004008 <__alt_data_end+0xfc004008>
 80040d4:	b039883a 	mov	fp,r22
 80040d8:	00800084 	movi	r2,2
 80040dc:	50804e1e 	bne	r10,r2,8004218 <__muldf3+0x290>
 80040e0:	e4c0004c 	andi	r19,fp,1
 80040e4:	0101ffc4 	movi	r4,2047
 80040e8:	0021883a 	mov	r16,zero
 80040ec:	0025883a 	mov	r18,zero
 80040f0:	2008953a 	slli	r4,r4,20
 80040f4:	98c03fcc 	andi	r3,r19,255
 80040f8:	01400434 	movhi	r5,16
 80040fc:	297fffc4 	addi	r5,r5,-1
 8004100:	180697fa 	slli	r3,r3,31
 8004104:	8160703a 	and	r16,r16,r5
 8004108:	8120b03a 	or	r16,r16,r4
 800410c:	80c6b03a 	or	r3,r16,r3
 8004110:	9005883a 	mov	r2,r18
 8004114:	dfc00d17 	ldw	ra,52(sp)
 8004118:	df000c17 	ldw	fp,48(sp)
 800411c:	ddc00b17 	ldw	r23,44(sp)
 8004120:	dd800a17 	ldw	r22,40(sp)
 8004124:	dd400917 	ldw	r21,36(sp)
 8004128:	dd000817 	ldw	r20,32(sp)
 800412c:	dcc00717 	ldw	r19,28(sp)
 8004130:	dc800617 	ldw	r18,24(sp)
 8004134:	dc400517 	ldw	r17,20(sp)
 8004138:	dc000417 	ldw	r16,16(sp)
 800413c:	dec00e04 	addi	sp,sp,56
 8004140:	f800283a 	ret
 8004144:	8104b03a 	or	r2,r16,r4
 8004148:	10004226 	beq	r2,zero,8004254 <__muldf3+0x2cc>
 800414c:	8000f926 	beq	r16,zero,8004534 <__muldf3+0x5ac>
 8004150:	8009883a 	mov	r4,r16
 8004154:	d9800315 	stw	r6,12(sp)
 8004158:	d9c00015 	stw	r7,0(sp)
 800415c:	80048040 	call	8004804 <__clzsi2>
 8004160:	d9800317 	ldw	r6,12(sp)
 8004164:	d9c00017 	ldw	r7,0(sp)
 8004168:	1007883a 	mov	r3,r2
 800416c:	01000a04 	movi	r4,40
 8004170:	18bffe04 	addi	r2,r3,-8
 8004174:	20c9c83a 	sub	r4,r4,r3
 8004178:	80a0983a 	sll	r16,r16,r2
 800417c:	8908d83a 	srl	r4,r17,r4
 8004180:	88a4983a 	sll	r18,r17,r2
 8004184:	2420b03a 	or	r16,r4,r16
 8004188:	017f0344 	movi	r5,-1011
 800418c:	28e9c83a 	sub	r20,r5,r3
 8004190:	002b883a 	mov	r21,zero
 8004194:	0015883a 	mov	r10,zero
 8004198:	003f9b06 	br	8004008 <__alt_data_end+0xfc004008>
 800419c:	8984b03a 	or	r2,r17,r6
 80041a0:	10002a1e 	bne	r2,zero,800424c <__muldf3+0x2c4>
 80041a4:	0023883a 	mov	r17,zero
 80041a8:	002f883a 	mov	r23,zero
 80041ac:	02400084 	movi	r9,2
 80041b0:	003fa706 	br	8004050 <__alt_data_end+0xfc004050>
 80041b4:	8984b03a 	or	r2,r17,r6
 80041b8:	10002026 	beq	r2,zero,800423c <__muldf3+0x2b4>
 80041bc:	8800cc26 	beq	r17,zero,80044f0 <__muldf3+0x568>
 80041c0:	8809883a 	mov	r4,r17
 80041c4:	d8c00215 	stw	r3,8(sp)
 80041c8:	d9800315 	stw	r6,12(sp)
 80041cc:	da800015 	stw	r10,0(sp)
 80041d0:	dac00115 	stw	r11,4(sp)
 80041d4:	80048040 	call	8004804 <__clzsi2>
 80041d8:	d8c00217 	ldw	r3,8(sp)
 80041dc:	d9800317 	ldw	r6,12(sp)
 80041e0:	da800017 	ldw	r10,0(sp)
 80041e4:	dac00117 	ldw	r11,4(sp)
 80041e8:	1009883a 	mov	r4,r2
 80041ec:	01400a04 	movi	r5,40
 80041f0:	25fffe04 	addi	r23,r4,-8
 80041f4:	290bc83a 	sub	r5,r5,r4
 80041f8:	8dd0983a 	sll	r8,r17,r23
 80041fc:	314ad83a 	srl	r5,r6,r5
 8004200:	35ee983a 	sll	r23,r6,r23
 8004204:	2a22b03a 	or	r17,r5,r8
 8004208:	017f0344 	movi	r5,-1011
 800420c:	290bc83a 	sub	r5,r5,r4
 8004210:	0013883a 	mov	r9,zero
 8004214:	003f8e06 	br	8004050 <__alt_data_end+0xfc004050>
 8004218:	008000c4 	movi	r2,3
 800421c:	50811d26 	beq	r10,r2,8004694 <__muldf3+0x70c>
 8004220:	00800044 	movi	r2,1
 8004224:	5080e01e 	bne	r10,r2,80045a8 <__muldf3+0x620>
 8004228:	e0a6703a 	and	r19,fp,r2
 800422c:	0009883a 	mov	r4,zero
 8004230:	0021883a 	mov	r16,zero
 8004234:	0025883a 	mov	r18,zero
 8004238:	003fad06 	br	80040f0 <__alt_data_end+0xfc0040f0>
 800423c:	0023883a 	mov	r17,zero
 8004240:	002f883a 	mov	r23,zero
 8004244:	02400044 	movi	r9,1
 8004248:	003f8106 	br	8004050 <__alt_data_end+0xfc004050>
 800424c:	024000c4 	movi	r9,3
 8004250:	003f7f06 	br	8004050 <__alt_data_end+0xfc004050>
 8004254:	05400104 	movi	r21,4
 8004258:	0021883a 	mov	r16,zero
 800425c:	0025883a 	mov	r18,zero
 8004260:	02800044 	movi	r10,1
 8004264:	003f6806 	br	8004008 <__alt_data_end+0xfc004008>
 8004268:	05400304 	movi	r21,12
 800426c:	028000c4 	movi	r10,3
 8004270:	003f6506 	br	8004008 <__alt_data_end+0xfc004008>
 8004274:	04000434 	movhi	r16,16
 8004278:	0027883a 	mov	r19,zero
 800427c:	843fffc4 	addi	r16,r16,-1
 8004280:	04bfffc4 	movi	r18,-1
 8004284:	0101ffc4 	movi	r4,2047
 8004288:	003f9906 	br	80040f0 <__alt_data_end+0xfc0040f0>
 800428c:	8821883a 	mov	r16,r17
 8004290:	b825883a 	mov	r18,r23
 8004294:	5839883a 	mov	fp,r11
 8004298:	4815883a 	mov	r10,r9
 800429c:	003f8e06 	br	80040d8 <__alt_data_end+0xfc0040d8>
 80042a0:	8821883a 	mov	r16,r17
 80042a4:	b825883a 	mov	r18,r23
 80042a8:	b039883a 	mov	fp,r22
 80042ac:	4815883a 	mov	r10,r9
 80042b0:	003f8906 	br	80040d8 <__alt_data_end+0xfc0040d8>
 80042b4:	b80cd43a 	srli	r6,r23,16
 80042b8:	9006d43a 	srli	r3,r18,16
 80042bc:	90bfffcc 	andi	r2,r18,65535
 80042c0:	bdffffcc 	andi	r23,r23,65535
 80042c4:	b891383a 	mul	r8,r23,r2
 80042c8:	b8c9383a 	mul	r4,r23,r3
 80042cc:	309b383a 	mul	r13,r6,r2
 80042d0:	400ed43a 	srli	r7,r8,16
 80042d4:	30df383a 	mul	r15,r6,r3
 80042d8:	235b883a 	add	r13,r4,r13
 80042dc:	69db883a 	add	r13,r13,r7
 80042e0:	6900022e 	bgeu	r13,r4,80042ec <__muldf3+0x364>
 80042e4:	01000074 	movhi	r4,1
 80042e8:	791f883a 	add	r15,r15,r4
 80042ec:	8828d43a 	srli	r20,r17,16
 80042f0:	8c7fffcc 	andi	r17,r17,65535
 80042f4:	888f383a 	mul	r7,r17,r2
 80042f8:	88d3383a 	mul	r9,r17,r3
 80042fc:	a0a5383a 	mul	r18,r20,r2
 8004300:	3816d43a 	srli	r11,r7,16
 8004304:	6814943a 	slli	r10,r13,16
 8004308:	4ca5883a 	add	r18,r9,r18
 800430c:	423fffcc 	andi	r8,r8,65535
 8004310:	92e5883a 	add	r18,r18,r11
 8004314:	6808d43a 	srli	r4,r13,16
 8004318:	5215883a 	add	r10,r10,r8
 800431c:	a0c7383a 	mul	r3,r20,r3
 8004320:	9240022e 	bgeu	r18,r9,800432c <__muldf3+0x3a4>
 8004324:	00800074 	movhi	r2,1
 8004328:	1887883a 	add	r3,r3,r2
 800432c:	802ad43a 	srli	r21,r16,16
 8004330:	80bfffcc 	andi	r2,r16,65535
 8004334:	b893383a 	mul	r9,r23,r2
 8004338:	3091383a 	mul	r8,r6,r2
 800433c:	bd6f383a 	mul	r23,r23,r21
 8004340:	9026943a 	slli	r19,r18,16
 8004344:	481ad43a 	srli	r13,r9,16
 8004348:	9024d43a 	srli	r18,r18,16
 800434c:	39ffffcc 	andi	r7,r7,65535
 8004350:	ba11883a 	add	r8,r23,r8
 8004354:	99e7883a 	add	r19,r19,r7
 8004358:	4351883a 	add	r8,r8,r13
 800435c:	1c97883a 	add	r11,r3,r18
 8004360:	354d383a 	mul	r6,r6,r21
 8004364:	9925883a 	add	r18,r19,r4
 8004368:	45c0022e 	bgeu	r8,r23,8004374 <__muldf3+0x3ec>
 800436c:	00c00074 	movhi	r3,1
 8004370:	30cd883a 	add	r6,r6,r3
 8004374:	8889383a 	mul	r4,r17,r2
 8004378:	8d63383a 	mul	r17,r17,r21
 800437c:	a085383a 	mul	r2,r20,r2
 8004380:	200ed43a 	srli	r7,r4,16
 8004384:	401cd43a 	srli	r14,r8,16
 8004388:	401a943a 	slli	r13,r8,16
 800438c:	8885883a 	add	r2,r17,r2
 8004390:	4a3fffcc 	andi	r8,r9,65535
 8004394:	11c5883a 	add	r2,r2,r7
 8004398:	339d883a 	add	r14,r6,r14
 800439c:	6a11883a 	add	r8,r13,r8
 80043a0:	a561383a 	mul	r16,r20,r21
 80043a4:	1440022e 	bgeu	r2,r17,80043b0 <__muldf3+0x428>
 80043a8:	00c00074 	movhi	r3,1
 80043ac:	80e1883a 	add	r16,r16,r3
 80043b0:	1006943a 	slli	r3,r2,16
 80043b4:	213fffcc 	andi	r4,r4,65535
 80043b8:	93db883a 	add	r13,r18,r15
 80043bc:	1909883a 	add	r4,r3,r4
 80043c0:	22c7883a 	add	r3,r4,r11
 80043c4:	6cd3803a 	cmpltu	r9,r13,r19
 80043c8:	6a09883a 	add	r4,r13,r8
 80043cc:	1a5b883a 	add	r13,r3,r9
 80043d0:	2211803a 	cmpltu	r8,r4,r8
 80043d4:	734d883a 	add	r6,r14,r13
 80043d8:	100ed43a 	srli	r7,r2,16
 80043dc:	6a53803a 	cmpltu	r9,r13,r9
 80043e0:	3205883a 	add	r2,r6,r8
 80043e4:	1ac7803a 	cmpltu	r3,r3,r11
 80043e8:	1211803a 	cmpltu	r8,r2,r8
 80043ec:	48c6b03a 	or	r3,r9,r3
 80043f0:	338d803a 	cmpltu	r6,r6,r14
 80043f4:	19c7883a 	add	r3,r3,r7
 80043f8:	418cb03a 	or	r6,r8,r6
 80043fc:	1987883a 	add	r3,r3,r6
 8004400:	2024927a 	slli	r18,r4,9
 8004404:	1c07883a 	add	r3,r3,r16
 8004408:	1806927a 	slli	r3,r3,9
 800440c:	1020d5fa 	srli	r16,r2,23
 8004410:	2008d5fa 	srli	r4,r4,23
 8004414:	9294b03a 	or	r10,r18,r10
 8004418:	1004927a 	slli	r2,r2,9
 800441c:	5024c03a 	cmpne	r18,r10,zero
 8004420:	1c20b03a 	or	r16,r3,r16
 8004424:	9108b03a 	or	r4,r18,r4
 8004428:	80c0402c 	andhi	r3,r16,256
 800442c:	20a4b03a 	or	r18,r4,r2
 8004430:	18000726 	beq	r3,zero,8004450 <__muldf3+0x4c8>
 8004434:	9006d07a 	srli	r3,r18,1
 8004438:	800897fa 	slli	r4,r16,31
 800443c:	9080004c 	andi	r2,r18,1
 8004440:	8020d07a 	srli	r16,r16,1
 8004444:	10c4b03a 	or	r2,r2,r3
 8004448:	1124b03a 	or	r18,r2,r4
 800444c:	600b883a 	mov	r5,r12
 8004450:	2900ffc4 	addi	r4,r5,1023
 8004454:	01004b0e 	bge	zero,r4,8004584 <__muldf3+0x5fc>
 8004458:	908001cc 	andi	r2,r18,7
 800445c:	10000726 	beq	r2,zero,800447c <__muldf3+0x4f4>
 8004460:	90c003cc 	andi	r3,r18,15
 8004464:	00800104 	movi	r2,4
 8004468:	18800426 	beq	r3,r2,800447c <__muldf3+0x4f4>
 800446c:	9087883a 	add	r3,r18,r2
 8004470:	1c85803a 	cmpltu	r2,r3,r18
 8004474:	80a1883a 	add	r16,r16,r2
 8004478:	1825883a 	mov	r18,r3
 800447c:	8080402c 	andhi	r2,r16,256
 8004480:	10000426 	beq	r2,zero,8004494 <__muldf3+0x50c>
 8004484:	00bfc034 	movhi	r2,65280
 8004488:	10bfffc4 	addi	r2,r2,-1
 800448c:	29010004 	addi	r4,r5,1024
 8004490:	80a0703a 	and	r16,r16,r2
 8004494:	0081ff84 	movi	r2,2046
 8004498:	1100320e 	bge	r2,r4,8004564 <__muldf3+0x5dc>
 800449c:	b4c0004c 	andi	r19,r22,1
 80044a0:	0101ffc4 	movi	r4,2047
 80044a4:	0021883a 	mov	r16,zero
 80044a8:	0025883a 	mov	r18,zero
 80044ac:	003f1006 	br	80040f0 <__alt_data_end+0xfc0040f0>
 80044b0:	8080022c 	andhi	r2,r16,8
 80044b4:	10000926 	beq	r2,zero,80044dc <__muldf3+0x554>
 80044b8:	8880022c 	andhi	r2,r17,8
 80044bc:	1000071e 	bne	r2,zero,80044dc <__muldf3+0x554>
 80044c0:	00800434 	movhi	r2,16
 80044c4:	8c000234 	orhi	r16,r17,8
 80044c8:	10bfffc4 	addi	r2,r2,-1
 80044cc:	1827883a 	mov	r19,r3
 80044d0:	80a0703a 	and	r16,r16,r2
 80044d4:	b825883a 	mov	r18,r23
 80044d8:	003f6a06 	br	8004284 <__alt_data_end+0xfc004284>
 80044dc:	00800434 	movhi	r2,16
 80044e0:	84000234 	orhi	r16,r16,8
 80044e4:	10bfffc4 	addi	r2,r2,-1
 80044e8:	80a0703a 	and	r16,r16,r2
 80044ec:	003f6506 	br	8004284 <__alt_data_end+0xfc004284>
 80044f0:	3009883a 	mov	r4,r6
 80044f4:	d8c00215 	stw	r3,8(sp)
 80044f8:	d9800315 	stw	r6,12(sp)
 80044fc:	da800015 	stw	r10,0(sp)
 8004500:	dac00115 	stw	r11,4(sp)
 8004504:	80048040 	call	8004804 <__clzsi2>
 8004508:	11000804 	addi	r4,r2,32
 800450c:	014009c4 	movi	r5,39
 8004510:	d8c00217 	ldw	r3,8(sp)
 8004514:	d9800317 	ldw	r6,12(sp)
 8004518:	da800017 	ldw	r10,0(sp)
 800451c:	dac00117 	ldw	r11,4(sp)
 8004520:	293f320e 	bge	r5,r4,80041ec <__alt_data_end+0xfc0041ec>
 8004524:	10bffe04 	addi	r2,r2,-8
 8004528:	b8a2983a 	sll	r17,r23,r2
 800452c:	002f883a 	mov	r23,zero
 8004530:	003f3506 	br	8004208 <__alt_data_end+0xfc004208>
 8004534:	d9800315 	stw	r6,12(sp)
 8004538:	d9c00015 	stw	r7,0(sp)
 800453c:	80048040 	call	8004804 <__clzsi2>
 8004540:	10c00804 	addi	r3,r2,32
 8004544:	010009c4 	movi	r4,39
 8004548:	d9800317 	ldw	r6,12(sp)
 800454c:	d9c00017 	ldw	r7,0(sp)
 8004550:	20ff060e 	bge	r4,r3,800416c <__alt_data_end+0xfc00416c>
 8004554:	10bffe04 	addi	r2,r2,-8
 8004558:	88a0983a 	sll	r16,r17,r2
 800455c:	0025883a 	mov	r18,zero
 8004560:	003f0906 	br	8004188 <__alt_data_end+0xfc004188>
 8004564:	9004d0fa 	srli	r2,r18,3
 8004568:	8024977a 	slli	r18,r16,29
 800456c:	8020927a 	slli	r16,r16,9
 8004570:	2101ffcc 	andi	r4,r4,2047
 8004574:	90a4b03a 	or	r18,r18,r2
 8004578:	8020d33a 	srli	r16,r16,12
 800457c:	b4c0004c 	andi	r19,r22,1
 8004580:	003edb06 	br	80040f0 <__alt_data_end+0xfc0040f0>
 8004584:	00ff0084 	movi	r3,-1022
 8004588:	1947c83a 	sub	r3,r3,r5
 800458c:	00800e04 	movi	r2,56
 8004590:	10c0080e 	bge	r2,r3,80045b4 <__muldf3+0x62c>
 8004594:	b4c0004c 	andi	r19,r22,1
 8004598:	0009883a 	mov	r4,zero
 800459c:	0021883a 	mov	r16,zero
 80045a0:	0025883a 	mov	r18,zero
 80045a4:	003ed206 	br	80040f0 <__alt_data_end+0xfc0040f0>
 80045a8:	600b883a 	mov	r5,r12
 80045ac:	e02d883a 	mov	r22,fp
 80045b0:	003fa706 	br	8004450 <__alt_data_end+0xfc004450>
 80045b4:	008007c4 	movi	r2,31
 80045b8:	10c01816 	blt	r2,r3,800461c <__muldf3+0x694>
 80045bc:	29410784 	addi	r5,r5,1054
 80045c0:	8144983a 	sll	r2,r16,r5
 80045c4:	90c8d83a 	srl	r4,r18,r3
 80045c8:	914a983a 	sll	r5,r18,r5
 80045cc:	80c6d83a 	srl	r3,r16,r3
 80045d0:	2088b03a 	or	r4,r4,r2
 80045d4:	2804c03a 	cmpne	r2,r5,zero
 80045d8:	2084b03a 	or	r2,r4,r2
 80045dc:	110001cc 	andi	r4,r2,7
 80045e0:	20000726 	beq	r4,zero,8004600 <__muldf3+0x678>
 80045e4:	114003cc 	andi	r5,r2,15
 80045e8:	01000104 	movi	r4,4
 80045ec:	29000426 	beq	r5,r4,8004600 <__muldf3+0x678>
 80045f0:	11000104 	addi	r4,r2,4
 80045f4:	2085803a 	cmpltu	r2,r4,r2
 80045f8:	1887883a 	add	r3,r3,r2
 80045fc:	2005883a 	mov	r2,r4
 8004600:	1900202c 	andhi	r4,r3,128
 8004604:	20001826 	beq	r4,zero,8004668 <__muldf3+0x6e0>
 8004608:	b4c0004c 	andi	r19,r22,1
 800460c:	01000044 	movi	r4,1
 8004610:	0021883a 	mov	r16,zero
 8004614:	0025883a 	mov	r18,zero
 8004618:	003eb506 	br	80040f0 <__alt_data_end+0xfc0040f0>
 800461c:	00bef884 	movi	r2,-1054
 8004620:	1145c83a 	sub	r2,r2,r5
 8004624:	8088d83a 	srl	r4,r16,r2
 8004628:	00800804 	movi	r2,32
 800462c:	18801726 	beq	r3,r2,800468c <__muldf3+0x704>
 8004630:	28810f84 	addi	r2,r5,1086
 8004634:	8084983a 	sll	r2,r16,r2
 8004638:	1484b03a 	or	r2,r2,r18
 800463c:	1004c03a 	cmpne	r2,r2,zero
 8004640:	1104b03a 	or	r2,r2,r4
 8004644:	10c001cc 	andi	r3,r2,7
 8004648:	18000b1e 	bne	r3,zero,8004678 <__muldf3+0x6f0>
 800464c:	0021883a 	mov	r16,zero
 8004650:	1004d0fa 	srli	r2,r2,3
 8004654:	b4c0004c 	andi	r19,r22,1
 8004658:	0009883a 	mov	r4,zero
 800465c:	10e4b03a 	or	r18,r2,r3
 8004660:	003ea306 	br	80040f0 <__alt_data_end+0xfc0040f0>
 8004664:	0007883a 	mov	r3,zero
 8004668:	1820927a 	slli	r16,r3,9
 800466c:	1806977a 	slli	r3,r3,29
 8004670:	8020d33a 	srli	r16,r16,12
 8004674:	003ff606 	br	8004650 <__alt_data_end+0xfc004650>
 8004678:	110003cc 	andi	r4,r2,15
 800467c:	00c00104 	movi	r3,4
 8004680:	20fff826 	beq	r4,r3,8004664 <__alt_data_end+0xfc004664>
 8004684:	0007883a 	mov	r3,zero
 8004688:	003fd906 	br	80045f0 <__alt_data_end+0xfc0045f0>
 800468c:	0005883a 	mov	r2,zero
 8004690:	003fe906 	br	8004638 <__alt_data_end+0xfc004638>
 8004694:	00800434 	movhi	r2,16
 8004698:	84000234 	orhi	r16,r16,8
 800469c:	10bfffc4 	addi	r2,r2,-1
 80046a0:	e4c0004c 	andi	r19,fp,1
 80046a4:	80a0703a 	and	r16,r16,r2
 80046a8:	003ef606 	br	8004284 <__alt_data_end+0xfc004284>

080046ac <__fixdfsi>:
 80046ac:	2806d53a 	srli	r3,r5,20
 80046b0:	00800434 	movhi	r2,16
 80046b4:	10bfffc4 	addi	r2,r2,-1
 80046b8:	18c1ffcc 	andi	r3,r3,2047
 80046bc:	0180ff84 	movi	r6,1022
 80046c0:	2884703a 	and	r2,r5,r2
 80046c4:	280ad7fa 	srli	r5,r5,31
 80046c8:	30c0130e 	bge	r6,r3,8004718 <__fixdfsi+0x6c>
 80046cc:	01810744 	movi	r6,1053
 80046d0:	30c00d16 	blt	r6,r3,8004708 <__fixdfsi+0x5c>
 80046d4:	01810cc4 	movi	r6,1075
 80046d8:	30cdc83a 	sub	r6,r6,r3
 80046dc:	01c007c4 	movi	r7,31
 80046e0:	10800434 	orhi	r2,r2,16
 80046e4:	39800e0e 	bge	r7,r6,8004720 <__fixdfsi+0x74>
 80046e8:	010104c4 	movi	r4,1043
 80046ec:	20c7c83a 	sub	r3,r4,r3
 80046f0:	10c6d83a 	srl	r3,r2,r3
 80046f4:	29403fcc 	andi	r5,r5,255
 80046f8:	0145c83a 	sub	r2,zero,r5
 80046fc:	1884f03a 	xor	r2,r3,r2
 8004700:	1145883a 	add	r2,r2,r5
 8004704:	f800283a 	ret
 8004708:	00a00034 	movhi	r2,32768
 800470c:	10bfffc4 	addi	r2,r2,-1
 8004710:	2885883a 	add	r2,r5,r2
 8004714:	f800283a 	ret
 8004718:	0005883a 	mov	r2,zero
 800471c:	f800283a 	ret
 8004720:	18fefb44 	addi	r3,r3,-1043
 8004724:	2188d83a 	srl	r4,r4,r6
 8004728:	10c6983a 	sll	r3,r2,r3
 800472c:	20c6b03a 	or	r3,r4,r3
 8004730:	003ff006 	br	80046f4 <__alt_data_end+0xfc0046f4>

08004734 <__floatsidf>:
 8004734:	defffd04 	addi	sp,sp,-12
 8004738:	dc400115 	stw	r17,4(sp)
 800473c:	dfc00215 	stw	ra,8(sp)
 8004740:	dc000015 	stw	r16,0(sp)
 8004744:	2023883a 	mov	r17,r4
 8004748:	20001426 	beq	r4,zero,800479c <__floatsidf+0x68>
 800474c:	2020d7fa 	srli	r16,r4,31
 8004750:	80000126 	beq	r16,zero,8004758 <__floatsidf+0x24>
 8004754:	0123c83a 	sub	r17,zero,r4
 8004758:	8809883a 	mov	r4,r17
 800475c:	80048040 	call	8004804 <__clzsi2>
 8004760:	01410784 	movi	r5,1054
 8004764:	00c00284 	movi	r3,10
 8004768:	288bc83a 	sub	r5,r5,r2
 800476c:	18801c16 	blt	r3,r2,80047e0 <__floatsidf+0xac>
 8004770:	00c002c4 	movi	r3,11
 8004774:	1887c83a 	sub	r3,r3,r2
 8004778:	88c8d83a 	srl	r4,r17,r3
 800477c:	00c00434 	movhi	r3,16
 8004780:	18ffffc4 	addi	r3,r3,-1
 8004784:	10800544 	addi	r2,r2,21
 8004788:	20c8703a 	and	r4,r4,r3
 800478c:	8884983a 	sll	r2,r17,r2
 8004790:	28c1ffcc 	andi	r3,r5,2047
 8004794:	800d883a 	mov	r6,r16
 8004798:	00000406 	br	80047ac <__floatsidf+0x78>
 800479c:	000d883a 	mov	r6,zero
 80047a0:	0007883a 	mov	r3,zero
 80047a4:	0009883a 	mov	r4,zero
 80047a8:	0005883a 	mov	r2,zero
 80047ac:	180a953a 	slli	r5,r3,20
 80047b0:	31803fcc 	andi	r6,r6,255
 80047b4:	00c00434 	movhi	r3,16
 80047b8:	300c97fa 	slli	r6,r6,31
 80047bc:	18ffffc4 	addi	r3,r3,-1
 80047c0:	20c6703a 	and	r3,r4,r3
 80047c4:	1946b03a 	or	r3,r3,r5
 80047c8:	1986b03a 	or	r3,r3,r6
 80047cc:	dfc00217 	ldw	ra,8(sp)
 80047d0:	dc400117 	ldw	r17,4(sp)
 80047d4:	dc000017 	ldw	r16,0(sp)
 80047d8:	dec00304 	addi	sp,sp,12
 80047dc:	f800283a 	ret
 80047e0:	10fffd44 	addi	r3,r2,-11
 80047e4:	88c8983a 	sll	r4,r17,r3
 80047e8:	00800434 	movhi	r2,16
 80047ec:	10bfffc4 	addi	r2,r2,-1
 80047f0:	2088703a 	and	r4,r4,r2
 80047f4:	28c1ffcc 	andi	r3,r5,2047
 80047f8:	800d883a 	mov	r6,r16
 80047fc:	0005883a 	mov	r2,zero
 8004800:	003fea06 	br	80047ac <__alt_data_end+0xfc0047ac>

08004804 <__clzsi2>:
 8004804:	00bfffd4 	movui	r2,65535
 8004808:	11000b36 	bltu	r2,r4,8004838 <__clzsi2+0x34>
 800480c:	00803fc4 	movi	r2,255
 8004810:	1100122e 	bgeu	r2,r4,800485c <__clzsi2+0x58>
 8004814:	00c00204 	movi	r3,8
 8004818:	01400604 	movi	r5,24
 800481c:	20c8d83a 	srl	r4,r4,r3
 8004820:	008200b4 	movhi	r2,2050
 8004824:	1080f304 	addi	r2,r2,972
 8004828:	1109883a 	add	r4,r2,r4
 800482c:	20800003 	ldbu	r2,0(r4)
 8004830:	2885c83a 	sub	r2,r5,r2
 8004834:	f800283a 	ret
 8004838:	00804034 	movhi	r2,256
 800483c:	10bfffc4 	addi	r2,r2,-1
 8004840:	11000336 	bltu	r2,r4,8004850 <__clzsi2+0x4c>
 8004844:	00c00404 	movi	r3,16
 8004848:	180b883a 	mov	r5,r3
 800484c:	003ff306 	br	800481c <__alt_data_end+0xfc00481c>
 8004850:	00c00604 	movi	r3,24
 8004854:	01400204 	movi	r5,8
 8004858:	003ff006 	br	800481c <__alt_data_end+0xfc00481c>
 800485c:	0007883a 	mov	r3,zero
 8004860:	01400804 	movi	r5,32
 8004864:	003fed06 	br	800481c <__alt_data_end+0xfc00481c>

08004868 <clock>:
 8004868:	008200b4 	movhi	r2,2050
 800486c:	10888a04 	addi	r2,r2,8744
 8004870:	11000017 	ldw	r4,0(r2)
 8004874:	defffb04 	addi	sp,sp,-20
 8004878:	d80b883a 	mov	r5,sp
 800487c:	dfc00415 	stw	ra,16(sp)
 8004880:	80073180 	call	8007318 <_times_r>
 8004884:	00ffffc4 	movi	r3,-1
 8004888:	10c00726 	beq	r2,r3,80048a8 <clock+0x40>
 800488c:	d8c00117 	ldw	r3,4(sp)
 8004890:	d8800017 	ldw	r2,0(sp)
 8004894:	1885883a 	add	r2,r3,r2
 8004898:	d8c00217 	ldw	r3,8(sp)
 800489c:	10c7883a 	add	r3,r2,r3
 80048a0:	d8800317 	ldw	r2,12(sp)
 80048a4:	1885883a 	add	r2,r3,r2
 80048a8:	dfc00417 	ldw	ra,16(sp)
 80048ac:	dec00504 	addi	sp,sp,20
 80048b0:	f800283a 	ret

080048b4 <malloc>:
 80048b4:	008200b4 	movhi	r2,2050
 80048b8:	10888a04 	addi	r2,r2,8744
 80048bc:	200b883a 	mov	r5,r4
 80048c0:	11000017 	ldw	r4,0(r2)
 80048c4:	80048dc1 	jmpi	80048dc <_malloc_r>

080048c8 <free>:
 80048c8:	008200b4 	movhi	r2,2050
 80048cc:	10888a04 	addi	r2,r2,8744
 80048d0:	200b883a 	mov	r5,r4
 80048d4:	11000017 	ldw	r4,0(r2)
 80048d8:	800b4b41 	jmpi	800b4b4 <_free_r>

080048dc <_malloc_r>:
 80048dc:	defff504 	addi	sp,sp,-44
 80048e0:	dc800315 	stw	r18,12(sp)
 80048e4:	dfc00a15 	stw	ra,40(sp)
 80048e8:	df000915 	stw	fp,36(sp)
 80048ec:	ddc00815 	stw	r23,32(sp)
 80048f0:	dd800715 	stw	r22,28(sp)
 80048f4:	dd400615 	stw	r21,24(sp)
 80048f8:	dd000515 	stw	r20,20(sp)
 80048fc:	dcc00415 	stw	r19,16(sp)
 8004900:	dc400215 	stw	r17,8(sp)
 8004904:	dc000115 	stw	r16,4(sp)
 8004908:	288002c4 	addi	r2,r5,11
 800490c:	00c00584 	movi	r3,22
 8004910:	2025883a 	mov	r18,r4
 8004914:	18802a2e 	bgeu	r3,r2,80049c0 <_malloc_r+0xe4>
 8004918:	047ffe04 	movi	r17,-8
 800491c:	1462703a 	and	r17,r2,r17
 8004920:	88009e16 	blt	r17,zero,8004b9c <_malloc_r+0x2c0>
 8004924:	89409d36 	bltu	r17,r5,8004b9c <_malloc_r+0x2c0>
 8004928:	80132d40 	call	80132d4 <__malloc_lock>
 800492c:	00807dc4 	movi	r2,503
 8004930:	14402736 	bltu	r2,r17,80049d0 <_malloc_r+0xf4>
 8004934:	8806d0fa 	srli	r3,r17,3
 8004938:	04c200b4 	movhi	r19,2050
 800493c:	9cc2dc04 	addi	r19,r19,2928
 8004940:	18c5883a 	add	r2,r3,r3
 8004944:	1085883a 	add	r2,r2,r2
 8004948:	1085883a 	add	r2,r2,r2
 800494c:	9885883a 	add	r2,r19,r2
 8004950:	14000317 	ldw	r16,12(r2)
 8004954:	80814a26 	beq	r16,r2,8004e80 <_malloc_r+0x5a4>
 8004958:	80c00117 	ldw	r3,4(r16)
 800495c:	81000317 	ldw	r4,12(r16)
 8004960:	00bfff04 	movi	r2,-4
 8004964:	1884703a 	and	r2,r3,r2
 8004968:	81400217 	ldw	r5,8(r16)
 800496c:	8085883a 	add	r2,r16,r2
 8004970:	10c00117 	ldw	r3,4(r2)
 8004974:	29000315 	stw	r4,12(r5)
 8004978:	21400215 	stw	r5,8(r4)
 800497c:	18c00054 	ori	r3,r3,1
 8004980:	10c00115 	stw	r3,4(r2)
 8004984:	9009883a 	mov	r4,r18
 8004988:	80132f40 	call	80132f4 <__malloc_unlock>
 800498c:	80800204 	addi	r2,r16,8
 8004990:	dfc00a17 	ldw	ra,40(sp)
 8004994:	df000917 	ldw	fp,36(sp)
 8004998:	ddc00817 	ldw	r23,32(sp)
 800499c:	dd800717 	ldw	r22,28(sp)
 80049a0:	dd400617 	ldw	r21,24(sp)
 80049a4:	dd000517 	ldw	r20,20(sp)
 80049a8:	dcc00417 	ldw	r19,16(sp)
 80049ac:	dc800317 	ldw	r18,12(sp)
 80049b0:	dc400217 	ldw	r17,8(sp)
 80049b4:	dc000117 	ldw	r16,4(sp)
 80049b8:	dec00b04 	addi	sp,sp,44
 80049bc:	f800283a 	ret
 80049c0:	04400404 	movi	r17,16
 80049c4:	89407536 	bltu	r17,r5,8004b9c <_malloc_r+0x2c0>
 80049c8:	80132d40 	call	80132d4 <__malloc_lock>
 80049cc:	003fd906 	br	8004934 <__alt_data_end+0xfc004934>
 80049d0:	8806d27a 	srli	r3,r17,9
 80049d4:	18007526 	beq	r3,zero,8004bac <_malloc_r+0x2d0>
 80049d8:	00800104 	movi	r2,4
 80049dc:	10c0ef36 	bltu	r2,r3,8004d9c <_malloc_r+0x4c0>
 80049e0:	8806d1ba 	srli	r3,r17,6
 80049e4:	19c00e04 	addi	r7,r3,56
 80049e8:	39cb883a 	add	r5,r7,r7
 80049ec:	04c200b4 	movhi	r19,2050
 80049f0:	294b883a 	add	r5,r5,r5
 80049f4:	9cc2dc04 	addi	r19,r19,2928
 80049f8:	294b883a 	add	r5,r5,r5
 80049fc:	994b883a 	add	r5,r19,r5
 8004a00:	2c000317 	ldw	r16,12(r5)
 8004a04:	2c000e26 	beq	r5,r16,8004a40 <_malloc_r+0x164>
 8004a08:	80800117 	ldw	r2,4(r16)
 8004a0c:	01bfff04 	movi	r6,-4
 8004a10:	010003c4 	movi	r4,15
 8004a14:	1184703a 	and	r2,r2,r6
 8004a18:	1447c83a 	sub	r3,r2,r17
 8004a1c:	20c00716 	blt	r4,r3,8004a3c <_malloc_r+0x160>
 8004a20:	1800650e 	bge	r3,zero,8004bb8 <_malloc_r+0x2dc>
 8004a24:	84000317 	ldw	r16,12(r16)
 8004a28:	2c000526 	beq	r5,r16,8004a40 <_malloc_r+0x164>
 8004a2c:	80800117 	ldw	r2,4(r16)
 8004a30:	1184703a 	and	r2,r2,r6
 8004a34:	1447c83a 	sub	r3,r2,r17
 8004a38:	20fff90e 	bge	r4,r3,8004a20 <__alt_data_end+0xfc004a20>
 8004a3c:	39ffffc4 	addi	r7,r7,-1
 8004a40:	38c00044 	addi	r3,r7,1
 8004a44:	018200b4 	movhi	r6,2050
 8004a48:	9c000417 	ldw	r16,16(r19)
 8004a4c:	3182dc04 	addi	r6,r6,2928
 8004a50:	32400204 	addi	r9,r6,8
 8004a54:	82410326 	beq	r16,r9,8004e64 <_malloc_r+0x588>
 8004a58:	81000117 	ldw	r4,4(r16)
 8004a5c:	00bfff04 	movi	r2,-4
 8004a60:	208e703a 	and	r7,r4,r2
 8004a64:	3c45c83a 	sub	r2,r7,r17
 8004a68:	010003c4 	movi	r4,15
 8004a6c:	2080ee16 	blt	r4,r2,8004e28 <_malloc_r+0x54c>
 8004a70:	32400515 	stw	r9,20(r6)
 8004a74:	32400415 	stw	r9,16(r6)
 8004a78:	1000510e 	bge	r2,zero,8004bc0 <_malloc_r+0x2e4>
 8004a7c:	00807fc4 	movi	r2,511
 8004a80:	11c0ce36 	bltu	r2,r7,8004dbc <_malloc_r+0x4e0>
 8004a84:	3808d0fa 	srli	r4,r7,3
 8004a88:	01c00044 	movi	r7,1
 8004a8c:	30800117 	ldw	r2,4(r6)
 8004a90:	210b883a 	add	r5,r4,r4
 8004a94:	294b883a 	add	r5,r5,r5
 8004a98:	2009d0ba 	srai	r4,r4,2
 8004a9c:	294b883a 	add	r5,r5,r5
 8004aa0:	298b883a 	add	r5,r5,r6
 8004aa4:	2a000217 	ldw	r8,8(r5)
 8004aa8:	3908983a 	sll	r4,r7,r4
 8004aac:	81400315 	stw	r5,12(r16)
 8004ab0:	82000215 	stw	r8,8(r16)
 8004ab4:	2088b03a 	or	r4,r4,r2
 8004ab8:	2c000215 	stw	r16,8(r5)
 8004abc:	31000115 	stw	r4,4(r6)
 8004ac0:	44000315 	stw	r16,12(r8)
 8004ac4:	1805d0ba 	srai	r2,r3,2
 8004ac8:	01400044 	movi	r5,1
 8004acc:	288a983a 	sll	r5,r5,r2
 8004ad0:	21404336 	bltu	r4,r5,8004be0 <_malloc_r+0x304>
 8004ad4:	2144703a 	and	r2,r4,r5
 8004ad8:	10000a1e 	bne	r2,zero,8004b04 <_malloc_r+0x228>
 8004adc:	00bfff04 	movi	r2,-4
 8004ae0:	294b883a 	add	r5,r5,r5
 8004ae4:	1886703a 	and	r3,r3,r2
 8004ae8:	2144703a 	and	r2,r4,r5
 8004aec:	18c00104 	addi	r3,r3,4
 8004af0:	1000041e 	bne	r2,zero,8004b04 <_malloc_r+0x228>
 8004af4:	294b883a 	add	r5,r5,r5
 8004af8:	2144703a 	and	r2,r4,r5
 8004afc:	18c00104 	addi	r3,r3,4
 8004b00:	103ffc26 	beq	r2,zero,8004af4 <__alt_data_end+0xfc004af4>
 8004b04:	023fff04 	movi	r8,-4
 8004b08:	01c003c4 	movi	r7,15
 8004b0c:	18c5883a 	add	r2,r3,r3
 8004b10:	1085883a 	add	r2,r2,r2
 8004b14:	1085883a 	add	r2,r2,r2
 8004b18:	9895883a 	add	r10,r19,r2
 8004b1c:	52c00304 	addi	r11,r10,12
 8004b20:	1819883a 	mov	r12,r3
 8004b24:	5c000017 	ldw	r16,0(r11)
 8004b28:	59bffd04 	addi	r6,r11,-12
 8004b2c:	8180041e 	bne	r16,r6,8004b40 <_malloc_r+0x264>
 8004b30:	0000ce06 	br	8004e6c <_malloc_r+0x590>
 8004b34:	2000d70e 	bge	r4,zero,8004e94 <_malloc_r+0x5b8>
 8004b38:	84000317 	ldw	r16,12(r16)
 8004b3c:	8180cb26 	beq	r16,r6,8004e6c <_malloc_r+0x590>
 8004b40:	80800117 	ldw	r2,4(r16)
 8004b44:	1204703a 	and	r2,r2,r8
 8004b48:	1449c83a 	sub	r4,r2,r17
 8004b4c:	393ff90e 	bge	r7,r4,8004b34 <__alt_data_end+0xfc004b34>
 8004b50:	80800317 	ldw	r2,12(r16)
 8004b54:	80c00217 	ldw	r3,8(r16)
 8004b58:	89400054 	ori	r5,r17,1
 8004b5c:	81400115 	stw	r5,4(r16)
 8004b60:	18800315 	stw	r2,12(r3)
 8004b64:	10c00215 	stw	r3,8(r2)
 8004b68:	8463883a 	add	r17,r16,r17
 8004b6c:	9c400515 	stw	r17,20(r19)
 8004b70:	9c400415 	stw	r17,16(r19)
 8004b74:	20800054 	ori	r2,r4,1
 8004b78:	88800115 	stw	r2,4(r17)
 8004b7c:	8a400315 	stw	r9,12(r17)
 8004b80:	8a400215 	stw	r9,8(r17)
 8004b84:	8923883a 	add	r17,r17,r4
 8004b88:	89000015 	stw	r4,0(r17)
 8004b8c:	9009883a 	mov	r4,r18
 8004b90:	80132f40 	call	80132f4 <__malloc_unlock>
 8004b94:	80800204 	addi	r2,r16,8
 8004b98:	003f7d06 	br	8004990 <__alt_data_end+0xfc004990>
 8004b9c:	00800304 	movi	r2,12
 8004ba0:	90800015 	stw	r2,0(r18)
 8004ba4:	0005883a 	mov	r2,zero
 8004ba8:	003f7906 	br	8004990 <__alt_data_end+0xfc004990>
 8004bac:	01401f84 	movi	r5,126
 8004bb0:	01c00fc4 	movi	r7,63
 8004bb4:	003f8d06 	br	80049ec <__alt_data_end+0xfc0049ec>
 8004bb8:	81000317 	ldw	r4,12(r16)
 8004bbc:	003f6a06 	br	8004968 <__alt_data_end+0xfc004968>
 8004bc0:	81c5883a 	add	r2,r16,r7
 8004bc4:	10c00117 	ldw	r3,4(r2)
 8004bc8:	9009883a 	mov	r4,r18
 8004bcc:	18c00054 	ori	r3,r3,1
 8004bd0:	10c00115 	stw	r3,4(r2)
 8004bd4:	80132f40 	call	80132f4 <__malloc_unlock>
 8004bd8:	80800204 	addi	r2,r16,8
 8004bdc:	003f6c06 	br	8004990 <__alt_data_end+0xfc004990>
 8004be0:	9c000217 	ldw	r16,8(r19)
 8004be4:	00bfff04 	movi	r2,-4
 8004be8:	85800117 	ldw	r22,4(r16)
 8004bec:	b0ac703a 	and	r22,r22,r2
 8004bf0:	b4400336 	bltu	r22,r17,8004c00 <_malloc_r+0x324>
 8004bf4:	b445c83a 	sub	r2,r22,r17
 8004bf8:	00c003c4 	movi	r3,15
 8004bfc:	18805d16 	blt	r3,r2,8004d74 <_malloc_r+0x498>
 8004c00:	05c200b4 	movhi	r23,2050
 8004c04:	008200b4 	movhi	r2,2050
 8004c08:	bdc88b04 	addi	r23,r23,8748
 8004c0c:	108f6c04 	addi	r2,r2,15792
 8004c10:	15400017 	ldw	r21,0(r2)
 8004c14:	b9000017 	ldw	r4,0(r23)
 8004c18:	00ffffc4 	movi	r3,-1
 8004c1c:	858d883a 	add	r6,r16,r22
 8004c20:	8d6b883a 	add	r21,r17,r21
 8004c24:	20c0e426 	beq	r4,r3,8004fb8 <_malloc_r+0x6dc>
 8004c28:	ad4403c4 	addi	r21,r21,4111
 8004c2c:	00fc0004 	movi	r3,-4096
 8004c30:	a8ea703a 	and	r21,r21,r3
 8004c34:	9009883a 	mov	r4,r18
 8004c38:	a80b883a 	mov	r5,r21
 8004c3c:	d9800015 	stw	r6,0(sp)
 8004c40:	80051d80 	call	80051d8 <_sbrk_r>
 8004c44:	00ffffc4 	movi	r3,-1
 8004c48:	1029883a 	mov	r20,r2
 8004c4c:	d9800017 	ldw	r6,0(sp)
 8004c50:	10c0a426 	beq	r2,r3,8004ee4 <_malloc_r+0x608>
 8004c54:	1180a236 	bltu	r2,r6,8004ee0 <_malloc_r+0x604>
 8004c58:	070200b4 	movhi	fp,2050
 8004c5c:	e70f7704 	addi	fp,fp,15836
 8004c60:	e0c00017 	ldw	r3,0(fp)
 8004c64:	a8c7883a 	add	r3,r21,r3
 8004c68:	e0c00015 	stw	r3,0(fp)
 8004c6c:	3500da26 	beq	r6,r20,8004fd8 <_malloc_r+0x6fc>
 8004c70:	b9000017 	ldw	r4,0(r23)
 8004c74:	00bfffc4 	movi	r2,-1
 8004c78:	2080e426 	beq	r4,r2,800500c <_malloc_r+0x730>
 8004c7c:	a185c83a 	sub	r2,r20,r6
 8004c80:	1885883a 	add	r2,r3,r2
 8004c84:	e0800015 	stw	r2,0(fp)
 8004c88:	a0c001cc 	andi	r3,r20,7
 8004c8c:	1800b526 	beq	r3,zero,8004f64 <_malloc_r+0x688>
 8004c90:	a0e9c83a 	sub	r20,r20,r3
 8004c94:	00840204 	movi	r2,4104
 8004c98:	a5000204 	addi	r20,r20,8
 8004c9c:	10c7c83a 	sub	r3,r2,r3
 8004ca0:	a545883a 	add	r2,r20,r21
 8004ca4:	1083ffcc 	andi	r2,r2,4095
 8004ca8:	18abc83a 	sub	r21,r3,r2
 8004cac:	9009883a 	mov	r4,r18
 8004cb0:	a80b883a 	mov	r5,r21
 8004cb4:	80051d80 	call	80051d8 <_sbrk_r>
 8004cb8:	00ffffc4 	movi	r3,-1
 8004cbc:	10c0d026 	beq	r2,r3,8005000 <_malloc_r+0x724>
 8004cc0:	1507c83a 	sub	r3,r2,r20
 8004cc4:	a8c7883a 	add	r3,r21,r3
 8004cc8:	18c00054 	ori	r3,r3,1
 8004ccc:	e0800017 	ldw	r2,0(fp)
 8004cd0:	9d000215 	stw	r20,8(r19)
 8004cd4:	a0c00115 	stw	r3,4(r20)
 8004cd8:	a887883a 	add	r3,r21,r2
 8004cdc:	e0c00015 	stw	r3,0(fp)
 8004ce0:	84c00e26 	beq	r16,r19,8004d1c <_malloc_r+0x440>
 8004ce4:	018003c4 	movi	r6,15
 8004ce8:	3580a02e 	bgeu	r6,r22,8004f6c <_malloc_r+0x690>
 8004cec:	81400117 	ldw	r5,4(r16)
 8004cf0:	013ffe04 	movi	r4,-8
 8004cf4:	b0bffd04 	addi	r2,r22,-12
 8004cf8:	1104703a 	and	r2,r2,r4
 8004cfc:	2900004c 	andi	r4,r5,1
 8004d00:	1108b03a 	or	r4,r2,r4
 8004d04:	81000115 	stw	r4,4(r16)
 8004d08:	01400144 	movi	r5,5
 8004d0c:	8089883a 	add	r4,r16,r2
 8004d10:	21400115 	stw	r5,4(r4)
 8004d14:	21400215 	stw	r5,8(r4)
 8004d18:	3080c036 	bltu	r6,r2,800501c <_malloc_r+0x740>
 8004d1c:	008200b4 	movhi	r2,2050
 8004d20:	108f6b04 	addi	r2,r2,15788
 8004d24:	11000017 	ldw	r4,0(r2)
 8004d28:	20c0012e 	bgeu	r4,r3,8004d30 <_malloc_r+0x454>
 8004d2c:	10c00015 	stw	r3,0(r2)
 8004d30:	008200b4 	movhi	r2,2050
 8004d34:	108f6a04 	addi	r2,r2,15784
 8004d38:	11000017 	ldw	r4,0(r2)
 8004d3c:	9c000217 	ldw	r16,8(r19)
 8004d40:	20c0012e 	bgeu	r4,r3,8004d48 <_malloc_r+0x46c>
 8004d44:	10c00015 	stw	r3,0(r2)
 8004d48:	80c00117 	ldw	r3,4(r16)
 8004d4c:	00bfff04 	movi	r2,-4
 8004d50:	1886703a 	and	r3,r3,r2
 8004d54:	1c45c83a 	sub	r2,r3,r17
 8004d58:	1c400236 	bltu	r3,r17,8004d64 <_malloc_r+0x488>
 8004d5c:	00c003c4 	movi	r3,15
 8004d60:	18800416 	blt	r3,r2,8004d74 <_malloc_r+0x498>
 8004d64:	9009883a 	mov	r4,r18
 8004d68:	80132f40 	call	80132f4 <__malloc_unlock>
 8004d6c:	0005883a 	mov	r2,zero
 8004d70:	003f0706 	br	8004990 <__alt_data_end+0xfc004990>
 8004d74:	88c00054 	ori	r3,r17,1
 8004d78:	80c00115 	stw	r3,4(r16)
 8004d7c:	8463883a 	add	r17,r16,r17
 8004d80:	10800054 	ori	r2,r2,1
 8004d84:	9c400215 	stw	r17,8(r19)
 8004d88:	88800115 	stw	r2,4(r17)
 8004d8c:	9009883a 	mov	r4,r18
 8004d90:	80132f40 	call	80132f4 <__malloc_unlock>
 8004d94:	80800204 	addi	r2,r16,8
 8004d98:	003efd06 	br	8004990 <__alt_data_end+0xfc004990>
 8004d9c:	00800504 	movi	r2,20
 8004da0:	10c0482e 	bgeu	r2,r3,8004ec4 <_malloc_r+0x5e8>
 8004da4:	00801504 	movi	r2,84
 8004da8:	10c06836 	bltu	r2,r3,8004f4c <_malloc_r+0x670>
 8004dac:	8806d33a 	srli	r3,r17,12
 8004db0:	19c01b84 	addi	r7,r3,110
 8004db4:	39cb883a 	add	r5,r7,r7
 8004db8:	003f0c06 	br	80049ec <__alt_data_end+0xfc0049ec>
 8004dbc:	3804d27a 	srli	r2,r7,9
 8004dc0:	01000104 	movi	r4,4
 8004dc4:	2080422e 	bgeu	r4,r2,8004ed0 <_malloc_r+0x5f4>
 8004dc8:	01000504 	movi	r4,20
 8004dcc:	20807c36 	bltu	r4,r2,8004fc0 <_malloc_r+0x6e4>
 8004dd0:	110016c4 	addi	r4,r2,91
 8004dd4:	210b883a 	add	r5,r4,r4
 8004dd8:	294b883a 	add	r5,r5,r5
 8004ddc:	294b883a 	add	r5,r5,r5
 8004de0:	994b883a 	add	r5,r19,r5
 8004de4:	28800217 	ldw	r2,8(r5)
 8004de8:	020200b4 	movhi	r8,2050
 8004dec:	4202dc04 	addi	r8,r8,2928
 8004df0:	11406326 	beq	r2,r5,8004f80 <_malloc_r+0x6a4>
 8004df4:	01bfff04 	movi	r6,-4
 8004df8:	11000117 	ldw	r4,4(r2)
 8004dfc:	2188703a 	and	r4,r4,r6
 8004e00:	3900022e 	bgeu	r7,r4,8004e0c <_malloc_r+0x530>
 8004e04:	10800217 	ldw	r2,8(r2)
 8004e08:	28bffb1e 	bne	r5,r2,8004df8 <__alt_data_end+0xfc004df8>
 8004e0c:	11800317 	ldw	r6,12(r2)
 8004e10:	99000117 	ldw	r4,4(r19)
 8004e14:	81800315 	stw	r6,12(r16)
 8004e18:	80800215 	stw	r2,8(r16)
 8004e1c:	34000215 	stw	r16,8(r6)
 8004e20:	14000315 	stw	r16,12(r2)
 8004e24:	003f2706 	br	8004ac4 <__alt_data_end+0xfc004ac4>
 8004e28:	88c00054 	ori	r3,r17,1
 8004e2c:	80c00115 	stw	r3,4(r16)
 8004e30:	8463883a 	add	r17,r16,r17
 8004e34:	34400515 	stw	r17,20(r6)
 8004e38:	34400415 	stw	r17,16(r6)
 8004e3c:	10c00054 	ori	r3,r2,1
 8004e40:	8a400315 	stw	r9,12(r17)
 8004e44:	8a400215 	stw	r9,8(r17)
 8004e48:	88c00115 	stw	r3,4(r17)
 8004e4c:	88a3883a 	add	r17,r17,r2
 8004e50:	88800015 	stw	r2,0(r17)
 8004e54:	9009883a 	mov	r4,r18
 8004e58:	80132f40 	call	80132f4 <__malloc_unlock>
 8004e5c:	80800204 	addi	r2,r16,8
 8004e60:	003ecb06 	br	8004990 <__alt_data_end+0xfc004990>
 8004e64:	31000117 	ldw	r4,4(r6)
 8004e68:	003f1606 	br	8004ac4 <__alt_data_end+0xfc004ac4>
 8004e6c:	63000044 	addi	r12,r12,1
 8004e70:	608000cc 	andi	r2,r12,3
 8004e74:	5ac00204 	addi	r11,r11,8
 8004e78:	103f2a1e 	bne	r2,zero,8004b24 <__alt_data_end+0xfc004b24>
 8004e7c:	00002106 	br	8004f04 <_malloc_r+0x628>
 8004e80:	80800204 	addi	r2,r16,8
 8004e84:	84000517 	ldw	r16,20(r16)
 8004e88:	143eb31e 	bne	r2,r16,8004958 <__alt_data_end+0xfc004958>
 8004e8c:	18c00084 	addi	r3,r3,2
 8004e90:	003eec06 	br	8004a44 <__alt_data_end+0xfc004a44>
 8004e94:	8085883a 	add	r2,r16,r2
 8004e98:	10c00117 	ldw	r3,4(r2)
 8004e9c:	81000317 	ldw	r4,12(r16)
 8004ea0:	81400217 	ldw	r5,8(r16)
 8004ea4:	18c00054 	ori	r3,r3,1
 8004ea8:	10c00115 	stw	r3,4(r2)
 8004eac:	29000315 	stw	r4,12(r5)
 8004eb0:	21400215 	stw	r5,8(r4)
 8004eb4:	9009883a 	mov	r4,r18
 8004eb8:	80132f40 	call	80132f4 <__malloc_unlock>
 8004ebc:	80800204 	addi	r2,r16,8
 8004ec0:	003eb306 	br	8004990 <__alt_data_end+0xfc004990>
 8004ec4:	19c016c4 	addi	r7,r3,91
 8004ec8:	39cb883a 	add	r5,r7,r7
 8004ecc:	003ec706 	br	80049ec <__alt_data_end+0xfc0049ec>
 8004ed0:	3804d1ba 	srli	r2,r7,6
 8004ed4:	11000e04 	addi	r4,r2,56
 8004ed8:	210b883a 	add	r5,r4,r4
 8004edc:	003fbe06 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8004ee0:	84ff5d26 	beq	r16,r19,8004c58 <__alt_data_end+0xfc004c58>
 8004ee4:	9c000217 	ldw	r16,8(r19)
 8004ee8:	00bfff04 	movi	r2,-4
 8004eec:	80c00117 	ldw	r3,4(r16)
 8004ef0:	1886703a 	and	r3,r3,r2
 8004ef4:	003f9706 	br	8004d54 <__alt_data_end+0xfc004d54>
 8004ef8:	52800017 	ldw	r10,0(r10)
 8004efc:	18ffffc4 	addi	r3,r3,-1
 8004f00:	50805c1e 	bne	r10,r2,8005074 <_malloc_r+0x798>
 8004f04:	190000cc 	andi	r4,r3,3
 8004f08:	50bffe04 	addi	r2,r10,-8
 8004f0c:	203ffa1e 	bne	r4,zero,8004ef8 <__alt_data_end+0xfc004ef8>
 8004f10:	98800117 	ldw	r2,4(r19)
 8004f14:	0146303a 	nor	r3,zero,r5
 8004f18:	1884703a 	and	r2,r3,r2
 8004f1c:	98800115 	stw	r2,4(r19)
 8004f20:	294b883a 	add	r5,r5,r5
 8004f24:	117f2e36 	bltu	r2,r5,8004be0 <__alt_data_end+0xfc004be0>
 8004f28:	283f2d26 	beq	r5,zero,8004be0 <__alt_data_end+0xfc004be0>
 8004f2c:	1146703a 	and	r3,r2,r5
 8004f30:	1800521e 	bne	r3,zero,800507c <_malloc_r+0x7a0>
 8004f34:	6007883a 	mov	r3,r12
 8004f38:	294b883a 	add	r5,r5,r5
 8004f3c:	1148703a 	and	r4,r2,r5
 8004f40:	18c00104 	addi	r3,r3,4
 8004f44:	203ffc26 	beq	r4,zero,8004f38 <__alt_data_end+0xfc004f38>
 8004f48:	003ef006 	br	8004b0c <__alt_data_end+0xfc004b0c>
 8004f4c:	00805504 	movi	r2,340
 8004f50:	10c01336 	bltu	r2,r3,8004fa0 <_malloc_r+0x6c4>
 8004f54:	8806d3fa 	srli	r3,r17,15
 8004f58:	19c01dc4 	addi	r7,r3,119
 8004f5c:	39cb883a 	add	r5,r7,r7
 8004f60:	003ea206 	br	80049ec <__alt_data_end+0xfc0049ec>
 8004f64:	00c40004 	movi	r3,4096
 8004f68:	003f4d06 	br	8004ca0 <__alt_data_end+0xfc004ca0>
 8004f6c:	00800044 	movi	r2,1
 8004f70:	a0800115 	stw	r2,4(r20)
 8004f74:	a021883a 	mov	r16,r20
 8004f78:	0007883a 	mov	r3,zero
 8004f7c:	003f7506 	br	8004d54 <__alt_data_end+0xfc004d54>
 8004f80:	200bd0ba 	srai	r5,r4,2
 8004f84:	01800044 	movi	r6,1
 8004f88:	41000117 	ldw	r4,4(r8)
 8004f8c:	314a983a 	sll	r5,r6,r5
 8004f90:	100d883a 	mov	r6,r2
 8004f94:	2908b03a 	or	r4,r5,r4
 8004f98:	41000115 	stw	r4,4(r8)
 8004f9c:	003f9d06 	br	8004e14 <__alt_data_end+0xfc004e14>
 8004fa0:	00815504 	movi	r2,1364
 8004fa4:	10c01336 	bltu	r2,r3,8004ff4 <_malloc_r+0x718>
 8004fa8:	8806d4ba 	srli	r3,r17,18
 8004fac:	19c01f04 	addi	r7,r3,124
 8004fb0:	39cb883a 	add	r5,r7,r7
 8004fb4:	003e8d06 	br	80049ec <__alt_data_end+0xfc0049ec>
 8004fb8:	ad400404 	addi	r21,r21,16
 8004fbc:	003f1d06 	br	8004c34 <__alt_data_end+0xfc004c34>
 8004fc0:	01001504 	movi	r4,84
 8004fc4:	20801c36 	bltu	r4,r2,8005038 <_malloc_r+0x75c>
 8004fc8:	3804d33a 	srli	r2,r7,12
 8004fcc:	11001b84 	addi	r4,r2,110
 8004fd0:	210b883a 	add	r5,r4,r4
 8004fd4:	003f8006 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8004fd8:	3083ffcc 	andi	r2,r6,4095
 8004fdc:	103f241e 	bne	r2,zero,8004c70 <__alt_data_end+0xfc004c70>
 8004fe0:	99000217 	ldw	r4,8(r19)
 8004fe4:	ad85883a 	add	r2,r21,r22
 8004fe8:	10800054 	ori	r2,r2,1
 8004fec:	20800115 	stw	r2,4(r4)
 8004ff0:	003f4a06 	br	8004d1c <__alt_data_end+0xfc004d1c>
 8004ff4:	01403f04 	movi	r5,252
 8004ff8:	01c01f84 	movi	r7,126
 8004ffc:	003e7b06 	br	80049ec <__alt_data_end+0xfc0049ec>
 8005000:	00c00044 	movi	r3,1
 8005004:	002b883a 	mov	r21,zero
 8005008:	003f3006 	br	8004ccc <__alt_data_end+0xfc004ccc>
 800500c:	008200b4 	movhi	r2,2050
 8005010:	10888b04 	addi	r2,r2,8748
 8005014:	15000015 	stw	r20,0(r2)
 8005018:	003f1b06 	br	8004c88 <__alt_data_end+0xfc004c88>
 800501c:	9009883a 	mov	r4,r18
 8005020:	81400204 	addi	r5,r16,8
 8005024:	800b4b40 	call	800b4b4 <_free_r>
 8005028:	008200b4 	movhi	r2,2050
 800502c:	108f7704 	addi	r2,r2,15836
 8005030:	10c00017 	ldw	r3,0(r2)
 8005034:	003f3906 	br	8004d1c <__alt_data_end+0xfc004d1c>
 8005038:	01005504 	movi	r4,340
 800503c:	20800436 	bltu	r4,r2,8005050 <_malloc_r+0x774>
 8005040:	3804d3fa 	srli	r2,r7,15
 8005044:	11001dc4 	addi	r4,r2,119
 8005048:	210b883a 	add	r5,r4,r4
 800504c:	003f6206 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8005050:	01015504 	movi	r4,1364
 8005054:	20800436 	bltu	r4,r2,8005068 <_malloc_r+0x78c>
 8005058:	3804d4ba 	srli	r2,r7,18
 800505c:	11001f04 	addi	r4,r2,124
 8005060:	210b883a 	add	r5,r4,r4
 8005064:	003f5c06 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8005068:	01403f04 	movi	r5,252
 800506c:	01001f84 	movi	r4,126
 8005070:	003f5906 	br	8004dd8 <__alt_data_end+0xfc004dd8>
 8005074:	98800117 	ldw	r2,4(r19)
 8005078:	003fa906 	br	8004f20 <__alt_data_end+0xfc004f20>
 800507c:	6007883a 	mov	r3,r12
 8005080:	003ea206 	br	8004b0c <__alt_data_end+0xfc004b0c>

08005084 <_printf_r>:
 8005084:	defffd04 	addi	sp,sp,-12
 8005088:	dfc00015 	stw	ra,0(sp)
 800508c:	d9800115 	stw	r6,4(sp)
 8005090:	d9c00215 	stw	r7,8(sp)
 8005094:	280d883a 	mov	r6,r5
 8005098:	21400217 	ldw	r5,8(r4)
 800509c:	d9c00104 	addi	r7,sp,4
 80050a0:	80073200 	call	8007320 <___vfprintf_internal_r>
 80050a4:	dfc00017 	ldw	ra,0(sp)
 80050a8:	dec00304 	addi	sp,sp,12
 80050ac:	f800283a 	ret

080050b0 <printf>:
 80050b0:	defffc04 	addi	sp,sp,-16
 80050b4:	dfc00015 	stw	ra,0(sp)
 80050b8:	d9400115 	stw	r5,4(sp)
 80050bc:	d9800215 	stw	r6,8(sp)
 80050c0:	d9c00315 	stw	r7,12(sp)
 80050c4:	008200b4 	movhi	r2,2050
 80050c8:	10888a04 	addi	r2,r2,8744
 80050cc:	10800017 	ldw	r2,0(r2)
 80050d0:	200b883a 	mov	r5,r4
 80050d4:	d9800104 	addi	r6,sp,4
 80050d8:	11000217 	ldw	r4,8(r2)
 80050dc:	800931c0 	call	800931c <__vfprintf_internal>
 80050e0:	dfc00017 	ldw	ra,0(sp)
 80050e4:	dec00404 	addi	sp,sp,16
 80050e8:	f800283a 	ret

080050ec <_putchar_r>:
 80050ec:	21800217 	ldw	r6,8(r4)
 80050f0:	800d47c1 	jmpi	800d47c <_putc_r>

080050f4 <putchar>:
 80050f4:	008200b4 	movhi	r2,2050
 80050f8:	10888a04 	addi	r2,r2,8744
 80050fc:	200b883a 	mov	r5,r4
 8005100:	11000017 	ldw	r4,0(r2)
 8005104:	21800217 	ldw	r6,8(r4)
 8005108:	800d47c1 	jmpi	800d47c <_putc_r>

0800510c <_puts_r>:
 800510c:	defff604 	addi	sp,sp,-40
 8005110:	dc000715 	stw	r16,28(sp)
 8005114:	2021883a 	mov	r16,r4
 8005118:	2809883a 	mov	r4,r5
 800511c:	dc400815 	stw	r17,32(sp)
 8005120:	dfc00915 	stw	ra,36(sp)
 8005124:	2823883a 	mov	r17,r5
 8005128:	80052f00 	call	80052f0 <strlen>
 800512c:	00c200b4 	movhi	r3,2050
 8005130:	18c88a04 	addi	r3,r3,8744
 8005134:	18c00017 	ldw	r3,0(r3)
 8005138:	11000044 	addi	r4,r2,1
 800513c:	d8800115 	stw	r2,4(sp)
 8005140:	18c00217 	ldw	r3,8(r3)
 8005144:	014200b4 	movhi	r5,2050
 8005148:	29413404 	addi	r5,r5,1232
 800514c:	1880030b 	ldhu	r2,12(r3)
 8005150:	d9400215 	stw	r5,8(sp)
 8005154:	d9000615 	stw	r4,24(sp)
 8005158:	01400044 	movi	r5,1
 800515c:	01000084 	movi	r4,2
 8005160:	d9000515 	stw	r4,20(sp)
 8005164:	dc400015 	stw	r17,0(sp)
 8005168:	d9400315 	stw	r5,12(sp)
 800516c:	dec00415 	stw	sp,16(sp)
 8005170:	1108000c 	andi	r4,r2,8192
 8005174:	2000061e 	bne	r4,zero,8005190 <_puts_r+0x84>
 8005178:	19401917 	ldw	r5,100(r3)
 800517c:	0137ffc4 	movi	r4,-8193
 8005180:	10880014 	ori	r2,r2,8192
 8005184:	2908703a 	and	r4,r5,r4
 8005188:	1880030d 	sth	r2,12(r3)
 800518c:	19001915 	stw	r4,100(r3)
 8005190:	81400217 	ldw	r5,8(r16)
 8005194:	8009883a 	mov	r4,r16
 8005198:	d9800404 	addi	r6,sp,16
 800519c:	800b7a40 	call	800b7a4 <__sfvwrite_r>
 80051a0:	1000061e 	bne	r2,zero,80051bc <_puts_r+0xb0>
 80051a4:	00800284 	movi	r2,10
 80051a8:	dfc00917 	ldw	ra,36(sp)
 80051ac:	dc400817 	ldw	r17,32(sp)
 80051b0:	dc000717 	ldw	r16,28(sp)
 80051b4:	dec00a04 	addi	sp,sp,40
 80051b8:	f800283a 	ret
 80051bc:	00bfffc4 	movi	r2,-1
 80051c0:	003ff906 	br	80051a8 <__alt_data_end+0xfc0051a8>

080051c4 <puts>:
 80051c4:	008200b4 	movhi	r2,2050
 80051c8:	10888a04 	addi	r2,r2,8744
 80051cc:	200b883a 	mov	r5,r4
 80051d0:	11000017 	ldw	r4,0(r2)
 80051d4:	800510c1 	jmpi	800510c <_puts_r>

080051d8 <_sbrk_r>:
 80051d8:	defffd04 	addi	sp,sp,-12
 80051dc:	dc000015 	stw	r16,0(sp)
 80051e0:	040200b4 	movhi	r16,2050
 80051e4:	dc400115 	stw	r17,4(sp)
 80051e8:	840f6d04 	addi	r16,r16,15796
 80051ec:	2023883a 	mov	r17,r4
 80051f0:	2809883a 	mov	r4,r5
 80051f4:	dfc00215 	stw	ra,8(sp)
 80051f8:	80000015 	stw	zero,0(r16)
 80051fc:	80134c00 	call	80134c0 <sbrk>
 8005200:	00ffffc4 	movi	r3,-1
 8005204:	10c00526 	beq	r2,r3,800521c <_sbrk_r+0x44>
 8005208:	dfc00217 	ldw	ra,8(sp)
 800520c:	dc400117 	ldw	r17,4(sp)
 8005210:	dc000017 	ldw	r16,0(sp)
 8005214:	dec00304 	addi	sp,sp,12
 8005218:	f800283a 	ret
 800521c:	80c00017 	ldw	r3,0(r16)
 8005220:	183ff926 	beq	r3,zero,8005208 <__alt_data_end+0xfc005208>
 8005224:	88c00015 	stw	r3,0(r17)
 8005228:	003ff706 	br	8005208 <__alt_data_end+0xfc005208>

0800522c <_sprintf_r>:
 800522c:	deffe404 	addi	sp,sp,-112
 8005230:	2807883a 	mov	r3,r5
 8005234:	dfc01a15 	stw	ra,104(sp)
 8005238:	d9c01b15 	stw	r7,108(sp)
 800523c:	00a00034 	movhi	r2,32768
 8005240:	10bfffc4 	addi	r2,r2,-1
 8005244:	02008204 	movi	r8,520
 8005248:	d8800215 	stw	r2,8(sp)
 800524c:	d8800515 	stw	r2,20(sp)
 8005250:	d80b883a 	mov	r5,sp
 8005254:	d9c01b04 	addi	r7,sp,108
 8005258:	00bfffc4 	movi	r2,-1
 800525c:	d8c00015 	stw	r3,0(sp)
 8005260:	d8c00415 	stw	r3,16(sp)
 8005264:	da00030d 	sth	r8,12(sp)
 8005268:	d880038d 	sth	r2,14(sp)
 800526c:	80053880 	call	8005388 <___svfprintf_internal_r>
 8005270:	d8c00017 	ldw	r3,0(sp)
 8005274:	18000005 	stb	zero,0(r3)
 8005278:	dfc01a17 	ldw	ra,104(sp)
 800527c:	dec01c04 	addi	sp,sp,112
 8005280:	f800283a 	ret

08005284 <sprintf>:
 8005284:	deffe304 	addi	sp,sp,-116
 8005288:	2007883a 	mov	r3,r4
 800528c:	dfc01a15 	stw	ra,104(sp)
 8005290:	d9801b15 	stw	r6,108(sp)
 8005294:	d9c01c15 	stw	r7,112(sp)
 8005298:	010200b4 	movhi	r4,2050
 800529c:	21088a04 	addi	r4,r4,8744
 80052a0:	21000017 	ldw	r4,0(r4)
 80052a4:	00a00034 	movhi	r2,32768
 80052a8:	10bfffc4 	addi	r2,r2,-1
 80052ac:	280d883a 	mov	r6,r5
 80052b0:	02008204 	movi	r8,520
 80052b4:	d8800215 	stw	r2,8(sp)
 80052b8:	d8800515 	stw	r2,20(sp)
 80052bc:	d80b883a 	mov	r5,sp
 80052c0:	d9c01b04 	addi	r7,sp,108
 80052c4:	00bfffc4 	movi	r2,-1
 80052c8:	d8c00015 	stw	r3,0(sp)
 80052cc:	d8c00415 	stw	r3,16(sp)
 80052d0:	da00030d 	sth	r8,12(sp)
 80052d4:	d880038d 	sth	r2,14(sp)
 80052d8:	80053880 	call	8005388 <___svfprintf_internal_r>
 80052dc:	d8c00017 	ldw	r3,0(sp)
 80052e0:	18000005 	stb	zero,0(r3)
 80052e4:	dfc01a17 	ldw	ra,104(sp)
 80052e8:	dec01d04 	addi	sp,sp,116
 80052ec:	f800283a 	ret

080052f0 <strlen>:
 80052f0:	208000cc 	andi	r2,r4,3
 80052f4:	10002026 	beq	r2,zero,8005378 <strlen+0x88>
 80052f8:	20800007 	ldb	r2,0(r4)
 80052fc:	10002026 	beq	r2,zero,8005380 <strlen+0x90>
 8005300:	2005883a 	mov	r2,r4
 8005304:	00000206 	br	8005310 <strlen+0x20>
 8005308:	10c00007 	ldb	r3,0(r2)
 800530c:	18001826 	beq	r3,zero,8005370 <strlen+0x80>
 8005310:	10800044 	addi	r2,r2,1
 8005314:	10c000cc 	andi	r3,r2,3
 8005318:	183ffb1e 	bne	r3,zero,8005308 <__alt_data_end+0xfc005308>
 800531c:	10c00017 	ldw	r3,0(r2)
 8005320:	01ffbff4 	movhi	r7,65279
 8005324:	39ffbfc4 	addi	r7,r7,-257
 8005328:	00ca303a 	nor	r5,zero,r3
 800532c:	01a02074 	movhi	r6,32897
 8005330:	19c7883a 	add	r3,r3,r7
 8005334:	31a02004 	addi	r6,r6,-32640
 8005338:	1946703a 	and	r3,r3,r5
 800533c:	1986703a 	and	r3,r3,r6
 8005340:	1800091e 	bne	r3,zero,8005368 <strlen+0x78>
 8005344:	10800104 	addi	r2,r2,4
 8005348:	10c00017 	ldw	r3,0(r2)
 800534c:	19cb883a 	add	r5,r3,r7
 8005350:	00c6303a 	nor	r3,zero,r3
 8005354:	28c6703a 	and	r3,r5,r3
 8005358:	1986703a 	and	r3,r3,r6
 800535c:	183ff926 	beq	r3,zero,8005344 <__alt_data_end+0xfc005344>
 8005360:	00000106 	br	8005368 <strlen+0x78>
 8005364:	10800044 	addi	r2,r2,1
 8005368:	10c00007 	ldb	r3,0(r2)
 800536c:	183ffd1e 	bne	r3,zero,8005364 <__alt_data_end+0xfc005364>
 8005370:	1105c83a 	sub	r2,r2,r4
 8005374:	f800283a 	ret
 8005378:	2005883a 	mov	r2,r4
 800537c:	003fe706 	br	800531c <__alt_data_end+0xfc00531c>
 8005380:	0005883a 	mov	r2,zero
 8005384:	f800283a 	ret

08005388 <___svfprintf_internal_r>:
 8005388:	deffb504 	addi	sp,sp,-300
 800538c:	dfc04a15 	stw	ra,296(sp)
 8005390:	ddc04815 	stw	r23,288(sp)
 8005394:	d9002f15 	stw	r4,188(sp)
 8005398:	282f883a 	mov	r23,r5
 800539c:	d9802915 	stw	r6,164(sp)
 80053a0:	d9c02d15 	stw	r7,180(sp)
 80053a4:	df004915 	stw	fp,292(sp)
 80053a8:	dd804715 	stw	r22,284(sp)
 80053ac:	dd404615 	stw	r21,280(sp)
 80053b0:	dd004515 	stw	r20,276(sp)
 80053b4:	dcc04415 	stw	r19,272(sp)
 80053b8:	dc804315 	stw	r18,268(sp)
 80053bc:	dc404215 	stw	r17,264(sp)
 80053c0:	dc004115 	stw	r16,260(sp)
 80053c4:	800be640 	call	800be64 <_localeconv_r>
 80053c8:	10800017 	ldw	r2,0(r2)
 80053cc:	1009883a 	mov	r4,r2
 80053d0:	d8803515 	stw	r2,212(sp)
 80053d4:	80052f00 	call	80052f0 <strlen>
 80053d8:	d8803915 	stw	r2,228(sp)
 80053dc:	b880030b 	ldhu	r2,12(r23)
 80053e0:	1080200c 	andi	r2,r2,128
 80053e4:	10000226 	beq	r2,zero,80053f0 <___svfprintf_internal_r+0x68>
 80053e8:	b8800417 	ldw	r2,16(r23)
 80053ec:	10065d26 	beq	r2,zero,8006d64 <___svfprintf_internal_r+0x19dc>
 80053f0:	db001dc4 	addi	r12,sp,119
 80053f4:	dd801e04 	addi	r22,sp,120
 80053f8:	d8800404 	addi	r2,sp,16
 80053fc:	050200b4 	movhi	r20,2050
 8005400:	b317c83a 	sub	r11,r22,r12
 8005404:	a5014584 	addi	r20,r20,1302
 8005408:	db002815 	stw	r12,160(sp)
 800540c:	d8801e15 	stw	r2,120(sp)
 8005410:	d8002015 	stw	zero,128(sp)
 8005414:	d8001f15 	stw	zero,124(sp)
 8005418:	d8003315 	stw	zero,204(sp)
 800541c:	d8003715 	stw	zero,220(sp)
 8005420:	d8003815 	stw	zero,224(sp)
 8005424:	d8003b15 	stw	zero,236(sp)
 8005428:	d8003a15 	stw	zero,232(sp)
 800542c:	d8003015 	stw	zero,192(sp)
 8005430:	1011883a 	mov	r8,r2
 8005434:	dac03d15 	stw	r11,244(sp)
 8005438:	db002917 	ldw	r12,164(sp)
 800543c:	60800007 	ldb	r2,0(r12)
 8005440:	1000ab26 	beq	r2,zero,80056f0 <___svfprintf_internal_r+0x368>
 8005444:	00c00944 	movi	r3,37
 8005448:	10c0a926 	beq	r2,r3,80056f0 <___svfprintf_internal_r+0x368>
 800544c:	6021883a 	mov	r16,r12
 8005450:	00000106 	br	8005458 <___svfprintf_internal_r+0xd0>
 8005454:	10c08426 	beq	r2,r3,8005668 <___svfprintf_internal_r+0x2e0>
 8005458:	84000044 	addi	r16,r16,1
 800545c:	80800007 	ldb	r2,0(r16)
 8005460:	103ffc1e 	bne	r2,zero,8005454 <__alt_data_end+0xfc005454>
 8005464:	dac02917 	ldw	r11,164(sp)
 8005468:	82e3c83a 	sub	r17,r16,r11
 800546c:	88000f26 	beq	r17,zero,80054ac <___svfprintf_internal_r+0x124>
 8005470:	d8c02017 	ldw	r3,128(sp)
 8005474:	d8801f17 	ldw	r2,124(sp)
 8005478:	dac02917 	ldw	r11,164(sp)
 800547c:	1c47883a 	add	r3,r3,r17
 8005480:	10800044 	addi	r2,r2,1
 8005484:	d8c02015 	stw	r3,128(sp)
 8005488:	42c00015 	stw	r11,0(r8)
 800548c:	44400115 	stw	r17,4(r8)
 8005490:	d8801f15 	stw	r2,124(sp)
 8005494:	00c001c4 	movi	r3,7
 8005498:	18807616 	blt	r3,r2,8005674 <___svfprintf_internal_r+0x2ec>
 800549c:	42000204 	addi	r8,r8,8
 80054a0:	db003017 	ldw	r12,192(sp)
 80054a4:	6459883a 	add	r12,r12,r17
 80054a8:	db003015 	stw	r12,192(sp)
 80054ac:	80800007 	ldb	r2,0(r16)
 80054b0:	10007726 	beq	r2,zero,8005690 <___svfprintf_internal_r+0x308>
 80054b4:	80800044 	addi	r2,r16,1
 80054b8:	84000047 	ldb	r16,1(r16)
 80054bc:	d8002785 	stb	zero,158(sp)
 80054c0:	000d883a 	mov	r6,zero
 80054c4:	027fffc4 	movi	r9,-1
 80054c8:	d8002e15 	stw	zero,184(sp)
 80054cc:	0023883a 	mov	r17,zero
 80054d0:	01001604 	movi	r4,88
 80054d4:	01400244 	movi	r5,9
 80054d8:	02800a84 	movi	r10,42
 80054dc:	01c01b04 	movi	r7,108
 80054e0:	10c00044 	addi	r3,r2,1
 80054e4:	80bff804 	addi	r2,r16,-32
 80054e8:	2082e436 	bltu	r4,r2,800607c <___svfprintf_internal_r+0xcf4>
 80054ec:	100490ba 	slli	r2,r2,2
 80054f0:	02c20034 	movhi	r11,2048
 80054f4:	5ad54104 	addi	r11,r11,21764
 80054f8:	12c5883a 	add	r2,r2,r11
 80054fc:	10800017 	ldw	r2,0(r2)
 8005500:	1000683a 	jmp	r2
 8005504:	08005e34 	orhi	zero,at,376
 8005508:	0800607c 	xorhi	zero,at,385
 800550c:	0800607c 	xorhi	zero,at,385
 8005510:	08005fb4 	orhi	zero,at,382
 8005514:	0800607c 	xorhi	zero,at,385
 8005518:	0800607c 	xorhi	zero,at,385
 800551c:	0800607c 	xorhi	zero,at,385
 8005520:	0800607c 	xorhi	zero,at,385
 8005524:	0800607c 	xorhi	zero,at,385
 8005528:	0800607c 	xorhi	zero,at,385
 800552c:	08005f78 	rdprs	zero,at,381
 8005530:	08005fa4 	muli	zero,at,382
 8005534:	0800607c 	xorhi	zero,at,385
 8005538:	080056f8 	rdprs	zero,at,347
 800553c:	08005708 	cmpgei	zero,at,348
 8005540:	0800607c 	xorhi	zero,at,385
 8005544:	08005748 	cmpgei	zero,at,349
 8005548:	08005758 	cmpnei	zero,at,349
 800554c:	08005758 	cmpnei	zero,at,349
 8005550:	08005758 	cmpnei	zero,at,349
 8005554:	08005758 	cmpnei	zero,at,349
 8005558:	08005758 	cmpnei	zero,at,349
 800555c:	08005758 	cmpnei	zero,at,349
 8005560:	08005758 	cmpnei	zero,at,349
 8005564:	08005758 	cmpnei	zero,at,349
 8005568:	08005758 	cmpnei	zero,at,349
 800556c:	0800607c 	xorhi	zero,at,385
 8005570:	0800607c 	xorhi	zero,at,385
 8005574:	0800607c 	xorhi	zero,at,385
 8005578:	0800607c 	xorhi	zero,at,385
 800557c:	0800607c 	xorhi	zero,at,385
 8005580:	0800607c 	xorhi	zero,at,385
 8005584:	0800607c 	xorhi	zero,at,385
 8005588:	0800607c 	xorhi	zero,at,385
 800558c:	0800607c 	xorhi	zero,at,385
 8005590:	0800607c 	xorhi	zero,at,385
 8005594:	0800578c 	andi	zero,at,350
 8005598:	08005c78 	rdprs	zero,at,369
 800559c:	0800607c 	xorhi	zero,at,385
 80055a0:	08005c78 	rdprs	zero,at,369
 80055a4:	0800607c 	xorhi	zero,at,385
 80055a8:	0800607c 	xorhi	zero,at,385
 80055ac:	0800607c 	xorhi	zero,at,385
 80055b0:	0800607c 	xorhi	zero,at,385
 80055b4:	08005d64 	muli	zero,at,373
 80055b8:	0800607c 	xorhi	zero,at,385
 80055bc:	0800607c 	xorhi	zero,at,385
 80055c0:	08005c0c 	andi	zero,at,368
 80055c4:	0800607c 	xorhi	zero,at,385
 80055c8:	0800607c 	xorhi	zero,at,385
 80055cc:	0800607c 	xorhi	zero,at,385
 80055d0:	0800607c 	xorhi	zero,at,385
 80055d4:	0800607c 	xorhi	zero,at,385
 80055d8:	08005c48 	cmpgei	zero,at,369
 80055dc:	0800607c 	xorhi	zero,at,385
 80055e0:	0800607c 	xorhi	zero,at,385
 80055e4:	08005e54 	ori	zero,at,377
 80055e8:	0800607c 	xorhi	zero,at,385
 80055ec:	0800607c 	xorhi	zero,at,385
 80055f0:	0800607c 	xorhi	zero,at,385
 80055f4:	0800607c 	xorhi	zero,at,385
 80055f8:	0800607c 	xorhi	zero,at,385
 80055fc:	0800607c 	xorhi	zero,at,385
 8005600:	0800607c 	xorhi	zero,at,385
 8005604:	0800607c 	xorhi	zero,at,385
 8005608:	0800607c 	xorhi	zero,at,385
 800560c:	0800607c 	xorhi	zero,at,385
 8005610:	08005f38 	rdprs	zero,at,380
 8005614:	08005d74 	orhi	zero,at,373
 8005618:	08005c78 	rdprs	zero,at,369
 800561c:	08005c78 	rdprs	zero,at,369
 8005620:	08005c78 	rdprs	zero,at,369
 8005624:	08005ddc 	xori	zero,at,375
 8005628:	08005d74 	orhi	zero,at,373
 800562c:	0800607c 	xorhi	zero,at,385
 8005630:	0800607c 	xorhi	zero,at,385
 8005634:	08005dec 	andhi	zero,at,375
 8005638:	0800607c 	xorhi	zero,at,385
 800563c:	08005e00 	call	8005e0 <__alt_mem_sdram-0x77ffa20>
 8005640:	08006040 	call	800604 <__alt_mem_sdram-0x77ff9fc>
 8005644:	08005d1c 	xori	zero,at,372
 8005648:	08005f28 	cmpgeui	zero,at,380
 800564c:	0800607c 	xorhi	zero,at,385
 8005650:	08005eb0 	cmpltui	zero,at,378
 8005654:	0800607c 	xorhi	zero,at,385
 8005658:	08006004 	addi	zero,at,384
 800565c:	0800607c 	xorhi	zero,at,385
 8005660:	0800607c 	xorhi	zero,at,385
 8005664:	08005fc4 	addi	zero,at,383
 8005668:	db002917 	ldw	r12,164(sp)
 800566c:	8323c83a 	sub	r17,r16,r12
 8005670:	003f7e06 	br	800546c <__alt_data_end+0xfc00546c>
 8005674:	d9002f17 	ldw	r4,188(sp)
 8005678:	b80b883a 	mov	r5,r23
 800567c:	b00d883a 	mov	r6,r22
 8005680:	800ddd80 	call	800ddd8 <__ssprint_r>
 8005684:	1000081e 	bne	r2,zero,80056a8 <___svfprintf_internal_r+0x320>
 8005688:	da000404 	addi	r8,sp,16
 800568c:	003f8406 	br	80054a0 <__alt_data_end+0xfc0054a0>
 8005690:	d8802017 	ldw	r2,128(sp)
 8005694:	10000426 	beq	r2,zero,80056a8 <___svfprintf_internal_r+0x320>
 8005698:	d9002f17 	ldw	r4,188(sp)
 800569c:	b80b883a 	mov	r5,r23
 80056a0:	d9801e04 	addi	r6,sp,120
 80056a4:	800ddd80 	call	800ddd8 <__ssprint_r>
 80056a8:	b880030b 	ldhu	r2,12(r23)
 80056ac:	1080100c 	andi	r2,r2,64
 80056b0:	10000d1e 	bne	r2,zero,80056e8 <___svfprintf_internal_r+0x360>
 80056b4:	d8803017 	ldw	r2,192(sp)
 80056b8:	dfc04a17 	ldw	ra,296(sp)
 80056bc:	df004917 	ldw	fp,292(sp)
 80056c0:	ddc04817 	ldw	r23,288(sp)
 80056c4:	dd804717 	ldw	r22,284(sp)
 80056c8:	dd404617 	ldw	r21,280(sp)
 80056cc:	dd004517 	ldw	r20,276(sp)
 80056d0:	dcc04417 	ldw	r19,272(sp)
 80056d4:	dc804317 	ldw	r18,268(sp)
 80056d8:	dc404217 	ldw	r17,264(sp)
 80056dc:	dc004117 	ldw	r16,260(sp)
 80056e0:	dec04b04 	addi	sp,sp,300
 80056e4:	f800283a 	ret
 80056e8:	00bfffc4 	movi	r2,-1
 80056ec:	003ff206 	br	80056b8 <__alt_data_end+0xfc0056b8>
 80056f0:	dc002917 	ldw	r16,164(sp)
 80056f4:	003f6d06 	br	80054ac <__alt_data_end+0xfc0054ac>
 80056f8:	1805883a 	mov	r2,r3
 80056fc:	8c400114 	ori	r17,r17,4
 8005700:	1c000007 	ldb	r16,0(r3)
 8005704:	003f7606 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005708:	1c000007 	ldb	r16,0(r3)
 800570c:	18800044 	addi	r2,r3,1
 8005710:	8286e726 	beq	r16,r10,80072b0 <___svfprintf_internal_r+0x1f28>
 8005714:	82fff404 	addi	r11,r16,-48
 8005718:	1007883a 	mov	r3,r2
 800571c:	0013883a 	mov	r9,zero
 8005720:	2aff7036 	bltu	r5,r11,80054e4 <__alt_data_end+0xfc0054e4>
 8005724:	1c000007 	ldb	r16,0(r3)
 8005728:	4a4002a4 	muli	r9,r9,10
 800572c:	18c00044 	addi	r3,r3,1
 8005730:	5a53883a 	add	r9,r11,r9
 8005734:	82fff404 	addi	r11,r16,-48
 8005738:	2afffa2e 	bgeu	r5,r11,8005724 <__alt_data_end+0xfc005724>
 800573c:	483f690e 	bge	r9,zero,80054e4 <__alt_data_end+0xfc0054e4>
 8005740:	027fffc4 	movi	r9,-1
 8005744:	003f6706 	br	80054e4 <__alt_data_end+0xfc0054e4>
 8005748:	8c402014 	ori	r17,r17,128
 800574c:	1805883a 	mov	r2,r3
 8005750:	1c000007 	ldb	r16,0(r3)
 8005754:	003f6206 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005758:	1805883a 	mov	r2,r3
 800575c:	d8002e15 	stw	zero,184(sp)
 8005760:	82fff404 	addi	r11,r16,-48
 8005764:	0019883a 	mov	r12,zero
 8005768:	14000007 	ldb	r16,0(r2)
 800576c:	630002a4 	muli	r12,r12,10
 8005770:	18c00044 	addi	r3,r3,1
 8005774:	1805883a 	mov	r2,r3
 8005778:	62d9883a 	add	r12,r12,r11
 800577c:	82fff404 	addi	r11,r16,-48
 8005780:	2afff92e 	bgeu	r5,r11,8005768 <__alt_data_end+0xfc005768>
 8005784:	db002e15 	stw	r12,184(sp)
 8005788:	003f5606 	br	80054e4 <__alt_data_end+0xfc0054e4>
 800578c:	8c400414 	ori	r17,r17,16
 8005790:	d8c02915 	stw	r3,164(sp)
 8005794:	d9802785 	stb	r6,158(sp)
 8005798:	8880080c 	andi	r2,r17,32
 800579c:	d8c02d17 	ldw	r3,180(sp)
 80057a0:	10017926 	beq	r2,zero,8005d88 <___svfprintf_internal_r+0xa00>
 80057a4:	db002d17 	ldw	r12,180(sp)
 80057a8:	18800117 	ldw	r2,4(r3)
 80057ac:	1cc00017 	ldw	r19,0(r3)
 80057b0:	63000204 	addi	r12,r12,8
 80057b4:	db002d15 	stw	r12,180(sp)
 80057b8:	1039883a 	mov	fp,r2
 80057bc:	10017d16 	blt	r2,zero,8005db4 <___svfprintf_internal_r+0xa2c>
 80057c0:	dd402783 	ldbu	r21,158(sp)
 80057c4:	da403215 	stw	r9,200(sp)
 80057c8:	00800044 	movi	r2,1
 80057cc:	9f06b03a 	or	r3,r19,fp
 80057d0:	48000216 	blt	r9,zero,80057dc <___svfprintf_internal_r+0x454>
 80057d4:	013fdfc4 	movi	r4,-129
 80057d8:	8922703a 	and	r17,r17,r4
 80057dc:	1802371e 	bne	r3,zero,80060bc <___svfprintf_internal_r+0xd34>
 80057e0:	48034526 	beq	r9,zero,80064f8 <___svfprintf_internal_r+0x1170>
 80057e4:	10803fcc 	andi	r2,r2,255
 80057e8:	00c00044 	movi	r3,1
 80057ec:	10c25826 	beq	r2,r3,8006150 <___svfprintf_internal_r+0xdc8>
 80057f0:	00c00084 	movi	r3,2
 80057f4:	10c2db26 	beq	r2,r3,8006364 <___svfprintf_internal_r+0xfdc>
 80057f8:	b007883a 	mov	r3,r22
 80057fc:	9808d0fa 	srli	r4,r19,3
 8005800:	e00a977a 	slli	r5,fp,29
 8005804:	e038d0fa 	srli	fp,fp,3
 8005808:	9cc001cc 	andi	r19,r19,7
 800580c:	98800c04 	addi	r2,r19,48
 8005810:	18ffffc4 	addi	r3,r3,-1
 8005814:	2926b03a 	or	r19,r5,r4
 8005818:	18800005 	stb	r2,0(r3)
 800581c:	9f08b03a 	or	r4,r19,fp
 8005820:	203ff61e 	bne	r4,zero,80057fc <__alt_data_end+0xfc0057fc>
 8005824:	8900004c 	andi	r4,r17,1
 8005828:	d8c03115 	stw	r3,196(sp)
 800582c:	2002db26 	beq	r4,zero,800639c <___svfprintf_internal_r+0x1014>
 8005830:	10803fcc 	andi	r2,r2,255
 8005834:	1080201c 	xori	r2,r2,128
 8005838:	10bfe004 	addi	r2,r2,-128
 800583c:	01000c04 	movi	r4,48
 8005840:	11056626 	beq	r2,r4,8006ddc <___svfprintf_internal_r+0x1a54>
 8005844:	dac03117 	ldw	r11,196(sp)
 8005848:	193fffc5 	stb	r4,-1(r3)
 800584c:	5affffc4 	addi	r11,r11,-1
 8005850:	dac03115 	stw	r11,196(sp)
 8005854:	b2e5c83a 	sub	r18,r22,r11
 8005858:	9005883a 	mov	r2,r18
 800585c:	9240010e 	bge	r18,r9,8005864 <___svfprintf_internal_r+0x4dc>
 8005860:	4805883a 	mov	r2,r9
 8005864:	d8802a15 	stw	r2,168(sp)
 8005868:	d8003415 	stw	zero,208(sp)
 800586c:	a8803fcc 	andi	r2,r21,255
 8005870:	1080201c 	xori	r2,r2,128
 8005874:	10bfe004 	addi	r2,r2,-128
 8005878:	10000326 	beq	r2,zero,8005888 <___svfprintf_internal_r+0x500>
 800587c:	d8c02a17 	ldw	r3,168(sp)
 8005880:	18c00044 	addi	r3,r3,1
 8005884:	d8c02a15 	stw	r3,168(sp)
 8005888:	8ac0008c 	andi	r11,r17,2
 800588c:	dac02b15 	stw	r11,172(sp)
 8005890:	58000326 	beq	r11,zero,80058a0 <___svfprintf_internal_r+0x518>
 8005894:	db002a17 	ldw	r12,168(sp)
 8005898:	63000084 	addi	r12,r12,2
 800589c:	db002a15 	stw	r12,168(sp)
 80058a0:	88c0210c 	andi	r3,r17,132
 80058a4:	d8c02c15 	stw	r3,176(sp)
 80058a8:	1802021e 	bne	r3,zero,80060b4 <___svfprintf_internal_r+0xd2c>
 80058ac:	dac02e17 	ldw	r11,184(sp)
 80058b0:	db002a17 	ldw	r12,168(sp)
 80058b4:	5b39c83a 	sub	fp,r11,r12
 80058b8:	0701fe0e 	bge	zero,fp,80060b4 <___svfprintf_internal_r+0xd2c>
 80058bc:	02400404 	movi	r9,16
 80058c0:	d8c02017 	ldw	r3,128(sp)
 80058c4:	d8801f17 	ldw	r2,124(sp)
 80058c8:	4f057d0e 	bge	r9,fp,8006ec0 <___svfprintf_internal_r+0x1b38>
 80058cc:	014200b4 	movhi	r5,2050
 80058d0:	e009883a 	mov	r4,fp
 80058d4:	29414984 	addi	r5,r5,1318
 80058d8:	dc003c15 	stw	r16,240(sp)
 80058dc:	9039883a 	mov	fp,r18
 80058e0:	d9403615 	stw	r5,216(sp)
 80058e4:	8825883a 	mov	r18,r17
 80058e8:	482b883a 	mov	r21,r9
 80058ec:	04c001c4 	movi	r19,7
 80058f0:	dc002f17 	ldw	r16,188(sp)
 80058f4:	2023883a 	mov	r17,r4
 80058f8:	00000306 	br	8005908 <___svfprintf_internal_r+0x580>
 80058fc:	8c7ffc04 	addi	r17,r17,-16
 8005900:	42000204 	addi	r8,r8,8
 8005904:	ac40130e 	bge	r21,r17,8005954 <___svfprintf_internal_r+0x5cc>
 8005908:	02c200b4 	movhi	r11,2050
 800590c:	18c00404 	addi	r3,r3,16
 8005910:	10800044 	addi	r2,r2,1
 8005914:	5ac14984 	addi	r11,r11,1318
 8005918:	42c00015 	stw	r11,0(r8)
 800591c:	45400115 	stw	r21,4(r8)
 8005920:	d8c02015 	stw	r3,128(sp)
 8005924:	d8801f15 	stw	r2,124(sp)
 8005928:	98bff40e 	bge	r19,r2,80058fc <__alt_data_end+0xfc0058fc>
 800592c:	8009883a 	mov	r4,r16
 8005930:	b80b883a 	mov	r5,r23
 8005934:	b00d883a 	mov	r6,r22
 8005938:	800ddd80 	call	800ddd8 <__ssprint_r>
 800593c:	103f5a1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8005940:	8c7ffc04 	addi	r17,r17,-16
 8005944:	d8c02017 	ldw	r3,128(sp)
 8005948:	d8801f17 	ldw	r2,124(sp)
 800594c:	da000404 	addi	r8,sp,16
 8005950:	ac7fed16 	blt	r21,r17,8005908 <__alt_data_end+0xfc005908>
 8005954:	dc003c17 	ldw	r16,240(sp)
 8005958:	8809883a 	mov	r4,r17
 800595c:	9023883a 	mov	r17,r18
 8005960:	e025883a 	mov	r18,fp
 8005964:	2039883a 	mov	fp,r4
 8005968:	db003617 	ldw	r12,216(sp)
 800596c:	e0c7883a 	add	r3,fp,r3
 8005970:	10800044 	addi	r2,r2,1
 8005974:	43000015 	stw	r12,0(r8)
 8005978:	47000115 	stw	fp,4(r8)
 800597c:	d8c02015 	stw	r3,128(sp)
 8005980:	d8801f15 	stw	r2,124(sp)
 8005984:	010001c4 	movi	r4,7
 8005988:	20833516 	blt	r4,r2,8006660 <___svfprintf_internal_r+0x12d8>
 800598c:	d8802787 	ldb	r2,158(sp)
 8005990:	42000204 	addi	r8,r8,8
 8005994:	10000c26 	beq	r2,zero,80059c8 <___svfprintf_internal_r+0x640>
 8005998:	d8801f17 	ldw	r2,124(sp)
 800599c:	d9002784 	addi	r4,sp,158
 80059a0:	18c00044 	addi	r3,r3,1
 80059a4:	10800044 	addi	r2,r2,1
 80059a8:	41000015 	stw	r4,0(r8)
 80059ac:	01000044 	movi	r4,1
 80059b0:	41000115 	stw	r4,4(r8)
 80059b4:	d8c02015 	stw	r3,128(sp)
 80059b8:	d8801f15 	stw	r2,124(sp)
 80059bc:	010001c4 	movi	r4,7
 80059c0:	2082df16 	blt	r4,r2,8006540 <___svfprintf_internal_r+0x11b8>
 80059c4:	42000204 	addi	r8,r8,8
 80059c8:	dac02b17 	ldw	r11,172(sp)
 80059cc:	58000c26 	beq	r11,zero,8005a00 <___svfprintf_internal_r+0x678>
 80059d0:	d8801f17 	ldw	r2,124(sp)
 80059d4:	d9002704 	addi	r4,sp,156
 80059d8:	18c00084 	addi	r3,r3,2
 80059dc:	10800044 	addi	r2,r2,1
 80059e0:	41000015 	stw	r4,0(r8)
 80059e4:	01000084 	movi	r4,2
 80059e8:	41000115 	stw	r4,4(r8)
 80059ec:	d8c02015 	stw	r3,128(sp)
 80059f0:	d8801f15 	stw	r2,124(sp)
 80059f4:	010001c4 	movi	r4,7
 80059f8:	2082d916 	blt	r4,r2,8006560 <___svfprintf_internal_r+0x11d8>
 80059fc:	42000204 	addi	r8,r8,8
 8005a00:	db002c17 	ldw	r12,176(sp)
 8005a04:	00802004 	movi	r2,128
 8005a08:	60822026 	beq	r12,r2,800628c <___svfprintf_internal_r+0xf04>
 8005a0c:	db003217 	ldw	r12,200(sp)
 8005a10:	64abc83a 	sub	r21,r12,r18
 8005a14:	0540310e 	bge	zero,r21,8005adc <___svfprintf_internal_r+0x754>
 8005a18:	07000404 	movi	fp,16
 8005a1c:	d8801f17 	ldw	r2,124(sp)
 8005a20:	e544180e 	bge	fp,r21,8006a84 <___svfprintf_internal_r+0x16fc>
 8005a24:	014200b4 	movhi	r5,2050
 8005a28:	a809883a 	mov	r4,r21
 8005a2c:	29414584 	addi	r5,r5,1302
 8005a30:	dc002c15 	stw	r16,176(sp)
 8005a34:	902b883a 	mov	r21,r18
 8005a38:	d9402b15 	stw	r5,172(sp)
 8005a3c:	8825883a 	mov	r18,r17
 8005a40:	04c001c4 	movi	r19,7
 8005a44:	dc002f17 	ldw	r16,188(sp)
 8005a48:	2023883a 	mov	r17,r4
 8005a4c:	00000306 	br	8005a5c <___svfprintf_internal_r+0x6d4>
 8005a50:	8c7ffc04 	addi	r17,r17,-16
 8005a54:	42000204 	addi	r8,r8,8
 8005a58:	e440110e 	bge	fp,r17,8005aa0 <___svfprintf_internal_r+0x718>
 8005a5c:	18c00404 	addi	r3,r3,16
 8005a60:	10800044 	addi	r2,r2,1
 8005a64:	45000015 	stw	r20,0(r8)
 8005a68:	47000115 	stw	fp,4(r8)
 8005a6c:	d8c02015 	stw	r3,128(sp)
 8005a70:	d8801f15 	stw	r2,124(sp)
 8005a74:	98bff60e 	bge	r19,r2,8005a50 <__alt_data_end+0xfc005a50>
 8005a78:	8009883a 	mov	r4,r16
 8005a7c:	b80b883a 	mov	r5,r23
 8005a80:	b00d883a 	mov	r6,r22
 8005a84:	800ddd80 	call	800ddd8 <__ssprint_r>
 8005a88:	103f071e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8005a8c:	8c7ffc04 	addi	r17,r17,-16
 8005a90:	d8c02017 	ldw	r3,128(sp)
 8005a94:	d8801f17 	ldw	r2,124(sp)
 8005a98:	da000404 	addi	r8,sp,16
 8005a9c:	e47fef16 	blt	fp,r17,8005a5c <__alt_data_end+0xfc005a5c>
 8005aa0:	dc002c17 	ldw	r16,176(sp)
 8005aa4:	8809883a 	mov	r4,r17
 8005aa8:	9023883a 	mov	r17,r18
 8005aac:	a825883a 	mov	r18,r21
 8005ab0:	202b883a 	mov	r21,r4
 8005ab4:	dac02b17 	ldw	r11,172(sp)
 8005ab8:	1d47883a 	add	r3,r3,r21
 8005abc:	10800044 	addi	r2,r2,1
 8005ac0:	42c00015 	stw	r11,0(r8)
 8005ac4:	45400115 	stw	r21,4(r8)
 8005ac8:	d8c02015 	stw	r3,128(sp)
 8005acc:	d8801f15 	stw	r2,124(sp)
 8005ad0:	010001c4 	movi	r4,7
 8005ad4:	20829216 	blt	r4,r2,8006520 <___svfprintf_internal_r+0x1198>
 8005ad8:	42000204 	addi	r8,r8,8
 8005adc:	8880400c 	andi	r2,r17,256
 8005ae0:	1001a11e 	bne	r2,zero,8006168 <___svfprintf_internal_r+0xde0>
 8005ae4:	d8801f17 	ldw	r2,124(sp)
 8005ae8:	db003117 	ldw	r12,196(sp)
 8005aec:	1c87883a 	add	r3,r3,r18
 8005af0:	10800044 	addi	r2,r2,1
 8005af4:	43000015 	stw	r12,0(r8)
 8005af8:	44800115 	stw	r18,4(r8)
 8005afc:	d8c02015 	stw	r3,128(sp)
 8005b00:	d8801f15 	stw	r2,124(sp)
 8005b04:	010001c4 	movi	r4,7
 8005b08:	20826d16 	blt	r4,r2,80064c0 <___svfprintf_internal_r+0x1138>
 8005b0c:	42000204 	addi	r8,r8,8
 8005b10:	8c40010c 	andi	r17,r17,4
 8005b14:	88003226 	beq	r17,zero,8005be0 <___svfprintf_internal_r+0x858>
 8005b18:	db002e17 	ldw	r12,184(sp)
 8005b1c:	dac02a17 	ldw	r11,168(sp)
 8005b20:	62e1c83a 	sub	r16,r12,r11
 8005b24:	04002e0e 	bge	zero,r16,8005be0 <___svfprintf_internal_r+0x858>
 8005b28:	04400404 	movi	r17,16
 8005b2c:	d8801f17 	ldw	r2,124(sp)
 8005b30:	8c05240e 	bge	r17,r16,8006fc4 <___svfprintf_internal_r+0x1c3c>
 8005b34:	010200b4 	movhi	r4,2050
 8005b38:	21014984 	addi	r4,r4,1318
 8005b3c:	d9003615 	stw	r4,216(sp)
 8005b40:	048001c4 	movi	r18,7
 8005b44:	dcc02f17 	ldw	r19,188(sp)
 8005b48:	00000306 	br	8005b58 <___svfprintf_internal_r+0x7d0>
 8005b4c:	843ffc04 	addi	r16,r16,-16
 8005b50:	42000204 	addi	r8,r8,8
 8005b54:	8c00130e 	bge	r17,r16,8005ba4 <___svfprintf_internal_r+0x81c>
 8005b58:	014200b4 	movhi	r5,2050
 8005b5c:	18c00404 	addi	r3,r3,16
 8005b60:	10800044 	addi	r2,r2,1
 8005b64:	29414984 	addi	r5,r5,1318
 8005b68:	41400015 	stw	r5,0(r8)
 8005b6c:	44400115 	stw	r17,4(r8)
 8005b70:	d8c02015 	stw	r3,128(sp)
 8005b74:	d8801f15 	stw	r2,124(sp)
 8005b78:	90bff40e 	bge	r18,r2,8005b4c <__alt_data_end+0xfc005b4c>
 8005b7c:	9809883a 	mov	r4,r19
 8005b80:	b80b883a 	mov	r5,r23
 8005b84:	b00d883a 	mov	r6,r22
 8005b88:	800ddd80 	call	800ddd8 <__ssprint_r>
 8005b8c:	103ec61e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8005b90:	843ffc04 	addi	r16,r16,-16
 8005b94:	d8c02017 	ldw	r3,128(sp)
 8005b98:	d8801f17 	ldw	r2,124(sp)
 8005b9c:	da000404 	addi	r8,sp,16
 8005ba0:	8c3fed16 	blt	r17,r16,8005b58 <__alt_data_end+0xfc005b58>
 8005ba4:	dac03617 	ldw	r11,216(sp)
 8005ba8:	1c07883a 	add	r3,r3,r16
 8005bac:	10800044 	addi	r2,r2,1
 8005bb0:	42c00015 	stw	r11,0(r8)
 8005bb4:	44000115 	stw	r16,4(r8)
 8005bb8:	d8c02015 	stw	r3,128(sp)
 8005bbc:	d8801f15 	stw	r2,124(sp)
 8005bc0:	010001c4 	movi	r4,7
 8005bc4:	2080060e 	bge	r4,r2,8005be0 <___svfprintf_internal_r+0x858>
 8005bc8:	d9002f17 	ldw	r4,188(sp)
 8005bcc:	b80b883a 	mov	r5,r23
 8005bd0:	b00d883a 	mov	r6,r22
 8005bd4:	800ddd80 	call	800ddd8 <__ssprint_r>
 8005bd8:	103eb31e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8005bdc:	d8c02017 	ldw	r3,128(sp)
 8005be0:	d8802a17 	ldw	r2,168(sp)
 8005be4:	db002e17 	ldw	r12,184(sp)
 8005be8:	1300010e 	bge	r2,r12,8005bf0 <___svfprintf_internal_r+0x868>
 8005bec:	6005883a 	mov	r2,r12
 8005bf0:	dac03017 	ldw	r11,192(sp)
 8005bf4:	5897883a 	add	r11,r11,r2
 8005bf8:	dac03015 	stw	r11,192(sp)
 8005bfc:	1802381e 	bne	r3,zero,80064e0 <___svfprintf_internal_r+0x1158>
 8005c00:	d8001f15 	stw	zero,124(sp)
 8005c04:	da000404 	addi	r8,sp,16
 8005c08:	003e0b06 	br	8005438 <__alt_data_end+0xfc005438>
 8005c0c:	8c400414 	ori	r17,r17,16
 8005c10:	d8c02915 	stw	r3,164(sp)
 8005c14:	8880080c 	andi	r2,r17,32
 8005c18:	10010c26 	beq	r2,zero,800604c <___svfprintf_internal_r+0xcc4>
 8005c1c:	db002d17 	ldw	r12,180(sp)
 8005c20:	0005883a 	mov	r2,zero
 8005c24:	64c00017 	ldw	r19,0(r12)
 8005c28:	67000117 	ldw	fp,4(r12)
 8005c2c:	63000204 	addi	r12,r12,8
 8005c30:	db002d15 	stw	r12,180(sp)
 8005c34:	9f06b03a 	or	r3,r19,fp
 8005c38:	d8002785 	stb	zero,158(sp)
 8005c3c:	da403215 	stw	r9,200(sp)
 8005c40:	002b883a 	mov	r21,zero
 8005c44:	003ee206 	br	80057d0 <__alt_data_end+0xfc0057d0>
 8005c48:	8c400414 	ori	r17,r17,16
 8005c4c:	d8c02915 	stw	r3,164(sp)
 8005c50:	8880080c 	andi	r2,r17,32
 8005c54:	1000ee26 	beq	r2,zero,8006010 <___svfprintf_internal_r+0xc88>
 8005c58:	dac02d17 	ldw	r11,180(sp)
 8005c5c:	00800044 	movi	r2,1
 8005c60:	5cc00017 	ldw	r19,0(r11)
 8005c64:	5f000117 	ldw	fp,4(r11)
 8005c68:	5ac00204 	addi	r11,r11,8
 8005c6c:	dac02d15 	stw	r11,180(sp)
 8005c70:	9f06b03a 	or	r3,r19,fp
 8005c74:	003ff006 	br	8005c38 <__alt_data_end+0xfc005c38>
 8005c78:	db002d17 	ldw	r12,180(sp)
 8005c7c:	dac02d17 	ldw	r11,180(sp)
 8005c80:	d8c02915 	stw	r3,164(sp)
 8005c84:	63000017 	ldw	r12,0(r12)
 8005c88:	5ac00117 	ldw	r11,4(r11)
 8005c8c:	d9802785 	stb	r6,158(sp)
 8005c90:	6009883a 	mov	r4,r12
 8005c94:	580b883a 	mov	r5,r11
 8005c98:	db003715 	stw	r12,220(sp)
 8005c9c:	da004015 	stw	r8,256(sp)
 8005ca0:	da403f15 	stw	r9,252(sp)
 8005ca4:	dac03815 	stw	r11,224(sp)
 8005ca8:	800db840 	call	800db84 <__fpclassifyd>
 8005cac:	db002d17 	ldw	r12,180(sp)
 8005cb0:	04800044 	movi	r18,1
 8005cb4:	da004017 	ldw	r8,256(sp)
 8005cb8:	64c00204 	addi	r19,r12,8
 8005cbc:	da403f17 	ldw	r9,252(sp)
 8005cc0:	d9003717 	ldw	r4,220(sp)
 8005cc4:	d9403817 	ldw	r5,224(sp)
 8005cc8:	14832c1e 	bne	r2,r18,800697c <___svfprintf_internal_r+0x15f4>
 8005ccc:	000d883a 	mov	r6,zero
 8005cd0:	000f883a 	mov	r7,zero
 8005cd4:	8003ea80 	call	8003ea8 <__ledf2>
 8005cd8:	da004017 	ldw	r8,256(sp)
 8005cdc:	1004c416 	blt	r2,zero,8006ff0 <___svfprintf_internal_r+0x1c68>
 8005ce0:	dd402783 	ldbu	r21,158(sp)
 8005ce4:	008011c4 	movi	r2,71
 8005ce8:	14041a0e 	bge	r2,r16,8006d54 <___svfprintf_internal_r+0x19cc>
 8005cec:	00c200b4 	movhi	r3,2050
 8005cf0:	18c13604 	addi	r3,r3,1240
 8005cf4:	d8c03115 	stw	r3,196(sp)
 8005cf8:	02c000c4 	movi	r11,3
 8005cfc:	00bfdfc4 	movi	r2,-129
 8005d00:	dac02a15 	stw	r11,168(sp)
 8005d04:	88a2703a 	and	r17,r17,r2
 8005d08:	dcc02d15 	stw	r19,180(sp)
 8005d0c:	5825883a 	mov	r18,r11
 8005d10:	d8003215 	stw	zero,200(sp)
 8005d14:	d8003415 	stw	zero,208(sp)
 8005d18:	003ed406 	br	800586c <__alt_data_end+0xfc00586c>
 8005d1c:	db002d17 	ldw	r12,180(sp)
 8005d20:	00800c04 	movi	r2,48
 8005d24:	d8802705 	stb	r2,156(sp)
 8005d28:	64c00017 	ldw	r19,0(r12)
 8005d2c:	00801e04 	movi	r2,120
 8005d30:	d8802745 	stb	r2,157(sp)
 8005d34:	008200b4 	movhi	r2,2050
 8005d38:	10813e04 	addi	r2,r2,1272
 8005d3c:	63000104 	addi	r12,r12,4
 8005d40:	d8c02915 	stw	r3,164(sp)
 8005d44:	d8803b15 	stw	r2,236(sp)
 8005d48:	0039883a 	mov	fp,zero
 8005d4c:	8c400094 	ori	r17,r17,2
 8005d50:	db002d15 	stw	r12,180(sp)
 8005d54:	00800084 	movi	r2,2
 8005d58:	04001e04 	movi	r16,120
 8005d5c:	9807883a 	mov	r3,r19
 8005d60:	003fb506 	br	8005c38 <__alt_data_end+0xfc005c38>
 8005d64:	8c400214 	ori	r17,r17,8
 8005d68:	1805883a 	mov	r2,r3
 8005d6c:	1c000007 	ldb	r16,0(r3)
 8005d70:	003ddb06 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005d74:	d8c02915 	stw	r3,164(sp)
 8005d78:	d9802785 	stb	r6,158(sp)
 8005d7c:	8880080c 	andi	r2,r17,32
 8005d80:	d8c02d17 	ldw	r3,180(sp)
 8005d84:	103e871e 	bne	r2,zero,80057a4 <__alt_data_end+0xfc0057a4>
 8005d88:	8880040c 	andi	r2,r17,16
 8005d8c:	10027a1e 	bne	r2,zero,8006778 <___svfprintf_internal_r+0x13f0>
 8005d90:	8880100c 	andi	r2,r17,64
 8005d94:	10027826 	beq	r2,zero,8006778 <___svfprintf_internal_r+0x13f0>
 8005d98:	1cc0000f 	ldh	r19,0(r3)
 8005d9c:	db002d17 	ldw	r12,180(sp)
 8005da0:	9839d7fa 	srai	fp,r19,31
 8005da4:	63000104 	addi	r12,r12,4
 8005da8:	db002d15 	stw	r12,180(sp)
 8005dac:	e005883a 	mov	r2,fp
 8005db0:	103e830e 	bge	r2,zero,80057c0 <__alt_data_end+0xfc0057c0>
 8005db4:	04e7c83a 	sub	r19,zero,r19
 8005db8:	9804c03a 	cmpne	r2,r19,zero
 8005dbc:	0739c83a 	sub	fp,zero,fp
 8005dc0:	e0b9c83a 	sub	fp,fp,r2
 8005dc4:	05400b44 	movi	r21,45
 8005dc8:	dd402785 	stb	r21,158(sp)
 8005dcc:	da403215 	stw	r9,200(sp)
 8005dd0:	00800044 	movi	r2,1
 8005dd4:	9f06b03a 	or	r3,r19,fp
 8005dd8:	003e7d06 	br	80057d0 <__alt_data_end+0xfc0057d0>
 8005ddc:	8c401014 	ori	r17,r17,64
 8005de0:	1805883a 	mov	r2,r3
 8005de4:	1c000007 	ldb	r16,0(r3)
 8005de8:	003dbd06 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005dec:	1c000007 	ldb	r16,0(r3)
 8005df0:	81c37126 	beq	r16,r7,8006bb8 <___svfprintf_internal_r+0x1830>
 8005df4:	8c400414 	ori	r17,r17,16
 8005df8:	1805883a 	mov	r2,r3
 8005dfc:	003db806 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005e00:	d8c02915 	stw	r3,164(sp)
 8005e04:	d9802785 	stb	r6,158(sp)
 8005e08:	8880080c 	andi	r2,r17,32
 8005e0c:	1002f026 	beq	r2,zero,80069d0 <___svfprintf_internal_r+0x1648>
 8005e10:	db002d17 	ldw	r12,180(sp)
 8005e14:	dac03017 	ldw	r11,192(sp)
 8005e18:	60800017 	ldw	r2,0(r12)
 8005e1c:	5807d7fa 	srai	r3,r11,31
 8005e20:	63000104 	addi	r12,r12,4
 8005e24:	db002d15 	stw	r12,180(sp)
 8005e28:	12c00015 	stw	r11,0(r2)
 8005e2c:	10c00115 	stw	r3,4(r2)
 8005e30:	003d8106 	br	8005438 <__alt_data_end+0xfc005438>
 8005e34:	30803fcc 	andi	r2,r6,255
 8005e38:	1080201c 	xori	r2,r2,128
 8005e3c:	10bfe004 	addi	r2,r2,-128
 8005e40:	1002fd1e 	bne	r2,zero,8006a38 <___svfprintf_internal_r+0x16b0>
 8005e44:	1805883a 	mov	r2,r3
 8005e48:	01800804 	movi	r6,32
 8005e4c:	1c000007 	ldb	r16,0(r3)
 8005e50:	003da306 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005e54:	030200b4 	movhi	r12,2050
 8005e58:	63013904 	addi	r12,r12,1252
 8005e5c:	d8c02915 	stw	r3,164(sp)
 8005e60:	d9802785 	stb	r6,158(sp)
 8005e64:	db003b15 	stw	r12,236(sp)
 8005e68:	88c0080c 	andi	r3,r17,32
 8005e6c:	d8802d17 	ldw	r2,180(sp)
 8005e70:	18005c26 	beq	r3,zero,8005fe4 <___svfprintf_internal_r+0xc5c>
 8005e74:	dac02d17 	ldw	r11,180(sp)
 8005e78:	14c00017 	ldw	r19,0(r2)
 8005e7c:	17000117 	ldw	fp,4(r2)
 8005e80:	5ac00204 	addi	r11,r11,8
 8005e84:	dac02d15 	stw	r11,180(sp)
 8005e88:	8880004c 	andi	r2,r17,1
 8005e8c:	10022f26 	beq	r2,zero,800674c <___svfprintf_internal_r+0x13c4>
 8005e90:	9f06b03a 	or	r3,r19,fp
 8005e94:	1802eb26 	beq	r3,zero,8006a44 <___svfprintf_internal_r+0x16bc>
 8005e98:	00800c04 	movi	r2,48
 8005e9c:	d8802705 	stb	r2,156(sp)
 8005ea0:	dc002745 	stb	r16,157(sp)
 8005ea4:	8c400094 	ori	r17,r17,2
 8005ea8:	00800084 	movi	r2,2
 8005eac:	003f6206 	br	8005c38 <__alt_data_end+0xfc005c38>
 8005eb0:	dac02d17 	ldw	r11,180(sp)
 8005eb4:	db002d17 	ldw	r12,180(sp)
 8005eb8:	d8c02915 	stw	r3,164(sp)
 8005ebc:	5ac00017 	ldw	r11,0(r11)
 8005ec0:	d8002785 	stb	zero,158(sp)
 8005ec4:	64c00104 	addi	r19,r12,4
 8005ec8:	dac03115 	stw	r11,196(sp)
 8005ecc:	58042e26 	beq	r11,zero,8006f88 <___svfprintf_internal_r+0x1c00>
 8005ed0:	d9003117 	ldw	r4,196(sp)
 8005ed4:	4803c416 	blt	r9,zero,8006de8 <___svfprintf_internal_r+0x1a60>
 8005ed8:	480d883a 	mov	r6,r9
 8005edc:	000b883a 	mov	r5,zero
 8005ee0:	da004015 	stw	r8,256(sp)
 8005ee4:	da403f15 	stw	r9,252(sp)
 8005ee8:	800c0500 	call	800c050 <memchr>
 8005eec:	da004017 	ldw	r8,256(sp)
 8005ef0:	da403f17 	ldw	r9,252(sp)
 8005ef4:	10048a26 	beq	r2,zero,8007120 <___svfprintf_internal_r+0x1d98>
 8005ef8:	d8c03117 	ldw	r3,196(sp)
 8005efc:	10e5c83a 	sub	r18,r2,r3
 8005f00:	4c80010e 	bge	r9,r18,8005f08 <___svfprintf_internal_r+0xb80>
 8005f04:	4825883a 	mov	r18,r9
 8005f08:	9005883a 	mov	r2,r18
 8005f0c:	9003bb16 	blt	r18,zero,8006dfc <___svfprintf_internal_r+0x1a74>
 8005f10:	dd402783 	ldbu	r21,158(sp)
 8005f14:	d8802a15 	stw	r2,168(sp)
 8005f18:	dcc02d15 	stw	r19,180(sp)
 8005f1c:	d8003215 	stw	zero,200(sp)
 8005f20:	d8003415 	stw	zero,208(sp)
 8005f24:	003e5106 	br	800586c <__alt_data_end+0xfc00586c>
 8005f28:	8c400814 	ori	r17,r17,32
 8005f2c:	1805883a 	mov	r2,r3
 8005f30:	1c000007 	ldb	r16,0(r3)
 8005f34:	003d6a06 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005f38:	db002d17 	ldw	r12,180(sp)
 8005f3c:	d8c02915 	stw	r3,164(sp)
 8005f40:	dac01404 	addi	r11,sp,80
 8005f44:	60800017 	ldw	r2,0(r12)
 8005f48:	00c00044 	movi	r3,1
 8005f4c:	63000104 	addi	r12,r12,4
 8005f50:	d8801405 	stb	r2,80(sp)
 8005f54:	d8c02a15 	stw	r3,168(sp)
 8005f58:	d8002785 	stb	zero,158(sp)
 8005f5c:	db002d15 	stw	r12,180(sp)
 8005f60:	1825883a 	mov	r18,r3
 8005f64:	d8003215 	stw	zero,200(sp)
 8005f68:	d8003415 	stw	zero,208(sp)
 8005f6c:	dac03115 	stw	r11,196(sp)
 8005f70:	0005883a 	mov	r2,zero
 8005f74:	003e4406 	br	8005888 <__alt_data_end+0xfc005888>
 8005f78:	dac02d17 	ldw	r11,180(sp)
 8005f7c:	db002d17 	ldw	r12,180(sp)
 8005f80:	5ac00017 	ldw	r11,0(r11)
 8005f84:	dac02e15 	stw	r11,184(sp)
 8005f88:	62c00104 	addi	r11,r12,4
 8005f8c:	db002e17 	ldw	r12,184(sp)
 8005f90:	60030316 	blt	r12,zero,8006ba0 <___svfprintf_internal_r+0x1818>
 8005f94:	dac02d15 	stw	r11,180(sp)
 8005f98:	1805883a 	mov	r2,r3
 8005f9c:	1c000007 	ldb	r16,0(r3)
 8005fa0:	003d4f06 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005fa4:	1805883a 	mov	r2,r3
 8005fa8:	01800ac4 	movi	r6,43
 8005fac:	1c000007 	ldb	r16,0(r3)
 8005fb0:	003d4b06 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005fb4:	8c400054 	ori	r17,r17,1
 8005fb8:	1805883a 	mov	r2,r3
 8005fbc:	1c000007 	ldb	r16,0(r3)
 8005fc0:	003d4706 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8005fc4:	008200b4 	movhi	r2,2050
 8005fc8:	10813e04 	addi	r2,r2,1272
 8005fcc:	d8c02915 	stw	r3,164(sp)
 8005fd0:	d8803b15 	stw	r2,236(sp)
 8005fd4:	d9802785 	stb	r6,158(sp)
 8005fd8:	88c0080c 	andi	r3,r17,32
 8005fdc:	d8802d17 	ldw	r2,180(sp)
 8005fe0:	183fa41e 	bne	r3,zero,8005e74 <__alt_data_end+0xfc005e74>
 8005fe4:	88c0040c 	andi	r3,r17,16
 8005fe8:	18028b26 	beq	r3,zero,8006a18 <___svfprintf_internal_r+0x1690>
 8005fec:	db002d17 	ldw	r12,180(sp)
 8005ff0:	14c00017 	ldw	r19,0(r2)
 8005ff4:	0039883a 	mov	fp,zero
 8005ff8:	63000104 	addi	r12,r12,4
 8005ffc:	db002d15 	stw	r12,180(sp)
 8006000:	003fa106 	br	8005e88 <__alt_data_end+0xfc005e88>
 8006004:	d8c02915 	stw	r3,164(sp)
 8006008:	8880080c 	andi	r2,r17,32
 800600c:	103f121e 	bne	r2,zero,8005c58 <__alt_data_end+0xfc005c58>
 8006010:	8880040c 	andi	r2,r17,16
 8006014:	1001df1e 	bne	r2,zero,8006794 <___svfprintf_internal_r+0x140c>
 8006018:	8880100c 	andi	r2,r17,64
 800601c:	1001dd26 	beq	r2,zero,8006794 <___svfprintf_internal_r+0x140c>
 8006020:	dac02d17 	ldw	r11,180(sp)
 8006024:	0039883a 	mov	fp,zero
 8006028:	00800044 	movi	r2,1
 800602c:	5cc0000b 	ldhu	r19,0(r11)
 8006030:	5ac00104 	addi	r11,r11,4
 8006034:	dac02d15 	stw	r11,180(sp)
 8006038:	9807883a 	mov	r3,r19
 800603c:	003efe06 	br	8005c38 <__alt_data_end+0xfc005c38>
 8006040:	d8c02915 	stw	r3,164(sp)
 8006044:	8880080c 	andi	r2,r17,32
 8006048:	103ef41e 	bne	r2,zero,8005c1c <__alt_data_end+0xfc005c1c>
 800604c:	8880040c 	andi	r2,r17,16
 8006050:	1001c11e 	bne	r2,zero,8006758 <___svfprintf_internal_r+0x13d0>
 8006054:	8880100c 	andi	r2,r17,64
 8006058:	1001bf26 	beq	r2,zero,8006758 <___svfprintf_internal_r+0x13d0>
 800605c:	db002d17 	ldw	r12,180(sp)
 8006060:	0039883a 	mov	fp,zero
 8006064:	0005883a 	mov	r2,zero
 8006068:	64c0000b 	ldhu	r19,0(r12)
 800606c:	63000104 	addi	r12,r12,4
 8006070:	db002d15 	stw	r12,180(sp)
 8006074:	9807883a 	mov	r3,r19
 8006078:	003eef06 	br	8005c38 <__alt_data_end+0xfc005c38>
 800607c:	d8c02915 	stw	r3,164(sp)
 8006080:	d9802785 	stb	r6,158(sp)
 8006084:	803d8226 	beq	r16,zero,8005690 <__alt_data_end+0xfc005690>
 8006088:	02c00044 	movi	r11,1
 800608c:	db001404 	addi	r12,sp,80
 8006090:	dac02a15 	stw	r11,168(sp)
 8006094:	dc001405 	stb	r16,80(sp)
 8006098:	d8002785 	stb	zero,158(sp)
 800609c:	5825883a 	mov	r18,r11
 80060a0:	d8003215 	stw	zero,200(sp)
 80060a4:	d8003415 	stw	zero,208(sp)
 80060a8:	db003115 	stw	r12,196(sp)
 80060ac:	0005883a 	mov	r2,zero
 80060b0:	003df506 	br	8005888 <__alt_data_end+0xfc005888>
 80060b4:	d8c02017 	ldw	r3,128(sp)
 80060b8:	003e3606 	br	8005994 <__alt_data_end+0xfc005994>
 80060bc:	10803fcc 	andi	r2,r2,255
 80060c0:	00c00044 	movi	r3,1
 80060c4:	10fdca1e 	bne	r2,r3,80057f0 <__alt_data_end+0xfc0057f0>
 80060c8:	e000021e 	bne	fp,zero,80060d4 <___svfprintf_internal_r+0xd4c>
 80060cc:	00800244 	movi	r2,9
 80060d0:	14c01f2e 	bgeu	r2,r19,8006150 <___svfprintf_internal_r+0xdc8>
 80060d4:	dc002a15 	stw	r16,168(sp)
 80060d8:	dc402b15 	stw	r17,172(sp)
 80060dc:	9821883a 	mov	r16,r19
 80060e0:	e023883a 	mov	r17,fp
 80060e4:	b025883a 	mov	r18,r22
 80060e8:	4027883a 	mov	r19,r8
 80060ec:	4839883a 	mov	fp,r9
 80060f0:	8009883a 	mov	r4,r16
 80060f4:	880b883a 	mov	r5,r17
 80060f8:	01800284 	movi	r6,10
 80060fc:	000f883a 	mov	r7,zero
 8006100:	80113940 	call	8011394 <__umoddi3>
 8006104:	10800c04 	addi	r2,r2,48
 8006108:	94bfffc4 	addi	r18,r18,-1
 800610c:	8009883a 	mov	r4,r16
 8006110:	880b883a 	mov	r5,r17
 8006114:	01800284 	movi	r6,10
 8006118:	000f883a 	mov	r7,zero
 800611c:	90800005 	stb	r2,0(r18)
 8006120:	8010dd40 	call	8010dd4 <__udivdi3>
 8006124:	1021883a 	mov	r16,r2
 8006128:	10c4b03a 	or	r2,r2,r3
 800612c:	1823883a 	mov	r17,r3
 8006130:	103fef1e 	bne	r2,zero,80060f0 <__alt_data_end+0xfc0060f0>
 8006134:	dc803115 	stw	r18,196(sp)
 8006138:	dc002a17 	ldw	r16,168(sp)
 800613c:	9811883a 	mov	r8,r19
 8006140:	dc402b17 	ldw	r17,172(sp)
 8006144:	e013883a 	mov	r9,fp
 8006148:	b4a5c83a 	sub	r18,r22,r18
 800614c:	003dc206 	br	8005858 <__alt_data_end+0xfc005858>
 8006150:	9cc00c04 	addi	r19,r19,48
 8006154:	db001dc4 	addi	r12,sp,119
 8006158:	dcc01dc5 	stb	r19,119(sp)
 800615c:	dc803d17 	ldw	r18,244(sp)
 8006160:	db003115 	stw	r12,196(sp)
 8006164:	003dbc06 	br	8005858 <__alt_data_end+0xfc005858>
 8006168:	00801944 	movi	r2,101
 800616c:	14008d0e 	bge	r2,r16,80063a4 <___svfprintf_internal_r+0x101c>
 8006170:	d9003717 	ldw	r4,220(sp)
 8006174:	d9403817 	ldw	r5,224(sp)
 8006178:	000d883a 	mov	r6,zero
 800617c:	000f883a 	mov	r7,zero
 8006180:	d8c03e15 	stw	r3,248(sp)
 8006184:	da004015 	stw	r8,256(sp)
 8006188:	801231c0 	call	801231c <__eqdf2>
 800618c:	d8c03e17 	ldw	r3,248(sp)
 8006190:	da004017 	ldw	r8,256(sp)
 8006194:	1000fd1e 	bne	r2,zero,800658c <___svfprintf_internal_r+0x1204>
 8006198:	d8801f17 	ldw	r2,124(sp)
 800619c:	010200b4 	movhi	r4,2050
 80061a0:	21014504 	addi	r4,r4,1300
 80061a4:	18c00044 	addi	r3,r3,1
 80061a8:	10800044 	addi	r2,r2,1
 80061ac:	41000015 	stw	r4,0(r8)
 80061b0:	01000044 	movi	r4,1
 80061b4:	41000115 	stw	r4,4(r8)
 80061b8:	d8c02015 	stw	r3,128(sp)
 80061bc:	d8801f15 	stw	r2,124(sp)
 80061c0:	010001c4 	movi	r4,7
 80061c4:	20823316 	blt	r4,r2,8006a94 <___svfprintf_internal_r+0x170c>
 80061c8:	42000204 	addi	r8,r8,8
 80061cc:	d8802617 	ldw	r2,152(sp)
 80061d0:	dac03317 	ldw	r11,204(sp)
 80061d4:	12c00216 	blt	r2,r11,80061e0 <___svfprintf_internal_r+0xe58>
 80061d8:	8880004c 	andi	r2,r17,1
 80061dc:	103e4c26 	beq	r2,zero,8005b10 <__alt_data_end+0xfc005b10>
 80061e0:	db003917 	ldw	r12,228(sp)
 80061e4:	d8801f17 	ldw	r2,124(sp)
 80061e8:	dac03517 	ldw	r11,212(sp)
 80061ec:	1b07883a 	add	r3,r3,r12
 80061f0:	10800044 	addi	r2,r2,1
 80061f4:	42c00015 	stw	r11,0(r8)
 80061f8:	43000115 	stw	r12,4(r8)
 80061fc:	d8c02015 	stw	r3,128(sp)
 8006200:	d8801f15 	stw	r2,124(sp)
 8006204:	010001c4 	movi	r4,7
 8006208:	20826f16 	blt	r4,r2,8006bc8 <___svfprintf_internal_r+0x1840>
 800620c:	42000204 	addi	r8,r8,8
 8006210:	db003317 	ldw	r12,204(sp)
 8006214:	643fffc4 	addi	r16,r12,-1
 8006218:	043e3d0e 	bge	zero,r16,8005b10 <__alt_data_end+0xfc005b10>
 800621c:	04800404 	movi	r18,16
 8006220:	d8801f17 	ldw	r2,124(sp)
 8006224:	94009a0e 	bge	r18,r16,8006490 <___svfprintf_internal_r+0x1108>
 8006228:	014200b4 	movhi	r5,2050
 800622c:	29414584 	addi	r5,r5,1302
 8006230:	d9402b15 	stw	r5,172(sp)
 8006234:	054001c4 	movi	r21,7
 8006238:	dcc02f17 	ldw	r19,188(sp)
 800623c:	00000306 	br	800624c <___svfprintf_internal_r+0xec4>
 8006240:	42000204 	addi	r8,r8,8
 8006244:	843ffc04 	addi	r16,r16,-16
 8006248:	9400940e 	bge	r18,r16,800649c <___svfprintf_internal_r+0x1114>
 800624c:	18c00404 	addi	r3,r3,16
 8006250:	10800044 	addi	r2,r2,1
 8006254:	45000015 	stw	r20,0(r8)
 8006258:	44800115 	stw	r18,4(r8)
 800625c:	d8c02015 	stw	r3,128(sp)
 8006260:	d8801f15 	stw	r2,124(sp)
 8006264:	a8bff60e 	bge	r21,r2,8006240 <__alt_data_end+0xfc006240>
 8006268:	9809883a 	mov	r4,r19
 800626c:	b80b883a 	mov	r5,r23
 8006270:	b00d883a 	mov	r6,r22
 8006274:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006278:	103d0b1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 800627c:	d8c02017 	ldw	r3,128(sp)
 8006280:	d8801f17 	ldw	r2,124(sp)
 8006284:	da000404 	addi	r8,sp,16
 8006288:	003fee06 	br	8006244 <__alt_data_end+0xfc006244>
 800628c:	dac02e17 	ldw	r11,184(sp)
 8006290:	db002a17 	ldw	r12,168(sp)
 8006294:	5b2bc83a 	sub	r21,r11,r12
 8006298:	057ddc0e 	bge	zero,r21,8005a0c <__alt_data_end+0xfc005a0c>
 800629c:	07000404 	movi	fp,16
 80062a0:	d8801f17 	ldw	r2,124(sp)
 80062a4:	e5435d0e 	bge	fp,r21,800701c <___svfprintf_internal_r+0x1c94>
 80062a8:	014200b4 	movhi	r5,2050
 80062ac:	a809883a 	mov	r4,r21
 80062b0:	29414584 	addi	r5,r5,1302
 80062b4:	dc002c15 	stw	r16,176(sp)
 80062b8:	902b883a 	mov	r21,r18
 80062bc:	d9402b15 	stw	r5,172(sp)
 80062c0:	8825883a 	mov	r18,r17
 80062c4:	04c001c4 	movi	r19,7
 80062c8:	dc002f17 	ldw	r16,188(sp)
 80062cc:	2023883a 	mov	r17,r4
 80062d0:	00000306 	br	80062e0 <___svfprintf_internal_r+0xf58>
 80062d4:	8c7ffc04 	addi	r17,r17,-16
 80062d8:	42000204 	addi	r8,r8,8
 80062dc:	e440110e 	bge	fp,r17,8006324 <___svfprintf_internal_r+0xf9c>
 80062e0:	18c00404 	addi	r3,r3,16
 80062e4:	10800044 	addi	r2,r2,1
 80062e8:	45000015 	stw	r20,0(r8)
 80062ec:	47000115 	stw	fp,4(r8)
 80062f0:	d8c02015 	stw	r3,128(sp)
 80062f4:	d8801f15 	stw	r2,124(sp)
 80062f8:	98bff60e 	bge	r19,r2,80062d4 <__alt_data_end+0xfc0062d4>
 80062fc:	8009883a 	mov	r4,r16
 8006300:	b80b883a 	mov	r5,r23
 8006304:	b00d883a 	mov	r6,r22
 8006308:	800ddd80 	call	800ddd8 <__ssprint_r>
 800630c:	103ce61e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006310:	8c7ffc04 	addi	r17,r17,-16
 8006314:	d8c02017 	ldw	r3,128(sp)
 8006318:	d8801f17 	ldw	r2,124(sp)
 800631c:	da000404 	addi	r8,sp,16
 8006320:	e47fef16 	blt	fp,r17,80062e0 <__alt_data_end+0xfc0062e0>
 8006324:	dc002c17 	ldw	r16,176(sp)
 8006328:	8809883a 	mov	r4,r17
 800632c:	9023883a 	mov	r17,r18
 8006330:	a825883a 	mov	r18,r21
 8006334:	202b883a 	mov	r21,r4
 8006338:	dac02b17 	ldw	r11,172(sp)
 800633c:	1d47883a 	add	r3,r3,r21
 8006340:	10800044 	addi	r2,r2,1
 8006344:	42c00015 	stw	r11,0(r8)
 8006348:	45400115 	stw	r21,4(r8)
 800634c:	d8c02015 	stw	r3,128(sp)
 8006350:	d8801f15 	stw	r2,124(sp)
 8006354:	010001c4 	movi	r4,7
 8006358:	20818016 	blt	r4,r2,800695c <___svfprintf_internal_r+0x15d4>
 800635c:	42000204 	addi	r8,r8,8
 8006360:	003daa06 	br	8005a0c <__alt_data_end+0xfc005a0c>
 8006364:	d9403b17 	ldw	r5,236(sp)
 8006368:	b007883a 	mov	r3,r22
 800636c:	988003cc 	andi	r2,r19,15
 8006370:	e008973a 	slli	r4,fp,28
 8006374:	2885883a 	add	r2,r5,r2
 8006378:	9826d13a 	srli	r19,r19,4
 800637c:	10800003 	ldbu	r2,0(r2)
 8006380:	e038d13a 	srli	fp,fp,4
 8006384:	18ffffc4 	addi	r3,r3,-1
 8006388:	24e6b03a 	or	r19,r4,r19
 800638c:	18800005 	stb	r2,0(r3)
 8006390:	9f04b03a 	or	r2,r19,fp
 8006394:	103ff51e 	bne	r2,zero,800636c <__alt_data_end+0xfc00636c>
 8006398:	d8c03115 	stw	r3,196(sp)
 800639c:	b0e5c83a 	sub	r18,r22,r3
 80063a0:	003d2d06 	br	8005858 <__alt_data_end+0xfc005858>
 80063a4:	db003317 	ldw	r12,204(sp)
 80063a8:	00800044 	movi	r2,1
 80063ac:	18c00044 	addi	r3,r3,1
 80063b0:	13014b0e 	bge	r2,r12,80068e0 <___svfprintf_internal_r+0x1558>
 80063b4:	dc001f17 	ldw	r16,124(sp)
 80063b8:	dac03117 	ldw	r11,196(sp)
 80063bc:	00800044 	movi	r2,1
 80063c0:	84000044 	addi	r16,r16,1
 80063c4:	40800115 	stw	r2,4(r8)
 80063c8:	42c00015 	stw	r11,0(r8)
 80063cc:	d8c02015 	stw	r3,128(sp)
 80063d0:	dc001f15 	stw	r16,124(sp)
 80063d4:	008001c4 	movi	r2,7
 80063d8:	14014e16 	blt	r2,r16,8006914 <___svfprintf_internal_r+0x158c>
 80063dc:	42000204 	addi	r8,r8,8
 80063e0:	db003917 	ldw	r12,228(sp)
 80063e4:	dac03517 	ldw	r11,212(sp)
 80063e8:	84000044 	addi	r16,r16,1
 80063ec:	1b07883a 	add	r3,r3,r12
 80063f0:	42c00015 	stw	r11,0(r8)
 80063f4:	43000115 	stw	r12,4(r8)
 80063f8:	d8c02015 	stw	r3,128(sp)
 80063fc:	dc001f15 	stw	r16,124(sp)
 8006400:	008001c4 	movi	r2,7
 8006404:	14014c16 	blt	r2,r16,8006938 <___svfprintf_internal_r+0x15b0>
 8006408:	44800204 	addi	r18,r8,8
 800640c:	d9003717 	ldw	r4,220(sp)
 8006410:	d9403817 	ldw	r5,224(sp)
 8006414:	000d883a 	mov	r6,zero
 8006418:	000f883a 	mov	r7,zero
 800641c:	d8c03e15 	stw	r3,248(sp)
 8006420:	801231c0 	call	801231c <__eqdf2>
 8006424:	d8c03e17 	ldw	r3,248(sp)
 8006428:	db003317 	ldw	r12,204(sp)
 800642c:	10009526 	beq	r2,zero,8006684 <___svfprintf_internal_r+0x12fc>
 8006430:	dac03117 	ldw	r11,196(sp)
 8006434:	60bfffc4 	addi	r2,r12,-1
 8006438:	1887883a 	add	r3,r3,r2
 800643c:	59000044 	addi	r4,r11,1
 8006440:	84000044 	addi	r16,r16,1
 8006444:	90800115 	stw	r2,4(r18)
 8006448:	91000015 	stw	r4,0(r18)
 800644c:	d8c02015 	stw	r3,128(sp)
 8006450:	dc001f15 	stw	r16,124(sp)
 8006454:	008001c4 	movi	r2,7
 8006458:	1400b316 	blt	r2,r16,8006728 <___svfprintf_internal_r+0x13a0>
 800645c:	94800204 	addi	r18,r18,8
 8006460:	dac03a17 	ldw	r11,232(sp)
 8006464:	dd4022c4 	addi	r21,sp,139
 8006468:	84000044 	addi	r16,r16,1
 800646c:	58c7883a 	add	r3,r11,r3
 8006470:	95400015 	stw	r21,0(r18)
 8006474:	92c00115 	stw	r11,4(r18)
 8006478:	d8c02015 	stw	r3,128(sp)
 800647c:	dc001f15 	stw	r16,124(sp)
 8006480:	008001c4 	movi	r2,7
 8006484:	14000e16 	blt	r2,r16,80064c0 <___svfprintf_internal_r+0x1138>
 8006488:	92000204 	addi	r8,r18,8
 800648c:	003da006 	br	8005b10 <__alt_data_end+0xfc005b10>
 8006490:	010200b4 	movhi	r4,2050
 8006494:	21014584 	addi	r4,r4,1302
 8006498:	d9002b15 	stw	r4,172(sp)
 800649c:	dac02b17 	ldw	r11,172(sp)
 80064a0:	1c07883a 	add	r3,r3,r16
 80064a4:	44000115 	stw	r16,4(r8)
 80064a8:	42c00015 	stw	r11,0(r8)
 80064ac:	10800044 	addi	r2,r2,1
 80064b0:	d8c02015 	stw	r3,128(sp)
 80064b4:	d8801f15 	stw	r2,124(sp)
 80064b8:	010001c4 	movi	r4,7
 80064bc:	20bd930e 	bge	r4,r2,8005b0c <__alt_data_end+0xfc005b0c>
 80064c0:	d9002f17 	ldw	r4,188(sp)
 80064c4:	b80b883a 	mov	r5,r23
 80064c8:	b00d883a 	mov	r6,r22
 80064cc:	800ddd80 	call	800ddd8 <__ssprint_r>
 80064d0:	103c751e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 80064d4:	d8c02017 	ldw	r3,128(sp)
 80064d8:	da000404 	addi	r8,sp,16
 80064dc:	003d8c06 	br	8005b10 <__alt_data_end+0xfc005b10>
 80064e0:	d9002f17 	ldw	r4,188(sp)
 80064e4:	b80b883a 	mov	r5,r23
 80064e8:	b00d883a 	mov	r6,r22
 80064ec:	800ddd80 	call	800ddd8 <__ssprint_r>
 80064f0:	103dc326 	beq	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 80064f4:	003c6c06 	br	80056a8 <__alt_data_end+0xfc0056a8>
 80064f8:	10803fcc 	andi	r2,r2,255
 80064fc:	1000201e 	bne	r2,zero,8006580 <___svfprintf_internal_r+0x11f8>
 8006500:	8880004c 	andi	r2,r17,1
 8006504:	10001e26 	beq	r2,zero,8006580 <___svfprintf_internal_r+0x11f8>
 8006508:	00800c04 	movi	r2,48
 800650c:	d8c01dc4 	addi	r3,sp,119
 8006510:	d8801dc5 	stb	r2,119(sp)
 8006514:	dc803d17 	ldw	r18,244(sp)
 8006518:	d8c03115 	stw	r3,196(sp)
 800651c:	003cce06 	br	8005858 <__alt_data_end+0xfc005858>
 8006520:	d9002f17 	ldw	r4,188(sp)
 8006524:	b80b883a 	mov	r5,r23
 8006528:	b00d883a 	mov	r6,r22
 800652c:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006530:	103c5d1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006534:	d8c02017 	ldw	r3,128(sp)
 8006538:	da000404 	addi	r8,sp,16
 800653c:	003d6706 	br	8005adc <__alt_data_end+0xfc005adc>
 8006540:	d9002f17 	ldw	r4,188(sp)
 8006544:	b80b883a 	mov	r5,r23
 8006548:	b00d883a 	mov	r6,r22
 800654c:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006550:	103c551e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006554:	d8c02017 	ldw	r3,128(sp)
 8006558:	da000404 	addi	r8,sp,16
 800655c:	003d1a06 	br	80059c8 <__alt_data_end+0xfc0059c8>
 8006560:	d9002f17 	ldw	r4,188(sp)
 8006564:	b80b883a 	mov	r5,r23
 8006568:	b00d883a 	mov	r6,r22
 800656c:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006570:	103c4d1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006574:	d8c02017 	ldw	r3,128(sp)
 8006578:	da000404 	addi	r8,sp,16
 800657c:	003d2006 	br	8005a00 <__alt_data_end+0xfc005a00>
 8006580:	0025883a 	mov	r18,zero
 8006584:	dd803115 	stw	r22,196(sp)
 8006588:	003cb306 	br	8005858 <__alt_data_end+0xfc005858>
 800658c:	dc002617 	ldw	r16,152(sp)
 8006590:	0401480e 	bge	zero,r16,8006ab4 <___svfprintf_internal_r+0x172c>
 8006594:	db003117 	ldw	r12,196(sp)
 8006598:	dac03317 	ldw	r11,204(sp)
 800659c:	62e1883a 	add	r16,r12,r11
 80065a0:	db003417 	ldw	r12,208(sp)
 80065a4:	5825883a 	mov	r18,r11
 80065a8:	62c0010e 	bge	r12,r11,80065b0 <___svfprintf_internal_r+0x1228>
 80065ac:	6025883a 	mov	r18,r12
 80065b0:	04800b0e 	bge	zero,r18,80065e0 <___svfprintf_internal_r+0x1258>
 80065b4:	d8801f17 	ldw	r2,124(sp)
 80065b8:	dac03117 	ldw	r11,196(sp)
 80065bc:	1c87883a 	add	r3,r3,r18
 80065c0:	10800044 	addi	r2,r2,1
 80065c4:	42c00015 	stw	r11,0(r8)
 80065c8:	44800115 	stw	r18,4(r8)
 80065cc:	d8c02015 	stw	r3,128(sp)
 80065d0:	d8801f15 	stw	r2,124(sp)
 80065d4:	010001c4 	movi	r4,7
 80065d8:	20823f16 	blt	r4,r2,8006ed8 <___svfprintf_internal_r+0x1b50>
 80065dc:	42000204 	addi	r8,r8,8
 80065e0:	90023b16 	blt	r18,zero,8006ed0 <___svfprintf_internal_r+0x1b48>
 80065e4:	db003417 	ldw	r12,208(sp)
 80065e8:	64a5c83a 	sub	r18,r12,r18
 80065ec:	0480780e 	bge	zero,r18,80067d0 <___svfprintf_internal_r+0x1448>
 80065f0:	05400404 	movi	r21,16
 80065f4:	d8801f17 	ldw	r2,124(sp)
 80065f8:	ac81140e 	bge	r21,r18,8006a4c <___svfprintf_internal_r+0x16c4>
 80065fc:	014200b4 	movhi	r5,2050
 8006600:	29414584 	addi	r5,r5,1302
 8006604:	d9402b15 	stw	r5,172(sp)
 8006608:	070001c4 	movi	fp,7
 800660c:	dcc02f17 	ldw	r19,188(sp)
 8006610:	00000306 	br	8006620 <___svfprintf_internal_r+0x1298>
 8006614:	42000204 	addi	r8,r8,8
 8006618:	94bffc04 	addi	r18,r18,-16
 800661c:	ac810e0e 	bge	r21,r18,8006a58 <___svfprintf_internal_r+0x16d0>
 8006620:	18c00404 	addi	r3,r3,16
 8006624:	10800044 	addi	r2,r2,1
 8006628:	45000015 	stw	r20,0(r8)
 800662c:	45400115 	stw	r21,4(r8)
 8006630:	d8c02015 	stw	r3,128(sp)
 8006634:	d8801f15 	stw	r2,124(sp)
 8006638:	e0bff60e 	bge	fp,r2,8006614 <__alt_data_end+0xfc006614>
 800663c:	9809883a 	mov	r4,r19
 8006640:	b80b883a 	mov	r5,r23
 8006644:	b00d883a 	mov	r6,r22
 8006648:	800ddd80 	call	800ddd8 <__ssprint_r>
 800664c:	103c161e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006650:	d8c02017 	ldw	r3,128(sp)
 8006654:	d8801f17 	ldw	r2,124(sp)
 8006658:	da000404 	addi	r8,sp,16
 800665c:	003fee06 	br	8006618 <__alt_data_end+0xfc006618>
 8006660:	d9002f17 	ldw	r4,188(sp)
 8006664:	b80b883a 	mov	r5,r23
 8006668:	b00d883a 	mov	r6,r22
 800666c:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006670:	103c0d1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006674:	d8c02017 	ldw	r3,128(sp)
 8006678:	d8802787 	ldb	r2,158(sp)
 800667c:	da000404 	addi	r8,sp,16
 8006680:	003cc406 	br	8005994 <__alt_data_end+0xfc005994>
 8006684:	657fffc4 	addi	r21,r12,-1
 8006688:	057f750e 	bge	zero,r21,8006460 <__alt_data_end+0xfc006460>
 800668c:	07000404 	movi	fp,16
 8006690:	e542ef0e 	bge	fp,r21,8007250 <___svfprintf_internal_r+0x1ec8>
 8006694:	010200b4 	movhi	r4,2050
 8006698:	21014584 	addi	r4,r4,1302
 800669c:	d9002b15 	stw	r4,172(sp)
 80066a0:	01c001c4 	movi	r7,7
 80066a4:	dcc02f17 	ldw	r19,188(sp)
 80066a8:	00000306 	br	80066b8 <___svfprintf_internal_r+0x1330>
 80066ac:	ad7ffc04 	addi	r21,r21,-16
 80066b0:	94800204 	addi	r18,r18,8
 80066b4:	e540130e 	bge	fp,r21,8006704 <___svfprintf_internal_r+0x137c>
 80066b8:	18c00404 	addi	r3,r3,16
 80066bc:	84000044 	addi	r16,r16,1
 80066c0:	95000015 	stw	r20,0(r18)
 80066c4:	97000115 	stw	fp,4(r18)
 80066c8:	d8c02015 	stw	r3,128(sp)
 80066cc:	dc001f15 	stw	r16,124(sp)
 80066d0:	3c3ff60e 	bge	r7,r16,80066ac <__alt_data_end+0xfc0066ac>
 80066d4:	9809883a 	mov	r4,r19
 80066d8:	b80b883a 	mov	r5,r23
 80066dc:	b00d883a 	mov	r6,r22
 80066e0:	d9c03e15 	stw	r7,248(sp)
 80066e4:	800ddd80 	call	800ddd8 <__ssprint_r>
 80066e8:	d9c03e17 	ldw	r7,248(sp)
 80066ec:	103bee1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 80066f0:	ad7ffc04 	addi	r21,r21,-16
 80066f4:	d8c02017 	ldw	r3,128(sp)
 80066f8:	dc001f17 	ldw	r16,124(sp)
 80066fc:	dc800404 	addi	r18,sp,16
 8006700:	e57fed16 	blt	fp,r21,80066b8 <__alt_data_end+0xfc0066b8>
 8006704:	dac02b17 	ldw	r11,172(sp)
 8006708:	1d47883a 	add	r3,r3,r21
 800670c:	84000044 	addi	r16,r16,1
 8006710:	92c00015 	stw	r11,0(r18)
 8006714:	95400115 	stw	r21,4(r18)
 8006718:	d8c02015 	stw	r3,128(sp)
 800671c:	dc001f15 	stw	r16,124(sp)
 8006720:	008001c4 	movi	r2,7
 8006724:	143f4d0e 	bge	r2,r16,800645c <__alt_data_end+0xfc00645c>
 8006728:	d9002f17 	ldw	r4,188(sp)
 800672c:	b80b883a 	mov	r5,r23
 8006730:	b00d883a 	mov	r6,r22
 8006734:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006738:	103bdb1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 800673c:	d8c02017 	ldw	r3,128(sp)
 8006740:	dc001f17 	ldw	r16,124(sp)
 8006744:	dc800404 	addi	r18,sp,16
 8006748:	003f4506 	br	8006460 <__alt_data_end+0xfc006460>
 800674c:	00800084 	movi	r2,2
 8006750:	9f06b03a 	or	r3,r19,fp
 8006754:	003d3806 	br	8005c38 <__alt_data_end+0xfc005c38>
 8006758:	dac02d17 	ldw	r11,180(sp)
 800675c:	0039883a 	mov	fp,zero
 8006760:	0005883a 	mov	r2,zero
 8006764:	5cc00017 	ldw	r19,0(r11)
 8006768:	5ac00104 	addi	r11,r11,4
 800676c:	dac02d15 	stw	r11,180(sp)
 8006770:	9807883a 	mov	r3,r19
 8006774:	003d3006 	br	8005c38 <__alt_data_end+0xfc005c38>
 8006778:	1cc00017 	ldw	r19,0(r3)
 800677c:	dac02d17 	ldw	r11,180(sp)
 8006780:	9839d7fa 	srai	fp,r19,31
 8006784:	5ac00104 	addi	r11,r11,4
 8006788:	dac02d15 	stw	r11,180(sp)
 800678c:	e005883a 	mov	r2,fp
 8006790:	003c0a06 	br	80057bc <__alt_data_end+0xfc0057bc>
 8006794:	db002d17 	ldw	r12,180(sp)
 8006798:	0039883a 	mov	fp,zero
 800679c:	00800044 	movi	r2,1
 80067a0:	64c00017 	ldw	r19,0(r12)
 80067a4:	63000104 	addi	r12,r12,4
 80067a8:	db002d15 	stw	r12,180(sp)
 80067ac:	9807883a 	mov	r3,r19
 80067b0:	003d2106 	br	8005c38 <__alt_data_end+0xfc005c38>
 80067b4:	d9002f17 	ldw	r4,188(sp)
 80067b8:	b80b883a 	mov	r5,r23
 80067bc:	b00d883a 	mov	r6,r22
 80067c0:	800ddd80 	call	800ddd8 <__ssprint_r>
 80067c4:	103bb81e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 80067c8:	d8c02017 	ldw	r3,128(sp)
 80067cc:	da000404 	addi	r8,sp,16
 80067d0:	db003117 	ldw	r12,196(sp)
 80067d4:	dac03417 	ldw	r11,208(sp)
 80067d8:	d8802617 	ldw	r2,152(sp)
 80067dc:	62e5883a 	add	r18,r12,r11
 80067e0:	db003317 	ldw	r12,204(sp)
 80067e4:	13000216 	blt	r2,r12,80067f0 <___svfprintf_internal_r+0x1468>
 80067e8:	8900004c 	andi	r4,r17,1
 80067ec:	20000c26 	beq	r4,zero,8006820 <___svfprintf_internal_r+0x1498>
 80067f0:	dac03917 	ldw	r11,228(sp)
 80067f4:	d9001f17 	ldw	r4,124(sp)
 80067f8:	db003517 	ldw	r12,212(sp)
 80067fc:	1ac7883a 	add	r3,r3,r11
 8006800:	21000044 	addi	r4,r4,1
 8006804:	43000015 	stw	r12,0(r8)
 8006808:	42c00115 	stw	r11,4(r8)
 800680c:	d8c02015 	stw	r3,128(sp)
 8006810:	d9001f15 	stw	r4,124(sp)
 8006814:	014001c4 	movi	r5,7
 8006818:	2901b716 	blt	r5,r4,8006ef8 <___svfprintf_internal_r+0x1b70>
 800681c:	42000204 	addi	r8,r8,8
 8006820:	dac03317 	ldw	r11,204(sp)
 8006824:	8489c83a 	sub	r4,r16,r18
 8006828:	5885c83a 	sub	r2,r11,r2
 800682c:	1021883a 	mov	r16,r2
 8006830:	2080010e 	bge	r4,r2,8006838 <___svfprintf_internal_r+0x14b0>
 8006834:	2021883a 	mov	r16,r4
 8006838:	04000a0e 	bge	zero,r16,8006864 <___svfprintf_internal_r+0x14dc>
 800683c:	d9001f17 	ldw	r4,124(sp)
 8006840:	1c07883a 	add	r3,r3,r16
 8006844:	44800015 	stw	r18,0(r8)
 8006848:	21000044 	addi	r4,r4,1
 800684c:	44000115 	stw	r16,4(r8)
 8006850:	d8c02015 	stw	r3,128(sp)
 8006854:	d9001f15 	stw	r4,124(sp)
 8006858:	014001c4 	movi	r5,7
 800685c:	2901bf16 	blt	r5,r4,8006f5c <___svfprintf_internal_r+0x1bd4>
 8006860:	42000204 	addi	r8,r8,8
 8006864:	8001bb16 	blt	r16,zero,8006f54 <___svfprintf_internal_r+0x1bcc>
 8006868:	1421c83a 	sub	r16,r2,r16
 800686c:	043ca80e 	bge	zero,r16,8005b10 <__alt_data_end+0xfc005b10>
 8006870:	04800404 	movi	r18,16
 8006874:	d8801f17 	ldw	r2,124(sp)
 8006878:	943f050e 	bge	r18,r16,8006490 <__alt_data_end+0xfc006490>
 800687c:	014200b4 	movhi	r5,2050
 8006880:	29414584 	addi	r5,r5,1302
 8006884:	d9402b15 	stw	r5,172(sp)
 8006888:	054001c4 	movi	r21,7
 800688c:	dcc02f17 	ldw	r19,188(sp)
 8006890:	00000306 	br	80068a0 <___svfprintf_internal_r+0x1518>
 8006894:	42000204 	addi	r8,r8,8
 8006898:	843ffc04 	addi	r16,r16,-16
 800689c:	943eff0e 	bge	r18,r16,800649c <__alt_data_end+0xfc00649c>
 80068a0:	18c00404 	addi	r3,r3,16
 80068a4:	10800044 	addi	r2,r2,1
 80068a8:	45000015 	stw	r20,0(r8)
 80068ac:	44800115 	stw	r18,4(r8)
 80068b0:	d8c02015 	stw	r3,128(sp)
 80068b4:	d8801f15 	stw	r2,124(sp)
 80068b8:	a8bff60e 	bge	r21,r2,8006894 <__alt_data_end+0xfc006894>
 80068bc:	9809883a 	mov	r4,r19
 80068c0:	b80b883a 	mov	r5,r23
 80068c4:	b00d883a 	mov	r6,r22
 80068c8:	800ddd80 	call	800ddd8 <__ssprint_r>
 80068cc:	103b761e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 80068d0:	d8c02017 	ldw	r3,128(sp)
 80068d4:	d8801f17 	ldw	r2,124(sp)
 80068d8:	da000404 	addi	r8,sp,16
 80068dc:	003fee06 	br	8006898 <__alt_data_end+0xfc006898>
 80068e0:	8888703a 	and	r4,r17,r2
 80068e4:	203eb31e 	bne	r4,zero,80063b4 <__alt_data_end+0xfc0063b4>
 80068e8:	dc001f17 	ldw	r16,124(sp)
 80068ec:	db003117 	ldw	r12,196(sp)
 80068f0:	40800115 	stw	r2,4(r8)
 80068f4:	84000044 	addi	r16,r16,1
 80068f8:	43000015 	stw	r12,0(r8)
 80068fc:	d8c02015 	stw	r3,128(sp)
 8006900:	dc001f15 	stw	r16,124(sp)
 8006904:	008001c4 	movi	r2,7
 8006908:	143f8716 	blt	r2,r16,8006728 <__alt_data_end+0xfc006728>
 800690c:	44800204 	addi	r18,r8,8
 8006910:	003ed306 	br	8006460 <__alt_data_end+0xfc006460>
 8006914:	d9002f17 	ldw	r4,188(sp)
 8006918:	b80b883a 	mov	r5,r23
 800691c:	b00d883a 	mov	r6,r22
 8006920:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006924:	103b601e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006928:	d8c02017 	ldw	r3,128(sp)
 800692c:	dc001f17 	ldw	r16,124(sp)
 8006930:	da000404 	addi	r8,sp,16
 8006934:	003eaa06 	br	80063e0 <__alt_data_end+0xfc0063e0>
 8006938:	d9002f17 	ldw	r4,188(sp)
 800693c:	b80b883a 	mov	r5,r23
 8006940:	b00d883a 	mov	r6,r22
 8006944:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006948:	103b571e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 800694c:	d8c02017 	ldw	r3,128(sp)
 8006950:	dc001f17 	ldw	r16,124(sp)
 8006954:	dc800404 	addi	r18,sp,16
 8006958:	003eac06 	br	800640c <__alt_data_end+0xfc00640c>
 800695c:	d9002f17 	ldw	r4,188(sp)
 8006960:	b80b883a 	mov	r5,r23
 8006964:	b00d883a 	mov	r6,r22
 8006968:	800ddd80 	call	800ddd8 <__ssprint_r>
 800696c:	103b4e1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006970:	d8c02017 	ldw	r3,128(sp)
 8006974:	da000404 	addi	r8,sp,16
 8006978:	003c2406 	br	8005a0c <__alt_data_end+0xfc005a0c>
 800697c:	da004015 	stw	r8,256(sp)
 8006980:	da403f15 	stw	r9,252(sp)
 8006984:	800db840 	call	800db84 <__fpclassifyd>
 8006988:	da004017 	ldw	r8,256(sp)
 800698c:	da403f17 	ldw	r9,252(sp)
 8006990:	1000951e 	bne	r2,zero,8006be8 <___svfprintf_internal_r+0x1860>
 8006994:	008011c4 	movi	r2,71
 8006998:	1400fb16 	blt	r2,r16,8006d88 <___svfprintf_internal_r+0x1a00>
 800699c:	030200b4 	movhi	r12,2050
 80069a0:	63013704 	addi	r12,r12,1244
 80069a4:	db003115 	stw	r12,196(sp)
 80069a8:	00c000c4 	movi	r3,3
 80069ac:	00bfdfc4 	movi	r2,-129
 80069b0:	d8c02a15 	stw	r3,168(sp)
 80069b4:	88a2703a 	and	r17,r17,r2
 80069b8:	dd402783 	ldbu	r21,158(sp)
 80069bc:	dcc02d15 	stw	r19,180(sp)
 80069c0:	1825883a 	mov	r18,r3
 80069c4:	d8003215 	stw	zero,200(sp)
 80069c8:	d8003415 	stw	zero,208(sp)
 80069cc:	003ba706 	br	800586c <__alt_data_end+0xfc00586c>
 80069d0:	8880040c 	andi	r2,r17,16
 80069d4:	1000091e 	bne	r2,zero,80069fc <___svfprintf_internal_r+0x1674>
 80069d8:	8c40100c 	andi	r17,r17,64
 80069dc:	88000726 	beq	r17,zero,80069fc <___svfprintf_internal_r+0x1674>
 80069e0:	db002d17 	ldw	r12,180(sp)
 80069e4:	dac03017 	ldw	r11,192(sp)
 80069e8:	60800017 	ldw	r2,0(r12)
 80069ec:	63000104 	addi	r12,r12,4
 80069f0:	db002d15 	stw	r12,180(sp)
 80069f4:	12c0000d 	sth	r11,0(r2)
 80069f8:	003a8f06 	br	8005438 <__alt_data_end+0xfc005438>
 80069fc:	db002d17 	ldw	r12,180(sp)
 8006a00:	dac03017 	ldw	r11,192(sp)
 8006a04:	60800017 	ldw	r2,0(r12)
 8006a08:	63000104 	addi	r12,r12,4
 8006a0c:	db002d15 	stw	r12,180(sp)
 8006a10:	12c00015 	stw	r11,0(r2)
 8006a14:	003a8806 	br	8005438 <__alt_data_end+0xfc005438>
 8006a18:	88c0100c 	andi	r3,r17,64
 8006a1c:	1800e926 	beq	r3,zero,8006dc4 <___svfprintf_internal_r+0x1a3c>
 8006a20:	dac02d17 	ldw	r11,180(sp)
 8006a24:	14c0000b 	ldhu	r19,0(r2)
 8006a28:	0039883a 	mov	fp,zero
 8006a2c:	5ac00104 	addi	r11,r11,4
 8006a30:	dac02d15 	stw	r11,180(sp)
 8006a34:	003d1406 	br	8005e88 <__alt_data_end+0xfc005e88>
 8006a38:	1c000007 	ldb	r16,0(r3)
 8006a3c:	1805883a 	mov	r2,r3
 8006a40:	003aa706 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8006a44:	00800084 	movi	r2,2
 8006a48:	003c7b06 	br	8005c38 <__alt_data_end+0xfc005c38>
 8006a4c:	010200b4 	movhi	r4,2050
 8006a50:	21014584 	addi	r4,r4,1302
 8006a54:	d9002b15 	stw	r4,172(sp)
 8006a58:	dac02b17 	ldw	r11,172(sp)
 8006a5c:	1c87883a 	add	r3,r3,r18
 8006a60:	10800044 	addi	r2,r2,1
 8006a64:	42c00015 	stw	r11,0(r8)
 8006a68:	44800115 	stw	r18,4(r8)
 8006a6c:	d8c02015 	stw	r3,128(sp)
 8006a70:	d8801f15 	stw	r2,124(sp)
 8006a74:	010001c4 	movi	r4,7
 8006a78:	20bf4e16 	blt	r4,r2,80067b4 <__alt_data_end+0xfc0067b4>
 8006a7c:	42000204 	addi	r8,r8,8
 8006a80:	003f5306 	br	80067d0 <__alt_data_end+0xfc0067d0>
 8006a84:	010200b4 	movhi	r4,2050
 8006a88:	21014584 	addi	r4,r4,1302
 8006a8c:	d9002b15 	stw	r4,172(sp)
 8006a90:	003c0806 	br	8005ab4 <__alt_data_end+0xfc005ab4>
 8006a94:	d9002f17 	ldw	r4,188(sp)
 8006a98:	b80b883a 	mov	r5,r23
 8006a9c:	b00d883a 	mov	r6,r22
 8006aa0:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006aa4:	103b001e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006aa8:	d8c02017 	ldw	r3,128(sp)
 8006aac:	da000404 	addi	r8,sp,16
 8006ab0:	003dc606 	br	80061cc <__alt_data_end+0xfc0061cc>
 8006ab4:	d8801f17 	ldw	r2,124(sp)
 8006ab8:	030200b4 	movhi	r12,2050
 8006abc:	01000044 	movi	r4,1
 8006ac0:	18c00044 	addi	r3,r3,1
 8006ac4:	10800044 	addi	r2,r2,1
 8006ac8:	63014504 	addi	r12,r12,1300
 8006acc:	41000115 	stw	r4,4(r8)
 8006ad0:	43000015 	stw	r12,0(r8)
 8006ad4:	d8c02015 	stw	r3,128(sp)
 8006ad8:	d8801f15 	stw	r2,124(sp)
 8006adc:	010001c4 	movi	r4,7
 8006ae0:	2080ad16 	blt	r4,r2,8006d98 <___svfprintf_internal_r+0x1a10>
 8006ae4:	42000204 	addi	r8,r8,8
 8006ae8:	8000041e 	bne	r16,zero,8006afc <___svfprintf_internal_r+0x1774>
 8006aec:	dac03317 	ldw	r11,204(sp)
 8006af0:	5800021e 	bne	r11,zero,8006afc <___svfprintf_internal_r+0x1774>
 8006af4:	8880004c 	andi	r2,r17,1
 8006af8:	103c0526 	beq	r2,zero,8005b10 <__alt_data_end+0xfc005b10>
 8006afc:	db003917 	ldw	r12,228(sp)
 8006b00:	d8801f17 	ldw	r2,124(sp)
 8006b04:	dac03517 	ldw	r11,212(sp)
 8006b08:	1b07883a 	add	r3,r3,r12
 8006b0c:	10800044 	addi	r2,r2,1
 8006b10:	42c00015 	stw	r11,0(r8)
 8006b14:	43000115 	stw	r12,4(r8)
 8006b18:	d8c02015 	stw	r3,128(sp)
 8006b1c:	d8801f15 	stw	r2,124(sp)
 8006b20:	010001c4 	movi	r4,7
 8006b24:	20818816 	blt	r4,r2,8007148 <___svfprintf_internal_r+0x1dc0>
 8006b28:	42000204 	addi	r8,r8,8
 8006b2c:	0421c83a 	sub	r16,zero,r16
 8006b30:	0400bc0e 	bge	zero,r16,8006e24 <___svfprintf_internal_r+0x1a9c>
 8006b34:	04800404 	movi	r18,16
 8006b38:	9400f80e 	bge	r18,r16,8006f1c <___svfprintf_internal_r+0x1b94>
 8006b3c:	010200b4 	movhi	r4,2050
 8006b40:	21014584 	addi	r4,r4,1302
 8006b44:	d9002b15 	stw	r4,172(sp)
 8006b48:	054001c4 	movi	r21,7
 8006b4c:	dcc02f17 	ldw	r19,188(sp)
 8006b50:	00000306 	br	8006b60 <___svfprintf_internal_r+0x17d8>
 8006b54:	42000204 	addi	r8,r8,8
 8006b58:	843ffc04 	addi	r16,r16,-16
 8006b5c:	9400f20e 	bge	r18,r16,8006f28 <___svfprintf_internal_r+0x1ba0>
 8006b60:	18c00404 	addi	r3,r3,16
 8006b64:	10800044 	addi	r2,r2,1
 8006b68:	45000015 	stw	r20,0(r8)
 8006b6c:	44800115 	stw	r18,4(r8)
 8006b70:	d8c02015 	stw	r3,128(sp)
 8006b74:	d8801f15 	stw	r2,124(sp)
 8006b78:	a8bff60e 	bge	r21,r2,8006b54 <__alt_data_end+0xfc006b54>
 8006b7c:	9809883a 	mov	r4,r19
 8006b80:	b80b883a 	mov	r5,r23
 8006b84:	b00d883a 	mov	r6,r22
 8006b88:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006b8c:	103ac61e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006b90:	d8c02017 	ldw	r3,128(sp)
 8006b94:	d8801f17 	ldw	r2,124(sp)
 8006b98:	da000404 	addi	r8,sp,16
 8006b9c:	003fee06 	br	8006b58 <__alt_data_end+0xfc006b58>
 8006ba0:	db002e17 	ldw	r12,184(sp)
 8006ba4:	1805883a 	mov	r2,r3
 8006ba8:	dac02d15 	stw	r11,180(sp)
 8006bac:	0319c83a 	sub	r12,zero,r12
 8006bb0:	db002e15 	stw	r12,184(sp)
 8006bb4:	003ad106 	br	80056fc <__alt_data_end+0xfc0056fc>
 8006bb8:	18800044 	addi	r2,r3,1
 8006bbc:	8c400814 	ori	r17,r17,32
 8006bc0:	1c000047 	ldb	r16,1(r3)
 8006bc4:	003a4606 	br	80054e0 <__alt_data_end+0xfc0054e0>
 8006bc8:	d9002f17 	ldw	r4,188(sp)
 8006bcc:	b80b883a 	mov	r5,r23
 8006bd0:	b00d883a 	mov	r6,r22
 8006bd4:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006bd8:	103ab31e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006bdc:	d8c02017 	ldw	r3,128(sp)
 8006be0:	da000404 	addi	r8,sp,16
 8006be4:	003d8a06 	br	8006210 <__alt_data_end+0xfc006210>
 8006be8:	057ff7c4 	movi	r21,-33
 8006bec:	00bfffc4 	movi	r2,-1
 8006bf0:	856a703a 	and	r21,r16,r21
 8006bf4:	48807126 	beq	r9,r2,8006dbc <___svfprintf_internal_r+0x1a34>
 8006bf8:	008011c4 	movi	r2,71
 8006bfc:	a8814f26 	beq	r21,r2,800713c <___svfprintf_internal_r+0x1db4>
 8006c00:	db003817 	ldw	r12,224(sp)
 8006c04:	8ac04014 	ori	r11,r17,256
 8006c08:	dac02d15 	stw	r11,180(sp)
 8006c0c:	60015816 	blt	r12,zero,8007170 <___svfprintf_internal_r+0x1de8>
 8006c10:	dc803817 	ldw	r18,224(sp)
 8006c14:	d8002a05 	stb	zero,168(sp)
 8006c18:	00801984 	movi	r2,102
 8006c1c:	80808c26 	beq	r16,r2,8006e50 <___svfprintf_internal_r+0x1ac8>
 8006c20:	00801184 	movi	r2,70
 8006c24:	80808a26 	beq	r16,r2,8006e50 <___svfprintf_internal_r+0x1ac8>
 8006c28:	00801144 	movi	r2,69
 8006c2c:	a8815426 	beq	r21,r2,8007180 <___svfprintf_internal_r+0x1df8>
 8006c30:	4839883a 	mov	fp,r9
 8006c34:	d8802604 	addi	r2,sp,152
 8006c38:	d8800115 	stw	r2,4(sp)
 8006c3c:	d9002f17 	ldw	r4,188(sp)
 8006c40:	d8802504 	addi	r2,sp,148
 8006c44:	d9403717 	ldw	r5,220(sp)
 8006c48:	d8800215 	stw	r2,8(sp)
 8006c4c:	d8802104 	addi	r2,sp,132
 8006c50:	df000015 	stw	fp,0(sp)
 8006c54:	d8800315 	stw	r2,12(sp)
 8006c58:	900d883a 	mov	r6,r18
 8006c5c:	01c00084 	movi	r7,2
 8006c60:	da004015 	stw	r8,256(sp)
 8006c64:	da403f15 	stw	r9,252(sp)
 8006c68:	80096700 	call	8009670 <_dtoa_r>
 8006c6c:	d8803115 	stw	r2,196(sp)
 8006c70:	008019c4 	movi	r2,103
 8006c74:	da004017 	ldw	r8,256(sp)
 8006c78:	da403f17 	ldw	r9,252(sp)
 8006c7c:	80800226 	beq	r16,r2,8006c88 <___svfprintf_internal_r+0x1900>
 8006c80:	008011c4 	movi	r2,71
 8006c84:	8080841e 	bne	r16,r2,8006e98 <___svfprintf_internal_r+0x1b10>
 8006c88:	8880004c 	andi	r2,r17,1
 8006c8c:	10015126 	beq	r2,zero,80071d4 <___svfprintf_internal_r+0x1e4c>
 8006c90:	db003117 	ldw	r12,196(sp)
 8006c94:	6715883a 	add	r10,r12,fp
 8006c98:	d9003717 	ldw	r4,220(sp)
 8006c9c:	900b883a 	mov	r5,r18
 8006ca0:	000d883a 	mov	r6,zero
 8006ca4:	000f883a 	mov	r7,zero
 8006ca8:	da004015 	stw	r8,256(sp)
 8006cac:	da403f15 	stw	r9,252(sp)
 8006cb0:	da803e15 	stw	r10,248(sp)
 8006cb4:	801231c0 	call	801231c <__eqdf2>
 8006cb8:	da004017 	ldw	r8,256(sp)
 8006cbc:	da403f17 	ldw	r9,252(sp)
 8006cc0:	da803e17 	ldw	r10,248(sp)
 8006cc4:	1000d926 	beq	r2,zero,800702c <___svfprintf_internal_r+0x1ca4>
 8006cc8:	d8802117 	ldw	r2,132(sp)
 8006ccc:	1280062e 	bgeu	r2,r10,8006ce8 <___svfprintf_internal_r+0x1960>
 8006cd0:	01000c04 	movi	r4,48
 8006cd4:	10c00044 	addi	r3,r2,1
 8006cd8:	d8c02115 	stw	r3,132(sp)
 8006cdc:	11000005 	stb	r4,0(r2)
 8006ce0:	d8802117 	ldw	r2,132(sp)
 8006ce4:	12bffb36 	bltu	r2,r10,8006cd4 <__alt_data_end+0xfc006cd4>
 8006ce8:	db003117 	ldw	r12,196(sp)
 8006cec:	1305c83a 	sub	r2,r2,r12
 8006cf0:	d8803315 	stw	r2,204(sp)
 8006cf4:	008011c4 	movi	r2,71
 8006cf8:	a880b626 	beq	r21,r2,8006fd4 <___svfprintf_internal_r+0x1c4c>
 8006cfc:	00801944 	movi	r2,101
 8006d00:	14017e0e 	bge	r2,r16,80072fc <___svfprintf_internal_r+0x1f74>
 8006d04:	00801984 	movi	r2,102
 8006d08:	80812826 	beq	r16,r2,80071ac <___svfprintf_internal_r+0x1e24>
 8006d0c:	db002617 	ldw	r12,152(sp)
 8006d10:	db003415 	stw	r12,208(sp)
 8006d14:	db003417 	ldw	r12,208(sp)
 8006d18:	dac03317 	ldw	r11,204(sp)
 8006d1c:	62c11a16 	blt	r12,r11,8007188 <___svfprintf_internal_r+0x1e00>
 8006d20:	8c40004c 	andi	r17,r17,1
 8006d24:	88013d1e 	bne	r17,zero,800721c <___svfprintf_internal_r+0x1e94>
 8006d28:	6005883a 	mov	r2,r12
 8006d2c:	60012716 	blt	r12,zero,80071cc <___svfprintf_internal_r+0x1e44>
 8006d30:	dc803417 	ldw	r18,208(sp)
 8006d34:	df002a07 	ldb	fp,168(sp)
 8006d38:	e000b01e 	bne	fp,zero,8006ffc <___svfprintf_internal_r+0x1c74>
 8006d3c:	dc402d17 	ldw	r17,180(sp)
 8006d40:	dd402783 	ldbu	r21,158(sp)
 8006d44:	d8802a15 	stw	r2,168(sp)
 8006d48:	dcc02d15 	stw	r19,180(sp)
 8006d4c:	d8003215 	stw	zero,200(sp)
 8006d50:	003ac606 	br	800586c <__alt_data_end+0xfc00586c>
 8006d54:	008200b4 	movhi	r2,2050
 8006d58:	10813504 	addi	r2,r2,1236
 8006d5c:	d8803115 	stw	r2,196(sp)
 8006d60:	003be506 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8006d64:	d9002f17 	ldw	r4,188(sp)
 8006d68:	04001004 	movi	r16,64
 8006d6c:	800b883a 	mov	r5,r16
 8006d70:	80048dc0 	call	80048dc <_malloc_r>
 8006d74:	b8800015 	stw	r2,0(r23)
 8006d78:	b8800415 	stw	r2,16(r23)
 8006d7c:	10016126 	beq	r2,zero,8007304 <___svfprintf_internal_r+0x1f7c>
 8006d80:	bc000515 	stw	r16,20(r23)
 8006d84:	00399a06 	br	80053f0 <__alt_data_end+0xfc0053f0>
 8006d88:	008200b4 	movhi	r2,2050
 8006d8c:	10813804 	addi	r2,r2,1248
 8006d90:	d8803115 	stw	r2,196(sp)
 8006d94:	003f0406 	br	80069a8 <__alt_data_end+0xfc0069a8>
 8006d98:	d9002f17 	ldw	r4,188(sp)
 8006d9c:	b80b883a 	mov	r5,r23
 8006da0:	b00d883a 	mov	r6,r22
 8006da4:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006da8:	103a3f1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006dac:	dc002617 	ldw	r16,152(sp)
 8006db0:	d8c02017 	ldw	r3,128(sp)
 8006db4:	da000404 	addi	r8,sp,16
 8006db8:	003f4b06 	br	8006ae8 <__alt_data_end+0xfc006ae8>
 8006dbc:	02400184 	movi	r9,6
 8006dc0:	003f8f06 	br	8006c00 <__alt_data_end+0xfc006c00>
 8006dc4:	db002d17 	ldw	r12,180(sp)
 8006dc8:	14c00017 	ldw	r19,0(r2)
 8006dcc:	0039883a 	mov	fp,zero
 8006dd0:	63000104 	addi	r12,r12,4
 8006dd4:	db002d15 	stw	r12,180(sp)
 8006dd8:	003c2b06 	br	8005e88 <__alt_data_end+0xfc005e88>
 8006ddc:	d8c03117 	ldw	r3,196(sp)
 8006de0:	b0e5c83a 	sub	r18,r22,r3
 8006de4:	003a9c06 	br	8005858 <__alt_data_end+0xfc005858>
 8006de8:	da004015 	stw	r8,256(sp)
 8006dec:	80052f00 	call	80052f0 <strlen>
 8006df0:	1025883a 	mov	r18,r2
 8006df4:	da004017 	ldw	r8,256(sp)
 8006df8:	903c450e 	bge	r18,zero,8005f10 <__alt_data_end+0xfc005f10>
 8006dfc:	0005883a 	mov	r2,zero
 8006e00:	003c4306 	br	8005f10 <__alt_data_end+0xfc005f10>
 8006e04:	d9002f17 	ldw	r4,188(sp)
 8006e08:	b80b883a 	mov	r5,r23
 8006e0c:	b00d883a 	mov	r6,r22
 8006e10:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006e14:	103a241e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006e18:	d8c02017 	ldw	r3,128(sp)
 8006e1c:	d8801f17 	ldw	r2,124(sp)
 8006e20:	da000404 	addi	r8,sp,16
 8006e24:	db003317 	ldw	r12,204(sp)
 8006e28:	dac03117 	ldw	r11,196(sp)
 8006e2c:	10800044 	addi	r2,r2,1
 8006e30:	60c7883a 	add	r3,r12,r3
 8006e34:	42c00015 	stw	r11,0(r8)
 8006e38:	43000115 	stw	r12,4(r8)
 8006e3c:	d8c02015 	stw	r3,128(sp)
 8006e40:	d8801f15 	stw	r2,124(sp)
 8006e44:	010001c4 	movi	r4,7
 8006e48:	20bb300e 	bge	r4,r2,8005b0c <__alt_data_end+0xfc005b0c>
 8006e4c:	003d9c06 	br	80064c0 <__alt_data_end+0xfc0064c0>
 8006e50:	d8802604 	addi	r2,sp,152
 8006e54:	d8800115 	stw	r2,4(sp)
 8006e58:	d9002f17 	ldw	r4,188(sp)
 8006e5c:	d8802504 	addi	r2,sp,148
 8006e60:	d9403717 	ldw	r5,220(sp)
 8006e64:	d8800215 	stw	r2,8(sp)
 8006e68:	d8802104 	addi	r2,sp,132
 8006e6c:	da400015 	stw	r9,0(sp)
 8006e70:	d8800315 	stw	r2,12(sp)
 8006e74:	900d883a 	mov	r6,r18
 8006e78:	01c000c4 	movi	r7,3
 8006e7c:	da004015 	stw	r8,256(sp)
 8006e80:	da403f15 	stw	r9,252(sp)
 8006e84:	80096700 	call	8009670 <_dtoa_r>
 8006e88:	da403f17 	ldw	r9,252(sp)
 8006e8c:	da004017 	ldw	r8,256(sp)
 8006e90:	d8803115 	stw	r2,196(sp)
 8006e94:	4839883a 	mov	fp,r9
 8006e98:	dac03117 	ldw	r11,196(sp)
 8006e9c:	00801184 	movi	r2,70
 8006ea0:	5f15883a 	add	r10,r11,fp
 8006ea4:	a8bf7c1e 	bne	r21,r2,8006c98 <__alt_data_end+0xfc006c98>
 8006ea8:	59000007 	ldb	r4,0(r11)
 8006eac:	00800c04 	movi	r2,48
 8006eb0:	2080ca26 	beq	r4,r2,80071dc <___svfprintf_internal_r+0x1e54>
 8006eb4:	d8c02617 	ldw	r3,152(sp)
 8006eb8:	50d5883a 	add	r10,r10,r3
 8006ebc:	003f7606 	br	8006c98 <__alt_data_end+0xfc006c98>
 8006ec0:	010200b4 	movhi	r4,2050
 8006ec4:	21014984 	addi	r4,r4,1318
 8006ec8:	d9003615 	stw	r4,216(sp)
 8006ecc:	003aa606 	br	8005968 <__alt_data_end+0xfc005968>
 8006ed0:	0025883a 	mov	r18,zero
 8006ed4:	003dc306 	br	80065e4 <__alt_data_end+0xfc0065e4>
 8006ed8:	d9002f17 	ldw	r4,188(sp)
 8006edc:	b80b883a 	mov	r5,r23
 8006ee0:	b00d883a 	mov	r6,r22
 8006ee4:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006ee8:	1039ef1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006eec:	d8c02017 	ldw	r3,128(sp)
 8006ef0:	da000404 	addi	r8,sp,16
 8006ef4:	003dba06 	br	80065e0 <__alt_data_end+0xfc0065e0>
 8006ef8:	d9002f17 	ldw	r4,188(sp)
 8006efc:	b80b883a 	mov	r5,r23
 8006f00:	b00d883a 	mov	r6,r22
 8006f04:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006f08:	1039e71e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006f0c:	d8802617 	ldw	r2,152(sp)
 8006f10:	d8c02017 	ldw	r3,128(sp)
 8006f14:	da000404 	addi	r8,sp,16
 8006f18:	003e4106 	br	8006820 <__alt_data_end+0xfc006820>
 8006f1c:	030200b4 	movhi	r12,2050
 8006f20:	63014584 	addi	r12,r12,1302
 8006f24:	db002b15 	stw	r12,172(sp)
 8006f28:	dac02b17 	ldw	r11,172(sp)
 8006f2c:	1c07883a 	add	r3,r3,r16
 8006f30:	10800044 	addi	r2,r2,1
 8006f34:	42c00015 	stw	r11,0(r8)
 8006f38:	44000115 	stw	r16,4(r8)
 8006f3c:	d8c02015 	stw	r3,128(sp)
 8006f40:	d8801f15 	stw	r2,124(sp)
 8006f44:	010001c4 	movi	r4,7
 8006f48:	20bfae16 	blt	r4,r2,8006e04 <__alt_data_end+0xfc006e04>
 8006f4c:	42000204 	addi	r8,r8,8
 8006f50:	003fb406 	br	8006e24 <__alt_data_end+0xfc006e24>
 8006f54:	0021883a 	mov	r16,zero
 8006f58:	003e4306 	br	8006868 <__alt_data_end+0xfc006868>
 8006f5c:	d9002f17 	ldw	r4,188(sp)
 8006f60:	b80b883a 	mov	r5,r23
 8006f64:	b00d883a 	mov	r6,r22
 8006f68:	800ddd80 	call	800ddd8 <__ssprint_r>
 8006f6c:	1039ce1e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 8006f70:	d8802617 	ldw	r2,152(sp)
 8006f74:	db003317 	ldw	r12,204(sp)
 8006f78:	d8c02017 	ldw	r3,128(sp)
 8006f7c:	da000404 	addi	r8,sp,16
 8006f80:	6085c83a 	sub	r2,r12,r2
 8006f84:	003e3706 	br	8006864 <__alt_data_end+0xfc006864>
 8006f88:	00800184 	movi	r2,6
 8006f8c:	1240012e 	bgeu	r2,r9,8006f94 <___svfprintf_internal_r+0x1c0c>
 8006f90:	1013883a 	mov	r9,r2
 8006f94:	4825883a 	mov	r18,r9
 8006f98:	4805883a 	mov	r2,r9
 8006f9c:	4800a416 	blt	r9,zero,8007230 <___svfprintf_internal_r+0x1ea8>
 8006fa0:	d8802a15 	stw	r2,168(sp)
 8006fa4:	008200b4 	movhi	r2,2050
 8006fa8:	10814304 	addi	r2,r2,1292
 8006fac:	d8803115 	stw	r2,196(sp)
 8006fb0:	dcc02d15 	stw	r19,180(sp)
 8006fb4:	d8003215 	stw	zero,200(sp)
 8006fb8:	d8003415 	stw	zero,208(sp)
 8006fbc:	0005883a 	mov	r2,zero
 8006fc0:	003a3106 	br	8005888 <__alt_data_end+0xfc005888>
 8006fc4:	030200b4 	movhi	r12,2050
 8006fc8:	63014984 	addi	r12,r12,1318
 8006fcc:	db003615 	stw	r12,216(sp)
 8006fd0:	003af406 	br	8005ba4 <__alt_data_end+0xfc005ba4>
 8006fd4:	d8c02617 	ldw	r3,152(sp)
 8006fd8:	00bfff44 	movi	r2,-3
 8006fdc:	18801516 	blt	r3,r2,8007034 <___svfprintf_internal_r+0x1cac>
 8006fe0:	48c01416 	blt	r9,r3,8007034 <___svfprintf_internal_r+0x1cac>
 8006fe4:	d8c03415 	stw	r3,208(sp)
 8006fe8:	040019c4 	movi	r16,103
 8006fec:	003f4906 	br	8006d14 <__alt_data_end+0xfc006d14>
 8006ff0:	05400b44 	movi	r21,45
 8006ff4:	dd402785 	stb	r21,158(sp)
 8006ff8:	003b3a06 	br	8005ce4 <__alt_data_end+0xfc005ce4>
 8006ffc:	00c00b44 	movi	r3,45
 8007000:	d8802a15 	stw	r2,168(sp)
 8007004:	dc402d17 	ldw	r17,180(sp)
 8007008:	d8c02785 	stb	r3,158(sp)
 800700c:	dcc02d15 	stw	r19,180(sp)
 8007010:	d8003215 	stw	zero,200(sp)
 8007014:	00800b44 	movi	r2,45
 8007018:	003a1806 	br	800587c <__alt_data_end+0xfc00587c>
 800701c:	010200b4 	movhi	r4,2050
 8007020:	21014584 	addi	r4,r4,1302
 8007024:	d9002b15 	stw	r4,172(sp)
 8007028:	003cc306 	br	8006338 <__alt_data_end+0xfc006338>
 800702c:	5005883a 	mov	r2,r10
 8007030:	003f2d06 	br	8006ce8 <__alt_data_end+0xfc006ce8>
 8007034:	843fff84 	addi	r16,r16,-2
 8007038:	1f3fffc4 	addi	fp,r3,-1
 800703c:	df002615 	stw	fp,152(sp)
 8007040:	dc0022c5 	stb	r16,139(sp)
 8007044:	e000a216 	blt	fp,zero,80072d0 <___svfprintf_internal_r+0x1f48>
 8007048:	00800ac4 	movi	r2,43
 800704c:	d8802305 	stb	r2,140(sp)
 8007050:	00800244 	movi	r2,9
 8007054:	1700820e 	bge	r2,fp,8007260 <___svfprintf_internal_r+0x1ed8>
 8007058:	dd4022c4 	addi	r21,sp,139
 800705c:	dc002b15 	stw	r16,172(sp)
 8007060:	8825883a 	mov	r18,r17
 8007064:	a821883a 	mov	r16,r21
 8007068:	4023883a 	mov	r17,r8
 800706c:	e009883a 	mov	r4,fp
 8007070:	01400284 	movi	r5,10
 8007074:	80119e40 	call	80119e4 <__modsi3>
 8007078:	10800c04 	addi	r2,r2,48
 800707c:	843fffc4 	addi	r16,r16,-1
 8007080:	e009883a 	mov	r4,fp
 8007084:	01400284 	movi	r5,10
 8007088:	80800005 	stb	r2,0(r16)
 800708c:	80119900 	call	8011990 <__divsi3>
 8007090:	1039883a 	mov	fp,r2
 8007094:	00800244 	movi	r2,9
 8007098:	173ff416 	blt	r2,fp,800706c <__alt_data_end+0xfc00706c>
 800709c:	8811883a 	mov	r8,r17
 80070a0:	e0800c04 	addi	r2,fp,48
 80070a4:	9023883a 	mov	r17,r18
 80070a8:	8025883a 	mov	r18,r16
 80070ac:	913fffc4 	addi	r4,r18,-1
 80070b0:	90bfffc5 	stb	r2,-1(r18)
 80070b4:	dc002b17 	ldw	r16,172(sp)
 80070b8:	25408e2e 	bgeu	r4,r21,80072f4 <___svfprintf_internal_r+0x1f6c>
 80070bc:	d9402384 	addi	r5,sp,142
 80070c0:	2c8bc83a 	sub	r5,r5,r18
 80070c4:	d8c02344 	addi	r3,sp,141
 80070c8:	a94b883a 	add	r5,r21,r5
 80070cc:	00000106 	br	80070d4 <___svfprintf_internal_r+0x1d4c>
 80070d0:	20800003 	ldbu	r2,0(r4)
 80070d4:	18800005 	stb	r2,0(r3)
 80070d8:	18c00044 	addi	r3,r3,1
 80070dc:	21000044 	addi	r4,r4,1
 80070e0:	197ffb1e 	bne	r3,r5,80070d0 <__alt_data_end+0xfc0070d0>
 80070e4:	d8802304 	addi	r2,sp,140
 80070e8:	1485c83a 	sub	r2,r2,r18
 80070ec:	d8c02344 	addi	r3,sp,141
 80070f0:	1885883a 	add	r2,r3,r2
 80070f4:	dac03317 	ldw	r11,204(sp)
 80070f8:	156bc83a 	sub	r21,r2,r21
 80070fc:	dd403a15 	stw	r21,232(sp)
 8007100:	00800044 	movi	r2,1
 8007104:	5d65883a 	add	r18,r11,r21
 8007108:	12c0770e 	bge	r2,r11,80072e8 <___svfprintf_internal_r+0x1f60>
 800710c:	94800044 	addi	r18,r18,1
 8007110:	9005883a 	mov	r2,r18
 8007114:	90007216 	blt	r18,zero,80072e0 <___svfprintf_internal_r+0x1f58>
 8007118:	d8003415 	stw	zero,208(sp)
 800711c:	003f0506 	br	8006d34 <__alt_data_end+0xfc006d34>
 8007120:	da402a15 	stw	r9,168(sp)
 8007124:	dd402783 	ldbu	r21,158(sp)
 8007128:	4825883a 	mov	r18,r9
 800712c:	dcc02d15 	stw	r19,180(sp)
 8007130:	d8003215 	stw	zero,200(sp)
 8007134:	d8003415 	stw	zero,208(sp)
 8007138:	0039cc06 	br	800586c <__alt_data_end+0xfc00586c>
 800713c:	483eb01e 	bne	r9,zero,8006c00 <__alt_data_end+0xfc006c00>
 8007140:	9013883a 	mov	r9,r18
 8007144:	003eae06 	br	8006c00 <__alt_data_end+0xfc006c00>
 8007148:	d9002f17 	ldw	r4,188(sp)
 800714c:	b80b883a 	mov	r5,r23
 8007150:	b00d883a 	mov	r6,r22
 8007154:	800ddd80 	call	800ddd8 <__ssprint_r>
 8007158:	1039531e 	bne	r2,zero,80056a8 <__alt_data_end+0xfc0056a8>
 800715c:	dc002617 	ldw	r16,152(sp)
 8007160:	d8c02017 	ldw	r3,128(sp)
 8007164:	d8801f17 	ldw	r2,124(sp)
 8007168:	da000404 	addi	r8,sp,16
 800716c:	003e6f06 	br	8006b2c <__alt_data_end+0xfc006b2c>
 8007170:	00c00b44 	movi	r3,45
 8007174:	64a0003c 	xorhi	r18,r12,32768
 8007178:	d8c02a05 	stb	r3,168(sp)
 800717c:	003ea606 	br	8006c18 <__alt_data_end+0xfc006c18>
 8007180:	4f000044 	addi	fp,r9,1
 8007184:	003eab06 	br	8006c34 <__alt_data_end+0xfc006c34>
 8007188:	d8c03417 	ldw	r3,208(sp)
 800718c:	00c0410e 	bge	zero,r3,8007294 <___svfprintf_internal_r+0x1f0c>
 8007190:	04800044 	movi	r18,1
 8007194:	dac03317 	ldw	r11,204(sp)
 8007198:	92e5883a 	add	r18,r18,r11
 800719c:	9005883a 	mov	r2,r18
 80071a0:	903ee40e 	bge	r18,zero,8006d34 <__alt_data_end+0xfc006d34>
 80071a4:	0005883a 	mov	r2,zero
 80071a8:	003ee206 	br	8006d34 <__alt_data_end+0xfc006d34>
 80071ac:	d8c02617 	ldw	r3,152(sp)
 80071b0:	d8c03415 	stw	r3,208(sp)
 80071b4:	00c0310e 	bge	zero,r3,800727c <___svfprintf_internal_r+0x1ef4>
 80071b8:	48001f1e 	bne	r9,zero,8007238 <___svfprintf_internal_r+0x1eb0>
 80071bc:	8c40004c 	andi	r17,r17,1
 80071c0:	88001d1e 	bne	r17,zero,8007238 <___svfprintf_internal_r+0x1eb0>
 80071c4:	1805883a 	mov	r2,r3
 80071c8:	183ed90e 	bge	r3,zero,8006d30 <__alt_data_end+0xfc006d30>
 80071cc:	0005883a 	mov	r2,zero
 80071d0:	003ed706 	br	8006d30 <__alt_data_end+0xfc006d30>
 80071d4:	d8802117 	ldw	r2,132(sp)
 80071d8:	003ec306 	br	8006ce8 <__alt_data_end+0xfc006ce8>
 80071dc:	d9003717 	ldw	r4,220(sp)
 80071e0:	900b883a 	mov	r5,r18
 80071e4:	000d883a 	mov	r6,zero
 80071e8:	000f883a 	mov	r7,zero
 80071ec:	da004015 	stw	r8,256(sp)
 80071f0:	da403f15 	stw	r9,252(sp)
 80071f4:	da803e15 	stw	r10,248(sp)
 80071f8:	801231c0 	call	801231c <__eqdf2>
 80071fc:	da004017 	ldw	r8,256(sp)
 8007200:	da403f17 	ldw	r9,252(sp)
 8007204:	da803e17 	ldw	r10,248(sp)
 8007208:	103f2a26 	beq	r2,zero,8006eb4 <__alt_data_end+0xfc006eb4>
 800720c:	00800044 	movi	r2,1
 8007210:	1707c83a 	sub	r3,r2,fp
 8007214:	d8c02615 	stw	r3,152(sp)
 8007218:	003f2706 	br	8006eb8 <__alt_data_end+0xfc006eb8>
 800721c:	db003417 	ldw	r12,208(sp)
 8007220:	64800044 	addi	r18,r12,1
 8007224:	9005883a 	mov	r2,r18
 8007228:	903ec20e 	bge	r18,zero,8006d34 <__alt_data_end+0xfc006d34>
 800722c:	003fdd06 	br	80071a4 <__alt_data_end+0xfc0071a4>
 8007230:	0005883a 	mov	r2,zero
 8007234:	003f5a06 	br	8006fa0 <__alt_data_end+0xfc006fa0>
 8007238:	dac03417 	ldw	r11,208(sp)
 800723c:	4a400044 	addi	r9,r9,1
 8007240:	5a65883a 	add	r18,r11,r9
 8007244:	9005883a 	mov	r2,r18
 8007248:	903eba0e 	bge	r18,zero,8006d34 <__alt_data_end+0xfc006d34>
 800724c:	003fd506 	br	80071a4 <__alt_data_end+0xfc0071a4>
 8007250:	008200b4 	movhi	r2,2050
 8007254:	10814584 	addi	r2,r2,1302
 8007258:	d8802b15 	stw	r2,172(sp)
 800725c:	003d2906 	br	8006704 <__alt_data_end+0xfc006704>
 8007260:	00800c04 	movi	r2,48
 8007264:	e0c00c04 	addi	r3,fp,48
 8007268:	d8802345 	stb	r2,141(sp)
 800726c:	d8c02385 	stb	r3,142(sp)
 8007270:	d88023c4 	addi	r2,sp,143
 8007274:	dd4022c4 	addi	r21,sp,139
 8007278:	003f9e06 	br	80070f4 <__alt_data_end+0xfc0070f4>
 800727c:	4800081e 	bne	r9,zero,80072a0 <___svfprintf_internal_r+0x1f18>
 8007280:	8c40004c 	andi	r17,r17,1
 8007284:	8800061e 	bne	r17,zero,80072a0 <___svfprintf_internal_r+0x1f18>
 8007288:	00800044 	movi	r2,1
 800728c:	1025883a 	mov	r18,r2
 8007290:	003ea806 	br	8006d34 <__alt_data_end+0xfc006d34>
 8007294:	04800084 	movi	r18,2
 8007298:	90e5c83a 	sub	r18,r18,r3
 800729c:	003fbd06 	br	8007194 <__alt_data_end+0xfc007194>
 80072a0:	4c800084 	addi	r18,r9,2
 80072a4:	9005883a 	mov	r2,r18
 80072a8:	903ea20e 	bge	r18,zero,8006d34 <__alt_data_end+0xfc006d34>
 80072ac:	003fbd06 	br	80071a4 <__alt_data_end+0xfc0071a4>
 80072b0:	dac02d17 	ldw	r11,180(sp)
 80072b4:	5a400017 	ldw	r9,0(r11)
 80072b8:	5ac00104 	addi	r11,r11,4
 80072bc:	dac02d15 	stw	r11,180(sp)
 80072c0:	483e3f0e 	bge	r9,zero,8006bc0 <__alt_data_end+0xfc006bc0>
 80072c4:	027fffc4 	movi	r9,-1
 80072c8:	1c000047 	ldb	r16,1(r3)
 80072cc:	00388406 	br	80054e0 <__alt_data_end+0xfc0054e0>
 80072d0:	00800b44 	movi	r2,45
 80072d4:	0739c83a 	sub	fp,zero,fp
 80072d8:	d8802305 	stb	r2,140(sp)
 80072dc:	003f5c06 	br	8007050 <__alt_data_end+0xfc007050>
 80072e0:	0005883a 	mov	r2,zero
 80072e4:	003f8c06 	br	8007118 <__alt_data_end+0xfc007118>
 80072e8:	88a2703a 	and	r17,r17,r2
 80072ec:	883f8826 	beq	r17,zero,8007110 <__alt_data_end+0xfc007110>
 80072f0:	003f8606 	br	800710c <__alt_data_end+0xfc00710c>
 80072f4:	d8802344 	addi	r2,sp,141
 80072f8:	003f7e06 	br	80070f4 <__alt_data_end+0xfc0070f4>
 80072fc:	d8c02617 	ldw	r3,152(sp)
 8007300:	003f4d06 	br	8007038 <__alt_data_end+0xfc007038>
 8007304:	dac02f17 	ldw	r11,188(sp)
 8007308:	00800304 	movi	r2,12
 800730c:	58800015 	stw	r2,0(r11)
 8007310:	00bfffc4 	movi	r2,-1
 8007314:	0038e806 	br	80056b8 <__alt_data_end+0xfc0056b8>

08007318 <_times_r>:
 8007318:	2809883a 	mov	r4,r5
 800731c:	80135c01 	jmpi	80135c0 <times>

08007320 <___vfprintf_internal_r>:
 8007320:	defeb604 	addi	sp,sp,-1320
 8007324:	dfc14915 	stw	ra,1316(sp)
 8007328:	ddc14715 	stw	r23,1308(sp)
 800732c:	dd814615 	stw	r22,1304(sp)
 8007330:	282f883a 	mov	r23,r5
 8007334:	202d883a 	mov	r22,r4
 8007338:	d9812a15 	stw	r6,1192(sp)
 800733c:	d9c12d15 	stw	r7,1204(sp)
 8007340:	df014815 	stw	fp,1312(sp)
 8007344:	dd414515 	stw	r21,1300(sp)
 8007348:	dd014415 	stw	r20,1296(sp)
 800734c:	dcc14315 	stw	r19,1292(sp)
 8007350:	dc814215 	stw	r18,1288(sp)
 8007354:	dc414115 	stw	r17,1284(sp)
 8007358:	dc014015 	stw	r16,1280(sp)
 800735c:	800be640 	call	800be64 <_localeconv_r>
 8007360:	10800017 	ldw	r2,0(r2)
 8007364:	1009883a 	mov	r4,r2
 8007368:	d8813515 	stw	r2,1236(sp)
 800736c:	80052f00 	call	80052f0 <strlen>
 8007370:	d8813815 	stw	r2,1248(sp)
 8007374:	b0000226 	beq	r22,zero,8007380 <___vfprintf_internal_r+0x60>
 8007378:	b0800e17 	ldw	r2,56(r22)
 800737c:	10010426 	beq	r2,zero,8007790 <___vfprintf_internal_r+0x470>
 8007380:	b8c0030b 	ldhu	r3,12(r23)
 8007384:	1908000c 	andi	r4,r3,8192
 8007388:	1805883a 	mov	r2,r3
 800738c:	2000071e 	bne	r4,zero,80073ac <___vfprintf_internal_r+0x8c>
 8007390:	b9001917 	ldw	r4,100(r23)
 8007394:	18880014 	ori	r2,r3,8192
 8007398:	00f7ffc4 	movi	r3,-8193
 800739c:	20c8703a 	and	r4,r4,r3
 80073a0:	b880030d 	sth	r2,12(r23)
 80073a4:	1007883a 	mov	r3,r2
 80073a8:	b9001915 	stw	r4,100(r23)
 80073ac:	1100020c 	andi	r4,r2,8
 80073b0:	2000a726 	beq	r4,zero,8007650 <___vfprintf_internal_r+0x330>
 80073b4:	b9000417 	ldw	r4,16(r23)
 80073b8:	2000a526 	beq	r4,zero,8007650 <___vfprintf_internal_r+0x330>
 80073bc:	1080068c 	andi	r2,r2,26
 80073c0:	01000284 	movi	r4,10
 80073c4:	1100ab26 	beq	r2,r4,8007674 <___vfprintf_internal_r+0x354>
 80073c8:	dac10e04 	addi	r11,sp,1080
 80073cc:	db010dc4 	addi	r12,sp,1079
 80073d0:	d8800404 	addi	r2,sp,16
 80073d4:	050200b4 	movhi	r20,2050
 80073d8:	dac12815 	stw	r11,1184(sp)
 80073dc:	5b17c83a 	sub	r11,r11,r12
 80073e0:	a5014d84 	addi	r20,r20,1334
 80073e4:	db012915 	stw	r12,1188(sp)
 80073e8:	d8811e15 	stw	r2,1144(sp)
 80073ec:	d8012015 	stw	zero,1152(sp)
 80073f0:	d8011f15 	stw	zero,1148(sp)
 80073f4:	d8013315 	stw	zero,1228(sp)
 80073f8:	d8013715 	stw	zero,1244(sp)
 80073fc:	d8013915 	stw	zero,1252(sp)
 8007400:	d8013b15 	stw	zero,1260(sp)
 8007404:	d8013a15 	stw	zero,1256(sp)
 8007408:	d8012f15 	stw	zero,1212(sp)
 800740c:	1011883a 	mov	r8,r2
 8007410:	dac13c15 	stw	r11,1264(sp)
 8007414:	db012a17 	ldw	r12,1192(sp)
 8007418:	60800007 	ldb	r2,0(r12)
 800741c:	1000df26 	beq	r2,zero,800779c <___vfprintf_internal_r+0x47c>
 8007420:	00c00944 	movi	r3,37
 8007424:	10c0dd26 	beq	r2,r3,800779c <___vfprintf_internal_r+0x47c>
 8007428:	6021883a 	mov	r16,r12
 800742c:	00000106 	br	8007434 <___vfprintf_internal_r+0x114>
 8007430:	10c08426 	beq	r2,r3,8007644 <___vfprintf_internal_r+0x324>
 8007434:	84000044 	addi	r16,r16,1
 8007438:	80800007 	ldb	r2,0(r16)
 800743c:	103ffc1e 	bne	r2,zero,8007430 <__alt_data_end+0xfc007430>
 8007440:	dac12a17 	ldw	r11,1192(sp)
 8007444:	82e3c83a 	sub	r17,r16,r11
 8007448:	88000f26 	beq	r17,zero,8007488 <___vfprintf_internal_r+0x168>
 800744c:	d8c12017 	ldw	r3,1152(sp)
 8007450:	d8811f17 	ldw	r2,1148(sp)
 8007454:	dac12a17 	ldw	r11,1192(sp)
 8007458:	1c47883a 	add	r3,r3,r17
 800745c:	10800044 	addi	r2,r2,1
 8007460:	d8c12015 	stw	r3,1152(sp)
 8007464:	42c00015 	stw	r11,0(r8)
 8007468:	44400115 	stw	r17,4(r8)
 800746c:	d8811f15 	stw	r2,1148(sp)
 8007470:	00c001c4 	movi	r3,7
 8007474:	1880b416 	blt	r3,r2,8007748 <___vfprintf_internal_r+0x428>
 8007478:	42000204 	addi	r8,r8,8
 800747c:	db012f17 	ldw	r12,1212(sp)
 8007480:	6459883a 	add	r12,r12,r17
 8007484:	db012f15 	stw	r12,1212(sp)
 8007488:	80800007 	ldb	r2,0(r16)
 800748c:	1000b526 	beq	r2,zero,8007764 <___vfprintf_internal_r+0x444>
 8007490:	80800044 	addi	r2,r16,1
 8007494:	84000047 	ldb	r16,1(r16)
 8007498:	d8012785 	stb	zero,1182(sp)
 800749c:	000d883a 	mov	r6,zero
 80074a0:	027fffc4 	movi	r9,-1
 80074a4:	d8012e15 	stw	zero,1208(sp)
 80074a8:	0023883a 	mov	r17,zero
 80074ac:	01001604 	movi	r4,88
 80074b0:	01400244 	movi	r5,9
 80074b4:	02800a84 	movi	r10,42
 80074b8:	01c01b04 	movi	r7,108
 80074bc:	10c00044 	addi	r3,r2,1
 80074c0:	80bff804 	addi	r2,r16,-32
 80074c4:	2082f236 	bltu	r4,r2,8008090 <___vfprintf_internal_r+0xd70>
 80074c8:	100490ba 	slli	r2,r2,2
 80074cc:	02c20034 	movhi	r11,2048
 80074d0:	5add3804 	addi	r11,r11,29920
 80074d4:	12c5883a 	add	r2,r2,r11
 80074d8:	10800017 	ldw	r2,0(r2)
 80074dc:	1000683a 	jmp	r2
 80074e0:	08007ed8 	cmpnei	zero,at,507
 80074e4:	08008090 	cmplti	zero,at,514
 80074e8:	08008090 	cmplti	zero,at,514
 80074ec:	08007ef8 	rdprs	zero,at,507
 80074f0:	08008090 	cmplti	zero,at,514
 80074f4:	08008090 	cmplti	zero,at,514
 80074f8:	08008090 	cmplti	zero,at,514
 80074fc:	08008090 	cmplti	zero,at,514
 8007500:	08008090 	cmplti	zero,at,514
 8007504:	08008090 	cmplti	zero,at,514
 8007508:	08008054 	ori	zero,at,513
 800750c:	08008080 	call	800808 <__alt_mem_sdram-0x77ff7f8>
 8007510:	08008090 	cmplti	zero,at,514
 8007514:	080077a4 	muli	zero,at,478
 8007518:	080077b4 	orhi	zero,at,478
 800751c:	08008090 	cmplti	zero,at,514
 8007520:	080077f4 	orhi	zero,at,479
 8007524:	08007ce8 	cmpgeui	zero,at,499
 8007528:	08007ce8 	cmpgeui	zero,at,499
 800752c:	08007ce8 	cmpgeui	zero,at,499
 8007530:	08007ce8 	cmpgeui	zero,at,499
 8007534:	08007ce8 	cmpgeui	zero,at,499
 8007538:	08007ce8 	cmpgeui	zero,at,499
 800753c:	08007ce8 	cmpgeui	zero,at,499
 8007540:	08007ce8 	cmpgeui	zero,at,499
 8007544:	08007ce8 	cmpgeui	zero,at,499
 8007548:	08008090 	cmplti	zero,at,514
 800754c:	08008090 	cmplti	zero,at,514
 8007550:	08008090 	cmplti	zero,at,514
 8007554:	08008090 	cmplti	zero,at,514
 8007558:	08008090 	cmplti	zero,at,514
 800755c:	08008090 	cmplti	zero,at,514
 8007560:	08008090 	cmplti	zero,at,514
 8007564:	08008090 	cmplti	zero,at,514
 8007568:	08008090 	cmplti	zero,at,514
 800756c:	08008090 	cmplti	zero,at,514
 8007570:	08007d1c 	xori	zero,at,500
 8007574:	08007804 	addi	zero,at,480
 8007578:	08008090 	cmplti	zero,at,514
 800757c:	08007804 	addi	zero,at,480
 8007580:	08008090 	cmplti	zero,at,514
 8007584:	08008090 	cmplti	zero,at,514
 8007588:	08008090 	cmplti	zero,at,514
 800758c:	08008090 	cmplti	zero,at,514
 8007590:	080078a8 	cmpgeui	zero,at,482
 8007594:	08008090 	cmplti	zero,at,514
 8007598:	08008090 	cmplti	zero,at,514
 800759c:	080078b8 	rdprs	zero,at,482
 80075a0:	08008090 	cmplti	zero,at,514
 80075a4:	08008090 	cmplti	zero,at,514
 80075a8:	08008090 	cmplti	zero,at,514
 80075ac:	08008090 	cmplti	zero,at,514
 80075b0:	08008090 	cmplti	zero,at,514
 80075b4:	08007cb4 	orhi	zero,at,498
 80075b8:	08008090 	cmplti	zero,at,514
 80075bc:	08008090 	cmplti	zero,at,514
 80075c0:	08007d64 	muli	zero,at,501
 80075c4:	08008090 	cmplti	zero,at,514
 80075c8:	08008090 	cmplti	zero,at,514
 80075cc:	08008090 	cmplti	zero,at,514
 80075d0:	08008090 	cmplti	zero,at,514
 80075d4:	08008090 	cmplti	zero,at,514
 80075d8:	08008090 	cmplti	zero,at,514
 80075dc:	08008090 	cmplti	zero,at,514
 80075e0:	08008090 	cmplti	zero,at,514
 80075e4:	08008090 	cmplti	zero,at,514
 80075e8:	08008090 	cmplti	zero,at,514
 80075ec:	08007f58 	cmpnei	zero,at,509
 80075f0:	08007f08 	cmpgei	zero,at,508
 80075f4:	08007804 	addi	zero,at,480
 80075f8:	08007804 	addi	zero,at,480
 80075fc:	08007804 	addi	zero,at,480
 8007600:	08007f48 	cmpgei	zero,at,509
 8007604:	08007f08 	cmpgei	zero,at,508
 8007608:	08008090 	cmplti	zero,at,514
 800760c:	08008090 	cmplti	zero,at,514
 8007610:	08007e50 	cmplti	zero,at,505
 8007614:	08008090 	cmplti	zero,at,514
 8007618:	08007e64 	muli	zero,at,505
 800761c:	08007e98 	cmpnei	zero,at,506
 8007620:	08007f98 	cmpnei	zero,at,510
 8007624:	08007dc0 	call	8007dc <__alt_mem_sdram-0x77ff824>
 8007628:	08008090 	cmplti	zero,at,514
 800762c:	08007fe0 	cmpeqi	zero,at,511
 8007630:	08008090 	cmplti	zero,at,514
 8007634:	08007dd0 	cmplti	zero,at,503
 8007638:	08008090 	cmplti	zero,at,514
 800763c:	08008090 	cmplti	zero,at,514
 8007640:	08007e10 	cmplti	zero,at,504
 8007644:	db012a17 	ldw	r12,1192(sp)
 8007648:	8323c83a 	sub	r17,r16,r12
 800764c:	003f7e06 	br	8007448 <__alt_data_end+0xfc007448>
 8007650:	b009883a 	mov	r4,r22
 8007654:	b80b883a 	mov	r5,r23
 8007658:	80093400 	call	8009340 <__swsetup_r>
 800765c:	10002d1e 	bne	r2,zero,8007714 <___vfprintf_internal_r+0x3f4>
 8007660:	b8c0030b 	ldhu	r3,12(r23)
 8007664:	01000284 	movi	r4,10
 8007668:	1805883a 	mov	r2,r3
 800766c:	1080068c 	andi	r2,r2,26
 8007670:	113f551e 	bne	r2,r4,80073c8 <__alt_data_end+0xfc0073c8>
 8007674:	b880038b 	ldhu	r2,14(r23)
 8007678:	113fffcc 	andi	r4,r2,65535
 800767c:	2120001c 	xori	r4,r4,32768
 8007680:	21200004 	addi	r4,r4,-32768
 8007684:	203f5016 	blt	r4,zero,80073c8 <__alt_data_end+0xfc0073c8>
 8007688:	bac01917 	ldw	r11,100(r23)
 800768c:	ba800717 	ldw	r10,28(r23)
 8007690:	ba400917 	ldw	r9,36(r23)
 8007694:	d9812a17 	ldw	r6,1192(sp)
 8007698:	d9c12d17 	ldw	r7,1204(sp)
 800769c:	02010004 	movi	r8,1024
 80076a0:	18ffff4c 	andi	r3,r3,65533
 80076a4:	d881078d 	sth	r2,1054(sp)
 80076a8:	b009883a 	mov	r4,r22
 80076ac:	d8800404 	addi	r2,sp,16
 80076b0:	d9410404 	addi	r5,sp,1040
 80076b4:	d8c1070d 	sth	r3,1052(sp)
 80076b8:	dac11d15 	stw	r11,1140(sp)
 80076bc:	da810b15 	stw	r10,1068(sp)
 80076c0:	da410d15 	stw	r9,1076(sp)
 80076c4:	d8810415 	stw	r2,1040(sp)
 80076c8:	d8810815 	stw	r2,1056(sp)
 80076cc:	da010615 	stw	r8,1048(sp)
 80076d0:	da010915 	stw	r8,1060(sp)
 80076d4:	d8010a15 	stw	zero,1064(sp)
 80076d8:	80073200 	call	8007320 <___vfprintf_internal_r>
 80076dc:	1021883a 	mov	r16,r2
 80076e0:	10000416 	blt	r2,zero,80076f4 <___vfprintf_internal_r+0x3d4>
 80076e4:	b009883a 	mov	r4,r22
 80076e8:	d9410404 	addi	r5,sp,1040
 80076ec:	800ad980 	call	800ad98 <_fflush_r>
 80076f0:	1006ee1e 	bne	r2,zero,80092ac <___vfprintf_internal_r+0x1f8c>
 80076f4:	d881070b 	ldhu	r2,1052(sp)
 80076f8:	1080100c 	andi	r2,r2,64
 80076fc:	10000326 	beq	r2,zero,800770c <___vfprintf_internal_r+0x3ec>
 8007700:	b880030b 	ldhu	r2,12(r23)
 8007704:	10801014 	ori	r2,r2,64
 8007708:	b880030d 	sth	r2,12(r23)
 800770c:	8005883a 	mov	r2,r16
 8007710:	00000106 	br	8007718 <___vfprintf_internal_r+0x3f8>
 8007714:	00bfffc4 	movi	r2,-1
 8007718:	dfc14917 	ldw	ra,1316(sp)
 800771c:	df014817 	ldw	fp,1312(sp)
 8007720:	ddc14717 	ldw	r23,1308(sp)
 8007724:	dd814617 	ldw	r22,1304(sp)
 8007728:	dd414517 	ldw	r21,1300(sp)
 800772c:	dd014417 	ldw	r20,1296(sp)
 8007730:	dcc14317 	ldw	r19,1292(sp)
 8007734:	dc814217 	ldw	r18,1288(sp)
 8007738:	dc414117 	ldw	r17,1284(sp)
 800773c:	dc014017 	ldw	r16,1280(sp)
 8007740:	dec14a04 	addi	sp,sp,1320
 8007744:	f800283a 	ret
 8007748:	b009883a 	mov	r4,r22
 800774c:	b80b883a 	mov	r5,r23
 8007750:	d9811e04 	addi	r6,sp,1144
 8007754:	800f1040 	call	800f104 <__sprint_r>
 8007758:	1000081e 	bne	r2,zero,800777c <___vfprintf_internal_r+0x45c>
 800775c:	da000404 	addi	r8,sp,16
 8007760:	003f4606 	br	800747c <__alt_data_end+0xfc00747c>
 8007764:	d8812017 	ldw	r2,1152(sp)
 8007768:	10000426 	beq	r2,zero,800777c <___vfprintf_internal_r+0x45c>
 800776c:	b009883a 	mov	r4,r22
 8007770:	b80b883a 	mov	r5,r23
 8007774:	d9811e04 	addi	r6,sp,1144
 8007778:	800f1040 	call	800f104 <__sprint_r>
 800777c:	b880030b 	ldhu	r2,12(r23)
 8007780:	1080100c 	andi	r2,r2,64
 8007784:	103fe31e 	bne	r2,zero,8007714 <__alt_data_end+0xfc007714>
 8007788:	d8812f17 	ldw	r2,1212(sp)
 800778c:	003fe206 	br	8007718 <__alt_data_end+0xfc007718>
 8007790:	b009883a 	mov	r4,r22
 8007794:	800b3400 	call	800b340 <__sinit>
 8007798:	003ef906 	br	8007380 <__alt_data_end+0xfc007380>
 800779c:	dc012a17 	ldw	r16,1192(sp)
 80077a0:	003f3906 	br	8007488 <__alt_data_end+0xfc007488>
 80077a4:	1805883a 	mov	r2,r3
 80077a8:	8c400114 	ori	r17,r17,4
 80077ac:	1c000007 	ldb	r16,0(r3)
 80077b0:	003f4206 	br	80074bc <__alt_data_end+0xfc0074bc>
 80077b4:	1c000007 	ldb	r16,0(r3)
 80077b8:	18800044 	addi	r2,r3,1
 80077bc:	8286b326 	beq	r16,r10,800928c <___vfprintf_internal_r+0x1f6c>
 80077c0:	82fff404 	addi	r11,r16,-48
 80077c4:	1007883a 	mov	r3,r2
 80077c8:	0013883a 	mov	r9,zero
 80077cc:	2aff3c36 	bltu	r5,r11,80074c0 <__alt_data_end+0xfc0074c0>
 80077d0:	1c000007 	ldb	r16,0(r3)
 80077d4:	4a4002a4 	muli	r9,r9,10
 80077d8:	18c00044 	addi	r3,r3,1
 80077dc:	5a53883a 	add	r9,r11,r9
 80077e0:	82fff404 	addi	r11,r16,-48
 80077e4:	2afffa2e 	bgeu	r5,r11,80077d0 <__alt_data_end+0xfc0077d0>
 80077e8:	483f350e 	bge	r9,zero,80074c0 <__alt_data_end+0xfc0074c0>
 80077ec:	027fffc4 	movi	r9,-1
 80077f0:	003f3306 	br	80074c0 <__alt_data_end+0xfc0074c0>
 80077f4:	8c402014 	ori	r17,r17,128
 80077f8:	1805883a 	mov	r2,r3
 80077fc:	1c000007 	ldb	r16,0(r3)
 8007800:	003f2e06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007804:	db012d17 	ldw	r12,1204(sp)
 8007808:	dac12d17 	ldw	r11,1204(sp)
 800780c:	d8c12a15 	stw	r3,1192(sp)
 8007810:	63000017 	ldw	r12,0(r12)
 8007814:	5ac00117 	ldw	r11,4(r11)
 8007818:	d9812785 	stb	r6,1182(sp)
 800781c:	6009883a 	mov	r4,r12
 8007820:	580b883a 	mov	r5,r11
 8007824:	db013715 	stw	r12,1244(sp)
 8007828:	da013f15 	stw	r8,1276(sp)
 800782c:	da413e15 	stw	r9,1272(sp)
 8007830:	dac13915 	stw	r11,1252(sp)
 8007834:	800db840 	call	800db84 <__fpclassifyd>
 8007838:	db012d17 	ldw	r12,1204(sp)
 800783c:	04800044 	movi	r18,1
 8007840:	da013f17 	ldw	r8,1276(sp)
 8007844:	64c00204 	addi	r19,r12,8
 8007848:	da413e17 	ldw	r9,1272(sp)
 800784c:	d9013717 	ldw	r4,1244(sp)
 8007850:	d9413917 	ldw	r5,1252(sp)
 8007854:	1484581e 	bne	r2,r18,80089b8 <___vfprintf_internal_r+0x1698>
 8007858:	000d883a 	mov	r6,zero
 800785c:	000f883a 	mov	r7,zero
 8007860:	8003ea80 	call	8003ea8 <__ledf2>
 8007864:	da013f17 	ldw	r8,1276(sp)
 8007868:	1005ef16 	blt	r2,zero,8009028 <___vfprintf_internal_r+0x1d08>
 800786c:	dd412783 	ldbu	r21,1182(sp)
 8007870:	008011c4 	movi	r2,71
 8007874:	14053b0e 	bge	r2,r16,8008d64 <___vfprintf_internal_r+0x1a44>
 8007878:	00c200b4 	movhi	r3,2050
 800787c:	18c13604 	addi	r3,r3,1240
 8007880:	d8c13115 	stw	r3,1220(sp)
 8007884:	02c000c4 	movi	r11,3
 8007888:	00bfdfc4 	movi	r2,-129
 800788c:	dac12b15 	stw	r11,1196(sp)
 8007890:	88a2703a 	and	r17,r17,r2
 8007894:	dcc12d15 	stw	r19,1204(sp)
 8007898:	5825883a 	mov	r18,r11
 800789c:	d8013215 	stw	zero,1224(sp)
 80078a0:	d8013415 	stw	zero,1232(sp)
 80078a4:	00003206 	br	8007970 <___vfprintf_internal_r+0x650>
 80078a8:	8c400214 	ori	r17,r17,8
 80078ac:	1805883a 	mov	r2,r3
 80078b0:	1c000007 	ldb	r16,0(r3)
 80078b4:	003f0106 	br	80074bc <__alt_data_end+0xfc0074bc>
 80078b8:	8c400414 	ori	r17,r17,16
 80078bc:	d8c12a15 	stw	r3,1192(sp)
 80078c0:	88c0080c 	andi	r3,r17,32
 80078c4:	d8812d17 	ldw	r2,1204(sp)
 80078c8:	18017726 	beq	r3,zero,8007ea8 <___vfprintf_internal_r+0xb88>
 80078cc:	db012d17 	ldw	r12,1204(sp)
 80078d0:	14c00017 	ldw	r19,0(r2)
 80078d4:	17000117 	ldw	fp,4(r2)
 80078d8:	63000204 	addi	r12,r12,8
 80078dc:	db012d15 	stw	r12,1204(sp)
 80078e0:	0005883a 	mov	r2,zero
 80078e4:	9f06b03a 	or	r3,r19,fp
 80078e8:	d8012785 	stb	zero,1182(sp)
 80078ec:	da413215 	stw	r9,1224(sp)
 80078f0:	002b883a 	mov	r21,zero
 80078f4:	48000216 	blt	r9,zero,8007900 <___vfprintf_internal_r+0x5e0>
 80078f8:	013fdfc4 	movi	r4,-129
 80078fc:	8922703a 	and	r17,r17,r4
 8007900:	1801ed1e 	bne	r3,zero,80080b8 <___vfprintf_internal_r+0xd98>
 8007904:	4802e026 	beq	r9,zero,8008488 <___vfprintf_internal_r+0x1168>
 8007908:	10803fcc 	andi	r2,r2,255
 800790c:	00c00044 	movi	r3,1
 8007910:	10c20f26 	beq	r2,r3,8008150 <___vfprintf_internal_r+0xe30>
 8007914:	00c00084 	movi	r3,2
 8007918:	10c2fd26 	beq	r2,r3,8008510 <___vfprintf_internal_r+0x11f0>
 800791c:	d8c10e04 	addi	r3,sp,1080
 8007920:	9808d0fa 	srli	r4,r19,3
 8007924:	e00a977a 	slli	r5,fp,29
 8007928:	e038d0fa 	srli	fp,fp,3
 800792c:	9cc001cc 	andi	r19,r19,7
 8007930:	98800c04 	addi	r2,r19,48
 8007934:	18ffffc4 	addi	r3,r3,-1
 8007938:	2926b03a 	or	r19,r5,r4
 800793c:	18800005 	stb	r2,0(r3)
 8007940:	9f08b03a 	or	r4,r19,fp
 8007944:	203ff61e 	bne	r4,zero,8007920 <__alt_data_end+0xfc007920>
 8007948:	8900004c 	andi	r4,r17,1
 800794c:	d8c13115 	stw	r3,1220(sp)
 8007950:	2003791e 	bne	r4,zero,8008738 <___vfprintf_internal_r+0x1418>
 8007954:	dac12817 	ldw	r11,1184(sp)
 8007958:	58e5c83a 	sub	r18,r11,r3
 800795c:	9005883a 	mov	r2,r18
 8007960:	9240010e 	bge	r18,r9,8007968 <___vfprintf_internal_r+0x648>
 8007964:	4805883a 	mov	r2,r9
 8007968:	d8812b15 	stw	r2,1196(sp)
 800796c:	d8013415 	stw	zero,1232(sp)
 8007970:	a8803fcc 	andi	r2,r21,255
 8007974:	1080201c 	xori	r2,r2,128
 8007978:	10bfe004 	addi	r2,r2,-128
 800797c:	10000326 	beq	r2,zero,800798c <___vfprintf_internal_r+0x66c>
 8007980:	db012b17 	ldw	r12,1196(sp)
 8007984:	63000044 	addi	r12,r12,1
 8007988:	db012b15 	stw	r12,1196(sp)
 800798c:	88c0008c 	andi	r3,r17,2
 8007990:	d8c12c15 	stw	r3,1200(sp)
 8007994:	18000326 	beq	r3,zero,80079a4 <___vfprintf_internal_r+0x684>
 8007998:	dac12b17 	ldw	r11,1196(sp)
 800799c:	5ac00084 	addi	r11,r11,2
 80079a0:	dac12b15 	stw	r11,1196(sp)
 80079a4:	8b00210c 	andi	r12,r17,132
 80079a8:	db013015 	stw	r12,1216(sp)
 80079ac:	6001c01e 	bne	r12,zero,80080b0 <___vfprintf_internal_r+0xd90>
 80079b0:	dac12e17 	ldw	r11,1208(sp)
 80079b4:	db012b17 	ldw	r12,1196(sp)
 80079b8:	5b39c83a 	sub	fp,r11,r12
 80079bc:	0701bc0e 	bge	zero,fp,80080b0 <___vfprintf_internal_r+0xd90>
 80079c0:	02400404 	movi	r9,16
 80079c4:	d8c12017 	ldw	r3,1152(sp)
 80079c8:	d8811f17 	ldw	r2,1148(sp)
 80079cc:	4f05220e 	bge	r9,fp,8008e58 <___vfprintf_internal_r+0x1b38>
 80079d0:	014200b4 	movhi	r5,2050
 80079d4:	29415184 	addi	r5,r5,1350
 80079d8:	d9413615 	stw	r5,1240(sp)
 80079dc:	482b883a 	mov	r21,r9
 80079e0:	04c001c4 	movi	r19,7
 80079e4:	00000306 	br	80079f4 <___vfprintf_internal_r+0x6d4>
 80079e8:	e73ffc04 	addi	fp,fp,-16
 80079ec:	42000204 	addi	r8,r8,8
 80079f0:	af00130e 	bge	r21,fp,8007a40 <___vfprintf_internal_r+0x720>
 80079f4:	02c200b4 	movhi	r11,2050
 80079f8:	18c00404 	addi	r3,r3,16
 80079fc:	10800044 	addi	r2,r2,1
 8007a00:	5ac15184 	addi	r11,r11,1350
 8007a04:	42c00015 	stw	r11,0(r8)
 8007a08:	45400115 	stw	r21,4(r8)
 8007a0c:	d8c12015 	stw	r3,1152(sp)
 8007a10:	d8811f15 	stw	r2,1148(sp)
 8007a14:	98bff40e 	bge	r19,r2,80079e8 <__alt_data_end+0xfc0079e8>
 8007a18:	b009883a 	mov	r4,r22
 8007a1c:	b80b883a 	mov	r5,r23
 8007a20:	d9811e04 	addi	r6,sp,1144
 8007a24:	800f1040 	call	800f104 <__sprint_r>
 8007a28:	103f541e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8007a2c:	e73ffc04 	addi	fp,fp,-16
 8007a30:	d8c12017 	ldw	r3,1152(sp)
 8007a34:	d8811f17 	ldw	r2,1148(sp)
 8007a38:	da000404 	addi	r8,sp,16
 8007a3c:	af3fed16 	blt	r21,fp,80079f4 <__alt_data_end+0xfc0079f4>
 8007a40:	db013617 	ldw	r12,1240(sp)
 8007a44:	e0c7883a 	add	r3,fp,r3
 8007a48:	10800044 	addi	r2,r2,1
 8007a4c:	43000015 	stw	r12,0(r8)
 8007a50:	47000115 	stw	fp,4(r8)
 8007a54:	d8c12015 	stw	r3,1152(sp)
 8007a58:	d8811f15 	stw	r2,1148(sp)
 8007a5c:	010001c4 	movi	r4,7
 8007a60:	2082f416 	blt	r4,r2,8008634 <___vfprintf_internal_r+0x1314>
 8007a64:	d8812787 	ldb	r2,1182(sp)
 8007a68:	42000204 	addi	r8,r8,8
 8007a6c:	10000c26 	beq	r2,zero,8007aa0 <___vfprintf_internal_r+0x780>
 8007a70:	d8811f17 	ldw	r2,1148(sp)
 8007a74:	d9012784 	addi	r4,sp,1182
 8007a78:	18c00044 	addi	r3,r3,1
 8007a7c:	10800044 	addi	r2,r2,1
 8007a80:	41000015 	stw	r4,0(r8)
 8007a84:	01000044 	movi	r4,1
 8007a88:	41000115 	stw	r4,4(r8)
 8007a8c:	d8c12015 	stw	r3,1152(sp)
 8007a90:	d8811f15 	stw	r2,1148(sp)
 8007a94:	010001c4 	movi	r4,7
 8007a98:	20828d16 	blt	r4,r2,80084d0 <___vfprintf_internal_r+0x11b0>
 8007a9c:	42000204 	addi	r8,r8,8
 8007aa0:	dac12c17 	ldw	r11,1200(sp)
 8007aa4:	58000c26 	beq	r11,zero,8007ad8 <___vfprintf_internal_r+0x7b8>
 8007aa8:	d8811f17 	ldw	r2,1148(sp)
 8007aac:	d9012704 	addi	r4,sp,1180
 8007ab0:	18c00084 	addi	r3,r3,2
 8007ab4:	10800044 	addi	r2,r2,1
 8007ab8:	41000015 	stw	r4,0(r8)
 8007abc:	01000084 	movi	r4,2
 8007ac0:	41000115 	stw	r4,4(r8)
 8007ac4:	d8c12015 	stw	r3,1152(sp)
 8007ac8:	d8811f15 	stw	r2,1148(sp)
 8007acc:	010001c4 	movi	r4,7
 8007ad0:	20828716 	blt	r4,r2,80084f0 <___vfprintf_internal_r+0x11d0>
 8007ad4:	42000204 	addi	r8,r8,8
 8007ad8:	db013017 	ldw	r12,1216(sp)
 8007adc:	00802004 	movi	r2,128
 8007ae0:	6081e926 	beq	r12,r2,8008288 <___vfprintf_internal_r+0xf68>
 8007ae4:	db013217 	ldw	r12,1224(sp)
 8007ae8:	64abc83a 	sub	r21,r12,r18
 8007aec:	0540260e 	bge	zero,r21,8007b88 <___vfprintf_internal_r+0x868>
 8007af0:	07000404 	movi	fp,16
 8007af4:	d8811f17 	ldw	r2,1148(sp)
 8007af8:	e5443d0e 	bge	fp,r21,8008bf0 <___vfprintf_internal_r+0x18d0>
 8007afc:	014200b4 	movhi	r5,2050
 8007b00:	29414d84 	addi	r5,r5,1334
 8007b04:	d9412c15 	stw	r5,1200(sp)
 8007b08:	04c001c4 	movi	r19,7
 8007b0c:	00000306 	br	8007b1c <___vfprintf_internal_r+0x7fc>
 8007b10:	ad7ffc04 	addi	r21,r21,-16
 8007b14:	42000204 	addi	r8,r8,8
 8007b18:	e540110e 	bge	fp,r21,8007b60 <___vfprintf_internal_r+0x840>
 8007b1c:	18c00404 	addi	r3,r3,16
 8007b20:	10800044 	addi	r2,r2,1
 8007b24:	45000015 	stw	r20,0(r8)
 8007b28:	47000115 	stw	fp,4(r8)
 8007b2c:	d8c12015 	stw	r3,1152(sp)
 8007b30:	d8811f15 	stw	r2,1148(sp)
 8007b34:	98bff60e 	bge	r19,r2,8007b10 <__alt_data_end+0xfc007b10>
 8007b38:	b009883a 	mov	r4,r22
 8007b3c:	b80b883a 	mov	r5,r23
 8007b40:	d9811e04 	addi	r6,sp,1144
 8007b44:	800f1040 	call	800f104 <__sprint_r>
 8007b48:	103f0c1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8007b4c:	ad7ffc04 	addi	r21,r21,-16
 8007b50:	d8c12017 	ldw	r3,1152(sp)
 8007b54:	d8811f17 	ldw	r2,1148(sp)
 8007b58:	da000404 	addi	r8,sp,16
 8007b5c:	e57fef16 	blt	fp,r21,8007b1c <__alt_data_end+0xfc007b1c>
 8007b60:	dac12c17 	ldw	r11,1200(sp)
 8007b64:	1d47883a 	add	r3,r3,r21
 8007b68:	10800044 	addi	r2,r2,1
 8007b6c:	42c00015 	stw	r11,0(r8)
 8007b70:	45400115 	stw	r21,4(r8)
 8007b74:	d8c12015 	stw	r3,1152(sp)
 8007b78:	d8811f15 	stw	r2,1148(sp)
 8007b7c:	010001c4 	movi	r4,7
 8007b80:	20824b16 	blt	r4,r2,80084b0 <___vfprintf_internal_r+0x1190>
 8007b84:	42000204 	addi	r8,r8,8
 8007b88:	8880400c 	andi	r2,r17,256
 8007b8c:	1001761e 	bne	r2,zero,8008168 <___vfprintf_internal_r+0xe48>
 8007b90:	d8811f17 	ldw	r2,1148(sp)
 8007b94:	db013117 	ldw	r12,1220(sp)
 8007b98:	1c87883a 	add	r3,r3,r18
 8007b9c:	10800044 	addi	r2,r2,1
 8007ba0:	43000015 	stw	r12,0(r8)
 8007ba4:	44800115 	stw	r18,4(r8)
 8007ba8:	d8c12015 	stw	r3,1152(sp)
 8007bac:	d8811f15 	stw	r2,1148(sp)
 8007bb0:	010001c4 	movi	r4,7
 8007bb4:	20822616 	blt	r4,r2,8008450 <___vfprintf_internal_r+0x1130>
 8007bb8:	42000204 	addi	r8,r8,8
 8007bbc:	8c40010c 	andi	r17,r17,4
 8007bc0:	88003126 	beq	r17,zero,8007c88 <___vfprintf_internal_r+0x968>
 8007bc4:	db012e17 	ldw	r12,1208(sp)
 8007bc8:	dac12b17 	ldw	r11,1196(sp)
 8007bcc:	62e1c83a 	sub	r16,r12,r11
 8007bd0:	04002d0e 	bge	zero,r16,8007c88 <___vfprintf_internal_r+0x968>
 8007bd4:	04400404 	movi	r17,16
 8007bd8:	d8811f17 	ldw	r2,1148(sp)
 8007bdc:	8c04df0e 	bge	r17,r16,8008f5c <___vfprintf_internal_r+0x1c3c>
 8007be0:	010200b4 	movhi	r4,2050
 8007be4:	21015184 	addi	r4,r4,1350
 8007be8:	d9013615 	stw	r4,1240(sp)
 8007bec:	048001c4 	movi	r18,7
 8007bf0:	00000306 	br	8007c00 <___vfprintf_internal_r+0x8e0>
 8007bf4:	843ffc04 	addi	r16,r16,-16
 8007bf8:	42000204 	addi	r8,r8,8
 8007bfc:	8c00130e 	bge	r17,r16,8007c4c <___vfprintf_internal_r+0x92c>
 8007c00:	014200b4 	movhi	r5,2050
 8007c04:	18c00404 	addi	r3,r3,16
 8007c08:	10800044 	addi	r2,r2,1
 8007c0c:	29415184 	addi	r5,r5,1350
 8007c10:	41400015 	stw	r5,0(r8)
 8007c14:	44400115 	stw	r17,4(r8)
 8007c18:	d8c12015 	stw	r3,1152(sp)
 8007c1c:	d8811f15 	stw	r2,1148(sp)
 8007c20:	90bff40e 	bge	r18,r2,8007bf4 <__alt_data_end+0xfc007bf4>
 8007c24:	b009883a 	mov	r4,r22
 8007c28:	b80b883a 	mov	r5,r23
 8007c2c:	d9811e04 	addi	r6,sp,1144
 8007c30:	800f1040 	call	800f104 <__sprint_r>
 8007c34:	103ed11e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8007c38:	843ffc04 	addi	r16,r16,-16
 8007c3c:	d8c12017 	ldw	r3,1152(sp)
 8007c40:	d8811f17 	ldw	r2,1148(sp)
 8007c44:	da000404 	addi	r8,sp,16
 8007c48:	8c3fed16 	blt	r17,r16,8007c00 <__alt_data_end+0xfc007c00>
 8007c4c:	dac13617 	ldw	r11,1240(sp)
 8007c50:	1c07883a 	add	r3,r3,r16
 8007c54:	10800044 	addi	r2,r2,1
 8007c58:	42c00015 	stw	r11,0(r8)
 8007c5c:	44000115 	stw	r16,4(r8)
 8007c60:	d8c12015 	stw	r3,1152(sp)
 8007c64:	d8811f15 	stw	r2,1148(sp)
 8007c68:	010001c4 	movi	r4,7
 8007c6c:	2080060e 	bge	r4,r2,8007c88 <___vfprintf_internal_r+0x968>
 8007c70:	b009883a 	mov	r4,r22
 8007c74:	b80b883a 	mov	r5,r23
 8007c78:	d9811e04 	addi	r6,sp,1144
 8007c7c:	800f1040 	call	800f104 <__sprint_r>
 8007c80:	103ebe1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8007c84:	d8c12017 	ldw	r3,1152(sp)
 8007c88:	d8812b17 	ldw	r2,1196(sp)
 8007c8c:	db012e17 	ldw	r12,1208(sp)
 8007c90:	1300010e 	bge	r2,r12,8007c98 <___vfprintf_internal_r+0x978>
 8007c94:	6005883a 	mov	r2,r12
 8007c98:	dac12f17 	ldw	r11,1212(sp)
 8007c9c:	5897883a 	add	r11,r11,r2
 8007ca0:	dac12f15 	stw	r11,1212(sp)
 8007ca4:	1801f21e 	bne	r3,zero,8008470 <___vfprintf_internal_r+0x1150>
 8007ca8:	d8011f15 	stw	zero,1148(sp)
 8007cac:	da000404 	addi	r8,sp,16
 8007cb0:	003dd806 	br	8007414 <__alt_data_end+0xfc007414>
 8007cb4:	8c400414 	ori	r17,r17,16
 8007cb8:	d8c12a15 	stw	r3,1192(sp)
 8007cbc:	88c0080c 	andi	r3,r17,32
 8007cc0:	d8812d17 	ldw	r2,1204(sp)
 8007cc4:	18004626 	beq	r3,zero,8007de0 <___vfprintf_internal_r+0xac0>
 8007cc8:	dac12d17 	ldw	r11,1204(sp)
 8007ccc:	14c00017 	ldw	r19,0(r2)
 8007cd0:	17000117 	ldw	fp,4(r2)
 8007cd4:	5ac00204 	addi	r11,r11,8
 8007cd8:	dac12d15 	stw	r11,1204(sp)
 8007cdc:	00800044 	movi	r2,1
 8007ce0:	9f06b03a 	or	r3,r19,fp
 8007ce4:	003f0006 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007ce8:	1805883a 	mov	r2,r3
 8007cec:	d8012e15 	stw	zero,1208(sp)
 8007cf0:	82fff404 	addi	r11,r16,-48
 8007cf4:	0019883a 	mov	r12,zero
 8007cf8:	14000007 	ldb	r16,0(r2)
 8007cfc:	630002a4 	muli	r12,r12,10
 8007d00:	18c00044 	addi	r3,r3,1
 8007d04:	1805883a 	mov	r2,r3
 8007d08:	62d9883a 	add	r12,r12,r11
 8007d0c:	82fff404 	addi	r11,r16,-48
 8007d10:	2afff92e 	bgeu	r5,r11,8007cf8 <__alt_data_end+0xfc007cf8>
 8007d14:	db012e15 	stw	r12,1208(sp)
 8007d18:	003de906 	br	80074c0 <__alt_data_end+0xfc0074c0>
 8007d1c:	8c400414 	ori	r17,r17,16
 8007d20:	d8c12a15 	stw	r3,1192(sp)
 8007d24:	d9812785 	stb	r6,1182(sp)
 8007d28:	8880080c 	andi	r2,r17,32
 8007d2c:	d8c12d17 	ldw	r3,1204(sp)
 8007d30:	10007a26 	beq	r2,zero,8007f1c <___vfprintf_internal_r+0xbfc>
 8007d34:	db012d17 	ldw	r12,1204(sp)
 8007d38:	18800117 	ldw	r2,4(r3)
 8007d3c:	1cc00017 	ldw	r19,0(r3)
 8007d40:	63000204 	addi	r12,r12,8
 8007d44:	db012d15 	stw	r12,1204(sp)
 8007d48:	1039883a 	mov	fp,r2
 8007d4c:	10031016 	blt	r2,zero,8008990 <___vfprintf_internal_r+0x1670>
 8007d50:	dd412783 	ldbu	r21,1182(sp)
 8007d54:	da413215 	stw	r9,1224(sp)
 8007d58:	00800044 	movi	r2,1
 8007d5c:	9f06b03a 	or	r3,r19,fp
 8007d60:	003ee406 	br	80078f4 <__alt_data_end+0xfc0078f4>
 8007d64:	030200b4 	movhi	r12,2050
 8007d68:	63013904 	addi	r12,r12,1252
 8007d6c:	d8c12a15 	stw	r3,1192(sp)
 8007d70:	d9812785 	stb	r6,1182(sp)
 8007d74:	db013b15 	stw	r12,1260(sp)
 8007d78:	88c0080c 	andi	r3,r17,32
 8007d7c:	d8812d17 	ldw	r2,1204(sp)
 8007d80:	18002b26 	beq	r3,zero,8007e30 <___vfprintf_internal_r+0xb10>
 8007d84:	dac12d17 	ldw	r11,1204(sp)
 8007d88:	14c00017 	ldw	r19,0(r2)
 8007d8c:	17000117 	ldw	fp,4(r2)
 8007d90:	5ac00204 	addi	r11,r11,8
 8007d94:	dac12d15 	stw	r11,1204(sp)
 8007d98:	8880004c 	andi	r2,r17,1
 8007d9c:	10025b26 	beq	r2,zero,800870c <___vfprintf_internal_r+0x13ec>
 8007da0:	9f06b03a 	or	r3,r19,fp
 8007da4:	18037026 	beq	r3,zero,8008b68 <___vfprintf_internal_r+0x1848>
 8007da8:	00800c04 	movi	r2,48
 8007dac:	d8812705 	stb	r2,1180(sp)
 8007db0:	dc012745 	stb	r16,1181(sp)
 8007db4:	8c400094 	ori	r17,r17,2
 8007db8:	00800084 	movi	r2,2
 8007dbc:	003eca06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007dc0:	8c400814 	ori	r17,r17,32
 8007dc4:	1805883a 	mov	r2,r3
 8007dc8:	1c000007 	ldb	r16,0(r3)
 8007dcc:	003dbb06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007dd0:	d8c12a15 	stw	r3,1192(sp)
 8007dd4:	88c0080c 	andi	r3,r17,32
 8007dd8:	d8812d17 	ldw	r2,1204(sp)
 8007ddc:	183fba1e 	bne	r3,zero,8007cc8 <__alt_data_end+0xfc007cc8>
 8007de0:	88c0040c 	andi	r3,r17,16
 8007de4:	18024c1e 	bne	r3,zero,8008718 <___vfprintf_internal_r+0x13f8>
 8007de8:	88c0100c 	andi	r3,r17,64
 8007dec:	18024a26 	beq	r3,zero,8008718 <___vfprintf_internal_r+0x13f8>
 8007df0:	dac12d17 	ldw	r11,1204(sp)
 8007df4:	14c0000b 	ldhu	r19,0(r2)
 8007df8:	0039883a 	mov	fp,zero
 8007dfc:	5ac00104 	addi	r11,r11,4
 8007e00:	dac12d15 	stw	r11,1204(sp)
 8007e04:	00800044 	movi	r2,1
 8007e08:	9807883a 	mov	r3,r19
 8007e0c:	003eb606 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007e10:	008200b4 	movhi	r2,2050
 8007e14:	10813e04 	addi	r2,r2,1272
 8007e18:	d8c12a15 	stw	r3,1192(sp)
 8007e1c:	d8813b15 	stw	r2,1260(sp)
 8007e20:	d9812785 	stb	r6,1182(sp)
 8007e24:	88c0080c 	andi	r3,r17,32
 8007e28:	d8812d17 	ldw	r2,1204(sp)
 8007e2c:	183fd51e 	bne	r3,zero,8007d84 <__alt_data_end+0xfc007d84>
 8007e30:	88c0040c 	andi	r3,r17,16
 8007e34:	18034126 	beq	r3,zero,8008b3c <___vfprintf_internal_r+0x181c>
 8007e38:	db012d17 	ldw	r12,1204(sp)
 8007e3c:	14c00017 	ldw	r19,0(r2)
 8007e40:	0039883a 	mov	fp,zero
 8007e44:	63000104 	addi	r12,r12,4
 8007e48:	db012d15 	stw	r12,1204(sp)
 8007e4c:	003fd206 	br	8007d98 <__alt_data_end+0xfc007d98>
 8007e50:	1c000007 	ldb	r16,0(r3)
 8007e54:	81c3d626 	beq	r16,r7,8008db0 <___vfprintf_internal_r+0x1a90>
 8007e58:	8c400414 	ori	r17,r17,16
 8007e5c:	1805883a 	mov	r2,r3
 8007e60:	003d9606 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007e64:	d8c12a15 	stw	r3,1192(sp)
 8007e68:	d9812785 	stb	r6,1182(sp)
 8007e6c:	8880080c 	andi	r2,r17,32
 8007e70:	10033f26 	beq	r2,zero,8008b70 <___vfprintf_internal_r+0x1850>
 8007e74:	db012d17 	ldw	r12,1204(sp)
 8007e78:	dac12f17 	ldw	r11,1212(sp)
 8007e7c:	60800017 	ldw	r2,0(r12)
 8007e80:	5807d7fa 	srai	r3,r11,31
 8007e84:	63000104 	addi	r12,r12,4
 8007e88:	db012d15 	stw	r12,1204(sp)
 8007e8c:	12c00015 	stw	r11,0(r2)
 8007e90:	10c00115 	stw	r3,4(r2)
 8007e94:	003d5f06 	br	8007414 <__alt_data_end+0xfc007414>
 8007e98:	d8c12a15 	stw	r3,1192(sp)
 8007e9c:	88c0080c 	andi	r3,r17,32
 8007ea0:	d8812d17 	ldw	r2,1204(sp)
 8007ea4:	183e891e 	bne	r3,zero,80078cc <__alt_data_end+0xfc0078cc>
 8007ea8:	88c0040c 	andi	r3,r17,16
 8007eac:	1801ea1e 	bne	r3,zero,8008658 <___vfprintf_internal_r+0x1338>
 8007eb0:	88c0100c 	andi	r3,r17,64
 8007eb4:	1801e826 	beq	r3,zero,8008658 <___vfprintf_internal_r+0x1338>
 8007eb8:	db012d17 	ldw	r12,1204(sp)
 8007ebc:	14c0000b 	ldhu	r19,0(r2)
 8007ec0:	0039883a 	mov	fp,zero
 8007ec4:	63000104 	addi	r12,r12,4
 8007ec8:	db012d15 	stw	r12,1204(sp)
 8007ecc:	0005883a 	mov	r2,zero
 8007ed0:	9807883a 	mov	r3,r19
 8007ed4:	003e8406 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007ed8:	30803fcc 	andi	r2,r6,255
 8007edc:	1080201c 	xori	r2,r2,128
 8007ee0:	10bfe004 	addi	r2,r2,-128
 8007ee4:	10031d1e 	bne	r2,zero,8008b5c <___vfprintf_internal_r+0x183c>
 8007ee8:	1805883a 	mov	r2,r3
 8007eec:	01800804 	movi	r6,32
 8007ef0:	1c000007 	ldb	r16,0(r3)
 8007ef4:	003d7106 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007ef8:	8c400054 	ori	r17,r17,1
 8007efc:	1805883a 	mov	r2,r3
 8007f00:	1c000007 	ldb	r16,0(r3)
 8007f04:	003d6d06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007f08:	d8c12a15 	stw	r3,1192(sp)
 8007f0c:	d9812785 	stb	r6,1182(sp)
 8007f10:	8880080c 	andi	r2,r17,32
 8007f14:	d8c12d17 	ldw	r3,1204(sp)
 8007f18:	103f861e 	bne	r2,zero,8007d34 <__alt_data_end+0xfc007d34>
 8007f1c:	8880040c 	andi	r2,r17,16
 8007f20:	1001f31e 	bne	r2,zero,80086f0 <___vfprintf_internal_r+0x13d0>
 8007f24:	8880100c 	andi	r2,r17,64
 8007f28:	1001f126 	beq	r2,zero,80086f0 <___vfprintf_internal_r+0x13d0>
 8007f2c:	1cc0000f 	ldh	r19,0(r3)
 8007f30:	db012d17 	ldw	r12,1204(sp)
 8007f34:	9839d7fa 	srai	fp,r19,31
 8007f38:	63000104 	addi	r12,r12,4
 8007f3c:	db012d15 	stw	r12,1204(sp)
 8007f40:	e005883a 	mov	r2,fp
 8007f44:	003f8106 	br	8007d4c <__alt_data_end+0xfc007d4c>
 8007f48:	8c401014 	ori	r17,r17,64
 8007f4c:	1805883a 	mov	r2,r3
 8007f50:	1c000007 	ldb	r16,0(r3)
 8007f54:	003d5906 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007f58:	db012d17 	ldw	r12,1204(sp)
 8007f5c:	d8c12a15 	stw	r3,1192(sp)
 8007f60:	00c00044 	movi	r3,1
 8007f64:	60800017 	ldw	r2,0(r12)
 8007f68:	63000104 	addi	r12,r12,4
 8007f6c:	d8c12b15 	stw	r3,1196(sp)
 8007f70:	d8012785 	stb	zero,1182(sp)
 8007f74:	d8810405 	stb	r2,1040(sp)
 8007f78:	db012d15 	stw	r12,1204(sp)
 8007f7c:	dac10404 	addi	r11,sp,1040
 8007f80:	1825883a 	mov	r18,r3
 8007f84:	d8013215 	stw	zero,1224(sp)
 8007f88:	d8013415 	stw	zero,1232(sp)
 8007f8c:	dac13115 	stw	r11,1220(sp)
 8007f90:	0005883a 	mov	r2,zero
 8007f94:	003e7d06 	br	800798c <__alt_data_end+0xfc00798c>
 8007f98:	db012d17 	ldw	r12,1204(sp)
 8007f9c:	00800c04 	movi	r2,48
 8007fa0:	d8812705 	stb	r2,1180(sp)
 8007fa4:	64c00017 	ldw	r19,0(r12)
 8007fa8:	00801e04 	movi	r2,120
 8007fac:	d8812745 	stb	r2,1181(sp)
 8007fb0:	008200b4 	movhi	r2,2050
 8007fb4:	10813e04 	addi	r2,r2,1272
 8007fb8:	63000104 	addi	r12,r12,4
 8007fbc:	d8c12a15 	stw	r3,1192(sp)
 8007fc0:	d8813b15 	stw	r2,1260(sp)
 8007fc4:	0039883a 	mov	fp,zero
 8007fc8:	8c400094 	ori	r17,r17,2
 8007fcc:	db012d15 	stw	r12,1204(sp)
 8007fd0:	00800084 	movi	r2,2
 8007fd4:	04001e04 	movi	r16,120
 8007fd8:	9807883a 	mov	r3,r19
 8007fdc:	003e4206 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007fe0:	dac12d17 	ldw	r11,1204(sp)
 8007fe4:	db012d17 	ldw	r12,1204(sp)
 8007fe8:	d8c12a15 	stw	r3,1192(sp)
 8007fec:	5ac00017 	ldw	r11,0(r11)
 8007ff0:	d8012785 	stb	zero,1182(sp)
 8007ff4:	64c00104 	addi	r19,r12,4
 8007ff8:	dac13115 	stw	r11,1220(sp)
 8007ffc:	5803e826 	beq	r11,zero,8008fa0 <___vfprintf_internal_r+0x1c80>
 8008000:	d9013117 	ldw	r4,1220(sp)
 8008004:	48037a16 	blt	r9,zero,8008df0 <___vfprintf_internal_r+0x1ad0>
 8008008:	480d883a 	mov	r6,r9
 800800c:	000b883a 	mov	r5,zero
 8008010:	da013f15 	stw	r8,1276(sp)
 8008014:	da413e15 	stw	r9,1272(sp)
 8008018:	800c0500 	call	800c050 <memchr>
 800801c:	da013f17 	ldw	r8,1276(sp)
 8008020:	da413e17 	ldw	r9,1272(sp)
 8008024:	10044426 	beq	r2,zero,8009138 <___vfprintf_internal_r+0x1e18>
 8008028:	d8c13117 	ldw	r3,1220(sp)
 800802c:	10e5c83a 	sub	r18,r2,r3
 8008030:	4c834416 	blt	r9,r18,8008d44 <___vfprintf_internal_r+0x1a24>
 8008034:	9005883a 	mov	r2,r18
 8008038:	90037216 	blt	r18,zero,8008e04 <___vfprintf_internal_r+0x1ae4>
 800803c:	dd412783 	ldbu	r21,1182(sp)
 8008040:	d8812b15 	stw	r2,1196(sp)
 8008044:	dcc12d15 	stw	r19,1204(sp)
 8008048:	d8013215 	stw	zero,1224(sp)
 800804c:	d8013415 	stw	zero,1232(sp)
 8008050:	003e4706 	br	8007970 <__alt_data_end+0xfc007970>
 8008054:	dac12d17 	ldw	r11,1204(sp)
 8008058:	db012d17 	ldw	r12,1204(sp)
 800805c:	5ac00017 	ldw	r11,0(r11)
 8008060:	dac12e15 	stw	r11,1208(sp)
 8008064:	62c00104 	addi	r11,r12,4
 8008068:	db012e17 	ldw	r12,1208(sp)
 800806c:	60034a16 	blt	r12,zero,8008d98 <___vfprintf_internal_r+0x1a78>
 8008070:	dac12d15 	stw	r11,1204(sp)
 8008074:	1805883a 	mov	r2,r3
 8008078:	1c000007 	ldb	r16,0(r3)
 800807c:	003d0f06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8008080:	1805883a 	mov	r2,r3
 8008084:	01800ac4 	movi	r6,43
 8008088:	1c000007 	ldb	r16,0(r3)
 800808c:	003d0b06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8008090:	d8c12a15 	stw	r3,1192(sp)
 8008094:	d9812785 	stb	r6,1182(sp)
 8008098:	803db226 	beq	r16,zero,8007764 <__alt_data_end+0xfc007764>
 800809c:	00c00044 	movi	r3,1
 80080a0:	d8c12b15 	stw	r3,1196(sp)
 80080a4:	dc010405 	stb	r16,1040(sp)
 80080a8:	d8012785 	stb	zero,1182(sp)
 80080ac:	003fb306 	br	8007f7c <__alt_data_end+0xfc007f7c>
 80080b0:	d8c12017 	ldw	r3,1152(sp)
 80080b4:	003e6d06 	br	8007a6c <__alt_data_end+0xfc007a6c>
 80080b8:	10803fcc 	andi	r2,r2,255
 80080bc:	00c00044 	movi	r3,1
 80080c0:	10fe141e 	bne	r2,r3,8007914 <__alt_data_end+0xfc007914>
 80080c4:	e000021e 	bne	fp,zero,80080d0 <___vfprintf_internal_r+0xdb0>
 80080c8:	00800244 	movi	r2,9
 80080cc:	14c0202e 	bgeu	r2,r19,8008150 <___vfprintf_internal_r+0xe30>
 80080d0:	dc012b15 	stw	r16,1196(sp)
 80080d4:	dc412c15 	stw	r17,1200(sp)
 80080d8:	9821883a 	mov	r16,r19
 80080dc:	e023883a 	mov	r17,fp
 80080e0:	dc810e04 	addi	r18,sp,1080
 80080e4:	4027883a 	mov	r19,r8
 80080e8:	4839883a 	mov	fp,r9
 80080ec:	8009883a 	mov	r4,r16
 80080f0:	880b883a 	mov	r5,r17
 80080f4:	01800284 	movi	r6,10
 80080f8:	000f883a 	mov	r7,zero
 80080fc:	80113940 	call	8011394 <__umoddi3>
 8008100:	10800c04 	addi	r2,r2,48
 8008104:	94bfffc4 	addi	r18,r18,-1
 8008108:	8009883a 	mov	r4,r16
 800810c:	880b883a 	mov	r5,r17
 8008110:	01800284 	movi	r6,10
 8008114:	000f883a 	mov	r7,zero
 8008118:	90800005 	stb	r2,0(r18)
 800811c:	8010dd40 	call	8010dd4 <__udivdi3>
 8008120:	1021883a 	mov	r16,r2
 8008124:	10c4b03a 	or	r2,r2,r3
 8008128:	1823883a 	mov	r17,r3
 800812c:	103fef1e 	bne	r2,zero,80080ec <__alt_data_end+0xfc0080ec>
 8008130:	dac12817 	ldw	r11,1184(sp)
 8008134:	dc813115 	stw	r18,1220(sp)
 8008138:	dc012b17 	ldw	r16,1196(sp)
 800813c:	9811883a 	mov	r8,r19
 8008140:	dc412c17 	ldw	r17,1200(sp)
 8008144:	e013883a 	mov	r9,fp
 8008148:	5ca5c83a 	sub	r18,r11,r18
 800814c:	003e0306 	br	800795c <__alt_data_end+0xfc00795c>
 8008150:	9cc00c04 	addi	r19,r19,48
 8008154:	d8c10dc4 	addi	r3,sp,1079
 8008158:	dcc10dc5 	stb	r19,1079(sp)
 800815c:	dc813c17 	ldw	r18,1264(sp)
 8008160:	d8c13115 	stw	r3,1220(sp)
 8008164:	003dfd06 	br	800795c <__alt_data_end+0xfc00795c>
 8008168:	00801944 	movi	r2,101
 800816c:	1400710e 	bge	r2,r16,8008334 <___vfprintf_internal_r+0x1014>
 8008170:	d9013717 	ldw	r4,1244(sp)
 8008174:	d9413917 	ldw	r5,1252(sp)
 8008178:	000d883a 	mov	r6,zero
 800817c:	000f883a 	mov	r7,zero
 8008180:	d8c13d15 	stw	r3,1268(sp)
 8008184:	da013f15 	stw	r8,1276(sp)
 8008188:	801231c0 	call	801231c <__eqdf2>
 800818c:	d8c13d17 	ldw	r3,1268(sp)
 8008190:	da013f17 	ldw	r8,1276(sp)
 8008194:	1000ef1e 	bne	r2,zero,8008554 <___vfprintf_internal_r+0x1234>
 8008198:	d8811f17 	ldw	r2,1148(sp)
 800819c:	010200b4 	movhi	r4,2050
 80081a0:	21014504 	addi	r4,r4,1300
 80081a4:	18c00044 	addi	r3,r3,1
 80081a8:	10800044 	addi	r2,r2,1
 80081ac:	41000015 	stw	r4,0(r8)
 80081b0:	01000044 	movi	r4,1
 80081b4:	41000115 	stw	r4,4(r8)
 80081b8:	d8c12015 	stw	r3,1152(sp)
 80081bc:	d8811f15 	stw	r2,1148(sp)
 80081c0:	010001c4 	movi	r4,7
 80081c4:	20828e16 	blt	r4,r2,8008c00 <___vfprintf_internal_r+0x18e0>
 80081c8:	42000204 	addi	r8,r8,8
 80081cc:	d8812617 	ldw	r2,1176(sp)
 80081d0:	dac13317 	ldw	r11,1228(sp)
 80081d4:	12c00216 	blt	r2,r11,80081e0 <___vfprintf_internal_r+0xec0>
 80081d8:	8880004c 	andi	r2,r17,1
 80081dc:	103e7726 	beq	r2,zero,8007bbc <__alt_data_end+0xfc007bbc>
 80081e0:	db013817 	ldw	r12,1248(sp)
 80081e4:	d8811f17 	ldw	r2,1148(sp)
 80081e8:	dac13517 	ldw	r11,1236(sp)
 80081ec:	1b07883a 	add	r3,r3,r12
 80081f0:	10800044 	addi	r2,r2,1
 80081f4:	42c00015 	stw	r11,0(r8)
 80081f8:	43000115 	stw	r12,4(r8)
 80081fc:	d8c12015 	stw	r3,1152(sp)
 8008200:	d8811f15 	stw	r2,1148(sp)
 8008204:	010001c4 	movi	r4,7
 8008208:	2082ed16 	blt	r4,r2,8008dc0 <___vfprintf_internal_r+0x1aa0>
 800820c:	42000204 	addi	r8,r8,8
 8008210:	db013317 	ldw	r12,1228(sp)
 8008214:	643fffc4 	addi	r16,r12,-1
 8008218:	043e680e 	bge	zero,r16,8007bbc <__alt_data_end+0xfc007bbc>
 800821c:	04800404 	movi	r18,16
 8008220:	d8811f17 	ldw	r2,1148(sp)
 8008224:	94007e0e 	bge	r18,r16,8008420 <___vfprintf_internal_r+0x1100>
 8008228:	014200b4 	movhi	r5,2050
 800822c:	29414d84 	addi	r5,r5,1334
 8008230:	d9412c15 	stw	r5,1200(sp)
 8008234:	054001c4 	movi	r21,7
 8008238:	00000306 	br	8008248 <___vfprintf_internal_r+0xf28>
 800823c:	42000204 	addi	r8,r8,8
 8008240:	843ffc04 	addi	r16,r16,-16
 8008244:	9400790e 	bge	r18,r16,800842c <___vfprintf_internal_r+0x110c>
 8008248:	18c00404 	addi	r3,r3,16
 800824c:	10800044 	addi	r2,r2,1
 8008250:	45000015 	stw	r20,0(r8)
 8008254:	44800115 	stw	r18,4(r8)
 8008258:	d8c12015 	stw	r3,1152(sp)
 800825c:	d8811f15 	stw	r2,1148(sp)
 8008260:	a8bff60e 	bge	r21,r2,800823c <__alt_data_end+0xfc00823c>
 8008264:	b009883a 	mov	r4,r22
 8008268:	b80b883a 	mov	r5,r23
 800826c:	d9811e04 	addi	r6,sp,1144
 8008270:	800f1040 	call	800f104 <__sprint_r>
 8008274:	103d411e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008278:	d8c12017 	ldw	r3,1152(sp)
 800827c:	d8811f17 	ldw	r2,1148(sp)
 8008280:	da000404 	addi	r8,sp,16
 8008284:	003fee06 	br	8008240 <__alt_data_end+0xfc008240>
 8008288:	dac12e17 	ldw	r11,1208(sp)
 800828c:	db012b17 	ldw	r12,1196(sp)
 8008290:	5b2bc83a 	sub	r21,r11,r12
 8008294:	057e130e 	bge	zero,r21,8007ae4 <__alt_data_end+0xfc007ae4>
 8008298:	07000404 	movi	fp,16
 800829c:	d8811f17 	ldw	r2,1148(sp)
 80082a0:	e543640e 	bge	fp,r21,8009034 <___vfprintf_internal_r+0x1d14>
 80082a4:	014200b4 	movhi	r5,2050
 80082a8:	29414d84 	addi	r5,r5,1334
 80082ac:	d9412c15 	stw	r5,1200(sp)
 80082b0:	04c001c4 	movi	r19,7
 80082b4:	00000306 	br	80082c4 <___vfprintf_internal_r+0xfa4>
 80082b8:	ad7ffc04 	addi	r21,r21,-16
 80082bc:	42000204 	addi	r8,r8,8
 80082c0:	e540110e 	bge	fp,r21,8008308 <___vfprintf_internal_r+0xfe8>
 80082c4:	18c00404 	addi	r3,r3,16
 80082c8:	10800044 	addi	r2,r2,1
 80082cc:	45000015 	stw	r20,0(r8)
 80082d0:	47000115 	stw	fp,4(r8)
 80082d4:	d8c12015 	stw	r3,1152(sp)
 80082d8:	d8811f15 	stw	r2,1148(sp)
 80082dc:	98bff60e 	bge	r19,r2,80082b8 <__alt_data_end+0xfc0082b8>
 80082e0:	b009883a 	mov	r4,r22
 80082e4:	b80b883a 	mov	r5,r23
 80082e8:	d9811e04 	addi	r6,sp,1144
 80082ec:	800f1040 	call	800f104 <__sprint_r>
 80082f0:	103d221e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 80082f4:	ad7ffc04 	addi	r21,r21,-16
 80082f8:	d8c12017 	ldw	r3,1152(sp)
 80082fc:	d8811f17 	ldw	r2,1148(sp)
 8008300:	da000404 	addi	r8,sp,16
 8008304:	e57fef16 	blt	fp,r21,80082c4 <__alt_data_end+0xfc0082c4>
 8008308:	dac12c17 	ldw	r11,1200(sp)
 800830c:	1d47883a 	add	r3,r3,r21
 8008310:	10800044 	addi	r2,r2,1
 8008314:	42c00015 	stw	r11,0(r8)
 8008318:	45400115 	stw	r21,4(r8)
 800831c:	d8c12015 	stw	r3,1152(sp)
 8008320:	d8811f15 	stw	r2,1148(sp)
 8008324:	010001c4 	movi	r4,7
 8008328:	20819116 	blt	r4,r2,8008970 <___vfprintf_internal_r+0x1650>
 800832c:	42000204 	addi	r8,r8,8
 8008330:	003dec06 	br	8007ae4 <__alt_data_end+0xfc007ae4>
 8008334:	db013317 	ldw	r12,1228(sp)
 8008338:	00800044 	movi	r2,1
 800833c:	18c00044 	addi	r3,r3,1
 8008340:	1301530e 	bge	r2,r12,8008890 <___vfprintf_internal_r+0x1570>
 8008344:	dc011f17 	ldw	r16,1148(sp)
 8008348:	dac13117 	ldw	r11,1220(sp)
 800834c:	00800044 	movi	r2,1
 8008350:	84000044 	addi	r16,r16,1
 8008354:	40800115 	stw	r2,4(r8)
 8008358:	42c00015 	stw	r11,0(r8)
 800835c:	d8c12015 	stw	r3,1152(sp)
 8008360:	dc011f15 	stw	r16,1148(sp)
 8008364:	008001c4 	movi	r2,7
 8008368:	14016b16 	blt	r2,r16,8008918 <___vfprintf_internal_r+0x15f8>
 800836c:	42000204 	addi	r8,r8,8
 8008370:	db013817 	ldw	r12,1248(sp)
 8008374:	dac13517 	ldw	r11,1236(sp)
 8008378:	84000044 	addi	r16,r16,1
 800837c:	1b07883a 	add	r3,r3,r12
 8008380:	42c00015 	stw	r11,0(r8)
 8008384:	43000115 	stw	r12,4(r8)
 8008388:	d8c12015 	stw	r3,1152(sp)
 800838c:	dc011f15 	stw	r16,1148(sp)
 8008390:	008001c4 	movi	r2,7
 8008394:	14016916 	blt	r2,r16,800893c <___vfprintf_internal_r+0x161c>
 8008398:	44800204 	addi	r18,r8,8
 800839c:	d9013717 	ldw	r4,1244(sp)
 80083a0:	d9413917 	ldw	r5,1252(sp)
 80083a4:	000d883a 	mov	r6,zero
 80083a8:	000f883a 	mov	r7,zero
 80083ac:	d8c13d15 	stw	r3,1268(sp)
 80083b0:	801231c0 	call	801231c <__eqdf2>
 80083b4:	d8c13d17 	ldw	r3,1268(sp)
 80083b8:	db013317 	ldw	r12,1228(sp)
 80083bc:	1000ae26 	beq	r2,zero,8008678 <___vfprintf_internal_r+0x1358>
 80083c0:	dac13117 	ldw	r11,1220(sp)
 80083c4:	60bfffc4 	addi	r2,r12,-1
 80083c8:	1887883a 	add	r3,r3,r2
 80083cc:	59000044 	addi	r4,r11,1
 80083d0:	84000044 	addi	r16,r16,1
 80083d4:	90800115 	stw	r2,4(r18)
 80083d8:	91000015 	stw	r4,0(r18)
 80083dc:	d8c12015 	stw	r3,1152(sp)
 80083e0:	dc011f15 	stw	r16,1148(sp)
 80083e4:	008001c4 	movi	r2,7
 80083e8:	14014216 	blt	r2,r16,80088f4 <___vfprintf_internal_r+0x15d4>
 80083ec:	94800204 	addi	r18,r18,8
 80083f0:	dac13a17 	ldw	r11,1256(sp)
 80083f4:	dd4122c4 	addi	r21,sp,1163
 80083f8:	84000044 	addi	r16,r16,1
 80083fc:	58c7883a 	add	r3,r11,r3
 8008400:	95400015 	stw	r21,0(r18)
 8008404:	92c00115 	stw	r11,4(r18)
 8008408:	d8c12015 	stw	r3,1152(sp)
 800840c:	dc011f15 	stw	r16,1148(sp)
 8008410:	008001c4 	movi	r2,7
 8008414:	14000e16 	blt	r2,r16,8008450 <___vfprintf_internal_r+0x1130>
 8008418:	92000204 	addi	r8,r18,8
 800841c:	003de706 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8008420:	010200b4 	movhi	r4,2050
 8008424:	21014d84 	addi	r4,r4,1334
 8008428:	d9012c15 	stw	r4,1200(sp)
 800842c:	dac12c17 	ldw	r11,1200(sp)
 8008430:	1c07883a 	add	r3,r3,r16
 8008434:	44000115 	stw	r16,4(r8)
 8008438:	42c00015 	stw	r11,0(r8)
 800843c:	10800044 	addi	r2,r2,1
 8008440:	d8c12015 	stw	r3,1152(sp)
 8008444:	d8811f15 	stw	r2,1148(sp)
 8008448:	010001c4 	movi	r4,7
 800844c:	20bdda0e 	bge	r4,r2,8007bb8 <__alt_data_end+0xfc007bb8>
 8008450:	b009883a 	mov	r4,r22
 8008454:	b80b883a 	mov	r5,r23
 8008458:	d9811e04 	addi	r6,sp,1144
 800845c:	800f1040 	call	800f104 <__sprint_r>
 8008460:	103cc61e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008464:	d8c12017 	ldw	r3,1152(sp)
 8008468:	da000404 	addi	r8,sp,16
 800846c:	003dd306 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8008470:	b009883a 	mov	r4,r22
 8008474:	b80b883a 	mov	r5,r23
 8008478:	d9811e04 	addi	r6,sp,1144
 800847c:	800f1040 	call	800f104 <__sprint_r>
 8008480:	103e0926 	beq	r2,zero,8007ca8 <__alt_data_end+0xfc007ca8>
 8008484:	003cbd06 	br	800777c <__alt_data_end+0xfc00777c>
 8008488:	10803fcc 	andi	r2,r2,255
 800848c:	1000651e 	bne	r2,zero,8008624 <___vfprintf_internal_r+0x1304>
 8008490:	8880004c 	andi	r2,r17,1
 8008494:	10013226 	beq	r2,zero,8008960 <___vfprintf_internal_r+0x1640>
 8008498:	00800c04 	movi	r2,48
 800849c:	d8c10dc4 	addi	r3,sp,1079
 80084a0:	d8810dc5 	stb	r2,1079(sp)
 80084a4:	dc813c17 	ldw	r18,1264(sp)
 80084a8:	d8c13115 	stw	r3,1220(sp)
 80084ac:	003d2b06 	br	800795c <__alt_data_end+0xfc00795c>
 80084b0:	b009883a 	mov	r4,r22
 80084b4:	b80b883a 	mov	r5,r23
 80084b8:	d9811e04 	addi	r6,sp,1144
 80084bc:	800f1040 	call	800f104 <__sprint_r>
 80084c0:	103cae1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 80084c4:	d8c12017 	ldw	r3,1152(sp)
 80084c8:	da000404 	addi	r8,sp,16
 80084cc:	003dae06 	br	8007b88 <__alt_data_end+0xfc007b88>
 80084d0:	b009883a 	mov	r4,r22
 80084d4:	b80b883a 	mov	r5,r23
 80084d8:	d9811e04 	addi	r6,sp,1144
 80084dc:	800f1040 	call	800f104 <__sprint_r>
 80084e0:	103ca61e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 80084e4:	d8c12017 	ldw	r3,1152(sp)
 80084e8:	da000404 	addi	r8,sp,16
 80084ec:	003d6c06 	br	8007aa0 <__alt_data_end+0xfc007aa0>
 80084f0:	b009883a 	mov	r4,r22
 80084f4:	b80b883a 	mov	r5,r23
 80084f8:	d9811e04 	addi	r6,sp,1144
 80084fc:	800f1040 	call	800f104 <__sprint_r>
 8008500:	103c9e1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008504:	d8c12017 	ldw	r3,1152(sp)
 8008508:	da000404 	addi	r8,sp,16
 800850c:	003d7206 	br	8007ad8 <__alt_data_end+0xfc007ad8>
 8008510:	d9413b17 	ldw	r5,1260(sp)
 8008514:	d8c10e04 	addi	r3,sp,1080
 8008518:	988003cc 	andi	r2,r19,15
 800851c:	e008973a 	slli	r4,fp,28
 8008520:	2885883a 	add	r2,r5,r2
 8008524:	9826d13a 	srli	r19,r19,4
 8008528:	10800003 	ldbu	r2,0(r2)
 800852c:	e038d13a 	srli	fp,fp,4
 8008530:	18ffffc4 	addi	r3,r3,-1
 8008534:	24e6b03a 	or	r19,r4,r19
 8008538:	18800005 	stb	r2,0(r3)
 800853c:	9f04b03a 	or	r2,r19,fp
 8008540:	103ff51e 	bne	r2,zero,8008518 <__alt_data_end+0xfc008518>
 8008544:	db012817 	ldw	r12,1184(sp)
 8008548:	d8c13115 	stw	r3,1220(sp)
 800854c:	60e5c83a 	sub	r18,r12,r3
 8008550:	003d0206 	br	800795c <__alt_data_end+0xfc00795c>
 8008554:	dc012617 	ldw	r16,1176(sp)
 8008558:	0401b10e 	bge	zero,r16,8008c20 <___vfprintf_internal_r+0x1900>
 800855c:	db013117 	ldw	r12,1220(sp)
 8008560:	dac13317 	ldw	r11,1228(sp)
 8008564:	62e1883a 	add	r16,r12,r11
 8008568:	db013417 	ldw	r12,1232(sp)
 800856c:	5825883a 	mov	r18,r11
 8008570:	62c0010e 	bge	r12,r11,8008578 <___vfprintf_internal_r+0x1258>
 8008574:	6025883a 	mov	r18,r12
 8008578:	04800b0e 	bge	zero,r18,80085a8 <___vfprintf_internal_r+0x1288>
 800857c:	d8811f17 	ldw	r2,1148(sp)
 8008580:	dac13117 	ldw	r11,1220(sp)
 8008584:	1c87883a 	add	r3,r3,r18
 8008588:	10800044 	addi	r2,r2,1
 800858c:	42c00015 	stw	r11,0(r8)
 8008590:	44800115 	stw	r18,4(r8)
 8008594:	d8c12015 	stw	r3,1152(sp)
 8008598:	d8811f15 	stw	r2,1148(sp)
 800859c:	010001c4 	movi	r4,7
 80085a0:	20824f16 	blt	r4,r2,8008ee0 <___vfprintf_internal_r+0x1bc0>
 80085a4:	42000204 	addi	r8,r8,8
 80085a8:	90024b16 	blt	r18,zero,8008ed8 <___vfprintf_internal_r+0x1bb8>
 80085ac:	db013417 	ldw	r12,1232(sp)
 80085b0:	64a5c83a 	sub	r18,r12,r18
 80085b4:	0480730e 	bge	zero,r18,8008784 <___vfprintf_internal_r+0x1464>
 80085b8:	05400404 	movi	r21,16
 80085bc:	d8811f17 	ldw	r2,1148(sp)
 80085c0:	ac817d0e 	bge	r21,r18,8008bb8 <___vfprintf_internal_r+0x1898>
 80085c4:	014200b4 	movhi	r5,2050
 80085c8:	29414d84 	addi	r5,r5,1334
 80085cc:	d9412c15 	stw	r5,1200(sp)
 80085d0:	070001c4 	movi	fp,7
 80085d4:	00000306 	br	80085e4 <___vfprintf_internal_r+0x12c4>
 80085d8:	42000204 	addi	r8,r8,8
 80085dc:	94bffc04 	addi	r18,r18,-16
 80085e0:	ac81780e 	bge	r21,r18,8008bc4 <___vfprintf_internal_r+0x18a4>
 80085e4:	18c00404 	addi	r3,r3,16
 80085e8:	10800044 	addi	r2,r2,1
 80085ec:	45000015 	stw	r20,0(r8)
 80085f0:	45400115 	stw	r21,4(r8)
 80085f4:	d8c12015 	stw	r3,1152(sp)
 80085f8:	d8811f15 	stw	r2,1148(sp)
 80085fc:	e0bff60e 	bge	fp,r2,80085d8 <__alt_data_end+0xfc0085d8>
 8008600:	b009883a 	mov	r4,r22
 8008604:	b80b883a 	mov	r5,r23
 8008608:	d9811e04 	addi	r6,sp,1144
 800860c:	800f1040 	call	800f104 <__sprint_r>
 8008610:	103c5a1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008614:	d8c12017 	ldw	r3,1152(sp)
 8008618:	d8811f17 	ldw	r2,1148(sp)
 800861c:	da000404 	addi	r8,sp,16
 8008620:	003fee06 	br	80085dc <__alt_data_end+0xfc0085dc>
 8008624:	dac10e04 	addi	r11,sp,1080
 8008628:	0025883a 	mov	r18,zero
 800862c:	dac13115 	stw	r11,1220(sp)
 8008630:	003cca06 	br	800795c <__alt_data_end+0xfc00795c>
 8008634:	b009883a 	mov	r4,r22
 8008638:	b80b883a 	mov	r5,r23
 800863c:	d9811e04 	addi	r6,sp,1144
 8008640:	800f1040 	call	800f104 <__sprint_r>
 8008644:	103c4d1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008648:	d8c12017 	ldw	r3,1152(sp)
 800864c:	d8812787 	ldb	r2,1182(sp)
 8008650:	da000404 	addi	r8,sp,16
 8008654:	003d0506 	br	8007a6c <__alt_data_end+0xfc007a6c>
 8008658:	dac12d17 	ldw	r11,1204(sp)
 800865c:	14c00017 	ldw	r19,0(r2)
 8008660:	0039883a 	mov	fp,zero
 8008664:	5ac00104 	addi	r11,r11,4
 8008668:	dac12d15 	stw	r11,1204(sp)
 800866c:	0005883a 	mov	r2,zero
 8008670:	9807883a 	mov	r3,r19
 8008674:	003c9c06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008678:	657fffc4 	addi	r21,r12,-1
 800867c:	057f5c0e 	bge	zero,r21,80083f0 <__alt_data_end+0xfc0083f0>
 8008680:	07000404 	movi	fp,16
 8008684:	e5408f0e 	bge	fp,r21,80088c4 <___vfprintf_internal_r+0x15a4>
 8008688:	010200b4 	movhi	r4,2050
 800868c:	21014d84 	addi	r4,r4,1334
 8008690:	d9012c15 	stw	r4,1200(sp)
 8008694:	01c001c4 	movi	r7,7
 8008698:	00000306 	br	80086a8 <___vfprintf_internal_r+0x1388>
 800869c:	94800204 	addi	r18,r18,8
 80086a0:	ad7ffc04 	addi	r21,r21,-16
 80086a4:	e5408a0e 	bge	fp,r21,80088d0 <___vfprintf_internal_r+0x15b0>
 80086a8:	18c00404 	addi	r3,r3,16
 80086ac:	84000044 	addi	r16,r16,1
 80086b0:	95000015 	stw	r20,0(r18)
 80086b4:	97000115 	stw	fp,4(r18)
 80086b8:	d8c12015 	stw	r3,1152(sp)
 80086bc:	dc011f15 	stw	r16,1148(sp)
 80086c0:	3c3ff60e 	bge	r7,r16,800869c <__alt_data_end+0xfc00869c>
 80086c4:	b009883a 	mov	r4,r22
 80086c8:	b80b883a 	mov	r5,r23
 80086cc:	d9811e04 	addi	r6,sp,1144
 80086d0:	d9c13d15 	stw	r7,1268(sp)
 80086d4:	800f1040 	call	800f104 <__sprint_r>
 80086d8:	d9c13d17 	ldw	r7,1268(sp)
 80086dc:	103c271e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 80086e0:	d8c12017 	ldw	r3,1152(sp)
 80086e4:	dc011f17 	ldw	r16,1148(sp)
 80086e8:	dc800404 	addi	r18,sp,16
 80086ec:	003fec06 	br	80086a0 <__alt_data_end+0xfc0086a0>
 80086f0:	1cc00017 	ldw	r19,0(r3)
 80086f4:	dac12d17 	ldw	r11,1204(sp)
 80086f8:	9839d7fa 	srai	fp,r19,31
 80086fc:	5ac00104 	addi	r11,r11,4
 8008700:	dac12d15 	stw	r11,1204(sp)
 8008704:	e005883a 	mov	r2,fp
 8008708:	003d9006 	br	8007d4c <__alt_data_end+0xfc007d4c>
 800870c:	00800084 	movi	r2,2
 8008710:	9f06b03a 	or	r3,r19,fp
 8008714:	003c7406 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008718:	db012d17 	ldw	r12,1204(sp)
 800871c:	14c00017 	ldw	r19,0(r2)
 8008720:	0039883a 	mov	fp,zero
 8008724:	63000104 	addi	r12,r12,4
 8008728:	db012d15 	stw	r12,1204(sp)
 800872c:	00800044 	movi	r2,1
 8008730:	9807883a 	mov	r3,r19
 8008734:	003c6c06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008738:	10803fcc 	andi	r2,r2,255
 800873c:	1080201c 	xori	r2,r2,128
 8008740:	10bfe004 	addi	r2,r2,-128
 8008744:	01000c04 	movi	r4,48
 8008748:	1101a526 	beq	r2,r4,8008de0 <___vfprintf_internal_r+0x1ac0>
 800874c:	dac13117 	ldw	r11,1220(sp)
 8008750:	db012817 	ldw	r12,1184(sp)
 8008754:	193fffc5 	stb	r4,-1(r3)
 8008758:	5affffc4 	addi	r11,r11,-1
 800875c:	dac13115 	stw	r11,1220(sp)
 8008760:	62e5c83a 	sub	r18,r12,r11
 8008764:	003c7d06 	br	800795c <__alt_data_end+0xfc00795c>
 8008768:	b009883a 	mov	r4,r22
 800876c:	b80b883a 	mov	r5,r23
 8008770:	d9811e04 	addi	r6,sp,1144
 8008774:	800f1040 	call	800f104 <__sprint_r>
 8008778:	103c001e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 800877c:	d8c12017 	ldw	r3,1152(sp)
 8008780:	da000404 	addi	r8,sp,16
 8008784:	db013117 	ldw	r12,1220(sp)
 8008788:	dac13417 	ldw	r11,1232(sp)
 800878c:	d8812617 	ldw	r2,1176(sp)
 8008790:	62e5883a 	add	r18,r12,r11
 8008794:	db013317 	ldw	r12,1228(sp)
 8008798:	13000216 	blt	r2,r12,80087a4 <___vfprintf_internal_r+0x1484>
 800879c:	8900004c 	andi	r4,r17,1
 80087a0:	20000c26 	beq	r4,zero,80087d4 <___vfprintf_internal_r+0x14b4>
 80087a4:	dac13817 	ldw	r11,1248(sp)
 80087a8:	d9011f17 	ldw	r4,1148(sp)
 80087ac:	db013517 	ldw	r12,1236(sp)
 80087b0:	1ac7883a 	add	r3,r3,r11
 80087b4:	21000044 	addi	r4,r4,1
 80087b8:	43000015 	stw	r12,0(r8)
 80087bc:	42c00115 	stw	r11,4(r8)
 80087c0:	d8c12015 	stw	r3,1152(sp)
 80087c4:	d9011f15 	stw	r4,1148(sp)
 80087c8:	014001c4 	movi	r5,7
 80087cc:	2901cc16 	blt	r5,r4,8008f00 <___vfprintf_internal_r+0x1be0>
 80087d0:	42000204 	addi	r8,r8,8
 80087d4:	dac13317 	ldw	r11,1228(sp)
 80087d8:	8489c83a 	sub	r4,r16,r18
 80087dc:	5885c83a 	sub	r2,r11,r2
 80087e0:	1021883a 	mov	r16,r2
 80087e4:	2080010e 	bge	r4,r2,80087ec <___vfprintf_internal_r+0x14cc>
 80087e8:	2021883a 	mov	r16,r4
 80087ec:	04000a0e 	bge	zero,r16,8008818 <___vfprintf_internal_r+0x14f8>
 80087f0:	d9011f17 	ldw	r4,1148(sp)
 80087f4:	1c07883a 	add	r3,r3,r16
 80087f8:	44800015 	stw	r18,0(r8)
 80087fc:	21000044 	addi	r4,r4,1
 8008800:	44000115 	stw	r16,4(r8)
 8008804:	d8c12015 	stw	r3,1152(sp)
 8008808:	d9011f15 	stw	r4,1148(sp)
 800880c:	014001c4 	movi	r5,7
 8008810:	2901d616 	blt	r5,r4,8008f6c <___vfprintf_internal_r+0x1c4c>
 8008814:	42000204 	addi	r8,r8,8
 8008818:	8001df16 	blt	r16,zero,8008f98 <___vfprintf_internal_r+0x1c78>
 800881c:	1421c83a 	sub	r16,r2,r16
 8008820:	043ce60e 	bge	zero,r16,8007bbc <__alt_data_end+0xfc007bbc>
 8008824:	04800404 	movi	r18,16
 8008828:	d8811f17 	ldw	r2,1148(sp)
 800882c:	943efc0e 	bge	r18,r16,8008420 <__alt_data_end+0xfc008420>
 8008830:	014200b4 	movhi	r5,2050
 8008834:	29414d84 	addi	r5,r5,1334
 8008838:	d9412c15 	stw	r5,1200(sp)
 800883c:	054001c4 	movi	r21,7
 8008840:	00000306 	br	8008850 <___vfprintf_internal_r+0x1530>
 8008844:	42000204 	addi	r8,r8,8
 8008848:	843ffc04 	addi	r16,r16,-16
 800884c:	943ef70e 	bge	r18,r16,800842c <__alt_data_end+0xfc00842c>
 8008850:	18c00404 	addi	r3,r3,16
 8008854:	10800044 	addi	r2,r2,1
 8008858:	45000015 	stw	r20,0(r8)
 800885c:	44800115 	stw	r18,4(r8)
 8008860:	d8c12015 	stw	r3,1152(sp)
 8008864:	d8811f15 	stw	r2,1148(sp)
 8008868:	a8bff60e 	bge	r21,r2,8008844 <__alt_data_end+0xfc008844>
 800886c:	b009883a 	mov	r4,r22
 8008870:	b80b883a 	mov	r5,r23
 8008874:	d9811e04 	addi	r6,sp,1144
 8008878:	800f1040 	call	800f104 <__sprint_r>
 800887c:	103bbf1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008880:	d8c12017 	ldw	r3,1152(sp)
 8008884:	d8811f17 	ldw	r2,1148(sp)
 8008888:	da000404 	addi	r8,sp,16
 800888c:	003fee06 	br	8008848 <__alt_data_end+0xfc008848>
 8008890:	8888703a 	and	r4,r17,r2
 8008894:	203eab1e 	bne	r4,zero,8008344 <__alt_data_end+0xfc008344>
 8008898:	dc011f17 	ldw	r16,1148(sp)
 800889c:	db013117 	ldw	r12,1220(sp)
 80088a0:	40800115 	stw	r2,4(r8)
 80088a4:	84000044 	addi	r16,r16,1
 80088a8:	43000015 	stw	r12,0(r8)
 80088ac:	d8c12015 	stw	r3,1152(sp)
 80088b0:	dc011f15 	stw	r16,1148(sp)
 80088b4:	008001c4 	movi	r2,7
 80088b8:	14000e16 	blt	r2,r16,80088f4 <___vfprintf_internal_r+0x15d4>
 80088bc:	44800204 	addi	r18,r8,8
 80088c0:	003ecb06 	br	80083f0 <__alt_data_end+0xfc0083f0>
 80088c4:	008200b4 	movhi	r2,2050
 80088c8:	10814d84 	addi	r2,r2,1334
 80088cc:	d8812c15 	stw	r2,1200(sp)
 80088d0:	dac12c17 	ldw	r11,1200(sp)
 80088d4:	1d47883a 	add	r3,r3,r21
 80088d8:	84000044 	addi	r16,r16,1
 80088dc:	92c00015 	stw	r11,0(r18)
 80088e0:	95400115 	stw	r21,4(r18)
 80088e4:	d8c12015 	stw	r3,1152(sp)
 80088e8:	dc011f15 	stw	r16,1148(sp)
 80088ec:	008001c4 	movi	r2,7
 80088f0:	143ebe0e 	bge	r2,r16,80083ec <__alt_data_end+0xfc0083ec>
 80088f4:	b009883a 	mov	r4,r22
 80088f8:	b80b883a 	mov	r5,r23
 80088fc:	d9811e04 	addi	r6,sp,1144
 8008900:	800f1040 	call	800f104 <__sprint_r>
 8008904:	103b9d1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008908:	d8c12017 	ldw	r3,1152(sp)
 800890c:	dc011f17 	ldw	r16,1148(sp)
 8008910:	dc800404 	addi	r18,sp,16
 8008914:	003eb606 	br	80083f0 <__alt_data_end+0xfc0083f0>
 8008918:	b009883a 	mov	r4,r22
 800891c:	b80b883a 	mov	r5,r23
 8008920:	d9811e04 	addi	r6,sp,1144
 8008924:	800f1040 	call	800f104 <__sprint_r>
 8008928:	103b941e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 800892c:	d8c12017 	ldw	r3,1152(sp)
 8008930:	dc011f17 	ldw	r16,1148(sp)
 8008934:	da000404 	addi	r8,sp,16
 8008938:	003e8d06 	br	8008370 <__alt_data_end+0xfc008370>
 800893c:	b009883a 	mov	r4,r22
 8008940:	b80b883a 	mov	r5,r23
 8008944:	d9811e04 	addi	r6,sp,1144
 8008948:	800f1040 	call	800f104 <__sprint_r>
 800894c:	103b8b1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008950:	d8c12017 	ldw	r3,1152(sp)
 8008954:	dc011f17 	ldw	r16,1148(sp)
 8008958:	dc800404 	addi	r18,sp,16
 800895c:	003e8f06 	br	800839c <__alt_data_end+0xfc00839c>
 8008960:	db010e04 	addi	r12,sp,1080
 8008964:	0025883a 	mov	r18,zero
 8008968:	db013115 	stw	r12,1220(sp)
 800896c:	003bfb06 	br	800795c <__alt_data_end+0xfc00795c>
 8008970:	b009883a 	mov	r4,r22
 8008974:	b80b883a 	mov	r5,r23
 8008978:	d9811e04 	addi	r6,sp,1144
 800897c:	800f1040 	call	800f104 <__sprint_r>
 8008980:	103b7e1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008984:	d8c12017 	ldw	r3,1152(sp)
 8008988:	da000404 	addi	r8,sp,16
 800898c:	003c5506 	br	8007ae4 <__alt_data_end+0xfc007ae4>
 8008990:	04e7c83a 	sub	r19,zero,r19
 8008994:	9804c03a 	cmpne	r2,r19,zero
 8008998:	0739c83a 	sub	fp,zero,fp
 800899c:	e0b9c83a 	sub	fp,fp,r2
 80089a0:	05400b44 	movi	r21,45
 80089a4:	dd412785 	stb	r21,1182(sp)
 80089a8:	da413215 	stw	r9,1224(sp)
 80089ac:	00800044 	movi	r2,1
 80089b0:	9f06b03a 	or	r3,r19,fp
 80089b4:	003bcf06 	br	80078f4 <__alt_data_end+0xfc0078f4>
 80089b8:	da013f15 	stw	r8,1276(sp)
 80089bc:	da413e15 	stw	r9,1272(sp)
 80089c0:	800db840 	call	800db84 <__fpclassifyd>
 80089c4:	da013f17 	ldw	r8,1276(sp)
 80089c8:	da413e17 	ldw	r9,1272(sp)
 80089cc:	1000ce26 	beq	r2,zero,8008d08 <___vfprintf_internal_r+0x19e8>
 80089d0:	057ff7c4 	movi	r21,-33
 80089d4:	00bfffc4 	movi	r2,-1
 80089d8:	856a703a 	and	r21,r16,r21
 80089dc:	4881f026 	beq	r9,r2,80091a0 <___vfprintf_internal_r+0x1e80>
 80089e0:	008011c4 	movi	r2,71
 80089e4:	a881e526 	beq	r21,r2,800917c <___vfprintf_internal_r+0x1e5c>
 80089e8:	db013917 	ldw	r12,1252(sp)
 80089ec:	8ac04014 	ori	r11,r17,256
 80089f0:	dac12d15 	stw	r11,1204(sp)
 80089f4:	6001e416 	blt	r12,zero,8009188 <___vfprintf_internal_r+0x1e68>
 80089f8:	dc813917 	ldw	r18,1252(sp)
 80089fc:	d8012b05 	stb	zero,1196(sp)
 8008a00:	00801984 	movi	r2,102
 8008a04:	80811826 	beq	r16,r2,8008e68 <___vfprintf_internal_r+0x1b48>
 8008a08:	00801184 	movi	r2,70
 8008a0c:	80811626 	beq	r16,r2,8008e68 <___vfprintf_internal_r+0x1b48>
 8008a10:	00801144 	movi	r2,69
 8008a14:	a881e026 	beq	r21,r2,8009198 <___vfprintf_internal_r+0x1e78>
 8008a18:	4839883a 	mov	fp,r9
 8008a1c:	d8812604 	addi	r2,sp,1176
 8008a20:	d8800115 	stw	r2,4(sp)
 8008a24:	d9413717 	ldw	r5,1244(sp)
 8008a28:	d8812504 	addi	r2,sp,1172
 8008a2c:	d8800215 	stw	r2,8(sp)
 8008a30:	d8812104 	addi	r2,sp,1156
 8008a34:	df000015 	stw	fp,0(sp)
 8008a38:	d8800315 	stw	r2,12(sp)
 8008a3c:	b009883a 	mov	r4,r22
 8008a40:	900d883a 	mov	r6,r18
 8008a44:	01c00084 	movi	r7,2
 8008a48:	da013f15 	stw	r8,1276(sp)
 8008a4c:	da413e15 	stw	r9,1272(sp)
 8008a50:	80096700 	call	8009670 <_dtoa_r>
 8008a54:	d8813115 	stw	r2,1220(sp)
 8008a58:	008019c4 	movi	r2,103
 8008a5c:	da013f17 	ldw	r8,1276(sp)
 8008a60:	da413e17 	ldw	r9,1272(sp)
 8008a64:	80800226 	beq	r16,r2,8008a70 <___vfprintf_internal_r+0x1750>
 8008a68:	008011c4 	movi	r2,71
 8008a6c:	8081101e 	bne	r16,r2,8008eb0 <___vfprintf_internal_r+0x1b90>
 8008a70:	8880004c 	andi	r2,r17,1
 8008a74:	1001df26 	beq	r2,zero,80091f4 <___vfprintf_internal_r+0x1ed4>
 8008a78:	db013117 	ldw	r12,1220(sp)
 8008a7c:	6715883a 	add	r10,r12,fp
 8008a80:	d9013717 	ldw	r4,1244(sp)
 8008a84:	900b883a 	mov	r5,r18
 8008a88:	000d883a 	mov	r6,zero
 8008a8c:	000f883a 	mov	r7,zero
 8008a90:	da013f15 	stw	r8,1276(sp)
 8008a94:	da413e15 	stw	r9,1272(sp)
 8008a98:	da813d15 	stw	r10,1268(sp)
 8008a9c:	801231c0 	call	801231c <__eqdf2>
 8008aa0:	da013f17 	ldw	r8,1276(sp)
 8008aa4:	da413e17 	ldw	r9,1272(sp)
 8008aa8:	da813d17 	ldw	r10,1268(sp)
 8008aac:	10016526 	beq	r2,zero,8009044 <___vfprintf_internal_r+0x1d24>
 8008ab0:	d8812117 	ldw	r2,1156(sp)
 8008ab4:	1280062e 	bgeu	r2,r10,8008ad0 <___vfprintf_internal_r+0x17b0>
 8008ab8:	01000c04 	movi	r4,48
 8008abc:	10c00044 	addi	r3,r2,1
 8008ac0:	d8c12115 	stw	r3,1156(sp)
 8008ac4:	11000005 	stb	r4,0(r2)
 8008ac8:	d8812117 	ldw	r2,1156(sp)
 8008acc:	12bffb36 	bltu	r2,r10,8008abc <__alt_data_end+0xfc008abc>
 8008ad0:	db013117 	ldw	r12,1220(sp)
 8008ad4:	1305c83a 	sub	r2,r2,r12
 8008ad8:	d8813315 	stw	r2,1228(sp)
 8008adc:	008011c4 	movi	r2,71
 8008ae0:	a8814a26 	beq	r21,r2,800900c <___vfprintf_internal_r+0x1cec>
 8008ae4:	00801944 	movi	r2,101
 8008ae8:	14020a0e 	bge	r2,r16,8009314 <___vfprintf_internal_r+0x1ff4>
 8008aec:	00801984 	movi	r2,102
 8008af0:	8081b626 	beq	r16,r2,80091cc <___vfprintf_internal_r+0x1eac>
 8008af4:	db012617 	ldw	r12,1176(sp)
 8008af8:	db013415 	stw	r12,1232(sp)
 8008afc:	db013417 	ldw	r12,1232(sp)
 8008b00:	dac13317 	ldw	r11,1228(sp)
 8008b04:	62c1a816 	blt	r12,r11,80091a8 <___vfprintf_internal_r+0x1e88>
 8008b08:	8c40004c 	andi	r17,r17,1
 8008b0c:	8801ca1e 	bne	r17,zero,8009238 <___vfprintf_internal_r+0x1f18>
 8008b10:	6005883a 	mov	r2,r12
 8008b14:	6001b516 	blt	r12,zero,80091ec <___vfprintf_internal_r+0x1ecc>
 8008b18:	dc813417 	ldw	r18,1232(sp)
 8008b1c:	df012b07 	ldb	fp,1196(sp)
 8008b20:	e001321e 	bne	fp,zero,8008fec <___vfprintf_internal_r+0x1ccc>
 8008b24:	dc412d17 	ldw	r17,1204(sp)
 8008b28:	dd412783 	ldbu	r21,1182(sp)
 8008b2c:	d8812b15 	stw	r2,1196(sp)
 8008b30:	dcc12d15 	stw	r19,1204(sp)
 8008b34:	d8013215 	stw	zero,1224(sp)
 8008b38:	003b8d06 	br	8007970 <__alt_data_end+0xfc007970>
 8008b3c:	88c0100c 	andi	r3,r17,64
 8008b40:	18008226 	beq	r3,zero,8008d4c <___vfprintf_internal_r+0x1a2c>
 8008b44:	dac12d17 	ldw	r11,1204(sp)
 8008b48:	14c0000b 	ldhu	r19,0(r2)
 8008b4c:	0039883a 	mov	fp,zero
 8008b50:	5ac00104 	addi	r11,r11,4
 8008b54:	dac12d15 	stw	r11,1204(sp)
 8008b58:	003c8f06 	br	8007d98 <__alt_data_end+0xfc007d98>
 8008b5c:	1c000007 	ldb	r16,0(r3)
 8008b60:	1805883a 	mov	r2,r3
 8008b64:	003a5506 	br	80074bc <__alt_data_end+0xfc0074bc>
 8008b68:	00800084 	movi	r2,2
 8008b6c:	003b5e06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008b70:	8880040c 	andi	r2,r17,16
 8008b74:	1000091e 	bne	r2,zero,8008b9c <___vfprintf_internal_r+0x187c>
 8008b78:	8c40100c 	andi	r17,r17,64
 8008b7c:	88000726 	beq	r17,zero,8008b9c <___vfprintf_internal_r+0x187c>
 8008b80:	db012d17 	ldw	r12,1204(sp)
 8008b84:	dac12f17 	ldw	r11,1212(sp)
 8008b88:	60800017 	ldw	r2,0(r12)
 8008b8c:	63000104 	addi	r12,r12,4
 8008b90:	db012d15 	stw	r12,1204(sp)
 8008b94:	12c0000d 	sth	r11,0(r2)
 8008b98:	003a1e06 	br	8007414 <__alt_data_end+0xfc007414>
 8008b9c:	db012d17 	ldw	r12,1204(sp)
 8008ba0:	dac12f17 	ldw	r11,1212(sp)
 8008ba4:	60800017 	ldw	r2,0(r12)
 8008ba8:	63000104 	addi	r12,r12,4
 8008bac:	db012d15 	stw	r12,1204(sp)
 8008bb0:	12c00015 	stw	r11,0(r2)
 8008bb4:	003a1706 	br	8007414 <__alt_data_end+0xfc007414>
 8008bb8:	010200b4 	movhi	r4,2050
 8008bbc:	21014d84 	addi	r4,r4,1334
 8008bc0:	d9012c15 	stw	r4,1200(sp)
 8008bc4:	dac12c17 	ldw	r11,1200(sp)
 8008bc8:	1c87883a 	add	r3,r3,r18
 8008bcc:	10800044 	addi	r2,r2,1
 8008bd0:	42c00015 	stw	r11,0(r8)
 8008bd4:	44800115 	stw	r18,4(r8)
 8008bd8:	d8c12015 	stw	r3,1152(sp)
 8008bdc:	d8811f15 	stw	r2,1148(sp)
 8008be0:	010001c4 	movi	r4,7
 8008be4:	20bee016 	blt	r4,r2,8008768 <__alt_data_end+0xfc008768>
 8008be8:	42000204 	addi	r8,r8,8
 8008bec:	003ee506 	br	8008784 <__alt_data_end+0xfc008784>
 8008bf0:	010200b4 	movhi	r4,2050
 8008bf4:	21014d84 	addi	r4,r4,1334
 8008bf8:	d9012c15 	stw	r4,1200(sp)
 8008bfc:	003bd806 	br	8007b60 <__alt_data_end+0xfc007b60>
 8008c00:	b009883a 	mov	r4,r22
 8008c04:	b80b883a 	mov	r5,r23
 8008c08:	d9811e04 	addi	r6,sp,1144
 8008c0c:	800f1040 	call	800f104 <__sprint_r>
 8008c10:	103ada1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008c14:	d8c12017 	ldw	r3,1152(sp)
 8008c18:	da000404 	addi	r8,sp,16
 8008c1c:	003d6b06 	br	80081cc <__alt_data_end+0xfc0081cc>
 8008c20:	d8811f17 	ldw	r2,1148(sp)
 8008c24:	030200b4 	movhi	r12,2050
 8008c28:	01000044 	movi	r4,1
 8008c2c:	18c00044 	addi	r3,r3,1
 8008c30:	10800044 	addi	r2,r2,1
 8008c34:	63014504 	addi	r12,r12,1300
 8008c38:	41000115 	stw	r4,4(r8)
 8008c3c:	43000015 	stw	r12,0(r8)
 8008c40:	d8c12015 	stw	r3,1152(sp)
 8008c44:	d8811f15 	stw	r2,1148(sp)
 8008c48:	010001c4 	movi	r4,7
 8008c4c:	20804916 	blt	r4,r2,8008d74 <___vfprintf_internal_r+0x1a54>
 8008c50:	42000204 	addi	r8,r8,8
 8008c54:	8000041e 	bne	r16,zero,8008c68 <___vfprintf_internal_r+0x1948>
 8008c58:	dac13317 	ldw	r11,1228(sp)
 8008c5c:	5800021e 	bne	r11,zero,8008c68 <___vfprintf_internal_r+0x1948>
 8008c60:	8880004c 	andi	r2,r17,1
 8008c64:	103bd526 	beq	r2,zero,8007bbc <__alt_data_end+0xfc007bbc>
 8008c68:	db013817 	ldw	r12,1248(sp)
 8008c6c:	d8811f17 	ldw	r2,1148(sp)
 8008c70:	dac13517 	ldw	r11,1236(sp)
 8008c74:	1b07883a 	add	r3,r3,r12
 8008c78:	10800044 	addi	r2,r2,1
 8008c7c:	42c00015 	stw	r11,0(r8)
 8008c80:	43000115 	stw	r12,4(r8)
 8008c84:	d8c12015 	stw	r3,1152(sp)
 8008c88:	d8811f15 	stw	r2,1148(sp)
 8008c8c:	010001c4 	movi	r4,7
 8008c90:	20813016 	blt	r4,r2,8009154 <___vfprintf_internal_r+0x1e34>
 8008c94:	42000204 	addi	r8,r8,8
 8008c98:	0421c83a 	sub	r16,zero,r16
 8008c9c:	0400630e 	bge	zero,r16,8008e2c <___vfprintf_internal_r+0x1b0c>
 8008ca0:	04800404 	movi	r18,16
 8008ca4:	94009f0e 	bge	r18,r16,8008f24 <___vfprintf_internal_r+0x1c04>
 8008ca8:	010200b4 	movhi	r4,2050
 8008cac:	21014d84 	addi	r4,r4,1334
 8008cb0:	d9012c15 	stw	r4,1200(sp)
 8008cb4:	054001c4 	movi	r21,7
 8008cb8:	00000306 	br	8008cc8 <___vfprintf_internal_r+0x19a8>
 8008cbc:	42000204 	addi	r8,r8,8
 8008cc0:	843ffc04 	addi	r16,r16,-16
 8008cc4:	94009a0e 	bge	r18,r16,8008f30 <___vfprintf_internal_r+0x1c10>
 8008cc8:	18c00404 	addi	r3,r3,16
 8008ccc:	10800044 	addi	r2,r2,1
 8008cd0:	45000015 	stw	r20,0(r8)
 8008cd4:	44800115 	stw	r18,4(r8)
 8008cd8:	d8c12015 	stw	r3,1152(sp)
 8008cdc:	d8811f15 	stw	r2,1148(sp)
 8008ce0:	a8bff60e 	bge	r21,r2,8008cbc <__alt_data_end+0xfc008cbc>
 8008ce4:	b009883a 	mov	r4,r22
 8008ce8:	b80b883a 	mov	r5,r23
 8008cec:	d9811e04 	addi	r6,sp,1144
 8008cf0:	800f1040 	call	800f104 <__sprint_r>
 8008cf4:	103aa11e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008cf8:	d8c12017 	ldw	r3,1152(sp)
 8008cfc:	d8811f17 	ldw	r2,1148(sp)
 8008d00:	da000404 	addi	r8,sp,16
 8008d04:	003fee06 	br	8008cc0 <__alt_data_end+0xfc008cc0>
 8008d08:	008011c4 	movi	r2,71
 8008d0c:	1400b316 	blt	r2,r16,8008fdc <___vfprintf_internal_r+0x1cbc>
 8008d10:	030200b4 	movhi	r12,2050
 8008d14:	63013704 	addi	r12,r12,1244
 8008d18:	db013115 	stw	r12,1220(sp)
 8008d1c:	00c000c4 	movi	r3,3
 8008d20:	00bfdfc4 	movi	r2,-129
 8008d24:	d8c12b15 	stw	r3,1196(sp)
 8008d28:	88a2703a 	and	r17,r17,r2
 8008d2c:	dd412783 	ldbu	r21,1182(sp)
 8008d30:	dcc12d15 	stw	r19,1204(sp)
 8008d34:	1825883a 	mov	r18,r3
 8008d38:	d8013215 	stw	zero,1224(sp)
 8008d3c:	d8013415 	stw	zero,1232(sp)
 8008d40:	003b0b06 	br	8007970 <__alt_data_end+0xfc007970>
 8008d44:	4825883a 	mov	r18,r9
 8008d48:	003cba06 	br	8008034 <__alt_data_end+0xfc008034>
 8008d4c:	db012d17 	ldw	r12,1204(sp)
 8008d50:	14c00017 	ldw	r19,0(r2)
 8008d54:	0039883a 	mov	fp,zero
 8008d58:	63000104 	addi	r12,r12,4
 8008d5c:	db012d15 	stw	r12,1204(sp)
 8008d60:	003c0d06 	br	8007d98 <__alt_data_end+0xfc007d98>
 8008d64:	008200b4 	movhi	r2,2050
 8008d68:	10813504 	addi	r2,r2,1236
 8008d6c:	d8813115 	stw	r2,1220(sp)
 8008d70:	003ac406 	br	8007884 <__alt_data_end+0xfc007884>
 8008d74:	b009883a 	mov	r4,r22
 8008d78:	b80b883a 	mov	r5,r23
 8008d7c:	d9811e04 	addi	r6,sp,1144
 8008d80:	800f1040 	call	800f104 <__sprint_r>
 8008d84:	103a7d1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008d88:	dc012617 	ldw	r16,1176(sp)
 8008d8c:	d8c12017 	ldw	r3,1152(sp)
 8008d90:	da000404 	addi	r8,sp,16
 8008d94:	003faf06 	br	8008c54 <__alt_data_end+0xfc008c54>
 8008d98:	db012e17 	ldw	r12,1208(sp)
 8008d9c:	1805883a 	mov	r2,r3
 8008da0:	dac12d15 	stw	r11,1204(sp)
 8008da4:	0319c83a 	sub	r12,zero,r12
 8008da8:	db012e15 	stw	r12,1208(sp)
 8008dac:	003a7e06 	br	80077a8 <__alt_data_end+0xfc0077a8>
 8008db0:	18800044 	addi	r2,r3,1
 8008db4:	8c400814 	ori	r17,r17,32
 8008db8:	1c000047 	ldb	r16,1(r3)
 8008dbc:	0039bf06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8008dc0:	b009883a 	mov	r4,r22
 8008dc4:	b80b883a 	mov	r5,r23
 8008dc8:	d9811e04 	addi	r6,sp,1144
 8008dcc:	800f1040 	call	800f104 <__sprint_r>
 8008dd0:	103a6a1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008dd4:	d8c12017 	ldw	r3,1152(sp)
 8008dd8:	da000404 	addi	r8,sp,16
 8008ddc:	003d0c06 	br	8008210 <__alt_data_end+0xfc008210>
 8008de0:	db012817 	ldw	r12,1184(sp)
 8008de4:	d8c13117 	ldw	r3,1220(sp)
 8008de8:	60e5c83a 	sub	r18,r12,r3
 8008dec:	003adb06 	br	800795c <__alt_data_end+0xfc00795c>
 8008df0:	da013f15 	stw	r8,1276(sp)
 8008df4:	80052f00 	call	80052f0 <strlen>
 8008df8:	1025883a 	mov	r18,r2
 8008dfc:	da013f17 	ldw	r8,1276(sp)
 8008e00:	903c8e0e 	bge	r18,zero,800803c <__alt_data_end+0xfc00803c>
 8008e04:	0005883a 	mov	r2,zero
 8008e08:	003c8c06 	br	800803c <__alt_data_end+0xfc00803c>
 8008e0c:	b009883a 	mov	r4,r22
 8008e10:	b80b883a 	mov	r5,r23
 8008e14:	d9811e04 	addi	r6,sp,1144
 8008e18:	800f1040 	call	800f104 <__sprint_r>
 8008e1c:	103a571e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008e20:	d8c12017 	ldw	r3,1152(sp)
 8008e24:	d8811f17 	ldw	r2,1148(sp)
 8008e28:	da000404 	addi	r8,sp,16
 8008e2c:	db013317 	ldw	r12,1228(sp)
 8008e30:	dac13117 	ldw	r11,1220(sp)
 8008e34:	10800044 	addi	r2,r2,1
 8008e38:	60c7883a 	add	r3,r12,r3
 8008e3c:	42c00015 	stw	r11,0(r8)
 8008e40:	43000115 	stw	r12,4(r8)
 8008e44:	d8c12015 	stw	r3,1152(sp)
 8008e48:	d8811f15 	stw	r2,1148(sp)
 8008e4c:	010001c4 	movi	r4,7
 8008e50:	20bb590e 	bge	r4,r2,8007bb8 <__alt_data_end+0xfc007bb8>
 8008e54:	003d7e06 	br	8008450 <__alt_data_end+0xfc008450>
 8008e58:	010200b4 	movhi	r4,2050
 8008e5c:	21015184 	addi	r4,r4,1350
 8008e60:	d9013615 	stw	r4,1240(sp)
 8008e64:	003af606 	br	8007a40 <__alt_data_end+0xfc007a40>
 8008e68:	d8812604 	addi	r2,sp,1176
 8008e6c:	d8800115 	stw	r2,4(sp)
 8008e70:	d9413717 	ldw	r5,1244(sp)
 8008e74:	d8812504 	addi	r2,sp,1172
 8008e78:	d8800215 	stw	r2,8(sp)
 8008e7c:	d8812104 	addi	r2,sp,1156
 8008e80:	da400015 	stw	r9,0(sp)
 8008e84:	d8800315 	stw	r2,12(sp)
 8008e88:	b009883a 	mov	r4,r22
 8008e8c:	900d883a 	mov	r6,r18
 8008e90:	01c000c4 	movi	r7,3
 8008e94:	da013f15 	stw	r8,1276(sp)
 8008e98:	da413e15 	stw	r9,1272(sp)
 8008e9c:	80096700 	call	8009670 <_dtoa_r>
 8008ea0:	da413e17 	ldw	r9,1272(sp)
 8008ea4:	da013f17 	ldw	r8,1276(sp)
 8008ea8:	d8813115 	stw	r2,1220(sp)
 8008eac:	4839883a 	mov	fp,r9
 8008eb0:	dac13117 	ldw	r11,1220(sp)
 8008eb4:	00801184 	movi	r2,70
 8008eb8:	5f15883a 	add	r10,r11,fp
 8008ebc:	a8bef01e 	bne	r21,r2,8008a80 <__alt_data_end+0xfc008a80>
 8008ec0:	59000007 	ldb	r4,0(r11)
 8008ec4:	00800c04 	movi	r2,48
 8008ec8:	2080e026 	beq	r4,r2,800924c <___vfprintf_internal_r+0x1f2c>
 8008ecc:	d8c12617 	ldw	r3,1176(sp)
 8008ed0:	50d5883a 	add	r10,r10,r3
 8008ed4:	003eea06 	br	8008a80 <__alt_data_end+0xfc008a80>
 8008ed8:	0025883a 	mov	r18,zero
 8008edc:	003db306 	br	80085ac <__alt_data_end+0xfc0085ac>
 8008ee0:	b009883a 	mov	r4,r22
 8008ee4:	b80b883a 	mov	r5,r23
 8008ee8:	d9811e04 	addi	r6,sp,1144
 8008eec:	800f1040 	call	800f104 <__sprint_r>
 8008ef0:	103a221e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008ef4:	d8c12017 	ldw	r3,1152(sp)
 8008ef8:	da000404 	addi	r8,sp,16
 8008efc:	003daa06 	br	80085a8 <__alt_data_end+0xfc0085a8>
 8008f00:	b009883a 	mov	r4,r22
 8008f04:	b80b883a 	mov	r5,r23
 8008f08:	d9811e04 	addi	r6,sp,1144
 8008f0c:	800f1040 	call	800f104 <__sprint_r>
 8008f10:	103a1a1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008f14:	d8812617 	ldw	r2,1176(sp)
 8008f18:	d8c12017 	ldw	r3,1152(sp)
 8008f1c:	da000404 	addi	r8,sp,16
 8008f20:	003e2c06 	br	80087d4 <__alt_data_end+0xfc0087d4>
 8008f24:	030200b4 	movhi	r12,2050
 8008f28:	63014d84 	addi	r12,r12,1334
 8008f2c:	db012c15 	stw	r12,1200(sp)
 8008f30:	dac12c17 	ldw	r11,1200(sp)
 8008f34:	1c07883a 	add	r3,r3,r16
 8008f38:	10800044 	addi	r2,r2,1
 8008f3c:	42c00015 	stw	r11,0(r8)
 8008f40:	44000115 	stw	r16,4(r8)
 8008f44:	d8c12015 	stw	r3,1152(sp)
 8008f48:	d8811f15 	stw	r2,1148(sp)
 8008f4c:	010001c4 	movi	r4,7
 8008f50:	20bfae16 	blt	r4,r2,8008e0c <__alt_data_end+0xfc008e0c>
 8008f54:	42000204 	addi	r8,r8,8
 8008f58:	003fb406 	br	8008e2c <__alt_data_end+0xfc008e2c>
 8008f5c:	030200b4 	movhi	r12,2050
 8008f60:	63015184 	addi	r12,r12,1350
 8008f64:	db013615 	stw	r12,1240(sp)
 8008f68:	003b3806 	br	8007c4c <__alt_data_end+0xfc007c4c>
 8008f6c:	b009883a 	mov	r4,r22
 8008f70:	b80b883a 	mov	r5,r23
 8008f74:	d9811e04 	addi	r6,sp,1144
 8008f78:	800f1040 	call	800f104 <__sprint_r>
 8008f7c:	1039ff1e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8008f80:	d8812617 	ldw	r2,1176(sp)
 8008f84:	db013317 	ldw	r12,1228(sp)
 8008f88:	d8c12017 	ldw	r3,1152(sp)
 8008f8c:	da000404 	addi	r8,sp,16
 8008f90:	6085c83a 	sub	r2,r12,r2
 8008f94:	003e2006 	br	8008818 <__alt_data_end+0xfc008818>
 8008f98:	0021883a 	mov	r16,zero
 8008f9c:	003e1f06 	br	800881c <__alt_data_end+0xfc00881c>
 8008fa0:	00800184 	movi	r2,6
 8008fa4:	1240012e 	bgeu	r2,r9,8008fac <___vfprintf_internal_r+0x1c8c>
 8008fa8:	1013883a 	mov	r9,r2
 8008fac:	4825883a 	mov	r18,r9
 8008fb0:	4805883a 	mov	r2,r9
 8008fb4:	48009e16 	blt	r9,zero,8009230 <___vfprintf_internal_r+0x1f10>
 8008fb8:	d8812b15 	stw	r2,1196(sp)
 8008fbc:	008200b4 	movhi	r2,2050
 8008fc0:	10814304 	addi	r2,r2,1292
 8008fc4:	d8813115 	stw	r2,1220(sp)
 8008fc8:	dcc12d15 	stw	r19,1204(sp)
 8008fcc:	d8013215 	stw	zero,1224(sp)
 8008fd0:	d8013415 	stw	zero,1232(sp)
 8008fd4:	0005883a 	mov	r2,zero
 8008fd8:	003a6c06 	br	800798c <__alt_data_end+0xfc00798c>
 8008fdc:	008200b4 	movhi	r2,2050
 8008fe0:	10813804 	addi	r2,r2,1248
 8008fe4:	d8813115 	stw	r2,1220(sp)
 8008fe8:	003f4c06 	br	8008d1c <__alt_data_end+0xfc008d1c>
 8008fec:	00c00b44 	movi	r3,45
 8008ff0:	d8812b15 	stw	r2,1196(sp)
 8008ff4:	dc412d17 	ldw	r17,1204(sp)
 8008ff8:	d8c12785 	stb	r3,1182(sp)
 8008ffc:	dcc12d15 	stw	r19,1204(sp)
 8009000:	d8013215 	stw	zero,1224(sp)
 8009004:	00800b44 	movi	r2,45
 8009008:	003a5d06 	br	8007980 <__alt_data_end+0xfc007980>
 800900c:	d8c12617 	ldw	r3,1176(sp)
 8009010:	00bfff44 	movi	r2,-3
 8009014:	18800d16 	blt	r3,r2,800904c <___vfprintf_internal_r+0x1d2c>
 8009018:	48c00c16 	blt	r9,r3,800904c <___vfprintf_internal_r+0x1d2c>
 800901c:	d8c13415 	stw	r3,1232(sp)
 8009020:	040019c4 	movi	r16,103
 8009024:	003eb506 	br	8008afc <__alt_data_end+0xfc008afc>
 8009028:	05400b44 	movi	r21,45
 800902c:	dd412785 	stb	r21,1182(sp)
 8009030:	003a0f06 	br	8007870 <__alt_data_end+0xfc007870>
 8009034:	010200b4 	movhi	r4,2050
 8009038:	21014d84 	addi	r4,r4,1334
 800903c:	d9012c15 	stw	r4,1200(sp)
 8009040:	003cb106 	br	8008308 <__alt_data_end+0xfc008308>
 8009044:	5005883a 	mov	r2,r10
 8009048:	003ea106 	br	8008ad0 <__alt_data_end+0xfc008ad0>
 800904c:	843fff84 	addi	r16,r16,-2
 8009050:	1f3fffc4 	addi	fp,r3,-1
 8009054:	df012615 	stw	fp,1176(sp)
 8009058:	dc0122c5 	stb	r16,1163(sp)
 800905c:	e0009516 	blt	fp,zero,80092b4 <___vfprintf_internal_r+0x1f94>
 8009060:	00800ac4 	movi	r2,43
 8009064:	d8812305 	stb	r2,1164(sp)
 8009068:	00800244 	movi	r2,9
 800906c:	1700690e 	bge	r2,fp,8009214 <___vfprintf_internal_r+0x1ef4>
 8009070:	dd4122c4 	addi	r21,sp,1163
 8009074:	dc012c15 	stw	r16,1200(sp)
 8009078:	8825883a 	mov	r18,r17
 800907c:	a821883a 	mov	r16,r21
 8009080:	4023883a 	mov	r17,r8
 8009084:	e009883a 	mov	r4,fp
 8009088:	01400284 	movi	r5,10
 800908c:	80119e40 	call	80119e4 <__modsi3>
 8009090:	10800c04 	addi	r2,r2,48
 8009094:	843fffc4 	addi	r16,r16,-1
 8009098:	e009883a 	mov	r4,fp
 800909c:	01400284 	movi	r5,10
 80090a0:	80800005 	stb	r2,0(r16)
 80090a4:	80119900 	call	8011990 <__divsi3>
 80090a8:	1039883a 	mov	fp,r2
 80090ac:	00800244 	movi	r2,9
 80090b0:	173ff416 	blt	r2,fp,8009084 <__alt_data_end+0xfc009084>
 80090b4:	8811883a 	mov	r8,r17
 80090b8:	e0800c04 	addi	r2,fp,48
 80090bc:	9023883a 	mov	r17,r18
 80090c0:	8025883a 	mov	r18,r16
 80090c4:	913fffc4 	addi	r4,r18,-1
 80090c8:	90bfffc5 	stb	r2,-1(r18)
 80090cc:	dc012c17 	ldw	r16,1200(sp)
 80090d0:	25408e2e 	bgeu	r4,r21,800930c <___vfprintf_internal_r+0x1fec>
 80090d4:	d9412384 	addi	r5,sp,1166
 80090d8:	2c8bc83a 	sub	r5,r5,r18
 80090dc:	d8c12344 	addi	r3,sp,1165
 80090e0:	a94b883a 	add	r5,r21,r5
 80090e4:	00000106 	br	80090ec <___vfprintf_internal_r+0x1dcc>
 80090e8:	20800003 	ldbu	r2,0(r4)
 80090ec:	18800005 	stb	r2,0(r3)
 80090f0:	18c00044 	addi	r3,r3,1
 80090f4:	21000044 	addi	r4,r4,1
 80090f8:	197ffb1e 	bne	r3,r5,80090e8 <__alt_data_end+0xfc0090e8>
 80090fc:	d8812304 	addi	r2,sp,1164
 8009100:	1485c83a 	sub	r2,r2,r18
 8009104:	d8c12344 	addi	r3,sp,1165
 8009108:	1885883a 	add	r2,r3,r2
 800910c:	dac13317 	ldw	r11,1228(sp)
 8009110:	156bc83a 	sub	r21,r2,r21
 8009114:	dd413a15 	stw	r21,1256(sp)
 8009118:	00800044 	movi	r2,1
 800911c:	5d65883a 	add	r18,r11,r21
 8009120:	12c0770e 	bge	r2,r11,8009300 <___vfprintf_internal_r+0x1fe0>
 8009124:	94800044 	addi	r18,r18,1
 8009128:	9005883a 	mov	r2,r18
 800912c:	90007216 	blt	r18,zero,80092f8 <___vfprintf_internal_r+0x1fd8>
 8009130:	d8013415 	stw	zero,1232(sp)
 8009134:	003e7906 	br	8008b1c <__alt_data_end+0xfc008b1c>
 8009138:	da412b15 	stw	r9,1196(sp)
 800913c:	dd412783 	ldbu	r21,1182(sp)
 8009140:	4825883a 	mov	r18,r9
 8009144:	dcc12d15 	stw	r19,1204(sp)
 8009148:	d8013215 	stw	zero,1224(sp)
 800914c:	d8013415 	stw	zero,1232(sp)
 8009150:	003a0706 	br	8007970 <__alt_data_end+0xfc007970>
 8009154:	b009883a 	mov	r4,r22
 8009158:	b80b883a 	mov	r5,r23
 800915c:	d9811e04 	addi	r6,sp,1144
 8009160:	800f1040 	call	800f104 <__sprint_r>
 8009164:	1039851e 	bne	r2,zero,800777c <__alt_data_end+0xfc00777c>
 8009168:	dc012617 	ldw	r16,1176(sp)
 800916c:	d8c12017 	ldw	r3,1152(sp)
 8009170:	d8811f17 	ldw	r2,1148(sp)
 8009174:	da000404 	addi	r8,sp,16
 8009178:	003ec706 	br	8008c98 <__alt_data_end+0xfc008c98>
 800917c:	483e1a1e 	bne	r9,zero,80089e8 <__alt_data_end+0xfc0089e8>
 8009180:	9013883a 	mov	r9,r18
 8009184:	003e1806 	br	80089e8 <__alt_data_end+0xfc0089e8>
 8009188:	00c00b44 	movi	r3,45
 800918c:	64a0003c 	xorhi	r18,r12,32768
 8009190:	d8c12b05 	stb	r3,1196(sp)
 8009194:	003e1a06 	br	8008a00 <__alt_data_end+0xfc008a00>
 8009198:	4f000044 	addi	fp,r9,1
 800919c:	003e1f06 	br	8008a1c <__alt_data_end+0xfc008a1c>
 80091a0:	02400184 	movi	r9,6
 80091a4:	003e1006 	br	80089e8 <__alt_data_end+0xfc0089e8>
 80091a8:	d8c13417 	ldw	r3,1232(sp)
 80091ac:	00c04b0e 	bge	zero,r3,80092dc <___vfprintf_internal_r+0x1fbc>
 80091b0:	04800044 	movi	r18,1
 80091b4:	dac13317 	ldw	r11,1228(sp)
 80091b8:	92e5883a 	add	r18,r18,r11
 80091bc:	9005883a 	mov	r2,r18
 80091c0:	903e560e 	bge	r18,zero,8008b1c <__alt_data_end+0xfc008b1c>
 80091c4:	0005883a 	mov	r2,zero
 80091c8:	003e5406 	br	8008b1c <__alt_data_end+0xfc008b1c>
 80091cc:	d8c12617 	ldw	r3,1176(sp)
 80091d0:	d8c13415 	stw	r3,1232(sp)
 80091d4:	00c03b0e 	bge	zero,r3,80092c4 <___vfprintf_internal_r+0x1fa4>
 80091d8:	4800081e 	bne	r9,zero,80091fc <___vfprintf_internal_r+0x1edc>
 80091dc:	8c40004c 	andi	r17,r17,1
 80091e0:	8800061e 	bne	r17,zero,80091fc <___vfprintf_internal_r+0x1edc>
 80091e4:	1805883a 	mov	r2,r3
 80091e8:	183e4b0e 	bge	r3,zero,8008b18 <__alt_data_end+0xfc008b18>
 80091ec:	0005883a 	mov	r2,zero
 80091f0:	003e4906 	br	8008b18 <__alt_data_end+0xfc008b18>
 80091f4:	d8812117 	ldw	r2,1156(sp)
 80091f8:	003e3506 	br	8008ad0 <__alt_data_end+0xfc008ad0>
 80091fc:	dac13417 	ldw	r11,1232(sp)
 8009200:	4a400044 	addi	r9,r9,1
 8009204:	5a65883a 	add	r18,r11,r9
 8009208:	9005883a 	mov	r2,r18
 800920c:	903e430e 	bge	r18,zero,8008b1c <__alt_data_end+0xfc008b1c>
 8009210:	003fec06 	br	80091c4 <__alt_data_end+0xfc0091c4>
 8009214:	00800c04 	movi	r2,48
 8009218:	e0c00c04 	addi	r3,fp,48
 800921c:	d8812345 	stb	r2,1165(sp)
 8009220:	d8c12385 	stb	r3,1166(sp)
 8009224:	d88123c4 	addi	r2,sp,1167
 8009228:	dd4122c4 	addi	r21,sp,1163
 800922c:	003fb706 	br	800910c <__alt_data_end+0xfc00910c>
 8009230:	0005883a 	mov	r2,zero
 8009234:	003f6006 	br	8008fb8 <__alt_data_end+0xfc008fb8>
 8009238:	db013417 	ldw	r12,1232(sp)
 800923c:	64800044 	addi	r18,r12,1
 8009240:	9005883a 	mov	r2,r18
 8009244:	903e350e 	bge	r18,zero,8008b1c <__alt_data_end+0xfc008b1c>
 8009248:	003fde06 	br	80091c4 <__alt_data_end+0xfc0091c4>
 800924c:	d9013717 	ldw	r4,1244(sp)
 8009250:	900b883a 	mov	r5,r18
 8009254:	000d883a 	mov	r6,zero
 8009258:	000f883a 	mov	r7,zero
 800925c:	da013f15 	stw	r8,1276(sp)
 8009260:	da413e15 	stw	r9,1272(sp)
 8009264:	da813d15 	stw	r10,1268(sp)
 8009268:	801231c0 	call	801231c <__eqdf2>
 800926c:	da013f17 	ldw	r8,1276(sp)
 8009270:	da413e17 	ldw	r9,1272(sp)
 8009274:	da813d17 	ldw	r10,1268(sp)
 8009278:	103f1426 	beq	r2,zero,8008ecc <__alt_data_end+0xfc008ecc>
 800927c:	00800044 	movi	r2,1
 8009280:	1707c83a 	sub	r3,r2,fp
 8009284:	d8c12615 	stw	r3,1176(sp)
 8009288:	003f1106 	br	8008ed0 <__alt_data_end+0xfc008ed0>
 800928c:	dac12d17 	ldw	r11,1204(sp)
 8009290:	5a400017 	ldw	r9,0(r11)
 8009294:	5ac00104 	addi	r11,r11,4
 8009298:	dac12d15 	stw	r11,1204(sp)
 800929c:	483ec60e 	bge	r9,zero,8008db8 <__alt_data_end+0xfc008db8>
 80092a0:	027fffc4 	movi	r9,-1
 80092a4:	1c000047 	ldb	r16,1(r3)
 80092a8:	00388406 	br	80074bc <__alt_data_end+0xfc0074bc>
 80092ac:	043fffc4 	movi	r16,-1
 80092b0:	00391006 	br	80076f4 <__alt_data_end+0xfc0076f4>
 80092b4:	00800b44 	movi	r2,45
 80092b8:	0739c83a 	sub	fp,zero,fp
 80092bc:	d8812305 	stb	r2,1164(sp)
 80092c0:	003f6906 	br	8009068 <__alt_data_end+0xfc009068>
 80092c4:	4800081e 	bne	r9,zero,80092e8 <___vfprintf_internal_r+0x1fc8>
 80092c8:	8c40004c 	andi	r17,r17,1
 80092cc:	8800061e 	bne	r17,zero,80092e8 <___vfprintf_internal_r+0x1fc8>
 80092d0:	00800044 	movi	r2,1
 80092d4:	1025883a 	mov	r18,r2
 80092d8:	003e1006 	br	8008b1c <__alt_data_end+0xfc008b1c>
 80092dc:	04800084 	movi	r18,2
 80092e0:	90e5c83a 	sub	r18,r18,r3
 80092e4:	003fb306 	br	80091b4 <__alt_data_end+0xfc0091b4>
 80092e8:	4c800084 	addi	r18,r9,2
 80092ec:	9005883a 	mov	r2,r18
 80092f0:	903e0a0e 	bge	r18,zero,8008b1c <__alt_data_end+0xfc008b1c>
 80092f4:	003fb306 	br	80091c4 <__alt_data_end+0xfc0091c4>
 80092f8:	0005883a 	mov	r2,zero
 80092fc:	003f8c06 	br	8009130 <__alt_data_end+0xfc009130>
 8009300:	88a2703a 	and	r17,r17,r2
 8009304:	883f8826 	beq	r17,zero,8009128 <__alt_data_end+0xfc009128>
 8009308:	003f8606 	br	8009124 <__alt_data_end+0xfc009124>
 800930c:	d8812344 	addi	r2,sp,1165
 8009310:	003f7e06 	br	800910c <__alt_data_end+0xfc00910c>
 8009314:	d8c12617 	ldw	r3,1176(sp)
 8009318:	003f4d06 	br	8009050 <__alt_data_end+0xfc009050>

0800931c <__vfprintf_internal>:
 800931c:	2007883a 	mov	r3,r4
 8009320:	010200b4 	movhi	r4,2050
 8009324:	21088a04 	addi	r4,r4,8744
 8009328:	21000017 	ldw	r4,0(r4)
 800932c:	2805883a 	mov	r2,r5
 8009330:	300f883a 	mov	r7,r6
 8009334:	180b883a 	mov	r5,r3
 8009338:	100d883a 	mov	r6,r2
 800933c:	80073201 	jmpi	8007320 <___vfprintf_internal_r>

08009340 <__swsetup_r>:
 8009340:	008200b4 	movhi	r2,2050
 8009344:	defffd04 	addi	sp,sp,-12
 8009348:	10888a04 	addi	r2,r2,8744
 800934c:	dc400115 	stw	r17,4(sp)
 8009350:	2023883a 	mov	r17,r4
 8009354:	11000017 	ldw	r4,0(r2)
 8009358:	dc000015 	stw	r16,0(sp)
 800935c:	dfc00215 	stw	ra,8(sp)
 8009360:	2821883a 	mov	r16,r5
 8009364:	20000226 	beq	r4,zero,8009370 <__swsetup_r+0x30>
 8009368:	20c00e17 	ldw	r3,56(r4)
 800936c:	18002e26 	beq	r3,zero,8009428 <__swsetup_r+0xe8>
 8009370:	8080030b 	ldhu	r2,12(r16)
 8009374:	10c0020c 	andi	r3,r2,8
 8009378:	100d883a 	mov	r6,r2
 800937c:	18000f26 	beq	r3,zero,80093bc <__swsetup_r+0x7c>
 8009380:	80c00417 	ldw	r3,16(r16)
 8009384:	18001526 	beq	r3,zero,80093dc <__swsetup_r+0x9c>
 8009388:	1100004c 	andi	r4,r2,1
 800938c:	20001c1e 	bne	r4,zero,8009400 <__swsetup_r+0xc0>
 8009390:	1080008c 	andi	r2,r2,2
 8009394:	1000261e 	bne	r2,zero,8009430 <__swsetup_r+0xf0>
 8009398:	80800517 	ldw	r2,20(r16)
 800939c:	80800215 	stw	r2,8(r16)
 80093a0:	18001c26 	beq	r3,zero,8009414 <__swsetup_r+0xd4>
 80093a4:	0005883a 	mov	r2,zero
 80093a8:	dfc00217 	ldw	ra,8(sp)
 80093ac:	dc400117 	ldw	r17,4(sp)
 80093b0:	dc000017 	ldw	r16,0(sp)
 80093b4:	dec00304 	addi	sp,sp,12
 80093b8:	f800283a 	ret
 80093bc:	3080040c 	andi	r2,r6,16
 80093c0:	10001726 	beq	r2,zero,8009420 <__swsetup_r+0xe0>
 80093c4:	3080010c 	andi	r2,r6,4
 80093c8:	10001b1e 	bne	r2,zero,8009438 <__swsetup_r+0xf8>
 80093cc:	80c00417 	ldw	r3,16(r16)
 80093d0:	30800214 	ori	r2,r6,8
 80093d4:	8080030d 	sth	r2,12(r16)
 80093d8:	183feb1e 	bne	r3,zero,8009388 <__alt_data_end+0xfc009388>
 80093dc:	1140a00c 	andi	r5,r2,640
 80093e0:	01008004 	movi	r4,512
 80093e4:	293fe826 	beq	r5,r4,8009388 <__alt_data_end+0xfc009388>
 80093e8:	8809883a 	mov	r4,r17
 80093ec:	800b883a 	mov	r5,r16
 80093f0:	800be980 	call	800be98 <__smakebuf_r>
 80093f4:	8080030b 	ldhu	r2,12(r16)
 80093f8:	80c00417 	ldw	r3,16(r16)
 80093fc:	003fe206 	br	8009388 <__alt_data_end+0xfc009388>
 8009400:	80800517 	ldw	r2,20(r16)
 8009404:	80000215 	stw	zero,8(r16)
 8009408:	0085c83a 	sub	r2,zero,r2
 800940c:	80800615 	stw	r2,24(r16)
 8009410:	183fe41e 	bne	r3,zero,80093a4 <__alt_data_end+0xfc0093a4>
 8009414:	8080030b 	ldhu	r2,12(r16)
 8009418:	1080200c 	andi	r2,r2,128
 800941c:	103fe226 	beq	r2,zero,80093a8 <__alt_data_end+0xfc0093a8>
 8009420:	00bfffc4 	movi	r2,-1
 8009424:	003fe006 	br	80093a8 <__alt_data_end+0xfc0093a8>
 8009428:	800b3400 	call	800b340 <__sinit>
 800942c:	003fd006 	br	8009370 <__alt_data_end+0xfc009370>
 8009430:	0005883a 	mov	r2,zero
 8009434:	003fd906 	br	800939c <__alt_data_end+0xfc00939c>
 8009438:	81400c17 	ldw	r5,48(r16)
 800943c:	28000626 	beq	r5,zero,8009458 <__swsetup_r+0x118>
 8009440:	80801004 	addi	r2,r16,64
 8009444:	28800326 	beq	r5,r2,8009454 <__swsetup_r+0x114>
 8009448:	8809883a 	mov	r4,r17
 800944c:	800b4b40 	call	800b4b4 <_free_r>
 8009450:	8180030b 	ldhu	r6,12(r16)
 8009454:	80000c15 	stw	zero,48(r16)
 8009458:	80c00417 	ldw	r3,16(r16)
 800945c:	00bff6c4 	movi	r2,-37
 8009460:	118c703a 	and	r6,r2,r6
 8009464:	80000115 	stw	zero,4(r16)
 8009468:	80c00015 	stw	r3,0(r16)
 800946c:	003fd806 	br	80093d0 <__alt_data_end+0xfc0093d0>

08009470 <quorem>:
 8009470:	defff704 	addi	sp,sp,-36
 8009474:	dc800215 	stw	r18,8(sp)
 8009478:	20800417 	ldw	r2,16(r4)
 800947c:	2c800417 	ldw	r18,16(r5)
 8009480:	dfc00815 	stw	ra,32(sp)
 8009484:	ddc00715 	stw	r23,28(sp)
 8009488:	dd800615 	stw	r22,24(sp)
 800948c:	dd400515 	stw	r21,20(sp)
 8009490:	dd000415 	stw	r20,16(sp)
 8009494:	dcc00315 	stw	r19,12(sp)
 8009498:	dc400115 	stw	r17,4(sp)
 800949c:	dc000015 	stw	r16,0(sp)
 80094a0:	14807116 	blt	r2,r18,8009668 <quorem+0x1f8>
 80094a4:	94bfffc4 	addi	r18,r18,-1
 80094a8:	94ad883a 	add	r22,r18,r18
 80094ac:	b5ad883a 	add	r22,r22,r22
 80094b0:	2c400504 	addi	r17,r5,20
 80094b4:	8da9883a 	add	r20,r17,r22
 80094b8:	25400504 	addi	r21,r4,20
 80094bc:	282f883a 	mov	r23,r5
 80094c0:	adad883a 	add	r22,r21,r22
 80094c4:	a1400017 	ldw	r5,0(r20)
 80094c8:	2021883a 	mov	r16,r4
 80094cc:	b1000017 	ldw	r4,0(r22)
 80094d0:	29400044 	addi	r5,r5,1
 80094d4:	8011a400 	call	8011a40 <__udivsi3>
 80094d8:	1027883a 	mov	r19,r2
 80094dc:	10002c26 	beq	r2,zero,8009590 <quorem+0x120>
 80094e0:	a813883a 	mov	r9,r21
 80094e4:	8811883a 	mov	r8,r17
 80094e8:	0009883a 	mov	r4,zero
 80094ec:	000d883a 	mov	r6,zero
 80094f0:	41c00017 	ldw	r7,0(r8)
 80094f4:	49400017 	ldw	r5,0(r9)
 80094f8:	42000104 	addi	r8,r8,4
 80094fc:	38bfffcc 	andi	r2,r7,65535
 8009500:	14c5383a 	mul	r2,r2,r19
 8009504:	380ed43a 	srli	r7,r7,16
 8009508:	28ffffcc 	andi	r3,r5,65535
 800950c:	2085883a 	add	r2,r4,r2
 8009510:	1008d43a 	srli	r4,r2,16
 8009514:	3ccf383a 	mul	r7,r7,r19
 8009518:	198d883a 	add	r6,r3,r6
 800951c:	10ffffcc 	andi	r3,r2,65535
 8009520:	30c7c83a 	sub	r3,r6,r3
 8009524:	280ad43a 	srli	r5,r5,16
 8009528:	21c9883a 	add	r4,r4,r7
 800952c:	180dd43a 	srai	r6,r3,16
 8009530:	20bfffcc 	andi	r2,r4,65535
 8009534:	288bc83a 	sub	r5,r5,r2
 8009538:	298b883a 	add	r5,r5,r6
 800953c:	280e943a 	slli	r7,r5,16
 8009540:	18ffffcc 	andi	r3,r3,65535
 8009544:	2008d43a 	srli	r4,r4,16
 8009548:	38ceb03a 	or	r7,r7,r3
 800954c:	49c00015 	stw	r7,0(r9)
 8009550:	280dd43a 	srai	r6,r5,16
 8009554:	4a400104 	addi	r9,r9,4
 8009558:	a23fe52e 	bgeu	r20,r8,80094f0 <__alt_data_end+0xfc0094f0>
 800955c:	b0800017 	ldw	r2,0(r22)
 8009560:	10000b1e 	bne	r2,zero,8009590 <quorem+0x120>
 8009564:	b0bfff04 	addi	r2,r22,-4
 8009568:	a880082e 	bgeu	r21,r2,800958c <quorem+0x11c>
 800956c:	b0ffff17 	ldw	r3,-4(r22)
 8009570:	18000326 	beq	r3,zero,8009580 <quorem+0x110>
 8009574:	00000506 	br	800958c <quorem+0x11c>
 8009578:	10c00017 	ldw	r3,0(r2)
 800957c:	1800031e 	bne	r3,zero,800958c <quorem+0x11c>
 8009580:	10bfff04 	addi	r2,r2,-4
 8009584:	94bfffc4 	addi	r18,r18,-1
 8009588:	a8bffb36 	bltu	r21,r2,8009578 <__alt_data_end+0xfc009578>
 800958c:	84800415 	stw	r18,16(r16)
 8009590:	8009883a 	mov	r4,r16
 8009594:	b80b883a 	mov	r5,r23
 8009598:	800cdb00 	call	800cdb0 <__mcmp>
 800959c:	10002616 	blt	r2,zero,8009638 <quorem+0x1c8>
 80095a0:	9cc00044 	addi	r19,r19,1
 80095a4:	a80d883a 	mov	r6,r21
 80095a8:	000b883a 	mov	r5,zero
 80095ac:	31000017 	ldw	r4,0(r6)
 80095b0:	88800017 	ldw	r2,0(r17)
 80095b4:	31800104 	addi	r6,r6,4
 80095b8:	20ffffcc 	andi	r3,r4,65535
 80095bc:	194b883a 	add	r5,r3,r5
 80095c0:	10ffffcc 	andi	r3,r2,65535
 80095c4:	28c7c83a 	sub	r3,r5,r3
 80095c8:	1004d43a 	srli	r2,r2,16
 80095cc:	2008d43a 	srli	r4,r4,16
 80095d0:	180bd43a 	srai	r5,r3,16
 80095d4:	18ffffcc 	andi	r3,r3,65535
 80095d8:	2089c83a 	sub	r4,r4,r2
 80095dc:	2149883a 	add	r4,r4,r5
 80095e0:	2004943a 	slli	r2,r4,16
 80095e4:	8c400104 	addi	r17,r17,4
 80095e8:	200bd43a 	srai	r5,r4,16
 80095ec:	10c6b03a 	or	r3,r2,r3
 80095f0:	30ffff15 	stw	r3,-4(r6)
 80095f4:	a47fed2e 	bgeu	r20,r17,80095ac <__alt_data_end+0xfc0095ac>
 80095f8:	9485883a 	add	r2,r18,r18
 80095fc:	1085883a 	add	r2,r2,r2
 8009600:	a887883a 	add	r3,r21,r2
 8009604:	18800017 	ldw	r2,0(r3)
 8009608:	10000b1e 	bne	r2,zero,8009638 <quorem+0x1c8>
 800960c:	18bfff04 	addi	r2,r3,-4
 8009610:	a880082e 	bgeu	r21,r2,8009634 <quorem+0x1c4>
 8009614:	18ffff17 	ldw	r3,-4(r3)
 8009618:	18000326 	beq	r3,zero,8009628 <quorem+0x1b8>
 800961c:	00000506 	br	8009634 <quorem+0x1c4>
 8009620:	10c00017 	ldw	r3,0(r2)
 8009624:	1800031e 	bne	r3,zero,8009634 <quorem+0x1c4>
 8009628:	10bfff04 	addi	r2,r2,-4
 800962c:	94bfffc4 	addi	r18,r18,-1
 8009630:	a8bffb36 	bltu	r21,r2,8009620 <__alt_data_end+0xfc009620>
 8009634:	84800415 	stw	r18,16(r16)
 8009638:	9805883a 	mov	r2,r19
 800963c:	dfc00817 	ldw	ra,32(sp)
 8009640:	ddc00717 	ldw	r23,28(sp)
 8009644:	dd800617 	ldw	r22,24(sp)
 8009648:	dd400517 	ldw	r21,20(sp)
 800964c:	dd000417 	ldw	r20,16(sp)
 8009650:	dcc00317 	ldw	r19,12(sp)
 8009654:	dc800217 	ldw	r18,8(sp)
 8009658:	dc400117 	ldw	r17,4(sp)
 800965c:	dc000017 	ldw	r16,0(sp)
 8009660:	dec00904 	addi	sp,sp,36
 8009664:	f800283a 	ret
 8009668:	0005883a 	mov	r2,zero
 800966c:	003ff306 	br	800963c <__alt_data_end+0xfc00963c>

08009670 <_dtoa_r>:
 8009670:	20801017 	ldw	r2,64(r4)
 8009674:	deffde04 	addi	sp,sp,-136
 8009678:	dd401d15 	stw	r21,116(sp)
 800967c:	dcc01b15 	stw	r19,108(sp)
 8009680:	dc801a15 	stw	r18,104(sp)
 8009684:	dc401915 	stw	r17,100(sp)
 8009688:	dc001815 	stw	r16,96(sp)
 800968c:	dfc02115 	stw	ra,132(sp)
 8009690:	df002015 	stw	fp,128(sp)
 8009694:	ddc01f15 	stw	r23,124(sp)
 8009698:	dd801e15 	stw	r22,120(sp)
 800969c:	dd001c15 	stw	r20,112(sp)
 80096a0:	d9c00315 	stw	r7,12(sp)
 80096a4:	2021883a 	mov	r16,r4
 80096a8:	302b883a 	mov	r21,r6
 80096ac:	2825883a 	mov	r18,r5
 80096b0:	dc402417 	ldw	r17,144(sp)
 80096b4:	3027883a 	mov	r19,r6
 80096b8:	10000826 	beq	r2,zero,80096dc <_dtoa_r+0x6c>
 80096bc:	21801117 	ldw	r6,68(r4)
 80096c0:	00c00044 	movi	r3,1
 80096c4:	100b883a 	mov	r5,r2
 80096c8:	1986983a 	sll	r3,r3,r6
 80096cc:	11800115 	stw	r6,4(r2)
 80096d0:	10c00215 	stw	r3,8(r2)
 80096d4:	800c5980 	call	800c598 <_Bfree>
 80096d8:	80001015 	stw	zero,64(r16)
 80096dc:	a8002d16 	blt	r21,zero,8009794 <_dtoa_r+0x124>
 80096e0:	88000015 	stw	zero,0(r17)
 80096e4:	a8dffc2c 	andhi	r3,r21,32752
 80096e8:	009ffc34 	movhi	r2,32752
 80096ec:	18801b26 	beq	r3,r2,800975c <_dtoa_r+0xec>
 80096f0:	9009883a 	mov	r4,r18
 80096f4:	980b883a 	mov	r5,r19
 80096f8:	000d883a 	mov	r6,zero
 80096fc:	000f883a 	mov	r7,zero
 8009700:	801231c0 	call	801231c <__eqdf2>
 8009704:	10002a1e 	bne	r2,zero,80097b0 <_dtoa_r+0x140>
 8009708:	d8c02317 	ldw	r3,140(sp)
 800970c:	d9002517 	ldw	r4,148(sp)
 8009710:	00800044 	movi	r2,1
 8009714:	18800015 	stw	r2,0(r3)
 8009718:	2001a226 	beq	r4,zero,8009da4 <_dtoa_r+0x734>
 800971c:	008200b4 	movhi	r2,2050
 8009720:	10814544 	addi	r2,r2,1301
 8009724:	20800015 	stw	r2,0(r4)
 8009728:	10bfffc4 	addi	r2,r2,-1
 800972c:	dfc02117 	ldw	ra,132(sp)
 8009730:	df002017 	ldw	fp,128(sp)
 8009734:	ddc01f17 	ldw	r23,124(sp)
 8009738:	dd801e17 	ldw	r22,120(sp)
 800973c:	dd401d17 	ldw	r21,116(sp)
 8009740:	dd001c17 	ldw	r20,112(sp)
 8009744:	dcc01b17 	ldw	r19,108(sp)
 8009748:	dc801a17 	ldw	r18,104(sp)
 800974c:	dc401917 	ldw	r17,100(sp)
 8009750:	dc001817 	ldw	r16,96(sp)
 8009754:	dec02204 	addi	sp,sp,136
 8009758:	f800283a 	ret
 800975c:	d8c02317 	ldw	r3,140(sp)
 8009760:	0089c3c4 	movi	r2,9999
 8009764:	18800015 	stw	r2,0(r3)
 8009768:	90017c26 	beq	r18,zero,8009d5c <_dtoa_r+0x6ec>
 800976c:	008200b4 	movhi	r2,2050
 8009770:	10815904 	addi	r2,r2,1380
 8009774:	d9002517 	ldw	r4,148(sp)
 8009778:	203fec26 	beq	r4,zero,800972c <__alt_data_end+0xfc00972c>
 800977c:	10c000c7 	ldb	r3,3(r2)
 8009780:	18017d1e 	bne	r3,zero,8009d78 <_dtoa_r+0x708>
 8009784:	10c000c4 	addi	r3,r2,3
 8009788:	d9802517 	ldw	r6,148(sp)
 800978c:	30c00015 	stw	r3,0(r6)
 8009790:	003fe606 	br	800972c <__alt_data_end+0xfc00972c>
 8009794:	04e00034 	movhi	r19,32768
 8009798:	9cffffc4 	addi	r19,r19,-1
 800979c:	00800044 	movi	r2,1
 80097a0:	ace6703a 	and	r19,r21,r19
 80097a4:	88800015 	stw	r2,0(r17)
 80097a8:	982b883a 	mov	r21,r19
 80097ac:	003fcd06 	br	80096e4 <__alt_data_end+0xfc0096e4>
 80097b0:	d8800204 	addi	r2,sp,8
 80097b4:	a822d53a 	srli	r17,r21,20
 80097b8:	d8800015 	stw	r2,0(sp)
 80097bc:	8009883a 	mov	r4,r16
 80097c0:	900b883a 	mov	r5,r18
 80097c4:	980d883a 	mov	r6,r19
 80097c8:	d9c00104 	addi	r7,sp,4
 80097cc:	800d1240 	call	800d124 <__d2b>
 80097d0:	1039883a 	mov	fp,r2
 80097d4:	88016a1e 	bne	r17,zero,8009d80 <_dtoa_r+0x710>
 80097d8:	dd000217 	ldw	r20,8(sp)
 80097dc:	dc400117 	ldw	r17,4(sp)
 80097e0:	00befbc4 	movi	r2,-1041
 80097e4:	a463883a 	add	r17,r20,r17
 80097e8:	8882ea16 	blt	r17,r2,800a394 <_dtoa_r+0xd24>
 80097ec:	00bf0384 	movi	r2,-1010
 80097f0:	1445c83a 	sub	r2,r2,r17
 80097f4:	89010484 	addi	r4,r17,1042
 80097f8:	a8aa983a 	sll	r21,r21,r2
 80097fc:	9108d83a 	srl	r4,r18,r4
 8009800:	a908b03a 	or	r4,r21,r4
 8009804:	8012c700 	call	8012c70 <__floatunsidf>
 8009808:	017f8434 	movhi	r5,65040
 800980c:	01800044 	movi	r6,1
 8009810:	1009883a 	mov	r4,r2
 8009814:	194b883a 	add	r5,r3,r5
 8009818:	8c7fffc4 	addi	r17,r17,-1
 800981c:	d9800f15 	stw	r6,60(sp)
 8009820:	000d883a 	mov	r6,zero
 8009824:	01cffe34 	movhi	r7,16376
 8009828:	80123a00 	call	80123a0 <__subdf3>
 800982c:	0198dbf4 	movhi	r6,25455
 8009830:	01cff4f4 	movhi	r7,16339
 8009834:	1009883a 	mov	r4,r2
 8009838:	180b883a 	mov	r5,r3
 800983c:	3190d844 	addi	r6,r6,17249
 8009840:	39e1e9c4 	addi	r7,r7,-30809
 8009844:	8003f880 	call	8003f88 <__muldf3>
 8009848:	01a2d874 	movhi	r6,35681
 800984c:	01cff1f4 	movhi	r7,16327
 8009850:	180b883a 	mov	r5,r3
 8009854:	31b22cc4 	addi	r6,r6,-14157
 8009858:	39e28a04 	addi	r7,r7,-30168
 800985c:	1009883a 	mov	r4,r2
 8009860:	800352c0 	call	800352c <__adddf3>
 8009864:	8809883a 	mov	r4,r17
 8009868:	102d883a 	mov	r22,r2
 800986c:	182b883a 	mov	r21,r3
 8009870:	80047340 	call	8004734 <__floatsidf>
 8009874:	019427f4 	movhi	r6,20639
 8009878:	01cff4f4 	movhi	r7,16339
 800987c:	1009883a 	mov	r4,r2
 8009880:	180b883a 	mov	r5,r3
 8009884:	319e7ec4 	addi	r6,r6,31227
 8009888:	39d104c4 	addi	r7,r7,17427
 800988c:	8003f880 	call	8003f88 <__muldf3>
 8009890:	b009883a 	mov	r4,r22
 8009894:	a80b883a 	mov	r5,r21
 8009898:	100d883a 	mov	r6,r2
 800989c:	180f883a 	mov	r7,r3
 80098a0:	800352c0 	call	800352c <__adddf3>
 80098a4:	1009883a 	mov	r4,r2
 80098a8:	180b883a 	mov	r5,r3
 80098ac:	102d883a 	mov	r22,r2
 80098b0:	182b883a 	mov	r21,r3
 80098b4:	80046ac0 	call	80046ac <__fixdfsi>
 80098b8:	b009883a 	mov	r4,r22
 80098bc:	a80b883a 	mov	r5,r21
 80098c0:	000d883a 	mov	r6,zero
 80098c4:	000f883a 	mov	r7,zero
 80098c8:	d8800515 	stw	r2,20(sp)
 80098cc:	8003ea80 	call	8003ea8 <__ledf2>
 80098d0:	10023116 	blt	r2,zero,800a198 <_dtoa_r+0xb28>
 80098d4:	d8c00517 	ldw	r3,20(sp)
 80098d8:	00800584 	movi	r2,22
 80098dc:	10c21f36 	bltu	r2,r3,800a15c <_dtoa_r+0xaec>
 80098e0:	180490fa 	slli	r2,r3,3
 80098e4:	00c200b4 	movhi	r3,2050
 80098e8:	18c17404 	addi	r3,r3,1488
 80098ec:	1885883a 	add	r2,r3,r2
 80098f0:	11000017 	ldw	r4,0(r2)
 80098f4:	11400117 	ldw	r5,4(r2)
 80098f8:	900d883a 	mov	r6,r18
 80098fc:	980f883a 	mov	r7,r19
 8009900:	8003dc80 	call	8003dc8 <__gedf2>
 8009904:	0082a70e 	bge	zero,r2,800a3a4 <_dtoa_r+0xd34>
 8009908:	d9000517 	ldw	r4,20(sp)
 800990c:	d8000c15 	stw	zero,48(sp)
 8009910:	213fffc4 	addi	r4,r4,-1
 8009914:	d9000515 	stw	r4,20(sp)
 8009918:	a463c83a 	sub	r17,r20,r17
 800991c:	8dbfffc4 	addi	r22,r17,-1
 8009920:	b0021916 	blt	r22,zero,800a188 <_dtoa_r+0xb18>
 8009924:	d8000815 	stw	zero,32(sp)
 8009928:	d8800517 	ldw	r2,20(sp)
 800992c:	10020e16 	blt	r2,zero,800a168 <_dtoa_r+0xaf8>
 8009930:	b0ad883a 	add	r22,r22,r2
 8009934:	d8800a15 	stw	r2,40(sp)
 8009938:	d8000915 	stw	zero,36(sp)
 800993c:	d8c00317 	ldw	r3,12(sp)
 8009940:	00800244 	movi	r2,9
 8009944:	10c11a36 	bltu	r2,r3,8009db0 <_dtoa_r+0x740>
 8009948:	00800144 	movi	r2,5
 800994c:	10c4fc0e 	bge	r2,r3,800ad40 <_dtoa_r+0x16d0>
 8009950:	18ffff04 	addi	r3,r3,-4
 8009954:	d8c00315 	stw	r3,12(sp)
 8009958:	0029883a 	mov	r20,zero
 800995c:	d9800317 	ldw	r6,12(sp)
 8009960:	008000c4 	movi	r2,3
 8009964:	3083bd26 	beq	r6,r2,800a85c <_dtoa_r+0x11ec>
 8009968:	1183670e 	bge	r2,r6,800a708 <_dtoa_r+0x1098>
 800996c:	d8c00317 	ldw	r3,12(sp)
 8009970:	00800104 	movi	r2,4
 8009974:	1882e726 	beq	r3,r2,800a514 <_dtoa_r+0xea4>
 8009978:	00800144 	movi	r2,5
 800997c:	1884f21e 	bne	r3,r2,800ad48 <_dtoa_r+0x16d8>
 8009980:	00800044 	movi	r2,1
 8009984:	d8800b15 	stw	r2,44(sp)
 8009988:	d8c02217 	ldw	r3,136(sp)
 800998c:	d9000517 	ldw	r4,20(sp)
 8009990:	1907883a 	add	r3,r3,r4
 8009994:	19800044 	addi	r6,r3,1
 8009998:	d8c00d15 	stw	r3,52(sp)
 800999c:	d9800615 	stw	r6,24(sp)
 80099a0:	0183c30e 	bge	zero,r6,800a8b0 <_dtoa_r+0x1240>
 80099a4:	d9800617 	ldw	r6,24(sp)
 80099a8:	3023883a 	mov	r17,r6
 80099ac:	80001115 	stw	zero,68(r16)
 80099b0:	008005c4 	movi	r2,23
 80099b4:	1184f62e 	bgeu	r2,r6,800ad90 <_dtoa_r+0x1720>
 80099b8:	00c00044 	movi	r3,1
 80099bc:	00800104 	movi	r2,4
 80099c0:	1085883a 	add	r2,r2,r2
 80099c4:	11000504 	addi	r4,r2,20
 80099c8:	180b883a 	mov	r5,r3
 80099cc:	18c00044 	addi	r3,r3,1
 80099d0:	313ffb2e 	bgeu	r6,r4,80099c0 <__alt_data_end+0xfc0099c0>
 80099d4:	81401115 	stw	r5,68(r16)
 80099d8:	8009883a 	mov	r4,r16
 80099dc:	800c4f00 	call	800c4f0 <_Balloc>
 80099e0:	d8800715 	stw	r2,28(sp)
 80099e4:	80801015 	stw	r2,64(r16)
 80099e8:	00800384 	movi	r2,14
 80099ec:	1440fd36 	bltu	r2,r17,8009de4 <_dtoa_r+0x774>
 80099f0:	a000fc26 	beq	r20,zero,8009de4 <_dtoa_r+0x774>
 80099f4:	d8800517 	ldw	r2,20(sp)
 80099f8:	0083b90e 	bge	zero,r2,800a8e0 <_dtoa_r+0x1270>
 80099fc:	d8c00517 	ldw	r3,20(sp)
 8009a00:	108003cc 	andi	r2,r2,15
 8009a04:	100490fa 	slli	r2,r2,3
 8009a08:	182fd13a 	srai	r23,r3,4
 8009a0c:	00c200b4 	movhi	r3,2050
 8009a10:	18c17404 	addi	r3,r3,1488
 8009a14:	1885883a 	add	r2,r3,r2
 8009a18:	b8c0040c 	andi	r3,r23,16
 8009a1c:	12c00017 	ldw	r11,0(r2)
 8009a20:	12800117 	ldw	r10,4(r2)
 8009a24:	18039726 	beq	r3,zero,800a884 <_dtoa_r+0x1214>
 8009a28:	008200b4 	movhi	r2,2050
 8009a2c:	10816a04 	addi	r2,r2,1448
 8009a30:	11800817 	ldw	r6,32(r2)
 8009a34:	11c00917 	ldw	r7,36(r2)
 8009a38:	9009883a 	mov	r4,r18
 8009a3c:	980b883a 	mov	r5,r19
 8009a40:	da801615 	stw	r10,88(sp)
 8009a44:	dac01515 	stw	r11,84(sp)
 8009a48:	8011a500 	call	8011a50 <__divdf3>
 8009a4c:	da801617 	ldw	r10,88(sp)
 8009a50:	dac01517 	ldw	r11,84(sp)
 8009a54:	bdc003cc 	andi	r23,r23,15
 8009a58:	044000c4 	movi	r17,3
 8009a5c:	d8800e15 	stw	r2,56(sp)
 8009a60:	182b883a 	mov	r21,r3
 8009a64:	b8001126 	beq	r23,zero,8009aac <_dtoa_r+0x43c>
 8009a68:	050200b4 	movhi	r20,2050
 8009a6c:	a5016a04 	addi	r20,r20,1448
 8009a70:	5805883a 	mov	r2,r11
 8009a74:	5007883a 	mov	r3,r10
 8009a78:	b980004c 	andi	r6,r23,1
 8009a7c:	1009883a 	mov	r4,r2
 8009a80:	b82fd07a 	srai	r23,r23,1
 8009a84:	180b883a 	mov	r5,r3
 8009a88:	30000426 	beq	r6,zero,8009a9c <_dtoa_r+0x42c>
 8009a8c:	a1800017 	ldw	r6,0(r20)
 8009a90:	a1c00117 	ldw	r7,4(r20)
 8009a94:	8c400044 	addi	r17,r17,1
 8009a98:	8003f880 	call	8003f88 <__muldf3>
 8009a9c:	a5000204 	addi	r20,r20,8
 8009aa0:	b83ff51e 	bne	r23,zero,8009a78 <__alt_data_end+0xfc009a78>
 8009aa4:	1017883a 	mov	r11,r2
 8009aa8:	1815883a 	mov	r10,r3
 8009aac:	d9000e17 	ldw	r4,56(sp)
 8009ab0:	a80b883a 	mov	r5,r21
 8009ab4:	580d883a 	mov	r6,r11
 8009ab8:	500f883a 	mov	r7,r10
 8009abc:	8011a500 	call	8011a50 <__divdf3>
 8009ac0:	1029883a 	mov	r20,r2
 8009ac4:	182b883a 	mov	r21,r3
 8009ac8:	d9800c17 	ldw	r6,48(sp)
 8009acc:	30000626 	beq	r6,zero,8009ae8 <_dtoa_r+0x478>
 8009ad0:	a009883a 	mov	r4,r20
 8009ad4:	a80b883a 	mov	r5,r21
 8009ad8:	000d883a 	mov	r6,zero
 8009adc:	01cffc34 	movhi	r7,16368
 8009ae0:	8003ea80 	call	8003ea8 <__ledf2>
 8009ae4:	10043216 	blt	r2,zero,800abb0 <_dtoa_r+0x1540>
 8009ae8:	8809883a 	mov	r4,r17
 8009aec:	80047340 	call	8004734 <__floatsidf>
 8009af0:	1009883a 	mov	r4,r2
 8009af4:	180b883a 	mov	r5,r3
 8009af8:	a00d883a 	mov	r6,r20
 8009afc:	a80f883a 	mov	r7,r21
 8009b00:	8003f880 	call	8003f88 <__muldf3>
 8009b04:	000d883a 	mov	r6,zero
 8009b08:	1009883a 	mov	r4,r2
 8009b0c:	180b883a 	mov	r5,r3
 8009b10:	01d00734 	movhi	r7,16412
 8009b14:	800352c0 	call	800352c <__adddf3>
 8009b18:	1023883a 	mov	r17,r2
 8009b1c:	d9800617 	ldw	r6,24(sp)
 8009b20:	00bf3034 	movhi	r2,64704
 8009b24:	1885883a 	add	r2,r3,r2
 8009b28:	d8800e15 	stw	r2,56(sp)
 8009b2c:	30032e26 	beq	r6,zero,800a7e8 <_dtoa_r+0x1178>
 8009b30:	d8c00517 	ldw	r3,20(sp)
 8009b34:	da800617 	ldw	r10,24(sp)
 8009b38:	d8c01215 	stw	r3,72(sp)
 8009b3c:	d9000b17 	ldw	r4,44(sp)
 8009b40:	2003b026 	beq	r4,zero,800aa04 <_dtoa_r+0x1394>
 8009b44:	50bfffc4 	addi	r2,r10,-1
 8009b48:	100490fa 	slli	r2,r2,3
 8009b4c:	00c200b4 	movhi	r3,2050
 8009b50:	18c17404 	addi	r3,r3,1488
 8009b54:	1885883a 	add	r2,r3,r2
 8009b58:	11800017 	ldw	r6,0(r2)
 8009b5c:	11c00117 	ldw	r7,4(r2)
 8009b60:	d8800717 	ldw	r2,28(sp)
 8009b64:	0009883a 	mov	r4,zero
 8009b68:	014ff834 	movhi	r5,16352
 8009b6c:	da801615 	stw	r10,88(sp)
 8009b70:	15c00044 	addi	r23,r2,1
 8009b74:	8011a500 	call	8011a50 <__divdf3>
 8009b78:	d9c00e17 	ldw	r7,56(sp)
 8009b7c:	880d883a 	mov	r6,r17
 8009b80:	1009883a 	mov	r4,r2
 8009b84:	180b883a 	mov	r5,r3
 8009b88:	80123a00 	call	80123a0 <__subdf3>
 8009b8c:	a80b883a 	mov	r5,r21
 8009b90:	a009883a 	mov	r4,r20
 8009b94:	d8c01015 	stw	r3,64(sp)
 8009b98:	d8800e15 	stw	r2,56(sp)
 8009b9c:	80046ac0 	call	80046ac <__fixdfsi>
 8009ba0:	1009883a 	mov	r4,r2
 8009ba4:	d8801715 	stw	r2,92(sp)
 8009ba8:	80047340 	call	8004734 <__floatsidf>
 8009bac:	a009883a 	mov	r4,r20
 8009bb0:	a80b883a 	mov	r5,r21
 8009bb4:	100d883a 	mov	r6,r2
 8009bb8:	180f883a 	mov	r7,r3
 8009bbc:	80123a00 	call	80123a0 <__subdf3>
 8009bc0:	da001717 	ldw	r8,92(sp)
 8009bc4:	1829883a 	mov	r20,r3
 8009bc8:	d8c00717 	ldw	r3,28(sp)
 8009bcc:	d9000e17 	ldw	r4,56(sp)
 8009bd0:	d9401017 	ldw	r5,64(sp)
 8009bd4:	42000c04 	addi	r8,r8,48
 8009bd8:	1023883a 	mov	r17,r2
 8009bdc:	1a000005 	stb	r8,0(r3)
 8009be0:	880d883a 	mov	r6,r17
 8009be4:	a00f883a 	mov	r7,r20
 8009be8:	402b883a 	mov	r21,r8
 8009bec:	8003dc80 	call	8003dc8 <__gedf2>
 8009bf0:	00844516 	blt	zero,r2,800ad08 <_dtoa_r+0x1698>
 8009bf4:	0009883a 	mov	r4,zero
 8009bf8:	014ffc34 	movhi	r5,16368
 8009bfc:	880d883a 	mov	r6,r17
 8009c00:	a00f883a 	mov	r7,r20
 8009c04:	80123a00 	call	80123a0 <__subdf3>
 8009c08:	d9000e17 	ldw	r4,56(sp)
 8009c0c:	d9401017 	ldw	r5,64(sp)
 8009c10:	100d883a 	mov	r6,r2
 8009c14:	180f883a 	mov	r7,r3
 8009c18:	8003dc80 	call	8003dc8 <__gedf2>
 8009c1c:	da801617 	ldw	r10,88(sp)
 8009c20:	00843616 	blt	zero,r2,800acfc <_dtoa_r+0x168c>
 8009c24:	00800044 	movi	r2,1
 8009c28:	12806e0e 	bge	r2,r10,8009de4 <_dtoa_r+0x774>
 8009c2c:	d9000717 	ldw	r4,28(sp)
 8009c30:	dd801315 	stw	r22,76(sp)
 8009c34:	dc001115 	stw	r16,68(sp)
 8009c38:	2295883a 	add	r10,r4,r10
 8009c3c:	dcc01415 	stw	r19,80(sp)
 8009c40:	502d883a 	mov	r22,r10
 8009c44:	dcc01017 	ldw	r19,64(sp)
 8009c48:	b821883a 	mov	r16,r23
 8009c4c:	dc801015 	stw	r18,64(sp)
 8009c50:	dc800e17 	ldw	r18,56(sp)
 8009c54:	00000906 	br	8009c7c <_dtoa_r+0x60c>
 8009c58:	80123a00 	call	80123a0 <__subdf3>
 8009c5c:	1009883a 	mov	r4,r2
 8009c60:	180b883a 	mov	r5,r3
 8009c64:	900d883a 	mov	r6,r18
 8009c68:	980f883a 	mov	r7,r19
 8009c6c:	8003ea80 	call	8003ea8 <__ledf2>
 8009c70:	10040e16 	blt	r2,zero,800acac <_dtoa_r+0x163c>
 8009c74:	b821883a 	mov	r16,r23
 8009c78:	bd841026 	beq	r23,r22,800acbc <_dtoa_r+0x164c>
 8009c7c:	9009883a 	mov	r4,r18
 8009c80:	980b883a 	mov	r5,r19
 8009c84:	000d883a 	mov	r6,zero
 8009c88:	01d00934 	movhi	r7,16420
 8009c8c:	8003f880 	call	8003f88 <__muldf3>
 8009c90:	000d883a 	mov	r6,zero
 8009c94:	01d00934 	movhi	r7,16420
 8009c98:	8809883a 	mov	r4,r17
 8009c9c:	a00b883a 	mov	r5,r20
 8009ca0:	1025883a 	mov	r18,r2
 8009ca4:	1827883a 	mov	r19,r3
 8009ca8:	8003f880 	call	8003f88 <__muldf3>
 8009cac:	180b883a 	mov	r5,r3
 8009cb0:	1009883a 	mov	r4,r2
 8009cb4:	1823883a 	mov	r17,r3
 8009cb8:	1029883a 	mov	r20,r2
 8009cbc:	80046ac0 	call	80046ac <__fixdfsi>
 8009cc0:	1009883a 	mov	r4,r2
 8009cc4:	102b883a 	mov	r21,r2
 8009cc8:	80047340 	call	8004734 <__floatsidf>
 8009ccc:	a009883a 	mov	r4,r20
 8009cd0:	880b883a 	mov	r5,r17
 8009cd4:	100d883a 	mov	r6,r2
 8009cd8:	180f883a 	mov	r7,r3
 8009cdc:	80123a00 	call	80123a0 <__subdf3>
 8009ce0:	ad400c04 	addi	r21,r21,48
 8009ce4:	1009883a 	mov	r4,r2
 8009ce8:	180b883a 	mov	r5,r3
 8009cec:	900d883a 	mov	r6,r18
 8009cf0:	980f883a 	mov	r7,r19
 8009cf4:	85400005 	stb	r21,0(r16)
 8009cf8:	1023883a 	mov	r17,r2
 8009cfc:	1829883a 	mov	r20,r3
 8009d00:	8003ea80 	call	8003ea8 <__ledf2>
 8009d04:	bdc00044 	addi	r23,r23,1
 8009d08:	0009883a 	mov	r4,zero
 8009d0c:	014ffc34 	movhi	r5,16368
 8009d10:	880d883a 	mov	r6,r17
 8009d14:	a00f883a 	mov	r7,r20
 8009d18:	103fcf0e 	bge	r2,zero,8009c58 <__alt_data_end+0xfc009c58>
 8009d1c:	d9801217 	ldw	r6,72(sp)
 8009d20:	dc001117 	ldw	r16,68(sp)
 8009d24:	d9800515 	stw	r6,20(sp)
 8009d28:	8009883a 	mov	r4,r16
 8009d2c:	e00b883a 	mov	r5,fp
 8009d30:	800c5980 	call	800c598 <_Bfree>
 8009d34:	d8c00517 	ldw	r3,20(sp)
 8009d38:	d9002317 	ldw	r4,140(sp)
 8009d3c:	d9802517 	ldw	r6,148(sp)
 8009d40:	b8000005 	stb	zero,0(r23)
 8009d44:	18800044 	addi	r2,r3,1
 8009d48:	20800015 	stw	r2,0(r4)
 8009d4c:	30027226 	beq	r6,zero,800a718 <_dtoa_r+0x10a8>
 8009d50:	35c00015 	stw	r23,0(r6)
 8009d54:	d8800717 	ldw	r2,28(sp)
 8009d58:	003e7406 	br	800972c <__alt_data_end+0xfc00972c>
 8009d5c:	00800434 	movhi	r2,16
 8009d60:	10bfffc4 	addi	r2,r2,-1
 8009d64:	a8aa703a 	and	r21,r21,r2
 8009d68:	a83e801e 	bne	r21,zero,800976c <__alt_data_end+0xfc00976c>
 8009d6c:	008200b4 	movhi	r2,2050
 8009d70:	10815604 	addi	r2,r2,1368
 8009d74:	003e7f06 	br	8009774 <__alt_data_end+0xfc009774>
 8009d78:	10c00204 	addi	r3,r2,8
 8009d7c:	003e8206 	br	8009788 <__alt_data_end+0xfc009788>
 8009d80:	01400434 	movhi	r5,16
 8009d84:	297fffc4 	addi	r5,r5,-1
 8009d88:	994a703a 	and	r5,r19,r5
 8009d8c:	9009883a 	mov	r4,r18
 8009d90:	8c7f0044 	addi	r17,r17,-1023
 8009d94:	294ffc34 	orhi	r5,r5,16368
 8009d98:	dd000217 	ldw	r20,8(sp)
 8009d9c:	d8000f15 	stw	zero,60(sp)
 8009da0:	003e9f06 	br	8009820 <__alt_data_end+0xfc009820>
 8009da4:	008200b4 	movhi	r2,2050
 8009da8:	10814504 	addi	r2,r2,1300
 8009dac:	003e5f06 	br	800972c <__alt_data_end+0xfc00972c>
 8009db0:	80001115 	stw	zero,68(r16)
 8009db4:	8009883a 	mov	r4,r16
 8009db8:	000b883a 	mov	r5,zero
 8009dbc:	800c4f00 	call	800c4f0 <_Balloc>
 8009dc0:	01bfffc4 	movi	r6,-1
 8009dc4:	d8800715 	stw	r2,28(sp)
 8009dc8:	80801015 	stw	r2,64(r16)
 8009dcc:	00800044 	movi	r2,1
 8009dd0:	d9800615 	stw	r6,24(sp)
 8009dd4:	d8800b15 	stw	r2,44(sp)
 8009dd8:	d8002215 	stw	zero,136(sp)
 8009ddc:	d9800d15 	stw	r6,52(sp)
 8009de0:	d8000315 	stw	zero,12(sp)
 8009de4:	d8800117 	ldw	r2,4(sp)
 8009de8:	10008e16 	blt	r2,zero,800a024 <_dtoa_r+0x9b4>
 8009dec:	d9000517 	ldw	r4,20(sp)
 8009df0:	00c00384 	movi	r3,14
 8009df4:	19008b16 	blt	r3,r4,800a024 <_dtoa_r+0x9b4>
 8009df8:	200490fa 	slli	r2,r4,3
 8009dfc:	00c200b4 	movhi	r3,2050
 8009e00:	d9802217 	ldw	r6,136(sp)
 8009e04:	18c17404 	addi	r3,r3,1488
 8009e08:	1885883a 	add	r2,r3,r2
 8009e0c:	14400017 	ldw	r17,0(r2)
 8009e10:	15000117 	ldw	r20,4(r2)
 8009e14:	3001c716 	blt	r6,zero,800a534 <_dtoa_r+0xec4>
 8009e18:	880d883a 	mov	r6,r17
 8009e1c:	a00f883a 	mov	r7,r20
 8009e20:	9009883a 	mov	r4,r18
 8009e24:	980b883a 	mov	r5,r19
 8009e28:	8011a500 	call	8011a50 <__divdf3>
 8009e2c:	180b883a 	mov	r5,r3
 8009e30:	1009883a 	mov	r4,r2
 8009e34:	80046ac0 	call	80046ac <__fixdfsi>
 8009e38:	1009883a 	mov	r4,r2
 8009e3c:	102d883a 	mov	r22,r2
 8009e40:	80047340 	call	8004734 <__floatsidf>
 8009e44:	1009883a 	mov	r4,r2
 8009e48:	180b883a 	mov	r5,r3
 8009e4c:	880d883a 	mov	r6,r17
 8009e50:	a00f883a 	mov	r7,r20
 8009e54:	8003f880 	call	8003f88 <__muldf3>
 8009e58:	9009883a 	mov	r4,r18
 8009e5c:	980b883a 	mov	r5,r19
 8009e60:	100d883a 	mov	r6,r2
 8009e64:	180f883a 	mov	r7,r3
 8009e68:	80123a00 	call	80123a0 <__subdf3>
 8009e6c:	d9000717 	ldw	r4,28(sp)
 8009e70:	d9800617 	ldw	r6,24(sp)
 8009e74:	180b883a 	mov	r5,r3
 8009e78:	b0c00c04 	addi	r3,r22,48
 8009e7c:	20c00005 	stb	r3,0(r4)
 8009e80:	25c00044 	addi	r23,r4,1
 8009e84:	01000044 	movi	r4,1
 8009e88:	1011883a 	mov	r8,r2
 8009e8c:	2807883a 	mov	r3,r5
 8009e90:	31003d26 	beq	r6,r4,8009f88 <_dtoa_r+0x918>
 8009e94:	000d883a 	mov	r6,zero
 8009e98:	01d00934 	movhi	r7,16420
 8009e9c:	1009883a 	mov	r4,r2
 8009ea0:	8003f880 	call	8003f88 <__muldf3>
 8009ea4:	1009883a 	mov	r4,r2
 8009ea8:	180b883a 	mov	r5,r3
 8009eac:	000d883a 	mov	r6,zero
 8009eb0:	000f883a 	mov	r7,zero
 8009eb4:	1027883a 	mov	r19,r2
 8009eb8:	182b883a 	mov	r21,r3
 8009ebc:	801231c0 	call	801231c <__eqdf2>
 8009ec0:	103f9926 	beq	r2,zero,8009d28 <__alt_data_end+0xfc009d28>
 8009ec4:	d8c00617 	ldw	r3,24(sp)
 8009ec8:	d9000717 	ldw	r4,28(sp)
 8009ecc:	b825883a 	mov	r18,r23
 8009ed0:	18bfffc4 	addi	r2,r3,-1
 8009ed4:	20ad883a 	add	r22,r4,r2
 8009ed8:	dc000315 	stw	r16,12(sp)
 8009edc:	00000a06 	br	8009f08 <_dtoa_r+0x898>
 8009ee0:	8003f880 	call	8003f88 <__muldf3>
 8009ee4:	1009883a 	mov	r4,r2
 8009ee8:	180b883a 	mov	r5,r3
 8009eec:	000d883a 	mov	r6,zero
 8009ef0:	000f883a 	mov	r7,zero
 8009ef4:	1027883a 	mov	r19,r2
 8009ef8:	182b883a 	mov	r21,r3
 8009efc:	b825883a 	mov	r18,r23
 8009f00:	801231c0 	call	801231c <__eqdf2>
 8009f04:	10022626 	beq	r2,zero,800a7a0 <_dtoa_r+0x1130>
 8009f08:	880d883a 	mov	r6,r17
 8009f0c:	a00f883a 	mov	r7,r20
 8009f10:	9809883a 	mov	r4,r19
 8009f14:	a80b883a 	mov	r5,r21
 8009f18:	8011a500 	call	8011a50 <__divdf3>
 8009f1c:	180b883a 	mov	r5,r3
 8009f20:	1009883a 	mov	r4,r2
 8009f24:	80046ac0 	call	80046ac <__fixdfsi>
 8009f28:	1009883a 	mov	r4,r2
 8009f2c:	1021883a 	mov	r16,r2
 8009f30:	80047340 	call	8004734 <__floatsidf>
 8009f34:	1009883a 	mov	r4,r2
 8009f38:	180b883a 	mov	r5,r3
 8009f3c:	880d883a 	mov	r6,r17
 8009f40:	a00f883a 	mov	r7,r20
 8009f44:	8003f880 	call	8003f88 <__muldf3>
 8009f48:	9809883a 	mov	r4,r19
 8009f4c:	a80b883a 	mov	r5,r21
 8009f50:	100d883a 	mov	r6,r2
 8009f54:	180f883a 	mov	r7,r3
 8009f58:	80123a00 	call	80123a0 <__subdf3>
 8009f5c:	82000c04 	addi	r8,r16,48
 8009f60:	92000005 	stb	r8,0(r18)
 8009f64:	1009883a 	mov	r4,r2
 8009f68:	180b883a 	mov	r5,r3
 8009f6c:	000d883a 	mov	r6,zero
 8009f70:	01d00934 	movhi	r7,16420
 8009f74:	1011883a 	mov	r8,r2
 8009f78:	bdc00044 	addi	r23,r23,1
 8009f7c:	95bfd81e 	bne	r18,r22,8009ee0 <__alt_data_end+0xfc009ee0>
 8009f80:	802d883a 	mov	r22,r16
 8009f84:	dc000317 	ldw	r16,12(sp)
 8009f88:	4009883a 	mov	r4,r8
 8009f8c:	180b883a 	mov	r5,r3
 8009f90:	400d883a 	mov	r6,r8
 8009f94:	180f883a 	mov	r7,r3
 8009f98:	800352c0 	call	800352c <__adddf3>
 8009f9c:	8809883a 	mov	r4,r17
 8009fa0:	a00b883a 	mov	r5,r20
 8009fa4:	100d883a 	mov	r6,r2
 8009fa8:	180f883a 	mov	r7,r3
 8009fac:	1027883a 	mov	r19,r2
 8009fb0:	1825883a 	mov	r18,r3
 8009fb4:	8003ea80 	call	8003ea8 <__ledf2>
 8009fb8:	10000816 	blt	r2,zero,8009fdc <_dtoa_r+0x96c>
 8009fbc:	8809883a 	mov	r4,r17
 8009fc0:	a00b883a 	mov	r5,r20
 8009fc4:	980d883a 	mov	r6,r19
 8009fc8:	900f883a 	mov	r7,r18
 8009fcc:	801231c0 	call	801231c <__eqdf2>
 8009fd0:	103f551e 	bne	r2,zero,8009d28 <__alt_data_end+0xfc009d28>
 8009fd4:	b580004c 	andi	r22,r22,1
 8009fd8:	b03f5326 	beq	r22,zero,8009d28 <__alt_data_end+0xfc009d28>
 8009fdc:	bd7fffc3 	ldbu	r21,-1(r23)
 8009fe0:	b8bfffc4 	addi	r2,r23,-1
 8009fe4:	1007883a 	mov	r3,r2
 8009fe8:	01400e44 	movi	r5,57
 8009fec:	d9800717 	ldw	r6,28(sp)
 8009ff0:	00000506 	br	800a008 <_dtoa_r+0x998>
 8009ff4:	18ffffc4 	addi	r3,r3,-1
 8009ff8:	30825e26 	beq	r6,r2,800a974 <_dtoa_r+0x1304>
 8009ffc:	1d400003 	ldbu	r21,0(r3)
 800a000:	102f883a 	mov	r23,r2
 800a004:	10bfffc4 	addi	r2,r2,-1
 800a008:	a9003fcc 	andi	r4,r21,255
 800a00c:	2100201c 	xori	r4,r4,128
 800a010:	213fe004 	addi	r4,r4,-128
 800a014:	217ff726 	beq	r4,r5,8009ff4 <__alt_data_end+0xfc009ff4>
 800a018:	aa000044 	addi	r8,r21,1
 800a01c:	12000005 	stb	r8,0(r2)
 800a020:	003f4106 	br	8009d28 <__alt_data_end+0xfc009d28>
 800a024:	d8c00b17 	ldw	r3,44(sp)
 800a028:	18006726 	beq	r3,zero,800a1c8 <_dtoa_r+0xb58>
 800a02c:	d9000317 	ldw	r4,12(sp)
 800a030:	00c00044 	movi	r3,1
 800a034:	19016a0e 	bge	r3,r4,800a5e0 <_dtoa_r+0xf70>
 800a038:	d8800617 	ldw	r2,24(sp)
 800a03c:	d8c00917 	ldw	r3,36(sp)
 800a040:	157fffc4 	addi	r21,r2,-1
 800a044:	1d420716 	blt	r3,r21,800a864 <_dtoa_r+0x11f4>
 800a048:	1d6bc83a 	sub	r21,r3,r21
 800a04c:	d8800617 	ldw	r2,24(sp)
 800a050:	1002c716 	blt	r2,zero,800ab70 <_dtoa_r+0x1500>
 800a054:	dd000817 	ldw	r20,32(sp)
 800a058:	d8800617 	ldw	r2,24(sp)
 800a05c:	d9800817 	ldw	r6,32(sp)
 800a060:	8009883a 	mov	r4,r16
 800a064:	01400044 	movi	r5,1
 800a068:	308d883a 	add	r6,r6,r2
 800a06c:	d9800815 	stw	r6,32(sp)
 800a070:	b0ad883a 	add	r22,r22,r2
 800a074:	800c8f00 	call	800c8f0 <__i2b>
 800a078:	1023883a 	mov	r17,r2
 800a07c:	a0000826 	beq	r20,zero,800a0a0 <_dtoa_r+0xa30>
 800a080:	0580070e 	bge	zero,r22,800a0a0 <_dtoa_r+0xa30>
 800a084:	b005883a 	mov	r2,r22
 800a088:	a5812016 	blt	r20,r22,800a50c <_dtoa_r+0xe9c>
 800a08c:	d8c00817 	ldw	r3,32(sp)
 800a090:	a0a9c83a 	sub	r20,r20,r2
 800a094:	b0adc83a 	sub	r22,r22,r2
 800a098:	1887c83a 	sub	r3,r3,r2
 800a09c:	d8c00815 	stw	r3,32(sp)
 800a0a0:	d9000917 	ldw	r4,36(sp)
 800a0a4:	0100140e 	bge	zero,r4,800a0f8 <_dtoa_r+0xa88>
 800a0a8:	d9800b17 	ldw	r6,44(sp)
 800a0ac:	3001e526 	beq	r6,zero,800a844 <_dtoa_r+0x11d4>
 800a0b0:	05400e0e 	bge	zero,r21,800a0ec <_dtoa_r+0xa7c>
 800a0b4:	880b883a 	mov	r5,r17
 800a0b8:	8009883a 	mov	r4,r16
 800a0bc:	a80d883a 	mov	r6,r21
 800a0c0:	800cb280 	call	800cb28 <__pow5mult>
 800a0c4:	e00d883a 	mov	r6,fp
 800a0c8:	8009883a 	mov	r4,r16
 800a0cc:	100b883a 	mov	r5,r2
 800a0d0:	1023883a 	mov	r17,r2
 800a0d4:	800c92c0 	call	800c92c <__multiply>
 800a0d8:	102f883a 	mov	r23,r2
 800a0dc:	e00b883a 	mov	r5,fp
 800a0e0:	8009883a 	mov	r4,r16
 800a0e4:	800c5980 	call	800c598 <_Bfree>
 800a0e8:	b839883a 	mov	fp,r23
 800a0ec:	d8800917 	ldw	r2,36(sp)
 800a0f0:	154dc83a 	sub	r6,r2,r21
 800a0f4:	3001281e 	bne	r6,zero,800a598 <_dtoa_r+0xf28>
 800a0f8:	05c00044 	movi	r23,1
 800a0fc:	8009883a 	mov	r4,r16
 800a100:	b80b883a 	mov	r5,r23
 800a104:	800c8f00 	call	800c8f0 <__i2b>
 800a108:	d8c00a17 	ldw	r3,40(sp)
 800a10c:	102b883a 	mov	r21,r2
 800a110:	00c0310e 	bge	zero,r3,800a1d8 <_dtoa_r+0xb68>
 800a114:	8009883a 	mov	r4,r16
 800a118:	100b883a 	mov	r5,r2
 800a11c:	180d883a 	mov	r6,r3
 800a120:	800cb280 	call	800cb28 <__pow5mult>
 800a124:	d9000317 	ldw	r4,12(sp)
 800a128:	102b883a 	mov	r21,r2
 800a12c:	b9011f0e 	bge	r23,r4,800a5ac <_dtoa_r+0xf3c>
 800a130:	0027883a 	mov	r19,zero
 800a134:	a8800417 	ldw	r2,16(r21)
 800a138:	10800104 	addi	r2,r2,4
 800a13c:	1085883a 	add	r2,r2,r2
 800a140:	1085883a 	add	r2,r2,r2
 800a144:	a885883a 	add	r2,r21,r2
 800a148:	11000017 	ldw	r4,0(r2)
 800a14c:	800c7d80 	call	800c7d8 <__hi0bits>
 800a150:	00c00804 	movi	r3,32
 800a154:	1885c83a 	sub	r2,r3,r2
 800a158:	00002506 	br	800a1f0 <_dtoa_r+0xb80>
 800a15c:	01800044 	movi	r6,1
 800a160:	d9800c15 	stw	r6,48(sp)
 800a164:	003dec06 	br	8009918 <__alt_data_end+0xfc009918>
 800a168:	d8c00817 	ldw	r3,32(sp)
 800a16c:	d9000517 	ldw	r4,20(sp)
 800a170:	d8000a15 	stw	zero,40(sp)
 800a174:	1907c83a 	sub	r3,r3,r4
 800a178:	010dc83a 	sub	r6,zero,r4
 800a17c:	d8c00815 	stw	r3,32(sp)
 800a180:	d9800915 	stw	r6,36(sp)
 800a184:	003ded06 	br	800993c <__alt_data_end+0xfc00993c>
 800a188:	05adc83a 	sub	r22,zero,r22
 800a18c:	dd800815 	stw	r22,32(sp)
 800a190:	002d883a 	mov	r22,zero
 800a194:	003de406 	br	8009928 <__alt_data_end+0xfc009928>
 800a198:	d9000517 	ldw	r4,20(sp)
 800a19c:	80047340 	call	8004734 <__floatsidf>
 800a1a0:	1009883a 	mov	r4,r2
 800a1a4:	180b883a 	mov	r5,r3
 800a1a8:	b00d883a 	mov	r6,r22
 800a1ac:	a80f883a 	mov	r7,r21
 800a1b0:	801231c0 	call	801231c <__eqdf2>
 800a1b4:	103dc726 	beq	r2,zero,80098d4 <__alt_data_end+0xfc0098d4>
 800a1b8:	d8800517 	ldw	r2,20(sp)
 800a1bc:	10bfffc4 	addi	r2,r2,-1
 800a1c0:	d8800515 	stw	r2,20(sp)
 800a1c4:	003dc306 	br	80098d4 <__alt_data_end+0xfc0098d4>
 800a1c8:	dd400917 	ldw	r21,36(sp)
 800a1cc:	dd000817 	ldw	r20,32(sp)
 800a1d0:	0023883a 	mov	r17,zero
 800a1d4:	003fa906 	br	800a07c <__alt_data_end+0xfc00a07c>
 800a1d8:	d9800317 	ldw	r6,12(sp)
 800a1dc:	b981670e 	bge	r23,r6,800a77c <_dtoa_r+0x110c>
 800a1e0:	0027883a 	mov	r19,zero
 800a1e4:	d8c00a17 	ldw	r3,40(sp)
 800a1e8:	183fd21e 	bne	r3,zero,800a134 <__alt_data_end+0xfc00a134>
 800a1ec:	00800044 	movi	r2,1
 800a1f0:	1585883a 	add	r2,r2,r22
 800a1f4:	108007cc 	andi	r2,r2,31
 800a1f8:	10005f26 	beq	r2,zero,800a378 <_dtoa_r+0xd08>
 800a1fc:	00c00804 	movi	r3,32
 800a200:	1887c83a 	sub	r3,r3,r2
 800a204:	01000104 	movi	r4,4
 800a208:	20c2dd0e 	bge	r4,r3,800ad80 <_dtoa_r+0x1710>
 800a20c:	d9000817 	ldw	r4,32(sp)
 800a210:	00c00704 	movi	r3,28
 800a214:	1885c83a 	sub	r2,r3,r2
 800a218:	2089883a 	add	r4,r4,r2
 800a21c:	d9000815 	stw	r4,32(sp)
 800a220:	a0a9883a 	add	r20,r20,r2
 800a224:	b0ad883a 	add	r22,r22,r2
 800a228:	d8800817 	ldw	r2,32(sp)
 800a22c:	0080050e 	bge	zero,r2,800a244 <_dtoa_r+0xbd4>
 800a230:	e00b883a 	mov	r5,fp
 800a234:	8009883a 	mov	r4,r16
 800a238:	100d883a 	mov	r6,r2
 800a23c:	800cc680 	call	800cc68 <__lshift>
 800a240:	1039883a 	mov	fp,r2
 800a244:	0580050e 	bge	zero,r22,800a25c <_dtoa_r+0xbec>
 800a248:	a80b883a 	mov	r5,r21
 800a24c:	8009883a 	mov	r4,r16
 800a250:	b00d883a 	mov	r6,r22
 800a254:	800cc680 	call	800cc68 <__lshift>
 800a258:	102b883a 	mov	r21,r2
 800a25c:	d8c00c17 	ldw	r3,48(sp)
 800a260:	1801161e 	bne	r3,zero,800a6bc <_dtoa_r+0x104c>
 800a264:	d8c00617 	ldw	r3,24(sp)
 800a268:	00c12d0e 	bge	zero,r3,800a720 <_dtoa_r+0x10b0>
 800a26c:	d8c00b17 	ldw	r3,44(sp)
 800a270:	1800571e 	bne	r3,zero,800a3d0 <_dtoa_r+0xd60>
 800a274:	dc800717 	ldw	r18,28(sp)
 800a278:	dcc00617 	ldw	r19,24(sp)
 800a27c:	9029883a 	mov	r20,r18
 800a280:	00000206 	br	800a28c <_dtoa_r+0xc1c>
 800a284:	800c5c00 	call	800c5c0 <__multadd>
 800a288:	1039883a 	mov	fp,r2
 800a28c:	e009883a 	mov	r4,fp
 800a290:	a80b883a 	mov	r5,r21
 800a294:	80094700 	call	8009470 <quorem>
 800a298:	10800c04 	addi	r2,r2,48
 800a29c:	90800005 	stb	r2,0(r18)
 800a2a0:	94800044 	addi	r18,r18,1
 800a2a4:	9507c83a 	sub	r3,r18,r20
 800a2a8:	8009883a 	mov	r4,r16
 800a2ac:	e00b883a 	mov	r5,fp
 800a2b0:	01800284 	movi	r6,10
 800a2b4:	000f883a 	mov	r7,zero
 800a2b8:	1cfff216 	blt	r3,r19,800a284 <__alt_data_end+0xfc00a284>
 800a2bc:	1011883a 	mov	r8,r2
 800a2c0:	d8800617 	ldw	r2,24(sp)
 800a2c4:	00822e0e 	bge	zero,r2,800ab80 <_dtoa_r+0x1510>
 800a2c8:	d9000717 	ldw	r4,28(sp)
 800a2cc:	0025883a 	mov	r18,zero
 800a2d0:	20af883a 	add	r23,r4,r2
 800a2d4:	e00b883a 	mov	r5,fp
 800a2d8:	01800044 	movi	r6,1
 800a2dc:	8009883a 	mov	r4,r16
 800a2e0:	da001715 	stw	r8,92(sp)
 800a2e4:	800cc680 	call	800cc68 <__lshift>
 800a2e8:	1009883a 	mov	r4,r2
 800a2ec:	a80b883a 	mov	r5,r21
 800a2f0:	1039883a 	mov	fp,r2
 800a2f4:	800cdb00 	call	800cdb0 <__mcmp>
 800a2f8:	da001717 	ldw	r8,92(sp)
 800a2fc:	00816e0e 	bge	zero,r2,800a8b8 <_dtoa_r+0x1248>
 800a300:	b93fffc3 	ldbu	r4,-1(r23)
 800a304:	b8bfffc4 	addi	r2,r23,-1
 800a308:	1007883a 	mov	r3,r2
 800a30c:	01800e44 	movi	r6,57
 800a310:	d9c00717 	ldw	r7,28(sp)
 800a314:	00000506 	br	800a32c <_dtoa_r+0xcbc>
 800a318:	18ffffc4 	addi	r3,r3,-1
 800a31c:	38811926 	beq	r7,r2,800a784 <_dtoa_r+0x1114>
 800a320:	19000003 	ldbu	r4,0(r3)
 800a324:	102f883a 	mov	r23,r2
 800a328:	10bfffc4 	addi	r2,r2,-1
 800a32c:	21403fcc 	andi	r5,r4,255
 800a330:	2940201c 	xori	r5,r5,128
 800a334:	297fe004 	addi	r5,r5,-128
 800a338:	29bff726 	beq	r5,r6,800a318 <__alt_data_end+0xfc00a318>
 800a33c:	21000044 	addi	r4,r4,1
 800a340:	11000005 	stb	r4,0(r2)
 800a344:	8009883a 	mov	r4,r16
 800a348:	a80b883a 	mov	r5,r21
 800a34c:	800c5980 	call	800c598 <_Bfree>
 800a350:	883e7526 	beq	r17,zero,8009d28 <__alt_data_end+0xfc009d28>
 800a354:	90000426 	beq	r18,zero,800a368 <_dtoa_r+0xcf8>
 800a358:	94400326 	beq	r18,r17,800a368 <_dtoa_r+0xcf8>
 800a35c:	8009883a 	mov	r4,r16
 800a360:	900b883a 	mov	r5,r18
 800a364:	800c5980 	call	800c598 <_Bfree>
 800a368:	8009883a 	mov	r4,r16
 800a36c:	880b883a 	mov	r5,r17
 800a370:	800c5980 	call	800c598 <_Bfree>
 800a374:	003e6c06 	br	8009d28 <__alt_data_end+0xfc009d28>
 800a378:	00800704 	movi	r2,28
 800a37c:	d9800817 	ldw	r6,32(sp)
 800a380:	a0a9883a 	add	r20,r20,r2
 800a384:	b0ad883a 	add	r22,r22,r2
 800a388:	308d883a 	add	r6,r6,r2
 800a38c:	d9800815 	stw	r6,32(sp)
 800a390:	003fa506 	br	800a228 <__alt_data_end+0xfc00a228>
 800a394:	013efb84 	movi	r4,-1042
 800a398:	246bc83a 	sub	r21,r4,r17
 800a39c:	9548983a 	sll	r4,r18,r21
 800a3a0:	003d1806 	br	8009804 <__alt_data_end+0xfc009804>
 800a3a4:	d8000c15 	stw	zero,48(sp)
 800a3a8:	003d5b06 	br	8009918 <__alt_data_end+0xfc009918>
 800a3ac:	880b883a 	mov	r5,r17
 800a3b0:	8009883a 	mov	r4,r16
 800a3b4:	01800284 	movi	r6,10
 800a3b8:	000f883a 	mov	r7,zero
 800a3bc:	800c5c00 	call	800c5c0 <__multadd>
 800a3c0:	1023883a 	mov	r17,r2
 800a3c4:	d8800d17 	ldw	r2,52(sp)
 800a3c8:	0082550e 	bge	zero,r2,800ad20 <_dtoa_r+0x16b0>
 800a3cc:	d8800615 	stw	r2,24(sp)
 800a3d0:	0500050e 	bge	zero,r20,800a3e8 <_dtoa_r+0xd78>
 800a3d4:	880b883a 	mov	r5,r17
 800a3d8:	8009883a 	mov	r4,r16
 800a3dc:	a00d883a 	mov	r6,r20
 800a3e0:	800cc680 	call	800cc68 <__lshift>
 800a3e4:	1023883a 	mov	r17,r2
 800a3e8:	98016a1e 	bne	r19,zero,800a994 <_dtoa_r+0x1324>
 800a3ec:	8829883a 	mov	r20,r17
 800a3f0:	d9000617 	ldw	r4,24(sp)
 800a3f4:	dcc00717 	ldw	r19,28(sp)
 800a3f8:	9480004c 	andi	r18,r18,1
 800a3fc:	20bfffc4 	addi	r2,r4,-1
 800a400:	9885883a 	add	r2,r19,r2
 800a404:	d8800415 	stw	r2,16(sp)
 800a408:	dc800615 	stw	r18,24(sp)
 800a40c:	e009883a 	mov	r4,fp
 800a410:	a80b883a 	mov	r5,r21
 800a414:	80094700 	call	8009470 <quorem>
 800a418:	e009883a 	mov	r4,fp
 800a41c:	880b883a 	mov	r5,r17
 800a420:	102f883a 	mov	r23,r2
 800a424:	800cdb00 	call	800cdb0 <__mcmp>
 800a428:	8009883a 	mov	r4,r16
 800a42c:	a80b883a 	mov	r5,r21
 800a430:	a00d883a 	mov	r6,r20
 800a434:	102d883a 	mov	r22,r2
 800a438:	800ce100 	call	800ce10 <__mdiff>
 800a43c:	1007883a 	mov	r3,r2
 800a440:	10800317 	ldw	r2,12(r2)
 800a444:	bc800c04 	addi	r18,r23,48
 800a448:	1000971e 	bne	r2,zero,800a6a8 <_dtoa_r+0x1038>
 800a44c:	180b883a 	mov	r5,r3
 800a450:	e009883a 	mov	r4,fp
 800a454:	d8c01515 	stw	r3,84(sp)
 800a458:	800cdb00 	call	800cdb0 <__mcmp>
 800a45c:	d8c01517 	ldw	r3,84(sp)
 800a460:	8009883a 	mov	r4,r16
 800a464:	d8801515 	stw	r2,84(sp)
 800a468:	180b883a 	mov	r5,r3
 800a46c:	800c5980 	call	800c598 <_Bfree>
 800a470:	d8801517 	ldw	r2,84(sp)
 800a474:	1000041e 	bne	r2,zero,800a488 <_dtoa_r+0xe18>
 800a478:	d9800317 	ldw	r6,12(sp)
 800a47c:	3000021e 	bne	r6,zero,800a488 <_dtoa_r+0xe18>
 800a480:	d8c00617 	ldw	r3,24(sp)
 800a484:	18007626 	beq	r3,zero,800a660 <_dtoa_r+0xff0>
 800a488:	b0005b16 	blt	r22,zero,800a5f8 <_dtoa_r+0xf88>
 800a48c:	b000041e 	bne	r22,zero,800a4a0 <_dtoa_r+0xe30>
 800a490:	d9000317 	ldw	r4,12(sp)
 800a494:	2000021e 	bne	r4,zero,800a4a0 <_dtoa_r+0xe30>
 800a498:	d8c00617 	ldw	r3,24(sp)
 800a49c:	18005626 	beq	r3,zero,800a5f8 <_dtoa_r+0xf88>
 800a4a0:	00814d16 	blt	zero,r2,800a9d8 <_dtoa_r+0x1368>
 800a4a4:	d8c00417 	ldw	r3,16(sp)
 800a4a8:	9d800044 	addi	r22,r19,1
 800a4ac:	9c800005 	stb	r18,0(r19)
 800a4b0:	b02f883a 	mov	r23,r22
 800a4b4:	98c14c26 	beq	r19,r3,800a9e8 <_dtoa_r+0x1378>
 800a4b8:	e00b883a 	mov	r5,fp
 800a4bc:	8009883a 	mov	r4,r16
 800a4c0:	01800284 	movi	r6,10
 800a4c4:	000f883a 	mov	r7,zero
 800a4c8:	800c5c00 	call	800c5c0 <__multadd>
 800a4cc:	1039883a 	mov	fp,r2
 800a4d0:	8d006d26 	beq	r17,r20,800a688 <_dtoa_r+0x1018>
 800a4d4:	880b883a 	mov	r5,r17
 800a4d8:	01800284 	movi	r6,10
 800a4dc:	000f883a 	mov	r7,zero
 800a4e0:	8009883a 	mov	r4,r16
 800a4e4:	800c5c00 	call	800c5c0 <__multadd>
 800a4e8:	a00b883a 	mov	r5,r20
 800a4ec:	8009883a 	mov	r4,r16
 800a4f0:	01800284 	movi	r6,10
 800a4f4:	000f883a 	mov	r7,zero
 800a4f8:	1023883a 	mov	r17,r2
 800a4fc:	800c5c00 	call	800c5c0 <__multadd>
 800a500:	1029883a 	mov	r20,r2
 800a504:	b027883a 	mov	r19,r22
 800a508:	003fc006 	br	800a40c <__alt_data_end+0xfc00a40c>
 800a50c:	a005883a 	mov	r2,r20
 800a510:	003ede06 	br	800a08c <__alt_data_end+0xfc00a08c>
 800a514:	01000044 	movi	r4,1
 800a518:	d9000b15 	stw	r4,44(sp)
 800a51c:	d9802217 	ldw	r6,136(sp)
 800a520:	0180dc0e 	bge	zero,r6,800a894 <_dtoa_r+0x1224>
 800a524:	3023883a 	mov	r17,r6
 800a528:	d9800d15 	stw	r6,52(sp)
 800a52c:	d9800615 	stw	r6,24(sp)
 800a530:	003d1e06 	br	80099ac <__alt_data_end+0xfc0099ac>
 800a534:	d8800617 	ldw	r2,24(sp)
 800a538:	00be3716 	blt	zero,r2,8009e18 <__alt_data_end+0xfc009e18>
 800a53c:	1000be1e 	bne	r2,zero,800a838 <_dtoa_r+0x11c8>
 800a540:	8809883a 	mov	r4,r17
 800a544:	a00b883a 	mov	r5,r20
 800a548:	000d883a 	mov	r6,zero
 800a54c:	01d00534 	movhi	r7,16404
 800a550:	8003f880 	call	8003f88 <__muldf3>
 800a554:	1009883a 	mov	r4,r2
 800a558:	180b883a 	mov	r5,r3
 800a55c:	900d883a 	mov	r6,r18
 800a560:	980f883a 	mov	r7,r19
 800a564:	8003dc80 	call	8003dc8 <__gedf2>
 800a568:	002b883a 	mov	r21,zero
 800a56c:	0023883a 	mov	r17,zero
 800a570:	10007a16 	blt	r2,zero,800a75c <_dtoa_r+0x10ec>
 800a574:	d9002217 	ldw	r4,136(sp)
 800a578:	ddc00717 	ldw	r23,28(sp)
 800a57c:	0108303a 	nor	r4,zero,r4
 800a580:	d9000515 	stw	r4,20(sp)
 800a584:	8009883a 	mov	r4,r16
 800a588:	a80b883a 	mov	r5,r21
 800a58c:	800c5980 	call	800c598 <_Bfree>
 800a590:	883f751e 	bne	r17,zero,800a368 <__alt_data_end+0xfc00a368>
 800a594:	003de406 	br	8009d28 <__alt_data_end+0xfc009d28>
 800a598:	e00b883a 	mov	r5,fp
 800a59c:	8009883a 	mov	r4,r16
 800a5a0:	800cb280 	call	800cb28 <__pow5mult>
 800a5a4:	1039883a 	mov	fp,r2
 800a5a8:	003ed306 	br	800a0f8 <__alt_data_end+0xfc00a0f8>
 800a5ac:	903ee01e 	bne	r18,zero,800a130 <__alt_data_end+0xfc00a130>
 800a5b0:	00800434 	movhi	r2,16
 800a5b4:	10bfffc4 	addi	r2,r2,-1
 800a5b8:	9884703a 	and	r2,r19,r2
 800a5bc:	103f081e 	bne	r2,zero,800a1e0 <__alt_data_end+0xfc00a1e0>
 800a5c0:	9cdffc2c 	andhi	r19,r19,32752
 800a5c4:	983f0626 	beq	r19,zero,800a1e0 <__alt_data_end+0xfc00a1e0>
 800a5c8:	d8800817 	ldw	r2,32(sp)
 800a5cc:	b5800044 	addi	r22,r22,1
 800a5d0:	04c00044 	movi	r19,1
 800a5d4:	10800044 	addi	r2,r2,1
 800a5d8:	d8800815 	stw	r2,32(sp)
 800a5dc:	003f0106 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a5e0:	d9800f17 	ldw	r6,60(sp)
 800a5e4:	30016826 	beq	r6,zero,800ab88 <_dtoa_r+0x1518>
 800a5e8:	10810cc4 	addi	r2,r2,1075
 800a5ec:	dd400917 	ldw	r21,36(sp)
 800a5f0:	dd000817 	ldw	r20,32(sp)
 800a5f4:	003e9906 	br	800a05c <__alt_data_end+0xfc00a05c>
 800a5f8:	9011883a 	mov	r8,r18
 800a5fc:	4007883a 	mov	r3,r8
 800a600:	e02d883a 	mov	r22,fp
 800a604:	0080100e 	bge	zero,r2,800a648 <_dtoa_r+0xfd8>
 800a608:	01800044 	movi	r6,1
 800a60c:	8009883a 	mov	r4,r16
 800a610:	e00b883a 	mov	r5,fp
 800a614:	da001515 	stw	r8,84(sp)
 800a618:	da001715 	stw	r8,92(sp)
 800a61c:	800cc680 	call	800cc68 <__lshift>
 800a620:	1009883a 	mov	r4,r2
 800a624:	a80b883a 	mov	r5,r21
 800a628:	102d883a 	mov	r22,r2
 800a62c:	800cdb00 	call	800cdb0 <__mcmp>
 800a630:	d8c01517 	ldw	r3,84(sp)
 800a634:	da001717 	ldw	r8,92(sp)
 800a638:	0081a50e 	bge	zero,r2,800acd0 <_dtoa_r+0x1660>
 800a63c:	00800e44 	movi	r2,57
 800a640:	40817b26 	beq	r8,r2,800ac30 <_dtoa_r+0x15c0>
 800a644:	40c00044 	addi	r3,r8,1
 800a648:	8825883a 	mov	r18,r17
 800a64c:	9dc00044 	addi	r23,r19,1
 800a650:	98c00005 	stb	r3,0(r19)
 800a654:	a023883a 	mov	r17,r20
 800a658:	b039883a 	mov	fp,r22
 800a65c:	003f3906 	br	800a344 <__alt_data_end+0xfc00a344>
 800a660:	00800e44 	movi	r2,57
 800a664:	9011883a 	mov	r8,r18
 800a668:	90817226 	beq	r18,r2,800ac34 <_dtoa_r+0x15c4>
 800a66c:	0580010e 	bge	zero,r22,800a674 <_dtoa_r+0x1004>
 800a670:	ba000c44 	addi	r8,r23,49
 800a674:	8825883a 	mov	r18,r17
 800a678:	9dc00044 	addi	r23,r19,1
 800a67c:	9a000005 	stb	r8,0(r19)
 800a680:	a023883a 	mov	r17,r20
 800a684:	003f2f06 	br	800a344 <__alt_data_end+0xfc00a344>
 800a688:	880b883a 	mov	r5,r17
 800a68c:	8009883a 	mov	r4,r16
 800a690:	01800284 	movi	r6,10
 800a694:	000f883a 	mov	r7,zero
 800a698:	800c5c00 	call	800c5c0 <__multadd>
 800a69c:	1023883a 	mov	r17,r2
 800a6a0:	1029883a 	mov	r20,r2
 800a6a4:	003f9706 	br	800a504 <__alt_data_end+0xfc00a504>
 800a6a8:	8009883a 	mov	r4,r16
 800a6ac:	180b883a 	mov	r5,r3
 800a6b0:	800c5980 	call	800c598 <_Bfree>
 800a6b4:	00800044 	movi	r2,1
 800a6b8:	003f7306 	br	800a488 <__alt_data_end+0xfc00a488>
 800a6bc:	e009883a 	mov	r4,fp
 800a6c0:	a80b883a 	mov	r5,r21
 800a6c4:	800cdb00 	call	800cdb0 <__mcmp>
 800a6c8:	103ee60e 	bge	r2,zero,800a264 <__alt_data_end+0xfc00a264>
 800a6cc:	8009883a 	mov	r4,r16
 800a6d0:	e00b883a 	mov	r5,fp
 800a6d4:	01800284 	movi	r6,10
 800a6d8:	000f883a 	mov	r7,zero
 800a6dc:	800c5c00 	call	800c5c0 <__multadd>
 800a6e0:	d9000517 	ldw	r4,20(sp)
 800a6e4:	d9800b17 	ldw	r6,44(sp)
 800a6e8:	1039883a 	mov	fp,r2
 800a6ec:	213fffc4 	addi	r4,r4,-1
 800a6f0:	d9000515 	stw	r4,20(sp)
 800a6f4:	303f2d1e 	bne	r6,zero,800a3ac <__alt_data_end+0xfc00a3ac>
 800a6f8:	d9000d17 	ldw	r4,52(sp)
 800a6fc:	0101780e 	bge	zero,r4,800ace0 <_dtoa_r+0x1670>
 800a700:	d9000615 	stw	r4,24(sp)
 800a704:	003edb06 	br	800a274 <__alt_data_end+0xfc00a274>
 800a708:	00800084 	movi	r2,2
 800a70c:	30818e1e 	bne	r6,r2,800ad48 <_dtoa_r+0x16d8>
 800a710:	d8000b15 	stw	zero,44(sp)
 800a714:	003f8106 	br	800a51c <__alt_data_end+0xfc00a51c>
 800a718:	d8800717 	ldw	r2,28(sp)
 800a71c:	003c0306 	br	800972c <__alt_data_end+0xfc00972c>
 800a720:	d9000317 	ldw	r4,12(sp)
 800a724:	00800084 	movi	r2,2
 800a728:	113ed00e 	bge	r2,r4,800a26c <__alt_data_end+0xfc00a26c>
 800a72c:	d8c00617 	ldw	r3,24(sp)
 800a730:	183f901e 	bne	r3,zero,800a574 <__alt_data_end+0xfc00a574>
 800a734:	a80b883a 	mov	r5,r21
 800a738:	8009883a 	mov	r4,r16
 800a73c:	01800144 	movi	r6,5
 800a740:	000f883a 	mov	r7,zero
 800a744:	800c5c00 	call	800c5c0 <__multadd>
 800a748:	e009883a 	mov	r4,fp
 800a74c:	100b883a 	mov	r5,r2
 800a750:	102b883a 	mov	r21,r2
 800a754:	800cdb00 	call	800cdb0 <__mcmp>
 800a758:	00bf860e 	bge	zero,r2,800a574 <__alt_data_end+0xfc00a574>
 800a75c:	d9800717 	ldw	r6,28(sp)
 800a760:	00800c44 	movi	r2,49
 800a764:	30800005 	stb	r2,0(r6)
 800a768:	d8800517 	ldw	r2,20(sp)
 800a76c:	35c00044 	addi	r23,r6,1
 800a770:	10800044 	addi	r2,r2,1
 800a774:	d8800515 	stw	r2,20(sp)
 800a778:	003f8206 	br	800a584 <__alt_data_end+0xfc00a584>
 800a77c:	903e981e 	bne	r18,zero,800a1e0 <__alt_data_end+0xfc00a1e0>
 800a780:	003f8b06 	br	800a5b0 <__alt_data_end+0xfc00a5b0>
 800a784:	d9800517 	ldw	r6,20(sp)
 800a788:	d8c00717 	ldw	r3,28(sp)
 800a78c:	00800c44 	movi	r2,49
 800a790:	31800044 	addi	r6,r6,1
 800a794:	d9800515 	stw	r6,20(sp)
 800a798:	18800005 	stb	r2,0(r3)
 800a79c:	003ee906 	br	800a344 <__alt_data_end+0xfc00a344>
 800a7a0:	dc000317 	ldw	r16,12(sp)
 800a7a4:	003d6006 	br	8009d28 <__alt_data_end+0xfc009d28>
 800a7a8:	8809883a 	mov	r4,r17
 800a7ac:	80047340 	call	8004734 <__floatsidf>
 800a7b0:	a009883a 	mov	r4,r20
 800a7b4:	a80b883a 	mov	r5,r21
 800a7b8:	100d883a 	mov	r6,r2
 800a7bc:	180f883a 	mov	r7,r3
 800a7c0:	8003f880 	call	8003f88 <__muldf3>
 800a7c4:	1009883a 	mov	r4,r2
 800a7c8:	180b883a 	mov	r5,r3
 800a7cc:	000d883a 	mov	r6,zero
 800a7d0:	01d00734 	movhi	r7,16412
 800a7d4:	800352c0 	call	800352c <__adddf3>
 800a7d8:	1023883a 	mov	r17,r2
 800a7dc:	00bf3034 	movhi	r2,64704
 800a7e0:	1885883a 	add	r2,r3,r2
 800a7e4:	d8800e15 	stw	r2,56(sp)
 800a7e8:	a009883a 	mov	r4,r20
 800a7ec:	a80b883a 	mov	r5,r21
 800a7f0:	000d883a 	mov	r6,zero
 800a7f4:	01d00534 	movhi	r7,16404
 800a7f8:	80123a00 	call	80123a0 <__subdf3>
 800a7fc:	d9c00e17 	ldw	r7,56(sp)
 800a800:	1009883a 	mov	r4,r2
 800a804:	180b883a 	mov	r5,r3
 800a808:	880d883a 	mov	r6,r17
 800a80c:	102b883a 	mov	r21,r2
 800a810:	1829883a 	mov	r20,r3
 800a814:	8003dc80 	call	8003dc8 <__gedf2>
 800a818:	00807716 	blt	zero,r2,800a9f8 <_dtoa_r+0x1388>
 800a81c:	d8800e17 	ldw	r2,56(sp)
 800a820:	a809883a 	mov	r4,r21
 800a824:	a00b883a 	mov	r5,r20
 800a828:	11e0003c 	xorhi	r7,r2,32768
 800a82c:	880d883a 	mov	r6,r17
 800a830:	8003ea80 	call	8003ea8 <__ledf2>
 800a834:	103d6b0e 	bge	r2,zero,8009de4 <__alt_data_end+0xfc009de4>
 800a838:	002b883a 	mov	r21,zero
 800a83c:	0023883a 	mov	r17,zero
 800a840:	003f4c06 	br	800a574 <__alt_data_end+0xfc00a574>
 800a844:	d9800917 	ldw	r6,36(sp)
 800a848:	e00b883a 	mov	r5,fp
 800a84c:	8009883a 	mov	r4,r16
 800a850:	800cb280 	call	800cb28 <__pow5mult>
 800a854:	1039883a 	mov	fp,r2
 800a858:	003e2706 	br	800a0f8 <__alt_data_end+0xfc00a0f8>
 800a85c:	d8000b15 	stw	zero,44(sp)
 800a860:	003c4906 	br	8009988 <__alt_data_end+0xfc009988>
 800a864:	d9000917 	ldw	r4,36(sp)
 800a868:	d9800a17 	ldw	r6,40(sp)
 800a86c:	dd400915 	stw	r21,36(sp)
 800a870:	a905c83a 	sub	r2,r21,r4
 800a874:	308d883a 	add	r6,r6,r2
 800a878:	d9800a15 	stw	r6,40(sp)
 800a87c:	002b883a 	mov	r21,zero
 800a880:	003df206 	br	800a04c <__alt_data_end+0xfc00a04c>
 800a884:	dc800e15 	stw	r18,56(sp)
 800a888:	982b883a 	mov	r21,r19
 800a88c:	04400084 	movi	r17,2
 800a890:	003c7406 	br	8009a64 <__alt_data_end+0xfc009a64>
 800a894:	04400044 	movi	r17,1
 800a898:	dc400d15 	stw	r17,52(sp)
 800a89c:	dc400615 	stw	r17,24(sp)
 800a8a0:	dc402215 	stw	r17,136(sp)
 800a8a4:	80001115 	stw	zero,68(r16)
 800a8a8:	000b883a 	mov	r5,zero
 800a8ac:	003c4a06 	br	80099d8 <__alt_data_end+0xfc0099d8>
 800a8b0:	3023883a 	mov	r17,r6
 800a8b4:	003ffb06 	br	800a8a4 <__alt_data_end+0xfc00a8a4>
 800a8b8:	1000021e 	bne	r2,zero,800a8c4 <_dtoa_r+0x1254>
 800a8bc:	4200004c 	andi	r8,r8,1
 800a8c0:	403e8f1e 	bne	r8,zero,800a300 <__alt_data_end+0xfc00a300>
 800a8c4:	01000c04 	movi	r4,48
 800a8c8:	00000106 	br	800a8d0 <_dtoa_r+0x1260>
 800a8cc:	102f883a 	mov	r23,r2
 800a8d0:	b8bfffc4 	addi	r2,r23,-1
 800a8d4:	10c00007 	ldb	r3,0(r2)
 800a8d8:	193ffc26 	beq	r3,r4,800a8cc <__alt_data_end+0xfc00a8cc>
 800a8dc:	003e9906 	br	800a344 <__alt_data_end+0xfc00a344>
 800a8e0:	d9000517 	ldw	r4,20(sp)
 800a8e4:	012fc83a 	sub	r23,zero,r4
 800a8e8:	b800ad26 	beq	r23,zero,800aba0 <_dtoa_r+0x1530>
 800a8ec:	b88003cc 	andi	r2,r23,15
 800a8f0:	100490fa 	slli	r2,r2,3
 800a8f4:	00c200b4 	movhi	r3,2050
 800a8f8:	18c17404 	addi	r3,r3,1488
 800a8fc:	1885883a 	add	r2,r3,r2
 800a900:	11800017 	ldw	r6,0(r2)
 800a904:	11c00117 	ldw	r7,4(r2)
 800a908:	b82fd13a 	srai	r23,r23,4
 800a90c:	9009883a 	mov	r4,r18
 800a910:	980b883a 	mov	r5,r19
 800a914:	8003f880 	call	8003f88 <__muldf3>
 800a918:	1029883a 	mov	r20,r2
 800a91c:	182b883a 	mov	r21,r3
 800a920:	b800f426 	beq	r23,zero,800acf4 <_dtoa_r+0x1684>
 800a924:	020200b4 	movhi	r8,2050
 800a928:	42016a04 	addi	r8,r8,1448
 800a92c:	8029883a 	mov	r20,r16
 800a930:	04400084 	movi	r17,2
 800a934:	4021883a 	mov	r16,r8
 800a938:	b980004c 	andi	r6,r23,1
 800a93c:	1009883a 	mov	r4,r2
 800a940:	b82fd07a 	srai	r23,r23,1
 800a944:	180b883a 	mov	r5,r3
 800a948:	30000426 	beq	r6,zero,800a95c <_dtoa_r+0x12ec>
 800a94c:	81800017 	ldw	r6,0(r16)
 800a950:	81c00117 	ldw	r7,4(r16)
 800a954:	8c400044 	addi	r17,r17,1
 800a958:	8003f880 	call	8003f88 <__muldf3>
 800a95c:	84000204 	addi	r16,r16,8
 800a960:	b83ff51e 	bne	r23,zero,800a938 <__alt_data_end+0xfc00a938>
 800a964:	a021883a 	mov	r16,r20
 800a968:	182b883a 	mov	r21,r3
 800a96c:	1029883a 	mov	r20,r2
 800a970:	003c5506 	br	8009ac8 <__alt_data_end+0xfc009ac8>
 800a974:	d9800517 	ldw	r6,20(sp)
 800a978:	d9000717 	ldw	r4,28(sp)
 800a97c:	00c00c04 	movi	r3,48
 800a980:	31800044 	addi	r6,r6,1
 800a984:	d9800515 	stw	r6,20(sp)
 800a988:	20c00005 	stb	r3,0(r4)
 800a98c:	02000c44 	movi	r8,49
 800a990:	003da206 	br	800a01c <__alt_data_end+0xfc00a01c>
 800a994:	89400117 	ldw	r5,4(r17)
 800a998:	8009883a 	mov	r4,r16
 800a99c:	800c4f00 	call	800c4f0 <_Balloc>
 800a9a0:	89800417 	ldw	r6,16(r17)
 800a9a4:	11000304 	addi	r4,r2,12
 800a9a8:	89400304 	addi	r5,r17,12
 800a9ac:	31800084 	addi	r6,r6,2
 800a9b0:	318d883a 	add	r6,r6,r6
 800a9b4:	318d883a 	add	r6,r6,r6
 800a9b8:	1027883a 	mov	r19,r2
 800a9bc:	800c1380 	call	800c138 <memcpy>
 800a9c0:	8009883a 	mov	r4,r16
 800a9c4:	980b883a 	mov	r5,r19
 800a9c8:	01800044 	movi	r6,1
 800a9cc:	800cc680 	call	800cc68 <__lshift>
 800a9d0:	1029883a 	mov	r20,r2
 800a9d4:	003e8606 	br	800a3f0 <__alt_data_end+0xfc00a3f0>
 800a9d8:	00800e44 	movi	r2,57
 800a9dc:	90809526 	beq	r18,r2,800ac34 <_dtoa_r+0x15c4>
 800a9e0:	92000044 	addi	r8,r18,1
 800a9e4:	003f2306 	br	800a674 <__alt_data_end+0xfc00a674>
 800a9e8:	9011883a 	mov	r8,r18
 800a9ec:	8825883a 	mov	r18,r17
 800a9f0:	a023883a 	mov	r17,r20
 800a9f4:	003e3706 	br	800a2d4 <__alt_data_end+0xfc00a2d4>
 800a9f8:	002b883a 	mov	r21,zero
 800a9fc:	0023883a 	mov	r17,zero
 800aa00:	003f5606 	br	800a75c <__alt_data_end+0xfc00a75c>
 800aa04:	51bfffc4 	addi	r6,r10,-1
 800aa08:	300490fa 	slli	r2,r6,3
 800aa0c:	00c200b4 	movhi	r3,2050
 800aa10:	18c17404 	addi	r3,r3,1488
 800aa14:	1885883a 	add	r2,r3,r2
 800aa18:	d9c00e17 	ldw	r7,56(sp)
 800aa1c:	11000017 	ldw	r4,0(r2)
 800aa20:	11400117 	ldw	r5,4(r2)
 800aa24:	d8800717 	ldw	r2,28(sp)
 800aa28:	d9801015 	stw	r6,64(sp)
 800aa2c:	880d883a 	mov	r6,r17
 800aa30:	da801615 	stw	r10,88(sp)
 800aa34:	15c00044 	addi	r23,r2,1
 800aa38:	8003f880 	call	8003f88 <__muldf3>
 800aa3c:	a80b883a 	mov	r5,r21
 800aa40:	a009883a 	mov	r4,r20
 800aa44:	d8c01115 	stw	r3,68(sp)
 800aa48:	d8800e15 	stw	r2,56(sp)
 800aa4c:	80046ac0 	call	80046ac <__fixdfsi>
 800aa50:	1009883a 	mov	r4,r2
 800aa54:	1023883a 	mov	r17,r2
 800aa58:	80047340 	call	8004734 <__floatsidf>
 800aa5c:	a009883a 	mov	r4,r20
 800aa60:	a80b883a 	mov	r5,r21
 800aa64:	100d883a 	mov	r6,r2
 800aa68:	180f883a 	mov	r7,r3
 800aa6c:	80123a00 	call	80123a0 <__subdf3>
 800aa70:	1813883a 	mov	r9,r3
 800aa74:	d8c00717 	ldw	r3,28(sp)
 800aa78:	8c400c04 	addi	r17,r17,48
 800aa7c:	1011883a 	mov	r8,r2
 800aa80:	1c400005 	stb	r17,0(r3)
 800aa84:	da801617 	ldw	r10,88(sp)
 800aa88:	00800044 	movi	r2,1
 800aa8c:	50802326 	beq	r10,r2,800ab1c <_dtoa_r+0x14ac>
 800aa90:	d8800717 	ldw	r2,28(sp)
 800aa94:	b82b883a 	mov	r21,r23
 800aa98:	dc001315 	stw	r16,76(sp)
 800aa9c:	12a9883a 	add	r20,r2,r10
 800aaa0:	4807883a 	mov	r3,r9
 800aaa4:	4005883a 	mov	r2,r8
 800aaa8:	dc801415 	stw	r18,80(sp)
 800aaac:	000d883a 	mov	r6,zero
 800aab0:	01d00934 	movhi	r7,16420
 800aab4:	1009883a 	mov	r4,r2
 800aab8:	180b883a 	mov	r5,r3
 800aabc:	8003f880 	call	8003f88 <__muldf3>
 800aac0:	180b883a 	mov	r5,r3
 800aac4:	1009883a 	mov	r4,r2
 800aac8:	1821883a 	mov	r16,r3
 800aacc:	1025883a 	mov	r18,r2
 800aad0:	80046ac0 	call	80046ac <__fixdfsi>
 800aad4:	1009883a 	mov	r4,r2
 800aad8:	1023883a 	mov	r17,r2
 800aadc:	80047340 	call	8004734 <__floatsidf>
 800aae0:	9009883a 	mov	r4,r18
 800aae4:	800b883a 	mov	r5,r16
 800aae8:	100d883a 	mov	r6,r2
 800aaec:	180f883a 	mov	r7,r3
 800aaf0:	8c400c04 	addi	r17,r17,48
 800aaf4:	80123a00 	call	80123a0 <__subdf3>
 800aaf8:	ad400044 	addi	r21,r21,1
 800aafc:	ac7fffc5 	stb	r17,-1(r21)
 800ab00:	ad3fea1e 	bne	r21,r20,800aaac <__alt_data_end+0xfc00aaac>
 800ab04:	1813883a 	mov	r9,r3
 800ab08:	d8c01017 	ldw	r3,64(sp)
 800ab0c:	dc001317 	ldw	r16,76(sp)
 800ab10:	dc801417 	ldw	r18,80(sp)
 800ab14:	1011883a 	mov	r8,r2
 800ab18:	b8ef883a 	add	r23,r23,r3
 800ab1c:	d9000e17 	ldw	r4,56(sp)
 800ab20:	d9401117 	ldw	r5,68(sp)
 800ab24:	000d883a 	mov	r6,zero
 800ab28:	01cff834 	movhi	r7,16352
 800ab2c:	da001715 	stw	r8,92(sp)
 800ab30:	da401515 	stw	r9,84(sp)
 800ab34:	800352c0 	call	800352c <__adddf3>
 800ab38:	da001717 	ldw	r8,92(sp)
 800ab3c:	da401517 	ldw	r9,84(sp)
 800ab40:	1009883a 	mov	r4,r2
 800ab44:	400d883a 	mov	r6,r8
 800ab48:	480f883a 	mov	r7,r9
 800ab4c:	180b883a 	mov	r5,r3
 800ab50:	8003ea80 	call	8003ea8 <__ledf2>
 800ab54:	da001717 	ldw	r8,92(sp)
 800ab58:	da401517 	ldw	r9,84(sp)
 800ab5c:	10003b0e 	bge	r2,zero,800ac4c <_dtoa_r+0x15dc>
 800ab60:	d9001217 	ldw	r4,72(sp)
 800ab64:	bd7fffc3 	ldbu	r21,-1(r23)
 800ab68:	d9000515 	stw	r4,20(sp)
 800ab6c:	003d1c06 	br	8009fe0 <__alt_data_end+0xfc009fe0>
 800ab70:	d8c00817 	ldw	r3,32(sp)
 800ab74:	18a9c83a 	sub	r20,r3,r2
 800ab78:	0005883a 	mov	r2,zero
 800ab7c:	003d3706 	br	800a05c <__alt_data_end+0xfc00a05c>
 800ab80:	00800044 	movi	r2,1
 800ab84:	003dd006 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800ab88:	d8c00217 	ldw	r3,8(sp)
 800ab8c:	00800d84 	movi	r2,54
 800ab90:	dd400917 	ldw	r21,36(sp)
 800ab94:	10c5c83a 	sub	r2,r2,r3
 800ab98:	dd000817 	ldw	r20,32(sp)
 800ab9c:	003d2f06 	br	800a05c <__alt_data_end+0xfc00a05c>
 800aba0:	9029883a 	mov	r20,r18
 800aba4:	982b883a 	mov	r21,r19
 800aba8:	04400084 	movi	r17,2
 800abac:	003bc606 	br	8009ac8 <__alt_data_end+0xfc009ac8>
 800abb0:	d8800617 	ldw	r2,24(sp)
 800abb4:	103efc26 	beq	r2,zero,800a7a8 <__alt_data_end+0xfc00a7a8>
 800abb8:	d8c00d17 	ldw	r3,52(sp)
 800abbc:	00fc890e 	bge	zero,r3,8009de4 <__alt_data_end+0xfc009de4>
 800abc0:	a80b883a 	mov	r5,r21
 800abc4:	a009883a 	mov	r4,r20
 800abc8:	000d883a 	mov	r6,zero
 800abcc:	01d00934 	movhi	r7,16420
 800abd0:	8003f880 	call	8003f88 <__muldf3>
 800abd4:	89000044 	addi	r4,r17,1
 800abd8:	1029883a 	mov	r20,r2
 800abdc:	182b883a 	mov	r21,r3
 800abe0:	80047340 	call	8004734 <__floatsidf>
 800abe4:	a009883a 	mov	r4,r20
 800abe8:	a80b883a 	mov	r5,r21
 800abec:	100d883a 	mov	r6,r2
 800abf0:	180f883a 	mov	r7,r3
 800abf4:	8003f880 	call	8003f88 <__muldf3>
 800abf8:	1009883a 	mov	r4,r2
 800abfc:	180b883a 	mov	r5,r3
 800ac00:	000d883a 	mov	r6,zero
 800ac04:	01d00734 	movhi	r7,16412
 800ac08:	800352c0 	call	800352c <__adddf3>
 800ac0c:	d9000517 	ldw	r4,20(sp)
 800ac10:	1023883a 	mov	r17,r2
 800ac14:	00bf3034 	movhi	r2,64704
 800ac18:	213fffc4 	addi	r4,r4,-1
 800ac1c:	1885883a 	add	r2,r3,r2
 800ac20:	d9001215 	stw	r4,72(sp)
 800ac24:	d8800e15 	stw	r2,56(sp)
 800ac28:	da800d17 	ldw	r10,52(sp)
 800ac2c:	003bc306 	br	8009b3c <__alt_data_end+0xfc009b3c>
 800ac30:	b039883a 	mov	fp,r22
 800ac34:	01000e44 	movi	r4,57
 800ac38:	8825883a 	mov	r18,r17
 800ac3c:	9dc00044 	addi	r23,r19,1
 800ac40:	99000005 	stb	r4,0(r19)
 800ac44:	a023883a 	mov	r17,r20
 800ac48:	003dae06 	br	800a304 <__alt_data_end+0xfc00a304>
 800ac4c:	d9800e17 	ldw	r6,56(sp)
 800ac50:	d9c01117 	ldw	r7,68(sp)
 800ac54:	0009883a 	mov	r4,zero
 800ac58:	014ff834 	movhi	r5,16352
 800ac5c:	da001715 	stw	r8,92(sp)
 800ac60:	da401515 	stw	r9,84(sp)
 800ac64:	80123a00 	call	80123a0 <__subdf3>
 800ac68:	da001717 	ldw	r8,92(sp)
 800ac6c:	da401517 	ldw	r9,84(sp)
 800ac70:	1009883a 	mov	r4,r2
 800ac74:	180b883a 	mov	r5,r3
 800ac78:	400d883a 	mov	r6,r8
 800ac7c:	480f883a 	mov	r7,r9
 800ac80:	8003dc80 	call	8003dc8 <__gedf2>
 800ac84:	00bc570e 	bge	zero,r2,8009de4 <__alt_data_end+0xfc009de4>
 800ac88:	01000c04 	movi	r4,48
 800ac8c:	00000106 	br	800ac94 <_dtoa_r+0x1624>
 800ac90:	102f883a 	mov	r23,r2
 800ac94:	b8bfffc4 	addi	r2,r23,-1
 800ac98:	10c00007 	ldb	r3,0(r2)
 800ac9c:	193ffc26 	beq	r3,r4,800ac90 <__alt_data_end+0xfc00ac90>
 800aca0:	d9801217 	ldw	r6,72(sp)
 800aca4:	d9800515 	stw	r6,20(sp)
 800aca8:	003c1f06 	br	8009d28 <__alt_data_end+0xfc009d28>
 800acac:	d8801217 	ldw	r2,72(sp)
 800acb0:	dc001117 	ldw	r16,68(sp)
 800acb4:	d8800515 	stw	r2,20(sp)
 800acb8:	003cc906 	br	8009fe0 <__alt_data_end+0xfc009fe0>
 800acbc:	dd801317 	ldw	r22,76(sp)
 800acc0:	dc001117 	ldw	r16,68(sp)
 800acc4:	dcc01417 	ldw	r19,80(sp)
 800acc8:	dc801017 	ldw	r18,64(sp)
 800accc:	003c4506 	br	8009de4 <__alt_data_end+0xfc009de4>
 800acd0:	103e5d1e 	bne	r2,zero,800a648 <__alt_data_end+0xfc00a648>
 800acd4:	4080004c 	andi	r2,r8,1
 800acd8:	103e5b26 	beq	r2,zero,800a648 <__alt_data_end+0xfc00a648>
 800acdc:	003e5706 	br	800a63c <__alt_data_end+0xfc00a63c>
 800ace0:	d8c00317 	ldw	r3,12(sp)
 800ace4:	00800084 	movi	r2,2
 800ace8:	10c00a16 	blt	r2,r3,800ad14 <_dtoa_r+0x16a4>
 800acec:	d9000d17 	ldw	r4,52(sp)
 800acf0:	003e8306 	br	800a700 <__alt_data_end+0xfc00a700>
 800acf4:	04400084 	movi	r17,2
 800acf8:	003b7306 	br	8009ac8 <__alt_data_end+0xfc009ac8>
 800acfc:	d9801217 	ldw	r6,72(sp)
 800ad00:	d9800515 	stw	r6,20(sp)
 800ad04:	003cb606 	br	8009fe0 <__alt_data_end+0xfc009fe0>
 800ad08:	d9001217 	ldw	r4,72(sp)
 800ad0c:	d9000515 	stw	r4,20(sp)
 800ad10:	003c0506 	br	8009d28 <__alt_data_end+0xfc009d28>
 800ad14:	d9800d17 	ldw	r6,52(sp)
 800ad18:	d9800615 	stw	r6,24(sp)
 800ad1c:	003e8306 	br	800a72c <__alt_data_end+0xfc00a72c>
 800ad20:	d9800317 	ldw	r6,12(sp)
 800ad24:	00800084 	movi	r2,2
 800ad28:	11800216 	blt	r2,r6,800ad34 <_dtoa_r+0x16c4>
 800ad2c:	d8800d17 	ldw	r2,52(sp)
 800ad30:	003da606 	br	800a3cc <__alt_data_end+0xfc00a3cc>
 800ad34:	d8800d17 	ldw	r2,52(sp)
 800ad38:	d8800615 	stw	r2,24(sp)
 800ad3c:	003e7b06 	br	800a72c <__alt_data_end+0xfc00a72c>
 800ad40:	05000044 	movi	r20,1
 800ad44:	003b0506 	br	800995c <__alt_data_end+0xfc00995c>
 800ad48:	8009883a 	mov	r4,r16
 800ad4c:	80001115 	stw	zero,68(r16)
 800ad50:	000b883a 	mov	r5,zero
 800ad54:	800c4f00 	call	800c4f0 <_Balloc>
 800ad58:	d8800715 	stw	r2,28(sp)
 800ad5c:	d8c00717 	ldw	r3,28(sp)
 800ad60:	00bfffc4 	movi	r2,-1
 800ad64:	01000044 	movi	r4,1
 800ad68:	d8800615 	stw	r2,24(sp)
 800ad6c:	80c01015 	stw	r3,64(r16)
 800ad70:	d9000b15 	stw	r4,44(sp)
 800ad74:	d8002215 	stw	zero,136(sp)
 800ad78:	d8800d15 	stw	r2,52(sp)
 800ad7c:	003c1906 	br	8009de4 <__alt_data_end+0xfc009de4>
 800ad80:	193d2926 	beq	r3,r4,800a228 <__alt_data_end+0xfc00a228>
 800ad84:	00c00f04 	movi	r3,60
 800ad88:	1885c83a 	sub	r2,r3,r2
 800ad8c:	003d7b06 	br	800a37c <__alt_data_end+0xfc00a37c>
 800ad90:	000b883a 	mov	r5,zero
 800ad94:	003b1006 	br	80099d8 <__alt_data_end+0xfc0099d8>

0800ad98 <_fflush_r>:
 800ad98:	defffb04 	addi	sp,sp,-20
 800ad9c:	dcc00315 	stw	r19,12(sp)
 800ada0:	dc000015 	stw	r16,0(sp)
 800ada4:	dfc00415 	stw	ra,16(sp)
 800ada8:	dc800215 	stw	r18,8(sp)
 800adac:	dc400115 	stw	r17,4(sp)
 800adb0:	2027883a 	mov	r19,r4
 800adb4:	2821883a 	mov	r16,r5
 800adb8:	20000226 	beq	r4,zero,800adc4 <_fflush_r+0x2c>
 800adbc:	20800e17 	ldw	r2,56(r4)
 800adc0:	10005326 	beq	r2,zero,800af10 <_fflush_r+0x178>
 800adc4:	8080030b 	ldhu	r2,12(r16)
 800adc8:	10ffffcc 	andi	r3,r2,65535
 800adcc:	18e0001c 	xori	r3,r3,32768
 800add0:	18e00004 	addi	r3,r3,-32768
 800add4:	18002c26 	beq	r3,zero,800ae88 <_fflush_r+0xf0>
 800add8:	10c0020c 	andi	r3,r2,8
 800addc:	1800321e 	bne	r3,zero,800aea8 <_fflush_r+0x110>
 800ade0:	80c00117 	ldw	r3,4(r16)
 800ade4:	10820014 	ori	r2,r2,2048
 800ade8:	8080030d 	sth	r2,12(r16)
 800adec:	00c0570e 	bge	zero,r3,800af4c <_fflush_r+0x1b4>
 800adf0:	82000a17 	ldw	r8,40(r16)
 800adf4:	40002426 	beq	r8,zero,800ae88 <_fflush_r+0xf0>
 800adf8:	9c400017 	ldw	r17,0(r19)
 800adfc:	10c4000c 	andi	r3,r2,4096
 800ae00:	98000015 	stw	zero,0(r19)
 800ae04:	18004626 	beq	r3,zero,800af20 <_fflush_r+0x188>
 800ae08:	81801417 	ldw	r6,80(r16)
 800ae0c:	10c0010c 	andi	r3,r2,4
 800ae10:	18000626 	beq	r3,zero,800ae2c <_fflush_r+0x94>
 800ae14:	80c00117 	ldw	r3,4(r16)
 800ae18:	80800c17 	ldw	r2,48(r16)
 800ae1c:	30cdc83a 	sub	r6,r6,r3
 800ae20:	10000226 	beq	r2,zero,800ae2c <_fflush_r+0x94>
 800ae24:	80800f17 	ldw	r2,60(r16)
 800ae28:	308dc83a 	sub	r6,r6,r2
 800ae2c:	81400717 	ldw	r5,28(r16)
 800ae30:	9809883a 	mov	r4,r19
 800ae34:	000f883a 	mov	r7,zero
 800ae38:	403ee83a 	callr	r8
 800ae3c:	00ffffc4 	movi	r3,-1
 800ae40:	10c04526 	beq	r2,r3,800af58 <_fflush_r+0x1c0>
 800ae44:	80c0030b 	ldhu	r3,12(r16)
 800ae48:	81000417 	ldw	r4,16(r16)
 800ae4c:	80000115 	stw	zero,4(r16)
 800ae50:	197dffcc 	andi	r5,r3,63487
 800ae54:	8140030d 	sth	r5,12(r16)
 800ae58:	81000015 	stw	r4,0(r16)
 800ae5c:	18c4000c 	andi	r3,r3,4096
 800ae60:	18000126 	beq	r3,zero,800ae68 <_fflush_r+0xd0>
 800ae64:	80801415 	stw	r2,80(r16)
 800ae68:	81400c17 	ldw	r5,48(r16)
 800ae6c:	9c400015 	stw	r17,0(r19)
 800ae70:	28000526 	beq	r5,zero,800ae88 <_fflush_r+0xf0>
 800ae74:	80801004 	addi	r2,r16,64
 800ae78:	28800226 	beq	r5,r2,800ae84 <_fflush_r+0xec>
 800ae7c:	9809883a 	mov	r4,r19
 800ae80:	800b4b40 	call	800b4b4 <_free_r>
 800ae84:	80000c15 	stw	zero,48(r16)
 800ae88:	0005883a 	mov	r2,zero
 800ae8c:	dfc00417 	ldw	ra,16(sp)
 800ae90:	dcc00317 	ldw	r19,12(sp)
 800ae94:	dc800217 	ldw	r18,8(sp)
 800ae98:	dc400117 	ldw	r17,4(sp)
 800ae9c:	dc000017 	ldw	r16,0(sp)
 800aea0:	dec00504 	addi	sp,sp,20
 800aea4:	f800283a 	ret
 800aea8:	84800417 	ldw	r18,16(r16)
 800aeac:	903ff626 	beq	r18,zero,800ae88 <__alt_data_end+0xfc00ae88>
 800aeb0:	84400017 	ldw	r17,0(r16)
 800aeb4:	108000cc 	andi	r2,r2,3
 800aeb8:	84800015 	stw	r18,0(r16)
 800aebc:	8ca3c83a 	sub	r17,r17,r18
 800aec0:	10001526 	beq	r2,zero,800af18 <_fflush_r+0x180>
 800aec4:	0005883a 	mov	r2,zero
 800aec8:	80800215 	stw	r2,8(r16)
 800aecc:	04400316 	blt	zero,r17,800aedc <_fflush_r+0x144>
 800aed0:	003fed06 	br	800ae88 <__alt_data_end+0xfc00ae88>
 800aed4:	90a5883a 	add	r18,r18,r2
 800aed8:	047feb0e 	bge	zero,r17,800ae88 <__alt_data_end+0xfc00ae88>
 800aedc:	80800917 	ldw	r2,36(r16)
 800aee0:	81400717 	ldw	r5,28(r16)
 800aee4:	880f883a 	mov	r7,r17
 800aee8:	900d883a 	mov	r6,r18
 800aeec:	9809883a 	mov	r4,r19
 800aef0:	103ee83a 	callr	r2
 800aef4:	88a3c83a 	sub	r17,r17,r2
 800aef8:	00bff616 	blt	zero,r2,800aed4 <__alt_data_end+0xfc00aed4>
 800aefc:	80c0030b 	ldhu	r3,12(r16)
 800af00:	00bfffc4 	movi	r2,-1
 800af04:	18c01014 	ori	r3,r3,64
 800af08:	80c0030d 	sth	r3,12(r16)
 800af0c:	003fdf06 	br	800ae8c <__alt_data_end+0xfc00ae8c>
 800af10:	800b3400 	call	800b340 <__sinit>
 800af14:	003fab06 	br	800adc4 <__alt_data_end+0xfc00adc4>
 800af18:	80800517 	ldw	r2,20(r16)
 800af1c:	003fea06 	br	800aec8 <__alt_data_end+0xfc00aec8>
 800af20:	81400717 	ldw	r5,28(r16)
 800af24:	000d883a 	mov	r6,zero
 800af28:	9809883a 	mov	r4,r19
 800af2c:	01c00044 	movi	r7,1
 800af30:	403ee83a 	callr	r8
 800af34:	100d883a 	mov	r6,r2
 800af38:	00bfffc4 	movi	r2,-1
 800af3c:	30801326 	beq	r6,r2,800af8c <_fflush_r+0x1f4>
 800af40:	8080030b 	ldhu	r2,12(r16)
 800af44:	82000a17 	ldw	r8,40(r16)
 800af48:	003fb006 	br	800ae0c <__alt_data_end+0xfc00ae0c>
 800af4c:	80c00f17 	ldw	r3,60(r16)
 800af50:	00ffa716 	blt	zero,r3,800adf0 <__alt_data_end+0xfc00adf0>
 800af54:	003fcc06 	br	800ae88 <__alt_data_end+0xfc00ae88>
 800af58:	98c00017 	ldw	r3,0(r19)
 800af5c:	183fb926 	beq	r3,zero,800ae44 <__alt_data_end+0xfc00ae44>
 800af60:	01000744 	movi	r4,29
 800af64:	19000226 	beq	r3,r4,800af70 <_fflush_r+0x1d8>
 800af68:	01000584 	movi	r4,22
 800af6c:	1900101e 	bne	r3,r4,800afb0 <_fflush_r+0x218>
 800af70:	8080030b 	ldhu	r2,12(r16)
 800af74:	80c00417 	ldw	r3,16(r16)
 800af78:	80000115 	stw	zero,4(r16)
 800af7c:	10bdffcc 	andi	r2,r2,63487
 800af80:	8080030d 	sth	r2,12(r16)
 800af84:	80c00015 	stw	r3,0(r16)
 800af88:	003fb706 	br	800ae68 <__alt_data_end+0xfc00ae68>
 800af8c:	98800017 	ldw	r2,0(r19)
 800af90:	103feb26 	beq	r2,zero,800af40 <__alt_data_end+0xfc00af40>
 800af94:	00c00744 	movi	r3,29
 800af98:	10c00226 	beq	r2,r3,800afa4 <_fflush_r+0x20c>
 800af9c:	00c00584 	movi	r3,22
 800afa0:	10ffd61e 	bne	r2,r3,800aefc <__alt_data_end+0xfc00aefc>
 800afa4:	9c400015 	stw	r17,0(r19)
 800afa8:	0005883a 	mov	r2,zero
 800afac:	003fb706 	br	800ae8c <__alt_data_end+0xfc00ae8c>
 800afb0:	80c0030b 	ldhu	r3,12(r16)
 800afb4:	18c01014 	ori	r3,r3,64
 800afb8:	80c0030d 	sth	r3,12(r16)
 800afbc:	003fb306 	br	800ae8c <__alt_data_end+0xfc00ae8c>

0800afc0 <fflush>:
 800afc0:	20000526 	beq	r4,zero,800afd8 <fflush+0x18>
 800afc4:	008200b4 	movhi	r2,2050
 800afc8:	10888a04 	addi	r2,r2,8744
 800afcc:	200b883a 	mov	r5,r4
 800afd0:	11000017 	ldw	r4,0(r2)
 800afd4:	800ad981 	jmpi	800ad98 <_fflush_r>
 800afd8:	008200b4 	movhi	r2,2050
 800afdc:	10888904 	addi	r2,r2,8740
 800afe0:	11000017 	ldw	r4,0(r2)
 800afe4:	01420074 	movhi	r5,2049
 800afe8:	296b6604 	addi	r5,r5,-21096
 800afec:	800bd001 	jmpi	800bd00 <_fwalk_reent>

0800aff0 <__fp_lock>:
 800aff0:	0005883a 	mov	r2,zero
 800aff4:	f800283a 	ret

0800aff8 <__fp_unlock>:
 800aff8:	0005883a 	mov	r2,zero
 800affc:	f800283a 	ret

0800b000 <_cleanup_r>:
 800b000:	01420074 	movhi	r5,2049
 800b004:	29422004 	addi	r5,r5,2176
 800b008:	800bc481 	jmpi	800bc48 <_fwalk>

0800b00c <__sinit.part.1>:
 800b00c:	defff604 	addi	sp,sp,-40
 800b010:	00c20074 	movhi	r3,2049
 800b014:	dfc00915 	stw	ra,36(sp)
 800b018:	df000815 	stw	fp,32(sp)
 800b01c:	ddc00715 	stw	r23,28(sp)
 800b020:	dd800615 	stw	r22,24(sp)
 800b024:	dd400515 	stw	r21,20(sp)
 800b028:	dd000415 	stw	r20,16(sp)
 800b02c:	dcc00315 	stw	r19,12(sp)
 800b030:	dc800215 	stw	r18,8(sp)
 800b034:	dc400115 	stw	r17,4(sp)
 800b038:	dc000015 	stw	r16,0(sp)
 800b03c:	18ec0004 	addi	r3,r3,-20480
 800b040:	24000117 	ldw	r16,4(r4)
 800b044:	20c00f15 	stw	r3,60(r4)
 800b048:	07000044 	movi	fp,1
 800b04c:	00c000c4 	movi	r3,3
 800b050:	2080bb04 	addi	r2,r4,748
 800b054:	20c0b915 	stw	r3,740(r4)
 800b058:	27000e15 	stw	fp,56(r4)
 800b05c:	2080ba15 	stw	r2,744(r4)
 800b060:	2000b815 	stw	zero,736(r4)
 800b064:	05c00204 	movi	r23,8
 800b068:	00800104 	movi	r2,4
 800b06c:	2025883a 	mov	r18,r4
 800b070:	b80d883a 	mov	r6,r23
 800b074:	81001704 	addi	r4,r16,92
 800b078:	000b883a 	mov	r5,zero
 800b07c:	80000015 	stw	zero,0(r16)
 800b080:	80000115 	stw	zero,4(r16)
 800b084:	80000215 	stw	zero,8(r16)
 800b088:	8080030d 	sth	r2,12(r16)
 800b08c:	80001915 	stw	zero,100(r16)
 800b090:	8000038d 	sth	zero,14(r16)
 800b094:	80000415 	stw	zero,16(r16)
 800b098:	80000515 	stw	zero,20(r16)
 800b09c:	80000615 	stw	zero,24(r16)
 800b0a0:	800c3cc0 	call	800c3cc <memset>
 800b0a4:	05820074 	movhi	r22,2049
 800b0a8:	94400217 	ldw	r17,8(r18)
 800b0ac:	05420074 	movhi	r21,2049
 800b0b0:	05020074 	movhi	r20,2049
 800b0b4:	04c20074 	movhi	r19,2049
 800b0b8:	b5b6fe04 	addi	r22,r22,-9224
 800b0bc:	ad771504 	addi	r21,r21,-9132
 800b0c0:	a5373404 	addi	r20,r20,-9008
 800b0c4:	9cf74b04 	addi	r19,r19,-8916
 800b0c8:	85800815 	stw	r22,32(r16)
 800b0cc:	85400915 	stw	r21,36(r16)
 800b0d0:	85000a15 	stw	r20,40(r16)
 800b0d4:	84c00b15 	stw	r19,44(r16)
 800b0d8:	84000715 	stw	r16,28(r16)
 800b0dc:	00800284 	movi	r2,10
 800b0e0:	89001704 	addi	r4,r17,92
 800b0e4:	b80d883a 	mov	r6,r23
 800b0e8:	000b883a 	mov	r5,zero
 800b0ec:	88000015 	stw	zero,0(r17)
 800b0f0:	88000115 	stw	zero,4(r17)
 800b0f4:	88000215 	stw	zero,8(r17)
 800b0f8:	8880030d 	sth	r2,12(r17)
 800b0fc:	88001915 	stw	zero,100(r17)
 800b100:	8f00038d 	sth	fp,14(r17)
 800b104:	88000415 	stw	zero,16(r17)
 800b108:	88000515 	stw	zero,20(r17)
 800b10c:	88000615 	stw	zero,24(r17)
 800b110:	800c3cc0 	call	800c3cc <memset>
 800b114:	94000317 	ldw	r16,12(r18)
 800b118:	00800484 	movi	r2,18
 800b11c:	8c400715 	stw	r17,28(r17)
 800b120:	8d800815 	stw	r22,32(r17)
 800b124:	8d400915 	stw	r21,36(r17)
 800b128:	8d000a15 	stw	r20,40(r17)
 800b12c:	8cc00b15 	stw	r19,44(r17)
 800b130:	8080030d 	sth	r2,12(r16)
 800b134:	00800084 	movi	r2,2
 800b138:	80000015 	stw	zero,0(r16)
 800b13c:	80000115 	stw	zero,4(r16)
 800b140:	80000215 	stw	zero,8(r16)
 800b144:	80001915 	stw	zero,100(r16)
 800b148:	8080038d 	sth	r2,14(r16)
 800b14c:	80000415 	stw	zero,16(r16)
 800b150:	80000515 	stw	zero,20(r16)
 800b154:	80000615 	stw	zero,24(r16)
 800b158:	81001704 	addi	r4,r16,92
 800b15c:	000b883a 	mov	r5,zero
 800b160:	b80d883a 	mov	r6,r23
 800b164:	800c3cc0 	call	800c3cc <memset>
 800b168:	84000715 	stw	r16,28(r16)
 800b16c:	85800815 	stw	r22,32(r16)
 800b170:	85400915 	stw	r21,36(r16)
 800b174:	85000a15 	stw	r20,40(r16)
 800b178:	84c00b15 	stw	r19,44(r16)
 800b17c:	dfc00917 	ldw	ra,36(sp)
 800b180:	df000817 	ldw	fp,32(sp)
 800b184:	ddc00717 	ldw	r23,28(sp)
 800b188:	dd800617 	ldw	r22,24(sp)
 800b18c:	dd400517 	ldw	r21,20(sp)
 800b190:	dd000417 	ldw	r20,16(sp)
 800b194:	dcc00317 	ldw	r19,12(sp)
 800b198:	dc800217 	ldw	r18,8(sp)
 800b19c:	dc400117 	ldw	r17,4(sp)
 800b1a0:	dc000017 	ldw	r16,0(sp)
 800b1a4:	dec00a04 	addi	sp,sp,40
 800b1a8:	f800283a 	ret

0800b1ac <__sfmoreglue>:
 800b1ac:	defffc04 	addi	sp,sp,-16
 800b1b0:	dc400115 	stw	r17,4(sp)
 800b1b4:	2c401a24 	muli	r17,r5,104
 800b1b8:	dc800215 	stw	r18,8(sp)
 800b1bc:	2825883a 	mov	r18,r5
 800b1c0:	89400304 	addi	r5,r17,12
 800b1c4:	dc000015 	stw	r16,0(sp)
 800b1c8:	dfc00315 	stw	ra,12(sp)
 800b1cc:	80048dc0 	call	80048dc <_malloc_r>
 800b1d0:	1021883a 	mov	r16,r2
 800b1d4:	10000726 	beq	r2,zero,800b1f4 <__sfmoreglue+0x48>
 800b1d8:	11000304 	addi	r4,r2,12
 800b1dc:	10000015 	stw	zero,0(r2)
 800b1e0:	14800115 	stw	r18,4(r2)
 800b1e4:	11000215 	stw	r4,8(r2)
 800b1e8:	000b883a 	mov	r5,zero
 800b1ec:	880d883a 	mov	r6,r17
 800b1f0:	800c3cc0 	call	800c3cc <memset>
 800b1f4:	8005883a 	mov	r2,r16
 800b1f8:	dfc00317 	ldw	ra,12(sp)
 800b1fc:	dc800217 	ldw	r18,8(sp)
 800b200:	dc400117 	ldw	r17,4(sp)
 800b204:	dc000017 	ldw	r16,0(sp)
 800b208:	dec00404 	addi	sp,sp,16
 800b20c:	f800283a 	ret

0800b210 <__sfp>:
 800b210:	008200b4 	movhi	r2,2050
 800b214:	defffb04 	addi	sp,sp,-20
 800b218:	10888904 	addi	r2,r2,8740
 800b21c:	dc800215 	stw	r18,8(sp)
 800b220:	14800017 	ldw	r18,0(r2)
 800b224:	dcc00315 	stw	r19,12(sp)
 800b228:	dfc00415 	stw	ra,16(sp)
 800b22c:	90800e17 	ldw	r2,56(r18)
 800b230:	dc400115 	stw	r17,4(sp)
 800b234:	dc000015 	stw	r16,0(sp)
 800b238:	2027883a 	mov	r19,r4
 800b23c:	1000021e 	bne	r2,zero,800b248 <__sfp+0x38>
 800b240:	9009883a 	mov	r4,r18
 800b244:	800b00c0 	call	800b00c <__sinit.part.1>
 800b248:	9480b804 	addi	r18,r18,736
 800b24c:	047fffc4 	movi	r17,-1
 800b250:	91400117 	ldw	r5,4(r18)
 800b254:	94000217 	ldw	r16,8(r18)
 800b258:	297fffc4 	addi	r5,r5,-1
 800b25c:	28000a16 	blt	r5,zero,800b288 <__sfp+0x78>
 800b260:	8080030f 	ldh	r2,12(r16)
 800b264:	10000c26 	beq	r2,zero,800b298 <__sfp+0x88>
 800b268:	80c01d04 	addi	r3,r16,116
 800b26c:	00000206 	br	800b278 <__sfp+0x68>
 800b270:	18bfe60f 	ldh	r2,-104(r3)
 800b274:	10000826 	beq	r2,zero,800b298 <__sfp+0x88>
 800b278:	297fffc4 	addi	r5,r5,-1
 800b27c:	1c3ffd04 	addi	r16,r3,-12
 800b280:	18c01a04 	addi	r3,r3,104
 800b284:	2c7ffa1e 	bne	r5,r17,800b270 <__alt_data_end+0xfc00b270>
 800b288:	90800017 	ldw	r2,0(r18)
 800b28c:	10001d26 	beq	r2,zero,800b304 <__sfp+0xf4>
 800b290:	1025883a 	mov	r18,r2
 800b294:	003fee06 	br	800b250 <__alt_data_end+0xfc00b250>
 800b298:	00bfffc4 	movi	r2,-1
 800b29c:	8080038d 	sth	r2,14(r16)
 800b2a0:	00800044 	movi	r2,1
 800b2a4:	8080030d 	sth	r2,12(r16)
 800b2a8:	80001915 	stw	zero,100(r16)
 800b2ac:	80000015 	stw	zero,0(r16)
 800b2b0:	80000215 	stw	zero,8(r16)
 800b2b4:	80000115 	stw	zero,4(r16)
 800b2b8:	80000415 	stw	zero,16(r16)
 800b2bc:	80000515 	stw	zero,20(r16)
 800b2c0:	80000615 	stw	zero,24(r16)
 800b2c4:	81001704 	addi	r4,r16,92
 800b2c8:	000b883a 	mov	r5,zero
 800b2cc:	01800204 	movi	r6,8
 800b2d0:	800c3cc0 	call	800c3cc <memset>
 800b2d4:	8005883a 	mov	r2,r16
 800b2d8:	80000c15 	stw	zero,48(r16)
 800b2dc:	80000d15 	stw	zero,52(r16)
 800b2e0:	80001115 	stw	zero,68(r16)
 800b2e4:	80001215 	stw	zero,72(r16)
 800b2e8:	dfc00417 	ldw	ra,16(sp)
 800b2ec:	dcc00317 	ldw	r19,12(sp)
 800b2f0:	dc800217 	ldw	r18,8(sp)
 800b2f4:	dc400117 	ldw	r17,4(sp)
 800b2f8:	dc000017 	ldw	r16,0(sp)
 800b2fc:	dec00504 	addi	sp,sp,20
 800b300:	f800283a 	ret
 800b304:	9809883a 	mov	r4,r19
 800b308:	01400104 	movi	r5,4
 800b30c:	800b1ac0 	call	800b1ac <__sfmoreglue>
 800b310:	90800015 	stw	r2,0(r18)
 800b314:	103fde1e 	bne	r2,zero,800b290 <__alt_data_end+0xfc00b290>
 800b318:	00800304 	movi	r2,12
 800b31c:	98800015 	stw	r2,0(r19)
 800b320:	0005883a 	mov	r2,zero
 800b324:	003ff006 	br	800b2e8 <__alt_data_end+0xfc00b2e8>

0800b328 <_cleanup>:
 800b328:	008200b4 	movhi	r2,2050
 800b32c:	10888904 	addi	r2,r2,8740
 800b330:	11000017 	ldw	r4,0(r2)
 800b334:	01420074 	movhi	r5,2049
 800b338:	29422004 	addi	r5,r5,2176
 800b33c:	800bc481 	jmpi	800bc48 <_fwalk>

0800b340 <__sinit>:
 800b340:	20800e17 	ldw	r2,56(r4)
 800b344:	10000126 	beq	r2,zero,800b34c <__sinit+0xc>
 800b348:	f800283a 	ret
 800b34c:	800b00c1 	jmpi	800b00c <__sinit.part.1>

0800b350 <__sfp_lock_acquire>:
 800b350:	f800283a 	ret

0800b354 <__sfp_lock_release>:
 800b354:	f800283a 	ret

0800b358 <__sinit_lock_acquire>:
 800b358:	f800283a 	ret

0800b35c <__sinit_lock_release>:
 800b35c:	f800283a 	ret

0800b360 <__fp_lock_all>:
 800b360:	008200b4 	movhi	r2,2050
 800b364:	10888a04 	addi	r2,r2,8744
 800b368:	11000017 	ldw	r4,0(r2)
 800b36c:	01420074 	movhi	r5,2049
 800b370:	296bfc04 	addi	r5,r5,-20496
 800b374:	800bc481 	jmpi	800bc48 <_fwalk>

0800b378 <__fp_unlock_all>:
 800b378:	008200b4 	movhi	r2,2050
 800b37c:	10888a04 	addi	r2,r2,8744
 800b380:	11000017 	ldw	r4,0(r2)
 800b384:	01420074 	movhi	r5,2049
 800b388:	296bfe04 	addi	r5,r5,-20488
 800b38c:	800bc481 	jmpi	800bc48 <_fwalk>

0800b390 <_malloc_trim_r>:
 800b390:	defffb04 	addi	sp,sp,-20
 800b394:	dcc00315 	stw	r19,12(sp)
 800b398:	04c200b4 	movhi	r19,2050
 800b39c:	dc800215 	stw	r18,8(sp)
 800b3a0:	dc400115 	stw	r17,4(sp)
 800b3a4:	dc000015 	stw	r16,0(sp)
 800b3a8:	dfc00415 	stw	ra,16(sp)
 800b3ac:	2821883a 	mov	r16,r5
 800b3b0:	9cc2dc04 	addi	r19,r19,2928
 800b3b4:	2025883a 	mov	r18,r4
 800b3b8:	80132d40 	call	80132d4 <__malloc_lock>
 800b3bc:	98800217 	ldw	r2,8(r19)
 800b3c0:	14400117 	ldw	r17,4(r2)
 800b3c4:	00bfff04 	movi	r2,-4
 800b3c8:	88a2703a 	and	r17,r17,r2
 800b3cc:	8c21c83a 	sub	r16,r17,r16
 800b3d0:	8403fbc4 	addi	r16,r16,4079
 800b3d4:	8020d33a 	srli	r16,r16,12
 800b3d8:	0083ffc4 	movi	r2,4095
 800b3dc:	843fffc4 	addi	r16,r16,-1
 800b3e0:	8020933a 	slli	r16,r16,12
 800b3e4:	1400060e 	bge	r2,r16,800b400 <_malloc_trim_r+0x70>
 800b3e8:	9009883a 	mov	r4,r18
 800b3ec:	000b883a 	mov	r5,zero
 800b3f0:	80051d80 	call	80051d8 <_sbrk_r>
 800b3f4:	98c00217 	ldw	r3,8(r19)
 800b3f8:	1c47883a 	add	r3,r3,r17
 800b3fc:	10c00a26 	beq	r2,r3,800b428 <_malloc_trim_r+0x98>
 800b400:	9009883a 	mov	r4,r18
 800b404:	80132f40 	call	80132f4 <__malloc_unlock>
 800b408:	0005883a 	mov	r2,zero
 800b40c:	dfc00417 	ldw	ra,16(sp)
 800b410:	dcc00317 	ldw	r19,12(sp)
 800b414:	dc800217 	ldw	r18,8(sp)
 800b418:	dc400117 	ldw	r17,4(sp)
 800b41c:	dc000017 	ldw	r16,0(sp)
 800b420:	dec00504 	addi	sp,sp,20
 800b424:	f800283a 	ret
 800b428:	9009883a 	mov	r4,r18
 800b42c:	040bc83a 	sub	r5,zero,r16
 800b430:	80051d80 	call	80051d8 <_sbrk_r>
 800b434:	00ffffc4 	movi	r3,-1
 800b438:	10c00d26 	beq	r2,r3,800b470 <_malloc_trim_r+0xe0>
 800b43c:	00c200b4 	movhi	r3,2050
 800b440:	18cf7704 	addi	r3,r3,15836
 800b444:	18800017 	ldw	r2,0(r3)
 800b448:	99000217 	ldw	r4,8(r19)
 800b44c:	8c23c83a 	sub	r17,r17,r16
 800b450:	8c400054 	ori	r17,r17,1
 800b454:	1421c83a 	sub	r16,r2,r16
 800b458:	24400115 	stw	r17,4(r4)
 800b45c:	9009883a 	mov	r4,r18
 800b460:	1c000015 	stw	r16,0(r3)
 800b464:	80132f40 	call	80132f4 <__malloc_unlock>
 800b468:	00800044 	movi	r2,1
 800b46c:	003fe706 	br	800b40c <__alt_data_end+0xfc00b40c>
 800b470:	9009883a 	mov	r4,r18
 800b474:	000b883a 	mov	r5,zero
 800b478:	80051d80 	call	80051d8 <_sbrk_r>
 800b47c:	99000217 	ldw	r4,8(r19)
 800b480:	014003c4 	movi	r5,15
 800b484:	1107c83a 	sub	r3,r2,r4
 800b488:	28ffdd0e 	bge	r5,r3,800b400 <__alt_data_end+0xfc00b400>
 800b48c:	014200b4 	movhi	r5,2050
 800b490:	29488b04 	addi	r5,r5,8748
 800b494:	29400017 	ldw	r5,0(r5)
 800b498:	18c00054 	ori	r3,r3,1
 800b49c:	20c00115 	stw	r3,4(r4)
 800b4a0:	00c200b4 	movhi	r3,2050
 800b4a4:	1145c83a 	sub	r2,r2,r5
 800b4a8:	18cf7704 	addi	r3,r3,15836
 800b4ac:	18800015 	stw	r2,0(r3)
 800b4b0:	003fd306 	br	800b400 <__alt_data_end+0xfc00b400>

0800b4b4 <_free_r>:
 800b4b4:	28004c26 	beq	r5,zero,800b5e8 <_free_r+0x134>
 800b4b8:	defffd04 	addi	sp,sp,-12
 800b4bc:	dc400115 	stw	r17,4(sp)
 800b4c0:	dc000015 	stw	r16,0(sp)
 800b4c4:	2023883a 	mov	r17,r4
 800b4c8:	2821883a 	mov	r16,r5
 800b4cc:	dfc00215 	stw	ra,8(sp)
 800b4d0:	80132d40 	call	80132d4 <__malloc_lock>
 800b4d4:	813fff17 	ldw	r4,-4(r16)
 800b4d8:	00bfff84 	movi	r2,-2
 800b4dc:	024200b4 	movhi	r9,2050
 800b4e0:	81bffe04 	addi	r6,r16,-8
 800b4e4:	2084703a 	and	r2,r4,r2
 800b4e8:	4a42dc04 	addi	r9,r9,2928
 800b4ec:	308b883a 	add	r5,r6,r2
 800b4f0:	2a000117 	ldw	r8,4(r5)
 800b4f4:	49c00217 	ldw	r7,8(r9)
 800b4f8:	00ffff04 	movi	r3,-4
 800b4fc:	40c6703a 	and	r3,r8,r3
 800b500:	39405326 	beq	r7,r5,800b650 <_free_r+0x19c>
 800b504:	28c00115 	stw	r3,4(r5)
 800b508:	2100004c 	andi	r4,r4,1
 800b50c:	2000091e 	bne	r4,zero,800b534 <_free_r+0x80>
 800b510:	81fffe17 	ldw	r7,-8(r16)
 800b514:	4a000204 	addi	r8,r9,8
 800b518:	31cdc83a 	sub	r6,r6,r7
 800b51c:	31000217 	ldw	r4,8(r6)
 800b520:	11c5883a 	add	r2,r2,r7
 800b524:	22006126 	beq	r4,r8,800b6ac <_free_r+0x1f8>
 800b528:	31c00317 	ldw	r7,12(r6)
 800b52c:	21c00315 	stw	r7,12(r4)
 800b530:	39000215 	stw	r4,8(r7)
 800b534:	28c9883a 	add	r4,r5,r3
 800b538:	21c00117 	ldw	r7,4(r4)
 800b53c:	39c0004c 	andi	r7,r7,1
 800b540:	38000d1e 	bne	r7,zero,800b578 <_free_r+0xc4>
 800b544:	29000217 	ldw	r4,8(r5)
 800b548:	10c5883a 	add	r2,r2,r3
 800b54c:	00c200b4 	movhi	r3,2050
 800b550:	18c2de04 	addi	r3,r3,2936
 800b554:	20c07526 	beq	r4,r3,800b72c <_free_r+0x278>
 800b558:	29c00317 	ldw	r7,12(r5)
 800b55c:	11400054 	ori	r5,r2,1
 800b560:	3087883a 	add	r3,r6,r2
 800b564:	21c00315 	stw	r7,12(r4)
 800b568:	39000215 	stw	r4,8(r7)
 800b56c:	31400115 	stw	r5,4(r6)
 800b570:	18800015 	stw	r2,0(r3)
 800b574:	00000406 	br	800b588 <_free_r+0xd4>
 800b578:	10c00054 	ori	r3,r2,1
 800b57c:	30c00115 	stw	r3,4(r6)
 800b580:	3087883a 	add	r3,r6,r2
 800b584:	18800015 	stw	r2,0(r3)
 800b588:	00c07fc4 	movi	r3,511
 800b58c:	18801736 	bltu	r3,r2,800b5ec <_free_r+0x138>
 800b590:	1004d0fa 	srli	r2,r2,3
 800b594:	01400044 	movi	r5,1
 800b598:	49000117 	ldw	r4,4(r9)
 800b59c:	1087883a 	add	r3,r2,r2
 800b5a0:	18c7883a 	add	r3,r3,r3
 800b5a4:	1005d0ba 	srai	r2,r2,2
 800b5a8:	18c7883a 	add	r3,r3,r3
 800b5ac:	1a47883a 	add	r3,r3,r9
 800b5b0:	19c00217 	ldw	r7,8(r3)
 800b5b4:	2884983a 	sll	r2,r5,r2
 800b5b8:	30c00315 	stw	r3,12(r6)
 800b5bc:	31c00215 	stw	r7,8(r6)
 800b5c0:	1104b03a 	or	r2,r2,r4
 800b5c4:	19800215 	stw	r6,8(r3)
 800b5c8:	48800115 	stw	r2,4(r9)
 800b5cc:	39800315 	stw	r6,12(r7)
 800b5d0:	8809883a 	mov	r4,r17
 800b5d4:	dfc00217 	ldw	ra,8(sp)
 800b5d8:	dc400117 	ldw	r17,4(sp)
 800b5dc:	dc000017 	ldw	r16,0(sp)
 800b5e0:	dec00304 	addi	sp,sp,12
 800b5e4:	80132f41 	jmpi	80132f4 <__malloc_unlock>
 800b5e8:	f800283a 	ret
 800b5ec:	1006d27a 	srli	r3,r2,9
 800b5f0:	01000104 	movi	r4,4
 800b5f4:	20c04036 	bltu	r4,r3,800b6f8 <_free_r+0x244>
 800b5f8:	1006d1ba 	srli	r3,r2,6
 800b5fc:	19400e04 	addi	r5,r3,56
 800b600:	2947883a 	add	r3,r5,r5
 800b604:	18c7883a 	add	r3,r3,r3
 800b608:	18c7883a 	add	r3,r3,r3
 800b60c:	1a49883a 	add	r4,r3,r9
 800b610:	20c00217 	ldw	r3,8(r4)
 800b614:	01c200b4 	movhi	r7,2050
 800b618:	39c2dc04 	addi	r7,r7,2928
 800b61c:	19003b26 	beq	r3,r4,800b70c <_free_r+0x258>
 800b620:	01ffff04 	movi	r7,-4
 800b624:	19400117 	ldw	r5,4(r3)
 800b628:	29ca703a 	and	r5,r5,r7
 800b62c:	1140022e 	bgeu	r2,r5,800b638 <_free_r+0x184>
 800b630:	18c00217 	ldw	r3,8(r3)
 800b634:	20fffb1e 	bne	r4,r3,800b624 <__alt_data_end+0xfc00b624>
 800b638:	18800317 	ldw	r2,12(r3)
 800b63c:	30800315 	stw	r2,12(r6)
 800b640:	30c00215 	stw	r3,8(r6)
 800b644:	11800215 	stw	r6,8(r2)
 800b648:	19800315 	stw	r6,12(r3)
 800b64c:	003fe006 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800b650:	2100004c 	andi	r4,r4,1
 800b654:	1885883a 	add	r2,r3,r2
 800b658:	2000071e 	bne	r4,zero,800b678 <_free_r+0x1c4>
 800b65c:	817ffe17 	ldw	r5,-8(r16)
 800b660:	314dc83a 	sub	r6,r6,r5
 800b664:	30c00317 	ldw	r3,12(r6)
 800b668:	31000217 	ldw	r4,8(r6)
 800b66c:	1145883a 	add	r2,r2,r5
 800b670:	20c00315 	stw	r3,12(r4)
 800b674:	19000215 	stw	r4,8(r3)
 800b678:	10c00054 	ori	r3,r2,1
 800b67c:	30c00115 	stw	r3,4(r6)
 800b680:	00c200b4 	movhi	r3,2050
 800b684:	18c88c04 	addi	r3,r3,8752
 800b688:	18c00017 	ldw	r3,0(r3)
 800b68c:	49800215 	stw	r6,8(r9)
 800b690:	10ffcf36 	bltu	r2,r3,800b5d0 <__alt_data_end+0xfc00b5d0>
 800b694:	008200b4 	movhi	r2,2050
 800b698:	108f6c04 	addi	r2,r2,15792
 800b69c:	11400017 	ldw	r5,0(r2)
 800b6a0:	8809883a 	mov	r4,r17
 800b6a4:	800b3900 	call	800b390 <_malloc_trim_r>
 800b6a8:	003fc906 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800b6ac:	28c9883a 	add	r4,r5,r3
 800b6b0:	21000117 	ldw	r4,4(r4)
 800b6b4:	2100004c 	andi	r4,r4,1
 800b6b8:	20000a1e 	bne	r4,zero,800b6e4 <_free_r+0x230>
 800b6bc:	29000317 	ldw	r4,12(r5)
 800b6c0:	29400217 	ldw	r5,8(r5)
 800b6c4:	10c5883a 	add	r2,r2,r3
 800b6c8:	10c00054 	ori	r3,r2,1
 800b6cc:	29000315 	stw	r4,12(r5)
 800b6d0:	21400215 	stw	r5,8(r4)
 800b6d4:	30c00115 	stw	r3,4(r6)
 800b6d8:	308d883a 	add	r6,r6,r2
 800b6dc:	30800015 	stw	r2,0(r6)
 800b6e0:	003fbb06 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800b6e4:	10c00054 	ori	r3,r2,1
 800b6e8:	30c00115 	stw	r3,4(r6)
 800b6ec:	308d883a 	add	r6,r6,r2
 800b6f0:	30800015 	stw	r2,0(r6)
 800b6f4:	003fb606 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800b6f8:	01000504 	movi	r4,20
 800b6fc:	20c01436 	bltu	r4,r3,800b750 <_free_r+0x29c>
 800b700:	194016c4 	addi	r5,r3,91
 800b704:	2947883a 	add	r3,r5,r5
 800b708:	003fbe06 	br	800b604 <__alt_data_end+0xfc00b604>
 800b70c:	280bd0ba 	srai	r5,r5,2
 800b710:	00800044 	movi	r2,1
 800b714:	39000117 	ldw	r4,4(r7)
 800b718:	114a983a 	sll	r5,r2,r5
 800b71c:	1805883a 	mov	r2,r3
 800b720:	2908b03a 	or	r4,r5,r4
 800b724:	39000115 	stw	r4,4(r7)
 800b728:	003fc406 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b72c:	49800515 	stw	r6,20(r9)
 800b730:	49800415 	stw	r6,16(r9)
 800b734:	10c00054 	ori	r3,r2,1
 800b738:	31000315 	stw	r4,12(r6)
 800b73c:	31000215 	stw	r4,8(r6)
 800b740:	30c00115 	stw	r3,4(r6)
 800b744:	308d883a 	add	r6,r6,r2
 800b748:	30800015 	stw	r2,0(r6)
 800b74c:	003fa006 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800b750:	01001504 	movi	r4,84
 800b754:	20c00436 	bltu	r4,r3,800b768 <_free_r+0x2b4>
 800b758:	1006d33a 	srli	r3,r2,12
 800b75c:	19401b84 	addi	r5,r3,110
 800b760:	2947883a 	add	r3,r5,r5
 800b764:	003fa706 	br	800b604 <__alt_data_end+0xfc00b604>
 800b768:	01005504 	movi	r4,340
 800b76c:	20c00436 	bltu	r4,r3,800b780 <_free_r+0x2cc>
 800b770:	1006d3fa 	srli	r3,r2,15
 800b774:	19401dc4 	addi	r5,r3,119
 800b778:	2947883a 	add	r3,r5,r5
 800b77c:	003fa106 	br	800b604 <__alt_data_end+0xfc00b604>
 800b780:	01015504 	movi	r4,1364
 800b784:	20c00436 	bltu	r4,r3,800b798 <_free_r+0x2e4>
 800b788:	1006d4ba 	srli	r3,r2,18
 800b78c:	19401f04 	addi	r5,r3,124
 800b790:	2947883a 	add	r3,r5,r5
 800b794:	003f9b06 	br	800b604 <__alt_data_end+0xfc00b604>
 800b798:	00c03f04 	movi	r3,252
 800b79c:	01401f84 	movi	r5,126
 800b7a0:	003f9806 	br	800b604 <__alt_data_end+0xfc00b604>

0800b7a4 <__sfvwrite_r>:
 800b7a4:	30800217 	ldw	r2,8(r6)
 800b7a8:	10004526 	beq	r2,zero,800b8c0 <__sfvwrite_r+0x11c>
 800b7ac:	28c0030b 	ldhu	r3,12(r5)
 800b7b0:	defff404 	addi	sp,sp,-48
 800b7b4:	dd400715 	stw	r21,28(sp)
 800b7b8:	dcc00515 	stw	r19,20(sp)
 800b7bc:	dc000215 	stw	r16,8(sp)
 800b7c0:	dfc00b15 	stw	ra,44(sp)
 800b7c4:	df000a15 	stw	fp,40(sp)
 800b7c8:	ddc00915 	stw	r23,36(sp)
 800b7cc:	dd800815 	stw	r22,32(sp)
 800b7d0:	dd000615 	stw	r20,24(sp)
 800b7d4:	dc800415 	stw	r18,16(sp)
 800b7d8:	dc400315 	stw	r17,12(sp)
 800b7dc:	1880020c 	andi	r2,r3,8
 800b7e0:	2821883a 	mov	r16,r5
 800b7e4:	202b883a 	mov	r21,r4
 800b7e8:	3027883a 	mov	r19,r6
 800b7ec:	10002526 	beq	r2,zero,800b884 <__sfvwrite_r+0xe0>
 800b7f0:	28800417 	ldw	r2,16(r5)
 800b7f4:	10002326 	beq	r2,zero,800b884 <__sfvwrite_r+0xe0>
 800b7f8:	1880008c 	andi	r2,r3,2
 800b7fc:	9c400017 	ldw	r17,0(r19)
 800b800:	10003126 	beq	r2,zero,800b8c8 <__sfvwrite_r+0x124>
 800b804:	0029883a 	mov	r20,zero
 800b808:	0025883a 	mov	r18,zero
 800b80c:	05810004 	movi	r22,1024
 800b810:	a00d883a 	mov	r6,r20
 800b814:	a809883a 	mov	r4,r21
 800b818:	90002526 	beq	r18,zero,800b8b0 <__sfvwrite_r+0x10c>
 800b81c:	900f883a 	mov	r7,r18
 800b820:	81400717 	ldw	r5,28(r16)
 800b824:	b480012e 	bgeu	r22,r18,800b82c <__sfvwrite_r+0x88>
 800b828:	01c10004 	movi	r7,1024
 800b82c:	80800917 	ldw	r2,36(r16)
 800b830:	103ee83a 	callr	r2
 800b834:	0080510e 	bge	zero,r2,800b97c <__sfvwrite_r+0x1d8>
 800b838:	98c00217 	ldw	r3,8(r19)
 800b83c:	a0a9883a 	add	r20,r20,r2
 800b840:	90a5c83a 	sub	r18,r18,r2
 800b844:	1885c83a 	sub	r2,r3,r2
 800b848:	98800215 	stw	r2,8(r19)
 800b84c:	103ff01e 	bne	r2,zero,800b810 <__alt_data_end+0xfc00b810>
 800b850:	0005883a 	mov	r2,zero
 800b854:	dfc00b17 	ldw	ra,44(sp)
 800b858:	df000a17 	ldw	fp,40(sp)
 800b85c:	ddc00917 	ldw	r23,36(sp)
 800b860:	dd800817 	ldw	r22,32(sp)
 800b864:	dd400717 	ldw	r21,28(sp)
 800b868:	dd000617 	ldw	r20,24(sp)
 800b86c:	dcc00517 	ldw	r19,20(sp)
 800b870:	dc800417 	ldw	r18,16(sp)
 800b874:	dc400317 	ldw	r17,12(sp)
 800b878:	dc000217 	ldw	r16,8(sp)
 800b87c:	dec00c04 	addi	sp,sp,48
 800b880:	f800283a 	ret
 800b884:	a809883a 	mov	r4,r21
 800b888:	800b883a 	mov	r5,r16
 800b88c:	80093400 	call	8009340 <__swsetup_r>
 800b890:	80c0030b 	ldhu	r3,12(r16)
 800b894:	103fd826 	beq	r2,zero,800b7f8 <__alt_data_end+0xfc00b7f8>
 800b898:	18c01014 	ori	r3,r3,64
 800b89c:	80c0030d 	sth	r3,12(r16)
 800b8a0:	00c00244 	movi	r3,9
 800b8a4:	00bfffc4 	movi	r2,-1
 800b8a8:	a8c00015 	stw	r3,0(r21)
 800b8ac:	003fe906 	br	800b854 <__alt_data_end+0xfc00b854>
 800b8b0:	8d000017 	ldw	r20,0(r17)
 800b8b4:	8c800117 	ldw	r18,4(r17)
 800b8b8:	8c400204 	addi	r17,r17,8
 800b8bc:	003fd406 	br	800b810 <__alt_data_end+0xfc00b810>
 800b8c0:	0005883a 	mov	r2,zero
 800b8c4:	f800283a 	ret
 800b8c8:	1880004c 	andi	r2,r3,1
 800b8cc:	1000301e 	bne	r2,zero,800b990 <__sfvwrite_r+0x1ec>
 800b8d0:	002f883a 	mov	r23,zero
 800b8d4:	0025883a 	mov	r18,zero
 800b8d8:	90001c26 	beq	r18,zero,800b94c <__sfvwrite_r+0x1a8>
 800b8dc:	1880800c 	andi	r2,r3,512
 800b8e0:	85000217 	ldw	r20,8(r16)
 800b8e4:	10006c26 	beq	r2,zero,800ba98 <__sfvwrite_r+0x2f4>
 800b8e8:	a02d883a 	mov	r22,r20
 800b8ec:	95008536 	bltu	r18,r20,800bb04 <__sfvwrite_r+0x360>
 800b8f0:	1881200c 	andi	r2,r3,1152
 800b8f4:	10009d1e 	bne	r2,zero,800bb6c <__sfvwrite_r+0x3c8>
 800b8f8:	81000017 	ldw	r4,0(r16)
 800b8fc:	a039883a 	mov	fp,r20
 800b900:	9029883a 	mov	r20,r18
 800b904:	b80b883a 	mov	r5,r23
 800b908:	b00d883a 	mov	r6,r22
 800b90c:	800c2700 	call	800c270 <memmove>
 800b910:	80c00217 	ldw	r3,8(r16)
 800b914:	81000017 	ldw	r4,0(r16)
 800b918:	9005883a 	mov	r2,r18
 800b91c:	1f39c83a 	sub	fp,r3,fp
 800b920:	258f883a 	add	r7,r4,r22
 800b924:	87000215 	stw	fp,8(r16)
 800b928:	81c00015 	stw	r7,0(r16)
 800b92c:	98c00217 	ldw	r3,8(r19)
 800b930:	b8af883a 	add	r23,r23,r2
 800b934:	90a5c83a 	sub	r18,r18,r2
 800b938:	1d05c83a 	sub	r2,r3,r20
 800b93c:	98800215 	stw	r2,8(r19)
 800b940:	103fc326 	beq	r2,zero,800b850 <__alt_data_end+0xfc00b850>
 800b944:	80c0030b 	ldhu	r3,12(r16)
 800b948:	903fe41e 	bne	r18,zero,800b8dc <__alt_data_end+0xfc00b8dc>
 800b94c:	8dc00017 	ldw	r23,0(r17)
 800b950:	8c800117 	ldw	r18,4(r17)
 800b954:	8c400204 	addi	r17,r17,8
 800b958:	003fdf06 	br	800b8d8 <__alt_data_end+0xfc00b8d8>
 800b95c:	800d5e40 	call	800d5e4 <_realloc_r>
 800b960:	102d883a 	mov	r22,r2
 800b964:	1000a01e 	bne	r2,zero,800bbe8 <__sfvwrite_r+0x444>
 800b968:	81400417 	ldw	r5,16(r16)
 800b96c:	a809883a 	mov	r4,r21
 800b970:	800b4b40 	call	800b4b4 <_free_r>
 800b974:	00800304 	movi	r2,12
 800b978:	a8800015 	stw	r2,0(r21)
 800b97c:	80c0030b 	ldhu	r3,12(r16)
 800b980:	00bfffc4 	movi	r2,-1
 800b984:	18c01014 	ori	r3,r3,64
 800b988:	80c0030d 	sth	r3,12(r16)
 800b98c:	003fb106 	br	800b854 <__alt_data_end+0xfc00b854>
 800b990:	0029883a 	mov	r20,zero
 800b994:	0011883a 	mov	r8,zero
 800b998:	0039883a 	mov	fp,zero
 800b99c:	0025883a 	mov	r18,zero
 800b9a0:	90001f26 	beq	r18,zero,800ba20 <__sfvwrite_r+0x27c>
 800b9a4:	40006826 	beq	r8,zero,800bb48 <__sfvwrite_r+0x3a4>
 800b9a8:	a02f883a 	mov	r23,r20
 800b9ac:	9500012e 	bgeu	r18,r20,800b9b4 <__sfvwrite_r+0x210>
 800b9b0:	902f883a 	mov	r23,r18
 800b9b4:	81000017 	ldw	r4,0(r16)
 800b9b8:	80800417 	ldw	r2,16(r16)
 800b9bc:	b82d883a 	mov	r22,r23
 800b9c0:	81800217 	ldw	r6,8(r16)
 800b9c4:	81c00517 	ldw	r7,20(r16)
 800b9c8:	1100022e 	bgeu	r2,r4,800b9d4 <__sfvwrite_r+0x230>
 800b9cc:	31c7883a 	add	r3,r6,r7
 800b9d0:	1dc01816 	blt	r3,r23,800ba34 <__sfvwrite_r+0x290>
 800b9d4:	b9c03f16 	blt	r23,r7,800bad4 <__sfvwrite_r+0x330>
 800b9d8:	80800917 	ldw	r2,36(r16)
 800b9dc:	81400717 	ldw	r5,28(r16)
 800b9e0:	a809883a 	mov	r4,r21
 800b9e4:	da000115 	stw	r8,4(sp)
 800b9e8:	e00d883a 	mov	r6,fp
 800b9ec:	103ee83a 	callr	r2
 800b9f0:	102d883a 	mov	r22,r2
 800b9f4:	da000117 	ldw	r8,4(sp)
 800b9f8:	00bfe00e 	bge	zero,r2,800b97c <__alt_data_end+0xfc00b97c>
 800b9fc:	a5a9c83a 	sub	r20,r20,r22
 800ba00:	a0001f26 	beq	r20,zero,800ba80 <__sfvwrite_r+0x2dc>
 800ba04:	98800217 	ldw	r2,8(r19)
 800ba08:	e5b9883a 	add	fp,fp,r22
 800ba0c:	95a5c83a 	sub	r18,r18,r22
 800ba10:	15adc83a 	sub	r22,r2,r22
 800ba14:	9d800215 	stw	r22,8(r19)
 800ba18:	b03f8d26 	beq	r22,zero,800b850 <__alt_data_end+0xfc00b850>
 800ba1c:	903fe11e 	bne	r18,zero,800b9a4 <__alt_data_end+0xfc00b9a4>
 800ba20:	8f000017 	ldw	fp,0(r17)
 800ba24:	8c800117 	ldw	r18,4(r17)
 800ba28:	0011883a 	mov	r8,zero
 800ba2c:	8c400204 	addi	r17,r17,8
 800ba30:	003fdb06 	br	800b9a0 <__alt_data_end+0xfc00b9a0>
 800ba34:	180d883a 	mov	r6,r3
 800ba38:	e00b883a 	mov	r5,fp
 800ba3c:	da000115 	stw	r8,4(sp)
 800ba40:	d8c00015 	stw	r3,0(sp)
 800ba44:	800c2700 	call	800c270 <memmove>
 800ba48:	d8c00017 	ldw	r3,0(sp)
 800ba4c:	80800017 	ldw	r2,0(r16)
 800ba50:	a809883a 	mov	r4,r21
 800ba54:	800b883a 	mov	r5,r16
 800ba58:	10c5883a 	add	r2,r2,r3
 800ba5c:	80800015 	stw	r2,0(r16)
 800ba60:	d8c00015 	stw	r3,0(sp)
 800ba64:	800ad980 	call	800ad98 <_fflush_r>
 800ba68:	d8c00017 	ldw	r3,0(sp)
 800ba6c:	da000117 	ldw	r8,4(sp)
 800ba70:	103fc21e 	bne	r2,zero,800b97c <__alt_data_end+0xfc00b97c>
 800ba74:	182d883a 	mov	r22,r3
 800ba78:	a5a9c83a 	sub	r20,r20,r22
 800ba7c:	a03fe11e 	bne	r20,zero,800ba04 <__alt_data_end+0xfc00ba04>
 800ba80:	a809883a 	mov	r4,r21
 800ba84:	800b883a 	mov	r5,r16
 800ba88:	800ad980 	call	800ad98 <_fflush_r>
 800ba8c:	103fbb1e 	bne	r2,zero,800b97c <__alt_data_end+0xfc00b97c>
 800ba90:	0011883a 	mov	r8,zero
 800ba94:	003fdb06 	br	800ba04 <__alt_data_end+0xfc00ba04>
 800ba98:	81000017 	ldw	r4,0(r16)
 800ba9c:	80800417 	ldw	r2,16(r16)
 800baa0:	1100012e 	bgeu	r2,r4,800baa8 <__sfvwrite_r+0x304>
 800baa4:	a4805a36 	bltu	r20,r18,800bc10 <__sfvwrite_r+0x46c>
 800baa8:	81c00517 	ldw	r7,20(r16)
 800baac:	91c01a36 	bltu	r18,r7,800bb18 <__sfvwrite_r+0x374>
 800bab0:	80800917 	ldw	r2,36(r16)
 800bab4:	81400717 	ldw	r5,28(r16)
 800bab8:	a809883a 	mov	r4,r21
 800babc:	b80d883a 	mov	r6,r23
 800bac0:	103ee83a 	callr	r2
 800bac4:	1029883a 	mov	r20,r2
 800bac8:	00bfac0e 	bge	zero,r2,800b97c <__alt_data_end+0xfc00b97c>
 800bacc:	a005883a 	mov	r2,r20
 800bad0:	003f9606 	br	800b92c <__alt_data_end+0xfc00b92c>
 800bad4:	b80d883a 	mov	r6,r23
 800bad8:	e00b883a 	mov	r5,fp
 800badc:	da000115 	stw	r8,4(sp)
 800bae0:	800c2700 	call	800c270 <memmove>
 800bae4:	80800217 	ldw	r2,8(r16)
 800bae8:	80c00017 	ldw	r3,0(r16)
 800baec:	da000117 	ldw	r8,4(sp)
 800baf0:	15c5c83a 	sub	r2,r2,r23
 800baf4:	1def883a 	add	r23,r3,r23
 800baf8:	80800215 	stw	r2,8(r16)
 800bafc:	85c00015 	stw	r23,0(r16)
 800bb00:	003fbe06 	br	800b9fc <__alt_data_end+0xfc00b9fc>
 800bb04:	81000017 	ldw	r4,0(r16)
 800bb08:	9039883a 	mov	fp,r18
 800bb0c:	9029883a 	mov	r20,r18
 800bb10:	902d883a 	mov	r22,r18
 800bb14:	003f7b06 	br	800b904 <__alt_data_end+0xfc00b904>
 800bb18:	b80b883a 	mov	r5,r23
 800bb1c:	900d883a 	mov	r6,r18
 800bb20:	800c2700 	call	800c270 <memmove>
 800bb24:	80c00217 	ldw	r3,8(r16)
 800bb28:	80800017 	ldw	r2,0(r16)
 800bb2c:	9029883a 	mov	r20,r18
 800bb30:	1c87c83a 	sub	r3,r3,r18
 800bb34:	1485883a 	add	r2,r2,r18
 800bb38:	80800015 	stw	r2,0(r16)
 800bb3c:	80c00215 	stw	r3,8(r16)
 800bb40:	9005883a 	mov	r2,r18
 800bb44:	003f7906 	br	800b92c <__alt_data_end+0xfc00b92c>
 800bb48:	e009883a 	mov	r4,fp
 800bb4c:	01400284 	movi	r5,10
 800bb50:	900d883a 	mov	r6,r18
 800bb54:	800c0500 	call	800c050 <memchr>
 800bb58:	10003826 	beq	r2,zero,800bc3c <__sfvwrite_r+0x498>
 800bb5c:	10800044 	addi	r2,r2,1
 800bb60:	1729c83a 	sub	r20,r2,fp
 800bb64:	02000044 	movi	r8,1
 800bb68:	003f8f06 	br	800b9a8 <__alt_data_end+0xfc00b9a8>
 800bb6c:	80800517 	ldw	r2,20(r16)
 800bb70:	81400417 	ldw	r5,16(r16)
 800bb74:	87000017 	ldw	fp,0(r16)
 800bb78:	10a9883a 	add	r20,r2,r2
 800bb7c:	a085883a 	add	r2,r20,r2
 800bb80:	1028d7fa 	srli	r20,r2,31
 800bb84:	e179c83a 	sub	fp,fp,r5
 800bb88:	e1000044 	addi	r4,fp,1
 800bb8c:	a085883a 	add	r2,r20,r2
 800bb90:	1029d07a 	srai	r20,r2,1
 800bb94:	2485883a 	add	r2,r4,r18
 800bb98:	a00d883a 	mov	r6,r20
 800bb9c:	a080022e 	bgeu	r20,r2,800bba8 <__sfvwrite_r+0x404>
 800bba0:	1029883a 	mov	r20,r2
 800bba4:	100d883a 	mov	r6,r2
 800bba8:	18c1000c 	andi	r3,r3,1024
 800bbac:	a809883a 	mov	r4,r21
 800bbb0:	183f6a26 	beq	r3,zero,800b95c <__alt_data_end+0xfc00b95c>
 800bbb4:	300b883a 	mov	r5,r6
 800bbb8:	80048dc0 	call	80048dc <_malloc_r>
 800bbbc:	102d883a 	mov	r22,r2
 800bbc0:	103f6c26 	beq	r2,zero,800b974 <__alt_data_end+0xfc00b974>
 800bbc4:	81400417 	ldw	r5,16(r16)
 800bbc8:	1009883a 	mov	r4,r2
 800bbcc:	e00d883a 	mov	r6,fp
 800bbd0:	800c1380 	call	800c138 <memcpy>
 800bbd4:	8080030b 	ldhu	r2,12(r16)
 800bbd8:	00fedfc4 	movi	r3,-1153
 800bbdc:	10c4703a 	and	r2,r2,r3
 800bbe0:	10802014 	ori	r2,r2,128
 800bbe4:	8080030d 	sth	r2,12(r16)
 800bbe8:	b709883a 	add	r4,r22,fp
 800bbec:	a707c83a 	sub	r3,r20,fp
 800bbf0:	85800415 	stw	r22,16(r16)
 800bbf4:	85000515 	stw	r20,20(r16)
 800bbf8:	81000015 	stw	r4,0(r16)
 800bbfc:	9039883a 	mov	fp,r18
 800bc00:	80c00215 	stw	r3,8(r16)
 800bc04:	9029883a 	mov	r20,r18
 800bc08:	902d883a 	mov	r22,r18
 800bc0c:	003f3d06 	br	800b904 <__alt_data_end+0xfc00b904>
 800bc10:	b80b883a 	mov	r5,r23
 800bc14:	a00d883a 	mov	r6,r20
 800bc18:	800c2700 	call	800c270 <memmove>
 800bc1c:	80800017 	ldw	r2,0(r16)
 800bc20:	a809883a 	mov	r4,r21
 800bc24:	800b883a 	mov	r5,r16
 800bc28:	1505883a 	add	r2,r2,r20
 800bc2c:	80800015 	stw	r2,0(r16)
 800bc30:	800ad980 	call	800ad98 <_fflush_r>
 800bc34:	103fa526 	beq	r2,zero,800bacc <__alt_data_end+0xfc00bacc>
 800bc38:	003f5006 	br	800b97c <__alt_data_end+0xfc00b97c>
 800bc3c:	95000044 	addi	r20,r18,1
 800bc40:	02000044 	movi	r8,1
 800bc44:	003f5806 	br	800b9a8 <__alt_data_end+0xfc00b9a8>

0800bc48 <_fwalk>:
 800bc48:	defff804 	addi	sp,sp,-32
 800bc4c:	dd400515 	stw	r21,20(sp)
 800bc50:	2540b804 	addi	r21,r4,736
 800bc54:	dd800615 	stw	r22,24(sp)
 800bc58:	dd000415 	stw	r20,16(sp)
 800bc5c:	dfc00715 	stw	ra,28(sp)
 800bc60:	dcc00315 	stw	r19,12(sp)
 800bc64:	dc800215 	stw	r18,8(sp)
 800bc68:	dc400115 	stw	r17,4(sp)
 800bc6c:	dc000015 	stw	r16,0(sp)
 800bc70:	2829883a 	mov	r20,r5
 800bc74:	002d883a 	mov	r22,zero
 800bc78:	800b3500 	call	800b350 <__sfp_lock_acquire>
 800bc7c:	a8001426 	beq	r21,zero,800bcd0 <_fwalk+0x88>
 800bc80:	04ffffc4 	movi	r19,-1
 800bc84:	ac400117 	ldw	r17,4(r21)
 800bc88:	ac800217 	ldw	r18,8(r21)
 800bc8c:	8c7fffc4 	addi	r17,r17,-1
 800bc90:	88000d16 	blt	r17,zero,800bcc8 <_fwalk+0x80>
 800bc94:	94000304 	addi	r16,r18,12
 800bc98:	94800384 	addi	r18,r18,14
 800bc9c:	80c0000f 	ldh	r3,0(r16)
 800bca0:	8c7fffc4 	addi	r17,r17,-1
 800bca4:	813ffd04 	addi	r4,r16,-12
 800bca8:	18000426 	beq	r3,zero,800bcbc <_fwalk+0x74>
 800bcac:	90c0000f 	ldh	r3,0(r18)
 800bcb0:	1cc00226 	beq	r3,r19,800bcbc <_fwalk+0x74>
 800bcb4:	a03ee83a 	callr	r20
 800bcb8:	b0acb03a 	or	r22,r22,r2
 800bcbc:	84001a04 	addi	r16,r16,104
 800bcc0:	94801a04 	addi	r18,r18,104
 800bcc4:	8cfff51e 	bne	r17,r19,800bc9c <__alt_data_end+0xfc00bc9c>
 800bcc8:	ad400017 	ldw	r21,0(r21)
 800bccc:	a83fed1e 	bne	r21,zero,800bc84 <__alt_data_end+0xfc00bc84>
 800bcd0:	800b3540 	call	800b354 <__sfp_lock_release>
 800bcd4:	b005883a 	mov	r2,r22
 800bcd8:	dfc00717 	ldw	ra,28(sp)
 800bcdc:	dd800617 	ldw	r22,24(sp)
 800bce0:	dd400517 	ldw	r21,20(sp)
 800bce4:	dd000417 	ldw	r20,16(sp)
 800bce8:	dcc00317 	ldw	r19,12(sp)
 800bcec:	dc800217 	ldw	r18,8(sp)
 800bcf0:	dc400117 	ldw	r17,4(sp)
 800bcf4:	dc000017 	ldw	r16,0(sp)
 800bcf8:	dec00804 	addi	sp,sp,32
 800bcfc:	f800283a 	ret

0800bd00 <_fwalk_reent>:
 800bd00:	defff804 	addi	sp,sp,-32
 800bd04:	dd400515 	stw	r21,20(sp)
 800bd08:	2540b804 	addi	r21,r4,736
 800bd0c:	dd800615 	stw	r22,24(sp)
 800bd10:	dd000415 	stw	r20,16(sp)
 800bd14:	dcc00315 	stw	r19,12(sp)
 800bd18:	dfc00715 	stw	ra,28(sp)
 800bd1c:	dc800215 	stw	r18,8(sp)
 800bd20:	dc400115 	stw	r17,4(sp)
 800bd24:	dc000015 	stw	r16,0(sp)
 800bd28:	2027883a 	mov	r19,r4
 800bd2c:	2829883a 	mov	r20,r5
 800bd30:	002d883a 	mov	r22,zero
 800bd34:	800b3500 	call	800b350 <__sfp_lock_acquire>
 800bd38:	a8001326 	beq	r21,zero,800bd88 <_fwalk_reent+0x88>
 800bd3c:	04bfffc4 	movi	r18,-1
 800bd40:	ac400117 	ldw	r17,4(r21)
 800bd44:	ac000217 	ldw	r16,8(r21)
 800bd48:	8c7fffc4 	addi	r17,r17,-1
 800bd4c:	88000c16 	blt	r17,zero,800bd80 <_fwalk_reent+0x80>
 800bd50:	84000304 	addi	r16,r16,12
 800bd54:	80c0000f 	ldh	r3,0(r16)
 800bd58:	8c7fffc4 	addi	r17,r17,-1
 800bd5c:	817ffd04 	addi	r5,r16,-12
 800bd60:	18000526 	beq	r3,zero,800bd78 <_fwalk_reent+0x78>
 800bd64:	80c0008f 	ldh	r3,2(r16)
 800bd68:	9809883a 	mov	r4,r19
 800bd6c:	1c800226 	beq	r3,r18,800bd78 <_fwalk_reent+0x78>
 800bd70:	a03ee83a 	callr	r20
 800bd74:	b0acb03a 	or	r22,r22,r2
 800bd78:	84001a04 	addi	r16,r16,104
 800bd7c:	8cbff51e 	bne	r17,r18,800bd54 <__alt_data_end+0xfc00bd54>
 800bd80:	ad400017 	ldw	r21,0(r21)
 800bd84:	a83fee1e 	bne	r21,zero,800bd40 <__alt_data_end+0xfc00bd40>
 800bd88:	800b3540 	call	800b354 <__sfp_lock_release>
 800bd8c:	b005883a 	mov	r2,r22
 800bd90:	dfc00717 	ldw	ra,28(sp)
 800bd94:	dd800617 	ldw	r22,24(sp)
 800bd98:	dd400517 	ldw	r21,20(sp)
 800bd9c:	dd000417 	ldw	r20,16(sp)
 800bda0:	dcc00317 	ldw	r19,12(sp)
 800bda4:	dc800217 	ldw	r18,8(sp)
 800bda8:	dc400117 	ldw	r17,4(sp)
 800bdac:	dc000017 	ldw	r16,0(sp)
 800bdb0:	dec00804 	addi	sp,sp,32
 800bdb4:	f800283a 	ret

0800bdb8 <_setlocale_r>:
 800bdb8:	30001b26 	beq	r6,zero,800be28 <_setlocale_r+0x70>
 800bdbc:	014200b4 	movhi	r5,2050
 800bdc0:	defffe04 	addi	sp,sp,-8
 800bdc4:	29415a04 	addi	r5,r5,1384
 800bdc8:	3009883a 	mov	r4,r6
 800bdcc:	dc000015 	stw	r16,0(sp)
 800bdd0:	dfc00115 	stw	ra,4(sp)
 800bdd4:	3021883a 	mov	r16,r6
 800bdd8:	800dd340 	call	800dd34 <strcmp>
 800bddc:	1000061e 	bne	r2,zero,800bdf8 <_setlocale_r+0x40>
 800bde0:	008200b4 	movhi	r2,2050
 800bde4:	10813304 	addi	r2,r2,1228
 800bde8:	dfc00117 	ldw	ra,4(sp)
 800bdec:	dc000017 	ldw	r16,0(sp)
 800bdf0:	dec00204 	addi	sp,sp,8
 800bdf4:	f800283a 	ret
 800bdf8:	014200b4 	movhi	r5,2050
 800bdfc:	29413304 	addi	r5,r5,1228
 800be00:	8009883a 	mov	r4,r16
 800be04:	800dd340 	call	800dd34 <strcmp>
 800be08:	103ff526 	beq	r2,zero,800bde0 <__alt_data_end+0xfc00bde0>
 800be0c:	014200b4 	movhi	r5,2050
 800be10:	29413d04 	addi	r5,r5,1268
 800be14:	8009883a 	mov	r4,r16
 800be18:	800dd340 	call	800dd34 <strcmp>
 800be1c:	103ff026 	beq	r2,zero,800bde0 <__alt_data_end+0xfc00bde0>
 800be20:	0005883a 	mov	r2,zero
 800be24:	003ff006 	br	800bde8 <__alt_data_end+0xfc00bde8>
 800be28:	008200b4 	movhi	r2,2050
 800be2c:	10813304 	addi	r2,r2,1228
 800be30:	f800283a 	ret

0800be34 <__locale_charset>:
 800be34:	008200b4 	movhi	r2,2050
 800be38:	1083e604 	addi	r2,r2,3992
 800be3c:	f800283a 	ret

0800be40 <__locale_mb_cur_max>:
 800be40:	008200b4 	movhi	r2,2050
 800be44:	10888d04 	addi	r2,r2,8756
 800be48:	10800017 	ldw	r2,0(r2)
 800be4c:	f800283a 	ret

0800be50 <__locale_msgcharset>:
 800be50:	008200b4 	movhi	r2,2050
 800be54:	1083de04 	addi	r2,r2,3960
 800be58:	f800283a 	ret

0800be5c <__locale_cjk_lang>:
 800be5c:	0005883a 	mov	r2,zero
 800be60:	f800283a 	ret

0800be64 <_localeconv_r>:
 800be64:	008200b4 	movhi	r2,2050
 800be68:	1083ee04 	addi	r2,r2,4024
 800be6c:	f800283a 	ret

0800be70 <setlocale>:
 800be70:	00c200b4 	movhi	r3,2050
 800be74:	18c88a04 	addi	r3,r3,8744
 800be78:	2005883a 	mov	r2,r4
 800be7c:	19000017 	ldw	r4,0(r3)
 800be80:	280d883a 	mov	r6,r5
 800be84:	100b883a 	mov	r5,r2
 800be88:	800bdb81 	jmpi	800bdb8 <_setlocale_r>

0800be8c <localeconv>:
 800be8c:	008200b4 	movhi	r2,2050
 800be90:	1083ee04 	addi	r2,r2,4024
 800be94:	f800283a 	ret

0800be98 <__smakebuf_r>:
 800be98:	2880030b 	ldhu	r2,12(r5)
 800be9c:	10c0008c 	andi	r3,r2,2
 800bea0:	1800401e 	bne	r3,zero,800bfa4 <__smakebuf_r+0x10c>
 800bea4:	deffec04 	addi	sp,sp,-80
 800bea8:	dc000f15 	stw	r16,60(sp)
 800beac:	2821883a 	mov	r16,r5
 800beb0:	2940038f 	ldh	r5,14(r5)
 800beb4:	dc401015 	stw	r17,64(sp)
 800beb8:	dfc01315 	stw	ra,76(sp)
 800bebc:	dcc01215 	stw	r19,72(sp)
 800bec0:	dc801115 	stw	r18,68(sp)
 800bec4:	2023883a 	mov	r17,r4
 800bec8:	28001b16 	blt	r5,zero,800bf38 <__smakebuf_r+0xa0>
 800becc:	d80d883a 	mov	r6,sp
 800bed0:	8010a700 	call	8010a70 <_fstat_r>
 800bed4:	10001716 	blt	r2,zero,800bf34 <__smakebuf_r+0x9c>
 800bed8:	d8800117 	ldw	r2,4(sp)
 800bedc:	00e00014 	movui	r3,32768
 800bee0:	10bc000c 	andi	r2,r2,61440
 800bee4:	10c03726 	beq	r2,r3,800bfc4 <__smakebuf_r+0x12c>
 800bee8:	80c0030b 	ldhu	r3,12(r16)
 800beec:	18c20014 	ori	r3,r3,2048
 800bef0:	80c0030d 	sth	r3,12(r16)
 800bef4:	00c80004 	movi	r3,8192
 800bef8:	10c03c1e 	bne	r2,r3,800bfec <__smakebuf_r+0x154>
 800befc:	8140038f 	ldh	r5,14(r16)
 800bf00:	8809883a 	mov	r4,r17
 800bf04:	8010ac80 	call	8010ac8 <_isatty_r>
 800bf08:	10004e26 	beq	r2,zero,800c044 <__smakebuf_r+0x1ac>
 800bf0c:	8080030b 	ldhu	r2,12(r16)
 800bf10:	04c00044 	movi	r19,1
 800bf14:	80c010c4 	addi	r3,r16,67
 800bf18:	14c4b03a 	or	r2,r2,r19
 800bf1c:	8080030d 	sth	r2,12(r16)
 800bf20:	80c00015 	stw	r3,0(r16)
 800bf24:	80c00415 	stw	r3,16(r16)
 800bf28:	84c00515 	stw	r19,20(r16)
 800bf2c:	04810004 	movi	r18,1024
 800bf30:	00000706 	br	800bf50 <__smakebuf_r+0xb8>
 800bf34:	8080030b 	ldhu	r2,12(r16)
 800bf38:	10c0200c 	andi	r3,r2,128
 800bf3c:	18001f1e 	bne	r3,zero,800bfbc <__smakebuf_r+0x124>
 800bf40:	04810004 	movi	r18,1024
 800bf44:	10820014 	ori	r2,r2,2048
 800bf48:	8080030d 	sth	r2,12(r16)
 800bf4c:	0027883a 	mov	r19,zero
 800bf50:	8809883a 	mov	r4,r17
 800bf54:	900b883a 	mov	r5,r18
 800bf58:	80048dc0 	call	80048dc <_malloc_r>
 800bf5c:	10002e26 	beq	r2,zero,800c018 <__smakebuf_r+0x180>
 800bf60:	80c0030b 	ldhu	r3,12(r16)
 800bf64:	01020074 	movhi	r4,2049
 800bf68:	212c0004 	addi	r4,r4,-20480
 800bf6c:	89000f15 	stw	r4,60(r17)
 800bf70:	18c02014 	ori	r3,r3,128
 800bf74:	80c0030d 	sth	r3,12(r16)
 800bf78:	80800015 	stw	r2,0(r16)
 800bf7c:	80800415 	stw	r2,16(r16)
 800bf80:	84800515 	stw	r18,20(r16)
 800bf84:	98001c1e 	bne	r19,zero,800bff8 <__smakebuf_r+0x160>
 800bf88:	dfc01317 	ldw	ra,76(sp)
 800bf8c:	dcc01217 	ldw	r19,72(sp)
 800bf90:	dc801117 	ldw	r18,68(sp)
 800bf94:	dc401017 	ldw	r17,64(sp)
 800bf98:	dc000f17 	ldw	r16,60(sp)
 800bf9c:	dec01404 	addi	sp,sp,80
 800bfa0:	f800283a 	ret
 800bfa4:	288010c4 	addi	r2,r5,67
 800bfa8:	28800015 	stw	r2,0(r5)
 800bfac:	28800415 	stw	r2,16(r5)
 800bfb0:	00800044 	movi	r2,1
 800bfb4:	28800515 	stw	r2,20(r5)
 800bfb8:	f800283a 	ret
 800bfbc:	04801004 	movi	r18,64
 800bfc0:	003fe006 	br	800bf44 <__alt_data_end+0xfc00bf44>
 800bfc4:	81000a17 	ldw	r4,40(r16)
 800bfc8:	00c20074 	movhi	r3,2049
 800bfcc:	18f73404 	addi	r3,r3,-9008
 800bfd0:	20ffc51e 	bne	r4,r3,800bee8 <__alt_data_end+0xfc00bee8>
 800bfd4:	80c0030b 	ldhu	r3,12(r16)
 800bfd8:	01010004 	movi	r4,1024
 800bfdc:	81001315 	stw	r4,76(r16)
 800bfe0:	1906b03a 	or	r3,r3,r4
 800bfe4:	80c0030d 	sth	r3,12(r16)
 800bfe8:	003fc206 	br	800bef4 <__alt_data_end+0xfc00bef4>
 800bfec:	0027883a 	mov	r19,zero
 800bff0:	04810004 	movi	r18,1024
 800bff4:	003fd606 	br	800bf50 <__alt_data_end+0xfc00bf50>
 800bff8:	8140038f 	ldh	r5,14(r16)
 800bffc:	8809883a 	mov	r4,r17
 800c000:	8010ac80 	call	8010ac8 <_isatty_r>
 800c004:	103fe026 	beq	r2,zero,800bf88 <__alt_data_end+0xfc00bf88>
 800c008:	8080030b 	ldhu	r2,12(r16)
 800c00c:	10800054 	ori	r2,r2,1
 800c010:	8080030d 	sth	r2,12(r16)
 800c014:	003fdc06 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c018:	8080030b 	ldhu	r2,12(r16)
 800c01c:	10c0800c 	andi	r3,r2,512
 800c020:	183fd91e 	bne	r3,zero,800bf88 <__alt_data_end+0xfc00bf88>
 800c024:	10800094 	ori	r2,r2,2
 800c028:	80c010c4 	addi	r3,r16,67
 800c02c:	8080030d 	sth	r2,12(r16)
 800c030:	00800044 	movi	r2,1
 800c034:	80c00015 	stw	r3,0(r16)
 800c038:	80c00415 	stw	r3,16(r16)
 800c03c:	80800515 	stw	r2,20(r16)
 800c040:	003fd106 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c044:	04c00044 	movi	r19,1
 800c048:	04810004 	movi	r18,1024
 800c04c:	003fc006 	br	800bf50 <__alt_data_end+0xfc00bf50>

0800c050 <memchr>:
 800c050:	208000cc 	andi	r2,r4,3
 800c054:	280f883a 	mov	r7,r5
 800c058:	10003526 	beq	r2,zero,800c130 <memchr+0xe0>
 800c05c:	30bfffc4 	addi	r2,r6,-1
 800c060:	30001b26 	beq	r6,zero,800c0d0 <memchr+0x80>
 800c064:	21800003 	ldbu	r6,0(r4)
 800c068:	28c03fcc 	andi	r3,r5,255
 800c06c:	30c01a26 	beq	r6,r3,800c0d8 <memchr+0x88>
 800c070:	180d883a 	mov	r6,r3
 800c074:	00000406 	br	800c088 <memchr+0x38>
 800c078:	10001526 	beq	r2,zero,800c0d0 <memchr+0x80>
 800c07c:	20c00003 	ldbu	r3,0(r4)
 800c080:	10bfffc4 	addi	r2,r2,-1
 800c084:	19801426 	beq	r3,r6,800c0d8 <memchr+0x88>
 800c088:	21000044 	addi	r4,r4,1
 800c08c:	20c000cc 	andi	r3,r4,3
 800c090:	183ff91e 	bne	r3,zero,800c078 <__alt_data_end+0xfc00c078>
 800c094:	024000c4 	movi	r9,3
 800c098:	48801136 	bltu	r9,r2,800c0e0 <memchr+0x90>
 800c09c:	10000c26 	beq	r2,zero,800c0d0 <memchr+0x80>
 800c0a0:	20c00003 	ldbu	r3,0(r4)
 800c0a4:	29403fcc 	andi	r5,r5,255
 800c0a8:	19400b26 	beq	r3,r5,800c0d8 <memchr+0x88>
 800c0ac:	20c00044 	addi	r3,r4,1
 800c0b0:	2085883a 	add	r2,r4,r2
 800c0b4:	39803fcc 	andi	r6,r7,255
 800c0b8:	00000306 	br	800c0c8 <memchr+0x78>
 800c0bc:	18c00044 	addi	r3,r3,1
 800c0c0:	197fffc3 	ldbu	r5,-1(r3)
 800c0c4:	29800426 	beq	r5,r6,800c0d8 <memchr+0x88>
 800c0c8:	1809883a 	mov	r4,r3
 800c0cc:	18bffb1e 	bne	r3,r2,800c0bc <__alt_data_end+0xfc00c0bc>
 800c0d0:	0005883a 	mov	r2,zero
 800c0d4:	f800283a 	ret
 800c0d8:	2005883a 	mov	r2,r4
 800c0dc:	f800283a 	ret
 800c0e0:	28c03fcc 	andi	r3,r5,255
 800c0e4:	1810923a 	slli	r8,r3,8
 800c0e8:	02ffbff4 	movhi	r11,65279
 800c0ec:	02a02074 	movhi	r10,32897
 800c0f0:	40c6b03a 	or	r3,r8,r3
 800c0f4:	1810943a 	slli	r8,r3,16
 800c0f8:	5affbfc4 	addi	r11,r11,-257
 800c0fc:	52a02004 	addi	r10,r10,-32640
 800c100:	40d0b03a 	or	r8,r8,r3
 800c104:	20c00017 	ldw	r3,0(r4)
 800c108:	40c6f03a 	xor	r3,r8,r3
 800c10c:	1acd883a 	add	r6,r3,r11
 800c110:	00c6303a 	nor	r3,zero,r3
 800c114:	30c6703a 	and	r3,r6,r3
 800c118:	1a86703a 	and	r3,r3,r10
 800c11c:	183fdf1e 	bne	r3,zero,800c09c <__alt_data_end+0xfc00c09c>
 800c120:	10bfff04 	addi	r2,r2,-4
 800c124:	21000104 	addi	r4,r4,4
 800c128:	48bff636 	bltu	r9,r2,800c104 <__alt_data_end+0xfc00c104>
 800c12c:	003fdb06 	br	800c09c <__alt_data_end+0xfc00c09c>
 800c130:	3005883a 	mov	r2,r6
 800c134:	003fd706 	br	800c094 <__alt_data_end+0xfc00c094>

0800c138 <memcpy>:
 800c138:	deffff04 	addi	sp,sp,-4
 800c13c:	dc000015 	stw	r16,0(sp)
 800c140:	00c003c4 	movi	r3,15
 800c144:	2005883a 	mov	r2,r4
 800c148:	1980432e 	bgeu	r3,r6,800c258 <memcpy+0x120>
 800c14c:	2146b03a 	or	r3,r4,r5
 800c150:	18c000cc 	andi	r3,r3,3
 800c154:	1800421e 	bne	r3,zero,800c260 <memcpy+0x128>
 800c158:	343ffc04 	addi	r16,r6,-16
 800c15c:	8020d13a 	srli	r16,r16,4
 800c160:	28c00104 	addi	r3,r5,4
 800c164:	23400104 	addi	r13,r4,4
 800c168:	801e913a 	slli	r15,r16,4
 800c16c:	2b000204 	addi	r12,r5,8
 800c170:	22c00204 	addi	r11,r4,8
 800c174:	7bc00504 	addi	r15,r15,20
 800c178:	2a800304 	addi	r10,r5,12
 800c17c:	22400304 	addi	r9,r4,12
 800c180:	2bdf883a 	add	r15,r5,r15
 800c184:	2811883a 	mov	r8,r5
 800c188:	200f883a 	mov	r7,r4
 800c18c:	41000017 	ldw	r4,0(r8)
 800c190:	39c00404 	addi	r7,r7,16
 800c194:	18c00404 	addi	r3,r3,16
 800c198:	393ffc15 	stw	r4,-16(r7)
 800c19c:	1bbffc17 	ldw	r14,-16(r3)
 800c1a0:	6b400404 	addi	r13,r13,16
 800c1a4:	5ac00404 	addi	r11,r11,16
 800c1a8:	6bbffc15 	stw	r14,-16(r13)
 800c1ac:	63800017 	ldw	r14,0(r12)
 800c1b0:	4a400404 	addi	r9,r9,16
 800c1b4:	42000404 	addi	r8,r8,16
 800c1b8:	5bbffc15 	stw	r14,-16(r11)
 800c1bc:	53800017 	ldw	r14,0(r10)
 800c1c0:	63000404 	addi	r12,r12,16
 800c1c4:	52800404 	addi	r10,r10,16
 800c1c8:	4bbffc15 	stw	r14,-16(r9)
 800c1cc:	1bffef1e 	bne	r3,r15,800c18c <__alt_data_end+0xfc00c18c>
 800c1d0:	81c00044 	addi	r7,r16,1
 800c1d4:	380e913a 	slli	r7,r7,4
 800c1d8:	310003cc 	andi	r4,r6,15
 800c1dc:	02c000c4 	movi	r11,3
 800c1e0:	11c7883a 	add	r3,r2,r7
 800c1e4:	29cb883a 	add	r5,r5,r7
 800c1e8:	59001f2e 	bgeu	r11,r4,800c268 <memcpy+0x130>
 800c1ec:	1813883a 	mov	r9,r3
 800c1f0:	2811883a 	mov	r8,r5
 800c1f4:	200f883a 	mov	r7,r4
 800c1f8:	42800017 	ldw	r10,0(r8)
 800c1fc:	4a400104 	addi	r9,r9,4
 800c200:	39ffff04 	addi	r7,r7,-4
 800c204:	4abfff15 	stw	r10,-4(r9)
 800c208:	42000104 	addi	r8,r8,4
 800c20c:	59fffa36 	bltu	r11,r7,800c1f8 <__alt_data_end+0xfc00c1f8>
 800c210:	213fff04 	addi	r4,r4,-4
 800c214:	2008d0ba 	srli	r4,r4,2
 800c218:	318000cc 	andi	r6,r6,3
 800c21c:	21000044 	addi	r4,r4,1
 800c220:	2109883a 	add	r4,r4,r4
 800c224:	2109883a 	add	r4,r4,r4
 800c228:	1907883a 	add	r3,r3,r4
 800c22c:	290b883a 	add	r5,r5,r4
 800c230:	30000626 	beq	r6,zero,800c24c <memcpy+0x114>
 800c234:	198d883a 	add	r6,r3,r6
 800c238:	29c00003 	ldbu	r7,0(r5)
 800c23c:	18c00044 	addi	r3,r3,1
 800c240:	29400044 	addi	r5,r5,1
 800c244:	19ffffc5 	stb	r7,-1(r3)
 800c248:	19bffb1e 	bne	r3,r6,800c238 <__alt_data_end+0xfc00c238>
 800c24c:	dc000017 	ldw	r16,0(sp)
 800c250:	dec00104 	addi	sp,sp,4
 800c254:	f800283a 	ret
 800c258:	2007883a 	mov	r3,r4
 800c25c:	003ff406 	br	800c230 <__alt_data_end+0xfc00c230>
 800c260:	2007883a 	mov	r3,r4
 800c264:	003ff306 	br	800c234 <__alt_data_end+0xfc00c234>
 800c268:	200d883a 	mov	r6,r4
 800c26c:	003ff006 	br	800c230 <__alt_data_end+0xfc00c230>

0800c270 <memmove>:
 800c270:	2005883a 	mov	r2,r4
 800c274:	29000b2e 	bgeu	r5,r4,800c2a4 <memmove+0x34>
 800c278:	298f883a 	add	r7,r5,r6
 800c27c:	21c0092e 	bgeu	r4,r7,800c2a4 <memmove+0x34>
 800c280:	2187883a 	add	r3,r4,r6
 800c284:	198bc83a 	sub	r5,r3,r6
 800c288:	30004b26 	beq	r6,zero,800c3b8 <memmove+0x148>
 800c28c:	39ffffc4 	addi	r7,r7,-1
 800c290:	39000003 	ldbu	r4,0(r7)
 800c294:	18ffffc4 	addi	r3,r3,-1
 800c298:	19000005 	stb	r4,0(r3)
 800c29c:	197ffb1e 	bne	r3,r5,800c28c <__alt_data_end+0xfc00c28c>
 800c2a0:	f800283a 	ret
 800c2a4:	00c003c4 	movi	r3,15
 800c2a8:	1980412e 	bgeu	r3,r6,800c3b0 <memmove+0x140>
 800c2ac:	1146b03a 	or	r3,r2,r5
 800c2b0:	18c000cc 	andi	r3,r3,3
 800c2b4:	1800411e 	bne	r3,zero,800c3bc <memmove+0x14c>
 800c2b8:	33fffc04 	addi	r15,r6,-16
 800c2bc:	781ed13a 	srli	r15,r15,4
 800c2c0:	28c00104 	addi	r3,r5,4
 800c2c4:	13400104 	addi	r13,r2,4
 800c2c8:	781c913a 	slli	r14,r15,4
 800c2cc:	2b000204 	addi	r12,r5,8
 800c2d0:	12c00204 	addi	r11,r2,8
 800c2d4:	73800504 	addi	r14,r14,20
 800c2d8:	2a800304 	addi	r10,r5,12
 800c2dc:	12400304 	addi	r9,r2,12
 800c2e0:	2b9d883a 	add	r14,r5,r14
 800c2e4:	2811883a 	mov	r8,r5
 800c2e8:	100f883a 	mov	r7,r2
 800c2ec:	41000017 	ldw	r4,0(r8)
 800c2f0:	39c00404 	addi	r7,r7,16
 800c2f4:	18c00404 	addi	r3,r3,16
 800c2f8:	393ffc15 	stw	r4,-16(r7)
 800c2fc:	193ffc17 	ldw	r4,-16(r3)
 800c300:	6b400404 	addi	r13,r13,16
 800c304:	5ac00404 	addi	r11,r11,16
 800c308:	693ffc15 	stw	r4,-16(r13)
 800c30c:	61000017 	ldw	r4,0(r12)
 800c310:	4a400404 	addi	r9,r9,16
 800c314:	42000404 	addi	r8,r8,16
 800c318:	593ffc15 	stw	r4,-16(r11)
 800c31c:	51000017 	ldw	r4,0(r10)
 800c320:	63000404 	addi	r12,r12,16
 800c324:	52800404 	addi	r10,r10,16
 800c328:	493ffc15 	stw	r4,-16(r9)
 800c32c:	1bbfef1e 	bne	r3,r14,800c2ec <__alt_data_end+0xfc00c2ec>
 800c330:	79000044 	addi	r4,r15,1
 800c334:	2008913a 	slli	r4,r4,4
 800c338:	328003cc 	andi	r10,r6,15
 800c33c:	02c000c4 	movi	r11,3
 800c340:	1107883a 	add	r3,r2,r4
 800c344:	290b883a 	add	r5,r5,r4
 800c348:	5a801e2e 	bgeu	r11,r10,800c3c4 <memmove+0x154>
 800c34c:	1813883a 	mov	r9,r3
 800c350:	2811883a 	mov	r8,r5
 800c354:	500f883a 	mov	r7,r10
 800c358:	41000017 	ldw	r4,0(r8)
 800c35c:	4a400104 	addi	r9,r9,4
 800c360:	39ffff04 	addi	r7,r7,-4
 800c364:	493fff15 	stw	r4,-4(r9)
 800c368:	42000104 	addi	r8,r8,4
 800c36c:	59fffa36 	bltu	r11,r7,800c358 <__alt_data_end+0xfc00c358>
 800c370:	513fff04 	addi	r4,r10,-4
 800c374:	2008d0ba 	srli	r4,r4,2
 800c378:	318000cc 	andi	r6,r6,3
 800c37c:	21000044 	addi	r4,r4,1
 800c380:	2109883a 	add	r4,r4,r4
 800c384:	2109883a 	add	r4,r4,r4
 800c388:	1907883a 	add	r3,r3,r4
 800c38c:	290b883a 	add	r5,r5,r4
 800c390:	30000926 	beq	r6,zero,800c3b8 <memmove+0x148>
 800c394:	198d883a 	add	r6,r3,r6
 800c398:	29c00003 	ldbu	r7,0(r5)
 800c39c:	18c00044 	addi	r3,r3,1
 800c3a0:	29400044 	addi	r5,r5,1
 800c3a4:	19ffffc5 	stb	r7,-1(r3)
 800c3a8:	19bffb1e 	bne	r3,r6,800c398 <__alt_data_end+0xfc00c398>
 800c3ac:	f800283a 	ret
 800c3b0:	1007883a 	mov	r3,r2
 800c3b4:	003ff606 	br	800c390 <__alt_data_end+0xfc00c390>
 800c3b8:	f800283a 	ret
 800c3bc:	1007883a 	mov	r3,r2
 800c3c0:	003ff406 	br	800c394 <__alt_data_end+0xfc00c394>
 800c3c4:	500d883a 	mov	r6,r10
 800c3c8:	003ff106 	br	800c390 <__alt_data_end+0xfc00c390>

0800c3cc <memset>:
 800c3cc:	20c000cc 	andi	r3,r4,3
 800c3d0:	2005883a 	mov	r2,r4
 800c3d4:	18004326 	beq	r3,zero,800c4e4 <memset+0x118>
 800c3d8:	31ffffc4 	addi	r7,r6,-1
 800c3dc:	30004026 	beq	r6,zero,800c4e0 <memset+0x114>
 800c3e0:	2813883a 	mov	r9,r5
 800c3e4:	200d883a 	mov	r6,r4
 800c3e8:	2007883a 	mov	r3,r4
 800c3ec:	00000406 	br	800c400 <memset+0x34>
 800c3f0:	3a3fffc4 	addi	r8,r7,-1
 800c3f4:	31800044 	addi	r6,r6,1
 800c3f8:	38003926 	beq	r7,zero,800c4e0 <memset+0x114>
 800c3fc:	400f883a 	mov	r7,r8
 800c400:	18c00044 	addi	r3,r3,1
 800c404:	32400005 	stb	r9,0(r6)
 800c408:	1a0000cc 	andi	r8,r3,3
 800c40c:	403ff81e 	bne	r8,zero,800c3f0 <__alt_data_end+0xfc00c3f0>
 800c410:	010000c4 	movi	r4,3
 800c414:	21c02d2e 	bgeu	r4,r7,800c4cc <memset+0x100>
 800c418:	29803fcc 	andi	r6,r5,255
 800c41c:	3008923a 	slli	r4,r6,8
 800c420:	218cb03a 	or	r6,r4,r6
 800c424:	3008943a 	slli	r4,r6,16
 800c428:	218cb03a 	or	r6,r4,r6
 800c42c:	010003c4 	movi	r4,15
 800c430:	21c0182e 	bgeu	r4,r7,800c494 <memset+0xc8>
 800c434:	3b3ffc04 	addi	r12,r7,-16
 800c438:	6018d13a 	srli	r12,r12,4
 800c43c:	1a000104 	addi	r8,r3,4
 800c440:	1ac00204 	addi	r11,r3,8
 800c444:	6008913a 	slli	r4,r12,4
 800c448:	1a800304 	addi	r10,r3,12
 800c44c:	1813883a 	mov	r9,r3
 800c450:	21000504 	addi	r4,r4,20
 800c454:	1909883a 	add	r4,r3,r4
 800c458:	49800015 	stw	r6,0(r9)
 800c45c:	41800015 	stw	r6,0(r8)
 800c460:	59800015 	stw	r6,0(r11)
 800c464:	51800015 	stw	r6,0(r10)
 800c468:	42000404 	addi	r8,r8,16
 800c46c:	4a400404 	addi	r9,r9,16
 800c470:	5ac00404 	addi	r11,r11,16
 800c474:	52800404 	addi	r10,r10,16
 800c478:	413ff71e 	bne	r8,r4,800c458 <__alt_data_end+0xfc00c458>
 800c47c:	63000044 	addi	r12,r12,1
 800c480:	6018913a 	slli	r12,r12,4
 800c484:	39c003cc 	andi	r7,r7,15
 800c488:	010000c4 	movi	r4,3
 800c48c:	1b07883a 	add	r3,r3,r12
 800c490:	21c00e2e 	bgeu	r4,r7,800c4cc <memset+0x100>
 800c494:	1813883a 	mov	r9,r3
 800c498:	3811883a 	mov	r8,r7
 800c49c:	010000c4 	movi	r4,3
 800c4a0:	49800015 	stw	r6,0(r9)
 800c4a4:	423fff04 	addi	r8,r8,-4
 800c4a8:	4a400104 	addi	r9,r9,4
 800c4ac:	223ffc36 	bltu	r4,r8,800c4a0 <__alt_data_end+0xfc00c4a0>
 800c4b0:	393fff04 	addi	r4,r7,-4
 800c4b4:	2008d0ba 	srli	r4,r4,2
 800c4b8:	39c000cc 	andi	r7,r7,3
 800c4bc:	21000044 	addi	r4,r4,1
 800c4c0:	2109883a 	add	r4,r4,r4
 800c4c4:	2109883a 	add	r4,r4,r4
 800c4c8:	1907883a 	add	r3,r3,r4
 800c4cc:	38000426 	beq	r7,zero,800c4e0 <memset+0x114>
 800c4d0:	19cf883a 	add	r7,r3,r7
 800c4d4:	19400005 	stb	r5,0(r3)
 800c4d8:	18c00044 	addi	r3,r3,1
 800c4dc:	19fffd1e 	bne	r3,r7,800c4d4 <__alt_data_end+0xfc00c4d4>
 800c4e0:	f800283a 	ret
 800c4e4:	2007883a 	mov	r3,r4
 800c4e8:	300f883a 	mov	r7,r6
 800c4ec:	003fc806 	br	800c410 <__alt_data_end+0xfc00c410>

0800c4f0 <_Balloc>:
 800c4f0:	20801317 	ldw	r2,76(r4)
 800c4f4:	defffc04 	addi	sp,sp,-16
 800c4f8:	dc400115 	stw	r17,4(sp)
 800c4fc:	dc000015 	stw	r16,0(sp)
 800c500:	dfc00315 	stw	ra,12(sp)
 800c504:	dc800215 	stw	r18,8(sp)
 800c508:	2023883a 	mov	r17,r4
 800c50c:	2821883a 	mov	r16,r5
 800c510:	10000f26 	beq	r2,zero,800c550 <_Balloc+0x60>
 800c514:	8407883a 	add	r3,r16,r16
 800c518:	18c7883a 	add	r3,r3,r3
 800c51c:	10c7883a 	add	r3,r2,r3
 800c520:	18800017 	ldw	r2,0(r3)
 800c524:	10001126 	beq	r2,zero,800c56c <_Balloc+0x7c>
 800c528:	11000017 	ldw	r4,0(r2)
 800c52c:	19000015 	stw	r4,0(r3)
 800c530:	10000415 	stw	zero,16(r2)
 800c534:	10000315 	stw	zero,12(r2)
 800c538:	dfc00317 	ldw	ra,12(sp)
 800c53c:	dc800217 	ldw	r18,8(sp)
 800c540:	dc400117 	ldw	r17,4(sp)
 800c544:	dc000017 	ldw	r16,0(sp)
 800c548:	dec00404 	addi	sp,sp,16
 800c54c:	f800283a 	ret
 800c550:	01400104 	movi	r5,4
 800c554:	01800844 	movi	r6,33
 800c558:	80106bc0 	call	80106bc <_calloc_r>
 800c55c:	88801315 	stw	r2,76(r17)
 800c560:	103fec1e 	bne	r2,zero,800c514 <__alt_data_end+0xfc00c514>
 800c564:	0005883a 	mov	r2,zero
 800c568:	003ff306 	br	800c538 <__alt_data_end+0xfc00c538>
 800c56c:	01400044 	movi	r5,1
 800c570:	2c24983a 	sll	r18,r5,r16
 800c574:	8809883a 	mov	r4,r17
 800c578:	91800144 	addi	r6,r18,5
 800c57c:	318d883a 	add	r6,r6,r6
 800c580:	318d883a 	add	r6,r6,r6
 800c584:	80106bc0 	call	80106bc <_calloc_r>
 800c588:	103ff626 	beq	r2,zero,800c564 <__alt_data_end+0xfc00c564>
 800c58c:	14000115 	stw	r16,4(r2)
 800c590:	14800215 	stw	r18,8(r2)
 800c594:	003fe606 	br	800c530 <__alt_data_end+0xfc00c530>

0800c598 <_Bfree>:
 800c598:	28000826 	beq	r5,zero,800c5bc <_Bfree+0x24>
 800c59c:	28c00117 	ldw	r3,4(r5)
 800c5a0:	20801317 	ldw	r2,76(r4)
 800c5a4:	18c7883a 	add	r3,r3,r3
 800c5a8:	18c7883a 	add	r3,r3,r3
 800c5ac:	10c5883a 	add	r2,r2,r3
 800c5b0:	10c00017 	ldw	r3,0(r2)
 800c5b4:	28c00015 	stw	r3,0(r5)
 800c5b8:	11400015 	stw	r5,0(r2)
 800c5bc:	f800283a 	ret

0800c5c0 <__multadd>:
 800c5c0:	defffa04 	addi	sp,sp,-24
 800c5c4:	dc000115 	stw	r16,4(sp)
 800c5c8:	2c000417 	ldw	r16,16(r5)
 800c5cc:	dc800315 	stw	r18,12(sp)
 800c5d0:	dc400215 	stw	r17,8(sp)
 800c5d4:	dfc00515 	stw	ra,20(sp)
 800c5d8:	dcc00415 	stw	r19,16(sp)
 800c5dc:	2823883a 	mov	r17,r5
 800c5e0:	2025883a 	mov	r18,r4
 800c5e4:	2a400504 	addi	r9,r5,20
 800c5e8:	0015883a 	mov	r10,zero
 800c5ec:	4a000017 	ldw	r8,0(r9)
 800c5f0:	4a400104 	addi	r9,r9,4
 800c5f4:	52800044 	addi	r10,r10,1
 800c5f8:	40ffffcc 	andi	r3,r8,65535
 800c5fc:	1987383a 	mul	r3,r3,r6
 800c600:	4010d43a 	srli	r8,r8,16
 800c604:	19cf883a 	add	r7,r3,r7
 800c608:	4191383a 	mul	r8,r8,r6
 800c60c:	3816d43a 	srli	r11,r7,16
 800c610:	38ffffcc 	andi	r3,r7,65535
 800c614:	5a0f883a 	add	r7,r11,r8
 800c618:	3810943a 	slli	r8,r7,16
 800c61c:	380ed43a 	srli	r7,r7,16
 800c620:	40c7883a 	add	r3,r8,r3
 800c624:	48ffff15 	stw	r3,-4(r9)
 800c628:	543ff016 	blt	r10,r16,800c5ec <__alt_data_end+0xfc00c5ec>
 800c62c:	38000926 	beq	r7,zero,800c654 <__multadd+0x94>
 800c630:	88800217 	ldw	r2,8(r17)
 800c634:	80800f0e 	bge	r16,r2,800c674 <__multadd+0xb4>
 800c638:	80800144 	addi	r2,r16,5
 800c63c:	1085883a 	add	r2,r2,r2
 800c640:	1085883a 	add	r2,r2,r2
 800c644:	8885883a 	add	r2,r17,r2
 800c648:	11c00015 	stw	r7,0(r2)
 800c64c:	84000044 	addi	r16,r16,1
 800c650:	8c000415 	stw	r16,16(r17)
 800c654:	8805883a 	mov	r2,r17
 800c658:	dfc00517 	ldw	ra,20(sp)
 800c65c:	dcc00417 	ldw	r19,16(sp)
 800c660:	dc800317 	ldw	r18,12(sp)
 800c664:	dc400217 	ldw	r17,8(sp)
 800c668:	dc000117 	ldw	r16,4(sp)
 800c66c:	dec00604 	addi	sp,sp,24
 800c670:	f800283a 	ret
 800c674:	89400117 	ldw	r5,4(r17)
 800c678:	9009883a 	mov	r4,r18
 800c67c:	d9c00015 	stw	r7,0(sp)
 800c680:	29400044 	addi	r5,r5,1
 800c684:	800c4f00 	call	800c4f0 <_Balloc>
 800c688:	89800417 	ldw	r6,16(r17)
 800c68c:	89400304 	addi	r5,r17,12
 800c690:	11000304 	addi	r4,r2,12
 800c694:	31800084 	addi	r6,r6,2
 800c698:	318d883a 	add	r6,r6,r6
 800c69c:	318d883a 	add	r6,r6,r6
 800c6a0:	1027883a 	mov	r19,r2
 800c6a4:	800c1380 	call	800c138 <memcpy>
 800c6a8:	89000117 	ldw	r4,4(r17)
 800c6ac:	90c01317 	ldw	r3,76(r18)
 800c6b0:	d9c00017 	ldw	r7,0(sp)
 800c6b4:	2109883a 	add	r4,r4,r4
 800c6b8:	2109883a 	add	r4,r4,r4
 800c6bc:	1907883a 	add	r3,r3,r4
 800c6c0:	18800017 	ldw	r2,0(r3)
 800c6c4:	88800015 	stw	r2,0(r17)
 800c6c8:	1c400015 	stw	r17,0(r3)
 800c6cc:	9823883a 	mov	r17,r19
 800c6d0:	003fd906 	br	800c638 <__alt_data_end+0xfc00c638>

0800c6d4 <__s2b>:
 800c6d4:	defff904 	addi	sp,sp,-28
 800c6d8:	dc400115 	stw	r17,4(sp)
 800c6dc:	dc000015 	stw	r16,0(sp)
 800c6e0:	2023883a 	mov	r17,r4
 800c6e4:	2821883a 	mov	r16,r5
 800c6e8:	39000204 	addi	r4,r7,8
 800c6ec:	01400244 	movi	r5,9
 800c6f0:	dcc00315 	stw	r19,12(sp)
 800c6f4:	dc800215 	stw	r18,8(sp)
 800c6f8:	dfc00615 	stw	ra,24(sp)
 800c6fc:	dd400515 	stw	r21,20(sp)
 800c700:	dd000415 	stw	r20,16(sp)
 800c704:	3825883a 	mov	r18,r7
 800c708:	3027883a 	mov	r19,r6
 800c70c:	80119900 	call	8011990 <__divsi3>
 800c710:	00c00044 	movi	r3,1
 800c714:	000b883a 	mov	r5,zero
 800c718:	1880030e 	bge	r3,r2,800c728 <__s2b+0x54>
 800c71c:	18c7883a 	add	r3,r3,r3
 800c720:	29400044 	addi	r5,r5,1
 800c724:	18bffd16 	blt	r3,r2,800c71c <__alt_data_end+0xfc00c71c>
 800c728:	8809883a 	mov	r4,r17
 800c72c:	800c4f00 	call	800c4f0 <_Balloc>
 800c730:	d8c00717 	ldw	r3,28(sp)
 800c734:	10c00515 	stw	r3,20(r2)
 800c738:	00c00044 	movi	r3,1
 800c73c:	10c00415 	stw	r3,16(r2)
 800c740:	00c00244 	movi	r3,9
 800c744:	1cc0210e 	bge	r3,r19,800c7cc <__s2b+0xf8>
 800c748:	80eb883a 	add	r21,r16,r3
 800c74c:	a829883a 	mov	r20,r21
 800c750:	84e1883a 	add	r16,r16,r19
 800c754:	a1c00007 	ldb	r7,0(r20)
 800c758:	8809883a 	mov	r4,r17
 800c75c:	a5000044 	addi	r20,r20,1
 800c760:	100b883a 	mov	r5,r2
 800c764:	01800284 	movi	r6,10
 800c768:	39fff404 	addi	r7,r7,-48
 800c76c:	800c5c00 	call	800c5c0 <__multadd>
 800c770:	a43ff81e 	bne	r20,r16,800c754 <__alt_data_end+0xfc00c754>
 800c774:	ace1883a 	add	r16,r21,r19
 800c778:	843ffe04 	addi	r16,r16,-8
 800c77c:	9c800a0e 	bge	r19,r18,800c7a8 <__s2b+0xd4>
 800c780:	94e5c83a 	sub	r18,r18,r19
 800c784:	84a5883a 	add	r18,r16,r18
 800c788:	81c00007 	ldb	r7,0(r16)
 800c78c:	8809883a 	mov	r4,r17
 800c790:	84000044 	addi	r16,r16,1
 800c794:	100b883a 	mov	r5,r2
 800c798:	01800284 	movi	r6,10
 800c79c:	39fff404 	addi	r7,r7,-48
 800c7a0:	800c5c00 	call	800c5c0 <__multadd>
 800c7a4:	84bff81e 	bne	r16,r18,800c788 <__alt_data_end+0xfc00c788>
 800c7a8:	dfc00617 	ldw	ra,24(sp)
 800c7ac:	dd400517 	ldw	r21,20(sp)
 800c7b0:	dd000417 	ldw	r20,16(sp)
 800c7b4:	dcc00317 	ldw	r19,12(sp)
 800c7b8:	dc800217 	ldw	r18,8(sp)
 800c7bc:	dc400117 	ldw	r17,4(sp)
 800c7c0:	dc000017 	ldw	r16,0(sp)
 800c7c4:	dec00704 	addi	sp,sp,28
 800c7c8:	f800283a 	ret
 800c7cc:	84000284 	addi	r16,r16,10
 800c7d0:	1827883a 	mov	r19,r3
 800c7d4:	003fe906 	br	800c77c <__alt_data_end+0xfc00c77c>

0800c7d8 <__hi0bits>:
 800c7d8:	20bfffec 	andhi	r2,r4,65535
 800c7dc:	1000141e 	bne	r2,zero,800c830 <__hi0bits+0x58>
 800c7e0:	2008943a 	slli	r4,r4,16
 800c7e4:	00800404 	movi	r2,16
 800c7e8:	20ffc02c 	andhi	r3,r4,65280
 800c7ec:	1800021e 	bne	r3,zero,800c7f8 <__hi0bits+0x20>
 800c7f0:	2008923a 	slli	r4,r4,8
 800c7f4:	10800204 	addi	r2,r2,8
 800c7f8:	20fc002c 	andhi	r3,r4,61440
 800c7fc:	1800021e 	bne	r3,zero,800c808 <__hi0bits+0x30>
 800c800:	2008913a 	slli	r4,r4,4
 800c804:	10800104 	addi	r2,r2,4
 800c808:	20f0002c 	andhi	r3,r4,49152
 800c80c:	1800031e 	bne	r3,zero,800c81c <__hi0bits+0x44>
 800c810:	2109883a 	add	r4,r4,r4
 800c814:	10800084 	addi	r2,r2,2
 800c818:	2109883a 	add	r4,r4,r4
 800c81c:	20000316 	blt	r4,zero,800c82c <__hi0bits+0x54>
 800c820:	2110002c 	andhi	r4,r4,16384
 800c824:	2000041e 	bne	r4,zero,800c838 <__hi0bits+0x60>
 800c828:	00800804 	movi	r2,32
 800c82c:	f800283a 	ret
 800c830:	0005883a 	mov	r2,zero
 800c834:	003fec06 	br	800c7e8 <__alt_data_end+0xfc00c7e8>
 800c838:	10800044 	addi	r2,r2,1
 800c83c:	f800283a 	ret

0800c840 <__lo0bits>:
 800c840:	20c00017 	ldw	r3,0(r4)
 800c844:	188001cc 	andi	r2,r3,7
 800c848:	10000826 	beq	r2,zero,800c86c <__lo0bits+0x2c>
 800c84c:	1880004c 	andi	r2,r3,1
 800c850:	1000211e 	bne	r2,zero,800c8d8 <__lo0bits+0x98>
 800c854:	1880008c 	andi	r2,r3,2
 800c858:	1000211e 	bne	r2,zero,800c8e0 <__lo0bits+0xa0>
 800c85c:	1806d0ba 	srli	r3,r3,2
 800c860:	00800084 	movi	r2,2
 800c864:	20c00015 	stw	r3,0(r4)
 800c868:	f800283a 	ret
 800c86c:	18bfffcc 	andi	r2,r3,65535
 800c870:	10001326 	beq	r2,zero,800c8c0 <__lo0bits+0x80>
 800c874:	0005883a 	mov	r2,zero
 800c878:	19403fcc 	andi	r5,r3,255
 800c87c:	2800021e 	bne	r5,zero,800c888 <__lo0bits+0x48>
 800c880:	1806d23a 	srli	r3,r3,8
 800c884:	10800204 	addi	r2,r2,8
 800c888:	194003cc 	andi	r5,r3,15
 800c88c:	2800021e 	bne	r5,zero,800c898 <__lo0bits+0x58>
 800c890:	1806d13a 	srli	r3,r3,4
 800c894:	10800104 	addi	r2,r2,4
 800c898:	194000cc 	andi	r5,r3,3
 800c89c:	2800021e 	bne	r5,zero,800c8a8 <__lo0bits+0x68>
 800c8a0:	1806d0ba 	srli	r3,r3,2
 800c8a4:	10800084 	addi	r2,r2,2
 800c8a8:	1940004c 	andi	r5,r3,1
 800c8ac:	2800081e 	bne	r5,zero,800c8d0 <__lo0bits+0x90>
 800c8b0:	1806d07a 	srli	r3,r3,1
 800c8b4:	1800051e 	bne	r3,zero,800c8cc <__lo0bits+0x8c>
 800c8b8:	00800804 	movi	r2,32
 800c8bc:	f800283a 	ret
 800c8c0:	1806d43a 	srli	r3,r3,16
 800c8c4:	00800404 	movi	r2,16
 800c8c8:	003feb06 	br	800c878 <__alt_data_end+0xfc00c878>
 800c8cc:	10800044 	addi	r2,r2,1
 800c8d0:	20c00015 	stw	r3,0(r4)
 800c8d4:	f800283a 	ret
 800c8d8:	0005883a 	mov	r2,zero
 800c8dc:	f800283a 	ret
 800c8e0:	1806d07a 	srli	r3,r3,1
 800c8e4:	00800044 	movi	r2,1
 800c8e8:	20c00015 	stw	r3,0(r4)
 800c8ec:	f800283a 	ret

0800c8f0 <__i2b>:
 800c8f0:	defffd04 	addi	sp,sp,-12
 800c8f4:	dc000015 	stw	r16,0(sp)
 800c8f8:	04000044 	movi	r16,1
 800c8fc:	dc400115 	stw	r17,4(sp)
 800c900:	2823883a 	mov	r17,r5
 800c904:	800b883a 	mov	r5,r16
 800c908:	dfc00215 	stw	ra,8(sp)
 800c90c:	800c4f00 	call	800c4f0 <_Balloc>
 800c910:	14400515 	stw	r17,20(r2)
 800c914:	14000415 	stw	r16,16(r2)
 800c918:	dfc00217 	ldw	ra,8(sp)
 800c91c:	dc400117 	ldw	r17,4(sp)
 800c920:	dc000017 	ldw	r16,0(sp)
 800c924:	dec00304 	addi	sp,sp,12
 800c928:	f800283a 	ret

0800c92c <__multiply>:
 800c92c:	defffa04 	addi	sp,sp,-24
 800c930:	dcc00315 	stw	r19,12(sp)
 800c934:	dc800215 	stw	r18,8(sp)
 800c938:	2cc00417 	ldw	r19,16(r5)
 800c93c:	34800417 	ldw	r18,16(r6)
 800c940:	dd000415 	stw	r20,16(sp)
 800c944:	dc400115 	stw	r17,4(sp)
 800c948:	dfc00515 	stw	ra,20(sp)
 800c94c:	dc000015 	stw	r16,0(sp)
 800c950:	2829883a 	mov	r20,r5
 800c954:	3023883a 	mov	r17,r6
 800c958:	9c807016 	blt	r19,r18,800cb1c <__multiply+0x1f0>
 800c95c:	9005883a 	mov	r2,r18
 800c960:	9825883a 	mov	r18,r19
 800c964:	1027883a 	mov	r19,r2
 800c968:	a0800217 	ldw	r2,8(r20)
 800c96c:	94e1883a 	add	r16,r18,r19
 800c970:	a1400117 	ldw	r5,4(r20)
 800c974:	1400010e 	bge	r2,r16,800c97c <__multiply+0x50>
 800c978:	29400044 	addi	r5,r5,1
 800c97c:	800c4f00 	call	800c4f0 <_Balloc>
 800c980:	8417883a 	add	r11,r16,r16
 800c984:	13000504 	addi	r12,r2,20
 800c988:	5ad7883a 	add	r11,r11,r11
 800c98c:	62d7883a 	add	r11,r12,r11
 800c990:	6007883a 	mov	r3,r12
 800c994:	62c0032e 	bgeu	r12,r11,800c9a4 <__multiply+0x78>
 800c998:	18000015 	stw	zero,0(r3)
 800c99c:	18c00104 	addi	r3,r3,4
 800c9a0:	1afffd36 	bltu	r3,r11,800c998 <__alt_data_end+0xfc00c998>
 800c9a4:	9ce7883a 	add	r19,r19,r19
 800c9a8:	94a5883a 	add	r18,r18,r18
 800c9ac:	89800504 	addi	r6,r17,20
 800c9b0:	9ce7883a 	add	r19,r19,r19
 800c9b4:	a3800504 	addi	r14,r20,20
 800c9b8:	94a5883a 	add	r18,r18,r18
 800c9bc:	34db883a 	add	r13,r6,r19
 800c9c0:	7495883a 	add	r10,r14,r18
 800c9c4:	3340422e 	bgeu	r6,r13,800cad0 <__multiply+0x1a4>
 800c9c8:	34400017 	ldw	r17,0(r6)
 800c9cc:	8cbfffcc 	andi	r18,r17,65535
 800c9d0:	90001b26 	beq	r18,zero,800ca40 <__multiply+0x114>
 800c9d4:	6013883a 	mov	r9,r12
 800c9d8:	7023883a 	mov	r17,r14
 800c9dc:	0011883a 	mov	r8,zero
 800c9e0:	88c00017 	ldw	r3,0(r17)
 800c9e4:	4bc00017 	ldw	r15,0(r9)
 800c9e8:	8c400104 	addi	r17,r17,4
 800c9ec:	19ffffcc 	andi	r7,r3,65535
 800c9f0:	3c8f383a 	mul	r7,r7,r18
 800c9f4:	1808d43a 	srli	r4,r3,16
 800c9f8:	797fffcc 	andi	r5,r15,65535
 800c9fc:	29cb883a 	add	r5,r5,r7
 800ca00:	2a0b883a 	add	r5,r5,r8
 800ca04:	2489383a 	mul	r4,r4,r18
 800ca08:	7806d43a 	srli	r3,r15,16
 800ca0c:	2810d43a 	srli	r8,r5,16
 800ca10:	297fffcc 	andi	r5,r5,65535
 800ca14:	1907883a 	add	r3,r3,r4
 800ca18:	1a07883a 	add	r3,r3,r8
 800ca1c:	1808943a 	slli	r4,r3,16
 800ca20:	480f883a 	mov	r7,r9
 800ca24:	1810d43a 	srli	r8,r3,16
 800ca28:	214ab03a 	or	r5,r4,r5
 800ca2c:	49400015 	stw	r5,0(r9)
 800ca30:	4a400104 	addi	r9,r9,4
 800ca34:	8abfea36 	bltu	r17,r10,800c9e0 <__alt_data_end+0xfc00c9e0>
 800ca38:	3a000115 	stw	r8,4(r7)
 800ca3c:	34400017 	ldw	r17,0(r6)
 800ca40:	8822d43a 	srli	r17,r17,16
 800ca44:	88001f26 	beq	r17,zero,800cac4 <__multiply+0x198>
 800ca48:	60c00017 	ldw	r3,0(r12)
 800ca4c:	7013883a 	mov	r9,r14
 800ca50:	601f883a 	mov	r15,r12
 800ca54:	1811883a 	mov	r8,r3
 800ca58:	6027883a 	mov	r19,r12
 800ca5c:	000f883a 	mov	r7,zero
 800ca60:	00000106 	br	800ca68 <__multiply+0x13c>
 800ca64:	9027883a 	mov	r19,r18
 800ca68:	4940000b 	ldhu	r5,0(r9)
 800ca6c:	4010d43a 	srli	r8,r8,16
 800ca70:	193fffcc 	andi	r4,r3,65535
 800ca74:	2c4b383a 	mul	r5,r5,r17
 800ca78:	7bc00104 	addi	r15,r15,4
 800ca7c:	4a400104 	addi	r9,r9,4
 800ca80:	2a0b883a 	add	r5,r5,r8
 800ca84:	29cb883a 	add	r5,r5,r7
 800ca88:	2806943a 	slli	r3,r5,16
 800ca8c:	9c800104 	addi	r18,r19,4
 800ca90:	280ad43a 	srli	r5,r5,16
 800ca94:	1908b03a 	or	r4,r3,r4
 800ca98:	793fff15 	stw	r4,-4(r15)
 800ca9c:	48ffff17 	ldw	r3,-4(r9)
 800caa0:	92000017 	ldw	r8,0(r18)
 800caa4:	1806d43a 	srli	r3,r3,16
 800caa8:	413fffcc 	andi	r4,r8,65535
 800caac:	1c47383a 	mul	r3,r3,r17
 800cab0:	1907883a 	add	r3,r3,r4
 800cab4:	1947883a 	add	r3,r3,r5
 800cab8:	180ed43a 	srli	r7,r3,16
 800cabc:	4abfe936 	bltu	r9,r10,800ca64 <__alt_data_end+0xfc00ca64>
 800cac0:	98c00115 	stw	r3,4(r19)
 800cac4:	31800104 	addi	r6,r6,4
 800cac8:	63000104 	addi	r12,r12,4
 800cacc:	337fbe36 	bltu	r6,r13,800c9c8 <__alt_data_end+0xfc00c9c8>
 800cad0:	0400090e 	bge	zero,r16,800caf8 <__multiply+0x1cc>
 800cad4:	58ffff17 	ldw	r3,-4(r11)
 800cad8:	5affff04 	addi	r11,r11,-4
 800cadc:	18000326 	beq	r3,zero,800caec <__multiply+0x1c0>
 800cae0:	00000506 	br	800caf8 <__multiply+0x1cc>
 800cae4:	58c00017 	ldw	r3,0(r11)
 800cae8:	1800031e 	bne	r3,zero,800caf8 <__multiply+0x1cc>
 800caec:	843fffc4 	addi	r16,r16,-1
 800caf0:	5affff04 	addi	r11,r11,-4
 800caf4:	803ffb1e 	bne	r16,zero,800cae4 <__alt_data_end+0xfc00cae4>
 800caf8:	14000415 	stw	r16,16(r2)
 800cafc:	dfc00517 	ldw	ra,20(sp)
 800cb00:	dd000417 	ldw	r20,16(sp)
 800cb04:	dcc00317 	ldw	r19,12(sp)
 800cb08:	dc800217 	ldw	r18,8(sp)
 800cb0c:	dc400117 	ldw	r17,4(sp)
 800cb10:	dc000017 	ldw	r16,0(sp)
 800cb14:	dec00604 	addi	sp,sp,24
 800cb18:	f800283a 	ret
 800cb1c:	3029883a 	mov	r20,r6
 800cb20:	2823883a 	mov	r17,r5
 800cb24:	003f9006 	br	800c968 <__alt_data_end+0xfc00c968>

0800cb28 <__pow5mult>:
 800cb28:	defffa04 	addi	sp,sp,-24
 800cb2c:	dcc00315 	stw	r19,12(sp)
 800cb30:	dc800215 	stw	r18,8(sp)
 800cb34:	dc000015 	stw	r16,0(sp)
 800cb38:	dfc00515 	stw	ra,20(sp)
 800cb3c:	dd000415 	stw	r20,16(sp)
 800cb40:	dc400115 	stw	r17,4(sp)
 800cb44:	308000cc 	andi	r2,r6,3
 800cb48:	3021883a 	mov	r16,r6
 800cb4c:	2027883a 	mov	r19,r4
 800cb50:	2825883a 	mov	r18,r5
 800cb54:	10002e1e 	bne	r2,zero,800cc10 <__pow5mult+0xe8>
 800cb58:	8021d0ba 	srai	r16,r16,2
 800cb5c:	80001a26 	beq	r16,zero,800cbc8 <__pow5mult+0xa0>
 800cb60:	9c401217 	ldw	r17,72(r19)
 800cb64:	8800061e 	bne	r17,zero,800cb80 <__pow5mult+0x58>
 800cb68:	00003406 	br	800cc3c <__pow5mult+0x114>
 800cb6c:	8021d07a 	srai	r16,r16,1
 800cb70:	80001526 	beq	r16,zero,800cbc8 <__pow5mult+0xa0>
 800cb74:	88800017 	ldw	r2,0(r17)
 800cb78:	10001c26 	beq	r2,zero,800cbec <__pow5mult+0xc4>
 800cb7c:	1023883a 	mov	r17,r2
 800cb80:	80c0004c 	andi	r3,r16,1
 800cb84:	183ff926 	beq	r3,zero,800cb6c <__alt_data_end+0xfc00cb6c>
 800cb88:	900b883a 	mov	r5,r18
 800cb8c:	880d883a 	mov	r6,r17
 800cb90:	9809883a 	mov	r4,r19
 800cb94:	800c92c0 	call	800c92c <__multiply>
 800cb98:	90001b26 	beq	r18,zero,800cc08 <__pow5mult+0xe0>
 800cb9c:	91c00117 	ldw	r7,4(r18)
 800cba0:	98c01317 	ldw	r3,76(r19)
 800cba4:	8021d07a 	srai	r16,r16,1
 800cba8:	39cf883a 	add	r7,r7,r7
 800cbac:	39cf883a 	add	r7,r7,r7
 800cbb0:	19c7883a 	add	r3,r3,r7
 800cbb4:	19000017 	ldw	r4,0(r3)
 800cbb8:	91000015 	stw	r4,0(r18)
 800cbbc:	1c800015 	stw	r18,0(r3)
 800cbc0:	1025883a 	mov	r18,r2
 800cbc4:	803feb1e 	bne	r16,zero,800cb74 <__alt_data_end+0xfc00cb74>
 800cbc8:	9005883a 	mov	r2,r18
 800cbcc:	dfc00517 	ldw	ra,20(sp)
 800cbd0:	dd000417 	ldw	r20,16(sp)
 800cbd4:	dcc00317 	ldw	r19,12(sp)
 800cbd8:	dc800217 	ldw	r18,8(sp)
 800cbdc:	dc400117 	ldw	r17,4(sp)
 800cbe0:	dc000017 	ldw	r16,0(sp)
 800cbe4:	dec00604 	addi	sp,sp,24
 800cbe8:	f800283a 	ret
 800cbec:	9809883a 	mov	r4,r19
 800cbf0:	880b883a 	mov	r5,r17
 800cbf4:	880d883a 	mov	r6,r17
 800cbf8:	800c92c0 	call	800c92c <__multiply>
 800cbfc:	88800015 	stw	r2,0(r17)
 800cc00:	10000015 	stw	zero,0(r2)
 800cc04:	003fdd06 	br	800cb7c <__alt_data_end+0xfc00cb7c>
 800cc08:	1025883a 	mov	r18,r2
 800cc0c:	003fd706 	br	800cb6c <__alt_data_end+0xfc00cb6c>
 800cc10:	10bfffc4 	addi	r2,r2,-1
 800cc14:	1085883a 	add	r2,r2,r2
 800cc18:	00c200b4 	movhi	r3,2050
 800cc1c:	18c15d04 	addi	r3,r3,1396
 800cc20:	1085883a 	add	r2,r2,r2
 800cc24:	1885883a 	add	r2,r3,r2
 800cc28:	11800017 	ldw	r6,0(r2)
 800cc2c:	000f883a 	mov	r7,zero
 800cc30:	800c5c00 	call	800c5c0 <__multadd>
 800cc34:	1025883a 	mov	r18,r2
 800cc38:	003fc706 	br	800cb58 <__alt_data_end+0xfc00cb58>
 800cc3c:	05000044 	movi	r20,1
 800cc40:	9809883a 	mov	r4,r19
 800cc44:	a00b883a 	mov	r5,r20
 800cc48:	800c4f00 	call	800c4f0 <_Balloc>
 800cc4c:	1023883a 	mov	r17,r2
 800cc50:	00809c44 	movi	r2,625
 800cc54:	88800515 	stw	r2,20(r17)
 800cc58:	8d000415 	stw	r20,16(r17)
 800cc5c:	9c401215 	stw	r17,72(r19)
 800cc60:	88000015 	stw	zero,0(r17)
 800cc64:	003fc606 	br	800cb80 <__alt_data_end+0xfc00cb80>

0800cc68 <__lshift>:
 800cc68:	defff904 	addi	sp,sp,-28
 800cc6c:	dd000415 	stw	r20,16(sp)
 800cc70:	dcc00315 	stw	r19,12(sp)
 800cc74:	3029d17a 	srai	r20,r6,5
 800cc78:	2cc00417 	ldw	r19,16(r5)
 800cc7c:	28800217 	ldw	r2,8(r5)
 800cc80:	dd400515 	stw	r21,20(sp)
 800cc84:	a4e7883a 	add	r19,r20,r19
 800cc88:	dc800215 	stw	r18,8(sp)
 800cc8c:	dc400115 	stw	r17,4(sp)
 800cc90:	dc000015 	stw	r16,0(sp)
 800cc94:	dfc00615 	stw	ra,24(sp)
 800cc98:	9c000044 	addi	r16,r19,1
 800cc9c:	2823883a 	mov	r17,r5
 800cca0:	302b883a 	mov	r21,r6
 800cca4:	2025883a 	mov	r18,r4
 800cca8:	29400117 	ldw	r5,4(r5)
 800ccac:	1400030e 	bge	r2,r16,800ccbc <__lshift+0x54>
 800ccb0:	1085883a 	add	r2,r2,r2
 800ccb4:	29400044 	addi	r5,r5,1
 800ccb8:	143ffd16 	blt	r2,r16,800ccb0 <__alt_data_end+0xfc00ccb0>
 800ccbc:	9009883a 	mov	r4,r18
 800ccc0:	800c4f00 	call	800c4f0 <_Balloc>
 800ccc4:	11c00504 	addi	r7,r2,20
 800ccc8:	0500090e 	bge	zero,r20,800ccf0 <__lshift+0x88>
 800cccc:	3811883a 	mov	r8,r7
 800ccd0:	0007883a 	mov	r3,zero
 800ccd4:	40000015 	stw	zero,0(r8)
 800ccd8:	18c00044 	addi	r3,r3,1
 800ccdc:	42000104 	addi	r8,r8,4
 800cce0:	1d3ffc1e 	bne	r3,r20,800ccd4 <__alt_data_end+0xfc00ccd4>
 800cce4:	18c7883a 	add	r3,r3,r3
 800cce8:	18c7883a 	add	r3,r3,r3
 800ccec:	38cf883a 	add	r7,r7,r3
 800ccf0:	89000417 	ldw	r4,16(r17)
 800ccf4:	88c00504 	addi	r3,r17,20
 800ccf8:	a98007cc 	andi	r6,r21,31
 800ccfc:	2109883a 	add	r4,r4,r4
 800cd00:	2109883a 	add	r4,r4,r4
 800cd04:	1909883a 	add	r4,r3,r4
 800cd08:	30002326 	beq	r6,zero,800cd98 <__lshift+0x130>
 800cd0c:	01400804 	movi	r5,32
 800cd10:	298bc83a 	sub	r5,r5,r6
 800cd14:	0013883a 	mov	r9,zero
 800cd18:	1a000017 	ldw	r8,0(r3)
 800cd1c:	3815883a 	mov	r10,r7
 800cd20:	39c00104 	addi	r7,r7,4
 800cd24:	4190983a 	sll	r8,r8,r6
 800cd28:	18c00104 	addi	r3,r3,4
 800cd2c:	4a10b03a 	or	r8,r9,r8
 800cd30:	3a3fff15 	stw	r8,-4(r7)
 800cd34:	1a3fff17 	ldw	r8,-4(r3)
 800cd38:	4152d83a 	srl	r9,r8,r5
 800cd3c:	193ff636 	bltu	r3,r4,800cd18 <__alt_data_end+0xfc00cd18>
 800cd40:	52400115 	stw	r9,4(r10)
 800cd44:	48000126 	beq	r9,zero,800cd4c <__lshift+0xe4>
 800cd48:	9c000084 	addi	r16,r19,2
 800cd4c:	89000117 	ldw	r4,4(r17)
 800cd50:	90c01317 	ldw	r3,76(r18)
 800cd54:	843fffc4 	addi	r16,r16,-1
 800cd58:	2109883a 	add	r4,r4,r4
 800cd5c:	2109883a 	add	r4,r4,r4
 800cd60:	1907883a 	add	r3,r3,r4
 800cd64:	19000017 	ldw	r4,0(r3)
 800cd68:	14000415 	stw	r16,16(r2)
 800cd6c:	89000015 	stw	r4,0(r17)
 800cd70:	1c400015 	stw	r17,0(r3)
 800cd74:	dfc00617 	ldw	ra,24(sp)
 800cd78:	dd400517 	ldw	r21,20(sp)
 800cd7c:	dd000417 	ldw	r20,16(sp)
 800cd80:	dcc00317 	ldw	r19,12(sp)
 800cd84:	dc800217 	ldw	r18,8(sp)
 800cd88:	dc400117 	ldw	r17,4(sp)
 800cd8c:	dc000017 	ldw	r16,0(sp)
 800cd90:	dec00704 	addi	sp,sp,28
 800cd94:	f800283a 	ret
 800cd98:	19400017 	ldw	r5,0(r3)
 800cd9c:	39c00104 	addi	r7,r7,4
 800cda0:	18c00104 	addi	r3,r3,4
 800cda4:	397fff15 	stw	r5,-4(r7)
 800cda8:	193ffb36 	bltu	r3,r4,800cd98 <__alt_data_end+0xfc00cd98>
 800cdac:	003fe706 	br	800cd4c <__alt_data_end+0xfc00cd4c>

0800cdb0 <__mcmp>:
 800cdb0:	20800417 	ldw	r2,16(r4)
 800cdb4:	28c00417 	ldw	r3,16(r5)
 800cdb8:	10c5c83a 	sub	r2,r2,r3
 800cdbc:	1000111e 	bne	r2,zero,800ce04 <__mcmp+0x54>
 800cdc0:	18c7883a 	add	r3,r3,r3
 800cdc4:	18c7883a 	add	r3,r3,r3
 800cdc8:	21000504 	addi	r4,r4,20
 800cdcc:	29400504 	addi	r5,r5,20
 800cdd0:	20c5883a 	add	r2,r4,r3
 800cdd4:	28cb883a 	add	r5,r5,r3
 800cdd8:	00000106 	br	800cde0 <__mcmp+0x30>
 800cddc:	20800a2e 	bgeu	r4,r2,800ce08 <__mcmp+0x58>
 800cde0:	10bfff04 	addi	r2,r2,-4
 800cde4:	297fff04 	addi	r5,r5,-4
 800cde8:	11800017 	ldw	r6,0(r2)
 800cdec:	28c00017 	ldw	r3,0(r5)
 800cdf0:	30fffa26 	beq	r6,r3,800cddc <__alt_data_end+0xfc00cddc>
 800cdf4:	30c00236 	bltu	r6,r3,800ce00 <__mcmp+0x50>
 800cdf8:	00800044 	movi	r2,1
 800cdfc:	f800283a 	ret
 800ce00:	00bfffc4 	movi	r2,-1
 800ce04:	f800283a 	ret
 800ce08:	0005883a 	mov	r2,zero
 800ce0c:	f800283a 	ret

0800ce10 <__mdiff>:
 800ce10:	defffb04 	addi	sp,sp,-20
 800ce14:	dc000015 	stw	r16,0(sp)
 800ce18:	2821883a 	mov	r16,r5
 800ce1c:	dcc00315 	stw	r19,12(sp)
 800ce20:	300b883a 	mov	r5,r6
 800ce24:	2027883a 	mov	r19,r4
 800ce28:	8009883a 	mov	r4,r16
 800ce2c:	dc800215 	stw	r18,8(sp)
 800ce30:	dfc00415 	stw	ra,16(sp)
 800ce34:	dc400115 	stw	r17,4(sp)
 800ce38:	3025883a 	mov	r18,r6
 800ce3c:	800cdb00 	call	800cdb0 <__mcmp>
 800ce40:	10005226 	beq	r2,zero,800cf8c <__mdiff+0x17c>
 800ce44:	10004c16 	blt	r2,zero,800cf78 <__mdiff+0x168>
 800ce48:	0023883a 	mov	r17,zero
 800ce4c:	81400117 	ldw	r5,4(r16)
 800ce50:	9809883a 	mov	r4,r19
 800ce54:	800c4f00 	call	800c4f0 <_Balloc>
 800ce58:	83400417 	ldw	r13,16(r16)
 800ce5c:	93800417 	ldw	r14,16(r18)
 800ce60:	81000504 	addi	r4,r16,20
 800ce64:	6b59883a 	add	r12,r13,r13
 800ce68:	739d883a 	add	r14,r14,r14
 800ce6c:	6319883a 	add	r12,r12,r12
 800ce70:	91800504 	addi	r6,r18,20
 800ce74:	739d883a 	add	r14,r14,r14
 800ce78:	14400315 	stw	r17,12(r2)
 800ce7c:	2319883a 	add	r12,r4,r12
 800ce80:	339d883a 	add	r14,r6,r14
 800ce84:	12400504 	addi	r9,r2,20
 800ce88:	0007883a 	mov	r3,zero
 800ce8c:	22000017 	ldw	r8,0(r4)
 800ce90:	32800017 	ldw	r10,0(r6)
 800ce94:	4ac00104 	addi	r11,r9,4
 800ce98:	41ffffcc 	andi	r7,r8,65535
 800ce9c:	38c7883a 	add	r3,r7,r3
 800cea0:	51ffffcc 	andi	r7,r10,65535
 800cea4:	19cfc83a 	sub	r7,r3,r7
 800cea8:	4010d43a 	srli	r8,r8,16
 800ceac:	5014d43a 	srli	r10,r10,16
 800ceb0:	3807d43a 	srai	r3,r7,16
 800ceb4:	39ffffcc 	andi	r7,r7,65535
 800ceb8:	4291c83a 	sub	r8,r8,r10
 800cebc:	40c7883a 	add	r3,r8,r3
 800cec0:	1810943a 	slli	r8,r3,16
 800cec4:	31800104 	addi	r6,r6,4
 800cec8:	21000104 	addi	r4,r4,4
 800cecc:	41ceb03a 	or	r7,r8,r7
 800ced0:	49c00015 	stw	r7,0(r9)
 800ced4:	1807d43a 	srai	r3,r3,16
 800ced8:	580b883a 	mov	r5,r11
 800cedc:	5813883a 	mov	r9,r11
 800cee0:	33bfea36 	bltu	r6,r14,800ce8c <__alt_data_end+0xfc00ce8c>
 800cee4:	2011883a 	mov	r8,r4
 800cee8:	2300152e 	bgeu	r4,r12,800cf40 <__mdiff+0x130>
 800ceec:	21400017 	ldw	r5,0(r4)
 800cef0:	4a400104 	addi	r9,r9,4
 800cef4:	21000104 	addi	r4,r4,4
 800cef8:	29ffffcc 	andi	r7,r5,65535
 800cefc:	38c7883a 	add	r3,r7,r3
 800cf00:	280ad43a 	srli	r5,r5,16
 800cf04:	180dd43a 	srai	r6,r3,16
 800cf08:	19ffffcc 	andi	r7,r3,65535
 800cf0c:	3147883a 	add	r3,r6,r5
 800cf10:	180a943a 	slli	r5,r3,16
 800cf14:	1807d43a 	srai	r3,r3,16
 800cf18:	29ceb03a 	or	r7,r5,r7
 800cf1c:	49ffff15 	stw	r7,-4(r9)
 800cf20:	233ff236 	bltu	r4,r12,800ceec <__alt_data_end+0xfc00ceec>
 800cf24:	0206303a 	nor	r3,zero,r8
 800cf28:	1b07883a 	add	r3,r3,r12
 800cf2c:	1806d0ba 	srli	r3,r3,2
 800cf30:	18c00044 	addi	r3,r3,1
 800cf34:	18c7883a 	add	r3,r3,r3
 800cf38:	18c7883a 	add	r3,r3,r3
 800cf3c:	58cb883a 	add	r5,r11,r3
 800cf40:	28ffff04 	addi	r3,r5,-4
 800cf44:	3800041e 	bne	r7,zero,800cf58 <__mdiff+0x148>
 800cf48:	18ffff04 	addi	r3,r3,-4
 800cf4c:	19000017 	ldw	r4,0(r3)
 800cf50:	6b7fffc4 	addi	r13,r13,-1
 800cf54:	203ffc26 	beq	r4,zero,800cf48 <__alt_data_end+0xfc00cf48>
 800cf58:	13400415 	stw	r13,16(r2)
 800cf5c:	dfc00417 	ldw	ra,16(sp)
 800cf60:	dcc00317 	ldw	r19,12(sp)
 800cf64:	dc800217 	ldw	r18,8(sp)
 800cf68:	dc400117 	ldw	r17,4(sp)
 800cf6c:	dc000017 	ldw	r16,0(sp)
 800cf70:	dec00504 	addi	sp,sp,20
 800cf74:	f800283a 	ret
 800cf78:	8005883a 	mov	r2,r16
 800cf7c:	04400044 	movi	r17,1
 800cf80:	9021883a 	mov	r16,r18
 800cf84:	1025883a 	mov	r18,r2
 800cf88:	003fb006 	br	800ce4c <__alt_data_end+0xfc00ce4c>
 800cf8c:	9809883a 	mov	r4,r19
 800cf90:	000b883a 	mov	r5,zero
 800cf94:	800c4f00 	call	800c4f0 <_Balloc>
 800cf98:	00c00044 	movi	r3,1
 800cf9c:	10c00415 	stw	r3,16(r2)
 800cfa0:	10000515 	stw	zero,20(r2)
 800cfa4:	003fed06 	br	800cf5c <__alt_data_end+0xfc00cf5c>

0800cfa8 <__ulp>:
 800cfa8:	295ffc2c 	andhi	r5,r5,32752
 800cfac:	00bf3034 	movhi	r2,64704
 800cfb0:	2887883a 	add	r3,r5,r2
 800cfb4:	00c0020e 	bge	zero,r3,800cfc0 <__ulp+0x18>
 800cfb8:	0005883a 	mov	r2,zero
 800cfbc:	f800283a 	ret
 800cfc0:	00c7c83a 	sub	r3,zero,r3
 800cfc4:	180bd53a 	srai	r5,r3,20
 800cfc8:	008004c4 	movi	r2,19
 800cfcc:	11400a0e 	bge	r2,r5,800cff8 <__ulp+0x50>
 800cfd0:	00800c84 	movi	r2,50
 800cfd4:	0007883a 	mov	r3,zero
 800cfd8:	11400516 	blt	r2,r5,800cff0 <__ulp+0x48>
 800cfdc:	00800cc4 	movi	r2,51
 800cfe0:	114bc83a 	sub	r5,r2,r5
 800cfe4:	00800044 	movi	r2,1
 800cfe8:	1144983a 	sll	r2,r2,r5
 800cfec:	f800283a 	ret
 800cff0:	00800044 	movi	r2,1
 800cff4:	f800283a 	ret
 800cff8:	00800234 	movhi	r2,8
 800cffc:	1147d83a 	sra	r3,r2,r5
 800d000:	0005883a 	mov	r2,zero
 800d004:	f800283a 	ret

0800d008 <__b2d>:
 800d008:	defffa04 	addi	sp,sp,-24
 800d00c:	dc000015 	stw	r16,0(sp)
 800d010:	24000417 	ldw	r16,16(r4)
 800d014:	dc400115 	stw	r17,4(sp)
 800d018:	24400504 	addi	r17,r4,20
 800d01c:	8421883a 	add	r16,r16,r16
 800d020:	8421883a 	add	r16,r16,r16
 800d024:	8c21883a 	add	r16,r17,r16
 800d028:	dc800215 	stw	r18,8(sp)
 800d02c:	84bfff17 	ldw	r18,-4(r16)
 800d030:	dd000415 	stw	r20,16(sp)
 800d034:	dcc00315 	stw	r19,12(sp)
 800d038:	9009883a 	mov	r4,r18
 800d03c:	2829883a 	mov	r20,r5
 800d040:	dfc00515 	stw	ra,20(sp)
 800d044:	800c7d80 	call	800c7d8 <__hi0bits>
 800d048:	00c00804 	movi	r3,32
 800d04c:	1887c83a 	sub	r3,r3,r2
 800d050:	a0c00015 	stw	r3,0(r20)
 800d054:	00c00284 	movi	r3,10
 800d058:	84ffff04 	addi	r19,r16,-4
 800d05c:	18801216 	blt	r3,r2,800d0a8 <__b2d+0xa0>
 800d060:	014002c4 	movi	r5,11
 800d064:	2889c83a 	sub	r4,r5,r2
 800d068:	9106d83a 	srl	r3,r18,r4
 800d06c:	18cffc34 	orhi	r3,r3,16368
 800d070:	8cc0282e 	bgeu	r17,r19,800d114 <__b2d+0x10c>
 800d074:	817ffe17 	ldw	r5,-8(r16)
 800d078:	290ad83a 	srl	r5,r5,r4
 800d07c:	10800544 	addi	r2,r2,21
 800d080:	9084983a 	sll	r2,r18,r2
 800d084:	2884b03a 	or	r2,r5,r2
 800d088:	dfc00517 	ldw	ra,20(sp)
 800d08c:	dd000417 	ldw	r20,16(sp)
 800d090:	dcc00317 	ldw	r19,12(sp)
 800d094:	dc800217 	ldw	r18,8(sp)
 800d098:	dc400117 	ldw	r17,4(sp)
 800d09c:	dc000017 	ldw	r16,0(sp)
 800d0a0:	dec00604 	addi	sp,sp,24
 800d0a4:	f800283a 	ret
 800d0a8:	113ffd44 	addi	r4,r2,-11
 800d0ac:	8cc00f2e 	bgeu	r17,r19,800d0ec <__b2d+0xe4>
 800d0b0:	81bffe04 	addi	r6,r16,-8
 800d0b4:	817ffe17 	ldw	r5,-8(r16)
 800d0b8:	20001326 	beq	r4,zero,800d108 <__b2d+0x100>
 800d0bc:	00c00ac4 	movi	r3,43
 800d0c0:	1885c83a 	sub	r2,r3,r2
 800d0c4:	2886d83a 	srl	r3,r5,r2
 800d0c8:	9124983a 	sll	r18,r18,r4
 800d0cc:	90e4b03a 	or	r18,r18,r3
 800d0d0:	90cffc34 	orhi	r3,r18,16368
 800d0d4:	8980112e 	bgeu	r17,r6,800d11c <__b2d+0x114>
 800d0d8:	81bffd17 	ldw	r6,-12(r16)
 800d0dc:	308cd83a 	srl	r6,r6,r2
 800d0e0:	2904983a 	sll	r2,r5,r4
 800d0e4:	1184b03a 	or	r2,r2,r6
 800d0e8:	003fe706 	br	800d088 <__alt_data_end+0xfc00d088>
 800d0ec:	20000526 	beq	r4,zero,800d104 <__b2d+0xfc>
 800d0f0:	9124983a 	sll	r18,r18,r4
 800d0f4:	000d883a 	mov	r6,zero
 800d0f8:	000b883a 	mov	r5,zero
 800d0fc:	90cffc34 	orhi	r3,r18,16368
 800d100:	003ff706 	br	800d0e0 <__alt_data_end+0xfc00d0e0>
 800d104:	000b883a 	mov	r5,zero
 800d108:	90cffc34 	orhi	r3,r18,16368
 800d10c:	2805883a 	mov	r2,r5
 800d110:	003fdd06 	br	800d088 <__alt_data_end+0xfc00d088>
 800d114:	000b883a 	mov	r5,zero
 800d118:	003fd806 	br	800d07c <__alt_data_end+0xfc00d07c>
 800d11c:	000d883a 	mov	r6,zero
 800d120:	003fef06 	br	800d0e0 <__alt_data_end+0xfc00d0e0>

0800d124 <__d2b>:
 800d124:	defff704 	addi	sp,sp,-36
 800d128:	dc000215 	stw	r16,8(sp)
 800d12c:	3021883a 	mov	r16,r6
 800d130:	dc400315 	stw	r17,12(sp)
 800d134:	8022907a 	slli	r17,r16,1
 800d138:	dd400715 	stw	r21,28(sp)
 800d13c:	282b883a 	mov	r21,r5
 800d140:	01400044 	movi	r5,1
 800d144:	dd000615 	stw	r20,24(sp)
 800d148:	dcc00515 	stw	r19,20(sp)
 800d14c:	dc800415 	stw	r18,16(sp)
 800d150:	dfc00815 	stw	ra,32(sp)
 800d154:	3829883a 	mov	r20,r7
 800d158:	dc800917 	ldw	r18,36(sp)
 800d15c:	8822d57a 	srli	r17,r17,21
 800d160:	800c4f00 	call	800c4f0 <_Balloc>
 800d164:	1027883a 	mov	r19,r2
 800d168:	00800434 	movhi	r2,16
 800d16c:	10bfffc4 	addi	r2,r2,-1
 800d170:	808c703a 	and	r6,r16,r2
 800d174:	88000126 	beq	r17,zero,800d17c <__d2b+0x58>
 800d178:	31800434 	orhi	r6,r6,16
 800d17c:	d9800015 	stw	r6,0(sp)
 800d180:	a8001f26 	beq	r21,zero,800d200 <__d2b+0xdc>
 800d184:	d9000104 	addi	r4,sp,4
 800d188:	dd400115 	stw	r21,4(sp)
 800d18c:	800c8400 	call	800c840 <__lo0bits>
 800d190:	d8c00017 	ldw	r3,0(sp)
 800d194:	1000291e 	bne	r2,zero,800d23c <__d2b+0x118>
 800d198:	d9000117 	ldw	r4,4(sp)
 800d19c:	99000515 	stw	r4,20(r19)
 800d1a0:	1820c03a 	cmpne	r16,r3,zero
 800d1a4:	84000044 	addi	r16,r16,1
 800d1a8:	98c00615 	stw	r3,24(r19)
 800d1ac:	9c000415 	stw	r16,16(r19)
 800d1b0:	88001b1e 	bne	r17,zero,800d220 <__d2b+0xfc>
 800d1b4:	800690ba 	slli	r3,r16,2
 800d1b8:	10bef384 	addi	r2,r2,-1074
 800d1bc:	a0800015 	stw	r2,0(r20)
 800d1c0:	98c5883a 	add	r2,r19,r3
 800d1c4:	11000417 	ldw	r4,16(r2)
 800d1c8:	8020917a 	slli	r16,r16,5
 800d1cc:	800c7d80 	call	800c7d8 <__hi0bits>
 800d1d0:	8085c83a 	sub	r2,r16,r2
 800d1d4:	90800015 	stw	r2,0(r18)
 800d1d8:	9805883a 	mov	r2,r19
 800d1dc:	dfc00817 	ldw	ra,32(sp)
 800d1e0:	dd400717 	ldw	r21,28(sp)
 800d1e4:	dd000617 	ldw	r20,24(sp)
 800d1e8:	dcc00517 	ldw	r19,20(sp)
 800d1ec:	dc800417 	ldw	r18,16(sp)
 800d1f0:	dc400317 	ldw	r17,12(sp)
 800d1f4:	dc000217 	ldw	r16,8(sp)
 800d1f8:	dec00904 	addi	sp,sp,36
 800d1fc:	f800283a 	ret
 800d200:	d809883a 	mov	r4,sp
 800d204:	800c8400 	call	800c840 <__lo0bits>
 800d208:	d8c00017 	ldw	r3,0(sp)
 800d20c:	04000044 	movi	r16,1
 800d210:	9c000415 	stw	r16,16(r19)
 800d214:	98c00515 	stw	r3,20(r19)
 800d218:	10800804 	addi	r2,r2,32
 800d21c:	883fe526 	beq	r17,zero,800d1b4 <__alt_data_end+0xfc00d1b4>
 800d220:	8c7ef344 	addi	r17,r17,-1075
 800d224:	88a3883a 	add	r17,r17,r2
 800d228:	00c00d44 	movi	r3,53
 800d22c:	a4400015 	stw	r17,0(r20)
 800d230:	1885c83a 	sub	r2,r3,r2
 800d234:	90800015 	stw	r2,0(r18)
 800d238:	003fe706 	br	800d1d8 <__alt_data_end+0xfc00d1d8>
 800d23c:	01000804 	movi	r4,32
 800d240:	2089c83a 	sub	r4,r4,r2
 800d244:	1908983a 	sll	r4,r3,r4
 800d248:	d9400117 	ldw	r5,4(sp)
 800d24c:	1886d83a 	srl	r3,r3,r2
 800d250:	2148b03a 	or	r4,r4,r5
 800d254:	99000515 	stw	r4,20(r19)
 800d258:	d8c00015 	stw	r3,0(sp)
 800d25c:	003fd006 	br	800d1a0 <__alt_data_end+0xfc00d1a0>

0800d260 <__ratio>:
 800d260:	defff904 	addi	sp,sp,-28
 800d264:	dc400315 	stw	r17,12(sp)
 800d268:	2823883a 	mov	r17,r5
 800d26c:	d9400104 	addi	r5,sp,4
 800d270:	dfc00615 	stw	ra,24(sp)
 800d274:	dcc00515 	stw	r19,20(sp)
 800d278:	dc800415 	stw	r18,16(sp)
 800d27c:	2027883a 	mov	r19,r4
 800d280:	dc000215 	stw	r16,8(sp)
 800d284:	800d0080 	call	800d008 <__b2d>
 800d288:	8809883a 	mov	r4,r17
 800d28c:	d80b883a 	mov	r5,sp
 800d290:	1025883a 	mov	r18,r2
 800d294:	1821883a 	mov	r16,r3
 800d298:	800d0080 	call	800d008 <__b2d>
 800d29c:	8a400417 	ldw	r9,16(r17)
 800d2a0:	9a000417 	ldw	r8,16(r19)
 800d2a4:	100d883a 	mov	r6,r2
 800d2a8:	d8800017 	ldw	r2,0(sp)
 800d2ac:	4251c83a 	sub	r8,r8,r9
 800d2b0:	4012917a 	slli	r9,r8,5
 800d2b4:	da000117 	ldw	r8,4(sp)
 800d2b8:	4091c83a 	sub	r8,r8,r2
 800d2bc:	4251883a 	add	r8,r8,r9
 800d2c0:	02000d0e 	bge	zero,r8,800d2f8 <__ratio+0x98>
 800d2c4:	4010953a 	slli	r8,r8,20
 800d2c8:	4421883a 	add	r16,r8,r16
 800d2cc:	9009883a 	mov	r4,r18
 800d2d0:	800b883a 	mov	r5,r16
 800d2d4:	180f883a 	mov	r7,r3
 800d2d8:	8011a500 	call	8011a50 <__divdf3>
 800d2dc:	dfc00617 	ldw	ra,24(sp)
 800d2e0:	dcc00517 	ldw	r19,20(sp)
 800d2e4:	dc800417 	ldw	r18,16(sp)
 800d2e8:	dc400317 	ldw	r17,12(sp)
 800d2ec:	dc000217 	ldw	r16,8(sp)
 800d2f0:	dec00704 	addi	sp,sp,28
 800d2f4:	f800283a 	ret
 800d2f8:	4010953a 	slli	r8,r8,20
 800d2fc:	1a07c83a 	sub	r3,r3,r8
 800d300:	003ff206 	br	800d2cc <__alt_data_end+0xfc00d2cc>

0800d304 <_mprec_log10>:
 800d304:	defffe04 	addi	sp,sp,-8
 800d308:	dc000015 	stw	r16,0(sp)
 800d30c:	dfc00115 	stw	ra,4(sp)
 800d310:	008005c4 	movi	r2,23
 800d314:	2021883a 	mov	r16,r4
 800d318:	11000d0e 	bge	r2,r4,800d350 <_mprec_log10+0x4c>
 800d31c:	0005883a 	mov	r2,zero
 800d320:	00cffc34 	movhi	r3,16368
 800d324:	843fffc4 	addi	r16,r16,-1
 800d328:	1009883a 	mov	r4,r2
 800d32c:	180b883a 	mov	r5,r3
 800d330:	000d883a 	mov	r6,zero
 800d334:	01d00934 	movhi	r7,16420
 800d338:	8003f880 	call	8003f88 <__muldf3>
 800d33c:	803ff91e 	bne	r16,zero,800d324 <__alt_data_end+0xfc00d324>
 800d340:	dfc00117 	ldw	ra,4(sp)
 800d344:	dc000017 	ldw	r16,0(sp)
 800d348:	dec00204 	addi	sp,sp,8
 800d34c:	f800283a 	ret
 800d350:	202090fa 	slli	r16,r4,3
 800d354:	008200b4 	movhi	r2,2050
 800d358:	10817404 	addi	r2,r2,1488
 800d35c:	1421883a 	add	r16,r2,r16
 800d360:	80800017 	ldw	r2,0(r16)
 800d364:	80c00117 	ldw	r3,4(r16)
 800d368:	dfc00117 	ldw	ra,4(sp)
 800d36c:	dc000017 	ldw	r16,0(sp)
 800d370:	dec00204 	addi	sp,sp,8
 800d374:	f800283a 	ret

0800d378 <__copybits>:
 800d378:	297fffc4 	addi	r5,r5,-1
 800d37c:	280fd17a 	srai	r7,r5,5
 800d380:	30c00417 	ldw	r3,16(r6)
 800d384:	30800504 	addi	r2,r6,20
 800d388:	39c00044 	addi	r7,r7,1
 800d38c:	18c7883a 	add	r3,r3,r3
 800d390:	39cf883a 	add	r7,r7,r7
 800d394:	18c7883a 	add	r3,r3,r3
 800d398:	39cf883a 	add	r7,r7,r7
 800d39c:	10c7883a 	add	r3,r2,r3
 800d3a0:	21cf883a 	add	r7,r4,r7
 800d3a4:	10c00d2e 	bgeu	r2,r3,800d3dc <__copybits+0x64>
 800d3a8:	200b883a 	mov	r5,r4
 800d3ac:	12000017 	ldw	r8,0(r2)
 800d3b0:	29400104 	addi	r5,r5,4
 800d3b4:	10800104 	addi	r2,r2,4
 800d3b8:	2a3fff15 	stw	r8,-4(r5)
 800d3bc:	10fffb36 	bltu	r2,r3,800d3ac <__alt_data_end+0xfc00d3ac>
 800d3c0:	1985c83a 	sub	r2,r3,r6
 800d3c4:	10bffac4 	addi	r2,r2,-21
 800d3c8:	1004d0ba 	srli	r2,r2,2
 800d3cc:	10800044 	addi	r2,r2,1
 800d3d0:	1085883a 	add	r2,r2,r2
 800d3d4:	1085883a 	add	r2,r2,r2
 800d3d8:	2089883a 	add	r4,r4,r2
 800d3dc:	21c0032e 	bgeu	r4,r7,800d3ec <__copybits+0x74>
 800d3e0:	20000015 	stw	zero,0(r4)
 800d3e4:	21000104 	addi	r4,r4,4
 800d3e8:	21fffd36 	bltu	r4,r7,800d3e0 <__alt_data_end+0xfc00d3e0>
 800d3ec:	f800283a 	ret

0800d3f0 <__any_on>:
 800d3f0:	20c00417 	ldw	r3,16(r4)
 800d3f4:	2805d17a 	srai	r2,r5,5
 800d3f8:	21000504 	addi	r4,r4,20
 800d3fc:	18800d0e 	bge	r3,r2,800d434 <__any_on+0x44>
 800d400:	18c7883a 	add	r3,r3,r3
 800d404:	18c7883a 	add	r3,r3,r3
 800d408:	20c7883a 	add	r3,r4,r3
 800d40c:	20c0192e 	bgeu	r4,r3,800d474 <__any_on+0x84>
 800d410:	18bfff17 	ldw	r2,-4(r3)
 800d414:	18ffff04 	addi	r3,r3,-4
 800d418:	1000041e 	bne	r2,zero,800d42c <__any_on+0x3c>
 800d41c:	20c0142e 	bgeu	r4,r3,800d470 <__any_on+0x80>
 800d420:	18ffff04 	addi	r3,r3,-4
 800d424:	19400017 	ldw	r5,0(r3)
 800d428:	283ffc26 	beq	r5,zero,800d41c <__alt_data_end+0xfc00d41c>
 800d42c:	00800044 	movi	r2,1
 800d430:	f800283a 	ret
 800d434:	10c00a0e 	bge	r2,r3,800d460 <__any_on+0x70>
 800d438:	1085883a 	add	r2,r2,r2
 800d43c:	1085883a 	add	r2,r2,r2
 800d440:	294007cc 	andi	r5,r5,31
 800d444:	2087883a 	add	r3,r4,r2
 800d448:	283ff026 	beq	r5,zero,800d40c <__alt_data_end+0xfc00d40c>
 800d44c:	19800017 	ldw	r6,0(r3)
 800d450:	3144d83a 	srl	r2,r6,r5
 800d454:	114a983a 	sll	r5,r2,r5
 800d458:	29bff41e 	bne	r5,r6,800d42c <__alt_data_end+0xfc00d42c>
 800d45c:	003feb06 	br	800d40c <__alt_data_end+0xfc00d40c>
 800d460:	1085883a 	add	r2,r2,r2
 800d464:	1085883a 	add	r2,r2,r2
 800d468:	2087883a 	add	r3,r4,r2
 800d46c:	003fe706 	br	800d40c <__alt_data_end+0xfc00d40c>
 800d470:	f800283a 	ret
 800d474:	0005883a 	mov	r2,zero
 800d478:	f800283a 	ret

0800d47c <_putc_r>:
 800d47c:	defffc04 	addi	sp,sp,-16
 800d480:	dc000215 	stw	r16,8(sp)
 800d484:	dfc00315 	stw	ra,12(sp)
 800d488:	2021883a 	mov	r16,r4
 800d48c:	20000226 	beq	r4,zero,800d498 <_putc_r+0x1c>
 800d490:	20800e17 	ldw	r2,56(r4)
 800d494:	10001b26 	beq	r2,zero,800d504 <_putc_r+0x88>
 800d498:	30800217 	ldw	r2,8(r6)
 800d49c:	10bfffc4 	addi	r2,r2,-1
 800d4a0:	30800215 	stw	r2,8(r6)
 800d4a4:	10000a16 	blt	r2,zero,800d4d0 <_putc_r+0x54>
 800d4a8:	30800017 	ldw	r2,0(r6)
 800d4ac:	11400005 	stb	r5,0(r2)
 800d4b0:	30800017 	ldw	r2,0(r6)
 800d4b4:	10c00044 	addi	r3,r2,1
 800d4b8:	30c00015 	stw	r3,0(r6)
 800d4bc:	10800003 	ldbu	r2,0(r2)
 800d4c0:	dfc00317 	ldw	ra,12(sp)
 800d4c4:	dc000217 	ldw	r16,8(sp)
 800d4c8:	dec00404 	addi	sp,sp,16
 800d4cc:	f800283a 	ret
 800d4d0:	30c00617 	ldw	r3,24(r6)
 800d4d4:	10c00616 	blt	r2,r3,800d4f0 <_putc_r+0x74>
 800d4d8:	30800017 	ldw	r2,0(r6)
 800d4dc:	00c00284 	movi	r3,10
 800d4e0:	11400005 	stb	r5,0(r2)
 800d4e4:	30800017 	ldw	r2,0(r6)
 800d4e8:	11400003 	ldbu	r5,0(r2)
 800d4ec:	28fff11e 	bne	r5,r3,800d4b4 <__alt_data_end+0xfc00d4b4>
 800d4f0:	8009883a 	mov	r4,r16
 800d4f4:	dfc00317 	ldw	ra,12(sp)
 800d4f8:	dc000217 	ldw	r16,8(sp)
 800d4fc:	dec00404 	addi	sp,sp,16
 800d500:	801049c1 	jmpi	801049c <__swbuf_r>
 800d504:	d9400015 	stw	r5,0(sp)
 800d508:	d9800115 	stw	r6,4(sp)
 800d50c:	800b3400 	call	800b340 <__sinit>
 800d510:	d9800117 	ldw	r6,4(sp)
 800d514:	d9400017 	ldw	r5,0(sp)
 800d518:	003fdf06 	br	800d498 <__alt_data_end+0xfc00d498>

0800d51c <putc>:
 800d51c:	defffc04 	addi	sp,sp,-16
 800d520:	dc400115 	stw	r17,4(sp)
 800d524:	044200b4 	movhi	r17,2050
 800d528:	8c488a04 	addi	r17,r17,8744
 800d52c:	dc800215 	stw	r18,8(sp)
 800d530:	2025883a 	mov	r18,r4
 800d534:	89000017 	ldw	r4,0(r17)
 800d538:	dc000015 	stw	r16,0(sp)
 800d53c:	dfc00315 	stw	ra,12(sp)
 800d540:	2821883a 	mov	r16,r5
 800d544:	20000226 	beq	r4,zero,800d550 <putc+0x34>
 800d548:	20c00e17 	ldw	r3,56(r4)
 800d54c:	18001a26 	beq	r3,zero,800d5b8 <putc+0x9c>
 800d550:	80800217 	ldw	r2,8(r16)
 800d554:	10bfffc4 	addi	r2,r2,-1
 800d558:	80800215 	stw	r2,8(r16)
 800d55c:	10000c16 	blt	r2,zero,800d590 <putc+0x74>
 800d560:	80800017 	ldw	r2,0(r16)
 800d564:	14800005 	stb	r18,0(r2)
 800d568:	80800017 	ldw	r2,0(r16)
 800d56c:	10c00044 	addi	r3,r2,1
 800d570:	80c00015 	stw	r3,0(r16)
 800d574:	10800003 	ldbu	r2,0(r2)
 800d578:	dfc00317 	ldw	ra,12(sp)
 800d57c:	dc800217 	ldw	r18,8(sp)
 800d580:	dc400117 	ldw	r17,4(sp)
 800d584:	dc000017 	ldw	r16,0(sp)
 800d588:	dec00404 	addi	sp,sp,16
 800d58c:	f800283a 	ret
 800d590:	80c00617 	ldw	r3,24(r16)
 800d594:	10c00a16 	blt	r2,r3,800d5c0 <putc+0xa4>
 800d598:	80800017 	ldw	r2,0(r16)
 800d59c:	00c00284 	movi	r3,10
 800d5a0:	14800005 	stb	r18,0(r2)
 800d5a4:	80800017 	ldw	r2,0(r16)
 800d5a8:	11400003 	ldbu	r5,0(r2)
 800d5ac:	28ffef1e 	bne	r5,r3,800d56c <__alt_data_end+0xfc00d56c>
 800d5b0:	89000017 	ldw	r4,0(r17)
 800d5b4:	00000406 	br	800d5c8 <putc+0xac>
 800d5b8:	800b3400 	call	800b340 <__sinit>
 800d5bc:	003fe406 	br	800d550 <__alt_data_end+0xfc00d550>
 800d5c0:	89000017 	ldw	r4,0(r17)
 800d5c4:	900b883a 	mov	r5,r18
 800d5c8:	800d883a 	mov	r6,r16
 800d5cc:	dfc00317 	ldw	ra,12(sp)
 800d5d0:	dc800217 	ldw	r18,8(sp)
 800d5d4:	dc400117 	ldw	r17,4(sp)
 800d5d8:	dc000017 	ldw	r16,0(sp)
 800d5dc:	dec00404 	addi	sp,sp,16
 800d5e0:	801049c1 	jmpi	801049c <__swbuf_r>

0800d5e4 <_realloc_r>:
 800d5e4:	defff604 	addi	sp,sp,-40
 800d5e8:	dcc00315 	stw	r19,12(sp)
 800d5ec:	dc400115 	stw	r17,4(sp)
 800d5f0:	dfc00915 	stw	ra,36(sp)
 800d5f4:	df000815 	stw	fp,32(sp)
 800d5f8:	ddc00715 	stw	r23,28(sp)
 800d5fc:	dd800615 	stw	r22,24(sp)
 800d600:	dd400515 	stw	r21,20(sp)
 800d604:	dd000415 	stw	r20,16(sp)
 800d608:	dc800215 	stw	r18,8(sp)
 800d60c:	dc000015 	stw	r16,0(sp)
 800d610:	2827883a 	mov	r19,r5
 800d614:	3023883a 	mov	r17,r6
 800d618:	2800bf26 	beq	r5,zero,800d918 <_realloc_r+0x334>
 800d61c:	2025883a 	mov	r18,r4
 800d620:	80132d40 	call	80132d4 <__malloc_lock>
 800d624:	98ffff17 	ldw	r3,-4(r19)
 800d628:	01bfff04 	movi	r6,-4
 800d62c:	890002c4 	addi	r4,r17,11
 800d630:	01c00584 	movi	r7,22
 800d634:	9d7ffe04 	addi	r21,r19,-8
 800d638:	19a0703a 	and	r16,r3,r6
 800d63c:	39003f2e 	bgeu	r7,r4,800d73c <_realloc_r+0x158>
 800d640:	053ffe04 	movi	r20,-8
 800d644:	2528703a 	and	r20,r4,r20
 800d648:	a00f883a 	mov	r7,r20
 800d64c:	a0008216 	blt	r20,zero,800d858 <_realloc_r+0x274>
 800d650:	a4408136 	bltu	r20,r17,800d858 <_realloc_r+0x274>
 800d654:	81c03c0e 	bge	r16,r7,800d748 <_realloc_r+0x164>
 800d658:	070200b4 	movhi	fp,2050
 800d65c:	e702dc04 	addi	fp,fp,2928
 800d660:	e1000217 	ldw	r4,8(fp)
 800d664:	ac05883a 	add	r2,r21,r16
 800d668:	2080bf26 	beq	r4,r2,800d968 <_realloc_r+0x384>
 800d66c:	11000117 	ldw	r4,4(r2)
 800d670:	023fff84 	movi	r8,-2
 800d674:	2210703a 	and	r8,r4,r8
 800d678:	1211883a 	add	r8,r2,r8
 800d67c:	41400117 	ldw	r5,4(r8)
 800d680:	2940004c 	andi	r5,r5,1
 800d684:	28004a1e 	bne	r5,zero,800d7b0 <_realloc_r+0x1cc>
 800d688:	017fff04 	movi	r5,-4
 800d68c:	2148703a 	and	r4,r4,r5
 800d690:	2409883a 	add	r4,r4,r16
 800d694:	21c0ad0e 	bge	r4,r7,800d94c <_realloc_r+0x368>
 800d698:	18c0004c 	andi	r3,r3,1
 800d69c:	18007f1e 	bne	r3,zero,800d89c <_realloc_r+0x2b8>
 800d6a0:	9dfffe17 	ldw	r23,-8(r19)
 800d6a4:	adefc83a 	sub	r23,r21,r23
 800d6a8:	bd800117 	ldw	r22,4(r23)
 800d6ac:	b14a703a 	and	r5,r22,r5
 800d6b0:	216d883a 	add	r22,r4,r5
 800d6b4:	b1c04516 	blt	r22,r7,800d7cc <_realloc_r+0x1e8>
 800d6b8:	10c00317 	ldw	r3,12(r2)
 800d6bc:	10800217 	ldw	r2,8(r2)
 800d6c0:	81bfff04 	addi	r6,r16,-4
 800d6c4:	bc400204 	addi	r17,r23,8
 800d6c8:	10c00315 	stw	r3,12(r2)
 800d6cc:	18800215 	stw	r2,8(r3)
 800d6d0:	b9400217 	ldw	r5,8(r23)
 800d6d4:	b8c00317 	ldw	r3,12(r23)
 800d6d8:	00800904 	movi	r2,36
 800d6dc:	28c00315 	stw	r3,12(r5)
 800d6e0:	19400215 	stw	r5,8(r3)
 800d6e4:	1180ef36 	bltu	r2,r6,800daa4 <_realloc_r+0x4c0>
 800d6e8:	008004c4 	movi	r2,19
 800d6ec:	1180da2e 	bgeu	r2,r6,800da58 <_realloc_r+0x474>
 800d6f0:	98800017 	ldw	r2,0(r19)
 800d6f4:	b8800215 	stw	r2,8(r23)
 800d6f8:	98800117 	ldw	r2,4(r19)
 800d6fc:	b8800315 	stw	r2,12(r23)
 800d700:	008006c4 	movi	r2,27
 800d704:	1180fc2e 	bgeu	r2,r6,800daf8 <_realloc_r+0x514>
 800d708:	98800217 	ldw	r2,8(r19)
 800d70c:	b8800415 	stw	r2,16(r23)
 800d710:	98800317 	ldw	r2,12(r19)
 800d714:	b8800515 	stw	r2,20(r23)
 800d718:	00800904 	movi	r2,36
 800d71c:	3080421e 	bne	r6,r2,800d828 <_realloc_r+0x244>
 800d720:	98800417 	ldw	r2,16(r19)
 800d724:	9cc00604 	addi	r19,r19,24
 800d728:	b8c00804 	addi	r3,r23,32
 800d72c:	b8800615 	stw	r2,24(r23)
 800d730:	98bfff17 	ldw	r2,-4(r19)
 800d734:	b8800715 	stw	r2,28(r23)
 800d738:	00003d06 	br	800d830 <_realloc_r+0x24c>
 800d73c:	01c00404 	movi	r7,16
 800d740:	3829883a 	mov	r20,r7
 800d744:	003fc206 	br	800d650 <__alt_data_end+0xfc00d650>
 800d748:	9823883a 	mov	r17,r19
 800d74c:	850fc83a 	sub	r7,r16,r20
 800d750:	008003c4 	movi	r2,15
 800d754:	18c0004c 	andi	r3,r3,1
 800d758:	11c04336 	bltu	r2,r7,800d868 <_realloc_r+0x284>
 800d75c:	1c06b03a 	or	r3,r3,r16
 800d760:	a8c00115 	stw	r3,4(r21)
 800d764:	ac21883a 	add	r16,r21,r16
 800d768:	80c00117 	ldw	r3,4(r16)
 800d76c:	18c00054 	ori	r3,r3,1
 800d770:	80c00115 	stw	r3,4(r16)
 800d774:	9009883a 	mov	r4,r18
 800d778:	80132f40 	call	80132f4 <__malloc_unlock>
 800d77c:	8805883a 	mov	r2,r17
 800d780:	dfc00917 	ldw	ra,36(sp)
 800d784:	df000817 	ldw	fp,32(sp)
 800d788:	ddc00717 	ldw	r23,28(sp)
 800d78c:	dd800617 	ldw	r22,24(sp)
 800d790:	dd400517 	ldw	r21,20(sp)
 800d794:	dd000417 	ldw	r20,16(sp)
 800d798:	dcc00317 	ldw	r19,12(sp)
 800d79c:	dc800217 	ldw	r18,8(sp)
 800d7a0:	dc400117 	ldw	r17,4(sp)
 800d7a4:	dc000017 	ldw	r16,0(sp)
 800d7a8:	dec00a04 	addi	sp,sp,40
 800d7ac:	f800283a 	ret
 800d7b0:	18c0004c 	andi	r3,r3,1
 800d7b4:	1800391e 	bne	r3,zero,800d89c <_realloc_r+0x2b8>
 800d7b8:	9dfffe17 	ldw	r23,-8(r19)
 800d7bc:	00bfff04 	movi	r2,-4
 800d7c0:	adefc83a 	sub	r23,r21,r23
 800d7c4:	b9400117 	ldw	r5,4(r23)
 800d7c8:	288a703a 	and	r5,r5,r2
 800d7cc:	2c2d883a 	add	r22,r5,r16
 800d7d0:	b1c03216 	blt	r22,r7,800d89c <_realloc_r+0x2b8>
 800d7d4:	b8800317 	ldw	r2,12(r23)
 800d7d8:	b8c00217 	ldw	r3,8(r23)
 800d7dc:	81bfff04 	addi	r6,r16,-4
 800d7e0:	01000904 	movi	r4,36
 800d7e4:	18800315 	stw	r2,12(r3)
 800d7e8:	10c00215 	stw	r3,8(r2)
 800d7ec:	bc400204 	addi	r17,r23,8
 800d7f0:	2180ac36 	bltu	r4,r6,800daa4 <_realloc_r+0x4c0>
 800d7f4:	008004c4 	movi	r2,19
 800d7f8:	1180972e 	bgeu	r2,r6,800da58 <_realloc_r+0x474>
 800d7fc:	98800017 	ldw	r2,0(r19)
 800d800:	b8800215 	stw	r2,8(r23)
 800d804:	98800117 	ldw	r2,4(r19)
 800d808:	b8800315 	stw	r2,12(r23)
 800d80c:	008006c4 	movi	r2,27
 800d810:	1180b92e 	bgeu	r2,r6,800daf8 <_realloc_r+0x514>
 800d814:	98800217 	ldw	r2,8(r19)
 800d818:	b8800415 	stw	r2,16(r23)
 800d81c:	98800317 	ldw	r2,12(r19)
 800d820:	b8800515 	stw	r2,20(r23)
 800d824:	313fbe26 	beq	r6,r4,800d720 <__alt_data_end+0xfc00d720>
 800d828:	b8c00604 	addi	r3,r23,24
 800d82c:	9cc00404 	addi	r19,r19,16
 800d830:	98800017 	ldw	r2,0(r19)
 800d834:	b021883a 	mov	r16,r22
 800d838:	b82b883a 	mov	r21,r23
 800d83c:	18800015 	stw	r2,0(r3)
 800d840:	98800117 	ldw	r2,4(r19)
 800d844:	18800115 	stw	r2,4(r3)
 800d848:	98800217 	ldw	r2,8(r19)
 800d84c:	18800215 	stw	r2,8(r3)
 800d850:	b8c00117 	ldw	r3,4(r23)
 800d854:	003fbd06 	br	800d74c <__alt_data_end+0xfc00d74c>
 800d858:	00800304 	movi	r2,12
 800d85c:	90800015 	stw	r2,0(r18)
 800d860:	0005883a 	mov	r2,zero
 800d864:	003fc606 	br	800d780 <__alt_data_end+0xfc00d780>
 800d868:	1d06b03a 	or	r3,r3,r20
 800d86c:	ad0b883a 	add	r5,r21,r20
 800d870:	a8c00115 	stw	r3,4(r21)
 800d874:	38800054 	ori	r2,r7,1
 800d878:	28800115 	stw	r2,4(r5)
 800d87c:	29cf883a 	add	r7,r5,r7
 800d880:	38800117 	ldw	r2,4(r7)
 800d884:	9009883a 	mov	r4,r18
 800d888:	29400204 	addi	r5,r5,8
 800d88c:	10800054 	ori	r2,r2,1
 800d890:	38800115 	stw	r2,4(r7)
 800d894:	800b4b40 	call	800b4b4 <_free_r>
 800d898:	003fb606 	br	800d774 <__alt_data_end+0xfc00d774>
 800d89c:	880b883a 	mov	r5,r17
 800d8a0:	9009883a 	mov	r4,r18
 800d8a4:	80048dc0 	call	80048dc <_malloc_r>
 800d8a8:	1023883a 	mov	r17,r2
 800d8ac:	1000aa26 	beq	r2,zero,800db58 <_realloc_r+0x574>
 800d8b0:	98ffff17 	ldw	r3,-4(r19)
 800d8b4:	113ffe04 	addi	r4,r2,-8
 800d8b8:	00bfff84 	movi	r2,-2
 800d8bc:	1884703a 	and	r2,r3,r2
 800d8c0:	a885883a 	add	r2,r21,r2
 800d8c4:	20808626 	beq	r4,r2,800dae0 <_realloc_r+0x4fc>
 800d8c8:	81bfff04 	addi	r6,r16,-4
 800d8cc:	00800904 	movi	r2,36
 800d8d0:	11807036 	bltu	r2,r6,800da94 <_realloc_r+0x4b0>
 800d8d4:	00c004c4 	movi	r3,19
 800d8d8:	19805636 	bltu	r3,r6,800da34 <_realloc_r+0x450>
 800d8dc:	8805883a 	mov	r2,r17
 800d8e0:	9807883a 	mov	r3,r19
 800d8e4:	19000017 	ldw	r4,0(r3)
 800d8e8:	11000015 	stw	r4,0(r2)
 800d8ec:	19000117 	ldw	r4,4(r3)
 800d8f0:	11000115 	stw	r4,4(r2)
 800d8f4:	18c00217 	ldw	r3,8(r3)
 800d8f8:	10c00215 	stw	r3,8(r2)
 800d8fc:	980b883a 	mov	r5,r19
 800d900:	9009883a 	mov	r4,r18
 800d904:	800b4b40 	call	800b4b4 <_free_r>
 800d908:	9009883a 	mov	r4,r18
 800d90c:	80132f40 	call	80132f4 <__malloc_unlock>
 800d910:	8805883a 	mov	r2,r17
 800d914:	003f9a06 	br	800d780 <__alt_data_end+0xfc00d780>
 800d918:	300b883a 	mov	r5,r6
 800d91c:	dfc00917 	ldw	ra,36(sp)
 800d920:	df000817 	ldw	fp,32(sp)
 800d924:	ddc00717 	ldw	r23,28(sp)
 800d928:	dd800617 	ldw	r22,24(sp)
 800d92c:	dd400517 	ldw	r21,20(sp)
 800d930:	dd000417 	ldw	r20,16(sp)
 800d934:	dcc00317 	ldw	r19,12(sp)
 800d938:	dc800217 	ldw	r18,8(sp)
 800d93c:	dc400117 	ldw	r17,4(sp)
 800d940:	dc000017 	ldw	r16,0(sp)
 800d944:	dec00a04 	addi	sp,sp,40
 800d948:	80048dc1 	jmpi	80048dc <_malloc_r>
 800d94c:	11400317 	ldw	r5,12(r2)
 800d950:	10800217 	ldw	r2,8(r2)
 800d954:	9823883a 	mov	r17,r19
 800d958:	2021883a 	mov	r16,r4
 800d95c:	11400315 	stw	r5,12(r2)
 800d960:	28800215 	stw	r2,8(r5)
 800d964:	003f7906 	br	800d74c <__alt_data_end+0xfc00d74c>
 800d968:	21000117 	ldw	r4,4(r4)
 800d96c:	00bfff04 	movi	r2,-4
 800d970:	a1800404 	addi	r6,r20,16
 800d974:	2088703a 	and	r4,r4,r2
 800d978:	2409883a 	add	r4,r4,r16
 800d97c:	2180380e 	bge	r4,r6,800da60 <_realloc_r+0x47c>
 800d980:	18c0004c 	andi	r3,r3,1
 800d984:	183fc51e 	bne	r3,zero,800d89c <__alt_data_end+0xfc00d89c>
 800d988:	9dfffe17 	ldw	r23,-8(r19)
 800d98c:	adefc83a 	sub	r23,r21,r23
 800d990:	b9400117 	ldw	r5,4(r23)
 800d994:	288a703a 	and	r5,r5,r2
 800d998:	216d883a 	add	r22,r4,r5
 800d99c:	b1bf8b16 	blt	r22,r6,800d7cc <__alt_data_end+0xfc00d7cc>
 800d9a0:	b8800317 	ldw	r2,12(r23)
 800d9a4:	b8c00217 	ldw	r3,8(r23)
 800d9a8:	81bfff04 	addi	r6,r16,-4
 800d9ac:	01000904 	movi	r4,36
 800d9b0:	18800315 	stw	r2,12(r3)
 800d9b4:	10c00215 	stw	r3,8(r2)
 800d9b8:	bc400204 	addi	r17,r23,8
 800d9bc:	21805a36 	bltu	r4,r6,800db28 <_realloc_r+0x544>
 800d9c0:	008004c4 	movi	r2,19
 800d9c4:	1180562e 	bgeu	r2,r6,800db20 <_realloc_r+0x53c>
 800d9c8:	98800017 	ldw	r2,0(r19)
 800d9cc:	b8800215 	stw	r2,8(r23)
 800d9d0:	98800117 	ldw	r2,4(r19)
 800d9d4:	b8800315 	stw	r2,12(r23)
 800d9d8:	008006c4 	movi	r2,27
 800d9dc:	11805636 	bltu	r2,r6,800db38 <_realloc_r+0x554>
 800d9e0:	b8800404 	addi	r2,r23,16
 800d9e4:	9cc00204 	addi	r19,r19,8
 800d9e8:	98c00017 	ldw	r3,0(r19)
 800d9ec:	10c00015 	stw	r3,0(r2)
 800d9f0:	98c00117 	ldw	r3,4(r19)
 800d9f4:	10c00115 	stw	r3,4(r2)
 800d9f8:	98c00217 	ldw	r3,8(r19)
 800d9fc:	10c00215 	stw	r3,8(r2)
 800da00:	bd07883a 	add	r3,r23,r20
 800da04:	b505c83a 	sub	r2,r22,r20
 800da08:	e0c00215 	stw	r3,8(fp)
 800da0c:	10800054 	ori	r2,r2,1
 800da10:	18800115 	stw	r2,4(r3)
 800da14:	b8800117 	ldw	r2,4(r23)
 800da18:	9009883a 	mov	r4,r18
 800da1c:	1080004c 	andi	r2,r2,1
 800da20:	a0a8b03a 	or	r20,r20,r2
 800da24:	bd000115 	stw	r20,4(r23)
 800da28:	80132f40 	call	80132f4 <__malloc_unlock>
 800da2c:	8805883a 	mov	r2,r17
 800da30:	003f5306 	br	800d780 <__alt_data_end+0xfc00d780>
 800da34:	98c00017 	ldw	r3,0(r19)
 800da38:	88c00015 	stw	r3,0(r17)
 800da3c:	98c00117 	ldw	r3,4(r19)
 800da40:	88c00115 	stw	r3,4(r17)
 800da44:	00c006c4 	movi	r3,27
 800da48:	19801d36 	bltu	r3,r6,800dac0 <_realloc_r+0x4dc>
 800da4c:	88800204 	addi	r2,r17,8
 800da50:	98c00204 	addi	r3,r19,8
 800da54:	003fa306 	br	800d8e4 <__alt_data_end+0xfc00d8e4>
 800da58:	8807883a 	mov	r3,r17
 800da5c:	003f7406 	br	800d830 <__alt_data_end+0xfc00d830>
 800da60:	ad2b883a 	add	r21,r21,r20
 800da64:	2505c83a 	sub	r2,r4,r20
 800da68:	e5400215 	stw	r21,8(fp)
 800da6c:	10800054 	ori	r2,r2,1
 800da70:	a8800115 	stw	r2,4(r21)
 800da74:	98bfff17 	ldw	r2,-4(r19)
 800da78:	9009883a 	mov	r4,r18
 800da7c:	1080004c 	andi	r2,r2,1
 800da80:	a0a8b03a 	or	r20,r20,r2
 800da84:	9d3fff15 	stw	r20,-4(r19)
 800da88:	80132f40 	call	80132f4 <__malloc_unlock>
 800da8c:	9805883a 	mov	r2,r19
 800da90:	003f3b06 	br	800d780 <__alt_data_end+0xfc00d780>
 800da94:	8809883a 	mov	r4,r17
 800da98:	980b883a 	mov	r5,r19
 800da9c:	800c2700 	call	800c270 <memmove>
 800daa0:	003f9606 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800daa4:	8809883a 	mov	r4,r17
 800daa8:	980b883a 	mov	r5,r19
 800daac:	800c2700 	call	800c270 <memmove>
 800dab0:	b8c00117 	ldw	r3,4(r23)
 800dab4:	b021883a 	mov	r16,r22
 800dab8:	b82b883a 	mov	r21,r23
 800dabc:	003f2306 	br	800d74c <__alt_data_end+0xfc00d74c>
 800dac0:	98c00217 	ldw	r3,8(r19)
 800dac4:	88c00215 	stw	r3,8(r17)
 800dac8:	98c00317 	ldw	r3,12(r19)
 800dacc:	88c00315 	stw	r3,12(r17)
 800dad0:	30800c26 	beq	r6,r2,800db04 <_realloc_r+0x520>
 800dad4:	88800404 	addi	r2,r17,16
 800dad8:	98c00404 	addi	r3,r19,16
 800dadc:	003f8106 	br	800d8e4 <__alt_data_end+0xfc00d8e4>
 800dae0:	893fff17 	ldw	r4,-4(r17)
 800dae4:	00bfff04 	movi	r2,-4
 800dae8:	9823883a 	mov	r17,r19
 800daec:	2084703a 	and	r2,r4,r2
 800daf0:	80a1883a 	add	r16,r16,r2
 800daf4:	003f1506 	br	800d74c <__alt_data_end+0xfc00d74c>
 800daf8:	b8c00404 	addi	r3,r23,16
 800dafc:	9cc00204 	addi	r19,r19,8
 800db00:	003f4b06 	br	800d830 <__alt_data_end+0xfc00d830>
 800db04:	99000417 	ldw	r4,16(r19)
 800db08:	88800604 	addi	r2,r17,24
 800db0c:	98c00604 	addi	r3,r19,24
 800db10:	89000415 	stw	r4,16(r17)
 800db14:	99000517 	ldw	r4,20(r19)
 800db18:	89000515 	stw	r4,20(r17)
 800db1c:	003f7106 	br	800d8e4 <__alt_data_end+0xfc00d8e4>
 800db20:	8805883a 	mov	r2,r17
 800db24:	003fb006 	br	800d9e8 <__alt_data_end+0xfc00d9e8>
 800db28:	8809883a 	mov	r4,r17
 800db2c:	980b883a 	mov	r5,r19
 800db30:	800c2700 	call	800c270 <memmove>
 800db34:	003fb206 	br	800da00 <__alt_data_end+0xfc00da00>
 800db38:	98800217 	ldw	r2,8(r19)
 800db3c:	b8800415 	stw	r2,16(r23)
 800db40:	98800317 	ldw	r2,12(r19)
 800db44:	b8800515 	stw	r2,20(r23)
 800db48:	31000726 	beq	r6,r4,800db68 <_realloc_r+0x584>
 800db4c:	b8800604 	addi	r2,r23,24
 800db50:	9cc00404 	addi	r19,r19,16
 800db54:	003fa406 	br	800d9e8 <__alt_data_end+0xfc00d9e8>
 800db58:	9009883a 	mov	r4,r18
 800db5c:	80132f40 	call	80132f4 <__malloc_unlock>
 800db60:	0005883a 	mov	r2,zero
 800db64:	003f0606 	br	800d780 <__alt_data_end+0xfc00d780>
 800db68:	98c00417 	ldw	r3,16(r19)
 800db6c:	9cc00604 	addi	r19,r19,24
 800db70:	b8800804 	addi	r2,r23,32
 800db74:	b8c00615 	stw	r3,24(r23)
 800db78:	98ffff17 	ldw	r3,-4(r19)
 800db7c:	b8c00715 	stw	r3,28(r23)
 800db80:	003f9906 	br	800d9e8 <__alt_data_end+0xfc00d9e8>

0800db84 <__fpclassifyd>:
 800db84:	00a00034 	movhi	r2,32768
 800db88:	10bfffc4 	addi	r2,r2,-1
 800db8c:	2884703a 	and	r2,r5,r2
 800db90:	10000726 	beq	r2,zero,800dbb0 <__fpclassifyd+0x2c>
 800db94:	00fffc34 	movhi	r3,65520
 800db98:	019ff834 	movhi	r6,32736
 800db9c:	28c7883a 	add	r3,r5,r3
 800dba0:	31bfffc4 	addi	r6,r6,-1
 800dba4:	30c00536 	bltu	r6,r3,800dbbc <__fpclassifyd+0x38>
 800dba8:	00800104 	movi	r2,4
 800dbac:	f800283a 	ret
 800dbb0:	2000021e 	bne	r4,zero,800dbbc <__fpclassifyd+0x38>
 800dbb4:	00800084 	movi	r2,2
 800dbb8:	f800283a 	ret
 800dbbc:	00dffc34 	movhi	r3,32752
 800dbc0:	019ff834 	movhi	r6,32736
 800dbc4:	28cb883a 	add	r5,r5,r3
 800dbc8:	31bfffc4 	addi	r6,r6,-1
 800dbcc:	317ff62e 	bgeu	r6,r5,800dba8 <__alt_data_end+0xfc00dba8>
 800dbd0:	01400434 	movhi	r5,16
 800dbd4:	297fffc4 	addi	r5,r5,-1
 800dbd8:	28800236 	bltu	r5,r2,800dbe4 <__fpclassifyd+0x60>
 800dbdc:	008000c4 	movi	r2,3
 800dbe0:	f800283a 	ret
 800dbe4:	10c00226 	beq	r2,r3,800dbf0 <__fpclassifyd+0x6c>
 800dbe8:	0005883a 	mov	r2,zero
 800dbec:	f800283a 	ret
 800dbf0:	2005003a 	cmpeq	r2,r4,zero
 800dbf4:	f800283a 	ret

0800dbf8 <__sread>:
 800dbf8:	defffe04 	addi	sp,sp,-8
 800dbfc:	dc000015 	stw	r16,0(sp)
 800dc00:	2821883a 	mov	r16,r5
 800dc04:	2940038f 	ldh	r5,14(r5)
 800dc08:	dfc00115 	stw	ra,4(sp)
 800dc0c:	8010b780 	call	8010b78 <_read_r>
 800dc10:	10000716 	blt	r2,zero,800dc30 <__sread+0x38>
 800dc14:	80c01417 	ldw	r3,80(r16)
 800dc18:	1887883a 	add	r3,r3,r2
 800dc1c:	80c01415 	stw	r3,80(r16)
 800dc20:	dfc00117 	ldw	ra,4(sp)
 800dc24:	dc000017 	ldw	r16,0(sp)
 800dc28:	dec00204 	addi	sp,sp,8
 800dc2c:	f800283a 	ret
 800dc30:	80c0030b 	ldhu	r3,12(r16)
 800dc34:	18fbffcc 	andi	r3,r3,61439
 800dc38:	80c0030d 	sth	r3,12(r16)
 800dc3c:	dfc00117 	ldw	ra,4(sp)
 800dc40:	dc000017 	ldw	r16,0(sp)
 800dc44:	dec00204 	addi	sp,sp,8
 800dc48:	f800283a 	ret

0800dc4c <__seofread>:
 800dc4c:	0005883a 	mov	r2,zero
 800dc50:	f800283a 	ret

0800dc54 <__swrite>:
 800dc54:	2880030b 	ldhu	r2,12(r5)
 800dc58:	defffb04 	addi	sp,sp,-20
 800dc5c:	dcc00315 	stw	r19,12(sp)
 800dc60:	dc800215 	stw	r18,8(sp)
 800dc64:	dc400115 	stw	r17,4(sp)
 800dc68:	dc000015 	stw	r16,0(sp)
 800dc6c:	dfc00415 	stw	ra,16(sp)
 800dc70:	10c0400c 	andi	r3,r2,256
 800dc74:	2821883a 	mov	r16,r5
 800dc78:	2027883a 	mov	r19,r4
 800dc7c:	3025883a 	mov	r18,r6
 800dc80:	3823883a 	mov	r17,r7
 800dc84:	18000526 	beq	r3,zero,800dc9c <__swrite+0x48>
 800dc88:	2940038f 	ldh	r5,14(r5)
 800dc8c:	000d883a 	mov	r6,zero
 800dc90:	01c00084 	movi	r7,2
 800dc94:	8010b1c0 	call	8010b1c <_lseek_r>
 800dc98:	8080030b 	ldhu	r2,12(r16)
 800dc9c:	8140038f 	ldh	r5,14(r16)
 800dca0:	10bbffcc 	andi	r2,r2,61439
 800dca4:	9809883a 	mov	r4,r19
 800dca8:	900d883a 	mov	r6,r18
 800dcac:	880f883a 	mov	r7,r17
 800dcb0:	8080030d 	sth	r2,12(r16)
 800dcb4:	dfc00417 	ldw	ra,16(sp)
 800dcb8:	dcc00317 	ldw	r19,12(sp)
 800dcbc:	dc800217 	ldw	r18,8(sp)
 800dcc0:	dc400117 	ldw	r17,4(sp)
 800dcc4:	dc000017 	ldw	r16,0(sp)
 800dcc8:	dec00504 	addi	sp,sp,20
 800dccc:	801060c1 	jmpi	801060c <_write_r>

0800dcd0 <__sseek>:
 800dcd0:	defffe04 	addi	sp,sp,-8
 800dcd4:	dc000015 	stw	r16,0(sp)
 800dcd8:	2821883a 	mov	r16,r5
 800dcdc:	2940038f 	ldh	r5,14(r5)
 800dce0:	dfc00115 	stw	ra,4(sp)
 800dce4:	8010b1c0 	call	8010b1c <_lseek_r>
 800dce8:	00ffffc4 	movi	r3,-1
 800dcec:	10c00826 	beq	r2,r3,800dd10 <__sseek+0x40>
 800dcf0:	80c0030b 	ldhu	r3,12(r16)
 800dcf4:	80801415 	stw	r2,80(r16)
 800dcf8:	18c40014 	ori	r3,r3,4096
 800dcfc:	80c0030d 	sth	r3,12(r16)
 800dd00:	dfc00117 	ldw	ra,4(sp)
 800dd04:	dc000017 	ldw	r16,0(sp)
 800dd08:	dec00204 	addi	sp,sp,8
 800dd0c:	f800283a 	ret
 800dd10:	80c0030b 	ldhu	r3,12(r16)
 800dd14:	18fbffcc 	andi	r3,r3,61439
 800dd18:	80c0030d 	sth	r3,12(r16)
 800dd1c:	dfc00117 	ldw	ra,4(sp)
 800dd20:	dc000017 	ldw	r16,0(sp)
 800dd24:	dec00204 	addi	sp,sp,8
 800dd28:	f800283a 	ret

0800dd2c <__sclose>:
 800dd2c:	2940038f 	ldh	r5,14(r5)
 800dd30:	80106681 	jmpi	8010668 <_close_r>

0800dd34 <strcmp>:
 800dd34:	2144b03a 	or	r2,r4,r5
 800dd38:	108000cc 	andi	r2,r2,3
 800dd3c:	1000171e 	bne	r2,zero,800dd9c <strcmp+0x68>
 800dd40:	20800017 	ldw	r2,0(r4)
 800dd44:	28c00017 	ldw	r3,0(r5)
 800dd48:	10c0141e 	bne	r2,r3,800dd9c <strcmp+0x68>
 800dd4c:	027fbff4 	movhi	r9,65279
 800dd50:	4a7fbfc4 	addi	r9,r9,-257
 800dd54:	0086303a 	nor	r3,zero,r2
 800dd58:	02202074 	movhi	r8,32897
 800dd5c:	1245883a 	add	r2,r2,r9
 800dd60:	42202004 	addi	r8,r8,-32640
 800dd64:	10c4703a 	and	r2,r2,r3
 800dd68:	1204703a 	and	r2,r2,r8
 800dd6c:	10000226 	beq	r2,zero,800dd78 <strcmp+0x44>
 800dd70:	00001706 	br	800ddd0 <strcmp+0x9c>
 800dd74:	1000161e 	bne	r2,zero,800ddd0 <strcmp+0x9c>
 800dd78:	21000104 	addi	r4,r4,4
 800dd7c:	20c00017 	ldw	r3,0(r4)
 800dd80:	29400104 	addi	r5,r5,4
 800dd84:	29800017 	ldw	r6,0(r5)
 800dd88:	1a4f883a 	add	r7,r3,r9
 800dd8c:	00c4303a 	nor	r2,zero,r3
 800dd90:	3884703a 	and	r2,r7,r2
 800dd94:	1204703a 	and	r2,r2,r8
 800dd98:	19bff626 	beq	r3,r6,800dd74 <__alt_data_end+0xfc00dd74>
 800dd9c:	20800007 	ldb	r2,0(r4)
 800dda0:	1000051e 	bne	r2,zero,800ddb8 <strcmp+0x84>
 800dda4:	00000606 	br	800ddc0 <strcmp+0x8c>
 800dda8:	21000044 	addi	r4,r4,1
 800ddac:	20800007 	ldb	r2,0(r4)
 800ddb0:	29400044 	addi	r5,r5,1
 800ddb4:	10000226 	beq	r2,zero,800ddc0 <strcmp+0x8c>
 800ddb8:	28c00007 	ldb	r3,0(r5)
 800ddbc:	10fffa26 	beq	r2,r3,800dda8 <__alt_data_end+0xfc00dda8>
 800ddc0:	20800003 	ldbu	r2,0(r4)
 800ddc4:	28c00003 	ldbu	r3,0(r5)
 800ddc8:	10c5c83a 	sub	r2,r2,r3
 800ddcc:	f800283a 	ret
 800ddd0:	0005883a 	mov	r2,zero
 800ddd4:	f800283a 	ret

0800ddd8 <__ssprint_r>:
 800ddd8:	30800217 	ldw	r2,8(r6)
 800dddc:	defff604 	addi	sp,sp,-40
 800dde0:	ddc00715 	stw	r23,28(sp)
 800dde4:	dcc00315 	stw	r19,12(sp)
 800dde8:	dfc00915 	stw	ra,36(sp)
 800ddec:	df000815 	stw	fp,32(sp)
 800ddf0:	dd800615 	stw	r22,24(sp)
 800ddf4:	dd400515 	stw	r21,20(sp)
 800ddf8:	dd000415 	stw	r20,16(sp)
 800ddfc:	dc800215 	stw	r18,8(sp)
 800de00:	dc400115 	stw	r17,4(sp)
 800de04:	dc000015 	stw	r16,0(sp)
 800de08:	3027883a 	mov	r19,r6
 800de0c:	35c00017 	ldw	r23,0(r6)
 800de10:	10005526 	beq	r2,zero,800df68 <__ssprint_r+0x190>
 800de14:	2029883a 	mov	r20,r4
 800de18:	29000017 	ldw	r4,0(r5)
 800de1c:	2821883a 	mov	r16,r5
 800de20:	0039883a 	mov	fp,zero
 800de24:	0023883a 	mov	r17,zero
 800de28:	88003926 	beq	r17,zero,800df10 <__ssprint_r+0x138>
 800de2c:	84800217 	ldw	r18,8(r16)
 800de30:	902d883a 	mov	r22,r18
 800de34:	8c803a36 	bltu	r17,r18,800df20 <__ssprint_r+0x148>
 800de38:	80c0030b 	ldhu	r3,12(r16)
 800de3c:	1881200c 	andi	r2,r3,1152
 800de40:	10002626 	beq	r2,zero,800dedc <__ssprint_r+0x104>
 800de44:	80800517 	ldw	r2,20(r16)
 800de48:	81400417 	ldw	r5,16(r16)
 800de4c:	89c00044 	addi	r7,r17,1
 800de50:	108d883a 	add	r6,r2,r2
 800de54:	3085883a 	add	r2,r6,r2
 800de58:	100cd7fa 	srli	r6,r2,31
 800de5c:	216dc83a 	sub	r22,r4,r5
 800de60:	3d89883a 	add	r4,r7,r22
 800de64:	3085883a 	add	r2,r6,r2
 800de68:	1025d07a 	srai	r18,r2,1
 800de6c:	900d883a 	mov	r6,r18
 800de70:	9100022e 	bgeu	r18,r4,800de7c <__ssprint_r+0xa4>
 800de74:	2025883a 	mov	r18,r4
 800de78:	200d883a 	mov	r6,r4
 800de7c:	18c1000c 	andi	r3,r3,1024
 800de80:	a009883a 	mov	r4,r20
 800de84:	18002926 	beq	r3,zero,800df2c <__ssprint_r+0x154>
 800de88:	300b883a 	mov	r5,r6
 800de8c:	80048dc0 	call	80048dc <_malloc_r>
 800de90:	102b883a 	mov	r21,r2
 800de94:	10002b26 	beq	r2,zero,800df44 <__ssprint_r+0x16c>
 800de98:	81400417 	ldw	r5,16(r16)
 800de9c:	1009883a 	mov	r4,r2
 800dea0:	b00d883a 	mov	r6,r22
 800dea4:	800c1380 	call	800c138 <memcpy>
 800dea8:	8080030b 	ldhu	r2,12(r16)
 800deac:	00fedfc4 	movi	r3,-1153
 800deb0:	10c4703a 	and	r2,r2,r3
 800deb4:	10802014 	ori	r2,r2,128
 800deb8:	8080030d 	sth	r2,12(r16)
 800debc:	ad89883a 	add	r4,r21,r22
 800dec0:	95adc83a 	sub	r22,r18,r22
 800dec4:	84800515 	stw	r18,20(r16)
 800dec8:	85800215 	stw	r22,8(r16)
 800decc:	85400415 	stw	r21,16(r16)
 800ded0:	81000015 	stw	r4,0(r16)
 800ded4:	8825883a 	mov	r18,r17
 800ded8:	882d883a 	mov	r22,r17
 800dedc:	e00b883a 	mov	r5,fp
 800dee0:	b00d883a 	mov	r6,r22
 800dee4:	800c2700 	call	800c270 <memmove>
 800dee8:	80c00217 	ldw	r3,8(r16)
 800deec:	81000017 	ldw	r4,0(r16)
 800def0:	98800217 	ldw	r2,8(r19)
 800def4:	1ca5c83a 	sub	r18,r3,r18
 800def8:	2589883a 	add	r4,r4,r22
 800defc:	84800215 	stw	r18,8(r16)
 800df00:	81000015 	stw	r4,0(r16)
 800df04:	1463c83a 	sub	r17,r2,r17
 800df08:	9c400215 	stw	r17,8(r19)
 800df0c:	88001626 	beq	r17,zero,800df68 <__ssprint_r+0x190>
 800df10:	bf000017 	ldw	fp,0(r23)
 800df14:	bc400117 	ldw	r17,4(r23)
 800df18:	bdc00204 	addi	r23,r23,8
 800df1c:	003fc206 	br	800de28 <__alt_data_end+0xfc00de28>
 800df20:	8825883a 	mov	r18,r17
 800df24:	882d883a 	mov	r22,r17
 800df28:	003fec06 	br	800dedc <__alt_data_end+0xfc00dedc>
 800df2c:	800d5e40 	call	800d5e4 <_realloc_r>
 800df30:	102b883a 	mov	r21,r2
 800df34:	103fe11e 	bne	r2,zero,800debc <__alt_data_end+0xfc00debc>
 800df38:	81400417 	ldw	r5,16(r16)
 800df3c:	a009883a 	mov	r4,r20
 800df40:	800b4b40 	call	800b4b4 <_free_r>
 800df44:	80c0030b 	ldhu	r3,12(r16)
 800df48:	00800304 	movi	r2,12
 800df4c:	a0800015 	stw	r2,0(r20)
 800df50:	18c01014 	ori	r3,r3,64
 800df54:	80c0030d 	sth	r3,12(r16)
 800df58:	00bfffc4 	movi	r2,-1
 800df5c:	98000215 	stw	zero,8(r19)
 800df60:	98000115 	stw	zero,4(r19)
 800df64:	00000206 	br	800df70 <__ssprint_r+0x198>
 800df68:	98000115 	stw	zero,4(r19)
 800df6c:	0005883a 	mov	r2,zero
 800df70:	dfc00917 	ldw	ra,36(sp)
 800df74:	df000817 	ldw	fp,32(sp)
 800df78:	ddc00717 	ldw	r23,28(sp)
 800df7c:	dd800617 	ldw	r22,24(sp)
 800df80:	dd400517 	ldw	r21,20(sp)
 800df84:	dd000417 	ldw	r20,16(sp)
 800df88:	dcc00317 	ldw	r19,12(sp)
 800df8c:	dc800217 	ldw	r18,8(sp)
 800df90:	dc400117 	ldw	r17,4(sp)
 800df94:	dc000017 	ldw	r16,0(sp)
 800df98:	dec00a04 	addi	sp,sp,40
 800df9c:	f800283a 	ret

0800dfa0 <___svfiprintf_internal_r>:
 800dfa0:	2880030b 	ldhu	r2,12(r5)
 800dfa4:	deffc904 	addi	sp,sp,-220
 800dfa8:	dd403215 	stw	r21,200(sp)
 800dfac:	dfc03615 	stw	ra,216(sp)
 800dfb0:	df003515 	stw	fp,212(sp)
 800dfb4:	ddc03415 	stw	r23,208(sp)
 800dfb8:	dd803315 	stw	r22,204(sp)
 800dfbc:	dd003115 	stw	r20,196(sp)
 800dfc0:	dcc03015 	stw	r19,192(sp)
 800dfc4:	dc802f15 	stw	r18,188(sp)
 800dfc8:	dc402e15 	stw	r17,184(sp)
 800dfcc:	dc002d15 	stw	r16,180(sp)
 800dfd0:	d9402715 	stw	r5,156(sp)
 800dfd4:	d9002915 	stw	r4,164(sp)
 800dfd8:	1080200c 	andi	r2,r2,128
 800dfdc:	d9c02315 	stw	r7,140(sp)
 800dfe0:	302b883a 	mov	r21,r6
 800dfe4:	10000226 	beq	r2,zero,800dff0 <___svfiprintf_internal_r+0x50>
 800dfe8:	28800417 	ldw	r2,16(r5)
 800dfec:	1003ce26 	beq	r2,zero,800ef28 <___svfiprintf_internal_r+0xf88>
 800dff0:	dac01a04 	addi	r11,sp,104
 800dff4:	da8019c4 	addi	r10,sp,103
 800dff8:	dc802917 	ldw	r18,164(sp)
 800dffc:	dd002717 	ldw	r20,156(sp)
 800e000:	04c200b4 	movhi	r19,2050
 800e004:	dac01e15 	stw	r11,120(sp)
 800e008:	5a97c83a 	sub	r11,r11,r10
 800e00c:	9cc1a604 	addi	r19,r19,1688
 800e010:	da801f15 	stw	r10,124(sp)
 800e014:	dec01a15 	stw	sp,104(sp)
 800e018:	d8001c15 	stw	zero,112(sp)
 800e01c:	d8001b15 	stw	zero,108(sp)
 800e020:	d8002a15 	stw	zero,168(sp)
 800e024:	d8002415 	stw	zero,144(sp)
 800e028:	d811883a 	mov	r8,sp
 800e02c:	dac02b15 	stw	r11,172(sp)
 800e030:	a8800007 	ldb	r2,0(r21)
 800e034:	10026826 	beq	r2,zero,800e9d8 <___svfiprintf_internal_r+0xa38>
 800e038:	01000944 	movi	r4,37
 800e03c:	11026626 	beq	r2,r4,800e9d8 <___svfiprintf_internal_r+0xa38>
 800e040:	a805883a 	mov	r2,r21
 800e044:	00000106 	br	800e04c <___svfiprintf_internal_r+0xac>
 800e048:	19000326 	beq	r3,r4,800e058 <___svfiprintf_internal_r+0xb8>
 800e04c:	10800044 	addi	r2,r2,1
 800e050:	10c00007 	ldb	r3,0(r2)
 800e054:	183ffc1e 	bne	r3,zero,800e048 <__alt_data_end+0xfc00e048>
 800e058:	1561c83a 	sub	r16,r2,r21
 800e05c:	102d883a 	mov	r22,r2
 800e060:	80000e26 	beq	r16,zero,800e09c <___svfiprintf_internal_r+0xfc>
 800e064:	d8c01c17 	ldw	r3,112(sp)
 800e068:	d8801b17 	ldw	r2,108(sp)
 800e06c:	45400015 	stw	r21,0(r8)
 800e070:	1c07883a 	add	r3,r3,r16
 800e074:	10800044 	addi	r2,r2,1
 800e078:	d8c01c15 	stw	r3,112(sp)
 800e07c:	44000115 	stw	r16,4(r8)
 800e080:	d8801b15 	stw	r2,108(sp)
 800e084:	00c001c4 	movi	r3,7
 800e088:	1882d616 	blt	r3,r2,800ebe4 <___svfiprintf_internal_r+0xc44>
 800e08c:	42000204 	addi	r8,r8,8
 800e090:	da802417 	ldw	r10,144(sp)
 800e094:	5415883a 	add	r10,r10,r16
 800e098:	da802415 	stw	r10,144(sp)
 800e09c:	b0800007 	ldb	r2,0(r22)
 800e0a0:	10027326 	beq	r2,zero,800ea70 <___svfiprintf_internal_r+0xad0>
 800e0a4:	b1000047 	ldb	r4,1(r22)
 800e0a8:	b5400044 	addi	r21,r22,1
 800e0ac:	d8001d85 	stb	zero,118(sp)
 800e0b0:	000d883a 	mov	r6,zero
 800e0b4:	043fffc4 	movi	r16,-1
 800e0b8:	d8002115 	stw	zero,132(sp)
 800e0bc:	0023883a 	mov	r17,zero
 800e0c0:	00c01604 	movi	r3,88
 800e0c4:	01400244 	movi	r5,9
 800e0c8:	02400a84 	movi	r9,42
 800e0cc:	01c01b04 	movi	r7,108
 800e0d0:	ad400044 	addi	r21,r21,1
 800e0d4:	20bff804 	addi	r2,r4,-32
 800e0d8:	18819536 	bltu	r3,r2,800e730 <___svfiprintf_internal_r+0x790>
 800e0dc:	100490ba 	slli	r2,r2,2
 800e0e0:	02c20074 	movhi	r11,2049
 800e0e4:	5af83d04 	addi	r11,r11,-7948
 800e0e8:	12c5883a 	add	r2,r2,r11
 800e0ec:	10800017 	ldw	r2,0(r2)
 800e0f0:	1000683a 	jmp	r2
 800e0f4:	0800e630 	cmpltui	zero,at,920
 800e0f8:	0800e730 	cmpltui	zero,at,924
 800e0fc:	0800e730 	cmpltui	zero,at,924
 800e100:	0800e624 	muli	zero,at,920
 800e104:	0800e730 	cmpltui	zero,at,924
 800e108:	0800e730 	cmpltui	zero,at,924
 800e10c:	0800e730 	cmpltui	zero,at,924
 800e110:	0800e730 	cmpltui	zero,at,924
 800e114:	0800e730 	cmpltui	zero,at,924
 800e118:	0800e730 	cmpltui	zero,at,924
 800e11c:	0800e354 	ori	zero,at,909
 800e120:	0800e764 	muli	zero,at,925
 800e124:	0800e730 	cmpltui	zero,at,924
 800e128:	0800e37c 	xorhi	zero,at,909
 800e12c:	0800e770 	cmpltui	zero,at,925
 800e130:	0800e730 	cmpltui	zero,at,924
 800e134:	0800e758 	cmpnei	zero,at,925
 800e138:	0800e6f8 	rdprs	zero,at,923
 800e13c:	0800e6f8 	rdprs	zero,at,923
 800e140:	0800e6f8 	rdprs	zero,at,923
 800e144:	0800e6f8 	rdprs	zero,at,923
 800e148:	0800e6f8 	rdprs	zero,at,923
 800e14c:	0800e6f8 	rdprs	zero,at,923
 800e150:	0800e6f8 	rdprs	zero,at,923
 800e154:	0800e6f8 	rdprs	zero,at,923
 800e158:	0800e6f8 	rdprs	zero,at,923
 800e15c:	0800e730 	cmpltui	zero,at,924
 800e160:	0800e730 	cmpltui	zero,at,924
 800e164:	0800e730 	cmpltui	zero,at,924
 800e168:	0800e730 	cmpltui	zero,at,924
 800e16c:	0800e730 	cmpltui	zero,at,924
 800e170:	0800e730 	cmpltui	zero,at,924
 800e174:	0800e730 	cmpltui	zero,at,924
 800e178:	0800e730 	cmpltui	zero,at,924
 800e17c:	0800e730 	cmpltui	zero,at,924
 800e180:	0800e730 	cmpltui	zero,at,924
 800e184:	0800e690 	cmplti	zero,at,922
 800e188:	0800e730 	cmpltui	zero,at,924
 800e18c:	0800e730 	cmpltui	zero,at,924
 800e190:	0800e730 	cmpltui	zero,at,924
 800e194:	0800e730 	cmpltui	zero,at,924
 800e198:	0800e730 	cmpltui	zero,at,924
 800e19c:	0800e730 	cmpltui	zero,at,924
 800e1a0:	0800e730 	cmpltui	zero,at,924
 800e1a4:	0800e730 	cmpltui	zero,at,924
 800e1a8:	0800e730 	cmpltui	zero,at,924
 800e1ac:	0800e730 	cmpltui	zero,at,924
 800e1b0:	0800e324 	muli	zero,at,908
 800e1b4:	0800e730 	cmpltui	zero,at,924
 800e1b8:	0800e730 	cmpltui	zero,at,924
 800e1bc:	0800e730 	cmpltui	zero,at,924
 800e1c0:	0800e730 	cmpltui	zero,at,924
 800e1c4:	0800e730 	cmpltui	zero,at,924
 800e1c8:	0800e258 	cmpnei	zero,at,905
 800e1cc:	0800e730 	cmpltui	zero,at,924
 800e1d0:	0800e730 	cmpltui	zero,at,924
 800e1d4:	0800e584 	addi	zero,at,918
 800e1d8:	0800e730 	cmpltui	zero,at,924
 800e1dc:	0800e730 	cmpltui	zero,at,924
 800e1e0:	0800e730 	cmpltui	zero,at,924
 800e1e4:	0800e730 	cmpltui	zero,at,924
 800e1e8:	0800e730 	cmpltui	zero,at,924
 800e1ec:	0800e730 	cmpltui	zero,at,924
 800e1f0:	0800e730 	cmpltui	zero,at,924
 800e1f4:	0800e730 	cmpltui	zero,at,924
 800e1f8:	0800e730 	cmpltui	zero,at,924
 800e1fc:	0800e730 	cmpltui	zero,at,924
 800e200:	0800e470 	cmpltui	zero,at,913
 800e204:	0800e430 	cmpltui	zero,at,912
 800e208:	0800e730 	cmpltui	zero,at,924
 800e20c:	0800e730 	cmpltui	zero,at,924
 800e210:	0800e730 	cmpltui	zero,at,924
 800e214:	0800e5e0 	cmpeqi	zero,at,919
 800e218:	0800e430 	cmpltui	zero,at,912
 800e21c:	0800e730 	cmpltui	zero,at,924
 800e220:	0800e730 	cmpltui	zero,at,924
 800e224:	0800e5cc 	andi	zero,at,919
 800e228:	0800e730 	cmpltui	zero,at,924
 800e22c:	0800e5ec 	andhi	zero,at,919
 800e230:	0800e328 	cmpgeui	zero,at,908
 800e234:	0800e3f0 	cmpltui	zero,at,911
 800e238:	0800e3e4 	muli	zero,at,911
 800e23c:	0800e730 	cmpltui	zero,at,924
 800e240:	0800e388 	cmpgei	zero,at,910
 800e244:	0800e730 	cmpltui	zero,at,924
 800e248:	0800e25c 	xori	zero,at,905
 800e24c:	0800e730 	cmpltui	zero,at,924
 800e250:	0800e730 	cmpltui	zero,at,924
 800e254:	0800e64c 	andi	zero,at,921
 800e258:	8c400414 	ori	r17,r17,16
 800e25c:	88c0080c 	andi	r3,r17,32
 800e260:	d8802317 	ldw	r2,140(sp)
 800e264:	18029626 	beq	r3,zero,800ecc0 <___svfiprintf_internal_r+0xd20>
 800e268:	dac02317 	ldw	r11,140(sp)
 800e26c:	12400017 	ldw	r9,0(r2)
 800e270:	12800117 	ldw	r10,4(r2)
 800e274:	5ac00204 	addi	r11,r11,8
 800e278:	dac02315 	stw	r11,140(sp)
 800e27c:	00800044 	movi	r2,1
 800e280:	4a86b03a 	or	r3,r9,r10
 800e284:	d8001d85 	stb	zero,118(sp)
 800e288:	8039883a 	mov	fp,r16
 800e28c:	0017883a 	mov	r11,zero
 800e290:	80000216 	blt	r16,zero,800e29c <___svfiprintf_internal_r+0x2fc>
 800e294:	013fdfc4 	movi	r4,-129
 800e298:	8922703a 	and	r17,r17,r4
 800e29c:	1801d01e 	bne	r3,zero,800e9e0 <___svfiprintf_internal_r+0xa40>
 800e2a0:	80024426 	beq	r16,zero,800ebb4 <___svfiprintf_internal_r+0xc14>
 800e2a4:	10803fcc 	andi	r2,r2,255
 800e2a8:	00c00044 	movi	r3,1
 800e2ac:	10c2b326 	beq	r2,r3,800ed7c <___svfiprintf_internal_r+0xddc>
 800e2b0:	00c00084 	movi	r3,2
 800e2b4:	10c25b26 	beq	r2,r3,800ec24 <___svfiprintf_internal_r+0xc84>
 800e2b8:	d8c01a04 	addi	r3,sp,104
 800e2bc:	4808d0fa 	srli	r4,r9,3
 800e2c0:	500a977a 	slli	r5,r10,29
 800e2c4:	5014d0fa 	srli	r10,r10,3
 800e2c8:	4a4001cc 	andi	r9,r9,7
 800e2cc:	48800c04 	addi	r2,r9,48
 800e2d0:	18ffffc4 	addi	r3,r3,-1
 800e2d4:	2912b03a 	or	r9,r5,r4
 800e2d8:	18800005 	stb	r2,0(r3)
 800e2dc:	4a88b03a 	or	r4,r9,r10
 800e2e0:	203ff61e 	bne	r4,zero,800e2bc <__alt_data_end+0xfc00e2bc>
 800e2e4:	8900004c 	andi	r4,r17,1
 800e2e8:	d8c02615 	stw	r3,152(sp)
 800e2ec:	2002951e 	bne	r4,zero,800ed44 <___svfiprintf_internal_r+0xda4>
 800e2f0:	da801e17 	ldw	r10,120(sp)
 800e2f4:	50f9c83a 	sub	fp,r10,r3
 800e2f8:	df002015 	stw	fp,128(sp)
 800e2fc:	e400010e 	bge	fp,r16,800e304 <___svfiprintf_internal_r+0x364>
 800e300:	dc002015 	stw	r16,128(sp)
 800e304:	5ac03fcc 	andi	r11,r11,255
 800e308:	5ac0201c 	xori	r11,r11,128
 800e30c:	5affe004 	addi	r11,r11,-128
 800e310:	58006326 	beq	r11,zero,800e4a0 <___svfiprintf_internal_r+0x500>
 800e314:	d8c02017 	ldw	r3,128(sp)
 800e318:	18c00044 	addi	r3,r3,1
 800e31c:	d8c02015 	stw	r3,128(sp)
 800e320:	00005f06 	br	800e4a0 <___svfiprintf_internal_r+0x500>
 800e324:	8c400414 	ori	r17,r17,16
 800e328:	88c0080c 	andi	r3,r17,32
 800e32c:	d8802317 	ldw	r2,140(sp)
 800e330:	18027826 	beq	r3,zero,800ed14 <___svfiprintf_internal_r+0xd74>
 800e334:	dac02317 	ldw	r11,140(sp)
 800e338:	12400017 	ldw	r9,0(r2)
 800e33c:	12800117 	ldw	r10,4(r2)
 800e340:	5ac00204 	addi	r11,r11,8
 800e344:	dac02315 	stw	r11,140(sp)
 800e348:	0005883a 	mov	r2,zero
 800e34c:	4a86b03a 	or	r3,r9,r10
 800e350:	003fcc06 	br	800e284 <__alt_data_end+0xfc00e284>
 800e354:	da802317 	ldw	r10,140(sp)
 800e358:	dac02317 	ldw	r11,140(sp)
 800e35c:	52800017 	ldw	r10,0(r10)
 800e360:	58800104 	addi	r2,r11,4
 800e364:	da802115 	stw	r10,132(sp)
 800e368:	50028a0e 	bge	r10,zero,800ed94 <___svfiprintf_internal_r+0xdf4>
 800e36c:	da802117 	ldw	r10,132(sp)
 800e370:	d8802315 	stw	r2,140(sp)
 800e374:	0295c83a 	sub	r10,zero,r10
 800e378:	da802115 	stw	r10,132(sp)
 800e37c:	8c400114 	ori	r17,r17,4
 800e380:	a9000007 	ldb	r4,0(r21)
 800e384:	003f5206 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e388:	da802317 	ldw	r10,140(sp)
 800e38c:	dac02317 	ldw	r11,140(sp)
 800e390:	d8001d85 	stb	zero,118(sp)
 800e394:	52800017 	ldw	r10,0(r10)
 800e398:	5dc00104 	addi	r23,r11,4
 800e39c:	da802615 	stw	r10,152(sp)
 800e3a0:	5002eb26 	beq	r10,zero,800ef50 <___svfiprintf_internal_r+0xfb0>
 800e3a4:	d9002617 	ldw	r4,152(sp)
 800e3a8:	8002d716 	blt	r16,zero,800ef08 <___svfiprintf_internal_r+0xf68>
 800e3ac:	000b883a 	mov	r5,zero
 800e3b0:	800d883a 	mov	r6,r16
 800e3b4:	da002c15 	stw	r8,176(sp)
 800e3b8:	800c0500 	call	800c050 <memchr>
 800e3bc:	da002c17 	ldw	r8,176(sp)
 800e3c0:	1002fb26 	beq	r2,zero,800efb0 <___svfiprintf_internal_r+0x1010>
 800e3c4:	d8c02617 	ldw	r3,152(sp)
 800e3c8:	10f9c83a 	sub	fp,r2,r3
 800e3cc:	8700010e 	bge	r16,fp,800e3d4 <___svfiprintf_internal_r+0x434>
 800e3d0:	8039883a 	mov	fp,r16
 800e3d4:	dac01d83 	ldbu	r11,118(sp)
 800e3d8:	ddc02315 	stw	r23,140(sp)
 800e3dc:	0021883a 	mov	r16,zero
 800e3e0:	003fc506 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800e3e4:	8c400814 	ori	r17,r17,32
 800e3e8:	a9000007 	ldb	r4,0(r21)
 800e3ec:	003f3806 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e3f0:	dac02317 	ldw	r11,140(sp)
 800e3f4:	00800c04 	movi	r2,48
 800e3f8:	d8801d05 	stb	r2,116(sp)
 800e3fc:	5a400017 	ldw	r9,0(r11)
 800e400:	00801e04 	movi	r2,120
 800e404:	d8801d45 	stb	r2,117(sp)
 800e408:	008200b4 	movhi	r2,2050
 800e40c:	10813e04 	addi	r2,r2,1272
 800e410:	5ac00104 	addi	r11,r11,4
 800e414:	d8802a15 	stw	r2,168(sp)
 800e418:	0015883a 	mov	r10,zero
 800e41c:	8c400094 	ori	r17,r17,2
 800e420:	dac02315 	stw	r11,140(sp)
 800e424:	00800084 	movi	r2,2
 800e428:	4807883a 	mov	r3,r9
 800e42c:	003f9506 	br	800e284 <__alt_data_end+0xfc00e284>
 800e430:	d9801d85 	stb	r6,118(sp)
 800e434:	8880080c 	andi	r2,r17,32
 800e438:	d8c02317 	ldw	r3,140(sp)
 800e43c:	10009926 	beq	r2,zero,800e6a4 <___svfiprintf_internal_r+0x704>
 800e440:	dac02317 	ldw	r11,140(sp)
 800e444:	18800117 	ldw	r2,4(r3)
 800e448:	1a400017 	ldw	r9,0(r3)
 800e44c:	5ac00204 	addi	r11,r11,8
 800e450:	dac02315 	stw	r11,140(sp)
 800e454:	1015883a 	mov	r10,r2
 800e458:	10009d16 	blt	r2,zero,800e6d0 <___svfiprintf_internal_r+0x730>
 800e45c:	dac01d83 	ldbu	r11,118(sp)
 800e460:	8039883a 	mov	fp,r16
 800e464:	00800044 	movi	r2,1
 800e468:	4a86b03a 	or	r3,r9,r10
 800e46c:	003f8806 	br	800e290 <__alt_data_end+0xfc00e290>
 800e470:	dac02317 	ldw	r11,140(sp)
 800e474:	00c00044 	movi	r3,1
 800e478:	da801004 	addi	r10,sp,64
 800e47c:	58800017 	ldw	r2,0(r11)
 800e480:	5ac00104 	addi	r11,r11,4
 800e484:	d8c02015 	stw	r3,128(sp)
 800e488:	d8001d85 	stb	zero,118(sp)
 800e48c:	d8801005 	stb	r2,64(sp)
 800e490:	dac02315 	stw	r11,140(sp)
 800e494:	1839883a 	mov	fp,r3
 800e498:	da802615 	stw	r10,152(sp)
 800e49c:	0021883a 	mov	r16,zero
 800e4a0:	8a80008c 	andi	r10,r17,2
 800e4a4:	da802215 	stw	r10,136(sp)
 800e4a8:	50000326 	beq	r10,zero,800e4b8 <___svfiprintf_internal_r+0x518>
 800e4ac:	dac02017 	ldw	r11,128(sp)
 800e4b0:	5ac00084 	addi	r11,r11,2
 800e4b4:	dac02015 	stw	r11,128(sp)
 800e4b8:	88c0210c 	andi	r3,r17,132
 800e4bc:	d8c02515 	stw	r3,148(sp)
 800e4c0:	1800bb1e 	bne	r3,zero,800e7b0 <___svfiprintf_internal_r+0x810>
 800e4c4:	da802117 	ldw	r10,132(sp)
 800e4c8:	dac02017 	ldw	r11,128(sp)
 800e4cc:	52edc83a 	sub	r22,r10,r11
 800e4d0:	0580b70e 	bge	zero,r22,800e7b0 <___svfiprintf_internal_r+0x810>
 800e4d4:	02400404 	movi	r9,16
 800e4d8:	d8c01c17 	ldw	r3,112(sp)
 800e4dc:	d8801b17 	ldw	r2,108(sp)
 800e4e0:	4d82a70e 	bge	r9,r22,800ef80 <___svfiprintf_internal_r+0xfe0>
 800e4e4:	014200b4 	movhi	r5,2050
 800e4e8:	2941aa04 	addi	r5,r5,1704
 800e4ec:	d9402815 	stw	r5,160(sp)
 800e4f0:	05c001c4 	movi	r23,7
 800e4f4:	00000306 	br	800e504 <___svfiprintf_internal_r+0x564>
 800e4f8:	b5bffc04 	addi	r22,r22,-16
 800e4fc:	42000204 	addi	r8,r8,8
 800e500:	4d80150e 	bge	r9,r22,800e558 <___svfiprintf_internal_r+0x5b8>
 800e504:	028200b4 	movhi	r10,2050
 800e508:	18c00404 	addi	r3,r3,16
 800e50c:	10800044 	addi	r2,r2,1
 800e510:	5281aa04 	addi	r10,r10,1704
 800e514:	42800015 	stw	r10,0(r8)
 800e518:	42400115 	stw	r9,4(r8)
 800e51c:	d8c01c15 	stw	r3,112(sp)
 800e520:	d8801b15 	stw	r2,108(sp)
 800e524:	b8bff40e 	bge	r23,r2,800e4f8 <__alt_data_end+0xfc00e4f8>
 800e528:	9009883a 	mov	r4,r18
 800e52c:	a00b883a 	mov	r5,r20
 800e530:	d9801a04 	addi	r6,sp,104
 800e534:	da402c15 	stw	r9,176(sp)
 800e538:	800ddd80 	call	800ddd8 <__ssprint_r>
 800e53c:	da402c17 	ldw	r9,176(sp)
 800e540:	1001511e 	bne	r2,zero,800ea88 <___svfiprintf_internal_r+0xae8>
 800e544:	b5bffc04 	addi	r22,r22,-16
 800e548:	d8c01c17 	ldw	r3,112(sp)
 800e54c:	d8801b17 	ldw	r2,108(sp)
 800e550:	d811883a 	mov	r8,sp
 800e554:	4dbfeb16 	blt	r9,r22,800e504 <__alt_data_end+0xfc00e504>
 800e558:	dac02817 	ldw	r11,160(sp)
 800e55c:	b0c7883a 	add	r3,r22,r3
 800e560:	10800044 	addi	r2,r2,1
 800e564:	42c00015 	stw	r11,0(r8)
 800e568:	45800115 	stw	r22,4(r8)
 800e56c:	d8c01c15 	stw	r3,112(sp)
 800e570:	d8801b15 	stw	r2,108(sp)
 800e574:	010001c4 	movi	r4,7
 800e578:	2081dd16 	blt	r4,r2,800ecf0 <___svfiprintf_internal_r+0xd50>
 800e57c:	42000204 	addi	r8,r8,8
 800e580:	00008d06 	br	800e7b8 <___svfiprintf_internal_r+0x818>
 800e584:	00c200b4 	movhi	r3,2050
 800e588:	18c13904 	addi	r3,r3,1252
 800e58c:	d8c02a15 	stw	r3,168(sp)
 800e590:	d9801d85 	stb	r6,118(sp)
 800e594:	88c0080c 	andi	r3,r17,32
 800e598:	d8802317 	ldw	r2,140(sp)
 800e59c:	18003226 	beq	r3,zero,800e668 <___svfiprintf_internal_r+0x6c8>
 800e5a0:	da802317 	ldw	r10,140(sp)
 800e5a4:	12400017 	ldw	r9,0(r2)
 800e5a8:	52800204 	addi	r10,r10,8
 800e5ac:	da802315 	stw	r10,140(sp)
 800e5b0:	12800117 	ldw	r10,4(r2)
 800e5b4:	8880004c 	andi	r2,r17,1
 800e5b8:	1001be26 	beq	r2,zero,800ecb4 <___svfiprintf_internal_r+0xd14>
 800e5bc:	4a86b03a 	or	r3,r9,r10
 800e5c0:	1802291e 	bne	r3,zero,800ee68 <___svfiprintf_internal_r+0xec8>
 800e5c4:	00800084 	movi	r2,2
 800e5c8:	003f2e06 	br	800e284 <__alt_data_end+0xfc00e284>
 800e5cc:	a9000007 	ldb	r4,0(r21)
 800e5d0:	a805883a 	mov	r2,r21
 800e5d4:	21c22a26 	beq	r4,r7,800ee80 <___svfiprintf_internal_r+0xee0>
 800e5d8:	8c400414 	ori	r17,r17,16
 800e5dc:	003ebc06 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e5e0:	8c401014 	ori	r17,r17,64
 800e5e4:	a9000007 	ldb	r4,0(r21)
 800e5e8:	003eb906 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e5ec:	d9801d85 	stb	r6,118(sp)
 800e5f0:	8880080c 	andi	r2,r17,32
 800e5f4:	1002131e 	bne	r2,zero,800ee44 <___svfiprintf_internal_r+0xea4>
 800e5f8:	8880040c 	andi	r2,r17,16
 800e5fc:	1002241e 	bne	r2,zero,800ee90 <___svfiprintf_internal_r+0xef0>
 800e600:	8c40100c 	andi	r17,r17,64
 800e604:	88022226 	beq	r17,zero,800ee90 <___svfiprintf_internal_r+0xef0>
 800e608:	dac02317 	ldw	r11,140(sp)
 800e60c:	da802417 	ldw	r10,144(sp)
 800e610:	58800017 	ldw	r2,0(r11)
 800e614:	5ac00104 	addi	r11,r11,4
 800e618:	dac02315 	stw	r11,140(sp)
 800e61c:	1280000d 	sth	r10,0(r2)
 800e620:	003e8306 	br	800e030 <__alt_data_end+0xfc00e030>
 800e624:	8c400054 	ori	r17,r17,1
 800e628:	a9000007 	ldb	r4,0(r21)
 800e62c:	003ea806 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e630:	30803fcc 	andi	r2,r6,255
 800e634:	1080201c 	xori	r2,r2,128
 800e638:	10bfe004 	addi	r2,r2,-128
 800e63c:	1001ff1e 	bne	r2,zero,800ee3c <___svfiprintf_internal_r+0xe9c>
 800e640:	01800804 	movi	r6,32
 800e644:	a9000007 	ldb	r4,0(r21)
 800e648:	003ea106 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e64c:	02c200b4 	movhi	r11,2050
 800e650:	5ac13e04 	addi	r11,r11,1272
 800e654:	dac02a15 	stw	r11,168(sp)
 800e658:	d9801d85 	stb	r6,118(sp)
 800e65c:	88c0080c 	andi	r3,r17,32
 800e660:	d8802317 	ldw	r2,140(sp)
 800e664:	183fce1e 	bne	r3,zero,800e5a0 <__alt_data_end+0xfc00e5a0>
 800e668:	88c0040c 	andi	r3,r17,16
 800e66c:	1801ed1e 	bne	r3,zero,800ee24 <___svfiprintf_internal_r+0xe84>
 800e670:	88c0100c 	andi	r3,r17,64
 800e674:	18021a26 	beq	r3,zero,800eee0 <___svfiprintf_internal_r+0xf40>
 800e678:	da802317 	ldw	r10,140(sp)
 800e67c:	1240000b 	ldhu	r9,0(r2)
 800e680:	52800104 	addi	r10,r10,4
 800e684:	da802315 	stw	r10,140(sp)
 800e688:	0015883a 	mov	r10,zero
 800e68c:	003fc906 	br	800e5b4 <__alt_data_end+0xfc00e5b4>
 800e690:	8c400414 	ori	r17,r17,16
 800e694:	d9801d85 	stb	r6,118(sp)
 800e698:	8880080c 	andi	r2,r17,32
 800e69c:	d8c02317 	ldw	r3,140(sp)
 800e6a0:	103f671e 	bne	r2,zero,800e440 <__alt_data_end+0xfc00e440>
 800e6a4:	8880040c 	andi	r2,r17,16
 800e6a8:	1001c71e 	bne	r2,zero,800edc8 <___svfiprintf_internal_r+0xe28>
 800e6ac:	8880100c 	andi	r2,r17,64
 800e6b0:	1001c526 	beq	r2,zero,800edc8 <___svfiprintf_internal_r+0xe28>
 800e6b4:	1a40000f 	ldh	r9,0(r3)
 800e6b8:	dac02317 	ldw	r11,140(sp)
 800e6bc:	4815d7fa 	srai	r10,r9,31
 800e6c0:	5ac00104 	addi	r11,r11,4
 800e6c4:	dac02315 	stw	r11,140(sp)
 800e6c8:	5005883a 	mov	r2,r10
 800e6cc:	103f630e 	bge	r2,zero,800e45c <__alt_data_end+0xfc00e45c>
 800e6d0:	0253c83a 	sub	r9,zero,r9
 800e6d4:	4804c03a 	cmpne	r2,r9,zero
 800e6d8:	0295c83a 	sub	r10,zero,r10
 800e6dc:	5095c83a 	sub	r10,r10,r2
 800e6e0:	02c00b44 	movi	r11,45
 800e6e4:	dac01d85 	stb	r11,118(sp)
 800e6e8:	8039883a 	mov	fp,r16
 800e6ec:	00800044 	movi	r2,1
 800e6f0:	4a86b03a 	or	r3,r9,r10
 800e6f4:	003ee606 	br	800e290 <__alt_data_end+0xfc00e290>
 800e6f8:	a815883a 	mov	r10,r21
 800e6fc:	d8002115 	stw	zero,132(sp)
 800e700:	20bff404 	addi	r2,r4,-48
 800e704:	51000007 	ldb	r4,0(r10)
 800e708:	da802117 	ldw	r10,132(sp)
 800e70c:	ad400044 	addi	r21,r21,1
 800e710:	52c002a4 	muli	r11,r10,10
 800e714:	a815883a 	mov	r10,r21
 800e718:	5885883a 	add	r2,r11,r2
 800e71c:	d8802115 	stw	r2,132(sp)
 800e720:	20bff404 	addi	r2,r4,-48
 800e724:	28bff72e 	bgeu	r5,r2,800e704 <__alt_data_end+0xfc00e704>
 800e728:	20bff804 	addi	r2,r4,-32
 800e72c:	18be6b2e 	bgeu	r3,r2,800e0dc <__alt_data_end+0xfc00e0dc>
 800e730:	d9801d85 	stb	r6,118(sp)
 800e734:	2000ce26 	beq	r4,zero,800ea70 <___svfiprintf_internal_r+0xad0>
 800e738:	02800044 	movi	r10,1
 800e73c:	dac01004 	addi	r11,sp,64
 800e740:	da802015 	stw	r10,128(sp)
 800e744:	d9001005 	stb	r4,64(sp)
 800e748:	d8001d85 	stb	zero,118(sp)
 800e74c:	5039883a 	mov	fp,r10
 800e750:	dac02615 	stw	r11,152(sp)
 800e754:	003f5106 	br	800e49c <__alt_data_end+0xfc00e49c>
 800e758:	8c402014 	ori	r17,r17,128
 800e75c:	a9000007 	ldb	r4,0(r21)
 800e760:	003e5b06 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e764:	01800ac4 	movi	r6,43
 800e768:	a9000007 	ldb	r4,0(r21)
 800e76c:	003e5806 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800e770:	a9000007 	ldb	r4,0(r21)
 800e774:	aa800044 	addi	r10,r21,1
 800e778:	22421426 	beq	r4,r9,800efcc <___svfiprintf_internal_r+0x102c>
 800e77c:	20bff404 	addi	r2,r4,-48
 800e780:	502b883a 	mov	r21,r10
 800e784:	0021883a 	mov	r16,zero
 800e788:	28be5236 	bltu	r5,r2,800e0d4 <__alt_data_end+0xfc00e0d4>
 800e78c:	a9000007 	ldb	r4,0(r21)
 800e790:	840002a4 	muli	r16,r16,10
 800e794:	ad400044 	addi	r21,r21,1
 800e798:	1421883a 	add	r16,r2,r16
 800e79c:	20bff404 	addi	r2,r4,-48
 800e7a0:	28bffa2e 	bgeu	r5,r2,800e78c <__alt_data_end+0xfc00e78c>
 800e7a4:	803e4b0e 	bge	r16,zero,800e0d4 <__alt_data_end+0xfc00e0d4>
 800e7a8:	043fffc4 	movi	r16,-1
 800e7ac:	003e4906 	br	800e0d4 <__alt_data_end+0xfc00e0d4>
 800e7b0:	d8c01c17 	ldw	r3,112(sp)
 800e7b4:	d8801b17 	ldw	r2,108(sp)
 800e7b8:	d9001d87 	ldb	r4,118(sp)
 800e7bc:	20000b26 	beq	r4,zero,800e7ec <___svfiprintf_internal_r+0x84c>
 800e7c0:	d9001d84 	addi	r4,sp,118
 800e7c4:	18c00044 	addi	r3,r3,1
 800e7c8:	10800044 	addi	r2,r2,1
 800e7cc:	41000015 	stw	r4,0(r8)
 800e7d0:	01000044 	movi	r4,1
 800e7d4:	41000115 	stw	r4,4(r8)
 800e7d8:	d8c01c15 	stw	r3,112(sp)
 800e7dc:	d8801b15 	stw	r2,108(sp)
 800e7e0:	010001c4 	movi	r4,7
 800e7e4:	20811e16 	blt	r4,r2,800ec60 <___svfiprintf_internal_r+0xcc0>
 800e7e8:	42000204 	addi	r8,r8,8
 800e7ec:	da802217 	ldw	r10,136(sp)
 800e7f0:	50000b26 	beq	r10,zero,800e820 <___svfiprintf_internal_r+0x880>
 800e7f4:	d9001d04 	addi	r4,sp,116
 800e7f8:	18c00084 	addi	r3,r3,2
 800e7fc:	10800044 	addi	r2,r2,1
 800e800:	41000015 	stw	r4,0(r8)
 800e804:	01000084 	movi	r4,2
 800e808:	41000115 	stw	r4,4(r8)
 800e80c:	d8c01c15 	stw	r3,112(sp)
 800e810:	d8801b15 	stw	r2,108(sp)
 800e814:	010001c4 	movi	r4,7
 800e818:	20811a16 	blt	r4,r2,800ec84 <___svfiprintf_internal_r+0xce4>
 800e81c:	42000204 	addi	r8,r8,8
 800e820:	dac02517 	ldw	r11,148(sp)
 800e824:	01002004 	movi	r4,128
 800e828:	5900a826 	beq	r11,r4,800eacc <___svfiprintf_internal_r+0xb2c>
 800e82c:	8721c83a 	sub	r16,r16,fp
 800e830:	0400260e 	bge	zero,r16,800e8cc <___svfiprintf_internal_r+0x92c>
 800e834:	01c00404 	movi	r7,16
 800e838:	3c01a50e 	bge	r7,r16,800eed0 <___svfiprintf_internal_r+0xf30>
 800e83c:	010200b4 	movhi	r4,2050
 800e840:	2101a604 	addi	r4,r4,1688
 800e844:	d9002215 	stw	r4,136(sp)
 800e848:	382f883a 	mov	r23,r7
 800e84c:	058001c4 	movi	r22,7
 800e850:	00000306 	br	800e860 <___svfiprintf_internal_r+0x8c0>
 800e854:	843ffc04 	addi	r16,r16,-16
 800e858:	42000204 	addi	r8,r8,8
 800e85c:	bc00110e 	bge	r23,r16,800e8a4 <___svfiprintf_internal_r+0x904>
 800e860:	18c00404 	addi	r3,r3,16
 800e864:	10800044 	addi	r2,r2,1
 800e868:	44c00015 	stw	r19,0(r8)
 800e86c:	45c00115 	stw	r23,4(r8)
 800e870:	d8c01c15 	stw	r3,112(sp)
 800e874:	d8801b15 	stw	r2,108(sp)
 800e878:	b0bff60e 	bge	r22,r2,800e854 <__alt_data_end+0xfc00e854>
 800e87c:	9009883a 	mov	r4,r18
 800e880:	a00b883a 	mov	r5,r20
 800e884:	d9801a04 	addi	r6,sp,104
 800e888:	800ddd80 	call	800ddd8 <__ssprint_r>
 800e88c:	10007e1e 	bne	r2,zero,800ea88 <___svfiprintf_internal_r+0xae8>
 800e890:	843ffc04 	addi	r16,r16,-16
 800e894:	d8c01c17 	ldw	r3,112(sp)
 800e898:	d8801b17 	ldw	r2,108(sp)
 800e89c:	d811883a 	mov	r8,sp
 800e8a0:	bc3fef16 	blt	r23,r16,800e860 <__alt_data_end+0xfc00e860>
 800e8a4:	da802217 	ldw	r10,136(sp)
 800e8a8:	1c07883a 	add	r3,r3,r16
 800e8ac:	10800044 	addi	r2,r2,1
 800e8b0:	42800015 	stw	r10,0(r8)
 800e8b4:	44000115 	stw	r16,4(r8)
 800e8b8:	d8c01c15 	stw	r3,112(sp)
 800e8bc:	d8801b15 	stw	r2,108(sp)
 800e8c0:	010001c4 	movi	r4,7
 800e8c4:	2080ce16 	blt	r4,r2,800ec00 <___svfiprintf_internal_r+0xc60>
 800e8c8:	42000204 	addi	r8,r8,8
 800e8cc:	dac02617 	ldw	r11,152(sp)
 800e8d0:	e0c7883a 	add	r3,fp,r3
 800e8d4:	10800044 	addi	r2,r2,1
 800e8d8:	42c00015 	stw	r11,0(r8)
 800e8dc:	47000115 	stw	fp,4(r8)
 800e8e0:	d8c01c15 	stw	r3,112(sp)
 800e8e4:	d8801b15 	stw	r2,108(sp)
 800e8e8:	010001c4 	movi	r4,7
 800e8ec:	2080a316 	blt	r4,r2,800eb7c <___svfiprintf_internal_r+0xbdc>
 800e8f0:	42000204 	addi	r8,r8,8
 800e8f4:	8c40010c 	andi	r17,r17,4
 800e8f8:	88002b26 	beq	r17,zero,800e9a8 <___svfiprintf_internal_r+0xa08>
 800e8fc:	da802117 	ldw	r10,132(sp)
 800e900:	dac02017 	ldw	r11,128(sp)
 800e904:	52e1c83a 	sub	r16,r10,r11
 800e908:	0400270e 	bge	zero,r16,800e9a8 <___svfiprintf_internal_r+0xa08>
 800e90c:	04400404 	movi	r17,16
 800e910:	d8801b17 	ldw	r2,108(sp)
 800e914:	8c019e0e 	bge	r17,r16,800ef90 <___svfiprintf_internal_r+0xff0>
 800e918:	014200b4 	movhi	r5,2050
 800e91c:	2941aa04 	addi	r5,r5,1704
 800e920:	d9402815 	stw	r5,160(sp)
 800e924:	070001c4 	movi	fp,7
 800e928:	00000306 	br	800e938 <___svfiprintf_internal_r+0x998>
 800e92c:	843ffc04 	addi	r16,r16,-16
 800e930:	42000204 	addi	r8,r8,8
 800e934:	8c00130e 	bge	r17,r16,800e984 <___svfiprintf_internal_r+0x9e4>
 800e938:	028200b4 	movhi	r10,2050
 800e93c:	18c00404 	addi	r3,r3,16
 800e940:	10800044 	addi	r2,r2,1
 800e944:	5281aa04 	addi	r10,r10,1704
 800e948:	42800015 	stw	r10,0(r8)
 800e94c:	44400115 	stw	r17,4(r8)
 800e950:	d8c01c15 	stw	r3,112(sp)
 800e954:	d8801b15 	stw	r2,108(sp)
 800e958:	e0bff40e 	bge	fp,r2,800e92c <__alt_data_end+0xfc00e92c>
 800e95c:	9009883a 	mov	r4,r18
 800e960:	a00b883a 	mov	r5,r20
 800e964:	d9801a04 	addi	r6,sp,104
 800e968:	800ddd80 	call	800ddd8 <__ssprint_r>
 800e96c:	1000461e 	bne	r2,zero,800ea88 <___svfiprintf_internal_r+0xae8>
 800e970:	843ffc04 	addi	r16,r16,-16
 800e974:	d8c01c17 	ldw	r3,112(sp)
 800e978:	d8801b17 	ldw	r2,108(sp)
 800e97c:	d811883a 	mov	r8,sp
 800e980:	8c3fed16 	blt	r17,r16,800e938 <__alt_data_end+0xfc00e938>
 800e984:	dac02817 	ldw	r11,160(sp)
 800e988:	1c07883a 	add	r3,r3,r16
 800e98c:	10800044 	addi	r2,r2,1
 800e990:	42c00015 	stw	r11,0(r8)
 800e994:	44000115 	stw	r16,4(r8)
 800e998:	d8c01c15 	stw	r3,112(sp)
 800e99c:	d8801b15 	stw	r2,108(sp)
 800e9a0:	010001c4 	movi	r4,7
 800e9a4:	2080fe16 	blt	r4,r2,800eda0 <___svfiprintf_internal_r+0xe00>
 800e9a8:	dd802017 	ldw	r22,128(sp)
 800e9ac:	da802117 	ldw	r10,132(sp)
 800e9b0:	b280010e 	bge	r22,r10,800e9b8 <___svfiprintf_internal_r+0xa18>
 800e9b4:	502d883a 	mov	r22,r10
 800e9b8:	dac02417 	ldw	r11,144(sp)
 800e9bc:	5d97883a 	add	r11,r11,r22
 800e9c0:	dac02415 	stw	r11,144(sp)
 800e9c4:	1800751e 	bne	r3,zero,800eb9c <___svfiprintf_internal_r+0xbfc>
 800e9c8:	a8800007 	ldb	r2,0(r21)
 800e9cc:	d8001b15 	stw	zero,108(sp)
 800e9d0:	d811883a 	mov	r8,sp
 800e9d4:	103d981e 	bne	r2,zero,800e038 <__alt_data_end+0xfc00e038>
 800e9d8:	a82d883a 	mov	r22,r21
 800e9dc:	003daf06 	br	800e09c <__alt_data_end+0xfc00e09c>
 800e9e0:	10803fcc 	andi	r2,r2,255
 800e9e4:	00c00044 	movi	r3,1
 800e9e8:	10fe311e 	bne	r2,r3,800e2b0 <__alt_data_end+0xfc00e2b0>
 800e9ec:	5000e126 	beq	r10,zero,800ed74 <___svfiprintf_internal_r+0xdd4>
 800e9f0:	dc402015 	stw	r17,128(sp)
 800e9f4:	dc002215 	stw	r16,136(sp)
 800e9f8:	dd801a04 	addi	r22,sp,104
 800e9fc:	402f883a 	mov	r23,r8
 800ea00:	5839883a 	mov	fp,r11
 800ea04:	4821883a 	mov	r16,r9
 800ea08:	5023883a 	mov	r17,r10
 800ea0c:	8009883a 	mov	r4,r16
 800ea10:	880b883a 	mov	r5,r17
 800ea14:	01800284 	movi	r6,10
 800ea18:	000f883a 	mov	r7,zero
 800ea1c:	80113940 	call	8011394 <__umoddi3>
 800ea20:	10800c04 	addi	r2,r2,48
 800ea24:	b5bfffc4 	addi	r22,r22,-1
 800ea28:	8009883a 	mov	r4,r16
 800ea2c:	880b883a 	mov	r5,r17
 800ea30:	01800284 	movi	r6,10
 800ea34:	000f883a 	mov	r7,zero
 800ea38:	b0800005 	stb	r2,0(r22)
 800ea3c:	8010dd40 	call	8010dd4 <__udivdi3>
 800ea40:	1021883a 	mov	r16,r2
 800ea44:	10c4b03a 	or	r2,r2,r3
 800ea48:	1823883a 	mov	r17,r3
 800ea4c:	103fef1e 	bne	r2,zero,800ea0c <__alt_data_end+0xfc00ea0c>
 800ea50:	da801e17 	ldw	r10,120(sp)
 800ea54:	e017883a 	mov	r11,fp
 800ea58:	b811883a 	mov	r8,r23
 800ea5c:	dc402017 	ldw	r17,128(sp)
 800ea60:	dc002217 	ldw	r16,136(sp)
 800ea64:	dd802615 	stw	r22,152(sp)
 800ea68:	55b9c83a 	sub	fp,r10,r22
 800ea6c:	003e2206 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ea70:	d8801c17 	ldw	r2,112(sp)
 800ea74:	10000426 	beq	r2,zero,800ea88 <___svfiprintf_internal_r+0xae8>
 800ea78:	d9002917 	ldw	r4,164(sp)
 800ea7c:	d9402717 	ldw	r5,156(sp)
 800ea80:	d9801a04 	addi	r6,sp,104
 800ea84:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ea88:	da802717 	ldw	r10,156(sp)
 800ea8c:	5080030b 	ldhu	r2,12(r10)
 800ea90:	1080100c 	andi	r2,r2,64
 800ea94:	1000511e 	bne	r2,zero,800ebdc <___svfiprintf_internal_r+0xc3c>
 800ea98:	d8802417 	ldw	r2,144(sp)
 800ea9c:	dfc03617 	ldw	ra,216(sp)
 800eaa0:	df003517 	ldw	fp,212(sp)
 800eaa4:	ddc03417 	ldw	r23,208(sp)
 800eaa8:	dd803317 	ldw	r22,204(sp)
 800eaac:	dd403217 	ldw	r21,200(sp)
 800eab0:	dd003117 	ldw	r20,196(sp)
 800eab4:	dcc03017 	ldw	r19,192(sp)
 800eab8:	dc802f17 	ldw	r18,188(sp)
 800eabc:	dc402e17 	ldw	r17,184(sp)
 800eac0:	dc002d17 	ldw	r16,180(sp)
 800eac4:	dec03704 	addi	sp,sp,220
 800eac8:	f800283a 	ret
 800eacc:	da802117 	ldw	r10,132(sp)
 800ead0:	dac02017 	ldw	r11,128(sp)
 800ead4:	52edc83a 	sub	r22,r10,r11
 800ead8:	05bf540e 	bge	zero,r22,800e82c <__alt_data_end+0xfc00e82c>
 800eadc:	02400404 	movi	r9,16
 800eae0:	4d812f0e 	bge	r9,r22,800efa0 <___svfiprintf_internal_r+0x1000>
 800eae4:	014200b4 	movhi	r5,2050
 800eae8:	2941a604 	addi	r5,r5,1688
 800eaec:	d9402215 	stw	r5,136(sp)
 800eaf0:	05c001c4 	movi	r23,7
 800eaf4:	00000306 	br	800eb04 <___svfiprintf_internal_r+0xb64>
 800eaf8:	b5bffc04 	addi	r22,r22,-16
 800eafc:	42000204 	addi	r8,r8,8
 800eb00:	4d80130e 	bge	r9,r22,800eb50 <___svfiprintf_internal_r+0xbb0>
 800eb04:	18c00404 	addi	r3,r3,16
 800eb08:	10800044 	addi	r2,r2,1
 800eb0c:	44c00015 	stw	r19,0(r8)
 800eb10:	42400115 	stw	r9,4(r8)
 800eb14:	d8c01c15 	stw	r3,112(sp)
 800eb18:	d8801b15 	stw	r2,108(sp)
 800eb1c:	b8bff60e 	bge	r23,r2,800eaf8 <__alt_data_end+0xfc00eaf8>
 800eb20:	9009883a 	mov	r4,r18
 800eb24:	a00b883a 	mov	r5,r20
 800eb28:	d9801a04 	addi	r6,sp,104
 800eb2c:	da402c15 	stw	r9,176(sp)
 800eb30:	800ddd80 	call	800ddd8 <__ssprint_r>
 800eb34:	da402c17 	ldw	r9,176(sp)
 800eb38:	103fd31e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800eb3c:	b5bffc04 	addi	r22,r22,-16
 800eb40:	d8c01c17 	ldw	r3,112(sp)
 800eb44:	d8801b17 	ldw	r2,108(sp)
 800eb48:	d811883a 	mov	r8,sp
 800eb4c:	4dbfed16 	blt	r9,r22,800eb04 <__alt_data_end+0xfc00eb04>
 800eb50:	da802217 	ldw	r10,136(sp)
 800eb54:	1d87883a 	add	r3,r3,r22
 800eb58:	10800044 	addi	r2,r2,1
 800eb5c:	42800015 	stw	r10,0(r8)
 800eb60:	45800115 	stw	r22,4(r8)
 800eb64:	d8c01c15 	stw	r3,112(sp)
 800eb68:	d8801b15 	stw	r2,108(sp)
 800eb6c:	010001c4 	movi	r4,7
 800eb70:	2080ce16 	blt	r4,r2,800eeac <___svfiprintf_internal_r+0xf0c>
 800eb74:	42000204 	addi	r8,r8,8
 800eb78:	003f2c06 	br	800e82c <__alt_data_end+0xfc00e82c>
 800eb7c:	9009883a 	mov	r4,r18
 800eb80:	a00b883a 	mov	r5,r20
 800eb84:	d9801a04 	addi	r6,sp,104
 800eb88:	800ddd80 	call	800ddd8 <__ssprint_r>
 800eb8c:	103fbe1e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800eb90:	d8c01c17 	ldw	r3,112(sp)
 800eb94:	d811883a 	mov	r8,sp
 800eb98:	003f5606 	br	800e8f4 <__alt_data_end+0xfc00e8f4>
 800eb9c:	9009883a 	mov	r4,r18
 800eba0:	a00b883a 	mov	r5,r20
 800eba4:	d9801a04 	addi	r6,sp,104
 800eba8:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ebac:	103f8626 	beq	r2,zero,800e9c8 <__alt_data_end+0xfc00e9c8>
 800ebb0:	003fb506 	br	800ea88 <__alt_data_end+0xfc00ea88>
 800ebb4:	10803fcc 	andi	r2,r2,255
 800ebb8:	10003b1e 	bne	r2,zero,800eca8 <___svfiprintf_internal_r+0xd08>
 800ebbc:	8880004c 	andi	r2,r17,1
 800ebc0:	10007e26 	beq	r2,zero,800edbc <___svfiprintf_internal_r+0xe1c>
 800ebc4:	00800c04 	movi	r2,48
 800ebc8:	d8c019c4 	addi	r3,sp,103
 800ebcc:	d88019c5 	stb	r2,103(sp)
 800ebd0:	df002b17 	ldw	fp,172(sp)
 800ebd4:	d8c02615 	stw	r3,152(sp)
 800ebd8:	003dc706 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ebdc:	00bfffc4 	movi	r2,-1
 800ebe0:	003fae06 	br	800ea9c <__alt_data_end+0xfc00ea9c>
 800ebe4:	9009883a 	mov	r4,r18
 800ebe8:	a00b883a 	mov	r5,r20
 800ebec:	d9801a04 	addi	r6,sp,104
 800ebf0:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ebf4:	103fa41e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800ebf8:	d811883a 	mov	r8,sp
 800ebfc:	003d2406 	br	800e090 <__alt_data_end+0xfc00e090>
 800ec00:	9009883a 	mov	r4,r18
 800ec04:	a00b883a 	mov	r5,r20
 800ec08:	d9801a04 	addi	r6,sp,104
 800ec0c:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ec10:	103f9d1e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800ec14:	d8c01c17 	ldw	r3,112(sp)
 800ec18:	d8801b17 	ldw	r2,108(sp)
 800ec1c:	d811883a 	mov	r8,sp
 800ec20:	003f2a06 	br	800e8cc <__alt_data_end+0xfc00e8cc>
 800ec24:	d9402a17 	ldw	r5,168(sp)
 800ec28:	d8c01a04 	addi	r3,sp,104
 800ec2c:	488003cc 	andi	r2,r9,15
 800ec30:	5008973a 	slli	r4,r10,28
 800ec34:	2885883a 	add	r2,r5,r2
 800ec38:	4812d13a 	srli	r9,r9,4
 800ec3c:	10800003 	ldbu	r2,0(r2)
 800ec40:	5014d13a 	srli	r10,r10,4
 800ec44:	18ffffc4 	addi	r3,r3,-1
 800ec48:	2252b03a 	or	r9,r4,r9
 800ec4c:	18800005 	stb	r2,0(r3)
 800ec50:	4a84b03a 	or	r2,r9,r10
 800ec54:	103ff51e 	bne	r2,zero,800ec2c <__alt_data_end+0xfc00ec2c>
 800ec58:	d8c02615 	stw	r3,152(sp)
 800ec5c:	003da406 	br	800e2f0 <__alt_data_end+0xfc00e2f0>
 800ec60:	9009883a 	mov	r4,r18
 800ec64:	a00b883a 	mov	r5,r20
 800ec68:	d9801a04 	addi	r6,sp,104
 800ec6c:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ec70:	103f851e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800ec74:	d8c01c17 	ldw	r3,112(sp)
 800ec78:	d8801b17 	ldw	r2,108(sp)
 800ec7c:	d811883a 	mov	r8,sp
 800ec80:	003eda06 	br	800e7ec <__alt_data_end+0xfc00e7ec>
 800ec84:	9009883a 	mov	r4,r18
 800ec88:	a00b883a 	mov	r5,r20
 800ec8c:	d9801a04 	addi	r6,sp,104
 800ec90:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ec94:	103f7c1e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800ec98:	d8c01c17 	ldw	r3,112(sp)
 800ec9c:	d8801b17 	ldw	r2,108(sp)
 800eca0:	d811883a 	mov	r8,sp
 800eca4:	003ede06 	br	800e820 <__alt_data_end+0xfc00e820>
 800eca8:	da801a04 	addi	r10,sp,104
 800ecac:	da802615 	stw	r10,152(sp)
 800ecb0:	003d9106 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ecb4:	00800084 	movi	r2,2
 800ecb8:	4a86b03a 	or	r3,r9,r10
 800ecbc:	003d7106 	br	800e284 <__alt_data_end+0xfc00e284>
 800ecc0:	88c0040c 	andi	r3,r17,16
 800ecc4:	18004f1e 	bne	r3,zero,800ee04 <___svfiprintf_internal_r+0xe64>
 800ecc8:	88c0100c 	andi	r3,r17,64
 800eccc:	18004d26 	beq	r3,zero,800ee04 <___svfiprintf_internal_r+0xe64>
 800ecd0:	dac02317 	ldw	r11,140(sp)
 800ecd4:	1240000b 	ldhu	r9,0(r2)
 800ecd8:	0015883a 	mov	r10,zero
 800ecdc:	5ac00104 	addi	r11,r11,4
 800ece0:	dac02315 	stw	r11,140(sp)
 800ece4:	00800044 	movi	r2,1
 800ece8:	4807883a 	mov	r3,r9
 800ecec:	003d6506 	br	800e284 <__alt_data_end+0xfc00e284>
 800ecf0:	9009883a 	mov	r4,r18
 800ecf4:	a00b883a 	mov	r5,r20
 800ecf8:	d9801a04 	addi	r6,sp,104
 800ecfc:	800ddd80 	call	800ddd8 <__ssprint_r>
 800ed00:	103f611e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800ed04:	d8c01c17 	ldw	r3,112(sp)
 800ed08:	d8801b17 	ldw	r2,108(sp)
 800ed0c:	d811883a 	mov	r8,sp
 800ed10:	003ea906 	br	800e7b8 <__alt_data_end+0xfc00e7b8>
 800ed14:	88c0040c 	andi	r3,r17,16
 800ed18:	1800321e 	bne	r3,zero,800ede4 <___svfiprintf_internal_r+0xe44>
 800ed1c:	88c0100c 	andi	r3,r17,64
 800ed20:	18003026 	beq	r3,zero,800ede4 <___svfiprintf_internal_r+0xe44>
 800ed24:	dac02317 	ldw	r11,140(sp)
 800ed28:	1240000b 	ldhu	r9,0(r2)
 800ed2c:	0015883a 	mov	r10,zero
 800ed30:	5ac00104 	addi	r11,r11,4
 800ed34:	dac02315 	stw	r11,140(sp)
 800ed38:	0005883a 	mov	r2,zero
 800ed3c:	4807883a 	mov	r3,r9
 800ed40:	003d5006 	br	800e284 <__alt_data_end+0xfc00e284>
 800ed44:	10803fcc 	andi	r2,r2,255
 800ed48:	1080201c 	xori	r2,r2,128
 800ed4c:	10bfe004 	addi	r2,r2,-128
 800ed50:	01000c04 	movi	r4,48
 800ed54:	11006826 	beq	r2,r4,800eef8 <___svfiprintf_internal_r+0xf58>
 800ed58:	da802617 	ldw	r10,152(sp)
 800ed5c:	d8801e17 	ldw	r2,120(sp)
 800ed60:	193fffc5 	stb	r4,-1(r3)
 800ed64:	52bfffc4 	addi	r10,r10,-1
 800ed68:	da802615 	stw	r10,152(sp)
 800ed6c:	12b9c83a 	sub	fp,r2,r10
 800ed70:	003d6106 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ed74:	00800244 	movi	r2,9
 800ed78:	127f1d36 	bltu	r2,r9,800e9f0 <__alt_data_end+0xfc00e9f0>
 800ed7c:	4a400c04 	addi	r9,r9,48
 800ed80:	d8c019c4 	addi	r3,sp,103
 800ed84:	da4019c5 	stb	r9,103(sp)
 800ed88:	df002b17 	ldw	fp,172(sp)
 800ed8c:	d8c02615 	stw	r3,152(sp)
 800ed90:	003d5906 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ed94:	d8802315 	stw	r2,140(sp)
 800ed98:	a9000007 	ldb	r4,0(r21)
 800ed9c:	003ccc06 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800eda0:	9009883a 	mov	r4,r18
 800eda4:	a00b883a 	mov	r5,r20
 800eda8:	d9801a04 	addi	r6,sp,104
 800edac:	800ddd80 	call	800ddd8 <__ssprint_r>
 800edb0:	103f351e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800edb4:	d8c01c17 	ldw	r3,112(sp)
 800edb8:	003efb06 	br	800e9a8 <__alt_data_end+0xfc00e9a8>
 800edbc:	d8c01a04 	addi	r3,sp,104
 800edc0:	d8c02615 	stw	r3,152(sp)
 800edc4:	003d4c06 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800edc8:	da802317 	ldw	r10,140(sp)
 800edcc:	1a400017 	ldw	r9,0(r3)
 800edd0:	52800104 	addi	r10,r10,4
 800edd4:	da802315 	stw	r10,140(sp)
 800edd8:	4815d7fa 	srai	r10,r9,31
 800eddc:	5005883a 	mov	r2,r10
 800ede0:	003d9d06 	br	800e458 <__alt_data_end+0xfc00e458>
 800ede4:	da802317 	ldw	r10,140(sp)
 800ede8:	12400017 	ldw	r9,0(r2)
 800edec:	0005883a 	mov	r2,zero
 800edf0:	52800104 	addi	r10,r10,4
 800edf4:	da802315 	stw	r10,140(sp)
 800edf8:	4807883a 	mov	r3,r9
 800edfc:	0015883a 	mov	r10,zero
 800ee00:	003d2006 	br	800e284 <__alt_data_end+0xfc00e284>
 800ee04:	da802317 	ldw	r10,140(sp)
 800ee08:	12400017 	ldw	r9,0(r2)
 800ee0c:	00800044 	movi	r2,1
 800ee10:	52800104 	addi	r10,r10,4
 800ee14:	da802315 	stw	r10,140(sp)
 800ee18:	4807883a 	mov	r3,r9
 800ee1c:	0015883a 	mov	r10,zero
 800ee20:	003d1806 	br	800e284 <__alt_data_end+0xfc00e284>
 800ee24:	dac02317 	ldw	r11,140(sp)
 800ee28:	12400017 	ldw	r9,0(r2)
 800ee2c:	0015883a 	mov	r10,zero
 800ee30:	5ac00104 	addi	r11,r11,4
 800ee34:	dac02315 	stw	r11,140(sp)
 800ee38:	003dde06 	br	800e5b4 <__alt_data_end+0xfc00e5b4>
 800ee3c:	a9000007 	ldb	r4,0(r21)
 800ee40:	003ca306 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800ee44:	dac02317 	ldw	r11,140(sp)
 800ee48:	da802417 	ldw	r10,144(sp)
 800ee4c:	58800017 	ldw	r2,0(r11)
 800ee50:	5007d7fa 	srai	r3,r10,31
 800ee54:	5ac00104 	addi	r11,r11,4
 800ee58:	dac02315 	stw	r11,140(sp)
 800ee5c:	12800015 	stw	r10,0(r2)
 800ee60:	10c00115 	stw	r3,4(r2)
 800ee64:	003c7206 	br	800e030 <__alt_data_end+0xfc00e030>
 800ee68:	00800c04 	movi	r2,48
 800ee6c:	d8801d05 	stb	r2,116(sp)
 800ee70:	d9001d45 	stb	r4,117(sp)
 800ee74:	8c400094 	ori	r17,r17,2
 800ee78:	00800084 	movi	r2,2
 800ee7c:	003d0106 	br	800e284 <__alt_data_end+0xfc00e284>
 800ee80:	ad400044 	addi	r21,r21,1
 800ee84:	8c400814 	ori	r17,r17,32
 800ee88:	11000047 	ldb	r4,1(r2)
 800ee8c:	003c9006 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800ee90:	dac02317 	ldw	r11,140(sp)
 800ee94:	da802417 	ldw	r10,144(sp)
 800ee98:	58800017 	ldw	r2,0(r11)
 800ee9c:	5ac00104 	addi	r11,r11,4
 800eea0:	dac02315 	stw	r11,140(sp)
 800eea4:	12800015 	stw	r10,0(r2)
 800eea8:	003c6106 	br	800e030 <__alt_data_end+0xfc00e030>
 800eeac:	9009883a 	mov	r4,r18
 800eeb0:	a00b883a 	mov	r5,r20
 800eeb4:	d9801a04 	addi	r6,sp,104
 800eeb8:	800ddd80 	call	800ddd8 <__ssprint_r>
 800eebc:	103ef21e 	bne	r2,zero,800ea88 <__alt_data_end+0xfc00ea88>
 800eec0:	d8c01c17 	ldw	r3,112(sp)
 800eec4:	d8801b17 	ldw	r2,108(sp)
 800eec8:	d811883a 	mov	r8,sp
 800eecc:	003e5706 	br	800e82c <__alt_data_end+0xfc00e82c>
 800eed0:	02c200b4 	movhi	r11,2050
 800eed4:	5ac1a604 	addi	r11,r11,1688
 800eed8:	dac02215 	stw	r11,136(sp)
 800eedc:	003e7106 	br	800e8a4 <__alt_data_end+0xfc00e8a4>
 800eee0:	dac02317 	ldw	r11,140(sp)
 800eee4:	12400017 	ldw	r9,0(r2)
 800eee8:	0015883a 	mov	r10,zero
 800eeec:	5ac00104 	addi	r11,r11,4
 800eef0:	dac02315 	stw	r11,140(sp)
 800eef4:	003daf06 	br	800e5b4 <__alt_data_end+0xfc00e5b4>
 800eef8:	da801e17 	ldw	r10,120(sp)
 800eefc:	d8c02617 	ldw	r3,152(sp)
 800ef00:	50f9c83a 	sub	fp,r10,r3
 800ef04:	003cfc06 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ef08:	da002c15 	stw	r8,176(sp)
 800ef0c:	80052f00 	call	80052f0 <strlen>
 800ef10:	1039883a 	mov	fp,r2
 800ef14:	dac01d83 	ldbu	r11,118(sp)
 800ef18:	ddc02315 	stw	r23,140(sp)
 800ef1c:	0021883a 	mov	r16,zero
 800ef20:	da002c17 	ldw	r8,176(sp)
 800ef24:	003cf406 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800ef28:	04001004 	movi	r16,64
 800ef2c:	800b883a 	mov	r5,r16
 800ef30:	80048dc0 	call	80048dc <_malloc_r>
 800ef34:	da802717 	ldw	r10,156(sp)
 800ef38:	50800015 	stw	r2,0(r10)
 800ef3c:	50800415 	stw	r2,16(r10)
 800ef40:	10002c26 	beq	r2,zero,800eff4 <___svfiprintf_internal_r+0x1054>
 800ef44:	da802717 	ldw	r10,156(sp)
 800ef48:	54000515 	stw	r16,20(r10)
 800ef4c:	003c2806 	br	800dff0 <__alt_data_end+0xfc00dff0>
 800ef50:	00800184 	movi	r2,6
 800ef54:	1400012e 	bgeu	r2,r16,800ef5c <___svfiprintf_internal_r+0xfbc>
 800ef58:	1021883a 	mov	r16,r2
 800ef5c:	8039883a 	mov	fp,r16
 800ef60:	802d883a 	mov	r22,r16
 800ef64:	80001716 	blt	r16,zero,800efc4 <___svfiprintf_internal_r+0x1024>
 800ef68:	008200b4 	movhi	r2,2050
 800ef6c:	10814304 	addi	r2,r2,1292
 800ef70:	dd802015 	stw	r22,128(sp)
 800ef74:	ddc02315 	stw	r23,140(sp)
 800ef78:	d8802615 	stw	r2,152(sp)
 800ef7c:	003d4706 	br	800e49c <__alt_data_end+0xfc00e49c>
 800ef80:	010200b4 	movhi	r4,2050
 800ef84:	2101aa04 	addi	r4,r4,1704
 800ef88:	d9002815 	stw	r4,160(sp)
 800ef8c:	003d7206 	br	800e558 <__alt_data_end+0xfc00e558>
 800ef90:	010200b4 	movhi	r4,2050
 800ef94:	2101aa04 	addi	r4,r4,1704
 800ef98:	d9002815 	stw	r4,160(sp)
 800ef9c:	003e7906 	br	800e984 <__alt_data_end+0xfc00e984>
 800efa0:	010200b4 	movhi	r4,2050
 800efa4:	2101a604 	addi	r4,r4,1688
 800efa8:	d9002215 	stw	r4,136(sp)
 800efac:	003ee806 	br	800eb50 <__alt_data_end+0xfc00eb50>
 800efb0:	8039883a 	mov	fp,r16
 800efb4:	dac01d83 	ldbu	r11,118(sp)
 800efb8:	ddc02315 	stw	r23,140(sp)
 800efbc:	0021883a 	mov	r16,zero
 800efc0:	003ccd06 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800efc4:	002d883a 	mov	r22,zero
 800efc8:	003fe706 	br	800ef68 <__alt_data_end+0xfc00ef68>
 800efcc:	dac02317 	ldw	r11,140(sp)
 800efd0:	a805883a 	mov	r2,r21
 800efd4:	502b883a 	mov	r21,r10
 800efd8:	5c000017 	ldw	r16,0(r11)
 800efdc:	59000104 	addi	r4,r11,4
 800efe0:	d9002315 	stw	r4,140(sp)
 800efe4:	803fa80e 	bge	r16,zero,800ee88 <__alt_data_end+0xfc00ee88>
 800efe8:	043fffc4 	movi	r16,-1
 800efec:	11000047 	ldb	r4,1(r2)
 800eff0:	003c3706 	br	800e0d0 <__alt_data_end+0xfc00e0d0>
 800eff4:	dac02917 	ldw	r11,164(sp)
 800eff8:	00800304 	movi	r2,12
 800effc:	58800015 	stw	r2,0(r11)
 800f000:	00bfffc4 	movi	r2,-1
 800f004:	003ea506 	br	800ea9c <__alt_data_end+0xfc00ea9c>

0800f008 <__sprint_r.part.0>:
 800f008:	28801917 	ldw	r2,100(r5)
 800f00c:	defff604 	addi	sp,sp,-40
 800f010:	dd400515 	stw	r21,20(sp)
 800f014:	dcc00315 	stw	r19,12(sp)
 800f018:	dfc00915 	stw	ra,36(sp)
 800f01c:	df000815 	stw	fp,32(sp)
 800f020:	ddc00715 	stw	r23,28(sp)
 800f024:	dd800615 	stw	r22,24(sp)
 800f028:	dd000415 	stw	r20,16(sp)
 800f02c:	dc800215 	stw	r18,8(sp)
 800f030:	dc400115 	stw	r17,4(sp)
 800f034:	dc000015 	stw	r16,0(sp)
 800f038:	1088000c 	andi	r2,r2,8192
 800f03c:	2827883a 	mov	r19,r5
 800f040:	302b883a 	mov	r21,r6
 800f044:	10002d26 	beq	r2,zero,800f0fc <__sprint_r.part.0+0xf4>
 800f048:	30800217 	ldw	r2,8(r6)
 800f04c:	35800017 	ldw	r22,0(r6)
 800f050:	10002826 	beq	r2,zero,800f0f4 <__sprint_r.part.0+0xec>
 800f054:	2029883a 	mov	r20,r4
 800f058:	b5c00104 	addi	r23,r22,4
 800f05c:	04bfffc4 	movi	r18,-1
 800f060:	bc400017 	ldw	r17,0(r23)
 800f064:	b4000017 	ldw	r16,0(r22)
 800f068:	0039883a 	mov	fp,zero
 800f06c:	8822d0ba 	srli	r17,r17,2
 800f070:	04400316 	blt	zero,r17,800f080 <__sprint_r.part.0+0x78>
 800f074:	00001706 	br	800f0d4 <__sprint_r.part.0+0xcc>
 800f078:	84000104 	addi	r16,r16,4
 800f07c:	8f001526 	beq	r17,fp,800f0d4 <__sprint_r.part.0+0xcc>
 800f080:	81400017 	ldw	r5,0(r16)
 800f084:	a009883a 	mov	r4,r20
 800f088:	980d883a 	mov	r6,r19
 800f08c:	80108940 	call	8010894 <_fputwc_r>
 800f090:	e7000044 	addi	fp,fp,1
 800f094:	14bff81e 	bne	r2,r18,800f078 <__alt_data_end+0xfc00f078>
 800f098:	9005883a 	mov	r2,r18
 800f09c:	a8000215 	stw	zero,8(r21)
 800f0a0:	a8000115 	stw	zero,4(r21)
 800f0a4:	dfc00917 	ldw	ra,36(sp)
 800f0a8:	df000817 	ldw	fp,32(sp)
 800f0ac:	ddc00717 	ldw	r23,28(sp)
 800f0b0:	dd800617 	ldw	r22,24(sp)
 800f0b4:	dd400517 	ldw	r21,20(sp)
 800f0b8:	dd000417 	ldw	r20,16(sp)
 800f0bc:	dcc00317 	ldw	r19,12(sp)
 800f0c0:	dc800217 	ldw	r18,8(sp)
 800f0c4:	dc400117 	ldw	r17,4(sp)
 800f0c8:	dc000017 	ldw	r16,0(sp)
 800f0cc:	dec00a04 	addi	sp,sp,40
 800f0d0:	f800283a 	ret
 800f0d4:	a8c00217 	ldw	r3,8(r21)
 800f0d8:	8c63883a 	add	r17,r17,r17
 800f0dc:	8c63883a 	add	r17,r17,r17
 800f0e0:	1c45c83a 	sub	r2,r3,r17
 800f0e4:	a8800215 	stw	r2,8(r21)
 800f0e8:	b5800204 	addi	r22,r22,8
 800f0ec:	bdc00204 	addi	r23,r23,8
 800f0f0:	103fdb1e 	bne	r2,zero,800f060 <__alt_data_end+0xfc00f060>
 800f0f4:	0005883a 	mov	r2,zero
 800f0f8:	003fe806 	br	800f09c <__alt_data_end+0xfc00f09c>
 800f0fc:	800b7a40 	call	800b7a4 <__sfvwrite_r>
 800f100:	003fe606 	br	800f09c <__alt_data_end+0xfc00f09c>

0800f104 <__sprint_r>:
 800f104:	30c00217 	ldw	r3,8(r6)
 800f108:	18000126 	beq	r3,zero,800f110 <__sprint_r+0xc>
 800f10c:	800f0081 	jmpi	800f008 <__sprint_r.part.0>
 800f110:	30000115 	stw	zero,4(r6)
 800f114:	0005883a 	mov	r2,zero
 800f118:	f800283a 	ret

0800f11c <___vfiprintf_internal_r>:
 800f11c:	defeca04 	addi	sp,sp,-1240
 800f120:	dd813215 	stw	r22,1224(sp)
 800f124:	dd013015 	stw	r20,1216(sp)
 800f128:	dfc13515 	stw	ra,1236(sp)
 800f12c:	df013415 	stw	fp,1232(sp)
 800f130:	ddc13315 	stw	r23,1228(sp)
 800f134:	dd413115 	stw	r21,1220(sp)
 800f138:	dcc12f15 	stw	r19,1212(sp)
 800f13c:	dc812e15 	stw	r18,1208(sp)
 800f140:	dc412d15 	stw	r17,1204(sp)
 800f144:	dc012c15 	stw	r16,1200(sp)
 800f148:	d9012015 	stw	r4,1152(sp)
 800f14c:	d9c12115 	stw	r7,1156(sp)
 800f150:	2829883a 	mov	r20,r5
 800f154:	302d883a 	mov	r22,r6
 800f158:	20000226 	beq	r4,zero,800f164 <___vfiprintf_internal_r+0x48>
 800f15c:	20800e17 	ldw	r2,56(r4)
 800f160:	1001d326 	beq	r2,zero,800f8b0 <___vfiprintf_internal_r+0x794>
 800f164:	a0c0030b 	ldhu	r3,12(r20)
 800f168:	1908000c 	andi	r4,r3,8192
 800f16c:	1805883a 	mov	r2,r3
 800f170:	2000071e 	bne	r4,zero,800f190 <___vfiprintf_internal_r+0x74>
 800f174:	a1001917 	ldw	r4,100(r20)
 800f178:	18880014 	ori	r2,r3,8192
 800f17c:	00f7ffc4 	movi	r3,-8193
 800f180:	20c8703a 	and	r4,r4,r3
 800f184:	a080030d 	sth	r2,12(r20)
 800f188:	1007883a 	mov	r3,r2
 800f18c:	a1001915 	stw	r4,100(r20)
 800f190:	1100020c 	andi	r4,r2,8
 800f194:	20018926 	beq	r4,zero,800f7bc <___vfiprintf_internal_r+0x6a0>
 800f198:	a1000417 	ldw	r4,16(r20)
 800f19c:	20018726 	beq	r4,zero,800f7bc <___vfiprintf_internal_r+0x6a0>
 800f1a0:	1080068c 	andi	r2,r2,26
 800f1a4:	01000284 	movi	r4,10
 800f1a8:	11018d26 	beq	r2,r4,800f7e0 <___vfiprintf_internal_r+0x6c4>
 800f1ac:	da810a04 	addi	r10,sp,1064
 800f1b0:	dac109c4 	addi	r11,sp,1063
 800f1b4:	070200b4 	movhi	fp,2050
 800f1b8:	05c200b4 	movhi	r23,2050
 800f1bc:	da811e15 	stw	r10,1144(sp)
 800f1c0:	52d5c83a 	sub	r10,r10,r11
 800f1c4:	e701b204 	addi	fp,fp,1736
 800f1c8:	bdc1ae04 	addi	r23,r23,1720
 800f1cc:	dac11f15 	stw	r11,1148(sp)
 800f1d0:	dec11a15 	stw	sp,1128(sp)
 800f1d4:	d8011c15 	stw	zero,1136(sp)
 800f1d8:	d8011b15 	stw	zero,1132(sp)
 800f1dc:	d8012615 	stw	zero,1176(sp)
 800f1e0:	d8012215 	stw	zero,1160(sp)
 800f1e4:	da812715 	stw	r10,1180(sp)
 800f1e8:	d811883a 	mov	r8,sp
 800f1ec:	b021883a 	mov	r16,r22
 800f1f0:	80800007 	ldb	r2,0(r16)
 800f1f4:	10039c26 	beq	r2,zero,8010068 <___vfiprintf_internal_r+0xf4c>
 800f1f8:	01000944 	movi	r4,37
 800f1fc:	11039a26 	beq	r2,r4,8010068 <___vfiprintf_internal_r+0xf4c>
 800f200:	8005883a 	mov	r2,r16
 800f204:	00000106 	br	800f20c <___vfiprintf_internal_r+0xf0>
 800f208:	19000326 	beq	r3,r4,800f218 <___vfiprintf_internal_r+0xfc>
 800f20c:	10800044 	addi	r2,r2,1
 800f210:	10c00007 	ldb	r3,0(r2)
 800f214:	183ffc1e 	bne	r3,zero,800f208 <__alt_data_end+0xfc00f208>
 800f218:	1425c83a 	sub	r18,r2,r16
 800f21c:	1023883a 	mov	r17,r2
 800f220:	90001026 	beq	r18,zero,800f264 <___vfiprintf_internal_r+0x148>
 800f224:	d8c11c17 	ldw	r3,1136(sp)
 800f228:	d8811b17 	ldw	r2,1132(sp)
 800f22c:	44000015 	stw	r16,0(r8)
 800f230:	90c7883a 	add	r3,r18,r3
 800f234:	10800044 	addi	r2,r2,1
 800f238:	44800115 	stw	r18,4(r8)
 800f23c:	d8c11c15 	stw	r3,1136(sp)
 800f240:	d8811b15 	stw	r2,1132(sp)
 800f244:	010001c4 	movi	r4,7
 800f248:	2080750e 	bge	r4,r2,800f420 <___vfiprintf_internal_r+0x304>
 800f24c:	18039d1e 	bne	r3,zero,80100c4 <___vfiprintf_internal_r+0xfa8>
 800f250:	dac12217 	ldw	r11,1160(sp)
 800f254:	d8011b15 	stw	zero,1132(sp)
 800f258:	d811883a 	mov	r8,sp
 800f25c:	5c97883a 	add	r11,r11,r18
 800f260:	dac12215 	stw	r11,1160(sp)
 800f264:	88800007 	ldb	r2,0(r17)
 800f268:	1002e026 	beq	r2,zero,800fdec <___vfiprintf_internal_r+0xcd0>
 800f26c:	88c00047 	ldb	r3,1(r17)
 800f270:	8c000044 	addi	r16,r17,1
 800f274:	d8011d85 	stb	zero,1142(sp)
 800f278:	000d883a 	mov	r6,zero
 800f27c:	027fffc4 	movi	r9,-1
 800f280:	0027883a 	mov	r19,zero
 800f284:	002b883a 	mov	r21,zero
 800f288:	01001604 	movi	r4,88
 800f28c:	01400244 	movi	r5,9
 800f290:	03000a84 	movi	r12,42
 800f294:	01c01b04 	movi	r7,108
 800f298:	84000044 	addi	r16,r16,1
 800f29c:	18bff804 	addi	r2,r3,-32
 800f2a0:	20825f36 	bltu	r4,r2,800fc20 <___vfiprintf_internal_r+0xb04>
 800f2a4:	100490ba 	slli	r2,r2,2
 800f2a8:	02820074 	movhi	r10,2049
 800f2ac:	52bcaf04 	addi	r10,r10,-3396
 800f2b0:	1285883a 	add	r2,r2,r10
 800f2b4:	10800017 	ldw	r2,0(r2)
 800f2b8:	1000683a 	jmp	r2
 800f2bc:	0800fa90 	cmplti	zero,at,1002
 800f2c0:	0800fc20 	cmpeqi	zero,at,1008
 800f2c4:	0800fc20 	cmpeqi	zero,at,1008
 800f2c8:	0800fc14 	ori	zero,at,1008
 800f2cc:	0800fc20 	cmpeqi	zero,at,1008
 800f2d0:	0800fc20 	cmpeqi	zero,at,1008
 800f2d4:	0800fc20 	cmpeqi	zero,at,1008
 800f2d8:	0800fc20 	cmpeqi	zero,at,1008
 800f2dc:	0800fc20 	cmpeqi	zero,at,1008
 800f2e0:	0800fc20 	cmpeqi	zero,at,1008
 800f2e4:	0800fbec 	andhi	zero,at,1007
 800f2e8:	0800fc08 	cmpgei	zero,at,1008
 800f2ec:	0800fc20 	cmpeqi	zero,at,1008
 800f2f0:	0800f8c0 	call	800f8c <__alt_mem_sdram-0x77ff074>
 800f2f4:	0800fa20 	cmpeqi	zero,at,1000
 800f2f8:	0800fc20 	cmpeqi	zero,at,1008
 800f2fc:	0800f9a4 	muli	zero,at,998
 800f300:	0800f9b0 	cmpltui	zero,at,998
 800f304:	0800f9b0 	cmpltui	zero,at,998
 800f308:	0800f9b0 	cmpltui	zero,at,998
 800f30c:	0800f9b0 	cmpltui	zero,at,998
 800f310:	0800f9b0 	cmpltui	zero,at,998
 800f314:	0800f9b0 	cmpltui	zero,at,998
 800f318:	0800f9b0 	cmpltui	zero,at,998
 800f31c:	0800f9b0 	cmpltui	zero,at,998
 800f320:	0800f9b0 	cmpltui	zero,at,998
 800f324:	0800fc20 	cmpeqi	zero,at,1008
 800f328:	0800fc20 	cmpeqi	zero,at,1008
 800f32c:	0800fc20 	cmpeqi	zero,at,1008
 800f330:	0800fc20 	cmpeqi	zero,at,1008
 800f334:	0800fc20 	cmpeqi	zero,at,1008
 800f338:	0800fc20 	cmpeqi	zero,at,1008
 800f33c:	0800fc20 	cmpeqi	zero,at,1008
 800f340:	0800fc20 	cmpeqi	zero,at,1008
 800f344:	0800fc20 	cmpeqi	zero,at,1008
 800f348:	0800fc20 	cmpeqi	zero,at,1008
 800f34c:	0800f9dc 	xori	zero,at,999
 800f350:	0800fc20 	cmpeqi	zero,at,1008
 800f354:	0800fc20 	cmpeqi	zero,at,1008
 800f358:	0800fc20 	cmpeqi	zero,at,1008
 800f35c:	0800fc20 	cmpeqi	zero,at,1008
 800f360:	0800fc20 	cmpeqi	zero,at,1008
 800f364:	0800fc20 	cmpeqi	zero,at,1008
 800f368:	0800fc20 	cmpeqi	zero,at,1008
 800f36c:	0800fc20 	cmpeqi	zero,at,1008
 800f370:	0800fc20 	cmpeqi	zero,at,1008
 800f374:	0800fc20 	cmpeqi	zero,at,1008
 800f378:	0800f470 	cmpltui	zero,at,977
 800f37c:	0800fc20 	cmpeqi	zero,at,1008
 800f380:	0800fc20 	cmpeqi	zero,at,1008
 800f384:	0800fc20 	cmpeqi	zero,at,1008
 800f388:	0800fc20 	cmpeqi	zero,at,1008
 800f38c:	0800fc20 	cmpeqi	zero,at,1008
 800f390:	0800f434 	orhi	zero,at,976
 800f394:	0800fc20 	cmpeqi	zero,at,1008
 800f398:	0800fc20 	cmpeqi	zero,at,1008
 800f39c:	0800f91c 	xori	zero,at,996
 800f3a0:	0800fc20 	cmpeqi	zero,at,1008
 800f3a4:	0800fc20 	cmpeqi	zero,at,1008
 800f3a8:	0800fc20 	cmpeqi	zero,at,1008
 800f3ac:	0800fc20 	cmpeqi	zero,at,1008
 800f3b0:	0800fc20 	cmpeqi	zero,at,1008
 800f3b4:	0800fc20 	cmpeqi	zero,at,1008
 800f3b8:	0800fc20 	cmpeqi	zero,at,1008
 800f3bc:	0800fc20 	cmpeqi	zero,at,1008
 800f3c0:	0800fc20 	cmpeqi	zero,at,1008
 800f3c4:	0800fc20 	cmpeqi	zero,at,1008
 800f3c8:	0800f974 	orhi	zero,at,997
 800f3cc:	0800fb0c 	andi	zero,at,1004
 800f3d0:	0800fc20 	cmpeqi	zero,at,1008
 800f3d4:	0800fc20 	cmpeqi	zero,at,1008
 800f3d8:	0800fc20 	cmpeqi	zero,at,1008
 800f3dc:	0800fb94 	ori	zero,at,1006
 800f3e0:	0800fb0c 	andi	zero,at,1004
 800f3e4:	0800fc20 	cmpeqi	zero,at,1008
 800f3e8:	0800fc20 	cmpeqi	zero,at,1008
 800f3ec:	0800fba0 	cmpeqi	zero,at,1006
 800f3f0:	0800fc20 	cmpeqi	zero,at,1008
 800f3f4:	0800fa60 	cmpeqi	zero,at,1001
 800f3f8:	0800f474 	orhi	zero,at,977
 800f3fc:	0800fb48 	cmpgei	zero,at,1005
 800f400:	0800fb88 	cmpgei	zero,at,1006
 800f404:	0800fc20 	cmpeqi	zero,at,1008
 800f408:	0800faac 	andhi	zero,at,1002
 800f40c:	0800fc20 	cmpeqi	zero,at,1008
 800f410:	0800f438 	rdprs	zero,at,976
 800f414:	0800fc20 	cmpeqi	zero,at,1008
 800f418:	0800fc20 	cmpeqi	zero,at,1008
 800f41c:	0800fbb0 	cmpltui	zero,at,1006
 800f420:	42000204 	addi	r8,r8,8
 800f424:	dac12217 	ldw	r11,1160(sp)
 800f428:	5c97883a 	add	r11,r11,r18
 800f42c:	dac12215 	stw	r11,1160(sp)
 800f430:	003f8c06 	br	800f264 <__alt_data_end+0xfc00f264>
 800f434:	ad400414 	ori	r21,r21,16
 800f438:	a880080c 	andi	r2,r21,32
 800f43c:	10012f1e 	bne	r2,zero,800f8fc <___vfiprintf_internal_r+0x7e0>
 800f440:	a880040c 	andi	r2,r21,16
 800f444:	1001ff1e 	bne	r2,zero,800fc44 <___vfiprintf_internal_r+0xb28>
 800f448:	a880100c 	andi	r2,r21,64
 800f44c:	1001fd26 	beq	r2,zero,800fc44 <___vfiprintf_internal_r+0xb28>
 800f450:	da812117 	ldw	r10,1156(sp)
 800f454:	002d883a 	mov	r22,zero
 800f458:	00800044 	movi	r2,1
 800f45c:	5480000b 	ldhu	r18,0(r10)
 800f460:	52800104 	addi	r10,r10,4
 800f464:	da812115 	stw	r10,1156(sp)
 800f468:	9009883a 	mov	r4,r18
 800f46c:	00000a06 	br	800f498 <___vfiprintf_internal_r+0x37c>
 800f470:	ad400414 	ori	r21,r21,16
 800f474:	a880080c 	andi	r2,r21,32
 800f478:	10011426 	beq	r2,zero,800f8cc <___vfiprintf_internal_r+0x7b0>
 800f47c:	da812117 	ldw	r10,1156(sp)
 800f480:	0005883a 	mov	r2,zero
 800f484:	54800017 	ldw	r18,0(r10)
 800f488:	55800117 	ldw	r22,4(r10)
 800f48c:	52800204 	addi	r10,r10,8
 800f490:	da812115 	stw	r10,1156(sp)
 800f494:	9588b03a 	or	r4,r18,r22
 800f498:	d8011d85 	stb	zero,1142(sp)
 800f49c:	4823883a 	mov	r17,r9
 800f4a0:	0019883a 	mov	r12,zero
 800f4a4:	48000216 	blt	r9,zero,800f4b0 <___vfiprintf_internal_r+0x394>
 800f4a8:	00ffdfc4 	movi	r3,-129
 800f4ac:	a8ea703a 	and	r21,r21,r3
 800f4b0:	2002221e 	bne	r4,zero,800fd3c <___vfiprintf_internal_r+0xc20>
 800f4b4:	4802c726 	beq	r9,zero,800ffd4 <___vfiprintf_internal_r+0xeb8>
 800f4b8:	10803fcc 	andi	r2,r2,255
 800f4bc:	00c00044 	movi	r3,1
 800f4c0:	10c24426 	beq	r2,r3,800fdd4 <___vfiprintf_internal_r+0xcb8>
 800f4c4:	00c00084 	movi	r3,2
 800f4c8:	10c2cc26 	beq	r2,r3,800fffc <___vfiprintf_internal_r+0xee0>
 800f4cc:	d8c10a04 	addi	r3,sp,1064
 800f4d0:	9008d0fa 	srli	r4,r18,3
 800f4d4:	b00a977a 	slli	r5,r22,29
 800f4d8:	b02cd0fa 	srli	r22,r22,3
 800f4dc:	948001cc 	andi	r18,r18,7
 800f4e0:	90800c04 	addi	r2,r18,48
 800f4e4:	18ffffc4 	addi	r3,r3,-1
 800f4e8:	2924b03a 	or	r18,r5,r4
 800f4ec:	18800005 	stb	r2,0(r3)
 800f4f0:	9588b03a 	or	r4,r18,r22
 800f4f4:	203ff61e 	bne	r4,zero,800f4d0 <__alt_data_end+0xfc00f4d0>
 800f4f8:	a900004c 	andi	r4,r21,1
 800f4fc:	d8c12415 	stw	r3,1168(sp)
 800f500:	2002fb1e 	bne	r4,zero,80100f0 <___vfiprintf_internal_r+0xfd4>
 800f504:	da811e17 	ldw	r10,1144(sp)
 800f508:	50e3c83a 	sub	r17,r10,r3
 800f50c:	8825883a 	mov	r18,r17
 800f510:	8a40010e 	bge	r17,r9,800f518 <___vfiprintf_internal_r+0x3fc>
 800f514:	4825883a 	mov	r18,r9
 800f518:	63003fcc 	andi	r12,r12,255
 800f51c:	6300201c 	xori	r12,r12,128
 800f520:	633fe004 	addi	r12,r12,-128
 800f524:	60000126 	beq	r12,zero,800f52c <___vfiprintf_internal_r+0x410>
 800f528:	94800044 	addi	r18,r18,1
 800f52c:	ab80008c 	andi	r14,r21,2
 800f530:	70000126 	beq	r14,zero,800f538 <___vfiprintf_internal_r+0x41c>
 800f534:	94800084 	addi	r18,r18,2
 800f538:	ad80210c 	andi	r22,r21,132
 800f53c:	b001df1e 	bne	r22,zero,800fcbc <___vfiprintf_internal_r+0xba0>
 800f540:	9c8fc83a 	sub	r7,r19,r18
 800f544:	01c1dd0e 	bge	zero,r7,800fcbc <___vfiprintf_internal_r+0xba0>
 800f548:	03000404 	movi	r12,16
 800f54c:	d8811c17 	ldw	r2,1136(sp)
 800f550:	61c3920e 	bge	r12,r7,801039c <___vfiprintf_internal_r+0x1280>
 800f554:	028200b4 	movhi	r10,2050
 800f558:	5281b204 	addi	r10,r10,1736
 800f55c:	dc012915 	stw	r16,1188(sp)
 800f560:	d9811b17 	ldw	r6,1132(sp)
 800f564:	da812315 	stw	r10,1164(sp)
 800f568:	00c001c4 	movi	r3,7
 800f56c:	da412515 	stw	r9,1172(sp)
 800f570:	db812815 	stw	r14,1184(sp)
 800f574:	3821883a 	mov	r16,r7
 800f578:	00000506 	br	800f590 <___vfiprintf_internal_r+0x474>
 800f57c:	31400084 	addi	r5,r6,2
 800f580:	42000204 	addi	r8,r8,8
 800f584:	200d883a 	mov	r6,r4
 800f588:	843ffc04 	addi	r16,r16,-16
 800f58c:	64000d0e 	bge	r12,r16,800f5c4 <___vfiprintf_internal_r+0x4a8>
 800f590:	10800404 	addi	r2,r2,16
 800f594:	31000044 	addi	r4,r6,1
 800f598:	47000015 	stw	fp,0(r8)
 800f59c:	43000115 	stw	r12,4(r8)
 800f5a0:	d8811c15 	stw	r2,1136(sp)
 800f5a4:	d9011b15 	stw	r4,1132(sp)
 800f5a8:	193ff40e 	bge	r3,r4,800f57c <__alt_data_end+0xfc00f57c>
 800f5ac:	1001b51e 	bne	r2,zero,800fc84 <___vfiprintf_internal_r+0xb68>
 800f5b0:	843ffc04 	addi	r16,r16,-16
 800f5b4:	000d883a 	mov	r6,zero
 800f5b8:	01400044 	movi	r5,1
 800f5bc:	d811883a 	mov	r8,sp
 800f5c0:	643ff316 	blt	r12,r16,800f590 <__alt_data_end+0xfc00f590>
 800f5c4:	800f883a 	mov	r7,r16
 800f5c8:	da412517 	ldw	r9,1172(sp)
 800f5cc:	db812817 	ldw	r14,1184(sp)
 800f5d0:	dc012917 	ldw	r16,1188(sp)
 800f5d4:	dac12317 	ldw	r11,1164(sp)
 800f5d8:	3887883a 	add	r3,r7,r2
 800f5dc:	41c00115 	stw	r7,4(r8)
 800f5e0:	42c00015 	stw	r11,0(r8)
 800f5e4:	d8c11c15 	stw	r3,1136(sp)
 800f5e8:	d9411b15 	stw	r5,1132(sp)
 800f5ec:	008001c4 	movi	r2,7
 800f5f0:	11429316 	blt	r2,r5,8010040 <___vfiprintf_internal_r+0xf24>
 800f5f4:	d9011d87 	ldb	r4,1142(sp)
 800f5f8:	42000204 	addi	r8,r8,8
 800f5fc:	28800044 	addi	r2,r5,1
 800f600:	2001b31e 	bne	r4,zero,800fcd0 <___vfiprintf_internal_r+0xbb4>
 800f604:	70000c26 	beq	r14,zero,800f638 <___vfiprintf_internal_r+0x51c>
 800f608:	d9011d04 	addi	r4,sp,1140
 800f60c:	18c00084 	addi	r3,r3,2
 800f610:	41000015 	stw	r4,0(r8)
 800f614:	01000084 	movi	r4,2
 800f618:	41000115 	stw	r4,4(r8)
 800f61c:	d8c11c15 	stw	r3,1136(sp)
 800f620:	d8811b15 	stw	r2,1132(sp)
 800f624:	010001c4 	movi	r4,7
 800f628:	20826516 	blt	r4,r2,800ffc0 <___vfiprintf_internal_r+0xea4>
 800f62c:	100b883a 	mov	r5,r2
 800f630:	42000204 	addi	r8,r8,8
 800f634:	10800044 	addi	r2,r2,1
 800f638:	01002004 	movi	r4,128
 800f63c:	b1021a26 	beq	r22,r4,800fea8 <___vfiprintf_internal_r+0xd8c>
 800f640:	4c6dc83a 	sub	r22,r9,r17
 800f644:	0580230e 	bge	zero,r22,800f6d4 <___vfiprintf_internal_r+0x5b8>
 800f648:	01c00404 	movi	r7,16
 800f64c:	3d83300e 	bge	r7,r22,8010310 <___vfiprintf_internal_r+0x11f4>
 800f650:	008200b4 	movhi	r2,2050
 800f654:	1081ae04 	addi	r2,r2,1720
 800f658:	d8812315 	stw	r2,1164(sp)
 800f65c:	030001c4 	movi	r12,7
 800f660:	00000506 	br	800f678 <___vfiprintf_internal_r+0x55c>
 800f664:	28800084 	addi	r2,r5,2
 800f668:	42000204 	addi	r8,r8,8
 800f66c:	200b883a 	mov	r5,r4
 800f670:	b5bffc04 	addi	r22,r22,-16
 800f674:	3d800d0e 	bge	r7,r22,800f6ac <___vfiprintf_internal_r+0x590>
 800f678:	18c00404 	addi	r3,r3,16
 800f67c:	29000044 	addi	r4,r5,1
 800f680:	45c00015 	stw	r23,0(r8)
 800f684:	41c00115 	stw	r7,4(r8)
 800f688:	d8c11c15 	stw	r3,1136(sp)
 800f68c:	d9011b15 	stw	r4,1132(sp)
 800f690:	613ff40e 	bge	r12,r4,800f664 <__alt_data_end+0xfc00f664>
 800f694:	18019b1e 	bne	r3,zero,800fd04 <___vfiprintf_internal_r+0xbe8>
 800f698:	b5bffc04 	addi	r22,r22,-16
 800f69c:	000b883a 	mov	r5,zero
 800f6a0:	00800044 	movi	r2,1
 800f6a4:	d811883a 	mov	r8,sp
 800f6a8:	3dbff316 	blt	r7,r22,800f678 <__alt_data_end+0xfc00f678>
 800f6ac:	da812317 	ldw	r10,1164(sp)
 800f6b0:	1d87883a 	add	r3,r3,r22
 800f6b4:	45800115 	stw	r22,4(r8)
 800f6b8:	42800015 	stw	r10,0(r8)
 800f6bc:	d8c11c15 	stw	r3,1136(sp)
 800f6c0:	d8811b15 	stw	r2,1132(sp)
 800f6c4:	010001c4 	movi	r4,7
 800f6c8:	2081dd16 	blt	r4,r2,800fe40 <___vfiprintf_internal_r+0xd24>
 800f6cc:	42000204 	addi	r8,r8,8
 800f6d0:	10800044 	addi	r2,r2,1
 800f6d4:	da812417 	ldw	r10,1168(sp)
 800f6d8:	1c47883a 	add	r3,r3,r17
 800f6dc:	44400115 	stw	r17,4(r8)
 800f6e0:	42800015 	stw	r10,0(r8)
 800f6e4:	d8c11c15 	stw	r3,1136(sp)
 800f6e8:	d8811b15 	stw	r2,1132(sp)
 800f6ec:	010001c4 	movi	r4,7
 800f6f0:	2081dc0e 	bge	r4,r2,800fe64 <___vfiprintf_internal_r+0xd48>
 800f6f4:	1802611e 	bne	r3,zero,801007c <___vfiprintf_internal_r+0xf60>
 800f6f8:	d8011b15 	stw	zero,1132(sp)
 800f6fc:	aac0010c 	andi	r11,r21,4
 800f700:	58002726 	beq	r11,zero,800f7a0 <___vfiprintf_internal_r+0x684>
 800f704:	9ca3c83a 	sub	r17,r19,r18
 800f708:	d811883a 	mov	r8,sp
 800f70c:	0443510e 	bge	zero,r17,8010454 <___vfiprintf_internal_r+0x1338>
 800f710:	01c00404 	movi	r7,16
 800f714:	3c43320e 	bge	r7,r17,80103e0 <___vfiprintf_internal_r+0x12c4>
 800f718:	008200b4 	movhi	r2,2050
 800f71c:	1081b204 	addi	r2,r2,1736
 800f720:	d9011b17 	ldw	r4,1132(sp)
 800f724:	d8812315 	stw	r2,1164(sp)
 800f728:	382d883a 	mov	r22,r7
 800f72c:	054001c4 	movi	r21,7
 800f730:	00000506 	br	800f748 <___vfiprintf_internal_r+0x62c>
 800f734:	21400084 	addi	r5,r4,2
 800f738:	42000204 	addi	r8,r8,8
 800f73c:	1009883a 	mov	r4,r2
 800f740:	8c7ffc04 	addi	r17,r17,-16
 800f744:	b4400d0e 	bge	r22,r17,800f77c <___vfiprintf_internal_r+0x660>
 800f748:	18c00404 	addi	r3,r3,16
 800f74c:	20800044 	addi	r2,r4,1
 800f750:	47000015 	stw	fp,0(r8)
 800f754:	45800115 	stw	r22,4(r8)
 800f758:	d8c11c15 	stw	r3,1136(sp)
 800f75c:	d8811b15 	stw	r2,1132(sp)
 800f760:	a8bff40e 	bge	r21,r2,800f734 <__alt_data_end+0xfc00f734>
 800f764:	1801ac1e 	bne	r3,zero,800fe18 <___vfiprintf_internal_r+0xcfc>
 800f768:	8c7ffc04 	addi	r17,r17,-16
 800f76c:	0009883a 	mov	r4,zero
 800f770:	01400044 	movi	r5,1
 800f774:	d811883a 	mov	r8,sp
 800f778:	b47ff316 	blt	r22,r17,800f748 <__alt_data_end+0xfc00f748>
 800f77c:	da812317 	ldw	r10,1164(sp)
 800f780:	1c47883a 	add	r3,r3,r17
 800f784:	44400115 	stw	r17,4(r8)
 800f788:	42800015 	stw	r10,0(r8)
 800f78c:	d8c11c15 	stw	r3,1136(sp)
 800f790:	d9411b15 	stw	r5,1132(sp)
 800f794:	008001c4 	movi	r2,7
 800f798:	1141b70e 	bge	r2,r5,800fe78 <___vfiprintf_internal_r+0xd5c>
 800f79c:	1802cf1e 	bne	r3,zero,80102dc <___vfiprintf_internal_r+0x11c0>
 800f7a0:	94c2ca16 	blt	r18,r19,80102cc <___vfiprintf_internal_r+0x11b0>
 800f7a4:	dac12217 	ldw	r11,1160(sp)
 800f7a8:	5c97883a 	add	r11,r11,r18
 800f7ac:	dac12215 	stw	r11,1160(sp)
 800f7b0:	d8011b15 	stw	zero,1132(sp)
 800f7b4:	d811883a 	mov	r8,sp
 800f7b8:	003e8d06 	br	800f1f0 <__alt_data_end+0xfc00f1f0>
 800f7bc:	d9012017 	ldw	r4,1152(sp)
 800f7c0:	a00b883a 	mov	r5,r20
 800f7c4:	80093400 	call	8009340 <__swsetup_r>
 800f7c8:	10002c1e 	bne	r2,zero,800f87c <___vfiprintf_internal_r+0x760>
 800f7cc:	a0c0030b 	ldhu	r3,12(r20)
 800f7d0:	01000284 	movi	r4,10
 800f7d4:	1805883a 	mov	r2,r3
 800f7d8:	1080068c 	andi	r2,r2,26
 800f7dc:	113e731e 	bne	r2,r4,800f1ac <__alt_data_end+0xfc00f1ac>
 800f7e0:	a080038b 	ldhu	r2,14(r20)
 800f7e4:	113fffcc 	andi	r4,r2,65535
 800f7e8:	2120001c 	xori	r4,r4,32768
 800f7ec:	21200004 	addi	r4,r4,-32768
 800f7f0:	203e6e16 	blt	r4,zero,800f1ac <__alt_data_end+0xfc00f1ac>
 800f7f4:	a3001917 	ldw	r12,100(r20)
 800f7f8:	a2c00717 	ldw	r11,28(r20)
 800f7fc:	a2800917 	ldw	r10,36(r20)
 800f800:	d9012017 	ldw	r4,1152(sp)
 800f804:	d9c12117 	ldw	r7,1156(sp)
 800f808:	02410004 	movi	r9,1024
 800f80c:	18ffff4c 	andi	r3,r3,65533
 800f810:	da4b883a 	add	r5,sp,r9
 800f814:	b00d883a 	mov	r6,r22
 800f818:	d8c1030d 	sth	r3,1036(sp)
 800f81c:	db011915 	stw	r12,1124(sp)
 800f820:	d881038d 	sth	r2,1038(sp)
 800f824:	dac10715 	stw	r11,1052(sp)
 800f828:	da810915 	stw	r10,1060(sp)
 800f82c:	dec10015 	stw	sp,1024(sp)
 800f830:	dec10415 	stw	sp,1040(sp)
 800f834:	da410215 	stw	r9,1032(sp)
 800f838:	da410515 	stw	r9,1044(sp)
 800f83c:	d8010615 	stw	zero,1048(sp)
 800f840:	800f11c0 	call	800f11c <___vfiprintf_internal_r>
 800f844:	1021883a 	mov	r16,r2
 800f848:	10000416 	blt	r2,zero,800f85c <___vfiprintf_internal_r+0x740>
 800f84c:	d9012017 	ldw	r4,1152(sp)
 800f850:	d9410004 	addi	r5,sp,1024
 800f854:	800ad980 	call	800ad98 <_fflush_r>
 800f858:	1002fc1e 	bne	r2,zero,801044c <___vfiprintf_internal_r+0x1330>
 800f85c:	d881030b 	ldhu	r2,1036(sp)
 800f860:	1080100c 	andi	r2,r2,64
 800f864:	10000326 	beq	r2,zero,800f874 <___vfiprintf_internal_r+0x758>
 800f868:	a080030b 	ldhu	r2,12(r20)
 800f86c:	10801014 	ori	r2,r2,64
 800f870:	a080030d 	sth	r2,12(r20)
 800f874:	8005883a 	mov	r2,r16
 800f878:	00000106 	br	800f880 <___vfiprintf_internal_r+0x764>
 800f87c:	00bfffc4 	movi	r2,-1
 800f880:	dfc13517 	ldw	ra,1236(sp)
 800f884:	df013417 	ldw	fp,1232(sp)
 800f888:	ddc13317 	ldw	r23,1228(sp)
 800f88c:	dd813217 	ldw	r22,1224(sp)
 800f890:	dd413117 	ldw	r21,1220(sp)
 800f894:	dd013017 	ldw	r20,1216(sp)
 800f898:	dcc12f17 	ldw	r19,1212(sp)
 800f89c:	dc812e17 	ldw	r18,1208(sp)
 800f8a0:	dc412d17 	ldw	r17,1204(sp)
 800f8a4:	dc012c17 	ldw	r16,1200(sp)
 800f8a8:	dec13604 	addi	sp,sp,1240
 800f8ac:	f800283a 	ret
 800f8b0:	800b3400 	call	800b340 <__sinit>
 800f8b4:	003e2b06 	br	800f164 <__alt_data_end+0xfc00f164>
 800f8b8:	04e7c83a 	sub	r19,zero,r19
 800f8bc:	d8812115 	stw	r2,1156(sp)
 800f8c0:	ad400114 	ori	r21,r21,4
 800f8c4:	80c00007 	ldb	r3,0(r16)
 800f8c8:	003e7306 	br	800f298 <__alt_data_end+0xfc00f298>
 800f8cc:	a880040c 	andi	r2,r21,16
 800f8d0:	1000e41e 	bne	r2,zero,800fc64 <___vfiprintf_internal_r+0xb48>
 800f8d4:	a880100c 	andi	r2,r21,64
 800f8d8:	1000e226 	beq	r2,zero,800fc64 <___vfiprintf_internal_r+0xb48>
 800f8dc:	da812117 	ldw	r10,1156(sp)
 800f8e0:	002d883a 	mov	r22,zero
 800f8e4:	0005883a 	mov	r2,zero
 800f8e8:	5480000b 	ldhu	r18,0(r10)
 800f8ec:	52800104 	addi	r10,r10,4
 800f8f0:	da812115 	stw	r10,1156(sp)
 800f8f4:	9009883a 	mov	r4,r18
 800f8f8:	003ee706 	br	800f498 <__alt_data_end+0xfc00f498>
 800f8fc:	da812117 	ldw	r10,1156(sp)
 800f900:	00800044 	movi	r2,1
 800f904:	54800017 	ldw	r18,0(r10)
 800f908:	55800117 	ldw	r22,4(r10)
 800f90c:	52800204 	addi	r10,r10,8
 800f910:	da812115 	stw	r10,1156(sp)
 800f914:	9588b03a 	or	r4,r18,r22
 800f918:	003edf06 	br	800f498 <__alt_data_end+0xfc00f498>
 800f91c:	02c200b4 	movhi	r11,2050
 800f920:	5ac13904 	addi	r11,r11,1252
 800f924:	d9811d85 	stb	r6,1142(sp)
 800f928:	dac12615 	stw	r11,1176(sp)
 800f92c:	a900080c 	andi	r4,r21,32
 800f930:	d8812117 	ldw	r2,1156(sp)
 800f934:	2000a526 	beq	r4,zero,800fbcc <___vfiprintf_internal_r+0xab0>
 800f938:	da812117 	ldw	r10,1156(sp)
 800f93c:	14800017 	ldw	r18,0(r2)
 800f940:	15800117 	ldw	r22,4(r2)
 800f944:	52800204 	addi	r10,r10,8
 800f948:	da812115 	stw	r10,1156(sp)
 800f94c:	a880004c 	andi	r2,r21,1
 800f950:	1001d926 	beq	r2,zero,80100b8 <___vfiprintf_internal_r+0xf9c>
 800f954:	9588b03a 	or	r4,r18,r22
 800f958:	20024426 	beq	r4,zero,801026c <___vfiprintf_internal_r+0x1150>
 800f95c:	00800c04 	movi	r2,48
 800f960:	d8811d05 	stb	r2,1140(sp)
 800f964:	d8c11d45 	stb	r3,1141(sp)
 800f968:	ad400094 	ori	r21,r21,2
 800f96c:	00800084 	movi	r2,2
 800f970:	003ec906 	br	800f498 <__alt_data_end+0xfc00f498>
 800f974:	da812117 	ldw	r10,1156(sp)
 800f978:	04800044 	movi	r18,1
 800f97c:	dac10004 	addi	r11,sp,1024
 800f980:	50800017 	ldw	r2,0(r10)
 800f984:	52800104 	addi	r10,r10,4
 800f988:	d8011d85 	stb	zero,1142(sp)
 800f98c:	d8810005 	stb	r2,1024(sp)
 800f990:	da812115 	stw	r10,1156(sp)
 800f994:	9023883a 	mov	r17,r18
 800f998:	dac12415 	stw	r11,1168(sp)
 800f99c:	0013883a 	mov	r9,zero
 800f9a0:	003ee206 	br	800f52c <__alt_data_end+0xfc00f52c>
 800f9a4:	ad402014 	ori	r21,r21,128
 800f9a8:	80c00007 	ldb	r3,0(r16)
 800f9ac:	003e3a06 	br	800f298 <__alt_data_end+0xfc00f298>
 800f9b0:	8015883a 	mov	r10,r16
 800f9b4:	0027883a 	mov	r19,zero
 800f9b8:	18bff404 	addi	r2,r3,-48
 800f9bc:	50c00007 	ldb	r3,0(r10)
 800f9c0:	9cc002a4 	muli	r19,r19,10
 800f9c4:	84000044 	addi	r16,r16,1
 800f9c8:	8015883a 	mov	r10,r16
 800f9cc:	98a7883a 	add	r19,r19,r2
 800f9d0:	18bff404 	addi	r2,r3,-48
 800f9d4:	28bff92e 	bgeu	r5,r2,800f9bc <__alt_data_end+0xfc00f9bc>
 800f9d8:	003e3006 	br	800f29c <__alt_data_end+0xfc00f29c>
 800f9dc:	ad400414 	ori	r21,r21,16
 800f9e0:	d9811d85 	stb	r6,1142(sp)
 800f9e4:	a880080c 	andi	r2,r21,32
 800f9e8:	d8c12117 	ldw	r3,1156(sp)
 800f9ec:	10004b26 	beq	r2,zero,800fb1c <___vfiprintf_internal_r+0xa00>
 800f9f0:	da812117 	ldw	r10,1156(sp)
 800f9f4:	18800117 	ldw	r2,4(r3)
 800f9f8:	1c800017 	ldw	r18,0(r3)
 800f9fc:	52800204 	addi	r10,r10,8
 800fa00:	da812115 	stw	r10,1156(sp)
 800fa04:	102d883a 	mov	r22,r2
 800fa08:	1001f116 	blt	r2,zero,80101d0 <___vfiprintf_internal_r+0x10b4>
 800fa0c:	db011d83 	ldbu	r12,1142(sp)
 800fa10:	4823883a 	mov	r17,r9
 800fa14:	00800044 	movi	r2,1
 800fa18:	9588b03a 	or	r4,r18,r22
 800fa1c:	003ea106 	br	800f4a4 <__alt_data_end+0xfc00f4a4>
 800fa20:	80c00007 	ldb	r3,0(r16)
 800fa24:	82800044 	addi	r10,r16,1
 800fa28:	1b027f26 	beq	r3,r12,8010428 <___vfiprintf_internal_r+0x130c>
 800fa2c:	18bff404 	addi	r2,r3,-48
 800fa30:	5021883a 	mov	r16,r10
 800fa34:	0013883a 	mov	r9,zero
 800fa38:	28be1836 	bltu	r5,r2,800f29c <__alt_data_end+0xfc00f29c>
 800fa3c:	80c00007 	ldb	r3,0(r16)
 800fa40:	4a4002a4 	muli	r9,r9,10
 800fa44:	84000044 	addi	r16,r16,1
 800fa48:	1253883a 	add	r9,r2,r9
 800fa4c:	18bff404 	addi	r2,r3,-48
 800fa50:	28bffa2e 	bgeu	r5,r2,800fa3c <__alt_data_end+0xfc00fa3c>
 800fa54:	483e110e 	bge	r9,zero,800f29c <__alt_data_end+0xfc00f29c>
 800fa58:	027fffc4 	movi	r9,-1
 800fa5c:	003e0f06 	br	800f29c <__alt_data_end+0xfc00f29c>
 800fa60:	d9811d85 	stb	r6,1142(sp)
 800fa64:	a880080c 	andi	r2,r21,32
 800fa68:	1001ee26 	beq	r2,zero,8010224 <___vfiprintf_internal_r+0x1108>
 800fa6c:	da812117 	ldw	r10,1156(sp)
 800fa70:	dac12217 	ldw	r11,1160(sp)
 800fa74:	50800017 	ldw	r2,0(r10)
 800fa78:	5807d7fa 	srai	r3,r11,31
 800fa7c:	52800104 	addi	r10,r10,4
 800fa80:	da812115 	stw	r10,1156(sp)
 800fa84:	12c00015 	stw	r11,0(r2)
 800fa88:	10c00115 	stw	r3,4(r2)
 800fa8c:	003dd806 	br	800f1f0 <__alt_data_end+0xfc00f1f0>
 800fa90:	30803fcc 	andi	r2,r6,255
 800fa94:	1080201c 	xori	r2,r2,128
 800fa98:	10bfe004 	addi	r2,r2,-128
 800fa9c:	1001df1e 	bne	r2,zero,801021c <___vfiprintf_internal_r+0x1100>
 800faa0:	01800804 	movi	r6,32
 800faa4:	80c00007 	ldb	r3,0(r16)
 800faa8:	003dfb06 	br	800f298 <__alt_data_end+0xfc00f298>
 800faac:	da812117 	ldw	r10,1156(sp)
 800fab0:	dac12117 	ldw	r11,1156(sp)
 800fab4:	d8011d85 	stb	zero,1142(sp)
 800fab8:	52800017 	ldw	r10,0(r10)
 800fabc:	5d800104 	addi	r22,r11,4
 800fac0:	da812415 	stw	r10,1168(sp)
 800fac4:	50023b26 	beq	r10,zero,80103b4 <___vfiprintf_internal_r+0x1298>
 800fac8:	d9012417 	ldw	r4,1168(sp)
 800facc:	48021f16 	blt	r9,zero,801034c <___vfiprintf_internal_r+0x1230>
 800fad0:	480d883a 	mov	r6,r9
 800fad4:	000b883a 	mov	r5,zero
 800fad8:	da012a15 	stw	r8,1192(sp)
 800fadc:	da412b15 	stw	r9,1196(sp)
 800fae0:	800c0500 	call	800c050 <memchr>
 800fae4:	da012a17 	ldw	r8,1192(sp)
 800fae8:	da412b17 	ldw	r9,1196(sp)
 800faec:	10024726 	beq	r2,zero,801040c <___vfiprintf_internal_r+0x12f0>
 800faf0:	d8c12417 	ldw	r3,1168(sp)
 800faf4:	10e3c83a 	sub	r17,r2,r3
 800faf8:	4c41f616 	blt	r9,r17,80102d4 <___vfiprintf_internal_r+0x11b8>
 800fafc:	db011d83 	ldbu	r12,1142(sp)
 800fb00:	dd812115 	stw	r22,1156(sp)
 800fb04:	0013883a 	mov	r9,zero
 800fb08:	003e8006 	br	800f50c <__alt_data_end+0xfc00f50c>
 800fb0c:	d9811d85 	stb	r6,1142(sp)
 800fb10:	a880080c 	andi	r2,r21,32
 800fb14:	d8c12117 	ldw	r3,1156(sp)
 800fb18:	103fb51e 	bne	r2,zero,800f9f0 <__alt_data_end+0xfc00f9f0>
 800fb1c:	a880040c 	andi	r2,r21,16
 800fb20:	10015e1e 	bne	r2,zero,801009c <___vfiprintf_internal_r+0xf80>
 800fb24:	a880100c 	andi	r2,r21,64
 800fb28:	10015c26 	beq	r2,zero,801009c <___vfiprintf_internal_r+0xf80>
 800fb2c:	1c80000f 	ldh	r18,0(r3)
 800fb30:	da812117 	ldw	r10,1156(sp)
 800fb34:	902dd7fa 	srai	r22,r18,31
 800fb38:	52800104 	addi	r10,r10,4
 800fb3c:	da812115 	stw	r10,1156(sp)
 800fb40:	b005883a 	mov	r2,r22
 800fb44:	003fb006 	br	800fa08 <__alt_data_end+0xfc00fa08>
 800fb48:	da812117 	ldw	r10,1156(sp)
 800fb4c:	00800c04 	movi	r2,48
 800fb50:	02c200b4 	movhi	r11,2050
 800fb54:	54800017 	ldw	r18,0(r10)
 800fb58:	d8811d05 	stb	r2,1140(sp)
 800fb5c:	52800104 	addi	r10,r10,4
 800fb60:	00801e04 	movi	r2,120
 800fb64:	5ac13e04 	addi	r11,r11,1272
 800fb68:	d8811d45 	stb	r2,1141(sp)
 800fb6c:	002d883a 	mov	r22,zero
 800fb70:	ad400094 	ori	r21,r21,2
 800fb74:	da812115 	stw	r10,1156(sp)
 800fb78:	dac12615 	stw	r11,1176(sp)
 800fb7c:	00800084 	movi	r2,2
 800fb80:	9009883a 	mov	r4,r18
 800fb84:	003e4406 	br	800f498 <__alt_data_end+0xfc00f498>
 800fb88:	ad400814 	ori	r21,r21,32
 800fb8c:	80c00007 	ldb	r3,0(r16)
 800fb90:	003dc106 	br	800f298 <__alt_data_end+0xfc00f298>
 800fb94:	ad401014 	ori	r21,r21,64
 800fb98:	80c00007 	ldb	r3,0(r16)
 800fb9c:	003dbe06 	br	800f298 <__alt_data_end+0xfc00f298>
 800fba0:	80c00007 	ldb	r3,0(r16)
 800fba4:	19c1de26 	beq	r3,r7,8010320 <___vfiprintf_internal_r+0x1204>
 800fba8:	ad400414 	ori	r21,r21,16
 800fbac:	003dba06 	br	800f298 <__alt_data_end+0xfc00f298>
 800fbb0:	008200b4 	movhi	r2,2050
 800fbb4:	10813e04 	addi	r2,r2,1272
 800fbb8:	d8812615 	stw	r2,1176(sp)
 800fbbc:	d9811d85 	stb	r6,1142(sp)
 800fbc0:	a900080c 	andi	r4,r21,32
 800fbc4:	d8812117 	ldw	r2,1156(sp)
 800fbc8:	203f5b1e 	bne	r4,zero,800f938 <__alt_data_end+0xfc00f938>
 800fbcc:	a900040c 	andi	r4,r21,16
 800fbd0:	2001a826 	beq	r4,zero,8010274 <___vfiprintf_internal_r+0x1158>
 800fbd4:	dac12117 	ldw	r11,1156(sp)
 800fbd8:	14800017 	ldw	r18,0(r2)
 800fbdc:	002d883a 	mov	r22,zero
 800fbe0:	5ac00104 	addi	r11,r11,4
 800fbe4:	dac12115 	stw	r11,1156(sp)
 800fbe8:	003f5806 	br	800f94c <__alt_data_end+0xfc00f94c>
 800fbec:	da812117 	ldw	r10,1156(sp)
 800fbf0:	54c00017 	ldw	r19,0(r10)
 800fbf4:	50800104 	addi	r2,r10,4
 800fbf8:	983f2f16 	blt	r19,zero,800f8b8 <__alt_data_end+0xfc00f8b8>
 800fbfc:	d8812115 	stw	r2,1156(sp)
 800fc00:	80c00007 	ldb	r3,0(r16)
 800fc04:	003da406 	br	800f298 <__alt_data_end+0xfc00f298>
 800fc08:	01800ac4 	movi	r6,43
 800fc0c:	80c00007 	ldb	r3,0(r16)
 800fc10:	003da106 	br	800f298 <__alt_data_end+0xfc00f298>
 800fc14:	ad400054 	ori	r21,r21,1
 800fc18:	80c00007 	ldb	r3,0(r16)
 800fc1c:	003d9e06 	br	800f298 <__alt_data_end+0xfc00f298>
 800fc20:	d9811d85 	stb	r6,1142(sp)
 800fc24:	18007126 	beq	r3,zero,800fdec <___vfiprintf_internal_r+0xcd0>
 800fc28:	04800044 	movi	r18,1
 800fc2c:	d8c10005 	stb	r3,1024(sp)
 800fc30:	d8c10004 	addi	r3,sp,1024
 800fc34:	d8011d85 	stb	zero,1142(sp)
 800fc38:	9023883a 	mov	r17,r18
 800fc3c:	d8c12415 	stw	r3,1168(sp)
 800fc40:	003f5606 	br	800f99c <__alt_data_end+0xfc00f99c>
 800fc44:	dac12117 	ldw	r11,1156(sp)
 800fc48:	002d883a 	mov	r22,zero
 800fc4c:	00800044 	movi	r2,1
 800fc50:	5c800017 	ldw	r18,0(r11)
 800fc54:	5ac00104 	addi	r11,r11,4
 800fc58:	dac12115 	stw	r11,1156(sp)
 800fc5c:	9009883a 	mov	r4,r18
 800fc60:	003e0d06 	br	800f498 <__alt_data_end+0xfc00f498>
 800fc64:	dac12117 	ldw	r11,1156(sp)
 800fc68:	002d883a 	mov	r22,zero
 800fc6c:	0005883a 	mov	r2,zero
 800fc70:	5c800017 	ldw	r18,0(r11)
 800fc74:	5ac00104 	addi	r11,r11,4
 800fc78:	dac12115 	stw	r11,1156(sp)
 800fc7c:	9009883a 	mov	r4,r18
 800fc80:	003e0506 	br	800f498 <__alt_data_end+0xfc00f498>
 800fc84:	d9012017 	ldw	r4,1152(sp)
 800fc88:	a00b883a 	mov	r5,r20
 800fc8c:	d9811a04 	addi	r6,sp,1128
 800fc90:	d8c12a15 	stw	r3,1192(sp)
 800fc94:	db012b15 	stw	r12,1196(sp)
 800fc98:	800f0080 	call	800f008 <__sprint_r.part.0>
 800fc9c:	d8c12a17 	ldw	r3,1192(sp)
 800fca0:	db012b17 	ldw	r12,1196(sp)
 800fca4:	1000571e 	bne	r2,zero,800fe04 <___vfiprintf_internal_r+0xce8>
 800fca8:	d9811b17 	ldw	r6,1132(sp)
 800fcac:	d8811c17 	ldw	r2,1136(sp)
 800fcb0:	d811883a 	mov	r8,sp
 800fcb4:	31400044 	addi	r5,r6,1
 800fcb8:	003e3306 	br	800f588 <__alt_data_end+0xfc00f588>
 800fcbc:	d9411b17 	ldw	r5,1132(sp)
 800fcc0:	d8c11c17 	ldw	r3,1136(sp)
 800fcc4:	28800044 	addi	r2,r5,1
 800fcc8:	d9011d87 	ldb	r4,1142(sp)
 800fccc:	203e4d26 	beq	r4,zero,800f604 <__alt_data_end+0xfc00f604>
 800fcd0:	01000044 	movi	r4,1
 800fcd4:	d9411d84 	addi	r5,sp,1142
 800fcd8:	1907883a 	add	r3,r3,r4
 800fcdc:	41400015 	stw	r5,0(r8)
 800fce0:	41000115 	stw	r4,4(r8)
 800fce4:	d8c11c15 	stw	r3,1136(sp)
 800fce8:	d8811b15 	stw	r2,1132(sp)
 800fcec:	014001c4 	movi	r5,7
 800fcf0:	2880aa16 	blt	r5,r2,800ff9c <___vfiprintf_internal_r+0xe80>
 800fcf4:	100b883a 	mov	r5,r2
 800fcf8:	42000204 	addi	r8,r8,8
 800fcfc:	10800044 	addi	r2,r2,1
 800fd00:	003e4006 	br	800f604 <__alt_data_end+0xfc00f604>
 800fd04:	d9012017 	ldw	r4,1152(sp)
 800fd08:	a00b883a 	mov	r5,r20
 800fd0c:	d9811a04 	addi	r6,sp,1128
 800fd10:	d9c12a15 	stw	r7,1192(sp)
 800fd14:	db012b15 	stw	r12,1196(sp)
 800fd18:	800f0080 	call	800f008 <__sprint_r.part.0>
 800fd1c:	d9c12a17 	ldw	r7,1192(sp)
 800fd20:	db012b17 	ldw	r12,1196(sp)
 800fd24:	1000371e 	bne	r2,zero,800fe04 <___vfiprintf_internal_r+0xce8>
 800fd28:	d9411b17 	ldw	r5,1132(sp)
 800fd2c:	d8c11c17 	ldw	r3,1136(sp)
 800fd30:	d811883a 	mov	r8,sp
 800fd34:	28800044 	addi	r2,r5,1
 800fd38:	003e4d06 	br	800f670 <__alt_data_end+0xfc00f670>
 800fd3c:	10803fcc 	andi	r2,r2,255
 800fd40:	00c00044 	movi	r3,1
 800fd44:	10fddf1e 	bne	r2,r3,800f4c4 <__alt_data_end+0xfc00f4c4>
 800fd48:	b000021e 	bne	r22,zero,800fd54 <___vfiprintf_internal_r+0xc38>
 800fd4c:	00800244 	movi	r2,9
 800fd50:	1480202e 	bgeu	r2,r18,800fdd4 <___vfiprintf_internal_r+0xcb8>
 800fd54:	dc012515 	stw	r16,1172(sp)
 800fd58:	dc410a04 	addi	r17,sp,1064
 800fd5c:	9021883a 	mov	r16,r18
 800fd60:	da012415 	stw	r8,1168(sp)
 800fd64:	b025883a 	mov	r18,r22
 800fd68:	da412315 	stw	r9,1164(sp)
 800fd6c:	602d883a 	mov	r22,r12
 800fd70:	8009883a 	mov	r4,r16
 800fd74:	900b883a 	mov	r5,r18
 800fd78:	01800284 	movi	r6,10
 800fd7c:	000f883a 	mov	r7,zero
 800fd80:	80113940 	call	8011394 <__umoddi3>
 800fd84:	10800c04 	addi	r2,r2,48
 800fd88:	8c7fffc4 	addi	r17,r17,-1
 800fd8c:	8009883a 	mov	r4,r16
 800fd90:	900b883a 	mov	r5,r18
 800fd94:	01800284 	movi	r6,10
 800fd98:	000f883a 	mov	r7,zero
 800fd9c:	88800005 	stb	r2,0(r17)
 800fda0:	8010dd40 	call	8010dd4 <__udivdi3>
 800fda4:	1021883a 	mov	r16,r2
 800fda8:	10c4b03a 	or	r2,r2,r3
 800fdac:	1825883a 	mov	r18,r3
 800fdb0:	103fef1e 	bne	r2,zero,800fd70 <__alt_data_end+0xfc00fd70>
 800fdb4:	da811e17 	ldw	r10,1144(sp)
 800fdb8:	da012417 	ldw	r8,1168(sp)
 800fdbc:	da412317 	ldw	r9,1164(sp)
 800fdc0:	dc412415 	stw	r17,1168(sp)
 800fdc4:	b019883a 	mov	r12,r22
 800fdc8:	dc012517 	ldw	r16,1172(sp)
 800fdcc:	5463c83a 	sub	r17,r10,r17
 800fdd0:	003dce06 	br	800f50c <__alt_data_end+0xfc00f50c>
 800fdd4:	94800c04 	addi	r18,r18,48
 800fdd8:	d8c109c4 	addi	r3,sp,1063
 800fddc:	dc8109c5 	stb	r18,1063(sp)
 800fde0:	dc412717 	ldw	r17,1180(sp)
 800fde4:	d8c12415 	stw	r3,1168(sp)
 800fde8:	003dc806 	br	800f50c <__alt_data_end+0xfc00f50c>
 800fdec:	d8811c17 	ldw	r2,1136(sp)
 800fdf0:	10000426 	beq	r2,zero,800fe04 <___vfiprintf_internal_r+0xce8>
 800fdf4:	d9012017 	ldw	r4,1152(sp)
 800fdf8:	a00b883a 	mov	r5,r20
 800fdfc:	d9811a04 	addi	r6,sp,1128
 800fe00:	800f0080 	call	800f008 <__sprint_r.part.0>
 800fe04:	a080030b 	ldhu	r2,12(r20)
 800fe08:	1080100c 	andi	r2,r2,64
 800fe0c:	103e9b1e 	bne	r2,zero,800f87c <__alt_data_end+0xfc00f87c>
 800fe10:	d8812217 	ldw	r2,1160(sp)
 800fe14:	003e9a06 	br	800f880 <__alt_data_end+0xfc00f880>
 800fe18:	d9012017 	ldw	r4,1152(sp)
 800fe1c:	a00b883a 	mov	r5,r20
 800fe20:	d9811a04 	addi	r6,sp,1128
 800fe24:	800f0080 	call	800f008 <__sprint_r.part.0>
 800fe28:	103ff61e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 800fe2c:	d9011b17 	ldw	r4,1132(sp)
 800fe30:	d8c11c17 	ldw	r3,1136(sp)
 800fe34:	d811883a 	mov	r8,sp
 800fe38:	21400044 	addi	r5,r4,1
 800fe3c:	003e4006 	br	800f740 <__alt_data_end+0xfc00f740>
 800fe40:	1800d61e 	bne	r3,zero,801019c <___vfiprintf_internal_r+0x1080>
 800fe44:	dac12417 	ldw	r11,1168(sp)
 800fe48:	00800044 	movi	r2,1
 800fe4c:	dc400115 	stw	r17,4(sp)
 800fe50:	dac00015 	stw	r11,0(sp)
 800fe54:	dc411c15 	stw	r17,1136(sp)
 800fe58:	d8811b15 	stw	r2,1132(sp)
 800fe5c:	8807883a 	mov	r3,r17
 800fe60:	d811883a 	mov	r8,sp
 800fe64:	42000204 	addi	r8,r8,8
 800fe68:	aac0010c 	andi	r11,r21,4
 800fe6c:	58000226 	beq	r11,zero,800fe78 <___vfiprintf_internal_r+0xd5c>
 800fe70:	9ca3c83a 	sub	r17,r19,r18
 800fe74:	047e2616 	blt	zero,r17,800f710 <__alt_data_end+0xfc00f710>
 800fe78:	94c0010e 	bge	r18,r19,800fe80 <___vfiprintf_internal_r+0xd64>
 800fe7c:	9825883a 	mov	r18,r19
 800fe80:	da812217 	ldw	r10,1160(sp)
 800fe84:	5495883a 	add	r10,r10,r18
 800fe88:	da812215 	stw	r10,1160(sp)
 800fe8c:	183e4826 	beq	r3,zero,800f7b0 <__alt_data_end+0xfc00f7b0>
 800fe90:	d9012017 	ldw	r4,1152(sp)
 800fe94:	a00b883a 	mov	r5,r20
 800fe98:	d9811a04 	addi	r6,sp,1128
 800fe9c:	800f0080 	call	800f008 <__sprint_r.part.0>
 800fea0:	103e4326 	beq	r2,zero,800f7b0 <__alt_data_end+0xfc00f7b0>
 800fea4:	003fd706 	br	800fe04 <__alt_data_end+0xfc00fe04>
 800fea8:	9cadc83a 	sub	r22,r19,r18
 800feac:	05bde40e 	bge	zero,r22,800f640 <__alt_data_end+0xfc00f640>
 800feb0:	03000404 	movi	r12,16
 800feb4:	6581500e 	bge	r12,r22,80103f8 <___vfiprintf_internal_r+0x12dc>
 800feb8:	008200b4 	movhi	r2,2050
 800febc:	1081ae04 	addi	r2,r2,1720
 800fec0:	d8812315 	stw	r2,1164(sp)
 800fec4:	8005883a 	mov	r2,r16
 800fec8:	038001c4 	movi	r14,7
 800fecc:	b021883a 	mov	r16,r22
 800fed0:	da412515 	stw	r9,1172(sp)
 800fed4:	102d883a 	mov	r22,r2
 800fed8:	00000506 	br	800fef0 <___vfiprintf_internal_r+0xdd4>
 800fedc:	29000084 	addi	r4,r5,2
 800fee0:	42000204 	addi	r8,r8,8
 800fee4:	100b883a 	mov	r5,r2
 800fee8:	843ffc04 	addi	r16,r16,-16
 800feec:	64000d0e 	bge	r12,r16,800ff24 <___vfiprintf_internal_r+0xe08>
 800fef0:	18c00404 	addi	r3,r3,16
 800fef4:	28800044 	addi	r2,r5,1
 800fef8:	45c00015 	stw	r23,0(r8)
 800fefc:	43000115 	stw	r12,4(r8)
 800ff00:	d8c11c15 	stw	r3,1136(sp)
 800ff04:	d8811b15 	stw	r2,1132(sp)
 800ff08:	70bff40e 	bge	r14,r2,800fedc <__alt_data_end+0xfc00fedc>
 800ff0c:	1800151e 	bne	r3,zero,800ff64 <___vfiprintf_internal_r+0xe48>
 800ff10:	843ffc04 	addi	r16,r16,-16
 800ff14:	000b883a 	mov	r5,zero
 800ff18:	01000044 	movi	r4,1
 800ff1c:	d811883a 	mov	r8,sp
 800ff20:	643ff316 	blt	r12,r16,800fef0 <__alt_data_end+0xfc00fef0>
 800ff24:	da412517 	ldw	r9,1172(sp)
 800ff28:	b005883a 	mov	r2,r22
 800ff2c:	802d883a 	mov	r22,r16
 800ff30:	1021883a 	mov	r16,r2
 800ff34:	da812317 	ldw	r10,1164(sp)
 800ff38:	1d87883a 	add	r3,r3,r22
 800ff3c:	45800115 	stw	r22,4(r8)
 800ff40:	42800015 	stw	r10,0(r8)
 800ff44:	d8c11c15 	stw	r3,1136(sp)
 800ff48:	d9011b15 	stw	r4,1132(sp)
 800ff4c:	008001c4 	movi	r2,7
 800ff50:	11008d16 	blt	r2,r4,8010188 <___vfiprintf_internal_r+0x106c>
 800ff54:	42000204 	addi	r8,r8,8
 800ff58:	20800044 	addi	r2,r4,1
 800ff5c:	200b883a 	mov	r5,r4
 800ff60:	003db706 	br	800f640 <__alt_data_end+0xfc00f640>
 800ff64:	d9012017 	ldw	r4,1152(sp)
 800ff68:	a00b883a 	mov	r5,r20
 800ff6c:	d9811a04 	addi	r6,sp,1128
 800ff70:	db012b15 	stw	r12,1196(sp)
 800ff74:	db812a15 	stw	r14,1192(sp)
 800ff78:	800f0080 	call	800f008 <__sprint_r.part.0>
 800ff7c:	db012b17 	ldw	r12,1196(sp)
 800ff80:	db812a17 	ldw	r14,1192(sp)
 800ff84:	103f9f1e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 800ff88:	d9411b17 	ldw	r5,1132(sp)
 800ff8c:	d8c11c17 	ldw	r3,1136(sp)
 800ff90:	d811883a 	mov	r8,sp
 800ff94:	29000044 	addi	r4,r5,1
 800ff98:	003fd306 	br	800fee8 <__alt_data_end+0xfc00fee8>
 800ff9c:	18006c1e 	bne	r3,zero,8010150 <___vfiprintf_internal_r+0x1034>
 800ffa0:	70004f26 	beq	r14,zero,80100e0 <___vfiprintf_internal_r+0xfc4>
 800ffa4:	d8811d04 	addi	r2,sp,1140
 800ffa8:	00c00084 	movi	r3,2
 800ffac:	d8800015 	stw	r2,0(sp)
 800ffb0:	d8c00115 	stw	r3,4(sp)
 800ffb4:	2005883a 	mov	r2,r4
 800ffb8:	d811883a 	mov	r8,sp
 800ffbc:	003d9b06 	br	800f62c <__alt_data_end+0xfc00f62c>
 800ffc0:	1800571e 	bne	r3,zero,8010120 <___vfiprintf_internal_r+0x1004>
 800ffc4:	000b883a 	mov	r5,zero
 800ffc8:	00800044 	movi	r2,1
 800ffcc:	d811883a 	mov	r8,sp
 800ffd0:	003d9906 	br	800f638 <__alt_data_end+0xfc00f638>
 800ffd4:	10803fcc 	andi	r2,r2,255
 800ffd8:	1000251e 	bne	r2,zero,8010070 <___vfiprintf_internal_r+0xf54>
 800ffdc:	a880004c 	andi	r2,r21,1
 800ffe0:	10007826 	beq	r2,zero,80101c4 <___vfiprintf_internal_r+0x10a8>
 800ffe4:	00800c04 	movi	r2,48
 800ffe8:	d8c109c4 	addi	r3,sp,1063
 800ffec:	d88109c5 	stb	r2,1063(sp)
 800fff0:	dc412717 	ldw	r17,1180(sp)
 800fff4:	d8c12415 	stw	r3,1168(sp)
 800fff8:	003d4406 	br	800f50c <__alt_data_end+0xfc00f50c>
 800fffc:	d9012617 	ldw	r4,1176(sp)
 8010000:	dc410a04 	addi	r17,sp,1064
 8010004:	908003cc 	andi	r2,r18,15
 8010008:	b006973a 	slli	r3,r22,28
 801000c:	2085883a 	add	r2,r4,r2
 8010010:	9024d13a 	srli	r18,r18,4
 8010014:	10800003 	ldbu	r2,0(r2)
 8010018:	b02cd13a 	srli	r22,r22,4
 801001c:	8c7fffc4 	addi	r17,r17,-1
 8010020:	1ca4b03a 	or	r18,r3,r18
 8010024:	88800005 	stb	r2,0(r17)
 8010028:	9584b03a 	or	r2,r18,r22
 801002c:	103ff51e 	bne	r2,zero,8010004 <__alt_data_end+0xfc010004>
 8010030:	dac11e17 	ldw	r11,1144(sp)
 8010034:	dc412415 	stw	r17,1168(sp)
 8010038:	5c63c83a 	sub	r17,r11,r17
 801003c:	003d3306 	br	800f50c <__alt_data_end+0xfc00f50c>
 8010040:	1800941e 	bne	r3,zero,8010294 <___vfiprintf_internal_r+0x1178>
 8010044:	d8811d87 	ldb	r2,1142(sp)
 8010048:	10006b26 	beq	r2,zero,80101f8 <___vfiprintf_internal_r+0x10dc>
 801004c:	00c00044 	movi	r3,1
 8010050:	d9011d84 	addi	r4,sp,1142
 8010054:	1805883a 	mov	r2,r3
 8010058:	d9000015 	stw	r4,0(sp)
 801005c:	d8c00115 	stw	r3,4(sp)
 8010060:	d811883a 	mov	r8,sp
 8010064:	003f2306 	br	800fcf4 <__alt_data_end+0xfc00fcf4>
 8010068:	8023883a 	mov	r17,r16
 801006c:	003c7d06 	br	800f264 <__alt_data_end+0xfc00f264>
 8010070:	da810a04 	addi	r10,sp,1064
 8010074:	da812415 	stw	r10,1168(sp)
 8010078:	003d2406 	br	800f50c <__alt_data_end+0xfc00f50c>
 801007c:	d9012017 	ldw	r4,1152(sp)
 8010080:	a00b883a 	mov	r5,r20
 8010084:	d9811a04 	addi	r6,sp,1128
 8010088:	800f0080 	call	800f008 <__sprint_r.part.0>
 801008c:	103f5d1e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 8010090:	d8c11c17 	ldw	r3,1136(sp)
 8010094:	d811883a 	mov	r8,sp
 8010098:	003f7306 	br	800fe68 <__alt_data_end+0xfc00fe68>
 801009c:	1c800017 	ldw	r18,0(r3)
 80100a0:	dac12117 	ldw	r11,1156(sp)
 80100a4:	902dd7fa 	srai	r22,r18,31
 80100a8:	5ac00104 	addi	r11,r11,4
 80100ac:	dac12115 	stw	r11,1156(sp)
 80100b0:	b005883a 	mov	r2,r22
 80100b4:	003e5406 	br	800fa08 <__alt_data_end+0xfc00fa08>
 80100b8:	00800084 	movi	r2,2
 80100bc:	9588b03a 	or	r4,r18,r22
 80100c0:	003cf506 	br	800f498 <__alt_data_end+0xfc00f498>
 80100c4:	d9012017 	ldw	r4,1152(sp)
 80100c8:	a00b883a 	mov	r5,r20
 80100cc:	d9811a04 	addi	r6,sp,1128
 80100d0:	800f0080 	call	800f008 <__sprint_r.part.0>
 80100d4:	103f4b1e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 80100d8:	d811883a 	mov	r8,sp
 80100dc:	003cd106 	br	800f424 <__alt_data_end+0xfc00f424>
 80100e0:	000b883a 	mov	r5,zero
 80100e4:	2005883a 	mov	r2,r4
 80100e8:	d811883a 	mov	r8,sp
 80100ec:	003d5206 	br	800f638 <__alt_data_end+0xfc00f638>
 80100f0:	10803fcc 	andi	r2,r2,255
 80100f4:	1080201c 	xori	r2,r2,128
 80100f8:	10bfe004 	addi	r2,r2,-128
 80100fc:	01000c04 	movi	r4,48
 8010100:	11008e26 	beq	r2,r4,801033c <___vfiprintf_internal_r+0x1220>
 8010104:	da812417 	ldw	r10,1168(sp)
 8010108:	dac11e17 	ldw	r11,1144(sp)
 801010c:	193fffc5 	stb	r4,-1(r3)
 8010110:	52bfffc4 	addi	r10,r10,-1
 8010114:	da812415 	stw	r10,1168(sp)
 8010118:	5aa3c83a 	sub	r17,r11,r10
 801011c:	003cfb06 	br	800f50c <__alt_data_end+0xfc00f50c>
 8010120:	d9012017 	ldw	r4,1152(sp)
 8010124:	a00b883a 	mov	r5,r20
 8010128:	d9811a04 	addi	r6,sp,1128
 801012c:	da412b15 	stw	r9,1196(sp)
 8010130:	800f0080 	call	800f008 <__sprint_r.part.0>
 8010134:	da412b17 	ldw	r9,1196(sp)
 8010138:	103f321e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 801013c:	d9411b17 	ldw	r5,1132(sp)
 8010140:	d8c11c17 	ldw	r3,1136(sp)
 8010144:	d811883a 	mov	r8,sp
 8010148:	28800044 	addi	r2,r5,1
 801014c:	003d3a06 	br	800f638 <__alt_data_end+0xfc00f638>
 8010150:	d9012017 	ldw	r4,1152(sp)
 8010154:	a00b883a 	mov	r5,r20
 8010158:	d9811a04 	addi	r6,sp,1128
 801015c:	da412b15 	stw	r9,1196(sp)
 8010160:	db812a15 	stw	r14,1192(sp)
 8010164:	800f0080 	call	800f008 <__sprint_r.part.0>
 8010168:	da412b17 	ldw	r9,1196(sp)
 801016c:	db812a17 	ldw	r14,1192(sp)
 8010170:	103f241e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 8010174:	d9411b17 	ldw	r5,1132(sp)
 8010178:	d8c11c17 	ldw	r3,1136(sp)
 801017c:	d811883a 	mov	r8,sp
 8010180:	28800044 	addi	r2,r5,1
 8010184:	003d1f06 	br	800f604 <__alt_data_end+0xfc00f604>
 8010188:	1800781e 	bne	r3,zero,801036c <___vfiprintf_internal_r+0x1250>
 801018c:	000b883a 	mov	r5,zero
 8010190:	00800044 	movi	r2,1
 8010194:	d811883a 	mov	r8,sp
 8010198:	003d2906 	br	800f640 <__alt_data_end+0xfc00f640>
 801019c:	d9012017 	ldw	r4,1152(sp)
 80101a0:	a00b883a 	mov	r5,r20
 80101a4:	d9811a04 	addi	r6,sp,1128
 80101a8:	800f0080 	call	800f008 <__sprint_r.part.0>
 80101ac:	103f151e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 80101b0:	d8811b17 	ldw	r2,1132(sp)
 80101b4:	d8c11c17 	ldw	r3,1136(sp)
 80101b8:	d811883a 	mov	r8,sp
 80101bc:	10800044 	addi	r2,r2,1
 80101c0:	003d4406 	br	800f6d4 <__alt_data_end+0xfc00f6d4>
 80101c4:	dac10a04 	addi	r11,sp,1064
 80101c8:	dac12415 	stw	r11,1168(sp)
 80101cc:	003ccf06 	br	800f50c <__alt_data_end+0xfc00f50c>
 80101d0:	04a5c83a 	sub	r18,zero,r18
 80101d4:	9004c03a 	cmpne	r2,r18,zero
 80101d8:	05adc83a 	sub	r22,zero,r22
 80101dc:	b0adc83a 	sub	r22,r22,r2
 80101e0:	03000b44 	movi	r12,45
 80101e4:	db011d85 	stb	r12,1142(sp)
 80101e8:	4823883a 	mov	r17,r9
 80101ec:	00800044 	movi	r2,1
 80101f0:	9588b03a 	or	r4,r18,r22
 80101f4:	003cab06 	br	800f4a4 <__alt_data_end+0xfc00f4a4>
 80101f8:	000b883a 	mov	r5,zero
 80101fc:	00800044 	movi	r2,1
 8010200:	d811883a 	mov	r8,sp
 8010204:	703d0c26 	beq	r14,zero,800f638 <__alt_data_end+0xfc00f638>
 8010208:	00c00084 	movi	r3,2
 801020c:	d9011d04 	addi	r4,sp,1140
 8010210:	d9000015 	stw	r4,0(sp)
 8010214:	d8c00115 	stw	r3,4(sp)
 8010218:	003d0406 	br	800f62c <__alt_data_end+0xfc00f62c>
 801021c:	80c00007 	ldb	r3,0(r16)
 8010220:	003c1d06 	br	800f298 <__alt_data_end+0xfc00f298>
 8010224:	a880040c 	andi	r2,r21,16
 8010228:	1000091e 	bne	r2,zero,8010250 <___vfiprintf_internal_r+0x1134>
 801022c:	aac0100c 	andi	r11,r21,64
 8010230:	58000726 	beq	r11,zero,8010250 <___vfiprintf_internal_r+0x1134>
 8010234:	da812117 	ldw	r10,1156(sp)
 8010238:	dac12217 	ldw	r11,1160(sp)
 801023c:	50800017 	ldw	r2,0(r10)
 8010240:	52800104 	addi	r10,r10,4
 8010244:	da812115 	stw	r10,1156(sp)
 8010248:	12c0000d 	sth	r11,0(r2)
 801024c:	003be806 	br	800f1f0 <__alt_data_end+0xfc00f1f0>
 8010250:	da812117 	ldw	r10,1156(sp)
 8010254:	dac12217 	ldw	r11,1160(sp)
 8010258:	50800017 	ldw	r2,0(r10)
 801025c:	52800104 	addi	r10,r10,4
 8010260:	da812115 	stw	r10,1156(sp)
 8010264:	12c00015 	stw	r11,0(r2)
 8010268:	003be106 	br	800f1f0 <__alt_data_end+0xfc00f1f0>
 801026c:	00800084 	movi	r2,2
 8010270:	003c8906 	br	800f498 <__alt_data_end+0xfc00f498>
 8010274:	a900100c 	andi	r4,r21,64
 8010278:	20001f26 	beq	r4,zero,80102f8 <___vfiprintf_internal_r+0x11dc>
 801027c:	da812117 	ldw	r10,1156(sp)
 8010280:	1480000b 	ldhu	r18,0(r2)
 8010284:	002d883a 	mov	r22,zero
 8010288:	52800104 	addi	r10,r10,4
 801028c:	da812115 	stw	r10,1156(sp)
 8010290:	003dae06 	br	800f94c <__alt_data_end+0xfc00f94c>
 8010294:	d9012017 	ldw	r4,1152(sp)
 8010298:	a00b883a 	mov	r5,r20
 801029c:	d9811a04 	addi	r6,sp,1128
 80102a0:	da412b15 	stw	r9,1196(sp)
 80102a4:	db812a15 	stw	r14,1192(sp)
 80102a8:	800f0080 	call	800f008 <__sprint_r.part.0>
 80102ac:	da412b17 	ldw	r9,1196(sp)
 80102b0:	db812a17 	ldw	r14,1192(sp)
 80102b4:	103ed31e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 80102b8:	d9411b17 	ldw	r5,1132(sp)
 80102bc:	d8c11c17 	ldw	r3,1136(sp)
 80102c0:	d811883a 	mov	r8,sp
 80102c4:	28800044 	addi	r2,r5,1
 80102c8:	003e7f06 	br	800fcc8 <__alt_data_end+0xfc00fcc8>
 80102cc:	9825883a 	mov	r18,r19
 80102d0:	003d3406 	br	800f7a4 <__alt_data_end+0xfc00f7a4>
 80102d4:	4823883a 	mov	r17,r9
 80102d8:	003e0806 	br	800fafc <__alt_data_end+0xfc00fafc>
 80102dc:	d9012017 	ldw	r4,1152(sp)
 80102e0:	a00b883a 	mov	r5,r20
 80102e4:	d9811a04 	addi	r6,sp,1128
 80102e8:	800f0080 	call	800f008 <__sprint_r.part.0>
 80102ec:	103ec51e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 80102f0:	d8c11c17 	ldw	r3,1136(sp)
 80102f4:	003ee006 	br	800fe78 <__alt_data_end+0xfc00fe78>
 80102f8:	dac12117 	ldw	r11,1156(sp)
 80102fc:	14800017 	ldw	r18,0(r2)
 8010300:	002d883a 	mov	r22,zero
 8010304:	5ac00104 	addi	r11,r11,4
 8010308:	dac12115 	stw	r11,1156(sp)
 801030c:	003d8f06 	br	800f94c <__alt_data_end+0xfc00f94c>
 8010310:	02c200b4 	movhi	r11,2050
 8010314:	5ac1ae04 	addi	r11,r11,1720
 8010318:	dac12315 	stw	r11,1164(sp)
 801031c:	003ce306 	br	800f6ac <__alt_data_end+0xfc00f6ac>
 8010320:	80c00043 	ldbu	r3,1(r16)
 8010324:	ad400814 	ori	r21,r21,32
 8010328:	84000044 	addi	r16,r16,1
 801032c:	18c03fcc 	andi	r3,r3,255
 8010330:	18c0201c 	xori	r3,r3,128
 8010334:	18ffe004 	addi	r3,r3,-128
 8010338:	003bd706 	br	800f298 <__alt_data_end+0xfc00f298>
 801033c:	dac11e17 	ldw	r11,1144(sp)
 8010340:	d8c12417 	ldw	r3,1168(sp)
 8010344:	58e3c83a 	sub	r17,r11,r3
 8010348:	003c7006 	br	800f50c <__alt_data_end+0xfc00f50c>
 801034c:	da012a15 	stw	r8,1192(sp)
 8010350:	80052f00 	call	80052f0 <strlen>
 8010354:	1023883a 	mov	r17,r2
 8010358:	db011d83 	ldbu	r12,1142(sp)
 801035c:	dd812115 	stw	r22,1156(sp)
 8010360:	0013883a 	mov	r9,zero
 8010364:	da012a17 	ldw	r8,1192(sp)
 8010368:	003c6806 	br	800f50c <__alt_data_end+0xfc00f50c>
 801036c:	d9012017 	ldw	r4,1152(sp)
 8010370:	a00b883a 	mov	r5,r20
 8010374:	d9811a04 	addi	r6,sp,1128
 8010378:	da412b15 	stw	r9,1196(sp)
 801037c:	800f0080 	call	800f008 <__sprint_r.part.0>
 8010380:	da412b17 	ldw	r9,1196(sp)
 8010384:	103e9f1e 	bne	r2,zero,800fe04 <__alt_data_end+0xfc00fe04>
 8010388:	d9411b17 	ldw	r5,1132(sp)
 801038c:	d8c11c17 	ldw	r3,1136(sp)
 8010390:	d811883a 	mov	r8,sp
 8010394:	28800044 	addi	r2,r5,1
 8010398:	003ca906 	br	800f640 <__alt_data_end+0xfc00f640>
 801039c:	d9411b17 	ldw	r5,1132(sp)
 80103a0:	010200b4 	movhi	r4,2050
 80103a4:	2101b204 	addi	r4,r4,1736
 80103a8:	d9012315 	stw	r4,1164(sp)
 80103ac:	29400044 	addi	r5,r5,1
 80103b0:	003c8806 	br	800f5d4 <__alt_data_end+0xfc00f5d4>
 80103b4:	00800184 	movi	r2,6
 80103b8:	1240012e 	bgeu	r2,r9,80103c0 <___vfiprintf_internal_r+0x12a4>
 80103bc:	1013883a 	mov	r9,r2
 80103c0:	4823883a 	mov	r17,r9
 80103c4:	4825883a 	mov	r18,r9
 80103c8:	48001516 	blt	r9,zero,8010420 <___vfiprintf_internal_r+0x1304>
 80103cc:	008200b4 	movhi	r2,2050
 80103d0:	10814304 	addi	r2,r2,1292
 80103d4:	dd812115 	stw	r22,1156(sp)
 80103d8:	d8812415 	stw	r2,1168(sp)
 80103dc:	003d6f06 	br	800f99c <__alt_data_end+0xfc00f99c>
 80103e0:	d9411b17 	ldw	r5,1132(sp)
 80103e4:	02c200b4 	movhi	r11,2050
 80103e8:	5ac1b204 	addi	r11,r11,1736
 80103ec:	dac12315 	stw	r11,1164(sp)
 80103f0:	29400044 	addi	r5,r5,1
 80103f4:	003ce106 	br	800f77c <__alt_data_end+0xfc00f77c>
 80103f8:	010200b4 	movhi	r4,2050
 80103fc:	2101ae04 	addi	r4,r4,1720
 8010400:	d9012315 	stw	r4,1164(sp)
 8010404:	1009883a 	mov	r4,r2
 8010408:	003eca06 	br	800ff34 <__alt_data_end+0xfc00ff34>
 801040c:	4823883a 	mov	r17,r9
 8010410:	db011d83 	ldbu	r12,1142(sp)
 8010414:	dd812115 	stw	r22,1156(sp)
 8010418:	0013883a 	mov	r9,zero
 801041c:	003c3b06 	br	800f50c <__alt_data_end+0xfc00f50c>
 8010420:	0025883a 	mov	r18,zero
 8010424:	003fe906 	br	80103cc <__alt_data_end+0xfc0103cc>
 8010428:	dac12117 	ldw	r11,1156(sp)
 801042c:	8005883a 	mov	r2,r16
 8010430:	5021883a 	mov	r16,r10
 8010434:	5a400017 	ldw	r9,0(r11)
 8010438:	58c00104 	addi	r3,r11,4
 801043c:	d8c12115 	stw	r3,1156(sp)
 8010440:	48000a16 	blt	r9,zero,801046c <___vfiprintf_internal_r+0x1350>
 8010444:	10c00047 	ldb	r3,1(r2)
 8010448:	003b9306 	br	800f298 <__alt_data_end+0xfc00f298>
 801044c:	043fffc4 	movi	r16,-1
 8010450:	003d0206 	br	800f85c <__alt_data_end+0xfc00f85c>
 8010454:	94c0010e 	bge	r18,r19,801045c <___vfiprintf_internal_r+0x1340>
 8010458:	9825883a 	mov	r18,r19
 801045c:	da812217 	ldw	r10,1160(sp)
 8010460:	5495883a 	add	r10,r10,r18
 8010464:	da812215 	stw	r10,1160(sp)
 8010468:	003cd106 	br	800f7b0 <__alt_data_end+0xfc00f7b0>
 801046c:	027fffc4 	movi	r9,-1
 8010470:	10c00047 	ldb	r3,1(r2)
 8010474:	003b8806 	br	800f298 <__alt_data_end+0xfc00f298>

08010478 <__vfiprintf_internal>:
 8010478:	2007883a 	mov	r3,r4
 801047c:	010200b4 	movhi	r4,2050
 8010480:	21088a04 	addi	r4,r4,8744
 8010484:	21000017 	ldw	r4,0(r4)
 8010488:	2805883a 	mov	r2,r5
 801048c:	300f883a 	mov	r7,r6
 8010490:	180b883a 	mov	r5,r3
 8010494:	100d883a 	mov	r6,r2
 8010498:	800f11c1 	jmpi	800f11c <___vfiprintf_internal_r>

0801049c <__swbuf_r>:
 801049c:	defffc04 	addi	sp,sp,-16
 80104a0:	dc800215 	stw	r18,8(sp)
 80104a4:	dc400115 	stw	r17,4(sp)
 80104a8:	dc000015 	stw	r16,0(sp)
 80104ac:	dfc00315 	stw	ra,12(sp)
 80104b0:	2025883a 	mov	r18,r4
 80104b4:	2823883a 	mov	r17,r5
 80104b8:	3021883a 	mov	r16,r6
 80104bc:	20000226 	beq	r4,zero,80104c8 <__swbuf_r+0x2c>
 80104c0:	20800e17 	ldw	r2,56(r4)
 80104c4:	10004126 	beq	r2,zero,80105cc <__swbuf_r+0x130>
 80104c8:	80c00617 	ldw	r3,24(r16)
 80104cc:	8180030b 	ldhu	r6,12(r16)
 80104d0:	80c00215 	stw	r3,8(r16)
 80104d4:	30c0020c 	andi	r3,r6,8
 80104d8:	18003526 	beq	r3,zero,80105b0 <__swbuf_r+0x114>
 80104dc:	80c00417 	ldw	r3,16(r16)
 80104e0:	18003326 	beq	r3,zero,80105b0 <__swbuf_r+0x114>
 80104e4:	3088000c 	andi	r2,r6,8192
 80104e8:	8c403fcc 	andi	r17,r17,255
 80104ec:	10001726 	beq	r2,zero,801054c <__swbuf_r+0xb0>
 80104f0:	80800017 	ldw	r2,0(r16)
 80104f4:	81000517 	ldw	r4,20(r16)
 80104f8:	10c7c83a 	sub	r3,r2,r3
 80104fc:	19001d0e 	bge	r3,r4,8010574 <__swbuf_r+0xd8>
 8010500:	18c00044 	addi	r3,r3,1
 8010504:	81400217 	ldw	r5,8(r16)
 8010508:	11000044 	addi	r4,r2,1
 801050c:	81000015 	stw	r4,0(r16)
 8010510:	297fffc4 	addi	r5,r5,-1
 8010514:	81400215 	stw	r5,8(r16)
 8010518:	14400005 	stb	r17,0(r2)
 801051c:	80800517 	ldw	r2,20(r16)
 8010520:	10c01d26 	beq	r2,r3,8010598 <__swbuf_r+0xfc>
 8010524:	8080030b 	ldhu	r2,12(r16)
 8010528:	1080004c 	andi	r2,r2,1
 801052c:	1000181e 	bne	r2,zero,8010590 <__swbuf_r+0xf4>
 8010530:	8805883a 	mov	r2,r17
 8010534:	dfc00317 	ldw	ra,12(sp)
 8010538:	dc800217 	ldw	r18,8(sp)
 801053c:	dc400117 	ldw	r17,4(sp)
 8010540:	dc000017 	ldw	r16,0(sp)
 8010544:	dec00404 	addi	sp,sp,16
 8010548:	f800283a 	ret
 801054c:	81001917 	ldw	r4,100(r16)
 8010550:	00b7ffc4 	movi	r2,-8193
 8010554:	31880014 	ori	r6,r6,8192
 8010558:	2084703a 	and	r2,r4,r2
 801055c:	80801915 	stw	r2,100(r16)
 8010560:	80800017 	ldw	r2,0(r16)
 8010564:	81000517 	ldw	r4,20(r16)
 8010568:	8180030d 	sth	r6,12(r16)
 801056c:	10c7c83a 	sub	r3,r2,r3
 8010570:	193fe316 	blt	r3,r4,8010500 <__alt_data_end+0xfc010500>
 8010574:	9009883a 	mov	r4,r18
 8010578:	800b883a 	mov	r5,r16
 801057c:	800ad980 	call	800ad98 <_fflush_r>
 8010580:	1000091e 	bne	r2,zero,80105a8 <__swbuf_r+0x10c>
 8010584:	80800017 	ldw	r2,0(r16)
 8010588:	00c00044 	movi	r3,1
 801058c:	003fdd06 	br	8010504 <__alt_data_end+0xfc010504>
 8010590:	00800284 	movi	r2,10
 8010594:	88bfe61e 	bne	r17,r2,8010530 <__alt_data_end+0xfc010530>
 8010598:	9009883a 	mov	r4,r18
 801059c:	800b883a 	mov	r5,r16
 80105a0:	800ad980 	call	800ad98 <_fflush_r>
 80105a4:	103fe226 	beq	r2,zero,8010530 <__alt_data_end+0xfc010530>
 80105a8:	00bfffc4 	movi	r2,-1
 80105ac:	003fe106 	br	8010534 <__alt_data_end+0xfc010534>
 80105b0:	9009883a 	mov	r4,r18
 80105b4:	800b883a 	mov	r5,r16
 80105b8:	80093400 	call	8009340 <__swsetup_r>
 80105bc:	1000051e 	bne	r2,zero,80105d4 <__swbuf_r+0x138>
 80105c0:	8180030b 	ldhu	r6,12(r16)
 80105c4:	80c00417 	ldw	r3,16(r16)
 80105c8:	003fc606 	br	80104e4 <__alt_data_end+0xfc0104e4>
 80105cc:	800b3400 	call	800b340 <__sinit>
 80105d0:	003fbd06 	br	80104c8 <__alt_data_end+0xfc0104c8>
 80105d4:	80c0030b 	ldhu	r3,12(r16)
 80105d8:	00bfffc4 	movi	r2,-1
 80105dc:	18c01014 	ori	r3,r3,64
 80105e0:	80c0030d 	sth	r3,12(r16)
 80105e4:	00c00244 	movi	r3,9
 80105e8:	90c00015 	stw	r3,0(r18)
 80105ec:	003fd106 	br	8010534 <__alt_data_end+0xfc010534>

080105f0 <__swbuf>:
 80105f0:	00c200b4 	movhi	r3,2050
 80105f4:	18c88a04 	addi	r3,r3,8744
 80105f8:	2005883a 	mov	r2,r4
 80105fc:	19000017 	ldw	r4,0(r3)
 8010600:	280d883a 	mov	r6,r5
 8010604:	100b883a 	mov	r5,r2
 8010608:	801049c1 	jmpi	801049c <__swbuf_r>

0801060c <_write_r>:
 801060c:	defffd04 	addi	sp,sp,-12
 8010610:	dc000015 	stw	r16,0(sp)
 8010614:	040200b4 	movhi	r16,2050
 8010618:	dc400115 	stw	r17,4(sp)
 801061c:	840f6d04 	addi	r16,r16,15796
 8010620:	2023883a 	mov	r17,r4
 8010624:	2809883a 	mov	r4,r5
 8010628:	300b883a 	mov	r5,r6
 801062c:	380d883a 	mov	r6,r7
 8010630:	dfc00215 	stw	ra,8(sp)
 8010634:	80000015 	stw	zero,0(r16)
 8010638:	80136c80 	call	80136c8 <write>
 801063c:	00ffffc4 	movi	r3,-1
 8010640:	10c00526 	beq	r2,r3,8010658 <_write_r+0x4c>
 8010644:	dfc00217 	ldw	ra,8(sp)
 8010648:	dc400117 	ldw	r17,4(sp)
 801064c:	dc000017 	ldw	r16,0(sp)
 8010650:	dec00304 	addi	sp,sp,12
 8010654:	f800283a 	ret
 8010658:	80c00017 	ldw	r3,0(r16)
 801065c:	183ff926 	beq	r3,zero,8010644 <__alt_data_end+0xfc010644>
 8010660:	88c00015 	stw	r3,0(r17)
 8010664:	003ff706 	br	8010644 <__alt_data_end+0xfc010644>

08010668 <_close_r>:
 8010668:	defffd04 	addi	sp,sp,-12
 801066c:	dc000015 	stw	r16,0(sp)
 8010670:	040200b4 	movhi	r16,2050
 8010674:	dc400115 	stw	r17,4(sp)
 8010678:	840f6d04 	addi	r16,r16,15796
 801067c:	2023883a 	mov	r17,r4
 8010680:	2809883a 	mov	r4,r5
 8010684:	dfc00215 	stw	ra,8(sp)
 8010688:	80000015 	stw	zero,0(r16)
 801068c:	8012d640 	call	8012d64 <close>
 8010690:	00ffffc4 	movi	r3,-1
 8010694:	10c00526 	beq	r2,r3,80106ac <_close_r+0x44>
 8010698:	dfc00217 	ldw	ra,8(sp)
 801069c:	dc400117 	ldw	r17,4(sp)
 80106a0:	dc000017 	ldw	r16,0(sp)
 80106a4:	dec00304 	addi	sp,sp,12
 80106a8:	f800283a 	ret
 80106ac:	80c00017 	ldw	r3,0(r16)
 80106b0:	183ff926 	beq	r3,zero,8010698 <__alt_data_end+0xfc010698>
 80106b4:	88c00015 	stw	r3,0(r17)
 80106b8:	003ff706 	br	8010698 <__alt_data_end+0xfc010698>

080106bc <_calloc_r>:
 80106bc:	298b383a 	mul	r5,r5,r6
 80106c0:	defffe04 	addi	sp,sp,-8
 80106c4:	dc000015 	stw	r16,0(sp)
 80106c8:	dfc00115 	stw	ra,4(sp)
 80106cc:	80048dc0 	call	80048dc <_malloc_r>
 80106d0:	1021883a 	mov	r16,r2
 80106d4:	10002826 	beq	r2,zero,8010778 <_calloc_r+0xbc>
 80106d8:	11bfff17 	ldw	r6,-4(r2)
 80106dc:	00bfff04 	movi	r2,-4
 80106e0:	00c00904 	movi	r3,36
 80106e4:	308c703a 	and	r6,r6,r2
 80106e8:	308d883a 	add	r6,r6,r2
 80106ec:	19801436 	bltu	r3,r6,8010740 <_calloc_r+0x84>
 80106f0:	008004c4 	movi	r2,19
 80106f4:	11800936 	bltu	r2,r6,801071c <_calloc_r+0x60>
 80106f8:	8005883a 	mov	r2,r16
 80106fc:	10000015 	stw	zero,0(r2)
 8010700:	10000115 	stw	zero,4(r2)
 8010704:	10000215 	stw	zero,8(r2)
 8010708:	8005883a 	mov	r2,r16
 801070c:	dfc00117 	ldw	ra,4(sp)
 8010710:	dc000017 	ldw	r16,0(sp)
 8010714:	dec00204 	addi	sp,sp,8
 8010718:	f800283a 	ret
 801071c:	80000015 	stw	zero,0(r16)
 8010720:	80000115 	stw	zero,4(r16)
 8010724:	008006c4 	movi	r2,27
 8010728:	11800d2e 	bgeu	r2,r6,8010760 <_calloc_r+0xa4>
 801072c:	80000215 	stw	zero,8(r16)
 8010730:	80000315 	stw	zero,12(r16)
 8010734:	30c00c26 	beq	r6,r3,8010768 <_calloc_r+0xac>
 8010738:	80800404 	addi	r2,r16,16
 801073c:	003fef06 	br	80106fc <__alt_data_end+0xfc0106fc>
 8010740:	8009883a 	mov	r4,r16
 8010744:	000b883a 	mov	r5,zero
 8010748:	800c3cc0 	call	800c3cc <memset>
 801074c:	8005883a 	mov	r2,r16
 8010750:	dfc00117 	ldw	ra,4(sp)
 8010754:	dc000017 	ldw	r16,0(sp)
 8010758:	dec00204 	addi	sp,sp,8
 801075c:	f800283a 	ret
 8010760:	80800204 	addi	r2,r16,8
 8010764:	003fe506 	br	80106fc <__alt_data_end+0xfc0106fc>
 8010768:	80000415 	stw	zero,16(r16)
 801076c:	80800604 	addi	r2,r16,24
 8010770:	80000515 	stw	zero,20(r16)
 8010774:	003fe106 	br	80106fc <__alt_data_end+0xfc0106fc>
 8010778:	0005883a 	mov	r2,zero
 801077c:	003fe306 	br	801070c <__alt_data_end+0xfc01070c>

08010780 <_fclose_r>:
 8010780:	28003226 	beq	r5,zero,801084c <_fclose_r+0xcc>
 8010784:	defffc04 	addi	sp,sp,-16
 8010788:	dc400115 	stw	r17,4(sp)
 801078c:	2023883a 	mov	r17,r4
 8010790:	dc000015 	stw	r16,0(sp)
 8010794:	dfc00315 	stw	ra,12(sp)
 8010798:	dc800215 	stw	r18,8(sp)
 801079c:	2821883a 	mov	r16,r5
 80107a0:	800b3500 	call	800b350 <__sfp_lock_acquire>
 80107a4:	88000226 	beq	r17,zero,80107b0 <_fclose_r+0x30>
 80107a8:	88800e17 	ldw	r2,56(r17)
 80107ac:	10002926 	beq	r2,zero,8010854 <_fclose_r+0xd4>
 80107b0:	8080030f 	ldh	r2,12(r16)
 80107b4:	10002226 	beq	r2,zero,8010840 <_fclose_r+0xc0>
 80107b8:	8809883a 	mov	r4,r17
 80107bc:	800b883a 	mov	r5,r16
 80107c0:	800ad980 	call	800ad98 <_fflush_r>
 80107c4:	1025883a 	mov	r18,r2
 80107c8:	80800b17 	ldw	r2,44(r16)
 80107cc:	10000426 	beq	r2,zero,80107e0 <_fclose_r+0x60>
 80107d0:	81400717 	ldw	r5,28(r16)
 80107d4:	8809883a 	mov	r4,r17
 80107d8:	103ee83a 	callr	r2
 80107dc:	10002616 	blt	r2,zero,8010878 <_fclose_r+0xf8>
 80107e0:	8080030b 	ldhu	r2,12(r16)
 80107e4:	1080200c 	andi	r2,r2,128
 80107e8:	10001f1e 	bne	r2,zero,8010868 <_fclose_r+0xe8>
 80107ec:	81400c17 	ldw	r5,48(r16)
 80107f0:	28000526 	beq	r5,zero,8010808 <_fclose_r+0x88>
 80107f4:	80801004 	addi	r2,r16,64
 80107f8:	28800226 	beq	r5,r2,8010804 <_fclose_r+0x84>
 80107fc:	8809883a 	mov	r4,r17
 8010800:	800b4b40 	call	800b4b4 <_free_r>
 8010804:	80000c15 	stw	zero,48(r16)
 8010808:	81401117 	ldw	r5,68(r16)
 801080c:	28000326 	beq	r5,zero,801081c <_fclose_r+0x9c>
 8010810:	8809883a 	mov	r4,r17
 8010814:	800b4b40 	call	800b4b4 <_free_r>
 8010818:	80001115 	stw	zero,68(r16)
 801081c:	8000030d 	sth	zero,12(r16)
 8010820:	800b3540 	call	800b354 <__sfp_lock_release>
 8010824:	9005883a 	mov	r2,r18
 8010828:	dfc00317 	ldw	ra,12(sp)
 801082c:	dc800217 	ldw	r18,8(sp)
 8010830:	dc400117 	ldw	r17,4(sp)
 8010834:	dc000017 	ldw	r16,0(sp)
 8010838:	dec00404 	addi	sp,sp,16
 801083c:	f800283a 	ret
 8010840:	800b3540 	call	800b354 <__sfp_lock_release>
 8010844:	0005883a 	mov	r2,zero
 8010848:	003ff706 	br	8010828 <__alt_data_end+0xfc010828>
 801084c:	0005883a 	mov	r2,zero
 8010850:	f800283a 	ret
 8010854:	8809883a 	mov	r4,r17
 8010858:	800b3400 	call	800b340 <__sinit>
 801085c:	8080030f 	ldh	r2,12(r16)
 8010860:	103fd51e 	bne	r2,zero,80107b8 <__alt_data_end+0xfc0107b8>
 8010864:	003ff606 	br	8010840 <__alt_data_end+0xfc010840>
 8010868:	81400417 	ldw	r5,16(r16)
 801086c:	8809883a 	mov	r4,r17
 8010870:	800b4b40 	call	800b4b4 <_free_r>
 8010874:	003fdd06 	br	80107ec <__alt_data_end+0xfc0107ec>
 8010878:	04bfffc4 	movi	r18,-1
 801087c:	003fd806 	br	80107e0 <__alt_data_end+0xfc0107e0>

08010880 <fclose>:
 8010880:	008200b4 	movhi	r2,2050
 8010884:	10888a04 	addi	r2,r2,8744
 8010888:	200b883a 	mov	r5,r4
 801088c:	11000017 	ldw	r4,0(r2)
 8010890:	80107801 	jmpi	8010780 <_fclose_r>

08010894 <_fputwc_r>:
 8010894:	3080030b 	ldhu	r2,12(r6)
 8010898:	defff804 	addi	sp,sp,-32
 801089c:	dcc00415 	stw	r19,16(sp)
 80108a0:	dc800315 	stw	r18,12(sp)
 80108a4:	dc000115 	stw	r16,4(sp)
 80108a8:	dfc00715 	stw	ra,28(sp)
 80108ac:	dd400615 	stw	r21,24(sp)
 80108b0:	dd000515 	stw	r20,20(sp)
 80108b4:	dc400215 	stw	r17,8(sp)
 80108b8:	10c8000c 	andi	r3,r2,8192
 80108bc:	3021883a 	mov	r16,r6
 80108c0:	2027883a 	mov	r19,r4
 80108c4:	2825883a 	mov	r18,r5
 80108c8:	1800051e 	bne	r3,zero,80108e0 <_fputwc_r+0x4c>
 80108cc:	30c01917 	ldw	r3,100(r6)
 80108d0:	10880014 	ori	r2,r2,8192
 80108d4:	3080030d 	sth	r2,12(r6)
 80108d8:	18880014 	ori	r2,r3,8192
 80108dc:	30801915 	stw	r2,100(r6)
 80108e0:	800be400 	call	800be40 <__locale_mb_cur_max>
 80108e4:	00c00044 	movi	r3,1
 80108e8:	10c03e26 	beq	r2,r3,80109e4 <_fputwc_r+0x150>
 80108ec:	9809883a 	mov	r4,r19
 80108f0:	d80b883a 	mov	r5,sp
 80108f4:	900d883a 	mov	r6,r18
 80108f8:	81c01704 	addi	r7,r16,92
 80108fc:	8010bd40 	call	8010bd4 <_wcrtomb_r>
 8010900:	1029883a 	mov	r20,r2
 8010904:	00bfffc4 	movi	r2,-1
 8010908:	a0802026 	beq	r20,r2,801098c <_fputwc_r+0xf8>
 801090c:	d9400003 	ldbu	r5,0(sp)
 8010910:	a0001c26 	beq	r20,zero,8010984 <_fputwc_r+0xf0>
 8010914:	0023883a 	mov	r17,zero
 8010918:	05400284 	movi	r21,10
 801091c:	00000906 	br	8010944 <_fputwc_r+0xb0>
 8010920:	80800017 	ldw	r2,0(r16)
 8010924:	11400005 	stb	r5,0(r2)
 8010928:	80c00017 	ldw	r3,0(r16)
 801092c:	18c00044 	addi	r3,r3,1
 8010930:	80c00015 	stw	r3,0(r16)
 8010934:	8c400044 	addi	r17,r17,1
 8010938:	dc45883a 	add	r2,sp,r17
 801093c:	8d00112e 	bgeu	r17,r20,8010984 <_fputwc_r+0xf0>
 8010940:	11400003 	ldbu	r5,0(r2)
 8010944:	80c00217 	ldw	r3,8(r16)
 8010948:	18ffffc4 	addi	r3,r3,-1
 801094c:	80c00215 	stw	r3,8(r16)
 8010950:	183ff30e 	bge	r3,zero,8010920 <__alt_data_end+0xfc010920>
 8010954:	80800617 	ldw	r2,24(r16)
 8010958:	18801916 	blt	r3,r2,80109c0 <_fputwc_r+0x12c>
 801095c:	80800017 	ldw	r2,0(r16)
 8010960:	11400005 	stb	r5,0(r2)
 8010964:	80800017 	ldw	r2,0(r16)
 8010968:	10c00003 	ldbu	r3,0(r2)
 801096c:	10800044 	addi	r2,r2,1
 8010970:	1d402326 	beq	r3,r21,8010a00 <_fputwc_r+0x16c>
 8010974:	80800015 	stw	r2,0(r16)
 8010978:	8c400044 	addi	r17,r17,1
 801097c:	dc45883a 	add	r2,sp,r17
 8010980:	8d3fef36 	bltu	r17,r20,8010940 <__alt_data_end+0xfc010940>
 8010984:	9005883a 	mov	r2,r18
 8010988:	00000406 	br	801099c <_fputwc_r+0x108>
 801098c:	80c0030b 	ldhu	r3,12(r16)
 8010990:	a005883a 	mov	r2,r20
 8010994:	18c01014 	ori	r3,r3,64
 8010998:	80c0030d 	sth	r3,12(r16)
 801099c:	dfc00717 	ldw	ra,28(sp)
 80109a0:	dd400617 	ldw	r21,24(sp)
 80109a4:	dd000517 	ldw	r20,20(sp)
 80109a8:	dcc00417 	ldw	r19,16(sp)
 80109ac:	dc800317 	ldw	r18,12(sp)
 80109b0:	dc400217 	ldw	r17,8(sp)
 80109b4:	dc000117 	ldw	r16,4(sp)
 80109b8:	dec00804 	addi	sp,sp,32
 80109bc:	f800283a 	ret
 80109c0:	9809883a 	mov	r4,r19
 80109c4:	29403fcc 	andi	r5,r5,255
 80109c8:	800d883a 	mov	r6,r16
 80109cc:	801049c0 	call	801049c <__swbuf_r>
 80109d0:	10bfffe0 	cmpeqi	r2,r2,-1
 80109d4:	10803fcc 	andi	r2,r2,255
 80109d8:	103fd626 	beq	r2,zero,8010934 <__alt_data_end+0xfc010934>
 80109dc:	00bfffc4 	movi	r2,-1
 80109e0:	003fee06 	br	801099c <__alt_data_end+0xfc01099c>
 80109e4:	90ffffc4 	addi	r3,r18,-1
 80109e8:	01003f84 	movi	r4,254
 80109ec:	20ffbf36 	bltu	r4,r3,80108ec <__alt_data_end+0xfc0108ec>
 80109f0:	900b883a 	mov	r5,r18
 80109f4:	dc800005 	stb	r18,0(sp)
 80109f8:	1029883a 	mov	r20,r2
 80109fc:	003fc506 	br	8010914 <__alt_data_end+0xfc010914>
 8010a00:	9809883a 	mov	r4,r19
 8010a04:	a80b883a 	mov	r5,r21
 8010a08:	800d883a 	mov	r6,r16
 8010a0c:	801049c0 	call	801049c <__swbuf_r>
 8010a10:	10bfffe0 	cmpeqi	r2,r2,-1
 8010a14:	003fef06 	br	80109d4 <__alt_data_end+0xfc0109d4>

08010a18 <fputwc>:
 8010a18:	defffc04 	addi	sp,sp,-16
 8010a1c:	dc000115 	stw	r16,4(sp)
 8010a20:	040200b4 	movhi	r16,2050
 8010a24:	84088a04 	addi	r16,r16,8744
 8010a28:	dc400215 	stw	r17,8(sp)
 8010a2c:	2023883a 	mov	r17,r4
 8010a30:	81000017 	ldw	r4,0(r16)
 8010a34:	dfc00315 	stw	ra,12(sp)
 8010a38:	280d883a 	mov	r6,r5
 8010a3c:	20000626 	beq	r4,zero,8010a58 <fputwc+0x40>
 8010a40:	20800e17 	ldw	r2,56(r4)
 8010a44:	1000041e 	bne	r2,zero,8010a58 <fputwc+0x40>
 8010a48:	d9400015 	stw	r5,0(sp)
 8010a4c:	800b3400 	call	800b340 <__sinit>
 8010a50:	81000017 	ldw	r4,0(r16)
 8010a54:	d9800017 	ldw	r6,0(sp)
 8010a58:	880b883a 	mov	r5,r17
 8010a5c:	dfc00317 	ldw	ra,12(sp)
 8010a60:	dc400217 	ldw	r17,8(sp)
 8010a64:	dc000117 	ldw	r16,4(sp)
 8010a68:	dec00404 	addi	sp,sp,16
 8010a6c:	80108941 	jmpi	8010894 <_fputwc_r>

08010a70 <_fstat_r>:
 8010a70:	defffd04 	addi	sp,sp,-12
 8010a74:	dc000015 	stw	r16,0(sp)
 8010a78:	040200b4 	movhi	r16,2050
 8010a7c:	dc400115 	stw	r17,4(sp)
 8010a80:	840f6d04 	addi	r16,r16,15796
 8010a84:	2023883a 	mov	r17,r4
 8010a88:	2809883a 	mov	r4,r5
 8010a8c:	300b883a 	mov	r5,r6
 8010a90:	dfc00215 	stw	ra,8(sp)
 8010a94:	80000015 	stw	zero,0(r16)
 8010a98:	8012eb00 	call	8012eb0 <fstat>
 8010a9c:	00ffffc4 	movi	r3,-1
 8010aa0:	10c00526 	beq	r2,r3,8010ab8 <_fstat_r+0x48>
 8010aa4:	dfc00217 	ldw	ra,8(sp)
 8010aa8:	dc400117 	ldw	r17,4(sp)
 8010aac:	dc000017 	ldw	r16,0(sp)
 8010ab0:	dec00304 	addi	sp,sp,12
 8010ab4:	f800283a 	ret
 8010ab8:	80c00017 	ldw	r3,0(r16)
 8010abc:	183ff926 	beq	r3,zero,8010aa4 <__alt_data_end+0xfc010aa4>
 8010ac0:	88c00015 	stw	r3,0(r17)
 8010ac4:	003ff706 	br	8010aa4 <__alt_data_end+0xfc010aa4>

08010ac8 <_isatty_r>:
 8010ac8:	defffd04 	addi	sp,sp,-12
 8010acc:	dc000015 	stw	r16,0(sp)
 8010ad0:	040200b4 	movhi	r16,2050
 8010ad4:	dc400115 	stw	r17,4(sp)
 8010ad8:	840f6d04 	addi	r16,r16,15796
 8010adc:	2023883a 	mov	r17,r4
 8010ae0:	2809883a 	mov	r4,r5
 8010ae4:	dfc00215 	stw	ra,8(sp)
 8010ae8:	80000015 	stw	zero,0(r16)
 8010aec:	8012fb00 	call	8012fb0 <isatty>
 8010af0:	00ffffc4 	movi	r3,-1
 8010af4:	10c00526 	beq	r2,r3,8010b0c <_isatty_r+0x44>
 8010af8:	dfc00217 	ldw	ra,8(sp)
 8010afc:	dc400117 	ldw	r17,4(sp)
 8010b00:	dc000017 	ldw	r16,0(sp)
 8010b04:	dec00304 	addi	sp,sp,12
 8010b08:	f800283a 	ret
 8010b0c:	80c00017 	ldw	r3,0(r16)
 8010b10:	183ff926 	beq	r3,zero,8010af8 <__alt_data_end+0xfc010af8>
 8010b14:	88c00015 	stw	r3,0(r17)
 8010b18:	003ff706 	br	8010af8 <__alt_data_end+0xfc010af8>

08010b1c <_lseek_r>:
 8010b1c:	defffd04 	addi	sp,sp,-12
 8010b20:	dc000015 	stw	r16,0(sp)
 8010b24:	040200b4 	movhi	r16,2050
 8010b28:	dc400115 	stw	r17,4(sp)
 8010b2c:	840f6d04 	addi	r16,r16,15796
 8010b30:	2023883a 	mov	r17,r4
 8010b34:	2809883a 	mov	r4,r5
 8010b38:	300b883a 	mov	r5,r6
 8010b3c:	380d883a 	mov	r6,r7
 8010b40:	dfc00215 	stw	ra,8(sp)
 8010b44:	80000015 	stw	zero,0(r16)
 8010b48:	80131880 	call	8013188 <lseek>
 8010b4c:	00ffffc4 	movi	r3,-1
 8010b50:	10c00526 	beq	r2,r3,8010b68 <_lseek_r+0x4c>
 8010b54:	dfc00217 	ldw	ra,8(sp)
 8010b58:	dc400117 	ldw	r17,4(sp)
 8010b5c:	dc000017 	ldw	r16,0(sp)
 8010b60:	dec00304 	addi	sp,sp,12
 8010b64:	f800283a 	ret
 8010b68:	80c00017 	ldw	r3,0(r16)
 8010b6c:	183ff926 	beq	r3,zero,8010b54 <__alt_data_end+0xfc010b54>
 8010b70:	88c00015 	stw	r3,0(r17)
 8010b74:	003ff706 	br	8010b54 <__alt_data_end+0xfc010b54>

08010b78 <_read_r>:
 8010b78:	defffd04 	addi	sp,sp,-12
 8010b7c:	dc000015 	stw	r16,0(sp)
 8010b80:	040200b4 	movhi	r16,2050
 8010b84:	dc400115 	stw	r17,4(sp)
 8010b88:	840f6d04 	addi	r16,r16,15796
 8010b8c:	2023883a 	mov	r17,r4
 8010b90:	2809883a 	mov	r4,r5
 8010b94:	300b883a 	mov	r5,r6
 8010b98:	380d883a 	mov	r6,r7
 8010b9c:	dfc00215 	stw	ra,8(sp)
 8010ba0:	80000015 	stw	zero,0(r16)
 8010ba4:	80133640 	call	8013364 <read>
 8010ba8:	00ffffc4 	movi	r3,-1
 8010bac:	10c00526 	beq	r2,r3,8010bc4 <_read_r+0x4c>
 8010bb0:	dfc00217 	ldw	ra,8(sp)
 8010bb4:	dc400117 	ldw	r17,4(sp)
 8010bb8:	dc000017 	ldw	r16,0(sp)
 8010bbc:	dec00304 	addi	sp,sp,12
 8010bc0:	f800283a 	ret
 8010bc4:	80c00017 	ldw	r3,0(r16)
 8010bc8:	183ff926 	beq	r3,zero,8010bb0 <__alt_data_end+0xfc010bb0>
 8010bcc:	88c00015 	stw	r3,0(r17)
 8010bd0:	003ff706 	br	8010bb0 <__alt_data_end+0xfc010bb0>

08010bd4 <_wcrtomb_r>:
 8010bd4:	defff604 	addi	sp,sp,-40
 8010bd8:	008200b4 	movhi	r2,2050
 8010bdc:	dc800815 	stw	r18,32(sp)
 8010be0:	dc400715 	stw	r17,28(sp)
 8010be4:	dc000615 	stw	r16,24(sp)
 8010be8:	10888e04 	addi	r2,r2,8760
 8010bec:	dfc00915 	stw	ra,36(sp)
 8010bf0:	2021883a 	mov	r16,r4
 8010bf4:	3823883a 	mov	r17,r7
 8010bf8:	14800017 	ldw	r18,0(r2)
 8010bfc:	28001426 	beq	r5,zero,8010c50 <_wcrtomb_r+0x7c>
 8010c00:	d9400415 	stw	r5,16(sp)
 8010c04:	d9800515 	stw	r6,20(sp)
 8010c08:	800be340 	call	800be34 <__locale_charset>
 8010c0c:	d9400417 	ldw	r5,16(sp)
 8010c10:	d9800517 	ldw	r6,20(sp)
 8010c14:	8009883a 	mov	r4,r16
 8010c18:	dc400015 	stw	r17,0(sp)
 8010c1c:	100f883a 	mov	r7,r2
 8010c20:	903ee83a 	callr	r18
 8010c24:	00ffffc4 	movi	r3,-1
 8010c28:	10c0031e 	bne	r2,r3,8010c38 <_wcrtomb_r+0x64>
 8010c2c:	88000015 	stw	zero,0(r17)
 8010c30:	00c02284 	movi	r3,138
 8010c34:	80c00015 	stw	r3,0(r16)
 8010c38:	dfc00917 	ldw	ra,36(sp)
 8010c3c:	dc800817 	ldw	r18,32(sp)
 8010c40:	dc400717 	ldw	r17,28(sp)
 8010c44:	dc000617 	ldw	r16,24(sp)
 8010c48:	dec00a04 	addi	sp,sp,40
 8010c4c:	f800283a 	ret
 8010c50:	800be340 	call	800be34 <__locale_charset>
 8010c54:	8009883a 	mov	r4,r16
 8010c58:	dc400015 	stw	r17,0(sp)
 8010c5c:	d9400104 	addi	r5,sp,4
 8010c60:	000d883a 	mov	r6,zero
 8010c64:	100f883a 	mov	r7,r2
 8010c68:	903ee83a 	callr	r18
 8010c6c:	003fed06 	br	8010c24 <__alt_data_end+0xfc010c24>

08010c70 <wcrtomb>:
 8010c70:	defff504 	addi	sp,sp,-44
 8010c74:	dc400515 	stw	r17,20(sp)
 8010c78:	dc000415 	stw	r16,16(sp)
 8010c7c:	dfc00a15 	stw	ra,40(sp)
 8010c80:	dd400915 	stw	r21,36(sp)
 8010c84:	dd000815 	stw	r20,32(sp)
 8010c88:	dcc00715 	stw	r19,28(sp)
 8010c8c:	dc800615 	stw	r18,24(sp)
 8010c90:	2021883a 	mov	r16,r4
 8010c94:	3023883a 	mov	r17,r6
 8010c98:	20001d26 	beq	r4,zero,8010d10 <wcrtomb+0xa0>
 8010c9c:	048200b4 	movhi	r18,2050
 8010ca0:	94888a04 	addi	r18,r18,8744
 8010ca4:	008200b4 	movhi	r2,2050
 8010ca8:	95400017 	ldw	r21,0(r18)
 8010cac:	10888e04 	addi	r2,r2,8760
 8010cb0:	15000017 	ldw	r20,0(r2)
 8010cb4:	2827883a 	mov	r19,r5
 8010cb8:	800be340 	call	800be34 <__locale_charset>
 8010cbc:	a809883a 	mov	r4,r21
 8010cc0:	dc400015 	stw	r17,0(sp)
 8010cc4:	800b883a 	mov	r5,r16
 8010cc8:	980d883a 	mov	r6,r19
 8010ccc:	100f883a 	mov	r7,r2
 8010cd0:	a03ee83a 	callr	r20
 8010cd4:	00ffffc4 	movi	r3,-1
 8010cd8:	10c0041e 	bne	r2,r3,8010cec <wcrtomb+0x7c>
 8010cdc:	90c00017 	ldw	r3,0(r18)
 8010ce0:	01002284 	movi	r4,138
 8010ce4:	88000015 	stw	zero,0(r17)
 8010ce8:	19000015 	stw	r4,0(r3)
 8010cec:	dfc00a17 	ldw	ra,40(sp)
 8010cf0:	dd400917 	ldw	r21,36(sp)
 8010cf4:	dd000817 	ldw	r20,32(sp)
 8010cf8:	dcc00717 	ldw	r19,28(sp)
 8010cfc:	dc800617 	ldw	r18,24(sp)
 8010d00:	dc400517 	ldw	r17,20(sp)
 8010d04:	dc000417 	ldw	r16,16(sp)
 8010d08:	dec00b04 	addi	sp,sp,44
 8010d0c:	f800283a 	ret
 8010d10:	048200b4 	movhi	r18,2050
 8010d14:	94888a04 	addi	r18,r18,8744
 8010d18:	008200b4 	movhi	r2,2050
 8010d1c:	94c00017 	ldw	r19,0(r18)
 8010d20:	10888e04 	addi	r2,r2,8760
 8010d24:	14000017 	ldw	r16,0(r2)
 8010d28:	800be340 	call	800be34 <__locale_charset>
 8010d2c:	9809883a 	mov	r4,r19
 8010d30:	dc400015 	stw	r17,0(sp)
 8010d34:	d9400104 	addi	r5,sp,4
 8010d38:	000d883a 	mov	r6,zero
 8010d3c:	100f883a 	mov	r7,r2
 8010d40:	803ee83a 	callr	r16
 8010d44:	003fe306 	br	8010cd4 <__alt_data_end+0xfc010cd4>

08010d48 <__ascii_wctomb>:
 8010d48:	28000526 	beq	r5,zero,8010d60 <__ascii_wctomb+0x18>
 8010d4c:	00803fc4 	movi	r2,255
 8010d50:	11800536 	bltu	r2,r6,8010d68 <__ascii_wctomb+0x20>
 8010d54:	29800005 	stb	r6,0(r5)
 8010d58:	00800044 	movi	r2,1
 8010d5c:	f800283a 	ret
 8010d60:	0005883a 	mov	r2,zero
 8010d64:	f800283a 	ret
 8010d68:	00802284 	movi	r2,138
 8010d6c:	20800015 	stw	r2,0(r4)
 8010d70:	00bfffc4 	movi	r2,-1
 8010d74:	f800283a 	ret

08010d78 <_wctomb_r>:
 8010d78:	008200b4 	movhi	r2,2050
 8010d7c:	defff904 	addi	sp,sp,-28
 8010d80:	10888e04 	addi	r2,r2,8760
 8010d84:	dfc00615 	stw	ra,24(sp)
 8010d88:	dc400515 	stw	r17,20(sp)
 8010d8c:	dc000415 	stw	r16,16(sp)
 8010d90:	3823883a 	mov	r17,r7
 8010d94:	14000017 	ldw	r16,0(r2)
 8010d98:	d9000115 	stw	r4,4(sp)
 8010d9c:	d9400215 	stw	r5,8(sp)
 8010da0:	d9800315 	stw	r6,12(sp)
 8010da4:	800be340 	call	800be34 <__locale_charset>
 8010da8:	d9000117 	ldw	r4,4(sp)
 8010dac:	d9400217 	ldw	r5,8(sp)
 8010db0:	d9800317 	ldw	r6,12(sp)
 8010db4:	dc400015 	stw	r17,0(sp)
 8010db8:	100f883a 	mov	r7,r2
 8010dbc:	803ee83a 	callr	r16
 8010dc0:	dfc00617 	ldw	ra,24(sp)
 8010dc4:	dc400517 	ldw	r17,20(sp)
 8010dc8:	dc000417 	ldw	r16,16(sp)
 8010dcc:	dec00704 	addi	sp,sp,28
 8010dd0:	f800283a 	ret

08010dd4 <__udivdi3>:
 8010dd4:	defff504 	addi	sp,sp,-44
 8010dd8:	dcc00415 	stw	r19,16(sp)
 8010ddc:	dc000115 	stw	r16,4(sp)
 8010de0:	dfc00a15 	stw	ra,40(sp)
 8010de4:	df000915 	stw	fp,36(sp)
 8010de8:	ddc00815 	stw	r23,32(sp)
 8010dec:	dd800715 	stw	r22,28(sp)
 8010df0:	dd400615 	stw	r21,24(sp)
 8010df4:	dd000515 	stw	r20,20(sp)
 8010df8:	dc800315 	stw	r18,12(sp)
 8010dfc:	dc400215 	stw	r17,8(sp)
 8010e00:	2027883a 	mov	r19,r4
 8010e04:	2821883a 	mov	r16,r5
 8010e08:	3800421e 	bne	r7,zero,8010f14 <__udivdi3+0x140>
 8010e0c:	3025883a 	mov	r18,r6
 8010e10:	2023883a 	mov	r17,r4
 8010e14:	2980542e 	bgeu	r5,r6,8010f68 <__udivdi3+0x194>
 8010e18:	00bfffd4 	movui	r2,65535
 8010e1c:	282d883a 	mov	r22,r5
 8010e20:	1180a836 	bltu	r2,r6,80110c4 <__udivdi3+0x2f0>
 8010e24:	00803fc4 	movi	r2,255
 8010e28:	1181422e 	bgeu	r2,r6,8011334 <__udivdi3+0x560>
 8010e2c:	00800204 	movi	r2,8
 8010e30:	1007883a 	mov	r3,r2
 8010e34:	3084d83a 	srl	r2,r6,r2
 8010e38:	010200b4 	movhi	r4,2050
 8010e3c:	2100f304 	addi	r4,r4,972
 8010e40:	2085883a 	add	r2,r4,r2
 8010e44:	10800003 	ldbu	r2,0(r2)
 8010e48:	10c7883a 	add	r3,r2,r3
 8010e4c:	00800804 	movi	r2,32
 8010e50:	10c5c83a 	sub	r2,r2,r3
 8010e54:	10000526 	beq	r2,zero,8010e6c <__udivdi3+0x98>
 8010e58:	80a0983a 	sll	r16,r16,r2
 8010e5c:	98c6d83a 	srl	r3,r19,r3
 8010e60:	30a4983a 	sll	r18,r6,r2
 8010e64:	98a2983a 	sll	r17,r19,r2
 8010e68:	80ecb03a 	or	r22,r16,r3
 8010e6c:	902ad43a 	srli	r21,r18,16
 8010e70:	b009883a 	mov	r4,r22
 8010e74:	953fffcc 	andi	r20,r18,65535
 8010e78:	a80b883a 	mov	r5,r21
 8010e7c:	8011a480 	call	8011a48 <__umodsi3>
 8010e80:	b009883a 	mov	r4,r22
 8010e84:	a80b883a 	mov	r5,r21
 8010e88:	1027883a 	mov	r19,r2
 8010e8c:	8011a400 	call	8011a40 <__udivsi3>
 8010e90:	1021883a 	mov	r16,r2
 8010e94:	8806d43a 	srli	r3,r17,16
 8010e98:	9804943a 	slli	r2,r19,16
 8010e9c:	8527383a 	mul	r19,r16,r20
 8010ea0:	10c4b03a 	or	r2,r2,r3
 8010ea4:	14c0052e 	bgeu	r2,r19,8010ebc <__udivdi3+0xe8>
 8010ea8:	1485883a 	add	r2,r2,r18
 8010eac:	80ffffc4 	addi	r3,r16,-1
 8010eb0:	14800136 	bltu	r2,r18,8010eb8 <__udivdi3+0xe4>
 8010eb4:	14c13436 	bltu	r2,r19,8011388 <__udivdi3+0x5b4>
 8010eb8:	1821883a 	mov	r16,r3
 8010ebc:	14e7c83a 	sub	r19,r2,r19
 8010ec0:	9809883a 	mov	r4,r19
 8010ec4:	a80b883a 	mov	r5,r21
 8010ec8:	8011a480 	call	8011a48 <__umodsi3>
 8010ecc:	102d883a 	mov	r22,r2
 8010ed0:	9809883a 	mov	r4,r19
 8010ed4:	a80b883a 	mov	r5,r21
 8010ed8:	8011a400 	call	8011a40 <__udivsi3>
 8010edc:	b02c943a 	slli	r22,r22,16
 8010ee0:	1529383a 	mul	r20,r2,r20
 8010ee4:	8c7fffcc 	andi	r17,r17,65535
 8010ee8:	b462b03a 	or	r17,r22,r17
 8010eec:	8d00052e 	bgeu	r17,r20,8010f04 <__udivdi3+0x130>
 8010ef0:	8ca3883a 	add	r17,r17,r18
 8010ef4:	10ffffc4 	addi	r3,r2,-1
 8010ef8:	8c80f636 	bltu	r17,r18,80112d4 <__udivdi3+0x500>
 8010efc:	8d00f52e 	bgeu	r17,r20,80112d4 <__udivdi3+0x500>
 8010f00:	10bfff84 	addi	r2,r2,-2
 8010f04:	8020943a 	slli	r16,r16,16
 8010f08:	0007883a 	mov	r3,zero
 8010f0c:	1404b03a 	or	r2,r2,r16
 8010f10:	00005b06 	br	8011080 <__udivdi3+0x2ac>
 8010f14:	29c05836 	bltu	r5,r7,8011078 <__udivdi3+0x2a4>
 8010f18:	00bfffd4 	movui	r2,65535
 8010f1c:	11c0642e 	bgeu	r2,r7,80110b0 <__udivdi3+0x2dc>
 8010f20:	00804034 	movhi	r2,256
 8010f24:	10bfffc4 	addi	r2,r2,-1
 8010f28:	11c0f32e 	bgeu	r2,r7,80112f8 <__udivdi3+0x524>
 8010f2c:	00c00604 	movi	r3,24
 8010f30:	180b883a 	mov	r5,r3
 8010f34:	38c6d83a 	srl	r3,r7,r3
 8010f38:	008200b4 	movhi	r2,2050
 8010f3c:	1080f304 	addi	r2,r2,972
 8010f40:	10c7883a 	add	r3,r2,r3
 8010f44:	18c00003 	ldbu	r3,0(r3)
 8010f48:	01000804 	movi	r4,32
 8010f4c:	1947883a 	add	r3,r3,r5
 8010f50:	20e5c83a 	sub	r18,r4,r3
 8010f54:	9000661e 	bne	r18,zero,80110f0 <__udivdi3+0x31c>
 8010f58:	3c00f936 	bltu	r7,r16,8011340 <__udivdi3+0x56c>
 8010f5c:	9985403a 	cmpgeu	r2,r19,r6
 8010f60:	0007883a 	mov	r3,zero
 8010f64:	00004606 	br	8011080 <__udivdi3+0x2ac>
 8010f68:	3000041e 	bne	r6,zero,8010f7c <__udivdi3+0x1a8>
 8010f6c:	01000044 	movi	r4,1
 8010f70:	000b883a 	mov	r5,zero
 8010f74:	8011a400 	call	8011a40 <__udivsi3>
 8010f78:	1025883a 	mov	r18,r2
 8010f7c:	00bfffd4 	movui	r2,65535
 8010f80:	1480562e 	bgeu	r2,r18,80110dc <__udivdi3+0x308>
 8010f84:	00804034 	movhi	r2,256
 8010f88:	10bfffc4 	addi	r2,r2,-1
 8010f8c:	1480e32e 	bgeu	r2,r18,801131c <__udivdi3+0x548>
 8010f90:	00800604 	movi	r2,24
 8010f94:	1007883a 	mov	r3,r2
 8010f98:	9084d83a 	srl	r2,r18,r2
 8010f9c:	010200b4 	movhi	r4,2050
 8010fa0:	2100f304 	addi	r4,r4,972
 8010fa4:	2085883a 	add	r2,r4,r2
 8010fa8:	10800003 	ldbu	r2,0(r2)
 8010fac:	10c5883a 	add	r2,r2,r3
 8010fb0:	00c00804 	movi	r3,32
 8010fb4:	1887c83a 	sub	r3,r3,r2
 8010fb8:	1800911e 	bne	r3,zero,8011200 <__udivdi3+0x42c>
 8010fbc:	9028d43a 	srli	r20,r18,16
 8010fc0:	84a1c83a 	sub	r16,r16,r18
 8010fc4:	957fffcc 	andi	r21,r18,65535
 8010fc8:	00c00044 	movi	r3,1
 8010fcc:	8009883a 	mov	r4,r16
 8010fd0:	a00b883a 	mov	r5,r20
 8010fd4:	d8c00015 	stw	r3,0(sp)
 8010fd8:	8011a480 	call	8011a48 <__umodsi3>
 8010fdc:	8009883a 	mov	r4,r16
 8010fe0:	a00b883a 	mov	r5,r20
 8010fe4:	1027883a 	mov	r19,r2
 8010fe8:	8011a400 	call	8011a40 <__udivsi3>
 8010fec:	1021883a 	mov	r16,r2
 8010ff0:	880cd43a 	srli	r6,r17,16
 8010ff4:	9804943a 	slli	r2,r19,16
 8010ff8:	8567383a 	mul	r19,r16,r21
 8010ffc:	d8c00017 	ldw	r3,0(sp)
 8011000:	1188b03a 	or	r4,r2,r6
 8011004:	24c0052e 	bgeu	r4,r19,801101c <__udivdi3+0x248>
 8011008:	2489883a 	add	r4,r4,r18
 801100c:	80bfffc4 	addi	r2,r16,-1
 8011010:	24800136 	bltu	r4,r18,8011018 <__udivdi3+0x244>
 8011014:	24c0d936 	bltu	r4,r19,801137c <__udivdi3+0x5a8>
 8011018:	1021883a 	mov	r16,r2
 801101c:	24e7c83a 	sub	r19,r4,r19
 8011020:	9809883a 	mov	r4,r19
 8011024:	a00b883a 	mov	r5,r20
 8011028:	d8c00015 	stw	r3,0(sp)
 801102c:	8011a480 	call	8011a48 <__umodsi3>
 8011030:	102d883a 	mov	r22,r2
 8011034:	9809883a 	mov	r4,r19
 8011038:	a00b883a 	mov	r5,r20
 801103c:	8011a400 	call	8011a40 <__udivsi3>
 8011040:	b02c943a 	slli	r22,r22,16
 8011044:	156b383a 	mul	r21,r2,r21
 8011048:	8c7fffcc 	andi	r17,r17,65535
 801104c:	b462b03a 	or	r17,r22,r17
 8011050:	d8c00017 	ldw	r3,0(sp)
 8011054:	8d40052e 	bgeu	r17,r21,801106c <__udivdi3+0x298>
 8011058:	8ca3883a 	add	r17,r17,r18
 801105c:	113fffc4 	addi	r4,r2,-1
 8011060:	8c809a36 	bltu	r17,r18,80112cc <__udivdi3+0x4f8>
 8011064:	8d40992e 	bgeu	r17,r21,80112cc <__udivdi3+0x4f8>
 8011068:	10bfff84 	addi	r2,r2,-2
 801106c:	8020943a 	slli	r16,r16,16
 8011070:	1404b03a 	or	r2,r2,r16
 8011074:	00000206 	br	8011080 <__udivdi3+0x2ac>
 8011078:	0007883a 	mov	r3,zero
 801107c:	0005883a 	mov	r2,zero
 8011080:	dfc00a17 	ldw	ra,40(sp)
 8011084:	df000917 	ldw	fp,36(sp)
 8011088:	ddc00817 	ldw	r23,32(sp)
 801108c:	dd800717 	ldw	r22,28(sp)
 8011090:	dd400617 	ldw	r21,24(sp)
 8011094:	dd000517 	ldw	r20,20(sp)
 8011098:	dcc00417 	ldw	r19,16(sp)
 801109c:	dc800317 	ldw	r18,12(sp)
 80110a0:	dc400217 	ldw	r17,8(sp)
 80110a4:	dc000117 	ldw	r16,4(sp)
 80110a8:	dec00b04 	addi	sp,sp,44
 80110ac:	f800283a 	ret
 80110b0:	00803fc4 	movi	r2,255
 80110b4:	11c0932e 	bgeu	r2,r7,8011304 <__udivdi3+0x530>
 80110b8:	00c00204 	movi	r3,8
 80110bc:	180b883a 	mov	r5,r3
 80110c0:	003f9c06 	br	8010f34 <__alt_data_end+0xfc010f34>
 80110c4:	00804034 	movhi	r2,256
 80110c8:	10bfffc4 	addi	r2,r2,-1
 80110cc:	1180902e 	bgeu	r2,r6,8011310 <__udivdi3+0x53c>
 80110d0:	00800604 	movi	r2,24
 80110d4:	1007883a 	mov	r3,r2
 80110d8:	003f5606 	br	8010e34 <__alt_data_end+0xfc010e34>
 80110dc:	00803fc4 	movi	r2,255
 80110e0:	1480912e 	bgeu	r2,r18,8011328 <__udivdi3+0x554>
 80110e4:	00800204 	movi	r2,8
 80110e8:	1007883a 	mov	r3,r2
 80110ec:	003faa06 	br	8010f98 <__alt_data_end+0xfc010f98>
 80110f0:	30eed83a 	srl	r23,r6,r3
 80110f4:	3c8e983a 	sll	r7,r7,r18
 80110f8:	80f8d83a 	srl	fp,r16,r3
 80110fc:	98c6d83a 	srl	r3,r19,r3
 8011100:	3deeb03a 	or	r23,r7,r23
 8011104:	b828d43a 	srli	r20,r23,16
 8011108:	84a0983a 	sll	r16,r16,r18
 801110c:	e009883a 	mov	r4,fp
 8011110:	a00b883a 	mov	r5,r20
 8011114:	80e2b03a 	or	r17,r16,r3
 8011118:	34aa983a 	sll	r21,r6,r18
 801111c:	8011a480 	call	8011a48 <__umodsi3>
 8011120:	e009883a 	mov	r4,fp
 8011124:	a00b883a 	mov	r5,r20
 8011128:	102d883a 	mov	r22,r2
 801112c:	8011a400 	call	8011a40 <__udivsi3>
 8011130:	1021883a 	mov	r16,r2
 8011134:	bf3fffcc 	andi	fp,r23,65535
 8011138:	b004943a 	slli	r2,r22,16
 801113c:	8808d43a 	srli	r4,r17,16
 8011140:	872d383a 	mul	r22,r16,fp
 8011144:	1104b03a 	or	r2,r2,r4
 8011148:	1580042e 	bgeu	r2,r22,801115c <__udivdi3+0x388>
 801114c:	15c5883a 	add	r2,r2,r23
 8011150:	80ffffc4 	addi	r3,r16,-1
 8011154:	15c0812e 	bgeu	r2,r23,801135c <__udivdi3+0x588>
 8011158:	1821883a 	mov	r16,r3
 801115c:	15adc83a 	sub	r22,r2,r22
 8011160:	b009883a 	mov	r4,r22
 8011164:	a00b883a 	mov	r5,r20
 8011168:	8011a480 	call	8011a48 <__umodsi3>
 801116c:	a00b883a 	mov	r5,r20
 8011170:	b009883a 	mov	r4,r22
 8011174:	d8800015 	stw	r2,0(sp)
 8011178:	8011a400 	call	8011a40 <__udivsi3>
 801117c:	d8c00017 	ldw	r3,0(sp)
 8011180:	170b383a 	mul	r5,r2,fp
 8011184:	8c7fffcc 	andi	r17,r17,65535
 8011188:	1806943a 	slli	r3,r3,16
 801118c:	1c46b03a 	or	r3,r3,r17
 8011190:	1940042e 	bgeu	r3,r5,80111a4 <__udivdi3+0x3d0>
 8011194:	1dc7883a 	add	r3,r3,r23
 8011198:	113fffc4 	addi	r4,r2,-1
 801119c:	1dc06b2e 	bgeu	r3,r23,801134c <__udivdi3+0x578>
 80111a0:	2005883a 	mov	r2,r4
 80111a4:	8020943a 	slli	r16,r16,16
 80111a8:	a9ffffcc 	andi	r7,r21,65535
 80111ac:	a82ad43a 	srli	r21,r21,16
 80111b0:	1404b03a 	or	r2,r2,r16
 80111b4:	113fffcc 	andi	r4,r2,65535
 80111b8:	100cd43a 	srli	r6,r2,16
 80111bc:	21d3383a 	mul	r9,r4,r7
 80111c0:	2549383a 	mul	r4,r4,r21
 80111c4:	31cf383a 	mul	r7,r6,r7
 80111c8:	4810d43a 	srli	r8,r9,16
 80111cc:	1947c83a 	sub	r3,r3,r5
 80111d0:	3909883a 	add	r4,r7,r4
 80111d4:	2209883a 	add	r4,r4,r8
 80111d8:	354d383a 	mul	r6,r6,r21
 80111dc:	21c0022e 	bgeu	r4,r7,80111e8 <__udivdi3+0x414>
 80111e0:	01400074 	movhi	r5,1
 80111e4:	314d883a 	add	r6,r6,r5
 80111e8:	202ad43a 	srli	r21,r4,16
 80111ec:	354d883a 	add	r6,r6,r21
 80111f0:	19803f36 	bltu	r3,r6,80112f0 <__udivdi3+0x51c>
 80111f4:	19803926 	beq	r3,r6,80112dc <__udivdi3+0x508>
 80111f8:	0007883a 	mov	r3,zero
 80111fc:	003fa006 	br	8011080 <__alt_data_end+0xfc011080>
 8011200:	90e4983a 	sll	r18,r18,r3
 8011204:	80aad83a 	srl	r21,r16,r2
 8011208:	80e0983a 	sll	r16,r16,r3
 801120c:	9028d43a 	srli	r20,r18,16
 8011210:	9884d83a 	srl	r2,r19,r2
 8011214:	a809883a 	mov	r4,r21
 8011218:	a00b883a 	mov	r5,r20
 801121c:	80acb03a 	or	r22,r16,r2
 8011220:	98e2983a 	sll	r17,r19,r3
 8011224:	8011a480 	call	8011a48 <__umodsi3>
 8011228:	a809883a 	mov	r4,r21
 801122c:	a00b883a 	mov	r5,r20
 8011230:	1021883a 	mov	r16,r2
 8011234:	8011a400 	call	8011a40 <__udivsi3>
 8011238:	957fffcc 	andi	r21,r18,65535
 801123c:	8020943a 	slli	r16,r16,16
 8011240:	b00ad43a 	srli	r5,r22,16
 8011244:	1567383a 	mul	r19,r2,r21
 8011248:	102f883a 	mov	r23,r2
 801124c:	8148b03a 	or	r4,r16,r5
 8011250:	24c0062e 	bgeu	r4,r19,801126c <__udivdi3+0x498>
 8011254:	2489883a 	add	r4,r4,r18
 8011258:	10bfffc4 	addi	r2,r2,-1
 801125c:	24804536 	bltu	r4,r18,8011374 <__udivdi3+0x5a0>
 8011260:	24c0442e 	bgeu	r4,r19,8011374 <__udivdi3+0x5a0>
 8011264:	bdffff84 	addi	r23,r23,-2
 8011268:	2489883a 	add	r4,r4,r18
 801126c:	24e7c83a 	sub	r19,r4,r19
 8011270:	9809883a 	mov	r4,r19
 8011274:	a00b883a 	mov	r5,r20
 8011278:	8011a480 	call	8011a48 <__umodsi3>
 801127c:	1021883a 	mov	r16,r2
 8011280:	9809883a 	mov	r4,r19
 8011284:	a00b883a 	mov	r5,r20
 8011288:	8011a400 	call	8011a40 <__udivsi3>
 801128c:	8020943a 	slli	r16,r16,16
 8011290:	1007883a 	mov	r3,r2
 8011294:	1545383a 	mul	r2,r2,r21
 8011298:	b13fffcc 	andi	r4,r22,65535
 801129c:	8108b03a 	or	r4,r16,r4
 80112a0:	2080062e 	bgeu	r4,r2,80112bc <__udivdi3+0x4e8>
 80112a4:	2489883a 	add	r4,r4,r18
 80112a8:	197fffc4 	addi	r5,r3,-1
 80112ac:	24802f36 	bltu	r4,r18,801136c <__udivdi3+0x598>
 80112b0:	20802e2e 	bgeu	r4,r2,801136c <__udivdi3+0x598>
 80112b4:	18ffff84 	addi	r3,r3,-2
 80112b8:	2489883a 	add	r4,r4,r18
 80112bc:	b82e943a 	slli	r23,r23,16
 80112c0:	20a1c83a 	sub	r16,r4,r2
 80112c4:	1dc6b03a 	or	r3,r3,r23
 80112c8:	003f4006 	br	8010fcc <__alt_data_end+0xfc010fcc>
 80112cc:	2005883a 	mov	r2,r4
 80112d0:	003f6606 	br	801106c <__alt_data_end+0xfc01106c>
 80112d4:	1805883a 	mov	r2,r3
 80112d8:	003f0a06 	br	8010f04 <__alt_data_end+0xfc010f04>
 80112dc:	2006943a 	slli	r3,r4,16
 80112e0:	9c88983a 	sll	r4,r19,r18
 80112e4:	4a7fffcc 	andi	r9,r9,65535
 80112e8:	1a47883a 	add	r3,r3,r9
 80112ec:	20ffc22e 	bgeu	r4,r3,80111f8 <__alt_data_end+0xfc0111f8>
 80112f0:	10bfffc4 	addi	r2,r2,-1
 80112f4:	003fc006 	br	80111f8 <__alt_data_end+0xfc0111f8>
 80112f8:	00c00404 	movi	r3,16
 80112fc:	180b883a 	mov	r5,r3
 8011300:	003f0c06 	br	8010f34 <__alt_data_end+0xfc010f34>
 8011304:	0007883a 	mov	r3,zero
 8011308:	000b883a 	mov	r5,zero
 801130c:	003f0906 	br	8010f34 <__alt_data_end+0xfc010f34>
 8011310:	00800404 	movi	r2,16
 8011314:	1007883a 	mov	r3,r2
 8011318:	003ec606 	br	8010e34 <__alt_data_end+0xfc010e34>
 801131c:	00800404 	movi	r2,16
 8011320:	1007883a 	mov	r3,r2
 8011324:	003f1c06 	br	8010f98 <__alt_data_end+0xfc010f98>
 8011328:	0005883a 	mov	r2,zero
 801132c:	0007883a 	mov	r3,zero
 8011330:	003f1906 	br	8010f98 <__alt_data_end+0xfc010f98>
 8011334:	0005883a 	mov	r2,zero
 8011338:	0007883a 	mov	r3,zero
 801133c:	003ebd06 	br	8010e34 <__alt_data_end+0xfc010e34>
 8011340:	0007883a 	mov	r3,zero
 8011344:	00800044 	movi	r2,1
 8011348:	003f4d06 	br	8011080 <__alt_data_end+0xfc011080>
 801134c:	197f942e 	bgeu	r3,r5,80111a0 <__alt_data_end+0xfc0111a0>
 8011350:	10bfff84 	addi	r2,r2,-2
 8011354:	1dc7883a 	add	r3,r3,r23
 8011358:	003f9206 	br	80111a4 <__alt_data_end+0xfc0111a4>
 801135c:	15bf7e2e 	bgeu	r2,r22,8011158 <__alt_data_end+0xfc011158>
 8011360:	843fff84 	addi	r16,r16,-2
 8011364:	15c5883a 	add	r2,r2,r23
 8011368:	003f7c06 	br	801115c <__alt_data_end+0xfc01115c>
 801136c:	2807883a 	mov	r3,r5
 8011370:	003fd206 	br	80112bc <__alt_data_end+0xfc0112bc>
 8011374:	102f883a 	mov	r23,r2
 8011378:	003fbc06 	br	801126c <__alt_data_end+0xfc01126c>
 801137c:	843fff84 	addi	r16,r16,-2
 8011380:	2489883a 	add	r4,r4,r18
 8011384:	003f2506 	br	801101c <__alt_data_end+0xfc01101c>
 8011388:	843fff84 	addi	r16,r16,-2
 801138c:	1485883a 	add	r2,r2,r18
 8011390:	003eca06 	br	8010ebc <__alt_data_end+0xfc010ebc>

08011394 <__umoddi3>:
 8011394:	defff404 	addi	sp,sp,-48
 8011398:	ddc00915 	stw	r23,36(sp)
 801139c:	dc400315 	stw	r17,12(sp)
 80113a0:	dc000215 	stw	r16,8(sp)
 80113a4:	dfc00b15 	stw	ra,44(sp)
 80113a8:	df000a15 	stw	fp,40(sp)
 80113ac:	dd800815 	stw	r22,32(sp)
 80113b0:	dd400715 	stw	r21,28(sp)
 80113b4:	dd000615 	stw	r20,24(sp)
 80113b8:	dcc00515 	stw	r19,20(sp)
 80113bc:	dc800415 	stw	r18,16(sp)
 80113c0:	2021883a 	mov	r16,r4
 80113c4:	2823883a 	mov	r17,r5
 80113c8:	282f883a 	mov	r23,r5
 80113cc:	3800381e 	bne	r7,zero,80114b0 <__umoddi3+0x11c>
 80113d0:	3027883a 	mov	r19,r6
 80113d4:	2029883a 	mov	r20,r4
 80113d8:	29804e2e 	bgeu	r5,r6,8011514 <__umoddi3+0x180>
 80113dc:	00bfffd4 	movui	r2,65535
 80113e0:	11809c36 	bltu	r2,r6,8011654 <__umoddi3+0x2c0>
 80113e4:	00803fc4 	movi	r2,255
 80113e8:	11813b2e 	bgeu	r2,r6,80118d8 <__umoddi3+0x544>
 80113ec:	01400204 	movi	r5,8
 80113f0:	2805883a 	mov	r2,r5
 80113f4:	314ad83a 	srl	r5,r6,r5
 80113f8:	00c200b4 	movhi	r3,2050
 80113fc:	18c0f304 	addi	r3,r3,972
 8011400:	194b883a 	add	r5,r3,r5
 8011404:	29000003 	ldbu	r4,0(r5)
 8011408:	2089883a 	add	r4,r4,r2
 801140c:	00800804 	movi	r2,32
 8011410:	1105c83a 	sub	r2,r2,r4
 8011414:	1000ec26 	beq	r2,zero,80117c8 <__umoddi3+0x434>
 8011418:	88a2983a 	sll	r17,r17,r2
 801141c:	8108d83a 	srl	r4,r16,r4
 8011420:	30a6983a 	sll	r19,r6,r2
 8011424:	80a8983a 	sll	r20,r16,r2
 8011428:	1025883a 	mov	r18,r2
 801142c:	892eb03a 	or	r23,r17,r4
 8011430:	982cd43a 	srli	r22,r19,16
 8011434:	b809883a 	mov	r4,r23
 8011438:	9d7fffcc 	andi	r21,r19,65535
 801143c:	b00b883a 	mov	r5,r22
 8011440:	8011a480 	call	8011a48 <__umodsi3>
 8011444:	b809883a 	mov	r4,r23
 8011448:	b00b883a 	mov	r5,r22
 801144c:	1021883a 	mov	r16,r2
 8011450:	8011a400 	call	8011a40 <__udivsi3>
 8011454:	8020943a 	slli	r16,r16,16
 8011458:	a00cd43a 	srli	r6,r20,16
 801145c:	1545383a 	mul	r2,r2,r21
 8011460:	8188b03a 	or	r4,r16,r6
 8011464:	2080042e 	bgeu	r4,r2,8011478 <__umoddi3+0xe4>
 8011468:	24c9883a 	add	r4,r4,r19
 801146c:	24c00236 	bltu	r4,r19,8011478 <__umoddi3+0xe4>
 8011470:	2080012e 	bgeu	r4,r2,8011478 <__umoddi3+0xe4>
 8011474:	24c9883a 	add	r4,r4,r19
 8011478:	20a3c83a 	sub	r17,r4,r2
 801147c:	8809883a 	mov	r4,r17
 8011480:	b00b883a 	mov	r5,r22
 8011484:	8011a480 	call	8011a48 <__umodsi3>
 8011488:	8809883a 	mov	r4,r17
 801148c:	b00b883a 	mov	r5,r22
 8011490:	1021883a 	mov	r16,r2
 8011494:	8011a400 	call	8011a40 <__udivsi3>
 8011498:	8006943a 	slli	r3,r16,16
 801149c:	1545383a 	mul	r2,r2,r21
 80114a0:	a13fffcc 	andi	r4,r20,65535
 80114a4:	1906b03a 	or	r3,r3,r4
 80114a8:	1880532e 	bgeu	r3,r2,80115f8 <__umoddi3+0x264>
 80114ac:	00004e06 	br	80115e8 <__umoddi3+0x254>
 80114b0:	29c05536 	bltu	r5,r7,8011608 <__umoddi3+0x274>
 80114b4:	00bfffd4 	movui	r2,65535
 80114b8:	11c0612e 	bgeu	r2,r7,8011640 <__umoddi3+0x2ac>
 80114bc:	00804034 	movhi	r2,256
 80114c0:	10bfffc4 	addi	r2,r2,-1
 80114c4:	11c0f82e 	bgeu	r2,r7,80118a8 <__umoddi3+0x514>
 80114c8:	01400604 	movi	r5,24
 80114cc:	282b883a 	mov	r21,r5
 80114d0:	394ad83a 	srl	r5,r7,r5
 80114d4:	00c200b4 	movhi	r3,2050
 80114d8:	18c0f304 	addi	r3,r3,972
 80114dc:	194b883a 	add	r5,r3,r5
 80114e0:	28800003 	ldbu	r2,0(r5)
 80114e4:	00c00804 	movi	r3,32
 80114e8:	156b883a 	add	r21,r2,r21
 80114ec:	1d69c83a 	sub	r20,r3,r21
 80114f0:	a000631e 	bne	r20,zero,8011680 <__umoddi3+0x2ec>
 80114f4:	3c400136 	bltu	r7,r17,80114fc <__umoddi3+0x168>
 80114f8:	81810436 	bltu	r16,r6,801190c <__umoddi3+0x578>
 80114fc:	8185c83a 	sub	r2,r16,r6
 8011500:	89e3c83a 	sub	r17,r17,r7
 8011504:	8087803a 	cmpltu	r3,r16,r2
 8011508:	88efc83a 	sub	r23,r17,r3
 801150c:	b807883a 	mov	r3,r23
 8011510:	00003f06 	br	8011610 <__umoddi3+0x27c>
 8011514:	3000041e 	bne	r6,zero,8011528 <__umoddi3+0x194>
 8011518:	01000044 	movi	r4,1
 801151c:	000b883a 	mov	r5,zero
 8011520:	8011a400 	call	8011a40 <__udivsi3>
 8011524:	1027883a 	mov	r19,r2
 8011528:	00bfffd4 	movui	r2,65535
 801152c:	14c04f2e 	bgeu	r2,r19,801166c <__umoddi3+0x2d8>
 8011530:	00804034 	movhi	r2,256
 8011534:	10bfffc4 	addi	r2,r2,-1
 8011538:	14c0e42e 	bgeu	r2,r19,80118cc <__umoddi3+0x538>
 801153c:	00800604 	movi	r2,24
 8011540:	1007883a 	mov	r3,r2
 8011544:	9884d83a 	srl	r2,r19,r2
 8011548:	010200b4 	movhi	r4,2050
 801154c:	2100f304 	addi	r4,r4,972
 8011550:	2085883a 	add	r2,r4,r2
 8011554:	11000003 	ldbu	r4,0(r2)
 8011558:	00800804 	movi	r2,32
 801155c:	20c7883a 	add	r3,r4,r3
 8011560:	10c5c83a 	sub	r2,r2,r3
 8011564:	10009a1e 	bne	r2,zero,80117d0 <__umoddi3+0x43c>
 8011568:	982cd43a 	srli	r22,r19,16
 801156c:	8ce3c83a 	sub	r17,r17,r19
 8011570:	9c3fffcc 	andi	r16,r19,65535
 8011574:	0025883a 	mov	r18,zero
 8011578:	8809883a 	mov	r4,r17
 801157c:	b00b883a 	mov	r5,r22
 8011580:	8011a480 	call	8011a48 <__umodsi3>
 8011584:	8809883a 	mov	r4,r17
 8011588:	b00b883a 	mov	r5,r22
 801158c:	102b883a 	mov	r21,r2
 8011590:	8011a400 	call	8011a40 <__udivsi3>
 8011594:	a806943a 	slli	r3,r21,16
 8011598:	a008d43a 	srli	r4,r20,16
 801159c:	1405383a 	mul	r2,r2,r16
 80115a0:	190cb03a 	or	r6,r3,r4
 80115a4:	3080032e 	bgeu	r6,r2,80115b4 <__umoddi3+0x220>
 80115a8:	34cd883a 	add	r6,r6,r19
 80115ac:	34c00136 	bltu	r6,r19,80115b4 <__umoddi3+0x220>
 80115b0:	3080d436 	bltu	r6,r2,8011904 <__umoddi3+0x570>
 80115b4:	30abc83a 	sub	r21,r6,r2
 80115b8:	a809883a 	mov	r4,r21
 80115bc:	b00b883a 	mov	r5,r22
 80115c0:	8011a480 	call	8011a48 <__umodsi3>
 80115c4:	1023883a 	mov	r17,r2
 80115c8:	a809883a 	mov	r4,r21
 80115cc:	b00b883a 	mov	r5,r22
 80115d0:	8011a400 	call	8011a40 <__udivsi3>
 80115d4:	8822943a 	slli	r17,r17,16
 80115d8:	1405383a 	mul	r2,r2,r16
 80115dc:	a13fffcc 	andi	r4,r20,65535
 80115e0:	8906b03a 	or	r3,r17,r4
 80115e4:	1880042e 	bgeu	r3,r2,80115f8 <__umoddi3+0x264>
 80115e8:	1cc7883a 	add	r3,r3,r19
 80115ec:	1cc00236 	bltu	r3,r19,80115f8 <__umoddi3+0x264>
 80115f0:	1880012e 	bgeu	r3,r2,80115f8 <__umoddi3+0x264>
 80115f4:	1cc7883a 	add	r3,r3,r19
 80115f8:	1887c83a 	sub	r3,r3,r2
 80115fc:	1c84d83a 	srl	r2,r3,r18
 8011600:	0007883a 	mov	r3,zero
 8011604:	00000206 	br	8011610 <__umoddi3+0x27c>
 8011608:	2005883a 	mov	r2,r4
 801160c:	2807883a 	mov	r3,r5
 8011610:	dfc00b17 	ldw	ra,44(sp)
 8011614:	df000a17 	ldw	fp,40(sp)
 8011618:	ddc00917 	ldw	r23,36(sp)
 801161c:	dd800817 	ldw	r22,32(sp)
 8011620:	dd400717 	ldw	r21,28(sp)
 8011624:	dd000617 	ldw	r20,24(sp)
 8011628:	dcc00517 	ldw	r19,20(sp)
 801162c:	dc800417 	ldw	r18,16(sp)
 8011630:	dc400317 	ldw	r17,12(sp)
 8011634:	dc000217 	ldw	r16,8(sp)
 8011638:	dec00c04 	addi	sp,sp,48
 801163c:	f800283a 	ret
 8011640:	00803fc4 	movi	r2,255
 8011644:	11c0952e 	bgeu	r2,r7,801189c <__umoddi3+0x508>
 8011648:	01400204 	movi	r5,8
 801164c:	282b883a 	mov	r21,r5
 8011650:	003f9f06 	br	80114d0 <__alt_data_end+0xfc0114d0>
 8011654:	00804034 	movhi	r2,256
 8011658:	10bfffc4 	addi	r2,r2,-1
 801165c:	1180952e 	bgeu	r2,r6,80118b4 <__umoddi3+0x520>
 8011660:	01400604 	movi	r5,24
 8011664:	2805883a 	mov	r2,r5
 8011668:	003f6206 	br	80113f4 <__alt_data_end+0xfc0113f4>
 801166c:	00803fc4 	movi	r2,255
 8011670:	14c0932e 	bgeu	r2,r19,80118c0 <__umoddi3+0x52c>
 8011674:	00800204 	movi	r2,8
 8011678:	1007883a 	mov	r3,r2
 801167c:	003fb106 	br	8011544 <__alt_data_end+0xfc011544>
 8011680:	3548d83a 	srl	r4,r6,r21
 8011684:	3d0e983a 	sll	r7,r7,r20
 8011688:	8d10983a 	sll	r8,r17,r20
 801168c:	8d6cd83a 	srl	r22,r17,r21
 8011690:	3922b03a 	or	r17,r7,r4
 8011694:	882ed43a 	srli	r23,r17,16
 8011698:	8564d83a 	srl	r18,r16,r21
 801169c:	b009883a 	mov	r4,r22
 80116a0:	b80b883a 	mov	r5,r23
 80116a4:	44a4b03a 	or	r18,r8,r18
 80116a8:	3526983a 	sll	r19,r6,r20
 80116ac:	8011a480 	call	8011a48 <__umodsi3>
 80116b0:	b009883a 	mov	r4,r22
 80116b4:	b80b883a 	mov	r5,r23
 80116b8:	1039883a 	mov	fp,r2
 80116bc:	8011a400 	call	8011a40 <__udivsi3>
 80116c0:	102d883a 	mov	r22,r2
 80116c4:	8a3fffcc 	andi	r8,r17,65535
 80116c8:	e004943a 	slli	r2,fp,16
 80116cc:	900cd43a 	srli	r6,r18,16
 80116d0:	b239383a 	mul	fp,r22,r8
 80116d4:	8520983a 	sll	r16,r16,r20
 80116d8:	118ab03a 	or	r5,r2,r6
 80116dc:	2f00042e 	bgeu	r5,fp,80116f0 <__umoddi3+0x35c>
 80116e0:	2c4b883a 	add	r5,r5,r17
 80116e4:	b0bfffc4 	addi	r2,r22,-1
 80116e8:	2c40822e 	bgeu	r5,r17,80118f4 <__umoddi3+0x560>
 80116ec:	102d883a 	mov	r22,r2
 80116f0:	2f39c83a 	sub	fp,r5,fp
 80116f4:	e009883a 	mov	r4,fp
 80116f8:	b80b883a 	mov	r5,r23
 80116fc:	da000115 	stw	r8,4(sp)
 8011700:	8011a480 	call	8011a48 <__umodsi3>
 8011704:	e009883a 	mov	r4,fp
 8011708:	b80b883a 	mov	r5,r23
 801170c:	d8800015 	stw	r2,0(sp)
 8011710:	8011a400 	call	8011a40 <__udivsi3>
 8011714:	d9800017 	ldw	r6,0(sp)
 8011718:	da000117 	ldw	r8,4(sp)
 801171c:	94bfffcc 	andi	r18,r18,65535
 8011720:	300c943a 	slli	r6,r6,16
 8011724:	1209383a 	mul	r4,r2,r8
 8011728:	3490b03a 	or	r8,r6,r18
 801172c:	4100042e 	bgeu	r8,r4,8011740 <__umoddi3+0x3ac>
 8011730:	4451883a 	add	r8,r8,r17
 8011734:	10ffffc4 	addi	r3,r2,-1
 8011738:	44406a2e 	bgeu	r8,r17,80118e4 <__umoddi3+0x550>
 801173c:	1805883a 	mov	r2,r3
 8011740:	b012943a 	slli	r9,r22,16
 8011744:	9abfffcc 	andi	r10,r19,65535
 8011748:	980ed43a 	srli	r7,r19,16
 801174c:	124ab03a 	or	r5,r2,r9
 8011750:	2a7fffcc 	andi	r9,r5,65535
 8011754:	280ad43a 	srli	r5,r5,16
 8011758:	4a8d383a 	mul	r6,r9,r10
 801175c:	49d3383a 	mul	r9,r9,r7
 8011760:	2a95383a 	mul	r10,r5,r10
 8011764:	3004d43a 	srli	r2,r6,16
 8011768:	4111c83a 	sub	r8,r8,r4
 801176c:	5253883a 	add	r9,r10,r9
 8011770:	4893883a 	add	r9,r9,r2
 8011774:	29cb383a 	mul	r5,r5,r7
 8011778:	4a80022e 	bgeu	r9,r10,8011784 <__umoddi3+0x3f0>
 801177c:	00800074 	movhi	r2,1
 8011780:	288b883a 	add	r5,r5,r2
 8011784:	4808d43a 	srli	r4,r9,16
 8011788:	4812943a 	slli	r9,r9,16
 801178c:	31bfffcc 	andi	r6,r6,65535
 8011790:	290b883a 	add	r5,r5,r4
 8011794:	498d883a 	add	r6,r9,r6
 8011798:	41403a36 	bltu	r8,r5,8011884 <__umoddi3+0x4f0>
 801179c:	41405d26 	beq	r8,r5,8011914 <__umoddi3+0x580>
 80117a0:	4149c83a 	sub	r4,r8,r5
 80117a4:	300f883a 	mov	r7,r6
 80117a8:	81cfc83a 	sub	r7,r16,r7
 80117ac:	81c7803a 	cmpltu	r3,r16,r7
 80117b0:	20c7c83a 	sub	r3,r4,r3
 80117b4:	1d44983a 	sll	r2,r3,r21
 80117b8:	3d0ed83a 	srl	r7,r7,r20
 80117bc:	1d06d83a 	srl	r3,r3,r20
 80117c0:	11c4b03a 	or	r2,r2,r7
 80117c4:	003f9206 	br	8011610 <__alt_data_end+0xfc011610>
 80117c8:	0025883a 	mov	r18,zero
 80117cc:	003f1806 	br	8011430 <__alt_data_end+0xfc011430>
 80117d0:	98a6983a 	sll	r19,r19,r2
 80117d4:	88e8d83a 	srl	r20,r17,r3
 80117d8:	80c6d83a 	srl	r3,r16,r3
 80117dc:	982cd43a 	srli	r22,r19,16
 80117e0:	88a2983a 	sll	r17,r17,r2
 80117e4:	a009883a 	mov	r4,r20
 80117e8:	b00b883a 	mov	r5,r22
 80117ec:	88eab03a 	or	r21,r17,r3
 80117f0:	1025883a 	mov	r18,r2
 80117f4:	8011a480 	call	8011a48 <__umodsi3>
 80117f8:	a009883a 	mov	r4,r20
 80117fc:	b00b883a 	mov	r5,r22
 8011800:	1023883a 	mov	r17,r2
 8011804:	8011a400 	call	8011a40 <__udivsi3>
 8011808:	9f3fffcc 	andi	fp,r19,65535
 801180c:	8822943a 	slli	r17,r17,16
 8011810:	a80ad43a 	srli	r5,r21,16
 8011814:	1705383a 	mul	r2,r2,fp
 8011818:	84a8983a 	sll	r20,r16,r18
 801181c:	8948b03a 	or	r4,r17,r5
 8011820:	2080042e 	bgeu	r4,r2,8011834 <__umoddi3+0x4a0>
 8011824:	24c9883a 	add	r4,r4,r19
 8011828:	24c00236 	bltu	r4,r19,8011834 <__umoddi3+0x4a0>
 801182c:	2080012e 	bgeu	r4,r2,8011834 <__umoddi3+0x4a0>
 8011830:	24c9883a 	add	r4,r4,r19
 8011834:	20afc83a 	sub	r23,r4,r2
 8011838:	b809883a 	mov	r4,r23
 801183c:	b00b883a 	mov	r5,r22
 8011840:	8011a480 	call	8011a48 <__umodsi3>
 8011844:	1023883a 	mov	r17,r2
 8011848:	b809883a 	mov	r4,r23
 801184c:	b00b883a 	mov	r5,r22
 8011850:	8011a400 	call	8011a40 <__udivsi3>
 8011854:	8822943a 	slli	r17,r17,16
 8011858:	1705383a 	mul	r2,r2,fp
 801185c:	a93fffcc 	andi	r4,r21,65535
 8011860:	8908b03a 	or	r4,r17,r4
 8011864:	2080042e 	bgeu	r4,r2,8011878 <__umoddi3+0x4e4>
 8011868:	24c9883a 	add	r4,r4,r19
 801186c:	24c00236 	bltu	r4,r19,8011878 <__umoddi3+0x4e4>
 8011870:	2080012e 	bgeu	r4,r2,8011878 <__umoddi3+0x4e4>
 8011874:	24c9883a 	add	r4,r4,r19
 8011878:	20a3c83a 	sub	r17,r4,r2
 801187c:	e021883a 	mov	r16,fp
 8011880:	003f3d06 	br	8011578 <__alt_data_end+0xfc011578>
 8011884:	34cfc83a 	sub	r7,r6,r19
 8011888:	2c4bc83a 	sub	r5,r5,r17
 801188c:	31cd803a 	cmpltu	r6,r6,r7
 8011890:	298dc83a 	sub	r6,r5,r6
 8011894:	4189c83a 	sub	r4,r8,r6
 8011898:	003fc306 	br	80117a8 <__alt_data_end+0xfc0117a8>
 801189c:	000b883a 	mov	r5,zero
 80118a0:	002b883a 	mov	r21,zero
 80118a4:	003f0a06 	br	80114d0 <__alt_data_end+0xfc0114d0>
 80118a8:	01400404 	movi	r5,16
 80118ac:	282b883a 	mov	r21,r5
 80118b0:	003f0706 	br	80114d0 <__alt_data_end+0xfc0114d0>
 80118b4:	01400404 	movi	r5,16
 80118b8:	2805883a 	mov	r2,r5
 80118bc:	003ecd06 	br	80113f4 <__alt_data_end+0xfc0113f4>
 80118c0:	0005883a 	mov	r2,zero
 80118c4:	0007883a 	mov	r3,zero
 80118c8:	003f1e06 	br	8011544 <__alt_data_end+0xfc011544>
 80118cc:	00800404 	movi	r2,16
 80118d0:	1007883a 	mov	r3,r2
 80118d4:	003f1b06 	br	8011544 <__alt_data_end+0xfc011544>
 80118d8:	000b883a 	mov	r5,zero
 80118dc:	0005883a 	mov	r2,zero
 80118e0:	003ec406 	br	80113f4 <__alt_data_end+0xfc0113f4>
 80118e4:	413f952e 	bgeu	r8,r4,801173c <__alt_data_end+0xfc01173c>
 80118e8:	10bfff84 	addi	r2,r2,-2
 80118ec:	4451883a 	add	r8,r8,r17
 80118f0:	003f9306 	br	8011740 <__alt_data_end+0xfc011740>
 80118f4:	2f3f7d2e 	bgeu	r5,fp,80116ec <__alt_data_end+0xfc0116ec>
 80118f8:	b5bfff84 	addi	r22,r22,-2
 80118fc:	2c4b883a 	add	r5,r5,r17
 8011900:	003f7b06 	br	80116f0 <__alt_data_end+0xfc0116f0>
 8011904:	34cd883a 	add	r6,r6,r19
 8011908:	003f2a06 	br	80115b4 <__alt_data_end+0xfc0115b4>
 801190c:	8005883a 	mov	r2,r16
 8011910:	003efe06 	br	801150c <__alt_data_end+0xfc01150c>
 8011914:	81bfdb36 	bltu	r16,r6,8011884 <__alt_data_end+0xfc011884>
 8011918:	300f883a 	mov	r7,r6
 801191c:	0009883a 	mov	r4,zero
 8011920:	003fa106 	br	80117a8 <__alt_data_end+0xfc0117a8>

08011924 <udivmodsi4>:
 8011924:	2900182e 	bgeu	r5,r4,8011988 <udivmodsi4+0x64>
 8011928:	28001716 	blt	r5,zero,8011988 <udivmodsi4+0x64>
 801192c:	00800804 	movi	r2,32
 8011930:	00c00044 	movi	r3,1
 8011934:	00000206 	br	8011940 <udivmodsi4+0x1c>
 8011938:	10001126 	beq	r2,zero,8011980 <udivmodsi4+0x5c>
 801193c:	28000516 	blt	r5,zero,8011954 <udivmodsi4+0x30>
 8011940:	294b883a 	add	r5,r5,r5
 8011944:	10bfffc4 	addi	r2,r2,-1
 8011948:	18c7883a 	add	r3,r3,r3
 801194c:	293ffa36 	bltu	r5,r4,8011938 <__alt_data_end+0xfc011938>
 8011950:	18000b26 	beq	r3,zero,8011980 <udivmodsi4+0x5c>
 8011954:	0005883a 	mov	r2,zero
 8011958:	21400236 	bltu	r4,r5,8011964 <udivmodsi4+0x40>
 801195c:	2149c83a 	sub	r4,r4,r5
 8011960:	10c4b03a 	or	r2,r2,r3
 8011964:	1806d07a 	srli	r3,r3,1
 8011968:	280ad07a 	srli	r5,r5,1
 801196c:	183ffa1e 	bne	r3,zero,8011958 <__alt_data_end+0xfc011958>
 8011970:	3000011e 	bne	r6,zero,8011978 <udivmodsi4+0x54>
 8011974:	f800283a 	ret
 8011978:	2005883a 	mov	r2,r4
 801197c:	f800283a 	ret
 8011980:	0005883a 	mov	r2,zero
 8011984:	003ffa06 	br	8011970 <__alt_data_end+0xfc011970>
 8011988:	00c00044 	movi	r3,1
 801198c:	003ff106 	br	8011954 <__alt_data_end+0xfc011954>

08011990 <__divsi3>:
 8011990:	defffe04 	addi	sp,sp,-8
 8011994:	dfc00115 	stw	ra,4(sp)
 8011998:	dc000015 	stw	r16,0(sp)
 801199c:	20000b16 	blt	r4,zero,80119cc <__divsi3+0x3c>
 80119a0:	0021883a 	mov	r16,zero
 80119a4:	28000c16 	blt	r5,zero,80119d8 <__divsi3+0x48>
 80119a8:	000d883a 	mov	r6,zero
 80119ac:	80119240 	call	8011924 <udivmodsi4>
 80119b0:	0407c83a 	sub	r3,zero,r16
 80119b4:	1884f03a 	xor	r2,r3,r2
 80119b8:	1405883a 	add	r2,r2,r16
 80119bc:	dfc00117 	ldw	ra,4(sp)
 80119c0:	dc000017 	ldw	r16,0(sp)
 80119c4:	dec00204 	addi	sp,sp,8
 80119c8:	f800283a 	ret
 80119cc:	0109c83a 	sub	r4,zero,r4
 80119d0:	04000044 	movi	r16,1
 80119d4:	283ff40e 	bge	r5,zero,80119a8 <__alt_data_end+0xfc0119a8>
 80119d8:	014bc83a 	sub	r5,zero,r5
 80119dc:	8400005c 	xori	r16,r16,1
 80119e0:	003ff106 	br	80119a8 <__alt_data_end+0xfc0119a8>

080119e4 <__modsi3>:
 80119e4:	defffd04 	addi	sp,sp,-12
 80119e8:	dfc00215 	stw	ra,8(sp)
 80119ec:	dc400115 	stw	r17,4(sp)
 80119f0:	dc000015 	stw	r16,0(sp)
 80119f4:	20000c16 	blt	r4,zero,8011a28 <__modsi3+0x44>
 80119f8:	0023883a 	mov	r17,zero
 80119fc:	0021883a 	mov	r16,zero
 8011a00:	28000d16 	blt	r5,zero,8011a38 <__modsi3+0x54>
 8011a04:	01800044 	movi	r6,1
 8011a08:	80119240 	call	8011924 <udivmodsi4>
 8011a0c:	1404f03a 	xor	r2,r2,r16
 8011a10:	8885883a 	add	r2,r17,r2
 8011a14:	dfc00217 	ldw	ra,8(sp)
 8011a18:	dc400117 	ldw	r17,4(sp)
 8011a1c:	dc000017 	ldw	r16,0(sp)
 8011a20:	dec00304 	addi	sp,sp,12
 8011a24:	f800283a 	ret
 8011a28:	0109c83a 	sub	r4,zero,r4
 8011a2c:	04400044 	movi	r17,1
 8011a30:	043fffc4 	movi	r16,-1
 8011a34:	283ff30e 	bge	r5,zero,8011a04 <__alt_data_end+0xfc011a04>
 8011a38:	014bc83a 	sub	r5,zero,r5
 8011a3c:	003ff106 	br	8011a04 <__alt_data_end+0xfc011a04>

08011a40 <__udivsi3>:
 8011a40:	000d883a 	mov	r6,zero
 8011a44:	80119241 	jmpi	8011924 <udivmodsi4>

08011a48 <__umodsi3>:
 8011a48:	01800044 	movi	r6,1
 8011a4c:	80119241 	jmpi	8011924 <udivmodsi4>

08011a50 <__divdf3>:
 8011a50:	defff204 	addi	sp,sp,-56
 8011a54:	dd000815 	stw	r20,32(sp)
 8011a58:	2828d53a 	srli	r20,r5,20
 8011a5c:	dd800a15 	stw	r22,40(sp)
 8011a60:	282cd7fa 	srli	r22,r5,31
 8011a64:	dc000415 	stw	r16,16(sp)
 8011a68:	04000434 	movhi	r16,16
 8011a6c:	df000c15 	stw	fp,48(sp)
 8011a70:	dcc00715 	stw	r19,28(sp)
 8011a74:	dc800615 	stw	r18,24(sp)
 8011a78:	dc400515 	stw	r17,20(sp)
 8011a7c:	843fffc4 	addi	r16,r16,-1
 8011a80:	dfc00d15 	stw	ra,52(sp)
 8011a84:	ddc00b15 	stw	r23,44(sp)
 8011a88:	dd400915 	stw	r21,36(sp)
 8011a8c:	a501ffcc 	andi	r20,r20,2047
 8011a90:	2025883a 	mov	r18,r4
 8011a94:	2027883a 	mov	r19,r4
 8011a98:	2c22703a 	and	r17,r5,r16
 8011a9c:	b7003fcc 	andi	fp,r22,255
 8011aa0:	a0005e26 	beq	r20,zero,8011c1c <__divdf3+0x1cc>
 8011aa4:	0081ffc4 	movi	r2,2047
 8011aa8:	a0803526 	beq	r20,r2,8011b80 <__divdf3+0x130>
 8011aac:	8c000434 	orhi	r16,r17,16
 8011ab0:	2004d77a 	srli	r2,r4,29
 8011ab4:	802090fa 	slli	r16,r16,3
 8011ab8:	202690fa 	slli	r19,r4,3
 8011abc:	a53f0044 	addi	r20,r20,-1023
 8011ac0:	80a2b03a 	or	r17,r16,r2
 8011ac4:	0025883a 	mov	r18,zero
 8011ac8:	0011883a 	mov	r8,zero
 8011acc:	380ad53a 	srli	r5,r7,20
 8011ad0:	382ed7fa 	srli	r23,r7,31
 8011ad4:	04000434 	movhi	r16,16
 8011ad8:	843fffc4 	addi	r16,r16,-1
 8011adc:	2941ffcc 	andi	r5,r5,2047
 8011ae0:	302b883a 	mov	r21,r6
 8011ae4:	3c20703a 	and	r16,r7,r16
 8011ae8:	ba403fcc 	andi	r9,r23,255
 8011aec:	28006726 	beq	r5,zero,8011c8c <__divdf3+0x23c>
 8011af0:	0081ffc4 	movi	r2,2047
 8011af4:	28805f26 	beq	r5,r2,8011c74 <__divdf3+0x224>
 8011af8:	84000434 	orhi	r16,r16,16
 8011afc:	3004d77a 	srli	r2,r6,29
 8011b00:	802090fa 	slli	r16,r16,3
 8011b04:	302a90fa 	slli	r21,r6,3
 8011b08:	297f0044 	addi	r5,r5,-1023
 8011b0c:	80a0b03a 	or	r16,r16,r2
 8011b10:	000f883a 	mov	r7,zero
 8011b14:	3c86b03a 	or	r3,r7,r18
 8011b18:	180690ba 	slli	r3,r3,2
 8011b1c:	00820074 	movhi	r2,2049
 8011b20:	1086d004 	addi	r2,r2,6976
 8011b24:	1887883a 	add	r3,r3,r2
 8011b28:	18c00017 	ldw	r3,0(r3)
 8011b2c:	b5c8f03a 	xor	r4,r22,r23
 8011b30:	200d883a 	mov	r6,r4
 8011b34:	24803fcc 	andi	r18,r4,255
 8011b38:	a169c83a 	sub	r20,r20,r5
 8011b3c:	1800683a 	jmp	r3
 8011b40:	08011d88 	cmpgei	zero,at,1142
 8011b44:	08011bb8 	rdprs	zero,at,1134
 8011b48:	08011d4c 	andi	zero,at,1141
 8011b4c:	08011b9c 	xori	zero,at,1134
 8011b50:	08011d4c 	andi	zero,at,1141
 8011b54:	08011d20 	cmpeqi	zero,at,1140
 8011b58:	08011d4c 	andi	zero,at,1141
 8011b5c:	08011b9c 	xori	zero,at,1134
 8011b60:	08011bb8 	rdprs	zero,at,1134
 8011b64:	08011bb8 	rdprs	zero,at,1134
 8011b68:	08011d20 	cmpeqi	zero,at,1140
 8011b6c:	08011b9c 	xori	zero,at,1134
 8011b70:	08011bac 	andhi	zero,at,1134
 8011b74:	08011bac 	andhi	zero,at,1134
 8011b78:	08011bac 	andhi	zero,at,1134
 8011b7c:	08011d5c 	xori	zero,at,1141
 8011b80:	8904b03a 	or	r2,r17,r4
 8011b84:	1000631e 	bne	r2,zero,8011d14 <__divdf3+0x2c4>
 8011b88:	04800204 	movi	r18,8
 8011b8c:	0023883a 	mov	r17,zero
 8011b90:	0027883a 	mov	r19,zero
 8011b94:	02000084 	movi	r8,2
 8011b98:	003fcc06 	br	8011acc <__alt_data_end+0xfc011acc>
 8011b9c:	8023883a 	mov	r17,r16
 8011ba0:	a827883a 	mov	r19,r21
 8011ba4:	4839883a 	mov	fp,r9
 8011ba8:	3811883a 	mov	r8,r7
 8011bac:	00800084 	movi	r2,2
 8011bb0:	40812a1e 	bne	r8,r2,801205c <__divdf3+0x60c>
 8011bb4:	e025883a 	mov	r18,fp
 8011bb8:	9180004c 	andi	r6,r18,1
 8011bbc:	0101ffc4 	movi	r4,2047
 8011bc0:	000b883a 	mov	r5,zero
 8011bc4:	0027883a 	mov	r19,zero
 8011bc8:	2008953a 	slli	r4,r4,20
 8011bcc:	30c03fcc 	andi	r3,r6,255
 8011bd0:	04000434 	movhi	r16,16
 8011bd4:	180697fa 	slli	r3,r3,31
 8011bd8:	843fffc4 	addi	r16,r16,-1
 8011bdc:	2c20703a 	and	r16,r5,r16
 8011be0:	8120b03a 	or	r16,r16,r4
 8011be4:	80c6b03a 	or	r3,r16,r3
 8011be8:	9805883a 	mov	r2,r19
 8011bec:	dfc00d17 	ldw	ra,52(sp)
 8011bf0:	df000c17 	ldw	fp,48(sp)
 8011bf4:	ddc00b17 	ldw	r23,44(sp)
 8011bf8:	dd800a17 	ldw	r22,40(sp)
 8011bfc:	dd400917 	ldw	r21,36(sp)
 8011c00:	dd000817 	ldw	r20,32(sp)
 8011c04:	dcc00717 	ldw	r19,28(sp)
 8011c08:	dc800617 	ldw	r18,24(sp)
 8011c0c:	dc400517 	ldw	r17,20(sp)
 8011c10:	dc000417 	ldw	r16,16(sp)
 8011c14:	dec00e04 	addi	sp,sp,56
 8011c18:	f800283a 	ret
 8011c1c:	8904b03a 	or	r2,r17,r4
 8011c20:	10003726 	beq	r2,zero,8011d00 <__divdf3+0x2b0>
 8011c24:	88011c26 	beq	r17,zero,8012098 <__divdf3+0x648>
 8011c28:	8809883a 	mov	r4,r17
 8011c2c:	d9800315 	stw	r6,12(sp)
 8011c30:	d9c00115 	stw	r7,4(sp)
 8011c34:	80048040 	call	8004804 <__clzsi2>
 8011c38:	d9800317 	ldw	r6,12(sp)
 8011c3c:	d9c00117 	ldw	r7,4(sp)
 8011c40:	1007883a 	mov	r3,r2
 8011c44:	01000a04 	movi	r4,40
 8011c48:	1cfffe04 	addi	r19,r3,-8
 8011c4c:	20c9c83a 	sub	r4,r4,r3
 8011c50:	8cca983a 	sll	r5,r17,r19
 8011c54:	9108d83a 	srl	r4,r18,r4
 8011c58:	94e6983a 	sll	r19,r18,r19
 8011c5c:	2162b03a 	or	r17,r4,r5
 8011c60:	053f0344 	movi	r20,-1011
 8011c64:	a0e9c83a 	sub	r20,r20,r3
 8011c68:	0025883a 	mov	r18,zero
 8011c6c:	0011883a 	mov	r8,zero
 8011c70:	003f9606 	br	8011acc <__alt_data_end+0xfc011acc>
 8011c74:	8184b03a 	or	r2,r16,r6
 8011c78:	10001f1e 	bne	r2,zero,8011cf8 <__divdf3+0x2a8>
 8011c7c:	0021883a 	mov	r16,zero
 8011c80:	002b883a 	mov	r21,zero
 8011c84:	01c00084 	movi	r7,2
 8011c88:	003fa206 	br	8011b14 <__alt_data_end+0xfc011b14>
 8011c8c:	8184b03a 	or	r2,r16,r6
 8011c90:	10001526 	beq	r2,zero,8011ce8 <__divdf3+0x298>
 8011c94:	80010c26 	beq	r16,zero,80120c8 <__divdf3+0x678>
 8011c98:	8009883a 	mov	r4,r16
 8011c9c:	d9800315 	stw	r6,12(sp)
 8011ca0:	da000215 	stw	r8,8(sp)
 8011ca4:	da400015 	stw	r9,0(sp)
 8011ca8:	80048040 	call	8004804 <__clzsi2>
 8011cac:	d9800317 	ldw	r6,12(sp)
 8011cb0:	da000217 	ldw	r8,8(sp)
 8011cb4:	da400017 	ldw	r9,0(sp)
 8011cb8:	1007883a 	mov	r3,r2
 8011cbc:	01000a04 	movi	r4,40
 8011cc0:	1d7ffe04 	addi	r21,r3,-8
 8011cc4:	20c9c83a 	sub	r4,r4,r3
 8011cc8:	8560983a 	sll	r16,r16,r21
 8011ccc:	3108d83a 	srl	r4,r6,r4
 8011cd0:	356a983a 	sll	r21,r6,r21
 8011cd4:	2420b03a 	or	r16,r4,r16
 8011cd8:	017f0344 	movi	r5,-1011
 8011cdc:	28cbc83a 	sub	r5,r5,r3
 8011ce0:	000f883a 	mov	r7,zero
 8011ce4:	003f8b06 	br	8011b14 <__alt_data_end+0xfc011b14>
 8011ce8:	0021883a 	mov	r16,zero
 8011cec:	002b883a 	mov	r21,zero
 8011cf0:	01c00044 	movi	r7,1
 8011cf4:	003f8706 	br	8011b14 <__alt_data_end+0xfc011b14>
 8011cf8:	01c000c4 	movi	r7,3
 8011cfc:	003f8506 	br	8011b14 <__alt_data_end+0xfc011b14>
 8011d00:	04800104 	movi	r18,4
 8011d04:	0023883a 	mov	r17,zero
 8011d08:	0027883a 	mov	r19,zero
 8011d0c:	02000044 	movi	r8,1
 8011d10:	003f6e06 	br	8011acc <__alt_data_end+0xfc011acc>
 8011d14:	04800304 	movi	r18,12
 8011d18:	020000c4 	movi	r8,3
 8011d1c:	003f6b06 	br	8011acc <__alt_data_end+0xfc011acc>
 8011d20:	01400434 	movhi	r5,16
 8011d24:	000d883a 	mov	r6,zero
 8011d28:	297fffc4 	addi	r5,r5,-1
 8011d2c:	04ffffc4 	movi	r19,-1
 8011d30:	0101ffc4 	movi	r4,2047
 8011d34:	003fa406 	br	8011bc8 <__alt_data_end+0xfc011bc8>
 8011d38:	043f0084 	movi	r16,-1022
 8011d3c:	8521c83a 	sub	r16,r16,r20
 8011d40:	00800e04 	movi	r2,56
 8011d44:	1401200e 	bge	r2,r16,80121c8 <__divdf3+0x778>
 8011d48:	9180004c 	andi	r6,r18,1
 8011d4c:	0009883a 	mov	r4,zero
 8011d50:	000b883a 	mov	r5,zero
 8011d54:	0027883a 	mov	r19,zero
 8011d58:	003f9b06 	br	8011bc8 <__alt_data_end+0xfc011bc8>
 8011d5c:	8880022c 	andhi	r2,r17,8
 8011d60:	1000c726 	beq	r2,zero,8012080 <__divdf3+0x630>
 8011d64:	8080022c 	andhi	r2,r16,8
 8011d68:	1000c51e 	bne	r2,zero,8012080 <__divdf3+0x630>
 8011d6c:	00800434 	movhi	r2,16
 8011d70:	81400234 	orhi	r5,r16,8
 8011d74:	10bfffc4 	addi	r2,r2,-1
 8011d78:	b80d883a 	mov	r6,r23
 8011d7c:	288a703a 	and	r5,r5,r2
 8011d80:	a827883a 	mov	r19,r21
 8011d84:	003fea06 	br	8011d30 <__alt_data_end+0xfc011d30>
 8011d88:	8440ea36 	bltu	r16,r17,8012134 <__divdf3+0x6e4>
 8011d8c:	8c00e826 	beq	r17,r16,8012130 <__divdf3+0x6e0>
 8011d90:	a53fffc4 	addi	r20,r20,-1
 8011d94:	882d883a 	mov	r22,r17
 8011d98:	000d883a 	mov	r6,zero
 8011d9c:	a804d63a 	srli	r2,r21,24
 8011da0:	8020923a 	slli	r16,r16,8
 8011da4:	b009883a 	mov	r4,r22
 8011da8:	d9800315 	stw	r6,12(sp)
 8011dac:	1420b03a 	or	r16,r2,r16
 8011db0:	802ed43a 	srli	r23,r16,16
 8011db4:	873fffcc 	andi	fp,r16,65535
 8011db8:	a82a923a 	slli	r21,r21,8
 8011dbc:	b80b883a 	mov	r5,r23
 8011dc0:	8011a400 	call	8011a40 <__udivsi3>
 8011dc4:	b009883a 	mov	r4,r22
 8011dc8:	b80b883a 	mov	r5,r23
 8011dcc:	1023883a 	mov	r17,r2
 8011dd0:	8011a480 	call	8011a48 <__umodsi3>
 8011dd4:	1004943a 	slli	r2,r2,16
 8011dd8:	9808d43a 	srli	r4,r19,16
 8011ddc:	8f2d383a 	mul	r22,r17,fp
 8011de0:	d9800317 	ldw	r6,12(sp)
 8011de4:	1106b03a 	or	r3,r2,r4
 8011de8:	1d80062e 	bgeu	r3,r22,8011e04 <__divdf3+0x3b4>
 8011dec:	1c07883a 	add	r3,r3,r16
 8011df0:	88bfffc4 	addi	r2,r17,-1
 8011df4:	1c00dc36 	bltu	r3,r16,8012168 <__divdf3+0x718>
 8011df8:	1d80db2e 	bgeu	r3,r22,8012168 <__divdf3+0x718>
 8011dfc:	8c7fff84 	addi	r17,r17,-2
 8011e00:	1c07883a 	add	r3,r3,r16
 8011e04:	1dadc83a 	sub	r22,r3,r22
 8011e08:	b009883a 	mov	r4,r22
 8011e0c:	b80b883a 	mov	r5,r23
 8011e10:	d9800315 	stw	r6,12(sp)
 8011e14:	8011a400 	call	8011a40 <__udivsi3>
 8011e18:	b009883a 	mov	r4,r22
 8011e1c:	b80b883a 	mov	r5,r23
 8011e20:	d8800015 	stw	r2,0(sp)
 8011e24:	8011a480 	call	8011a48 <__umodsi3>
 8011e28:	da400017 	ldw	r9,0(sp)
 8011e2c:	1004943a 	slli	r2,r2,16
 8011e30:	9cffffcc 	andi	r19,r19,65535
 8011e34:	4f07383a 	mul	r3,r9,fp
 8011e38:	14c8b03a 	or	r4,r2,r19
 8011e3c:	d9800317 	ldw	r6,12(sp)
 8011e40:	20c0062e 	bgeu	r4,r3,8011e5c <__divdf3+0x40c>
 8011e44:	2409883a 	add	r4,r4,r16
 8011e48:	48bfffc4 	addi	r2,r9,-1
 8011e4c:	2400c436 	bltu	r4,r16,8012160 <__divdf3+0x710>
 8011e50:	20c0c32e 	bgeu	r4,r3,8012160 <__divdf3+0x710>
 8011e54:	4a7fff84 	addi	r9,r9,-2
 8011e58:	2409883a 	add	r4,r4,r16
 8011e5c:	8822943a 	slli	r17,r17,16
 8011e60:	a80ed43a 	srli	r7,r21,16
 8011e64:	aa3fffcc 	andi	r8,r21,65535
 8011e68:	4c62b03a 	or	r17,r9,r17
 8011e6c:	8816d43a 	srli	r11,r17,16
 8011e70:	897fffcc 	andi	r5,r17,65535
 8011e74:	2a15383a 	mul	r10,r5,r8
 8011e78:	5a19383a 	mul	r12,r11,r8
 8011e7c:	29cb383a 	mul	r5,r5,r7
 8011e80:	5012d43a 	srli	r9,r10,16
 8011e84:	20c5c83a 	sub	r2,r4,r3
 8011e88:	614b883a 	add	r5,r12,r5
 8011e8c:	2a4b883a 	add	r5,r5,r9
 8011e90:	59c7383a 	mul	r3,r11,r7
 8011e94:	2b00022e 	bgeu	r5,r12,8011ea0 <__divdf3+0x450>
 8011e98:	01000074 	movhi	r4,1
 8011e9c:	1907883a 	add	r3,r3,r4
 8011ea0:	2808d43a 	srli	r4,r5,16
 8011ea4:	280a943a 	slli	r5,r5,16
 8011ea8:	54ffffcc 	andi	r19,r10,65535
 8011eac:	1907883a 	add	r3,r3,r4
 8011eb0:	2ccb883a 	add	r5,r5,r19
 8011eb4:	10c09336 	bltu	r2,r3,8012104 <__divdf3+0x6b4>
 8011eb8:	10c0ad26 	beq	r2,r3,8012170 <__divdf3+0x720>
 8011ebc:	10c7c83a 	sub	r3,r2,r3
 8011ec0:	3167c83a 	sub	r19,r6,r5
 8011ec4:	34ed803a 	cmpltu	r22,r6,r19
 8011ec8:	1dadc83a 	sub	r22,r3,r22
 8011ecc:	b400b226 	beq	r22,r16,8012198 <__divdf3+0x748>
 8011ed0:	b009883a 	mov	r4,r22
 8011ed4:	b80b883a 	mov	r5,r23
 8011ed8:	d9c00115 	stw	r7,4(sp)
 8011edc:	da000215 	stw	r8,8(sp)
 8011ee0:	8011a400 	call	8011a40 <__udivsi3>
 8011ee4:	b009883a 	mov	r4,r22
 8011ee8:	b80b883a 	mov	r5,r23
 8011eec:	d8800315 	stw	r2,12(sp)
 8011ef0:	8011a480 	call	8011a48 <__umodsi3>
 8011ef4:	d9800317 	ldw	r6,12(sp)
 8011ef8:	1004943a 	slli	r2,r2,16
 8011efc:	9808d43a 	srli	r4,r19,16
 8011f00:	372d383a 	mul	r22,r6,fp
 8011f04:	d9c00117 	ldw	r7,4(sp)
 8011f08:	1106b03a 	or	r3,r2,r4
 8011f0c:	da000217 	ldw	r8,8(sp)
 8011f10:	1d80062e 	bgeu	r3,r22,8011f2c <__divdf3+0x4dc>
 8011f14:	1c07883a 	add	r3,r3,r16
 8011f18:	30bfffc4 	addi	r2,r6,-1
 8011f1c:	1c00a036 	bltu	r3,r16,80121a0 <__divdf3+0x750>
 8011f20:	1d809f2e 	bgeu	r3,r22,80121a0 <__divdf3+0x750>
 8011f24:	31bfff84 	addi	r6,r6,-2
 8011f28:	1c07883a 	add	r3,r3,r16
 8011f2c:	1dadc83a 	sub	r22,r3,r22
 8011f30:	b009883a 	mov	r4,r22
 8011f34:	b80b883a 	mov	r5,r23
 8011f38:	d9800315 	stw	r6,12(sp)
 8011f3c:	d9c00115 	stw	r7,4(sp)
 8011f40:	da000215 	stw	r8,8(sp)
 8011f44:	8011a400 	call	8011a40 <__udivsi3>
 8011f48:	b009883a 	mov	r4,r22
 8011f4c:	b80b883a 	mov	r5,r23
 8011f50:	d8800015 	stw	r2,0(sp)
 8011f54:	8011a480 	call	8011a48 <__umodsi3>
 8011f58:	da400017 	ldw	r9,0(sp)
 8011f5c:	1004943a 	slli	r2,r2,16
 8011f60:	993fffcc 	andi	r4,r19,65535
 8011f64:	4f39383a 	mul	fp,r9,fp
 8011f68:	1106b03a 	or	r3,r2,r4
 8011f6c:	d9800317 	ldw	r6,12(sp)
 8011f70:	d9c00117 	ldw	r7,4(sp)
 8011f74:	da000217 	ldw	r8,8(sp)
 8011f78:	1f00062e 	bgeu	r3,fp,8011f94 <__divdf3+0x544>
 8011f7c:	1c07883a 	add	r3,r3,r16
 8011f80:	48bfffc4 	addi	r2,r9,-1
 8011f84:	1c008836 	bltu	r3,r16,80121a8 <__divdf3+0x758>
 8011f88:	1f00872e 	bgeu	r3,fp,80121a8 <__divdf3+0x758>
 8011f8c:	4a7fff84 	addi	r9,r9,-2
 8011f90:	1c07883a 	add	r3,r3,r16
 8011f94:	3008943a 	slli	r4,r6,16
 8011f98:	1f07c83a 	sub	r3,r3,fp
 8011f9c:	4926b03a 	or	r19,r9,r4
 8011fa0:	993fffcc 	andi	r4,r19,65535
 8011fa4:	980cd43a 	srli	r6,r19,16
 8011fa8:	220b383a 	mul	r5,r4,r8
 8011fac:	21c5383a 	mul	r2,r4,r7
 8011fb0:	3211383a 	mul	r8,r6,r8
 8011fb4:	2808d43a 	srli	r4,r5,16
 8011fb8:	31cf383a 	mul	r7,r6,r7
 8011fbc:	4085883a 	add	r2,r8,r2
 8011fc0:	1105883a 	add	r2,r2,r4
 8011fc4:	1200022e 	bgeu	r2,r8,8011fd0 <__divdf3+0x580>
 8011fc8:	01000074 	movhi	r4,1
 8011fcc:	390f883a 	add	r7,r7,r4
 8011fd0:	1008d43a 	srli	r4,r2,16
 8011fd4:	1004943a 	slli	r2,r2,16
 8011fd8:	297fffcc 	andi	r5,r5,65535
 8011fdc:	390f883a 	add	r7,r7,r4
 8011fe0:	1145883a 	add	r2,r2,r5
 8011fe4:	19c06536 	bltu	r3,r7,801217c <__divdf3+0x72c>
 8011fe8:	19c09f26 	beq	r3,r7,8012268 <__divdf3+0x818>
 8011fec:	9cc00054 	ori	r19,r19,1
 8011ff0:	a100ffc4 	addi	r4,r20,1023
 8011ff4:	013f500e 	bge	zero,r4,8011d38 <__alt_data_end+0xfc011d38>
 8011ff8:	988001cc 	andi	r2,r19,7
 8011ffc:	10000726 	beq	r2,zero,801201c <__divdf3+0x5cc>
 8012000:	98c003cc 	andi	r3,r19,15
 8012004:	00800104 	movi	r2,4
 8012008:	18800426 	beq	r3,r2,801201c <__divdf3+0x5cc>
 801200c:	9885883a 	add	r2,r19,r2
 8012010:	14e1803a 	cmpltu	r16,r2,r19
 8012014:	8c23883a 	add	r17,r17,r16
 8012018:	1027883a 	mov	r19,r2
 801201c:	8880402c 	andhi	r2,r17,256
 8012020:	10000426 	beq	r2,zero,8012034 <__divdf3+0x5e4>
 8012024:	00bfc034 	movhi	r2,65280
 8012028:	10bfffc4 	addi	r2,r2,-1
 801202c:	a1010004 	addi	r4,r20,1024
 8012030:	88a2703a 	and	r17,r17,r2
 8012034:	0081ff84 	movi	r2,2046
 8012038:	113edf16 	blt	r2,r4,8011bb8 <__alt_data_end+0xfc011bb8>
 801203c:	9826d0fa 	srli	r19,r19,3
 8012040:	8804977a 	slli	r2,r17,29
 8012044:	8820927a 	slli	r16,r17,9
 8012048:	2101ffcc 	andi	r4,r4,2047
 801204c:	14e6b03a 	or	r19,r2,r19
 8012050:	800ad33a 	srli	r5,r16,12
 8012054:	9180004c 	andi	r6,r18,1
 8012058:	003edb06 	br	8011bc8 <__alt_data_end+0xfc011bc8>
 801205c:	008000c4 	movi	r2,3
 8012060:	4080a826 	beq	r8,r2,8012304 <__divdf3+0x8b4>
 8012064:	00800044 	movi	r2,1
 8012068:	4080551e 	bne	r8,r2,80121c0 <__divdf3+0x770>
 801206c:	e00d883a 	mov	r6,fp
 8012070:	0009883a 	mov	r4,zero
 8012074:	000b883a 	mov	r5,zero
 8012078:	0027883a 	mov	r19,zero
 801207c:	003ed206 	br	8011bc8 <__alt_data_end+0xfc011bc8>
 8012080:	00800434 	movhi	r2,16
 8012084:	89400234 	orhi	r5,r17,8
 8012088:	10bfffc4 	addi	r2,r2,-1
 801208c:	b00d883a 	mov	r6,r22
 8012090:	288a703a 	and	r5,r5,r2
 8012094:	003f2606 	br	8011d30 <__alt_data_end+0xfc011d30>
 8012098:	d9800315 	stw	r6,12(sp)
 801209c:	d9c00115 	stw	r7,4(sp)
 80120a0:	80048040 	call	8004804 <__clzsi2>
 80120a4:	10c00804 	addi	r3,r2,32
 80120a8:	010009c4 	movi	r4,39
 80120ac:	d9800317 	ldw	r6,12(sp)
 80120b0:	d9c00117 	ldw	r7,4(sp)
 80120b4:	20fee30e 	bge	r4,r3,8011c44 <__alt_data_end+0xfc011c44>
 80120b8:	117ffe04 	addi	r5,r2,-8
 80120bc:	9162983a 	sll	r17,r18,r5
 80120c0:	0027883a 	mov	r19,zero
 80120c4:	003ee606 	br	8011c60 <__alt_data_end+0xfc011c60>
 80120c8:	3009883a 	mov	r4,r6
 80120cc:	d9800315 	stw	r6,12(sp)
 80120d0:	da000215 	stw	r8,8(sp)
 80120d4:	da400015 	stw	r9,0(sp)
 80120d8:	80048040 	call	8004804 <__clzsi2>
 80120dc:	10c00804 	addi	r3,r2,32
 80120e0:	010009c4 	movi	r4,39
 80120e4:	d9800317 	ldw	r6,12(sp)
 80120e8:	da000217 	ldw	r8,8(sp)
 80120ec:	da400017 	ldw	r9,0(sp)
 80120f0:	20fef20e 	bge	r4,r3,8011cbc <__alt_data_end+0xfc011cbc>
 80120f4:	10bffe04 	addi	r2,r2,-8
 80120f8:	a8a0983a 	sll	r16,r21,r2
 80120fc:	002b883a 	mov	r21,zero
 8012100:	003ef506 	br	8011cd8 <__alt_data_end+0xfc011cd8>
 8012104:	354d883a 	add	r6,r6,r21
 8012108:	3549803a 	cmpltu	r4,r6,r21
 801210c:	2409883a 	add	r4,r4,r16
 8012110:	2089883a 	add	r4,r4,r2
 8012114:	88bfffc4 	addi	r2,r17,-1
 8012118:	81000c2e 	bgeu	r16,r4,801214c <__divdf3+0x6fc>
 801211c:	20c04436 	bltu	r4,r3,8012230 <__divdf3+0x7e0>
 8012120:	19006f26 	beq	r3,r4,80122e0 <__divdf3+0x890>
 8012124:	20c7c83a 	sub	r3,r4,r3
 8012128:	1023883a 	mov	r17,r2
 801212c:	003f6406 	br	8011ec0 <__alt_data_end+0xfc011ec0>
 8012130:	9d7f1736 	bltu	r19,r21,8011d90 <__alt_data_end+0xfc011d90>
 8012134:	9806d07a 	srli	r3,r19,1
 8012138:	880497fa 	slli	r2,r17,31
 801213c:	980c97fa 	slli	r6,r19,31
 8012140:	882cd07a 	srli	r22,r17,1
 8012144:	18a6b03a 	or	r19,r3,r2
 8012148:	003f1406 	br	8011d9c <__alt_data_end+0xfc011d9c>
 801214c:	243ff51e 	bne	r4,r16,8012124 <__alt_data_end+0xfc012124>
 8012150:	357ff22e 	bgeu	r6,r21,801211c <__alt_data_end+0xfc01211c>
 8012154:	80c7c83a 	sub	r3,r16,r3
 8012158:	1023883a 	mov	r17,r2
 801215c:	003f5806 	br	8011ec0 <__alt_data_end+0xfc011ec0>
 8012160:	1013883a 	mov	r9,r2
 8012164:	003f3d06 	br	8011e5c <__alt_data_end+0xfc011e5c>
 8012168:	1023883a 	mov	r17,r2
 801216c:	003f2506 	br	8011e04 <__alt_data_end+0xfc011e04>
 8012170:	317fe436 	bltu	r6,r5,8012104 <__alt_data_end+0xfc012104>
 8012174:	0007883a 	mov	r3,zero
 8012178:	003f5106 	br	8011ec0 <__alt_data_end+0xfc011ec0>
 801217c:	1c07883a 	add	r3,r3,r16
 8012180:	993fffc4 	addi	r4,r19,-1
 8012184:	1c000a2e 	bgeu	r3,r16,80121b0 <__divdf3+0x760>
 8012188:	2027883a 	mov	r19,r4
 801218c:	19ff971e 	bne	r3,r7,8011fec <__alt_data_end+0xfc011fec>
 8012190:	a8bf961e 	bne	r21,r2,8011fec <__alt_data_end+0xfc011fec>
 8012194:	003f9606 	br	8011ff0 <__alt_data_end+0xfc011ff0>
 8012198:	04ffffc4 	movi	r19,-1
 801219c:	003f9406 	br	8011ff0 <__alt_data_end+0xfc011ff0>
 80121a0:	100d883a 	mov	r6,r2
 80121a4:	003f6106 	br	8011f2c <__alt_data_end+0xfc011f2c>
 80121a8:	1013883a 	mov	r9,r2
 80121ac:	003f7906 	br	8011f94 <__alt_data_end+0xfc011f94>
 80121b0:	19c02636 	bltu	r3,r7,801224c <__divdf3+0x7fc>
 80121b4:	38c04d26 	beq	r7,r3,80122ec <__divdf3+0x89c>
 80121b8:	2027883a 	mov	r19,r4
 80121bc:	003f8b06 	br	8011fec <__alt_data_end+0xfc011fec>
 80121c0:	e025883a 	mov	r18,fp
 80121c4:	003f8a06 	br	8011ff0 <__alt_data_end+0xfc011ff0>
 80121c8:	008007c4 	movi	r2,31
 80121cc:	14002a16 	blt	r2,r16,8012278 <__divdf3+0x828>
 80121d0:	a5010784 	addi	r20,r20,1054
 80121d4:	8d04983a 	sll	r2,r17,r20
 80121d8:	9c06d83a 	srl	r3,r19,r16
 80121dc:	9d28983a 	sll	r20,r19,r20
 80121e0:	8c20d83a 	srl	r16,r17,r16
 80121e4:	1886b03a 	or	r3,r3,r2
 80121e8:	a004c03a 	cmpne	r2,r20,zero
 80121ec:	1884b03a 	or	r2,r3,r2
 80121f0:	10c001cc 	andi	r3,r2,7
 80121f4:	18000726 	beq	r3,zero,8012214 <__divdf3+0x7c4>
 80121f8:	110003cc 	andi	r4,r2,15
 80121fc:	00c00104 	movi	r3,4
 8012200:	20c00426 	beq	r4,r3,8012214 <__divdf3+0x7c4>
 8012204:	10c00104 	addi	r3,r2,4
 8012208:	1885803a 	cmpltu	r2,r3,r2
 801220c:	80a1883a 	add	r16,r16,r2
 8012210:	1805883a 	mov	r2,r3
 8012214:	80c0202c 	andhi	r3,r16,128
 8012218:	18002d26 	beq	r3,zero,80122d0 <__divdf3+0x880>
 801221c:	9180004c 	andi	r6,r18,1
 8012220:	01000044 	movi	r4,1
 8012224:	000b883a 	mov	r5,zero
 8012228:	0027883a 	mov	r19,zero
 801222c:	003e6606 	br	8011bc8 <__alt_data_end+0xfc011bc8>
 8012230:	354d883a 	add	r6,r6,r21
 8012234:	356d803a 	cmpltu	r22,r6,r21
 8012238:	b42d883a 	add	r22,r22,r16
 801223c:	b12d883a 	add	r22,r22,r4
 8012240:	8c7fff84 	addi	r17,r17,-2
 8012244:	b0c7c83a 	sub	r3,r22,r3
 8012248:	003f1d06 	br	8011ec0 <__alt_data_end+0xfc011ec0>
 801224c:	ad4b883a 	add	r5,r21,r21
 8012250:	2d6b803a 	cmpltu	r21,r5,r21
 8012254:	ac2b883a 	add	r21,r21,r16
 8012258:	1d47883a 	add	r3,r3,r21
 801225c:	993fff84 	addi	r4,r19,-2
 8012260:	282b883a 	mov	r21,r5
 8012264:	003fc806 	br	8012188 <__alt_data_end+0xfc012188>
 8012268:	103fc41e 	bne	r2,zero,801217c <__alt_data_end+0xfc01217c>
 801226c:	002b883a 	mov	r21,zero
 8012270:	a8bf5e1e 	bne	r21,r2,8011fec <__alt_data_end+0xfc011fec>
 8012274:	003f5e06 	br	8011ff0 <__alt_data_end+0xfc011ff0>
 8012278:	00bef884 	movi	r2,-1054
 801227c:	1505c83a 	sub	r2,r2,r20
 8012280:	00c00804 	movi	r3,32
 8012284:	8884d83a 	srl	r2,r17,r2
 8012288:	80c01c26 	beq	r16,r3,80122fc <__divdf3+0x8ac>
 801228c:	a0c10f84 	addi	r3,r20,1086
 8012290:	88c6983a 	sll	r3,r17,r3
 8012294:	1cc6b03a 	or	r3,r3,r19
 8012298:	1806c03a 	cmpne	r3,r3,zero
 801229c:	1884b03a 	or	r2,r3,r2
 80122a0:	140001cc 	andi	r16,r2,7
 80122a4:	8000061e 	bne	r16,zero,80122c0 <__divdf3+0x870>
 80122a8:	000b883a 	mov	r5,zero
 80122ac:	1004d0fa 	srli	r2,r2,3
 80122b0:	9180004c 	andi	r6,r18,1
 80122b4:	0009883a 	mov	r4,zero
 80122b8:	1426b03a 	or	r19,r2,r16
 80122bc:	003e4206 	br	8011bc8 <__alt_data_end+0xfc011bc8>
 80122c0:	110003cc 	andi	r4,r2,15
 80122c4:	00c00104 	movi	r3,4
 80122c8:	0021883a 	mov	r16,zero
 80122cc:	20ffcd1e 	bne	r4,r3,8012204 <__alt_data_end+0xfc012204>
 80122d0:	800a927a 	slli	r5,r16,9
 80122d4:	8020977a 	slli	r16,r16,29
 80122d8:	280ad33a 	srli	r5,r5,12
 80122dc:	003ff306 	br	80122ac <__alt_data_end+0xfc0122ac>
 80122e0:	317fd336 	bltu	r6,r5,8012230 <__alt_data_end+0xfc012230>
 80122e4:	1023883a 	mov	r17,r2
 80122e8:	003fa206 	br	8012174 <__alt_data_end+0xfc012174>
 80122ec:	a8bfd736 	bltu	r21,r2,801224c <__alt_data_end+0xfc01224c>
 80122f0:	2027883a 	mov	r19,r4
 80122f4:	a8bf3d1e 	bne	r21,r2,8011fec <__alt_data_end+0xfc011fec>
 80122f8:	003f3d06 	br	8011ff0 <__alt_data_end+0xfc011ff0>
 80122fc:	0007883a 	mov	r3,zero
 8012300:	003fe406 	br	8012294 <__alt_data_end+0xfc012294>
 8012304:	00800434 	movhi	r2,16
 8012308:	89400234 	orhi	r5,r17,8
 801230c:	10bfffc4 	addi	r2,r2,-1
 8012310:	e00d883a 	mov	r6,fp
 8012314:	288a703a 	and	r5,r5,r2
 8012318:	003e8506 	br	8011d30 <__alt_data_end+0xfc011d30>

0801231c <__eqdf2>:
 801231c:	2804d53a 	srli	r2,r5,20
 8012320:	3806d53a 	srli	r3,r7,20
 8012324:	02000434 	movhi	r8,16
 8012328:	423fffc4 	addi	r8,r8,-1
 801232c:	1081ffcc 	andi	r2,r2,2047
 8012330:	0241ffc4 	movi	r9,2047
 8012334:	2a14703a 	and	r10,r5,r8
 8012338:	18c1ffcc 	andi	r3,r3,2047
 801233c:	3a10703a 	and	r8,r7,r8
 8012340:	280ad7fa 	srli	r5,r5,31
 8012344:	380ed7fa 	srli	r7,r7,31
 8012348:	12400f26 	beq	r2,r9,8012388 <__eqdf2+0x6c>
 801234c:	0241ffc4 	movi	r9,2047
 8012350:	1a400326 	beq	r3,r9,8012360 <__eqdf2+0x44>
 8012354:	10c00526 	beq	r2,r3,801236c <__eqdf2+0x50>
 8012358:	00800044 	movi	r2,1
 801235c:	f800283a 	ret
 8012360:	4192b03a 	or	r9,r8,r6
 8012364:	483ffc1e 	bne	r9,zero,8012358 <__alt_data_end+0xfc012358>
 8012368:	10fffb1e 	bne	r2,r3,8012358 <__alt_data_end+0xfc012358>
 801236c:	523ffa1e 	bne	r10,r8,8012358 <__alt_data_end+0xfc012358>
 8012370:	21bff91e 	bne	r4,r6,8012358 <__alt_data_end+0xfc012358>
 8012374:	29c00826 	beq	r5,r7,8012398 <__eqdf2+0x7c>
 8012378:	103ff71e 	bne	r2,zero,8012358 <__alt_data_end+0xfc012358>
 801237c:	5104b03a 	or	r2,r10,r4
 8012380:	1004c03a 	cmpne	r2,r2,zero
 8012384:	f800283a 	ret
 8012388:	5112b03a 	or	r9,r10,r4
 801238c:	483fef26 	beq	r9,zero,801234c <__alt_data_end+0xfc01234c>
 8012390:	00800044 	movi	r2,1
 8012394:	f800283a 	ret
 8012398:	0005883a 	mov	r2,zero
 801239c:	f800283a 	ret

080123a0 <__subdf3>:
 80123a0:	00c00434 	movhi	r3,16
 80123a4:	18ffffc4 	addi	r3,r3,-1
 80123a8:	defffb04 	addi	sp,sp,-20
 80123ac:	28d2703a 	and	r9,r5,r3
 80123b0:	3814d53a 	srli	r10,r7,20
 80123b4:	38c6703a 	and	r3,r7,r3
 80123b8:	3004d77a 	srli	r2,r6,29
 80123bc:	dc800215 	stw	r18,8(sp)
 80123c0:	dc000015 	stw	r16,0(sp)
 80123c4:	2824d7fa 	srli	r18,r5,31
 80123c8:	2820d53a 	srli	r16,r5,20
 80123cc:	481290fa 	slli	r9,r9,3
 80123d0:	200ad77a 	srli	r5,r4,29
 80123d4:	180690fa 	slli	r3,r3,3
 80123d8:	dc400115 	stw	r17,4(sp)
 80123dc:	dfc00415 	stw	ra,16(sp)
 80123e0:	202290fa 	slli	r17,r4,3
 80123e4:	dcc00315 	stw	r19,12(sp)
 80123e8:	5281ffcc 	andi	r10,r10,2047
 80123ec:	0101ffc4 	movi	r4,2047
 80123f0:	9011883a 	mov	r8,r18
 80123f4:	8401ffcc 	andi	r16,r16,2047
 80123f8:	94803fcc 	andi	r18,r18,255
 80123fc:	494ab03a 	or	r5,r9,r5
 8012400:	380ed7fa 	srli	r7,r7,31
 8012404:	1886b03a 	or	r3,r3,r2
 8012408:	300c90fa 	slli	r6,r6,3
 801240c:	51009026 	beq	r10,r4,8012650 <__subdf3+0x2b0>
 8012410:	39c0005c 	xori	r7,r7,1
 8012414:	8285c83a 	sub	r2,r16,r10
 8012418:	91c06f26 	beq	r18,r7,80125d8 <__subdf3+0x238>
 801241c:	0080b10e 	bge	zero,r2,80126e4 <__subdf3+0x344>
 8012420:	50002a1e 	bne	r10,zero,80124cc <__subdf3+0x12c>
 8012424:	1988b03a 	or	r4,r3,r6
 8012428:	2000941e 	bne	r4,zero,801267c <__subdf3+0x2dc>
 801242c:	888001cc 	andi	r2,r17,7
 8012430:	10005b26 	beq	r2,zero,80125a0 <__subdf3+0x200>
 8012434:	88c003cc 	andi	r3,r17,15
 8012438:	00800104 	movi	r2,4
 801243c:	18805826 	beq	r3,r2,80125a0 <__subdf3+0x200>
 8012440:	88c00104 	addi	r3,r17,4
 8012444:	1c63803a 	cmpltu	r17,r3,r17
 8012448:	2c4b883a 	add	r5,r5,r17
 801244c:	2880202c 	andhi	r2,r5,128
 8012450:	9200004c 	andi	r8,r18,1
 8012454:	1823883a 	mov	r17,r3
 8012458:	10005426 	beq	r2,zero,80125ac <__subdf3+0x20c>
 801245c:	84000044 	addi	r16,r16,1
 8012460:	0081ffc4 	movi	r2,2047
 8012464:	8080bf26 	beq	r16,r2,8012764 <__subdf3+0x3c4>
 8012468:	013fe034 	movhi	r4,65408
 801246c:	213fffc4 	addi	r4,r4,-1
 8012470:	290a703a 	and	r5,r5,r4
 8012474:	2804977a 	slli	r2,r5,29
 8012478:	280a927a 	slli	r5,r5,9
 801247c:	8822d0fa 	srli	r17,r17,3
 8012480:	8401ffcc 	andi	r16,r16,2047
 8012484:	2808d33a 	srli	r4,r5,12
 8012488:	1444b03a 	or	r2,r2,r17
 801248c:	8401ffcc 	andi	r16,r16,2047
 8012490:	800a953a 	slli	r5,r16,20
 8012494:	40c03fcc 	andi	r3,r8,255
 8012498:	04000434 	movhi	r16,16
 801249c:	180697fa 	slli	r3,r3,31
 80124a0:	843fffc4 	addi	r16,r16,-1
 80124a4:	2420703a 	and	r16,r4,r16
 80124a8:	8160b03a 	or	r16,r16,r5
 80124ac:	80c6b03a 	or	r3,r16,r3
 80124b0:	dfc00417 	ldw	ra,16(sp)
 80124b4:	dcc00317 	ldw	r19,12(sp)
 80124b8:	dc800217 	ldw	r18,8(sp)
 80124bc:	dc400117 	ldw	r17,4(sp)
 80124c0:	dc000017 	ldw	r16,0(sp)
 80124c4:	dec00504 	addi	sp,sp,20
 80124c8:	f800283a 	ret
 80124cc:	0101ffc4 	movi	r4,2047
 80124d0:	813fd626 	beq	r16,r4,801242c <__alt_data_end+0xfc01242c>
 80124d4:	18c02034 	orhi	r3,r3,128
 80124d8:	01000e04 	movi	r4,56
 80124dc:	2080a416 	blt	r4,r2,8012770 <__subdf3+0x3d0>
 80124e0:	010007c4 	movi	r4,31
 80124e4:	2080c716 	blt	r4,r2,8012804 <__subdf3+0x464>
 80124e8:	01000804 	movi	r4,32
 80124ec:	2089c83a 	sub	r4,r4,r2
 80124f0:	1910983a 	sll	r8,r3,r4
 80124f4:	308ed83a 	srl	r7,r6,r2
 80124f8:	3108983a 	sll	r4,r6,r4
 80124fc:	1884d83a 	srl	r2,r3,r2
 8012500:	41ccb03a 	or	r6,r8,r7
 8012504:	2008c03a 	cmpne	r4,r4,zero
 8012508:	310cb03a 	or	r6,r6,r4
 801250c:	898dc83a 	sub	r6,r17,r6
 8012510:	89a3803a 	cmpltu	r17,r17,r6
 8012514:	288bc83a 	sub	r5,r5,r2
 8012518:	2c4bc83a 	sub	r5,r5,r17
 801251c:	3023883a 	mov	r17,r6
 8012520:	2880202c 	andhi	r2,r5,128
 8012524:	10006b26 	beq	r2,zero,80126d4 <__subdf3+0x334>
 8012528:	04c02034 	movhi	r19,128
 801252c:	9cffffc4 	addi	r19,r19,-1
 8012530:	2ce6703a 	and	r19,r5,r19
 8012534:	98007c26 	beq	r19,zero,8012728 <__subdf3+0x388>
 8012538:	9809883a 	mov	r4,r19
 801253c:	80048040 	call	8004804 <__clzsi2>
 8012540:	10fffe04 	addi	r3,r2,-8
 8012544:	010007c4 	movi	r4,31
 8012548:	20c07d16 	blt	r4,r3,8012740 <__subdf3+0x3a0>
 801254c:	01400a04 	movi	r5,40
 8012550:	2885c83a 	sub	r2,r5,r2
 8012554:	888ad83a 	srl	r5,r17,r2
 8012558:	98e6983a 	sll	r19,r19,r3
 801255c:	88e2983a 	sll	r17,r17,r3
 8012560:	2ce6b03a 	or	r19,r5,r19
 8012564:	1c007a16 	blt	r3,r16,8012750 <__subdf3+0x3b0>
 8012568:	1c21c83a 	sub	r16,r3,r16
 801256c:	81400044 	addi	r5,r16,1
 8012570:	00c007c4 	movi	r3,31
 8012574:	19409616 	blt	r3,r5,80127d0 <__subdf3+0x430>
 8012578:	1c21c83a 	sub	r16,r3,r16
 801257c:	8c08983a 	sll	r4,r17,r16
 8012580:	8946d83a 	srl	r3,r17,r5
 8012584:	9c20983a 	sll	r16,r19,r16
 8012588:	2008c03a 	cmpne	r4,r4,zero
 801258c:	994ad83a 	srl	r5,r19,r5
 8012590:	1c06b03a 	or	r3,r3,r16
 8012594:	1922b03a 	or	r17,r3,r4
 8012598:	0021883a 	mov	r16,zero
 801259c:	003fa306 	br	801242c <__alt_data_end+0xfc01242c>
 80125a0:	2880202c 	andhi	r2,r5,128
 80125a4:	9200004c 	andi	r8,r18,1
 80125a8:	103fac1e 	bne	r2,zero,801245c <__alt_data_end+0xfc01245c>
 80125ac:	2804977a 	slli	r2,r5,29
 80125b0:	8822d0fa 	srli	r17,r17,3
 80125b4:	00c1ffc4 	movi	r3,2047
 80125b8:	280ad0fa 	srli	r5,r5,3
 80125bc:	1444b03a 	or	r2,r2,r17
 80125c0:	80c02726 	beq	r16,r3,8012660 <__subdf3+0x2c0>
 80125c4:	01000434 	movhi	r4,16
 80125c8:	213fffc4 	addi	r4,r4,-1
 80125cc:	80e0703a 	and	r16,r16,r3
 80125d0:	2908703a 	and	r4,r5,r4
 80125d4:	003fad06 	br	801248c <__alt_data_end+0xfc01248c>
 80125d8:	0080690e 	bge	zero,r2,8012780 <__subdf3+0x3e0>
 80125dc:	50002f26 	beq	r10,zero,801269c <__subdf3+0x2fc>
 80125e0:	0101ffc4 	movi	r4,2047
 80125e4:	813f9126 	beq	r16,r4,801242c <__alt_data_end+0xfc01242c>
 80125e8:	18c02034 	orhi	r3,r3,128
 80125ec:	01000e04 	movi	r4,56
 80125f0:	2080b00e 	bge	r4,r2,80128b4 <__subdf3+0x514>
 80125f4:	198cb03a 	or	r6,r3,r6
 80125f8:	300ec03a 	cmpne	r7,r6,zero
 80125fc:	0005883a 	mov	r2,zero
 8012600:	3c4f883a 	add	r7,r7,r17
 8012604:	3c63803a 	cmpltu	r17,r7,r17
 8012608:	114b883a 	add	r5,r2,r5
 801260c:	2c4b883a 	add	r5,r5,r17
 8012610:	3823883a 	mov	r17,r7
 8012614:	2880202c 	andhi	r2,r5,128
 8012618:	10002e26 	beq	r2,zero,80126d4 <__subdf3+0x334>
 801261c:	84000044 	addi	r16,r16,1
 8012620:	0081ffc4 	movi	r2,2047
 8012624:	8080de26 	beq	r16,r2,80129a0 <__subdf3+0x600>
 8012628:	00bfe034 	movhi	r2,65408
 801262c:	10bfffc4 	addi	r2,r2,-1
 8012630:	288a703a 	and	r5,r5,r2
 8012634:	880cd07a 	srli	r6,r17,1
 8012638:	280897fa 	slli	r4,r5,31
 801263c:	88c0004c 	andi	r3,r17,1
 8012640:	30e2b03a 	or	r17,r6,r3
 8012644:	280ad07a 	srli	r5,r5,1
 8012648:	8922b03a 	or	r17,r17,r4
 801264c:	003f7706 	br	801242c <__alt_data_end+0xfc01242c>
 8012650:	1984b03a 	or	r2,r3,r6
 8012654:	103f6e26 	beq	r2,zero,8012410 <__alt_data_end+0xfc012410>
 8012658:	39c03fcc 	andi	r7,r7,255
 801265c:	003f6d06 	br	8012414 <__alt_data_end+0xfc012414>
 8012660:	1146b03a 	or	r3,r2,r5
 8012664:	18003f26 	beq	r3,zero,8012764 <__subdf3+0x3c4>
 8012668:	00c00434 	movhi	r3,16
 801266c:	29000234 	orhi	r4,r5,8
 8012670:	18ffffc4 	addi	r3,r3,-1
 8012674:	20c8703a 	and	r4,r4,r3
 8012678:	003f8406 	br	801248c <__alt_data_end+0xfc01248c>
 801267c:	10bfffc4 	addi	r2,r2,-1
 8012680:	1000501e 	bne	r2,zero,80127c4 <__subdf3+0x424>
 8012684:	898fc83a 	sub	r7,r17,r6
 8012688:	89e3803a 	cmpltu	r17,r17,r7
 801268c:	28cbc83a 	sub	r5,r5,r3
 8012690:	2c4bc83a 	sub	r5,r5,r17
 8012694:	3823883a 	mov	r17,r7
 8012698:	003fa106 	br	8012520 <__alt_data_end+0xfc012520>
 801269c:	1988b03a 	or	r4,r3,r6
 80126a0:	203f6226 	beq	r4,zero,801242c <__alt_data_end+0xfc01242c>
 80126a4:	10bfffc4 	addi	r2,r2,-1
 80126a8:	10009b1e 	bne	r2,zero,8012918 <__subdf3+0x578>
 80126ac:	344d883a 	add	r6,r6,r17
 80126b0:	3463803a 	cmpltu	r17,r6,r17
 80126b4:	194b883a 	add	r5,r3,r5
 80126b8:	2c4b883a 	add	r5,r5,r17
 80126bc:	3023883a 	mov	r17,r6
 80126c0:	003fd406 	br	8012614 <__alt_data_end+0xfc012614>
 80126c4:	1106b03a 	or	r3,r2,r4
 80126c8:	1800b426 	beq	r3,zero,801299c <__subdf3+0x5fc>
 80126cc:	100b883a 	mov	r5,r2
 80126d0:	2023883a 	mov	r17,r4
 80126d4:	888001cc 	andi	r2,r17,7
 80126d8:	103f561e 	bne	r2,zero,8012434 <__alt_data_end+0xfc012434>
 80126dc:	9200004c 	andi	r8,r18,1
 80126e0:	003fb206 	br	80125ac <__alt_data_end+0xfc0125ac>
 80126e4:	1000531e 	bne	r2,zero,8012834 <__subdf3+0x494>
 80126e8:	80800044 	addi	r2,r16,1
 80126ec:	1081ffcc 	andi	r2,r2,2047
 80126f0:	01000044 	movi	r4,1
 80126f4:	2080a00e 	bge	r4,r2,8012978 <__subdf3+0x5d8>
 80126f8:	8985c83a 	sub	r2,r17,r6
 80126fc:	8889803a 	cmpltu	r4,r17,r2
 8012700:	28e7c83a 	sub	r19,r5,r3
 8012704:	9927c83a 	sub	r19,r19,r4
 8012708:	9900202c 	andhi	r4,r19,128
 801270c:	20006226 	beq	r4,zero,8012898 <__subdf3+0x4f8>
 8012710:	3463c83a 	sub	r17,r6,r17
 8012714:	194bc83a 	sub	r5,r3,r5
 8012718:	344d803a 	cmpltu	r6,r6,r17
 801271c:	29a7c83a 	sub	r19,r5,r6
 8012720:	3825883a 	mov	r18,r7
 8012724:	983f841e 	bne	r19,zero,8012538 <__alt_data_end+0xfc012538>
 8012728:	8809883a 	mov	r4,r17
 801272c:	80048040 	call	8004804 <__clzsi2>
 8012730:	10800804 	addi	r2,r2,32
 8012734:	10fffe04 	addi	r3,r2,-8
 8012738:	010007c4 	movi	r4,31
 801273c:	20ff830e 	bge	r4,r3,801254c <__alt_data_end+0xfc01254c>
 8012740:	14fff604 	addi	r19,r2,-40
 8012744:	8ce6983a 	sll	r19,r17,r19
 8012748:	0023883a 	mov	r17,zero
 801274c:	1c3f860e 	bge	r3,r16,8012568 <__alt_data_end+0xfc012568>
 8012750:	017fe034 	movhi	r5,65408
 8012754:	297fffc4 	addi	r5,r5,-1
 8012758:	80e1c83a 	sub	r16,r16,r3
 801275c:	994a703a 	and	r5,r19,r5
 8012760:	003f3206 	br	801242c <__alt_data_end+0xfc01242c>
 8012764:	0009883a 	mov	r4,zero
 8012768:	0005883a 	mov	r2,zero
 801276c:	003f4706 	br	801248c <__alt_data_end+0xfc01248c>
 8012770:	198cb03a 	or	r6,r3,r6
 8012774:	300cc03a 	cmpne	r6,r6,zero
 8012778:	0005883a 	mov	r2,zero
 801277c:	003f6306 	br	801250c <__alt_data_end+0xfc01250c>
 8012780:	10009d1e 	bne	r2,zero,80129f8 <__subdf3+0x658>
 8012784:	81c00044 	addi	r7,r16,1
 8012788:	3881ffcc 	andi	r2,r7,2047
 801278c:	02400044 	movi	r9,1
 8012790:	4880680e 	bge	r9,r2,8012934 <__subdf3+0x594>
 8012794:	0081ffc4 	movi	r2,2047
 8012798:	3880ae26 	beq	r7,r2,8012a54 <__subdf3+0x6b4>
 801279c:	344d883a 	add	r6,r6,r17
 80127a0:	3463803a 	cmpltu	r17,r6,r17
 80127a4:	194b883a 	add	r5,r3,r5
 80127a8:	2c4b883a 	add	r5,r5,r17
 80127ac:	282297fa 	slli	r17,r5,31
 80127b0:	300cd07a 	srli	r6,r6,1
 80127b4:	280ad07a 	srli	r5,r5,1
 80127b8:	3821883a 	mov	r16,r7
 80127bc:	89a2b03a 	or	r17,r17,r6
 80127c0:	003f1a06 	br	801242c <__alt_data_end+0xfc01242c>
 80127c4:	0101ffc4 	movi	r4,2047
 80127c8:	813f431e 	bne	r16,r4,80124d8 <__alt_data_end+0xfc0124d8>
 80127cc:	003f1706 	br	801242c <__alt_data_end+0xfc01242c>
 80127d0:	80bff844 	addi	r2,r16,-31
 80127d4:	00c00804 	movi	r3,32
 80127d8:	9884d83a 	srl	r2,r19,r2
 80127dc:	28c05126 	beq	r5,r3,8012924 <__subdf3+0x584>
 80127e0:	00c00fc4 	movi	r3,63
 80127e4:	1c21c83a 	sub	r16,r3,r16
 80127e8:	9c26983a 	sll	r19,r19,r16
 80127ec:	9c62b03a 	or	r17,r19,r17
 80127f0:	8822c03a 	cmpne	r17,r17,zero
 80127f4:	88a2b03a 	or	r17,r17,r2
 80127f8:	000b883a 	mov	r5,zero
 80127fc:	0021883a 	mov	r16,zero
 8012800:	003fb406 	br	80126d4 <__alt_data_end+0xfc0126d4>
 8012804:	113ff804 	addi	r4,r2,-32
 8012808:	01c00804 	movi	r7,32
 801280c:	1908d83a 	srl	r4,r3,r4
 8012810:	11c04626 	beq	r2,r7,801292c <__subdf3+0x58c>
 8012814:	01c01004 	movi	r7,64
 8012818:	3885c83a 	sub	r2,r7,r2
 801281c:	1884983a 	sll	r2,r3,r2
 8012820:	118cb03a 	or	r6,r2,r6
 8012824:	300cc03a 	cmpne	r6,r6,zero
 8012828:	310cb03a 	or	r6,r6,r4
 801282c:	0005883a 	mov	r2,zero
 8012830:	003f3606 	br	801250c <__alt_data_end+0xfc01250c>
 8012834:	80002b26 	beq	r16,zero,80128e4 <__subdf3+0x544>
 8012838:	0101ffc4 	movi	r4,2047
 801283c:	51006926 	beq	r10,r4,80129e4 <__subdf3+0x644>
 8012840:	0085c83a 	sub	r2,zero,r2
 8012844:	29402034 	orhi	r5,r5,128
 8012848:	01000e04 	movi	r4,56
 801284c:	20807d16 	blt	r4,r2,8012a44 <__subdf3+0x6a4>
 8012850:	010007c4 	movi	r4,31
 8012854:	2080d916 	blt	r4,r2,8012bbc <__subdf3+0x81c>
 8012858:	01000804 	movi	r4,32
 801285c:	2089c83a 	sub	r4,r4,r2
 8012860:	2912983a 	sll	r9,r5,r4
 8012864:	8890d83a 	srl	r8,r17,r2
 8012868:	8908983a 	sll	r4,r17,r4
 801286c:	2884d83a 	srl	r2,r5,r2
 8012870:	4a22b03a 	or	r17,r9,r8
 8012874:	2008c03a 	cmpne	r4,r4,zero
 8012878:	8922b03a 	or	r17,r17,r4
 801287c:	3463c83a 	sub	r17,r6,r17
 8012880:	1885c83a 	sub	r2,r3,r2
 8012884:	344d803a 	cmpltu	r6,r6,r17
 8012888:	118bc83a 	sub	r5,r2,r6
 801288c:	5021883a 	mov	r16,r10
 8012890:	3825883a 	mov	r18,r7
 8012894:	003f2206 	br	8012520 <__alt_data_end+0xfc012520>
 8012898:	9886b03a 	or	r3,r19,r2
 801289c:	18001c1e 	bne	r3,zero,8012910 <__subdf3+0x570>
 80128a0:	0011883a 	mov	r8,zero
 80128a4:	000b883a 	mov	r5,zero
 80128a8:	0023883a 	mov	r17,zero
 80128ac:	0021883a 	mov	r16,zero
 80128b0:	003f3e06 	br	80125ac <__alt_data_end+0xfc0125ac>
 80128b4:	010007c4 	movi	r4,31
 80128b8:	20803c16 	blt	r4,r2,80129ac <__subdf3+0x60c>
 80128bc:	01000804 	movi	r4,32
 80128c0:	2089c83a 	sub	r4,r4,r2
 80128c4:	1912983a 	sll	r9,r3,r4
 80128c8:	308ed83a 	srl	r7,r6,r2
 80128cc:	3108983a 	sll	r4,r6,r4
 80128d0:	1884d83a 	srl	r2,r3,r2
 80128d4:	49ceb03a 	or	r7,r9,r7
 80128d8:	2008c03a 	cmpne	r4,r4,zero
 80128dc:	390eb03a 	or	r7,r7,r4
 80128e0:	003f4706 	br	8012600 <__alt_data_end+0xfc012600>
 80128e4:	2c48b03a 	or	r4,r5,r17
 80128e8:	20003e26 	beq	r4,zero,80129e4 <__subdf3+0x644>
 80128ec:	0084303a 	nor	r2,zero,r2
 80128f0:	10003a1e 	bne	r2,zero,80129dc <__subdf3+0x63c>
 80128f4:	3463c83a 	sub	r17,r6,r17
 80128f8:	194bc83a 	sub	r5,r3,r5
 80128fc:	344d803a 	cmpltu	r6,r6,r17
 8012900:	298bc83a 	sub	r5,r5,r6
 8012904:	5021883a 	mov	r16,r10
 8012908:	3825883a 	mov	r18,r7
 801290c:	003f0406 	br	8012520 <__alt_data_end+0xfc012520>
 8012910:	1023883a 	mov	r17,r2
 8012914:	003f0706 	br	8012534 <__alt_data_end+0xfc012534>
 8012918:	0101ffc4 	movi	r4,2047
 801291c:	813f331e 	bne	r16,r4,80125ec <__alt_data_end+0xfc0125ec>
 8012920:	003ec206 	br	801242c <__alt_data_end+0xfc01242c>
 8012924:	0027883a 	mov	r19,zero
 8012928:	003fb006 	br	80127ec <__alt_data_end+0xfc0127ec>
 801292c:	0005883a 	mov	r2,zero
 8012930:	003fbb06 	br	8012820 <__alt_data_end+0xfc012820>
 8012934:	2c44b03a 	or	r2,r5,r17
 8012938:	80008b1e 	bne	r16,zero,8012b68 <__subdf3+0x7c8>
 801293c:	1000b526 	beq	r2,zero,8012c14 <__subdf3+0x874>
 8012940:	1984b03a 	or	r2,r3,r6
 8012944:	103eb926 	beq	r2,zero,801242c <__alt_data_end+0xfc01242c>
 8012948:	3449883a 	add	r4,r6,r17
 801294c:	2463803a 	cmpltu	r17,r4,r17
 8012950:	194b883a 	add	r5,r3,r5
 8012954:	2c4b883a 	add	r5,r5,r17
 8012958:	2880202c 	andhi	r2,r5,128
 801295c:	2023883a 	mov	r17,r4
 8012960:	103f5c26 	beq	r2,zero,80126d4 <__alt_data_end+0xfc0126d4>
 8012964:	00bfe034 	movhi	r2,65408
 8012968:	10bfffc4 	addi	r2,r2,-1
 801296c:	4821883a 	mov	r16,r9
 8012970:	288a703a 	and	r5,r5,r2
 8012974:	003ead06 	br	801242c <__alt_data_end+0xfc01242c>
 8012978:	2c44b03a 	or	r2,r5,r17
 801297c:	8000291e 	bne	r16,zero,8012a24 <__subdf3+0x684>
 8012980:	10004f1e 	bne	r2,zero,8012ac0 <__subdf3+0x720>
 8012984:	1984b03a 	or	r2,r3,r6
 8012988:	10000426 	beq	r2,zero,801299c <__subdf3+0x5fc>
 801298c:	180b883a 	mov	r5,r3
 8012990:	3023883a 	mov	r17,r6
 8012994:	3825883a 	mov	r18,r7
 8012998:	003ea406 	br	801242c <__alt_data_end+0xfc01242c>
 801299c:	0011883a 	mov	r8,zero
 80129a0:	000b883a 	mov	r5,zero
 80129a4:	0023883a 	mov	r17,zero
 80129a8:	003f0006 	br	80125ac <__alt_data_end+0xfc0125ac>
 80129ac:	11fff804 	addi	r7,r2,-32
 80129b0:	19c8d83a 	srl	r4,r3,r7
 80129b4:	01c00804 	movi	r7,32
 80129b8:	11c07e26 	beq	r2,r7,8012bb4 <__subdf3+0x814>
 80129bc:	01c01004 	movi	r7,64
 80129c0:	3885c83a 	sub	r2,r7,r2
 80129c4:	1884983a 	sll	r2,r3,r2
 80129c8:	118cb03a 	or	r6,r2,r6
 80129cc:	300ec03a 	cmpne	r7,r6,zero
 80129d0:	390eb03a 	or	r7,r7,r4
 80129d4:	0005883a 	mov	r2,zero
 80129d8:	003f0906 	br	8012600 <__alt_data_end+0xfc012600>
 80129dc:	0101ffc4 	movi	r4,2047
 80129e0:	513f991e 	bne	r10,r4,8012848 <__alt_data_end+0xfc012848>
 80129e4:	180b883a 	mov	r5,r3
 80129e8:	3023883a 	mov	r17,r6
 80129ec:	5021883a 	mov	r16,r10
 80129f0:	3825883a 	mov	r18,r7
 80129f4:	003e8d06 	br	801242c <__alt_data_end+0xfc01242c>
 80129f8:	80001a1e 	bne	r16,zero,8012a64 <__subdf3+0x6c4>
 80129fc:	2c48b03a 	or	r4,r5,r17
 8012a00:	20005526 	beq	r4,zero,8012b58 <__subdf3+0x7b8>
 8012a04:	0084303a 	nor	r2,zero,r2
 8012a08:	1000511e 	bne	r2,zero,8012b50 <__subdf3+0x7b0>
 8012a0c:	89a3883a 	add	r17,r17,r6
 8012a10:	194b883a 	add	r5,r3,r5
 8012a14:	898d803a 	cmpltu	r6,r17,r6
 8012a18:	298b883a 	add	r5,r5,r6
 8012a1c:	5021883a 	mov	r16,r10
 8012a20:	003efc06 	br	8012614 <__alt_data_end+0xfc012614>
 8012a24:	1000341e 	bne	r2,zero,8012af8 <__subdf3+0x758>
 8012a28:	1984b03a 	or	r2,r3,r6
 8012a2c:	10006f26 	beq	r2,zero,8012bec <__subdf3+0x84c>
 8012a30:	180b883a 	mov	r5,r3
 8012a34:	3023883a 	mov	r17,r6
 8012a38:	3825883a 	mov	r18,r7
 8012a3c:	0401ffc4 	movi	r16,2047
 8012a40:	003e7a06 	br	801242c <__alt_data_end+0xfc01242c>
 8012a44:	2c62b03a 	or	r17,r5,r17
 8012a48:	8822c03a 	cmpne	r17,r17,zero
 8012a4c:	0005883a 	mov	r2,zero
 8012a50:	003f8a06 	br	801287c <__alt_data_end+0xfc01287c>
 8012a54:	3821883a 	mov	r16,r7
 8012a58:	000b883a 	mov	r5,zero
 8012a5c:	0023883a 	mov	r17,zero
 8012a60:	003ed206 	br	80125ac <__alt_data_end+0xfc0125ac>
 8012a64:	0101ffc4 	movi	r4,2047
 8012a68:	51003b26 	beq	r10,r4,8012b58 <__subdf3+0x7b8>
 8012a6c:	0085c83a 	sub	r2,zero,r2
 8012a70:	29402034 	orhi	r5,r5,128
 8012a74:	01000e04 	movi	r4,56
 8012a78:	20806216 	blt	r4,r2,8012c04 <__subdf3+0x864>
 8012a7c:	010007c4 	movi	r4,31
 8012a80:	20806b16 	blt	r4,r2,8012c30 <__subdf3+0x890>
 8012a84:	01000804 	movi	r4,32
 8012a88:	2089c83a 	sub	r4,r4,r2
 8012a8c:	2912983a 	sll	r9,r5,r4
 8012a90:	888ed83a 	srl	r7,r17,r2
 8012a94:	8908983a 	sll	r4,r17,r4
 8012a98:	2884d83a 	srl	r2,r5,r2
 8012a9c:	49e2b03a 	or	r17,r9,r7
 8012aa0:	2008c03a 	cmpne	r4,r4,zero
 8012aa4:	8922b03a 	or	r17,r17,r4
 8012aa8:	89a3883a 	add	r17,r17,r6
 8012aac:	10c5883a 	add	r2,r2,r3
 8012ab0:	898d803a 	cmpltu	r6,r17,r6
 8012ab4:	118b883a 	add	r5,r2,r6
 8012ab8:	5021883a 	mov	r16,r10
 8012abc:	003ed506 	br	8012614 <__alt_data_end+0xfc012614>
 8012ac0:	1984b03a 	or	r2,r3,r6
 8012ac4:	103e5926 	beq	r2,zero,801242c <__alt_data_end+0xfc01242c>
 8012ac8:	8989c83a 	sub	r4,r17,r6
 8012acc:	8911803a 	cmpltu	r8,r17,r4
 8012ad0:	28c5c83a 	sub	r2,r5,r3
 8012ad4:	1205c83a 	sub	r2,r2,r8
 8012ad8:	1200202c 	andhi	r8,r2,128
 8012adc:	403ef926 	beq	r8,zero,80126c4 <__alt_data_end+0xfc0126c4>
 8012ae0:	3463c83a 	sub	r17,r6,r17
 8012ae4:	194bc83a 	sub	r5,r3,r5
 8012ae8:	344d803a 	cmpltu	r6,r6,r17
 8012aec:	298bc83a 	sub	r5,r5,r6
 8012af0:	3825883a 	mov	r18,r7
 8012af4:	003e4d06 	br	801242c <__alt_data_end+0xfc01242c>
 8012af8:	1984b03a 	or	r2,r3,r6
 8012afc:	10002b26 	beq	r2,zero,8012bac <__subdf3+0x80c>
 8012b00:	2808d0fa 	srli	r4,r5,3
 8012b04:	8822d0fa 	srli	r17,r17,3
 8012b08:	280a977a 	slli	r5,r5,29
 8012b0c:	2080022c 	andhi	r2,r4,8
 8012b10:	2c62b03a 	or	r17,r5,r17
 8012b14:	10000826 	beq	r2,zero,8012b38 <__subdf3+0x798>
 8012b18:	1810d0fa 	srli	r8,r3,3
 8012b1c:	4080022c 	andhi	r2,r8,8
 8012b20:	1000051e 	bne	r2,zero,8012b38 <__subdf3+0x798>
 8012b24:	300cd0fa 	srli	r6,r6,3
 8012b28:	1804977a 	slli	r2,r3,29
 8012b2c:	4009883a 	mov	r4,r8
 8012b30:	3825883a 	mov	r18,r7
 8012b34:	11a2b03a 	or	r17,r2,r6
 8012b38:	880ad77a 	srli	r5,r17,29
 8012b3c:	200890fa 	slli	r4,r4,3
 8012b40:	882290fa 	slli	r17,r17,3
 8012b44:	0401ffc4 	movi	r16,2047
 8012b48:	290ab03a 	or	r5,r5,r4
 8012b4c:	003e3706 	br	801242c <__alt_data_end+0xfc01242c>
 8012b50:	0101ffc4 	movi	r4,2047
 8012b54:	513fc71e 	bne	r10,r4,8012a74 <__alt_data_end+0xfc012a74>
 8012b58:	180b883a 	mov	r5,r3
 8012b5c:	3023883a 	mov	r17,r6
 8012b60:	5021883a 	mov	r16,r10
 8012b64:	003e3106 	br	801242c <__alt_data_end+0xfc01242c>
 8012b68:	10002d26 	beq	r2,zero,8012c20 <__subdf3+0x880>
 8012b6c:	1984b03a 	or	r2,r3,r6
 8012b70:	10000e26 	beq	r2,zero,8012bac <__subdf3+0x80c>
 8012b74:	2808d0fa 	srli	r4,r5,3
 8012b78:	8822d0fa 	srli	r17,r17,3
 8012b7c:	280a977a 	slli	r5,r5,29
 8012b80:	2080022c 	andhi	r2,r4,8
 8012b84:	2c62b03a 	or	r17,r5,r17
 8012b88:	103feb26 	beq	r2,zero,8012b38 <__alt_data_end+0xfc012b38>
 8012b8c:	180ed0fa 	srli	r7,r3,3
 8012b90:	3880022c 	andhi	r2,r7,8
 8012b94:	103fe81e 	bne	r2,zero,8012b38 <__alt_data_end+0xfc012b38>
 8012b98:	300cd0fa 	srli	r6,r6,3
 8012b9c:	1804977a 	slli	r2,r3,29
 8012ba0:	3809883a 	mov	r4,r7
 8012ba4:	11a2b03a 	or	r17,r2,r6
 8012ba8:	003fe306 	br	8012b38 <__alt_data_end+0xfc012b38>
 8012bac:	0401ffc4 	movi	r16,2047
 8012bb0:	003e1e06 	br	801242c <__alt_data_end+0xfc01242c>
 8012bb4:	0005883a 	mov	r2,zero
 8012bb8:	003f8306 	br	80129c8 <__alt_data_end+0xfc0129c8>
 8012bbc:	113ff804 	addi	r4,r2,-32
 8012bc0:	02000804 	movi	r8,32
 8012bc4:	2908d83a 	srl	r4,r5,r4
 8012bc8:	12002526 	beq	r2,r8,8012c60 <__subdf3+0x8c0>
 8012bcc:	02001004 	movi	r8,64
 8012bd0:	4085c83a 	sub	r2,r8,r2
 8012bd4:	288a983a 	sll	r5,r5,r2
 8012bd8:	2c62b03a 	or	r17,r5,r17
 8012bdc:	8822c03a 	cmpne	r17,r17,zero
 8012be0:	8922b03a 	or	r17,r17,r4
 8012be4:	0005883a 	mov	r2,zero
 8012be8:	003f2406 	br	801287c <__alt_data_end+0xfc01287c>
 8012bec:	01402034 	movhi	r5,128
 8012bf0:	0011883a 	mov	r8,zero
 8012bf4:	297fffc4 	addi	r5,r5,-1
 8012bf8:	047ffe04 	movi	r17,-8
 8012bfc:	0401ffc4 	movi	r16,2047
 8012c00:	003e6a06 	br	80125ac <__alt_data_end+0xfc0125ac>
 8012c04:	2c62b03a 	or	r17,r5,r17
 8012c08:	8822c03a 	cmpne	r17,r17,zero
 8012c0c:	0005883a 	mov	r2,zero
 8012c10:	003fa506 	br	8012aa8 <__alt_data_end+0xfc012aa8>
 8012c14:	180b883a 	mov	r5,r3
 8012c18:	3023883a 	mov	r17,r6
 8012c1c:	003e0306 	br	801242c <__alt_data_end+0xfc01242c>
 8012c20:	180b883a 	mov	r5,r3
 8012c24:	3023883a 	mov	r17,r6
 8012c28:	0401ffc4 	movi	r16,2047
 8012c2c:	003dff06 	br	801242c <__alt_data_end+0xfc01242c>
 8012c30:	113ff804 	addi	r4,r2,-32
 8012c34:	01c00804 	movi	r7,32
 8012c38:	2908d83a 	srl	r4,r5,r4
 8012c3c:	11c00a26 	beq	r2,r7,8012c68 <__subdf3+0x8c8>
 8012c40:	01c01004 	movi	r7,64
 8012c44:	3885c83a 	sub	r2,r7,r2
 8012c48:	288a983a 	sll	r5,r5,r2
 8012c4c:	2c62b03a 	or	r17,r5,r17
 8012c50:	8822c03a 	cmpne	r17,r17,zero
 8012c54:	8922b03a 	or	r17,r17,r4
 8012c58:	0005883a 	mov	r2,zero
 8012c5c:	003f9206 	br	8012aa8 <__alt_data_end+0xfc012aa8>
 8012c60:	000b883a 	mov	r5,zero
 8012c64:	003fdc06 	br	8012bd8 <__alt_data_end+0xfc012bd8>
 8012c68:	000b883a 	mov	r5,zero
 8012c6c:	003ff706 	br	8012c4c <__alt_data_end+0xfc012c4c>

08012c70 <__floatunsidf>:
 8012c70:	defffe04 	addi	sp,sp,-8
 8012c74:	dc000015 	stw	r16,0(sp)
 8012c78:	dfc00115 	stw	ra,4(sp)
 8012c7c:	2021883a 	mov	r16,r4
 8012c80:	20001026 	beq	r4,zero,8012cc4 <__floatunsidf+0x54>
 8012c84:	80048040 	call	8004804 <__clzsi2>
 8012c88:	01410784 	movi	r5,1054
 8012c8c:	100d883a 	mov	r6,r2
 8012c90:	288bc83a 	sub	r5,r5,r2
 8012c94:	00800284 	movi	r2,10
 8012c98:	11801616 	blt	r2,r6,8012cf4 <__floatunsidf+0x84>
 8012c9c:	008002c4 	movi	r2,11
 8012ca0:	1185c83a 	sub	r2,r2,r6
 8012ca4:	8084d83a 	srl	r2,r16,r2
 8012ca8:	00c00434 	movhi	r3,16
 8012cac:	31c00544 	addi	r7,r6,21
 8012cb0:	18ffffc4 	addi	r3,r3,-1
 8012cb4:	81e0983a 	sll	r16,r16,r7
 8012cb8:	10cc703a 	and	r6,r2,r3
 8012cbc:	2941ffcc 	andi	r5,r5,2047
 8012cc0:	00000206 	br	8012ccc <__floatunsidf+0x5c>
 8012cc4:	000b883a 	mov	r5,zero
 8012cc8:	000d883a 	mov	r6,zero
 8012ccc:	280a953a 	slli	r5,r5,20
 8012cd0:	00c00434 	movhi	r3,16
 8012cd4:	18ffffc4 	addi	r3,r3,-1
 8012cd8:	30c6703a 	and	r3,r6,r3
 8012cdc:	8005883a 	mov	r2,r16
 8012ce0:	1946b03a 	or	r3,r3,r5
 8012ce4:	dfc00117 	ldw	ra,4(sp)
 8012ce8:	dc000017 	ldw	r16,0(sp)
 8012cec:	dec00204 	addi	sp,sp,8
 8012cf0:	f800283a 	ret
 8012cf4:	31bffd44 	addi	r6,r6,-11
 8012cf8:	818c983a 	sll	r6,r16,r6
 8012cfc:	00800434 	movhi	r2,16
 8012d00:	10bfffc4 	addi	r2,r2,-1
 8012d04:	2941ffcc 	andi	r5,r5,2047
 8012d08:	0021883a 	mov	r16,zero
 8012d0c:	308c703a 	and	r6,r6,r2
 8012d10:	003fee06 	br	8012ccc <__alt_data_end+0xfc012ccc>

08012d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012d14:	defffe04 	addi	sp,sp,-8
 8012d18:	dfc00115 	stw	ra,4(sp)
 8012d1c:	df000015 	stw	fp,0(sp)
 8012d20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012d24:	008200b4 	movhi	r2,2050
 8012d28:	10889404 	addi	r2,r2,8784
 8012d2c:	10800017 	ldw	r2,0(r2)
 8012d30:	10000526 	beq	r2,zero,8012d48 <alt_get_errno+0x34>
 8012d34:	008200b4 	movhi	r2,2050
 8012d38:	10889404 	addi	r2,r2,8784
 8012d3c:	10800017 	ldw	r2,0(r2)
 8012d40:	103ee83a 	callr	r2
 8012d44:	00000206 	br	8012d50 <alt_get_errno+0x3c>
 8012d48:	008200b4 	movhi	r2,2050
 8012d4c:	108f6d04 	addi	r2,r2,15796
}
 8012d50:	e037883a 	mov	sp,fp
 8012d54:	dfc00117 	ldw	ra,4(sp)
 8012d58:	df000017 	ldw	fp,0(sp)
 8012d5c:	dec00204 	addi	sp,sp,8
 8012d60:	f800283a 	ret

08012d64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8012d64:	defffb04 	addi	sp,sp,-20
 8012d68:	dfc00415 	stw	ra,16(sp)
 8012d6c:	df000315 	stw	fp,12(sp)
 8012d70:	df000304 	addi	fp,sp,12
 8012d74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8012d78:	e0bfff17 	ldw	r2,-4(fp)
 8012d7c:	10000616 	blt	r2,zero,8012d98 <close+0x34>
 8012d80:	e0bfff17 	ldw	r2,-4(fp)
 8012d84:	10c00324 	muli	r3,r2,12
 8012d88:	008200b4 	movhi	r2,2050
 8012d8c:	10840604 	addi	r2,r2,4120
 8012d90:	1885883a 	add	r2,r3,r2
 8012d94:	00000106 	br	8012d9c <close+0x38>
 8012d98:	0005883a 	mov	r2,zero
 8012d9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8012da0:	e0bffd17 	ldw	r2,-12(fp)
 8012da4:	10001926 	beq	r2,zero,8012e0c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8012da8:	e0bffd17 	ldw	r2,-12(fp)
 8012dac:	10800017 	ldw	r2,0(r2)
 8012db0:	10800417 	ldw	r2,16(r2)
 8012db4:	10000626 	beq	r2,zero,8012dd0 <close+0x6c>
 8012db8:	e0bffd17 	ldw	r2,-12(fp)
 8012dbc:	10800017 	ldw	r2,0(r2)
 8012dc0:	10800417 	ldw	r2,16(r2)
 8012dc4:	e13ffd17 	ldw	r4,-12(fp)
 8012dc8:	103ee83a 	callr	r2
 8012dcc:	00000106 	br	8012dd4 <close+0x70>
 8012dd0:	0005883a 	mov	r2,zero
 8012dd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8012dd8:	e13fff17 	ldw	r4,-4(fp)
 8012ddc:	80134600 	call	8013460 <alt_release_fd>
    if (rval < 0)
 8012de0:	e0bffe17 	ldw	r2,-8(fp)
 8012de4:	1000070e 	bge	r2,zero,8012e04 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8012de8:	8012d140 	call	8012d14 <alt_get_errno>
 8012dec:	1007883a 	mov	r3,r2
 8012df0:	e0bffe17 	ldw	r2,-8(fp)
 8012df4:	0085c83a 	sub	r2,zero,r2
 8012df8:	18800015 	stw	r2,0(r3)
      return -1;
 8012dfc:	00bfffc4 	movi	r2,-1
 8012e00:	00000706 	br	8012e20 <close+0xbc>
    }
    return 0;
 8012e04:	0005883a 	mov	r2,zero
 8012e08:	00000506 	br	8012e20 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012e0c:	8012d140 	call	8012d14 <alt_get_errno>
 8012e10:	1007883a 	mov	r3,r2
 8012e14:	00801444 	movi	r2,81
 8012e18:	18800015 	stw	r2,0(r3)
    return -1;
 8012e1c:	00bfffc4 	movi	r2,-1
  }
}
 8012e20:	e037883a 	mov	sp,fp
 8012e24:	dfc00117 	ldw	ra,4(sp)
 8012e28:	df000017 	ldw	fp,0(sp)
 8012e2c:	dec00204 	addi	sp,sp,8
 8012e30:	f800283a 	ret

08012e34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8012e34:	defffc04 	addi	sp,sp,-16
 8012e38:	df000315 	stw	fp,12(sp)
 8012e3c:	df000304 	addi	fp,sp,12
 8012e40:	e13ffd15 	stw	r4,-12(fp)
 8012e44:	e17ffe15 	stw	r5,-8(fp)
 8012e48:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8012e4c:	e0bfff17 	ldw	r2,-4(fp)
}
 8012e50:	e037883a 	mov	sp,fp
 8012e54:	df000017 	ldw	fp,0(sp)
 8012e58:	dec00104 	addi	sp,sp,4
 8012e5c:	f800283a 	ret

08012e60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012e60:	defffe04 	addi	sp,sp,-8
 8012e64:	dfc00115 	stw	ra,4(sp)
 8012e68:	df000015 	stw	fp,0(sp)
 8012e6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012e70:	008200b4 	movhi	r2,2050
 8012e74:	10889404 	addi	r2,r2,8784
 8012e78:	10800017 	ldw	r2,0(r2)
 8012e7c:	10000526 	beq	r2,zero,8012e94 <alt_get_errno+0x34>
 8012e80:	008200b4 	movhi	r2,2050
 8012e84:	10889404 	addi	r2,r2,8784
 8012e88:	10800017 	ldw	r2,0(r2)
 8012e8c:	103ee83a 	callr	r2
 8012e90:	00000206 	br	8012e9c <alt_get_errno+0x3c>
 8012e94:	008200b4 	movhi	r2,2050
 8012e98:	108f6d04 	addi	r2,r2,15796
}
 8012e9c:	e037883a 	mov	sp,fp
 8012ea0:	dfc00117 	ldw	ra,4(sp)
 8012ea4:	df000017 	ldw	fp,0(sp)
 8012ea8:	dec00204 	addi	sp,sp,8
 8012eac:	f800283a 	ret

08012eb0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8012eb0:	defffb04 	addi	sp,sp,-20
 8012eb4:	dfc00415 	stw	ra,16(sp)
 8012eb8:	df000315 	stw	fp,12(sp)
 8012ebc:	df000304 	addi	fp,sp,12
 8012ec0:	e13ffe15 	stw	r4,-8(fp)
 8012ec4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012ec8:	e0bffe17 	ldw	r2,-8(fp)
 8012ecc:	10000616 	blt	r2,zero,8012ee8 <fstat+0x38>
 8012ed0:	e0bffe17 	ldw	r2,-8(fp)
 8012ed4:	10c00324 	muli	r3,r2,12
 8012ed8:	008200b4 	movhi	r2,2050
 8012edc:	10840604 	addi	r2,r2,4120
 8012ee0:	1885883a 	add	r2,r3,r2
 8012ee4:	00000106 	br	8012eec <fstat+0x3c>
 8012ee8:	0005883a 	mov	r2,zero
 8012eec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8012ef0:	e0bffd17 	ldw	r2,-12(fp)
 8012ef4:	10001026 	beq	r2,zero,8012f38 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8012ef8:	e0bffd17 	ldw	r2,-12(fp)
 8012efc:	10800017 	ldw	r2,0(r2)
 8012f00:	10800817 	ldw	r2,32(r2)
 8012f04:	10000726 	beq	r2,zero,8012f24 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8012f08:	e0bffd17 	ldw	r2,-12(fp)
 8012f0c:	10800017 	ldw	r2,0(r2)
 8012f10:	10800817 	ldw	r2,32(r2)
 8012f14:	e13ffd17 	ldw	r4,-12(fp)
 8012f18:	e17fff17 	ldw	r5,-4(fp)
 8012f1c:	103ee83a 	callr	r2
 8012f20:	00000a06 	br	8012f4c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8012f24:	e0bfff17 	ldw	r2,-4(fp)
 8012f28:	00c80004 	movi	r3,8192
 8012f2c:	10c00115 	stw	r3,4(r2)
      return 0;
 8012f30:	0005883a 	mov	r2,zero
 8012f34:	00000506 	br	8012f4c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012f38:	8012e600 	call	8012e60 <alt_get_errno>
 8012f3c:	1007883a 	mov	r3,r2
 8012f40:	00801444 	movi	r2,81
 8012f44:	18800015 	stw	r2,0(r3)
    return -1;
 8012f48:	00bfffc4 	movi	r2,-1
  }
}
 8012f4c:	e037883a 	mov	sp,fp
 8012f50:	dfc00117 	ldw	ra,4(sp)
 8012f54:	df000017 	ldw	fp,0(sp)
 8012f58:	dec00204 	addi	sp,sp,8
 8012f5c:	f800283a 	ret

08012f60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012f60:	defffe04 	addi	sp,sp,-8
 8012f64:	dfc00115 	stw	ra,4(sp)
 8012f68:	df000015 	stw	fp,0(sp)
 8012f6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012f70:	008200b4 	movhi	r2,2050
 8012f74:	10889404 	addi	r2,r2,8784
 8012f78:	10800017 	ldw	r2,0(r2)
 8012f7c:	10000526 	beq	r2,zero,8012f94 <alt_get_errno+0x34>
 8012f80:	008200b4 	movhi	r2,2050
 8012f84:	10889404 	addi	r2,r2,8784
 8012f88:	10800017 	ldw	r2,0(r2)
 8012f8c:	103ee83a 	callr	r2
 8012f90:	00000206 	br	8012f9c <alt_get_errno+0x3c>
 8012f94:	008200b4 	movhi	r2,2050
 8012f98:	108f6d04 	addi	r2,r2,15796
}
 8012f9c:	e037883a 	mov	sp,fp
 8012fa0:	dfc00117 	ldw	ra,4(sp)
 8012fa4:	df000017 	ldw	fp,0(sp)
 8012fa8:	dec00204 	addi	sp,sp,8
 8012fac:	f800283a 	ret

08012fb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8012fb0:	deffed04 	addi	sp,sp,-76
 8012fb4:	dfc01215 	stw	ra,72(sp)
 8012fb8:	df001115 	stw	fp,68(sp)
 8012fbc:	df001104 	addi	fp,sp,68
 8012fc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8012fc4:	e0bfff17 	ldw	r2,-4(fp)
 8012fc8:	10000616 	blt	r2,zero,8012fe4 <isatty+0x34>
 8012fcc:	e0bfff17 	ldw	r2,-4(fp)
 8012fd0:	10c00324 	muli	r3,r2,12
 8012fd4:	008200b4 	movhi	r2,2050
 8012fd8:	10840604 	addi	r2,r2,4120
 8012fdc:	1885883a 	add	r2,r3,r2
 8012fe0:	00000106 	br	8012fe8 <isatty+0x38>
 8012fe4:	0005883a 	mov	r2,zero
 8012fe8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8012fec:	e0bfef17 	ldw	r2,-68(fp)
 8012ff0:	10000e26 	beq	r2,zero,801302c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8012ff4:	e0bfef17 	ldw	r2,-68(fp)
 8012ff8:	10800017 	ldw	r2,0(r2)
 8012ffc:	10800817 	ldw	r2,32(r2)
 8013000:	1000021e 	bne	r2,zero,801300c <isatty+0x5c>
    {
      return 1;
 8013004:	00800044 	movi	r2,1
 8013008:	00000d06 	br	8013040 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 801300c:	e0bff004 	addi	r2,fp,-64
 8013010:	e13fff17 	ldw	r4,-4(fp)
 8013014:	100b883a 	mov	r5,r2
 8013018:	8012eb00 	call	8012eb0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 801301c:	e0bff117 	ldw	r2,-60(fp)
 8013020:	10880020 	cmpeqi	r2,r2,8192
 8013024:	10803fcc 	andi	r2,r2,255
 8013028:	00000506 	br	8013040 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801302c:	8012f600 	call	8012f60 <alt_get_errno>
 8013030:	1007883a 	mov	r3,r2
 8013034:	00801444 	movi	r2,81
 8013038:	18800015 	stw	r2,0(r3)
    return 0;
 801303c:	0005883a 	mov	r2,zero
  }
}
 8013040:	e037883a 	mov	sp,fp
 8013044:	dfc00117 	ldw	ra,4(sp)
 8013048:	df000017 	ldw	fp,0(sp)
 801304c:	dec00204 	addi	sp,sp,8
 8013050:	f800283a 	ret

08013054 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8013054:	defffc04 	addi	sp,sp,-16
 8013058:	df000315 	stw	fp,12(sp)
 801305c:	df000304 	addi	fp,sp,12
 8013060:	e13ffd15 	stw	r4,-12(fp)
 8013064:	e17ffe15 	stw	r5,-8(fp)
 8013068:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 801306c:	e0fffe17 	ldw	r3,-8(fp)
 8013070:	e0bffd17 	ldw	r2,-12(fp)
 8013074:	18800c26 	beq	r3,r2,80130a8 <alt_load_section+0x54>
  {
    while( to != end )
 8013078:	00000806 	br	801309c <alt_load_section+0x48>
    {
      *to++ = *from++;
 801307c:	e0bffe17 	ldw	r2,-8(fp)
 8013080:	10c00104 	addi	r3,r2,4
 8013084:	e0fffe15 	stw	r3,-8(fp)
 8013088:	e0fffd17 	ldw	r3,-12(fp)
 801308c:	19000104 	addi	r4,r3,4
 8013090:	e13ffd15 	stw	r4,-12(fp)
 8013094:	18c00017 	ldw	r3,0(r3)
 8013098:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 801309c:	e0fffe17 	ldw	r3,-8(fp)
 80130a0:	e0bfff17 	ldw	r2,-4(fp)
 80130a4:	18bff51e 	bne	r3,r2,801307c <__alt_data_end+0xfc01307c>
    {
      *to++ = *from++;
    }
  }
}
 80130a8:	e037883a 	mov	sp,fp
 80130ac:	df000017 	ldw	fp,0(sp)
 80130b0:	dec00104 	addi	sp,sp,4
 80130b4:	f800283a 	ret

080130b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80130b8:	defffe04 	addi	sp,sp,-8
 80130bc:	dfc00115 	stw	ra,4(sp)
 80130c0:	df000015 	stw	fp,0(sp)
 80130c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80130c8:	010200b4 	movhi	r4,2050
 80130cc:	21089904 	addi	r4,r4,8804
 80130d0:	014200b4 	movhi	r5,2050
 80130d4:	2941c904 	addi	r5,r5,1828
 80130d8:	018200b4 	movhi	r6,2050
 80130dc:	31889904 	addi	r6,r6,8804
 80130e0:	80130540 	call	8013054 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80130e4:	01020034 	movhi	r4,2048
 80130e8:	21000804 	addi	r4,r4,32
 80130ec:	01420034 	movhi	r5,2048
 80130f0:	29400804 	addi	r5,r5,32
 80130f4:	01820034 	movhi	r6,2048
 80130f8:	31806f04 	addi	r6,r6,444
 80130fc:	80130540 	call	8013054 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8013100:	01020074 	movhi	r4,2049
 8013104:	2116f704 	addi	r4,r4,23516
 8013108:	01420074 	movhi	r5,2049
 801310c:	2956f704 	addi	r5,r5,23516
 8013110:	018200b4 	movhi	r6,2050
 8013114:	3181c904 	addi	r6,r6,1828
 8013118:	80130540 	call	8013054 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801311c:	8014b240 	call	8014b24 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8013120:	8014d7c0 	call	8014d7c <alt_icache_flush_all>
}
 8013124:	e037883a 	mov	sp,fp
 8013128:	dfc00117 	ldw	ra,4(sp)
 801312c:	df000017 	ldw	fp,0(sp)
 8013130:	dec00204 	addi	sp,sp,8
 8013134:	f800283a 	ret

08013138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013138:	defffe04 	addi	sp,sp,-8
 801313c:	dfc00115 	stw	ra,4(sp)
 8013140:	df000015 	stw	fp,0(sp)
 8013144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013148:	008200b4 	movhi	r2,2050
 801314c:	10889404 	addi	r2,r2,8784
 8013150:	10800017 	ldw	r2,0(r2)
 8013154:	10000526 	beq	r2,zero,801316c <alt_get_errno+0x34>
 8013158:	008200b4 	movhi	r2,2050
 801315c:	10889404 	addi	r2,r2,8784
 8013160:	10800017 	ldw	r2,0(r2)
 8013164:	103ee83a 	callr	r2
 8013168:	00000206 	br	8013174 <alt_get_errno+0x3c>
 801316c:	008200b4 	movhi	r2,2050
 8013170:	108f6d04 	addi	r2,r2,15796
}
 8013174:	e037883a 	mov	sp,fp
 8013178:	dfc00117 	ldw	ra,4(sp)
 801317c:	df000017 	ldw	fp,0(sp)
 8013180:	dec00204 	addi	sp,sp,8
 8013184:	f800283a 	ret

08013188 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8013188:	defff904 	addi	sp,sp,-28
 801318c:	dfc00615 	stw	ra,24(sp)
 8013190:	df000515 	stw	fp,20(sp)
 8013194:	df000504 	addi	fp,sp,20
 8013198:	e13ffd15 	stw	r4,-12(fp)
 801319c:	e17ffe15 	stw	r5,-8(fp)
 80131a0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80131a4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80131a8:	e0bffd17 	ldw	r2,-12(fp)
 80131ac:	10000616 	blt	r2,zero,80131c8 <lseek+0x40>
 80131b0:	e0bffd17 	ldw	r2,-12(fp)
 80131b4:	10c00324 	muli	r3,r2,12
 80131b8:	008200b4 	movhi	r2,2050
 80131bc:	10840604 	addi	r2,r2,4120
 80131c0:	1885883a 	add	r2,r3,r2
 80131c4:	00000106 	br	80131cc <lseek+0x44>
 80131c8:	0005883a 	mov	r2,zero
 80131cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80131d0:	e0bffc17 	ldw	r2,-16(fp)
 80131d4:	10001026 	beq	r2,zero,8013218 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80131d8:	e0bffc17 	ldw	r2,-16(fp)
 80131dc:	10800017 	ldw	r2,0(r2)
 80131e0:	10800717 	ldw	r2,28(r2)
 80131e4:	10000926 	beq	r2,zero,801320c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80131e8:	e0bffc17 	ldw	r2,-16(fp)
 80131ec:	10800017 	ldw	r2,0(r2)
 80131f0:	10800717 	ldw	r2,28(r2)
 80131f4:	e13ffc17 	ldw	r4,-16(fp)
 80131f8:	e17ffe17 	ldw	r5,-8(fp)
 80131fc:	e1bfff17 	ldw	r6,-4(fp)
 8013200:	103ee83a 	callr	r2
 8013204:	e0bffb15 	stw	r2,-20(fp)
 8013208:	00000506 	br	8013220 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801320c:	00bfde84 	movi	r2,-134
 8013210:	e0bffb15 	stw	r2,-20(fp)
 8013214:	00000206 	br	8013220 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8013218:	00bfebc4 	movi	r2,-81
 801321c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8013220:	e0bffb17 	ldw	r2,-20(fp)
 8013224:	1000070e 	bge	r2,zero,8013244 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8013228:	80131380 	call	8013138 <alt_get_errno>
 801322c:	1007883a 	mov	r3,r2
 8013230:	e0bffb17 	ldw	r2,-20(fp)
 8013234:	0085c83a 	sub	r2,zero,r2
 8013238:	18800015 	stw	r2,0(r3)
    rc = -1;
 801323c:	00bfffc4 	movi	r2,-1
 8013240:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8013244:	e0bffb17 	ldw	r2,-20(fp)
}
 8013248:	e037883a 	mov	sp,fp
 801324c:	dfc00117 	ldw	ra,4(sp)
 8013250:	df000017 	ldw	fp,0(sp)
 8013254:	dec00204 	addi	sp,sp,8
 8013258:	f800283a 	ret

0801325c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801325c:	defffd04 	addi	sp,sp,-12
 8013260:	dfc00215 	stw	ra,8(sp)
 8013264:	df000115 	stw	fp,4(sp)
 8013268:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801326c:	0009883a 	mov	r4,zero
 8013270:	80137f80 	call	80137f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8013274:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8013278:	801382c0 	call	801382c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 801327c:	010200b4 	movhi	r4,2050
 8013280:	2101b904 	addi	r4,r4,1764
 8013284:	014200b4 	movhi	r5,2050
 8013288:	2941b904 	addi	r5,r5,1764
 801328c:	018200b4 	movhi	r6,2050
 8013290:	3181b904 	addi	r6,r6,1764
 8013294:	801513c0 	call	801513c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8013298:	8014c340 	call	8014c34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 801329c:	01020074 	movhi	r4,2049
 80132a0:	21132404 	addi	r4,r4,19600
 80132a4:	80158380 	call	8015838 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80132a8:	d126e817 	ldw	r4,-25696(gp)
 80132ac:	d0e6e917 	ldw	r3,-25692(gp)
 80132b0:	d0a6ea17 	ldw	r2,-25688(gp)
 80132b4:	180b883a 	mov	r5,r3
 80132b8:	100d883a 	mov	r6,r2
 80132bc:	80032fc0 	call	80032fc <main>
 80132c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80132c4:	01000044 	movi	r4,1
 80132c8:	8012d640 	call	8012d64 <close>
  exit (result);
 80132cc:	e13fff17 	ldw	r4,-4(fp)
 80132d0:	801584c0 	call	801584c <exit>

080132d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80132d4:	defffe04 	addi	sp,sp,-8
 80132d8:	df000115 	stw	fp,4(sp)
 80132dc:	df000104 	addi	fp,sp,4
 80132e0:	e13fff15 	stw	r4,-4(fp)
}
 80132e4:	e037883a 	mov	sp,fp
 80132e8:	df000017 	ldw	fp,0(sp)
 80132ec:	dec00104 	addi	sp,sp,4
 80132f0:	f800283a 	ret

080132f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80132f4:	defffe04 	addi	sp,sp,-8
 80132f8:	df000115 	stw	fp,4(sp)
 80132fc:	df000104 	addi	fp,sp,4
 8013300:	e13fff15 	stw	r4,-4(fp)
}
 8013304:	e037883a 	mov	sp,fp
 8013308:	df000017 	ldw	fp,0(sp)
 801330c:	dec00104 	addi	sp,sp,4
 8013310:	f800283a 	ret

08013314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013314:	defffe04 	addi	sp,sp,-8
 8013318:	dfc00115 	stw	ra,4(sp)
 801331c:	df000015 	stw	fp,0(sp)
 8013320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013324:	008200b4 	movhi	r2,2050
 8013328:	10889404 	addi	r2,r2,8784
 801332c:	10800017 	ldw	r2,0(r2)
 8013330:	10000526 	beq	r2,zero,8013348 <alt_get_errno+0x34>
 8013334:	008200b4 	movhi	r2,2050
 8013338:	10889404 	addi	r2,r2,8784
 801333c:	10800017 	ldw	r2,0(r2)
 8013340:	103ee83a 	callr	r2
 8013344:	00000206 	br	8013350 <alt_get_errno+0x3c>
 8013348:	008200b4 	movhi	r2,2050
 801334c:	108f6d04 	addi	r2,r2,15796
}
 8013350:	e037883a 	mov	sp,fp
 8013354:	dfc00117 	ldw	ra,4(sp)
 8013358:	df000017 	ldw	fp,0(sp)
 801335c:	dec00204 	addi	sp,sp,8
 8013360:	f800283a 	ret

08013364 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8013364:	defff904 	addi	sp,sp,-28
 8013368:	dfc00615 	stw	ra,24(sp)
 801336c:	df000515 	stw	fp,20(sp)
 8013370:	df000504 	addi	fp,sp,20
 8013374:	e13ffd15 	stw	r4,-12(fp)
 8013378:	e17ffe15 	stw	r5,-8(fp)
 801337c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013380:	e0bffd17 	ldw	r2,-12(fp)
 8013384:	10000616 	blt	r2,zero,80133a0 <read+0x3c>
 8013388:	e0bffd17 	ldw	r2,-12(fp)
 801338c:	10c00324 	muli	r3,r2,12
 8013390:	008200b4 	movhi	r2,2050
 8013394:	10840604 	addi	r2,r2,4120
 8013398:	1885883a 	add	r2,r3,r2
 801339c:	00000106 	br	80133a4 <read+0x40>
 80133a0:	0005883a 	mov	r2,zero
 80133a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80133a8:	e0bffb17 	ldw	r2,-20(fp)
 80133ac:	10002226 	beq	r2,zero,8013438 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80133b0:	e0bffb17 	ldw	r2,-20(fp)
 80133b4:	10800217 	ldw	r2,8(r2)
 80133b8:	108000cc 	andi	r2,r2,3
 80133bc:	10800060 	cmpeqi	r2,r2,1
 80133c0:	1000181e 	bne	r2,zero,8013424 <read+0xc0>
        (fd->dev->read))
 80133c4:	e0bffb17 	ldw	r2,-20(fp)
 80133c8:	10800017 	ldw	r2,0(r2)
 80133cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80133d0:	10001426 	beq	r2,zero,8013424 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80133d4:	e0bffb17 	ldw	r2,-20(fp)
 80133d8:	10800017 	ldw	r2,0(r2)
 80133dc:	10800517 	ldw	r2,20(r2)
 80133e0:	e0ffff17 	ldw	r3,-4(fp)
 80133e4:	e13ffb17 	ldw	r4,-20(fp)
 80133e8:	e17ffe17 	ldw	r5,-8(fp)
 80133ec:	180d883a 	mov	r6,r3
 80133f0:	103ee83a 	callr	r2
 80133f4:	e0bffc15 	stw	r2,-16(fp)
 80133f8:	e0bffc17 	ldw	r2,-16(fp)
 80133fc:	1000070e 	bge	r2,zero,801341c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8013400:	80133140 	call	8013314 <alt_get_errno>
 8013404:	1007883a 	mov	r3,r2
 8013408:	e0bffc17 	ldw	r2,-16(fp)
 801340c:	0085c83a 	sub	r2,zero,r2
 8013410:	18800015 	stw	r2,0(r3)
          return -1;
 8013414:	00bfffc4 	movi	r2,-1
 8013418:	00000c06 	br	801344c <read+0xe8>
        }
        return rval;
 801341c:	e0bffc17 	ldw	r2,-16(fp)
 8013420:	00000a06 	br	801344c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8013424:	80133140 	call	8013314 <alt_get_errno>
 8013428:	1007883a 	mov	r3,r2
 801342c:	00800344 	movi	r2,13
 8013430:	18800015 	stw	r2,0(r3)
 8013434:	00000406 	br	8013448 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8013438:	80133140 	call	8013314 <alt_get_errno>
 801343c:	1007883a 	mov	r3,r2
 8013440:	00801444 	movi	r2,81
 8013444:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8013448:	00bfffc4 	movi	r2,-1
}
 801344c:	e037883a 	mov	sp,fp
 8013450:	dfc00117 	ldw	ra,4(sp)
 8013454:	df000017 	ldw	fp,0(sp)
 8013458:	dec00204 	addi	sp,sp,8
 801345c:	f800283a 	ret

08013460 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8013460:	defffe04 	addi	sp,sp,-8
 8013464:	df000115 	stw	fp,4(sp)
 8013468:	df000104 	addi	fp,sp,4
 801346c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8013470:	e0bfff17 	ldw	r2,-4(fp)
 8013474:	108000d0 	cmplti	r2,r2,3
 8013478:	10000d1e 	bne	r2,zero,80134b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 801347c:	008200b4 	movhi	r2,2050
 8013480:	10840604 	addi	r2,r2,4120
 8013484:	e0ffff17 	ldw	r3,-4(fp)
 8013488:	18c00324 	muli	r3,r3,12
 801348c:	10c5883a 	add	r2,r2,r3
 8013490:	10800204 	addi	r2,r2,8
 8013494:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8013498:	008200b4 	movhi	r2,2050
 801349c:	10840604 	addi	r2,r2,4120
 80134a0:	e0ffff17 	ldw	r3,-4(fp)
 80134a4:	18c00324 	muli	r3,r3,12
 80134a8:	10c5883a 	add	r2,r2,r3
 80134ac:	10000015 	stw	zero,0(r2)
  }
}
 80134b0:	e037883a 	mov	sp,fp
 80134b4:	df000017 	ldw	fp,0(sp)
 80134b8:	dec00104 	addi	sp,sp,4
 80134bc:	f800283a 	ret

080134c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80134c0:	defff904 	addi	sp,sp,-28
 80134c4:	df000615 	stw	fp,24(sp)
 80134c8:	df000604 	addi	fp,sp,24
 80134cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80134d0:	0005303a 	rdctl	r2,status
 80134d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80134d8:	e0fffc17 	ldw	r3,-16(fp)
 80134dc:	00bfff84 	movi	r2,-2
 80134e0:	1884703a 	and	r2,r3,r2
 80134e4:	1001703a 	wrctl	status,r2
  
  return context;
 80134e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80134ec:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 80134f0:	d0a00c17 	ldw	r2,-32720(gp)
 80134f4:	10c000c4 	addi	r3,r2,3
 80134f8:	00bfff04 	movi	r2,-4
 80134fc:	1884703a 	and	r2,r3,r2
 8013500:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8013504:	d0e00c17 	ldw	r3,-32720(gp)
 8013508:	e0bfff17 	ldw	r2,-4(fp)
 801350c:	1887883a 	add	r3,r3,r2
 8013510:	00830034 	movhi	r2,3072
 8013514:	10800004 	addi	r2,r2,0
 8013518:	10c0062e 	bgeu	r2,r3,8013534 <sbrk+0x74>
 801351c:	e0bffa17 	ldw	r2,-24(fp)
 8013520:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013524:	e0bffd17 	ldw	r2,-12(fp)
 8013528:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 801352c:	00bfffc4 	movi	r2,-1
 8013530:	00000b06 	br	8013560 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8013534:	d0a00c17 	ldw	r2,-32720(gp)
 8013538:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 801353c:	d0e00c17 	ldw	r3,-32720(gp)
 8013540:	e0bfff17 	ldw	r2,-4(fp)
 8013544:	1885883a 	add	r2,r3,r2
 8013548:	d0a00c15 	stw	r2,-32720(gp)
 801354c:	e0bffa17 	ldw	r2,-24(fp)
 8013550:	e0bffe15 	stw	r2,-8(fp)
 8013554:	e0bffe17 	ldw	r2,-8(fp)
 8013558:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 801355c:	e0bffb17 	ldw	r2,-20(fp)
} 
 8013560:	e037883a 	mov	sp,fp
 8013564:	df000017 	ldw	fp,0(sp)
 8013568:	dec00104 	addi	sp,sp,4
 801356c:	f800283a 	ret

08013570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013570:	defffe04 	addi	sp,sp,-8
 8013574:	dfc00115 	stw	ra,4(sp)
 8013578:	df000015 	stw	fp,0(sp)
 801357c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013580:	008200b4 	movhi	r2,2050
 8013584:	10889404 	addi	r2,r2,8784
 8013588:	10800017 	ldw	r2,0(r2)
 801358c:	10000526 	beq	r2,zero,80135a4 <alt_get_errno+0x34>
 8013590:	008200b4 	movhi	r2,2050
 8013594:	10889404 	addi	r2,r2,8784
 8013598:	10800017 	ldw	r2,0(r2)
 801359c:	103ee83a 	callr	r2
 80135a0:	00000206 	br	80135ac <alt_get_errno+0x3c>
 80135a4:	008200b4 	movhi	r2,2050
 80135a8:	108f6d04 	addi	r2,r2,15796
}
 80135ac:	e037883a 	mov	sp,fp
 80135b0:	dfc00117 	ldw	ra,4(sp)
 80135b4:	df000017 	ldw	fp,0(sp)
 80135b8:	dec00204 	addi	sp,sp,8
 80135bc:	f800283a 	ret

080135c0 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 80135c0:	defffc04 	addi	sp,sp,-16
 80135c4:	dfc00315 	stw	ra,12(sp)
 80135c8:	df000215 	stw	fp,8(sp)
 80135cc:	df000204 	addi	fp,sp,8
 80135d0:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80135d4:	008200b4 	movhi	r2,2050
 80135d8:	108f7604 	addi	r2,r2,15832
 80135dc:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
 80135e0:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80135e4:	008200b4 	movhi	r2,2050
 80135e8:	108f7504 	addi	r2,r2,15828
 80135ec:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 80135f0:	1000061e 	bne	r2,zero,801360c <times+0x4c>
  {
    ALT_ERRNO = ENOSYS;
 80135f4:	80135700 	call	8013570 <alt_get_errno>
 80135f8:	1007883a 	mov	r3,r2
 80135fc:	00801604 	movi	r2,88
 8013600:	18800015 	stw	r2,0(r3)
    return 0;
 8013604:	0005883a 	mov	r2,zero
 8013608:	00000a06 	br	8013634 <times+0x74>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 801360c:	e0bfff17 	ldw	r2,-4(fp)
 8013610:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 8013614:	e0bfff17 	ldw	r2,-4(fp)
 8013618:	e0fffe17 	ldw	r3,-8(fp)
 801361c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 8013620:	e0bfff17 	ldw	r2,-4(fp)
 8013624:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 8013628:	e0bfff17 	ldw	r2,-4(fp)
 801362c:	10000315 	stw	zero,12(r2)

  return ticks;
 8013630:	e0bffe17 	ldw	r2,-8(fp)
}
 8013634:	e037883a 	mov	sp,fp
 8013638:	dfc00117 	ldw	ra,4(sp)
 801363c:	df000017 	ldw	fp,0(sp)
 8013640:	dec00204 	addi	sp,sp,8
 8013644:	f800283a 	ret

08013648 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8013648:	defffd04 	addi	sp,sp,-12
 801364c:	dfc00215 	stw	ra,8(sp)
 8013650:	df000115 	stw	fp,4(sp)
 8013654:	df000104 	addi	fp,sp,4
 8013658:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 801365c:	e13fff17 	ldw	r4,-4(fp)
 8013660:	80149fc0 	call	80149fc <alt_busy_sleep>
}
 8013664:	e037883a 	mov	sp,fp
 8013668:	dfc00117 	ldw	ra,4(sp)
 801366c:	df000017 	ldw	fp,0(sp)
 8013670:	dec00204 	addi	sp,sp,8
 8013674:	f800283a 	ret

08013678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013678:	defffe04 	addi	sp,sp,-8
 801367c:	dfc00115 	stw	ra,4(sp)
 8013680:	df000015 	stw	fp,0(sp)
 8013684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013688:	008200b4 	movhi	r2,2050
 801368c:	10889404 	addi	r2,r2,8784
 8013690:	10800017 	ldw	r2,0(r2)
 8013694:	10000526 	beq	r2,zero,80136ac <alt_get_errno+0x34>
 8013698:	008200b4 	movhi	r2,2050
 801369c:	10889404 	addi	r2,r2,8784
 80136a0:	10800017 	ldw	r2,0(r2)
 80136a4:	103ee83a 	callr	r2
 80136a8:	00000206 	br	80136b4 <alt_get_errno+0x3c>
 80136ac:	008200b4 	movhi	r2,2050
 80136b0:	108f6d04 	addi	r2,r2,15796
}
 80136b4:	e037883a 	mov	sp,fp
 80136b8:	dfc00117 	ldw	ra,4(sp)
 80136bc:	df000017 	ldw	fp,0(sp)
 80136c0:	dec00204 	addi	sp,sp,8
 80136c4:	f800283a 	ret

080136c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80136c8:	defff904 	addi	sp,sp,-28
 80136cc:	dfc00615 	stw	ra,24(sp)
 80136d0:	df000515 	stw	fp,20(sp)
 80136d4:	df000504 	addi	fp,sp,20
 80136d8:	e13ffd15 	stw	r4,-12(fp)
 80136dc:	e17ffe15 	stw	r5,-8(fp)
 80136e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80136e4:	e0bffd17 	ldw	r2,-12(fp)
 80136e8:	10000616 	blt	r2,zero,8013704 <write+0x3c>
 80136ec:	e0bffd17 	ldw	r2,-12(fp)
 80136f0:	10c00324 	muli	r3,r2,12
 80136f4:	008200b4 	movhi	r2,2050
 80136f8:	10840604 	addi	r2,r2,4120
 80136fc:	1885883a 	add	r2,r3,r2
 8013700:	00000106 	br	8013708 <write+0x40>
 8013704:	0005883a 	mov	r2,zero
 8013708:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801370c:	e0bffb17 	ldw	r2,-20(fp)
 8013710:	10002126 	beq	r2,zero,8013798 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8013714:	e0bffb17 	ldw	r2,-20(fp)
 8013718:	10800217 	ldw	r2,8(r2)
 801371c:	108000cc 	andi	r2,r2,3
 8013720:	10001826 	beq	r2,zero,8013784 <write+0xbc>
 8013724:	e0bffb17 	ldw	r2,-20(fp)
 8013728:	10800017 	ldw	r2,0(r2)
 801372c:	10800617 	ldw	r2,24(r2)
 8013730:	10001426 	beq	r2,zero,8013784 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8013734:	e0bffb17 	ldw	r2,-20(fp)
 8013738:	10800017 	ldw	r2,0(r2)
 801373c:	10800617 	ldw	r2,24(r2)
 8013740:	e0ffff17 	ldw	r3,-4(fp)
 8013744:	e13ffb17 	ldw	r4,-20(fp)
 8013748:	e17ffe17 	ldw	r5,-8(fp)
 801374c:	180d883a 	mov	r6,r3
 8013750:	103ee83a 	callr	r2
 8013754:	e0bffc15 	stw	r2,-16(fp)
 8013758:	e0bffc17 	ldw	r2,-16(fp)
 801375c:	1000070e 	bge	r2,zero,801377c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8013760:	80136780 	call	8013678 <alt_get_errno>
 8013764:	1007883a 	mov	r3,r2
 8013768:	e0bffc17 	ldw	r2,-16(fp)
 801376c:	0085c83a 	sub	r2,zero,r2
 8013770:	18800015 	stw	r2,0(r3)
        return -1;
 8013774:	00bfffc4 	movi	r2,-1
 8013778:	00000c06 	br	80137ac <write+0xe4>
      }
      return rval;
 801377c:	e0bffc17 	ldw	r2,-16(fp)
 8013780:	00000a06 	br	80137ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8013784:	80136780 	call	8013678 <alt_get_errno>
 8013788:	1007883a 	mov	r3,r2
 801378c:	00800344 	movi	r2,13
 8013790:	18800015 	stw	r2,0(r3)
 8013794:	00000406 	br	80137a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8013798:	80136780 	call	8013678 <alt_get_errno>
 801379c:	1007883a 	mov	r3,r2
 80137a0:	00801444 	movi	r2,81
 80137a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80137a8:	00bfffc4 	movi	r2,-1
}
 80137ac:	e037883a 	mov	sp,fp
 80137b0:	dfc00117 	ldw	ra,4(sp)
 80137b4:	df000017 	ldw	fp,0(sp)
 80137b8:	dec00204 	addi	sp,sp,8
 80137bc:	f800283a 	ret

080137c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80137c0:	defffd04 	addi	sp,sp,-12
 80137c4:	dfc00215 	stw	ra,8(sp)
 80137c8:	df000115 	stw	fp,4(sp)
 80137cc:	df000104 	addi	fp,sp,4
 80137d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80137d4:	e13fff17 	ldw	r4,-4(fp)
 80137d8:	014200b4 	movhi	r5,2050
 80137dc:	29489104 	addi	r5,r5,8772
 80137e0:	8014b900 	call	8014b90 <alt_dev_llist_insert>
}
 80137e4:	e037883a 	mov	sp,fp
 80137e8:	dfc00117 	ldw	ra,4(sp)
 80137ec:	df000017 	ldw	fp,0(sp)
 80137f0:	dec00204 	addi	sp,sp,8
 80137f4:	f800283a 	ret

080137f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80137f8:	defffd04 	addi	sp,sp,-12
 80137fc:	dfc00215 	stw	ra,8(sp)
 8013800:	df000115 	stw	fp,4(sp)
 8013804:	df000104 	addi	fp,sp,4
 8013808:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 801380c:	80155c40 	call	80155c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8013810:	00800044 	movi	r2,1
 8013814:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8013818:	e037883a 	mov	sp,fp
 801381c:	dfc00117 	ldw	ra,4(sp)
 8013820:	df000017 	ldw	fp,0(sp)
 8013824:	dec00204 	addi	sp,sp,8
 8013828:	f800283a 	ret

0801382c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801382c:	defffe04 	addi	sp,sp,-8
 8013830:	dfc00115 	stw	ra,4(sp)
 8013834:	df000015 	stw	fp,0(sp)
 8013838:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 801383c:	01082004 	movi	r4,8320
 8013840:	000b883a 	mov	r5,zero
 8013844:	01800104 	movi	r6,4
 8013848:	01c0fa04 	movi	r7,1000
 801384c:	801435c0 	call	801435c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8013850:	010200b4 	movhi	r4,2050
 8013854:	21047004 	addi	r4,r4,4544
 8013858:	000b883a 	mov	r5,zero
 801385c:	01800144 	movi	r6,5
 8013860:	8013a000 	call	8013a00 <altera_avalon_jtag_uart_init>
 8013864:	010200b4 	movhi	r4,2050
 8013868:	21046604 	addi	r4,r4,4504
 801386c:	80137c00 	call	80137c0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8013870:	010200b4 	movhi	r4,2050
 8013874:	21087e04 	addi	r4,r4,8696
 8013878:	80144940 	call	8014494 <alt_up_character_lcd_init>
 801387c:	010200b4 	movhi	r4,2050
 8013880:	21087e04 	addi	r4,r4,8696
 8013884:	80137c00 	call	80137c0 <alt_dev_reg>
}
 8013888:	e037883a 	mov	sp,fp
 801388c:	dfc00117 	ldw	ra,4(sp)
 8013890:	df000017 	ldw	fp,0(sp)
 8013894:	dec00204 	addi	sp,sp,8
 8013898:	f800283a 	ret

0801389c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801389c:	defffa04 	addi	sp,sp,-24
 80138a0:	dfc00515 	stw	ra,20(sp)
 80138a4:	df000415 	stw	fp,16(sp)
 80138a8:	df000404 	addi	fp,sp,16
 80138ac:	e13ffd15 	stw	r4,-12(fp)
 80138b0:	e17ffe15 	stw	r5,-8(fp)
 80138b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80138b8:	e0bffd17 	ldw	r2,-12(fp)
 80138bc:	10800017 	ldw	r2,0(r2)
 80138c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80138c4:	e0bffc17 	ldw	r2,-16(fp)
 80138c8:	10c00a04 	addi	r3,r2,40
 80138cc:	e0bffd17 	ldw	r2,-12(fp)
 80138d0:	10800217 	ldw	r2,8(r2)
 80138d4:	1809883a 	mov	r4,r3
 80138d8:	e17ffe17 	ldw	r5,-8(fp)
 80138dc:	e1bfff17 	ldw	r6,-4(fp)
 80138e0:	100f883a 	mov	r7,r2
 80138e4:	8013ec40 	call	8013ec4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80138e8:	e037883a 	mov	sp,fp
 80138ec:	dfc00117 	ldw	ra,4(sp)
 80138f0:	df000017 	ldw	fp,0(sp)
 80138f4:	dec00204 	addi	sp,sp,8
 80138f8:	f800283a 	ret

080138fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80138fc:	defffa04 	addi	sp,sp,-24
 8013900:	dfc00515 	stw	ra,20(sp)
 8013904:	df000415 	stw	fp,16(sp)
 8013908:	df000404 	addi	fp,sp,16
 801390c:	e13ffd15 	stw	r4,-12(fp)
 8013910:	e17ffe15 	stw	r5,-8(fp)
 8013914:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013918:	e0bffd17 	ldw	r2,-12(fp)
 801391c:	10800017 	ldw	r2,0(r2)
 8013920:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8013924:	e0bffc17 	ldw	r2,-16(fp)
 8013928:	10c00a04 	addi	r3,r2,40
 801392c:	e0bffd17 	ldw	r2,-12(fp)
 8013930:	10800217 	ldw	r2,8(r2)
 8013934:	1809883a 	mov	r4,r3
 8013938:	e17ffe17 	ldw	r5,-8(fp)
 801393c:	e1bfff17 	ldw	r6,-4(fp)
 8013940:	100f883a 	mov	r7,r2
 8013944:	80140d00 	call	80140d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8013948:	e037883a 	mov	sp,fp
 801394c:	dfc00117 	ldw	ra,4(sp)
 8013950:	df000017 	ldw	fp,0(sp)
 8013954:	dec00204 	addi	sp,sp,8
 8013958:	f800283a 	ret

0801395c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801395c:	defffc04 	addi	sp,sp,-16
 8013960:	dfc00315 	stw	ra,12(sp)
 8013964:	df000215 	stw	fp,8(sp)
 8013968:	df000204 	addi	fp,sp,8
 801396c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8013970:	e0bfff17 	ldw	r2,-4(fp)
 8013974:	10800017 	ldw	r2,0(r2)
 8013978:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801397c:	e0bffe17 	ldw	r2,-8(fp)
 8013980:	10c00a04 	addi	r3,r2,40
 8013984:	e0bfff17 	ldw	r2,-4(fp)
 8013988:	10800217 	ldw	r2,8(r2)
 801398c:	1809883a 	mov	r4,r3
 8013990:	100b883a 	mov	r5,r2
 8013994:	8013d700 	call	8013d70 <altera_avalon_jtag_uart_close>
}
 8013998:	e037883a 	mov	sp,fp
 801399c:	dfc00117 	ldw	ra,4(sp)
 80139a0:	df000017 	ldw	fp,0(sp)
 80139a4:	dec00204 	addi	sp,sp,8
 80139a8:	f800283a 	ret

080139ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80139ac:	defffa04 	addi	sp,sp,-24
 80139b0:	dfc00515 	stw	ra,20(sp)
 80139b4:	df000415 	stw	fp,16(sp)
 80139b8:	df000404 	addi	fp,sp,16
 80139bc:	e13ffd15 	stw	r4,-12(fp)
 80139c0:	e17ffe15 	stw	r5,-8(fp)
 80139c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80139c8:	e0bffd17 	ldw	r2,-12(fp)
 80139cc:	10800017 	ldw	r2,0(r2)
 80139d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80139d4:	e0bffc17 	ldw	r2,-16(fp)
 80139d8:	10800a04 	addi	r2,r2,40
 80139dc:	1009883a 	mov	r4,r2
 80139e0:	e17ffe17 	ldw	r5,-8(fp)
 80139e4:	e1bfff17 	ldw	r6,-4(fp)
 80139e8:	8013dd80 	call	8013dd8 <altera_avalon_jtag_uart_ioctl>
}
 80139ec:	e037883a 	mov	sp,fp
 80139f0:	dfc00117 	ldw	ra,4(sp)
 80139f4:	df000017 	ldw	fp,0(sp)
 80139f8:	dec00204 	addi	sp,sp,8
 80139fc:	f800283a 	ret

08013a00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8013a00:	defffa04 	addi	sp,sp,-24
 8013a04:	dfc00515 	stw	ra,20(sp)
 8013a08:	df000415 	stw	fp,16(sp)
 8013a0c:	df000404 	addi	fp,sp,16
 8013a10:	e13ffd15 	stw	r4,-12(fp)
 8013a14:	e17ffe15 	stw	r5,-8(fp)
 8013a18:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013a1c:	e0bffd17 	ldw	r2,-12(fp)
 8013a20:	00c00044 	movi	r3,1
 8013a24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8013a28:	e0bffd17 	ldw	r2,-12(fp)
 8013a2c:	10800017 	ldw	r2,0(r2)
 8013a30:	10800104 	addi	r2,r2,4
 8013a34:	1007883a 	mov	r3,r2
 8013a38:	e0bffd17 	ldw	r2,-12(fp)
 8013a3c:	10800817 	ldw	r2,32(r2)
 8013a40:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8013a44:	e0fffe17 	ldw	r3,-8(fp)
 8013a48:	e0bfff17 	ldw	r2,-4(fp)
 8013a4c:	d8000015 	stw	zero,0(sp)
 8013a50:	1809883a 	mov	r4,r3
 8013a54:	100b883a 	mov	r5,r2
 8013a58:	01820074 	movhi	r6,2049
 8013a5c:	318eb104 	addi	r6,r6,15044
 8013a60:	e1fffd17 	ldw	r7,-12(fp)
 8013a64:	8014dac0 	call	8014dac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8013a68:	e0bffd17 	ldw	r2,-12(fp)
 8013a6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8013a70:	e0bffd17 	ldw	r2,-12(fp)
 8013a74:	10c00204 	addi	r3,r2,8
 8013a78:	008200b4 	movhi	r2,2050
 8013a7c:	108f7504 	addi	r2,r2,15828
 8013a80:	10800017 	ldw	r2,0(r2)
 8013a84:	1809883a 	mov	r4,r3
 8013a88:	100b883a 	mov	r5,r2
 8013a8c:	01820074 	movhi	r6,2049
 8013a90:	318f3204 	addi	r6,r6,15560
 8013a94:	e1fffd17 	ldw	r7,-12(fp)
 8013a98:	80148bc0 	call	80148bc <alt_alarm_start>
 8013a9c:	1000040e 	bge	r2,zero,8013ab0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8013aa0:	e0fffd17 	ldw	r3,-12(fp)
 8013aa4:	00a00034 	movhi	r2,32768
 8013aa8:	10bfffc4 	addi	r2,r2,-1
 8013aac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8013ab0:	e037883a 	mov	sp,fp
 8013ab4:	dfc00117 	ldw	ra,4(sp)
 8013ab8:	df000017 	ldw	fp,0(sp)
 8013abc:	dec00204 	addi	sp,sp,8
 8013ac0:	f800283a 	ret

08013ac4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8013ac4:	defff804 	addi	sp,sp,-32
 8013ac8:	df000715 	stw	fp,28(sp)
 8013acc:	df000704 	addi	fp,sp,28
 8013ad0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8013ad4:	e0bfff17 	ldw	r2,-4(fp)
 8013ad8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8013adc:	e0bffb17 	ldw	r2,-20(fp)
 8013ae0:	10800017 	ldw	r2,0(r2)
 8013ae4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013ae8:	e0bffc17 	ldw	r2,-16(fp)
 8013aec:	10800104 	addi	r2,r2,4
 8013af0:	10800037 	ldwio	r2,0(r2)
 8013af4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8013af8:	e0bffd17 	ldw	r2,-12(fp)
 8013afc:	1080c00c 	andi	r2,r2,768
 8013b00:	1000011e 	bne	r2,zero,8013b08 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8013b04:	00006c06 	br	8013cb8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8013b08:	e0bffd17 	ldw	r2,-12(fp)
 8013b0c:	1080400c 	andi	r2,r2,256
 8013b10:	10003426 	beq	r2,zero,8013be4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8013b14:	00800074 	movhi	r2,1
 8013b18:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013b1c:	e0bffb17 	ldw	r2,-20(fp)
 8013b20:	10800a17 	ldw	r2,40(r2)
 8013b24:	10800044 	addi	r2,r2,1
 8013b28:	1081ffcc 	andi	r2,r2,2047
 8013b2c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8013b30:	e0bffb17 	ldw	r2,-20(fp)
 8013b34:	10c00b17 	ldw	r3,44(r2)
 8013b38:	e0bffe17 	ldw	r2,-8(fp)
 8013b3c:	1880011e 	bne	r3,r2,8013b44 <altera_avalon_jtag_uart_irq+0x80>
          break;
 8013b40:	00001606 	br	8013b9c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8013b44:	e0bffc17 	ldw	r2,-16(fp)
 8013b48:	10800037 	ldwio	r2,0(r2)
 8013b4c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8013b50:	e0bff917 	ldw	r2,-28(fp)
 8013b54:	10a0000c 	andi	r2,r2,32768
 8013b58:	1000011e 	bne	r2,zero,8013b60 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8013b5c:	00000f06 	br	8013b9c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8013b60:	e0bffb17 	ldw	r2,-20(fp)
 8013b64:	10800a17 	ldw	r2,40(r2)
 8013b68:	e0fff917 	ldw	r3,-28(fp)
 8013b6c:	1809883a 	mov	r4,r3
 8013b70:	e0fffb17 	ldw	r3,-20(fp)
 8013b74:	1885883a 	add	r2,r3,r2
 8013b78:	10800e04 	addi	r2,r2,56
 8013b7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013b80:	e0bffb17 	ldw	r2,-20(fp)
 8013b84:	10800a17 	ldw	r2,40(r2)
 8013b88:	10800044 	addi	r2,r2,1
 8013b8c:	10c1ffcc 	andi	r3,r2,2047
 8013b90:	e0bffb17 	ldw	r2,-20(fp)
 8013b94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8013b98:	003fe006 	br	8013b1c <__alt_data_end+0xfc013b1c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8013b9c:	e0bff917 	ldw	r2,-28(fp)
 8013ba0:	10bfffec 	andhi	r2,r2,65535
 8013ba4:	10000f26 	beq	r2,zero,8013be4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8013ba8:	e0bffb17 	ldw	r2,-20(fp)
 8013bac:	10c00817 	ldw	r3,32(r2)
 8013bb0:	00bfff84 	movi	r2,-2
 8013bb4:	1886703a 	and	r3,r3,r2
 8013bb8:	e0bffb17 	ldw	r2,-20(fp)
 8013bbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8013bc0:	e0bffc17 	ldw	r2,-16(fp)
 8013bc4:	10800104 	addi	r2,r2,4
 8013bc8:	1007883a 	mov	r3,r2
 8013bcc:	e0bffb17 	ldw	r2,-20(fp)
 8013bd0:	10800817 	ldw	r2,32(r2)
 8013bd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013bd8:	e0bffc17 	ldw	r2,-16(fp)
 8013bdc:	10800104 	addi	r2,r2,4
 8013be0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8013be4:	e0bffd17 	ldw	r2,-12(fp)
 8013be8:	1080800c 	andi	r2,r2,512
 8013bec:	10003126 	beq	r2,zero,8013cb4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8013bf0:	e0bffd17 	ldw	r2,-12(fp)
 8013bf4:	1004d43a 	srli	r2,r2,16
 8013bf8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013bfc:	00001406 	br	8013c50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8013c00:	e0bffc17 	ldw	r2,-16(fp)
 8013c04:	e0fffb17 	ldw	r3,-20(fp)
 8013c08:	18c00d17 	ldw	r3,52(r3)
 8013c0c:	e13ffb17 	ldw	r4,-20(fp)
 8013c10:	20c7883a 	add	r3,r4,r3
 8013c14:	18c20e04 	addi	r3,r3,2104
 8013c18:	18c00003 	ldbu	r3,0(r3)
 8013c1c:	18c03fcc 	andi	r3,r3,255
 8013c20:	18c0201c 	xori	r3,r3,128
 8013c24:	18ffe004 	addi	r3,r3,-128
 8013c28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013c2c:	e0bffb17 	ldw	r2,-20(fp)
 8013c30:	10800d17 	ldw	r2,52(r2)
 8013c34:	10800044 	addi	r2,r2,1
 8013c38:	10c1ffcc 	andi	r3,r2,2047
 8013c3c:	e0bffb17 	ldw	r2,-20(fp)
 8013c40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8013c44:	e0bffa17 	ldw	r2,-24(fp)
 8013c48:	10bfffc4 	addi	r2,r2,-1
 8013c4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8013c50:	e0bffa17 	ldw	r2,-24(fp)
 8013c54:	10000526 	beq	r2,zero,8013c6c <altera_avalon_jtag_uart_irq+0x1a8>
 8013c58:	e0bffb17 	ldw	r2,-20(fp)
 8013c5c:	10c00d17 	ldw	r3,52(r2)
 8013c60:	e0bffb17 	ldw	r2,-20(fp)
 8013c64:	10800c17 	ldw	r2,48(r2)
 8013c68:	18bfe51e 	bne	r3,r2,8013c00 <__alt_data_end+0xfc013c00>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8013c6c:	e0bffa17 	ldw	r2,-24(fp)
 8013c70:	10001026 	beq	r2,zero,8013cb4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8013c74:	e0bffb17 	ldw	r2,-20(fp)
 8013c78:	10c00817 	ldw	r3,32(r2)
 8013c7c:	00bfff44 	movi	r2,-3
 8013c80:	1886703a 	and	r3,r3,r2
 8013c84:	e0bffb17 	ldw	r2,-20(fp)
 8013c88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8013c8c:	e0bffb17 	ldw	r2,-20(fp)
 8013c90:	10800017 	ldw	r2,0(r2)
 8013c94:	10800104 	addi	r2,r2,4
 8013c98:	1007883a 	mov	r3,r2
 8013c9c:	e0bffb17 	ldw	r2,-20(fp)
 8013ca0:	10800817 	ldw	r2,32(r2)
 8013ca4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8013ca8:	e0bffc17 	ldw	r2,-16(fp)
 8013cac:	10800104 	addi	r2,r2,4
 8013cb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8013cb4:	003f8c06 	br	8013ae8 <__alt_data_end+0xfc013ae8>
}
 8013cb8:	e037883a 	mov	sp,fp
 8013cbc:	df000017 	ldw	fp,0(sp)
 8013cc0:	dec00104 	addi	sp,sp,4
 8013cc4:	f800283a 	ret

08013cc8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8013cc8:	defff804 	addi	sp,sp,-32
 8013ccc:	df000715 	stw	fp,28(sp)
 8013cd0:	df000704 	addi	fp,sp,28
 8013cd4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8013cd8:	e0bffb17 	ldw	r2,-20(fp)
 8013cdc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8013ce0:	e0bff917 	ldw	r2,-28(fp)
 8013ce4:	10800017 	ldw	r2,0(r2)
 8013ce8:	10800104 	addi	r2,r2,4
 8013cec:	10800037 	ldwio	r2,0(r2)
 8013cf0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8013cf4:	e0bffa17 	ldw	r2,-24(fp)
 8013cf8:	1081000c 	andi	r2,r2,1024
 8013cfc:	10000b26 	beq	r2,zero,8013d2c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8013d00:	e0bff917 	ldw	r2,-28(fp)
 8013d04:	10800017 	ldw	r2,0(r2)
 8013d08:	10800104 	addi	r2,r2,4
 8013d0c:	1007883a 	mov	r3,r2
 8013d10:	e0bff917 	ldw	r2,-28(fp)
 8013d14:	10800817 	ldw	r2,32(r2)
 8013d18:	10810014 	ori	r2,r2,1024
 8013d1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8013d20:	e0bff917 	ldw	r2,-28(fp)
 8013d24:	10000915 	stw	zero,36(r2)
 8013d28:	00000a06 	br	8013d54 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8013d2c:	e0bff917 	ldw	r2,-28(fp)
 8013d30:	10c00917 	ldw	r3,36(r2)
 8013d34:	00a00034 	movhi	r2,32768
 8013d38:	10bfff04 	addi	r2,r2,-4
 8013d3c:	10c00536 	bltu	r2,r3,8013d54 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8013d40:	e0bff917 	ldw	r2,-28(fp)
 8013d44:	10800917 	ldw	r2,36(r2)
 8013d48:	10c00044 	addi	r3,r2,1
 8013d4c:	e0bff917 	ldw	r2,-28(fp)
 8013d50:	10c00915 	stw	r3,36(r2)
 8013d54:	008200b4 	movhi	r2,2050
 8013d58:	108f7504 	addi	r2,r2,15828
 8013d5c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8013d60:	e037883a 	mov	sp,fp
 8013d64:	df000017 	ldw	fp,0(sp)
 8013d68:	dec00104 	addi	sp,sp,4
 8013d6c:	f800283a 	ret

08013d70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8013d70:	defffd04 	addi	sp,sp,-12
 8013d74:	df000215 	stw	fp,8(sp)
 8013d78:	df000204 	addi	fp,sp,8
 8013d7c:	e13ffe15 	stw	r4,-8(fp)
 8013d80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013d84:	00000506 	br	8013d9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8013d88:	e0bfff17 	ldw	r2,-4(fp)
 8013d8c:	1090000c 	andi	r2,r2,16384
 8013d90:	10000226 	beq	r2,zero,8013d9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8013d94:	00bffd44 	movi	r2,-11
 8013d98:	00000b06 	br	8013dc8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8013d9c:	e0bffe17 	ldw	r2,-8(fp)
 8013da0:	10c00d17 	ldw	r3,52(r2)
 8013da4:	e0bffe17 	ldw	r2,-8(fp)
 8013da8:	10800c17 	ldw	r2,48(r2)
 8013dac:	18800526 	beq	r3,r2,8013dc4 <altera_avalon_jtag_uart_close+0x54>
 8013db0:	e0bffe17 	ldw	r2,-8(fp)
 8013db4:	10c00917 	ldw	r3,36(r2)
 8013db8:	e0bffe17 	ldw	r2,-8(fp)
 8013dbc:	10800117 	ldw	r2,4(r2)
 8013dc0:	18bff136 	bltu	r3,r2,8013d88 <__alt_data_end+0xfc013d88>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8013dc4:	0005883a 	mov	r2,zero
}
 8013dc8:	e037883a 	mov	sp,fp
 8013dcc:	df000017 	ldw	fp,0(sp)
 8013dd0:	dec00104 	addi	sp,sp,4
 8013dd4:	f800283a 	ret

08013dd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8013dd8:	defffa04 	addi	sp,sp,-24
 8013ddc:	df000515 	stw	fp,20(sp)
 8013de0:	df000504 	addi	fp,sp,20
 8013de4:	e13ffd15 	stw	r4,-12(fp)
 8013de8:	e17ffe15 	stw	r5,-8(fp)
 8013dec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8013df0:	00bff9c4 	movi	r2,-25
 8013df4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8013df8:	e0bffe17 	ldw	r2,-8(fp)
 8013dfc:	10da8060 	cmpeqi	r3,r2,27137
 8013e00:	1800031e 	bne	r3,zero,8013e10 <altera_avalon_jtag_uart_ioctl+0x38>
 8013e04:	109a80a0 	cmpeqi	r2,r2,27138
 8013e08:	1000191e 	bne	r2,zero,8013e70 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8013e0c:	00002806 	br	8013eb0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8013e10:	e0bffd17 	ldw	r2,-12(fp)
 8013e14:	10c00117 	ldw	r3,4(r2)
 8013e18:	00a00034 	movhi	r2,32768
 8013e1c:	10bfffc4 	addi	r2,r2,-1
 8013e20:	18801226 	beq	r3,r2,8013e6c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8013e24:	e0bfff17 	ldw	r2,-4(fp)
 8013e28:	10800017 	ldw	r2,0(r2)
 8013e2c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8013e30:	e0bffc17 	ldw	r2,-16(fp)
 8013e34:	10800090 	cmplti	r2,r2,2
 8013e38:	1000061e 	bne	r2,zero,8013e54 <altera_avalon_jtag_uart_ioctl+0x7c>
 8013e3c:	e0fffc17 	ldw	r3,-16(fp)
 8013e40:	00a00034 	movhi	r2,32768
 8013e44:	10bfffc4 	addi	r2,r2,-1
 8013e48:	18800226 	beq	r3,r2,8013e54 <altera_avalon_jtag_uart_ioctl+0x7c>
 8013e4c:	e0bffc17 	ldw	r2,-16(fp)
 8013e50:	00000206 	br	8013e5c <altera_avalon_jtag_uart_ioctl+0x84>
 8013e54:	00a00034 	movhi	r2,32768
 8013e58:	10bfff84 	addi	r2,r2,-2
 8013e5c:	e0fffd17 	ldw	r3,-12(fp)
 8013e60:	18800115 	stw	r2,4(r3)
      rc = 0;
 8013e64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013e68:	00001106 	br	8013eb0 <altera_avalon_jtag_uart_ioctl+0xd8>
 8013e6c:	00001006 	br	8013eb0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8013e70:	e0bffd17 	ldw	r2,-12(fp)
 8013e74:	10c00117 	ldw	r3,4(r2)
 8013e78:	00a00034 	movhi	r2,32768
 8013e7c:	10bfffc4 	addi	r2,r2,-1
 8013e80:	18800a26 	beq	r3,r2,8013eac <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8013e84:	e0bffd17 	ldw	r2,-12(fp)
 8013e88:	10c00917 	ldw	r3,36(r2)
 8013e8c:	e0bffd17 	ldw	r2,-12(fp)
 8013e90:	10800117 	ldw	r2,4(r2)
 8013e94:	1885803a 	cmpltu	r2,r3,r2
 8013e98:	10c03fcc 	andi	r3,r2,255
 8013e9c:	e0bfff17 	ldw	r2,-4(fp)
 8013ea0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8013ea4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8013ea8:	00000006 	br	8013eac <altera_avalon_jtag_uart_ioctl+0xd4>
 8013eac:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8013eb0:	e0bffb17 	ldw	r2,-20(fp)
}
 8013eb4:	e037883a 	mov	sp,fp
 8013eb8:	df000017 	ldw	fp,0(sp)
 8013ebc:	dec00104 	addi	sp,sp,4
 8013ec0:	f800283a 	ret

08013ec4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8013ec4:	defff304 	addi	sp,sp,-52
 8013ec8:	dfc00c15 	stw	ra,48(sp)
 8013ecc:	df000b15 	stw	fp,44(sp)
 8013ed0:	df000b04 	addi	fp,sp,44
 8013ed4:	e13ffc15 	stw	r4,-16(fp)
 8013ed8:	e17ffd15 	stw	r5,-12(fp)
 8013edc:	e1bffe15 	stw	r6,-8(fp)
 8013ee0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8013ee4:	e0bffd17 	ldw	r2,-12(fp)
 8013ee8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8013eec:	00004906 	br	8014014 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8013ef0:	e0bffc17 	ldw	r2,-16(fp)
 8013ef4:	10800a17 	ldw	r2,40(r2)
 8013ef8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8013efc:	e0bffc17 	ldw	r2,-16(fp)
 8013f00:	10800b17 	ldw	r2,44(r2)
 8013f04:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8013f08:	e0fff717 	ldw	r3,-36(fp)
 8013f0c:	e0bff817 	ldw	r2,-32(fp)
 8013f10:	18800536 	bltu	r3,r2,8013f28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8013f14:	e0fff717 	ldw	r3,-36(fp)
 8013f18:	e0bff817 	ldw	r2,-32(fp)
 8013f1c:	1885c83a 	sub	r2,r3,r2
 8013f20:	e0bff615 	stw	r2,-40(fp)
 8013f24:	00000406 	br	8013f38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8013f28:	00c20004 	movi	r3,2048
 8013f2c:	e0bff817 	ldw	r2,-32(fp)
 8013f30:	1885c83a 	sub	r2,r3,r2
 8013f34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8013f38:	e0bff617 	ldw	r2,-40(fp)
 8013f3c:	1000011e 	bne	r2,zero,8013f44 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8013f40:	00001d06 	br	8013fb8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8013f44:	e0fffe17 	ldw	r3,-8(fp)
 8013f48:	e0bff617 	ldw	r2,-40(fp)
 8013f4c:	1880022e 	bgeu	r3,r2,8013f58 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8013f50:	e0bffe17 	ldw	r2,-8(fp)
 8013f54:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8013f58:	e0bff817 	ldw	r2,-32(fp)
 8013f5c:	10800e04 	addi	r2,r2,56
 8013f60:	e0fffc17 	ldw	r3,-16(fp)
 8013f64:	1885883a 	add	r2,r3,r2
 8013f68:	e13ff517 	ldw	r4,-44(fp)
 8013f6c:	100b883a 	mov	r5,r2
 8013f70:	e1bff617 	ldw	r6,-40(fp)
 8013f74:	800c1380 	call	800c138 <memcpy>
      ptr   += n;
 8013f78:	e0fff517 	ldw	r3,-44(fp)
 8013f7c:	e0bff617 	ldw	r2,-40(fp)
 8013f80:	1885883a 	add	r2,r3,r2
 8013f84:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8013f88:	e0fffe17 	ldw	r3,-8(fp)
 8013f8c:	e0bff617 	ldw	r2,-40(fp)
 8013f90:	1885c83a 	sub	r2,r3,r2
 8013f94:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8013f98:	e0fff817 	ldw	r3,-32(fp)
 8013f9c:	e0bff617 	ldw	r2,-40(fp)
 8013fa0:	1885883a 	add	r2,r3,r2
 8013fa4:	10c1ffcc 	andi	r3,r2,2047
 8013fa8:	e0bffc17 	ldw	r2,-16(fp)
 8013fac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8013fb0:	e0bffe17 	ldw	r2,-8(fp)
 8013fb4:	00bfce16 	blt	zero,r2,8013ef0 <__alt_data_end+0xfc013ef0>

    /* If we read any data then return it */
    if (ptr != buffer)
 8013fb8:	e0fff517 	ldw	r3,-44(fp)
 8013fbc:	e0bffd17 	ldw	r2,-12(fp)
 8013fc0:	18800126 	beq	r3,r2,8013fc8 <altera_avalon_jtag_uart_read+0x104>
      break;
 8013fc4:	00001506 	br	801401c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8013fc8:	e0bfff17 	ldw	r2,-4(fp)
 8013fcc:	1090000c 	andi	r2,r2,16384
 8013fd0:	10000126 	beq	r2,zero,8013fd8 <altera_avalon_jtag_uart_read+0x114>
      break;
 8013fd4:	00001106 	br	801401c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8013fd8:	0001883a 	nop
 8013fdc:	e0bffc17 	ldw	r2,-16(fp)
 8013fe0:	10c00a17 	ldw	r3,40(r2)
 8013fe4:	e0bff717 	ldw	r2,-36(fp)
 8013fe8:	1880051e 	bne	r3,r2,8014000 <altera_avalon_jtag_uart_read+0x13c>
 8013fec:	e0bffc17 	ldw	r2,-16(fp)
 8013ff0:	10c00917 	ldw	r3,36(r2)
 8013ff4:	e0bffc17 	ldw	r2,-16(fp)
 8013ff8:	10800117 	ldw	r2,4(r2)
 8013ffc:	18bff736 	bltu	r3,r2,8013fdc <__alt_data_end+0xfc013fdc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8014000:	e0bffc17 	ldw	r2,-16(fp)
 8014004:	10c00a17 	ldw	r3,40(r2)
 8014008:	e0bff717 	ldw	r2,-36(fp)
 801400c:	1880011e 	bne	r3,r2,8014014 <altera_avalon_jtag_uart_read+0x150>
      break;
 8014010:	00000206 	br	801401c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8014014:	e0bffe17 	ldw	r2,-8(fp)
 8014018:	00bfb516 	blt	zero,r2,8013ef0 <__alt_data_end+0xfc013ef0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801401c:	e0fff517 	ldw	r3,-44(fp)
 8014020:	e0bffd17 	ldw	r2,-12(fp)
 8014024:	18801826 	beq	r3,r2,8014088 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014028:	0005303a 	rdctl	r2,status
 801402c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014030:	e0fffa17 	ldw	r3,-24(fp)
 8014034:	00bfff84 	movi	r2,-2
 8014038:	1884703a 	and	r2,r3,r2
 801403c:	1001703a 	wrctl	status,r2
  
  return context;
 8014040:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8014044:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8014048:	e0bffc17 	ldw	r2,-16(fp)
 801404c:	10800817 	ldw	r2,32(r2)
 8014050:	10c00054 	ori	r3,r2,1
 8014054:	e0bffc17 	ldw	r2,-16(fp)
 8014058:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801405c:	e0bffc17 	ldw	r2,-16(fp)
 8014060:	10800017 	ldw	r2,0(r2)
 8014064:	10800104 	addi	r2,r2,4
 8014068:	1007883a 	mov	r3,r2
 801406c:	e0bffc17 	ldw	r2,-16(fp)
 8014070:	10800817 	ldw	r2,32(r2)
 8014074:	18800035 	stwio	r2,0(r3)
 8014078:	e0bff917 	ldw	r2,-28(fp)
 801407c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014080:	e0bffb17 	ldw	r2,-20(fp)
 8014084:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8014088:	e0fff517 	ldw	r3,-44(fp)
 801408c:	e0bffd17 	ldw	r2,-12(fp)
 8014090:	18800426 	beq	r3,r2,80140a4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8014094:	e0fff517 	ldw	r3,-44(fp)
 8014098:	e0bffd17 	ldw	r2,-12(fp)
 801409c:	1885c83a 	sub	r2,r3,r2
 80140a0:	00000606 	br	80140bc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 80140a4:	e0bfff17 	ldw	r2,-4(fp)
 80140a8:	1090000c 	andi	r2,r2,16384
 80140ac:	10000226 	beq	r2,zero,80140b8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 80140b0:	00bffd44 	movi	r2,-11
 80140b4:	00000106 	br	80140bc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 80140b8:	00bffec4 	movi	r2,-5
}
 80140bc:	e037883a 	mov	sp,fp
 80140c0:	dfc00117 	ldw	ra,4(sp)
 80140c4:	df000017 	ldw	fp,0(sp)
 80140c8:	dec00204 	addi	sp,sp,8
 80140cc:	f800283a 	ret

080140d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80140d0:	defff304 	addi	sp,sp,-52
 80140d4:	dfc00c15 	stw	ra,48(sp)
 80140d8:	df000b15 	stw	fp,44(sp)
 80140dc:	df000b04 	addi	fp,sp,44
 80140e0:	e13ffc15 	stw	r4,-16(fp)
 80140e4:	e17ffd15 	stw	r5,-12(fp)
 80140e8:	e1bffe15 	stw	r6,-8(fp)
 80140ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80140f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80140f4:	e0bffd17 	ldw	r2,-12(fp)
 80140f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80140fc:	00003806 	br	80141e0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8014100:	e0bffc17 	ldw	r2,-16(fp)
 8014104:	10800c17 	ldw	r2,48(r2)
 8014108:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801410c:	e0bffc17 	ldw	r2,-16(fp)
 8014110:	10800d17 	ldw	r2,52(r2)
 8014114:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8014118:	e0fff817 	ldw	r3,-32(fp)
 801411c:	e0bff517 	ldw	r2,-44(fp)
 8014120:	1880062e 	bgeu	r3,r2,801413c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8014124:	e0fff517 	ldw	r3,-44(fp)
 8014128:	e0bff817 	ldw	r2,-32(fp)
 801412c:	1885c83a 	sub	r2,r3,r2
 8014130:	10bfffc4 	addi	r2,r2,-1
 8014134:	e0bff615 	stw	r2,-40(fp)
 8014138:	00000b06 	br	8014168 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801413c:	e0bff517 	ldw	r2,-44(fp)
 8014140:	10000526 	beq	r2,zero,8014158 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8014144:	00c20004 	movi	r3,2048
 8014148:	e0bff817 	ldw	r2,-32(fp)
 801414c:	1885c83a 	sub	r2,r3,r2
 8014150:	e0bff615 	stw	r2,-40(fp)
 8014154:	00000406 	br	8014168 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8014158:	00c1ffc4 	movi	r3,2047
 801415c:	e0bff817 	ldw	r2,-32(fp)
 8014160:	1885c83a 	sub	r2,r3,r2
 8014164:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8014168:	e0bff617 	ldw	r2,-40(fp)
 801416c:	1000011e 	bne	r2,zero,8014174 <altera_avalon_jtag_uart_write+0xa4>
        break;
 8014170:	00001d06 	br	80141e8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8014174:	e0fffe17 	ldw	r3,-8(fp)
 8014178:	e0bff617 	ldw	r2,-40(fp)
 801417c:	1880022e 	bgeu	r3,r2,8014188 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8014180:	e0bffe17 	ldw	r2,-8(fp)
 8014184:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8014188:	e0bff817 	ldw	r2,-32(fp)
 801418c:	10820e04 	addi	r2,r2,2104
 8014190:	e0fffc17 	ldw	r3,-16(fp)
 8014194:	1885883a 	add	r2,r3,r2
 8014198:	1009883a 	mov	r4,r2
 801419c:	e17ffd17 	ldw	r5,-12(fp)
 80141a0:	e1bff617 	ldw	r6,-40(fp)
 80141a4:	800c1380 	call	800c138 <memcpy>
      ptr   += n;
 80141a8:	e0fffd17 	ldw	r3,-12(fp)
 80141ac:	e0bff617 	ldw	r2,-40(fp)
 80141b0:	1885883a 	add	r2,r3,r2
 80141b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80141b8:	e0fffe17 	ldw	r3,-8(fp)
 80141bc:	e0bff617 	ldw	r2,-40(fp)
 80141c0:	1885c83a 	sub	r2,r3,r2
 80141c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80141c8:	e0fff817 	ldw	r3,-32(fp)
 80141cc:	e0bff617 	ldw	r2,-40(fp)
 80141d0:	1885883a 	add	r2,r3,r2
 80141d4:	10c1ffcc 	andi	r3,r2,2047
 80141d8:	e0bffc17 	ldw	r2,-16(fp)
 80141dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80141e0:	e0bffe17 	ldw	r2,-8(fp)
 80141e4:	00bfc616 	blt	zero,r2,8014100 <__alt_data_end+0xfc014100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80141e8:	0005303a 	rdctl	r2,status
 80141ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80141f0:	e0fffa17 	ldw	r3,-24(fp)
 80141f4:	00bfff84 	movi	r2,-2
 80141f8:	1884703a 	and	r2,r3,r2
 80141fc:	1001703a 	wrctl	status,r2
  
  return context;
 8014200:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8014204:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8014208:	e0bffc17 	ldw	r2,-16(fp)
 801420c:	10800817 	ldw	r2,32(r2)
 8014210:	10c00094 	ori	r3,r2,2
 8014214:	e0bffc17 	ldw	r2,-16(fp)
 8014218:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801421c:	e0bffc17 	ldw	r2,-16(fp)
 8014220:	10800017 	ldw	r2,0(r2)
 8014224:	10800104 	addi	r2,r2,4
 8014228:	1007883a 	mov	r3,r2
 801422c:	e0bffc17 	ldw	r2,-16(fp)
 8014230:	10800817 	ldw	r2,32(r2)
 8014234:	18800035 	stwio	r2,0(r3)
 8014238:	e0bff917 	ldw	r2,-28(fp)
 801423c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014240:	e0bffb17 	ldw	r2,-20(fp)
 8014244:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8014248:	e0bffe17 	ldw	r2,-8(fp)
 801424c:	0080120e 	bge	zero,r2,8014298 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8014250:	e0bfff17 	ldw	r2,-4(fp)
 8014254:	1090000c 	andi	r2,r2,16384
 8014258:	10000126 	beq	r2,zero,8014260 <altera_avalon_jtag_uart_write+0x190>
        break;
 801425c:	00001006 	br	80142a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8014260:	0001883a 	nop
 8014264:	e0bffc17 	ldw	r2,-16(fp)
 8014268:	10c00d17 	ldw	r3,52(r2)
 801426c:	e0bff517 	ldw	r2,-44(fp)
 8014270:	1880051e 	bne	r3,r2,8014288 <altera_avalon_jtag_uart_write+0x1b8>
 8014274:	e0bffc17 	ldw	r2,-16(fp)
 8014278:	10c00917 	ldw	r3,36(r2)
 801427c:	e0bffc17 	ldw	r2,-16(fp)
 8014280:	10800117 	ldw	r2,4(r2)
 8014284:	18bff736 	bltu	r3,r2,8014264 <__alt_data_end+0xfc014264>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8014288:	e0bffc17 	ldw	r2,-16(fp)
 801428c:	10800917 	ldw	r2,36(r2)
 8014290:	10000126 	beq	r2,zero,8014298 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 8014294:	00000206 	br	80142a0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8014298:	e0bffe17 	ldw	r2,-8(fp)
 801429c:	00bf9716 	blt	zero,r2,80140fc <__alt_data_end+0xfc0140fc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80142a0:	e0fffd17 	ldw	r3,-12(fp)
 80142a4:	e0bff717 	ldw	r2,-36(fp)
 80142a8:	18800426 	beq	r3,r2,80142bc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80142ac:	e0fffd17 	ldw	r3,-12(fp)
 80142b0:	e0bff717 	ldw	r2,-36(fp)
 80142b4:	1885c83a 	sub	r2,r3,r2
 80142b8:	00000606 	br	80142d4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 80142bc:	e0bfff17 	ldw	r2,-4(fp)
 80142c0:	1090000c 	andi	r2,r2,16384
 80142c4:	10000226 	beq	r2,zero,80142d0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 80142c8:	00bffd44 	movi	r2,-11
 80142cc:	00000106 	br	80142d4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80142d0:	00bffec4 	movi	r2,-5
}
 80142d4:	e037883a 	mov	sp,fp
 80142d8:	dfc00117 	ldw	ra,4(sp)
 80142dc:	df000017 	ldw	fp,0(sp)
 80142e0:	dec00204 	addi	sp,sp,8
 80142e4:	f800283a 	ret

080142e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80142e8:	defffa04 	addi	sp,sp,-24
 80142ec:	dfc00515 	stw	ra,20(sp)
 80142f0:	df000415 	stw	fp,16(sp)
 80142f4:	df000404 	addi	fp,sp,16
 80142f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80142fc:	0007883a 	mov	r3,zero
 8014300:	e0bfff17 	ldw	r2,-4(fp)
 8014304:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8014308:	e0bfff17 	ldw	r2,-4(fp)
 801430c:	10800104 	addi	r2,r2,4
 8014310:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014314:	0005303a 	rdctl	r2,status
 8014318:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801431c:	e0fffd17 	ldw	r3,-12(fp)
 8014320:	00bfff84 	movi	r2,-2
 8014324:	1884703a 	and	r2,r3,r2
 8014328:	1001703a 	wrctl	status,r2
  
  return context;
 801432c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8014330:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8014334:	80154c00 	call	80154c0 <alt_tick>
 8014338:	e0bffc17 	ldw	r2,-16(fp)
 801433c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014340:	e0bffe17 	ldw	r2,-8(fp)
 8014344:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8014348:	e037883a 	mov	sp,fp
 801434c:	dfc00117 	ldw	ra,4(sp)
 8014350:	df000017 	ldw	fp,0(sp)
 8014354:	dec00204 	addi	sp,sp,8
 8014358:	f800283a 	ret

0801435c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801435c:	defff804 	addi	sp,sp,-32
 8014360:	dfc00715 	stw	ra,28(sp)
 8014364:	df000615 	stw	fp,24(sp)
 8014368:	df000604 	addi	fp,sp,24
 801436c:	e13ffc15 	stw	r4,-16(fp)
 8014370:	e17ffd15 	stw	r5,-12(fp)
 8014374:	e1bffe15 	stw	r6,-8(fp)
 8014378:	e1ffff15 	stw	r7,-4(fp)
 801437c:	e0bfff17 	ldw	r2,-4(fp)
 8014380:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8014384:	008200b4 	movhi	r2,2050
 8014388:	108f7504 	addi	r2,r2,15828
 801438c:	10800017 	ldw	r2,0(r2)
 8014390:	1000041e 	bne	r2,zero,80143a4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8014394:	008200b4 	movhi	r2,2050
 8014398:	108f7504 	addi	r2,r2,15828
 801439c:	e0fffb17 	ldw	r3,-20(fp)
 80143a0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80143a4:	e0bffc17 	ldw	r2,-16(fp)
 80143a8:	10800104 	addi	r2,r2,4
 80143ac:	00c001c4 	movi	r3,7
 80143b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80143b4:	d8000015 	stw	zero,0(sp)
 80143b8:	e13ffd17 	ldw	r4,-12(fp)
 80143bc:	e17ffe17 	ldw	r5,-8(fp)
 80143c0:	01820074 	movhi	r6,2049
 80143c4:	3190ba04 	addi	r6,r6,17128
 80143c8:	e1fffc17 	ldw	r7,-16(fp)
 80143cc:	8014dac0 	call	8014dac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80143d0:	e037883a 	mov	sp,fp
 80143d4:	dfc00117 	ldw	ra,4(sp)
 80143d8:	df000017 	ldw	fp,0(sp)
 80143dc:	dec00204 	addi	sp,sp,8
 80143e0:	f800283a 	ret

080143e4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 80143e4:	defffc04 	addi	sp,sp,-16
 80143e8:	df000315 	stw	fp,12(sp)
 80143ec:	df000304 	addi	fp,sp,12
 80143f0:	e13ffe15 	stw	r4,-8(fp)
 80143f4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 80143f8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 80143fc:	e0bfff17 	ldw	r2,-4(fp)
 8014400:	1000061e 	bne	r2,zero,801441c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8014404:	e0bffe17 	ldw	r2,-8(fp)
 8014408:	1007883a 	mov	r3,r2
 801440c:	e0bffd03 	ldbu	r2,-12(fp)
 8014410:	1884b03a 	or	r2,r3,r2
 8014414:	e0bffd05 	stb	r2,-12(fp)
 8014418:	00000806 	br	801443c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 801441c:	e0bffe17 	ldw	r2,-8(fp)
 8014420:	1007883a 	mov	r3,r2
 8014424:	e0bffd03 	ldbu	r2,-12(fp)
 8014428:	1884b03a 	or	r2,r3,r2
 801442c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8014430:	e0bffd03 	ldbu	r2,-12(fp)
 8014434:	10801014 	ori	r2,r2,64
 8014438:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 801443c:	e0fffd03 	ldbu	r3,-12(fp)
 8014440:	00bfe004 	movi	r2,-128
 8014444:	1884b03a 	or	r2,r3,r2
}
 8014448:	e037883a 	mov	sp,fp
 801444c:	df000017 	ldw	fp,0(sp)
 8014450:	dec00104 	addi	sp,sp,4
 8014454:	f800283a 	ret

08014458 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8014458:	defffd04 	addi	sp,sp,-12
 801445c:	df000215 	stw	fp,8(sp)
 8014460:	df000204 	addi	fp,sp,8
 8014464:	e13ffe15 	stw	r4,-8(fp)
 8014468:	2805883a 	mov	r2,r5
 801446c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8014470:	e0bffe17 	ldw	r2,-8(fp)
 8014474:	10800a17 	ldw	r2,40(r2)
 8014478:	1007883a 	mov	r3,r2
 801447c:	e0bfff03 	ldbu	r2,-4(fp)
 8014480:	18800025 	stbio	r2,0(r3)
}
 8014484:	e037883a 	mov	sp,fp
 8014488:	df000017 	ldw	fp,0(sp)
 801448c:	dec00104 	addi	sp,sp,4
 8014490:	f800283a 	ret

08014494 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 8014494:	defffe04 	addi	sp,sp,-8
 8014498:	df000115 	stw	fp,4(sp)
 801449c:	df000104 	addi	fp,sp,4
 80144a0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80144a4:	e0bfff17 	ldw	r2,-4(fp)
 80144a8:	10800a17 	ldw	r2,40(r2)
 80144ac:	1007883a 	mov	r3,r2
 80144b0:	00800044 	movi	r2,1
 80144b4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 80144b8:	e037883a 	mov	sp,fp
 80144bc:	df000017 	ldw	fp,0(sp)
 80144c0:	dec00104 	addi	sp,sp,4
 80144c4:	f800283a 	ret

080144c8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 80144c8:	defffc04 	addi	sp,sp,-16
 80144cc:	dfc00315 	stw	ra,12(sp)
 80144d0:	df000215 	stw	fp,8(sp)
 80144d4:	df000204 	addi	fp,sp,8
 80144d8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 80144dc:	e13fff17 	ldw	r4,-4(fp)
 80144e0:	014200b4 	movhi	r5,2050
 80144e4:	29489104 	addi	r5,r5,8772
 80144e8:	8014cec0 	call	8014cec <alt_find_dev>
 80144ec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80144f0:	e0bffe17 	ldw	r2,-8(fp)
}
 80144f4:	e037883a 	mov	sp,fp
 80144f8:	dfc00117 	ldw	ra,4(sp)
 80144fc:	df000017 	ldw	fp,0(sp)
 8014500:	dec00204 	addi	sp,sp,8
 8014504:	f800283a 	ret

08014508 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8014508:	defffb04 	addi	sp,sp,-20
 801450c:	df000415 	stw	fp,16(sp)
 8014510:	df000404 	addi	fp,sp,16
 8014514:	e13ffd15 	stw	r4,-12(fp)
 8014518:	e17ffe15 	stw	r5,-8(fp)
 801451c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8014520:	e03ffc15 	stw	zero,-16(fp)
 8014524:	00000f06 	br	8014564 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8014528:	e0bffd17 	ldw	r2,-12(fp)
 801452c:	10800a17 	ldw	r2,40(r2)
 8014530:	10800044 	addi	r2,r2,1
 8014534:	1009883a 	mov	r4,r2
 8014538:	e0fffe17 	ldw	r3,-8(fp)
 801453c:	e0bffc17 	ldw	r2,-16(fp)
 8014540:	1885883a 	add	r2,r3,r2
 8014544:	10800003 	ldbu	r2,0(r2)
 8014548:	10803fcc 	andi	r2,r2,255
 801454c:	1080201c 	xori	r2,r2,128
 8014550:	10bfe004 	addi	r2,r2,-128
 8014554:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8014558:	e0bffc17 	ldw	r2,-16(fp)
 801455c:	10800044 	addi	r2,r2,1
 8014560:	e0bffc15 	stw	r2,-16(fp)
 8014564:	e0fffc17 	ldw	r3,-16(fp)
 8014568:	e0bfff17 	ldw	r2,-4(fp)
 801456c:	18bfee36 	bltu	r3,r2,8014528 <__alt_data_end+0xfc014528>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8014570:	e037883a 	mov	sp,fp
 8014574:	df000017 	ldw	fp,0(sp)
 8014578:	dec00104 	addi	sp,sp,4
 801457c:	f800283a 	ret

08014580 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8014580:	defffd04 	addi	sp,sp,-12
 8014584:	df000215 	stw	fp,8(sp)
 8014588:	df000204 	addi	fp,sp,8
 801458c:	e13ffe15 	stw	r4,-8(fp)
 8014590:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 8014594:	00000d06 	br	80145cc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 8014598:	e0bffe17 	ldw	r2,-8(fp)
 801459c:	10800a17 	ldw	r2,40(r2)
 80145a0:	10800044 	addi	r2,r2,1
 80145a4:	1007883a 	mov	r3,r2
 80145a8:	e0bfff17 	ldw	r2,-4(fp)
 80145ac:	10800003 	ldbu	r2,0(r2)
 80145b0:	10803fcc 	andi	r2,r2,255
 80145b4:	1080201c 	xori	r2,r2,128
 80145b8:	10bfe004 	addi	r2,r2,-128
 80145bc:	18800025 	stbio	r2,0(r3)
		++ptr;
 80145c0:	e0bfff17 	ldw	r2,-4(fp)
 80145c4:	10800044 	addi	r2,r2,1
 80145c8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 80145cc:	e0bfff17 	ldw	r2,-4(fp)
 80145d0:	10800003 	ldbu	r2,0(r2)
 80145d4:	10803fcc 	andi	r2,r2,255
 80145d8:	1080201c 	xori	r2,r2,128
 80145dc:	10bfe004 	addi	r2,r2,-128
 80145e0:	103fed1e 	bne	r2,zero,8014598 <__alt_data_end+0xfc014598>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 80145e4:	e037883a 	mov	sp,fp
 80145e8:	df000017 	ldw	fp,0(sp)
 80145ec:	dec00104 	addi	sp,sp,4
 80145f0:	f800283a 	ret

080145f4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 80145f4:	defffb04 	addi	sp,sp,-20
 80145f8:	dfc00415 	stw	ra,16(sp)
 80145fc:	df000315 	stw	fp,12(sp)
 8014600:	df000304 	addi	fp,sp,12
 8014604:	e13ffd15 	stw	r4,-12(fp)
 8014608:	e17ffe15 	stw	r5,-8(fp)
 801460c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8014610:	e0bffd17 	ldw	r2,-12(fp)
 8014614:	10c00017 	ldw	r3,0(r2)
 8014618:	e0bfff17 	ldw	r2,-4(fp)
 801461c:	1809883a 	mov	r4,r3
 8014620:	e17ffe17 	ldw	r5,-8(fp)
 8014624:	100d883a 	mov	r6,r2
 8014628:	80145080 	call	8014508 <alt_up_character_lcd_write>
	return 0;
 801462c:	0005883a 	mov	r2,zero
}
 8014630:	e037883a 	mov	sp,fp
 8014634:	dfc00117 	ldw	ra,4(sp)
 8014638:	df000017 	ldw	fp,0(sp)
 801463c:	dec00204 	addi	sp,sp,8
 8014640:	f800283a 	ret

08014644 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8014644:	defffa04 	addi	sp,sp,-24
 8014648:	dfc00515 	stw	ra,20(sp)
 801464c:	df000415 	stw	fp,16(sp)
 8014650:	df000404 	addi	fp,sp,16
 8014654:	e13ffd15 	stw	r4,-12(fp)
 8014658:	e17ffe15 	stw	r5,-8(fp)
 801465c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8014660:	e0bffe17 	ldw	r2,-8(fp)
 8014664:	10800a28 	cmpgeui	r2,r2,40
 8014668:	1000031e 	bne	r2,zero,8014678 <alt_up_character_lcd_set_cursor_pos+0x34>
 801466c:	e0bfff17 	ldw	r2,-4(fp)
 8014670:	108000b0 	cmpltui	r2,r2,2
 8014674:	1000021e 	bne	r2,zero,8014680 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8014678:	00bfffc4 	movi	r2,-1
 801467c:	00000906 	br	80146a4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8014680:	e13ffe17 	ldw	r4,-8(fp)
 8014684:	e17fff17 	ldw	r5,-4(fp)
 8014688:	80143e40 	call	80143e4 <get_DDRAM_addr>
 801468c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8014690:	e0bffc03 	ldbu	r2,-16(fp)
 8014694:	e13ffd17 	ldw	r4,-12(fp)
 8014698:	100b883a 	mov	r5,r2
 801469c:	80144580 	call	8014458 <alt_up_character_lcd_send_cmd>
	return 0;
 80146a0:	0005883a 	mov	r2,zero
}
 80146a4:	e037883a 	mov	sp,fp
 80146a8:	dfc00117 	ldw	ra,4(sp)
 80146ac:	df000017 	ldw	fp,0(sp)
 80146b0:	dec00204 	addi	sp,sp,8
 80146b4:	f800283a 	ret

080146b8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80146b8:	defffb04 	addi	sp,sp,-20
 80146bc:	dfc00415 	stw	ra,16(sp)
 80146c0:	df000315 	stw	fp,12(sp)
 80146c4:	df000304 	addi	fp,sp,12
 80146c8:	e13ffe15 	stw	r4,-8(fp)
 80146cc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 80146d0:	e0bfff17 	ldw	r2,-4(fp)
 80146d4:	1000011e 	bne	r2,zero,80146dc <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 80146d8:	00001406 	br	801472c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80146dc:	e0bfff17 	ldw	r2,-4(fp)
 80146e0:	0080020e 	bge	zero,r2,80146ec <alt_up_character_lcd_shift_cursor+0x34>
 80146e4:	00800504 	movi	r2,20
 80146e8:	00000106 	br	80146f0 <alt_up_character_lcd_shift_cursor+0x38>
 80146ec:	00800404 	movi	r2,16
 80146f0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80146f4:	e0bfff17 	ldw	r2,-4(fp)
 80146f8:	1000010e 	bge	r2,zero,8014700 <alt_up_character_lcd_shift_cursor+0x48>
 80146fc:	0085c83a 	sub	r2,zero,r2
 8014700:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8014704:	00000406 	br	8014718 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8014708:	e0bffd43 	ldbu	r2,-11(fp)
 801470c:	e13ffe17 	ldw	r4,-8(fp)
 8014710:	100b883a 	mov	r5,r2
 8014714:	80144580 	call	8014458 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8014718:	e0bffd03 	ldbu	r2,-12(fp)
 801471c:	10ffffc4 	addi	r3,r2,-1
 8014720:	e0fffd05 	stb	r3,-12(fp)
 8014724:	10803fcc 	andi	r2,r2,255
 8014728:	103ff71e 	bne	r2,zero,8014708 <__alt_data_end+0xfc014708>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 801472c:	e037883a 	mov	sp,fp
 8014730:	dfc00117 	ldw	ra,4(sp)
 8014734:	df000017 	ldw	fp,0(sp)
 8014738:	dec00204 	addi	sp,sp,8
 801473c:	f800283a 	ret

08014740 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8014740:	defffb04 	addi	sp,sp,-20
 8014744:	dfc00415 	stw	ra,16(sp)
 8014748:	df000315 	stw	fp,12(sp)
 801474c:	df000304 	addi	fp,sp,12
 8014750:	e13ffe15 	stw	r4,-8(fp)
 8014754:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8014758:	e0bfff17 	ldw	r2,-4(fp)
 801475c:	1000011e 	bne	r2,zero,8014764 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 8014760:	00001406 	br	80147b4 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8014764:	e0bfff17 	ldw	r2,-4(fp)
 8014768:	0080020e 	bge	zero,r2,8014774 <alt_up_character_lcd_shift_display+0x34>
 801476c:	00800704 	movi	r2,28
 8014770:	00000106 	br	8014778 <alt_up_character_lcd_shift_display+0x38>
 8014774:	00800604 	movi	r2,24
 8014778:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801477c:	e0bfff17 	ldw	r2,-4(fp)
 8014780:	1000010e 	bge	r2,zero,8014788 <alt_up_character_lcd_shift_display+0x48>
 8014784:	0085c83a 	sub	r2,zero,r2
 8014788:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801478c:	00000406 	br	80147a0 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8014790:	e0bffd43 	ldbu	r2,-11(fp)
 8014794:	e13ffe17 	ldw	r4,-8(fp)
 8014798:	100b883a 	mov	r5,r2
 801479c:	80144580 	call	8014458 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80147a0:	e0bffd03 	ldbu	r2,-12(fp)
 80147a4:	10ffffc4 	addi	r3,r2,-1
 80147a8:	e0fffd05 	stb	r3,-12(fp)
 80147ac:	10803fcc 	andi	r2,r2,255
 80147b0:	103ff71e 	bne	r2,zero,8014790 <__alt_data_end+0xfc014790>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80147b4:	e037883a 	mov	sp,fp
 80147b8:	dfc00117 	ldw	ra,4(sp)
 80147bc:	df000017 	ldw	fp,0(sp)
 80147c0:	dec00204 	addi	sp,sp,8
 80147c4:	f800283a 	ret

080147c8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 80147c8:	defffa04 	addi	sp,sp,-24
 80147cc:	dfc00515 	stw	ra,20(sp)
 80147d0:	df000415 	stw	fp,16(sp)
 80147d4:	df000404 	addi	fp,sp,16
 80147d8:	e13ffd15 	stw	r4,-12(fp)
 80147dc:	e17ffe15 	stw	r5,-8(fp)
 80147e0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 80147e4:	e0bffe17 	ldw	r2,-8(fp)
 80147e8:	10800a28 	cmpgeui	r2,r2,40
 80147ec:	1000031e 	bne	r2,zero,80147fc <alt_up_character_lcd_erase_pos+0x34>
 80147f0:	e0bfff17 	ldw	r2,-4(fp)
 80147f4:	108000b0 	cmpltui	r2,r2,2
 80147f8:	1000021e 	bne	r2,zero,8014804 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 80147fc:	00bfffc4 	movi	r2,-1
 8014800:	00000f06 	br	8014840 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8014804:	e13ffe17 	ldw	r4,-8(fp)
 8014808:	e17fff17 	ldw	r5,-4(fp)
 801480c:	80143e40 	call	80143e4 <get_DDRAM_addr>
 8014810:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8014814:	e0bffc03 	ldbu	r2,-16(fp)
 8014818:	e13ffd17 	ldw	r4,-12(fp)
 801481c:	100b883a 	mov	r5,r2
 8014820:	80144580 	call	8014458 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8014824:	e0bffd17 	ldw	r2,-12(fp)
 8014828:	10800a17 	ldw	r2,40(r2)
 801482c:	10800044 	addi	r2,r2,1
 8014830:	1007883a 	mov	r3,r2
 8014834:	00800084 	movi	r2,2
 8014838:	18800025 	stbio	r2,0(r3)
	return 0;
 801483c:	0005883a 	mov	r2,zero
}
 8014840:	e037883a 	mov	sp,fp
 8014844:	dfc00117 	ldw	ra,4(sp)
 8014848:	df000017 	ldw	fp,0(sp)
 801484c:	dec00204 	addi	sp,sp,8
 8014850:	f800283a 	ret

08014854 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8014854:	defffd04 	addi	sp,sp,-12
 8014858:	dfc00215 	stw	ra,8(sp)
 801485c:	df000115 	stw	fp,4(sp)
 8014860:	df000104 	addi	fp,sp,4
 8014864:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8014868:	e13fff17 	ldw	r4,-4(fp)
 801486c:	01400304 	movi	r5,12
 8014870:	80144580 	call	8014458 <alt_up_character_lcd_send_cmd>
}
 8014874:	e037883a 	mov	sp,fp
 8014878:	dfc00117 	ldw	ra,4(sp)
 801487c:	df000017 	ldw	fp,0(sp)
 8014880:	dec00204 	addi	sp,sp,8
 8014884:	f800283a 	ret

08014888 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8014888:	defffd04 	addi	sp,sp,-12
 801488c:	dfc00215 	stw	ra,8(sp)
 8014890:	df000115 	stw	fp,4(sp)
 8014894:	df000104 	addi	fp,sp,4
 8014898:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 801489c:	e13fff17 	ldw	r4,-4(fp)
 80148a0:	014003c4 	movi	r5,15
 80148a4:	80144580 	call	8014458 <alt_up_character_lcd_send_cmd>
}
 80148a8:	e037883a 	mov	sp,fp
 80148ac:	dfc00117 	ldw	ra,4(sp)
 80148b0:	df000017 	ldw	fp,0(sp)
 80148b4:	dec00204 	addi	sp,sp,8
 80148b8:	f800283a 	ret

080148bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80148bc:	defff504 	addi	sp,sp,-44
 80148c0:	df000a15 	stw	fp,40(sp)
 80148c4:	df000a04 	addi	fp,sp,40
 80148c8:	e13ffc15 	stw	r4,-16(fp)
 80148cc:	e17ffd15 	stw	r5,-12(fp)
 80148d0:	e1bffe15 	stw	r6,-8(fp)
 80148d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80148d8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80148dc:	008200b4 	movhi	r2,2050
 80148e0:	108f7504 	addi	r2,r2,15828
 80148e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80148e8:	10003f26 	beq	r2,zero,80149e8 <alt_alarm_start+0x12c>
  {
    if (alarm)
 80148ec:	e0bffc17 	ldw	r2,-16(fp)
 80148f0:	10003b26 	beq	r2,zero,80149e0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80148f4:	e0bffc17 	ldw	r2,-16(fp)
 80148f8:	e0fffe17 	ldw	r3,-8(fp)
 80148fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8014900:	e0bffc17 	ldw	r2,-16(fp)
 8014904:	e0ffff17 	ldw	r3,-4(fp)
 8014908:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801490c:	0005303a 	rdctl	r2,status
 8014910:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014914:	e0fff817 	ldw	r3,-32(fp)
 8014918:	00bfff84 	movi	r2,-2
 801491c:	1884703a 	and	r2,r3,r2
 8014920:	1001703a 	wrctl	status,r2
  
  return context;
 8014924:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8014928:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801492c:	008200b4 	movhi	r2,2050
 8014930:	108f7604 	addi	r2,r2,15832
 8014934:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8014938:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801493c:	e0fffd17 	ldw	r3,-12(fp)
 8014940:	e0bff617 	ldw	r2,-40(fp)
 8014944:	1885883a 	add	r2,r3,r2
 8014948:	10c00044 	addi	r3,r2,1
 801494c:	e0bffc17 	ldw	r2,-16(fp)
 8014950:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8014954:	e0bffc17 	ldw	r2,-16(fp)
 8014958:	10c00217 	ldw	r3,8(r2)
 801495c:	e0bff617 	ldw	r2,-40(fp)
 8014960:	1880042e 	bgeu	r3,r2,8014974 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8014964:	e0bffc17 	ldw	r2,-16(fp)
 8014968:	00c00044 	movi	r3,1
 801496c:	10c00405 	stb	r3,16(r2)
 8014970:	00000206 	br	801497c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8014974:	e0bffc17 	ldw	r2,-16(fp)
 8014978:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801497c:	e0fffc17 	ldw	r3,-16(fp)
 8014980:	008200b4 	movhi	r2,2050
 8014984:	10889704 	addi	r2,r2,8796
 8014988:	e0bff915 	stw	r2,-28(fp)
 801498c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014990:	e0bffa17 	ldw	r2,-24(fp)
 8014994:	e0fff917 	ldw	r3,-28(fp)
 8014998:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801499c:	e0bff917 	ldw	r2,-28(fp)
 80149a0:	10c00017 	ldw	r3,0(r2)
 80149a4:	e0bffa17 	ldw	r2,-24(fp)
 80149a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80149ac:	e0bff917 	ldw	r2,-28(fp)
 80149b0:	10800017 	ldw	r2,0(r2)
 80149b4:	e0fffa17 	ldw	r3,-24(fp)
 80149b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80149bc:	e0bff917 	ldw	r2,-28(fp)
 80149c0:	e0fffa17 	ldw	r3,-24(fp)
 80149c4:	10c00015 	stw	r3,0(r2)
 80149c8:	e0bff717 	ldw	r2,-36(fp)
 80149cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80149d0:	e0bffb17 	ldw	r2,-20(fp)
 80149d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80149d8:	0005883a 	mov	r2,zero
 80149dc:	00000306 	br	80149ec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 80149e0:	00bffa84 	movi	r2,-22
 80149e4:	00000106 	br	80149ec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 80149e8:	00bfde84 	movi	r2,-134
  }
}
 80149ec:	e037883a 	mov	sp,fp
 80149f0:	df000017 	ldw	fp,0(sp)
 80149f4:	dec00104 	addi	sp,sp,4
 80149f8:	f800283a 	ret

080149fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80149fc:	defffb04 	addi	sp,sp,-20
 8014a00:	df000415 	stw	fp,16(sp)
 8014a04:	df000404 	addi	fp,sp,16
 8014a08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8014a0c:	008000c4 	movi	r2,3
 8014a10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8014a14:	e0fffd17 	ldw	r3,-12(fp)
 8014a18:	008003f4 	movhi	r2,15
 8014a1c:	10909004 	addi	r2,r2,16960
 8014a20:	1887383a 	mul	r3,r3,r2
 8014a24:	0080bef4 	movhi	r2,763
 8014a28:	10bc2004 	addi	r2,r2,-3968
 8014a2c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8014a30:	00a00034 	movhi	r2,32768
 8014a34:	10bfffc4 	addi	r2,r2,-1
 8014a38:	10c5203a 	divu	r2,r2,r3
 8014a3c:	e0ffff17 	ldw	r3,-4(fp)
 8014a40:	1885203a 	divu	r2,r3,r2
 8014a44:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8014a48:	e0bffe17 	ldw	r2,-8(fp)
 8014a4c:	10002526 	beq	r2,zero,8014ae4 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 8014a50:	e03ffc15 	stw	zero,-16(fp)
 8014a54:	00001406 	br	8014aa8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8014a58:	00a00034 	movhi	r2,32768
 8014a5c:	10bfffc4 	addi	r2,r2,-1
 8014a60:	10bfffc4 	addi	r2,r2,-1
 8014a64:	103ffe1e 	bne	r2,zero,8014a60 <__alt_data_end+0xfc014a60>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8014a68:	e0fffd17 	ldw	r3,-12(fp)
 8014a6c:	008003f4 	movhi	r2,15
 8014a70:	10909004 	addi	r2,r2,16960
 8014a74:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8014a78:	0080bef4 	movhi	r2,763
 8014a7c:	10bc2004 	addi	r2,r2,-3968
 8014a80:	10c7203a 	divu	r3,r2,r3
 8014a84:	00a00034 	movhi	r2,32768
 8014a88:	10bfffc4 	addi	r2,r2,-1
 8014a8c:	10c5203a 	divu	r2,r2,r3
 8014a90:	e0ffff17 	ldw	r3,-4(fp)
 8014a94:	1885c83a 	sub	r2,r3,r2
 8014a98:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8014a9c:	e0bffc17 	ldw	r2,-16(fp)
 8014aa0:	10800044 	addi	r2,r2,1
 8014aa4:	e0bffc15 	stw	r2,-16(fp)
 8014aa8:	e0fffc17 	ldw	r3,-16(fp)
 8014aac:	e0bffe17 	ldw	r2,-8(fp)
 8014ab0:	18bfe916 	blt	r3,r2,8014a58 <__alt_data_end+0xfc014a58>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014ab4:	e0fffd17 	ldw	r3,-12(fp)
 8014ab8:	008003f4 	movhi	r2,15
 8014abc:	10909004 	addi	r2,r2,16960
 8014ac0:	1887383a 	mul	r3,r3,r2
 8014ac4:	0080bef4 	movhi	r2,763
 8014ac8:	10bc2004 	addi	r2,r2,-3968
 8014acc:	10c7203a 	divu	r3,r2,r3
 8014ad0:	e0bfff17 	ldw	r2,-4(fp)
 8014ad4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014ad8:	10bfffc4 	addi	r2,r2,-1
 8014adc:	103ffe1e 	bne	r2,zero,8014ad8 <__alt_data_end+0xfc014ad8>
 8014ae0:	00000b06 	br	8014b10 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8014ae4:	e0fffd17 	ldw	r3,-12(fp)
 8014ae8:	008003f4 	movhi	r2,15
 8014aec:	10909004 	addi	r2,r2,16960
 8014af0:	1887383a 	mul	r3,r3,r2
 8014af4:	0080bef4 	movhi	r2,763
 8014af8:	10bc2004 	addi	r2,r2,-3968
 8014afc:	10c7203a 	divu	r3,r2,r3
 8014b00:	e0bfff17 	ldw	r2,-4(fp)
 8014b04:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8014b08:	10bfffc4 	addi	r2,r2,-1
 8014b0c:	00bffe16 	blt	zero,r2,8014b08 <__alt_data_end+0xfc014b08>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8014b10:	0005883a 	mov	r2,zero
}
 8014b14:	e037883a 	mov	sp,fp
 8014b18:	df000017 	ldw	fp,0(sp)
 8014b1c:	dec00104 	addi	sp,sp,4
 8014b20:	f800283a 	ret

08014b24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8014b24:	deffff04 	addi	sp,sp,-4
 8014b28:	df000015 	stw	fp,0(sp)
 8014b2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8014b30:	e037883a 	mov	sp,fp
 8014b34:	df000017 	ldw	fp,0(sp)
 8014b38:	dec00104 	addi	sp,sp,4
 8014b3c:	f800283a 	ret

08014b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014b40:	defffe04 	addi	sp,sp,-8
 8014b44:	dfc00115 	stw	ra,4(sp)
 8014b48:	df000015 	stw	fp,0(sp)
 8014b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014b50:	008200b4 	movhi	r2,2050
 8014b54:	10889404 	addi	r2,r2,8784
 8014b58:	10800017 	ldw	r2,0(r2)
 8014b5c:	10000526 	beq	r2,zero,8014b74 <alt_get_errno+0x34>
 8014b60:	008200b4 	movhi	r2,2050
 8014b64:	10889404 	addi	r2,r2,8784
 8014b68:	10800017 	ldw	r2,0(r2)
 8014b6c:	103ee83a 	callr	r2
 8014b70:	00000206 	br	8014b7c <alt_get_errno+0x3c>
 8014b74:	008200b4 	movhi	r2,2050
 8014b78:	108f6d04 	addi	r2,r2,15796
}
 8014b7c:	e037883a 	mov	sp,fp
 8014b80:	dfc00117 	ldw	ra,4(sp)
 8014b84:	df000017 	ldw	fp,0(sp)
 8014b88:	dec00204 	addi	sp,sp,8
 8014b8c:	f800283a 	ret

08014b90 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8014b90:	defffa04 	addi	sp,sp,-24
 8014b94:	dfc00515 	stw	ra,20(sp)
 8014b98:	df000415 	stw	fp,16(sp)
 8014b9c:	df000404 	addi	fp,sp,16
 8014ba0:	e13ffe15 	stw	r4,-8(fp)
 8014ba4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8014ba8:	e0bffe17 	ldw	r2,-8(fp)
 8014bac:	10000326 	beq	r2,zero,8014bbc <alt_dev_llist_insert+0x2c>
 8014bb0:	e0bffe17 	ldw	r2,-8(fp)
 8014bb4:	10800217 	ldw	r2,8(r2)
 8014bb8:	1000061e 	bne	r2,zero,8014bd4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8014bbc:	8014b400 	call	8014b40 <alt_get_errno>
 8014bc0:	1007883a 	mov	r3,r2
 8014bc4:	00800584 	movi	r2,22
 8014bc8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8014bcc:	00bffa84 	movi	r2,-22
 8014bd0:	00001306 	br	8014c20 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8014bd4:	e0bffe17 	ldw	r2,-8(fp)
 8014bd8:	e0ffff17 	ldw	r3,-4(fp)
 8014bdc:	e0fffc15 	stw	r3,-16(fp)
 8014be0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8014be4:	e0bffd17 	ldw	r2,-12(fp)
 8014be8:	e0fffc17 	ldw	r3,-16(fp)
 8014bec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8014bf0:	e0bffc17 	ldw	r2,-16(fp)
 8014bf4:	10c00017 	ldw	r3,0(r2)
 8014bf8:	e0bffd17 	ldw	r2,-12(fp)
 8014bfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8014c00:	e0bffc17 	ldw	r2,-16(fp)
 8014c04:	10800017 	ldw	r2,0(r2)
 8014c08:	e0fffd17 	ldw	r3,-12(fp)
 8014c0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8014c10:	e0bffc17 	ldw	r2,-16(fp)
 8014c14:	e0fffd17 	ldw	r3,-12(fp)
 8014c18:	10c00015 	stw	r3,0(r2)

  return 0;  
 8014c1c:	0005883a 	mov	r2,zero
}
 8014c20:	e037883a 	mov	sp,fp
 8014c24:	dfc00117 	ldw	ra,4(sp)
 8014c28:	df000017 	ldw	fp,0(sp)
 8014c2c:	dec00204 	addi	sp,sp,8
 8014c30:	f800283a 	ret

08014c34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8014c34:	defffd04 	addi	sp,sp,-12
 8014c38:	dfc00215 	stw	ra,8(sp)
 8014c3c:	df000115 	stw	fp,4(sp)
 8014c40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014c44:	00820074 	movhi	r2,2049
 8014c48:	1096f604 	addi	r2,r2,23512
 8014c4c:	e0bfff15 	stw	r2,-4(fp)
 8014c50:	00000606 	br	8014c6c <_do_ctors+0x38>
        (*ctor) (); 
 8014c54:	e0bfff17 	ldw	r2,-4(fp)
 8014c58:	10800017 	ldw	r2,0(r2)
 8014c5c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8014c60:	e0bfff17 	ldw	r2,-4(fp)
 8014c64:	10bfff04 	addi	r2,r2,-4
 8014c68:	e0bfff15 	stw	r2,-4(fp)
 8014c6c:	e0ffff17 	ldw	r3,-4(fp)
 8014c70:	00820074 	movhi	r2,2049
 8014c74:	1096f704 	addi	r2,r2,23516
 8014c78:	18bff62e 	bgeu	r3,r2,8014c54 <__alt_data_end+0xfc014c54>
        (*ctor) (); 
}
 8014c7c:	e037883a 	mov	sp,fp
 8014c80:	dfc00117 	ldw	ra,4(sp)
 8014c84:	df000017 	ldw	fp,0(sp)
 8014c88:	dec00204 	addi	sp,sp,8
 8014c8c:	f800283a 	ret

08014c90 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8014c90:	defffd04 	addi	sp,sp,-12
 8014c94:	dfc00215 	stw	ra,8(sp)
 8014c98:	df000115 	stw	fp,4(sp)
 8014c9c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014ca0:	00820074 	movhi	r2,2049
 8014ca4:	1096f604 	addi	r2,r2,23512
 8014ca8:	e0bfff15 	stw	r2,-4(fp)
 8014cac:	00000606 	br	8014cc8 <_do_dtors+0x38>
        (*dtor) (); 
 8014cb0:	e0bfff17 	ldw	r2,-4(fp)
 8014cb4:	10800017 	ldw	r2,0(r2)
 8014cb8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8014cbc:	e0bfff17 	ldw	r2,-4(fp)
 8014cc0:	10bfff04 	addi	r2,r2,-4
 8014cc4:	e0bfff15 	stw	r2,-4(fp)
 8014cc8:	e0ffff17 	ldw	r3,-4(fp)
 8014ccc:	00820074 	movhi	r2,2049
 8014cd0:	1096f704 	addi	r2,r2,23516
 8014cd4:	18bff62e 	bgeu	r3,r2,8014cb0 <__alt_data_end+0xfc014cb0>
        (*dtor) (); 
}
 8014cd8:	e037883a 	mov	sp,fp
 8014cdc:	dfc00117 	ldw	ra,4(sp)
 8014ce0:	df000017 	ldw	fp,0(sp)
 8014ce4:	dec00204 	addi	sp,sp,8
 8014ce8:	f800283a 	ret

08014cec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8014cec:	defffa04 	addi	sp,sp,-24
 8014cf0:	dfc00515 	stw	ra,20(sp)
 8014cf4:	df000415 	stw	fp,16(sp)
 8014cf8:	df000404 	addi	fp,sp,16
 8014cfc:	e13ffe15 	stw	r4,-8(fp)
 8014d00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8014d04:	e0bfff17 	ldw	r2,-4(fp)
 8014d08:	10800017 	ldw	r2,0(r2)
 8014d0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8014d10:	e13ffe17 	ldw	r4,-8(fp)
 8014d14:	80052f00 	call	80052f0 <strlen>
 8014d18:	10800044 	addi	r2,r2,1
 8014d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014d20:	00000d06 	br	8014d58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8014d24:	e0bffc17 	ldw	r2,-16(fp)
 8014d28:	10c00217 	ldw	r3,8(r2)
 8014d2c:	e0bffd17 	ldw	r2,-12(fp)
 8014d30:	1809883a 	mov	r4,r3
 8014d34:	e17ffe17 	ldw	r5,-8(fp)
 8014d38:	100d883a 	mov	r6,r2
 8014d3c:	80158840 	call	8015884 <memcmp>
 8014d40:	1000021e 	bne	r2,zero,8014d4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8014d44:	e0bffc17 	ldw	r2,-16(fp)
 8014d48:	00000706 	br	8014d68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8014d4c:	e0bffc17 	ldw	r2,-16(fp)
 8014d50:	10800017 	ldw	r2,0(r2)
 8014d54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8014d58:	e0fffc17 	ldw	r3,-16(fp)
 8014d5c:	e0bfff17 	ldw	r2,-4(fp)
 8014d60:	18bff01e 	bne	r3,r2,8014d24 <__alt_data_end+0xfc014d24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8014d64:	0005883a 	mov	r2,zero
}
 8014d68:	e037883a 	mov	sp,fp
 8014d6c:	dfc00117 	ldw	ra,4(sp)
 8014d70:	df000017 	ldw	fp,0(sp)
 8014d74:	dec00204 	addi	sp,sp,8
 8014d78:	f800283a 	ret

08014d7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8014d7c:	defffe04 	addi	sp,sp,-8
 8014d80:	dfc00115 	stw	ra,4(sp)
 8014d84:	df000015 	stw	fp,0(sp)
 8014d88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8014d8c:	0009883a 	mov	r4,zero
 8014d90:	01440004 	movi	r5,4096
 8014d94:	80157ac0 	call	80157ac <alt_icache_flush>
#endif
}
 8014d98:	e037883a 	mov	sp,fp
 8014d9c:	dfc00117 	ldw	ra,4(sp)
 8014da0:	df000017 	ldw	fp,0(sp)
 8014da4:	dec00204 	addi	sp,sp,8
 8014da8:	f800283a 	ret

08014dac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014dac:	defff904 	addi	sp,sp,-28
 8014db0:	dfc00615 	stw	ra,24(sp)
 8014db4:	df000515 	stw	fp,20(sp)
 8014db8:	df000504 	addi	fp,sp,20
 8014dbc:	e13ffc15 	stw	r4,-16(fp)
 8014dc0:	e17ffd15 	stw	r5,-12(fp)
 8014dc4:	e1bffe15 	stw	r6,-8(fp)
 8014dc8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8014dcc:	e0800217 	ldw	r2,8(fp)
 8014dd0:	d8800015 	stw	r2,0(sp)
 8014dd4:	e13ffc17 	ldw	r4,-16(fp)
 8014dd8:	e17ffd17 	ldw	r5,-12(fp)
 8014ddc:	e1bffe17 	ldw	r6,-8(fp)
 8014de0:	e1ffff17 	ldw	r7,-4(fp)
 8014de4:	8014f8c0 	call	8014f8c <alt_iic_isr_register>
}  
 8014de8:	e037883a 	mov	sp,fp
 8014dec:	dfc00117 	ldw	ra,4(sp)
 8014df0:	df000017 	ldw	fp,0(sp)
 8014df4:	dec00204 	addi	sp,sp,8
 8014df8:	f800283a 	ret

08014dfc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8014dfc:	defff904 	addi	sp,sp,-28
 8014e00:	df000615 	stw	fp,24(sp)
 8014e04:	df000604 	addi	fp,sp,24
 8014e08:	e13ffe15 	stw	r4,-8(fp)
 8014e0c:	e17fff15 	stw	r5,-4(fp)
 8014e10:	e0bfff17 	ldw	r2,-4(fp)
 8014e14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014e18:	0005303a 	rdctl	r2,status
 8014e1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014e20:	e0fffb17 	ldw	r3,-20(fp)
 8014e24:	00bfff84 	movi	r2,-2
 8014e28:	1884703a 	and	r2,r3,r2
 8014e2c:	1001703a 	wrctl	status,r2
  
  return context;
 8014e30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014e34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8014e38:	e0bffa17 	ldw	r2,-24(fp)
 8014e3c:	00c00044 	movi	r3,1
 8014e40:	1884983a 	sll	r2,r3,r2
 8014e44:	1007883a 	mov	r3,r2
 8014e48:	008200b4 	movhi	r2,2050
 8014e4c:	108f7404 	addi	r2,r2,15824
 8014e50:	10800017 	ldw	r2,0(r2)
 8014e54:	1886b03a 	or	r3,r3,r2
 8014e58:	008200b4 	movhi	r2,2050
 8014e5c:	108f7404 	addi	r2,r2,15824
 8014e60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014e64:	008200b4 	movhi	r2,2050
 8014e68:	108f7404 	addi	r2,r2,15824
 8014e6c:	10800017 	ldw	r2,0(r2)
 8014e70:	100170fa 	wrctl	ienable,r2
 8014e74:	e0bffc17 	ldw	r2,-16(fp)
 8014e78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014e7c:	e0bffd17 	ldw	r2,-12(fp)
 8014e80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014e84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8014e88:	0001883a 	nop
}
 8014e8c:	e037883a 	mov	sp,fp
 8014e90:	df000017 	ldw	fp,0(sp)
 8014e94:	dec00104 	addi	sp,sp,4
 8014e98:	f800283a 	ret

08014e9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8014e9c:	defff904 	addi	sp,sp,-28
 8014ea0:	df000615 	stw	fp,24(sp)
 8014ea4:	df000604 	addi	fp,sp,24
 8014ea8:	e13ffe15 	stw	r4,-8(fp)
 8014eac:	e17fff15 	stw	r5,-4(fp)
 8014eb0:	e0bfff17 	ldw	r2,-4(fp)
 8014eb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014eb8:	0005303a 	rdctl	r2,status
 8014ebc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014ec0:	e0fffb17 	ldw	r3,-20(fp)
 8014ec4:	00bfff84 	movi	r2,-2
 8014ec8:	1884703a 	and	r2,r3,r2
 8014ecc:	1001703a 	wrctl	status,r2
  
  return context;
 8014ed0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8014ed4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8014ed8:	e0bffa17 	ldw	r2,-24(fp)
 8014edc:	00c00044 	movi	r3,1
 8014ee0:	1884983a 	sll	r2,r3,r2
 8014ee4:	0084303a 	nor	r2,zero,r2
 8014ee8:	1007883a 	mov	r3,r2
 8014eec:	008200b4 	movhi	r2,2050
 8014ef0:	108f7404 	addi	r2,r2,15824
 8014ef4:	10800017 	ldw	r2,0(r2)
 8014ef8:	1886703a 	and	r3,r3,r2
 8014efc:	008200b4 	movhi	r2,2050
 8014f00:	108f7404 	addi	r2,r2,15824
 8014f04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8014f08:	008200b4 	movhi	r2,2050
 8014f0c:	108f7404 	addi	r2,r2,15824
 8014f10:	10800017 	ldw	r2,0(r2)
 8014f14:	100170fa 	wrctl	ienable,r2
 8014f18:	e0bffc17 	ldw	r2,-16(fp)
 8014f1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014f20:	e0bffd17 	ldw	r2,-12(fp)
 8014f24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8014f28:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8014f2c:	0001883a 	nop
}
 8014f30:	e037883a 	mov	sp,fp
 8014f34:	df000017 	ldw	fp,0(sp)
 8014f38:	dec00104 	addi	sp,sp,4
 8014f3c:	f800283a 	ret

08014f40 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8014f40:	defffc04 	addi	sp,sp,-16
 8014f44:	df000315 	stw	fp,12(sp)
 8014f48:	df000304 	addi	fp,sp,12
 8014f4c:	e13ffe15 	stw	r4,-8(fp)
 8014f50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8014f54:	000530fa 	rdctl	r2,ienable
 8014f58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8014f5c:	e0bfff17 	ldw	r2,-4(fp)
 8014f60:	00c00044 	movi	r3,1
 8014f64:	1884983a 	sll	r2,r3,r2
 8014f68:	1007883a 	mov	r3,r2
 8014f6c:	e0bffd17 	ldw	r2,-12(fp)
 8014f70:	1884703a 	and	r2,r3,r2
 8014f74:	1004c03a 	cmpne	r2,r2,zero
 8014f78:	10803fcc 	andi	r2,r2,255
}
 8014f7c:	e037883a 	mov	sp,fp
 8014f80:	df000017 	ldw	fp,0(sp)
 8014f84:	dec00104 	addi	sp,sp,4
 8014f88:	f800283a 	ret

08014f8c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8014f8c:	defff504 	addi	sp,sp,-44
 8014f90:	dfc00a15 	stw	ra,40(sp)
 8014f94:	df000915 	stw	fp,36(sp)
 8014f98:	df000904 	addi	fp,sp,36
 8014f9c:	e13ffc15 	stw	r4,-16(fp)
 8014fa0:	e17ffd15 	stw	r5,-12(fp)
 8014fa4:	e1bffe15 	stw	r6,-8(fp)
 8014fa8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8014fac:	00bffa84 	movi	r2,-22
 8014fb0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8014fb4:	e0bffd17 	ldw	r2,-12(fp)
 8014fb8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8014fbc:	e0bff817 	ldw	r2,-32(fp)
 8014fc0:	10800808 	cmpgei	r2,r2,32
 8014fc4:	1000271e 	bne	r2,zero,8015064 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014fc8:	0005303a 	rdctl	r2,status
 8014fcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014fd0:	e0fffa17 	ldw	r3,-24(fp)
 8014fd4:	00bfff84 	movi	r2,-2
 8014fd8:	1884703a 	and	r2,r3,r2
 8014fdc:	1001703a 	wrctl	status,r2
  
  return context;
 8014fe0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8014fe4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8014fe8:	008200b4 	movhi	r2,2050
 8014fec:	108fbd04 	addi	r2,r2,16116
 8014ff0:	e0fff817 	ldw	r3,-32(fp)
 8014ff4:	180690fa 	slli	r3,r3,3
 8014ff8:	10c5883a 	add	r2,r2,r3
 8014ffc:	e0fffe17 	ldw	r3,-8(fp)
 8015000:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8015004:	008200b4 	movhi	r2,2050
 8015008:	108fbd04 	addi	r2,r2,16116
 801500c:	e0fff817 	ldw	r3,-32(fp)
 8015010:	180690fa 	slli	r3,r3,3
 8015014:	10c5883a 	add	r2,r2,r3
 8015018:	10800104 	addi	r2,r2,4
 801501c:	e0ffff17 	ldw	r3,-4(fp)
 8015020:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8015024:	e0bffe17 	ldw	r2,-8(fp)
 8015028:	10000526 	beq	r2,zero,8015040 <alt_iic_isr_register+0xb4>
 801502c:	e0bff817 	ldw	r2,-32(fp)
 8015030:	e13ffc17 	ldw	r4,-16(fp)
 8015034:	100b883a 	mov	r5,r2
 8015038:	8014dfc0 	call	8014dfc <alt_ic_irq_enable>
 801503c:	00000406 	br	8015050 <alt_iic_isr_register+0xc4>
 8015040:	e0bff817 	ldw	r2,-32(fp)
 8015044:	e13ffc17 	ldw	r4,-16(fp)
 8015048:	100b883a 	mov	r5,r2
 801504c:	8014e9c0 	call	8014e9c <alt_ic_irq_disable>
 8015050:	e0bff715 	stw	r2,-36(fp)
 8015054:	e0bff917 	ldw	r2,-28(fp)
 8015058:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801505c:	e0bffb17 	ldw	r2,-20(fp)
 8015060:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8015064:	e0bff717 	ldw	r2,-36(fp)
}
 8015068:	e037883a 	mov	sp,fp
 801506c:	dfc00117 	ldw	ra,4(sp)
 8015070:	df000017 	ldw	fp,0(sp)
 8015074:	dec00204 	addi	sp,sp,8
 8015078:	f800283a 	ret

0801507c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801507c:	defff904 	addi	sp,sp,-28
 8015080:	dfc00615 	stw	ra,24(sp)
 8015084:	df000515 	stw	fp,20(sp)
 8015088:	df000504 	addi	fp,sp,20
 801508c:	e13ffc15 	stw	r4,-16(fp)
 8015090:	e17ffd15 	stw	r5,-12(fp)
 8015094:	e1bffe15 	stw	r6,-8(fp)
 8015098:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801509c:	e13ffd17 	ldw	r4,-12(fp)
 80150a0:	e17ffe17 	ldw	r5,-8(fp)
 80150a4:	e1bfff17 	ldw	r6,-4(fp)
 80150a8:	80152d00 	call	80152d0 <open>
 80150ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 80150b0:	e0bffb17 	ldw	r2,-20(fp)
 80150b4:	10001c16 	blt	r2,zero,8015128 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 80150b8:	008200b4 	movhi	r2,2050
 80150bc:	10840604 	addi	r2,r2,4120
 80150c0:	e0fffb17 	ldw	r3,-20(fp)
 80150c4:	18c00324 	muli	r3,r3,12
 80150c8:	10c5883a 	add	r2,r2,r3
 80150cc:	10c00017 	ldw	r3,0(r2)
 80150d0:	e0bffc17 	ldw	r2,-16(fp)
 80150d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80150d8:	008200b4 	movhi	r2,2050
 80150dc:	10840604 	addi	r2,r2,4120
 80150e0:	e0fffb17 	ldw	r3,-20(fp)
 80150e4:	18c00324 	muli	r3,r3,12
 80150e8:	10c5883a 	add	r2,r2,r3
 80150ec:	10800104 	addi	r2,r2,4
 80150f0:	10c00017 	ldw	r3,0(r2)
 80150f4:	e0bffc17 	ldw	r2,-16(fp)
 80150f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80150fc:	008200b4 	movhi	r2,2050
 8015100:	10840604 	addi	r2,r2,4120
 8015104:	e0fffb17 	ldw	r3,-20(fp)
 8015108:	18c00324 	muli	r3,r3,12
 801510c:	10c5883a 	add	r2,r2,r3
 8015110:	10800204 	addi	r2,r2,8
 8015114:	10c00017 	ldw	r3,0(r2)
 8015118:	e0bffc17 	ldw	r2,-16(fp)
 801511c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8015120:	e13ffb17 	ldw	r4,-20(fp)
 8015124:	80134600 	call	8013460 <alt_release_fd>
  }
} 
 8015128:	e037883a 	mov	sp,fp
 801512c:	dfc00117 	ldw	ra,4(sp)
 8015130:	df000017 	ldw	fp,0(sp)
 8015134:	dec00204 	addi	sp,sp,8
 8015138:	f800283a 	ret

0801513c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801513c:	defffb04 	addi	sp,sp,-20
 8015140:	dfc00415 	stw	ra,16(sp)
 8015144:	df000315 	stw	fp,12(sp)
 8015148:	df000304 	addi	fp,sp,12
 801514c:	e13ffd15 	stw	r4,-12(fp)
 8015150:	e17ffe15 	stw	r5,-8(fp)
 8015154:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8015158:	010200b4 	movhi	r4,2050
 801515c:	21040904 	addi	r4,r4,4132
 8015160:	e17ffd17 	ldw	r5,-12(fp)
 8015164:	01800044 	movi	r6,1
 8015168:	01c07fc4 	movi	r7,511
 801516c:	801507c0 	call	801507c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8015170:	010200b4 	movhi	r4,2050
 8015174:	21040604 	addi	r4,r4,4120
 8015178:	e17ffe17 	ldw	r5,-8(fp)
 801517c:	000d883a 	mov	r6,zero
 8015180:	01c07fc4 	movi	r7,511
 8015184:	801507c0 	call	801507c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8015188:	010200b4 	movhi	r4,2050
 801518c:	21040c04 	addi	r4,r4,4144
 8015190:	e17fff17 	ldw	r5,-4(fp)
 8015194:	01800044 	movi	r6,1
 8015198:	01c07fc4 	movi	r7,511
 801519c:	801507c0 	call	801507c <alt_open_fd>
}  
 80151a0:	e037883a 	mov	sp,fp
 80151a4:	dfc00117 	ldw	ra,4(sp)
 80151a8:	df000017 	ldw	fp,0(sp)
 80151ac:	dec00204 	addi	sp,sp,8
 80151b0:	f800283a 	ret

080151b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80151b4:	defffe04 	addi	sp,sp,-8
 80151b8:	dfc00115 	stw	ra,4(sp)
 80151bc:	df000015 	stw	fp,0(sp)
 80151c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80151c4:	008200b4 	movhi	r2,2050
 80151c8:	10889404 	addi	r2,r2,8784
 80151cc:	10800017 	ldw	r2,0(r2)
 80151d0:	10000526 	beq	r2,zero,80151e8 <alt_get_errno+0x34>
 80151d4:	008200b4 	movhi	r2,2050
 80151d8:	10889404 	addi	r2,r2,8784
 80151dc:	10800017 	ldw	r2,0(r2)
 80151e0:	103ee83a 	callr	r2
 80151e4:	00000206 	br	80151f0 <alt_get_errno+0x3c>
 80151e8:	008200b4 	movhi	r2,2050
 80151ec:	108f6d04 	addi	r2,r2,15796
}
 80151f0:	e037883a 	mov	sp,fp
 80151f4:	dfc00117 	ldw	ra,4(sp)
 80151f8:	df000017 	ldw	fp,0(sp)
 80151fc:	dec00204 	addi	sp,sp,8
 8015200:	f800283a 	ret

08015204 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8015204:	defffd04 	addi	sp,sp,-12
 8015208:	df000215 	stw	fp,8(sp)
 801520c:	df000204 	addi	fp,sp,8
 8015210:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8015214:	e0bfff17 	ldw	r2,-4(fp)
 8015218:	10800217 	ldw	r2,8(r2)
 801521c:	10d00034 	orhi	r3,r2,16384
 8015220:	e0bfff17 	ldw	r2,-4(fp)
 8015224:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8015228:	e03ffe15 	stw	zero,-8(fp)
 801522c:	00001d06 	br	80152a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8015230:	008200b4 	movhi	r2,2050
 8015234:	10840604 	addi	r2,r2,4120
 8015238:	e0fffe17 	ldw	r3,-8(fp)
 801523c:	18c00324 	muli	r3,r3,12
 8015240:	10c5883a 	add	r2,r2,r3
 8015244:	10c00017 	ldw	r3,0(r2)
 8015248:	e0bfff17 	ldw	r2,-4(fp)
 801524c:	10800017 	ldw	r2,0(r2)
 8015250:	1880111e 	bne	r3,r2,8015298 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015254:	008200b4 	movhi	r2,2050
 8015258:	10840604 	addi	r2,r2,4120
 801525c:	e0fffe17 	ldw	r3,-8(fp)
 8015260:	18c00324 	muli	r3,r3,12
 8015264:	10c5883a 	add	r2,r2,r3
 8015268:	10800204 	addi	r2,r2,8
 801526c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8015270:	1000090e 	bge	r2,zero,8015298 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8015274:	e0bffe17 	ldw	r2,-8(fp)
 8015278:	10c00324 	muli	r3,r2,12
 801527c:	008200b4 	movhi	r2,2050
 8015280:	10840604 	addi	r2,r2,4120
 8015284:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8015288:	e0bfff17 	ldw	r2,-4(fp)
 801528c:	18800226 	beq	r3,r2,8015298 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8015290:	00bffcc4 	movi	r2,-13
 8015294:	00000a06 	br	80152c0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8015298:	e0bffe17 	ldw	r2,-8(fp)
 801529c:	10800044 	addi	r2,r2,1
 80152a0:	e0bffe15 	stw	r2,-8(fp)
 80152a4:	008200b4 	movhi	r2,2050
 80152a8:	10889304 	addi	r2,r2,8780
 80152ac:	10800017 	ldw	r2,0(r2)
 80152b0:	1007883a 	mov	r3,r2
 80152b4:	e0bffe17 	ldw	r2,-8(fp)
 80152b8:	18bfdd2e 	bgeu	r3,r2,8015230 <__alt_data_end+0xfc015230>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80152bc:	0005883a 	mov	r2,zero
}
 80152c0:	e037883a 	mov	sp,fp
 80152c4:	df000017 	ldw	fp,0(sp)
 80152c8:	dec00104 	addi	sp,sp,4
 80152cc:	f800283a 	ret

080152d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80152d0:	defff604 	addi	sp,sp,-40
 80152d4:	dfc00915 	stw	ra,36(sp)
 80152d8:	df000815 	stw	fp,32(sp)
 80152dc:	df000804 	addi	fp,sp,32
 80152e0:	e13ffd15 	stw	r4,-12(fp)
 80152e4:	e17ffe15 	stw	r5,-8(fp)
 80152e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80152ec:	00bfffc4 	movi	r2,-1
 80152f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80152f4:	00bffb44 	movi	r2,-19
 80152f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80152fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8015300:	e13ffd17 	ldw	r4,-12(fp)
 8015304:	014200b4 	movhi	r5,2050
 8015308:	29489104 	addi	r5,r5,8772
 801530c:	8014cec0 	call	8014cec <alt_find_dev>
 8015310:	e0bff815 	stw	r2,-32(fp)
 8015314:	e0bff817 	ldw	r2,-32(fp)
 8015318:	1000051e 	bne	r2,zero,8015330 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801531c:	e13ffd17 	ldw	r4,-12(fp)
 8015320:	80155e40 	call	80155e4 <alt_find_file>
 8015324:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8015328:	00800044 	movi	r2,1
 801532c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8015330:	e0bff817 	ldw	r2,-32(fp)
 8015334:	10002926 	beq	r2,zero,80153dc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8015338:	e13ff817 	ldw	r4,-32(fp)
 801533c:	80156f80 	call	80156f8 <alt_get_fd>
 8015340:	e0bff915 	stw	r2,-28(fp)
 8015344:	e0bff917 	ldw	r2,-28(fp)
 8015348:	1000030e 	bge	r2,zero,8015358 <open+0x88>
    {
      status = index;
 801534c:	e0bff917 	ldw	r2,-28(fp)
 8015350:	e0bffa15 	stw	r2,-24(fp)
 8015354:	00002306 	br	80153e4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 8015358:	e0bff917 	ldw	r2,-28(fp)
 801535c:	10c00324 	muli	r3,r2,12
 8015360:	008200b4 	movhi	r2,2050
 8015364:	10840604 	addi	r2,r2,4120
 8015368:	1885883a 	add	r2,r3,r2
 801536c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8015370:	e0fffe17 	ldw	r3,-8(fp)
 8015374:	00900034 	movhi	r2,16384
 8015378:	10bfffc4 	addi	r2,r2,-1
 801537c:	1886703a 	and	r3,r3,r2
 8015380:	e0bffc17 	ldw	r2,-16(fp)
 8015384:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8015388:	e0bffb17 	ldw	r2,-20(fp)
 801538c:	1000051e 	bne	r2,zero,80153a4 <open+0xd4>
 8015390:	e13ffc17 	ldw	r4,-16(fp)
 8015394:	80152040 	call	8015204 <alt_file_locked>
 8015398:	e0bffa15 	stw	r2,-24(fp)
 801539c:	e0bffa17 	ldw	r2,-24(fp)
 80153a0:	10001016 	blt	r2,zero,80153e4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80153a4:	e0bff817 	ldw	r2,-32(fp)
 80153a8:	10800317 	ldw	r2,12(r2)
 80153ac:	10000826 	beq	r2,zero,80153d0 <open+0x100>
 80153b0:	e0bff817 	ldw	r2,-32(fp)
 80153b4:	10800317 	ldw	r2,12(r2)
 80153b8:	e13ffc17 	ldw	r4,-16(fp)
 80153bc:	e17ffd17 	ldw	r5,-12(fp)
 80153c0:	e1bffe17 	ldw	r6,-8(fp)
 80153c4:	e1ffff17 	ldw	r7,-4(fp)
 80153c8:	103ee83a 	callr	r2
 80153cc:	00000106 	br	80153d4 <open+0x104>
 80153d0:	0005883a 	mov	r2,zero
 80153d4:	e0bffa15 	stw	r2,-24(fp)
 80153d8:	00000206 	br	80153e4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80153dc:	00bffb44 	movi	r2,-19
 80153e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80153e4:	e0bffa17 	ldw	r2,-24(fp)
 80153e8:	1000090e 	bge	r2,zero,8015410 <open+0x140>
  {
    alt_release_fd (index);  
 80153ec:	e13ff917 	ldw	r4,-28(fp)
 80153f0:	80134600 	call	8013460 <alt_release_fd>
    ALT_ERRNO = -status;
 80153f4:	80151b40 	call	80151b4 <alt_get_errno>
 80153f8:	1007883a 	mov	r3,r2
 80153fc:	e0bffa17 	ldw	r2,-24(fp)
 8015400:	0085c83a 	sub	r2,zero,r2
 8015404:	18800015 	stw	r2,0(r3)
    return -1;
 8015408:	00bfffc4 	movi	r2,-1
 801540c:	00000106 	br	8015414 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8015410:	e0bff917 	ldw	r2,-28(fp)
}
 8015414:	e037883a 	mov	sp,fp
 8015418:	dfc00117 	ldw	ra,4(sp)
 801541c:	df000017 	ldw	fp,0(sp)
 8015420:	dec00204 	addi	sp,sp,8
 8015424:	f800283a 	ret

08015428 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8015428:	defffa04 	addi	sp,sp,-24
 801542c:	df000515 	stw	fp,20(sp)
 8015430:	df000504 	addi	fp,sp,20
 8015434:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015438:	0005303a 	rdctl	r2,status
 801543c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015440:	e0fffc17 	ldw	r3,-16(fp)
 8015444:	00bfff84 	movi	r2,-2
 8015448:	1884703a 	and	r2,r3,r2
 801544c:	1001703a 	wrctl	status,r2
  
  return context;
 8015450:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015454:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015458:	e0bfff17 	ldw	r2,-4(fp)
 801545c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8015460:	e0bffd17 	ldw	r2,-12(fp)
 8015464:	10800017 	ldw	r2,0(r2)
 8015468:	e0fffd17 	ldw	r3,-12(fp)
 801546c:	18c00117 	ldw	r3,4(r3)
 8015470:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015474:	e0bffd17 	ldw	r2,-12(fp)
 8015478:	10800117 	ldw	r2,4(r2)
 801547c:	e0fffd17 	ldw	r3,-12(fp)
 8015480:	18c00017 	ldw	r3,0(r3)
 8015484:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015488:	e0bffd17 	ldw	r2,-12(fp)
 801548c:	e0fffd17 	ldw	r3,-12(fp)
 8015490:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015494:	e0bffd17 	ldw	r2,-12(fp)
 8015498:	e0fffd17 	ldw	r3,-12(fp)
 801549c:	10c00015 	stw	r3,0(r2)
 80154a0:	e0bffb17 	ldw	r2,-20(fp)
 80154a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80154a8:	e0bffe17 	ldw	r2,-8(fp)
 80154ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80154b0:	e037883a 	mov	sp,fp
 80154b4:	df000017 	ldw	fp,0(sp)
 80154b8:	dec00104 	addi	sp,sp,4
 80154bc:	f800283a 	ret

080154c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80154c0:	defffb04 	addi	sp,sp,-20
 80154c4:	dfc00415 	stw	ra,16(sp)
 80154c8:	df000315 	stw	fp,12(sp)
 80154cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80154d0:	d0a00e17 	ldw	r2,-32712(gp)
 80154d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80154d8:	d0a6ed17 	ldw	r2,-25676(gp)
 80154dc:	10800044 	addi	r2,r2,1
 80154e0:	d0a6ed15 	stw	r2,-25676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80154e4:	00002e06 	br	80155a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80154e8:	e0bffd17 	ldw	r2,-12(fp)
 80154ec:	10800017 	ldw	r2,0(r2)
 80154f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80154f4:	e0bffd17 	ldw	r2,-12(fp)
 80154f8:	10800403 	ldbu	r2,16(r2)
 80154fc:	10803fcc 	andi	r2,r2,255
 8015500:	10000426 	beq	r2,zero,8015514 <alt_tick+0x54>
 8015504:	d0a6ed17 	ldw	r2,-25676(gp)
 8015508:	1000021e 	bne	r2,zero,8015514 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801550c:	e0bffd17 	ldw	r2,-12(fp)
 8015510:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015514:	e0bffd17 	ldw	r2,-12(fp)
 8015518:	10800217 	ldw	r2,8(r2)
 801551c:	d0e6ed17 	ldw	r3,-25676(gp)
 8015520:	18801d36 	bltu	r3,r2,8015598 <alt_tick+0xd8>
 8015524:	e0bffd17 	ldw	r2,-12(fp)
 8015528:	10800403 	ldbu	r2,16(r2)
 801552c:	10803fcc 	andi	r2,r2,255
 8015530:	1000191e 	bne	r2,zero,8015598 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015534:	e0bffd17 	ldw	r2,-12(fp)
 8015538:	10800317 	ldw	r2,12(r2)
 801553c:	e0fffd17 	ldw	r3,-12(fp)
 8015540:	18c00517 	ldw	r3,20(r3)
 8015544:	1809883a 	mov	r4,r3
 8015548:	103ee83a 	callr	r2
 801554c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015550:	e0bfff17 	ldw	r2,-4(fp)
 8015554:	1000031e 	bne	r2,zero,8015564 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015558:	e13ffd17 	ldw	r4,-12(fp)
 801555c:	80154280 	call	8015428 <alt_alarm_stop>
 8015560:	00000d06 	br	8015598 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015564:	e0bffd17 	ldw	r2,-12(fp)
 8015568:	10c00217 	ldw	r3,8(r2)
 801556c:	e0bfff17 	ldw	r2,-4(fp)
 8015570:	1887883a 	add	r3,r3,r2
 8015574:	e0bffd17 	ldw	r2,-12(fp)
 8015578:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801557c:	e0bffd17 	ldw	r2,-12(fp)
 8015580:	10c00217 	ldw	r3,8(r2)
 8015584:	d0a6ed17 	ldw	r2,-25676(gp)
 8015588:	1880032e 	bgeu	r3,r2,8015598 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801558c:	e0bffd17 	ldw	r2,-12(fp)
 8015590:	00c00044 	movi	r3,1
 8015594:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015598:	e0bffe17 	ldw	r2,-8(fp)
 801559c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80155a0:	e0fffd17 	ldw	r3,-12(fp)
 80155a4:	d0a00e04 	addi	r2,gp,-32712
 80155a8:	18bfcf1e 	bne	r3,r2,80154e8 <__alt_data_end+0xfc0154e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80155ac:	0001883a 	nop
}
 80155b0:	e037883a 	mov	sp,fp
 80155b4:	dfc00117 	ldw	ra,4(sp)
 80155b8:	df000017 	ldw	fp,0(sp)
 80155bc:	dec00204 	addi	sp,sp,8
 80155c0:	f800283a 	ret

080155c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80155c4:	deffff04 	addi	sp,sp,-4
 80155c8:	df000015 	stw	fp,0(sp)
 80155cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80155d0:	000170fa 	wrctl	ienable,zero
}
 80155d4:	e037883a 	mov	sp,fp
 80155d8:	df000017 	ldw	fp,0(sp)
 80155dc:	dec00104 	addi	sp,sp,4
 80155e0:	f800283a 	ret

080155e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80155e4:	defffb04 	addi	sp,sp,-20
 80155e8:	dfc00415 	stw	ra,16(sp)
 80155ec:	df000315 	stw	fp,12(sp)
 80155f0:	df000304 	addi	fp,sp,12
 80155f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80155f8:	008200b4 	movhi	r2,2050
 80155fc:	10888f04 	addi	r2,r2,8764
 8015600:	10800017 	ldw	r2,0(r2)
 8015604:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8015608:	00003106 	br	80156d0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 801560c:	e0bffd17 	ldw	r2,-12(fp)
 8015610:	10800217 	ldw	r2,8(r2)
 8015614:	1009883a 	mov	r4,r2
 8015618:	80052f00 	call	80052f0 <strlen>
 801561c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8015620:	e0bffd17 	ldw	r2,-12(fp)
 8015624:	10c00217 	ldw	r3,8(r2)
 8015628:	e0bffe17 	ldw	r2,-8(fp)
 801562c:	10bfffc4 	addi	r2,r2,-1
 8015630:	1885883a 	add	r2,r3,r2
 8015634:	10800003 	ldbu	r2,0(r2)
 8015638:	10803fcc 	andi	r2,r2,255
 801563c:	1080201c 	xori	r2,r2,128
 8015640:	10bfe004 	addi	r2,r2,-128
 8015644:	10800bd8 	cmpnei	r2,r2,47
 8015648:	1000031e 	bne	r2,zero,8015658 <alt_find_file+0x74>
    {
      len -= 1;
 801564c:	e0bffe17 	ldw	r2,-8(fp)
 8015650:	10bfffc4 	addi	r2,r2,-1
 8015654:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8015658:	e0bffe17 	ldw	r2,-8(fp)
 801565c:	e0ffff17 	ldw	r3,-4(fp)
 8015660:	1885883a 	add	r2,r3,r2
 8015664:	10800003 	ldbu	r2,0(r2)
 8015668:	10803fcc 	andi	r2,r2,255
 801566c:	1080201c 	xori	r2,r2,128
 8015670:	10bfe004 	addi	r2,r2,-128
 8015674:	10800be0 	cmpeqi	r2,r2,47
 8015678:	1000081e 	bne	r2,zero,801569c <alt_find_file+0xb8>
 801567c:	e0bffe17 	ldw	r2,-8(fp)
 8015680:	e0ffff17 	ldw	r3,-4(fp)
 8015684:	1885883a 	add	r2,r3,r2
 8015688:	10800003 	ldbu	r2,0(r2)
 801568c:	10803fcc 	andi	r2,r2,255
 8015690:	1080201c 	xori	r2,r2,128
 8015694:	10bfe004 	addi	r2,r2,-128
 8015698:	10000a1e 	bne	r2,zero,80156c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 801569c:	e0bffd17 	ldw	r2,-12(fp)
 80156a0:	10c00217 	ldw	r3,8(r2)
 80156a4:	e0bffe17 	ldw	r2,-8(fp)
 80156a8:	1809883a 	mov	r4,r3
 80156ac:	e17fff17 	ldw	r5,-4(fp)
 80156b0:	100d883a 	mov	r6,r2
 80156b4:	80158840 	call	8015884 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80156b8:	1000021e 	bne	r2,zero,80156c4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80156bc:	e0bffd17 	ldw	r2,-12(fp)
 80156c0:	00000806 	br	80156e4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80156c4:	e0bffd17 	ldw	r2,-12(fp)
 80156c8:	10800017 	ldw	r2,0(r2)
 80156cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80156d0:	e0fffd17 	ldw	r3,-12(fp)
 80156d4:	008200b4 	movhi	r2,2050
 80156d8:	10888f04 	addi	r2,r2,8764
 80156dc:	18bfcb1e 	bne	r3,r2,801560c <__alt_data_end+0xfc01560c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80156e0:	0005883a 	mov	r2,zero
}
 80156e4:	e037883a 	mov	sp,fp
 80156e8:	dfc00117 	ldw	ra,4(sp)
 80156ec:	df000017 	ldw	fp,0(sp)
 80156f0:	dec00204 	addi	sp,sp,8
 80156f4:	f800283a 	ret

080156f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80156f8:	defffc04 	addi	sp,sp,-16
 80156fc:	df000315 	stw	fp,12(sp)
 8015700:	df000304 	addi	fp,sp,12
 8015704:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8015708:	00bffa04 	movi	r2,-24
 801570c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015710:	e03ffd15 	stw	zero,-12(fp)
 8015714:	00001d06 	br	801578c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8015718:	008200b4 	movhi	r2,2050
 801571c:	10840604 	addi	r2,r2,4120
 8015720:	e0fffd17 	ldw	r3,-12(fp)
 8015724:	18c00324 	muli	r3,r3,12
 8015728:	10c5883a 	add	r2,r2,r3
 801572c:	10800017 	ldw	r2,0(r2)
 8015730:	1000131e 	bne	r2,zero,8015780 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8015734:	008200b4 	movhi	r2,2050
 8015738:	10840604 	addi	r2,r2,4120
 801573c:	e0fffd17 	ldw	r3,-12(fp)
 8015740:	18c00324 	muli	r3,r3,12
 8015744:	10c5883a 	add	r2,r2,r3
 8015748:	e0ffff17 	ldw	r3,-4(fp)
 801574c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8015750:	008200b4 	movhi	r2,2050
 8015754:	10889304 	addi	r2,r2,8780
 8015758:	10c00017 	ldw	r3,0(r2)
 801575c:	e0bffd17 	ldw	r2,-12(fp)
 8015760:	1880040e 	bge	r3,r2,8015774 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8015764:	008200b4 	movhi	r2,2050
 8015768:	10889304 	addi	r2,r2,8780
 801576c:	e0fffd17 	ldw	r3,-12(fp)
 8015770:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8015774:	e0bffd17 	ldw	r2,-12(fp)
 8015778:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 801577c:	00000606 	br	8015798 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8015780:	e0bffd17 	ldw	r2,-12(fp)
 8015784:	10800044 	addi	r2,r2,1
 8015788:	e0bffd15 	stw	r2,-12(fp)
 801578c:	e0bffd17 	ldw	r2,-12(fp)
 8015790:	10800810 	cmplti	r2,r2,32
 8015794:	103fe01e 	bne	r2,zero,8015718 <__alt_data_end+0xfc015718>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8015798:	e0bffe17 	ldw	r2,-8(fp)
}
 801579c:	e037883a 	mov	sp,fp
 80157a0:	df000017 	ldw	fp,0(sp)
 80157a4:	dec00104 	addi	sp,sp,4
 80157a8:	f800283a 	ret

080157ac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80157ac:	defffb04 	addi	sp,sp,-20
 80157b0:	df000415 	stw	fp,16(sp)
 80157b4:	df000404 	addi	fp,sp,16
 80157b8:	e13ffe15 	stw	r4,-8(fp)
 80157bc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80157c0:	e0bfff17 	ldw	r2,-4(fp)
 80157c4:	10840070 	cmpltui	r2,r2,4097
 80157c8:	1000021e 	bne	r2,zero,80157d4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80157cc:	00840004 	movi	r2,4096
 80157d0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80157d4:	e0fffe17 	ldw	r3,-8(fp)
 80157d8:	e0bfff17 	ldw	r2,-4(fp)
 80157dc:	1885883a 	add	r2,r3,r2
 80157e0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80157e4:	e0bffe17 	ldw	r2,-8(fp)
 80157e8:	e0bffc15 	stw	r2,-16(fp)
 80157ec:	00000506 	br	8015804 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80157f0:	e0bffc17 	ldw	r2,-16(fp)
 80157f4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80157f8:	e0bffc17 	ldw	r2,-16(fp)
 80157fc:	10800804 	addi	r2,r2,32
 8015800:	e0bffc15 	stw	r2,-16(fp)
 8015804:	e0fffc17 	ldw	r3,-16(fp)
 8015808:	e0bffd17 	ldw	r2,-12(fp)
 801580c:	18bff836 	bltu	r3,r2,80157f0 <__alt_data_end+0xfc0157f0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8015810:	e0bffe17 	ldw	r2,-8(fp)
 8015814:	108007cc 	andi	r2,r2,31
 8015818:	10000226 	beq	r2,zero,8015824 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801581c:	e0bffc17 	ldw	r2,-16(fp)
 8015820:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8015824:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8015828:	e037883a 	mov	sp,fp
 801582c:	df000017 	ldw	fp,0(sp)
 8015830:	dec00104 	addi	sp,sp,4
 8015834:	f800283a 	ret

08015838 <atexit>:
 8015838:	200b883a 	mov	r5,r4
 801583c:	000d883a 	mov	r6,zero
 8015840:	0009883a 	mov	r4,zero
 8015844:	000f883a 	mov	r7,zero
 8015848:	80159001 	jmpi	8015900 <__register_exitproc>

0801584c <exit>:
 801584c:	defffe04 	addi	sp,sp,-8
 8015850:	000b883a 	mov	r5,zero
 8015854:	dc000015 	stw	r16,0(sp)
 8015858:	dfc00115 	stw	ra,4(sp)
 801585c:	2021883a 	mov	r16,r4
 8015860:	8015a140 	call	8015a14 <__call_exitprocs>
 8015864:	008200b4 	movhi	r2,2050
 8015868:	10888904 	addi	r2,r2,8740
 801586c:	11000017 	ldw	r4,0(r2)
 8015870:	20800f17 	ldw	r2,60(r4)
 8015874:	10000126 	beq	r2,zero,801587c <exit+0x30>
 8015878:	103ee83a 	callr	r2
 801587c:	8009883a 	mov	r4,r16
 8015880:	8015ba80 	call	8015ba8 <_exit>

08015884 <memcmp>:
 8015884:	01c000c4 	movi	r7,3
 8015888:	3980192e 	bgeu	r7,r6,80158f0 <memcmp+0x6c>
 801588c:	2144b03a 	or	r2,r4,r5
 8015890:	11c4703a 	and	r2,r2,r7
 8015894:	10000f26 	beq	r2,zero,80158d4 <memcmp+0x50>
 8015898:	20800003 	ldbu	r2,0(r4)
 801589c:	28c00003 	ldbu	r3,0(r5)
 80158a0:	10c0151e 	bne	r2,r3,80158f8 <memcmp+0x74>
 80158a4:	31bfff84 	addi	r6,r6,-2
 80158a8:	01ffffc4 	movi	r7,-1
 80158ac:	00000406 	br	80158c0 <memcmp+0x3c>
 80158b0:	20800003 	ldbu	r2,0(r4)
 80158b4:	28c00003 	ldbu	r3,0(r5)
 80158b8:	31bfffc4 	addi	r6,r6,-1
 80158bc:	10c00e1e 	bne	r2,r3,80158f8 <memcmp+0x74>
 80158c0:	21000044 	addi	r4,r4,1
 80158c4:	29400044 	addi	r5,r5,1
 80158c8:	31fff91e 	bne	r6,r7,80158b0 <__alt_data_end+0xfc0158b0>
 80158cc:	0005883a 	mov	r2,zero
 80158d0:	f800283a 	ret
 80158d4:	20c00017 	ldw	r3,0(r4)
 80158d8:	28800017 	ldw	r2,0(r5)
 80158dc:	1880041e 	bne	r3,r2,80158f0 <memcmp+0x6c>
 80158e0:	31bfff04 	addi	r6,r6,-4
 80158e4:	21000104 	addi	r4,r4,4
 80158e8:	29400104 	addi	r5,r5,4
 80158ec:	39bff936 	bltu	r7,r6,80158d4 <__alt_data_end+0xfc0158d4>
 80158f0:	303fe91e 	bne	r6,zero,8015898 <__alt_data_end+0xfc015898>
 80158f4:	003ff506 	br	80158cc <__alt_data_end+0xfc0158cc>
 80158f8:	10c5c83a 	sub	r2,r2,r3
 80158fc:	f800283a 	ret

08015900 <__register_exitproc>:
 8015900:	008200b4 	movhi	r2,2050
 8015904:	defffa04 	addi	sp,sp,-24
 8015908:	10888904 	addi	r2,r2,8740
 801590c:	dc000315 	stw	r16,12(sp)
 8015910:	14000017 	ldw	r16,0(r2)
 8015914:	dc400415 	stw	r17,16(sp)
 8015918:	dfc00515 	stw	ra,20(sp)
 801591c:	80805217 	ldw	r2,328(r16)
 8015920:	2023883a 	mov	r17,r4
 8015924:	10003626 	beq	r2,zero,8015a00 <__register_exitproc+0x100>
 8015928:	10c00117 	ldw	r3,4(r2)
 801592c:	010007c4 	movi	r4,31
 8015930:	20c00e16 	blt	r4,r3,801596c <__register_exitproc+0x6c>
 8015934:	1a400044 	addi	r9,r3,1
 8015938:	8800211e 	bne	r17,zero,80159c0 <__register_exitproc+0xc0>
 801593c:	18c00084 	addi	r3,r3,2
 8015940:	18c7883a 	add	r3,r3,r3
 8015944:	18c7883a 	add	r3,r3,r3
 8015948:	12400115 	stw	r9,4(r2)
 801594c:	10c7883a 	add	r3,r2,r3
 8015950:	19400015 	stw	r5,0(r3)
 8015954:	0005883a 	mov	r2,zero
 8015958:	dfc00517 	ldw	ra,20(sp)
 801595c:	dc400417 	ldw	r17,16(sp)
 8015960:	dc000317 	ldw	r16,12(sp)
 8015964:	dec00604 	addi	sp,sp,24
 8015968:	f800283a 	ret
 801596c:	00820034 	movhi	r2,2048
 8015970:	10922d04 	addi	r2,r2,18612
 8015974:	10002526 	beq	r2,zero,8015a0c <__register_exitproc+0x10c>
 8015978:	01006404 	movi	r4,400
 801597c:	d9400015 	stw	r5,0(sp)
 8015980:	d9800115 	stw	r6,4(sp)
 8015984:	d9c00215 	stw	r7,8(sp)
 8015988:	80048b40 	call	80048b4 <malloc>
 801598c:	d9400017 	ldw	r5,0(sp)
 8015990:	d9800117 	ldw	r6,4(sp)
 8015994:	d9c00217 	ldw	r7,8(sp)
 8015998:	10001c26 	beq	r2,zero,8015a0c <__register_exitproc+0x10c>
 801599c:	80c05217 	ldw	r3,328(r16)
 80159a0:	10000115 	stw	zero,4(r2)
 80159a4:	02400044 	movi	r9,1
 80159a8:	10c00015 	stw	r3,0(r2)
 80159ac:	80805215 	stw	r2,328(r16)
 80159b0:	10006215 	stw	zero,392(r2)
 80159b4:	10006315 	stw	zero,396(r2)
 80159b8:	0007883a 	mov	r3,zero
 80159bc:	883fdf26 	beq	r17,zero,801593c <__alt_data_end+0xfc01593c>
 80159c0:	18d1883a 	add	r8,r3,r3
 80159c4:	4211883a 	add	r8,r8,r8
 80159c8:	1211883a 	add	r8,r2,r8
 80159cc:	41802215 	stw	r6,136(r8)
 80159d0:	01000044 	movi	r4,1
 80159d4:	11806217 	ldw	r6,392(r2)
 80159d8:	20c8983a 	sll	r4,r4,r3
 80159dc:	310cb03a 	or	r6,r6,r4
 80159e0:	11806215 	stw	r6,392(r2)
 80159e4:	41c04215 	stw	r7,264(r8)
 80159e8:	01800084 	movi	r6,2
 80159ec:	89bfd31e 	bne	r17,r6,801593c <__alt_data_end+0xfc01593c>
 80159f0:	11806317 	ldw	r6,396(r2)
 80159f4:	3108b03a 	or	r4,r6,r4
 80159f8:	11006315 	stw	r4,396(r2)
 80159fc:	003fcf06 	br	801593c <__alt_data_end+0xfc01593c>
 8015a00:	80805304 	addi	r2,r16,332
 8015a04:	80805215 	stw	r2,328(r16)
 8015a08:	003fc706 	br	8015928 <__alt_data_end+0xfc015928>
 8015a0c:	00bfffc4 	movi	r2,-1
 8015a10:	003fd106 	br	8015958 <__alt_data_end+0xfc015958>

08015a14 <__call_exitprocs>:
 8015a14:	008200b4 	movhi	r2,2050
 8015a18:	10888904 	addi	r2,r2,8740
 8015a1c:	10800017 	ldw	r2,0(r2)
 8015a20:	defff404 	addi	sp,sp,-48
 8015a24:	dd800815 	stw	r22,32(sp)
 8015a28:	d8800015 	stw	r2,0(sp)
 8015a2c:	10805204 	addi	r2,r2,328
 8015a30:	dd000615 	stw	r20,24(sp)
 8015a34:	dc800415 	stw	r18,16(sp)
 8015a38:	dfc00b15 	stw	ra,44(sp)
 8015a3c:	df000a15 	stw	fp,40(sp)
 8015a40:	ddc00915 	stw	r23,36(sp)
 8015a44:	dd400715 	stw	r21,28(sp)
 8015a48:	dcc00515 	stw	r19,20(sp)
 8015a4c:	dc400315 	stw	r17,12(sp)
 8015a50:	dc000215 	stw	r16,8(sp)
 8015a54:	2025883a 	mov	r18,r4
 8015a58:	2829883a 	mov	r20,r5
 8015a5c:	d8800115 	stw	r2,4(sp)
 8015a60:	05bfffc4 	movi	r22,-1
 8015a64:	d8800017 	ldw	r2,0(sp)
 8015a68:	14c05217 	ldw	r19,328(r2)
 8015a6c:	98001d26 	beq	r19,zero,8015ae4 <__call_exitprocs+0xd0>
 8015a70:	dd400117 	ldw	r21,4(sp)
 8015a74:	98800117 	ldw	r2,4(r19)
 8015a78:	173fffc4 	addi	fp,r2,-1
 8015a7c:	e0000d16 	blt	fp,zero,8015ab4 <__call_exitprocs+0xa0>
 8015a80:	14000044 	addi	r16,r2,1
 8015a84:	8421883a 	add	r16,r16,r16
 8015a88:	8421883a 	add	r16,r16,r16
 8015a8c:	84402004 	addi	r17,r16,128
 8015a90:	9c63883a 	add	r17,r19,r17
 8015a94:	9c21883a 	add	r16,r19,r16
 8015a98:	a0001e26 	beq	r20,zero,8015b14 <__call_exitprocs+0x100>
 8015a9c:	80804017 	ldw	r2,256(r16)
 8015aa0:	15001c26 	beq	r2,r20,8015b14 <__call_exitprocs+0x100>
 8015aa4:	e73fffc4 	addi	fp,fp,-1
 8015aa8:	843fff04 	addi	r16,r16,-4
 8015aac:	8c7fff04 	addi	r17,r17,-4
 8015ab0:	e5bff91e 	bne	fp,r22,8015a98 <__alt_data_end+0xfc015a98>
 8015ab4:	00820034 	movhi	r2,2048
 8015ab8:	10923204 	addi	r2,r2,18632
 8015abc:	10000926 	beq	r2,zero,8015ae4 <__call_exitprocs+0xd0>
 8015ac0:	98800117 	ldw	r2,4(r19)
 8015ac4:	1000311e 	bne	r2,zero,8015b8c <__call_exitprocs+0x178>
 8015ac8:	98800017 	ldw	r2,0(r19)
 8015acc:	10003426 	beq	r2,zero,8015ba0 <__call_exitprocs+0x18c>
 8015ad0:	9809883a 	mov	r4,r19
 8015ad4:	a8800015 	stw	r2,0(r21)
 8015ad8:	80048c80 	call	80048c8 <free>
 8015adc:	acc00017 	ldw	r19,0(r21)
 8015ae0:	983fe41e 	bne	r19,zero,8015a74 <__alt_data_end+0xfc015a74>
 8015ae4:	dfc00b17 	ldw	ra,44(sp)
 8015ae8:	df000a17 	ldw	fp,40(sp)
 8015aec:	ddc00917 	ldw	r23,36(sp)
 8015af0:	dd800817 	ldw	r22,32(sp)
 8015af4:	dd400717 	ldw	r21,28(sp)
 8015af8:	dd000617 	ldw	r20,24(sp)
 8015afc:	dcc00517 	ldw	r19,20(sp)
 8015b00:	dc800417 	ldw	r18,16(sp)
 8015b04:	dc400317 	ldw	r17,12(sp)
 8015b08:	dc000217 	ldw	r16,8(sp)
 8015b0c:	dec00c04 	addi	sp,sp,48
 8015b10:	f800283a 	ret
 8015b14:	98800117 	ldw	r2,4(r19)
 8015b18:	80c00017 	ldw	r3,0(r16)
 8015b1c:	10bfffc4 	addi	r2,r2,-1
 8015b20:	17001526 	beq	r2,fp,8015b78 <__call_exitprocs+0x164>
 8015b24:	80000015 	stw	zero,0(r16)
 8015b28:	183fde26 	beq	r3,zero,8015aa4 <__alt_data_end+0xfc015aa4>
 8015b2c:	00800044 	movi	r2,1
 8015b30:	1708983a 	sll	r4,r2,fp
 8015b34:	98806217 	ldw	r2,392(r19)
 8015b38:	9dc00117 	ldw	r23,4(r19)
 8015b3c:	2084703a 	and	r2,r4,r2
 8015b40:	1000061e 	bne	r2,zero,8015b5c <__call_exitprocs+0x148>
 8015b44:	183ee83a 	callr	r3
 8015b48:	98800117 	ldw	r2,4(r19)
 8015b4c:	15ffc51e 	bne	r2,r23,8015a64 <__alt_data_end+0xfc015a64>
 8015b50:	a8800017 	ldw	r2,0(r21)
 8015b54:	14ffd326 	beq	r2,r19,8015aa4 <__alt_data_end+0xfc015aa4>
 8015b58:	003fc206 	br	8015a64 <__alt_data_end+0xfc015a64>
 8015b5c:	98806317 	ldw	r2,396(r19)
 8015b60:	2084703a 	and	r2,r4,r2
 8015b64:	1000061e 	bne	r2,zero,8015b80 <__call_exitprocs+0x16c>
 8015b68:	89400017 	ldw	r5,0(r17)
 8015b6c:	9009883a 	mov	r4,r18
 8015b70:	183ee83a 	callr	r3
 8015b74:	003ff406 	br	8015b48 <__alt_data_end+0xfc015b48>
 8015b78:	9f000115 	stw	fp,4(r19)
 8015b7c:	003fea06 	br	8015b28 <__alt_data_end+0xfc015b28>
 8015b80:	89000017 	ldw	r4,0(r17)
 8015b84:	183ee83a 	callr	r3
 8015b88:	003fef06 	br	8015b48 <__alt_data_end+0xfc015b48>
 8015b8c:	98800017 	ldw	r2,0(r19)
 8015b90:	982b883a 	mov	r21,r19
 8015b94:	1027883a 	mov	r19,r2
 8015b98:	983fb61e 	bne	r19,zero,8015a74 <__alt_data_end+0xfc015a74>
 8015b9c:	003fd106 	br	8015ae4 <__alt_data_end+0xfc015ae4>
 8015ba0:	0005883a 	mov	r2,zero
 8015ba4:	003ffa06 	br	8015b90 <__alt_data_end+0xfc015b90>

08015ba8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8015ba8:	defffd04 	addi	sp,sp,-12
 8015bac:	df000215 	stw	fp,8(sp)
 8015bb0:	df000204 	addi	fp,sp,8
 8015bb4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8015bb8:	0001883a 	nop
 8015bbc:	e0bfff17 	ldw	r2,-4(fp)
 8015bc0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8015bc4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8015bc8:	10000226 	beq	r2,zero,8015bd4 <_exit+0x2c>
    ALT_SIM_FAIL();
 8015bcc:	002af070 	cmpltui	zero,zero,43969
 8015bd0:	00000106 	br	8015bd8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8015bd4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8015bd8:	003fff06 	br	8015bd8 <__alt_data_end+0xfc015bd8>
