
CPEN391project.elf:     file format elf32-littlenios2
CPEN391project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000f890 memsz 0x0000f890 flags r-x
    LOAD off    0x000108b0 vaddr 0x0800f8b0 paddr 0x080113c8 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00012ee0 vaddr 0x08012ee0 paddr 0x08012ee0 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f3a8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  0800f564  0800f564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0800f8b0  080113c8  000108b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  08012ee0  08012ee0  00012ee0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0801303c  0801303c  000123c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000123c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000cc8  00000000  00000000  000123f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023539  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008d7c  00000000  00000000  000365f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ac55  00000000  00000000  0003f36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002250  00000000  00000000  00049fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003897  00000000  00000000  0004c214  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016c85  00000000  00000000  0004faab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00066730  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  00066750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ade2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ade5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006adf1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006adf2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006adf3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006adfe  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ae09  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006ae14  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000033  00000000  00000000  0006ae1f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0006ae52  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ba24  00000000  00000000  0006f99e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0800f564 l    d  .rodata	00000000 .rodata
0800f8b0 l    d  .rwdata	00000000 .rwdata
08012ee0 l    d  .bss	00000000 .bss
0801303c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPEN391project_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800f5de l     O .rodata	00000010 zeroes.4181
0800f5ee l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080027f0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004370 l     F .text	00000008 __fp_lock
08004378 l     F .text	00000008 __fp_unlock
0800438c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800f8b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800fcf4 l     O .rwdata	00000020 lc_ctype_charset
0800fcd4 l     O .rwdata	00000020 lc_message_charset
0800fd14 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800f620 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08006ce4 l     F .text	000000fc __sprint_r.part.0
0800f754 l     O .rodata	00000010 blanks.4125
0800f744 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a1a0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800c8cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800c9ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ca18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800cb18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800cc0c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ccf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800cecc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080113b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800d128 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d270 l     F .text	00000038 alt_dev_reg
080102fc l     O .rwdata	00001060 jtag_uart_0
0801135c l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800d574 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800d778 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800dd98 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800e4c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800ea04 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800eb3c l     F .text	00000050 alt_get_errno
0800eb8c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800682c g     F .text	00000074 _mprec_log10
08006918 g     F .text	0000008c __any_on
08008ad8 g     F .text	00000054 _isatty_r
0800f62c g     O .rodata	00000028 __mprec_tinytens
0800ce14 g     F .text	00000078 alt_main
08012f3c g     O .bss	00000100 alt_irq
08008b2c g     F .text	0000005c _lseek_r
080113c8 g       *ABS*	00000000 __flash_rwdata_start
0800df08 g     F .text	0000003c alt_up_character_lcd_send_cmd
0800b434 g     F .text	00000084 .hidden __eqdf2
08000304 g     F .text	0000007c ProgramPalette
0801303c g       *ABS*	00000000 __alt_heap_start
08000664 g     F .text	0000003c printf
08009450 g     F .text	0000009c _wcrtomb_r
08006b44 g     F .text	0000005c __sseek
080046c0 g     F .text	00000010 __sinit
080092e0 g     F .text	00000154 __swbuf_r
08004c94 g     F .text	0000007c _setlocale_r
0800452c g     F .text	00000064 __sfmoreglue
0800ceac g     F .text	00000020 __malloc_unlock
08008b88 g     F .text	0000015c memmove
080046a8 g     F .text	00000018 _cleanup
08005a18 g     F .text	000000a8 _Balloc
0800b4b8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800de94 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080085dc g     F .text	00000058 _fstat_r
08012ef8 g     O .bss	00000004 errno
08006ac0 g     F .text	00000008 __seofread
08012f00 g     O .bss	00000004 alt_argv
08019388 g       *ABS*	00000000 _gp
0801017c g     O .rwdata	00000180 alt_fd_list
0800e674 g     F .text	00000090 alt_find_dev
080057bc g     F .text	00000138 memcpy
0800e0a4 g     F .text	00000050 alt_up_character_lcd_write_fd
08004380 g     F .text	0000000c _cleanup_r
0800c6f4 g     F .text	000000d0 .hidden __floatsidf
0800eac4 g     F .text	00000078 alt_io_redirect
0800b598 g     F .text	000000e0 .hidden __ltdf2
0800f564 g       *ABS*	00000000 __DTOR_END__
080069a4 g     F .text	00000074 __fpclassifyd
08006788 g     F .text	000000a4 __ratio
08008154 g     F .text	00000024 __vfiprintf_internal
0800d974 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000638 g     F .text	0000002c _printf_r
0800a2bc g     F .text	00000008 .hidden __udivsi3
0800cb68 g     F .text	000000a4 isatty
0800f67c g     O .rodata	000000c8 __mprec_tens
08004d10 g     F .text	0000000c __locale_charset
0800f134 g     F .text	0000008c alt_icache_flush
08012ef4 g     O .bss	00000004 __malloc_top_pad
08011390 g     O .rwdata	00000004 __mb_cur_max
08004d40 g     F .text	0000000c _localeconv_r
08008634 g     F .text	000004a4 __sfvwrite_r
08005e18 g     F .text	0000003c __i2b
08006a18 g     F .text	00000054 _sbrk_r
08008ce4 g     F .text	0000005c _read_r
080113b0 g     O .rwdata	00000004 alt_max_fd
080082ec g     F .text	00000100 _fclose_r
08004340 g     F .text	00000030 fflush
08012ef0 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a2cc g     F .text	0000089c .hidden __adddf3
08006530 g     F .text	0000011c __b2d
08009c10 g     F .text	00000590 .hidden __umoddi3
0800cd40 g     F .text	000000d4 lseek
08011388 g     O .rwdata	00000004 _global_impure_ptr
08008d40 g     F .text	000005a0 _realloc_r
0801303c g       *ABS*	00000000 __bss_end
0800e914 g     F .text	000000f0 alt_iic_isr_register
0800ee48 g     F .text	00000104 alt_tick
08009650 g     F .text	000005c0 .hidden __udivdi3
08008400 g     F .text	00000184 _fputwc_r
0800f654 g     O .rodata	00000028 __mprec_bigtens
08005bfc g     F .text	00000104 __s2b
0800c7c4 g     F .text	000000a4 .hidden __floatunsidf
080062d8 g     F .text	00000060 __mcmp
080046e0 g     F .text	00000018 __fp_lock_all
0800e8c8 g     F .text	0000004c alt_ic_irq_enabled
0800edb0 g     F .text	00000098 alt_alarm_stop
08012f08 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08010154 g     O .rwdata	00000028 alt_dev_null
080004c0 g     F .text	000000a0 Drawline
0800e338 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800e4ac g     F .text	0000001c alt_dcache_flush_all
08005d00 g     F .text	00000068 __hi0bits
0800c66c g     F .text	00000088 .hidden __fixdfsi
080113c8 g       *ABS*	00000000 __ram_rwdata_end
080113a8 g     O .rwdata	00000008 alt_dev_list
0800d178 g     F .text	000000f8 write
0800f8b0 g       *ABS*	00000000 __ram_rodata_end
0800ca68 g     F .text	000000b0 fstat
0800b598 g     F .text	000000e0 .hidden __ledf2
08006050 g     F .text	00000140 __pow5mult
08006df8 g     F .text	0000135c ___vfiprintf_internal_r
08012ee8 g     O .bss	00000004 __nlocale_changed
0800a2c4 g     F .text	00000008 .hidden __umodsi3
0801303c g       *ABS*	00000000 end
0800d4b0 g     F .text	000000c4 altera_avalon_jtag_uart_init
0800f564 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800de0c g     F .text	00000088 alt_avalon_timer_sc_init
0800c868 g     F .text	00000064 .hidden __clzsi2
0800db80 g     F .text	00000218 altera_avalon_jtag_uart_write
08000420 g     F .text	000000a0 DrawVline
080046d0 g     F .text	00000004 __sfp_lock_acquire
080056d4 g     F .text	000000e8 memchr
0800dfb8 g     F .text	00000078 alt_up_character_lcd_write
080006a0 g     F .text	00001ffc ___vfprintf_internal_r
08004834 g     F .text	000002f0 _free_r
08004d1c g     F .text	00000010 __locale_mb_cur_max
0800f39c g     F .text	00000194 __call_exitprocs
08012ee4 g     O .bss	00000004 __mlocale_changed
08011394 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08012f0c g     O .bss	00000004 _alt_tick_rate
08006190 g     F .text	00000148 __lshift
08012f10 g     O .bss	00000004 _alt_nticks
0800cf1c g     F .text	000000fc read
0800d2dc g     F .text	00000070 alt_sys_init
0800e1f0 g     F .text	00000088 alt_up_character_lcd_shift_display
08000380 g     F .text	000000a0 DrawHline
0800f288 g     F .text	00000114 __register_exitproc
08005e54 g     F .text	000001fc __multiply
0800e278 g     F .text	0000008c alt_up_character_lcd_erase_pos
0800d820 g     F .text	00000068 altera_avalon_jtag_uart_close
0800f8b0 g       *ABS*	00000000 __ram_rwdata_start
0800f564 g       *ABS*	00000000 __ram_rodata_start
08012f14 g     O .bss	00000028 __malloc_current_mallinfo
0800664c g     F .text	0000013c __d2b
0800d34c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800f080 g     F .text	000000b4 alt_get_fd
080081d4 g     F .text	00000054 _close_r
0800f20c g     F .text	0000007c memcmp
0800d40c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801303c g       *ABS*	00000000 __alt_stack_base
0800d45c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080026c0 g     F .text	00000130 __swsetup_r
0800ab68 g     F .text	000008cc .hidden __divdf3
08004590 g     F .text	00000118 __sfp
080068a0 g     F .text	00000078 __copybits
0800fd4c g     O .rwdata	00000408 __malloc_av_
080046dc g     F .text	00000004 __sinit_lock_release
0800b678 g     F .text	00000724 .hidden __muldf3
08006a6c g     F .text	00000054 __sread
0800ef6c g     F .text	00000114 alt_find_file
0800e518 g     F .text	000000a4 alt_dev_llist_insert
0800ce8c g     F .text	00000020 __malloc_lock
0800d078 g     F .text	000000b0 sbrk
08004118 g     F .text	00000228 _fflush_r
08008228 g     F .text	000000c4 _calloc_r
08012ee0 g       *ABS*	00000000 __bss_start
080058f4 g     F .text	00000124 memset
08000560 g     F .text	000000d8 main
08012f04 g     O .bss	00000004 alt_envp
08012eec g     O .bss	00000004 __malloc_max_total_mem
0800d3ac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009434 g     F .text	0000001c __swbuf
08000274 g     F .text	00000090 ReadAPixel
0800e168 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08006ba0 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080083ec g     F .text	00000014 fclose
080029f0 g     F .text	00001728 _dtoa_r
08004f2c g     F .text	000007a8 _malloc_r
080095c4 g     F .text	00000030 __ascii_wctomb
080113b4 g     O .rwdata	00000004 alt_errno
08004b24 g     F .text	000000b8 _fwalk
0800a20c g     F .text	00000054 .hidden __divsi3
0800df78 g     F .text	00000040 alt_up_character_lcd_open_dev
08004710 g     F .text	00000124 _malloc_trim_r
0800f564 g       *ABS*	00000000 __CTOR_END__
0800df44 g     F .text	00000034 alt_up_character_lcd_init
08006ba8 g     F .text	000000a4 strcmp
0800f564 g       *ABS*	00000000 __flash_rodata_start
0800f564 g       *ABS*	00000000 __DTOR_LIST__
0800b434 g     F .text	00000084 .hidden __nedf2
0800d2a8 g     F .text	00000034 alt_irq_init
0800d018 g     F .text	00000060 alt_release_fd
0800e304 g     F .text	00000034 alt_up_character_lcd_cursor_off
0800f764 g     O .rodata	00000100 .hidden __clz_tab
08012ee0 g     O .bss	00000004 _PathLocale
0800f1c0 g     F .text	00000014 atexit
08008178 g     F .text	0000005c _write_r
08004d4c g     F .text	0000001c setlocale
0801138c g     O .rwdata	00000004 _impure_ptr
08012efc g     O .bss	00000004 alt_argc
080001f8 g     F .text	0000007c WriteAPixel
0800e618 g     F .text	0000005c _do_dtors
08004d38 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080064d0 g     F .text	00000060 __ulp
080046f8 g     F .text	00000018 __fp_unlock_all
080113a0 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004d68 g     F .text	0000000c localeconv
0800e734 g     F .text	00000050 alt_ic_isr_register
080113c8 g       *ABS*	00000000 _edata
0801303c g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800d888 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800e824 g     F .text	000000a4 alt_ic_irq_disable
08006ac8 g     F .text	0000007c __swrite
08011398 g     O .rwdata	00000004 __malloc_trim_threshold
0800ef4c g     F .text	00000020 altera_nios2_qsys_irq_init
08004d2c g     F .text	0000000c __locale_msgcharset
0800f1d4 g     F .text	00000038 exit
08004bdc g     F .text	000000b8 _fwalk_reent
08006338 g     F .text	00000198 __mdiff
0800a260 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080046d4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800e030 g     F .text	00000074 alt_up_character_lcd_string
0800f530 g     F .text	00000034 _exit
0800e36c g     F .text	00000140 alt_alarm_start
08004d74 g     F .text	000001b8 __smakebuf_r
08006c4c g     F .text	00000098 strlen
0800ec58 g     F .text	00000158 open
0800b4b8 g     F .text	000000e0 .hidden __gedf2
0801139c g     O .rwdata	00000004 __wctomb
08006de0 g     F .text	00000018 __sprint_r
0800e704 g     F .text	00000030 alt_icache_flush_all
0800e0f4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080113bc g     O .rwdata	00000004 alt_priority_mask
0800e784 g     F .text	000000a0 alt_ic_irq_enable
0800269c g     F .text	00000024 __vfprintf_internal
080095f4 g     F .text	0000005c _wctomb_r
0800bd9c g     F .text	000008d0 .hidden __subdf3
08005d68 g     F .text	000000b0 __lo0bits
080113c0 g     O .rwdata	00000008 alt_alarm_list
0800e5bc g     F .text	0000005c _do_ctors
080094ec g     F .text	000000d8 wcrtomb
0800c91c g     F .text	000000d0 close
0800cc70 g     F .text	00000080 alt_load
08008584 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080046d8 g     F .text	00000004 __sinit_lock_acquire
08005ae8 g     F .text	00000114 __multadd
08005ac0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	108bcf04 	addi	r2,r2,12092
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	108bcf04 	addi	r2,r2,12092
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6a4e214 	ori	gp,gp,37768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	108bb814 	ori	r2,r2,12000

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cc0f14 	ori	r3,r3,12348

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800cc700 	call	800cc70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800ce140 	call	800ce14 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <WriteAPixel>:
/**********************************************************************
* This function writes a single pixel to the x,y coords specified in the specified colour
* Note colour is a palette number (0-255) not a 24 bit RGB value
**********************************************************************/
void WriteAPixel (int x, int y, int Colour)
{
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 8000210:	0001883a 	nop
 8000214:	00a10034 	movhi	r2,33792
 8000218:	1080000b 	ldhu	r2,0(r2)
 800021c:	10bfffcc 	andi	r2,r2,65535
 8000220:	1080004c 	andi	r2,r2,1
 8000224:	103ffb26 	beq	r2,zero,8000214 <__alt_data_end+0xfc000214>

	GraphicsX1Reg = x;			// write coords to x1, y1
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10800084 	addi	r2,r2,2
 8000230:	e0fffd17 	ldw	r3,-12(fp)
 8000234:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0fffe17 	ldw	r3,-8(fp)
 8000244:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10800384 	addi	r2,r2,14
 8000250:	e0ffff17 	ldw	r3,-4(fp)
 8000254:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 8000258:	00a10034 	movhi	r2,33792
 800025c:	00c00284 	movi	r3,10
 8000260:	10c0000d 	sth	r3,0(r2)
}
 8000264:	e037883a 	mov	sp,fp
 8000268:	df000017 	ldw	fp,0(sp)
 800026c:	dec00104 	addi	sp,sp,4
 8000270:	f800283a 	ret

08000274 <ReadAPixel>:
/*****************************************************************************************
* This function read a single pixel from x,y coords specified and returns its colour
* Note returned colour is a palette number (0-255) not a 24 bit RGB value
******************************************************************************************/
int ReadAPixel (int x, int y)
{
 8000274:	defffd04 	addi	sp,sp,-12
 8000278:	df000215 	stw	fp,8(sp)
 800027c:	df000204 	addi	fp,sp,8
 8000280:	e13ffe15 	stw	r4,-8(fp)
 8000284:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 8000288:	0001883a 	nop
 800028c:	00a10034 	movhi	r2,33792
 8000290:	1080000b 	ldhu	r2,0(r2)
 8000294:	10bfffcc 	andi	r2,r2,65535
 8000298:	1080004c 	andi	r2,r2,1
 800029c:	103ffb26 	beq	r2,zero,800028c <__alt_data_end+0xfc00028c>

	GraphicsX1Reg = x;			// write coords to x1, y1
 80002a0:	00a10034 	movhi	r2,33792
 80002a4:	10800084 	addi	r2,r2,2
 80002a8:	e0fffe17 	ldw	r3,-8(fp)
 80002ac:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10800104 	addi	r2,r2,4
 80002b8:	e0ffff17 	ldw	r3,-4(fp)
 80002bc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	00c002c4 	movi	r3,11
 80002c8:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 80002cc:	0001883a 	nop
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	1080000b 	ldhu	r2,0(r2)
 80002d8:	10bfffcc 	andi	r2,r2,65535
 80002dc:	1080004c 	andi	r2,r2,1
 80002e0:	103ffb26 	beq	r2,zero,80002d0 <__alt_data_end+0xfc0002d0>
	return (int)(GraphicsColourReg) ;		// return the palette number (colour)
 80002e4:	00a10034 	movhi	r2,33792
 80002e8:	10800384 	addi	r2,r2,14
 80002ec:	1080000b 	ldhu	r2,0(r2)
 80002f0:	10bfffcc 	andi	r2,r2,65535
}
 80002f4:	e037883a 	mov	sp,fp
 80002f8:	df000017 	ldw	fp,0(sp)
 80002fc:	dec00104 	addi	sp,sp,4
 8000300:	f800283a 	ret

08000304 <ProgramPalette>:
** subroutine to program a hardware (graphics chip) palette number with an RGB value
** e.g. ProgramPalette(RED, 0x00FF0000) ;
****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 8000304:	defffd04 	addi	sp,sp,-12
 8000308:	df000215 	stw	fp,8(sp)
 800030c:	df000204 	addi	fp,sp,8
 8000310:	e13ffe15 	stw	r4,-8(fp)
 8000314:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 8000318:	0001883a 	nop
 800031c:	00a10034 	movhi	r2,33792
 8000320:	1080000b 	ldhu	r2,0(r2)
 8000324:	10bfffcc 	andi	r2,r2,65535
 8000328:	1080004c 	andi	r2,r2,1
 800032c:	103ffb26 	beq	r2,zero,800031c <__alt_data_end+0xfc00031c>
    GraphicsColourReg = PaletteNumber;
 8000330:	00a10034 	movhi	r2,33792
 8000334:	10800384 	addi	r2,r2,14
 8000338:	e0fffe17 	ldw	r3,-8(fp)
 800033c:	10c0000d 	sth	r3,0(r2)
    GraphicsX1Reg = RGB >> 16   ;          // program red value in ls.8 bit of X1 reg
 8000340:	00a10034 	movhi	r2,33792
 8000344:	10800084 	addi	r2,r2,2
 8000348:	e0ffff17 	ldw	r3,-4(fp)
 800034c:	1807d43a 	srai	r3,r3,16
 8000350:	10c0000d 	sth	r3,0(r2)
    GraphicsY1Reg = RGB ;                	 // program green and blue into 16 bit of Y1 reg
 8000354:	00a10034 	movhi	r2,33792
 8000358:	10800104 	addi	r2,r2,4
 800035c:	e0ffff17 	ldw	r3,-4(fp)
 8000360:	10c0000d 	sth	r3,0(r2)
    GraphicsCommandReg = ProgramPaletteColour;	// issue command
 8000364:	00a10034 	movhi	r2,33792
 8000368:	00c00404 	movi	r3,16
 800036c:	10c0000d 	sth	r3,0(r2)
}
 8000370:	e037883a 	mov	sp,fp
 8000374:	df000017 	ldw	fp,0(sp)
 8000378:	dec00104 	addi	sp,sp,4
 800037c:	f800283a 	ret

08000380 <DrawHline>:

void DrawHline(int x1, int y1, int x2, int y2, int color)
{
 8000380:	defffb04 	addi	sp,sp,-20
 8000384:	df000415 	stw	fp,16(sp)
 8000388:	df000404 	addi	fp,sp,16
 800038c:	e13ffc15 	stw	r4,-16(fp)
 8000390:	e17ffd15 	stw	r5,-12(fp)
 8000394:	e1bffe15 	stw	r6,-8(fp)
 8000398:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 800039c:	0001883a 	nop
 80003a0:	00a10034 	movhi	r2,33792
 80003a4:	1080000b 	ldhu	r2,0(r2)
 80003a8:	10bfffcc 	andi	r2,r2,65535
 80003ac:	1080004c 	andi	r2,r2,1
 80003b0:	103ffb26 	beq	r2,zero,80003a0 <__alt_data_end+0xfc0003a0>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 80003b4:	00a10034 	movhi	r2,33792
 80003b8:	10800084 	addi	r2,r2,2
 80003bc:	e0fffc17 	ldw	r3,-16(fp)
 80003c0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80003c4:	00a10034 	movhi	r2,33792
 80003c8:	10800104 	addi	r2,r2,4
 80003cc:	e0fffd17 	ldw	r3,-12(fp)
 80003d0:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 80003d4:	00a10034 	movhi	r2,33792
 80003d8:	10800184 	addi	r2,r2,6
 80003dc:	e0fffe17 	ldw	r3,-8(fp)
 80003e0:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80003e4:	00a10034 	movhi	r2,33792
 80003e8:	10800204 	addi	r2,r2,8
 80003ec:	e0ffff17 	ldw	r3,-4(fp)
 80003f0:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 80003f4:	00a10034 	movhi	r2,33792
 80003f8:	10800384 	addi	r2,r2,14
 80003fc:	e0c00117 	ldw	r3,4(fp)
 8000400:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;		// give graphics a "write pixel" command
 8000404:	00a10034 	movhi	r2,33792
 8000408:	00c00044 	movi	r3,1
 800040c:	10c0000d 	sth	r3,0(r2)
}
 8000410:	e037883a 	mov	sp,fp
 8000414:	df000017 	ldw	fp,0(sp)
 8000418:	dec00104 	addi	sp,sp,4
 800041c:	f800283a 	ret

08000420 <DrawVline>:

void DrawVline(int x1, int y1, int x2, int y2, int color)
{
 8000420:	defffb04 	addi	sp,sp,-20
 8000424:	df000415 	stw	fp,16(sp)
 8000428:	df000404 	addi	fp,sp,16
 800042c:	e13ffc15 	stw	r4,-16(fp)
 8000430:	e17ffd15 	stw	r5,-12(fp)
 8000434:	e1bffe15 	stw	r6,-8(fp)
 8000438:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 800043c:	0001883a 	nop
 8000440:	00a10034 	movhi	r2,33792
 8000444:	1080000b 	ldhu	r2,0(r2)
 8000448:	10bfffcc 	andi	r2,r2,65535
 800044c:	1080004c 	andi	r2,r2,1
 8000450:	103ffb26 	beq	r2,zero,8000440 <__alt_data_end+0xfc000440>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8000454:	00a10034 	movhi	r2,33792
 8000458:	10800084 	addi	r2,r2,2
 800045c:	e0fffc17 	ldw	r3,-16(fp)
 8000460:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000464:	00a10034 	movhi	r2,33792
 8000468:	10800104 	addi	r2,r2,4
 800046c:	e0fffd17 	ldw	r3,-12(fp)
 8000470:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 8000474:	00a10034 	movhi	r2,33792
 8000478:	10800184 	addi	r2,r2,6
 800047c:	e0fffe17 	ldw	r3,-8(fp)
 8000480:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000484:	00a10034 	movhi	r2,33792
 8000488:	10800204 	addi	r2,r2,8
 800048c:	e0ffff17 	ldw	r3,-4(fp)
 8000490:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8000494:	00a10034 	movhi	r2,33792
 8000498:	10800384 	addi	r2,r2,14
 800049c:	e0c00117 	ldw	r3,4(fp)
 80004a0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;		// give graphics a "write pixel" command
 80004a4:	00a10034 	movhi	r2,33792
 80004a8:	00c00084 	movi	r3,2
 80004ac:	10c0000d 	sth	r3,0(r2)
}
 80004b0:	e037883a 	mov	sp,fp
 80004b4:	df000017 	ldw	fp,0(sp)
 80004b8:	dec00104 	addi	sp,sp,4
 80004bc:	f800283a 	ret

080004c0 <Drawline>:

void Drawline(int x1, int y1, int x2, int y2, int color)
{
 80004c0:	defffb04 	addi	sp,sp,-20
 80004c4:	df000415 	stw	fp,16(sp)
 80004c8:	df000404 	addi	fp,sp,16
 80004cc:	e13ffc15 	stw	r4,-16(fp)
 80004d0:	e17ffd15 	stw	r5,-12(fp)
 80004d4:	e1bffe15 	stw	r6,-8(fp)
 80004d8:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 80004dc:	0001883a 	nop
 80004e0:	00a10034 	movhi	r2,33792
 80004e4:	1080000b 	ldhu	r2,0(r2)
 80004e8:	10bfffcc 	andi	r2,r2,65535
 80004ec:	1080004c 	andi	r2,r2,1
 80004f0:	103ffb26 	beq	r2,zero,80004e0 <__alt_data_end+0xfc0004e0>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 80004f4:	00a10034 	movhi	r2,33792
 80004f8:	10800084 	addi	r2,r2,2
 80004fc:	e0fffc17 	ldw	r3,-16(fp)
 8000500:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000504:	00a10034 	movhi	r2,33792
 8000508:	10800104 	addi	r2,r2,4
 800050c:	e0fffd17 	ldw	r3,-12(fp)
 8000510:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 8000514:	00a10034 	movhi	r2,33792
 8000518:	10800184 	addi	r2,r2,6
 800051c:	e0fffe17 	ldw	r3,-8(fp)
 8000520:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000524:	00a10034 	movhi	r2,33792
 8000528:	10800204 	addi	r2,r2,8
 800052c:	e0ffff17 	ldw	r3,-4(fp)
 8000530:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8000534:	00a10034 	movhi	r2,33792
 8000538:	10800384 	addi	r2,r2,14
 800053c:	e0c00117 	ldw	r3,4(fp)
 8000540:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;		// give graphics a "write pixel" command
 8000544:	00a10034 	movhi	r2,33792
 8000548:	00c000c4 	movi	r3,3
 800054c:	10c0000d 	sth	r3,0(r2)
}
 8000550:	e037883a 	mov	sp,fp
 8000554:	df000017 	ldw	fp,0(sp)
 8000558:	dec00104 	addi	sp,sp,4
 800055c:	f800283a 	ret

08000560 <main>:

int main()
{
 8000560:	defffd04 	addi	sp,sp,-12
 8000564:	dfc00215 	stw	ra,8(sp)
 8000568:	df000115 	stw	fp,4(sp)
 800056c:	df000104 	addi	fp,sp,4
//
//	// read the pixels back and make sure we read 2 (RED) to prove it's working
//	for(i = 0; i < 800; i ++)
//		printf("Colour value (i.e. pallette number) = %d at [%d, 100]\n", ReadAPixel(i, 100),i);

	DrawHline(20,200,220,200, RED);
 8000570:	00800084 	movi	r2,2
 8000574:	d8800015 	stw	r2,0(sp)
 8000578:	01000504 	movi	r4,20
 800057c:	01403204 	movi	r5,200
 8000580:	01803704 	movi	r6,220
 8000584:	01c03204 	movi	r7,200
 8000588:	80003800 	call	8000380 <DrawHline>
	DrawHline(20,220,220,220, GREEN);
 800058c:	00800304 	movi	r2,12
 8000590:	d8800015 	stw	r2,0(sp)
 8000594:	01000504 	movi	r4,20
 8000598:	01403704 	movi	r5,220
 800059c:	01803704 	movi	r6,220
 80005a0:	01c03704 	movi	r7,220
 80005a4:	80003800 	call	8000380 <DrawHline>
	DrawVline(20,200,20,400, GREEN);
 80005a8:	00800304 	movi	r2,12
 80005ac:	d8800015 	stw	r2,0(sp)
 80005b0:	01000504 	movi	r4,20
 80005b4:	01403204 	movi	r5,200
 80005b8:	01800504 	movi	r6,20
 80005bc:	01c06404 	movi	r7,400
 80005c0:	80004200 	call	8000420 <DrawVline>
	Drawline(20,20,220,40, GREEN);
 80005c4:	00800304 	movi	r2,12
 80005c8:	d8800015 	stw	r2,0(sp)
 80005cc:	01000504 	movi	r4,20
 80005d0:	01400504 	movi	r5,20
 80005d4:	01803704 	movi	r6,220
 80005d8:	01c00a04 	movi	r7,40
 80005dc:	80004c00 	call	80004c0 <Drawline>
	printf("Colour value (i.e. pallette number) = %d at [%d, 100]\n", ReadAPixel(100, 20),20);
 80005e0:	01001904 	movi	r4,100
 80005e4:	01400504 	movi	r5,20
 80005e8:	80002740 	call	8000274 <ReadAPixel>
 80005ec:	01020074 	movhi	r4,2049
 80005f0:	213d5904 	addi	r4,r4,-2716
 80005f4:	100b883a 	mov	r5,r2
 80005f8:	01800504 	movi	r6,20
 80005fc:	80006640 	call	8000664 <printf>
	printf("Colour value (i.e. pallette number) = %d at [%d, 100]\n", ReadAPixel(20, 20),20);
 8000600:	01000504 	movi	r4,20
 8000604:	01400504 	movi	r5,20
 8000608:	80002740 	call	8000274 <ReadAPixel>
 800060c:	01020074 	movhi	r4,2049
 8000610:	213d5904 	addi	r4,r4,-2716
 8000614:	100b883a 	mov	r5,r2
 8000618:	01800504 	movi	r6,20
 800061c:	80006640 	call	8000664 <printf>

	return 0;
 8000620:	0005883a 	mov	r2,zero
}
 8000624:	e037883a 	mov	sp,fp
 8000628:	dfc00117 	ldw	ra,4(sp)
 800062c:	df000017 	ldw	fp,0(sp)
 8000630:	dec00204 	addi	sp,sp,8
 8000634:	f800283a 	ret

08000638 <_printf_r>:
 8000638:	defffd04 	addi	sp,sp,-12
 800063c:	dfc00015 	stw	ra,0(sp)
 8000640:	d9800115 	stw	r6,4(sp)
 8000644:	d9c00215 	stw	r7,8(sp)
 8000648:	280d883a 	mov	r6,r5
 800064c:	21400217 	ldw	r5,8(r4)
 8000650:	d9c00104 	addi	r7,sp,4
 8000654:	80006a00 	call	80006a0 <___vfprintf_internal_r>
 8000658:	dfc00017 	ldw	ra,0(sp)
 800065c:	dec00304 	addi	sp,sp,12
 8000660:	f800283a 	ret

08000664 <printf>:
 8000664:	defffc04 	addi	sp,sp,-16
 8000668:	dfc00015 	stw	ra,0(sp)
 800066c:	d9400115 	stw	r5,4(sp)
 8000670:	d9800215 	stw	r6,8(sp)
 8000674:	d9c00315 	stw	r7,12(sp)
 8000678:	00820074 	movhi	r2,2049
 800067c:	1084e304 	addi	r2,r2,5004
 8000680:	10800017 	ldw	r2,0(r2)
 8000684:	200b883a 	mov	r5,r4
 8000688:	d9800104 	addi	r6,sp,4
 800068c:	11000217 	ldw	r4,8(r2)
 8000690:	800269c0 	call	800269c <__vfprintf_internal>
 8000694:	dfc00017 	ldw	ra,0(sp)
 8000698:	dec00404 	addi	sp,sp,16
 800069c:	f800283a 	ret

080006a0 <___vfprintf_internal_r>:
 80006a0:	defeb604 	addi	sp,sp,-1320
 80006a4:	dfc14915 	stw	ra,1316(sp)
 80006a8:	ddc14715 	stw	r23,1308(sp)
 80006ac:	dd814615 	stw	r22,1304(sp)
 80006b0:	282f883a 	mov	r23,r5
 80006b4:	202d883a 	mov	r22,r4
 80006b8:	d9812a15 	stw	r6,1192(sp)
 80006bc:	d9c12d15 	stw	r7,1204(sp)
 80006c0:	df014815 	stw	fp,1312(sp)
 80006c4:	dd414515 	stw	r21,1300(sp)
 80006c8:	dd014415 	stw	r20,1296(sp)
 80006cc:	dcc14315 	stw	r19,1292(sp)
 80006d0:	dc814215 	stw	r18,1288(sp)
 80006d4:	dc414115 	stw	r17,1284(sp)
 80006d8:	dc014015 	stw	r16,1280(sp)
 80006dc:	8004d400 	call	8004d40 <_localeconv_r>
 80006e0:	10800017 	ldw	r2,0(r2)
 80006e4:	1009883a 	mov	r4,r2
 80006e8:	d8813515 	stw	r2,1236(sp)
 80006ec:	8006c4c0 	call	8006c4c <strlen>
 80006f0:	d8813815 	stw	r2,1248(sp)
 80006f4:	b0000226 	beq	r22,zero,8000700 <___vfprintf_internal_r+0x60>
 80006f8:	b0800e17 	ldw	r2,56(r22)
 80006fc:	10010426 	beq	r2,zero,8000b10 <___vfprintf_internal_r+0x470>
 8000700:	b8c0030b 	ldhu	r3,12(r23)
 8000704:	1908000c 	andi	r4,r3,8192
 8000708:	1805883a 	mov	r2,r3
 800070c:	2000071e 	bne	r4,zero,800072c <___vfprintf_internal_r+0x8c>
 8000710:	b9001917 	ldw	r4,100(r23)
 8000714:	18880014 	ori	r2,r3,8192
 8000718:	00f7ffc4 	movi	r3,-8193
 800071c:	20c8703a 	and	r4,r4,r3
 8000720:	b880030d 	sth	r2,12(r23)
 8000724:	1007883a 	mov	r3,r2
 8000728:	b9001915 	stw	r4,100(r23)
 800072c:	1100020c 	andi	r4,r2,8
 8000730:	2000a726 	beq	r4,zero,80009d0 <___vfprintf_internal_r+0x330>
 8000734:	b9000417 	ldw	r4,16(r23)
 8000738:	2000a526 	beq	r4,zero,80009d0 <___vfprintf_internal_r+0x330>
 800073c:	1080068c 	andi	r2,r2,26
 8000740:	01000284 	movi	r4,10
 8000744:	1100ab26 	beq	r2,r4,80009f4 <___vfprintf_internal_r+0x354>
 8000748:	dac10e04 	addi	r11,sp,1080
 800074c:	db010dc4 	addi	r12,sp,1079
 8000750:	d8800404 	addi	r2,sp,16
 8000754:	05020074 	movhi	r20,2049
 8000758:	dac12815 	stw	r11,1184(sp)
 800075c:	5b17c83a 	sub	r11,r11,r12
 8000760:	a53d7784 	addi	r20,r20,-2594
 8000764:	db012915 	stw	r12,1188(sp)
 8000768:	d8811e15 	stw	r2,1144(sp)
 800076c:	d8012015 	stw	zero,1152(sp)
 8000770:	d8011f15 	stw	zero,1148(sp)
 8000774:	d8013315 	stw	zero,1228(sp)
 8000778:	d8013715 	stw	zero,1244(sp)
 800077c:	d8013915 	stw	zero,1252(sp)
 8000780:	d8013b15 	stw	zero,1260(sp)
 8000784:	d8013a15 	stw	zero,1256(sp)
 8000788:	d8012f15 	stw	zero,1212(sp)
 800078c:	1011883a 	mov	r8,r2
 8000790:	dac13c15 	stw	r11,1264(sp)
 8000794:	db012a17 	ldw	r12,1192(sp)
 8000798:	60800007 	ldb	r2,0(r12)
 800079c:	1000df26 	beq	r2,zero,8000b1c <___vfprintf_internal_r+0x47c>
 80007a0:	00c00944 	movi	r3,37
 80007a4:	10c0dd26 	beq	r2,r3,8000b1c <___vfprintf_internal_r+0x47c>
 80007a8:	6021883a 	mov	r16,r12
 80007ac:	00000106 	br	80007b4 <___vfprintf_internal_r+0x114>
 80007b0:	10c08426 	beq	r2,r3,80009c4 <___vfprintf_internal_r+0x324>
 80007b4:	84000044 	addi	r16,r16,1
 80007b8:	80800007 	ldb	r2,0(r16)
 80007bc:	103ffc1e 	bne	r2,zero,80007b0 <__alt_data_end+0xfc0007b0>
 80007c0:	dac12a17 	ldw	r11,1192(sp)
 80007c4:	82e3c83a 	sub	r17,r16,r11
 80007c8:	88000f26 	beq	r17,zero,8000808 <___vfprintf_internal_r+0x168>
 80007cc:	d8c12017 	ldw	r3,1152(sp)
 80007d0:	d8811f17 	ldw	r2,1148(sp)
 80007d4:	dac12a17 	ldw	r11,1192(sp)
 80007d8:	1c47883a 	add	r3,r3,r17
 80007dc:	10800044 	addi	r2,r2,1
 80007e0:	d8c12015 	stw	r3,1152(sp)
 80007e4:	42c00015 	stw	r11,0(r8)
 80007e8:	44400115 	stw	r17,4(r8)
 80007ec:	d8811f15 	stw	r2,1148(sp)
 80007f0:	00c001c4 	movi	r3,7
 80007f4:	1880b416 	blt	r3,r2,8000ac8 <___vfprintf_internal_r+0x428>
 80007f8:	42000204 	addi	r8,r8,8
 80007fc:	db012f17 	ldw	r12,1212(sp)
 8000800:	6459883a 	add	r12,r12,r17
 8000804:	db012f15 	stw	r12,1212(sp)
 8000808:	80800007 	ldb	r2,0(r16)
 800080c:	1000b526 	beq	r2,zero,8000ae4 <___vfprintf_internal_r+0x444>
 8000810:	80800044 	addi	r2,r16,1
 8000814:	84000047 	ldb	r16,1(r16)
 8000818:	d8012785 	stb	zero,1182(sp)
 800081c:	000d883a 	mov	r6,zero
 8000820:	027fffc4 	movi	r9,-1
 8000824:	d8012e15 	stw	zero,1208(sp)
 8000828:	0023883a 	mov	r17,zero
 800082c:	01001604 	movi	r4,88
 8000830:	01400244 	movi	r5,9
 8000834:	02800a84 	movi	r10,42
 8000838:	01c01b04 	movi	r7,108
 800083c:	10c00044 	addi	r3,r2,1
 8000840:	80bff804 	addi	r2,r16,-32
 8000844:	2082f236 	bltu	r4,r2,8001410 <___vfprintf_internal_r+0xd70>
 8000848:	100490ba 	slli	r2,r2,2
 800084c:	02c20034 	movhi	r11,2048
 8000850:	5ac21804 	addi	r11,r11,2144
 8000854:	12c5883a 	add	r2,r2,r11
 8000858:	10800017 	ldw	r2,0(r2)
 800085c:	1000683a 	jmp	r2
 8000860:	08001258 	cmpnei	zero,at,73
 8000864:	08001410 	cmplti	zero,at,80
 8000868:	08001410 	cmplti	zero,at,80
 800086c:	08001278 	rdprs	zero,at,73
 8000870:	08001410 	cmplti	zero,at,80
 8000874:	08001410 	cmplti	zero,at,80
 8000878:	08001410 	cmplti	zero,at,80
 800087c:	08001410 	cmplti	zero,at,80
 8000880:	08001410 	cmplti	zero,at,80
 8000884:	08001410 	cmplti	zero,at,80
 8000888:	080013d4 	ori	zero,at,79
 800088c:	08001400 	call	800140 <__alt_mem_sdram-0x77ffec0>
 8000890:	08001410 	cmplti	zero,at,80
 8000894:	08000b24 	muli	zero,at,44
 8000898:	08000b34 	orhi	zero,at,44
 800089c:	08001410 	cmplti	zero,at,80
 80008a0:	08000b74 	orhi	zero,at,45
 80008a4:	08001068 	cmpgeui	zero,at,65
 80008a8:	08001068 	cmpgeui	zero,at,65
 80008ac:	08001068 	cmpgeui	zero,at,65
 80008b0:	08001068 	cmpgeui	zero,at,65
 80008b4:	08001068 	cmpgeui	zero,at,65
 80008b8:	08001068 	cmpgeui	zero,at,65
 80008bc:	08001068 	cmpgeui	zero,at,65
 80008c0:	08001068 	cmpgeui	zero,at,65
 80008c4:	08001068 	cmpgeui	zero,at,65
 80008c8:	08001410 	cmplti	zero,at,80
 80008cc:	08001410 	cmplti	zero,at,80
 80008d0:	08001410 	cmplti	zero,at,80
 80008d4:	08001410 	cmplti	zero,at,80
 80008d8:	08001410 	cmplti	zero,at,80
 80008dc:	08001410 	cmplti	zero,at,80
 80008e0:	08001410 	cmplti	zero,at,80
 80008e4:	08001410 	cmplti	zero,at,80
 80008e8:	08001410 	cmplti	zero,at,80
 80008ec:	08001410 	cmplti	zero,at,80
 80008f0:	0800109c 	xori	zero,at,66
 80008f4:	08000b84 	addi	zero,at,46
 80008f8:	08001410 	cmplti	zero,at,80
 80008fc:	08000b84 	addi	zero,at,46
 8000900:	08001410 	cmplti	zero,at,80
 8000904:	08001410 	cmplti	zero,at,80
 8000908:	08001410 	cmplti	zero,at,80
 800090c:	08001410 	cmplti	zero,at,80
 8000910:	08000c28 	cmpgeui	zero,at,48
 8000914:	08001410 	cmplti	zero,at,80
 8000918:	08001410 	cmplti	zero,at,80
 800091c:	08000c38 	rdprs	zero,at,48
 8000920:	08001410 	cmplti	zero,at,80
 8000924:	08001410 	cmplti	zero,at,80
 8000928:	08001410 	cmplti	zero,at,80
 800092c:	08001410 	cmplti	zero,at,80
 8000930:	08001410 	cmplti	zero,at,80
 8000934:	08001034 	orhi	zero,at,64
 8000938:	08001410 	cmplti	zero,at,80
 800093c:	08001410 	cmplti	zero,at,80
 8000940:	080010e4 	muli	zero,at,67
 8000944:	08001410 	cmplti	zero,at,80
 8000948:	08001410 	cmplti	zero,at,80
 800094c:	08001410 	cmplti	zero,at,80
 8000950:	08001410 	cmplti	zero,at,80
 8000954:	08001410 	cmplti	zero,at,80
 8000958:	08001410 	cmplti	zero,at,80
 800095c:	08001410 	cmplti	zero,at,80
 8000960:	08001410 	cmplti	zero,at,80
 8000964:	08001410 	cmplti	zero,at,80
 8000968:	08001410 	cmplti	zero,at,80
 800096c:	080012d8 	cmpnei	zero,at,75
 8000970:	08001288 	cmpgei	zero,at,74
 8000974:	08000b84 	addi	zero,at,46
 8000978:	08000b84 	addi	zero,at,46
 800097c:	08000b84 	addi	zero,at,46
 8000980:	080012c8 	cmpgei	zero,at,75
 8000984:	08001288 	cmpgei	zero,at,74
 8000988:	08001410 	cmplti	zero,at,80
 800098c:	08001410 	cmplti	zero,at,80
 8000990:	080011d0 	cmplti	zero,at,71
 8000994:	08001410 	cmplti	zero,at,80
 8000998:	080011e4 	muli	zero,at,71
 800099c:	08001218 	cmpnei	zero,at,72
 80009a0:	08001318 	cmpnei	zero,at,76
 80009a4:	08001140 	call	800114 <__alt_mem_sdram-0x77ffeec>
 80009a8:	08001410 	cmplti	zero,at,80
 80009ac:	08001360 	cmpeqi	zero,at,77
 80009b0:	08001410 	cmplti	zero,at,80
 80009b4:	08001150 	cmplti	zero,at,69
 80009b8:	08001410 	cmplti	zero,at,80
 80009bc:	08001410 	cmplti	zero,at,80
 80009c0:	08001190 	cmplti	zero,at,70
 80009c4:	db012a17 	ldw	r12,1192(sp)
 80009c8:	8323c83a 	sub	r17,r16,r12
 80009cc:	003f7e06 	br	80007c8 <__alt_data_end+0xfc0007c8>
 80009d0:	b009883a 	mov	r4,r22
 80009d4:	b80b883a 	mov	r5,r23
 80009d8:	80026c00 	call	80026c0 <__swsetup_r>
 80009dc:	10002d1e 	bne	r2,zero,8000a94 <___vfprintf_internal_r+0x3f4>
 80009e0:	b8c0030b 	ldhu	r3,12(r23)
 80009e4:	01000284 	movi	r4,10
 80009e8:	1805883a 	mov	r2,r3
 80009ec:	1080068c 	andi	r2,r2,26
 80009f0:	113f551e 	bne	r2,r4,8000748 <__alt_data_end+0xfc000748>
 80009f4:	b880038b 	ldhu	r2,14(r23)
 80009f8:	113fffcc 	andi	r4,r2,65535
 80009fc:	2120001c 	xori	r4,r4,32768
 8000a00:	21200004 	addi	r4,r4,-32768
 8000a04:	203f5016 	blt	r4,zero,8000748 <__alt_data_end+0xfc000748>
 8000a08:	bac01917 	ldw	r11,100(r23)
 8000a0c:	ba800717 	ldw	r10,28(r23)
 8000a10:	ba400917 	ldw	r9,36(r23)
 8000a14:	d9812a17 	ldw	r6,1192(sp)
 8000a18:	d9c12d17 	ldw	r7,1204(sp)
 8000a1c:	02010004 	movi	r8,1024
 8000a20:	18ffff4c 	andi	r3,r3,65533
 8000a24:	d881078d 	sth	r2,1054(sp)
 8000a28:	b009883a 	mov	r4,r22
 8000a2c:	d8800404 	addi	r2,sp,16
 8000a30:	d9410404 	addi	r5,sp,1040
 8000a34:	d8c1070d 	sth	r3,1052(sp)
 8000a38:	dac11d15 	stw	r11,1140(sp)
 8000a3c:	da810b15 	stw	r10,1068(sp)
 8000a40:	da410d15 	stw	r9,1076(sp)
 8000a44:	d8810415 	stw	r2,1040(sp)
 8000a48:	d8810815 	stw	r2,1056(sp)
 8000a4c:	da010615 	stw	r8,1048(sp)
 8000a50:	da010915 	stw	r8,1060(sp)
 8000a54:	d8010a15 	stw	zero,1064(sp)
 8000a58:	80006a00 	call	80006a0 <___vfprintf_internal_r>
 8000a5c:	1021883a 	mov	r16,r2
 8000a60:	10000416 	blt	r2,zero,8000a74 <___vfprintf_internal_r+0x3d4>
 8000a64:	b009883a 	mov	r4,r22
 8000a68:	d9410404 	addi	r5,sp,1040
 8000a6c:	80041180 	call	8004118 <_fflush_r>
 8000a70:	1006ee1e 	bne	r2,zero,800262c <___vfprintf_internal_r+0x1f8c>
 8000a74:	d881070b 	ldhu	r2,1052(sp)
 8000a78:	1080100c 	andi	r2,r2,64
 8000a7c:	10000326 	beq	r2,zero,8000a8c <___vfprintf_internal_r+0x3ec>
 8000a80:	b880030b 	ldhu	r2,12(r23)
 8000a84:	10801014 	ori	r2,r2,64
 8000a88:	b880030d 	sth	r2,12(r23)
 8000a8c:	8005883a 	mov	r2,r16
 8000a90:	00000106 	br	8000a98 <___vfprintf_internal_r+0x3f8>
 8000a94:	00bfffc4 	movi	r2,-1
 8000a98:	dfc14917 	ldw	ra,1316(sp)
 8000a9c:	df014817 	ldw	fp,1312(sp)
 8000aa0:	ddc14717 	ldw	r23,1308(sp)
 8000aa4:	dd814617 	ldw	r22,1304(sp)
 8000aa8:	dd414517 	ldw	r21,1300(sp)
 8000aac:	dd014417 	ldw	r20,1296(sp)
 8000ab0:	dcc14317 	ldw	r19,1292(sp)
 8000ab4:	dc814217 	ldw	r18,1288(sp)
 8000ab8:	dc414117 	ldw	r17,1284(sp)
 8000abc:	dc014017 	ldw	r16,1280(sp)
 8000ac0:	dec14a04 	addi	sp,sp,1320
 8000ac4:	f800283a 	ret
 8000ac8:	b009883a 	mov	r4,r22
 8000acc:	b80b883a 	mov	r5,r23
 8000ad0:	d9811e04 	addi	r6,sp,1144
 8000ad4:	8006de00 	call	8006de0 <__sprint_r>
 8000ad8:	1000081e 	bne	r2,zero,8000afc <___vfprintf_internal_r+0x45c>
 8000adc:	da000404 	addi	r8,sp,16
 8000ae0:	003f4606 	br	80007fc <__alt_data_end+0xfc0007fc>
 8000ae4:	d8812017 	ldw	r2,1152(sp)
 8000ae8:	10000426 	beq	r2,zero,8000afc <___vfprintf_internal_r+0x45c>
 8000aec:	b009883a 	mov	r4,r22
 8000af0:	b80b883a 	mov	r5,r23
 8000af4:	d9811e04 	addi	r6,sp,1144
 8000af8:	8006de00 	call	8006de0 <__sprint_r>
 8000afc:	b880030b 	ldhu	r2,12(r23)
 8000b00:	1080100c 	andi	r2,r2,64
 8000b04:	103fe31e 	bne	r2,zero,8000a94 <__alt_data_end+0xfc000a94>
 8000b08:	d8812f17 	ldw	r2,1212(sp)
 8000b0c:	003fe206 	br	8000a98 <__alt_data_end+0xfc000a98>
 8000b10:	b009883a 	mov	r4,r22
 8000b14:	80046c00 	call	80046c0 <__sinit>
 8000b18:	003ef906 	br	8000700 <__alt_data_end+0xfc000700>
 8000b1c:	dc012a17 	ldw	r16,1192(sp)
 8000b20:	003f3906 	br	8000808 <__alt_data_end+0xfc000808>
 8000b24:	1805883a 	mov	r2,r3
 8000b28:	8c400114 	ori	r17,r17,4
 8000b2c:	1c000007 	ldb	r16,0(r3)
 8000b30:	003f4206 	br	800083c <__alt_data_end+0xfc00083c>
 8000b34:	1c000007 	ldb	r16,0(r3)
 8000b38:	18800044 	addi	r2,r3,1
 8000b3c:	8286b326 	beq	r16,r10,800260c <___vfprintf_internal_r+0x1f6c>
 8000b40:	82fff404 	addi	r11,r16,-48
 8000b44:	1007883a 	mov	r3,r2
 8000b48:	0013883a 	mov	r9,zero
 8000b4c:	2aff3c36 	bltu	r5,r11,8000840 <__alt_data_end+0xfc000840>
 8000b50:	1c000007 	ldb	r16,0(r3)
 8000b54:	4a4002a4 	muli	r9,r9,10
 8000b58:	18c00044 	addi	r3,r3,1
 8000b5c:	5a53883a 	add	r9,r11,r9
 8000b60:	82fff404 	addi	r11,r16,-48
 8000b64:	2afffa2e 	bgeu	r5,r11,8000b50 <__alt_data_end+0xfc000b50>
 8000b68:	483f350e 	bge	r9,zero,8000840 <__alt_data_end+0xfc000840>
 8000b6c:	027fffc4 	movi	r9,-1
 8000b70:	003f3306 	br	8000840 <__alt_data_end+0xfc000840>
 8000b74:	8c402014 	ori	r17,r17,128
 8000b78:	1805883a 	mov	r2,r3
 8000b7c:	1c000007 	ldb	r16,0(r3)
 8000b80:	003f2e06 	br	800083c <__alt_data_end+0xfc00083c>
 8000b84:	db012d17 	ldw	r12,1204(sp)
 8000b88:	dac12d17 	ldw	r11,1204(sp)
 8000b8c:	d8c12a15 	stw	r3,1192(sp)
 8000b90:	63000017 	ldw	r12,0(r12)
 8000b94:	5ac00117 	ldw	r11,4(r11)
 8000b98:	d9812785 	stb	r6,1182(sp)
 8000b9c:	6009883a 	mov	r4,r12
 8000ba0:	580b883a 	mov	r5,r11
 8000ba4:	db013715 	stw	r12,1244(sp)
 8000ba8:	da013f15 	stw	r8,1276(sp)
 8000bac:	da413e15 	stw	r9,1272(sp)
 8000bb0:	dac13915 	stw	r11,1252(sp)
 8000bb4:	80069a40 	call	80069a4 <__fpclassifyd>
 8000bb8:	db012d17 	ldw	r12,1204(sp)
 8000bbc:	04800044 	movi	r18,1
 8000bc0:	da013f17 	ldw	r8,1276(sp)
 8000bc4:	64c00204 	addi	r19,r12,8
 8000bc8:	da413e17 	ldw	r9,1272(sp)
 8000bcc:	d9013717 	ldw	r4,1244(sp)
 8000bd0:	d9413917 	ldw	r5,1252(sp)
 8000bd4:	1484581e 	bne	r2,r18,8001d38 <___vfprintf_internal_r+0x1698>
 8000bd8:	000d883a 	mov	r6,zero
 8000bdc:	000f883a 	mov	r7,zero
 8000be0:	800b5980 	call	800b598 <__ledf2>
 8000be4:	da013f17 	ldw	r8,1276(sp)
 8000be8:	1005ef16 	blt	r2,zero,80023a8 <___vfprintf_internal_r+0x1d08>
 8000bec:	dd412783 	ldbu	r21,1182(sp)
 8000bf0:	008011c4 	movi	r2,71
 8000bf4:	14053b0e 	bge	r2,r16,80020e4 <___vfprintf_internal_r+0x1a44>
 8000bf8:	00c20074 	movhi	r3,2049
 8000bfc:	18fd6804 	addi	r3,r3,-2656
 8000c00:	d8c13115 	stw	r3,1220(sp)
 8000c04:	02c000c4 	movi	r11,3
 8000c08:	00bfdfc4 	movi	r2,-129
 8000c0c:	dac12b15 	stw	r11,1196(sp)
 8000c10:	88a2703a 	and	r17,r17,r2
 8000c14:	dcc12d15 	stw	r19,1204(sp)
 8000c18:	5825883a 	mov	r18,r11
 8000c1c:	d8013215 	stw	zero,1224(sp)
 8000c20:	d8013415 	stw	zero,1232(sp)
 8000c24:	00003206 	br	8000cf0 <___vfprintf_internal_r+0x650>
 8000c28:	8c400214 	ori	r17,r17,8
 8000c2c:	1805883a 	mov	r2,r3
 8000c30:	1c000007 	ldb	r16,0(r3)
 8000c34:	003f0106 	br	800083c <__alt_data_end+0xfc00083c>
 8000c38:	8c400414 	ori	r17,r17,16
 8000c3c:	d8c12a15 	stw	r3,1192(sp)
 8000c40:	88c0080c 	andi	r3,r17,32
 8000c44:	d8812d17 	ldw	r2,1204(sp)
 8000c48:	18017726 	beq	r3,zero,8001228 <___vfprintf_internal_r+0xb88>
 8000c4c:	db012d17 	ldw	r12,1204(sp)
 8000c50:	14c00017 	ldw	r19,0(r2)
 8000c54:	17000117 	ldw	fp,4(r2)
 8000c58:	63000204 	addi	r12,r12,8
 8000c5c:	db012d15 	stw	r12,1204(sp)
 8000c60:	0005883a 	mov	r2,zero
 8000c64:	9f06b03a 	or	r3,r19,fp
 8000c68:	d8012785 	stb	zero,1182(sp)
 8000c6c:	da413215 	stw	r9,1224(sp)
 8000c70:	002b883a 	mov	r21,zero
 8000c74:	48000216 	blt	r9,zero,8000c80 <___vfprintf_internal_r+0x5e0>
 8000c78:	013fdfc4 	movi	r4,-129
 8000c7c:	8922703a 	and	r17,r17,r4
 8000c80:	1801ed1e 	bne	r3,zero,8001438 <___vfprintf_internal_r+0xd98>
 8000c84:	4802e026 	beq	r9,zero,8001808 <___vfprintf_internal_r+0x1168>
 8000c88:	10803fcc 	andi	r2,r2,255
 8000c8c:	00c00044 	movi	r3,1
 8000c90:	10c20f26 	beq	r2,r3,80014d0 <___vfprintf_internal_r+0xe30>
 8000c94:	00c00084 	movi	r3,2
 8000c98:	10c2fd26 	beq	r2,r3,8001890 <___vfprintf_internal_r+0x11f0>
 8000c9c:	d8c10e04 	addi	r3,sp,1080
 8000ca0:	9808d0fa 	srli	r4,r19,3
 8000ca4:	e00a977a 	slli	r5,fp,29
 8000ca8:	e038d0fa 	srli	fp,fp,3
 8000cac:	9cc001cc 	andi	r19,r19,7
 8000cb0:	98800c04 	addi	r2,r19,48
 8000cb4:	18ffffc4 	addi	r3,r3,-1
 8000cb8:	2926b03a 	or	r19,r5,r4
 8000cbc:	18800005 	stb	r2,0(r3)
 8000cc0:	9f08b03a 	or	r4,r19,fp
 8000cc4:	203ff61e 	bne	r4,zero,8000ca0 <__alt_data_end+0xfc000ca0>
 8000cc8:	8900004c 	andi	r4,r17,1
 8000ccc:	d8c13115 	stw	r3,1220(sp)
 8000cd0:	2003791e 	bne	r4,zero,8001ab8 <___vfprintf_internal_r+0x1418>
 8000cd4:	dac12817 	ldw	r11,1184(sp)
 8000cd8:	58e5c83a 	sub	r18,r11,r3
 8000cdc:	9005883a 	mov	r2,r18
 8000ce0:	9240010e 	bge	r18,r9,8000ce8 <___vfprintf_internal_r+0x648>
 8000ce4:	4805883a 	mov	r2,r9
 8000ce8:	d8812b15 	stw	r2,1196(sp)
 8000cec:	d8013415 	stw	zero,1232(sp)
 8000cf0:	a8803fcc 	andi	r2,r21,255
 8000cf4:	1080201c 	xori	r2,r2,128
 8000cf8:	10bfe004 	addi	r2,r2,-128
 8000cfc:	10000326 	beq	r2,zero,8000d0c <___vfprintf_internal_r+0x66c>
 8000d00:	db012b17 	ldw	r12,1196(sp)
 8000d04:	63000044 	addi	r12,r12,1
 8000d08:	db012b15 	stw	r12,1196(sp)
 8000d0c:	88c0008c 	andi	r3,r17,2
 8000d10:	d8c12c15 	stw	r3,1200(sp)
 8000d14:	18000326 	beq	r3,zero,8000d24 <___vfprintf_internal_r+0x684>
 8000d18:	dac12b17 	ldw	r11,1196(sp)
 8000d1c:	5ac00084 	addi	r11,r11,2
 8000d20:	dac12b15 	stw	r11,1196(sp)
 8000d24:	8b00210c 	andi	r12,r17,132
 8000d28:	db013015 	stw	r12,1216(sp)
 8000d2c:	6001c01e 	bne	r12,zero,8001430 <___vfprintf_internal_r+0xd90>
 8000d30:	dac12e17 	ldw	r11,1208(sp)
 8000d34:	db012b17 	ldw	r12,1196(sp)
 8000d38:	5b39c83a 	sub	fp,r11,r12
 8000d3c:	0701bc0e 	bge	zero,fp,8001430 <___vfprintf_internal_r+0xd90>
 8000d40:	02400404 	movi	r9,16
 8000d44:	d8c12017 	ldw	r3,1152(sp)
 8000d48:	d8811f17 	ldw	r2,1148(sp)
 8000d4c:	4f05220e 	bge	r9,fp,80021d8 <___vfprintf_internal_r+0x1b38>
 8000d50:	01420074 	movhi	r5,2049
 8000d54:	297d7b84 	addi	r5,r5,-2578
 8000d58:	d9413615 	stw	r5,1240(sp)
 8000d5c:	482b883a 	mov	r21,r9
 8000d60:	04c001c4 	movi	r19,7
 8000d64:	00000306 	br	8000d74 <___vfprintf_internal_r+0x6d4>
 8000d68:	e73ffc04 	addi	fp,fp,-16
 8000d6c:	42000204 	addi	r8,r8,8
 8000d70:	af00130e 	bge	r21,fp,8000dc0 <___vfprintf_internal_r+0x720>
 8000d74:	02c20074 	movhi	r11,2049
 8000d78:	18c00404 	addi	r3,r3,16
 8000d7c:	10800044 	addi	r2,r2,1
 8000d80:	5afd7b84 	addi	r11,r11,-2578
 8000d84:	42c00015 	stw	r11,0(r8)
 8000d88:	45400115 	stw	r21,4(r8)
 8000d8c:	d8c12015 	stw	r3,1152(sp)
 8000d90:	d8811f15 	stw	r2,1148(sp)
 8000d94:	98bff40e 	bge	r19,r2,8000d68 <__alt_data_end+0xfc000d68>
 8000d98:	b009883a 	mov	r4,r22
 8000d9c:	b80b883a 	mov	r5,r23
 8000da0:	d9811e04 	addi	r6,sp,1144
 8000da4:	8006de00 	call	8006de0 <__sprint_r>
 8000da8:	103f541e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8000dac:	e73ffc04 	addi	fp,fp,-16
 8000db0:	d8c12017 	ldw	r3,1152(sp)
 8000db4:	d8811f17 	ldw	r2,1148(sp)
 8000db8:	da000404 	addi	r8,sp,16
 8000dbc:	af3fed16 	blt	r21,fp,8000d74 <__alt_data_end+0xfc000d74>
 8000dc0:	db013617 	ldw	r12,1240(sp)
 8000dc4:	e0c7883a 	add	r3,fp,r3
 8000dc8:	10800044 	addi	r2,r2,1
 8000dcc:	43000015 	stw	r12,0(r8)
 8000dd0:	47000115 	stw	fp,4(r8)
 8000dd4:	d8c12015 	stw	r3,1152(sp)
 8000dd8:	d8811f15 	stw	r2,1148(sp)
 8000ddc:	010001c4 	movi	r4,7
 8000de0:	2082f416 	blt	r4,r2,80019b4 <___vfprintf_internal_r+0x1314>
 8000de4:	d8812787 	ldb	r2,1182(sp)
 8000de8:	42000204 	addi	r8,r8,8
 8000dec:	10000c26 	beq	r2,zero,8000e20 <___vfprintf_internal_r+0x780>
 8000df0:	d8811f17 	ldw	r2,1148(sp)
 8000df4:	d9012784 	addi	r4,sp,1182
 8000df8:	18c00044 	addi	r3,r3,1
 8000dfc:	10800044 	addi	r2,r2,1
 8000e00:	41000015 	stw	r4,0(r8)
 8000e04:	01000044 	movi	r4,1
 8000e08:	41000115 	stw	r4,4(r8)
 8000e0c:	d8c12015 	stw	r3,1152(sp)
 8000e10:	d8811f15 	stw	r2,1148(sp)
 8000e14:	010001c4 	movi	r4,7
 8000e18:	20828d16 	blt	r4,r2,8001850 <___vfprintf_internal_r+0x11b0>
 8000e1c:	42000204 	addi	r8,r8,8
 8000e20:	dac12c17 	ldw	r11,1200(sp)
 8000e24:	58000c26 	beq	r11,zero,8000e58 <___vfprintf_internal_r+0x7b8>
 8000e28:	d8811f17 	ldw	r2,1148(sp)
 8000e2c:	d9012704 	addi	r4,sp,1180
 8000e30:	18c00084 	addi	r3,r3,2
 8000e34:	10800044 	addi	r2,r2,1
 8000e38:	41000015 	stw	r4,0(r8)
 8000e3c:	01000084 	movi	r4,2
 8000e40:	41000115 	stw	r4,4(r8)
 8000e44:	d8c12015 	stw	r3,1152(sp)
 8000e48:	d8811f15 	stw	r2,1148(sp)
 8000e4c:	010001c4 	movi	r4,7
 8000e50:	20828716 	blt	r4,r2,8001870 <___vfprintf_internal_r+0x11d0>
 8000e54:	42000204 	addi	r8,r8,8
 8000e58:	db013017 	ldw	r12,1216(sp)
 8000e5c:	00802004 	movi	r2,128
 8000e60:	6081e926 	beq	r12,r2,8001608 <___vfprintf_internal_r+0xf68>
 8000e64:	db013217 	ldw	r12,1224(sp)
 8000e68:	64abc83a 	sub	r21,r12,r18
 8000e6c:	0540260e 	bge	zero,r21,8000f08 <___vfprintf_internal_r+0x868>
 8000e70:	07000404 	movi	fp,16
 8000e74:	d8811f17 	ldw	r2,1148(sp)
 8000e78:	e5443d0e 	bge	fp,r21,8001f70 <___vfprintf_internal_r+0x18d0>
 8000e7c:	01420074 	movhi	r5,2049
 8000e80:	297d7784 	addi	r5,r5,-2594
 8000e84:	d9412c15 	stw	r5,1200(sp)
 8000e88:	04c001c4 	movi	r19,7
 8000e8c:	00000306 	br	8000e9c <___vfprintf_internal_r+0x7fc>
 8000e90:	ad7ffc04 	addi	r21,r21,-16
 8000e94:	42000204 	addi	r8,r8,8
 8000e98:	e540110e 	bge	fp,r21,8000ee0 <___vfprintf_internal_r+0x840>
 8000e9c:	18c00404 	addi	r3,r3,16
 8000ea0:	10800044 	addi	r2,r2,1
 8000ea4:	45000015 	stw	r20,0(r8)
 8000ea8:	47000115 	stw	fp,4(r8)
 8000eac:	d8c12015 	stw	r3,1152(sp)
 8000eb0:	d8811f15 	stw	r2,1148(sp)
 8000eb4:	98bff60e 	bge	r19,r2,8000e90 <__alt_data_end+0xfc000e90>
 8000eb8:	b009883a 	mov	r4,r22
 8000ebc:	b80b883a 	mov	r5,r23
 8000ec0:	d9811e04 	addi	r6,sp,1144
 8000ec4:	8006de00 	call	8006de0 <__sprint_r>
 8000ec8:	103f0c1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8000ecc:	ad7ffc04 	addi	r21,r21,-16
 8000ed0:	d8c12017 	ldw	r3,1152(sp)
 8000ed4:	d8811f17 	ldw	r2,1148(sp)
 8000ed8:	da000404 	addi	r8,sp,16
 8000edc:	e57fef16 	blt	fp,r21,8000e9c <__alt_data_end+0xfc000e9c>
 8000ee0:	dac12c17 	ldw	r11,1200(sp)
 8000ee4:	1d47883a 	add	r3,r3,r21
 8000ee8:	10800044 	addi	r2,r2,1
 8000eec:	42c00015 	stw	r11,0(r8)
 8000ef0:	45400115 	stw	r21,4(r8)
 8000ef4:	d8c12015 	stw	r3,1152(sp)
 8000ef8:	d8811f15 	stw	r2,1148(sp)
 8000efc:	010001c4 	movi	r4,7
 8000f00:	20824b16 	blt	r4,r2,8001830 <___vfprintf_internal_r+0x1190>
 8000f04:	42000204 	addi	r8,r8,8
 8000f08:	8880400c 	andi	r2,r17,256
 8000f0c:	1001761e 	bne	r2,zero,80014e8 <___vfprintf_internal_r+0xe48>
 8000f10:	d8811f17 	ldw	r2,1148(sp)
 8000f14:	db013117 	ldw	r12,1220(sp)
 8000f18:	1c87883a 	add	r3,r3,r18
 8000f1c:	10800044 	addi	r2,r2,1
 8000f20:	43000015 	stw	r12,0(r8)
 8000f24:	44800115 	stw	r18,4(r8)
 8000f28:	d8c12015 	stw	r3,1152(sp)
 8000f2c:	d8811f15 	stw	r2,1148(sp)
 8000f30:	010001c4 	movi	r4,7
 8000f34:	20822616 	blt	r4,r2,80017d0 <___vfprintf_internal_r+0x1130>
 8000f38:	42000204 	addi	r8,r8,8
 8000f3c:	8c40010c 	andi	r17,r17,4
 8000f40:	88003126 	beq	r17,zero,8001008 <___vfprintf_internal_r+0x968>
 8000f44:	db012e17 	ldw	r12,1208(sp)
 8000f48:	dac12b17 	ldw	r11,1196(sp)
 8000f4c:	62e1c83a 	sub	r16,r12,r11
 8000f50:	04002d0e 	bge	zero,r16,8001008 <___vfprintf_internal_r+0x968>
 8000f54:	04400404 	movi	r17,16
 8000f58:	d8811f17 	ldw	r2,1148(sp)
 8000f5c:	8c04df0e 	bge	r17,r16,80022dc <___vfprintf_internal_r+0x1c3c>
 8000f60:	01020074 	movhi	r4,2049
 8000f64:	213d7b84 	addi	r4,r4,-2578
 8000f68:	d9013615 	stw	r4,1240(sp)
 8000f6c:	048001c4 	movi	r18,7
 8000f70:	00000306 	br	8000f80 <___vfprintf_internal_r+0x8e0>
 8000f74:	843ffc04 	addi	r16,r16,-16
 8000f78:	42000204 	addi	r8,r8,8
 8000f7c:	8c00130e 	bge	r17,r16,8000fcc <___vfprintf_internal_r+0x92c>
 8000f80:	01420074 	movhi	r5,2049
 8000f84:	18c00404 	addi	r3,r3,16
 8000f88:	10800044 	addi	r2,r2,1
 8000f8c:	297d7b84 	addi	r5,r5,-2578
 8000f90:	41400015 	stw	r5,0(r8)
 8000f94:	44400115 	stw	r17,4(r8)
 8000f98:	d8c12015 	stw	r3,1152(sp)
 8000f9c:	d8811f15 	stw	r2,1148(sp)
 8000fa0:	90bff40e 	bge	r18,r2,8000f74 <__alt_data_end+0xfc000f74>
 8000fa4:	b009883a 	mov	r4,r22
 8000fa8:	b80b883a 	mov	r5,r23
 8000fac:	d9811e04 	addi	r6,sp,1144
 8000fb0:	8006de00 	call	8006de0 <__sprint_r>
 8000fb4:	103ed11e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8000fb8:	843ffc04 	addi	r16,r16,-16
 8000fbc:	d8c12017 	ldw	r3,1152(sp)
 8000fc0:	d8811f17 	ldw	r2,1148(sp)
 8000fc4:	da000404 	addi	r8,sp,16
 8000fc8:	8c3fed16 	blt	r17,r16,8000f80 <__alt_data_end+0xfc000f80>
 8000fcc:	dac13617 	ldw	r11,1240(sp)
 8000fd0:	1c07883a 	add	r3,r3,r16
 8000fd4:	10800044 	addi	r2,r2,1
 8000fd8:	42c00015 	stw	r11,0(r8)
 8000fdc:	44000115 	stw	r16,4(r8)
 8000fe0:	d8c12015 	stw	r3,1152(sp)
 8000fe4:	d8811f15 	stw	r2,1148(sp)
 8000fe8:	010001c4 	movi	r4,7
 8000fec:	2080060e 	bge	r4,r2,8001008 <___vfprintf_internal_r+0x968>
 8000ff0:	b009883a 	mov	r4,r22
 8000ff4:	b80b883a 	mov	r5,r23
 8000ff8:	d9811e04 	addi	r6,sp,1144
 8000ffc:	8006de00 	call	8006de0 <__sprint_r>
 8001000:	103ebe1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001004:	d8c12017 	ldw	r3,1152(sp)
 8001008:	d8812b17 	ldw	r2,1196(sp)
 800100c:	db012e17 	ldw	r12,1208(sp)
 8001010:	1300010e 	bge	r2,r12,8001018 <___vfprintf_internal_r+0x978>
 8001014:	6005883a 	mov	r2,r12
 8001018:	dac12f17 	ldw	r11,1212(sp)
 800101c:	5897883a 	add	r11,r11,r2
 8001020:	dac12f15 	stw	r11,1212(sp)
 8001024:	1801f21e 	bne	r3,zero,80017f0 <___vfprintf_internal_r+0x1150>
 8001028:	d8011f15 	stw	zero,1148(sp)
 800102c:	da000404 	addi	r8,sp,16
 8001030:	003dd806 	br	8000794 <__alt_data_end+0xfc000794>
 8001034:	8c400414 	ori	r17,r17,16
 8001038:	d8c12a15 	stw	r3,1192(sp)
 800103c:	88c0080c 	andi	r3,r17,32
 8001040:	d8812d17 	ldw	r2,1204(sp)
 8001044:	18004626 	beq	r3,zero,8001160 <___vfprintf_internal_r+0xac0>
 8001048:	dac12d17 	ldw	r11,1204(sp)
 800104c:	14c00017 	ldw	r19,0(r2)
 8001050:	17000117 	ldw	fp,4(r2)
 8001054:	5ac00204 	addi	r11,r11,8
 8001058:	dac12d15 	stw	r11,1204(sp)
 800105c:	00800044 	movi	r2,1
 8001060:	9f06b03a 	or	r3,r19,fp
 8001064:	003f0006 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001068:	1805883a 	mov	r2,r3
 800106c:	d8012e15 	stw	zero,1208(sp)
 8001070:	82fff404 	addi	r11,r16,-48
 8001074:	0019883a 	mov	r12,zero
 8001078:	14000007 	ldb	r16,0(r2)
 800107c:	630002a4 	muli	r12,r12,10
 8001080:	18c00044 	addi	r3,r3,1
 8001084:	1805883a 	mov	r2,r3
 8001088:	62d9883a 	add	r12,r12,r11
 800108c:	82fff404 	addi	r11,r16,-48
 8001090:	2afff92e 	bgeu	r5,r11,8001078 <__alt_data_end+0xfc001078>
 8001094:	db012e15 	stw	r12,1208(sp)
 8001098:	003de906 	br	8000840 <__alt_data_end+0xfc000840>
 800109c:	8c400414 	ori	r17,r17,16
 80010a0:	d8c12a15 	stw	r3,1192(sp)
 80010a4:	d9812785 	stb	r6,1182(sp)
 80010a8:	8880080c 	andi	r2,r17,32
 80010ac:	d8c12d17 	ldw	r3,1204(sp)
 80010b0:	10007a26 	beq	r2,zero,800129c <___vfprintf_internal_r+0xbfc>
 80010b4:	db012d17 	ldw	r12,1204(sp)
 80010b8:	18800117 	ldw	r2,4(r3)
 80010bc:	1cc00017 	ldw	r19,0(r3)
 80010c0:	63000204 	addi	r12,r12,8
 80010c4:	db012d15 	stw	r12,1204(sp)
 80010c8:	1039883a 	mov	fp,r2
 80010cc:	10031016 	blt	r2,zero,8001d10 <___vfprintf_internal_r+0x1670>
 80010d0:	dd412783 	ldbu	r21,1182(sp)
 80010d4:	da413215 	stw	r9,1224(sp)
 80010d8:	00800044 	movi	r2,1
 80010dc:	9f06b03a 	or	r3,r19,fp
 80010e0:	003ee406 	br	8000c74 <__alt_data_end+0xfc000c74>
 80010e4:	03020074 	movhi	r12,2049
 80010e8:	633d6b04 	addi	r12,r12,-2644
 80010ec:	d8c12a15 	stw	r3,1192(sp)
 80010f0:	d9812785 	stb	r6,1182(sp)
 80010f4:	db013b15 	stw	r12,1260(sp)
 80010f8:	88c0080c 	andi	r3,r17,32
 80010fc:	d8812d17 	ldw	r2,1204(sp)
 8001100:	18002b26 	beq	r3,zero,80011b0 <___vfprintf_internal_r+0xb10>
 8001104:	dac12d17 	ldw	r11,1204(sp)
 8001108:	14c00017 	ldw	r19,0(r2)
 800110c:	17000117 	ldw	fp,4(r2)
 8001110:	5ac00204 	addi	r11,r11,8
 8001114:	dac12d15 	stw	r11,1204(sp)
 8001118:	8880004c 	andi	r2,r17,1
 800111c:	10025b26 	beq	r2,zero,8001a8c <___vfprintf_internal_r+0x13ec>
 8001120:	9f06b03a 	or	r3,r19,fp
 8001124:	18037026 	beq	r3,zero,8001ee8 <___vfprintf_internal_r+0x1848>
 8001128:	00800c04 	movi	r2,48
 800112c:	d8812705 	stb	r2,1180(sp)
 8001130:	dc012745 	stb	r16,1181(sp)
 8001134:	8c400094 	ori	r17,r17,2
 8001138:	00800084 	movi	r2,2
 800113c:	003eca06 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001140:	8c400814 	ori	r17,r17,32
 8001144:	1805883a 	mov	r2,r3
 8001148:	1c000007 	ldb	r16,0(r3)
 800114c:	003dbb06 	br	800083c <__alt_data_end+0xfc00083c>
 8001150:	d8c12a15 	stw	r3,1192(sp)
 8001154:	88c0080c 	andi	r3,r17,32
 8001158:	d8812d17 	ldw	r2,1204(sp)
 800115c:	183fba1e 	bne	r3,zero,8001048 <__alt_data_end+0xfc001048>
 8001160:	88c0040c 	andi	r3,r17,16
 8001164:	18024c1e 	bne	r3,zero,8001a98 <___vfprintf_internal_r+0x13f8>
 8001168:	88c0100c 	andi	r3,r17,64
 800116c:	18024a26 	beq	r3,zero,8001a98 <___vfprintf_internal_r+0x13f8>
 8001170:	dac12d17 	ldw	r11,1204(sp)
 8001174:	14c0000b 	ldhu	r19,0(r2)
 8001178:	0039883a 	mov	fp,zero
 800117c:	5ac00104 	addi	r11,r11,4
 8001180:	dac12d15 	stw	r11,1204(sp)
 8001184:	00800044 	movi	r2,1
 8001188:	9807883a 	mov	r3,r19
 800118c:	003eb606 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001190:	00820074 	movhi	r2,2049
 8001194:	10bd7004 	addi	r2,r2,-2624
 8001198:	d8c12a15 	stw	r3,1192(sp)
 800119c:	d8813b15 	stw	r2,1260(sp)
 80011a0:	d9812785 	stb	r6,1182(sp)
 80011a4:	88c0080c 	andi	r3,r17,32
 80011a8:	d8812d17 	ldw	r2,1204(sp)
 80011ac:	183fd51e 	bne	r3,zero,8001104 <__alt_data_end+0xfc001104>
 80011b0:	88c0040c 	andi	r3,r17,16
 80011b4:	18034126 	beq	r3,zero,8001ebc <___vfprintf_internal_r+0x181c>
 80011b8:	db012d17 	ldw	r12,1204(sp)
 80011bc:	14c00017 	ldw	r19,0(r2)
 80011c0:	0039883a 	mov	fp,zero
 80011c4:	63000104 	addi	r12,r12,4
 80011c8:	db012d15 	stw	r12,1204(sp)
 80011cc:	003fd206 	br	8001118 <__alt_data_end+0xfc001118>
 80011d0:	1c000007 	ldb	r16,0(r3)
 80011d4:	81c3d626 	beq	r16,r7,8002130 <___vfprintf_internal_r+0x1a90>
 80011d8:	8c400414 	ori	r17,r17,16
 80011dc:	1805883a 	mov	r2,r3
 80011e0:	003d9606 	br	800083c <__alt_data_end+0xfc00083c>
 80011e4:	d8c12a15 	stw	r3,1192(sp)
 80011e8:	d9812785 	stb	r6,1182(sp)
 80011ec:	8880080c 	andi	r2,r17,32
 80011f0:	10033f26 	beq	r2,zero,8001ef0 <___vfprintf_internal_r+0x1850>
 80011f4:	db012d17 	ldw	r12,1204(sp)
 80011f8:	dac12f17 	ldw	r11,1212(sp)
 80011fc:	60800017 	ldw	r2,0(r12)
 8001200:	5807d7fa 	srai	r3,r11,31
 8001204:	63000104 	addi	r12,r12,4
 8001208:	db012d15 	stw	r12,1204(sp)
 800120c:	12c00015 	stw	r11,0(r2)
 8001210:	10c00115 	stw	r3,4(r2)
 8001214:	003d5f06 	br	8000794 <__alt_data_end+0xfc000794>
 8001218:	d8c12a15 	stw	r3,1192(sp)
 800121c:	88c0080c 	andi	r3,r17,32
 8001220:	d8812d17 	ldw	r2,1204(sp)
 8001224:	183e891e 	bne	r3,zero,8000c4c <__alt_data_end+0xfc000c4c>
 8001228:	88c0040c 	andi	r3,r17,16
 800122c:	1801ea1e 	bne	r3,zero,80019d8 <___vfprintf_internal_r+0x1338>
 8001230:	88c0100c 	andi	r3,r17,64
 8001234:	1801e826 	beq	r3,zero,80019d8 <___vfprintf_internal_r+0x1338>
 8001238:	db012d17 	ldw	r12,1204(sp)
 800123c:	14c0000b 	ldhu	r19,0(r2)
 8001240:	0039883a 	mov	fp,zero
 8001244:	63000104 	addi	r12,r12,4
 8001248:	db012d15 	stw	r12,1204(sp)
 800124c:	0005883a 	mov	r2,zero
 8001250:	9807883a 	mov	r3,r19
 8001254:	003e8406 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001258:	30803fcc 	andi	r2,r6,255
 800125c:	1080201c 	xori	r2,r2,128
 8001260:	10bfe004 	addi	r2,r2,-128
 8001264:	10031d1e 	bne	r2,zero,8001edc <___vfprintf_internal_r+0x183c>
 8001268:	1805883a 	mov	r2,r3
 800126c:	01800804 	movi	r6,32
 8001270:	1c000007 	ldb	r16,0(r3)
 8001274:	003d7106 	br	800083c <__alt_data_end+0xfc00083c>
 8001278:	8c400054 	ori	r17,r17,1
 800127c:	1805883a 	mov	r2,r3
 8001280:	1c000007 	ldb	r16,0(r3)
 8001284:	003d6d06 	br	800083c <__alt_data_end+0xfc00083c>
 8001288:	d8c12a15 	stw	r3,1192(sp)
 800128c:	d9812785 	stb	r6,1182(sp)
 8001290:	8880080c 	andi	r2,r17,32
 8001294:	d8c12d17 	ldw	r3,1204(sp)
 8001298:	103f861e 	bne	r2,zero,80010b4 <__alt_data_end+0xfc0010b4>
 800129c:	8880040c 	andi	r2,r17,16
 80012a0:	1001f31e 	bne	r2,zero,8001a70 <___vfprintf_internal_r+0x13d0>
 80012a4:	8880100c 	andi	r2,r17,64
 80012a8:	1001f126 	beq	r2,zero,8001a70 <___vfprintf_internal_r+0x13d0>
 80012ac:	1cc0000f 	ldh	r19,0(r3)
 80012b0:	db012d17 	ldw	r12,1204(sp)
 80012b4:	9839d7fa 	srai	fp,r19,31
 80012b8:	63000104 	addi	r12,r12,4
 80012bc:	db012d15 	stw	r12,1204(sp)
 80012c0:	e005883a 	mov	r2,fp
 80012c4:	003f8106 	br	80010cc <__alt_data_end+0xfc0010cc>
 80012c8:	8c401014 	ori	r17,r17,64
 80012cc:	1805883a 	mov	r2,r3
 80012d0:	1c000007 	ldb	r16,0(r3)
 80012d4:	003d5906 	br	800083c <__alt_data_end+0xfc00083c>
 80012d8:	db012d17 	ldw	r12,1204(sp)
 80012dc:	d8c12a15 	stw	r3,1192(sp)
 80012e0:	00c00044 	movi	r3,1
 80012e4:	60800017 	ldw	r2,0(r12)
 80012e8:	63000104 	addi	r12,r12,4
 80012ec:	d8c12b15 	stw	r3,1196(sp)
 80012f0:	d8012785 	stb	zero,1182(sp)
 80012f4:	d8810405 	stb	r2,1040(sp)
 80012f8:	db012d15 	stw	r12,1204(sp)
 80012fc:	dac10404 	addi	r11,sp,1040
 8001300:	1825883a 	mov	r18,r3
 8001304:	d8013215 	stw	zero,1224(sp)
 8001308:	d8013415 	stw	zero,1232(sp)
 800130c:	dac13115 	stw	r11,1220(sp)
 8001310:	0005883a 	mov	r2,zero
 8001314:	003e7d06 	br	8000d0c <__alt_data_end+0xfc000d0c>
 8001318:	db012d17 	ldw	r12,1204(sp)
 800131c:	00800c04 	movi	r2,48
 8001320:	d8812705 	stb	r2,1180(sp)
 8001324:	64c00017 	ldw	r19,0(r12)
 8001328:	00801e04 	movi	r2,120
 800132c:	d8812745 	stb	r2,1181(sp)
 8001330:	00820074 	movhi	r2,2049
 8001334:	10bd7004 	addi	r2,r2,-2624
 8001338:	63000104 	addi	r12,r12,4
 800133c:	d8c12a15 	stw	r3,1192(sp)
 8001340:	d8813b15 	stw	r2,1260(sp)
 8001344:	0039883a 	mov	fp,zero
 8001348:	8c400094 	ori	r17,r17,2
 800134c:	db012d15 	stw	r12,1204(sp)
 8001350:	00800084 	movi	r2,2
 8001354:	04001e04 	movi	r16,120
 8001358:	9807883a 	mov	r3,r19
 800135c:	003e4206 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001360:	dac12d17 	ldw	r11,1204(sp)
 8001364:	db012d17 	ldw	r12,1204(sp)
 8001368:	d8c12a15 	stw	r3,1192(sp)
 800136c:	5ac00017 	ldw	r11,0(r11)
 8001370:	d8012785 	stb	zero,1182(sp)
 8001374:	64c00104 	addi	r19,r12,4
 8001378:	dac13115 	stw	r11,1220(sp)
 800137c:	5803e826 	beq	r11,zero,8002320 <___vfprintf_internal_r+0x1c80>
 8001380:	d9013117 	ldw	r4,1220(sp)
 8001384:	48037a16 	blt	r9,zero,8002170 <___vfprintf_internal_r+0x1ad0>
 8001388:	480d883a 	mov	r6,r9
 800138c:	000b883a 	mov	r5,zero
 8001390:	da013f15 	stw	r8,1276(sp)
 8001394:	da413e15 	stw	r9,1272(sp)
 8001398:	80056d40 	call	80056d4 <memchr>
 800139c:	da013f17 	ldw	r8,1276(sp)
 80013a0:	da413e17 	ldw	r9,1272(sp)
 80013a4:	10044426 	beq	r2,zero,80024b8 <___vfprintf_internal_r+0x1e18>
 80013a8:	d8c13117 	ldw	r3,1220(sp)
 80013ac:	10e5c83a 	sub	r18,r2,r3
 80013b0:	4c834416 	blt	r9,r18,80020c4 <___vfprintf_internal_r+0x1a24>
 80013b4:	9005883a 	mov	r2,r18
 80013b8:	90037216 	blt	r18,zero,8002184 <___vfprintf_internal_r+0x1ae4>
 80013bc:	dd412783 	ldbu	r21,1182(sp)
 80013c0:	d8812b15 	stw	r2,1196(sp)
 80013c4:	dcc12d15 	stw	r19,1204(sp)
 80013c8:	d8013215 	stw	zero,1224(sp)
 80013cc:	d8013415 	stw	zero,1232(sp)
 80013d0:	003e4706 	br	8000cf0 <__alt_data_end+0xfc000cf0>
 80013d4:	dac12d17 	ldw	r11,1204(sp)
 80013d8:	db012d17 	ldw	r12,1204(sp)
 80013dc:	5ac00017 	ldw	r11,0(r11)
 80013e0:	dac12e15 	stw	r11,1208(sp)
 80013e4:	62c00104 	addi	r11,r12,4
 80013e8:	db012e17 	ldw	r12,1208(sp)
 80013ec:	60034a16 	blt	r12,zero,8002118 <___vfprintf_internal_r+0x1a78>
 80013f0:	dac12d15 	stw	r11,1204(sp)
 80013f4:	1805883a 	mov	r2,r3
 80013f8:	1c000007 	ldb	r16,0(r3)
 80013fc:	003d0f06 	br	800083c <__alt_data_end+0xfc00083c>
 8001400:	1805883a 	mov	r2,r3
 8001404:	01800ac4 	movi	r6,43
 8001408:	1c000007 	ldb	r16,0(r3)
 800140c:	003d0b06 	br	800083c <__alt_data_end+0xfc00083c>
 8001410:	d8c12a15 	stw	r3,1192(sp)
 8001414:	d9812785 	stb	r6,1182(sp)
 8001418:	803db226 	beq	r16,zero,8000ae4 <__alt_data_end+0xfc000ae4>
 800141c:	00c00044 	movi	r3,1
 8001420:	d8c12b15 	stw	r3,1196(sp)
 8001424:	dc010405 	stb	r16,1040(sp)
 8001428:	d8012785 	stb	zero,1182(sp)
 800142c:	003fb306 	br	80012fc <__alt_data_end+0xfc0012fc>
 8001430:	d8c12017 	ldw	r3,1152(sp)
 8001434:	003e6d06 	br	8000dec <__alt_data_end+0xfc000dec>
 8001438:	10803fcc 	andi	r2,r2,255
 800143c:	00c00044 	movi	r3,1
 8001440:	10fe141e 	bne	r2,r3,8000c94 <__alt_data_end+0xfc000c94>
 8001444:	e000021e 	bne	fp,zero,8001450 <___vfprintf_internal_r+0xdb0>
 8001448:	00800244 	movi	r2,9
 800144c:	14c0202e 	bgeu	r2,r19,80014d0 <___vfprintf_internal_r+0xe30>
 8001450:	dc012b15 	stw	r16,1196(sp)
 8001454:	dc412c15 	stw	r17,1200(sp)
 8001458:	9821883a 	mov	r16,r19
 800145c:	e023883a 	mov	r17,fp
 8001460:	dc810e04 	addi	r18,sp,1080
 8001464:	4027883a 	mov	r19,r8
 8001468:	4839883a 	mov	fp,r9
 800146c:	8009883a 	mov	r4,r16
 8001470:	880b883a 	mov	r5,r17
 8001474:	01800284 	movi	r6,10
 8001478:	000f883a 	mov	r7,zero
 800147c:	8009c100 	call	8009c10 <__umoddi3>
 8001480:	10800c04 	addi	r2,r2,48
 8001484:	94bfffc4 	addi	r18,r18,-1
 8001488:	8009883a 	mov	r4,r16
 800148c:	880b883a 	mov	r5,r17
 8001490:	01800284 	movi	r6,10
 8001494:	000f883a 	mov	r7,zero
 8001498:	90800005 	stb	r2,0(r18)
 800149c:	80096500 	call	8009650 <__udivdi3>
 80014a0:	1021883a 	mov	r16,r2
 80014a4:	10c4b03a 	or	r2,r2,r3
 80014a8:	1823883a 	mov	r17,r3
 80014ac:	103fef1e 	bne	r2,zero,800146c <__alt_data_end+0xfc00146c>
 80014b0:	dac12817 	ldw	r11,1184(sp)
 80014b4:	dc813115 	stw	r18,1220(sp)
 80014b8:	dc012b17 	ldw	r16,1196(sp)
 80014bc:	9811883a 	mov	r8,r19
 80014c0:	dc412c17 	ldw	r17,1200(sp)
 80014c4:	e013883a 	mov	r9,fp
 80014c8:	5ca5c83a 	sub	r18,r11,r18
 80014cc:	003e0306 	br	8000cdc <__alt_data_end+0xfc000cdc>
 80014d0:	9cc00c04 	addi	r19,r19,48
 80014d4:	d8c10dc4 	addi	r3,sp,1079
 80014d8:	dcc10dc5 	stb	r19,1079(sp)
 80014dc:	dc813c17 	ldw	r18,1264(sp)
 80014e0:	d8c13115 	stw	r3,1220(sp)
 80014e4:	003dfd06 	br	8000cdc <__alt_data_end+0xfc000cdc>
 80014e8:	00801944 	movi	r2,101
 80014ec:	1400710e 	bge	r2,r16,80016b4 <___vfprintf_internal_r+0x1014>
 80014f0:	d9013717 	ldw	r4,1244(sp)
 80014f4:	d9413917 	ldw	r5,1252(sp)
 80014f8:	000d883a 	mov	r6,zero
 80014fc:	000f883a 	mov	r7,zero
 8001500:	d8c13d15 	stw	r3,1268(sp)
 8001504:	da013f15 	stw	r8,1276(sp)
 8001508:	800b4340 	call	800b434 <__eqdf2>
 800150c:	d8c13d17 	ldw	r3,1268(sp)
 8001510:	da013f17 	ldw	r8,1276(sp)
 8001514:	1000ef1e 	bne	r2,zero,80018d4 <___vfprintf_internal_r+0x1234>
 8001518:	d8811f17 	ldw	r2,1148(sp)
 800151c:	01020074 	movhi	r4,2049
 8001520:	213d7704 	addi	r4,r4,-2596
 8001524:	18c00044 	addi	r3,r3,1
 8001528:	10800044 	addi	r2,r2,1
 800152c:	41000015 	stw	r4,0(r8)
 8001530:	01000044 	movi	r4,1
 8001534:	41000115 	stw	r4,4(r8)
 8001538:	d8c12015 	stw	r3,1152(sp)
 800153c:	d8811f15 	stw	r2,1148(sp)
 8001540:	010001c4 	movi	r4,7
 8001544:	20828e16 	blt	r4,r2,8001f80 <___vfprintf_internal_r+0x18e0>
 8001548:	42000204 	addi	r8,r8,8
 800154c:	d8812617 	ldw	r2,1176(sp)
 8001550:	dac13317 	ldw	r11,1228(sp)
 8001554:	12c00216 	blt	r2,r11,8001560 <___vfprintf_internal_r+0xec0>
 8001558:	8880004c 	andi	r2,r17,1
 800155c:	103e7726 	beq	r2,zero,8000f3c <__alt_data_end+0xfc000f3c>
 8001560:	db013817 	ldw	r12,1248(sp)
 8001564:	d8811f17 	ldw	r2,1148(sp)
 8001568:	dac13517 	ldw	r11,1236(sp)
 800156c:	1b07883a 	add	r3,r3,r12
 8001570:	10800044 	addi	r2,r2,1
 8001574:	42c00015 	stw	r11,0(r8)
 8001578:	43000115 	stw	r12,4(r8)
 800157c:	d8c12015 	stw	r3,1152(sp)
 8001580:	d8811f15 	stw	r2,1148(sp)
 8001584:	010001c4 	movi	r4,7
 8001588:	2082ed16 	blt	r4,r2,8002140 <___vfprintf_internal_r+0x1aa0>
 800158c:	42000204 	addi	r8,r8,8
 8001590:	db013317 	ldw	r12,1228(sp)
 8001594:	643fffc4 	addi	r16,r12,-1
 8001598:	043e680e 	bge	zero,r16,8000f3c <__alt_data_end+0xfc000f3c>
 800159c:	04800404 	movi	r18,16
 80015a0:	d8811f17 	ldw	r2,1148(sp)
 80015a4:	94007e0e 	bge	r18,r16,80017a0 <___vfprintf_internal_r+0x1100>
 80015a8:	01420074 	movhi	r5,2049
 80015ac:	297d7784 	addi	r5,r5,-2594
 80015b0:	d9412c15 	stw	r5,1200(sp)
 80015b4:	054001c4 	movi	r21,7
 80015b8:	00000306 	br	80015c8 <___vfprintf_internal_r+0xf28>
 80015bc:	42000204 	addi	r8,r8,8
 80015c0:	843ffc04 	addi	r16,r16,-16
 80015c4:	9400790e 	bge	r18,r16,80017ac <___vfprintf_internal_r+0x110c>
 80015c8:	18c00404 	addi	r3,r3,16
 80015cc:	10800044 	addi	r2,r2,1
 80015d0:	45000015 	stw	r20,0(r8)
 80015d4:	44800115 	stw	r18,4(r8)
 80015d8:	d8c12015 	stw	r3,1152(sp)
 80015dc:	d8811f15 	stw	r2,1148(sp)
 80015e0:	a8bff60e 	bge	r21,r2,80015bc <__alt_data_end+0xfc0015bc>
 80015e4:	b009883a 	mov	r4,r22
 80015e8:	b80b883a 	mov	r5,r23
 80015ec:	d9811e04 	addi	r6,sp,1144
 80015f0:	8006de00 	call	8006de0 <__sprint_r>
 80015f4:	103d411e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 80015f8:	d8c12017 	ldw	r3,1152(sp)
 80015fc:	d8811f17 	ldw	r2,1148(sp)
 8001600:	da000404 	addi	r8,sp,16
 8001604:	003fee06 	br	80015c0 <__alt_data_end+0xfc0015c0>
 8001608:	dac12e17 	ldw	r11,1208(sp)
 800160c:	db012b17 	ldw	r12,1196(sp)
 8001610:	5b2bc83a 	sub	r21,r11,r12
 8001614:	057e130e 	bge	zero,r21,8000e64 <__alt_data_end+0xfc000e64>
 8001618:	07000404 	movi	fp,16
 800161c:	d8811f17 	ldw	r2,1148(sp)
 8001620:	e543640e 	bge	fp,r21,80023b4 <___vfprintf_internal_r+0x1d14>
 8001624:	01420074 	movhi	r5,2049
 8001628:	297d7784 	addi	r5,r5,-2594
 800162c:	d9412c15 	stw	r5,1200(sp)
 8001630:	04c001c4 	movi	r19,7
 8001634:	00000306 	br	8001644 <___vfprintf_internal_r+0xfa4>
 8001638:	ad7ffc04 	addi	r21,r21,-16
 800163c:	42000204 	addi	r8,r8,8
 8001640:	e540110e 	bge	fp,r21,8001688 <___vfprintf_internal_r+0xfe8>
 8001644:	18c00404 	addi	r3,r3,16
 8001648:	10800044 	addi	r2,r2,1
 800164c:	45000015 	stw	r20,0(r8)
 8001650:	47000115 	stw	fp,4(r8)
 8001654:	d8c12015 	stw	r3,1152(sp)
 8001658:	d8811f15 	stw	r2,1148(sp)
 800165c:	98bff60e 	bge	r19,r2,8001638 <__alt_data_end+0xfc001638>
 8001660:	b009883a 	mov	r4,r22
 8001664:	b80b883a 	mov	r5,r23
 8001668:	d9811e04 	addi	r6,sp,1144
 800166c:	8006de00 	call	8006de0 <__sprint_r>
 8001670:	103d221e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001674:	ad7ffc04 	addi	r21,r21,-16
 8001678:	d8c12017 	ldw	r3,1152(sp)
 800167c:	d8811f17 	ldw	r2,1148(sp)
 8001680:	da000404 	addi	r8,sp,16
 8001684:	e57fef16 	blt	fp,r21,8001644 <__alt_data_end+0xfc001644>
 8001688:	dac12c17 	ldw	r11,1200(sp)
 800168c:	1d47883a 	add	r3,r3,r21
 8001690:	10800044 	addi	r2,r2,1
 8001694:	42c00015 	stw	r11,0(r8)
 8001698:	45400115 	stw	r21,4(r8)
 800169c:	d8c12015 	stw	r3,1152(sp)
 80016a0:	d8811f15 	stw	r2,1148(sp)
 80016a4:	010001c4 	movi	r4,7
 80016a8:	20819116 	blt	r4,r2,8001cf0 <___vfprintf_internal_r+0x1650>
 80016ac:	42000204 	addi	r8,r8,8
 80016b0:	003dec06 	br	8000e64 <__alt_data_end+0xfc000e64>
 80016b4:	db013317 	ldw	r12,1228(sp)
 80016b8:	00800044 	movi	r2,1
 80016bc:	18c00044 	addi	r3,r3,1
 80016c0:	1301530e 	bge	r2,r12,8001c10 <___vfprintf_internal_r+0x1570>
 80016c4:	dc011f17 	ldw	r16,1148(sp)
 80016c8:	dac13117 	ldw	r11,1220(sp)
 80016cc:	00800044 	movi	r2,1
 80016d0:	84000044 	addi	r16,r16,1
 80016d4:	40800115 	stw	r2,4(r8)
 80016d8:	42c00015 	stw	r11,0(r8)
 80016dc:	d8c12015 	stw	r3,1152(sp)
 80016e0:	dc011f15 	stw	r16,1148(sp)
 80016e4:	008001c4 	movi	r2,7
 80016e8:	14016b16 	blt	r2,r16,8001c98 <___vfprintf_internal_r+0x15f8>
 80016ec:	42000204 	addi	r8,r8,8
 80016f0:	db013817 	ldw	r12,1248(sp)
 80016f4:	dac13517 	ldw	r11,1236(sp)
 80016f8:	84000044 	addi	r16,r16,1
 80016fc:	1b07883a 	add	r3,r3,r12
 8001700:	42c00015 	stw	r11,0(r8)
 8001704:	43000115 	stw	r12,4(r8)
 8001708:	d8c12015 	stw	r3,1152(sp)
 800170c:	dc011f15 	stw	r16,1148(sp)
 8001710:	008001c4 	movi	r2,7
 8001714:	14016916 	blt	r2,r16,8001cbc <___vfprintf_internal_r+0x161c>
 8001718:	44800204 	addi	r18,r8,8
 800171c:	d9013717 	ldw	r4,1244(sp)
 8001720:	d9413917 	ldw	r5,1252(sp)
 8001724:	000d883a 	mov	r6,zero
 8001728:	000f883a 	mov	r7,zero
 800172c:	d8c13d15 	stw	r3,1268(sp)
 8001730:	800b4340 	call	800b434 <__eqdf2>
 8001734:	d8c13d17 	ldw	r3,1268(sp)
 8001738:	db013317 	ldw	r12,1228(sp)
 800173c:	1000ae26 	beq	r2,zero,80019f8 <___vfprintf_internal_r+0x1358>
 8001740:	dac13117 	ldw	r11,1220(sp)
 8001744:	60bfffc4 	addi	r2,r12,-1
 8001748:	1887883a 	add	r3,r3,r2
 800174c:	59000044 	addi	r4,r11,1
 8001750:	84000044 	addi	r16,r16,1
 8001754:	90800115 	stw	r2,4(r18)
 8001758:	91000015 	stw	r4,0(r18)
 800175c:	d8c12015 	stw	r3,1152(sp)
 8001760:	dc011f15 	stw	r16,1148(sp)
 8001764:	008001c4 	movi	r2,7
 8001768:	14014216 	blt	r2,r16,8001c74 <___vfprintf_internal_r+0x15d4>
 800176c:	94800204 	addi	r18,r18,8
 8001770:	dac13a17 	ldw	r11,1256(sp)
 8001774:	dd4122c4 	addi	r21,sp,1163
 8001778:	84000044 	addi	r16,r16,1
 800177c:	58c7883a 	add	r3,r11,r3
 8001780:	95400015 	stw	r21,0(r18)
 8001784:	92c00115 	stw	r11,4(r18)
 8001788:	d8c12015 	stw	r3,1152(sp)
 800178c:	dc011f15 	stw	r16,1148(sp)
 8001790:	008001c4 	movi	r2,7
 8001794:	14000e16 	blt	r2,r16,80017d0 <___vfprintf_internal_r+0x1130>
 8001798:	92000204 	addi	r8,r18,8
 800179c:	003de706 	br	8000f3c <__alt_data_end+0xfc000f3c>
 80017a0:	01020074 	movhi	r4,2049
 80017a4:	213d7784 	addi	r4,r4,-2594
 80017a8:	d9012c15 	stw	r4,1200(sp)
 80017ac:	dac12c17 	ldw	r11,1200(sp)
 80017b0:	1c07883a 	add	r3,r3,r16
 80017b4:	44000115 	stw	r16,4(r8)
 80017b8:	42c00015 	stw	r11,0(r8)
 80017bc:	10800044 	addi	r2,r2,1
 80017c0:	d8c12015 	stw	r3,1152(sp)
 80017c4:	d8811f15 	stw	r2,1148(sp)
 80017c8:	010001c4 	movi	r4,7
 80017cc:	20bdda0e 	bge	r4,r2,8000f38 <__alt_data_end+0xfc000f38>
 80017d0:	b009883a 	mov	r4,r22
 80017d4:	b80b883a 	mov	r5,r23
 80017d8:	d9811e04 	addi	r6,sp,1144
 80017dc:	8006de00 	call	8006de0 <__sprint_r>
 80017e0:	103cc61e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 80017e4:	d8c12017 	ldw	r3,1152(sp)
 80017e8:	da000404 	addi	r8,sp,16
 80017ec:	003dd306 	br	8000f3c <__alt_data_end+0xfc000f3c>
 80017f0:	b009883a 	mov	r4,r22
 80017f4:	b80b883a 	mov	r5,r23
 80017f8:	d9811e04 	addi	r6,sp,1144
 80017fc:	8006de00 	call	8006de0 <__sprint_r>
 8001800:	103e0926 	beq	r2,zero,8001028 <__alt_data_end+0xfc001028>
 8001804:	003cbd06 	br	8000afc <__alt_data_end+0xfc000afc>
 8001808:	10803fcc 	andi	r2,r2,255
 800180c:	1000651e 	bne	r2,zero,80019a4 <___vfprintf_internal_r+0x1304>
 8001810:	8880004c 	andi	r2,r17,1
 8001814:	10013226 	beq	r2,zero,8001ce0 <___vfprintf_internal_r+0x1640>
 8001818:	00800c04 	movi	r2,48
 800181c:	d8c10dc4 	addi	r3,sp,1079
 8001820:	d8810dc5 	stb	r2,1079(sp)
 8001824:	dc813c17 	ldw	r18,1264(sp)
 8001828:	d8c13115 	stw	r3,1220(sp)
 800182c:	003d2b06 	br	8000cdc <__alt_data_end+0xfc000cdc>
 8001830:	b009883a 	mov	r4,r22
 8001834:	b80b883a 	mov	r5,r23
 8001838:	d9811e04 	addi	r6,sp,1144
 800183c:	8006de00 	call	8006de0 <__sprint_r>
 8001840:	103cae1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001844:	d8c12017 	ldw	r3,1152(sp)
 8001848:	da000404 	addi	r8,sp,16
 800184c:	003dae06 	br	8000f08 <__alt_data_end+0xfc000f08>
 8001850:	b009883a 	mov	r4,r22
 8001854:	b80b883a 	mov	r5,r23
 8001858:	d9811e04 	addi	r6,sp,1144
 800185c:	8006de00 	call	8006de0 <__sprint_r>
 8001860:	103ca61e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001864:	d8c12017 	ldw	r3,1152(sp)
 8001868:	da000404 	addi	r8,sp,16
 800186c:	003d6c06 	br	8000e20 <__alt_data_end+0xfc000e20>
 8001870:	b009883a 	mov	r4,r22
 8001874:	b80b883a 	mov	r5,r23
 8001878:	d9811e04 	addi	r6,sp,1144
 800187c:	8006de00 	call	8006de0 <__sprint_r>
 8001880:	103c9e1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001884:	d8c12017 	ldw	r3,1152(sp)
 8001888:	da000404 	addi	r8,sp,16
 800188c:	003d7206 	br	8000e58 <__alt_data_end+0xfc000e58>
 8001890:	d9413b17 	ldw	r5,1260(sp)
 8001894:	d8c10e04 	addi	r3,sp,1080
 8001898:	988003cc 	andi	r2,r19,15
 800189c:	e008973a 	slli	r4,fp,28
 80018a0:	2885883a 	add	r2,r5,r2
 80018a4:	9826d13a 	srli	r19,r19,4
 80018a8:	10800003 	ldbu	r2,0(r2)
 80018ac:	e038d13a 	srli	fp,fp,4
 80018b0:	18ffffc4 	addi	r3,r3,-1
 80018b4:	24e6b03a 	or	r19,r4,r19
 80018b8:	18800005 	stb	r2,0(r3)
 80018bc:	9f04b03a 	or	r2,r19,fp
 80018c0:	103ff51e 	bne	r2,zero,8001898 <__alt_data_end+0xfc001898>
 80018c4:	db012817 	ldw	r12,1184(sp)
 80018c8:	d8c13115 	stw	r3,1220(sp)
 80018cc:	60e5c83a 	sub	r18,r12,r3
 80018d0:	003d0206 	br	8000cdc <__alt_data_end+0xfc000cdc>
 80018d4:	dc012617 	ldw	r16,1176(sp)
 80018d8:	0401b10e 	bge	zero,r16,8001fa0 <___vfprintf_internal_r+0x1900>
 80018dc:	db013117 	ldw	r12,1220(sp)
 80018e0:	dac13317 	ldw	r11,1228(sp)
 80018e4:	62e1883a 	add	r16,r12,r11
 80018e8:	db013417 	ldw	r12,1232(sp)
 80018ec:	5825883a 	mov	r18,r11
 80018f0:	62c0010e 	bge	r12,r11,80018f8 <___vfprintf_internal_r+0x1258>
 80018f4:	6025883a 	mov	r18,r12
 80018f8:	04800b0e 	bge	zero,r18,8001928 <___vfprintf_internal_r+0x1288>
 80018fc:	d8811f17 	ldw	r2,1148(sp)
 8001900:	dac13117 	ldw	r11,1220(sp)
 8001904:	1c87883a 	add	r3,r3,r18
 8001908:	10800044 	addi	r2,r2,1
 800190c:	42c00015 	stw	r11,0(r8)
 8001910:	44800115 	stw	r18,4(r8)
 8001914:	d8c12015 	stw	r3,1152(sp)
 8001918:	d8811f15 	stw	r2,1148(sp)
 800191c:	010001c4 	movi	r4,7
 8001920:	20824f16 	blt	r4,r2,8002260 <___vfprintf_internal_r+0x1bc0>
 8001924:	42000204 	addi	r8,r8,8
 8001928:	90024b16 	blt	r18,zero,8002258 <___vfprintf_internal_r+0x1bb8>
 800192c:	db013417 	ldw	r12,1232(sp)
 8001930:	64a5c83a 	sub	r18,r12,r18
 8001934:	0480730e 	bge	zero,r18,8001b04 <___vfprintf_internal_r+0x1464>
 8001938:	05400404 	movi	r21,16
 800193c:	d8811f17 	ldw	r2,1148(sp)
 8001940:	ac817d0e 	bge	r21,r18,8001f38 <___vfprintf_internal_r+0x1898>
 8001944:	01420074 	movhi	r5,2049
 8001948:	297d7784 	addi	r5,r5,-2594
 800194c:	d9412c15 	stw	r5,1200(sp)
 8001950:	070001c4 	movi	fp,7
 8001954:	00000306 	br	8001964 <___vfprintf_internal_r+0x12c4>
 8001958:	42000204 	addi	r8,r8,8
 800195c:	94bffc04 	addi	r18,r18,-16
 8001960:	ac81780e 	bge	r21,r18,8001f44 <___vfprintf_internal_r+0x18a4>
 8001964:	18c00404 	addi	r3,r3,16
 8001968:	10800044 	addi	r2,r2,1
 800196c:	45000015 	stw	r20,0(r8)
 8001970:	45400115 	stw	r21,4(r8)
 8001974:	d8c12015 	stw	r3,1152(sp)
 8001978:	d8811f15 	stw	r2,1148(sp)
 800197c:	e0bff60e 	bge	fp,r2,8001958 <__alt_data_end+0xfc001958>
 8001980:	b009883a 	mov	r4,r22
 8001984:	b80b883a 	mov	r5,r23
 8001988:	d9811e04 	addi	r6,sp,1144
 800198c:	8006de00 	call	8006de0 <__sprint_r>
 8001990:	103c5a1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001994:	d8c12017 	ldw	r3,1152(sp)
 8001998:	d8811f17 	ldw	r2,1148(sp)
 800199c:	da000404 	addi	r8,sp,16
 80019a0:	003fee06 	br	800195c <__alt_data_end+0xfc00195c>
 80019a4:	dac10e04 	addi	r11,sp,1080
 80019a8:	0025883a 	mov	r18,zero
 80019ac:	dac13115 	stw	r11,1220(sp)
 80019b0:	003cca06 	br	8000cdc <__alt_data_end+0xfc000cdc>
 80019b4:	b009883a 	mov	r4,r22
 80019b8:	b80b883a 	mov	r5,r23
 80019bc:	d9811e04 	addi	r6,sp,1144
 80019c0:	8006de00 	call	8006de0 <__sprint_r>
 80019c4:	103c4d1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 80019c8:	d8c12017 	ldw	r3,1152(sp)
 80019cc:	d8812787 	ldb	r2,1182(sp)
 80019d0:	da000404 	addi	r8,sp,16
 80019d4:	003d0506 	br	8000dec <__alt_data_end+0xfc000dec>
 80019d8:	dac12d17 	ldw	r11,1204(sp)
 80019dc:	14c00017 	ldw	r19,0(r2)
 80019e0:	0039883a 	mov	fp,zero
 80019e4:	5ac00104 	addi	r11,r11,4
 80019e8:	dac12d15 	stw	r11,1204(sp)
 80019ec:	0005883a 	mov	r2,zero
 80019f0:	9807883a 	mov	r3,r19
 80019f4:	003c9c06 	br	8000c68 <__alt_data_end+0xfc000c68>
 80019f8:	657fffc4 	addi	r21,r12,-1
 80019fc:	057f5c0e 	bge	zero,r21,8001770 <__alt_data_end+0xfc001770>
 8001a00:	07000404 	movi	fp,16
 8001a04:	e5408f0e 	bge	fp,r21,8001c44 <___vfprintf_internal_r+0x15a4>
 8001a08:	01020074 	movhi	r4,2049
 8001a0c:	213d7784 	addi	r4,r4,-2594
 8001a10:	d9012c15 	stw	r4,1200(sp)
 8001a14:	01c001c4 	movi	r7,7
 8001a18:	00000306 	br	8001a28 <___vfprintf_internal_r+0x1388>
 8001a1c:	94800204 	addi	r18,r18,8
 8001a20:	ad7ffc04 	addi	r21,r21,-16
 8001a24:	e5408a0e 	bge	fp,r21,8001c50 <___vfprintf_internal_r+0x15b0>
 8001a28:	18c00404 	addi	r3,r3,16
 8001a2c:	84000044 	addi	r16,r16,1
 8001a30:	95000015 	stw	r20,0(r18)
 8001a34:	97000115 	stw	fp,4(r18)
 8001a38:	d8c12015 	stw	r3,1152(sp)
 8001a3c:	dc011f15 	stw	r16,1148(sp)
 8001a40:	3c3ff60e 	bge	r7,r16,8001a1c <__alt_data_end+0xfc001a1c>
 8001a44:	b009883a 	mov	r4,r22
 8001a48:	b80b883a 	mov	r5,r23
 8001a4c:	d9811e04 	addi	r6,sp,1144
 8001a50:	d9c13d15 	stw	r7,1268(sp)
 8001a54:	8006de00 	call	8006de0 <__sprint_r>
 8001a58:	d9c13d17 	ldw	r7,1268(sp)
 8001a5c:	103c271e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001a60:	d8c12017 	ldw	r3,1152(sp)
 8001a64:	dc011f17 	ldw	r16,1148(sp)
 8001a68:	dc800404 	addi	r18,sp,16
 8001a6c:	003fec06 	br	8001a20 <__alt_data_end+0xfc001a20>
 8001a70:	1cc00017 	ldw	r19,0(r3)
 8001a74:	dac12d17 	ldw	r11,1204(sp)
 8001a78:	9839d7fa 	srai	fp,r19,31
 8001a7c:	5ac00104 	addi	r11,r11,4
 8001a80:	dac12d15 	stw	r11,1204(sp)
 8001a84:	e005883a 	mov	r2,fp
 8001a88:	003d9006 	br	80010cc <__alt_data_end+0xfc0010cc>
 8001a8c:	00800084 	movi	r2,2
 8001a90:	9f06b03a 	or	r3,r19,fp
 8001a94:	003c7406 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001a98:	db012d17 	ldw	r12,1204(sp)
 8001a9c:	14c00017 	ldw	r19,0(r2)
 8001aa0:	0039883a 	mov	fp,zero
 8001aa4:	63000104 	addi	r12,r12,4
 8001aa8:	db012d15 	stw	r12,1204(sp)
 8001aac:	00800044 	movi	r2,1
 8001ab0:	9807883a 	mov	r3,r19
 8001ab4:	003c6c06 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001ab8:	10803fcc 	andi	r2,r2,255
 8001abc:	1080201c 	xori	r2,r2,128
 8001ac0:	10bfe004 	addi	r2,r2,-128
 8001ac4:	01000c04 	movi	r4,48
 8001ac8:	1101a526 	beq	r2,r4,8002160 <___vfprintf_internal_r+0x1ac0>
 8001acc:	dac13117 	ldw	r11,1220(sp)
 8001ad0:	db012817 	ldw	r12,1184(sp)
 8001ad4:	193fffc5 	stb	r4,-1(r3)
 8001ad8:	5affffc4 	addi	r11,r11,-1
 8001adc:	dac13115 	stw	r11,1220(sp)
 8001ae0:	62e5c83a 	sub	r18,r12,r11
 8001ae4:	003c7d06 	br	8000cdc <__alt_data_end+0xfc000cdc>
 8001ae8:	b009883a 	mov	r4,r22
 8001aec:	b80b883a 	mov	r5,r23
 8001af0:	d9811e04 	addi	r6,sp,1144
 8001af4:	8006de00 	call	8006de0 <__sprint_r>
 8001af8:	103c001e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001afc:	d8c12017 	ldw	r3,1152(sp)
 8001b00:	da000404 	addi	r8,sp,16
 8001b04:	db013117 	ldw	r12,1220(sp)
 8001b08:	dac13417 	ldw	r11,1232(sp)
 8001b0c:	d8812617 	ldw	r2,1176(sp)
 8001b10:	62e5883a 	add	r18,r12,r11
 8001b14:	db013317 	ldw	r12,1228(sp)
 8001b18:	13000216 	blt	r2,r12,8001b24 <___vfprintf_internal_r+0x1484>
 8001b1c:	8900004c 	andi	r4,r17,1
 8001b20:	20000c26 	beq	r4,zero,8001b54 <___vfprintf_internal_r+0x14b4>
 8001b24:	dac13817 	ldw	r11,1248(sp)
 8001b28:	d9011f17 	ldw	r4,1148(sp)
 8001b2c:	db013517 	ldw	r12,1236(sp)
 8001b30:	1ac7883a 	add	r3,r3,r11
 8001b34:	21000044 	addi	r4,r4,1
 8001b38:	43000015 	stw	r12,0(r8)
 8001b3c:	42c00115 	stw	r11,4(r8)
 8001b40:	d8c12015 	stw	r3,1152(sp)
 8001b44:	d9011f15 	stw	r4,1148(sp)
 8001b48:	014001c4 	movi	r5,7
 8001b4c:	2901cc16 	blt	r5,r4,8002280 <___vfprintf_internal_r+0x1be0>
 8001b50:	42000204 	addi	r8,r8,8
 8001b54:	dac13317 	ldw	r11,1228(sp)
 8001b58:	8489c83a 	sub	r4,r16,r18
 8001b5c:	5885c83a 	sub	r2,r11,r2
 8001b60:	1021883a 	mov	r16,r2
 8001b64:	2080010e 	bge	r4,r2,8001b6c <___vfprintf_internal_r+0x14cc>
 8001b68:	2021883a 	mov	r16,r4
 8001b6c:	04000a0e 	bge	zero,r16,8001b98 <___vfprintf_internal_r+0x14f8>
 8001b70:	d9011f17 	ldw	r4,1148(sp)
 8001b74:	1c07883a 	add	r3,r3,r16
 8001b78:	44800015 	stw	r18,0(r8)
 8001b7c:	21000044 	addi	r4,r4,1
 8001b80:	44000115 	stw	r16,4(r8)
 8001b84:	d8c12015 	stw	r3,1152(sp)
 8001b88:	d9011f15 	stw	r4,1148(sp)
 8001b8c:	014001c4 	movi	r5,7
 8001b90:	2901d616 	blt	r5,r4,80022ec <___vfprintf_internal_r+0x1c4c>
 8001b94:	42000204 	addi	r8,r8,8
 8001b98:	8001df16 	blt	r16,zero,8002318 <___vfprintf_internal_r+0x1c78>
 8001b9c:	1421c83a 	sub	r16,r2,r16
 8001ba0:	043ce60e 	bge	zero,r16,8000f3c <__alt_data_end+0xfc000f3c>
 8001ba4:	04800404 	movi	r18,16
 8001ba8:	d8811f17 	ldw	r2,1148(sp)
 8001bac:	943efc0e 	bge	r18,r16,80017a0 <__alt_data_end+0xfc0017a0>
 8001bb0:	01420074 	movhi	r5,2049
 8001bb4:	297d7784 	addi	r5,r5,-2594
 8001bb8:	d9412c15 	stw	r5,1200(sp)
 8001bbc:	054001c4 	movi	r21,7
 8001bc0:	00000306 	br	8001bd0 <___vfprintf_internal_r+0x1530>
 8001bc4:	42000204 	addi	r8,r8,8
 8001bc8:	843ffc04 	addi	r16,r16,-16
 8001bcc:	943ef70e 	bge	r18,r16,80017ac <__alt_data_end+0xfc0017ac>
 8001bd0:	18c00404 	addi	r3,r3,16
 8001bd4:	10800044 	addi	r2,r2,1
 8001bd8:	45000015 	stw	r20,0(r8)
 8001bdc:	44800115 	stw	r18,4(r8)
 8001be0:	d8c12015 	stw	r3,1152(sp)
 8001be4:	d8811f15 	stw	r2,1148(sp)
 8001be8:	a8bff60e 	bge	r21,r2,8001bc4 <__alt_data_end+0xfc001bc4>
 8001bec:	b009883a 	mov	r4,r22
 8001bf0:	b80b883a 	mov	r5,r23
 8001bf4:	d9811e04 	addi	r6,sp,1144
 8001bf8:	8006de00 	call	8006de0 <__sprint_r>
 8001bfc:	103bbf1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001c00:	d8c12017 	ldw	r3,1152(sp)
 8001c04:	d8811f17 	ldw	r2,1148(sp)
 8001c08:	da000404 	addi	r8,sp,16
 8001c0c:	003fee06 	br	8001bc8 <__alt_data_end+0xfc001bc8>
 8001c10:	8888703a 	and	r4,r17,r2
 8001c14:	203eab1e 	bne	r4,zero,80016c4 <__alt_data_end+0xfc0016c4>
 8001c18:	dc011f17 	ldw	r16,1148(sp)
 8001c1c:	db013117 	ldw	r12,1220(sp)
 8001c20:	40800115 	stw	r2,4(r8)
 8001c24:	84000044 	addi	r16,r16,1
 8001c28:	43000015 	stw	r12,0(r8)
 8001c2c:	d8c12015 	stw	r3,1152(sp)
 8001c30:	dc011f15 	stw	r16,1148(sp)
 8001c34:	008001c4 	movi	r2,7
 8001c38:	14000e16 	blt	r2,r16,8001c74 <___vfprintf_internal_r+0x15d4>
 8001c3c:	44800204 	addi	r18,r8,8
 8001c40:	003ecb06 	br	8001770 <__alt_data_end+0xfc001770>
 8001c44:	00820074 	movhi	r2,2049
 8001c48:	10bd7784 	addi	r2,r2,-2594
 8001c4c:	d8812c15 	stw	r2,1200(sp)
 8001c50:	dac12c17 	ldw	r11,1200(sp)
 8001c54:	1d47883a 	add	r3,r3,r21
 8001c58:	84000044 	addi	r16,r16,1
 8001c5c:	92c00015 	stw	r11,0(r18)
 8001c60:	95400115 	stw	r21,4(r18)
 8001c64:	d8c12015 	stw	r3,1152(sp)
 8001c68:	dc011f15 	stw	r16,1148(sp)
 8001c6c:	008001c4 	movi	r2,7
 8001c70:	143ebe0e 	bge	r2,r16,800176c <__alt_data_end+0xfc00176c>
 8001c74:	b009883a 	mov	r4,r22
 8001c78:	b80b883a 	mov	r5,r23
 8001c7c:	d9811e04 	addi	r6,sp,1144
 8001c80:	8006de00 	call	8006de0 <__sprint_r>
 8001c84:	103b9d1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001c88:	d8c12017 	ldw	r3,1152(sp)
 8001c8c:	dc011f17 	ldw	r16,1148(sp)
 8001c90:	dc800404 	addi	r18,sp,16
 8001c94:	003eb606 	br	8001770 <__alt_data_end+0xfc001770>
 8001c98:	b009883a 	mov	r4,r22
 8001c9c:	b80b883a 	mov	r5,r23
 8001ca0:	d9811e04 	addi	r6,sp,1144
 8001ca4:	8006de00 	call	8006de0 <__sprint_r>
 8001ca8:	103b941e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001cac:	d8c12017 	ldw	r3,1152(sp)
 8001cb0:	dc011f17 	ldw	r16,1148(sp)
 8001cb4:	da000404 	addi	r8,sp,16
 8001cb8:	003e8d06 	br	80016f0 <__alt_data_end+0xfc0016f0>
 8001cbc:	b009883a 	mov	r4,r22
 8001cc0:	b80b883a 	mov	r5,r23
 8001cc4:	d9811e04 	addi	r6,sp,1144
 8001cc8:	8006de00 	call	8006de0 <__sprint_r>
 8001ccc:	103b8b1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001cd0:	d8c12017 	ldw	r3,1152(sp)
 8001cd4:	dc011f17 	ldw	r16,1148(sp)
 8001cd8:	dc800404 	addi	r18,sp,16
 8001cdc:	003e8f06 	br	800171c <__alt_data_end+0xfc00171c>
 8001ce0:	db010e04 	addi	r12,sp,1080
 8001ce4:	0025883a 	mov	r18,zero
 8001ce8:	db013115 	stw	r12,1220(sp)
 8001cec:	003bfb06 	br	8000cdc <__alt_data_end+0xfc000cdc>
 8001cf0:	b009883a 	mov	r4,r22
 8001cf4:	b80b883a 	mov	r5,r23
 8001cf8:	d9811e04 	addi	r6,sp,1144
 8001cfc:	8006de00 	call	8006de0 <__sprint_r>
 8001d00:	103b7e1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001d04:	d8c12017 	ldw	r3,1152(sp)
 8001d08:	da000404 	addi	r8,sp,16
 8001d0c:	003c5506 	br	8000e64 <__alt_data_end+0xfc000e64>
 8001d10:	04e7c83a 	sub	r19,zero,r19
 8001d14:	9804c03a 	cmpne	r2,r19,zero
 8001d18:	0739c83a 	sub	fp,zero,fp
 8001d1c:	e0b9c83a 	sub	fp,fp,r2
 8001d20:	05400b44 	movi	r21,45
 8001d24:	dd412785 	stb	r21,1182(sp)
 8001d28:	da413215 	stw	r9,1224(sp)
 8001d2c:	00800044 	movi	r2,1
 8001d30:	9f06b03a 	or	r3,r19,fp
 8001d34:	003bcf06 	br	8000c74 <__alt_data_end+0xfc000c74>
 8001d38:	da013f15 	stw	r8,1276(sp)
 8001d3c:	da413e15 	stw	r9,1272(sp)
 8001d40:	80069a40 	call	80069a4 <__fpclassifyd>
 8001d44:	da013f17 	ldw	r8,1276(sp)
 8001d48:	da413e17 	ldw	r9,1272(sp)
 8001d4c:	1000ce26 	beq	r2,zero,8002088 <___vfprintf_internal_r+0x19e8>
 8001d50:	057ff7c4 	movi	r21,-33
 8001d54:	00bfffc4 	movi	r2,-1
 8001d58:	856a703a 	and	r21,r16,r21
 8001d5c:	4881f026 	beq	r9,r2,8002520 <___vfprintf_internal_r+0x1e80>
 8001d60:	008011c4 	movi	r2,71
 8001d64:	a881e526 	beq	r21,r2,80024fc <___vfprintf_internal_r+0x1e5c>
 8001d68:	db013917 	ldw	r12,1252(sp)
 8001d6c:	8ac04014 	ori	r11,r17,256
 8001d70:	dac12d15 	stw	r11,1204(sp)
 8001d74:	6001e416 	blt	r12,zero,8002508 <___vfprintf_internal_r+0x1e68>
 8001d78:	dc813917 	ldw	r18,1252(sp)
 8001d7c:	d8012b05 	stb	zero,1196(sp)
 8001d80:	00801984 	movi	r2,102
 8001d84:	80811826 	beq	r16,r2,80021e8 <___vfprintf_internal_r+0x1b48>
 8001d88:	00801184 	movi	r2,70
 8001d8c:	80811626 	beq	r16,r2,80021e8 <___vfprintf_internal_r+0x1b48>
 8001d90:	00801144 	movi	r2,69
 8001d94:	a881e026 	beq	r21,r2,8002518 <___vfprintf_internal_r+0x1e78>
 8001d98:	4839883a 	mov	fp,r9
 8001d9c:	d8812604 	addi	r2,sp,1176
 8001da0:	d8800115 	stw	r2,4(sp)
 8001da4:	d9413717 	ldw	r5,1244(sp)
 8001da8:	d8812504 	addi	r2,sp,1172
 8001dac:	d8800215 	stw	r2,8(sp)
 8001db0:	d8812104 	addi	r2,sp,1156
 8001db4:	df000015 	stw	fp,0(sp)
 8001db8:	d8800315 	stw	r2,12(sp)
 8001dbc:	b009883a 	mov	r4,r22
 8001dc0:	900d883a 	mov	r6,r18
 8001dc4:	01c00084 	movi	r7,2
 8001dc8:	da013f15 	stw	r8,1276(sp)
 8001dcc:	da413e15 	stw	r9,1272(sp)
 8001dd0:	80029f00 	call	80029f0 <_dtoa_r>
 8001dd4:	d8813115 	stw	r2,1220(sp)
 8001dd8:	008019c4 	movi	r2,103
 8001ddc:	da013f17 	ldw	r8,1276(sp)
 8001de0:	da413e17 	ldw	r9,1272(sp)
 8001de4:	80800226 	beq	r16,r2,8001df0 <___vfprintf_internal_r+0x1750>
 8001de8:	008011c4 	movi	r2,71
 8001dec:	8081101e 	bne	r16,r2,8002230 <___vfprintf_internal_r+0x1b90>
 8001df0:	8880004c 	andi	r2,r17,1
 8001df4:	1001df26 	beq	r2,zero,8002574 <___vfprintf_internal_r+0x1ed4>
 8001df8:	db013117 	ldw	r12,1220(sp)
 8001dfc:	6715883a 	add	r10,r12,fp
 8001e00:	d9013717 	ldw	r4,1244(sp)
 8001e04:	900b883a 	mov	r5,r18
 8001e08:	000d883a 	mov	r6,zero
 8001e0c:	000f883a 	mov	r7,zero
 8001e10:	da013f15 	stw	r8,1276(sp)
 8001e14:	da413e15 	stw	r9,1272(sp)
 8001e18:	da813d15 	stw	r10,1268(sp)
 8001e1c:	800b4340 	call	800b434 <__eqdf2>
 8001e20:	da013f17 	ldw	r8,1276(sp)
 8001e24:	da413e17 	ldw	r9,1272(sp)
 8001e28:	da813d17 	ldw	r10,1268(sp)
 8001e2c:	10016526 	beq	r2,zero,80023c4 <___vfprintf_internal_r+0x1d24>
 8001e30:	d8812117 	ldw	r2,1156(sp)
 8001e34:	1280062e 	bgeu	r2,r10,8001e50 <___vfprintf_internal_r+0x17b0>
 8001e38:	01000c04 	movi	r4,48
 8001e3c:	10c00044 	addi	r3,r2,1
 8001e40:	d8c12115 	stw	r3,1156(sp)
 8001e44:	11000005 	stb	r4,0(r2)
 8001e48:	d8812117 	ldw	r2,1156(sp)
 8001e4c:	12bffb36 	bltu	r2,r10,8001e3c <__alt_data_end+0xfc001e3c>
 8001e50:	db013117 	ldw	r12,1220(sp)
 8001e54:	1305c83a 	sub	r2,r2,r12
 8001e58:	d8813315 	stw	r2,1228(sp)
 8001e5c:	008011c4 	movi	r2,71
 8001e60:	a8814a26 	beq	r21,r2,800238c <___vfprintf_internal_r+0x1cec>
 8001e64:	00801944 	movi	r2,101
 8001e68:	14020a0e 	bge	r2,r16,8002694 <___vfprintf_internal_r+0x1ff4>
 8001e6c:	00801984 	movi	r2,102
 8001e70:	8081b626 	beq	r16,r2,800254c <___vfprintf_internal_r+0x1eac>
 8001e74:	db012617 	ldw	r12,1176(sp)
 8001e78:	db013415 	stw	r12,1232(sp)
 8001e7c:	db013417 	ldw	r12,1232(sp)
 8001e80:	dac13317 	ldw	r11,1228(sp)
 8001e84:	62c1a816 	blt	r12,r11,8002528 <___vfprintf_internal_r+0x1e88>
 8001e88:	8c40004c 	andi	r17,r17,1
 8001e8c:	8801ca1e 	bne	r17,zero,80025b8 <___vfprintf_internal_r+0x1f18>
 8001e90:	6005883a 	mov	r2,r12
 8001e94:	6001b516 	blt	r12,zero,800256c <___vfprintf_internal_r+0x1ecc>
 8001e98:	dc813417 	ldw	r18,1232(sp)
 8001e9c:	df012b07 	ldb	fp,1196(sp)
 8001ea0:	e001321e 	bne	fp,zero,800236c <___vfprintf_internal_r+0x1ccc>
 8001ea4:	dc412d17 	ldw	r17,1204(sp)
 8001ea8:	dd412783 	ldbu	r21,1182(sp)
 8001eac:	d8812b15 	stw	r2,1196(sp)
 8001eb0:	dcc12d15 	stw	r19,1204(sp)
 8001eb4:	d8013215 	stw	zero,1224(sp)
 8001eb8:	003b8d06 	br	8000cf0 <__alt_data_end+0xfc000cf0>
 8001ebc:	88c0100c 	andi	r3,r17,64
 8001ec0:	18008226 	beq	r3,zero,80020cc <___vfprintf_internal_r+0x1a2c>
 8001ec4:	dac12d17 	ldw	r11,1204(sp)
 8001ec8:	14c0000b 	ldhu	r19,0(r2)
 8001ecc:	0039883a 	mov	fp,zero
 8001ed0:	5ac00104 	addi	r11,r11,4
 8001ed4:	dac12d15 	stw	r11,1204(sp)
 8001ed8:	003c8f06 	br	8001118 <__alt_data_end+0xfc001118>
 8001edc:	1c000007 	ldb	r16,0(r3)
 8001ee0:	1805883a 	mov	r2,r3
 8001ee4:	003a5506 	br	800083c <__alt_data_end+0xfc00083c>
 8001ee8:	00800084 	movi	r2,2
 8001eec:	003b5e06 	br	8000c68 <__alt_data_end+0xfc000c68>
 8001ef0:	8880040c 	andi	r2,r17,16
 8001ef4:	1000091e 	bne	r2,zero,8001f1c <___vfprintf_internal_r+0x187c>
 8001ef8:	8c40100c 	andi	r17,r17,64
 8001efc:	88000726 	beq	r17,zero,8001f1c <___vfprintf_internal_r+0x187c>
 8001f00:	db012d17 	ldw	r12,1204(sp)
 8001f04:	dac12f17 	ldw	r11,1212(sp)
 8001f08:	60800017 	ldw	r2,0(r12)
 8001f0c:	63000104 	addi	r12,r12,4
 8001f10:	db012d15 	stw	r12,1204(sp)
 8001f14:	12c0000d 	sth	r11,0(r2)
 8001f18:	003a1e06 	br	8000794 <__alt_data_end+0xfc000794>
 8001f1c:	db012d17 	ldw	r12,1204(sp)
 8001f20:	dac12f17 	ldw	r11,1212(sp)
 8001f24:	60800017 	ldw	r2,0(r12)
 8001f28:	63000104 	addi	r12,r12,4
 8001f2c:	db012d15 	stw	r12,1204(sp)
 8001f30:	12c00015 	stw	r11,0(r2)
 8001f34:	003a1706 	br	8000794 <__alt_data_end+0xfc000794>
 8001f38:	01020074 	movhi	r4,2049
 8001f3c:	213d7784 	addi	r4,r4,-2594
 8001f40:	d9012c15 	stw	r4,1200(sp)
 8001f44:	dac12c17 	ldw	r11,1200(sp)
 8001f48:	1c87883a 	add	r3,r3,r18
 8001f4c:	10800044 	addi	r2,r2,1
 8001f50:	42c00015 	stw	r11,0(r8)
 8001f54:	44800115 	stw	r18,4(r8)
 8001f58:	d8c12015 	stw	r3,1152(sp)
 8001f5c:	d8811f15 	stw	r2,1148(sp)
 8001f60:	010001c4 	movi	r4,7
 8001f64:	20bee016 	blt	r4,r2,8001ae8 <__alt_data_end+0xfc001ae8>
 8001f68:	42000204 	addi	r8,r8,8
 8001f6c:	003ee506 	br	8001b04 <__alt_data_end+0xfc001b04>
 8001f70:	01020074 	movhi	r4,2049
 8001f74:	213d7784 	addi	r4,r4,-2594
 8001f78:	d9012c15 	stw	r4,1200(sp)
 8001f7c:	003bd806 	br	8000ee0 <__alt_data_end+0xfc000ee0>
 8001f80:	b009883a 	mov	r4,r22
 8001f84:	b80b883a 	mov	r5,r23
 8001f88:	d9811e04 	addi	r6,sp,1144
 8001f8c:	8006de00 	call	8006de0 <__sprint_r>
 8001f90:	103ada1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8001f94:	d8c12017 	ldw	r3,1152(sp)
 8001f98:	da000404 	addi	r8,sp,16
 8001f9c:	003d6b06 	br	800154c <__alt_data_end+0xfc00154c>
 8001fa0:	d8811f17 	ldw	r2,1148(sp)
 8001fa4:	03020074 	movhi	r12,2049
 8001fa8:	01000044 	movi	r4,1
 8001fac:	18c00044 	addi	r3,r3,1
 8001fb0:	10800044 	addi	r2,r2,1
 8001fb4:	633d7704 	addi	r12,r12,-2596
 8001fb8:	41000115 	stw	r4,4(r8)
 8001fbc:	43000015 	stw	r12,0(r8)
 8001fc0:	d8c12015 	stw	r3,1152(sp)
 8001fc4:	d8811f15 	stw	r2,1148(sp)
 8001fc8:	010001c4 	movi	r4,7
 8001fcc:	20804916 	blt	r4,r2,80020f4 <___vfprintf_internal_r+0x1a54>
 8001fd0:	42000204 	addi	r8,r8,8
 8001fd4:	8000041e 	bne	r16,zero,8001fe8 <___vfprintf_internal_r+0x1948>
 8001fd8:	dac13317 	ldw	r11,1228(sp)
 8001fdc:	5800021e 	bne	r11,zero,8001fe8 <___vfprintf_internal_r+0x1948>
 8001fe0:	8880004c 	andi	r2,r17,1
 8001fe4:	103bd526 	beq	r2,zero,8000f3c <__alt_data_end+0xfc000f3c>
 8001fe8:	db013817 	ldw	r12,1248(sp)
 8001fec:	d8811f17 	ldw	r2,1148(sp)
 8001ff0:	dac13517 	ldw	r11,1236(sp)
 8001ff4:	1b07883a 	add	r3,r3,r12
 8001ff8:	10800044 	addi	r2,r2,1
 8001ffc:	42c00015 	stw	r11,0(r8)
 8002000:	43000115 	stw	r12,4(r8)
 8002004:	d8c12015 	stw	r3,1152(sp)
 8002008:	d8811f15 	stw	r2,1148(sp)
 800200c:	010001c4 	movi	r4,7
 8002010:	20813016 	blt	r4,r2,80024d4 <___vfprintf_internal_r+0x1e34>
 8002014:	42000204 	addi	r8,r8,8
 8002018:	0421c83a 	sub	r16,zero,r16
 800201c:	0400630e 	bge	zero,r16,80021ac <___vfprintf_internal_r+0x1b0c>
 8002020:	04800404 	movi	r18,16
 8002024:	94009f0e 	bge	r18,r16,80022a4 <___vfprintf_internal_r+0x1c04>
 8002028:	01020074 	movhi	r4,2049
 800202c:	213d7784 	addi	r4,r4,-2594
 8002030:	d9012c15 	stw	r4,1200(sp)
 8002034:	054001c4 	movi	r21,7
 8002038:	00000306 	br	8002048 <___vfprintf_internal_r+0x19a8>
 800203c:	42000204 	addi	r8,r8,8
 8002040:	843ffc04 	addi	r16,r16,-16
 8002044:	94009a0e 	bge	r18,r16,80022b0 <___vfprintf_internal_r+0x1c10>
 8002048:	18c00404 	addi	r3,r3,16
 800204c:	10800044 	addi	r2,r2,1
 8002050:	45000015 	stw	r20,0(r8)
 8002054:	44800115 	stw	r18,4(r8)
 8002058:	d8c12015 	stw	r3,1152(sp)
 800205c:	d8811f15 	stw	r2,1148(sp)
 8002060:	a8bff60e 	bge	r21,r2,800203c <__alt_data_end+0xfc00203c>
 8002064:	b009883a 	mov	r4,r22
 8002068:	b80b883a 	mov	r5,r23
 800206c:	d9811e04 	addi	r6,sp,1144
 8002070:	8006de00 	call	8006de0 <__sprint_r>
 8002074:	103aa11e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8002078:	d8c12017 	ldw	r3,1152(sp)
 800207c:	d8811f17 	ldw	r2,1148(sp)
 8002080:	da000404 	addi	r8,sp,16
 8002084:	003fee06 	br	8002040 <__alt_data_end+0xfc002040>
 8002088:	008011c4 	movi	r2,71
 800208c:	1400b316 	blt	r2,r16,800235c <___vfprintf_internal_r+0x1cbc>
 8002090:	03020074 	movhi	r12,2049
 8002094:	633d6904 	addi	r12,r12,-2652
 8002098:	db013115 	stw	r12,1220(sp)
 800209c:	00c000c4 	movi	r3,3
 80020a0:	00bfdfc4 	movi	r2,-129
 80020a4:	d8c12b15 	stw	r3,1196(sp)
 80020a8:	88a2703a 	and	r17,r17,r2
 80020ac:	dd412783 	ldbu	r21,1182(sp)
 80020b0:	dcc12d15 	stw	r19,1204(sp)
 80020b4:	1825883a 	mov	r18,r3
 80020b8:	d8013215 	stw	zero,1224(sp)
 80020bc:	d8013415 	stw	zero,1232(sp)
 80020c0:	003b0b06 	br	8000cf0 <__alt_data_end+0xfc000cf0>
 80020c4:	4825883a 	mov	r18,r9
 80020c8:	003cba06 	br	80013b4 <__alt_data_end+0xfc0013b4>
 80020cc:	db012d17 	ldw	r12,1204(sp)
 80020d0:	14c00017 	ldw	r19,0(r2)
 80020d4:	0039883a 	mov	fp,zero
 80020d8:	63000104 	addi	r12,r12,4
 80020dc:	db012d15 	stw	r12,1204(sp)
 80020e0:	003c0d06 	br	8001118 <__alt_data_end+0xfc001118>
 80020e4:	00820074 	movhi	r2,2049
 80020e8:	10bd6704 	addi	r2,r2,-2660
 80020ec:	d8813115 	stw	r2,1220(sp)
 80020f0:	003ac406 	br	8000c04 <__alt_data_end+0xfc000c04>
 80020f4:	b009883a 	mov	r4,r22
 80020f8:	b80b883a 	mov	r5,r23
 80020fc:	d9811e04 	addi	r6,sp,1144
 8002100:	8006de00 	call	8006de0 <__sprint_r>
 8002104:	103a7d1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8002108:	dc012617 	ldw	r16,1176(sp)
 800210c:	d8c12017 	ldw	r3,1152(sp)
 8002110:	da000404 	addi	r8,sp,16
 8002114:	003faf06 	br	8001fd4 <__alt_data_end+0xfc001fd4>
 8002118:	db012e17 	ldw	r12,1208(sp)
 800211c:	1805883a 	mov	r2,r3
 8002120:	dac12d15 	stw	r11,1204(sp)
 8002124:	0319c83a 	sub	r12,zero,r12
 8002128:	db012e15 	stw	r12,1208(sp)
 800212c:	003a7e06 	br	8000b28 <__alt_data_end+0xfc000b28>
 8002130:	18800044 	addi	r2,r3,1
 8002134:	8c400814 	ori	r17,r17,32
 8002138:	1c000047 	ldb	r16,1(r3)
 800213c:	0039bf06 	br	800083c <__alt_data_end+0xfc00083c>
 8002140:	b009883a 	mov	r4,r22
 8002144:	b80b883a 	mov	r5,r23
 8002148:	d9811e04 	addi	r6,sp,1144
 800214c:	8006de00 	call	8006de0 <__sprint_r>
 8002150:	103a6a1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8002154:	d8c12017 	ldw	r3,1152(sp)
 8002158:	da000404 	addi	r8,sp,16
 800215c:	003d0c06 	br	8001590 <__alt_data_end+0xfc001590>
 8002160:	db012817 	ldw	r12,1184(sp)
 8002164:	d8c13117 	ldw	r3,1220(sp)
 8002168:	60e5c83a 	sub	r18,r12,r3
 800216c:	003adb06 	br	8000cdc <__alt_data_end+0xfc000cdc>
 8002170:	da013f15 	stw	r8,1276(sp)
 8002174:	8006c4c0 	call	8006c4c <strlen>
 8002178:	1025883a 	mov	r18,r2
 800217c:	da013f17 	ldw	r8,1276(sp)
 8002180:	903c8e0e 	bge	r18,zero,80013bc <__alt_data_end+0xfc0013bc>
 8002184:	0005883a 	mov	r2,zero
 8002188:	003c8c06 	br	80013bc <__alt_data_end+0xfc0013bc>
 800218c:	b009883a 	mov	r4,r22
 8002190:	b80b883a 	mov	r5,r23
 8002194:	d9811e04 	addi	r6,sp,1144
 8002198:	8006de00 	call	8006de0 <__sprint_r>
 800219c:	103a571e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 80021a0:	d8c12017 	ldw	r3,1152(sp)
 80021a4:	d8811f17 	ldw	r2,1148(sp)
 80021a8:	da000404 	addi	r8,sp,16
 80021ac:	db013317 	ldw	r12,1228(sp)
 80021b0:	dac13117 	ldw	r11,1220(sp)
 80021b4:	10800044 	addi	r2,r2,1
 80021b8:	60c7883a 	add	r3,r12,r3
 80021bc:	42c00015 	stw	r11,0(r8)
 80021c0:	43000115 	stw	r12,4(r8)
 80021c4:	d8c12015 	stw	r3,1152(sp)
 80021c8:	d8811f15 	stw	r2,1148(sp)
 80021cc:	010001c4 	movi	r4,7
 80021d0:	20bb590e 	bge	r4,r2,8000f38 <__alt_data_end+0xfc000f38>
 80021d4:	003d7e06 	br	80017d0 <__alt_data_end+0xfc0017d0>
 80021d8:	01020074 	movhi	r4,2049
 80021dc:	213d7b84 	addi	r4,r4,-2578
 80021e0:	d9013615 	stw	r4,1240(sp)
 80021e4:	003af606 	br	8000dc0 <__alt_data_end+0xfc000dc0>
 80021e8:	d8812604 	addi	r2,sp,1176
 80021ec:	d8800115 	stw	r2,4(sp)
 80021f0:	d9413717 	ldw	r5,1244(sp)
 80021f4:	d8812504 	addi	r2,sp,1172
 80021f8:	d8800215 	stw	r2,8(sp)
 80021fc:	d8812104 	addi	r2,sp,1156
 8002200:	da400015 	stw	r9,0(sp)
 8002204:	d8800315 	stw	r2,12(sp)
 8002208:	b009883a 	mov	r4,r22
 800220c:	900d883a 	mov	r6,r18
 8002210:	01c000c4 	movi	r7,3
 8002214:	da013f15 	stw	r8,1276(sp)
 8002218:	da413e15 	stw	r9,1272(sp)
 800221c:	80029f00 	call	80029f0 <_dtoa_r>
 8002220:	da413e17 	ldw	r9,1272(sp)
 8002224:	da013f17 	ldw	r8,1276(sp)
 8002228:	d8813115 	stw	r2,1220(sp)
 800222c:	4839883a 	mov	fp,r9
 8002230:	dac13117 	ldw	r11,1220(sp)
 8002234:	00801184 	movi	r2,70
 8002238:	5f15883a 	add	r10,r11,fp
 800223c:	a8bef01e 	bne	r21,r2,8001e00 <__alt_data_end+0xfc001e00>
 8002240:	59000007 	ldb	r4,0(r11)
 8002244:	00800c04 	movi	r2,48
 8002248:	2080e026 	beq	r4,r2,80025cc <___vfprintf_internal_r+0x1f2c>
 800224c:	d8c12617 	ldw	r3,1176(sp)
 8002250:	50d5883a 	add	r10,r10,r3
 8002254:	003eea06 	br	8001e00 <__alt_data_end+0xfc001e00>
 8002258:	0025883a 	mov	r18,zero
 800225c:	003db306 	br	800192c <__alt_data_end+0xfc00192c>
 8002260:	b009883a 	mov	r4,r22
 8002264:	b80b883a 	mov	r5,r23
 8002268:	d9811e04 	addi	r6,sp,1144
 800226c:	8006de00 	call	8006de0 <__sprint_r>
 8002270:	103a221e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8002274:	d8c12017 	ldw	r3,1152(sp)
 8002278:	da000404 	addi	r8,sp,16
 800227c:	003daa06 	br	8001928 <__alt_data_end+0xfc001928>
 8002280:	b009883a 	mov	r4,r22
 8002284:	b80b883a 	mov	r5,r23
 8002288:	d9811e04 	addi	r6,sp,1144
 800228c:	8006de00 	call	8006de0 <__sprint_r>
 8002290:	103a1a1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8002294:	d8812617 	ldw	r2,1176(sp)
 8002298:	d8c12017 	ldw	r3,1152(sp)
 800229c:	da000404 	addi	r8,sp,16
 80022a0:	003e2c06 	br	8001b54 <__alt_data_end+0xfc001b54>
 80022a4:	03020074 	movhi	r12,2049
 80022a8:	633d7784 	addi	r12,r12,-2594
 80022ac:	db012c15 	stw	r12,1200(sp)
 80022b0:	dac12c17 	ldw	r11,1200(sp)
 80022b4:	1c07883a 	add	r3,r3,r16
 80022b8:	10800044 	addi	r2,r2,1
 80022bc:	42c00015 	stw	r11,0(r8)
 80022c0:	44000115 	stw	r16,4(r8)
 80022c4:	d8c12015 	stw	r3,1152(sp)
 80022c8:	d8811f15 	stw	r2,1148(sp)
 80022cc:	010001c4 	movi	r4,7
 80022d0:	20bfae16 	blt	r4,r2,800218c <__alt_data_end+0xfc00218c>
 80022d4:	42000204 	addi	r8,r8,8
 80022d8:	003fb406 	br	80021ac <__alt_data_end+0xfc0021ac>
 80022dc:	03020074 	movhi	r12,2049
 80022e0:	633d7b84 	addi	r12,r12,-2578
 80022e4:	db013615 	stw	r12,1240(sp)
 80022e8:	003b3806 	br	8000fcc <__alt_data_end+0xfc000fcc>
 80022ec:	b009883a 	mov	r4,r22
 80022f0:	b80b883a 	mov	r5,r23
 80022f4:	d9811e04 	addi	r6,sp,1144
 80022f8:	8006de00 	call	8006de0 <__sprint_r>
 80022fc:	1039ff1e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 8002300:	d8812617 	ldw	r2,1176(sp)
 8002304:	db013317 	ldw	r12,1228(sp)
 8002308:	d8c12017 	ldw	r3,1152(sp)
 800230c:	da000404 	addi	r8,sp,16
 8002310:	6085c83a 	sub	r2,r12,r2
 8002314:	003e2006 	br	8001b98 <__alt_data_end+0xfc001b98>
 8002318:	0021883a 	mov	r16,zero
 800231c:	003e1f06 	br	8001b9c <__alt_data_end+0xfc001b9c>
 8002320:	00800184 	movi	r2,6
 8002324:	1240012e 	bgeu	r2,r9,800232c <___vfprintf_internal_r+0x1c8c>
 8002328:	1013883a 	mov	r9,r2
 800232c:	4825883a 	mov	r18,r9
 8002330:	4805883a 	mov	r2,r9
 8002334:	48009e16 	blt	r9,zero,80025b0 <___vfprintf_internal_r+0x1f10>
 8002338:	d8812b15 	stw	r2,1196(sp)
 800233c:	00820074 	movhi	r2,2049
 8002340:	10bd7504 	addi	r2,r2,-2604
 8002344:	d8813115 	stw	r2,1220(sp)
 8002348:	dcc12d15 	stw	r19,1204(sp)
 800234c:	d8013215 	stw	zero,1224(sp)
 8002350:	d8013415 	stw	zero,1232(sp)
 8002354:	0005883a 	mov	r2,zero
 8002358:	003a6c06 	br	8000d0c <__alt_data_end+0xfc000d0c>
 800235c:	00820074 	movhi	r2,2049
 8002360:	10bd6a04 	addi	r2,r2,-2648
 8002364:	d8813115 	stw	r2,1220(sp)
 8002368:	003f4c06 	br	800209c <__alt_data_end+0xfc00209c>
 800236c:	00c00b44 	movi	r3,45
 8002370:	d8812b15 	stw	r2,1196(sp)
 8002374:	dc412d17 	ldw	r17,1204(sp)
 8002378:	d8c12785 	stb	r3,1182(sp)
 800237c:	dcc12d15 	stw	r19,1204(sp)
 8002380:	d8013215 	stw	zero,1224(sp)
 8002384:	00800b44 	movi	r2,45
 8002388:	003a5d06 	br	8000d00 <__alt_data_end+0xfc000d00>
 800238c:	d8c12617 	ldw	r3,1176(sp)
 8002390:	00bfff44 	movi	r2,-3
 8002394:	18800d16 	blt	r3,r2,80023cc <___vfprintf_internal_r+0x1d2c>
 8002398:	48c00c16 	blt	r9,r3,80023cc <___vfprintf_internal_r+0x1d2c>
 800239c:	d8c13415 	stw	r3,1232(sp)
 80023a0:	040019c4 	movi	r16,103
 80023a4:	003eb506 	br	8001e7c <__alt_data_end+0xfc001e7c>
 80023a8:	05400b44 	movi	r21,45
 80023ac:	dd412785 	stb	r21,1182(sp)
 80023b0:	003a0f06 	br	8000bf0 <__alt_data_end+0xfc000bf0>
 80023b4:	01020074 	movhi	r4,2049
 80023b8:	213d7784 	addi	r4,r4,-2594
 80023bc:	d9012c15 	stw	r4,1200(sp)
 80023c0:	003cb106 	br	8001688 <__alt_data_end+0xfc001688>
 80023c4:	5005883a 	mov	r2,r10
 80023c8:	003ea106 	br	8001e50 <__alt_data_end+0xfc001e50>
 80023cc:	843fff84 	addi	r16,r16,-2
 80023d0:	1f3fffc4 	addi	fp,r3,-1
 80023d4:	df012615 	stw	fp,1176(sp)
 80023d8:	dc0122c5 	stb	r16,1163(sp)
 80023dc:	e0009516 	blt	fp,zero,8002634 <___vfprintf_internal_r+0x1f94>
 80023e0:	00800ac4 	movi	r2,43
 80023e4:	d8812305 	stb	r2,1164(sp)
 80023e8:	00800244 	movi	r2,9
 80023ec:	1700690e 	bge	r2,fp,8002594 <___vfprintf_internal_r+0x1ef4>
 80023f0:	dd4122c4 	addi	r21,sp,1163
 80023f4:	dc012c15 	stw	r16,1200(sp)
 80023f8:	8825883a 	mov	r18,r17
 80023fc:	a821883a 	mov	r16,r21
 8002400:	4023883a 	mov	r17,r8
 8002404:	e009883a 	mov	r4,fp
 8002408:	01400284 	movi	r5,10
 800240c:	800a2600 	call	800a260 <__modsi3>
 8002410:	10800c04 	addi	r2,r2,48
 8002414:	843fffc4 	addi	r16,r16,-1
 8002418:	e009883a 	mov	r4,fp
 800241c:	01400284 	movi	r5,10
 8002420:	80800005 	stb	r2,0(r16)
 8002424:	800a20c0 	call	800a20c <__divsi3>
 8002428:	1039883a 	mov	fp,r2
 800242c:	00800244 	movi	r2,9
 8002430:	173ff416 	blt	r2,fp,8002404 <__alt_data_end+0xfc002404>
 8002434:	8811883a 	mov	r8,r17
 8002438:	e0800c04 	addi	r2,fp,48
 800243c:	9023883a 	mov	r17,r18
 8002440:	8025883a 	mov	r18,r16
 8002444:	913fffc4 	addi	r4,r18,-1
 8002448:	90bfffc5 	stb	r2,-1(r18)
 800244c:	dc012c17 	ldw	r16,1200(sp)
 8002450:	25408e2e 	bgeu	r4,r21,800268c <___vfprintf_internal_r+0x1fec>
 8002454:	d9412384 	addi	r5,sp,1166
 8002458:	2c8bc83a 	sub	r5,r5,r18
 800245c:	d8c12344 	addi	r3,sp,1165
 8002460:	a94b883a 	add	r5,r21,r5
 8002464:	00000106 	br	800246c <___vfprintf_internal_r+0x1dcc>
 8002468:	20800003 	ldbu	r2,0(r4)
 800246c:	18800005 	stb	r2,0(r3)
 8002470:	18c00044 	addi	r3,r3,1
 8002474:	21000044 	addi	r4,r4,1
 8002478:	197ffb1e 	bne	r3,r5,8002468 <__alt_data_end+0xfc002468>
 800247c:	d8812304 	addi	r2,sp,1164
 8002480:	1485c83a 	sub	r2,r2,r18
 8002484:	d8c12344 	addi	r3,sp,1165
 8002488:	1885883a 	add	r2,r3,r2
 800248c:	dac13317 	ldw	r11,1228(sp)
 8002490:	156bc83a 	sub	r21,r2,r21
 8002494:	dd413a15 	stw	r21,1256(sp)
 8002498:	00800044 	movi	r2,1
 800249c:	5d65883a 	add	r18,r11,r21
 80024a0:	12c0770e 	bge	r2,r11,8002680 <___vfprintf_internal_r+0x1fe0>
 80024a4:	94800044 	addi	r18,r18,1
 80024a8:	9005883a 	mov	r2,r18
 80024ac:	90007216 	blt	r18,zero,8002678 <___vfprintf_internal_r+0x1fd8>
 80024b0:	d8013415 	stw	zero,1232(sp)
 80024b4:	003e7906 	br	8001e9c <__alt_data_end+0xfc001e9c>
 80024b8:	da412b15 	stw	r9,1196(sp)
 80024bc:	dd412783 	ldbu	r21,1182(sp)
 80024c0:	4825883a 	mov	r18,r9
 80024c4:	dcc12d15 	stw	r19,1204(sp)
 80024c8:	d8013215 	stw	zero,1224(sp)
 80024cc:	d8013415 	stw	zero,1232(sp)
 80024d0:	003a0706 	br	8000cf0 <__alt_data_end+0xfc000cf0>
 80024d4:	b009883a 	mov	r4,r22
 80024d8:	b80b883a 	mov	r5,r23
 80024dc:	d9811e04 	addi	r6,sp,1144
 80024e0:	8006de00 	call	8006de0 <__sprint_r>
 80024e4:	1039851e 	bne	r2,zero,8000afc <__alt_data_end+0xfc000afc>
 80024e8:	dc012617 	ldw	r16,1176(sp)
 80024ec:	d8c12017 	ldw	r3,1152(sp)
 80024f0:	d8811f17 	ldw	r2,1148(sp)
 80024f4:	da000404 	addi	r8,sp,16
 80024f8:	003ec706 	br	8002018 <__alt_data_end+0xfc002018>
 80024fc:	483e1a1e 	bne	r9,zero,8001d68 <__alt_data_end+0xfc001d68>
 8002500:	9013883a 	mov	r9,r18
 8002504:	003e1806 	br	8001d68 <__alt_data_end+0xfc001d68>
 8002508:	00c00b44 	movi	r3,45
 800250c:	64a0003c 	xorhi	r18,r12,32768
 8002510:	d8c12b05 	stb	r3,1196(sp)
 8002514:	003e1a06 	br	8001d80 <__alt_data_end+0xfc001d80>
 8002518:	4f000044 	addi	fp,r9,1
 800251c:	003e1f06 	br	8001d9c <__alt_data_end+0xfc001d9c>
 8002520:	02400184 	movi	r9,6
 8002524:	003e1006 	br	8001d68 <__alt_data_end+0xfc001d68>
 8002528:	d8c13417 	ldw	r3,1232(sp)
 800252c:	00c04b0e 	bge	zero,r3,800265c <___vfprintf_internal_r+0x1fbc>
 8002530:	04800044 	movi	r18,1
 8002534:	dac13317 	ldw	r11,1228(sp)
 8002538:	92e5883a 	add	r18,r18,r11
 800253c:	9005883a 	mov	r2,r18
 8002540:	903e560e 	bge	r18,zero,8001e9c <__alt_data_end+0xfc001e9c>
 8002544:	0005883a 	mov	r2,zero
 8002548:	003e5406 	br	8001e9c <__alt_data_end+0xfc001e9c>
 800254c:	d8c12617 	ldw	r3,1176(sp)
 8002550:	d8c13415 	stw	r3,1232(sp)
 8002554:	00c03b0e 	bge	zero,r3,8002644 <___vfprintf_internal_r+0x1fa4>
 8002558:	4800081e 	bne	r9,zero,800257c <___vfprintf_internal_r+0x1edc>
 800255c:	8c40004c 	andi	r17,r17,1
 8002560:	8800061e 	bne	r17,zero,800257c <___vfprintf_internal_r+0x1edc>
 8002564:	1805883a 	mov	r2,r3
 8002568:	183e4b0e 	bge	r3,zero,8001e98 <__alt_data_end+0xfc001e98>
 800256c:	0005883a 	mov	r2,zero
 8002570:	003e4906 	br	8001e98 <__alt_data_end+0xfc001e98>
 8002574:	d8812117 	ldw	r2,1156(sp)
 8002578:	003e3506 	br	8001e50 <__alt_data_end+0xfc001e50>
 800257c:	dac13417 	ldw	r11,1232(sp)
 8002580:	4a400044 	addi	r9,r9,1
 8002584:	5a65883a 	add	r18,r11,r9
 8002588:	9005883a 	mov	r2,r18
 800258c:	903e430e 	bge	r18,zero,8001e9c <__alt_data_end+0xfc001e9c>
 8002590:	003fec06 	br	8002544 <__alt_data_end+0xfc002544>
 8002594:	00800c04 	movi	r2,48
 8002598:	e0c00c04 	addi	r3,fp,48
 800259c:	d8812345 	stb	r2,1165(sp)
 80025a0:	d8c12385 	stb	r3,1166(sp)
 80025a4:	d88123c4 	addi	r2,sp,1167
 80025a8:	dd4122c4 	addi	r21,sp,1163
 80025ac:	003fb706 	br	800248c <__alt_data_end+0xfc00248c>
 80025b0:	0005883a 	mov	r2,zero
 80025b4:	003f6006 	br	8002338 <__alt_data_end+0xfc002338>
 80025b8:	db013417 	ldw	r12,1232(sp)
 80025bc:	64800044 	addi	r18,r12,1
 80025c0:	9005883a 	mov	r2,r18
 80025c4:	903e350e 	bge	r18,zero,8001e9c <__alt_data_end+0xfc001e9c>
 80025c8:	003fde06 	br	8002544 <__alt_data_end+0xfc002544>
 80025cc:	d9013717 	ldw	r4,1244(sp)
 80025d0:	900b883a 	mov	r5,r18
 80025d4:	000d883a 	mov	r6,zero
 80025d8:	000f883a 	mov	r7,zero
 80025dc:	da013f15 	stw	r8,1276(sp)
 80025e0:	da413e15 	stw	r9,1272(sp)
 80025e4:	da813d15 	stw	r10,1268(sp)
 80025e8:	800b4340 	call	800b434 <__eqdf2>
 80025ec:	da013f17 	ldw	r8,1276(sp)
 80025f0:	da413e17 	ldw	r9,1272(sp)
 80025f4:	da813d17 	ldw	r10,1268(sp)
 80025f8:	103f1426 	beq	r2,zero,800224c <__alt_data_end+0xfc00224c>
 80025fc:	00800044 	movi	r2,1
 8002600:	1707c83a 	sub	r3,r2,fp
 8002604:	d8c12615 	stw	r3,1176(sp)
 8002608:	003f1106 	br	8002250 <__alt_data_end+0xfc002250>
 800260c:	dac12d17 	ldw	r11,1204(sp)
 8002610:	5a400017 	ldw	r9,0(r11)
 8002614:	5ac00104 	addi	r11,r11,4
 8002618:	dac12d15 	stw	r11,1204(sp)
 800261c:	483ec60e 	bge	r9,zero,8002138 <__alt_data_end+0xfc002138>
 8002620:	027fffc4 	movi	r9,-1
 8002624:	1c000047 	ldb	r16,1(r3)
 8002628:	00388406 	br	800083c <__alt_data_end+0xfc00083c>
 800262c:	043fffc4 	movi	r16,-1
 8002630:	00391006 	br	8000a74 <__alt_data_end+0xfc000a74>
 8002634:	00800b44 	movi	r2,45
 8002638:	0739c83a 	sub	fp,zero,fp
 800263c:	d8812305 	stb	r2,1164(sp)
 8002640:	003f6906 	br	80023e8 <__alt_data_end+0xfc0023e8>
 8002644:	4800081e 	bne	r9,zero,8002668 <___vfprintf_internal_r+0x1fc8>
 8002648:	8c40004c 	andi	r17,r17,1
 800264c:	8800061e 	bne	r17,zero,8002668 <___vfprintf_internal_r+0x1fc8>
 8002650:	00800044 	movi	r2,1
 8002654:	1025883a 	mov	r18,r2
 8002658:	003e1006 	br	8001e9c <__alt_data_end+0xfc001e9c>
 800265c:	04800084 	movi	r18,2
 8002660:	90e5c83a 	sub	r18,r18,r3
 8002664:	003fb306 	br	8002534 <__alt_data_end+0xfc002534>
 8002668:	4c800084 	addi	r18,r9,2
 800266c:	9005883a 	mov	r2,r18
 8002670:	903e0a0e 	bge	r18,zero,8001e9c <__alt_data_end+0xfc001e9c>
 8002674:	003fb306 	br	8002544 <__alt_data_end+0xfc002544>
 8002678:	0005883a 	mov	r2,zero
 800267c:	003f8c06 	br	80024b0 <__alt_data_end+0xfc0024b0>
 8002680:	88a2703a 	and	r17,r17,r2
 8002684:	883f8826 	beq	r17,zero,80024a8 <__alt_data_end+0xfc0024a8>
 8002688:	003f8606 	br	80024a4 <__alt_data_end+0xfc0024a4>
 800268c:	d8812344 	addi	r2,sp,1165
 8002690:	003f7e06 	br	800248c <__alt_data_end+0xfc00248c>
 8002694:	d8c12617 	ldw	r3,1176(sp)
 8002698:	003f4d06 	br	80023d0 <__alt_data_end+0xfc0023d0>

0800269c <__vfprintf_internal>:
 800269c:	2007883a 	mov	r3,r4
 80026a0:	01020074 	movhi	r4,2049
 80026a4:	2104e304 	addi	r4,r4,5004
 80026a8:	21000017 	ldw	r4,0(r4)
 80026ac:	2805883a 	mov	r2,r5
 80026b0:	300f883a 	mov	r7,r6
 80026b4:	180b883a 	mov	r5,r3
 80026b8:	100d883a 	mov	r6,r2
 80026bc:	80006a01 	jmpi	80006a0 <___vfprintf_internal_r>

080026c0 <__swsetup_r>:
 80026c0:	00820074 	movhi	r2,2049
 80026c4:	defffd04 	addi	sp,sp,-12
 80026c8:	1084e304 	addi	r2,r2,5004
 80026cc:	dc400115 	stw	r17,4(sp)
 80026d0:	2023883a 	mov	r17,r4
 80026d4:	11000017 	ldw	r4,0(r2)
 80026d8:	dc000015 	stw	r16,0(sp)
 80026dc:	dfc00215 	stw	ra,8(sp)
 80026e0:	2821883a 	mov	r16,r5
 80026e4:	20000226 	beq	r4,zero,80026f0 <__swsetup_r+0x30>
 80026e8:	20c00e17 	ldw	r3,56(r4)
 80026ec:	18002e26 	beq	r3,zero,80027a8 <__swsetup_r+0xe8>
 80026f0:	8080030b 	ldhu	r2,12(r16)
 80026f4:	10c0020c 	andi	r3,r2,8
 80026f8:	100d883a 	mov	r6,r2
 80026fc:	18000f26 	beq	r3,zero,800273c <__swsetup_r+0x7c>
 8002700:	80c00417 	ldw	r3,16(r16)
 8002704:	18001526 	beq	r3,zero,800275c <__swsetup_r+0x9c>
 8002708:	1100004c 	andi	r4,r2,1
 800270c:	20001c1e 	bne	r4,zero,8002780 <__swsetup_r+0xc0>
 8002710:	1080008c 	andi	r2,r2,2
 8002714:	1000261e 	bne	r2,zero,80027b0 <__swsetup_r+0xf0>
 8002718:	80800517 	ldw	r2,20(r16)
 800271c:	80800215 	stw	r2,8(r16)
 8002720:	18001c26 	beq	r3,zero,8002794 <__swsetup_r+0xd4>
 8002724:	0005883a 	mov	r2,zero
 8002728:	dfc00217 	ldw	ra,8(sp)
 800272c:	dc400117 	ldw	r17,4(sp)
 8002730:	dc000017 	ldw	r16,0(sp)
 8002734:	dec00304 	addi	sp,sp,12
 8002738:	f800283a 	ret
 800273c:	3080040c 	andi	r2,r6,16
 8002740:	10001726 	beq	r2,zero,80027a0 <__swsetup_r+0xe0>
 8002744:	3080010c 	andi	r2,r6,4
 8002748:	10001b1e 	bne	r2,zero,80027b8 <__swsetup_r+0xf8>
 800274c:	80c00417 	ldw	r3,16(r16)
 8002750:	30800214 	ori	r2,r6,8
 8002754:	8080030d 	sth	r2,12(r16)
 8002758:	183feb1e 	bne	r3,zero,8002708 <__alt_data_end+0xfc002708>
 800275c:	1140a00c 	andi	r5,r2,640
 8002760:	01008004 	movi	r4,512
 8002764:	293fe826 	beq	r5,r4,8002708 <__alt_data_end+0xfc002708>
 8002768:	8809883a 	mov	r4,r17
 800276c:	800b883a 	mov	r5,r16
 8002770:	8004d740 	call	8004d74 <__smakebuf_r>
 8002774:	8080030b 	ldhu	r2,12(r16)
 8002778:	80c00417 	ldw	r3,16(r16)
 800277c:	003fe206 	br	8002708 <__alt_data_end+0xfc002708>
 8002780:	80800517 	ldw	r2,20(r16)
 8002784:	80000215 	stw	zero,8(r16)
 8002788:	0085c83a 	sub	r2,zero,r2
 800278c:	80800615 	stw	r2,24(r16)
 8002790:	183fe41e 	bne	r3,zero,8002724 <__alt_data_end+0xfc002724>
 8002794:	8080030b 	ldhu	r2,12(r16)
 8002798:	1080200c 	andi	r2,r2,128
 800279c:	103fe226 	beq	r2,zero,8002728 <__alt_data_end+0xfc002728>
 80027a0:	00bfffc4 	movi	r2,-1
 80027a4:	003fe006 	br	8002728 <__alt_data_end+0xfc002728>
 80027a8:	80046c00 	call	80046c0 <__sinit>
 80027ac:	003fd006 	br	80026f0 <__alt_data_end+0xfc0026f0>
 80027b0:	0005883a 	mov	r2,zero
 80027b4:	003fd906 	br	800271c <__alt_data_end+0xfc00271c>
 80027b8:	81400c17 	ldw	r5,48(r16)
 80027bc:	28000626 	beq	r5,zero,80027d8 <__swsetup_r+0x118>
 80027c0:	80801004 	addi	r2,r16,64
 80027c4:	28800326 	beq	r5,r2,80027d4 <__swsetup_r+0x114>
 80027c8:	8809883a 	mov	r4,r17
 80027cc:	80048340 	call	8004834 <_free_r>
 80027d0:	8180030b 	ldhu	r6,12(r16)
 80027d4:	80000c15 	stw	zero,48(r16)
 80027d8:	80c00417 	ldw	r3,16(r16)
 80027dc:	00bff6c4 	movi	r2,-37
 80027e0:	118c703a 	and	r6,r2,r6
 80027e4:	80000115 	stw	zero,4(r16)
 80027e8:	80c00015 	stw	r3,0(r16)
 80027ec:	003fd806 	br	8002750 <__alt_data_end+0xfc002750>

080027f0 <quorem>:
 80027f0:	defff704 	addi	sp,sp,-36
 80027f4:	dc800215 	stw	r18,8(sp)
 80027f8:	20800417 	ldw	r2,16(r4)
 80027fc:	2c800417 	ldw	r18,16(r5)
 8002800:	dfc00815 	stw	ra,32(sp)
 8002804:	ddc00715 	stw	r23,28(sp)
 8002808:	dd800615 	stw	r22,24(sp)
 800280c:	dd400515 	stw	r21,20(sp)
 8002810:	dd000415 	stw	r20,16(sp)
 8002814:	dcc00315 	stw	r19,12(sp)
 8002818:	dc400115 	stw	r17,4(sp)
 800281c:	dc000015 	stw	r16,0(sp)
 8002820:	14807116 	blt	r2,r18,80029e8 <quorem+0x1f8>
 8002824:	94bfffc4 	addi	r18,r18,-1
 8002828:	94ad883a 	add	r22,r18,r18
 800282c:	b5ad883a 	add	r22,r22,r22
 8002830:	2c400504 	addi	r17,r5,20
 8002834:	8da9883a 	add	r20,r17,r22
 8002838:	25400504 	addi	r21,r4,20
 800283c:	282f883a 	mov	r23,r5
 8002840:	adad883a 	add	r22,r21,r22
 8002844:	a1400017 	ldw	r5,0(r20)
 8002848:	2021883a 	mov	r16,r4
 800284c:	b1000017 	ldw	r4,0(r22)
 8002850:	29400044 	addi	r5,r5,1
 8002854:	800a2bc0 	call	800a2bc <__udivsi3>
 8002858:	1027883a 	mov	r19,r2
 800285c:	10002c26 	beq	r2,zero,8002910 <quorem+0x120>
 8002860:	a813883a 	mov	r9,r21
 8002864:	8811883a 	mov	r8,r17
 8002868:	0009883a 	mov	r4,zero
 800286c:	000d883a 	mov	r6,zero
 8002870:	41c00017 	ldw	r7,0(r8)
 8002874:	49400017 	ldw	r5,0(r9)
 8002878:	42000104 	addi	r8,r8,4
 800287c:	38bfffcc 	andi	r2,r7,65535
 8002880:	14c5383a 	mul	r2,r2,r19
 8002884:	380ed43a 	srli	r7,r7,16
 8002888:	28ffffcc 	andi	r3,r5,65535
 800288c:	2085883a 	add	r2,r4,r2
 8002890:	1008d43a 	srli	r4,r2,16
 8002894:	3ccf383a 	mul	r7,r7,r19
 8002898:	198d883a 	add	r6,r3,r6
 800289c:	10ffffcc 	andi	r3,r2,65535
 80028a0:	30c7c83a 	sub	r3,r6,r3
 80028a4:	280ad43a 	srli	r5,r5,16
 80028a8:	21c9883a 	add	r4,r4,r7
 80028ac:	180dd43a 	srai	r6,r3,16
 80028b0:	20bfffcc 	andi	r2,r4,65535
 80028b4:	288bc83a 	sub	r5,r5,r2
 80028b8:	298b883a 	add	r5,r5,r6
 80028bc:	280e943a 	slli	r7,r5,16
 80028c0:	18ffffcc 	andi	r3,r3,65535
 80028c4:	2008d43a 	srli	r4,r4,16
 80028c8:	38ceb03a 	or	r7,r7,r3
 80028cc:	49c00015 	stw	r7,0(r9)
 80028d0:	280dd43a 	srai	r6,r5,16
 80028d4:	4a400104 	addi	r9,r9,4
 80028d8:	a23fe52e 	bgeu	r20,r8,8002870 <__alt_data_end+0xfc002870>
 80028dc:	b0800017 	ldw	r2,0(r22)
 80028e0:	10000b1e 	bne	r2,zero,8002910 <quorem+0x120>
 80028e4:	b0bfff04 	addi	r2,r22,-4
 80028e8:	a880082e 	bgeu	r21,r2,800290c <quorem+0x11c>
 80028ec:	b0ffff17 	ldw	r3,-4(r22)
 80028f0:	18000326 	beq	r3,zero,8002900 <quorem+0x110>
 80028f4:	00000506 	br	800290c <quorem+0x11c>
 80028f8:	10c00017 	ldw	r3,0(r2)
 80028fc:	1800031e 	bne	r3,zero,800290c <quorem+0x11c>
 8002900:	10bfff04 	addi	r2,r2,-4
 8002904:	94bfffc4 	addi	r18,r18,-1
 8002908:	a8bffb36 	bltu	r21,r2,80028f8 <__alt_data_end+0xfc0028f8>
 800290c:	84800415 	stw	r18,16(r16)
 8002910:	8009883a 	mov	r4,r16
 8002914:	b80b883a 	mov	r5,r23
 8002918:	80062d80 	call	80062d8 <__mcmp>
 800291c:	10002616 	blt	r2,zero,80029b8 <quorem+0x1c8>
 8002920:	9cc00044 	addi	r19,r19,1
 8002924:	a80d883a 	mov	r6,r21
 8002928:	000b883a 	mov	r5,zero
 800292c:	31000017 	ldw	r4,0(r6)
 8002930:	88800017 	ldw	r2,0(r17)
 8002934:	31800104 	addi	r6,r6,4
 8002938:	20ffffcc 	andi	r3,r4,65535
 800293c:	194b883a 	add	r5,r3,r5
 8002940:	10ffffcc 	andi	r3,r2,65535
 8002944:	28c7c83a 	sub	r3,r5,r3
 8002948:	1004d43a 	srli	r2,r2,16
 800294c:	2008d43a 	srli	r4,r4,16
 8002950:	180bd43a 	srai	r5,r3,16
 8002954:	18ffffcc 	andi	r3,r3,65535
 8002958:	2089c83a 	sub	r4,r4,r2
 800295c:	2149883a 	add	r4,r4,r5
 8002960:	2004943a 	slli	r2,r4,16
 8002964:	8c400104 	addi	r17,r17,4
 8002968:	200bd43a 	srai	r5,r4,16
 800296c:	10c6b03a 	or	r3,r2,r3
 8002970:	30ffff15 	stw	r3,-4(r6)
 8002974:	a47fed2e 	bgeu	r20,r17,800292c <__alt_data_end+0xfc00292c>
 8002978:	9485883a 	add	r2,r18,r18
 800297c:	1085883a 	add	r2,r2,r2
 8002980:	a887883a 	add	r3,r21,r2
 8002984:	18800017 	ldw	r2,0(r3)
 8002988:	10000b1e 	bne	r2,zero,80029b8 <quorem+0x1c8>
 800298c:	18bfff04 	addi	r2,r3,-4
 8002990:	a880082e 	bgeu	r21,r2,80029b4 <quorem+0x1c4>
 8002994:	18ffff17 	ldw	r3,-4(r3)
 8002998:	18000326 	beq	r3,zero,80029a8 <quorem+0x1b8>
 800299c:	00000506 	br	80029b4 <quorem+0x1c4>
 80029a0:	10c00017 	ldw	r3,0(r2)
 80029a4:	1800031e 	bne	r3,zero,80029b4 <quorem+0x1c4>
 80029a8:	10bfff04 	addi	r2,r2,-4
 80029ac:	94bfffc4 	addi	r18,r18,-1
 80029b0:	a8bffb36 	bltu	r21,r2,80029a0 <__alt_data_end+0xfc0029a0>
 80029b4:	84800415 	stw	r18,16(r16)
 80029b8:	9805883a 	mov	r2,r19
 80029bc:	dfc00817 	ldw	ra,32(sp)
 80029c0:	ddc00717 	ldw	r23,28(sp)
 80029c4:	dd800617 	ldw	r22,24(sp)
 80029c8:	dd400517 	ldw	r21,20(sp)
 80029cc:	dd000417 	ldw	r20,16(sp)
 80029d0:	dcc00317 	ldw	r19,12(sp)
 80029d4:	dc800217 	ldw	r18,8(sp)
 80029d8:	dc400117 	ldw	r17,4(sp)
 80029dc:	dc000017 	ldw	r16,0(sp)
 80029e0:	dec00904 	addi	sp,sp,36
 80029e4:	f800283a 	ret
 80029e8:	0005883a 	mov	r2,zero
 80029ec:	003ff306 	br	80029bc <__alt_data_end+0xfc0029bc>

080029f0 <_dtoa_r>:
 80029f0:	20801017 	ldw	r2,64(r4)
 80029f4:	deffde04 	addi	sp,sp,-136
 80029f8:	dd401d15 	stw	r21,116(sp)
 80029fc:	dcc01b15 	stw	r19,108(sp)
 8002a00:	dc801a15 	stw	r18,104(sp)
 8002a04:	dc401915 	stw	r17,100(sp)
 8002a08:	dc001815 	stw	r16,96(sp)
 8002a0c:	dfc02115 	stw	ra,132(sp)
 8002a10:	df002015 	stw	fp,128(sp)
 8002a14:	ddc01f15 	stw	r23,124(sp)
 8002a18:	dd801e15 	stw	r22,120(sp)
 8002a1c:	dd001c15 	stw	r20,112(sp)
 8002a20:	d9c00315 	stw	r7,12(sp)
 8002a24:	2021883a 	mov	r16,r4
 8002a28:	302b883a 	mov	r21,r6
 8002a2c:	2825883a 	mov	r18,r5
 8002a30:	dc402417 	ldw	r17,144(sp)
 8002a34:	3027883a 	mov	r19,r6
 8002a38:	10000826 	beq	r2,zero,8002a5c <_dtoa_r+0x6c>
 8002a3c:	21801117 	ldw	r6,68(r4)
 8002a40:	00c00044 	movi	r3,1
 8002a44:	100b883a 	mov	r5,r2
 8002a48:	1986983a 	sll	r3,r3,r6
 8002a4c:	11800115 	stw	r6,4(r2)
 8002a50:	10c00215 	stw	r3,8(r2)
 8002a54:	8005ac00 	call	8005ac0 <_Bfree>
 8002a58:	80001015 	stw	zero,64(r16)
 8002a5c:	a8002d16 	blt	r21,zero,8002b14 <_dtoa_r+0x124>
 8002a60:	88000015 	stw	zero,0(r17)
 8002a64:	a8dffc2c 	andhi	r3,r21,32752
 8002a68:	009ffc34 	movhi	r2,32752
 8002a6c:	18801b26 	beq	r3,r2,8002adc <_dtoa_r+0xec>
 8002a70:	9009883a 	mov	r4,r18
 8002a74:	980b883a 	mov	r5,r19
 8002a78:	000d883a 	mov	r6,zero
 8002a7c:	000f883a 	mov	r7,zero
 8002a80:	800b4340 	call	800b434 <__eqdf2>
 8002a84:	10002a1e 	bne	r2,zero,8002b30 <_dtoa_r+0x140>
 8002a88:	d8c02317 	ldw	r3,140(sp)
 8002a8c:	d9002517 	ldw	r4,148(sp)
 8002a90:	00800044 	movi	r2,1
 8002a94:	18800015 	stw	r2,0(r3)
 8002a98:	2001a226 	beq	r4,zero,8003124 <_dtoa_r+0x734>
 8002a9c:	00820074 	movhi	r2,2049
 8002aa0:	10bd7744 	addi	r2,r2,-2595
 8002aa4:	20800015 	stw	r2,0(r4)
 8002aa8:	10bfffc4 	addi	r2,r2,-1
 8002aac:	dfc02117 	ldw	ra,132(sp)
 8002ab0:	df002017 	ldw	fp,128(sp)
 8002ab4:	ddc01f17 	ldw	r23,124(sp)
 8002ab8:	dd801e17 	ldw	r22,120(sp)
 8002abc:	dd401d17 	ldw	r21,116(sp)
 8002ac0:	dd001c17 	ldw	r20,112(sp)
 8002ac4:	dcc01b17 	ldw	r19,108(sp)
 8002ac8:	dc801a17 	ldw	r18,104(sp)
 8002acc:	dc401917 	ldw	r17,100(sp)
 8002ad0:	dc001817 	ldw	r16,96(sp)
 8002ad4:	dec02204 	addi	sp,sp,136
 8002ad8:	f800283a 	ret
 8002adc:	d8c02317 	ldw	r3,140(sp)
 8002ae0:	0089c3c4 	movi	r2,9999
 8002ae4:	18800015 	stw	r2,0(r3)
 8002ae8:	90017c26 	beq	r18,zero,80030dc <_dtoa_r+0x6ec>
 8002aec:	00820074 	movhi	r2,2049
 8002af0:	10bd8304 	addi	r2,r2,-2548
 8002af4:	d9002517 	ldw	r4,148(sp)
 8002af8:	203fec26 	beq	r4,zero,8002aac <__alt_data_end+0xfc002aac>
 8002afc:	10c000c7 	ldb	r3,3(r2)
 8002b00:	18017d1e 	bne	r3,zero,80030f8 <_dtoa_r+0x708>
 8002b04:	10c000c4 	addi	r3,r2,3
 8002b08:	d9802517 	ldw	r6,148(sp)
 8002b0c:	30c00015 	stw	r3,0(r6)
 8002b10:	003fe606 	br	8002aac <__alt_data_end+0xfc002aac>
 8002b14:	04e00034 	movhi	r19,32768
 8002b18:	9cffffc4 	addi	r19,r19,-1
 8002b1c:	00800044 	movi	r2,1
 8002b20:	ace6703a 	and	r19,r21,r19
 8002b24:	88800015 	stw	r2,0(r17)
 8002b28:	982b883a 	mov	r21,r19
 8002b2c:	003fcd06 	br	8002a64 <__alt_data_end+0xfc002a64>
 8002b30:	d8800204 	addi	r2,sp,8
 8002b34:	a822d53a 	srli	r17,r21,20
 8002b38:	d8800015 	stw	r2,0(sp)
 8002b3c:	8009883a 	mov	r4,r16
 8002b40:	900b883a 	mov	r5,r18
 8002b44:	980d883a 	mov	r6,r19
 8002b48:	d9c00104 	addi	r7,sp,4
 8002b4c:	800664c0 	call	800664c <__d2b>
 8002b50:	1039883a 	mov	fp,r2
 8002b54:	88016a1e 	bne	r17,zero,8003100 <_dtoa_r+0x710>
 8002b58:	dd000217 	ldw	r20,8(sp)
 8002b5c:	dc400117 	ldw	r17,4(sp)
 8002b60:	00befbc4 	movi	r2,-1041
 8002b64:	a463883a 	add	r17,r20,r17
 8002b68:	8882ea16 	blt	r17,r2,8003714 <_dtoa_r+0xd24>
 8002b6c:	00bf0384 	movi	r2,-1010
 8002b70:	1445c83a 	sub	r2,r2,r17
 8002b74:	89010484 	addi	r4,r17,1042
 8002b78:	a8aa983a 	sll	r21,r21,r2
 8002b7c:	9108d83a 	srl	r4,r18,r4
 8002b80:	a908b03a 	or	r4,r21,r4
 8002b84:	800c7c40 	call	800c7c4 <__floatunsidf>
 8002b88:	017f8434 	movhi	r5,65040
 8002b8c:	01800044 	movi	r6,1
 8002b90:	1009883a 	mov	r4,r2
 8002b94:	194b883a 	add	r5,r3,r5
 8002b98:	8c7fffc4 	addi	r17,r17,-1
 8002b9c:	d9800f15 	stw	r6,60(sp)
 8002ba0:	000d883a 	mov	r6,zero
 8002ba4:	01cffe34 	movhi	r7,16376
 8002ba8:	800bd9c0 	call	800bd9c <__subdf3>
 8002bac:	0198dbf4 	movhi	r6,25455
 8002bb0:	01cff4f4 	movhi	r7,16339
 8002bb4:	1009883a 	mov	r4,r2
 8002bb8:	180b883a 	mov	r5,r3
 8002bbc:	3190d844 	addi	r6,r6,17249
 8002bc0:	39e1e9c4 	addi	r7,r7,-30809
 8002bc4:	800b6780 	call	800b678 <__muldf3>
 8002bc8:	01a2d874 	movhi	r6,35681
 8002bcc:	01cff1f4 	movhi	r7,16327
 8002bd0:	180b883a 	mov	r5,r3
 8002bd4:	31b22cc4 	addi	r6,r6,-14157
 8002bd8:	39e28a04 	addi	r7,r7,-30168
 8002bdc:	1009883a 	mov	r4,r2
 8002be0:	800a2cc0 	call	800a2cc <__adddf3>
 8002be4:	8809883a 	mov	r4,r17
 8002be8:	102d883a 	mov	r22,r2
 8002bec:	182b883a 	mov	r21,r3
 8002bf0:	800c6f40 	call	800c6f4 <__floatsidf>
 8002bf4:	019427f4 	movhi	r6,20639
 8002bf8:	01cff4f4 	movhi	r7,16339
 8002bfc:	1009883a 	mov	r4,r2
 8002c00:	180b883a 	mov	r5,r3
 8002c04:	319e7ec4 	addi	r6,r6,31227
 8002c08:	39d104c4 	addi	r7,r7,17427
 8002c0c:	800b6780 	call	800b678 <__muldf3>
 8002c10:	b009883a 	mov	r4,r22
 8002c14:	a80b883a 	mov	r5,r21
 8002c18:	100d883a 	mov	r6,r2
 8002c1c:	180f883a 	mov	r7,r3
 8002c20:	800a2cc0 	call	800a2cc <__adddf3>
 8002c24:	1009883a 	mov	r4,r2
 8002c28:	180b883a 	mov	r5,r3
 8002c2c:	102d883a 	mov	r22,r2
 8002c30:	182b883a 	mov	r21,r3
 8002c34:	800c66c0 	call	800c66c <__fixdfsi>
 8002c38:	b009883a 	mov	r4,r22
 8002c3c:	a80b883a 	mov	r5,r21
 8002c40:	000d883a 	mov	r6,zero
 8002c44:	000f883a 	mov	r7,zero
 8002c48:	d8800515 	stw	r2,20(sp)
 8002c4c:	800b5980 	call	800b598 <__ledf2>
 8002c50:	10023116 	blt	r2,zero,8003518 <_dtoa_r+0xb28>
 8002c54:	d8c00517 	ldw	r3,20(sp)
 8002c58:	00800584 	movi	r2,22
 8002c5c:	10c21f36 	bltu	r2,r3,80034dc <_dtoa_r+0xaec>
 8002c60:	180490fa 	slli	r2,r3,3
 8002c64:	00c20074 	movhi	r3,2049
 8002c68:	18fd9f04 	addi	r3,r3,-2436
 8002c6c:	1885883a 	add	r2,r3,r2
 8002c70:	11000017 	ldw	r4,0(r2)
 8002c74:	11400117 	ldw	r5,4(r2)
 8002c78:	900d883a 	mov	r6,r18
 8002c7c:	980f883a 	mov	r7,r19
 8002c80:	800b4b80 	call	800b4b8 <__gedf2>
 8002c84:	0082a70e 	bge	zero,r2,8003724 <_dtoa_r+0xd34>
 8002c88:	d9000517 	ldw	r4,20(sp)
 8002c8c:	d8000c15 	stw	zero,48(sp)
 8002c90:	213fffc4 	addi	r4,r4,-1
 8002c94:	d9000515 	stw	r4,20(sp)
 8002c98:	a463c83a 	sub	r17,r20,r17
 8002c9c:	8dbfffc4 	addi	r22,r17,-1
 8002ca0:	b0021916 	blt	r22,zero,8003508 <_dtoa_r+0xb18>
 8002ca4:	d8000815 	stw	zero,32(sp)
 8002ca8:	d8800517 	ldw	r2,20(sp)
 8002cac:	10020e16 	blt	r2,zero,80034e8 <_dtoa_r+0xaf8>
 8002cb0:	b0ad883a 	add	r22,r22,r2
 8002cb4:	d8800a15 	stw	r2,40(sp)
 8002cb8:	d8000915 	stw	zero,36(sp)
 8002cbc:	d8c00317 	ldw	r3,12(sp)
 8002cc0:	00800244 	movi	r2,9
 8002cc4:	10c11a36 	bltu	r2,r3,8003130 <_dtoa_r+0x740>
 8002cc8:	00800144 	movi	r2,5
 8002ccc:	10c4fc0e 	bge	r2,r3,80040c0 <_dtoa_r+0x16d0>
 8002cd0:	18ffff04 	addi	r3,r3,-4
 8002cd4:	d8c00315 	stw	r3,12(sp)
 8002cd8:	0029883a 	mov	r20,zero
 8002cdc:	d9800317 	ldw	r6,12(sp)
 8002ce0:	008000c4 	movi	r2,3
 8002ce4:	3083bd26 	beq	r6,r2,8003bdc <_dtoa_r+0x11ec>
 8002ce8:	1183670e 	bge	r2,r6,8003a88 <_dtoa_r+0x1098>
 8002cec:	d8c00317 	ldw	r3,12(sp)
 8002cf0:	00800104 	movi	r2,4
 8002cf4:	1882e726 	beq	r3,r2,8003894 <_dtoa_r+0xea4>
 8002cf8:	00800144 	movi	r2,5
 8002cfc:	1884f21e 	bne	r3,r2,80040c8 <_dtoa_r+0x16d8>
 8002d00:	00800044 	movi	r2,1
 8002d04:	d8800b15 	stw	r2,44(sp)
 8002d08:	d8c02217 	ldw	r3,136(sp)
 8002d0c:	d9000517 	ldw	r4,20(sp)
 8002d10:	1907883a 	add	r3,r3,r4
 8002d14:	19800044 	addi	r6,r3,1
 8002d18:	d8c00d15 	stw	r3,52(sp)
 8002d1c:	d9800615 	stw	r6,24(sp)
 8002d20:	0183c30e 	bge	zero,r6,8003c30 <_dtoa_r+0x1240>
 8002d24:	d9800617 	ldw	r6,24(sp)
 8002d28:	3023883a 	mov	r17,r6
 8002d2c:	80001115 	stw	zero,68(r16)
 8002d30:	008005c4 	movi	r2,23
 8002d34:	1184f62e 	bgeu	r2,r6,8004110 <_dtoa_r+0x1720>
 8002d38:	00c00044 	movi	r3,1
 8002d3c:	00800104 	movi	r2,4
 8002d40:	1085883a 	add	r2,r2,r2
 8002d44:	11000504 	addi	r4,r2,20
 8002d48:	180b883a 	mov	r5,r3
 8002d4c:	18c00044 	addi	r3,r3,1
 8002d50:	313ffb2e 	bgeu	r6,r4,8002d40 <__alt_data_end+0xfc002d40>
 8002d54:	81401115 	stw	r5,68(r16)
 8002d58:	8009883a 	mov	r4,r16
 8002d5c:	8005a180 	call	8005a18 <_Balloc>
 8002d60:	d8800715 	stw	r2,28(sp)
 8002d64:	80801015 	stw	r2,64(r16)
 8002d68:	00800384 	movi	r2,14
 8002d6c:	1440fd36 	bltu	r2,r17,8003164 <_dtoa_r+0x774>
 8002d70:	a000fc26 	beq	r20,zero,8003164 <_dtoa_r+0x774>
 8002d74:	d8800517 	ldw	r2,20(sp)
 8002d78:	0083b90e 	bge	zero,r2,8003c60 <_dtoa_r+0x1270>
 8002d7c:	d8c00517 	ldw	r3,20(sp)
 8002d80:	108003cc 	andi	r2,r2,15
 8002d84:	100490fa 	slli	r2,r2,3
 8002d88:	182fd13a 	srai	r23,r3,4
 8002d8c:	00c20074 	movhi	r3,2049
 8002d90:	18fd9f04 	addi	r3,r3,-2436
 8002d94:	1885883a 	add	r2,r3,r2
 8002d98:	b8c0040c 	andi	r3,r23,16
 8002d9c:	12c00017 	ldw	r11,0(r2)
 8002da0:	12800117 	ldw	r10,4(r2)
 8002da4:	18039726 	beq	r3,zero,8003c04 <_dtoa_r+0x1214>
 8002da8:	00820074 	movhi	r2,2049
 8002dac:	10bd9504 	addi	r2,r2,-2476
 8002db0:	11800817 	ldw	r6,32(r2)
 8002db4:	11c00917 	ldw	r7,36(r2)
 8002db8:	9009883a 	mov	r4,r18
 8002dbc:	980b883a 	mov	r5,r19
 8002dc0:	da801615 	stw	r10,88(sp)
 8002dc4:	dac01515 	stw	r11,84(sp)
 8002dc8:	800ab680 	call	800ab68 <__divdf3>
 8002dcc:	da801617 	ldw	r10,88(sp)
 8002dd0:	dac01517 	ldw	r11,84(sp)
 8002dd4:	bdc003cc 	andi	r23,r23,15
 8002dd8:	044000c4 	movi	r17,3
 8002ddc:	d8800e15 	stw	r2,56(sp)
 8002de0:	182b883a 	mov	r21,r3
 8002de4:	b8001126 	beq	r23,zero,8002e2c <_dtoa_r+0x43c>
 8002de8:	05020074 	movhi	r20,2049
 8002dec:	a53d9504 	addi	r20,r20,-2476
 8002df0:	5805883a 	mov	r2,r11
 8002df4:	5007883a 	mov	r3,r10
 8002df8:	b980004c 	andi	r6,r23,1
 8002dfc:	1009883a 	mov	r4,r2
 8002e00:	b82fd07a 	srai	r23,r23,1
 8002e04:	180b883a 	mov	r5,r3
 8002e08:	30000426 	beq	r6,zero,8002e1c <_dtoa_r+0x42c>
 8002e0c:	a1800017 	ldw	r6,0(r20)
 8002e10:	a1c00117 	ldw	r7,4(r20)
 8002e14:	8c400044 	addi	r17,r17,1
 8002e18:	800b6780 	call	800b678 <__muldf3>
 8002e1c:	a5000204 	addi	r20,r20,8
 8002e20:	b83ff51e 	bne	r23,zero,8002df8 <__alt_data_end+0xfc002df8>
 8002e24:	1017883a 	mov	r11,r2
 8002e28:	1815883a 	mov	r10,r3
 8002e2c:	d9000e17 	ldw	r4,56(sp)
 8002e30:	a80b883a 	mov	r5,r21
 8002e34:	580d883a 	mov	r6,r11
 8002e38:	500f883a 	mov	r7,r10
 8002e3c:	800ab680 	call	800ab68 <__divdf3>
 8002e40:	1029883a 	mov	r20,r2
 8002e44:	182b883a 	mov	r21,r3
 8002e48:	d9800c17 	ldw	r6,48(sp)
 8002e4c:	30000626 	beq	r6,zero,8002e68 <_dtoa_r+0x478>
 8002e50:	a009883a 	mov	r4,r20
 8002e54:	a80b883a 	mov	r5,r21
 8002e58:	000d883a 	mov	r6,zero
 8002e5c:	01cffc34 	movhi	r7,16368
 8002e60:	800b5980 	call	800b598 <__ledf2>
 8002e64:	10043216 	blt	r2,zero,8003f30 <_dtoa_r+0x1540>
 8002e68:	8809883a 	mov	r4,r17
 8002e6c:	800c6f40 	call	800c6f4 <__floatsidf>
 8002e70:	1009883a 	mov	r4,r2
 8002e74:	180b883a 	mov	r5,r3
 8002e78:	a00d883a 	mov	r6,r20
 8002e7c:	a80f883a 	mov	r7,r21
 8002e80:	800b6780 	call	800b678 <__muldf3>
 8002e84:	000d883a 	mov	r6,zero
 8002e88:	1009883a 	mov	r4,r2
 8002e8c:	180b883a 	mov	r5,r3
 8002e90:	01d00734 	movhi	r7,16412
 8002e94:	800a2cc0 	call	800a2cc <__adddf3>
 8002e98:	1023883a 	mov	r17,r2
 8002e9c:	d9800617 	ldw	r6,24(sp)
 8002ea0:	00bf3034 	movhi	r2,64704
 8002ea4:	1885883a 	add	r2,r3,r2
 8002ea8:	d8800e15 	stw	r2,56(sp)
 8002eac:	30032e26 	beq	r6,zero,8003b68 <_dtoa_r+0x1178>
 8002eb0:	d8c00517 	ldw	r3,20(sp)
 8002eb4:	da800617 	ldw	r10,24(sp)
 8002eb8:	d8c01215 	stw	r3,72(sp)
 8002ebc:	d9000b17 	ldw	r4,44(sp)
 8002ec0:	2003b026 	beq	r4,zero,8003d84 <_dtoa_r+0x1394>
 8002ec4:	50bfffc4 	addi	r2,r10,-1
 8002ec8:	100490fa 	slli	r2,r2,3
 8002ecc:	00c20074 	movhi	r3,2049
 8002ed0:	18fd9f04 	addi	r3,r3,-2436
 8002ed4:	1885883a 	add	r2,r3,r2
 8002ed8:	11800017 	ldw	r6,0(r2)
 8002edc:	11c00117 	ldw	r7,4(r2)
 8002ee0:	d8800717 	ldw	r2,28(sp)
 8002ee4:	0009883a 	mov	r4,zero
 8002ee8:	014ff834 	movhi	r5,16352
 8002eec:	da801615 	stw	r10,88(sp)
 8002ef0:	15c00044 	addi	r23,r2,1
 8002ef4:	800ab680 	call	800ab68 <__divdf3>
 8002ef8:	d9c00e17 	ldw	r7,56(sp)
 8002efc:	880d883a 	mov	r6,r17
 8002f00:	1009883a 	mov	r4,r2
 8002f04:	180b883a 	mov	r5,r3
 8002f08:	800bd9c0 	call	800bd9c <__subdf3>
 8002f0c:	a80b883a 	mov	r5,r21
 8002f10:	a009883a 	mov	r4,r20
 8002f14:	d8c01015 	stw	r3,64(sp)
 8002f18:	d8800e15 	stw	r2,56(sp)
 8002f1c:	800c66c0 	call	800c66c <__fixdfsi>
 8002f20:	1009883a 	mov	r4,r2
 8002f24:	d8801715 	stw	r2,92(sp)
 8002f28:	800c6f40 	call	800c6f4 <__floatsidf>
 8002f2c:	a009883a 	mov	r4,r20
 8002f30:	a80b883a 	mov	r5,r21
 8002f34:	100d883a 	mov	r6,r2
 8002f38:	180f883a 	mov	r7,r3
 8002f3c:	800bd9c0 	call	800bd9c <__subdf3>
 8002f40:	da001717 	ldw	r8,92(sp)
 8002f44:	1829883a 	mov	r20,r3
 8002f48:	d8c00717 	ldw	r3,28(sp)
 8002f4c:	d9000e17 	ldw	r4,56(sp)
 8002f50:	d9401017 	ldw	r5,64(sp)
 8002f54:	42000c04 	addi	r8,r8,48
 8002f58:	1023883a 	mov	r17,r2
 8002f5c:	1a000005 	stb	r8,0(r3)
 8002f60:	880d883a 	mov	r6,r17
 8002f64:	a00f883a 	mov	r7,r20
 8002f68:	402b883a 	mov	r21,r8
 8002f6c:	800b4b80 	call	800b4b8 <__gedf2>
 8002f70:	00844516 	blt	zero,r2,8004088 <_dtoa_r+0x1698>
 8002f74:	0009883a 	mov	r4,zero
 8002f78:	014ffc34 	movhi	r5,16368
 8002f7c:	880d883a 	mov	r6,r17
 8002f80:	a00f883a 	mov	r7,r20
 8002f84:	800bd9c0 	call	800bd9c <__subdf3>
 8002f88:	d9000e17 	ldw	r4,56(sp)
 8002f8c:	d9401017 	ldw	r5,64(sp)
 8002f90:	100d883a 	mov	r6,r2
 8002f94:	180f883a 	mov	r7,r3
 8002f98:	800b4b80 	call	800b4b8 <__gedf2>
 8002f9c:	da801617 	ldw	r10,88(sp)
 8002fa0:	00843616 	blt	zero,r2,800407c <_dtoa_r+0x168c>
 8002fa4:	00800044 	movi	r2,1
 8002fa8:	12806e0e 	bge	r2,r10,8003164 <_dtoa_r+0x774>
 8002fac:	d9000717 	ldw	r4,28(sp)
 8002fb0:	dd801315 	stw	r22,76(sp)
 8002fb4:	dc001115 	stw	r16,68(sp)
 8002fb8:	2295883a 	add	r10,r4,r10
 8002fbc:	dcc01415 	stw	r19,80(sp)
 8002fc0:	502d883a 	mov	r22,r10
 8002fc4:	dcc01017 	ldw	r19,64(sp)
 8002fc8:	b821883a 	mov	r16,r23
 8002fcc:	dc801015 	stw	r18,64(sp)
 8002fd0:	dc800e17 	ldw	r18,56(sp)
 8002fd4:	00000906 	br	8002ffc <_dtoa_r+0x60c>
 8002fd8:	800bd9c0 	call	800bd9c <__subdf3>
 8002fdc:	1009883a 	mov	r4,r2
 8002fe0:	180b883a 	mov	r5,r3
 8002fe4:	900d883a 	mov	r6,r18
 8002fe8:	980f883a 	mov	r7,r19
 8002fec:	800b5980 	call	800b598 <__ledf2>
 8002ff0:	10040e16 	blt	r2,zero,800402c <_dtoa_r+0x163c>
 8002ff4:	b821883a 	mov	r16,r23
 8002ff8:	bd841026 	beq	r23,r22,800403c <_dtoa_r+0x164c>
 8002ffc:	9009883a 	mov	r4,r18
 8003000:	980b883a 	mov	r5,r19
 8003004:	000d883a 	mov	r6,zero
 8003008:	01d00934 	movhi	r7,16420
 800300c:	800b6780 	call	800b678 <__muldf3>
 8003010:	000d883a 	mov	r6,zero
 8003014:	01d00934 	movhi	r7,16420
 8003018:	8809883a 	mov	r4,r17
 800301c:	a00b883a 	mov	r5,r20
 8003020:	1025883a 	mov	r18,r2
 8003024:	1827883a 	mov	r19,r3
 8003028:	800b6780 	call	800b678 <__muldf3>
 800302c:	180b883a 	mov	r5,r3
 8003030:	1009883a 	mov	r4,r2
 8003034:	1823883a 	mov	r17,r3
 8003038:	1029883a 	mov	r20,r2
 800303c:	800c66c0 	call	800c66c <__fixdfsi>
 8003040:	1009883a 	mov	r4,r2
 8003044:	102b883a 	mov	r21,r2
 8003048:	800c6f40 	call	800c6f4 <__floatsidf>
 800304c:	a009883a 	mov	r4,r20
 8003050:	880b883a 	mov	r5,r17
 8003054:	100d883a 	mov	r6,r2
 8003058:	180f883a 	mov	r7,r3
 800305c:	800bd9c0 	call	800bd9c <__subdf3>
 8003060:	ad400c04 	addi	r21,r21,48
 8003064:	1009883a 	mov	r4,r2
 8003068:	180b883a 	mov	r5,r3
 800306c:	900d883a 	mov	r6,r18
 8003070:	980f883a 	mov	r7,r19
 8003074:	85400005 	stb	r21,0(r16)
 8003078:	1023883a 	mov	r17,r2
 800307c:	1829883a 	mov	r20,r3
 8003080:	800b5980 	call	800b598 <__ledf2>
 8003084:	bdc00044 	addi	r23,r23,1
 8003088:	0009883a 	mov	r4,zero
 800308c:	014ffc34 	movhi	r5,16368
 8003090:	880d883a 	mov	r6,r17
 8003094:	a00f883a 	mov	r7,r20
 8003098:	103fcf0e 	bge	r2,zero,8002fd8 <__alt_data_end+0xfc002fd8>
 800309c:	d9801217 	ldw	r6,72(sp)
 80030a0:	dc001117 	ldw	r16,68(sp)
 80030a4:	d9800515 	stw	r6,20(sp)
 80030a8:	8009883a 	mov	r4,r16
 80030ac:	e00b883a 	mov	r5,fp
 80030b0:	8005ac00 	call	8005ac0 <_Bfree>
 80030b4:	d8c00517 	ldw	r3,20(sp)
 80030b8:	d9002317 	ldw	r4,140(sp)
 80030bc:	d9802517 	ldw	r6,148(sp)
 80030c0:	b8000005 	stb	zero,0(r23)
 80030c4:	18800044 	addi	r2,r3,1
 80030c8:	20800015 	stw	r2,0(r4)
 80030cc:	30027226 	beq	r6,zero,8003a98 <_dtoa_r+0x10a8>
 80030d0:	35c00015 	stw	r23,0(r6)
 80030d4:	d8800717 	ldw	r2,28(sp)
 80030d8:	003e7406 	br	8002aac <__alt_data_end+0xfc002aac>
 80030dc:	00800434 	movhi	r2,16
 80030e0:	10bfffc4 	addi	r2,r2,-1
 80030e4:	a8aa703a 	and	r21,r21,r2
 80030e8:	a83e801e 	bne	r21,zero,8002aec <__alt_data_end+0xfc002aec>
 80030ec:	00820074 	movhi	r2,2049
 80030f0:	10bd8004 	addi	r2,r2,-2560
 80030f4:	003e7f06 	br	8002af4 <__alt_data_end+0xfc002af4>
 80030f8:	10c00204 	addi	r3,r2,8
 80030fc:	003e8206 	br	8002b08 <__alt_data_end+0xfc002b08>
 8003100:	01400434 	movhi	r5,16
 8003104:	297fffc4 	addi	r5,r5,-1
 8003108:	994a703a 	and	r5,r19,r5
 800310c:	9009883a 	mov	r4,r18
 8003110:	8c7f0044 	addi	r17,r17,-1023
 8003114:	294ffc34 	orhi	r5,r5,16368
 8003118:	dd000217 	ldw	r20,8(sp)
 800311c:	d8000f15 	stw	zero,60(sp)
 8003120:	003e9f06 	br	8002ba0 <__alt_data_end+0xfc002ba0>
 8003124:	00820074 	movhi	r2,2049
 8003128:	10bd7704 	addi	r2,r2,-2596
 800312c:	003e5f06 	br	8002aac <__alt_data_end+0xfc002aac>
 8003130:	80001115 	stw	zero,68(r16)
 8003134:	8009883a 	mov	r4,r16
 8003138:	000b883a 	mov	r5,zero
 800313c:	8005a180 	call	8005a18 <_Balloc>
 8003140:	01bfffc4 	movi	r6,-1
 8003144:	d8800715 	stw	r2,28(sp)
 8003148:	80801015 	stw	r2,64(r16)
 800314c:	00800044 	movi	r2,1
 8003150:	d9800615 	stw	r6,24(sp)
 8003154:	d8800b15 	stw	r2,44(sp)
 8003158:	d8002215 	stw	zero,136(sp)
 800315c:	d9800d15 	stw	r6,52(sp)
 8003160:	d8000315 	stw	zero,12(sp)
 8003164:	d8800117 	ldw	r2,4(sp)
 8003168:	10008e16 	blt	r2,zero,80033a4 <_dtoa_r+0x9b4>
 800316c:	d9000517 	ldw	r4,20(sp)
 8003170:	00c00384 	movi	r3,14
 8003174:	19008b16 	blt	r3,r4,80033a4 <_dtoa_r+0x9b4>
 8003178:	200490fa 	slli	r2,r4,3
 800317c:	00c20074 	movhi	r3,2049
 8003180:	d9802217 	ldw	r6,136(sp)
 8003184:	18fd9f04 	addi	r3,r3,-2436
 8003188:	1885883a 	add	r2,r3,r2
 800318c:	14400017 	ldw	r17,0(r2)
 8003190:	15000117 	ldw	r20,4(r2)
 8003194:	3001c716 	blt	r6,zero,80038b4 <_dtoa_r+0xec4>
 8003198:	880d883a 	mov	r6,r17
 800319c:	a00f883a 	mov	r7,r20
 80031a0:	9009883a 	mov	r4,r18
 80031a4:	980b883a 	mov	r5,r19
 80031a8:	800ab680 	call	800ab68 <__divdf3>
 80031ac:	180b883a 	mov	r5,r3
 80031b0:	1009883a 	mov	r4,r2
 80031b4:	800c66c0 	call	800c66c <__fixdfsi>
 80031b8:	1009883a 	mov	r4,r2
 80031bc:	102d883a 	mov	r22,r2
 80031c0:	800c6f40 	call	800c6f4 <__floatsidf>
 80031c4:	1009883a 	mov	r4,r2
 80031c8:	180b883a 	mov	r5,r3
 80031cc:	880d883a 	mov	r6,r17
 80031d0:	a00f883a 	mov	r7,r20
 80031d4:	800b6780 	call	800b678 <__muldf3>
 80031d8:	9009883a 	mov	r4,r18
 80031dc:	980b883a 	mov	r5,r19
 80031e0:	100d883a 	mov	r6,r2
 80031e4:	180f883a 	mov	r7,r3
 80031e8:	800bd9c0 	call	800bd9c <__subdf3>
 80031ec:	d9000717 	ldw	r4,28(sp)
 80031f0:	d9800617 	ldw	r6,24(sp)
 80031f4:	180b883a 	mov	r5,r3
 80031f8:	b0c00c04 	addi	r3,r22,48
 80031fc:	20c00005 	stb	r3,0(r4)
 8003200:	25c00044 	addi	r23,r4,1
 8003204:	01000044 	movi	r4,1
 8003208:	1011883a 	mov	r8,r2
 800320c:	2807883a 	mov	r3,r5
 8003210:	31003d26 	beq	r6,r4,8003308 <_dtoa_r+0x918>
 8003214:	000d883a 	mov	r6,zero
 8003218:	01d00934 	movhi	r7,16420
 800321c:	1009883a 	mov	r4,r2
 8003220:	800b6780 	call	800b678 <__muldf3>
 8003224:	1009883a 	mov	r4,r2
 8003228:	180b883a 	mov	r5,r3
 800322c:	000d883a 	mov	r6,zero
 8003230:	000f883a 	mov	r7,zero
 8003234:	1027883a 	mov	r19,r2
 8003238:	182b883a 	mov	r21,r3
 800323c:	800b4340 	call	800b434 <__eqdf2>
 8003240:	103f9926 	beq	r2,zero,80030a8 <__alt_data_end+0xfc0030a8>
 8003244:	d8c00617 	ldw	r3,24(sp)
 8003248:	d9000717 	ldw	r4,28(sp)
 800324c:	b825883a 	mov	r18,r23
 8003250:	18bfffc4 	addi	r2,r3,-1
 8003254:	20ad883a 	add	r22,r4,r2
 8003258:	dc000315 	stw	r16,12(sp)
 800325c:	00000a06 	br	8003288 <_dtoa_r+0x898>
 8003260:	800b6780 	call	800b678 <__muldf3>
 8003264:	1009883a 	mov	r4,r2
 8003268:	180b883a 	mov	r5,r3
 800326c:	000d883a 	mov	r6,zero
 8003270:	000f883a 	mov	r7,zero
 8003274:	1027883a 	mov	r19,r2
 8003278:	182b883a 	mov	r21,r3
 800327c:	b825883a 	mov	r18,r23
 8003280:	800b4340 	call	800b434 <__eqdf2>
 8003284:	10022626 	beq	r2,zero,8003b20 <_dtoa_r+0x1130>
 8003288:	880d883a 	mov	r6,r17
 800328c:	a00f883a 	mov	r7,r20
 8003290:	9809883a 	mov	r4,r19
 8003294:	a80b883a 	mov	r5,r21
 8003298:	800ab680 	call	800ab68 <__divdf3>
 800329c:	180b883a 	mov	r5,r3
 80032a0:	1009883a 	mov	r4,r2
 80032a4:	800c66c0 	call	800c66c <__fixdfsi>
 80032a8:	1009883a 	mov	r4,r2
 80032ac:	1021883a 	mov	r16,r2
 80032b0:	800c6f40 	call	800c6f4 <__floatsidf>
 80032b4:	1009883a 	mov	r4,r2
 80032b8:	180b883a 	mov	r5,r3
 80032bc:	880d883a 	mov	r6,r17
 80032c0:	a00f883a 	mov	r7,r20
 80032c4:	800b6780 	call	800b678 <__muldf3>
 80032c8:	9809883a 	mov	r4,r19
 80032cc:	a80b883a 	mov	r5,r21
 80032d0:	100d883a 	mov	r6,r2
 80032d4:	180f883a 	mov	r7,r3
 80032d8:	800bd9c0 	call	800bd9c <__subdf3>
 80032dc:	82000c04 	addi	r8,r16,48
 80032e0:	92000005 	stb	r8,0(r18)
 80032e4:	1009883a 	mov	r4,r2
 80032e8:	180b883a 	mov	r5,r3
 80032ec:	000d883a 	mov	r6,zero
 80032f0:	01d00934 	movhi	r7,16420
 80032f4:	1011883a 	mov	r8,r2
 80032f8:	bdc00044 	addi	r23,r23,1
 80032fc:	95bfd81e 	bne	r18,r22,8003260 <__alt_data_end+0xfc003260>
 8003300:	802d883a 	mov	r22,r16
 8003304:	dc000317 	ldw	r16,12(sp)
 8003308:	4009883a 	mov	r4,r8
 800330c:	180b883a 	mov	r5,r3
 8003310:	400d883a 	mov	r6,r8
 8003314:	180f883a 	mov	r7,r3
 8003318:	800a2cc0 	call	800a2cc <__adddf3>
 800331c:	8809883a 	mov	r4,r17
 8003320:	a00b883a 	mov	r5,r20
 8003324:	100d883a 	mov	r6,r2
 8003328:	180f883a 	mov	r7,r3
 800332c:	1027883a 	mov	r19,r2
 8003330:	1825883a 	mov	r18,r3
 8003334:	800b5980 	call	800b598 <__ledf2>
 8003338:	10000816 	blt	r2,zero,800335c <_dtoa_r+0x96c>
 800333c:	8809883a 	mov	r4,r17
 8003340:	a00b883a 	mov	r5,r20
 8003344:	980d883a 	mov	r6,r19
 8003348:	900f883a 	mov	r7,r18
 800334c:	800b4340 	call	800b434 <__eqdf2>
 8003350:	103f551e 	bne	r2,zero,80030a8 <__alt_data_end+0xfc0030a8>
 8003354:	b580004c 	andi	r22,r22,1
 8003358:	b03f5326 	beq	r22,zero,80030a8 <__alt_data_end+0xfc0030a8>
 800335c:	bd7fffc3 	ldbu	r21,-1(r23)
 8003360:	b8bfffc4 	addi	r2,r23,-1
 8003364:	1007883a 	mov	r3,r2
 8003368:	01400e44 	movi	r5,57
 800336c:	d9800717 	ldw	r6,28(sp)
 8003370:	00000506 	br	8003388 <_dtoa_r+0x998>
 8003374:	18ffffc4 	addi	r3,r3,-1
 8003378:	30825e26 	beq	r6,r2,8003cf4 <_dtoa_r+0x1304>
 800337c:	1d400003 	ldbu	r21,0(r3)
 8003380:	102f883a 	mov	r23,r2
 8003384:	10bfffc4 	addi	r2,r2,-1
 8003388:	a9003fcc 	andi	r4,r21,255
 800338c:	2100201c 	xori	r4,r4,128
 8003390:	213fe004 	addi	r4,r4,-128
 8003394:	217ff726 	beq	r4,r5,8003374 <__alt_data_end+0xfc003374>
 8003398:	aa000044 	addi	r8,r21,1
 800339c:	12000005 	stb	r8,0(r2)
 80033a0:	003f4106 	br	80030a8 <__alt_data_end+0xfc0030a8>
 80033a4:	d8c00b17 	ldw	r3,44(sp)
 80033a8:	18006726 	beq	r3,zero,8003548 <_dtoa_r+0xb58>
 80033ac:	d9000317 	ldw	r4,12(sp)
 80033b0:	00c00044 	movi	r3,1
 80033b4:	19016a0e 	bge	r3,r4,8003960 <_dtoa_r+0xf70>
 80033b8:	d8800617 	ldw	r2,24(sp)
 80033bc:	d8c00917 	ldw	r3,36(sp)
 80033c0:	157fffc4 	addi	r21,r2,-1
 80033c4:	1d420716 	blt	r3,r21,8003be4 <_dtoa_r+0x11f4>
 80033c8:	1d6bc83a 	sub	r21,r3,r21
 80033cc:	d8800617 	ldw	r2,24(sp)
 80033d0:	1002c716 	blt	r2,zero,8003ef0 <_dtoa_r+0x1500>
 80033d4:	dd000817 	ldw	r20,32(sp)
 80033d8:	d8800617 	ldw	r2,24(sp)
 80033dc:	d9800817 	ldw	r6,32(sp)
 80033e0:	8009883a 	mov	r4,r16
 80033e4:	01400044 	movi	r5,1
 80033e8:	308d883a 	add	r6,r6,r2
 80033ec:	d9800815 	stw	r6,32(sp)
 80033f0:	b0ad883a 	add	r22,r22,r2
 80033f4:	8005e180 	call	8005e18 <__i2b>
 80033f8:	1023883a 	mov	r17,r2
 80033fc:	a0000826 	beq	r20,zero,8003420 <_dtoa_r+0xa30>
 8003400:	0580070e 	bge	zero,r22,8003420 <_dtoa_r+0xa30>
 8003404:	b005883a 	mov	r2,r22
 8003408:	a5812016 	blt	r20,r22,800388c <_dtoa_r+0xe9c>
 800340c:	d8c00817 	ldw	r3,32(sp)
 8003410:	a0a9c83a 	sub	r20,r20,r2
 8003414:	b0adc83a 	sub	r22,r22,r2
 8003418:	1887c83a 	sub	r3,r3,r2
 800341c:	d8c00815 	stw	r3,32(sp)
 8003420:	d9000917 	ldw	r4,36(sp)
 8003424:	0100140e 	bge	zero,r4,8003478 <_dtoa_r+0xa88>
 8003428:	d9800b17 	ldw	r6,44(sp)
 800342c:	3001e526 	beq	r6,zero,8003bc4 <_dtoa_r+0x11d4>
 8003430:	05400e0e 	bge	zero,r21,800346c <_dtoa_r+0xa7c>
 8003434:	880b883a 	mov	r5,r17
 8003438:	8009883a 	mov	r4,r16
 800343c:	a80d883a 	mov	r6,r21
 8003440:	80060500 	call	8006050 <__pow5mult>
 8003444:	e00d883a 	mov	r6,fp
 8003448:	8009883a 	mov	r4,r16
 800344c:	100b883a 	mov	r5,r2
 8003450:	1023883a 	mov	r17,r2
 8003454:	8005e540 	call	8005e54 <__multiply>
 8003458:	102f883a 	mov	r23,r2
 800345c:	e00b883a 	mov	r5,fp
 8003460:	8009883a 	mov	r4,r16
 8003464:	8005ac00 	call	8005ac0 <_Bfree>
 8003468:	b839883a 	mov	fp,r23
 800346c:	d8800917 	ldw	r2,36(sp)
 8003470:	154dc83a 	sub	r6,r2,r21
 8003474:	3001281e 	bne	r6,zero,8003918 <_dtoa_r+0xf28>
 8003478:	05c00044 	movi	r23,1
 800347c:	8009883a 	mov	r4,r16
 8003480:	b80b883a 	mov	r5,r23
 8003484:	8005e180 	call	8005e18 <__i2b>
 8003488:	d8c00a17 	ldw	r3,40(sp)
 800348c:	102b883a 	mov	r21,r2
 8003490:	00c0310e 	bge	zero,r3,8003558 <_dtoa_r+0xb68>
 8003494:	8009883a 	mov	r4,r16
 8003498:	100b883a 	mov	r5,r2
 800349c:	180d883a 	mov	r6,r3
 80034a0:	80060500 	call	8006050 <__pow5mult>
 80034a4:	d9000317 	ldw	r4,12(sp)
 80034a8:	102b883a 	mov	r21,r2
 80034ac:	b9011f0e 	bge	r23,r4,800392c <_dtoa_r+0xf3c>
 80034b0:	0027883a 	mov	r19,zero
 80034b4:	a8800417 	ldw	r2,16(r21)
 80034b8:	10800104 	addi	r2,r2,4
 80034bc:	1085883a 	add	r2,r2,r2
 80034c0:	1085883a 	add	r2,r2,r2
 80034c4:	a885883a 	add	r2,r21,r2
 80034c8:	11000017 	ldw	r4,0(r2)
 80034cc:	8005d000 	call	8005d00 <__hi0bits>
 80034d0:	00c00804 	movi	r3,32
 80034d4:	1885c83a 	sub	r2,r3,r2
 80034d8:	00002506 	br	8003570 <_dtoa_r+0xb80>
 80034dc:	01800044 	movi	r6,1
 80034e0:	d9800c15 	stw	r6,48(sp)
 80034e4:	003dec06 	br	8002c98 <__alt_data_end+0xfc002c98>
 80034e8:	d8c00817 	ldw	r3,32(sp)
 80034ec:	d9000517 	ldw	r4,20(sp)
 80034f0:	d8000a15 	stw	zero,40(sp)
 80034f4:	1907c83a 	sub	r3,r3,r4
 80034f8:	010dc83a 	sub	r6,zero,r4
 80034fc:	d8c00815 	stw	r3,32(sp)
 8003500:	d9800915 	stw	r6,36(sp)
 8003504:	003ded06 	br	8002cbc <__alt_data_end+0xfc002cbc>
 8003508:	05adc83a 	sub	r22,zero,r22
 800350c:	dd800815 	stw	r22,32(sp)
 8003510:	002d883a 	mov	r22,zero
 8003514:	003de406 	br	8002ca8 <__alt_data_end+0xfc002ca8>
 8003518:	d9000517 	ldw	r4,20(sp)
 800351c:	800c6f40 	call	800c6f4 <__floatsidf>
 8003520:	1009883a 	mov	r4,r2
 8003524:	180b883a 	mov	r5,r3
 8003528:	b00d883a 	mov	r6,r22
 800352c:	a80f883a 	mov	r7,r21
 8003530:	800b4340 	call	800b434 <__eqdf2>
 8003534:	103dc726 	beq	r2,zero,8002c54 <__alt_data_end+0xfc002c54>
 8003538:	d8800517 	ldw	r2,20(sp)
 800353c:	10bfffc4 	addi	r2,r2,-1
 8003540:	d8800515 	stw	r2,20(sp)
 8003544:	003dc306 	br	8002c54 <__alt_data_end+0xfc002c54>
 8003548:	dd400917 	ldw	r21,36(sp)
 800354c:	dd000817 	ldw	r20,32(sp)
 8003550:	0023883a 	mov	r17,zero
 8003554:	003fa906 	br	80033fc <__alt_data_end+0xfc0033fc>
 8003558:	d9800317 	ldw	r6,12(sp)
 800355c:	b981670e 	bge	r23,r6,8003afc <_dtoa_r+0x110c>
 8003560:	0027883a 	mov	r19,zero
 8003564:	d8c00a17 	ldw	r3,40(sp)
 8003568:	183fd21e 	bne	r3,zero,80034b4 <__alt_data_end+0xfc0034b4>
 800356c:	00800044 	movi	r2,1
 8003570:	1585883a 	add	r2,r2,r22
 8003574:	108007cc 	andi	r2,r2,31
 8003578:	10005f26 	beq	r2,zero,80036f8 <_dtoa_r+0xd08>
 800357c:	00c00804 	movi	r3,32
 8003580:	1887c83a 	sub	r3,r3,r2
 8003584:	01000104 	movi	r4,4
 8003588:	20c2dd0e 	bge	r4,r3,8004100 <_dtoa_r+0x1710>
 800358c:	d9000817 	ldw	r4,32(sp)
 8003590:	00c00704 	movi	r3,28
 8003594:	1885c83a 	sub	r2,r3,r2
 8003598:	2089883a 	add	r4,r4,r2
 800359c:	d9000815 	stw	r4,32(sp)
 80035a0:	a0a9883a 	add	r20,r20,r2
 80035a4:	b0ad883a 	add	r22,r22,r2
 80035a8:	d8800817 	ldw	r2,32(sp)
 80035ac:	0080050e 	bge	zero,r2,80035c4 <_dtoa_r+0xbd4>
 80035b0:	e00b883a 	mov	r5,fp
 80035b4:	8009883a 	mov	r4,r16
 80035b8:	100d883a 	mov	r6,r2
 80035bc:	80061900 	call	8006190 <__lshift>
 80035c0:	1039883a 	mov	fp,r2
 80035c4:	0580050e 	bge	zero,r22,80035dc <_dtoa_r+0xbec>
 80035c8:	a80b883a 	mov	r5,r21
 80035cc:	8009883a 	mov	r4,r16
 80035d0:	b00d883a 	mov	r6,r22
 80035d4:	80061900 	call	8006190 <__lshift>
 80035d8:	102b883a 	mov	r21,r2
 80035dc:	d8c00c17 	ldw	r3,48(sp)
 80035e0:	1801161e 	bne	r3,zero,8003a3c <_dtoa_r+0x104c>
 80035e4:	d8c00617 	ldw	r3,24(sp)
 80035e8:	00c12d0e 	bge	zero,r3,8003aa0 <_dtoa_r+0x10b0>
 80035ec:	d8c00b17 	ldw	r3,44(sp)
 80035f0:	1800571e 	bne	r3,zero,8003750 <_dtoa_r+0xd60>
 80035f4:	dc800717 	ldw	r18,28(sp)
 80035f8:	dcc00617 	ldw	r19,24(sp)
 80035fc:	9029883a 	mov	r20,r18
 8003600:	00000206 	br	800360c <_dtoa_r+0xc1c>
 8003604:	8005ae80 	call	8005ae8 <__multadd>
 8003608:	1039883a 	mov	fp,r2
 800360c:	e009883a 	mov	r4,fp
 8003610:	a80b883a 	mov	r5,r21
 8003614:	80027f00 	call	80027f0 <quorem>
 8003618:	10800c04 	addi	r2,r2,48
 800361c:	90800005 	stb	r2,0(r18)
 8003620:	94800044 	addi	r18,r18,1
 8003624:	9507c83a 	sub	r3,r18,r20
 8003628:	8009883a 	mov	r4,r16
 800362c:	e00b883a 	mov	r5,fp
 8003630:	01800284 	movi	r6,10
 8003634:	000f883a 	mov	r7,zero
 8003638:	1cfff216 	blt	r3,r19,8003604 <__alt_data_end+0xfc003604>
 800363c:	1011883a 	mov	r8,r2
 8003640:	d8800617 	ldw	r2,24(sp)
 8003644:	00822e0e 	bge	zero,r2,8003f00 <_dtoa_r+0x1510>
 8003648:	d9000717 	ldw	r4,28(sp)
 800364c:	0025883a 	mov	r18,zero
 8003650:	20af883a 	add	r23,r4,r2
 8003654:	e00b883a 	mov	r5,fp
 8003658:	01800044 	movi	r6,1
 800365c:	8009883a 	mov	r4,r16
 8003660:	da001715 	stw	r8,92(sp)
 8003664:	80061900 	call	8006190 <__lshift>
 8003668:	1009883a 	mov	r4,r2
 800366c:	a80b883a 	mov	r5,r21
 8003670:	1039883a 	mov	fp,r2
 8003674:	80062d80 	call	80062d8 <__mcmp>
 8003678:	da001717 	ldw	r8,92(sp)
 800367c:	00816e0e 	bge	zero,r2,8003c38 <_dtoa_r+0x1248>
 8003680:	b93fffc3 	ldbu	r4,-1(r23)
 8003684:	b8bfffc4 	addi	r2,r23,-1
 8003688:	1007883a 	mov	r3,r2
 800368c:	01800e44 	movi	r6,57
 8003690:	d9c00717 	ldw	r7,28(sp)
 8003694:	00000506 	br	80036ac <_dtoa_r+0xcbc>
 8003698:	18ffffc4 	addi	r3,r3,-1
 800369c:	38811926 	beq	r7,r2,8003b04 <_dtoa_r+0x1114>
 80036a0:	19000003 	ldbu	r4,0(r3)
 80036a4:	102f883a 	mov	r23,r2
 80036a8:	10bfffc4 	addi	r2,r2,-1
 80036ac:	21403fcc 	andi	r5,r4,255
 80036b0:	2940201c 	xori	r5,r5,128
 80036b4:	297fe004 	addi	r5,r5,-128
 80036b8:	29bff726 	beq	r5,r6,8003698 <__alt_data_end+0xfc003698>
 80036bc:	21000044 	addi	r4,r4,1
 80036c0:	11000005 	stb	r4,0(r2)
 80036c4:	8009883a 	mov	r4,r16
 80036c8:	a80b883a 	mov	r5,r21
 80036cc:	8005ac00 	call	8005ac0 <_Bfree>
 80036d0:	883e7526 	beq	r17,zero,80030a8 <__alt_data_end+0xfc0030a8>
 80036d4:	90000426 	beq	r18,zero,80036e8 <_dtoa_r+0xcf8>
 80036d8:	94400326 	beq	r18,r17,80036e8 <_dtoa_r+0xcf8>
 80036dc:	8009883a 	mov	r4,r16
 80036e0:	900b883a 	mov	r5,r18
 80036e4:	8005ac00 	call	8005ac0 <_Bfree>
 80036e8:	8009883a 	mov	r4,r16
 80036ec:	880b883a 	mov	r5,r17
 80036f0:	8005ac00 	call	8005ac0 <_Bfree>
 80036f4:	003e6c06 	br	80030a8 <__alt_data_end+0xfc0030a8>
 80036f8:	00800704 	movi	r2,28
 80036fc:	d9800817 	ldw	r6,32(sp)
 8003700:	a0a9883a 	add	r20,r20,r2
 8003704:	b0ad883a 	add	r22,r22,r2
 8003708:	308d883a 	add	r6,r6,r2
 800370c:	d9800815 	stw	r6,32(sp)
 8003710:	003fa506 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003714:	013efb84 	movi	r4,-1042
 8003718:	246bc83a 	sub	r21,r4,r17
 800371c:	9548983a 	sll	r4,r18,r21
 8003720:	003d1806 	br	8002b84 <__alt_data_end+0xfc002b84>
 8003724:	d8000c15 	stw	zero,48(sp)
 8003728:	003d5b06 	br	8002c98 <__alt_data_end+0xfc002c98>
 800372c:	880b883a 	mov	r5,r17
 8003730:	8009883a 	mov	r4,r16
 8003734:	01800284 	movi	r6,10
 8003738:	000f883a 	mov	r7,zero
 800373c:	8005ae80 	call	8005ae8 <__multadd>
 8003740:	1023883a 	mov	r17,r2
 8003744:	d8800d17 	ldw	r2,52(sp)
 8003748:	0082550e 	bge	zero,r2,80040a0 <_dtoa_r+0x16b0>
 800374c:	d8800615 	stw	r2,24(sp)
 8003750:	0500050e 	bge	zero,r20,8003768 <_dtoa_r+0xd78>
 8003754:	880b883a 	mov	r5,r17
 8003758:	8009883a 	mov	r4,r16
 800375c:	a00d883a 	mov	r6,r20
 8003760:	80061900 	call	8006190 <__lshift>
 8003764:	1023883a 	mov	r17,r2
 8003768:	98016a1e 	bne	r19,zero,8003d14 <_dtoa_r+0x1324>
 800376c:	8829883a 	mov	r20,r17
 8003770:	d9000617 	ldw	r4,24(sp)
 8003774:	dcc00717 	ldw	r19,28(sp)
 8003778:	9480004c 	andi	r18,r18,1
 800377c:	20bfffc4 	addi	r2,r4,-1
 8003780:	9885883a 	add	r2,r19,r2
 8003784:	d8800415 	stw	r2,16(sp)
 8003788:	dc800615 	stw	r18,24(sp)
 800378c:	e009883a 	mov	r4,fp
 8003790:	a80b883a 	mov	r5,r21
 8003794:	80027f00 	call	80027f0 <quorem>
 8003798:	e009883a 	mov	r4,fp
 800379c:	880b883a 	mov	r5,r17
 80037a0:	102f883a 	mov	r23,r2
 80037a4:	80062d80 	call	80062d8 <__mcmp>
 80037a8:	8009883a 	mov	r4,r16
 80037ac:	a80b883a 	mov	r5,r21
 80037b0:	a00d883a 	mov	r6,r20
 80037b4:	102d883a 	mov	r22,r2
 80037b8:	80063380 	call	8006338 <__mdiff>
 80037bc:	1007883a 	mov	r3,r2
 80037c0:	10800317 	ldw	r2,12(r2)
 80037c4:	bc800c04 	addi	r18,r23,48
 80037c8:	1000971e 	bne	r2,zero,8003a28 <_dtoa_r+0x1038>
 80037cc:	180b883a 	mov	r5,r3
 80037d0:	e009883a 	mov	r4,fp
 80037d4:	d8c01515 	stw	r3,84(sp)
 80037d8:	80062d80 	call	80062d8 <__mcmp>
 80037dc:	d8c01517 	ldw	r3,84(sp)
 80037e0:	8009883a 	mov	r4,r16
 80037e4:	d8801515 	stw	r2,84(sp)
 80037e8:	180b883a 	mov	r5,r3
 80037ec:	8005ac00 	call	8005ac0 <_Bfree>
 80037f0:	d8801517 	ldw	r2,84(sp)
 80037f4:	1000041e 	bne	r2,zero,8003808 <_dtoa_r+0xe18>
 80037f8:	d9800317 	ldw	r6,12(sp)
 80037fc:	3000021e 	bne	r6,zero,8003808 <_dtoa_r+0xe18>
 8003800:	d8c00617 	ldw	r3,24(sp)
 8003804:	18007626 	beq	r3,zero,80039e0 <_dtoa_r+0xff0>
 8003808:	b0005b16 	blt	r22,zero,8003978 <_dtoa_r+0xf88>
 800380c:	b000041e 	bne	r22,zero,8003820 <_dtoa_r+0xe30>
 8003810:	d9000317 	ldw	r4,12(sp)
 8003814:	2000021e 	bne	r4,zero,8003820 <_dtoa_r+0xe30>
 8003818:	d8c00617 	ldw	r3,24(sp)
 800381c:	18005626 	beq	r3,zero,8003978 <_dtoa_r+0xf88>
 8003820:	00814d16 	blt	zero,r2,8003d58 <_dtoa_r+0x1368>
 8003824:	d8c00417 	ldw	r3,16(sp)
 8003828:	9d800044 	addi	r22,r19,1
 800382c:	9c800005 	stb	r18,0(r19)
 8003830:	b02f883a 	mov	r23,r22
 8003834:	98c14c26 	beq	r19,r3,8003d68 <_dtoa_r+0x1378>
 8003838:	e00b883a 	mov	r5,fp
 800383c:	8009883a 	mov	r4,r16
 8003840:	01800284 	movi	r6,10
 8003844:	000f883a 	mov	r7,zero
 8003848:	8005ae80 	call	8005ae8 <__multadd>
 800384c:	1039883a 	mov	fp,r2
 8003850:	8d006d26 	beq	r17,r20,8003a08 <_dtoa_r+0x1018>
 8003854:	880b883a 	mov	r5,r17
 8003858:	01800284 	movi	r6,10
 800385c:	000f883a 	mov	r7,zero
 8003860:	8009883a 	mov	r4,r16
 8003864:	8005ae80 	call	8005ae8 <__multadd>
 8003868:	a00b883a 	mov	r5,r20
 800386c:	8009883a 	mov	r4,r16
 8003870:	01800284 	movi	r6,10
 8003874:	000f883a 	mov	r7,zero
 8003878:	1023883a 	mov	r17,r2
 800387c:	8005ae80 	call	8005ae8 <__multadd>
 8003880:	1029883a 	mov	r20,r2
 8003884:	b027883a 	mov	r19,r22
 8003888:	003fc006 	br	800378c <__alt_data_end+0xfc00378c>
 800388c:	a005883a 	mov	r2,r20
 8003890:	003ede06 	br	800340c <__alt_data_end+0xfc00340c>
 8003894:	01000044 	movi	r4,1
 8003898:	d9000b15 	stw	r4,44(sp)
 800389c:	d9802217 	ldw	r6,136(sp)
 80038a0:	0180dc0e 	bge	zero,r6,8003c14 <_dtoa_r+0x1224>
 80038a4:	3023883a 	mov	r17,r6
 80038a8:	d9800d15 	stw	r6,52(sp)
 80038ac:	d9800615 	stw	r6,24(sp)
 80038b0:	003d1e06 	br	8002d2c <__alt_data_end+0xfc002d2c>
 80038b4:	d8800617 	ldw	r2,24(sp)
 80038b8:	00be3716 	blt	zero,r2,8003198 <__alt_data_end+0xfc003198>
 80038bc:	1000be1e 	bne	r2,zero,8003bb8 <_dtoa_r+0x11c8>
 80038c0:	8809883a 	mov	r4,r17
 80038c4:	a00b883a 	mov	r5,r20
 80038c8:	000d883a 	mov	r6,zero
 80038cc:	01d00534 	movhi	r7,16404
 80038d0:	800b6780 	call	800b678 <__muldf3>
 80038d4:	1009883a 	mov	r4,r2
 80038d8:	180b883a 	mov	r5,r3
 80038dc:	900d883a 	mov	r6,r18
 80038e0:	980f883a 	mov	r7,r19
 80038e4:	800b4b80 	call	800b4b8 <__gedf2>
 80038e8:	002b883a 	mov	r21,zero
 80038ec:	0023883a 	mov	r17,zero
 80038f0:	10007a16 	blt	r2,zero,8003adc <_dtoa_r+0x10ec>
 80038f4:	d9002217 	ldw	r4,136(sp)
 80038f8:	ddc00717 	ldw	r23,28(sp)
 80038fc:	0108303a 	nor	r4,zero,r4
 8003900:	d9000515 	stw	r4,20(sp)
 8003904:	8009883a 	mov	r4,r16
 8003908:	a80b883a 	mov	r5,r21
 800390c:	8005ac00 	call	8005ac0 <_Bfree>
 8003910:	883f751e 	bne	r17,zero,80036e8 <__alt_data_end+0xfc0036e8>
 8003914:	003de406 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003918:	e00b883a 	mov	r5,fp
 800391c:	8009883a 	mov	r4,r16
 8003920:	80060500 	call	8006050 <__pow5mult>
 8003924:	1039883a 	mov	fp,r2
 8003928:	003ed306 	br	8003478 <__alt_data_end+0xfc003478>
 800392c:	903ee01e 	bne	r18,zero,80034b0 <__alt_data_end+0xfc0034b0>
 8003930:	00800434 	movhi	r2,16
 8003934:	10bfffc4 	addi	r2,r2,-1
 8003938:	9884703a 	and	r2,r19,r2
 800393c:	103f081e 	bne	r2,zero,8003560 <__alt_data_end+0xfc003560>
 8003940:	9cdffc2c 	andhi	r19,r19,32752
 8003944:	983f0626 	beq	r19,zero,8003560 <__alt_data_end+0xfc003560>
 8003948:	d8800817 	ldw	r2,32(sp)
 800394c:	b5800044 	addi	r22,r22,1
 8003950:	04c00044 	movi	r19,1
 8003954:	10800044 	addi	r2,r2,1
 8003958:	d8800815 	stw	r2,32(sp)
 800395c:	003f0106 	br	8003564 <__alt_data_end+0xfc003564>
 8003960:	d9800f17 	ldw	r6,60(sp)
 8003964:	30016826 	beq	r6,zero,8003f08 <_dtoa_r+0x1518>
 8003968:	10810cc4 	addi	r2,r2,1075
 800396c:	dd400917 	ldw	r21,36(sp)
 8003970:	dd000817 	ldw	r20,32(sp)
 8003974:	003e9906 	br	80033dc <__alt_data_end+0xfc0033dc>
 8003978:	9011883a 	mov	r8,r18
 800397c:	4007883a 	mov	r3,r8
 8003980:	e02d883a 	mov	r22,fp
 8003984:	0080100e 	bge	zero,r2,80039c8 <_dtoa_r+0xfd8>
 8003988:	01800044 	movi	r6,1
 800398c:	8009883a 	mov	r4,r16
 8003990:	e00b883a 	mov	r5,fp
 8003994:	da001515 	stw	r8,84(sp)
 8003998:	da001715 	stw	r8,92(sp)
 800399c:	80061900 	call	8006190 <__lshift>
 80039a0:	1009883a 	mov	r4,r2
 80039a4:	a80b883a 	mov	r5,r21
 80039a8:	102d883a 	mov	r22,r2
 80039ac:	80062d80 	call	80062d8 <__mcmp>
 80039b0:	d8c01517 	ldw	r3,84(sp)
 80039b4:	da001717 	ldw	r8,92(sp)
 80039b8:	0081a50e 	bge	zero,r2,8004050 <_dtoa_r+0x1660>
 80039bc:	00800e44 	movi	r2,57
 80039c0:	40817b26 	beq	r8,r2,8003fb0 <_dtoa_r+0x15c0>
 80039c4:	40c00044 	addi	r3,r8,1
 80039c8:	8825883a 	mov	r18,r17
 80039cc:	9dc00044 	addi	r23,r19,1
 80039d0:	98c00005 	stb	r3,0(r19)
 80039d4:	a023883a 	mov	r17,r20
 80039d8:	b039883a 	mov	fp,r22
 80039dc:	003f3906 	br	80036c4 <__alt_data_end+0xfc0036c4>
 80039e0:	00800e44 	movi	r2,57
 80039e4:	9011883a 	mov	r8,r18
 80039e8:	90817226 	beq	r18,r2,8003fb4 <_dtoa_r+0x15c4>
 80039ec:	0580010e 	bge	zero,r22,80039f4 <_dtoa_r+0x1004>
 80039f0:	ba000c44 	addi	r8,r23,49
 80039f4:	8825883a 	mov	r18,r17
 80039f8:	9dc00044 	addi	r23,r19,1
 80039fc:	9a000005 	stb	r8,0(r19)
 8003a00:	a023883a 	mov	r17,r20
 8003a04:	003f2f06 	br	80036c4 <__alt_data_end+0xfc0036c4>
 8003a08:	880b883a 	mov	r5,r17
 8003a0c:	8009883a 	mov	r4,r16
 8003a10:	01800284 	movi	r6,10
 8003a14:	000f883a 	mov	r7,zero
 8003a18:	8005ae80 	call	8005ae8 <__multadd>
 8003a1c:	1023883a 	mov	r17,r2
 8003a20:	1029883a 	mov	r20,r2
 8003a24:	003f9706 	br	8003884 <__alt_data_end+0xfc003884>
 8003a28:	8009883a 	mov	r4,r16
 8003a2c:	180b883a 	mov	r5,r3
 8003a30:	8005ac00 	call	8005ac0 <_Bfree>
 8003a34:	00800044 	movi	r2,1
 8003a38:	003f7306 	br	8003808 <__alt_data_end+0xfc003808>
 8003a3c:	e009883a 	mov	r4,fp
 8003a40:	a80b883a 	mov	r5,r21
 8003a44:	80062d80 	call	80062d8 <__mcmp>
 8003a48:	103ee60e 	bge	r2,zero,80035e4 <__alt_data_end+0xfc0035e4>
 8003a4c:	8009883a 	mov	r4,r16
 8003a50:	e00b883a 	mov	r5,fp
 8003a54:	01800284 	movi	r6,10
 8003a58:	000f883a 	mov	r7,zero
 8003a5c:	8005ae80 	call	8005ae8 <__multadd>
 8003a60:	d9000517 	ldw	r4,20(sp)
 8003a64:	d9800b17 	ldw	r6,44(sp)
 8003a68:	1039883a 	mov	fp,r2
 8003a6c:	213fffc4 	addi	r4,r4,-1
 8003a70:	d9000515 	stw	r4,20(sp)
 8003a74:	303f2d1e 	bne	r6,zero,800372c <__alt_data_end+0xfc00372c>
 8003a78:	d9000d17 	ldw	r4,52(sp)
 8003a7c:	0101780e 	bge	zero,r4,8004060 <_dtoa_r+0x1670>
 8003a80:	d9000615 	stw	r4,24(sp)
 8003a84:	003edb06 	br	80035f4 <__alt_data_end+0xfc0035f4>
 8003a88:	00800084 	movi	r2,2
 8003a8c:	30818e1e 	bne	r6,r2,80040c8 <_dtoa_r+0x16d8>
 8003a90:	d8000b15 	stw	zero,44(sp)
 8003a94:	003f8106 	br	800389c <__alt_data_end+0xfc00389c>
 8003a98:	d8800717 	ldw	r2,28(sp)
 8003a9c:	003c0306 	br	8002aac <__alt_data_end+0xfc002aac>
 8003aa0:	d9000317 	ldw	r4,12(sp)
 8003aa4:	00800084 	movi	r2,2
 8003aa8:	113ed00e 	bge	r2,r4,80035ec <__alt_data_end+0xfc0035ec>
 8003aac:	d8c00617 	ldw	r3,24(sp)
 8003ab0:	183f901e 	bne	r3,zero,80038f4 <__alt_data_end+0xfc0038f4>
 8003ab4:	a80b883a 	mov	r5,r21
 8003ab8:	8009883a 	mov	r4,r16
 8003abc:	01800144 	movi	r6,5
 8003ac0:	000f883a 	mov	r7,zero
 8003ac4:	8005ae80 	call	8005ae8 <__multadd>
 8003ac8:	e009883a 	mov	r4,fp
 8003acc:	100b883a 	mov	r5,r2
 8003ad0:	102b883a 	mov	r21,r2
 8003ad4:	80062d80 	call	80062d8 <__mcmp>
 8003ad8:	00bf860e 	bge	zero,r2,80038f4 <__alt_data_end+0xfc0038f4>
 8003adc:	d9800717 	ldw	r6,28(sp)
 8003ae0:	00800c44 	movi	r2,49
 8003ae4:	30800005 	stb	r2,0(r6)
 8003ae8:	d8800517 	ldw	r2,20(sp)
 8003aec:	35c00044 	addi	r23,r6,1
 8003af0:	10800044 	addi	r2,r2,1
 8003af4:	d8800515 	stw	r2,20(sp)
 8003af8:	003f8206 	br	8003904 <__alt_data_end+0xfc003904>
 8003afc:	903e981e 	bne	r18,zero,8003560 <__alt_data_end+0xfc003560>
 8003b00:	003f8b06 	br	8003930 <__alt_data_end+0xfc003930>
 8003b04:	d9800517 	ldw	r6,20(sp)
 8003b08:	d8c00717 	ldw	r3,28(sp)
 8003b0c:	00800c44 	movi	r2,49
 8003b10:	31800044 	addi	r6,r6,1
 8003b14:	d9800515 	stw	r6,20(sp)
 8003b18:	18800005 	stb	r2,0(r3)
 8003b1c:	003ee906 	br	80036c4 <__alt_data_end+0xfc0036c4>
 8003b20:	dc000317 	ldw	r16,12(sp)
 8003b24:	003d6006 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8003b28:	8809883a 	mov	r4,r17
 8003b2c:	800c6f40 	call	800c6f4 <__floatsidf>
 8003b30:	a009883a 	mov	r4,r20
 8003b34:	a80b883a 	mov	r5,r21
 8003b38:	100d883a 	mov	r6,r2
 8003b3c:	180f883a 	mov	r7,r3
 8003b40:	800b6780 	call	800b678 <__muldf3>
 8003b44:	1009883a 	mov	r4,r2
 8003b48:	180b883a 	mov	r5,r3
 8003b4c:	000d883a 	mov	r6,zero
 8003b50:	01d00734 	movhi	r7,16412
 8003b54:	800a2cc0 	call	800a2cc <__adddf3>
 8003b58:	1023883a 	mov	r17,r2
 8003b5c:	00bf3034 	movhi	r2,64704
 8003b60:	1885883a 	add	r2,r3,r2
 8003b64:	d8800e15 	stw	r2,56(sp)
 8003b68:	a009883a 	mov	r4,r20
 8003b6c:	a80b883a 	mov	r5,r21
 8003b70:	000d883a 	mov	r6,zero
 8003b74:	01d00534 	movhi	r7,16404
 8003b78:	800bd9c0 	call	800bd9c <__subdf3>
 8003b7c:	d9c00e17 	ldw	r7,56(sp)
 8003b80:	1009883a 	mov	r4,r2
 8003b84:	180b883a 	mov	r5,r3
 8003b88:	880d883a 	mov	r6,r17
 8003b8c:	102b883a 	mov	r21,r2
 8003b90:	1829883a 	mov	r20,r3
 8003b94:	800b4b80 	call	800b4b8 <__gedf2>
 8003b98:	00807716 	blt	zero,r2,8003d78 <_dtoa_r+0x1388>
 8003b9c:	d8800e17 	ldw	r2,56(sp)
 8003ba0:	a809883a 	mov	r4,r21
 8003ba4:	a00b883a 	mov	r5,r20
 8003ba8:	11e0003c 	xorhi	r7,r2,32768
 8003bac:	880d883a 	mov	r6,r17
 8003bb0:	800b5980 	call	800b598 <__ledf2>
 8003bb4:	103d6b0e 	bge	r2,zero,8003164 <__alt_data_end+0xfc003164>
 8003bb8:	002b883a 	mov	r21,zero
 8003bbc:	0023883a 	mov	r17,zero
 8003bc0:	003f4c06 	br	80038f4 <__alt_data_end+0xfc0038f4>
 8003bc4:	d9800917 	ldw	r6,36(sp)
 8003bc8:	e00b883a 	mov	r5,fp
 8003bcc:	8009883a 	mov	r4,r16
 8003bd0:	80060500 	call	8006050 <__pow5mult>
 8003bd4:	1039883a 	mov	fp,r2
 8003bd8:	003e2706 	br	8003478 <__alt_data_end+0xfc003478>
 8003bdc:	d8000b15 	stw	zero,44(sp)
 8003be0:	003c4906 	br	8002d08 <__alt_data_end+0xfc002d08>
 8003be4:	d9000917 	ldw	r4,36(sp)
 8003be8:	d9800a17 	ldw	r6,40(sp)
 8003bec:	dd400915 	stw	r21,36(sp)
 8003bf0:	a905c83a 	sub	r2,r21,r4
 8003bf4:	308d883a 	add	r6,r6,r2
 8003bf8:	d9800a15 	stw	r6,40(sp)
 8003bfc:	002b883a 	mov	r21,zero
 8003c00:	003df206 	br	80033cc <__alt_data_end+0xfc0033cc>
 8003c04:	dc800e15 	stw	r18,56(sp)
 8003c08:	982b883a 	mov	r21,r19
 8003c0c:	04400084 	movi	r17,2
 8003c10:	003c7406 	br	8002de4 <__alt_data_end+0xfc002de4>
 8003c14:	04400044 	movi	r17,1
 8003c18:	dc400d15 	stw	r17,52(sp)
 8003c1c:	dc400615 	stw	r17,24(sp)
 8003c20:	dc402215 	stw	r17,136(sp)
 8003c24:	80001115 	stw	zero,68(r16)
 8003c28:	000b883a 	mov	r5,zero
 8003c2c:	003c4a06 	br	8002d58 <__alt_data_end+0xfc002d58>
 8003c30:	3023883a 	mov	r17,r6
 8003c34:	003ffb06 	br	8003c24 <__alt_data_end+0xfc003c24>
 8003c38:	1000021e 	bne	r2,zero,8003c44 <_dtoa_r+0x1254>
 8003c3c:	4200004c 	andi	r8,r8,1
 8003c40:	403e8f1e 	bne	r8,zero,8003680 <__alt_data_end+0xfc003680>
 8003c44:	01000c04 	movi	r4,48
 8003c48:	00000106 	br	8003c50 <_dtoa_r+0x1260>
 8003c4c:	102f883a 	mov	r23,r2
 8003c50:	b8bfffc4 	addi	r2,r23,-1
 8003c54:	10c00007 	ldb	r3,0(r2)
 8003c58:	193ffc26 	beq	r3,r4,8003c4c <__alt_data_end+0xfc003c4c>
 8003c5c:	003e9906 	br	80036c4 <__alt_data_end+0xfc0036c4>
 8003c60:	d9000517 	ldw	r4,20(sp)
 8003c64:	012fc83a 	sub	r23,zero,r4
 8003c68:	b800ad26 	beq	r23,zero,8003f20 <_dtoa_r+0x1530>
 8003c6c:	b88003cc 	andi	r2,r23,15
 8003c70:	100490fa 	slli	r2,r2,3
 8003c74:	00c20074 	movhi	r3,2049
 8003c78:	18fd9f04 	addi	r3,r3,-2436
 8003c7c:	1885883a 	add	r2,r3,r2
 8003c80:	11800017 	ldw	r6,0(r2)
 8003c84:	11c00117 	ldw	r7,4(r2)
 8003c88:	b82fd13a 	srai	r23,r23,4
 8003c8c:	9009883a 	mov	r4,r18
 8003c90:	980b883a 	mov	r5,r19
 8003c94:	800b6780 	call	800b678 <__muldf3>
 8003c98:	1029883a 	mov	r20,r2
 8003c9c:	182b883a 	mov	r21,r3
 8003ca0:	b800f426 	beq	r23,zero,8004074 <_dtoa_r+0x1684>
 8003ca4:	02020074 	movhi	r8,2049
 8003ca8:	423d9504 	addi	r8,r8,-2476
 8003cac:	8029883a 	mov	r20,r16
 8003cb0:	04400084 	movi	r17,2
 8003cb4:	4021883a 	mov	r16,r8
 8003cb8:	b980004c 	andi	r6,r23,1
 8003cbc:	1009883a 	mov	r4,r2
 8003cc0:	b82fd07a 	srai	r23,r23,1
 8003cc4:	180b883a 	mov	r5,r3
 8003cc8:	30000426 	beq	r6,zero,8003cdc <_dtoa_r+0x12ec>
 8003ccc:	81800017 	ldw	r6,0(r16)
 8003cd0:	81c00117 	ldw	r7,4(r16)
 8003cd4:	8c400044 	addi	r17,r17,1
 8003cd8:	800b6780 	call	800b678 <__muldf3>
 8003cdc:	84000204 	addi	r16,r16,8
 8003ce0:	b83ff51e 	bne	r23,zero,8003cb8 <__alt_data_end+0xfc003cb8>
 8003ce4:	a021883a 	mov	r16,r20
 8003ce8:	182b883a 	mov	r21,r3
 8003cec:	1029883a 	mov	r20,r2
 8003cf0:	003c5506 	br	8002e48 <__alt_data_end+0xfc002e48>
 8003cf4:	d9800517 	ldw	r6,20(sp)
 8003cf8:	d9000717 	ldw	r4,28(sp)
 8003cfc:	00c00c04 	movi	r3,48
 8003d00:	31800044 	addi	r6,r6,1
 8003d04:	d9800515 	stw	r6,20(sp)
 8003d08:	20c00005 	stb	r3,0(r4)
 8003d0c:	02000c44 	movi	r8,49
 8003d10:	003da206 	br	800339c <__alt_data_end+0xfc00339c>
 8003d14:	89400117 	ldw	r5,4(r17)
 8003d18:	8009883a 	mov	r4,r16
 8003d1c:	8005a180 	call	8005a18 <_Balloc>
 8003d20:	89800417 	ldw	r6,16(r17)
 8003d24:	11000304 	addi	r4,r2,12
 8003d28:	89400304 	addi	r5,r17,12
 8003d2c:	31800084 	addi	r6,r6,2
 8003d30:	318d883a 	add	r6,r6,r6
 8003d34:	318d883a 	add	r6,r6,r6
 8003d38:	1027883a 	mov	r19,r2
 8003d3c:	80057bc0 	call	80057bc <memcpy>
 8003d40:	8009883a 	mov	r4,r16
 8003d44:	980b883a 	mov	r5,r19
 8003d48:	01800044 	movi	r6,1
 8003d4c:	80061900 	call	8006190 <__lshift>
 8003d50:	1029883a 	mov	r20,r2
 8003d54:	003e8606 	br	8003770 <__alt_data_end+0xfc003770>
 8003d58:	00800e44 	movi	r2,57
 8003d5c:	90809526 	beq	r18,r2,8003fb4 <_dtoa_r+0x15c4>
 8003d60:	92000044 	addi	r8,r18,1
 8003d64:	003f2306 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8003d68:	9011883a 	mov	r8,r18
 8003d6c:	8825883a 	mov	r18,r17
 8003d70:	a023883a 	mov	r17,r20
 8003d74:	003e3706 	br	8003654 <__alt_data_end+0xfc003654>
 8003d78:	002b883a 	mov	r21,zero
 8003d7c:	0023883a 	mov	r17,zero
 8003d80:	003f5606 	br	8003adc <__alt_data_end+0xfc003adc>
 8003d84:	51bfffc4 	addi	r6,r10,-1
 8003d88:	300490fa 	slli	r2,r6,3
 8003d8c:	00c20074 	movhi	r3,2049
 8003d90:	18fd9f04 	addi	r3,r3,-2436
 8003d94:	1885883a 	add	r2,r3,r2
 8003d98:	d9c00e17 	ldw	r7,56(sp)
 8003d9c:	11000017 	ldw	r4,0(r2)
 8003da0:	11400117 	ldw	r5,4(r2)
 8003da4:	d8800717 	ldw	r2,28(sp)
 8003da8:	d9801015 	stw	r6,64(sp)
 8003dac:	880d883a 	mov	r6,r17
 8003db0:	da801615 	stw	r10,88(sp)
 8003db4:	15c00044 	addi	r23,r2,1
 8003db8:	800b6780 	call	800b678 <__muldf3>
 8003dbc:	a80b883a 	mov	r5,r21
 8003dc0:	a009883a 	mov	r4,r20
 8003dc4:	d8c01115 	stw	r3,68(sp)
 8003dc8:	d8800e15 	stw	r2,56(sp)
 8003dcc:	800c66c0 	call	800c66c <__fixdfsi>
 8003dd0:	1009883a 	mov	r4,r2
 8003dd4:	1023883a 	mov	r17,r2
 8003dd8:	800c6f40 	call	800c6f4 <__floatsidf>
 8003ddc:	a009883a 	mov	r4,r20
 8003de0:	a80b883a 	mov	r5,r21
 8003de4:	100d883a 	mov	r6,r2
 8003de8:	180f883a 	mov	r7,r3
 8003dec:	800bd9c0 	call	800bd9c <__subdf3>
 8003df0:	1813883a 	mov	r9,r3
 8003df4:	d8c00717 	ldw	r3,28(sp)
 8003df8:	8c400c04 	addi	r17,r17,48
 8003dfc:	1011883a 	mov	r8,r2
 8003e00:	1c400005 	stb	r17,0(r3)
 8003e04:	da801617 	ldw	r10,88(sp)
 8003e08:	00800044 	movi	r2,1
 8003e0c:	50802326 	beq	r10,r2,8003e9c <_dtoa_r+0x14ac>
 8003e10:	d8800717 	ldw	r2,28(sp)
 8003e14:	b82b883a 	mov	r21,r23
 8003e18:	dc001315 	stw	r16,76(sp)
 8003e1c:	12a9883a 	add	r20,r2,r10
 8003e20:	4807883a 	mov	r3,r9
 8003e24:	4005883a 	mov	r2,r8
 8003e28:	dc801415 	stw	r18,80(sp)
 8003e2c:	000d883a 	mov	r6,zero
 8003e30:	01d00934 	movhi	r7,16420
 8003e34:	1009883a 	mov	r4,r2
 8003e38:	180b883a 	mov	r5,r3
 8003e3c:	800b6780 	call	800b678 <__muldf3>
 8003e40:	180b883a 	mov	r5,r3
 8003e44:	1009883a 	mov	r4,r2
 8003e48:	1821883a 	mov	r16,r3
 8003e4c:	1025883a 	mov	r18,r2
 8003e50:	800c66c0 	call	800c66c <__fixdfsi>
 8003e54:	1009883a 	mov	r4,r2
 8003e58:	1023883a 	mov	r17,r2
 8003e5c:	800c6f40 	call	800c6f4 <__floatsidf>
 8003e60:	9009883a 	mov	r4,r18
 8003e64:	800b883a 	mov	r5,r16
 8003e68:	100d883a 	mov	r6,r2
 8003e6c:	180f883a 	mov	r7,r3
 8003e70:	8c400c04 	addi	r17,r17,48
 8003e74:	800bd9c0 	call	800bd9c <__subdf3>
 8003e78:	ad400044 	addi	r21,r21,1
 8003e7c:	ac7fffc5 	stb	r17,-1(r21)
 8003e80:	ad3fea1e 	bne	r21,r20,8003e2c <__alt_data_end+0xfc003e2c>
 8003e84:	1813883a 	mov	r9,r3
 8003e88:	d8c01017 	ldw	r3,64(sp)
 8003e8c:	dc001317 	ldw	r16,76(sp)
 8003e90:	dc801417 	ldw	r18,80(sp)
 8003e94:	1011883a 	mov	r8,r2
 8003e98:	b8ef883a 	add	r23,r23,r3
 8003e9c:	d9000e17 	ldw	r4,56(sp)
 8003ea0:	d9401117 	ldw	r5,68(sp)
 8003ea4:	000d883a 	mov	r6,zero
 8003ea8:	01cff834 	movhi	r7,16352
 8003eac:	da001715 	stw	r8,92(sp)
 8003eb0:	da401515 	stw	r9,84(sp)
 8003eb4:	800a2cc0 	call	800a2cc <__adddf3>
 8003eb8:	da001717 	ldw	r8,92(sp)
 8003ebc:	da401517 	ldw	r9,84(sp)
 8003ec0:	1009883a 	mov	r4,r2
 8003ec4:	400d883a 	mov	r6,r8
 8003ec8:	480f883a 	mov	r7,r9
 8003ecc:	180b883a 	mov	r5,r3
 8003ed0:	800b5980 	call	800b598 <__ledf2>
 8003ed4:	da001717 	ldw	r8,92(sp)
 8003ed8:	da401517 	ldw	r9,84(sp)
 8003edc:	10003b0e 	bge	r2,zero,8003fcc <_dtoa_r+0x15dc>
 8003ee0:	d9001217 	ldw	r4,72(sp)
 8003ee4:	bd7fffc3 	ldbu	r21,-1(r23)
 8003ee8:	d9000515 	stw	r4,20(sp)
 8003eec:	003d1c06 	br	8003360 <__alt_data_end+0xfc003360>
 8003ef0:	d8c00817 	ldw	r3,32(sp)
 8003ef4:	18a9c83a 	sub	r20,r3,r2
 8003ef8:	0005883a 	mov	r2,zero
 8003efc:	003d3706 	br	80033dc <__alt_data_end+0xfc0033dc>
 8003f00:	00800044 	movi	r2,1
 8003f04:	003dd006 	br	8003648 <__alt_data_end+0xfc003648>
 8003f08:	d8c00217 	ldw	r3,8(sp)
 8003f0c:	00800d84 	movi	r2,54
 8003f10:	dd400917 	ldw	r21,36(sp)
 8003f14:	10c5c83a 	sub	r2,r2,r3
 8003f18:	dd000817 	ldw	r20,32(sp)
 8003f1c:	003d2f06 	br	80033dc <__alt_data_end+0xfc0033dc>
 8003f20:	9029883a 	mov	r20,r18
 8003f24:	982b883a 	mov	r21,r19
 8003f28:	04400084 	movi	r17,2
 8003f2c:	003bc606 	br	8002e48 <__alt_data_end+0xfc002e48>
 8003f30:	d8800617 	ldw	r2,24(sp)
 8003f34:	103efc26 	beq	r2,zero,8003b28 <__alt_data_end+0xfc003b28>
 8003f38:	d8c00d17 	ldw	r3,52(sp)
 8003f3c:	00fc890e 	bge	zero,r3,8003164 <__alt_data_end+0xfc003164>
 8003f40:	a80b883a 	mov	r5,r21
 8003f44:	a009883a 	mov	r4,r20
 8003f48:	000d883a 	mov	r6,zero
 8003f4c:	01d00934 	movhi	r7,16420
 8003f50:	800b6780 	call	800b678 <__muldf3>
 8003f54:	89000044 	addi	r4,r17,1
 8003f58:	1029883a 	mov	r20,r2
 8003f5c:	182b883a 	mov	r21,r3
 8003f60:	800c6f40 	call	800c6f4 <__floatsidf>
 8003f64:	a009883a 	mov	r4,r20
 8003f68:	a80b883a 	mov	r5,r21
 8003f6c:	100d883a 	mov	r6,r2
 8003f70:	180f883a 	mov	r7,r3
 8003f74:	800b6780 	call	800b678 <__muldf3>
 8003f78:	1009883a 	mov	r4,r2
 8003f7c:	180b883a 	mov	r5,r3
 8003f80:	000d883a 	mov	r6,zero
 8003f84:	01d00734 	movhi	r7,16412
 8003f88:	800a2cc0 	call	800a2cc <__adddf3>
 8003f8c:	d9000517 	ldw	r4,20(sp)
 8003f90:	1023883a 	mov	r17,r2
 8003f94:	00bf3034 	movhi	r2,64704
 8003f98:	213fffc4 	addi	r4,r4,-1
 8003f9c:	1885883a 	add	r2,r3,r2
 8003fa0:	d9001215 	stw	r4,72(sp)
 8003fa4:	d8800e15 	stw	r2,56(sp)
 8003fa8:	da800d17 	ldw	r10,52(sp)
 8003fac:	003bc306 	br	8002ebc <__alt_data_end+0xfc002ebc>
 8003fb0:	b039883a 	mov	fp,r22
 8003fb4:	01000e44 	movi	r4,57
 8003fb8:	8825883a 	mov	r18,r17
 8003fbc:	9dc00044 	addi	r23,r19,1
 8003fc0:	99000005 	stb	r4,0(r19)
 8003fc4:	a023883a 	mov	r17,r20
 8003fc8:	003dae06 	br	8003684 <__alt_data_end+0xfc003684>
 8003fcc:	d9800e17 	ldw	r6,56(sp)
 8003fd0:	d9c01117 	ldw	r7,68(sp)
 8003fd4:	0009883a 	mov	r4,zero
 8003fd8:	014ff834 	movhi	r5,16352
 8003fdc:	da001715 	stw	r8,92(sp)
 8003fe0:	da401515 	stw	r9,84(sp)
 8003fe4:	800bd9c0 	call	800bd9c <__subdf3>
 8003fe8:	da001717 	ldw	r8,92(sp)
 8003fec:	da401517 	ldw	r9,84(sp)
 8003ff0:	1009883a 	mov	r4,r2
 8003ff4:	180b883a 	mov	r5,r3
 8003ff8:	400d883a 	mov	r6,r8
 8003ffc:	480f883a 	mov	r7,r9
 8004000:	800b4b80 	call	800b4b8 <__gedf2>
 8004004:	00bc570e 	bge	zero,r2,8003164 <__alt_data_end+0xfc003164>
 8004008:	01000c04 	movi	r4,48
 800400c:	00000106 	br	8004014 <_dtoa_r+0x1624>
 8004010:	102f883a 	mov	r23,r2
 8004014:	b8bfffc4 	addi	r2,r23,-1
 8004018:	10c00007 	ldb	r3,0(r2)
 800401c:	193ffc26 	beq	r3,r4,8004010 <__alt_data_end+0xfc004010>
 8004020:	d9801217 	ldw	r6,72(sp)
 8004024:	d9800515 	stw	r6,20(sp)
 8004028:	003c1f06 	br	80030a8 <__alt_data_end+0xfc0030a8>
 800402c:	d8801217 	ldw	r2,72(sp)
 8004030:	dc001117 	ldw	r16,68(sp)
 8004034:	d8800515 	stw	r2,20(sp)
 8004038:	003cc906 	br	8003360 <__alt_data_end+0xfc003360>
 800403c:	dd801317 	ldw	r22,76(sp)
 8004040:	dc001117 	ldw	r16,68(sp)
 8004044:	dcc01417 	ldw	r19,80(sp)
 8004048:	dc801017 	ldw	r18,64(sp)
 800404c:	003c4506 	br	8003164 <__alt_data_end+0xfc003164>
 8004050:	103e5d1e 	bne	r2,zero,80039c8 <__alt_data_end+0xfc0039c8>
 8004054:	4080004c 	andi	r2,r8,1
 8004058:	103e5b26 	beq	r2,zero,80039c8 <__alt_data_end+0xfc0039c8>
 800405c:	003e5706 	br	80039bc <__alt_data_end+0xfc0039bc>
 8004060:	d8c00317 	ldw	r3,12(sp)
 8004064:	00800084 	movi	r2,2
 8004068:	10c00a16 	blt	r2,r3,8004094 <_dtoa_r+0x16a4>
 800406c:	d9000d17 	ldw	r4,52(sp)
 8004070:	003e8306 	br	8003a80 <__alt_data_end+0xfc003a80>
 8004074:	04400084 	movi	r17,2
 8004078:	003b7306 	br	8002e48 <__alt_data_end+0xfc002e48>
 800407c:	d9801217 	ldw	r6,72(sp)
 8004080:	d9800515 	stw	r6,20(sp)
 8004084:	003cb606 	br	8003360 <__alt_data_end+0xfc003360>
 8004088:	d9001217 	ldw	r4,72(sp)
 800408c:	d9000515 	stw	r4,20(sp)
 8004090:	003c0506 	br	80030a8 <__alt_data_end+0xfc0030a8>
 8004094:	d9800d17 	ldw	r6,52(sp)
 8004098:	d9800615 	stw	r6,24(sp)
 800409c:	003e8306 	br	8003aac <__alt_data_end+0xfc003aac>
 80040a0:	d9800317 	ldw	r6,12(sp)
 80040a4:	00800084 	movi	r2,2
 80040a8:	11800216 	blt	r2,r6,80040b4 <_dtoa_r+0x16c4>
 80040ac:	d8800d17 	ldw	r2,52(sp)
 80040b0:	003da606 	br	800374c <__alt_data_end+0xfc00374c>
 80040b4:	d8800d17 	ldw	r2,52(sp)
 80040b8:	d8800615 	stw	r2,24(sp)
 80040bc:	003e7b06 	br	8003aac <__alt_data_end+0xfc003aac>
 80040c0:	05000044 	movi	r20,1
 80040c4:	003b0506 	br	8002cdc <__alt_data_end+0xfc002cdc>
 80040c8:	8009883a 	mov	r4,r16
 80040cc:	80001115 	stw	zero,68(r16)
 80040d0:	000b883a 	mov	r5,zero
 80040d4:	8005a180 	call	8005a18 <_Balloc>
 80040d8:	d8800715 	stw	r2,28(sp)
 80040dc:	d8c00717 	ldw	r3,28(sp)
 80040e0:	00bfffc4 	movi	r2,-1
 80040e4:	01000044 	movi	r4,1
 80040e8:	d8800615 	stw	r2,24(sp)
 80040ec:	80c01015 	stw	r3,64(r16)
 80040f0:	d9000b15 	stw	r4,44(sp)
 80040f4:	d8002215 	stw	zero,136(sp)
 80040f8:	d8800d15 	stw	r2,52(sp)
 80040fc:	003c1906 	br	8003164 <__alt_data_end+0xfc003164>
 8004100:	193d2926 	beq	r3,r4,80035a8 <__alt_data_end+0xfc0035a8>
 8004104:	00c00f04 	movi	r3,60
 8004108:	1885c83a 	sub	r2,r3,r2
 800410c:	003d7b06 	br	80036fc <__alt_data_end+0xfc0036fc>
 8004110:	000b883a 	mov	r5,zero
 8004114:	003b1006 	br	8002d58 <__alt_data_end+0xfc002d58>

08004118 <_fflush_r>:
 8004118:	defffb04 	addi	sp,sp,-20
 800411c:	dcc00315 	stw	r19,12(sp)
 8004120:	dc000015 	stw	r16,0(sp)
 8004124:	dfc00415 	stw	ra,16(sp)
 8004128:	dc800215 	stw	r18,8(sp)
 800412c:	dc400115 	stw	r17,4(sp)
 8004130:	2027883a 	mov	r19,r4
 8004134:	2821883a 	mov	r16,r5
 8004138:	20000226 	beq	r4,zero,8004144 <_fflush_r+0x2c>
 800413c:	20800e17 	ldw	r2,56(r4)
 8004140:	10005326 	beq	r2,zero,8004290 <_fflush_r+0x178>
 8004144:	8080030b 	ldhu	r2,12(r16)
 8004148:	10ffffcc 	andi	r3,r2,65535
 800414c:	18e0001c 	xori	r3,r3,32768
 8004150:	18e00004 	addi	r3,r3,-32768
 8004154:	18002c26 	beq	r3,zero,8004208 <_fflush_r+0xf0>
 8004158:	10c0020c 	andi	r3,r2,8
 800415c:	1800321e 	bne	r3,zero,8004228 <_fflush_r+0x110>
 8004160:	80c00117 	ldw	r3,4(r16)
 8004164:	10820014 	ori	r2,r2,2048
 8004168:	8080030d 	sth	r2,12(r16)
 800416c:	00c0570e 	bge	zero,r3,80042cc <_fflush_r+0x1b4>
 8004170:	82000a17 	ldw	r8,40(r16)
 8004174:	40002426 	beq	r8,zero,8004208 <_fflush_r+0xf0>
 8004178:	9c400017 	ldw	r17,0(r19)
 800417c:	10c4000c 	andi	r3,r2,4096
 8004180:	98000015 	stw	zero,0(r19)
 8004184:	18004626 	beq	r3,zero,80042a0 <_fflush_r+0x188>
 8004188:	81801417 	ldw	r6,80(r16)
 800418c:	10c0010c 	andi	r3,r2,4
 8004190:	18000626 	beq	r3,zero,80041ac <_fflush_r+0x94>
 8004194:	80c00117 	ldw	r3,4(r16)
 8004198:	80800c17 	ldw	r2,48(r16)
 800419c:	30cdc83a 	sub	r6,r6,r3
 80041a0:	10000226 	beq	r2,zero,80041ac <_fflush_r+0x94>
 80041a4:	80800f17 	ldw	r2,60(r16)
 80041a8:	308dc83a 	sub	r6,r6,r2
 80041ac:	81400717 	ldw	r5,28(r16)
 80041b0:	9809883a 	mov	r4,r19
 80041b4:	000f883a 	mov	r7,zero
 80041b8:	403ee83a 	callr	r8
 80041bc:	00ffffc4 	movi	r3,-1
 80041c0:	10c04526 	beq	r2,r3,80042d8 <_fflush_r+0x1c0>
 80041c4:	80c0030b 	ldhu	r3,12(r16)
 80041c8:	81000417 	ldw	r4,16(r16)
 80041cc:	80000115 	stw	zero,4(r16)
 80041d0:	197dffcc 	andi	r5,r3,63487
 80041d4:	8140030d 	sth	r5,12(r16)
 80041d8:	81000015 	stw	r4,0(r16)
 80041dc:	18c4000c 	andi	r3,r3,4096
 80041e0:	18000126 	beq	r3,zero,80041e8 <_fflush_r+0xd0>
 80041e4:	80801415 	stw	r2,80(r16)
 80041e8:	81400c17 	ldw	r5,48(r16)
 80041ec:	9c400015 	stw	r17,0(r19)
 80041f0:	28000526 	beq	r5,zero,8004208 <_fflush_r+0xf0>
 80041f4:	80801004 	addi	r2,r16,64
 80041f8:	28800226 	beq	r5,r2,8004204 <_fflush_r+0xec>
 80041fc:	9809883a 	mov	r4,r19
 8004200:	80048340 	call	8004834 <_free_r>
 8004204:	80000c15 	stw	zero,48(r16)
 8004208:	0005883a 	mov	r2,zero
 800420c:	dfc00417 	ldw	ra,16(sp)
 8004210:	dcc00317 	ldw	r19,12(sp)
 8004214:	dc800217 	ldw	r18,8(sp)
 8004218:	dc400117 	ldw	r17,4(sp)
 800421c:	dc000017 	ldw	r16,0(sp)
 8004220:	dec00504 	addi	sp,sp,20
 8004224:	f800283a 	ret
 8004228:	84800417 	ldw	r18,16(r16)
 800422c:	903ff626 	beq	r18,zero,8004208 <__alt_data_end+0xfc004208>
 8004230:	84400017 	ldw	r17,0(r16)
 8004234:	108000cc 	andi	r2,r2,3
 8004238:	84800015 	stw	r18,0(r16)
 800423c:	8ca3c83a 	sub	r17,r17,r18
 8004240:	10001526 	beq	r2,zero,8004298 <_fflush_r+0x180>
 8004244:	0005883a 	mov	r2,zero
 8004248:	80800215 	stw	r2,8(r16)
 800424c:	04400316 	blt	zero,r17,800425c <_fflush_r+0x144>
 8004250:	003fed06 	br	8004208 <__alt_data_end+0xfc004208>
 8004254:	90a5883a 	add	r18,r18,r2
 8004258:	047feb0e 	bge	zero,r17,8004208 <__alt_data_end+0xfc004208>
 800425c:	80800917 	ldw	r2,36(r16)
 8004260:	81400717 	ldw	r5,28(r16)
 8004264:	880f883a 	mov	r7,r17
 8004268:	900d883a 	mov	r6,r18
 800426c:	9809883a 	mov	r4,r19
 8004270:	103ee83a 	callr	r2
 8004274:	88a3c83a 	sub	r17,r17,r2
 8004278:	00bff616 	blt	zero,r2,8004254 <__alt_data_end+0xfc004254>
 800427c:	80c0030b 	ldhu	r3,12(r16)
 8004280:	00bfffc4 	movi	r2,-1
 8004284:	18c01014 	ori	r3,r3,64
 8004288:	80c0030d 	sth	r3,12(r16)
 800428c:	003fdf06 	br	800420c <__alt_data_end+0xfc00420c>
 8004290:	80046c00 	call	80046c0 <__sinit>
 8004294:	003fab06 	br	8004144 <__alt_data_end+0xfc004144>
 8004298:	80800517 	ldw	r2,20(r16)
 800429c:	003fea06 	br	8004248 <__alt_data_end+0xfc004248>
 80042a0:	81400717 	ldw	r5,28(r16)
 80042a4:	000d883a 	mov	r6,zero
 80042a8:	9809883a 	mov	r4,r19
 80042ac:	01c00044 	movi	r7,1
 80042b0:	403ee83a 	callr	r8
 80042b4:	100d883a 	mov	r6,r2
 80042b8:	00bfffc4 	movi	r2,-1
 80042bc:	30801326 	beq	r6,r2,800430c <_fflush_r+0x1f4>
 80042c0:	8080030b 	ldhu	r2,12(r16)
 80042c4:	82000a17 	ldw	r8,40(r16)
 80042c8:	003fb006 	br	800418c <__alt_data_end+0xfc00418c>
 80042cc:	80c00f17 	ldw	r3,60(r16)
 80042d0:	00ffa716 	blt	zero,r3,8004170 <__alt_data_end+0xfc004170>
 80042d4:	003fcc06 	br	8004208 <__alt_data_end+0xfc004208>
 80042d8:	98c00017 	ldw	r3,0(r19)
 80042dc:	183fb926 	beq	r3,zero,80041c4 <__alt_data_end+0xfc0041c4>
 80042e0:	01000744 	movi	r4,29
 80042e4:	19000226 	beq	r3,r4,80042f0 <_fflush_r+0x1d8>
 80042e8:	01000584 	movi	r4,22
 80042ec:	1900101e 	bne	r3,r4,8004330 <_fflush_r+0x218>
 80042f0:	8080030b 	ldhu	r2,12(r16)
 80042f4:	80c00417 	ldw	r3,16(r16)
 80042f8:	80000115 	stw	zero,4(r16)
 80042fc:	10bdffcc 	andi	r2,r2,63487
 8004300:	8080030d 	sth	r2,12(r16)
 8004304:	80c00015 	stw	r3,0(r16)
 8004308:	003fb706 	br	80041e8 <__alt_data_end+0xfc0041e8>
 800430c:	98800017 	ldw	r2,0(r19)
 8004310:	103feb26 	beq	r2,zero,80042c0 <__alt_data_end+0xfc0042c0>
 8004314:	00c00744 	movi	r3,29
 8004318:	10c00226 	beq	r2,r3,8004324 <_fflush_r+0x20c>
 800431c:	00c00584 	movi	r3,22
 8004320:	10ffd61e 	bne	r2,r3,800427c <__alt_data_end+0xfc00427c>
 8004324:	9c400015 	stw	r17,0(r19)
 8004328:	0005883a 	mov	r2,zero
 800432c:	003fb706 	br	800420c <__alt_data_end+0xfc00420c>
 8004330:	80c0030b 	ldhu	r3,12(r16)
 8004334:	18c01014 	ori	r3,r3,64
 8004338:	80c0030d 	sth	r3,12(r16)
 800433c:	003fb306 	br	800420c <__alt_data_end+0xfc00420c>

08004340 <fflush>:
 8004340:	20000526 	beq	r4,zero,8004358 <fflush+0x18>
 8004344:	00820074 	movhi	r2,2049
 8004348:	1084e304 	addi	r2,r2,5004
 800434c:	200b883a 	mov	r5,r4
 8004350:	11000017 	ldw	r4,0(r2)
 8004354:	80041181 	jmpi	8004118 <_fflush_r>
 8004358:	00820074 	movhi	r2,2049
 800435c:	1084e204 	addi	r2,r2,5000
 8004360:	11000017 	ldw	r4,0(r2)
 8004364:	01420034 	movhi	r5,2048
 8004368:	29504604 	addi	r5,r5,16664
 800436c:	8004bdc1 	jmpi	8004bdc <_fwalk_reent>

08004370 <__fp_lock>:
 8004370:	0005883a 	mov	r2,zero
 8004374:	f800283a 	ret

08004378 <__fp_unlock>:
 8004378:	0005883a 	mov	r2,zero
 800437c:	f800283a 	ret

08004380 <_cleanup_r>:
 8004380:	01420074 	movhi	r5,2049
 8004384:	2960fb04 	addi	r5,r5,-31764
 8004388:	8004b241 	jmpi	8004b24 <_fwalk>

0800438c <__sinit.part.1>:
 800438c:	defff604 	addi	sp,sp,-40
 8004390:	00c20034 	movhi	r3,2048
 8004394:	dfc00915 	stw	ra,36(sp)
 8004398:	df000815 	stw	fp,32(sp)
 800439c:	ddc00715 	stw	r23,28(sp)
 80043a0:	dd800615 	stw	r22,24(sp)
 80043a4:	dd400515 	stw	r21,20(sp)
 80043a8:	dd000415 	stw	r20,16(sp)
 80043ac:	dcc00315 	stw	r19,12(sp)
 80043b0:	dc800215 	stw	r18,8(sp)
 80043b4:	dc400115 	stw	r17,4(sp)
 80043b8:	dc000015 	stw	r16,0(sp)
 80043bc:	18d0e004 	addi	r3,r3,17280
 80043c0:	24000117 	ldw	r16,4(r4)
 80043c4:	20c00f15 	stw	r3,60(r4)
 80043c8:	07000044 	movi	fp,1
 80043cc:	00c000c4 	movi	r3,3
 80043d0:	2080bb04 	addi	r2,r4,748
 80043d4:	20c0b915 	stw	r3,740(r4)
 80043d8:	27000e15 	stw	fp,56(r4)
 80043dc:	2080ba15 	stw	r2,744(r4)
 80043e0:	2000b815 	stw	zero,736(r4)
 80043e4:	05c00204 	movi	r23,8
 80043e8:	00800104 	movi	r2,4
 80043ec:	2025883a 	mov	r18,r4
 80043f0:	b80d883a 	mov	r6,r23
 80043f4:	81001704 	addi	r4,r16,92
 80043f8:	000b883a 	mov	r5,zero
 80043fc:	80000015 	stw	zero,0(r16)
 8004400:	80000115 	stw	zero,4(r16)
 8004404:	80000215 	stw	zero,8(r16)
 8004408:	8080030d 	sth	r2,12(r16)
 800440c:	80001915 	stw	zero,100(r16)
 8004410:	8000038d 	sth	zero,14(r16)
 8004414:	80000415 	stw	zero,16(r16)
 8004418:	80000515 	stw	zero,20(r16)
 800441c:	80000615 	stw	zero,24(r16)
 8004420:	80058f40 	call	80058f4 <memset>
 8004424:	05820034 	movhi	r22,2048
 8004428:	94400217 	ldw	r17,8(r18)
 800442c:	05420034 	movhi	r21,2048
 8004430:	05020034 	movhi	r20,2048
 8004434:	04c20034 	movhi	r19,2048
 8004438:	b59a9b04 	addi	r22,r22,27244
 800443c:	ad5ab204 	addi	r21,r21,27336
 8004440:	a51ad104 	addi	r20,r20,27460
 8004444:	9cdae804 	addi	r19,r19,27552
 8004448:	85800815 	stw	r22,32(r16)
 800444c:	85400915 	stw	r21,36(r16)
 8004450:	85000a15 	stw	r20,40(r16)
 8004454:	84c00b15 	stw	r19,44(r16)
 8004458:	84000715 	stw	r16,28(r16)
 800445c:	00800284 	movi	r2,10
 8004460:	89001704 	addi	r4,r17,92
 8004464:	b80d883a 	mov	r6,r23
 8004468:	000b883a 	mov	r5,zero
 800446c:	88000015 	stw	zero,0(r17)
 8004470:	88000115 	stw	zero,4(r17)
 8004474:	88000215 	stw	zero,8(r17)
 8004478:	8880030d 	sth	r2,12(r17)
 800447c:	88001915 	stw	zero,100(r17)
 8004480:	8f00038d 	sth	fp,14(r17)
 8004484:	88000415 	stw	zero,16(r17)
 8004488:	88000515 	stw	zero,20(r17)
 800448c:	88000615 	stw	zero,24(r17)
 8004490:	80058f40 	call	80058f4 <memset>
 8004494:	94000317 	ldw	r16,12(r18)
 8004498:	00800484 	movi	r2,18
 800449c:	8c400715 	stw	r17,28(r17)
 80044a0:	8d800815 	stw	r22,32(r17)
 80044a4:	8d400915 	stw	r21,36(r17)
 80044a8:	8d000a15 	stw	r20,40(r17)
 80044ac:	8cc00b15 	stw	r19,44(r17)
 80044b0:	8080030d 	sth	r2,12(r16)
 80044b4:	00800084 	movi	r2,2
 80044b8:	80000015 	stw	zero,0(r16)
 80044bc:	80000115 	stw	zero,4(r16)
 80044c0:	80000215 	stw	zero,8(r16)
 80044c4:	80001915 	stw	zero,100(r16)
 80044c8:	8080038d 	sth	r2,14(r16)
 80044cc:	80000415 	stw	zero,16(r16)
 80044d0:	80000515 	stw	zero,20(r16)
 80044d4:	80000615 	stw	zero,24(r16)
 80044d8:	81001704 	addi	r4,r16,92
 80044dc:	000b883a 	mov	r5,zero
 80044e0:	b80d883a 	mov	r6,r23
 80044e4:	80058f40 	call	80058f4 <memset>
 80044e8:	84000715 	stw	r16,28(r16)
 80044ec:	85800815 	stw	r22,32(r16)
 80044f0:	85400915 	stw	r21,36(r16)
 80044f4:	85000a15 	stw	r20,40(r16)
 80044f8:	84c00b15 	stw	r19,44(r16)
 80044fc:	dfc00917 	ldw	ra,36(sp)
 8004500:	df000817 	ldw	fp,32(sp)
 8004504:	ddc00717 	ldw	r23,28(sp)
 8004508:	dd800617 	ldw	r22,24(sp)
 800450c:	dd400517 	ldw	r21,20(sp)
 8004510:	dd000417 	ldw	r20,16(sp)
 8004514:	dcc00317 	ldw	r19,12(sp)
 8004518:	dc800217 	ldw	r18,8(sp)
 800451c:	dc400117 	ldw	r17,4(sp)
 8004520:	dc000017 	ldw	r16,0(sp)
 8004524:	dec00a04 	addi	sp,sp,40
 8004528:	f800283a 	ret

0800452c <__sfmoreglue>:
 800452c:	defffc04 	addi	sp,sp,-16
 8004530:	dc400115 	stw	r17,4(sp)
 8004534:	2c401a24 	muli	r17,r5,104
 8004538:	dc800215 	stw	r18,8(sp)
 800453c:	2825883a 	mov	r18,r5
 8004540:	89400304 	addi	r5,r17,12
 8004544:	dc000015 	stw	r16,0(sp)
 8004548:	dfc00315 	stw	ra,12(sp)
 800454c:	8004f2c0 	call	8004f2c <_malloc_r>
 8004550:	1021883a 	mov	r16,r2
 8004554:	10000726 	beq	r2,zero,8004574 <__sfmoreglue+0x48>
 8004558:	11000304 	addi	r4,r2,12
 800455c:	10000015 	stw	zero,0(r2)
 8004560:	14800115 	stw	r18,4(r2)
 8004564:	11000215 	stw	r4,8(r2)
 8004568:	000b883a 	mov	r5,zero
 800456c:	880d883a 	mov	r6,r17
 8004570:	80058f40 	call	80058f4 <memset>
 8004574:	8005883a 	mov	r2,r16
 8004578:	dfc00317 	ldw	ra,12(sp)
 800457c:	dc800217 	ldw	r18,8(sp)
 8004580:	dc400117 	ldw	r17,4(sp)
 8004584:	dc000017 	ldw	r16,0(sp)
 8004588:	dec00404 	addi	sp,sp,16
 800458c:	f800283a 	ret

08004590 <__sfp>:
 8004590:	00820074 	movhi	r2,2049
 8004594:	defffb04 	addi	sp,sp,-20
 8004598:	1084e204 	addi	r2,r2,5000
 800459c:	dc800215 	stw	r18,8(sp)
 80045a0:	14800017 	ldw	r18,0(r2)
 80045a4:	dcc00315 	stw	r19,12(sp)
 80045a8:	dfc00415 	stw	ra,16(sp)
 80045ac:	90800e17 	ldw	r2,56(r18)
 80045b0:	dc400115 	stw	r17,4(sp)
 80045b4:	dc000015 	stw	r16,0(sp)
 80045b8:	2027883a 	mov	r19,r4
 80045bc:	1000021e 	bne	r2,zero,80045c8 <__sfp+0x38>
 80045c0:	9009883a 	mov	r4,r18
 80045c4:	800438c0 	call	800438c <__sinit.part.1>
 80045c8:	9480b804 	addi	r18,r18,736
 80045cc:	047fffc4 	movi	r17,-1
 80045d0:	91400117 	ldw	r5,4(r18)
 80045d4:	94000217 	ldw	r16,8(r18)
 80045d8:	297fffc4 	addi	r5,r5,-1
 80045dc:	28000a16 	blt	r5,zero,8004608 <__sfp+0x78>
 80045e0:	8080030f 	ldh	r2,12(r16)
 80045e4:	10000c26 	beq	r2,zero,8004618 <__sfp+0x88>
 80045e8:	80c01d04 	addi	r3,r16,116
 80045ec:	00000206 	br	80045f8 <__sfp+0x68>
 80045f0:	18bfe60f 	ldh	r2,-104(r3)
 80045f4:	10000826 	beq	r2,zero,8004618 <__sfp+0x88>
 80045f8:	297fffc4 	addi	r5,r5,-1
 80045fc:	1c3ffd04 	addi	r16,r3,-12
 8004600:	18c01a04 	addi	r3,r3,104
 8004604:	2c7ffa1e 	bne	r5,r17,80045f0 <__alt_data_end+0xfc0045f0>
 8004608:	90800017 	ldw	r2,0(r18)
 800460c:	10001d26 	beq	r2,zero,8004684 <__sfp+0xf4>
 8004610:	1025883a 	mov	r18,r2
 8004614:	003fee06 	br	80045d0 <__alt_data_end+0xfc0045d0>
 8004618:	00bfffc4 	movi	r2,-1
 800461c:	8080038d 	sth	r2,14(r16)
 8004620:	00800044 	movi	r2,1
 8004624:	8080030d 	sth	r2,12(r16)
 8004628:	80001915 	stw	zero,100(r16)
 800462c:	80000015 	stw	zero,0(r16)
 8004630:	80000215 	stw	zero,8(r16)
 8004634:	80000115 	stw	zero,4(r16)
 8004638:	80000415 	stw	zero,16(r16)
 800463c:	80000515 	stw	zero,20(r16)
 8004640:	80000615 	stw	zero,24(r16)
 8004644:	81001704 	addi	r4,r16,92
 8004648:	000b883a 	mov	r5,zero
 800464c:	01800204 	movi	r6,8
 8004650:	80058f40 	call	80058f4 <memset>
 8004654:	8005883a 	mov	r2,r16
 8004658:	80000c15 	stw	zero,48(r16)
 800465c:	80000d15 	stw	zero,52(r16)
 8004660:	80001115 	stw	zero,68(r16)
 8004664:	80001215 	stw	zero,72(r16)
 8004668:	dfc00417 	ldw	ra,16(sp)
 800466c:	dcc00317 	ldw	r19,12(sp)
 8004670:	dc800217 	ldw	r18,8(sp)
 8004674:	dc400117 	ldw	r17,4(sp)
 8004678:	dc000017 	ldw	r16,0(sp)
 800467c:	dec00504 	addi	sp,sp,20
 8004680:	f800283a 	ret
 8004684:	9809883a 	mov	r4,r19
 8004688:	01400104 	movi	r5,4
 800468c:	800452c0 	call	800452c <__sfmoreglue>
 8004690:	90800015 	stw	r2,0(r18)
 8004694:	103fde1e 	bne	r2,zero,8004610 <__alt_data_end+0xfc004610>
 8004698:	00800304 	movi	r2,12
 800469c:	98800015 	stw	r2,0(r19)
 80046a0:	0005883a 	mov	r2,zero
 80046a4:	003ff006 	br	8004668 <__alt_data_end+0xfc004668>

080046a8 <_cleanup>:
 80046a8:	00820074 	movhi	r2,2049
 80046ac:	1084e204 	addi	r2,r2,5000
 80046b0:	11000017 	ldw	r4,0(r2)
 80046b4:	01420074 	movhi	r5,2049
 80046b8:	2960fb04 	addi	r5,r5,-31764
 80046bc:	8004b241 	jmpi	8004b24 <_fwalk>

080046c0 <__sinit>:
 80046c0:	20800e17 	ldw	r2,56(r4)
 80046c4:	10000126 	beq	r2,zero,80046cc <__sinit+0xc>
 80046c8:	f800283a 	ret
 80046cc:	800438c1 	jmpi	800438c <__sinit.part.1>

080046d0 <__sfp_lock_acquire>:
 80046d0:	f800283a 	ret

080046d4 <__sfp_lock_release>:
 80046d4:	f800283a 	ret

080046d8 <__sinit_lock_acquire>:
 80046d8:	f800283a 	ret

080046dc <__sinit_lock_release>:
 80046dc:	f800283a 	ret

080046e0 <__fp_lock_all>:
 80046e0:	00820074 	movhi	r2,2049
 80046e4:	1084e304 	addi	r2,r2,5004
 80046e8:	11000017 	ldw	r4,0(r2)
 80046ec:	01420034 	movhi	r5,2048
 80046f0:	2950dc04 	addi	r5,r5,17264
 80046f4:	8004b241 	jmpi	8004b24 <_fwalk>

080046f8 <__fp_unlock_all>:
 80046f8:	00820074 	movhi	r2,2049
 80046fc:	1084e304 	addi	r2,r2,5004
 8004700:	11000017 	ldw	r4,0(r2)
 8004704:	01420034 	movhi	r5,2048
 8004708:	2950de04 	addi	r5,r5,17272
 800470c:	8004b241 	jmpi	8004b24 <_fwalk>

08004710 <_malloc_trim_r>:
 8004710:	defffb04 	addi	sp,sp,-20
 8004714:	dcc00315 	stw	r19,12(sp)
 8004718:	04c20074 	movhi	r19,2049
 800471c:	dc800215 	stw	r18,8(sp)
 8004720:	dc400115 	stw	r17,4(sp)
 8004724:	dc000015 	stw	r16,0(sp)
 8004728:	dfc00415 	stw	ra,16(sp)
 800472c:	2821883a 	mov	r16,r5
 8004730:	9cff5304 	addi	r19,r19,-692
 8004734:	2025883a 	mov	r18,r4
 8004738:	800ce8c0 	call	800ce8c <__malloc_lock>
 800473c:	98800217 	ldw	r2,8(r19)
 8004740:	14400117 	ldw	r17,4(r2)
 8004744:	00bfff04 	movi	r2,-4
 8004748:	88a2703a 	and	r17,r17,r2
 800474c:	8c21c83a 	sub	r16,r17,r16
 8004750:	8403fbc4 	addi	r16,r16,4079
 8004754:	8020d33a 	srli	r16,r16,12
 8004758:	0083ffc4 	movi	r2,4095
 800475c:	843fffc4 	addi	r16,r16,-1
 8004760:	8020933a 	slli	r16,r16,12
 8004764:	1400060e 	bge	r2,r16,8004780 <_malloc_trim_r+0x70>
 8004768:	9009883a 	mov	r4,r18
 800476c:	000b883a 	mov	r5,zero
 8004770:	8006a180 	call	8006a18 <_sbrk_r>
 8004774:	98c00217 	ldw	r3,8(r19)
 8004778:	1c47883a 	add	r3,r3,r17
 800477c:	10c00a26 	beq	r2,r3,80047a8 <_malloc_trim_r+0x98>
 8004780:	9009883a 	mov	r4,r18
 8004784:	800ceac0 	call	800ceac <__malloc_unlock>
 8004788:	0005883a 	mov	r2,zero
 800478c:	dfc00417 	ldw	ra,16(sp)
 8004790:	dcc00317 	ldw	r19,12(sp)
 8004794:	dc800217 	ldw	r18,8(sp)
 8004798:	dc400117 	ldw	r17,4(sp)
 800479c:	dc000017 	ldw	r16,0(sp)
 80047a0:	dec00504 	addi	sp,sp,20
 80047a4:	f800283a 	ret
 80047a8:	9009883a 	mov	r4,r18
 80047ac:	040bc83a 	sub	r5,zero,r16
 80047b0:	8006a180 	call	8006a18 <_sbrk_r>
 80047b4:	00ffffc4 	movi	r3,-1
 80047b8:	10c00d26 	beq	r2,r3,80047f0 <_malloc_trim_r+0xe0>
 80047bc:	00c20074 	movhi	r3,2049
 80047c0:	18cbc504 	addi	r3,r3,12052
 80047c4:	18800017 	ldw	r2,0(r3)
 80047c8:	99000217 	ldw	r4,8(r19)
 80047cc:	8c23c83a 	sub	r17,r17,r16
 80047d0:	8c400054 	ori	r17,r17,1
 80047d4:	1421c83a 	sub	r16,r2,r16
 80047d8:	24400115 	stw	r17,4(r4)
 80047dc:	9009883a 	mov	r4,r18
 80047e0:	1c000015 	stw	r16,0(r3)
 80047e4:	800ceac0 	call	800ceac <__malloc_unlock>
 80047e8:	00800044 	movi	r2,1
 80047ec:	003fe706 	br	800478c <__alt_data_end+0xfc00478c>
 80047f0:	9009883a 	mov	r4,r18
 80047f4:	000b883a 	mov	r5,zero
 80047f8:	8006a180 	call	8006a18 <_sbrk_r>
 80047fc:	99000217 	ldw	r4,8(r19)
 8004800:	014003c4 	movi	r5,15
 8004804:	1107c83a 	sub	r3,r2,r4
 8004808:	28ffdd0e 	bge	r5,r3,8004780 <__alt_data_end+0xfc004780>
 800480c:	01420074 	movhi	r5,2049
 8004810:	2944e504 	addi	r5,r5,5012
 8004814:	29400017 	ldw	r5,0(r5)
 8004818:	18c00054 	ori	r3,r3,1
 800481c:	20c00115 	stw	r3,4(r4)
 8004820:	00c20074 	movhi	r3,2049
 8004824:	1145c83a 	sub	r2,r2,r5
 8004828:	18cbc504 	addi	r3,r3,12052
 800482c:	18800015 	stw	r2,0(r3)
 8004830:	003fd306 	br	8004780 <__alt_data_end+0xfc004780>

08004834 <_free_r>:
 8004834:	28004c26 	beq	r5,zero,8004968 <_free_r+0x134>
 8004838:	defffd04 	addi	sp,sp,-12
 800483c:	dc400115 	stw	r17,4(sp)
 8004840:	dc000015 	stw	r16,0(sp)
 8004844:	2023883a 	mov	r17,r4
 8004848:	2821883a 	mov	r16,r5
 800484c:	dfc00215 	stw	ra,8(sp)
 8004850:	800ce8c0 	call	800ce8c <__malloc_lock>
 8004854:	813fff17 	ldw	r4,-4(r16)
 8004858:	00bfff84 	movi	r2,-2
 800485c:	02420074 	movhi	r9,2049
 8004860:	81bffe04 	addi	r6,r16,-8
 8004864:	2084703a 	and	r2,r4,r2
 8004868:	4a7f5304 	addi	r9,r9,-692
 800486c:	308b883a 	add	r5,r6,r2
 8004870:	2a000117 	ldw	r8,4(r5)
 8004874:	49c00217 	ldw	r7,8(r9)
 8004878:	00ffff04 	movi	r3,-4
 800487c:	40c6703a 	and	r3,r8,r3
 8004880:	39405326 	beq	r7,r5,80049d0 <_free_r+0x19c>
 8004884:	28c00115 	stw	r3,4(r5)
 8004888:	2100004c 	andi	r4,r4,1
 800488c:	2000091e 	bne	r4,zero,80048b4 <_free_r+0x80>
 8004890:	81fffe17 	ldw	r7,-8(r16)
 8004894:	4a000204 	addi	r8,r9,8
 8004898:	31cdc83a 	sub	r6,r6,r7
 800489c:	31000217 	ldw	r4,8(r6)
 80048a0:	11c5883a 	add	r2,r2,r7
 80048a4:	22006126 	beq	r4,r8,8004a2c <_free_r+0x1f8>
 80048a8:	31c00317 	ldw	r7,12(r6)
 80048ac:	21c00315 	stw	r7,12(r4)
 80048b0:	39000215 	stw	r4,8(r7)
 80048b4:	28c9883a 	add	r4,r5,r3
 80048b8:	21c00117 	ldw	r7,4(r4)
 80048bc:	39c0004c 	andi	r7,r7,1
 80048c0:	38000d1e 	bne	r7,zero,80048f8 <_free_r+0xc4>
 80048c4:	29000217 	ldw	r4,8(r5)
 80048c8:	10c5883a 	add	r2,r2,r3
 80048cc:	00c20074 	movhi	r3,2049
 80048d0:	18ff5504 	addi	r3,r3,-684
 80048d4:	20c07526 	beq	r4,r3,8004aac <_free_r+0x278>
 80048d8:	29c00317 	ldw	r7,12(r5)
 80048dc:	11400054 	ori	r5,r2,1
 80048e0:	3087883a 	add	r3,r6,r2
 80048e4:	21c00315 	stw	r7,12(r4)
 80048e8:	39000215 	stw	r4,8(r7)
 80048ec:	31400115 	stw	r5,4(r6)
 80048f0:	18800015 	stw	r2,0(r3)
 80048f4:	00000406 	br	8004908 <_free_r+0xd4>
 80048f8:	10c00054 	ori	r3,r2,1
 80048fc:	30c00115 	stw	r3,4(r6)
 8004900:	3087883a 	add	r3,r6,r2
 8004904:	18800015 	stw	r2,0(r3)
 8004908:	00c07fc4 	movi	r3,511
 800490c:	18801736 	bltu	r3,r2,800496c <_free_r+0x138>
 8004910:	1004d0fa 	srli	r2,r2,3
 8004914:	01400044 	movi	r5,1
 8004918:	49000117 	ldw	r4,4(r9)
 800491c:	1087883a 	add	r3,r2,r2
 8004920:	18c7883a 	add	r3,r3,r3
 8004924:	1005d0ba 	srai	r2,r2,2
 8004928:	18c7883a 	add	r3,r3,r3
 800492c:	1a47883a 	add	r3,r3,r9
 8004930:	19c00217 	ldw	r7,8(r3)
 8004934:	2884983a 	sll	r2,r5,r2
 8004938:	30c00315 	stw	r3,12(r6)
 800493c:	31c00215 	stw	r7,8(r6)
 8004940:	1104b03a 	or	r2,r2,r4
 8004944:	19800215 	stw	r6,8(r3)
 8004948:	48800115 	stw	r2,4(r9)
 800494c:	39800315 	stw	r6,12(r7)
 8004950:	8809883a 	mov	r4,r17
 8004954:	dfc00217 	ldw	ra,8(sp)
 8004958:	dc400117 	ldw	r17,4(sp)
 800495c:	dc000017 	ldw	r16,0(sp)
 8004960:	dec00304 	addi	sp,sp,12
 8004964:	800ceac1 	jmpi	800ceac <__malloc_unlock>
 8004968:	f800283a 	ret
 800496c:	1006d27a 	srli	r3,r2,9
 8004970:	01000104 	movi	r4,4
 8004974:	20c04036 	bltu	r4,r3,8004a78 <_free_r+0x244>
 8004978:	1006d1ba 	srli	r3,r2,6
 800497c:	19400e04 	addi	r5,r3,56
 8004980:	2947883a 	add	r3,r5,r5
 8004984:	18c7883a 	add	r3,r3,r3
 8004988:	18c7883a 	add	r3,r3,r3
 800498c:	1a49883a 	add	r4,r3,r9
 8004990:	20c00217 	ldw	r3,8(r4)
 8004994:	01c20074 	movhi	r7,2049
 8004998:	39ff5304 	addi	r7,r7,-692
 800499c:	19003b26 	beq	r3,r4,8004a8c <_free_r+0x258>
 80049a0:	01ffff04 	movi	r7,-4
 80049a4:	19400117 	ldw	r5,4(r3)
 80049a8:	29ca703a 	and	r5,r5,r7
 80049ac:	1140022e 	bgeu	r2,r5,80049b8 <_free_r+0x184>
 80049b0:	18c00217 	ldw	r3,8(r3)
 80049b4:	20fffb1e 	bne	r4,r3,80049a4 <__alt_data_end+0xfc0049a4>
 80049b8:	18800317 	ldw	r2,12(r3)
 80049bc:	30800315 	stw	r2,12(r6)
 80049c0:	30c00215 	stw	r3,8(r6)
 80049c4:	11800215 	stw	r6,8(r2)
 80049c8:	19800315 	stw	r6,12(r3)
 80049cc:	003fe006 	br	8004950 <__alt_data_end+0xfc004950>
 80049d0:	2100004c 	andi	r4,r4,1
 80049d4:	1885883a 	add	r2,r3,r2
 80049d8:	2000071e 	bne	r4,zero,80049f8 <_free_r+0x1c4>
 80049dc:	817ffe17 	ldw	r5,-8(r16)
 80049e0:	314dc83a 	sub	r6,r6,r5
 80049e4:	30c00317 	ldw	r3,12(r6)
 80049e8:	31000217 	ldw	r4,8(r6)
 80049ec:	1145883a 	add	r2,r2,r5
 80049f0:	20c00315 	stw	r3,12(r4)
 80049f4:	19000215 	stw	r4,8(r3)
 80049f8:	10c00054 	ori	r3,r2,1
 80049fc:	30c00115 	stw	r3,4(r6)
 8004a00:	00c20074 	movhi	r3,2049
 8004a04:	18c4e604 	addi	r3,r3,5016
 8004a08:	18c00017 	ldw	r3,0(r3)
 8004a0c:	49800215 	stw	r6,8(r9)
 8004a10:	10ffcf36 	bltu	r2,r3,8004950 <__alt_data_end+0xfc004950>
 8004a14:	00820074 	movhi	r2,2049
 8004a18:	108bbd04 	addi	r2,r2,12020
 8004a1c:	11400017 	ldw	r5,0(r2)
 8004a20:	8809883a 	mov	r4,r17
 8004a24:	80047100 	call	8004710 <_malloc_trim_r>
 8004a28:	003fc906 	br	8004950 <__alt_data_end+0xfc004950>
 8004a2c:	28c9883a 	add	r4,r5,r3
 8004a30:	21000117 	ldw	r4,4(r4)
 8004a34:	2100004c 	andi	r4,r4,1
 8004a38:	20000a1e 	bne	r4,zero,8004a64 <_free_r+0x230>
 8004a3c:	29000317 	ldw	r4,12(r5)
 8004a40:	29400217 	ldw	r5,8(r5)
 8004a44:	10c5883a 	add	r2,r2,r3
 8004a48:	10c00054 	ori	r3,r2,1
 8004a4c:	29000315 	stw	r4,12(r5)
 8004a50:	21400215 	stw	r5,8(r4)
 8004a54:	30c00115 	stw	r3,4(r6)
 8004a58:	308d883a 	add	r6,r6,r2
 8004a5c:	30800015 	stw	r2,0(r6)
 8004a60:	003fbb06 	br	8004950 <__alt_data_end+0xfc004950>
 8004a64:	10c00054 	ori	r3,r2,1
 8004a68:	30c00115 	stw	r3,4(r6)
 8004a6c:	308d883a 	add	r6,r6,r2
 8004a70:	30800015 	stw	r2,0(r6)
 8004a74:	003fb606 	br	8004950 <__alt_data_end+0xfc004950>
 8004a78:	01000504 	movi	r4,20
 8004a7c:	20c01436 	bltu	r4,r3,8004ad0 <_free_r+0x29c>
 8004a80:	194016c4 	addi	r5,r3,91
 8004a84:	2947883a 	add	r3,r5,r5
 8004a88:	003fbe06 	br	8004984 <__alt_data_end+0xfc004984>
 8004a8c:	280bd0ba 	srai	r5,r5,2
 8004a90:	00800044 	movi	r2,1
 8004a94:	39000117 	ldw	r4,4(r7)
 8004a98:	114a983a 	sll	r5,r2,r5
 8004a9c:	1805883a 	mov	r2,r3
 8004aa0:	2908b03a 	or	r4,r5,r4
 8004aa4:	39000115 	stw	r4,4(r7)
 8004aa8:	003fc406 	br	80049bc <__alt_data_end+0xfc0049bc>
 8004aac:	49800515 	stw	r6,20(r9)
 8004ab0:	49800415 	stw	r6,16(r9)
 8004ab4:	10c00054 	ori	r3,r2,1
 8004ab8:	31000315 	stw	r4,12(r6)
 8004abc:	31000215 	stw	r4,8(r6)
 8004ac0:	30c00115 	stw	r3,4(r6)
 8004ac4:	308d883a 	add	r6,r6,r2
 8004ac8:	30800015 	stw	r2,0(r6)
 8004acc:	003fa006 	br	8004950 <__alt_data_end+0xfc004950>
 8004ad0:	01001504 	movi	r4,84
 8004ad4:	20c00436 	bltu	r4,r3,8004ae8 <_free_r+0x2b4>
 8004ad8:	1006d33a 	srli	r3,r2,12
 8004adc:	19401b84 	addi	r5,r3,110
 8004ae0:	2947883a 	add	r3,r5,r5
 8004ae4:	003fa706 	br	8004984 <__alt_data_end+0xfc004984>
 8004ae8:	01005504 	movi	r4,340
 8004aec:	20c00436 	bltu	r4,r3,8004b00 <_free_r+0x2cc>
 8004af0:	1006d3fa 	srli	r3,r2,15
 8004af4:	19401dc4 	addi	r5,r3,119
 8004af8:	2947883a 	add	r3,r5,r5
 8004afc:	003fa106 	br	8004984 <__alt_data_end+0xfc004984>
 8004b00:	01015504 	movi	r4,1364
 8004b04:	20c00436 	bltu	r4,r3,8004b18 <_free_r+0x2e4>
 8004b08:	1006d4ba 	srli	r3,r2,18
 8004b0c:	19401f04 	addi	r5,r3,124
 8004b10:	2947883a 	add	r3,r5,r5
 8004b14:	003f9b06 	br	8004984 <__alt_data_end+0xfc004984>
 8004b18:	00c03f04 	movi	r3,252
 8004b1c:	01401f84 	movi	r5,126
 8004b20:	003f9806 	br	8004984 <__alt_data_end+0xfc004984>

08004b24 <_fwalk>:
 8004b24:	defff804 	addi	sp,sp,-32
 8004b28:	dd400515 	stw	r21,20(sp)
 8004b2c:	2540b804 	addi	r21,r4,736
 8004b30:	dd800615 	stw	r22,24(sp)
 8004b34:	dd000415 	stw	r20,16(sp)
 8004b38:	dfc00715 	stw	ra,28(sp)
 8004b3c:	dcc00315 	stw	r19,12(sp)
 8004b40:	dc800215 	stw	r18,8(sp)
 8004b44:	dc400115 	stw	r17,4(sp)
 8004b48:	dc000015 	stw	r16,0(sp)
 8004b4c:	2829883a 	mov	r20,r5
 8004b50:	002d883a 	mov	r22,zero
 8004b54:	80046d00 	call	80046d0 <__sfp_lock_acquire>
 8004b58:	a8001426 	beq	r21,zero,8004bac <_fwalk+0x88>
 8004b5c:	04ffffc4 	movi	r19,-1
 8004b60:	ac400117 	ldw	r17,4(r21)
 8004b64:	ac800217 	ldw	r18,8(r21)
 8004b68:	8c7fffc4 	addi	r17,r17,-1
 8004b6c:	88000d16 	blt	r17,zero,8004ba4 <_fwalk+0x80>
 8004b70:	94000304 	addi	r16,r18,12
 8004b74:	94800384 	addi	r18,r18,14
 8004b78:	80c0000f 	ldh	r3,0(r16)
 8004b7c:	8c7fffc4 	addi	r17,r17,-1
 8004b80:	813ffd04 	addi	r4,r16,-12
 8004b84:	18000426 	beq	r3,zero,8004b98 <_fwalk+0x74>
 8004b88:	90c0000f 	ldh	r3,0(r18)
 8004b8c:	1cc00226 	beq	r3,r19,8004b98 <_fwalk+0x74>
 8004b90:	a03ee83a 	callr	r20
 8004b94:	b0acb03a 	or	r22,r22,r2
 8004b98:	84001a04 	addi	r16,r16,104
 8004b9c:	94801a04 	addi	r18,r18,104
 8004ba0:	8cfff51e 	bne	r17,r19,8004b78 <__alt_data_end+0xfc004b78>
 8004ba4:	ad400017 	ldw	r21,0(r21)
 8004ba8:	a83fed1e 	bne	r21,zero,8004b60 <__alt_data_end+0xfc004b60>
 8004bac:	80046d40 	call	80046d4 <__sfp_lock_release>
 8004bb0:	b005883a 	mov	r2,r22
 8004bb4:	dfc00717 	ldw	ra,28(sp)
 8004bb8:	dd800617 	ldw	r22,24(sp)
 8004bbc:	dd400517 	ldw	r21,20(sp)
 8004bc0:	dd000417 	ldw	r20,16(sp)
 8004bc4:	dcc00317 	ldw	r19,12(sp)
 8004bc8:	dc800217 	ldw	r18,8(sp)
 8004bcc:	dc400117 	ldw	r17,4(sp)
 8004bd0:	dc000017 	ldw	r16,0(sp)
 8004bd4:	dec00804 	addi	sp,sp,32
 8004bd8:	f800283a 	ret

08004bdc <_fwalk_reent>:
 8004bdc:	defff804 	addi	sp,sp,-32
 8004be0:	dd400515 	stw	r21,20(sp)
 8004be4:	2540b804 	addi	r21,r4,736
 8004be8:	dd800615 	stw	r22,24(sp)
 8004bec:	dd000415 	stw	r20,16(sp)
 8004bf0:	dcc00315 	stw	r19,12(sp)
 8004bf4:	dfc00715 	stw	ra,28(sp)
 8004bf8:	dc800215 	stw	r18,8(sp)
 8004bfc:	dc400115 	stw	r17,4(sp)
 8004c00:	dc000015 	stw	r16,0(sp)
 8004c04:	2027883a 	mov	r19,r4
 8004c08:	2829883a 	mov	r20,r5
 8004c0c:	002d883a 	mov	r22,zero
 8004c10:	80046d00 	call	80046d0 <__sfp_lock_acquire>
 8004c14:	a8001326 	beq	r21,zero,8004c64 <_fwalk_reent+0x88>
 8004c18:	04bfffc4 	movi	r18,-1
 8004c1c:	ac400117 	ldw	r17,4(r21)
 8004c20:	ac000217 	ldw	r16,8(r21)
 8004c24:	8c7fffc4 	addi	r17,r17,-1
 8004c28:	88000c16 	blt	r17,zero,8004c5c <_fwalk_reent+0x80>
 8004c2c:	84000304 	addi	r16,r16,12
 8004c30:	80c0000f 	ldh	r3,0(r16)
 8004c34:	8c7fffc4 	addi	r17,r17,-1
 8004c38:	817ffd04 	addi	r5,r16,-12
 8004c3c:	18000526 	beq	r3,zero,8004c54 <_fwalk_reent+0x78>
 8004c40:	80c0008f 	ldh	r3,2(r16)
 8004c44:	9809883a 	mov	r4,r19
 8004c48:	1c800226 	beq	r3,r18,8004c54 <_fwalk_reent+0x78>
 8004c4c:	a03ee83a 	callr	r20
 8004c50:	b0acb03a 	or	r22,r22,r2
 8004c54:	84001a04 	addi	r16,r16,104
 8004c58:	8cbff51e 	bne	r17,r18,8004c30 <__alt_data_end+0xfc004c30>
 8004c5c:	ad400017 	ldw	r21,0(r21)
 8004c60:	a83fee1e 	bne	r21,zero,8004c1c <__alt_data_end+0xfc004c1c>
 8004c64:	80046d40 	call	80046d4 <__sfp_lock_release>
 8004c68:	b005883a 	mov	r2,r22
 8004c6c:	dfc00717 	ldw	ra,28(sp)
 8004c70:	dd800617 	ldw	r22,24(sp)
 8004c74:	dd400517 	ldw	r21,20(sp)
 8004c78:	dd000417 	ldw	r20,16(sp)
 8004c7c:	dcc00317 	ldw	r19,12(sp)
 8004c80:	dc800217 	ldw	r18,8(sp)
 8004c84:	dc400117 	ldw	r17,4(sp)
 8004c88:	dc000017 	ldw	r16,0(sp)
 8004c8c:	dec00804 	addi	sp,sp,32
 8004c90:	f800283a 	ret

08004c94 <_setlocale_r>:
 8004c94:	30001b26 	beq	r6,zero,8004d04 <_setlocale_r+0x70>
 8004c98:	01420074 	movhi	r5,2049
 8004c9c:	defffe04 	addi	sp,sp,-8
 8004ca0:	297d8504 	addi	r5,r5,-2540
 8004ca4:	3009883a 	mov	r4,r6
 8004ca8:	dc000015 	stw	r16,0(sp)
 8004cac:	dfc00115 	stw	ra,4(sp)
 8004cb0:	3021883a 	mov	r16,r6
 8004cb4:	8006ba80 	call	8006ba8 <strcmp>
 8004cb8:	1000061e 	bne	r2,zero,8004cd4 <_setlocale_r+0x40>
 8004cbc:	00820074 	movhi	r2,2049
 8004cc0:	10bd8404 	addi	r2,r2,-2544
 8004cc4:	dfc00117 	ldw	ra,4(sp)
 8004cc8:	dc000017 	ldw	r16,0(sp)
 8004ccc:	dec00204 	addi	sp,sp,8
 8004cd0:	f800283a 	ret
 8004cd4:	01420074 	movhi	r5,2049
 8004cd8:	297d8404 	addi	r5,r5,-2544
 8004cdc:	8009883a 	mov	r4,r16
 8004ce0:	8006ba80 	call	8006ba8 <strcmp>
 8004ce4:	103ff526 	beq	r2,zero,8004cbc <__alt_data_end+0xfc004cbc>
 8004ce8:	01420074 	movhi	r5,2049
 8004cec:	297d6f04 	addi	r5,r5,-2628
 8004cf0:	8009883a 	mov	r4,r16
 8004cf4:	8006ba80 	call	8006ba8 <strcmp>
 8004cf8:	103ff026 	beq	r2,zero,8004cbc <__alt_data_end+0xfc004cbc>
 8004cfc:	0005883a 	mov	r2,zero
 8004d00:	003ff006 	br	8004cc4 <__alt_data_end+0xfc004cc4>
 8004d04:	00820074 	movhi	r2,2049
 8004d08:	10bd8404 	addi	r2,r2,-2544
 8004d0c:	f800283a 	ret

08004d10 <__locale_charset>:
 8004d10:	00820074 	movhi	r2,2049
 8004d14:	10bf3d04 	addi	r2,r2,-780
 8004d18:	f800283a 	ret

08004d1c <__locale_mb_cur_max>:
 8004d1c:	00820074 	movhi	r2,2049
 8004d20:	1084e404 	addi	r2,r2,5008
 8004d24:	10800017 	ldw	r2,0(r2)
 8004d28:	f800283a 	ret

08004d2c <__locale_msgcharset>:
 8004d2c:	00820074 	movhi	r2,2049
 8004d30:	10bf3504 	addi	r2,r2,-812
 8004d34:	f800283a 	ret

08004d38 <__locale_cjk_lang>:
 8004d38:	0005883a 	mov	r2,zero
 8004d3c:	f800283a 	ret

08004d40 <_localeconv_r>:
 8004d40:	00820074 	movhi	r2,2049
 8004d44:	10bf4504 	addi	r2,r2,-748
 8004d48:	f800283a 	ret

08004d4c <setlocale>:
 8004d4c:	00c20074 	movhi	r3,2049
 8004d50:	18c4e304 	addi	r3,r3,5004
 8004d54:	2005883a 	mov	r2,r4
 8004d58:	19000017 	ldw	r4,0(r3)
 8004d5c:	280d883a 	mov	r6,r5
 8004d60:	100b883a 	mov	r5,r2
 8004d64:	8004c941 	jmpi	8004c94 <_setlocale_r>

08004d68 <localeconv>:
 8004d68:	00820074 	movhi	r2,2049
 8004d6c:	10bf4504 	addi	r2,r2,-748
 8004d70:	f800283a 	ret

08004d74 <__smakebuf_r>:
 8004d74:	2880030b 	ldhu	r2,12(r5)
 8004d78:	10c0008c 	andi	r3,r2,2
 8004d7c:	1800401e 	bne	r3,zero,8004e80 <__smakebuf_r+0x10c>
 8004d80:	deffec04 	addi	sp,sp,-80
 8004d84:	dc000f15 	stw	r16,60(sp)
 8004d88:	2821883a 	mov	r16,r5
 8004d8c:	2940038f 	ldh	r5,14(r5)
 8004d90:	dc401015 	stw	r17,64(sp)
 8004d94:	dfc01315 	stw	ra,76(sp)
 8004d98:	dcc01215 	stw	r19,72(sp)
 8004d9c:	dc801115 	stw	r18,68(sp)
 8004da0:	2023883a 	mov	r17,r4
 8004da4:	28001b16 	blt	r5,zero,8004e14 <__smakebuf_r+0xa0>
 8004da8:	d80d883a 	mov	r6,sp
 8004dac:	80085dc0 	call	80085dc <_fstat_r>
 8004db0:	10001716 	blt	r2,zero,8004e10 <__smakebuf_r+0x9c>
 8004db4:	d8800117 	ldw	r2,4(sp)
 8004db8:	00e00014 	movui	r3,32768
 8004dbc:	10bc000c 	andi	r2,r2,61440
 8004dc0:	10c03726 	beq	r2,r3,8004ea0 <__smakebuf_r+0x12c>
 8004dc4:	80c0030b 	ldhu	r3,12(r16)
 8004dc8:	18c20014 	ori	r3,r3,2048
 8004dcc:	80c0030d 	sth	r3,12(r16)
 8004dd0:	00c80004 	movi	r3,8192
 8004dd4:	10c03c1e 	bne	r2,r3,8004ec8 <__smakebuf_r+0x154>
 8004dd8:	8140038f 	ldh	r5,14(r16)
 8004ddc:	8809883a 	mov	r4,r17
 8004de0:	8008ad80 	call	8008ad8 <_isatty_r>
 8004de4:	10004e26 	beq	r2,zero,8004f20 <__smakebuf_r+0x1ac>
 8004de8:	8080030b 	ldhu	r2,12(r16)
 8004dec:	04c00044 	movi	r19,1
 8004df0:	80c010c4 	addi	r3,r16,67
 8004df4:	14c4b03a 	or	r2,r2,r19
 8004df8:	8080030d 	sth	r2,12(r16)
 8004dfc:	80c00015 	stw	r3,0(r16)
 8004e00:	80c00415 	stw	r3,16(r16)
 8004e04:	84c00515 	stw	r19,20(r16)
 8004e08:	04810004 	movi	r18,1024
 8004e0c:	00000706 	br	8004e2c <__smakebuf_r+0xb8>
 8004e10:	8080030b 	ldhu	r2,12(r16)
 8004e14:	10c0200c 	andi	r3,r2,128
 8004e18:	18001f1e 	bne	r3,zero,8004e98 <__smakebuf_r+0x124>
 8004e1c:	04810004 	movi	r18,1024
 8004e20:	10820014 	ori	r2,r2,2048
 8004e24:	8080030d 	sth	r2,12(r16)
 8004e28:	0027883a 	mov	r19,zero
 8004e2c:	8809883a 	mov	r4,r17
 8004e30:	900b883a 	mov	r5,r18
 8004e34:	8004f2c0 	call	8004f2c <_malloc_r>
 8004e38:	10002e26 	beq	r2,zero,8004ef4 <__smakebuf_r+0x180>
 8004e3c:	80c0030b 	ldhu	r3,12(r16)
 8004e40:	01020034 	movhi	r4,2048
 8004e44:	2110e004 	addi	r4,r4,17280
 8004e48:	89000f15 	stw	r4,60(r17)
 8004e4c:	18c02014 	ori	r3,r3,128
 8004e50:	80c0030d 	sth	r3,12(r16)
 8004e54:	80800015 	stw	r2,0(r16)
 8004e58:	80800415 	stw	r2,16(r16)
 8004e5c:	84800515 	stw	r18,20(r16)
 8004e60:	98001c1e 	bne	r19,zero,8004ed4 <__smakebuf_r+0x160>
 8004e64:	dfc01317 	ldw	ra,76(sp)
 8004e68:	dcc01217 	ldw	r19,72(sp)
 8004e6c:	dc801117 	ldw	r18,68(sp)
 8004e70:	dc401017 	ldw	r17,64(sp)
 8004e74:	dc000f17 	ldw	r16,60(sp)
 8004e78:	dec01404 	addi	sp,sp,80
 8004e7c:	f800283a 	ret
 8004e80:	288010c4 	addi	r2,r5,67
 8004e84:	28800015 	stw	r2,0(r5)
 8004e88:	28800415 	stw	r2,16(r5)
 8004e8c:	00800044 	movi	r2,1
 8004e90:	28800515 	stw	r2,20(r5)
 8004e94:	f800283a 	ret
 8004e98:	04801004 	movi	r18,64
 8004e9c:	003fe006 	br	8004e20 <__alt_data_end+0xfc004e20>
 8004ea0:	81000a17 	ldw	r4,40(r16)
 8004ea4:	00c20034 	movhi	r3,2048
 8004ea8:	18dad104 	addi	r3,r3,27460
 8004eac:	20ffc51e 	bne	r4,r3,8004dc4 <__alt_data_end+0xfc004dc4>
 8004eb0:	80c0030b 	ldhu	r3,12(r16)
 8004eb4:	01010004 	movi	r4,1024
 8004eb8:	81001315 	stw	r4,76(r16)
 8004ebc:	1906b03a 	or	r3,r3,r4
 8004ec0:	80c0030d 	sth	r3,12(r16)
 8004ec4:	003fc206 	br	8004dd0 <__alt_data_end+0xfc004dd0>
 8004ec8:	0027883a 	mov	r19,zero
 8004ecc:	04810004 	movi	r18,1024
 8004ed0:	003fd606 	br	8004e2c <__alt_data_end+0xfc004e2c>
 8004ed4:	8140038f 	ldh	r5,14(r16)
 8004ed8:	8809883a 	mov	r4,r17
 8004edc:	8008ad80 	call	8008ad8 <_isatty_r>
 8004ee0:	103fe026 	beq	r2,zero,8004e64 <__alt_data_end+0xfc004e64>
 8004ee4:	8080030b 	ldhu	r2,12(r16)
 8004ee8:	10800054 	ori	r2,r2,1
 8004eec:	8080030d 	sth	r2,12(r16)
 8004ef0:	003fdc06 	br	8004e64 <__alt_data_end+0xfc004e64>
 8004ef4:	8080030b 	ldhu	r2,12(r16)
 8004ef8:	10c0800c 	andi	r3,r2,512
 8004efc:	183fd91e 	bne	r3,zero,8004e64 <__alt_data_end+0xfc004e64>
 8004f00:	10800094 	ori	r2,r2,2
 8004f04:	80c010c4 	addi	r3,r16,67
 8004f08:	8080030d 	sth	r2,12(r16)
 8004f0c:	00800044 	movi	r2,1
 8004f10:	80c00015 	stw	r3,0(r16)
 8004f14:	80c00415 	stw	r3,16(r16)
 8004f18:	80800515 	stw	r2,20(r16)
 8004f1c:	003fd106 	br	8004e64 <__alt_data_end+0xfc004e64>
 8004f20:	04c00044 	movi	r19,1
 8004f24:	04810004 	movi	r18,1024
 8004f28:	003fc006 	br	8004e2c <__alt_data_end+0xfc004e2c>

08004f2c <_malloc_r>:
 8004f2c:	defff504 	addi	sp,sp,-44
 8004f30:	dc800315 	stw	r18,12(sp)
 8004f34:	dfc00a15 	stw	ra,40(sp)
 8004f38:	df000915 	stw	fp,36(sp)
 8004f3c:	ddc00815 	stw	r23,32(sp)
 8004f40:	dd800715 	stw	r22,28(sp)
 8004f44:	dd400615 	stw	r21,24(sp)
 8004f48:	dd000515 	stw	r20,20(sp)
 8004f4c:	dcc00415 	stw	r19,16(sp)
 8004f50:	dc400215 	stw	r17,8(sp)
 8004f54:	dc000115 	stw	r16,4(sp)
 8004f58:	288002c4 	addi	r2,r5,11
 8004f5c:	00c00584 	movi	r3,22
 8004f60:	2025883a 	mov	r18,r4
 8004f64:	18802a2e 	bgeu	r3,r2,8005010 <_malloc_r+0xe4>
 8004f68:	047ffe04 	movi	r17,-8
 8004f6c:	1462703a 	and	r17,r2,r17
 8004f70:	88009e16 	blt	r17,zero,80051ec <_malloc_r+0x2c0>
 8004f74:	89409d36 	bltu	r17,r5,80051ec <_malloc_r+0x2c0>
 8004f78:	800ce8c0 	call	800ce8c <__malloc_lock>
 8004f7c:	00807dc4 	movi	r2,503
 8004f80:	14402736 	bltu	r2,r17,8005020 <_malloc_r+0xf4>
 8004f84:	8806d0fa 	srli	r3,r17,3
 8004f88:	04c20074 	movhi	r19,2049
 8004f8c:	9cff5304 	addi	r19,r19,-692
 8004f90:	18c5883a 	add	r2,r3,r3
 8004f94:	1085883a 	add	r2,r2,r2
 8004f98:	1085883a 	add	r2,r2,r2
 8004f9c:	9885883a 	add	r2,r19,r2
 8004fa0:	14000317 	ldw	r16,12(r2)
 8004fa4:	80814a26 	beq	r16,r2,80054d0 <_malloc_r+0x5a4>
 8004fa8:	80c00117 	ldw	r3,4(r16)
 8004fac:	81000317 	ldw	r4,12(r16)
 8004fb0:	00bfff04 	movi	r2,-4
 8004fb4:	1884703a 	and	r2,r3,r2
 8004fb8:	81400217 	ldw	r5,8(r16)
 8004fbc:	8085883a 	add	r2,r16,r2
 8004fc0:	10c00117 	ldw	r3,4(r2)
 8004fc4:	29000315 	stw	r4,12(r5)
 8004fc8:	21400215 	stw	r5,8(r4)
 8004fcc:	18c00054 	ori	r3,r3,1
 8004fd0:	10c00115 	stw	r3,4(r2)
 8004fd4:	9009883a 	mov	r4,r18
 8004fd8:	800ceac0 	call	800ceac <__malloc_unlock>
 8004fdc:	80800204 	addi	r2,r16,8
 8004fe0:	dfc00a17 	ldw	ra,40(sp)
 8004fe4:	df000917 	ldw	fp,36(sp)
 8004fe8:	ddc00817 	ldw	r23,32(sp)
 8004fec:	dd800717 	ldw	r22,28(sp)
 8004ff0:	dd400617 	ldw	r21,24(sp)
 8004ff4:	dd000517 	ldw	r20,20(sp)
 8004ff8:	dcc00417 	ldw	r19,16(sp)
 8004ffc:	dc800317 	ldw	r18,12(sp)
 8005000:	dc400217 	ldw	r17,8(sp)
 8005004:	dc000117 	ldw	r16,4(sp)
 8005008:	dec00b04 	addi	sp,sp,44
 800500c:	f800283a 	ret
 8005010:	04400404 	movi	r17,16
 8005014:	89407536 	bltu	r17,r5,80051ec <_malloc_r+0x2c0>
 8005018:	800ce8c0 	call	800ce8c <__malloc_lock>
 800501c:	003fd906 	br	8004f84 <__alt_data_end+0xfc004f84>
 8005020:	8806d27a 	srli	r3,r17,9
 8005024:	18007526 	beq	r3,zero,80051fc <_malloc_r+0x2d0>
 8005028:	00800104 	movi	r2,4
 800502c:	10c0ef36 	bltu	r2,r3,80053ec <_malloc_r+0x4c0>
 8005030:	8806d1ba 	srli	r3,r17,6
 8005034:	19c00e04 	addi	r7,r3,56
 8005038:	39cb883a 	add	r5,r7,r7
 800503c:	04c20074 	movhi	r19,2049
 8005040:	294b883a 	add	r5,r5,r5
 8005044:	9cff5304 	addi	r19,r19,-692
 8005048:	294b883a 	add	r5,r5,r5
 800504c:	994b883a 	add	r5,r19,r5
 8005050:	2c000317 	ldw	r16,12(r5)
 8005054:	2c000e26 	beq	r5,r16,8005090 <_malloc_r+0x164>
 8005058:	80800117 	ldw	r2,4(r16)
 800505c:	01bfff04 	movi	r6,-4
 8005060:	010003c4 	movi	r4,15
 8005064:	1184703a 	and	r2,r2,r6
 8005068:	1447c83a 	sub	r3,r2,r17
 800506c:	20c00716 	blt	r4,r3,800508c <_malloc_r+0x160>
 8005070:	1800650e 	bge	r3,zero,8005208 <_malloc_r+0x2dc>
 8005074:	84000317 	ldw	r16,12(r16)
 8005078:	2c000526 	beq	r5,r16,8005090 <_malloc_r+0x164>
 800507c:	80800117 	ldw	r2,4(r16)
 8005080:	1184703a 	and	r2,r2,r6
 8005084:	1447c83a 	sub	r3,r2,r17
 8005088:	20fff90e 	bge	r4,r3,8005070 <__alt_data_end+0xfc005070>
 800508c:	39ffffc4 	addi	r7,r7,-1
 8005090:	38c00044 	addi	r3,r7,1
 8005094:	01820074 	movhi	r6,2049
 8005098:	9c000417 	ldw	r16,16(r19)
 800509c:	31bf5304 	addi	r6,r6,-692
 80050a0:	32400204 	addi	r9,r6,8
 80050a4:	82410326 	beq	r16,r9,80054b4 <_malloc_r+0x588>
 80050a8:	81000117 	ldw	r4,4(r16)
 80050ac:	00bfff04 	movi	r2,-4
 80050b0:	208e703a 	and	r7,r4,r2
 80050b4:	3c45c83a 	sub	r2,r7,r17
 80050b8:	010003c4 	movi	r4,15
 80050bc:	2080ee16 	blt	r4,r2,8005478 <_malloc_r+0x54c>
 80050c0:	32400515 	stw	r9,20(r6)
 80050c4:	32400415 	stw	r9,16(r6)
 80050c8:	1000510e 	bge	r2,zero,8005210 <_malloc_r+0x2e4>
 80050cc:	00807fc4 	movi	r2,511
 80050d0:	11c0ce36 	bltu	r2,r7,800540c <_malloc_r+0x4e0>
 80050d4:	3808d0fa 	srli	r4,r7,3
 80050d8:	01c00044 	movi	r7,1
 80050dc:	30800117 	ldw	r2,4(r6)
 80050e0:	210b883a 	add	r5,r4,r4
 80050e4:	294b883a 	add	r5,r5,r5
 80050e8:	2009d0ba 	srai	r4,r4,2
 80050ec:	294b883a 	add	r5,r5,r5
 80050f0:	298b883a 	add	r5,r5,r6
 80050f4:	2a000217 	ldw	r8,8(r5)
 80050f8:	3908983a 	sll	r4,r7,r4
 80050fc:	81400315 	stw	r5,12(r16)
 8005100:	82000215 	stw	r8,8(r16)
 8005104:	2088b03a 	or	r4,r4,r2
 8005108:	2c000215 	stw	r16,8(r5)
 800510c:	31000115 	stw	r4,4(r6)
 8005110:	44000315 	stw	r16,12(r8)
 8005114:	1805d0ba 	srai	r2,r3,2
 8005118:	01400044 	movi	r5,1
 800511c:	288a983a 	sll	r5,r5,r2
 8005120:	21404336 	bltu	r4,r5,8005230 <_malloc_r+0x304>
 8005124:	2144703a 	and	r2,r4,r5
 8005128:	10000a1e 	bne	r2,zero,8005154 <_malloc_r+0x228>
 800512c:	00bfff04 	movi	r2,-4
 8005130:	294b883a 	add	r5,r5,r5
 8005134:	1886703a 	and	r3,r3,r2
 8005138:	2144703a 	and	r2,r4,r5
 800513c:	18c00104 	addi	r3,r3,4
 8005140:	1000041e 	bne	r2,zero,8005154 <_malloc_r+0x228>
 8005144:	294b883a 	add	r5,r5,r5
 8005148:	2144703a 	and	r2,r4,r5
 800514c:	18c00104 	addi	r3,r3,4
 8005150:	103ffc26 	beq	r2,zero,8005144 <__alt_data_end+0xfc005144>
 8005154:	023fff04 	movi	r8,-4
 8005158:	01c003c4 	movi	r7,15
 800515c:	18c5883a 	add	r2,r3,r3
 8005160:	1085883a 	add	r2,r2,r2
 8005164:	1085883a 	add	r2,r2,r2
 8005168:	9895883a 	add	r10,r19,r2
 800516c:	52c00304 	addi	r11,r10,12
 8005170:	1819883a 	mov	r12,r3
 8005174:	5c000017 	ldw	r16,0(r11)
 8005178:	59bffd04 	addi	r6,r11,-12
 800517c:	8180041e 	bne	r16,r6,8005190 <_malloc_r+0x264>
 8005180:	0000ce06 	br	80054bc <_malloc_r+0x590>
 8005184:	2000d70e 	bge	r4,zero,80054e4 <_malloc_r+0x5b8>
 8005188:	84000317 	ldw	r16,12(r16)
 800518c:	8180cb26 	beq	r16,r6,80054bc <_malloc_r+0x590>
 8005190:	80800117 	ldw	r2,4(r16)
 8005194:	1204703a 	and	r2,r2,r8
 8005198:	1449c83a 	sub	r4,r2,r17
 800519c:	393ff90e 	bge	r7,r4,8005184 <__alt_data_end+0xfc005184>
 80051a0:	80800317 	ldw	r2,12(r16)
 80051a4:	80c00217 	ldw	r3,8(r16)
 80051a8:	89400054 	ori	r5,r17,1
 80051ac:	81400115 	stw	r5,4(r16)
 80051b0:	18800315 	stw	r2,12(r3)
 80051b4:	10c00215 	stw	r3,8(r2)
 80051b8:	8463883a 	add	r17,r16,r17
 80051bc:	9c400515 	stw	r17,20(r19)
 80051c0:	9c400415 	stw	r17,16(r19)
 80051c4:	20800054 	ori	r2,r4,1
 80051c8:	88800115 	stw	r2,4(r17)
 80051cc:	8a400315 	stw	r9,12(r17)
 80051d0:	8a400215 	stw	r9,8(r17)
 80051d4:	8923883a 	add	r17,r17,r4
 80051d8:	89000015 	stw	r4,0(r17)
 80051dc:	9009883a 	mov	r4,r18
 80051e0:	800ceac0 	call	800ceac <__malloc_unlock>
 80051e4:	80800204 	addi	r2,r16,8
 80051e8:	003f7d06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 80051ec:	00800304 	movi	r2,12
 80051f0:	90800015 	stw	r2,0(r18)
 80051f4:	0005883a 	mov	r2,zero
 80051f8:	003f7906 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 80051fc:	01401f84 	movi	r5,126
 8005200:	01c00fc4 	movi	r7,63
 8005204:	003f8d06 	br	800503c <__alt_data_end+0xfc00503c>
 8005208:	81000317 	ldw	r4,12(r16)
 800520c:	003f6a06 	br	8004fb8 <__alt_data_end+0xfc004fb8>
 8005210:	81c5883a 	add	r2,r16,r7
 8005214:	10c00117 	ldw	r3,4(r2)
 8005218:	9009883a 	mov	r4,r18
 800521c:	18c00054 	ori	r3,r3,1
 8005220:	10c00115 	stw	r3,4(r2)
 8005224:	800ceac0 	call	800ceac <__malloc_unlock>
 8005228:	80800204 	addi	r2,r16,8
 800522c:	003f6c06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 8005230:	9c000217 	ldw	r16,8(r19)
 8005234:	00bfff04 	movi	r2,-4
 8005238:	85800117 	ldw	r22,4(r16)
 800523c:	b0ac703a 	and	r22,r22,r2
 8005240:	b4400336 	bltu	r22,r17,8005250 <_malloc_r+0x324>
 8005244:	b445c83a 	sub	r2,r22,r17
 8005248:	00c003c4 	movi	r3,15
 800524c:	18805d16 	blt	r3,r2,80053c4 <_malloc_r+0x498>
 8005250:	05c20074 	movhi	r23,2049
 8005254:	00820074 	movhi	r2,2049
 8005258:	bdc4e504 	addi	r23,r23,5012
 800525c:	108bbd04 	addi	r2,r2,12020
 8005260:	15400017 	ldw	r21,0(r2)
 8005264:	b9000017 	ldw	r4,0(r23)
 8005268:	00ffffc4 	movi	r3,-1
 800526c:	858d883a 	add	r6,r16,r22
 8005270:	8d6b883a 	add	r21,r17,r21
 8005274:	20c0e426 	beq	r4,r3,8005608 <_malloc_r+0x6dc>
 8005278:	ad4403c4 	addi	r21,r21,4111
 800527c:	00fc0004 	movi	r3,-4096
 8005280:	a8ea703a 	and	r21,r21,r3
 8005284:	9009883a 	mov	r4,r18
 8005288:	a80b883a 	mov	r5,r21
 800528c:	d9800015 	stw	r6,0(sp)
 8005290:	8006a180 	call	8006a18 <_sbrk_r>
 8005294:	00ffffc4 	movi	r3,-1
 8005298:	1029883a 	mov	r20,r2
 800529c:	d9800017 	ldw	r6,0(sp)
 80052a0:	10c0a426 	beq	r2,r3,8005534 <_malloc_r+0x608>
 80052a4:	1180a236 	bltu	r2,r6,8005530 <_malloc_r+0x604>
 80052a8:	07020074 	movhi	fp,2049
 80052ac:	e70bc504 	addi	fp,fp,12052
 80052b0:	e0c00017 	ldw	r3,0(fp)
 80052b4:	a8c7883a 	add	r3,r21,r3
 80052b8:	e0c00015 	stw	r3,0(fp)
 80052bc:	3500da26 	beq	r6,r20,8005628 <_malloc_r+0x6fc>
 80052c0:	b9000017 	ldw	r4,0(r23)
 80052c4:	00bfffc4 	movi	r2,-1
 80052c8:	2080e426 	beq	r4,r2,800565c <_malloc_r+0x730>
 80052cc:	a185c83a 	sub	r2,r20,r6
 80052d0:	1885883a 	add	r2,r3,r2
 80052d4:	e0800015 	stw	r2,0(fp)
 80052d8:	a0c001cc 	andi	r3,r20,7
 80052dc:	1800b526 	beq	r3,zero,80055b4 <_malloc_r+0x688>
 80052e0:	a0e9c83a 	sub	r20,r20,r3
 80052e4:	00840204 	movi	r2,4104
 80052e8:	a5000204 	addi	r20,r20,8
 80052ec:	10c7c83a 	sub	r3,r2,r3
 80052f0:	a545883a 	add	r2,r20,r21
 80052f4:	1083ffcc 	andi	r2,r2,4095
 80052f8:	18abc83a 	sub	r21,r3,r2
 80052fc:	9009883a 	mov	r4,r18
 8005300:	a80b883a 	mov	r5,r21
 8005304:	8006a180 	call	8006a18 <_sbrk_r>
 8005308:	00ffffc4 	movi	r3,-1
 800530c:	10c0d026 	beq	r2,r3,8005650 <_malloc_r+0x724>
 8005310:	1507c83a 	sub	r3,r2,r20
 8005314:	a8c7883a 	add	r3,r21,r3
 8005318:	18c00054 	ori	r3,r3,1
 800531c:	e0800017 	ldw	r2,0(fp)
 8005320:	9d000215 	stw	r20,8(r19)
 8005324:	a0c00115 	stw	r3,4(r20)
 8005328:	a887883a 	add	r3,r21,r2
 800532c:	e0c00015 	stw	r3,0(fp)
 8005330:	84c00e26 	beq	r16,r19,800536c <_malloc_r+0x440>
 8005334:	018003c4 	movi	r6,15
 8005338:	3580a02e 	bgeu	r6,r22,80055bc <_malloc_r+0x690>
 800533c:	81400117 	ldw	r5,4(r16)
 8005340:	013ffe04 	movi	r4,-8
 8005344:	b0bffd04 	addi	r2,r22,-12
 8005348:	1104703a 	and	r2,r2,r4
 800534c:	2900004c 	andi	r4,r5,1
 8005350:	1108b03a 	or	r4,r2,r4
 8005354:	81000115 	stw	r4,4(r16)
 8005358:	01400144 	movi	r5,5
 800535c:	8089883a 	add	r4,r16,r2
 8005360:	21400115 	stw	r5,4(r4)
 8005364:	21400215 	stw	r5,8(r4)
 8005368:	3080c036 	bltu	r6,r2,800566c <_malloc_r+0x740>
 800536c:	00820074 	movhi	r2,2049
 8005370:	108bbc04 	addi	r2,r2,12016
 8005374:	11000017 	ldw	r4,0(r2)
 8005378:	20c0012e 	bgeu	r4,r3,8005380 <_malloc_r+0x454>
 800537c:	10c00015 	stw	r3,0(r2)
 8005380:	00820074 	movhi	r2,2049
 8005384:	108bbb04 	addi	r2,r2,12012
 8005388:	11000017 	ldw	r4,0(r2)
 800538c:	9c000217 	ldw	r16,8(r19)
 8005390:	20c0012e 	bgeu	r4,r3,8005398 <_malloc_r+0x46c>
 8005394:	10c00015 	stw	r3,0(r2)
 8005398:	80c00117 	ldw	r3,4(r16)
 800539c:	00bfff04 	movi	r2,-4
 80053a0:	1886703a 	and	r3,r3,r2
 80053a4:	1c45c83a 	sub	r2,r3,r17
 80053a8:	1c400236 	bltu	r3,r17,80053b4 <_malloc_r+0x488>
 80053ac:	00c003c4 	movi	r3,15
 80053b0:	18800416 	blt	r3,r2,80053c4 <_malloc_r+0x498>
 80053b4:	9009883a 	mov	r4,r18
 80053b8:	800ceac0 	call	800ceac <__malloc_unlock>
 80053bc:	0005883a 	mov	r2,zero
 80053c0:	003f0706 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 80053c4:	88c00054 	ori	r3,r17,1
 80053c8:	80c00115 	stw	r3,4(r16)
 80053cc:	8463883a 	add	r17,r16,r17
 80053d0:	10800054 	ori	r2,r2,1
 80053d4:	9c400215 	stw	r17,8(r19)
 80053d8:	88800115 	stw	r2,4(r17)
 80053dc:	9009883a 	mov	r4,r18
 80053e0:	800ceac0 	call	800ceac <__malloc_unlock>
 80053e4:	80800204 	addi	r2,r16,8
 80053e8:	003efd06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 80053ec:	00800504 	movi	r2,20
 80053f0:	10c0482e 	bgeu	r2,r3,8005514 <_malloc_r+0x5e8>
 80053f4:	00801504 	movi	r2,84
 80053f8:	10c06836 	bltu	r2,r3,800559c <_malloc_r+0x670>
 80053fc:	8806d33a 	srli	r3,r17,12
 8005400:	19c01b84 	addi	r7,r3,110
 8005404:	39cb883a 	add	r5,r7,r7
 8005408:	003f0c06 	br	800503c <__alt_data_end+0xfc00503c>
 800540c:	3804d27a 	srli	r2,r7,9
 8005410:	01000104 	movi	r4,4
 8005414:	2080422e 	bgeu	r4,r2,8005520 <_malloc_r+0x5f4>
 8005418:	01000504 	movi	r4,20
 800541c:	20807c36 	bltu	r4,r2,8005610 <_malloc_r+0x6e4>
 8005420:	110016c4 	addi	r4,r2,91
 8005424:	210b883a 	add	r5,r4,r4
 8005428:	294b883a 	add	r5,r5,r5
 800542c:	294b883a 	add	r5,r5,r5
 8005430:	994b883a 	add	r5,r19,r5
 8005434:	28800217 	ldw	r2,8(r5)
 8005438:	02020074 	movhi	r8,2049
 800543c:	423f5304 	addi	r8,r8,-692
 8005440:	11406326 	beq	r2,r5,80055d0 <_malloc_r+0x6a4>
 8005444:	01bfff04 	movi	r6,-4
 8005448:	11000117 	ldw	r4,4(r2)
 800544c:	2188703a 	and	r4,r4,r6
 8005450:	3900022e 	bgeu	r7,r4,800545c <_malloc_r+0x530>
 8005454:	10800217 	ldw	r2,8(r2)
 8005458:	28bffb1e 	bne	r5,r2,8005448 <__alt_data_end+0xfc005448>
 800545c:	11800317 	ldw	r6,12(r2)
 8005460:	99000117 	ldw	r4,4(r19)
 8005464:	81800315 	stw	r6,12(r16)
 8005468:	80800215 	stw	r2,8(r16)
 800546c:	34000215 	stw	r16,8(r6)
 8005470:	14000315 	stw	r16,12(r2)
 8005474:	003f2706 	br	8005114 <__alt_data_end+0xfc005114>
 8005478:	88c00054 	ori	r3,r17,1
 800547c:	80c00115 	stw	r3,4(r16)
 8005480:	8463883a 	add	r17,r16,r17
 8005484:	34400515 	stw	r17,20(r6)
 8005488:	34400415 	stw	r17,16(r6)
 800548c:	10c00054 	ori	r3,r2,1
 8005490:	8a400315 	stw	r9,12(r17)
 8005494:	8a400215 	stw	r9,8(r17)
 8005498:	88c00115 	stw	r3,4(r17)
 800549c:	88a3883a 	add	r17,r17,r2
 80054a0:	88800015 	stw	r2,0(r17)
 80054a4:	9009883a 	mov	r4,r18
 80054a8:	800ceac0 	call	800ceac <__malloc_unlock>
 80054ac:	80800204 	addi	r2,r16,8
 80054b0:	003ecb06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 80054b4:	31000117 	ldw	r4,4(r6)
 80054b8:	003f1606 	br	8005114 <__alt_data_end+0xfc005114>
 80054bc:	63000044 	addi	r12,r12,1
 80054c0:	608000cc 	andi	r2,r12,3
 80054c4:	5ac00204 	addi	r11,r11,8
 80054c8:	103f2a1e 	bne	r2,zero,8005174 <__alt_data_end+0xfc005174>
 80054cc:	00002106 	br	8005554 <_malloc_r+0x628>
 80054d0:	80800204 	addi	r2,r16,8
 80054d4:	84000517 	ldw	r16,20(r16)
 80054d8:	143eb31e 	bne	r2,r16,8004fa8 <__alt_data_end+0xfc004fa8>
 80054dc:	18c00084 	addi	r3,r3,2
 80054e0:	003eec06 	br	8005094 <__alt_data_end+0xfc005094>
 80054e4:	8085883a 	add	r2,r16,r2
 80054e8:	10c00117 	ldw	r3,4(r2)
 80054ec:	81000317 	ldw	r4,12(r16)
 80054f0:	81400217 	ldw	r5,8(r16)
 80054f4:	18c00054 	ori	r3,r3,1
 80054f8:	10c00115 	stw	r3,4(r2)
 80054fc:	29000315 	stw	r4,12(r5)
 8005500:	21400215 	stw	r5,8(r4)
 8005504:	9009883a 	mov	r4,r18
 8005508:	800ceac0 	call	800ceac <__malloc_unlock>
 800550c:	80800204 	addi	r2,r16,8
 8005510:	003eb306 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 8005514:	19c016c4 	addi	r7,r3,91
 8005518:	39cb883a 	add	r5,r7,r7
 800551c:	003ec706 	br	800503c <__alt_data_end+0xfc00503c>
 8005520:	3804d1ba 	srli	r2,r7,6
 8005524:	11000e04 	addi	r4,r2,56
 8005528:	210b883a 	add	r5,r4,r4
 800552c:	003fbe06 	br	8005428 <__alt_data_end+0xfc005428>
 8005530:	84ff5d26 	beq	r16,r19,80052a8 <__alt_data_end+0xfc0052a8>
 8005534:	9c000217 	ldw	r16,8(r19)
 8005538:	00bfff04 	movi	r2,-4
 800553c:	80c00117 	ldw	r3,4(r16)
 8005540:	1886703a 	and	r3,r3,r2
 8005544:	003f9706 	br	80053a4 <__alt_data_end+0xfc0053a4>
 8005548:	52800017 	ldw	r10,0(r10)
 800554c:	18ffffc4 	addi	r3,r3,-1
 8005550:	50805c1e 	bne	r10,r2,80056c4 <_malloc_r+0x798>
 8005554:	190000cc 	andi	r4,r3,3
 8005558:	50bffe04 	addi	r2,r10,-8
 800555c:	203ffa1e 	bne	r4,zero,8005548 <__alt_data_end+0xfc005548>
 8005560:	98800117 	ldw	r2,4(r19)
 8005564:	0146303a 	nor	r3,zero,r5
 8005568:	1884703a 	and	r2,r3,r2
 800556c:	98800115 	stw	r2,4(r19)
 8005570:	294b883a 	add	r5,r5,r5
 8005574:	117f2e36 	bltu	r2,r5,8005230 <__alt_data_end+0xfc005230>
 8005578:	283f2d26 	beq	r5,zero,8005230 <__alt_data_end+0xfc005230>
 800557c:	1146703a 	and	r3,r2,r5
 8005580:	1800521e 	bne	r3,zero,80056cc <_malloc_r+0x7a0>
 8005584:	6007883a 	mov	r3,r12
 8005588:	294b883a 	add	r5,r5,r5
 800558c:	1148703a 	and	r4,r2,r5
 8005590:	18c00104 	addi	r3,r3,4
 8005594:	203ffc26 	beq	r4,zero,8005588 <__alt_data_end+0xfc005588>
 8005598:	003ef006 	br	800515c <__alt_data_end+0xfc00515c>
 800559c:	00805504 	movi	r2,340
 80055a0:	10c01336 	bltu	r2,r3,80055f0 <_malloc_r+0x6c4>
 80055a4:	8806d3fa 	srli	r3,r17,15
 80055a8:	19c01dc4 	addi	r7,r3,119
 80055ac:	39cb883a 	add	r5,r7,r7
 80055b0:	003ea206 	br	800503c <__alt_data_end+0xfc00503c>
 80055b4:	00c40004 	movi	r3,4096
 80055b8:	003f4d06 	br	80052f0 <__alt_data_end+0xfc0052f0>
 80055bc:	00800044 	movi	r2,1
 80055c0:	a0800115 	stw	r2,4(r20)
 80055c4:	a021883a 	mov	r16,r20
 80055c8:	0007883a 	mov	r3,zero
 80055cc:	003f7506 	br	80053a4 <__alt_data_end+0xfc0053a4>
 80055d0:	200bd0ba 	srai	r5,r4,2
 80055d4:	01800044 	movi	r6,1
 80055d8:	41000117 	ldw	r4,4(r8)
 80055dc:	314a983a 	sll	r5,r6,r5
 80055e0:	100d883a 	mov	r6,r2
 80055e4:	2908b03a 	or	r4,r5,r4
 80055e8:	41000115 	stw	r4,4(r8)
 80055ec:	003f9d06 	br	8005464 <__alt_data_end+0xfc005464>
 80055f0:	00815504 	movi	r2,1364
 80055f4:	10c01336 	bltu	r2,r3,8005644 <_malloc_r+0x718>
 80055f8:	8806d4ba 	srli	r3,r17,18
 80055fc:	19c01f04 	addi	r7,r3,124
 8005600:	39cb883a 	add	r5,r7,r7
 8005604:	003e8d06 	br	800503c <__alt_data_end+0xfc00503c>
 8005608:	ad400404 	addi	r21,r21,16
 800560c:	003f1d06 	br	8005284 <__alt_data_end+0xfc005284>
 8005610:	01001504 	movi	r4,84
 8005614:	20801c36 	bltu	r4,r2,8005688 <_malloc_r+0x75c>
 8005618:	3804d33a 	srli	r2,r7,12
 800561c:	11001b84 	addi	r4,r2,110
 8005620:	210b883a 	add	r5,r4,r4
 8005624:	003f8006 	br	8005428 <__alt_data_end+0xfc005428>
 8005628:	3083ffcc 	andi	r2,r6,4095
 800562c:	103f241e 	bne	r2,zero,80052c0 <__alt_data_end+0xfc0052c0>
 8005630:	99000217 	ldw	r4,8(r19)
 8005634:	ad85883a 	add	r2,r21,r22
 8005638:	10800054 	ori	r2,r2,1
 800563c:	20800115 	stw	r2,4(r4)
 8005640:	003f4a06 	br	800536c <__alt_data_end+0xfc00536c>
 8005644:	01403f04 	movi	r5,252
 8005648:	01c01f84 	movi	r7,126
 800564c:	003e7b06 	br	800503c <__alt_data_end+0xfc00503c>
 8005650:	00c00044 	movi	r3,1
 8005654:	002b883a 	mov	r21,zero
 8005658:	003f3006 	br	800531c <__alt_data_end+0xfc00531c>
 800565c:	00820074 	movhi	r2,2049
 8005660:	1084e504 	addi	r2,r2,5012
 8005664:	15000015 	stw	r20,0(r2)
 8005668:	003f1b06 	br	80052d8 <__alt_data_end+0xfc0052d8>
 800566c:	9009883a 	mov	r4,r18
 8005670:	81400204 	addi	r5,r16,8
 8005674:	80048340 	call	8004834 <_free_r>
 8005678:	00820074 	movhi	r2,2049
 800567c:	108bc504 	addi	r2,r2,12052
 8005680:	10c00017 	ldw	r3,0(r2)
 8005684:	003f3906 	br	800536c <__alt_data_end+0xfc00536c>
 8005688:	01005504 	movi	r4,340
 800568c:	20800436 	bltu	r4,r2,80056a0 <_malloc_r+0x774>
 8005690:	3804d3fa 	srli	r2,r7,15
 8005694:	11001dc4 	addi	r4,r2,119
 8005698:	210b883a 	add	r5,r4,r4
 800569c:	003f6206 	br	8005428 <__alt_data_end+0xfc005428>
 80056a0:	01015504 	movi	r4,1364
 80056a4:	20800436 	bltu	r4,r2,80056b8 <_malloc_r+0x78c>
 80056a8:	3804d4ba 	srli	r2,r7,18
 80056ac:	11001f04 	addi	r4,r2,124
 80056b0:	210b883a 	add	r5,r4,r4
 80056b4:	003f5c06 	br	8005428 <__alt_data_end+0xfc005428>
 80056b8:	01403f04 	movi	r5,252
 80056bc:	01001f84 	movi	r4,126
 80056c0:	003f5906 	br	8005428 <__alt_data_end+0xfc005428>
 80056c4:	98800117 	ldw	r2,4(r19)
 80056c8:	003fa906 	br	8005570 <__alt_data_end+0xfc005570>
 80056cc:	6007883a 	mov	r3,r12
 80056d0:	003ea206 	br	800515c <__alt_data_end+0xfc00515c>

080056d4 <memchr>:
 80056d4:	208000cc 	andi	r2,r4,3
 80056d8:	280f883a 	mov	r7,r5
 80056dc:	10003526 	beq	r2,zero,80057b4 <memchr+0xe0>
 80056e0:	30bfffc4 	addi	r2,r6,-1
 80056e4:	30001b26 	beq	r6,zero,8005754 <memchr+0x80>
 80056e8:	21800003 	ldbu	r6,0(r4)
 80056ec:	28c03fcc 	andi	r3,r5,255
 80056f0:	30c01a26 	beq	r6,r3,800575c <memchr+0x88>
 80056f4:	180d883a 	mov	r6,r3
 80056f8:	00000406 	br	800570c <memchr+0x38>
 80056fc:	10001526 	beq	r2,zero,8005754 <memchr+0x80>
 8005700:	20c00003 	ldbu	r3,0(r4)
 8005704:	10bfffc4 	addi	r2,r2,-1
 8005708:	19801426 	beq	r3,r6,800575c <memchr+0x88>
 800570c:	21000044 	addi	r4,r4,1
 8005710:	20c000cc 	andi	r3,r4,3
 8005714:	183ff91e 	bne	r3,zero,80056fc <__alt_data_end+0xfc0056fc>
 8005718:	024000c4 	movi	r9,3
 800571c:	48801136 	bltu	r9,r2,8005764 <memchr+0x90>
 8005720:	10000c26 	beq	r2,zero,8005754 <memchr+0x80>
 8005724:	20c00003 	ldbu	r3,0(r4)
 8005728:	29403fcc 	andi	r5,r5,255
 800572c:	19400b26 	beq	r3,r5,800575c <memchr+0x88>
 8005730:	20c00044 	addi	r3,r4,1
 8005734:	2085883a 	add	r2,r4,r2
 8005738:	39803fcc 	andi	r6,r7,255
 800573c:	00000306 	br	800574c <memchr+0x78>
 8005740:	18c00044 	addi	r3,r3,1
 8005744:	197fffc3 	ldbu	r5,-1(r3)
 8005748:	29800426 	beq	r5,r6,800575c <memchr+0x88>
 800574c:	1809883a 	mov	r4,r3
 8005750:	18bffb1e 	bne	r3,r2,8005740 <__alt_data_end+0xfc005740>
 8005754:	0005883a 	mov	r2,zero
 8005758:	f800283a 	ret
 800575c:	2005883a 	mov	r2,r4
 8005760:	f800283a 	ret
 8005764:	28c03fcc 	andi	r3,r5,255
 8005768:	1810923a 	slli	r8,r3,8
 800576c:	02ffbff4 	movhi	r11,65279
 8005770:	02a02074 	movhi	r10,32897
 8005774:	40c6b03a 	or	r3,r8,r3
 8005778:	1810943a 	slli	r8,r3,16
 800577c:	5affbfc4 	addi	r11,r11,-257
 8005780:	52a02004 	addi	r10,r10,-32640
 8005784:	40d0b03a 	or	r8,r8,r3
 8005788:	20c00017 	ldw	r3,0(r4)
 800578c:	40c6f03a 	xor	r3,r8,r3
 8005790:	1acd883a 	add	r6,r3,r11
 8005794:	00c6303a 	nor	r3,zero,r3
 8005798:	30c6703a 	and	r3,r6,r3
 800579c:	1a86703a 	and	r3,r3,r10
 80057a0:	183fdf1e 	bne	r3,zero,8005720 <__alt_data_end+0xfc005720>
 80057a4:	10bfff04 	addi	r2,r2,-4
 80057a8:	21000104 	addi	r4,r4,4
 80057ac:	48bff636 	bltu	r9,r2,8005788 <__alt_data_end+0xfc005788>
 80057b0:	003fdb06 	br	8005720 <__alt_data_end+0xfc005720>
 80057b4:	3005883a 	mov	r2,r6
 80057b8:	003fd706 	br	8005718 <__alt_data_end+0xfc005718>

080057bc <memcpy>:
 80057bc:	deffff04 	addi	sp,sp,-4
 80057c0:	dc000015 	stw	r16,0(sp)
 80057c4:	00c003c4 	movi	r3,15
 80057c8:	2005883a 	mov	r2,r4
 80057cc:	1980432e 	bgeu	r3,r6,80058dc <memcpy+0x120>
 80057d0:	2146b03a 	or	r3,r4,r5
 80057d4:	18c000cc 	andi	r3,r3,3
 80057d8:	1800421e 	bne	r3,zero,80058e4 <memcpy+0x128>
 80057dc:	343ffc04 	addi	r16,r6,-16
 80057e0:	8020d13a 	srli	r16,r16,4
 80057e4:	28c00104 	addi	r3,r5,4
 80057e8:	23400104 	addi	r13,r4,4
 80057ec:	801e913a 	slli	r15,r16,4
 80057f0:	2b000204 	addi	r12,r5,8
 80057f4:	22c00204 	addi	r11,r4,8
 80057f8:	7bc00504 	addi	r15,r15,20
 80057fc:	2a800304 	addi	r10,r5,12
 8005800:	22400304 	addi	r9,r4,12
 8005804:	2bdf883a 	add	r15,r5,r15
 8005808:	2811883a 	mov	r8,r5
 800580c:	200f883a 	mov	r7,r4
 8005810:	41000017 	ldw	r4,0(r8)
 8005814:	39c00404 	addi	r7,r7,16
 8005818:	18c00404 	addi	r3,r3,16
 800581c:	393ffc15 	stw	r4,-16(r7)
 8005820:	1bbffc17 	ldw	r14,-16(r3)
 8005824:	6b400404 	addi	r13,r13,16
 8005828:	5ac00404 	addi	r11,r11,16
 800582c:	6bbffc15 	stw	r14,-16(r13)
 8005830:	63800017 	ldw	r14,0(r12)
 8005834:	4a400404 	addi	r9,r9,16
 8005838:	42000404 	addi	r8,r8,16
 800583c:	5bbffc15 	stw	r14,-16(r11)
 8005840:	53800017 	ldw	r14,0(r10)
 8005844:	63000404 	addi	r12,r12,16
 8005848:	52800404 	addi	r10,r10,16
 800584c:	4bbffc15 	stw	r14,-16(r9)
 8005850:	1bffef1e 	bne	r3,r15,8005810 <__alt_data_end+0xfc005810>
 8005854:	81c00044 	addi	r7,r16,1
 8005858:	380e913a 	slli	r7,r7,4
 800585c:	310003cc 	andi	r4,r6,15
 8005860:	02c000c4 	movi	r11,3
 8005864:	11c7883a 	add	r3,r2,r7
 8005868:	29cb883a 	add	r5,r5,r7
 800586c:	59001f2e 	bgeu	r11,r4,80058ec <memcpy+0x130>
 8005870:	1813883a 	mov	r9,r3
 8005874:	2811883a 	mov	r8,r5
 8005878:	200f883a 	mov	r7,r4
 800587c:	42800017 	ldw	r10,0(r8)
 8005880:	4a400104 	addi	r9,r9,4
 8005884:	39ffff04 	addi	r7,r7,-4
 8005888:	4abfff15 	stw	r10,-4(r9)
 800588c:	42000104 	addi	r8,r8,4
 8005890:	59fffa36 	bltu	r11,r7,800587c <__alt_data_end+0xfc00587c>
 8005894:	213fff04 	addi	r4,r4,-4
 8005898:	2008d0ba 	srli	r4,r4,2
 800589c:	318000cc 	andi	r6,r6,3
 80058a0:	21000044 	addi	r4,r4,1
 80058a4:	2109883a 	add	r4,r4,r4
 80058a8:	2109883a 	add	r4,r4,r4
 80058ac:	1907883a 	add	r3,r3,r4
 80058b0:	290b883a 	add	r5,r5,r4
 80058b4:	30000626 	beq	r6,zero,80058d0 <memcpy+0x114>
 80058b8:	198d883a 	add	r6,r3,r6
 80058bc:	29c00003 	ldbu	r7,0(r5)
 80058c0:	18c00044 	addi	r3,r3,1
 80058c4:	29400044 	addi	r5,r5,1
 80058c8:	19ffffc5 	stb	r7,-1(r3)
 80058cc:	19bffb1e 	bne	r3,r6,80058bc <__alt_data_end+0xfc0058bc>
 80058d0:	dc000017 	ldw	r16,0(sp)
 80058d4:	dec00104 	addi	sp,sp,4
 80058d8:	f800283a 	ret
 80058dc:	2007883a 	mov	r3,r4
 80058e0:	003ff406 	br	80058b4 <__alt_data_end+0xfc0058b4>
 80058e4:	2007883a 	mov	r3,r4
 80058e8:	003ff306 	br	80058b8 <__alt_data_end+0xfc0058b8>
 80058ec:	200d883a 	mov	r6,r4
 80058f0:	003ff006 	br	80058b4 <__alt_data_end+0xfc0058b4>

080058f4 <memset>:
 80058f4:	20c000cc 	andi	r3,r4,3
 80058f8:	2005883a 	mov	r2,r4
 80058fc:	18004326 	beq	r3,zero,8005a0c <memset+0x118>
 8005900:	31ffffc4 	addi	r7,r6,-1
 8005904:	30004026 	beq	r6,zero,8005a08 <memset+0x114>
 8005908:	2813883a 	mov	r9,r5
 800590c:	200d883a 	mov	r6,r4
 8005910:	2007883a 	mov	r3,r4
 8005914:	00000406 	br	8005928 <memset+0x34>
 8005918:	3a3fffc4 	addi	r8,r7,-1
 800591c:	31800044 	addi	r6,r6,1
 8005920:	38003926 	beq	r7,zero,8005a08 <memset+0x114>
 8005924:	400f883a 	mov	r7,r8
 8005928:	18c00044 	addi	r3,r3,1
 800592c:	32400005 	stb	r9,0(r6)
 8005930:	1a0000cc 	andi	r8,r3,3
 8005934:	403ff81e 	bne	r8,zero,8005918 <__alt_data_end+0xfc005918>
 8005938:	010000c4 	movi	r4,3
 800593c:	21c02d2e 	bgeu	r4,r7,80059f4 <memset+0x100>
 8005940:	29803fcc 	andi	r6,r5,255
 8005944:	3008923a 	slli	r4,r6,8
 8005948:	218cb03a 	or	r6,r4,r6
 800594c:	3008943a 	slli	r4,r6,16
 8005950:	218cb03a 	or	r6,r4,r6
 8005954:	010003c4 	movi	r4,15
 8005958:	21c0182e 	bgeu	r4,r7,80059bc <memset+0xc8>
 800595c:	3b3ffc04 	addi	r12,r7,-16
 8005960:	6018d13a 	srli	r12,r12,4
 8005964:	1a000104 	addi	r8,r3,4
 8005968:	1ac00204 	addi	r11,r3,8
 800596c:	6008913a 	slli	r4,r12,4
 8005970:	1a800304 	addi	r10,r3,12
 8005974:	1813883a 	mov	r9,r3
 8005978:	21000504 	addi	r4,r4,20
 800597c:	1909883a 	add	r4,r3,r4
 8005980:	49800015 	stw	r6,0(r9)
 8005984:	41800015 	stw	r6,0(r8)
 8005988:	59800015 	stw	r6,0(r11)
 800598c:	51800015 	stw	r6,0(r10)
 8005990:	42000404 	addi	r8,r8,16
 8005994:	4a400404 	addi	r9,r9,16
 8005998:	5ac00404 	addi	r11,r11,16
 800599c:	52800404 	addi	r10,r10,16
 80059a0:	413ff71e 	bne	r8,r4,8005980 <__alt_data_end+0xfc005980>
 80059a4:	63000044 	addi	r12,r12,1
 80059a8:	6018913a 	slli	r12,r12,4
 80059ac:	39c003cc 	andi	r7,r7,15
 80059b0:	010000c4 	movi	r4,3
 80059b4:	1b07883a 	add	r3,r3,r12
 80059b8:	21c00e2e 	bgeu	r4,r7,80059f4 <memset+0x100>
 80059bc:	1813883a 	mov	r9,r3
 80059c0:	3811883a 	mov	r8,r7
 80059c4:	010000c4 	movi	r4,3
 80059c8:	49800015 	stw	r6,0(r9)
 80059cc:	423fff04 	addi	r8,r8,-4
 80059d0:	4a400104 	addi	r9,r9,4
 80059d4:	223ffc36 	bltu	r4,r8,80059c8 <__alt_data_end+0xfc0059c8>
 80059d8:	393fff04 	addi	r4,r7,-4
 80059dc:	2008d0ba 	srli	r4,r4,2
 80059e0:	39c000cc 	andi	r7,r7,3
 80059e4:	21000044 	addi	r4,r4,1
 80059e8:	2109883a 	add	r4,r4,r4
 80059ec:	2109883a 	add	r4,r4,r4
 80059f0:	1907883a 	add	r3,r3,r4
 80059f4:	38000426 	beq	r7,zero,8005a08 <memset+0x114>
 80059f8:	19cf883a 	add	r7,r3,r7
 80059fc:	19400005 	stb	r5,0(r3)
 8005a00:	18c00044 	addi	r3,r3,1
 8005a04:	19fffd1e 	bne	r3,r7,80059fc <__alt_data_end+0xfc0059fc>
 8005a08:	f800283a 	ret
 8005a0c:	2007883a 	mov	r3,r4
 8005a10:	300f883a 	mov	r7,r6
 8005a14:	003fc806 	br	8005938 <__alt_data_end+0xfc005938>

08005a18 <_Balloc>:
 8005a18:	20801317 	ldw	r2,76(r4)
 8005a1c:	defffc04 	addi	sp,sp,-16
 8005a20:	dc400115 	stw	r17,4(sp)
 8005a24:	dc000015 	stw	r16,0(sp)
 8005a28:	dfc00315 	stw	ra,12(sp)
 8005a2c:	dc800215 	stw	r18,8(sp)
 8005a30:	2023883a 	mov	r17,r4
 8005a34:	2821883a 	mov	r16,r5
 8005a38:	10000f26 	beq	r2,zero,8005a78 <_Balloc+0x60>
 8005a3c:	8407883a 	add	r3,r16,r16
 8005a40:	18c7883a 	add	r3,r3,r3
 8005a44:	10c7883a 	add	r3,r2,r3
 8005a48:	18800017 	ldw	r2,0(r3)
 8005a4c:	10001126 	beq	r2,zero,8005a94 <_Balloc+0x7c>
 8005a50:	11000017 	ldw	r4,0(r2)
 8005a54:	19000015 	stw	r4,0(r3)
 8005a58:	10000415 	stw	zero,16(r2)
 8005a5c:	10000315 	stw	zero,12(r2)
 8005a60:	dfc00317 	ldw	ra,12(sp)
 8005a64:	dc800217 	ldw	r18,8(sp)
 8005a68:	dc400117 	ldw	r17,4(sp)
 8005a6c:	dc000017 	ldw	r16,0(sp)
 8005a70:	dec00404 	addi	sp,sp,16
 8005a74:	f800283a 	ret
 8005a78:	01400104 	movi	r5,4
 8005a7c:	01800844 	movi	r6,33
 8005a80:	80082280 	call	8008228 <_calloc_r>
 8005a84:	88801315 	stw	r2,76(r17)
 8005a88:	103fec1e 	bne	r2,zero,8005a3c <__alt_data_end+0xfc005a3c>
 8005a8c:	0005883a 	mov	r2,zero
 8005a90:	003ff306 	br	8005a60 <__alt_data_end+0xfc005a60>
 8005a94:	01400044 	movi	r5,1
 8005a98:	2c24983a 	sll	r18,r5,r16
 8005a9c:	8809883a 	mov	r4,r17
 8005aa0:	91800144 	addi	r6,r18,5
 8005aa4:	318d883a 	add	r6,r6,r6
 8005aa8:	318d883a 	add	r6,r6,r6
 8005aac:	80082280 	call	8008228 <_calloc_r>
 8005ab0:	103ff626 	beq	r2,zero,8005a8c <__alt_data_end+0xfc005a8c>
 8005ab4:	14000115 	stw	r16,4(r2)
 8005ab8:	14800215 	stw	r18,8(r2)
 8005abc:	003fe606 	br	8005a58 <__alt_data_end+0xfc005a58>

08005ac0 <_Bfree>:
 8005ac0:	28000826 	beq	r5,zero,8005ae4 <_Bfree+0x24>
 8005ac4:	28c00117 	ldw	r3,4(r5)
 8005ac8:	20801317 	ldw	r2,76(r4)
 8005acc:	18c7883a 	add	r3,r3,r3
 8005ad0:	18c7883a 	add	r3,r3,r3
 8005ad4:	10c5883a 	add	r2,r2,r3
 8005ad8:	10c00017 	ldw	r3,0(r2)
 8005adc:	28c00015 	stw	r3,0(r5)
 8005ae0:	11400015 	stw	r5,0(r2)
 8005ae4:	f800283a 	ret

08005ae8 <__multadd>:
 8005ae8:	defffa04 	addi	sp,sp,-24
 8005aec:	dc000115 	stw	r16,4(sp)
 8005af0:	2c000417 	ldw	r16,16(r5)
 8005af4:	dc800315 	stw	r18,12(sp)
 8005af8:	dc400215 	stw	r17,8(sp)
 8005afc:	dfc00515 	stw	ra,20(sp)
 8005b00:	dcc00415 	stw	r19,16(sp)
 8005b04:	2823883a 	mov	r17,r5
 8005b08:	2025883a 	mov	r18,r4
 8005b0c:	2a400504 	addi	r9,r5,20
 8005b10:	0015883a 	mov	r10,zero
 8005b14:	4a000017 	ldw	r8,0(r9)
 8005b18:	4a400104 	addi	r9,r9,4
 8005b1c:	52800044 	addi	r10,r10,1
 8005b20:	40ffffcc 	andi	r3,r8,65535
 8005b24:	1987383a 	mul	r3,r3,r6
 8005b28:	4010d43a 	srli	r8,r8,16
 8005b2c:	19cf883a 	add	r7,r3,r7
 8005b30:	4191383a 	mul	r8,r8,r6
 8005b34:	3816d43a 	srli	r11,r7,16
 8005b38:	38ffffcc 	andi	r3,r7,65535
 8005b3c:	5a0f883a 	add	r7,r11,r8
 8005b40:	3810943a 	slli	r8,r7,16
 8005b44:	380ed43a 	srli	r7,r7,16
 8005b48:	40c7883a 	add	r3,r8,r3
 8005b4c:	48ffff15 	stw	r3,-4(r9)
 8005b50:	543ff016 	blt	r10,r16,8005b14 <__alt_data_end+0xfc005b14>
 8005b54:	38000926 	beq	r7,zero,8005b7c <__multadd+0x94>
 8005b58:	88800217 	ldw	r2,8(r17)
 8005b5c:	80800f0e 	bge	r16,r2,8005b9c <__multadd+0xb4>
 8005b60:	80800144 	addi	r2,r16,5
 8005b64:	1085883a 	add	r2,r2,r2
 8005b68:	1085883a 	add	r2,r2,r2
 8005b6c:	8885883a 	add	r2,r17,r2
 8005b70:	11c00015 	stw	r7,0(r2)
 8005b74:	84000044 	addi	r16,r16,1
 8005b78:	8c000415 	stw	r16,16(r17)
 8005b7c:	8805883a 	mov	r2,r17
 8005b80:	dfc00517 	ldw	ra,20(sp)
 8005b84:	dcc00417 	ldw	r19,16(sp)
 8005b88:	dc800317 	ldw	r18,12(sp)
 8005b8c:	dc400217 	ldw	r17,8(sp)
 8005b90:	dc000117 	ldw	r16,4(sp)
 8005b94:	dec00604 	addi	sp,sp,24
 8005b98:	f800283a 	ret
 8005b9c:	89400117 	ldw	r5,4(r17)
 8005ba0:	9009883a 	mov	r4,r18
 8005ba4:	d9c00015 	stw	r7,0(sp)
 8005ba8:	29400044 	addi	r5,r5,1
 8005bac:	8005a180 	call	8005a18 <_Balloc>
 8005bb0:	89800417 	ldw	r6,16(r17)
 8005bb4:	89400304 	addi	r5,r17,12
 8005bb8:	11000304 	addi	r4,r2,12
 8005bbc:	31800084 	addi	r6,r6,2
 8005bc0:	318d883a 	add	r6,r6,r6
 8005bc4:	318d883a 	add	r6,r6,r6
 8005bc8:	1027883a 	mov	r19,r2
 8005bcc:	80057bc0 	call	80057bc <memcpy>
 8005bd0:	89000117 	ldw	r4,4(r17)
 8005bd4:	90c01317 	ldw	r3,76(r18)
 8005bd8:	d9c00017 	ldw	r7,0(sp)
 8005bdc:	2109883a 	add	r4,r4,r4
 8005be0:	2109883a 	add	r4,r4,r4
 8005be4:	1907883a 	add	r3,r3,r4
 8005be8:	18800017 	ldw	r2,0(r3)
 8005bec:	88800015 	stw	r2,0(r17)
 8005bf0:	1c400015 	stw	r17,0(r3)
 8005bf4:	9823883a 	mov	r17,r19
 8005bf8:	003fd906 	br	8005b60 <__alt_data_end+0xfc005b60>

08005bfc <__s2b>:
 8005bfc:	defff904 	addi	sp,sp,-28
 8005c00:	dc400115 	stw	r17,4(sp)
 8005c04:	dc000015 	stw	r16,0(sp)
 8005c08:	2023883a 	mov	r17,r4
 8005c0c:	2821883a 	mov	r16,r5
 8005c10:	39000204 	addi	r4,r7,8
 8005c14:	01400244 	movi	r5,9
 8005c18:	dcc00315 	stw	r19,12(sp)
 8005c1c:	dc800215 	stw	r18,8(sp)
 8005c20:	dfc00615 	stw	ra,24(sp)
 8005c24:	dd400515 	stw	r21,20(sp)
 8005c28:	dd000415 	stw	r20,16(sp)
 8005c2c:	3825883a 	mov	r18,r7
 8005c30:	3027883a 	mov	r19,r6
 8005c34:	800a20c0 	call	800a20c <__divsi3>
 8005c38:	00c00044 	movi	r3,1
 8005c3c:	000b883a 	mov	r5,zero
 8005c40:	1880030e 	bge	r3,r2,8005c50 <__s2b+0x54>
 8005c44:	18c7883a 	add	r3,r3,r3
 8005c48:	29400044 	addi	r5,r5,1
 8005c4c:	18bffd16 	blt	r3,r2,8005c44 <__alt_data_end+0xfc005c44>
 8005c50:	8809883a 	mov	r4,r17
 8005c54:	8005a180 	call	8005a18 <_Balloc>
 8005c58:	d8c00717 	ldw	r3,28(sp)
 8005c5c:	10c00515 	stw	r3,20(r2)
 8005c60:	00c00044 	movi	r3,1
 8005c64:	10c00415 	stw	r3,16(r2)
 8005c68:	00c00244 	movi	r3,9
 8005c6c:	1cc0210e 	bge	r3,r19,8005cf4 <__s2b+0xf8>
 8005c70:	80eb883a 	add	r21,r16,r3
 8005c74:	a829883a 	mov	r20,r21
 8005c78:	84e1883a 	add	r16,r16,r19
 8005c7c:	a1c00007 	ldb	r7,0(r20)
 8005c80:	8809883a 	mov	r4,r17
 8005c84:	a5000044 	addi	r20,r20,1
 8005c88:	100b883a 	mov	r5,r2
 8005c8c:	01800284 	movi	r6,10
 8005c90:	39fff404 	addi	r7,r7,-48
 8005c94:	8005ae80 	call	8005ae8 <__multadd>
 8005c98:	a43ff81e 	bne	r20,r16,8005c7c <__alt_data_end+0xfc005c7c>
 8005c9c:	ace1883a 	add	r16,r21,r19
 8005ca0:	843ffe04 	addi	r16,r16,-8
 8005ca4:	9c800a0e 	bge	r19,r18,8005cd0 <__s2b+0xd4>
 8005ca8:	94e5c83a 	sub	r18,r18,r19
 8005cac:	84a5883a 	add	r18,r16,r18
 8005cb0:	81c00007 	ldb	r7,0(r16)
 8005cb4:	8809883a 	mov	r4,r17
 8005cb8:	84000044 	addi	r16,r16,1
 8005cbc:	100b883a 	mov	r5,r2
 8005cc0:	01800284 	movi	r6,10
 8005cc4:	39fff404 	addi	r7,r7,-48
 8005cc8:	8005ae80 	call	8005ae8 <__multadd>
 8005ccc:	84bff81e 	bne	r16,r18,8005cb0 <__alt_data_end+0xfc005cb0>
 8005cd0:	dfc00617 	ldw	ra,24(sp)
 8005cd4:	dd400517 	ldw	r21,20(sp)
 8005cd8:	dd000417 	ldw	r20,16(sp)
 8005cdc:	dcc00317 	ldw	r19,12(sp)
 8005ce0:	dc800217 	ldw	r18,8(sp)
 8005ce4:	dc400117 	ldw	r17,4(sp)
 8005ce8:	dc000017 	ldw	r16,0(sp)
 8005cec:	dec00704 	addi	sp,sp,28
 8005cf0:	f800283a 	ret
 8005cf4:	84000284 	addi	r16,r16,10
 8005cf8:	1827883a 	mov	r19,r3
 8005cfc:	003fe906 	br	8005ca4 <__alt_data_end+0xfc005ca4>

08005d00 <__hi0bits>:
 8005d00:	20bfffec 	andhi	r2,r4,65535
 8005d04:	1000141e 	bne	r2,zero,8005d58 <__hi0bits+0x58>
 8005d08:	2008943a 	slli	r4,r4,16
 8005d0c:	00800404 	movi	r2,16
 8005d10:	20ffc02c 	andhi	r3,r4,65280
 8005d14:	1800021e 	bne	r3,zero,8005d20 <__hi0bits+0x20>
 8005d18:	2008923a 	slli	r4,r4,8
 8005d1c:	10800204 	addi	r2,r2,8
 8005d20:	20fc002c 	andhi	r3,r4,61440
 8005d24:	1800021e 	bne	r3,zero,8005d30 <__hi0bits+0x30>
 8005d28:	2008913a 	slli	r4,r4,4
 8005d2c:	10800104 	addi	r2,r2,4
 8005d30:	20f0002c 	andhi	r3,r4,49152
 8005d34:	1800031e 	bne	r3,zero,8005d44 <__hi0bits+0x44>
 8005d38:	2109883a 	add	r4,r4,r4
 8005d3c:	10800084 	addi	r2,r2,2
 8005d40:	2109883a 	add	r4,r4,r4
 8005d44:	20000316 	blt	r4,zero,8005d54 <__hi0bits+0x54>
 8005d48:	2110002c 	andhi	r4,r4,16384
 8005d4c:	2000041e 	bne	r4,zero,8005d60 <__hi0bits+0x60>
 8005d50:	00800804 	movi	r2,32
 8005d54:	f800283a 	ret
 8005d58:	0005883a 	mov	r2,zero
 8005d5c:	003fec06 	br	8005d10 <__alt_data_end+0xfc005d10>
 8005d60:	10800044 	addi	r2,r2,1
 8005d64:	f800283a 	ret

08005d68 <__lo0bits>:
 8005d68:	20c00017 	ldw	r3,0(r4)
 8005d6c:	188001cc 	andi	r2,r3,7
 8005d70:	10000826 	beq	r2,zero,8005d94 <__lo0bits+0x2c>
 8005d74:	1880004c 	andi	r2,r3,1
 8005d78:	1000211e 	bne	r2,zero,8005e00 <__lo0bits+0x98>
 8005d7c:	1880008c 	andi	r2,r3,2
 8005d80:	1000211e 	bne	r2,zero,8005e08 <__lo0bits+0xa0>
 8005d84:	1806d0ba 	srli	r3,r3,2
 8005d88:	00800084 	movi	r2,2
 8005d8c:	20c00015 	stw	r3,0(r4)
 8005d90:	f800283a 	ret
 8005d94:	18bfffcc 	andi	r2,r3,65535
 8005d98:	10001326 	beq	r2,zero,8005de8 <__lo0bits+0x80>
 8005d9c:	0005883a 	mov	r2,zero
 8005da0:	19403fcc 	andi	r5,r3,255
 8005da4:	2800021e 	bne	r5,zero,8005db0 <__lo0bits+0x48>
 8005da8:	1806d23a 	srli	r3,r3,8
 8005dac:	10800204 	addi	r2,r2,8
 8005db0:	194003cc 	andi	r5,r3,15
 8005db4:	2800021e 	bne	r5,zero,8005dc0 <__lo0bits+0x58>
 8005db8:	1806d13a 	srli	r3,r3,4
 8005dbc:	10800104 	addi	r2,r2,4
 8005dc0:	194000cc 	andi	r5,r3,3
 8005dc4:	2800021e 	bne	r5,zero,8005dd0 <__lo0bits+0x68>
 8005dc8:	1806d0ba 	srli	r3,r3,2
 8005dcc:	10800084 	addi	r2,r2,2
 8005dd0:	1940004c 	andi	r5,r3,1
 8005dd4:	2800081e 	bne	r5,zero,8005df8 <__lo0bits+0x90>
 8005dd8:	1806d07a 	srli	r3,r3,1
 8005ddc:	1800051e 	bne	r3,zero,8005df4 <__lo0bits+0x8c>
 8005de0:	00800804 	movi	r2,32
 8005de4:	f800283a 	ret
 8005de8:	1806d43a 	srli	r3,r3,16
 8005dec:	00800404 	movi	r2,16
 8005df0:	003feb06 	br	8005da0 <__alt_data_end+0xfc005da0>
 8005df4:	10800044 	addi	r2,r2,1
 8005df8:	20c00015 	stw	r3,0(r4)
 8005dfc:	f800283a 	ret
 8005e00:	0005883a 	mov	r2,zero
 8005e04:	f800283a 	ret
 8005e08:	1806d07a 	srli	r3,r3,1
 8005e0c:	00800044 	movi	r2,1
 8005e10:	20c00015 	stw	r3,0(r4)
 8005e14:	f800283a 	ret

08005e18 <__i2b>:
 8005e18:	defffd04 	addi	sp,sp,-12
 8005e1c:	dc000015 	stw	r16,0(sp)
 8005e20:	04000044 	movi	r16,1
 8005e24:	dc400115 	stw	r17,4(sp)
 8005e28:	2823883a 	mov	r17,r5
 8005e2c:	800b883a 	mov	r5,r16
 8005e30:	dfc00215 	stw	ra,8(sp)
 8005e34:	8005a180 	call	8005a18 <_Balloc>
 8005e38:	14400515 	stw	r17,20(r2)
 8005e3c:	14000415 	stw	r16,16(r2)
 8005e40:	dfc00217 	ldw	ra,8(sp)
 8005e44:	dc400117 	ldw	r17,4(sp)
 8005e48:	dc000017 	ldw	r16,0(sp)
 8005e4c:	dec00304 	addi	sp,sp,12
 8005e50:	f800283a 	ret

08005e54 <__multiply>:
 8005e54:	defffa04 	addi	sp,sp,-24
 8005e58:	dcc00315 	stw	r19,12(sp)
 8005e5c:	dc800215 	stw	r18,8(sp)
 8005e60:	2cc00417 	ldw	r19,16(r5)
 8005e64:	34800417 	ldw	r18,16(r6)
 8005e68:	dd000415 	stw	r20,16(sp)
 8005e6c:	dc400115 	stw	r17,4(sp)
 8005e70:	dfc00515 	stw	ra,20(sp)
 8005e74:	dc000015 	stw	r16,0(sp)
 8005e78:	2829883a 	mov	r20,r5
 8005e7c:	3023883a 	mov	r17,r6
 8005e80:	9c807016 	blt	r19,r18,8006044 <__multiply+0x1f0>
 8005e84:	9005883a 	mov	r2,r18
 8005e88:	9825883a 	mov	r18,r19
 8005e8c:	1027883a 	mov	r19,r2
 8005e90:	a0800217 	ldw	r2,8(r20)
 8005e94:	94e1883a 	add	r16,r18,r19
 8005e98:	a1400117 	ldw	r5,4(r20)
 8005e9c:	1400010e 	bge	r2,r16,8005ea4 <__multiply+0x50>
 8005ea0:	29400044 	addi	r5,r5,1
 8005ea4:	8005a180 	call	8005a18 <_Balloc>
 8005ea8:	8417883a 	add	r11,r16,r16
 8005eac:	13000504 	addi	r12,r2,20
 8005eb0:	5ad7883a 	add	r11,r11,r11
 8005eb4:	62d7883a 	add	r11,r12,r11
 8005eb8:	6007883a 	mov	r3,r12
 8005ebc:	62c0032e 	bgeu	r12,r11,8005ecc <__multiply+0x78>
 8005ec0:	18000015 	stw	zero,0(r3)
 8005ec4:	18c00104 	addi	r3,r3,4
 8005ec8:	1afffd36 	bltu	r3,r11,8005ec0 <__alt_data_end+0xfc005ec0>
 8005ecc:	9ce7883a 	add	r19,r19,r19
 8005ed0:	94a5883a 	add	r18,r18,r18
 8005ed4:	89800504 	addi	r6,r17,20
 8005ed8:	9ce7883a 	add	r19,r19,r19
 8005edc:	a3800504 	addi	r14,r20,20
 8005ee0:	94a5883a 	add	r18,r18,r18
 8005ee4:	34db883a 	add	r13,r6,r19
 8005ee8:	7495883a 	add	r10,r14,r18
 8005eec:	3340422e 	bgeu	r6,r13,8005ff8 <__multiply+0x1a4>
 8005ef0:	34400017 	ldw	r17,0(r6)
 8005ef4:	8cbfffcc 	andi	r18,r17,65535
 8005ef8:	90001b26 	beq	r18,zero,8005f68 <__multiply+0x114>
 8005efc:	6013883a 	mov	r9,r12
 8005f00:	7023883a 	mov	r17,r14
 8005f04:	0011883a 	mov	r8,zero
 8005f08:	88c00017 	ldw	r3,0(r17)
 8005f0c:	4bc00017 	ldw	r15,0(r9)
 8005f10:	8c400104 	addi	r17,r17,4
 8005f14:	19ffffcc 	andi	r7,r3,65535
 8005f18:	3c8f383a 	mul	r7,r7,r18
 8005f1c:	1808d43a 	srli	r4,r3,16
 8005f20:	797fffcc 	andi	r5,r15,65535
 8005f24:	29cb883a 	add	r5,r5,r7
 8005f28:	2a0b883a 	add	r5,r5,r8
 8005f2c:	2489383a 	mul	r4,r4,r18
 8005f30:	7806d43a 	srli	r3,r15,16
 8005f34:	2810d43a 	srli	r8,r5,16
 8005f38:	297fffcc 	andi	r5,r5,65535
 8005f3c:	1907883a 	add	r3,r3,r4
 8005f40:	1a07883a 	add	r3,r3,r8
 8005f44:	1808943a 	slli	r4,r3,16
 8005f48:	480f883a 	mov	r7,r9
 8005f4c:	1810d43a 	srli	r8,r3,16
 8005f50:	214ab03a 	or	r5,r4,r5
 8005f54:	49400015 	stw	r5,0(r9)
 8005f58:	4a400104 	addi	r9,r9,4
 8005f5c:	8abfea36 	bltu	r17,r10,8005f08 <__alt_data_end+0xfc005f08>
 8005f60:	3a000115 	stw	r8,4(r7)
 8005f64:	34400017 	ldw	r17,0(r6)
 8005f68:	8822d43a 	srli	r17,r17,16
 8005f6c:	88001f26 	beq	r17,zero,8005fec <__multiply+0x198>
 8005f70:	60c00017 	ldw	r3,0(r12)
 8005f74:	7013883a 	mov	r9,r14
 8005f78:	601f883a 	mov	r15,r12
 8005f7c:	1811883a 	mov	r8,r3
 8005f80:	6027883a 	mov	r19,r12
 8005f84:	000f883a 	mov	r7,zero
 8005f88:	00000106 	br	8005f90 <__multiply+0x13c>
 8005f8c:	9027883a 	mov	r19,r18
 8005f90:	4940000b 	ldhu	r5,0(r9)
 8005f94:	4010d43a 	srli	r8,r8,16
 8005f98:	193fffcc 	andi	r4,r3,65535
 8005f9c:	2c4b383a 	mul	r5,r5,r17
 8005fa0:	7bc00104 	addi	r15,r15,4
 8005fa4:	4a400104 	addi	r9,r9,4
 8005fa8:	2a0b883a 	add	r5,r5,r8
 8005fac:	29cb883a 	add	r5,r5,r7
 8005fb0:	2806943a 	slli	r3,r5,16
 8005fb4:	9c800104 	addi	r18,r19,4
 8005fb8:	280ad43a 	srli	r5,r5,16
 8005fbc:	1908b03a 	or	r4,r3,r4
 8005fc0:	793fff15 	stw	r4,-4(r15)
 8005fc4:	48ffff17 	ldw	r3,-4(r9)
 8005fc8:	92000017 	ldw	r8,0(r18)
 8005fcc:	1806d43a 	srli	r3,r3,16
 8005fd0:	413fffcc 	andi	r4,r8,65535
 8005fd4:	1c47383a 	mul	r3,r3,r17
 8005fd8:	1907883a 	add	r3,r3,r4
 8005fdc:	1947883a 	add	r3,r3,r5
 8005fe0:	180ed43a 	srli	r7,r3,16
 8005fe4:	4abfe936 	bltu	r9,r10,8005f8c <__alt_data_end+0xfc005f8c>
 8005fe8:	98c00115 	stw	r3,4(r19)
 8005fec:	31800104 	addi	r6,r6,4
 8005ff0:	63000104 	addi	r12,r12,4
 8005ff4:	337fbe36 	bltu	r6,r13,8005ef0 <__alt_data_end+0xfc005ef0>
 8005ff8:	0400090e 	bge	zero,r16,8006020 <__multiply+0x1cc>
 8005ffc:	58ffff17 	ldw	r3,-4(r11)
 8006000:	5affff04 	addi	r11,r11,-4
 8006004:	18000326 	beq	r3,zero,8006014 <__multiply+0x1c0>
 8006008:	00000506 	br	8006020 <__multiply+0x1cc>
 800600c:	58c00017 	ldw	r3,0(r11)
 8006010:	1800031e 	bne	r3,zero,8006020 <__multiply+0x1cc>
 8006014:	843fffc4 	addi	r16,r16,-1
 8006018:	5affff04 	addi	r11,r11,-4
 800601c:	803ffb1e 	bne	r16,zero,800600c <__alt_data_end+0xfc00600c>
 8006020:	14000415 	stw	r16,16(r2)
 8006024:	dfc00517 	ldw	ra,20(sp)
 8006028:	dd000417 	ldw	r20,16(sp)
 800602c:	dcc00317 	ldw	r19,12(sp)
 8006030:	dc800217 	ldw	r18,8(sp)
 8006034:	dc400117 	ldw	r17,4(sp)
 8006038:	dc000017 	ldw	r16,0(sp)
 800603c:	dec00604 	addi	sp,sp,24
 8006040:	f800283a 	ret
 8006044:	3029883a 	mov	r20,r6
 8006048:	2823883a 	mov	r17,r5
 800604c:	003f9006 	br	8005e90 <__alt_data_end+0xfc005e90>

08006050 <__pow5mult>:
 8006050:	defffa04 	addi	sp,sp,-24
 8006054:	dcc00315 	stw	r19,12(sp)
 8006058:	dc800215 	stw	r18,8(sp)
 800605c:	dc000015 	stw	r16,0(sp)
 8006060:	dfc00515 	stw	ra,20(sp)
 8006064:	dd000415 	stw	r20,16(sp)
 8006068:	dc400115 	stw	r17,4(sp)
 800606c:	308000cc 	andi	r2,r6,3
 8006070:	3021883a 	mov	r16,r6
 8006074:	2027883a 	mov	r19,r4
 8006078:	2825883a 	mov	r18,r5
 800607c:	10002e1e 	bne	r2,zero,8006138 <__pow5mult+0xe8>
 8006080:	8021d0ba 	srai	r16,r16,2
 8006084:	80001a26 	beq	r16,zero,80060f0 <__pow5mult+0xa0>
 8006088:	9c401217 	ldw	r17,72(r19)
 800608c:	8800061e 	bne	r17,zero,80060a8 <__pow5mult+0x58>
 8006090:	00003406 	br	8006164 <__pow5mult+0x114>
 8006094:	8021d07a 	srai	r16,r16,1
 8006098:	80001526 	beq	r16,zero,80060f0 <__pow5mult+0xa0>
 800609c:	88800017 	ldw	r2,0(r17)
 80060a0:	10001c26 	beq	r2,zero,8006114 <__pow5mult+0xc4>
 80060a4:	1023883a 	mov	r17,r2
 80060a8:	80c0004c 	andi	r3,r16,1
 80060ac:	183ff926 	beq	r3,zero,8006094 <__alt_data_end+0xfc006094>
 80060b0:	900b883a 	mov	r5,r18
 80060b4:	880d883a 	mov	r6,r17
 80060b8:	9809883a 	mov	r4,r19
 80060bc:	8005e540 	call	8005e54 <__multiply>
 80060c0:	90001b26 	beq	r18,zero,8006130 <__pow5mult+0xe0>
 80060c4:	91c00117 	ldw	r7,4(r18)
 80060c8:	98c01317 	ldw	r3,76(r19)
 80060cc:	8021d07a 	srai	r16,r16,1
 80060d0:	39cf883a 	add	r7,r7,r7
 80060d4:	39cf883a 	add	r7,r7,r7
 80060d8:	19c7883a 	add	r3,r3,r7
 80060dc:	19000017 	ldw	r4,0(r3)
 80060e0:	91000015 	stw	r4,0(r18)
 80060e4:	1c800015 	stw	r18,0(r3)
 80060e8:	1025883a 	mov	r18,r2
 80060ec:	803feb1e 	bne	r16,zero,800609c <__alt_data_end+0xfc00609c>
 80060f0:	9005883a 	mov	r2,r18
 80060f4:	dfc00517 	ldw	ra,20(sp)
 80060f8:	dd000417 	ldw	r20,16(sp)
 80060fc:	dcc00317 	ldw	r19,12(sp)
 8006100:	dc800217 	ldw	r18,8(sp)
 8006104:	dc400117 	ldw	r17,4(sp)
 8006108:	dc000017 	ldw	r16,0(sp)
 800610c:	dec00604 	addi	sp,sp,24
 8006110:	f800283a 	ret
 8006114:	9809883a 	mov	r4,r19
 8006118:	880b883a 	mov	r5,r17
 800611c:	880d883a 	mov	r6,r17
 8006120:	8005e540 	call	8005e54 <__multiply>
 8006124:	88800015 	stw	r2,0(r17)
 8006128:	10000015 	stw	zero,0(r2)
 800612c:	003fdd06 	br	80060a4 <__alt_data_end+0xfc0060a4>
 8006130:	1025883a 	mov	r18,r2
 8006134:	003fd706 	br	8006094 <__alt_data_end+0xfc006094>
 8006138:	10bfffc4 	addi	r2,r2,-1
 800613c:	1085883a 	add	r2,r2,r2
 8006140:	00c20074 	movhi	r3,2049
 8006144:	18fd8804 	addi	r3,r3,-2528
 8006148:	1085883a 	add	r2,r2,r2
 800614c:	1885883a 	add	r2,r3,r2
 8006150:	11800017 	ldw	r6,0(r2)
 8006154:	000f883a 	mov	r7,zero
 8006158:	8005ae80 	call	8005ae8 <__multadd>
 800615c:	1025883a 	mov	r18,r2
 8006160:	003fc706 	br	8006080 <__alt_data_end+0xfc006080>
 8006164:	05000044 	movi	r20,1
 8006168:	9809883a 	mov	r4,r19
 800616c:	a00b883a 	mov	r5,r20
 8006170:	8005a180 	call	8005a18 <_Balloc>
 8006174:	1023883a 	mov	r17,r2
 8006178:	00809c44 	movi	r2,625
 800617c:	88800515 	stw	r2,20(r17)
 8006180:	8d000415 	stw	r20,16(r17)
 8006184:	9c401215 	stw	r17,72(r19)
 8006188:	88000015 	stw	zero,0(r17)
 800618c:	003fc606 	br	80060a8 <__alt_data_end+0xfc0060a8>

08006190 <__lshift>:
 8006190:	defff904 	addi	sp,sp,-28
 8006194:	dd000415 	stw	r20,16(sp)
 8006198:	dcc00315 	stw	r19,12(sp)
 800619c:	3029d17a 	srai	r20,r6,5
 80061a0:	2cc00417 	ldw	r19,16(r5)
 80061a4:	28800217 	ldw	r2,8(r5)
 80061a8:	dd400515 	stw	r21,20(sp)
 80061ac:	a4e7883a 	add	r19,r20,r19
 80061b0:	dc800215 	stw	r18,8(sp)
 80061b4:	dc400115 	stw	r17,4(sp)
 80061b8:	dc000015 	stw	r16,0(sp)
 80061bc:	dfc00615 	stw	ra,24(sp)
 80061c0:	9c000044 	addi	r16,r19,1
 80061c4:	2823883a 	mov	r17,r5
 80061c8:	302b883a 	mov	r21,r6
 80061cc:	2025883a 	mov	r18,r4
 80061d0:	29400117 	ldw	r5,4(r5)
 80061d4:	1400030e 	bge	r2,r16,80061e4 <__lshift+0x54>
 80061d8:	1085883a 	add	r2,r2,r2
 80061dc:	29400044 	addi	r5,r5,1
 80061e0:	143ffd16 	blt	r2,r16,80061d8 <__alt_data_end+0xfc0061d8>
 80061e4:	9009883a 	mov	r4,r18
 80061e8:	8005a180 	call	8005a18 <_Balloc>
 80061ec:	11c00504 	addi	r7,r2,20
 80061f0:	0500090e 	bge	zero,r20,8006218 <__lshift+0x88>
 80061f4:	3811883a 	mov	r8,r7
 80061f8:	0007883a 	mov	r3,zero
 80061fc:	40000015 	stw	zero,0(r8)
 8006200:	18c00044 	addi	r3,r3,1
 8006204:	42000104 	addi	r8,r8,4
 8006208:	1d3ffc1e 	bne	r3,r20,80061fc <__alt_data_end+0xfc0061fc>
 800620c:	18c7883a 	add	r3,r3,r3
 8006210:	18c7883a 	add	r3,r3,r3
 8006214:	38cf883a 	add	r7,r7,r3
 8006218:	89000417 	ldw	r4,16(r17)
 800621c:	88c00504 	addi	r3,r17,20
 8006220:	a98007cc 	andi	r6,r21,31
 8006224:	2109883a 	add	r4,r4,r4
 8006228:	2109883a 	add	r4,r4,r4
 800622c:	1909883a 	add	r4,r3,r4
 8006230:	30002326 	beq	r6,zero,80062c0 <__lshift+0x130>
 8006234:	01400804 	movi	r5,32
 8006238:	298bc83a 	sub	r5,r5,r6
 800623c:	0013883a 	mov	r9,zero
 8006240:	1a000017 	ldw	r8,0(r3)
 8006244:	3815883a 	mov	r10,r7
 8006248:	39c00104 	addi	r7,r7,4
 800624c:	4190983a 	sll	r8,r8,r6
 8006250:	18c00104 	addi	r3,r3,4
 8006254:	4a10b03a 	or	r8,r9,r8
 8006258:	3a3fff15 	stw	r8,-4(r7)
 800625c:	1a3fff17 	ldw	r8,-4(r3)
 8006260:	4152d83a 	srl	r9,r8,r5
 8006264:	193ff636 	bltu	r3,r4,8006240 <__alt_data_end+0xfc006240>
 8006268:	52400115 	stw	r9,4(r10)
 800626c:	48000126 	beq	r9,zero,8006274 <__lshift+0xe4>
 8006270:	9c000084 	addi	r16,r19,2
 8006274:	89000117 	ldw	r4,4(r17)
 8006278:	90c01317 	ldw	r3,76(r18)
 800627c:	843fffc4 	addi	r16,r16,-1
 8006280:	2109883a 	add	r4,r4,r4
 8006284:	2109883a 	add	r4,r4,r4
 8006288:	1907883a 	add	r3,r3,r4
 800628c:	19000017 	ldw	r4,0(r3)
 8006290:	14000415 	stw	r16,16(r2)
 8006294:	89000015 	stw	r4,0(r17)
 8006298:	1c400015 	stw	r17,0(r3)
 800629c:	dfc00617 	ldw	ra,24(sp)
 80062a0:	dd400517 	ldw	r21,20(sp)
 80062a4:	dd000417 	ldw	r20,16(sp)
 80062a8:	dcc00317 	ldw	r19,12(sp)
 80062ac:	dc800217 	ldw	r18,8(sp)
 80062b0:	dc400117 	ldw	r17,4(sp)
 80062b4:	dc000017 	ldw	r16,0(sp)
 80062b8:	dec00704 	addi	sp,sp,28
 80062bc:	f800283a 	ret
 80062c0:	19400017 	ldw	r5,0(r3)
 80062c4:	39c00104 	addi	r7,r7,4
 80062c8:	18c00104 	addi	r3,r3,4
 80062cc:	397fff15 	stw	r5,-4(r7)
 80062d0:	193ffb36 	bltu	r3,r4,80062c0 <__alt_data_end+0xfc0062c0>
 80062d4:	003fe706 	br	8006274 <__alt_data_end+0xfc006274>

080062d8 <__mcmp>:
 80062d8:	20800417 	ldw	r2,16(r4)
 80062dc:	28c00417 	ldw	r3,16(r5)
 80062e0:	10c5c83a 	sub	r2,r2,r3
 80062e4:	1000111e 	bne	r2,zero,800632c <__mcmp+0x54>
 80062e8:	18c7883a 	add	r3,r3,r3
 80062ec:	18c7883a 	add	r3,r3,r3
 80062f0:	21000504 	addi	r4,r4,20
 80062f4:	29400504 	addi	r5,r5,20
 80062f8:	20c5883a 	add	r2,r4,r3
 80062fc:	28cb883a 	add	r5,r5,r3
 8006300:	00000106 	br	8006308 <__mcmp+0x30>
 8006304:	20800a2e 	bgeu	r4,r2,8006330 <__mcmp+0x58>
 8006308:	10bfff04 	addi	r2,r2,-4
 800630c:	297fff04 	addi	r5,r5,-4
 8006310:	11800017 	ldw	r6,0(r2)
 8006314:	28c00017 	ldw	r3,0(r5)
 8006318:	30fffa26 	beq	r6,r3,8006304 <__alt_data_end+0xfc006304>
 800631c:	30c00236 	bltu	r6,r3,8006328 <__mcmp+0x50>
 8006320:	00800044 	movi	r2,1
 8006324:	f800283a 	ret
 8006328:	00bfffc4 	movi	r2,-1
 800632c:	f800283a 	ret
 8006330:	0005883a 	mov	r2,zero
 8006334:	f800283a 	ret

08006338 <__mdiff>:
 8006338:	defffb04 	addi	sp,sp,-20
 800633c:	dc000015 	stw	r16,0(sp)
 8006340:	2821883a 	mov	r16,r5
 8006344:	dcc00315 	stw	r19,12(sp)
 8006348:	300b883a 	mov	r5,r6
 800634c:	2027883a 	mov	r19,r4
 8006350:	8009883a 	mov	r4,r16
 8006354:	dc800215 	stw	r18,8(sp)
 8006358:	dfc00415 	stw	ra,16(sp)
 800635c:	dc400115 	stw	r17,4(sp)
 8006360:	3025883a 	mov	r18,r6
 8006364:	80062d80 	call	80062d8 <__mcmp>
 8006368:	10005226 	beq	r2,zero,80064b4 <__mdiff+0x17c>
 800636c:	10004c16 	blt	r2,zero,80064a0 <__mdiff+0x168>
 8006370:	0023883a 	mov	r17,zero
 8006374:	81400117 	ldw	r5,4(r16)
 8006378:	9809883a 	mov	r4,r19
 800637c:	8005a180 	call	8005a18 <_Balloc>
 8006380:	83400417 	ldw	r13,16(r16)
 8006384:	93800417 	ldw	r14,16(r18)
 8006388:	81000504 	addi	r4,r16,20
 800638c:	6b59883a 	add	r12,r13,r13
 8006390:	739d883a 	add	r14,r14,r14
 8006394:	6319883a 	add	r12,r12,r12
 8006398:	91800504 	addi	r6,r18,20
 800639c:	739d883a 	add	r14,r14,r14
 80063a0:	14400315 	stw	r17,12(r2)
 80063a4:	2319883a 	add	r12,r4,r12
 80063a8:	339d883a 	add	r14,r6,r14
 80063ac:	12400504 	addi	r9,r2,20
 80063b0:	0007883a 	mov	r3,zero
 80063b4:	22000017 	ldw	r8,0(r4)
 80063b8:	32800017 	ldw	r10,0(r6)
 80063bc:	4ac00104 	addi	r11,r9,4
 80063c0:	41ffffcc 	andi	r7,r8,65535
 80063c4:	38c7883a 	add	r3,r7,r3
 80063c8:	51ffffcc 	andi	r7,r10,65535
 80063cc:	19cfc83a 	sub	r7,r3,r7
 80063d0:	4010d43a 	srli	r8,r8,16
 80063d4:	5014d43a 	srli	r10,r10,16
 80063d8:	3807d43a 	srai	r3,r7,16
 80063dc:	39ffffcc 	andi	r7,r7,65535
 80063e0:	4291c83a 	sub	r8,r8,r10
 80063e4:	40c7883a 	add	r3,r8,r3
 80063e8:	1810943a 	slli	r8,r3,16
 80063ec:	31800104 	addi	r6,r6,4
 80063f0:	21000104 	addi	r4,r4,4
 80063f4:	41ceb03a 	or	r7,r8,r7
 80063f8:	49c00015 	stw	r7,0(r9)
 80063fc:	1807d43a 	srai	r3,r3,16
 8006400:	580b883a 	mov	r5,r11
 8006404:	5813883a 	mov	r9,r11
 8006408:	33bfea36 	bltu	r6,r14,80063b4 <__alt_data_end+0xfc0063b4>
 800640c:	2011883a 	mov	r8,r4
 8006410:	2300152e 	bgeu	r4,r12,8006468 <__mdiff+0x130>
 8006414:	21400017 	ldw	r5,0(r4)
 8006418:	4a400104 	addi	r9,r9,4
 800641c:	21000104 	addi	r4,r4,4
 8006420:	29ffffcc 	andi	r7,r5,65535
 8006424:	38c7883a 	add	r3,r7,r3
 8006428:	280ad43a 	srli	r5,r5,16
 800642c:	180dd43a 	srai	r6,r3,16
 8006430:	19ffffcc 	andi	r7,r3,65535
 8006434:	3147883a 	add	r3,r6,r5
 8006438:	180a943a 	slli	r5,r3,16
 800643c:	1807d43a 	srai	r3,r3,16
 8006440:	29ceb03a 	or	r7,r5,r7
 8006444:	49ffff15 	stw	r7,-4(r9)
 8006448:	233ff236 	bltu	r4,r12,8006414 <__alt_data_end+0xfc006414>
 800644c:	0206303a 	nor	r3,zero,r8
 8006450:	1b07883a 	add	r3,r3,r12
 8006454:	1806d0ba 	srli	r3,r3,2
 8006458:	18c00044 	addi	r3,r3,1
 800645c:	18c7883a 	add	r3,r3,r3
 8006460:	18c7883a 	add	r3,r3,r3
 8006464:	58cb883a 	add	r5,r11,r3
 8006468:	28ffff04 	addi	r3,r5,-4
 800646c:	3800041e 	bne	r7,zero,8006480 <__mdiff+0x148>
 8006470:	18ffff04 	addi	r3,r3,-4
 8006474:	19000017 	ldw	r4,0(r3)
 8006478:	6b7fffc4 	addi	r13,r13,-1
 800647c:	203ffc26 	beq	r4,zero,8006470 <__alt_data_end+0xfc006470>
 8006480:	13400415 	stw	r13,16(r2)
 8006484:	dfc00417 	ldw	ra,16(sp)
 8006488:	dcc00317 	ldw	r19,12(sp)
 800648c:	dc800217 	ldw	r18,8(sp)
 8006490:	dc400117 	ldw	r17,4(sp)
 8006494:	dc000017 	ldw	r16,0(sp)
 8006498:	dec00504 	addi	sp,sp,20
 800649c:	f800283a 	ret
 80064a0:	8005883a 	mov	r2,r16
 80064a4:	04400044 	movi	r17,1
 80064a8:	9021883a 	mov	r16,r18
 80064ac:	1025883a 	mov	r18,r2
 80064b0:	003fb006 	br	8006374 <__alt_data_end+0xfc006374>
 80064b4:	9809883a 	mov	r4,r19
 80064b8:	000b883a 	mov	r5,zero
 80064bc:	8005a180 	call	8005a18 <_Balloc>
 80064c0:	00c00044 	movi	r3,1
 80064c4:	10c00415 	stw	r3,16(r2)
 80064c8:	10000515 	stw	zero,20(r2)
 80064cc:	003fed06 	br	8006484 <__alt_data_end+0xfc006484>

080064d0 <__ulp>:
 80064d0:	295ffc2c 	andhi	r5,r5,32752
 80064d4:	00bf3034 	movhi	r2,64704
 80064d8:	2887883a 	add	r3,r5,r2
 80064dc:	00c0020e 	bge	zero,r3,80064e8 <__ulp+0x18>
 80064e0:	0005883a 	mov	r2,zero
 80064e4:	f800283a 	ret
 80064e8:	00c7c83a 	sub	r3,zero,r3
 80064ec:	180bd53a 	srai	r5,r3,20
 80064f0:	008004c4 	movi	r2,19
 80064f4:	11400a0e 	bge	r2,r5,8006520 <__ulp+0x50>
 80064f8:	00800c84 	movi	r2,50
 80064fc:	0007883a 	mov	r3,zero
 8006500:	11400516 	blt	r2,r5,8006518 <__ulp+0x48>
 8006504:	00800cc4 	movi	r2,51
 8006508:	114bc83a 	sub	r5,r2,r5
 800650c:	00800044 	movi	r2,1
 8006510:	1144983a 	sll	r2,r2,r5
 8006514:	f800283a 	ret
 8006518:	00800044 	movi	r2,1
 800651c:	f800283a 	ret
 8006520:	00800234 	movhi	r2,8
 8006524:	1147d83a 	sra	r3,r2,r5
 8006528:	0005883a 	mov	r2,zero
 800652c:	f800283a 	ret

08006530 <__b2d>:
 8006530:	defffa04 	addi	sp,sp,-24
 8006534:	dc000015 	stw	r16,0(sp)
 8006538:	24000417 	ldw	r16,16(r4)
 800653c:	dc400115 	stw	r17,4(sp)
 8006540:	24400504 	addi	r17,r4,20
 8006544:	8421883a 	add	r16,r16,r16
 8006548:	8421883a 	add	r16,r16,r16
 800654c:	8c21883a 	add	r16,r17,r16
 8006550:	dc800215 	stw	r18,8(sp)
 8006554:	84bfff17 	ldw	r18,-4(r16)
 8006558:	dd000415 	stw	r20,16(sp)
 800655c:	dcc00315 	stw	r19,12(sp)
 8006560:	9009883a 	mov	r4,r18
 8006564:	2829883a 	mov	r20,r5
 8006568:	dfc00515 	stw	ra,20(sp)
 800656c:	8005d000 	call	8005d00 <__hi0bits>
 8006570:	00c00804 	movi	r3,32
 8006574:	1887c83a 	sub	r3,r3,r2
 8006578:	a0c00015 	stw	r3,0(r20)
 800657c:	00c00284 	movi	r3,10
 8006580:	84ffff04 	addi	r19,r16,-4
 8006584:	18801216 	blt	r3,r2,80065d0 <__b2d+0xa0>
 8006588:	014002c4 	movi	r5,11
 800658c:	2889c83a 	sub	r4,r5,r2
 8006590:	9106d83a 	srl	r3,r18,r4
 8006594:	18cffc34 	orhi	r3,r3,16368
 8006598:	8cc0282e 	bgeu	r17,r19,800663c <__b2d+0x10c>
 800659c:	817ffe17 	ldw	r5,-8(r16)
 80065a0:	290ad83a 	srl	r5,r5,r4
 80065a4:	10800544 	addi	r2,r2,21
 80065a8:	9084983a 	sll	r2,r18,r2
 80065ac:	2884b03a 	or	r2,r5,r2
 80065b0:	dfc00517 	ldw	ra,20(sp)
 80065b4:	dd000417 	ldw	r20,16(sp)
 80065b8:	dcc00317 	ldw	r19,12(sp)
 80065bc:	dc800217 	ldw	r18,8(sp)
 80065c0:	dc400117 	ldw	r17,4(sp)
 80065c4:	dc000017 	ldw	r16,0(sp)
 80065c8:	dec00604 	addi	sp,sp,24
 80065cc:	f800283a 	ret
 80065d0:	113ffd44 	addi	r4,r2,-11
 80065d4:	8cc00f2e 	bgeu	r17,r19,8006614 <__b2d+0xe4>
 80065d8:	81bffe04 	addi	r6,r16,-8
 80065dc:	817ffe17 	ldw	r5,-8(r16)
 80065e0:	20001326 	beq	r4,zero,8006630 <__b2d+0x100>
 80065e4:	00c00ac4 	movi	r3,43
 80065e8:	1885c83a 	sub	r2,r3,r2
 80065ec:	2886d83a 	srl	r3,r5,r2
 80065f0:	9124983a 	sll	r18,r18,r4
 80065f4:	90e4b03a 	or	r18,r18,r3
 80065f8:	90cffc34 	orhi	r3,r18,16368
 80065fc:	8980112e 	bgeu	r17,r6,8006644 <__b2d+0x114>
 8006600:	81bffd17 	ldw	r6,-12(r16)
 8006604:	308cd83a 	srl	r6,r6,r2
 8006608:	2904983a 	sll	r2,r5,r4
 800660c:	1184b03a 	or	r2,r2,r6
 8006610:	003fe706 	br	80065b0 <__alt_data_end+0xfc0065b0>
 8006614:	20000526 	beq	r4,zero,800662c <__b2d+0xfc>
 8006618:	9124983a 	sll	r18,r18,r4
 800661c:	000d883a 	mov	r6,zero
 8006620:	000b883a 	mov	r5,zero
 8006624:	90cffc34 	orhi	r3,r18,16368
 8006628:	003ff706 	br	8006608 <__alt_data_end+0xfc006608>
 800662c:	000b883a 	mov	r5,zero
 8006630:	90cffc34 	orhi	r3,r18,16368
 8006634:	2805883a 	mov	r2,r5
 8006638:	003fdd06 	br	80065b0 <__alt_data_end+0xfc0065b0>
 800663c:	000b883a 	mov	r5,zero
 8006640:	003fd806 	br	80065a4 <__alt_data_end+0xfc0065a4>
 8006644:	000d883a 	mov	r6,zero
 8006648:	003fef06 	br	8006608 <__alt_data_end+0xfc006608>

0800664c <__d2b>:
 800664c:	defff704 	addi	sp,sp,-36
 8006650:	dc000215 	stw	r16,8(sp)
 8006654:	3021883a 	mov	r16,r6
 8006658:	dc400315 	stw	r17,12(sp)
 800665c:	8022907a 	slli	r17,r16,1
 8006660:	dd400715 	stw	r21,28(sp)
 8006664:	282b883a 	mov	r21,r5
 8006668:	01400044 	movi	r5,1
 800666c:	dd000615 	stw	r20,24(sp)
 8006670:	dcc00515 	stw	r19,20(sp)
 8006674:	dc800415 	stw	r18,16(sp)
 8006678:	dfc00815 	stw	ra,32(sp)
 800667c:	3829883a 	mov	r20,r7
 8006680:	dc800917 	ldw	r18,36(sp)
 8006684:	8822d57a 	srli	r17,r17,21
 8006688:	8005a180 	call	8005a18 <_Balloc>
 800668c:	1027883a 	mov	r19,r2
 8006690:	00800434 	movhi	r2,16
 8006694:	10bfffc4 	addi	r2,r2,-1
 8006698:	808c703a 	and	r6,r16,r2
 800669c:	88000126 	beq	r17,zero,80066a4 <__d2b+0x58>
 80066a0:	31800434 	orhi	r6,r6,16
 80066a4:	d9800015 	stw	r6,0(sp)
 80066a8:	a8001f26 	beq	r21,zero,8006728 <__d2b+0xdc>
 80066ac:	d9000104 	addi	r4,sp,4
 80066b0:	dd400115 	stw	r21,4(sp)
 80066b4:	8005d680 	call	8005d68 <__lo0bits>
 80066b8:	d8c00017 	ldw	r3,0(sp)
 80066bc:	1000291e 	bne	r2,zero,8006764 <__d2b+0x118>
 80066c0:	d9000117 	ldw	r4,4(sp)
 80066c4:	99000515 	stw	r4,20(r19)
 80066c8:	1820c03a 	cmpne	r16,r3,zero
 80066cc:	84000044 	addi	r16,r16,1
 80066d0:	98c00615 	stw	r3,24(r19)
 80066d4:	9c000415 	stw	r16,16(r19)
 80066d8:	88001b1e 	bne	r17,zero,8006748 <__d2b+0xfc>
 80066dc:	800690ba 	slli	r3,r16,2
 80066e0:	10bef384 	addi	r2,r2,-1074
 80066e4:	a0800015 	stw	r2,0(r20)
 80066e8:	98c5883a 	add	r2,r19,r3
 80066ec:	11000417 	ldw	r4,16(r2)
 80066f0:	8020917a 	slli	r16,r16,5
 80066f4:	8005d000 	call	8005d00 <__hi0bits>
 80066f8:	8085c83a 	sub	r2,r16,r2
 80066fc:	90800015 	stw	r2,0(r18)
 8006700:	9805883a 	mov	r2,r19
 8006704:	dfc00817 	ldw	ra,32(sp)
 8006708:	dd400717 	ldw	r21,28(sp)
 800670c:	dd000617 	ldw	r20,24(sp)
 8006710:	dcc00517 	ldw	r19,20(sp)
 8006714:	dc800417 	ldw	r18,16(sp)
 8006718:	dc400317 	ldw	r17,12(sp)
 800671c:	dc000217 	ldw	r16,8(sp)
 8006720:	dec00904 	addi	sp,sp,36
 8006724:	f800283a 	ret
 8006728:	d809883a 	mov	r4,sp
 800672c:	8005d680 	call	8005d68 <__lo0bits>
 8006730:	d8c00017 	ldw	r3,0(sp)
 8006734:	04000044 	movi	r16,1
 8006738:	9c000415 	stw	r16,16(r19)
 800673c:	98c00515 	stw	r3,20(r19)
 8006740:	10800804 	addi	r2,r2,32
 8006744:	883fe526 	beq	r17,zero,80066dc <__alt_data_end+0xfc0066dc>
 8006748:	8c7ef344 	addi	r17,r17,-1075
 800674c:	88a3883a 	add	r17,r17,r2
 8006750:	00c00d44 	movi	r3,53
 8006754:	a4400015 	stw	r17,0(r20)
 8006758:	1885c83a 	sub	r2,r3,r2
 800675c:	90800015 	stw	r2,0(r18)
 8006760:	003fe706 	br	8006700 <__alt_data_end+0xfc006700>
 8006764:	01000804 	movi	r4,32
 8006768:	2089c83a 	sub	r4,r4,r2
 800676c:	1908983a 	sll	r4,r3,r4
 8006770:	d9400117 	ldw	r5,4(sp)
 8006774:	1886d83a 	srl	r3,r3,r2
 8006778:	2148b03a 	or	r4,r4,r5
 800677c:	99000515 	stw	r4,20(r19)
 8006780:	d8c00015 	stw	r3,0(sp)
 8006784:	003fd006 	br	80066c8 <__alt_data_end+0xfc0066c8>

08006788 <__ratio>:
 8006788:	defff904 	addi	sp,sp,-28
 800678c:	dc400315 	stw	r17,12(sp)
 8006790:	2823883a 	mov	r17,r5
 8006794:	d9400104 	addi	r5,sp,4
 8006798:	dfc00615 	stw	ra,24(sp)
 800679c:	dcc00515 	stw	r19,20(sp)
 80067a0:	dc800415 	stw	r18,16(sp)
 80067a4:	2027883a 	mov	r19,r4
 80067a8:	dc000215 	stw	r16,8(sp)
 80067ac:	80065300 	call	8006530 <__b2d>
 80067b0:	8809883a 	mov	r4,r17
 80067b4:	d80b883a 	mov	r5,sp
 80067b8:	1025883a 	mov	r18,r2
 80067bc:	1821883a 	mov	r16,r3
 80067c0:	80065300 	call	8006530 <__b2d>
 80067c4:	8a400417 	ldw	r9,16(r17)
 80067c8:	9a000417 	ldw	r8,16(r19)
 80067cc:	100d883a 	mov	r6,r2
 80067d0:	d8800017 	ldw	r2,0(sp)
 80067d4:	4251c83a 	sub	r8,r8,r9
 80067d8:	4012917a 	slli	r9,r8,5
 80067dc:	da000117 	ldw	r8,4(sp)
 80067e0:	4091c83a 	sub	r8,r8,r2
 80067e4:	4251883a 	add	r8,r8,r9
 80067e8:	02000d0e 	bge	zero,r8,8006820 <__ratio+0x98>
 80067ec:	4010953a 	slli	r8,r8,20
 80067f0:	4421883a 	add	r16,r8,r16
 80067f4:	9009883a 	mov	r4,r18
 80067f8:	800b883a 	mov	r5,r16
 80067fc:	180f883a 	mov	r7,r3
 8006800:	800ab680 	call	800ab68 <__divdf3>
 8006804:	dfc00617 	ldw	ra,24(sp)
 8006808:	dcc00517 	ldw	r19,20(sp)
 800680c:	dc800417 	ldw	r18,16(sp)
 8006810:	dc400317 	ldw	r17,12(sp)
 8006814:	dc000217 	ldw	r16,8(sp)
 8006818:	dec00704 	addi	sp,sp,28
 800681c:	f800283a 	ret
 8006820:	4010953a 	slli	r8,r8,20
 8006824:	1a07c83a 	sub	r3,r3,r8
 8006828:	003ff206 	br	80067f4 <__alt_data_end+0xfc0067f4>

0800682c <_mprec_log10>:
 800682c:	defffe04 	addi	sp,sp,-8
 8006830:	dc000015 	stw	r16,0(sp)
 8006834:	dfc00115 	stw	ra,4(sp)
 8006838:	008005c4 	movi	r2,23
 800683c:	2021883a 	mov	r16,r4
 8006840:	11000d0e 	bge	r2,r4,8006878 <_mprec_log10+0x4c>
 8006844:	0005883a 	mov	r2,zero
 8006848:	00cffc34 	movhi	r3,16368
 800684c:	843fffc4 	addi	r16,r16,-1
 8006850:	1009883a 	mov	r4,r2
 8006854:	180b883a 	mov	r5,r3
 8006858:	000d883a 	mov	r6,zero
 800685c:	01d00934 	movhi	r7,16420
 8006860:	800b6780 	call	800b678 <__muldf3>
 8006864:	803ff91e 	bne	r16,zero,800684c <__alt_data_end+0xfc00684c>
 8006868:	dfc00117 	ldw	ra,4(sp)
 800686c:	dc000017 	ldw	r16,0(sp)
 8006870:	dec00204 	addi	sp,sp,8
 8006874:	f800283a 	ret
 8006878:	202090fa 	slli	r16,r4,3
 800687c:	00820074 	movhi	r2,2049
 8006880:	10bd9f04 	addi	r2,r2,-2436
 8006884:	1421883a 	add	r16,r2,r16
 8006888:	80800017 	ldw	r2,0(r16)
 800688c:	80c00117 	ldw	r3,4(r16)
 8006890:	dfc00117 	ldw	ra,4(sp)
 8006894:	dc000017 	ldw	r16,0(sp)
 8006898:	dec00204 	addi	sp,sp,8
 800689c:	f800283a 	ret

080068a0 <__copybits>:
 80068a0:	297fffc4 	addi	r5,r5,-1
 80068a4:	280fd17a 	srai	r7,r5,5
 80068a8:	30c00417 	ldw	r3,16(r6)
 80068ac:	30800504 	addi	r2,r6,20
 80068b0:	39c00044 	addi	r7,r7,1
 80068b4:	18c7883a 	add	r3,r3,r3
 80068b8:	39cf883a 	add	r7,r7,r7
 80068bc:	18c7883a 	add	r3,r3,r3
 80068c0:	39cf883a 	add	r7,r7,r7
 80068c4:	10c7883a 	add	r3,r2,r3
 80068c8:	21cf883a 	add	r7,r4,r7
 80068cc:	10c00d2e 	bgeu	r2,r3,8006904 <__copybits+0x64>
 80068d0:	200b883a 	mov	r5,r4
 80068d4:	12000017 	ldw	r8,0(r2)
 80068d8:	29400104 	addi	r5,r5,4
 80068dc:	10800104 	addi	r2,r2,4
 80068e0:	2a3fff15 	stw	r8,-4(r5)
 80068e4:	10fffb36 	bltu	r2,r3,80068d4 <__alt_data_end+0xfc0068d4>
 80068e8:	1985c83a 	sub	r2,r3,r6
 80068ec:	10bffac4 	addi	r2,r2,-21
 80068f0:	1004d0ba 	srli	r2,r2,2
 80068f4:	10800044 	addi	r2,r2,1
 80068f8:	1085883a 	add	r2,r2,r2
 80068fc:	1085883a 	add	r2,r2,r2
 8006900:	2089883a 	add	r4,r4,r2
 8006904:	21c0032e 	bgeu	r4,r7,8006914 <__copybits+0x74>
 8006908:	20000015 	stw	zero,0(r4)
 800690c:	21000104 	addi	r4,r4,4
 8006910:	21fffd36 	bltu	r4,r7,8006908 <__alt_data_end+0xfc006908>
 8006914:	f800283a 	ret

08006918 <__any_on>:
 8006918:	20c00417 	ldw	r3,16(r4)
 800691c:	2805d17a 	srai	r2,r5,5
 8006920:	21000504 	addi	r4,r4,20
 8006924:	18800d0e 	bge	r3,r2,800695c <__any_on+0x44>
 8006928:	18c7883a 	add	r3,r3,r3
 800692c:	18c7883a 	add	r3,r3,r3
 8006930:	20c7883a 	add	r3,r4,r3
 8006934:	20c0192e 	bgeu	r4,r3,800699c <__any_on+0x84>
 8006938:	18bfff17 	ldw	r2,-4(r3)
 800693c:	18ffff04 	addi	r3,r3,-4
 8006940:	1000041e 	bne	r2,zero,8006954 <__any_on+0x3c>
 8006944:	20c0142e 	bgeu	r4,r3,8006998 <__any_on+0x80>
 8006948:	18ffff04 	addi	r3,r3,-4
 800694c:	19400017 	ldw	r5,0(r3)
 8006950:	283ffc26 	beq	r5,zero,8006944 <__alt_data_end+0xfc006944>
 8006954:	00800044 	movi	r2,1
 8006958:	f800283a 	ret
 800695c:	10c00a0e 	bge	r2,r3,8006988 <__any_on+0x70>
 8006960:	1085883a 	add	r2,r2,r2
 8006964:	1085883a 	add	r2,r2,r2
 8006968:	294007cc 	andi	r5,r5,31
 800696c:	2087883a 	add	r3,r4,r2
 8006970:	283ff026 	beq	r5,zero,8006934 <__alt_data_end+0xfc006934>
 8006974:	19800017 	ldw	r6,0(r3)
 8006978:	3144d83a 	srl	r2,r6,r5
 800697c:	114a983a 	sll	r5,r2,r5
 8006980:	29bff41e 	bne	r5,r6,8006954 <__alt_data_end+0xfc006954>
 8006984:	003feb06 	br	8006934 <__alt_data_end+0xfc006934>
 8006988:	1085883a 	add	r2,r2,r2
 800698c:	1085883a 	add	r2,r2,r2
 8006990:	2087883a 	add	r3,r4,r2
 8006994:	003fe706 	br	8006934 <__alt_data_end+0xfc006934>
 8006998:	f800283a 	ret
 800699c:	0005883a 	mov	r2,zero
 80069a0:	f800283a 	ret

080069a4 <__fpclassifyd>:
 80069a4:	00a00034 	movhi	r2,32768
 80069a8:	10bfffc4 	addi	r2,r2,-1
 80069ac:	2884703a 	and	r2,r5,r2
 80069b0:	10000726 	beq	r2,zero,80069d0 <__fpclassifyd+0x2c>
 80069b4:	00fffc34 	movhi	r3,65520
 80069b8:	019ff834 	movhi	r6,32736
 80069bc:	28c7883a 	add	r3,r5,r3
 80069c0:	31bfffc4 	addi	r6,r6,-1
 80069c4:	30c00536 	bltu	r6,r3,80069dc <__fpclassifyd+0x38>
 80069c8:	00800104 	movi	r2,4
 80069cc:	f800283a 	ret
 80069d0:	2000021e 	bne	r4,zero,80069dc <__fpclassifyd+0x38>
 80069d4:	00800084 	movi	r2,2
 80069d8:	f800283a 	ret
 80069dc:	00dffc34 	movhi	r3,32752
 80069e0:	019ff834 	movhi	r6,32736
 80069e4:	28cb883a 	add	r5,r5,r3
 80069e8:	31bfffc4 	addi	r6,r6,-1
 80069ec:	317ff62e 	bgeu	r6,r5,80069c8 <__alt_data_end+0xfc0069c8>
 80069f0:	01400434 	movhi	r5,16
 80069f4:	297fffc4 	addi	r5,r5,-1
 80069f8:	28800236 	bltu	r5,r2,8006a04 <__fpclassifyd+0x60>
 80069fc:	008000c4 	movi	r2,3
 8006a00:	f800283a 	ret
 8006a04:	10c00226 	beq	r2,r3,8006a10 <__fpclassifyd+0x6c>
 8006a08:	0005883a 	mov	r2,zero
 8006a0c:	f800283a 	ret
 8006a10:	2005003a 	cmpeq	r2,r4,zero
 8006a14:	f800283a 	ret

08006a18 <_sbrk_r>:
 8006a18:	defffd04 	addi	sp,sp,-12
 8006a1c:	dc000015 	stw	r16,0(sp)
 8006a20:	04020074 	movhi	r16,2049
 8006a24:	dc400115 	stw	r17,4(sp)
 8006a28:	840bbe04 	addi	r16,r16,12024
 8006a2c:	2023883a 	mov	r17,r4
 8006a30:	2809883a 	mov	r4,r5
 8006a34:	dfc00215 	stw	ra,8(sp)
 8006a38:	80000015 	stw	zero,0(r16)
 8006a3c:	800d0780 	call	800d078 <sbrk>
 8006a40:	00ffffc4 	movi	r3,-1
 8006a44:	10c00526 	beq	r2,r3,8006a5c <_sbrk_r+0x44>
 8006a48:	dfc00217 	ldw	ra,8(sp)
 8006a4c:	dc400117 	ldw	r17,4(sp)
 8006a50:	dc000017 	ldw	r16,0(sp)
 8006a54:	dec00304 	addi	sp,sp,12
 8006a58:	f800283a 	ret
 8006a5c:	80c00017 	ldw	r3,0(r16)
 8006a60:	183ff926 	beq	r3,zero,8006a48 <__alt_data_end+0xfc006a48>
 8006a64:	88c00015 	stw	r3,0(r17)
 8006a68:	003ff706 	br	8006a48 <__alt_data_end+0xfc006a48>

08006a6c <__sread>:
 8006a6c:	defffe04 	addi	sp,sp,-8
 8006a70:	dc000015 	stw	r16,0(sp)
 8006a74:	2821883a 	mov	r16,r5
 8006a78:	2940038f 	ldh	r5,14(r5)
 8006a7c:	dfc00115 	stw	ra,4(sp)
 8006a80:	8008ce40 	call	8008ce4 <_read_r>
 8006a84:	10000716 	blt	r2,zero,8006aa4 <__sread+0x38>
 8006a88:	80c01417 	ldw	r3,80(r16)
 8006a8c:	1887883a 	add	r3,r3,r2
 8006a90:	80c01415 	stw	r3,80(r16)
 8006a94:	dfc00117 	ldw	ra,4(sp)
 8006a98:	dc000017 	ldw	r16,0(sp)
 8006a9c:	dec00204 	addi	sp,sp,8
 8006aa0:	f800283a 	ret
 8006aa4:	80c0030b 	ldhu	r3,12(r16)
 8006aa8:	18fbffcc 	andi	r3,r3,61439
 8006aac:	80c0030d 	sth	r3,12(r16)
 8006ab0:	dfc00117 	ldw	ra,4(sp)
 8006ab4:	dc000017 	ldw	r16,0(sp)
 8006ab8:	dec00204 	addi	sp,sp,8
 8006abc:	f800283a 	ret

08006ac0 <__seofread>:
 8006ac0:	0005883a 	mov	r2,zero
 8006ac4:	f800283a 	ret

08006ac8 <__swrite>:
 8006ac8:	2880030b 	ldhu	r2,12(r5)
 8006acc:	defffb04 	addi	sp,sp,-20
 8006ad0:	dcc00315 	stw	r19,12(sp)
 8006ad4:	dc800215 	stw	r18,8(sp)
 8006ad8:	dc400115 	stw	r17,4(sp)
 8006adc:	dc000015 	stw	r16,0(sp)
 8006ae0:	dfc00415 	stw	ra,16(sp)
 8006ae4:	10c0400c 	andi	r3,r2,256
 8006ae8:	2821883a 	mov	r16,r5
 8006aec:	2027883a 	mov	r19,r4
 8006af0:	3025883a 	mov	r18,r6
 8006af4:	3823883a 	mov	r17,r7
 8006af8:	18000526 	beq	r3,zero,8006b10 <__swrite+0x48>
 8006afc:	2940038f 	ldh	r5,14(r5)
 8006b00:	000d883a 	mov	r6,zero
 8006b04:	01c00084 	movi	r7,2
 8006b08:	8008b2c0 	call	8008b2c <_lseek_r>
 8006b0c:	8080030b 	ldhu	r2,12(r16)
 8006b10:	8140038f 	ldh	r5,14(r16)
 8006b14:	10bbffcc 	andi	r2,r2,61439
 8006b18:	9809883a 	mov	r4,r19
 8006b1c:	900d883a 	mov	r6,r18
 8006b20:	880f883a 	mov	r7,r17
 8006b24:	8080030d 	sth	r2,12(r16)
 8006b28:	dfc00417 	ldw	ra,16(sp)
 8006b2c:	dcc00317 	ldw	r19,12(sp)
 8006b30:	dc800217 	ldw	r18,8(sp)
 8006b34:	dc400117 	ldw	r17,4(sp)
 8006b38:	dc000017 	ldw	r16,0(sp)
 8006b3c:	dec00504 	addi	sp,sp,20
 8006b40:	80081781 	jmpi	8008178 <_write_r>

08006b44 <__sseek>:
 8006b44:	defffe04 	addi	sp,sp,-8
 8006b48:	dc000015 	stw	r16,0(sp)
 8006b4c:	2821883a 	mov	r16,r5
 8006b50:	2940038f 	ldh	r5,14(r5)
 8006b54:	dfc00115 	stw	ra,4(sp)
 8006b58:	8008b2c0 	call	8008b2c <_lseek_r>
 8006b5c:	00ffffc4 	movi	r3,-1
 8006b60:	10c00826 	beq	r2,r3,8006b84 <__sseek+0x40>
 8006b64:	80c0030b 	ldhu	r3,12(r16)
 8006b68:	80801415 	stw	r2,80(r16)
 8006b6c:	18c40014 	ori	r3,r3,4096
 8006b70:	80c0030d 	sth	r3,12(r16)
 8006b74:	dfc00117 	ldw	ra,4(sp)
 8006b78:	dc000017 	ldw	r16,0(sp)
 8006b7c:	dec00204 	addi	sp,sp,8
 8006b80:	f800283a 	ret
 8006b84:	80c0030b 	ldhu	r3,12(r16)
 8006b88:	18fbffcc 	andi	r3,r3,61439
 8006b8c:	80c0030d 	sth	r3,12(r16)
 8006b90:	dfc00117 	ldw	ra,4(sp)
 8006b94:	dc000017 	ldw	r16,0(sp)
 8006b98:	dec00204 	addi	sp,sp,8
 8006b9c:	f800283a 	ret

08006ba0 <__sclose>:
 8006ba0:	2940038f 	ldh	r5,14(r5)
 8006ba4:	80081d41 	jmpi	80081d4 <_close_r>

08006ba8 <strcmp>:
 8006ba8:	2144b03a 	or	r2,r4,r5
 8006bac:	108000cc 	andi	r2,r2,3
 8006bb0:	1000171e 	bne	r2,zero,8006c10 <strcmp+0x68>
 8006bb4:	20800017 	ldw	r2,0(r4)
 8006bb8:	28c00017 	ldw	r3,0(r5)
 8006bbc:	10c0141e 	bne	r2,r3,8006c10 <strcmp+0x68>
 8006bc0:	027fbff4 	movhi	r9,65279
 8006bc4:	4a7fbfc4 	addi	r9,r9,-257
 8006bc8:	0086303a 	nor	r3,zero,r2
 8006bcc:	02202074 	movhi	r8,32897
 8006bd0:	1245883a 	add	r2,r2,r9
 8006bd4:	42202004 	addi	r8,r8,-32640
 8006bd8:	10c4703a 	and	r2,r2,r3
 8006bdc:	1204703a 	and	r2,r2,r8
 8006be0:	10000226 	beq	r2,zero,8006bec <strcmp+0x44>
 8006be4:	00001706 	br	8006c44 <strcmp+0x9c>
 8006be8:	1000161e 	bne	r2,zero,8006c44 <strcmp+0x9c>
 8006bec:	21000104 	addi	r4,r4,4
 8006bf0:	20c00017 	ldw	r3,0(r4)
 8006bf4:	29400104 	addi	r5,r5,4
 8006bf8:	29800017 	ldw	r6,0(r5)
 8006bfc:	1a4f883a 	add	r7,r3,r9
 8006c00:	00c4303a 	nor	r2,zero,r3
 8006c04:	3884703a 	and	r2,r7,r2
 8006c08:	1204703a 	and	r2,r2,r8
 8006c0c:	19bff626 	beq	r3,r6,8006be8 <__alt_data_end+0xfc006be8>
 8006c10:	20800007 	ldb	r2,0(r4)
 8006c14:	1000051e 	bne	r2,zero,8006c2c <strcmp+0x84>
 8006c18:	00000606 	br	8006c34 <strcmp+0x8c>
 8006c1c:	21000044 	addi	r4,r4,1
 8006c20:	20800007 	ldb	r2,0(r4)
 8006c24:	29400044 	addi	r5,r5,1
 8006c28:	10000226 	beq	r2,zero,8006c34 <strcmp+0x8c>
 8006c2c:	28c00007 	ldb	r3,0(r5)
 8006c30:	10fffa26 	beq	r2,r3,8006c1c <__alt_data_end+0xfc006c1c>
 8006c34:	20800003 	ldbu	r2,0(r4)
 8006c38:	28c00003 	ldbu	r3,0(r5)
 8006c3c:	10c5c83a 	sub	r2,r2,r3
 8006c40:	f800283a 	ret
 8006c44:	0005883a 	mov	r2,zero
 8006c48:	f800283a 	ret

08006c4c <strlen>:
 8006c4c:	208000cc 	andi	r2,r4,3
 8006c50:	10002026 	beq	r2,zero,8006cd4 <strlen+0x88>
 8006c54:	20800007 	ldb	r2,0(r4)
 8006c58:	10002026 	beq	r2,zero,8006cdc <strlen+0x90>
 8006c5c:	2005883a 	mov	r2,r4
 8006c60:	00000206 	br	8006c6c <strlen+0x20>
 8006c64:	10c00007 	ldb	r3,0(r2)
 8006c68:	18001826 	beq	r3,zero,8006ccc <strlen+0x80>
 8006c6c:	10800044 	addi	r2,r2,1
 8006c70:	10c000cc 	andi	r3,r2,3
 8006c74:	183ffb1e 	bne	r3,zero,8006c64 <__alt_data_end+0xfc006c64>
 8006c78:	10c00017 	ldw	r3,0(r2)
 8006c7c:	01ffbff4 	movhi	r7,65279
 8006c80:	39ffbfc4 	addi	r7,r7,-257
 8006c84:	00ca303a 	nor	r5,zero,r3
 8006c88:	01a02074 	movhi	r6,32897
 8006c8c:	19c7883a 	add	r3,r3,r7
 8006c90:	31a02004 	addi	r6,r6,-32640
 8006c94:	1946703a 	and	r3,r3,r5
 8006c98:	1986703a 	and	r3,r3,r6
 8006c9c:	1800091e 	bne	r3,zero,8006cc4 <strlen+0x78>
 8006ca0:	10800104 	addi	r2,r2,4
 8006ca4:	10c00017 	ldw	r3,0(r2)
 8006ca8:	19cb883a 	add	r5,r3,r7
 8006cac:	00c6303a 	nor	r3,zero,r3
 8006cb0:	28c6703a 	and	r3,r5,r3
 8006cb4:	1986703a 	and	r3,r3,r6
 8006cb8:	183ff926 	beq	r3,zero,8006ca0 <__alt_data_end+0xfc006ca0>
 8006cbc:	00000106 	br	8006cc4 <strlen+0x78>
 8006cc0:	10800044 	addi	r2,r2,1
 8006cc4:	10c00007 	ldb	r3,0(r2)
 8006cc8:	183ffd1e 	bne	r3,zero,8006cc0 <__alt_data_end+0xfc006cc0>
 8006ccc:	1105c83a 	sub	r2,r2,r4
 8006cd0:	f800283a 	ret
 8006cd4:	2005883a 	mov	r2,r4
 8006cd8:	003fe706 	br	8006c78 <__alt_data_end+0xfc006c78>
 8006cdc:	0005883a 	mov	r2,zero
 8006ce0:	f800283a 	ret

08006ce4 <__sprint_r.part.0>:
 8006ce4:	28801917 	ldw	r2,100(r5)
 8006ce8:	defff604 	addi	sp,sp,-40
 8006cec:	dd400515 	stw	r21,20(sp)
 8006cf0:	dcc00315 	stw	r19,12(sp)
 8006cf4:	dfc00915 	stw	ra,36(sp)
 8006cf8:	df000815 	stw	fp,32(sp)
 8006cfc:	ddc00715 	stw	r23,28(sp)
 8006d00:	dd800615 	stw	r22,24(sp)
 8006d04:	dd000415 	stw	r20,16(sp)
 8006d08:	dc800215 	stw	r18,8(sp)
 8006d0c:	dc400115 	stw	r17,4(sp)
 8006d10:	dc000015 	stw	r16,0(sp)
 8006d14:	1088000c 	andi	r2,r2,8192
 8006d18:	2827883a 	mov	r19,r5
 8006d1c:	302b883a 	mov	r21,r6
 8006d20:	10002d26 	beq	r2,zero,8006dd8 <__sprint_r.part.0+0xf4>
 8006d24:	30800217 	ldw	r2,8(r6)
 8006d28:	35800017 	ldw	r22,0(r6)
 8006d2c:	10002826 	beq	r2,zero,8006dd0 <__sprint_r.part.0+0xec>
 8006d30:	2029883a 	mov	r20,r4
 8006d34:	b5c00104 	addi	r23,r22,4
 8006d38:	04bfffc4 	movi	r18,-1
 8006d3c:	bc400017 	ldw	r17,0(r23)
 8006d40:	b4000017 	ldw	r16,0(r22)
 8006d44:	0039883a 	mov	fp,zero
 8006d48:	8822d0ba 	srli	r17,r17,2
 8006d4c:	04400316 	blt	zero,r17,8006d5c <__sprint_r.part.0+0x78>
 8006d50:	00001706 	br	8006db0 <__sprint_r.part.0+0xcc>
 8006d54:	84000104 	addi	r16,r16,4
 8006d58:	8f001526 	beq	r17,fp,8006db0 <__sprint_r.part.0+0xcc>
 8006d5c:	81400017 	ldw	r5,0(r16)
 8006d60:	a009883a 	mov	r4,r20
 8006d64:	980d883a 	mov	r6,r19
 8006d68:	80084000 	call	8008400 <_fputwc_r>
 8006d6c:	e7000044 	addi	fp,fp,1
 8006d70:	14bff81e 	bne	r2,r18,8006d54 <__alt_data_end+0xfc006d54>
 8006d74:	9005883a 	mov	r2,r18
 8006d78:	a8000215 	stw	zero,8(r21)
 8006d7c:	a8000115 	stw	zero,4(r21)
 8006d80:	dfc00917 	ldw	ra,36(sp)
 8006d84:	df000817 	ldw	fp,32(sp)
 8006d88:	ddc00717 	ldw	r23,28(sp)
 8006d8c:	dd800617 	ldw	r22,24(sp)
 8006d90:	dd400517 	ldw	r21,20(sp)
 8006d94:	dd000417 	ldw	r20,16(sp)
 8006d98:	dcc00317 	ldw	r19,12(sp)
 8006d9c:	dc800217 	ldw	r18,8(sp)
 8006da0:	dc400117 	ldw	r17,4(sp)
 8006da4:	dc000017 	ldw	r16,0(sp)
 8006da8:	dec00a04 	addi	sp,sp,40
 8006dac:	f800283a 	ret
 8006db0:	a8c00217 	ldw	r3,8(r21)
 8006db4:	8c63883a 	add	r17,r17,r17
 8006db8:	8c63883a 	add	r17,r17,r17
 8006dbc:	1c45c83a 	sub	r2,r3,r17
 8006dc0:	a8800215 	stw	r2,8(r21)
 8006dc4:	b5800204 	addi	r22,r22,8
 8006dc8:	bdc00204 	addi	r23,r23,8
 8006dcc:	103fdb1e 	bne	r2,zero,8006d3c <__alt_data_end+0xfc006d3c>
 8006dd0:	0005883a 	mov	r2,zero
 8006dd4:	003fe806 	br	8006d78 <__alt_data_end+0xfc006d78>
 8006dd8:	80086340 	call	8008634 <__sfvwrite_r>
 8006ddc:	003fe606 	br	8006d78 <__alt_data_end+0xfc006d78>

08006de0 <__sprint_r>:
 8006de0:	30c00217 	ldw	r3,8(r6)
 8006de4:	18000126 	beq	r3,zero,8006dec <__sprint_r+0xc>
 8006de8:	8006ce41 	jmpi	8006ce4 <__sprint_r.part.0>
 8006dec:	30000115 	stw	zero,4(r6)
 8006df0:	0005883a 	mov	r2,zero
 8006df4:	f800283a 	ret

08006df8 <___vfiprintf_internal_r>:
 8006df8:	defeca04 	addi	sp,sp,-1240
 8006dfc:	dd813215 	stw	r22,1224(sp)
 8006e00:	dd013015 	stw	r20,1216(sp)
 8006e04:	dfc13515 	stw	ra,1236(sp)
 8006e08:	df013415 	stw	fp,1232(sp)
 8006e0c:	ddc13315 	stw	r23,1228(sp)
 8006e10:	dd413115 	stw	r21,1220(sp)
 8006e14:	dcc12f15 	stw	r19,1212(sp)
 8006e18:	dc812e15 	stw	r18,1208(sp)
 8006e1c:	dc412d15 	stw	r17,1204(sp)
 8006e20:	dc012c15 	stw	r16,1200(sp)
 8006e24:	d9012015 	stw	r4,1152(sp)
 8006e28:	d9c12115 	stw	r7,1156(sp)
 8006e2c:	2829883a 	mov	r20,r5
 8006e30:	302d883a 	mov	r22,r6
 8006e34:	20000226 	beq	r4,zero,8006e40 <___vfiprintf_internal_r+0x48>
 8006e38:	20800e17 	ldw	r2,56(r4)
 8006e3c:	1001d326 	beq	r2,zero,800758c <___vfiprintf_internal_r+0x794>
 8006e40:	a0c0030b 	ldhu	r3,12(r20)
 8006e44:	1908000c 	andi	r4,r3,8192
 8006e48:	1805883a 	mov	r2,r3
 8006e4c:	2000071e 	bne	r4,zero,8006e6c <___vfiprintf_internal_r+0x74>
 8006e50:	a1001917 	ldw	r4,100(r20)
 8006e54:	18880014 	ori	r2,r3,8192
 8006e58:	00f7ffc4 	movi	r3,-8193
 8006e5c:	20c8703a 	and	r4,r4,r3
 8006e60:	a080030d 	sth	r2,12(r20)
 8006e64:	1007883a 	mov	r3,r2
 8006e68:	a1001915 	stw	r4,100(r20)
 8006e6c:	1100020c 	andi	r4,r2,8
 8006e70:	20018926 	beq	r4,zero,8007498 <___vfiprintf_internal_r+0x6a0>
 8006e74:	a1000417 	ldw	r4,16(r20)
 8006e78:	20018726 	beq	r4,zero,8007498 <___vfiprintf_internal_r+0x6a0>
 8006e7c:	1080068c 	andi	r2,r2,26
 8006e80:	01000284 	movi	r4,10
 8006e84:	11018d26 	beq	r2,r4,80074bc <___vfiprintf_internal_r+0x6c4>
 8006e88:	da810a04 	addi	r10,sp,1064
 8006e8c:	dac109c4 	addi	r11,sp,1063
 8006e90:	07020074 	movhi	fp,2049
 8006e94:	05c20074 	movhi	r23,2049
 8006e98:	da811e15 	stw	r10,1144(sp)
 8006e9c:	52d5c83a 	sub	r10,r10,r11
 8006ea0:	e73dd504 	addi	fp,fp,-2220
 8006ea4:	bdfdd104 	addi	r23,r23,-2236
 8006ea8:	dac11f15 	stw	r11,1148(sp)
 8006eac:	dec11a15 	stw	sp,1128(sp)
 8006eb0:	d8011c15 	stw	zero,1136(sp)
 8006eb4:	d8011b15 	stw	zero,1132(sp)
 8006eb8:	d8012615 	stw	zero,1176(sp)
 8006ebc:	d8012215 	stw	zero,1160(sp)
 8006ec0:	da812715 	stw	r10,1180(sp)
 8006ec4:	d811883a 	mov	r8,sp
 8006ec8:	b021883a 	mov	r16,r22
 8006ecc:	80800007 	ldb	r2,0(r16)
 8006ed0:	10039c26 	beq	r2,zero,8007d44 <___vfiprintf_internal_r+0xf4c>
 8006ed4:	01000944 	movi	r4,37
 8006ed8:	11039a26 	beq	r2,r4,8007d44 <___vfiprintf_internal_r+0xf4c>
 8006edc:	8005883a 	mov	r2,r16
 8006ee0:	00000106 	br	8006ee8 <___vfiprintf_internal_r+0xf0>
 8006ee4:	19000326 	beq	r3,r4,8006ef4 <___vfiprintf_internal_r+0xfc>
 8006ee8:	10800044 	addi	r2,r2,1
 8006eec:	10c00007 	ldb	r3,0(r2)
 8006ef0:	183ffc1e 	bne	r3,zero,8006ee4 <__alt_data_end+0xfc006ee4>
 8006ef4:	1425c83a 	sub	r18,r2,r16
 8006ef8:	1023883a 	mov	r17,r2
 8006efc:	90001026 	beq	r18,zero,8006f40 <___vfiprintf_internal_r+0x148>
 8006f00:	d8c11c17 	ldw	r3,1136(sp)
 8006f04:	d8811b17 	ldw	r2,1132(sp)
 8006f08:	44000015 	stw	r16,0(r8)
 8006f0c:	90c7883a 	add	r3,r18,r3
 8006f10:	10800044 	addi	r2,r2,1
 8006f14:	44800115 	stw	r18,4(r8)
 8006f18:	d8c11c15 	stw	r3,1136(sp)
 8006f1c:	d8811b15 	stw	r2,1132(sp)
 8006f20:	010001c4 	movi	r4,7
 8006f24:	2080750e 	bge	r4,r2,80070fc <___vfiprintf_internal_r+0x304>
 8006f28:	18039d1e 	bne	r3,zero,8007da0 <___vfiprintf_internal_r+0xfa8>
 8006f2c:	dac12217 	ldw	r11,1160(sp)
 8006f30:	d8011b15 	stw	zero,1132(sp)
 8006f34:	d811883a 	mov	r8,sp
 8006f38:	5c97883a 	add	r11,r11,r18
 8006f3c:	dac12215 	stw	r11,1160(sp)
 8006f40:	88800007 	ldb	r2,0(r17)
 8006f44:	1002e026 	beq	r2,zero,8007ac8 <___vfiprintf_internal_r+0xcd0>
 8006f48:	88c00047 	ldb	r3,1(r17)
 8006f4c:	8c000044 	addi	r16,r17,1
 8006f50:	d8011d85 	stb	zero,1142(sp)
 8006f54:	000d883a 	mov	r6,zero
 8006f58:	027fffc4 	movi	r9,-1
 8006f5c:	0027883a 	mov	r19,zero
 8006f60:	002b883a 	mov	r21,zero
 8006f64:	01001604 	movi	r4,88
 8006f68:	01400244 	movi	r5,9
 8006f6c:	03000a84 	movi	r12,42
 8006f70:	01c01b04 	movi	r7,108
 8006f74:	84000044 	addi	r16,r16,1
 8006f78:	18bff804 	addi	r2,r3,-32
 8006f7c:	20825f36 	bltu	r4,r2,80078fc <___vfiprintf_internal_r+0xb04>
 8006f80:	100490ba 	slli	r2,r2,2
 8006f84:	02820034 	movhi	r10,2048
 8006f88:	529be604 	addi	r10,r10,28568
 8006f8c:	1285883a 	add	r2,r2,r10
 8006f90:	10800017 	ldw	r2,0(r2)
 8006f94:	1000683a 	jmp	r2
 8006f98:	0800776c 	andhi	zero,at,477
 8006f9c:	080078fc 	xorhi	zero,at,483
 8006fa0:	080078fc 	xorhi	zero,at,483
 8006fa4:	080078f0 	cmpltui	zero,at,483
 8006fa8:	080078fc 	xorhi	zero,at,483
 8006fac:	080078fc 	xorhi	zero,at,483
 8006fb0:	080078fc 	xorhi	zero,at,483
 8006fb4:	080078fc 	xorhi	zero,at,483
 8006fb8:	080078fc 	xorhi	zero,at,483
 8006fbc:	080078fc 	xorhi	zero,at,483
 8006fc0:	080078c8 	cmpgei	zero,at,483
 8006fc4:	080078e4 	muli	zero,at,483
 8006fc8:	080078fc 	xorhi	zero,at,483
 8006fcc:	0800759c 	xori	zero,at,470
 8006fd0:	080076fc 	xorhi	zero,at,475
 8006fd4:	080078fc 	xorhi	zero,at,483
 8006fd8:	08007680 	call	800768 <__alt_mem_sdram-0x77ff898>
 8006fdc:	0800768c 	andi	zero,at,474
 8006fe0:	0800768c 	andi	zero,at,474
 8006fe4:	0800768c 	andi	zero,at,474
 8006fe8:	0800768c 	andi	zero,at,474
 8006fec:	0800768c 	andi	zero,at,474
 8006ff0:	0800768c 	andi	zero,at,474
 8006ff4:	0800768c 	andi	zero,at,474
 8006ff8:	0800768c 	andi	zero,at,474
 8006ffc:	0800768c 	andi	zero,at,474
 8007000:	080078fc 	xorhi	zero,at,483
 8007004:	080078fc 	xorhi	zero,at,483
 8007008:	080078fc 	xorhi	zero,at,483
 800700c:	080078fc 	xorhi	zero,at,483
 8007010:	080078fc 	xorhi	zero,at,483
 8007014:	080078fc 	xorhi	zero,at,483
 8007018:	080078fc 	xorhi	zero,at,483
 800701c:	080078fc 	xorhi	zero,at,483
 8007020:	080078fc 	xorhi	zero,at,483
 8007024:	080078fc 	xorhi	zero,at,483
 8007028:	080076b8 	rdprs	zero,at,474
 800702c:	080078fc 	xorhi	zero,at,483
 8007030:	080078fc 	xorhi	zero,at,483
 8007034:	080078fc 	xorhi	zero,at,483
 8007038:	080078fc 	xorhi	zero,at,483
 800703c:	080078fc 	xorhi	zero,at,483
 8007040:	080078fc 	xorhi	zero,at,483
 8007044:	080078fc 	xorhi	zero,at,483
 8007048:	080078fc 	xorhi	zero,at,483
 800704c:	080078fc 	xorhi	zero,at,483
 8007050:	080078fc 	xorhi	zero,at,483
 8007054:	0800714c 	andi	zero,at,453
 8007058:	080078fc 	xorhi	zero,at,483
 800705c:	080078fc 	xorhi	zero,at,483
 8007060:	080078fc 	xorhi	zero,at,483
 8007064:	080078fc 	xorhi	zero,at,483
 8007068:	080078fc 	xorhi	zero,at,483
 800706c:	08007110 	cmplti	zero,at,452
 8007070:	080078fc 	xorhi	zero,at,483
 8007074:	080078fc 	xorhi	zero,at,483
 8007078:	080075f8 	rdprs	zero,at,471
 800707c:	080078fc 	xorhi	zero,at,483
 8007080:	080078fc 	xorhi	zero,at,483
 8007084:	080078fc 	xorhi	zero,at,483
 8007088:	080078fc 	xorhi	zero,at,483
 800708c:	080078fc 	xorhi	zero,at,483
 8007090:	080078fc 	xorhi	zero,at,483
 8007094:	080078fc 	xorhi	zero,at,483
 8007098:	080078fc 	xorhi	zero,at,483
 800709c:	080078fc 	xorhi	zero,at,483
 80070a0:	080078fc 	xorhi	zero,at,483
 80070a4:	08007650 	cmplti	zero,at,473
 80070a8:	080077e8 	cmpgeui	zero,at,479
 80070ac:	080078fc 	xorhi	zero,at,483
 80070b0:	080078fc 	xorhi	zero,at,483
 80070b4:	080078fc 	xorhi	zero,at,483
 80070b8:	08007870 	cmpltui	zero,at,481
 80070bc:	080077e8 	cmpgeui	zero,at,479
 80070c0:	080078fc 	xorhi	zero,at,483
 80070c4:	080078fc 	xorhi	zero,at,483
 80070c8:	0800787c 	xorhi	zero,at,481
 80070cc:	080078fc 	xorhi	zero,at,483
 80070d0:	0800773c 	xorhi	zero,at,476
 80070d4:	08007150 	cmplti	zero,at,453
 80070d8:	08007824 	muli	zero,at,480
 80070dc:	08007864 	muli	zero,at,481
 80070e0:	080078fc 	xorhi	zero,at,483
 80070e4:	08007788 	cmpgei	zero,at,478
 80070e8:	080078fc 	xorhi	zero,at,483
 80070ec:	08007114 	ori	zero,at,452
 80070f0:	080078fc 	xorhi	zero,at,483
 80070f4:	080078fc 	xorhi	zero,at,483
 80070f8:	0800788c 	andi	zero,at,482
 80070fc:	42000204 	addi	r8,r8,8
 8007100:	dac12217 	ldw	r11,1160(sp)
 8007104:	5c97883a 	add	r11,r11,r18
 8007108:	dac12215 	stw	r11,1160(sp)
 800710c:	003f8c06 	br	8006f40 <__alt_data_end+0xfc006f40>
 8007110:	ad400414 	ori	r21,r21,16
 8007114:	a880080c 	andi	r2,r21,32
 8007118:	10012f1e 	bne	r2,zero,80075d8 <___vfiprintf_internal_r+0x7e0>
 800711c:	a880040c 	andi	r2,r21,16
 8007120:	1001ff1e 	bne	r2,zero,8007920 <___vfiprintf_internal_r+0xb28>
 8007124:	a880100c 	andi	r2,r21,64
 8007128:	1001fd26 	beq	r2,zero,8007920 <___vfiprintf_internal_r+0xb28>
 800712c:	da812117 	ldw	r10,1156(sp)
 8007130:	002d883a 	mov	r22,zero
 8007134:	00800044 	movi	r2,1
 8007138:	5480000b 	ldhu	r18,0(r10)
 800713c:	52800104 	addi	r10,r10,4
 8007140:	da812115 	stw	r10,1156(sp)
 8007144:	9009883a 	mov	r4,r18
 8007148:	00000a06 	br	8007174 <___vfiprintf_internal_r+0x37c>
 800714c:	ad400414 	ori	r21,r21,16
 8007150:	a880080c 	andi	r2,r21,32
 8007154:	10011426 	beq	r2,zero,80075a8 <___vfiprintf_internal_r+0x7b0>
 8007158:	da812117 	ldw	r10,1156(sp)
 800715c:	0005883a 	mov	r2,zero
 8007160:	54800017 	ldw	r18,0(r10)
 8007164:	55800117 	ldw	r22,4(r10)
 8007168:	52800204 	addi	r10,r10,8
 800716c:	da812115 	stw	r10,1156(sp)
 8007170:	9588b03a 	or	r4,r18,r22
 8007174:	d8011d85 	stb	zero,1142(sp)
 8007178:	4823883a 	mov	r17,r9
 800717c:	0019883a 	mov	r12,zero
 8007180:	48000216 	blt	r9,zero,800718c <___vfiprintf_internal_r+0x394>
 8007184:	00ffdfc4 	movi	r3,-129
 8007188:	a8ea703a 	and	r21,r21,r3
 800718c:	2002221e 	bne	r4,zero,8007a18 <___vfiprintf_internal_r+0xc20>
 8007190:	4802c726 	beq	r9,zero,8007cb0 <___vfiprintf_internal_r+0xeb8>
 8007194:	10803fcc 	andi	r2,r2,255
 8007198:	00c00044 	movi	r3,1
 800719c:	10c24426 	beq	r2,r3,8007ab0 <___vfiprintf_internal_r+0xcb8>
 80071a0:	00c00084 	movi	r3,2
 80071a4:	10c2cc26 	beq	r2,r3,8007cd8 <___vfiprintf_internal_r+0xee0>
 80071a8:	d8c10a04 	addi	r3,sp,1064
 80071ac:	9008d0fa 	srli	r4,r18,3
 80071b0:	b00a977a 	slli	r5,r22,29
 80071b4:	b02cd0fa 	srli	r22,r22,3
 80071b8:	948001cc 	andi	r18,r18,7
 80071bc:	90800c04 	addi	r2,r18,48
 80071c0:	18ffffc4 	addi	r3,r3,-1
 80071c4:	2924b03a 	or	r18,r5,r4
 80071c8:	18800005 	stb	r2,0(r3)
 80071cc:	9588b03a 	or	r4,r18,r22
 80071d0:	203ff61e 	bne	r4,zero,80071ac <__alt_data_end+0xfc0071ac>
 80071d4:	a900004c 	andi	r4,r21,1
 80071d8:	d8c12415 	stw	r3,1168(sp)
 80071dc:	2002fb1e 	bne	r4,zero,8007dcc <___vfiprintf_internal_r+0xfd4>
 80071e0:	da811e17 	ldw	r10,1144(sp)
 80071e4:	50e3c83a 	sub	r17,r10,r3
 80071e8:	8825883a 	mov	r18,r17
 80071ec:	8a40010e 	bge	r17,r9,80071f4 <___vfiprintf_internal_r+0x3fc>
 80071f0:	4825883a 	mov	r18,r9
 80071f4:	63003fcc 	andi	r12,r12,255
 80071f8:	6300201c 	xori	r12,r12,128
 80071fc:	633fe004 	addi	r12,r12,-128
 8007200:	60000126 	beq	r12,zero,8007208 <___vfiprintf_internal_r+0x410>
 8007204:	94800044 	addi	r18,r18,1
 8007208:	ab80008c 	andi	r14,r21,2
 800720c:	70000126 	beq	r14,zero,8007214 <___vfiprintf_internal_r+0x41c>
 8007210:	94800084 	addi	r18,r18,2
 8007214:	ad80210c 	andi	r22,r21,132
 8007218:	b001df1e 	bne	r22,zero,8007998 <___vfiprintf_internal_r+0xba0>
 800721c:	9c8fc83a 	sub	r7,r19,r18
 8007220:	01c1dd0e 	bge	zero,r7,8007998 <___vfiprintf_internal_r+0xba0>
 8007224:	03000404 	movi	r12,16
 8007228:	d8811c17 	ldw	r2,1136(sp)
 800722c:	61c3920e 	bge	r12,r7,8008078 <___vfiprintf_internal_r+0x1280>
 8007230:	02820074 	movhi	r10,2049
 8007234:	52bdd504 	addi	r10,r10,-2220
 8007238:	dc012915 	stw	r16,1188(sp)
 800723c:	d9811b17 	ldw	r6,1132(sp)
 8007240:	da812315 	stw	r10,1164(sp)
 8007244:	00c001c4 	movi	r3,7
 8007248:	da412515 	stw	r9,1172(sp)
 800724c:	db812815 	stw	r14,1184(sp)
 8007250:	3821883a 	mov	r16,r7
 8007254:	00000506 	br	800726c <___vfiprintf_internal_r+0x474>
 8007258:	31400084 	addi	r5,r6,2
 800725c:	42000204 	addi	r8,r8,8
 8007260:	200d883a 	mov	r6,r4
 8007264:	843ffc04 	addi	r16,r16,-16
 8007268:	64000d0e 	bge	r12,r16,80072a0 <___vfiprintf_internal_r+0x4a8>
 800726c:	10800404 	addi	r2,r2,16
 8007270:	31000044 	addi	r4,r6,1
 8007274:	47000015 	stw	fp,0(r8)
 8007278:	43000115 	stw	r12,4(r8)
 800727c:	d8811c15 	stw	r2,1136(sp)
 8007280:	d9011b15 	stw	r4,1132(sp)
 8007284:	193ff40e 	bge	r3,r4,8007258 <__alt_data_end+0xfc007258>
 8007288:	1001b51e 	bne	r2,zero,8007960 <___vfiprintf_internal_r+0xb68>
 800728c:	843ffc04 	addi	r16,r16,-16
 8007290:	000d883a 	mov	r6,zero
 8007294:	01400044 	movi	r5,1
 8007298:	d811883a 	mov	r8,sp
 800729c:	643ff316 	blt	r12,r16,800726c <__alt_data_end+0xfc00726c>
 80072a0:	800f883a 	mov	r7,r16
 80072a4:	da412517 	ldw	r9,1172(sp)
 80072a8:	db812817 	ldw	r14,1184(sp)
 80072ac:	dc012917 	ldw	r16,1188(sp)
 80072b0:	dac12317 	ldw	r11,1164(sp)
 80072b4:	3887883a 	add	r3,r7,r2
 80072b8:	41c00115 	stw	r7,4(r8)
 80072bc:	42c00015 	stw	r11,0(r8)
 80072c0:	d8c11c15 	stw	r3,1136(sp)
 80072c4:	d9411b15 	stw	r5,1132(sp)
 80072c8:	008001c4 	movi	r2,7
 80072cc:	11429316 	blt	r2,r5,8007d1c <___vfiprintf_internal_r+0xf24>
 80072d0:	d9011d87 	ldb	r4,1142(sp)
 80072d4:	42000204 	addi	r8,r8,8
 80072d8:	28800044 	addi	r2,r5,1
 80072dc:	2001b31e 	bne	r4,zero,80079ac <___vfiprintf_internal_r+0xbb4>
 80072e0:	70000c26 	beq	r14,zero,8007314 <___vfiprintf_internal_r+0x51c>
 80072e4:	d9011d04 	addi	r4,sp,1140
 80072e8:	18c00084 	addi	r3,r3,2
 80072ec:	41000015 	stw	r4,0(r8)
 80072f0:	01000084 	movi	r4,2
 80072f4:	41000115 	stw	r4,4(r8)
 80072f8:	d8c11c15 	stw	r3,1136(sp)
 80072fc:	d8811b15 	stw	r2,1132(sp)
 8007300:	010001c4 	movi	r4,7
 8007304:	20826516 	blt	r4,r2,8007c9c <___vfiprintf_internal_r+0xea4>
 8007308:	100b883a 	mov	r5,r2
 800730c:	42000204 	addi	r8,r8,8
 8007310:	10800044 	addi	r2,r2,1
 8007314:	01002004 	movi	r4,128
 8007318:	b1021a26 	beq	r22,r4,8007b84 <___vfiprintf_internal_r+0xd8c>
 800731c:	4c6dc83a 	sub	r22,r9,r17
 8007320:	0580230e 	bge	zero,r22,80073b0 <___vfiprintf_internal_r+0x5b8>
 8007324:	01c00404 	movi	r7,16
 8007328:	3d83300e 	bge	r7,r22,8007fec <___vfiprintf_internal_r+0x11f4>
 800732c:	00820074 	movhi	r2,2049
 8007330:	10bdd104 	addi	r2,r2,-2236
 8007334:	d8812315 	stw	r2,1164(sp)
 8007338:	030001c4 	movi	r12,7
 800733c:	00000506 	br	8007354 <___vfiprintf_internal_r+0x55c>
 8007340:	28800084 	addi	r2,r5,2
 8007344:	42000204 	addi	r8,r8,8
 8007348:	200b883a 	mov	r5,r4
 800734c:	b5bffc04 	addi	r22,r22,-16
 8007350:	3d800d0e 	bge	r7,r22,8007388 <___vfiprintf_internal_r+0x590>
 8007354:	18c00404 	addi	r3,r3,16
 8007358:	29000044 	addi	r4,r5,1
 800735c:	45c00015 	stw	r23,0(r8)
 8007360:	41c00115 	stw	r7,4(r8)
 8007364:	d8c11c15 	stw	r3,1136(sp)
 8007368:	d9011b15 	stw	r4,1132(sp)
 800736c:	613ff40e 	bge	r12,r4,8007340 <__alt_data_end+0xfc007340>
 8007370:	18019b1e 	bne	r3,zero,80079e0 <___vfiprintf_internal_r+0xbe8>
 8007374:	b5bffc04 	addi	r22,r22,-16
 8007378:	000b883a 	mov	r5,zero
 800737c:	00800044 	movi	r2,1
 8007380:	d811883a 	mov	r8,sp
 8007384:	3dbff316 	blt	r7,r22,8007354 <__alt_data_end+0xfc007354>
 8007388:	da812317 	ldw	r10,1164(sp)
 800738c:	1d87883a 	add	r3,r3,r22
 8007390:	45800115 	stw	r22,4(r8)
 8007394:	42800015 	stw	r10,0(r8)
 8007398:	d8c11c15 	stw	r3,1136(sp)
 800739c:	d8811b15 	stw	r2,1132(sp)
 80073a0:	010001c4 	movi	r4,7
 80073a4:	2081dd16 	blt	r4,r2,8007b1c <___vfiprintf_internal_r+0xd24>
 80073a8:	42000204 	addi	r8,r8,8
 80073ac:	10800044 	addi	r2,r2,1
 80073b0:	da812417 	ldw	r10,1168(sp)
 80073b4:	1c47883a 	add	r3,r3,r17
 80073b8:	44400115 	stw	r17,4(r8)
 80073bc:	42800015 	stw	r10,0(r8)
 80073c0:	d8c11c15 	stw	r3,1136(sp)
 80073c4:	d8811b15 	stw	r2,1132(sp)
 80073c8:	010001c4 	movi	r4,7
 80073cc:	2081dc0e 	bge	r4,r2,8007b40 <___vfiprintf_internal_r+0xd48>
 80073d0:	1802611e 	bne	r3,zero,8007d58 <___vfiprintf_internal_r+0xf60>
 80073d4:	d8011b15 	stw	zero,1132(sp)
 80073d8:	aac0010c 	andi	r11,r21,4
 80073dc:	58002726 	beq	r11,zero,800747c <___vfiprintf_internal_r+0x684>
 80073e0:	9ca3c83a 	sub	r17,r19,r18
 80073e4:	d811883a 	mov	r8,sp
 80073e8:	0443510e 	bge	zero,r17,8008130 <___vfiprintf_internal_r+0x1338>
 80073ec:	01c00404 	movi	r7,16
 80073f0:	3c43320e 	bge	r7,r17,80080bc <___vfiprintf_internal_r+0x12c4>
 80073f4:	00820074 	movhi	r2,2049
 80073f8:	10bdd504 	addi	r2,r2,-2220
 80073fc:	d9011b17 	ldw	r4,1132(sp)
 8007400:	d8812315 	stw	r2,1164(sp)
 8007404:	382d883a 	mov	r22,r7
 8007408:	054001c4 	movi	r21,7
 800740c:	00000506 	br	8007424 <___vfiprintf_internal_r+0x62c>
 8007410:	21400084 	addi	r5,r4,2
 8007414:	42000204 	addi	r8,r8,8
 8007418:	1009883a 	mov	r4,r2
 800741c:	8c7ffc04 	addi	r17,r17,-16
 8007420:	b4400d0e 	bge	r22,r17,8007458 <___vfiprintf_internal_r+0x660>
 8007424:	18c00404 	addi	r3,r3,16
 8007428:	20800044 	addi	r2,r4,1
 800742c:	47000015 	stw	fp,0(r8)
 8007430:	45800115 	stw	r22,4(r8)
 8007434:	d8c11c15 	stw	r3,1136(sp)
 8007438:	d8811b15 	stw	r2,1132(sp)
 800743c:	a8bff40e 	bge	r21,r2,8007410 <__alt_data_end+0xfc007410>
 8007440:	1801ac1e 	bne	r3,zero,8007af4 <___vfiprintf_internal_r+0xcfc>
 8007444:	8c7ffc04 	addi	r17,r17,-16
 8007448:	0009883a 	mov	r4,zero
 800744c:	01400044 	movi	r5,1
 8007450:	d811883a 	mov	r8,sp
 8007454:	b47ff316 	blt	r22,r17,8007424 <__alt_data_end+0xfc007424>
 8007458:	da812317 	ldw	r10,1164(sp)
 800745c:	1c47883a 	add	r3,r3,r17
 8007460:	44400115 	stw	r17,4(r8)
 8007464:	42800015 	stw	r10,0(r8)
 8007468:	d8c11c15 	stw	r3,1136(sp)
 800746c:	d9411b15 	stw	r5,1132(sp)
 8007470:	008001c4 	movi	r2,7
 8007474:	1141b70e 	bge	r2,r5,8007b54 <___vfiprintf_internal_r+0xd5c>
 8007478:	1802cf1e 	bne	r3,zero,8007fb8 <___vfiprintf_internal_r+0x11c0>
 800747c:	94c2ca16 	blt	r18,r19,8007fa8 <___vfiprintf_internal_r+0x11b0>
 8007480:	dac12217 	ldw	r11,1160(sp)
 8007484:	5c97883a 	add	r11,r11,r18
 8007488:	dac12215 	stw	r11,1160(sp)
 800748c:	d8011b15 	stw	zero,1132(sp)
 8007490:	d811883a 	mov	r8,sp
 8007494:	003e8d06 	br	8006ecc <__alt_data_end+0xfc006ecc>
 8007498:	d9012017 	ldw	r4,1152(sp)
 800749c:	a00b883a 	mov	r5,r20
 80074a0:	80026c00 	call	80026c0 <__swsetup_r>
 80074a4:	10002c1e 	bne	r2,zero,8007558 <___vfiprintf_internal_r+0x760>
 80074a8:	a0c0030b 	ldhu	r3,12(r20)
 80074ac:	01000284 	movi	r4,10
 80074b0:	1805883a 	mov	r2,r3
 80074b4:	1080068c 	andi	r2,r2,26
 80074b8:	113e731e 	bne	r2,r4,8006e88 <__alt_data_end+0xfc006e88>
 80074bc:	a080038b 	ldhu	r2,14(r20)
 80074c0:	113fffcc 	andi	r4,r2,65535
 80074c4:	2120001c 	xori	r4,r4,32768
 80074c8:	21200004 	addi	r4,r4,-32768
 80074cc:	203e6e16 	blt	r4,zero,8006e88 <__alt_data_end+0xfc006e88>
 80074d0:	a3001917 	ldw	r12,100(r20)
 80074d4:	a2c00717 	ldw	r11,28(r20)
 80074d8:	a2800917 	ldw	r10,36(r20)
 80074dc:	d9012017 	ldw	r4,1152(sp)
 80074e0:	d9c12117 	ldw	r7,1156(sp)
 80074e4:	02410004 	movi	r9,1024
 80074e8:	18ffff4c 	andi	r3,r3,65533
 80074ec:	da4b883a 	add	r5,sp,r9
 80074f0:	b00d883a 	mov	r6,r22
 80074f4:	d8c1030d 	sth	r3,1036(sp)
 80074f8:	db011915 	stw	r12,1124(sp)
 80074fc:	d881038d 	sth	r2,1038(sp)
 8007500:	dac10715 	stw	r11,1052(sp)
 8007504:	da810915 	stw	r10,1060(sp)
 8007508:	dec10015 	stw	sp,1024(sp)
 800750c:	dec10415 	stw	sp,1040(sp)
 8007510:	da410215 	stw	r9,1032(sp)
 8007514:	da410515 	stw	r9,1044(sp)
 8007518:	d8010615 	stw	zero,1048(sp)
 800751c:	8006df80 	call	8006df8 <___vfiprintf_internal_r>
 8007520:	1021883a 	mov	r16,r2
 8007524:	10000416 	blt	r2,zero,8007538 <___vfiprintf_internal_r+0x740>
 8007528:	d9012017 	ldw	r4,1152(sp)
 800752c:	d9410004 	addi	r5,sp,1024
 8007530:	80041180 	call	8004118 <_fflush_r>
 8007534:	1002fc1e 	bne	r2,zero,8008128 <___vfiprintf_internal_r+0x1330>
 8007538:	d881030b 	ldhu	r2,1036(sp)
 800753c:	1080100c 	andi	r2,r2,64
 8007540:	10000326 	beq	r2,zero,8007550 <___vfiprintf_internal_r+0x758>
 8007544:	a080030b 	ldhu	r2,12(r20)
 8007548:	10801014 	ori	r2,r2,64
 800754c:	a080030d 	sth	r2,12(r20)
 8007550:	8005883a 	mov	r2,r16
 8007554:	00000106 	br	800755c <___vfiprintf_internal_r+0x764>
 8007558:	00bfffc4 	movi	r2,-1
 800755c:	dfc13517 	ldw	ra,1236(sp)
 8007560:	df013417 	ldw	fp,1232(sp)
 8007564:	ddc13317 	ldw	r23,1228(sp)
 8007568:	dd813217 	ldw	r22,1224(sp)
 800756c:	dd413117 	ldw	r21,1220(sp)
 8007570:	dd013017 	ldw	r20,1216(sp)
 8007574:	dcc12f17 	ldw	r19,1212(sp)
 8007578:	dc812e17 	ldw	r18,1208(sp)
 800757c:	dc412d17 	ldw	r17,1204(sp)
 8007580:	dc012c17 	ldw	r16,1200(sp)
 8007584:	dec13604 	addi	sp,sp,1240
 8007588:	f800283a 	ret
 800758c:	80046c00 	call	80046c0 <__sinit>
 8007590:	003e2b06 	br	8006e40 <__alt_data_end+0xfc006e40>
 8007594:	04e7c83a 	sub	r19,zero,r19
 8007598:	d8812115 	stw	r2,1156(sp)
 800759c:	ad400114 	ori	r21,r21,4
 80075a0:	80c00007 	ldb	r3,0(r16)
 80075a4:	003e7306 	br	8006f74 <__alt_data_end+0xfc006f74>
 80075a8:	a880040c 	andi	r2,r21,16
 80075ac:	1000e41e 	bne	r2,zero,8007940 <___vfiprintf_internal_r+0xb48>
 80075b0:	a880100c 	andi	r2,r21,64
 80075b4:	1000e226 	beq	r2,zero,8007940 <___vfiprintf_internal_r+0xb48>
 80075b8:	da812117 	ldw	r10,1156(sp)
 80075bc:	002d883a 	mov	r22,zero
 80075c0:	0005883a 	mov	r2,zero
 80075c4:	5480000b 	ldhu	r18,0(r10)
 80075c8:	52800104 	addi	r10,r10,4
 80075cc:	da812115 	stw	r10,1156(sp)
 80075d0:	9009883a 	mov	r4,r18
 80075d4:	003ee706 	br	8007174 <__alt_data_end+0xfc007174>
 80075d8:	da812117 	ldw	r10,1156(sp)
 80075dc:	00800044 	movi	r2,1
 80075e0:	54800017 	ldw	r18,0(r10)
 80075e4:	55800117 	ldw	r22,4(r10)
 80075e8:	52800204 	addi	r10,r10,8
 80075ec:	da812115 	stw	r10,1156(sp)
 80075f0:	9588b03a 	or	r4,r18,r22
 80075f4:	003edf06 	br	8007174 <__alt_data_end+0xfc007174>
 80075f8:	02c20074 	movhi	r11,2049
 80075fc:	5afd6b04 	addi	r11,r11,-2644
 8007600:	d9811d85 	stb	r6,1142(sp)
 8007604:	dac12615 	stw	r11,1176(sp)
 8007608:	a900080c 	andi	r4,r21,32
 800760c:	d8812117 	ldw	r2,1156(sp)
 8007610:	2000a526 	beq	r4,zero,80078a8 <___vfiprintf_internal_r+0xab0>
 8007614:	da812117 	ldw	r10,1156(sp)
 8007618:	14800017 	ldw	r18,0(r2)
 800761c:	15800117 	ldw	r22,4(r2)
 8007620:	52800204 	addi	r10,r10,8
 8007624:	da812115 	stw	r10,1156(sp)
 8007628:	a880004c 	andi	r2,r21,1
 800762c:	1001d926 	beq	r2,zero,8007d94 <___vfiprintf_internal_r+0xf9c>
 8007630:	9588b03a 	or	r4,r18,r22
 8007634:	20024426 	beq	r4,zero,8007f48 <___vfiprintf_internal_r+0x1150>
 8007638:	00800c04 	movi	r2,48
 800763c:	d8811d05 	stb	r2,1140(sp)
 8007640:	d8c11d45 	stb	r3,1141(sp)
 8007644:	ad400094 	ori	r21,r21,2
 8007648:	00800084 	movi	r2,2
 800764c:	003ec906 	br	8007174 <__alt_data_end+0xfc007174>
 8007650:	da812117 	ldw	r10,1156(sp)
 8007654:	04800044 	movi	r18,1
 8007658:	dac10004 	addi	r11,sp,1024
 800765c:	50800017 	ldw	r2,0(r10)
 8007660:	52800104 	addi	r10,r10,4
 8007664:	d8011d85 	stb	zero,1142(sp)
 8007668:	d8810005 	stb	r2,1024(sp)
 800766c:	da812115 	stw	r10,1156(sp)
 8007670:	9023883a 	mov	r17,r18
 8007674:	dac12415 	stw	r11,1168(sp)
 8007678:	0013883a 	mov	r9,zero
 800767c:	003ee206 	br	8007208 <__alt_data_end+0xfc007208>
 8007680:	ad402014 	ori	r21,r21,128
 8007684:	80c00007 	ldb	r3,0(r16)
 8007688:	003e3a06 	br	8006f74 <__alt_data_end+0xfc006f74>
 800768c:	8015883a 	mov	r10,r16
 8007690:	0027883a 	mov	r19,zero
 8007694:	18bff404 	addi	r2,r3,-48
 8007698:	50c00007 	ldb	r3,0(r10)
 800769c:	9cc002a4 	muli	r19,r19,10
 80076a0:	84000044 	addi	r16,r16,1
 80076a4:	8015883a 	mov	r10,r16
 80076a8:	98a7883a 	add	r19,r19,r2
 80076ac:	18bff404 	addi	r2,r3,-48
 80076b0:	28bff92e 	bgeu	r5,r2,8007698 <__alt_data_end+0xfc007698>
 80076b4:	003e3006 	br	8006f78 <__alt_data_end+0xfc006f78>
 80076b8:	ad400414 	ori	r21,r21,16
 80076bc:	d9811d85 	stb	r6,1142(sp)
 80076c0:	a880080c 	andi	r2,r21,32
 80076c4:	d8c12117 	ldw	r3,1156(sp)
 80076c8:	10004b26 	beq	r2,zero,80077f8 <___vfiprintf_internal_r+0xa00>
 80076cc:	da812117 	ldw	r10,1156(sp)
 80076d0:	18800117 	ldw	r2,4(r3)
 80076d4:	1c800017 	ldw	r18,0(r3)
 80076d8:	52800204 	addi	r10,r10,8
 80076dc:	da812115 	stw	r10,1156(sp)
 80076e0:	102d883a 	mov	r22,r2
 80076e4:	1001f116 	blt	r2,zero,8007eac <___vfiprintf_internal_r+0x10b4>
 80076e8:	db011d83 	ldbu	r12,1142(sp)
 80076ec:	4823883a 	mov	r17,r9
 80076f0:	00800044 	movi	r2,1
 80076f4:	9588b03a 	or	r4,r18,r22
 80076f8:	003ea106 	br	8007180 <__alt_data_end+0xfc007180>
 80076fc:	80c00007 	ldb	r3,0(r16)
 8007700:	82800044 	addi	r10,r16,1
 8007704:	1b027f26 	beq	r3,r12,8008104 <___vfiprintf_internal_r+0x130c>
 8007708:	18bff404 	addi	r2,r3,-48
 800770c:	5021883a 	mov	r16,r10
 8007710:	0013883a 	mov	r9,zero
 8007714:	28be1836 	bltu	r5,r2,8006f78 <__alt_data_end+0xfc006f78>
 8007718:	80c00007 	ldb	r3,0(r16)
 800771c:	4a4002a4 	muli	r9,r9,10
 8007720:	84000044 	addi	r16,r16,1
 8007724:	1253883a 	add	r9,r2,r9
 8007728:	18bff404 	addi	r2,r3,-48
 800772c:	28bffa2e 	bgeu	r5,r2,8007718 <__alt_data_end+0xfc007718>
 8007730:	483e110e 	bge	r9,zero,8006f78 <__alt_data_end+0xfc006f78>
 8007734:	027fffc4 	movi	r9,-1
 8007738:	003e0f06 	br	8006f78 <__alt_data_end+0xfc006f78>
 800773c:	d9811d85 	stb	r6,1142(sp)
 8007740:	a880080c 	andi	r2,r21,32
 8007744:	1001ee26 	beq	r2,zero,8007f00 <___vfiprintf_internal_r+0x1108>
 8007748:	da812117 	ldw	r10,1156(sp)
 800774c:	dac12217 	ldw	r11,1160(sp)
 8007750:	50800017 	ldw	r2,0(r10)
 8007754:	5807d7fa 	srai	r3,r11,31
 8007758:	52800104 	addi	r10,r10,4
 800775c:	da812115 	stw	r10,1156(sp)
 8007760:	12c00015 	stw	r11,0(r2)
 8007764:	10c00115 	stw	r3,4(r2)
 8007768:	003dd806 	br	8006ecc <__alt_data_end+0xfc006ecc>
 800776c:	30803fcc 	andi	r2,r6,255
 8007770:	1080201c 	xori	r2,r2,128
 8007774:	10bfe004 	addi	r2,r2,-128
 8007778:	1001df1e 	bne	r2,zero,8007ef8 <___vfiprintf_internal_r+0x1100>
 800777c:	01800804 	movi	r6,32
 8007780:	80c00007 	ldb	r3,0(r16)
 8007784:	003dfb06 	br	8006f74 <__alt_data_end+0xfc006f74>
 8007788:	da812117 	ldw	r10,1156(sp)
 800778c:	dac12117 	ldw	r11,1156(sp)
 8007790:	d8011d85 	stb	zero,1142(sp)
 8007794:	52800017 	ldw	r10,0(r10)
 8007798:	5d800104 	addi	r22,r11,4
 800779c:	da812415 	stw	r10,1168(sp)
 80077a0:	50023b26 	beq	r10,zero,8008090 <___vfiprintf_internal_r+0x1298>
 80077a4:	d9012417 	ldw	r4,1168(sp)
 80077a8:	48021f16 	blt	r9,zero,8008028 <___vfiprintf_internal_r+0x1230>
 80077ac:	480d883a 	mov	r6,r9
 80077b0:	000b883a 	mov	r5,zero
 80077b4:	da012a15 	stw	r8,1192(sp)
 80077b8:	da412b15 	stw	r9,1196(sp)
 80077bc:	80056d40 	call	80056d4 <memchr>
 80077c0:	da012a17 	ldw	r8,1192(sp)
 80077c4:	da412b17 	ldw	r9,1196(sp)
 80077c8:	10024726 	beq	r2,zero,80080e8 <___vfiprintf_internal_r+0x12f0>
 80077cc:	d8c12417 	ldw	r3,1168(sp)
 80077d0:	10e3c83a 	sub	r17,r2,r3
 80077d4:	4c41f616 	blt	r9,r17,8007fb0 <___vfiprintf_internal_r+0x11b8>
 80077d8:	db011d83 	ldbu	r12,1142(sp)
 80077dc:	dd812115 	stw	r22,1156(sp)
 80077e0:	0013883a 	mov	r9,zero
 80077e4:	003e8006 	br	80071e8 <__alt_data_end+0xfc0071e8>
 80077e8:	d9811d85 	stb	r6,1142(sp)
 80077ec:	a880080c 	andi	r2,r21,32
 80077f0:	d8c12117 	ldw	r3,1156(sp)
 80077f4:	103fb51e 	bne	r2,zero,80076cc <__alt_data_end+0xfc0076cc>
 80077f8:	a880040c 	andi	r2,r21,16
 80077fc:	10015e1e 	bne	r2,zero,8007d78 <___vfiprintf_internal_r+0xf80>
 8007800:	a880100c 	andi	r2,r21,64
 8007804:	10015c26 	beq	r2,zero,8007d78 <___vfiprintf_internal_r+0xf80>
 8007808:	1c80000f 	ldh	r18,0(r3)
 800780c:	da812117 	ldw	r10,1156(sp)
 8007810:	902dd7fa 	srai	r22,r18,31
 8007814:	52800104 	addi	r10,r10,4
 8007818:	da812115 	stw	r10,1156(sp)
 800781c:	b005883a 	mov	r2,r22
 8007820:	003fb006 	br	80076e4 <__alt_data_end+0xfc0076e4>
 8007824:	da812117 	ldw	r10,1156(sp)
 8007828:	00800c04 	movi	r2,48
 800782c:	02c20074 	movhi	r11,2049
 8007830:	54800017 	ldw	r18,0(r10)
 8007834:	d8811d05 	stb	r2,1140(sp)
 8007838:	52800104 	addi	r10,r10,4
 800783c:	00801e04 	movi	r2,120
 8007840:	5afd7004 	addi	r11,r11,-2624
 8007844:	d8811d45 	stb	r2,1141(sp)
 8007848:	002d883a 	mov	r22,zero
 800784c:	ad400094 	ori	r21,r21,2
 8007850:	da812115 	stw	r10,1156(sp)
 8007854:	dac12615 	stw	r11,1176(sp)
 8007858:	00800084 	movi	r2,2
 800785c:	9009883a 	mov	r4,r18
 8007860:	003e4406 	br	8007174 <__alt_data_end+0xfc007174>
 8007864:	ad400814 	ori	r21,r21,32
 8007868:	80c00007 	ldb	r3,0(r16)
 800786c:	003dc106 	br	8006f74 <__alt_data_end+0xfc006f74>
 8007870:	ad401014 	ori	r21,r21,64
 8007874:	80c00007 	ldb	r3,0(r16)
 8007878:	003dbe06 	br	8006f74 <__alt_data_end+0xfc006f74>
 800787c:	80c00007 	ldb	r3,0(r16)
 8007880:	19c1de26 	beq	r3,r7,8007ffc <___vfiprintf_internal_r+0x1204>
 8007884:	ad400414 	ori	r21,r21,16
 8007888:	003dba06 	br	8006f74 <__alt_data_end+0xfc006f74>
 800788c:	00820074 	movhi	r2,2049
 8007890:	10bd7004 	addi	r2,r2,-2624
 8007894:	d8812615 	stw	r2,1176(sp)
 8007898:	d9811d85 	stb	r6,1142(sp)
 800789c:	a900080c 	andi	r4,r21,32
 80078a0:	d8812117 	ldw	r2,1156(sp)
 80078a4:	203f5b1e 	bne	r4,zero,8007614 <__alt_data_end+0xfc007614>
 80078a8:	a900040c 	andi	r4,r21,16
 80078ac:	2001a826 	beq	r4,zero,8007f50 <___vfiprintf_internal_r+0x1158>
 80078b0:	dac12117 	ldw	r11,1156(sp)
 80078b4:	14800017 	ldw	r18,0(r2)
 80078b8:	002d883a 	mov	r22,zero
 80078bc:	5ac00104 	addi	r11,r11,4
 80078c0:	dac12115 	stw	r11,1156(sp)
 80078c4:	003f5806 	br	8007628 <__alt_data_end+0xfc007628>
 80078c8:	da812117 	ldw	r10,1156(sp)
 80078cc:	54c00017 	ldw	r19,0(r10)
 80078d0:	50800104 	addi	r2,r10,4
 80078d4:	983f2f16 	blt	r19,zero,8007594 <__alt_data_end+0xfc007594>
 80078d8:	d8812115 	stw	r2,1156(sp)
 80078dc:	80c00007 	ldb	r3,0(r16)
 80078e0:	003da406 	br	8006f74 <__alt_data_end+0xfc006f74>
 80078e4:	01800ac4 	movi	r6,43
 80078e8:	80c00007 	ldb	r3,0(r16)
 80078ec:	003da106 	br	8006f74 <__alt_data_end+0xfc006f74>
 80078f0:	ad400054 	ori	r21,r21,1
 80078f4:	80c00007 	ldb	r3,0(r16)
 80078f8:	003d9e06 	br	8006f74 <__alt_data_end+0xfc006f74>
 80078fc:	d9811d85 	stb	r6,1142(sp)
 8007900:	18007126 	beq	r3,zero,8007ac8 <___vfiprintf_internal_r+0xcd0>
 8007904:	04800044 	movi	r18,1
 8007908:	d8c10005 	stb	r3,1024(sp)
 800790c:	d8c10004 	addi	r3,sp,1024
 8007910:	d8011d85 	stb	zero,1142(sp)
 8007914:	9023883a 	mov	r17,r18
 8007918:	d8c12415 	stw	r3,1168(sp)
 800791c:	003f5606 	br	8007678 <__alt_data_end+0xfc007678>
 8007920:	dac12117 	ldw	r11,1156(sp)
 8007924:	002d883a 	mov	r22,zero
 8007928:	00800044 	movi	r2,1
 800792c:	5c800017 	ldw	r18,0(r11)
 8007930:	5ac00104 	addi	r11,r11,4
 8007934:	dac12115 	stw	r11,1156(sp)
 8007938:	9009883a 	mov	r4,r18
 800793c:	003e0d06 	br	8007174 <__alt_data_end+0xfc007174>
 8007940:	dac12117 	ldw	r11,1156(sp)
 8007944:	002d883a 	mov	r22,zero
 8007948:	0005883a 	mov	r2,zero
 800794c:	5c800017 	ldw	r18,0(r11)
 8007950:	5ac00104 	addi	r11,r11,4
 8007954:	dac12115 	stw	r11,1156(sp)
 8007958:	9009883a 	mov	r4,r18
 800795c:	003e0506 	br	8007174 <__alt_data_end+0xfc007174>
 8007960:	d9012017 	ldw	r4,1152(sp)
 8007964:	a00b883a 	mov	r5,r20
 8007968:	d9811a04 	addi	r6,sp,1128
 800796c:	d8c12a15 	stw	r3,1192(sp)
 8007970:	db012b15 	stw	r12,1196(sp)
 8007974:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007978:	d8c12a17 	ldw	r3,1192(sp)
 800797c:	db012b17 	ldw	r12,1196(sp)
 8007980:	1000571e 	bne	r2,zero,8007ae0 <___vfiprintf_internal_r+0xce8>
 8007984:	d9811b17 	ldw	r6,1132(sp)
 8007988:	d8811c17 	ldw	r2,1136(sp)
 800798c:	d811883a 	mov	r8,sp
 8007990:	31400044 	addi	r5,r6,1
 8007994:	003e3306 	br	8007264 <__alt_data_end+0xfc007264>
 8007998:	d9411b17 	ldw	r5,1132(sp)
 800799c:	d8c11c17 	ldw	r3,1136(sp)
 80079a0:	28800044 	addi	r2,r5,1
 80079a4:	d9011d87 	ldb	r4,1142(sp)
 80079a8:	203e4d26 	beq	r4,zero,80072e0 <__alt_data_end+0xfc0072e0>
 80079ac:	01000044 	movi	r4,1
 80079b0:	d9411d84 	addi	r5,sp,1142
 80079b4:	1907883a 	add	r3,r3,r4
 80079b8:	41400015 	stw	r5,0(r8)
 80079bc:	41000115 	stw	r4,4(r8)
 80079c0:	d8c11c15 	stw	r3,1136(sp)
 80079c4:	d8811b15 	stw	r2,1132(sp)
 80079c8:	014001c4 	movi	r5,7
 80079cc:	2880aa16 	blt	r5,r2,8007c78 <___vfiprintf_internal_r+0xe80>
 80079d0:	100b883a 	mov	r5,r2
 80079d4:	42000204 	addi	r8,r8,8
 80079d8:	10800044 	addi	r2,r2,1
 80079dc:	003e4006 	br	80072e0 <__alt_data_end+0xfc0072e0>
 80079e0:	d9012017 	ldw	r4,1152(sp)
 80079e4:	a00b883a 	mov	r5,r20
 80079e8:	d9811a04 	addi	r6,sp,1128
 80079ec:	d9c12a15 	stw	r7,1192(sp)
 80079f0:	db012b15 	stw	r12,1196(sp)
 80079f4:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 80079f8:	d9c12a17 	ldw	r7,1192(sp)
 80079fc:	db012b17 	ldw	r12,1196(sp)
 8007a00:	1000371e 	bne	r2,zero,8007ae0 <___vfiprintf_internal_r+0xce8>
 8007a04:	d9411b17 	ldw	r5,1132(sp)
 8007a08:	d8c11c17 	ldw	r3,1136(sp)
 8007a0c:	d811883a 	mov	r8,sp
 8007a10:	28800044 	addi	r2,r5,1
 8007a14:	003e4d06 	br	800734c <__alt_data_end+0xfc00734c>
 8007a18:	10803fcc 	andi	r2,r2,255
 8007a1c:	00c00044 	movi	r3,1
 8007a20:	10fddf1e 	bne	r2,r3,80071a0 <__alt_data_end+0xfc0071a0>
 8007a24:	b000021e 	bne	r22,zero,8007a30 <___vfiprintf_internal_r+0xc38>
 8007a28:	00800244 	movi	r2,9
 8007a2c:	1480202e 	bgeu	r2,r18,8007ab0 <___vfiprintf_internal_r+0xcb8>
 8007a30:	dc012515 	stw	r16,1172(sp)
 8007a34:	dc410a04 	addi	r17,sp,1064
 8007a38:	9021883a 	mov	r16,r18
 8007a3c:	da012415 	stw	r8,1168(sp)
 8007a40:	b025883a 	mov	r18,r22
 8007a44:	da412315 	stw	r9,1164(sp)
 8007a48:	602d883a 	mov	r22,r12
 8007a4c:	8009883a 	mov	r4,r16
 8007a50:	900b883a 	mov	r5,r18
 8007a54:	01800284 	movi	r6,10
 8007a58:	000f883a 	mov	r7,zero
 8007a5c:	8009c100 	call	8009c10 <__umoddi3>
 8007a60:	10800c04 	addi	r2,r2,48
 8007a64:	8c7fffc4 	addi	r17,r17,-1
 8007a68:	8009883a 	mov	r4,r16
 8007a6c:	900b883a 	mov	r5,r18
 8007a70:	01800284 	movi	r6,10
 8007a74:	000f883a 	mov	r7,zero
 8007a78:	88800005 	stb	r2,0(r17)
 8007a7c:	80096500 	call	8009650 <__udivdi3>
 8007a80:	1021883a 	mov	r16,r2
 8007a84:	10c4b03a 	or	r2,r2,r3
 8007a88:	1825883a 	mov	r18,r3
 8007a8c:	103fef1e 	bne	r2,zero,8007a4c <__alt_data_end+0xfc007a4c>
 8007a90:	da811e17 	ldw	r10,1144(sp)
 8007a94:	da012417 	ldw	r8,1168(sp)
 8007a98:	da412317 	ldw	r9,1164(sp)
 8007a9c:	dc412415 	stw	r17,1168(sp)
 8007aa0:	b019883a 	mov	r12,r22
 8007aa4:	dc012517 	ldw	r16,1172(sp)
 8007aa8:	5463c83a 	sub	r17,r10,r17
 8007aac:	003dce06 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007ab0:	94800c04 	addi	r18,r18,48
 8007ab4:	d8c109c4 	addi	r3,sp,1063
 8007ab8:	dc8109c5 	stb	r18,1063(sp)
 8007abc:	dc412717 	ldw	r17,1180(sp)
 8007ac0:	d8c12415 	stw	r3,1168(sp)
 8007ac4:	003dc806 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007ac8:	d8811c17 	ldw	r2,1136(sp)
 8007acc:	10000426 	beq	r2,zero,8007ae0 <___vfiprintf_internal_r+0xce8>
 8007ad0:	d9012017 	ldw	r4,1152(sp)
 8007ad4:	a00b883a 	mov	r5,r20
 8007ad8:	d9811a04 	addi	r6,sp,1128
 8007adc:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007ae0:	a080030b 	ldhu	r2,12(r20)
 8007ae4:	1080100c 	andi	r2,r2,64
 8007ae8:	103e9b1e 	bne	r2,zero,8007558 <__alt_data_end+0xfc007558>
 8007aec:	d8812217 	ldw	r2,1160(sp)
 8007af0:	003e9a06 	br	800755c <__alt_data_end+0xfc00755c>
 8007af4:	d9012017 	ldw	r4,1152(sp)
 8007af8:	a00b883a 	mov	r5,r20
 8007afc:	d9811a04 	addi	r6,sp,1128
 8007b00:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007b04:	103ff61e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007b08:	d9011b17 	ldw	r4,1132(sp)
 8007b0c:	d8c11c17 	ldw	r3,1136(sp)
 8007b10:	d811883a 	mov	r8,sp
 8007b14:	21400044 	addi	r5,r4,1
 8007b18:	003e4006 	br	800741c <__alt_data_end+0xfc00741c>
 8007b1c:	1800d61e 	bne	r3,zero,8007e78 <___vfiprintf_internal_r+0x1080>
 8007b20:	dac12417 	ldw	r11,1168(sp)
 8007b24:	00800044 	movi	r2,1
 8007b28:	dc400115 	stw	r17,4(sp)
 8007b2c:	dac00015 	stw	r11,0(sp)
 8007b30:	dc411c15 	stw	r17,1136(sp)
 8007b34:	d8811b15 	stw	r2,1132(sp)
 8007b38:	8807883a 	mov	r3,r17
 8007b3c:	d811883a 	mov	r8,sp
 8007b40:	42000204 	addi	r8,r8,8
 8007b44:	aac0010c 	andi	r11,r21,4
 8007b48:	58000226 	beq	r11,zero,8007b54 <___vfiprintf_internal_r+0xd5c>
 8007b4c:	9ca3c83a 	sub	r17,r19,r18
 8007b50:	047e2616 	blt	zero,r17,80073ec <__alt_data_end+0xfc0073ec>
 8007b54:	94c0010e 	bge	r18,r19,8007b5c <___vfiprintf_internal_r+0xd64>
 8007b58:	9825883a 	mov	r18,r19
 8007b5c:	da812217 	ldw	r10,1160(sp)
 8007b60:	5495883a 	add	r10,r10,r18
 8007b64:	da812215 	stw	r10,1160(sp)
 8007b68:	183e4826 	beq	r3,zero,800748c <__alt_data_end+0xfc00748c>
 8007b6c:	d9012017 	ldw	r4,1152(sp)
 8007b70:	a00b883a 	mov	r5,r20
 8007b74:	d9811a04 	addi	r6,sp,1128
 8007b78:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007b7c:	103e4326 	beq	r2,zero,800748c <__alt_data_end+0xfc00748c>
 8007b80:	003fd706 	br	8007ae0 <__alt_data_end+0xfc007ae0>
 8007b84:	9cadc83a 	sub	r22,r19,r18
 8007b88:	05bde40e 	bge	zero,r22,800731c <__alt_data_end+0xfc00731c>
 8007b8c:	03000404 	movi	r12,16
 8007b90:	6581500e 	bge	r12,r22,80080d4 <___vfiprintf_internal_r+0x12dc>
 8007b94:	00820074 	movhi	r2,2049
 8007b98:	10bdd104 	addi	r2,r2,-2236
 8007b9c:	d8812315 	stw	r2,1164(sp)
 8007ba0:	8005883a 	mov	r2,r16
 8007ba4:	038001c4 	movi	r14,7
 8007ba8:	b021883a 	mov	r16,r22
 8007bac:	da412515 	stw	r9,1172(sp)
 8007bb0:	102d883a 	mov	r22,r2
 8007bb4:	00000506 	br	8007bcc <___vfiprintf_internal_r+0xdd4>
 8007bb8:	29000084 	addi	r4,r5,2
 8007bbc:	42000204 	addi	r8,r8,8
 8007bc0:	100b883a 	mov	r5,r2
 8007bc4:	843ffc04 	addi	r16,r16,-16
 8007bc8:	64000d0e 	bge	r12,r16,8007c00 <___vfiprintf_internal_r+0xe08>
 8007bcc:	18c00404 	addi	r3,r3,16
 8007bd0:	28800044 	addi	r2,r5,1
 8007bd4:	45c00015 	stw	r23,0(r8)
 8007bd8:	43000115 	stw	r12,4(r8)
 8007bdc:	d8c11c15 	stw	r3,1136(sp)
 8007be0:	d8811b15 	stw	r2,1132(sp)
 8007be4:	70bff40e 	bge	r14,r2,8007bb8 <__alt_data_end+0xfc007bb8>
 8007be8:	1800151e 	bne	r3,zero,8007c40 <___vfiprintf_internal_r+0xe48>
 8007bec:	843ffc04 	addi	r16,r16,-16
 8007bf0:	000b883a 	mov	r5,zero
 8007bf4:	01000044 	movi	r4,1
 8007bf8:	d811883a 	mov	r8,sp
 8007bfc:	643ff316 	blt	r12,r16,8007bcc <__alt_data_end+0xfc007bcc>
 8007c00:	da412517 	ldw	r9,1172(sp)
 8007c04:	b005883a 	mov	r2,r22
 8007c08:	802d883a 	mov	r22,r16
 8007c0c:	1021883a 	mov	r16,r2
 8007c10:	da812317 	ldw	r10,1164(sp)
 8007c14:	1d87883a 	add	r3,r3,r22
 8007c18:	45800115 	stw	r22,4(r8)
 8007c1c:	42800015 	stw	r10,0(r8)
 8007c20:	d8c11c15 	stw	r3,1136(sp)
 8007c24:	d9011b15 	stw	r4,1132(sp)
 8007c28:	008001c4 	movi	r2,7
 8007c2c:	11008d16 	blt	r2,r4,8007e64 <___vfiprintf_internal_r+0x106c>
 8007c30:	42000204 	addi	r8,r8,8
 8007c34:	20800044 	addi	r2,r4,1
 8007c38:	200b883a 	mov	r5,r4
 8007c3c:	003db706 	br	800731c <__alt_data_end+0xfc00731c>
 8007c40:	d9012017 	ldw	r4,1152(sp)
 8007c44:	a00b883a 	mov	r5,r20
 8007c48:	d9811a04 	addi	r6,sp,1128
 8007c4c:	db012b15 	stw	r12,1196(sp)
 8007c50:	db812a15 	stw	r14,1192(sp)
 8007c54:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007c58:	db012b17 	ldw	r12,1196(sp)
 8007c5c:	db812a17 	ldw	r14,1192(sp)
 8007c60:	103f9f1e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007c64:	d9411b17 	ldw	r5,1132(sp)
 8007c68:	d8c11c17 	ldw	r3,1136(sp)
 8007c6c:	d811883a 	mov	r8,sp
 8007c70:	29000044 	addi	r4,r5,1
 8007c74:	003fd306 	br	8007bc4 <__alt_data_end+0xfc007bc4>
 8007c78:	18006c1e 	bne	r3,zero,8007e2c <___vfiprintf_internal_r+0x1034>
 8007c7c:	70004f26 	beq	r14,zero,8007dbc <___vfiprintf_internal_r+0xfc4>
 8007c80:	d8811d04 	addi	r2,sp,1140
 8007c84:	00c00084 	movi	r3,2
 8007c88:	d8800015 	stw	r2,0(sp)
 8007c8c:	d8c00115 	stw	r3,4(sp)
 8007c90:	2005883a 	mov	r2,r4
 8007c94:	d811883a 	mov	r8,sp
 8007c98:	003d9b06 	br	8007308 <__alt_data_end+0xfc007308>
 8007c9c:	1800571e 	bne	r3,zero,8007dfc <___vfiprintf_internal_r+0x1004>
 8007ca0:	000b883a 	mov	r5,zero
 8007ca4:	00800044 	movi	r2,1
 8007ca8:	d811883a 	mov	r8,sp
 8007cac:	003d9906 	br	8007314 <__alt_data_end+0xfc007314>
 8007cb0:	10803fcc 	andi	r2,r2,255
 8007cb4:	1000251e 	bne	r2,zero,8007d4c <___vfiprintf_internal_r+0xf54>
 8007cb8:	a880004c 	andi	r2,r21,1
 8007cbc:	10007826 	beq	r2,zero,8007ea0 <___vfiprintf_internal_r+0x10a8>
 8007cc0:	00800c04 	movi	r2,48
 8007cc4:	d8c109c4 	addi	r3,sp,1063
 8007cc8:	d88109c5 	stb	r2,1063(sp)
 8007ccc:	dc412717 	ldw	r17,1180(sp)
 8007cd0:	d8c12415 	stw	r3,1168(sp)
 8007cd4:	003d4406 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007cd8:	d9012617 	ldw	r4,1176(sp)
 8007cdc:	dc410a04 	addi	r17,sp,1064
 8007ce0:	908003cc 	andi	r2,r18,15
 8007ce4:	b006973a 	slli	r3,r22,28
 8007ce8:	2085883a 	add	r2,r4,r2
 8007cec:	9024d13a 	srli	r18,r18,4
 8007cf0:	10800003 	ldbu	r2,0(r2)
 8007cf4:	b02cd13a 	srli	r22,r22,4
 8007cf8:	8c7fffc4 	addi	r17,r17,-1
 8007cfc:	1ca4b03a 	or	r18,r3,r18
 8007d00:	88800005 	stb	r2,0(r17)
 8007d04:	9584b03a 	or	r2,r18,r22
 8007d08:	103ff51e 	bne	r2,zero,8007ce0 <__alt_data_end+0xfc007ce0>
 8007d0c:	dac11e17 	ldw	r11,1144(sp)
 8007d10:	dc412415 	stw	r17,1168(sp)
 8007d14:	5c63c83a 	sub	r17,r11,r17
 8007d18:	003d3306 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007d1c:	1800941e 	bne	r3,zero,8007f70 <___vfiprintf_internal_r+0x1178>
 8007d20:	d8811d87 	ldb	r2,1142(sp)
 8007d24:	10006b26 	beq	r2,zero,8007ed4 <___vfiprintf_internal_r+0x10dc>
 8007d28:	00c00044 	movi	r3,1
 8007d2c:	d9011d84 	addi	r4,sp,1142
 8007d30:	1805883a 	mov	r2,r3
 8007d34:	d9000015 	stw	r4,0(sp)
 8007d38:	d8c00115 	stw	r3,4(sp)
 8007d3c:	d811883a 	mov	r8,sp
 8007d40:	003f2306 	br	80079d0 <__alt_data_end+0xfc0079d0>
 8007d44:	8023883a 	mov	r17,r16
 8007d48:	003c7d06 	br	8006f40 <__alt_data_end+0xfc006f40>
 8007d4c:	da810a04 	addi	r10,sp,1064
 8007d50:	da812415 	stw	r10,1168(sp)
 8007d54:	003d2406 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007d58:	d9012017 	ldw	r4,1152(sp)
 8007d5c:	a00b883a 	mov	r5,r20
 8007d60:	d9811a04 	addi	r6,sp,1128
 8007d64:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007d68:	103f5d1e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007d6c:	d8c11c17 	ldw	r3,1136(sp)
 8007d70:	d811883a 	mov	r8,sp
 8007d74:	003f7306 	br	8007b44 <__alt_data_end+0xfc007b44>
 8007d78:	1c800017 	ldw	r18,0(r3)
 8007d7c:	dac12117 	ldw	r11,1156(sp)
 8007d80:	902dd7fa 	srai	r22,r18,31
 8007d84:	5ac00104 	addi	r11,r11,4
 8007d88:	dac12115 	stw	r11,1156(sp)
 8007d8c:	b005883a 	mov	r2,r22
 8007d90:	003e5406 	br	80076e4 <__alt_data_end+0xfc0076e4>
 8007d94:	00800084 	movi	r2,2
 8007d98:	9588b03a 	or	r4,r18,r22
 8007d9c:	003cf506 	br	8007174 <__alt_data_end+0xfc007174>
 8007da0:	d9012017 	ldw	r4,1152(sp)
 8007da4:	a00b883a 	mov	r5,r20
 8007da8:	d9811a04 	addi	r6,sp,1128
 8007dac:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007db0:	103f4b1e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007db4:	d811883a 	mov	r8,sp
 8007db8:	003cd106 	br	8007100 <__alt_data_end+0xfc007100>
 8007dbc:	000b883a 	mov	r5,zero
 8007dc0:	2005883a 	mov	r2,r4
 8007dc4:	d811883a 	mov	r8,sp
 8007dc8:	003d5206 	br	8007314 <__alt_data_end+0xfc007314>
 8007dcc:	10803fcc 	andi	r2,r2,255
 8007dd0:	1080201c 	xori	r2,r2,128
 8007dd4:	10bfe004 	addi	r2,r2,-128
 8007dd8:	01000c04 	movi	r4,48
 8007ddc:	11008e26 	beq	r2,r4,8008018 <___vfiprintf_internal_r+0x1220>
 8007de0:	da812417 	ldw	r10,1168(sp)
 8007de4:	dac11e17 	ldw	r11,1144(sp)
 8007de8:	193fffc5 	stb	r4,-1(r3)
 8007dec:	52bfffc4 	addi	r10,r10,-1
 8007df0:	da812415 	stw	r10,1168(sp)
 8007df4:	5aa3c83a 	sub	r17,r11,r10
 8007df8:	003cfb06 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007dfc:	d9012017 	ldw	r4,1152(sp)
 8007e00:	a00b883a 	mov	r5,r20
 8007e04:	d9811a04 	addi	r6,sp,1128
 8007e08:	da412b15 	stw	r9,1196(sp)
 8007e0c:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007e10:	da412b17 	ldw	r9,1196(sp)
 8007e14:	103f321e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007e18:	d9411b17 	ldw	r5,1132(sp)
 8007e1c:	d8c11c17 	ldw	r3,1136(sp)
 8007e20:	d811883a 	mov	r8,sp
 8007e24:	28800044 	addi	r2,r5,1
 8007e28:	003d3a06 	br	8007314 <__alt_data_end+0xfc007314>
 8007e2c:	d9012017 	ldw	r4,1152(sp)
 8007e30:	a00b883a 	mov	r5,r20
 8007e34:	d9811a04 	addi	r6,sp,1128
 8007e38:	da412b15 	stw	r9,1196(sp)
 8007e3c:	db812a15 	stw	r14,1192(sp)
 8007e40:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007e44:	da412b17 	ldw	r9,1196(sp)
 8007e48:	db812a17 	ldw	r14,1192(sp)
 8007e4c:	103f241e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007e50:	d9411b17 	ldw	r5,1132(sp)
 8007e54:	d8c11c17 	ldw	r3,1136(sp)
 8007e58:	d811883a 	mov	r8,sp
 8007e5c:	28800044 	addi	r2,r5,1
 8007e60:	003d1f06 	br	80072e0 <__alt_data_end+0xfc0072e0>
 8007e64:	1800781e 	bne	r3,zero,8008048 <___vfiprintf_internal_r+0x1250>
 8007e68:	000b883a 	mov	r5,zero
 8007e6c:	00800044 	movi	r2,1
 8007e70:	d811883a 	mov	r8,sp
 8007e74:	003d2906 	br	800731c <__alt_data_end+0xfc00731c>
 8007e78:	d9012017 	ldw	r4,1152(sp)
 8007e7c:	a00b883a 	mov	r5,r20
 8007e80:	d9811a04 	addi	r6,sp,1128
 8007e84:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007e88:	103f151e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007e8c:	d8811b17 	ldw	r2,1132(sp)
 8007e90:	d8c11c17 	ldw	r3,1136(sp)
 8007e94:	d811883a 	mov	r8,sp
 8007e98:	10800044 	addi	r2,r2,1
 8007e9c:	003d4406 	br	80073b0 <__alt_data_end+0xfc0073b0>
 8007ea0:	dac10a04 	addi	r11,sp,1064
 8007ea4:	dac12415 	stw	r11,1168(sp)
 8007ea8:	003ccf06 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8007eac:	04a5c83a 	sub	r18,zero,r18
 8007eb0:	9004c03a 	cmpne	r2,r18,zero
 8007eb4:	05adc83a 	sub	r22,zero,r22
 8007eb8:	b0adc83a 	sub	r22,r22,r2
 8007ebc:	03000b44 	movi	r12,45
 8007ec0:	db011d85 	stb	r12,1142(sp)
 8007ec4:	4823883a 	mov	r17,r9
 8007ec8:	00800044 	movi	r2,1
 8007ecc:	9588b03a 	or	r4,r18,r22
 8007ed0:	003cab06 	br	8007180 <__alt_data_end+0xfc007180>
 8007ed4:	000b883a 	mov	r5,zero
 8007ed8:	00800044 	movi	r2,1
 8007edc:	d811883a 	mov	r8,sp
 8007ee0:	703d0c26 	beq	r14,zero,8007314 <__alt_data_end+0xfc007314>
 8007ee4:	00c00084 	movi	r3,2
 8007ee8:	d9011d04 	addi	r4,sp,1140
 8007eec:	d9000015 	stw	r4,0(sp)
 8007ef0:	d8c00115 	stw	r3,4(sp)
 8007ef4:	003d0406 	br	8007308 <__alt_data_end+0xfc007308>
 8007ef8:	80c00007 	ldb	r3,0(r16)
 8007efc:	003c1d06 	br	8006f74 <__alt_data_end+0xfc006f74>
 8007f00:	a880040c 	andi	r2,r21,16
 8007f04:	1000091e 	bne	r2,zero,8007f2c <___vfiprintf_internal_r+0x1134>
 8007f08:	aac0100c 	andi	r11,r21,64
 8007f0c:	58000726 	beq	r11,zero,8007f2c <___vfiprintf_internal_r+0x1134>
 8007f10:	da812117 	ldw	r10,1156(sp)
 8007f14:	dac12217 	ldw	r11,1160(sp)
 8007f18:	50800017 	ldw	r2,0(r10)
 8007f1c:	52800104 	addi	r10,r10,4
 8007f20:	da812115 	stw	r10,1156(sp)
 8007f24:	12c0000d 	sth	r11,0(r2)
 8007f28:	003be806 	br	8006ecc <__alt_data_end+0xfc006ecc>
 8007f2c:	da812117 	ldw	r10,1156(sp)
 8007f30:	dac12217 	ldw	r11,1160(sp)
 8007f34:	50800017 	ldw	r2,0(r10)
 8007f38:	52800104 	addi	r10,r10,4
 8007f3c:	da812115 	stw	r10,1156(sp)
 8007f40:	12c00015 	stw	r11,0(r2)
 8007f44:	003be106 	br	8006ecc <__alt_data_end+0xfc006ecc>
 8007f48:	00800084 	movi	r2,2
 8007f4c:	003c8906 	br	8007174 <__alt_data_end+0xfc007174>
 8007f50:	a900100c 	andi	r4,r21,64
 8007f54:	20001f26 	beq	r4,zero,8007fd4 <___vfiprintf_internal_r+0x11dc>
 8007f58:	da812117 	ldw	r10,1156(sp)
 8007f5c:	1480000b 	ldhu	r18,0(r2)
 8007f60:	002d883a 	mov	r22,zero
 8007f64:	52800104 	addi	r10,r10,4
 8007f68:	da812115 	stw	r10,1156(sp)
 8007f6c:	003dae06 	br	8007628 <__alt_data_end+0xfc007628>
 8007f70:	d9012017 	ldw	r4,1152(sp)
 8007f74:	a00b883a 	mov	r5,r20
 8007f78:	d9811a04 	addi	r6,sp,1128
 8007f7c:	da412b15 	stw	r9,1196(sp)
 8007f80:	db812a15 	stw	r14,1192(sp)
 8007f84:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007f88:	da412b17 	ldw	r9,1196(sp)
 8007f8c:	db812a17 	ldw	r14,1192(sp)
 8007f90:	103ed31e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007f94:	d9411b17 	ldw	r5,1132(sp)
 8007f98:	d8c11c17 	ldw	r3,1136(sp)
 8007f9c:	d811883a 	mov	r8,sp
 8007fa0:	28800044 	addi	r2,r5,1
 8007fa4:	003e7f06 	br	80079a4 <__alt_data_end+0xfc0079a4>
 8007fa8:	9825883a 	mov	r18,r19
 8007fac:	003d3406 	br	8007480 <__alt_data_end+0xfc007480>
 8007fb0:	4823883a 	mov	r17,r9
 8007fb4:	003e0806 	br	80077d8 <__alt_data_end+0xfc0077d8>
 8007fb8:	d9012017 	ldw	r4,1152(sp)
 8007fbc:	a00b883a 	mov	r5,r20
 8007fc0:	d9811a04 	addi	r6,sp,1128
 8007fc4:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 8007fc8:	103ec51e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8007fcc:	d8c11c17 	ldw	r3,1136(sp)
 8007fd0:	003ee006 	br	8007b54 <__alt_data_end+0xfc007b54>
 8007fd4:	dac12117 	ldw	r11,1156(sp)
 8007fd8:	14800017 	ldw	r18,0(r2)
 8007fdc:	002d883a 	mov	r22,zero
 8007fe0:	5ac00104 	addi	r11,r11,4
 8007fe4:	dac12115 	stw	r11,1156(sp)
 8007fe8:	003d8f06 	br	8007628 <__alt_data_end+0xfc007628>
 8007fec:	02c20074 	movhi	r11,2049
 8007ff0:	5afdd104 	addi	r11,r11,-2236
 8007ff4:	dac12315 	stw	r11,1164(sp)
 8007ff8:	003ce306 	br	8007388 <__alt_data_end+0xfc007388>
 8007ffc:	80c00043 	ldbu	r3,1(r16)
 8008000:	ad400814 	ori	r21,r21,32
 8008004:	84000044 	addi	r16,r16,1
 8008008:	18c03fcc 	andi	r3,r3,255
 800800c:	18c0201c 	xori	r3,r3,128
 8008010:	18ffe004 	addi	r3,r3,-128
 8008014:	003bd706 	br	8006f74 <__alt_data_end+0xfc006f74>
 8008018:	dac11e17 	ldw	r11,1144(sp)
 800801c:	d8c12417 	ldw	r3,1168(sp)
 8008020:	58e3c83a 	sub	r17,r11,r3
 8008024:	003c7006 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8008028:	da012a15 	stw	r8,1192(sp)
 800802c:	8006c4c0 	call	8006c4c <strlen>
 8008030:	1023883a 	mov	r17,r2
 8008034:	db011d83 	ldbu	r12,1142(sp)
 8008038:	dd812115 	stw	r22,1156(sp)
 800803c:	0013883a 	mov	r9,zero
 8008040:	da012a17 	ldw	r8,1192(sp)
 8008044:	003c6806 	br	80071e8 <__alt_data_end+0xfc0071e8>
 8008048:	d9012017 	ldw	r4,1152(sp)
 800804c:	a00b883a 	mov	r5,r20
 8008050:	d9811a04 	addi	r6,sp,1128
 8008054:	da412b15 	stw	r9,1196(sp)
 8008058:	8006ce40 	call	8006ce4 <__sprint_r.part.0>
 800805c:	da412b17 	ldw	r9,1196(sp)
 8008060:	103e9f1e 	bne	r2,zero,8007ae0 <__alt_data_end+0xfc007ae0>
 8008064:	d9411b17 	ldw	r5,1132(sp)
 8008068:	d8c11c17 	ldw	r3,1136(sp)
 800806c:	d811883a 	mov	r8,sp
 8008070:	28800044 	addi	r2,r5,1
 8008074:	003ca906 	br	800731c <__alt_data_end+0xfc00731c>
 8008078:	d9411b17 	ldw	r5,1132(sp)
 800807c:	01020074 	movhi	r4,2049
 8008080:	213dd504 	addi	r4,r4,-2220
 8008084:	d9012315 	stw	r4,1164(sp)
 8008088:	29400044 	addi	r5,r5,1
 800808c:	003c8806 	br	80072b0 <__alt_data_end+0xfc0072b0>
 8008090:	00800184 	movi	r2,6
 8008094:	1240012e 	bgeu	r2,r9,800809c <___vfiprintf_internal_r+0x12a4>
 8008098:	1013883a 	mov	r9,r2
 800809c:	4823883a 	mov	r17,r9
 80080a0:	4825883a 	mov	r18,r9
 80080a4:	48001516 	blt	r9,zero,80080fc <___vfiprintf_internal_r+0x1304>
 80080a8:	00820074 	movhi	r2,2049
 80080ac:	10bd7504 	addi	r2,r2,-2604
 80080b0:	dd812115 	stw	r22,1156(sp)
 80080b4:	d8812415 	stw	r2,1168(sp)
 80080b8:	003d6f06 	br	8007678 <__alt_data_end+0xfc007678>
 80080bc:	d9411b17 	ldw	r5,1132(sp)
 80080c0:	02c20074 	movhi	r11,2049
 80080c4:	5afdd504 	addi	r11,r11,-2220
 80080c8:	dac12315 	stw	r11,1164(sp)
 80080cc:	29400044 	addi	r5,r5,1
 80080d0:	003ce106 	br	8007458 <__alt_data_end+0xfc007458>
 80080d4:	01020074 	movhi	r4,2049
 80080d8:	213dd104 	addi	r4,r4,-2236
 80080dc:	d9012315 	stw	r4,1164(sp)
 80080e0:	1009883a 	mov	r4,r2
 80080e4:	003eca06 	br	8007c10 <__alt_data_end+0xfc007c10>
 80080e8:	4823883a 	mov	r17,r9
 80080ec:	db011d83 	ldbu	r12,1142(sp)
 80080f0:	dd812115 	stw	r22,1156(sp)
 80080f4:	0013883a 	mov	r9,zero
 80080f8:	003c3b06 	br	80071e8 <__alt_data_end+0xfc0071e8>
 80080fc:	0025883a 	mov	r18,zero
 8008100:	003fe906 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008104:	dac12117 	ldw	r11,1156(sp)
 8008108:	8005883a 	mov	r2,r16
 800810c:	5021883a 	mov	r16,r10
 8008110:	5a400017 	ldw	r9,0(r11)
 8008114:	58c00104 	addi	r3,r11,4
 8008118:	d8c12115 	stw	r3,1156(sp)
 800811c:	48000a16 	blt	r9,zero,8008148 <___vfiprintf_internal_r+0x1350>
 8008120:	10c00047 	ldb	r3,1(r2)
 8008124:	003b9306 	br	8006f74 <__alt_data_end+0xfc006f74>
 8008128:	043fffc4 	movi	r16,-1
 800812c:	003d0206 	br	8007538 <__alt_data_end+0xfc007538>
 8008130:	94c0010e 	bge	r18,r19,8008138 <___vfiprintf_internal_r+0x1340>
 8008134:	9825883a 	mov	r18,r19
 8008138:	da812217 	ldw	r10,1160(sp)
 800813c:	5495883a 	add	r10,r10,r18
 8008140:	da812215 	stw	r10,1160(sp)
 8008144:	003cd106 	br	800748c <__alt_data_end+0xfc00748c>
 8008148:	027fffc4 	movi	r9,-1
 800814c:	10c00047 	ldb	r3,1(r2)
 8008150:	003b8806 	br	8006f74 <__alt_data_end+0xfc006f74>

08008154 <__vfiprintf_internal>:
 8008154:	2007883a 	mov	r3,r4
 8008158:	01020074 	movhi	r4,2049
 800815c:	2104e304 	addi	r4,r4,5004
 8008160:	21000017 	ldw	r4,0(r4)
 8008164:	2805883a 	mov	r2,r5
 8008168:	300f883a 	mov	r7,r6
 800816c:	180b883a 	mov	r5,r3
 8008170:	100d883a 	mov	r6,r2
 8008174:	8006df81 	jmpi	8006df8 <___vfiprintf_internal_r>

08008178 <_write_r>:
 8008178:	defffd04 	addi	sp,sp,-12
 800817c:	dc000015 	stw	r16,0(sp)
 8008180:	04020074 	movhi	r16,2049
 8008184:	dc400115 	stw	r17,4(sp)
 8008188:	840bbe04 	addi	r16,r16,12024
 800818c:	2023883a 	mov	r17,r4
 8008190:	2809883a 	mov	r4,r5
 8008194:	300b883a 	mov	r5,r6
 8008198:	380d883a 	mov	r6,r7
 800819c:	dfc00215 	stw	ra,8(sp)
 80081a0:	80000015 	stw	zero,0(r16)
 80081a4:	800d1780 	call	800d178 <write>
 80081a8:	00ffffc4 	movi	r3,-1
 80081ac:	10c00526 	beq	r2,r3,80081c4 <_write_r+0x4c>
 80081b0:	dfc00217 	ldw	ra,8(sp)
 80081b4:	dc400117 	ldw	r17,4(sp)
 80081b8:	dc000017 	ldw	r16,0(sp)
 80081bc:	dec00304 	addi	sp,sp,12
 80081c0:	f800283a 	ret
 80081c4:	80c00017 	ldw	r3,0(r16)
 80081c8:	183ff926 	beq	r3,zero,80081b0 <__alt_data_end+0xfc0081b0>
 80081cc:	88c00015 	stw	r3,0(r17)
 80081d0:	003ff706 	br	80081b0 <__alt_data_end+0xfc0081b0>

080081d4 <_close_r>:
 80081d4:	defffd04 	addi	sp,sp,-12
 80081d8:	dc000015 	stw	r16,0(sp)
 80081dc:	04020074 	movhi	r16,2049
 80081e0:	dc400115 	stw	r17,4(sp)
 80081e4:	840bbe04 	addi	r16,r16,12024
 80081e8:	2023883a 	mov	r17,r4
 80081ec:	2809883a 	mov	r4,r5
 80081f0:	dfc00215 	stw	ra,8(sp)
 80081f4:	80000015 	stw	zero,0(r16)
 80081f8:	800c91c0 	call	800c91c <close>
 80081fc:	00ffffc4 	movi	r3,-1
 8008200:	10c00526 	beq	r2,r3,8008218 <_close_r+0x44>
 8008204:	dfc00217 	ldw	ra,8(sp)
 8008208:	dc400117 	ldw	r17,4(sp)
 800820c:	dc000017 	ldw	r16,0(sp)
 8008210:	dec00304 	addi	sp,sp,12
 8008214:	f800283a 	ret
 8008218:	80c00017 	ldw	r3,0(r16)
 800821c:	183ff926 	beq	r3,zero,8008204 <__alt_data_end+0xfc008204>
 8008220:	88c00015 	stw	r3,0(r17)
 8008224:	003ff706 	br	8008204 <__alt_data_end+0xfc008204>

08008228 <_calloc_r>:
 8008228:	298b383a 	mul	r5,r5,r6
 800822c:	defffe04 	addi	sp,sp,-8
 8008230:	dc000015 	stw	r16,0(sp)
 8008234:	dfc00115 	stw	ra,4(sp)
 8008238:	8004f2c0 	call	8004f2c <_malloc_r>
 800823c:	1021883a 	mov	r16,r2
 8008240:	10002826 	beq	r2,zero,80082e4 <_calloc_r+0xbc>
 8008244:	11bfff17 	ldw	r6,-4(r2)
 8008248:	00bfff04 	movi	r2,-4
 800824c:	00c00904 	movi	r3,36
 8008250:	308c703a 	and	r6,r6,r2
 8008254:	308d883a 	add	r6,r6,r2
 8008258:	19801436 	bltu	r3,r6,80082ac <_calloc_r+0x84>
 800825c:	008004c4 	movi	r2,19
 8008260:	11800936 	bltu	r2,r6,8008288 <_calloc_r+0x60>
 8008264:	8005883a 	mov	r2,r16
 8008268:	10000015 	stw	zero,0(r2)
 800826c:	10000115 	stw	zero,4(r2)
 8008270:	10000215 	stw	zero,8(r2)
 8008274:	8005883a 	mov	r2,r16
 8008278:	dfc00117 	ldw	ra,4(sp)
 800827c:	dc000017 	ldw	r16,0(sp)
 8008280:	dec00204 	addi	sp,sp,8
 8008284:	f800283a 	ret
 8008288:	80000015 	stw	zero,0(r16)
 800828c:	80000115 	stw	zero,4(r16)
 8008290:	008006c4 	movi	r2,27
 8008294:	11800d2e 	bgeu	r2,r6,80082cc <_calloc_r+0xa4>
 8008298:	80000215 	stw	zero,8(r16)
 800829c:	80000315 	stw	zero,12(r16)
 80082a0:	30c00c26 	beq	r6,r3,80082d4 <_calloc_r+0xac>
 80082a4:	80800404 	addi	r2,r16,16
 80082a8:	003fef06 	br	8008268 <__alt_data_end+0xfc008268>
 80082ac:	8009883a 	mov	r4,r16
 80082b0:	000b883a 	mov	r5,zero
 80082b4:	80058f40 	call	80058f4 <memset>
 80082b8:	8005883a 	mov	r2,r16
 80082bc:	dfc00117 	ldw	ra,4(sp)
 80082c0:	dc000017 	ldw	r16,0(sp)
 80082c4:	dec00204 	addi	sp,sp,8
 80082c8:	f800283a 	ret
 80082cc:	80800204 	addi	r2,r16,8
 80082d0:	003fe506 	br	8008268 <__alt_data_end+0xfc008268>
 80082d4:	80000415 	stw	zero,16(r16)
 80082d8:	80800604 	addi	r2,r16,24
 80082dc:	80000515 	stw	zero,20(r16)
 80082e0:	003fe106 	br	8008268 <__alt_data_end+0xfc008268>
 80082e4:	0005883a 	mov	r2,zero
 80082e8:	003fe306 	br	8008278 <__alt_data_end+0xfc008278>

080082ec <_fclose_r>:
 80082ec:	28003226 	beq	r5,zero,80083b8 <_fclose_r+0xcc>
 80082f0:	defffc04 	addi	sp,sp,-16
 80082f4:	dc400115 	stw	r17,4(sp)
 80082f8:	2023883a 	mov	r17,r4
 80082fc:	dc000015 	stw	r16,0(sp)
 8008300:	dfc00315 	stw	ra,12(sp)
 8008304:	dc800215 	stw	r18,8(sp)
 8008308:	2821883a 	mov	r16,r5
 800830c:	80046d00 	call	80046d0 <__sfp_lock_acquire>
 8008310:	88000226 	beq	r17,zero,800831c <_fclose_r+0x30>
 8008314:	88800e17 	ldw	r2,56(r17)
 8008318:	10002926 	beq	r2,zero,80083c0 <_fclose_r+0xd4>
 800831c:	8080030f 	ldh	r2,12(r16)
 8008320:	10002226 	beq	r2,zero,80083ac <_fclose_r+0xc0>
 8008324:	8809883a 	mov	r4,r17
 8008328:	800b883a 	mov	r5,r16
 800832c:	80041180 	call	8004118 <_fflush_r>
 8008330:	1025883a 	mov	r18,r2
 8008334:	80800b17 	ldw	r2,44(r16)
 8008338:	10000426 	beq	r2,zero,800834c <_fclose_r+0x60>
 800833c:	81400717 	ldw	r5,28(r16)
 8008340:	8809883a 	mov	r4,r17
 8008344:	103ee83a 	callr	r2
 8008348:	10002616 	blt	r2,zero,80083e4 <_fclose_r+0xf8>
 800834c:	8080030b 	ldhu	r2,12(r16)
 8008350:	1080200c 	andi	r2,r2,128
 8008354:	10001f1e 	bne	r2,zero,80083d4 <_fclose_r+0xe8>
 8008358:	81400c17 	ldw	r5,48(r16)
 800835c:	28000526 	beq	r5,zero,8008374 <_fclose_r+0x88>
 8008360:	80801004 	addi	r2,r16,64
 8008364:	28800226 	beq	r5,r2,8008370 <_fclose_r+0x84>
 8008368:	8809883a 	mov	r4,r17
 800836c:	80048340 	call	8004834 <_free_r>
 8008370:	80000c15 	stw	zero,48(r16)
 8008374:	81401117 	ldw	r5,68(r16)
 8008378:	28000326 	beq	r5,zero,8008388 <_fclose_r+0x9c>
 800837c:	8809883a 	mov	r4,r17
 8008380:	80048340 	call	8004834 <_free_r>
 8008384:	80001115 	stw	zero,68(r16)
 8008388:	8000030d 	sth	zero,12(r16)
 800838c:	80046d40 	call	80046d4 <__sfp_lock_release>
 8008390:	9005883a 	mov	r2,r18
 8008394:	dfc00317 	ldw	ra,12(sp)
 8008398:	dc800217 	ldw	r18,8(sp)
 800839c:	dc400117 	ldw	r17,4(sp)
 80083a0:	dc000017 	ldw	r16,0(sp)
 80083a4:	dec00404 	addi	sp,sp,16
 80083a8:	f800283a 	ret
 80083ac:	80046d40 	call	80046d4 <__sfp_lock_release>
 80083b0:	0005883a 	mov	r2,zero
 80083b4:	003ff706 	br	8008394 <__alt_data_end+0xfc008394>
 80083b8:	0005883a 	mov	r2,zero
 80083bc:	f800283a 	ret
 80083c0:	8809883a 	mov	r4,r17
 80083c4:	80046c00 	call	80046c0 <__sinit>
 80083c8:	8080030f 	ldh	r2,12(r16)
 80083cc:	103fd51e 	bne	r2,zero,8008324 <__alt_data_end+0xfc008324>
 80083d0:	003ff606 	br	80083ac <__alt_data_end+0xfc0083ac>
 80083d4:	81400417 	ldw	r5,16(r16)
 80083d8:	8809883a 	mov	r4,r17
 80083dc:	80048340 	call	8004834 <_free_r>
 80083e0:	003fdd06 	br	8008358 <__alt_data_end+0xfc008358>
 80083e4:	04bfffc4 	movi	r18,-1
 80083e8:	003fd806 	br	800834c <__alt_data_end+0xfc00834c>

080083ec <fclose>:
 80083ec:	00820074 	movhi	r2,2049
 80083f0:	1084e304 	addi	r2,r2,5004
 80083f4:	200b883a 	mov	r5,r4
 80083f8:	11000017 	ldw	r4,0(r2)
 80083fc:	80082ec1 	jmpi	80082ec <_fclose_r>

08008400 <_fputwc_r>:
 8008400:	3080030b 	ldhu	r2,12(r6)
 8008404:	defff804 	addi	sp,sp,-32
 8008408:	dcc00415 	stw	r19,16(sp)
 800840c:	dc800315 	stw	r18,12(sp)
 8008410:	dc000115 	stw	r16,4(sp)
 8008414:	dfc00715 	stw	ra,28(sp)
 8008418:	dd400615 	stw	r21,24(sp)
 800841c:	dd000515 	stw	r20,20(sp)
 8008420:	dc400215 	stw	r17,8(sp)
 8008424:	10c8000c 	andi	r3,r2,8192
 8008428:	3021883a 	mov	r16,r6
 800842c:	2027883a 	mov	r19,r4
 8008430:	2825883a 	mov	r18,r5
 8008434:	1800051e 	bne	r3,zero,800844c <_fputwc_r+0x4c>
 8008438:	30c01917 	ldw	r3,100(r6)
 800843c:	10880014 	ori	r2,r2,8192
 8008440:	3080030d 	sth	r2,12(r6)
 8008444:	18880014 	ori	r2,r3,8192
 8008448:	30801915 	stw	r2,100(r6)
 800844c:	8004d1c0 	call	8004d1c <__locale_mb_cur_max>
 8008450:	00c00044 	movi	r3,1
 8008454:	10c03e26 	beq	r2,r3,8008550 <_fputwc_r+0x150>
 8008458:	9809883a 	mov	r4,r19
 800845c:	d80b883a 	mov	r5,sp
 8008460:	900d883a 	mov	r6,r18
 8008464:	81c01704 	addi	r7,r16,92
 8008468:	80094500 	call	8009450 <_wcrtomb_r>
 800846c:	1029883a 	mov	r20,r2
 8008470:	00bfffc4 	movi	r2,-1
 8008474:	a0802026 	beq	r20,r2,80084f8 <_fputwc_r+0xf8>
 8008478:	d9400003 	ldbu	r5,0(sp)
 800847c:	a0001c26 	beq	r20,zero,80084f0 <_fputwc_r+0xf0>
 8008480:	0023883a 	mov	r17,zero
 8008484:	05400284 	movi	r21,10
 8008488:	00000906 	br	80084b0 <_fputwc_r+0xb0>
 800848c:	80800017 	ldw	r2,0(r16)
 8008490:	11400005 	stb	r5,0(r2)
 8008494:	80c00017 	ldw	r3,0(r16)
 8008498:	18c00044 	addi	r3,r3,1
 800849c:	80c00015 	stw	r3,0(r16)
 80084a0:	8c400044 	addi	r17,r17,1
 80084a4:	dc45883a 	add	r2,sp,r17
 80084a8:	8d00112e 	bgeu	r17,r20,80084f0 <_fputwc_r+0xf0>
 80084ac:	11400003 	ldbu	r5,0(r2)
 80084b0:	80c00217 	ldw	r3,8(r16)
 80084b4:	18ffffc4 	addi	r3,r3,-1
 80084b8:	80c00215 	stw	r3,8(r16)
 80084bc:	183ff30e 	bge	r3,zero,800848c <__alt_data_end+0xfc00848c>
 80084c0:	80800617 	ldw	r2,24(r16)
 80084c4:	18801916 	blt	r3,r2,800852c <_fputwc_r+0x12c>
 80084c8:	80800017 	ldw	r2,0(r16)
 80084cc:	11400005 	stb	r5,0(r2)
 80084d0:	80800017 	ldw	r2,0(r16)
 80084d4:	10c00003 	ldbu	r3,0(r2)
 80084d8:	10800044 	addi	r2,r2,1
 80084dc:	1d402326 	beq	r3,r21,800856c <_fputwc_r+0x16c>
 80084e0:	80800015 	stw	r2,0(r16)
 80084e4:	8c400044 	addi	r17,r17,1
 80084e8:	dc45883a 	add	r2,sp,r17
 80084ec:	8d3fef36 	bltu	r17,r20,80084ac <__alt_data_end+0xfc0084ac>
 80084f0:	9005883a 	mov	r2,r18
 80084f4:	00000406 	br	8008508 <_fputwc_r+0x108>
 80084f8:	80c0030b 	ldhu	r3,12(r16)
 80084fc:	a005883a 	mov	r2,r20
 8008500:	18c01014 	ori	r3,r3,64
 8008504:	80c0030d 	sth	r3,12(r16)
 8008508:	dfc00717 	ldw	ra,28(sp)
 800850c:	dd400617 	ldw	r21,24(sp)
 8008510:	dd000517 	ldw	r20,20(sp)
 8008514:	dcc00417 	ldw	r19,16(sp)
 8008518:	dc800317 	ldw	r18,12(sp)
 800851c:	dc400217 	ldw	r17,8(sp)
 8008520:	dc000117 	ldw	r16,4(sp)
 8008524:	dec00804 	addi	sp,sp,32
 8008528:	f800283a 	ret
 800852c:	9809883a 	mov	r4,r19
 8008530:	29403fcc 	andi	r5,r5,255
 8008534:	800d883a 	mov	r6,r16
 8008538:	80092e00 	call	80092e0 <__swbuf_r>
 800853c:	10bfffe0 	cmpeqi	r2,r2,-1
 8008540:	10803fcc 	andi	r2,r2,255
 8008544:	103fd626 	beq	r2,zero,80084a0 <__alt_data_end+0xfc0084a0>
 8008548:	00bfffc4 	movi	r2,-1
 800854c:	003fee06 	br	8008508 <__alt_data_end+0xfc008508>
 8008550:	90ffffc4 	addi	r3,r18,-1
 8008554:	01003f84 	movi	r4,254
 8008558:	20ffbf36 	bltu	r4,r3,8008458 <__alt_data_end+0xfc008458>
 800855c:	900b883a 	mov	r5,r18
 8008560:	dc800005 	stb	r18,0(sp)
 8008564:	1029883a 	mov	r20,r2
 8008568:	003fc506 	br	8008480 <__alt_data_end+0xfc008480>
 800856c:	9809883a 	mov	r4,r19
 8008570:	a80b883a 	mov	r5,r21
 8008574:	800d883a 	mov	r6,r16
 8008578:	80092e00 	call	80092e0 <__swbuf_r>
 800857c:	10bfffe0 	cmpeqi	r2,r2,-1
 8008580:	003fef06 	br	8008540 <__alt_data_end+0xfc008540>

08008584 <fputwc>:
 8008584:	defffc04 	addi	sp,sp,-16
 8008588:	dc000115 	stw	r16,4(sp)
 800858c:	04020074 	movhi	r16,2049
 8008590:	8404e304 	addi	r16,r16,5004
 8008594:	dc400215 	stw	r17,8(sp)
 8008598:	2023883a 	mov	r17,r4
 800859c:	81000017 	ldw	r4,0(r16)
 80085a0:	dfc00315 	stw	ra,12(sp)
 80085a4:	280d883a 	mov	r6,r5
 80085a8:	20000626 	beq	r4,zero,80085c4 <fputwc+0x40>
 80085ac:	20800e17 	ldw	r2,56(r4)
 80085b0:	1000041e 	bne	r2,zero,80085c4 <fputwc+0x40>
 80085b4:	d9400015 	stw	r5,0(sp)
 80085b8:	80046c00 	call	80046c0 <__sinit>
 80085bc:	81000017 	ldw	r4,0(r16)
 80085c0:	d9800017 	ldw	r6,0(sp)
 80085c4:	880b883a 	mov	r5,r17
 80085c8:	dfc00317 	ldw	ra,12(sp)
 80085cc:	dc400217 	ldw	r17,8(sp)
 80085d0:	dc000117 	ldw	r16,4(sp)
 80085d4:	dec00404 	addi	sp,sp,16
 80085d8:	80084001 	jmpi	8008400 <_fputwc_r>

080085dc <_fstat_r>:
 80085dc:	defffd04 	addi	sp,sp,-12
 80085e0:	dc000015 	stw	r16,0(sp)
 80085e4:	04020074 	movhi	r16,2049
 80085e8:	dc400115 	stw	r17,4(sp)
 80085ec:	840bbe04 	addi	r16,r16,12024
 80085f0:	2023883a 	mov	r17,r4
 80085f4:	2809883a 	mov	r4,r5
 80085f8:	300b883a 	mov	r5,r6
 80085fc:	dfc00215 	stw	ra,8(sp)
 8008600:	80000015 	stw	zero,0(r16)
 8008604:	800ca680 	call	800ca68 <fstat>
 8008608:	00ffffc4 	movi	r3,-1
 800860c:	10c00526 	beq	r2,r3,8008624 <_fstat_r+0x48>
 8008610:	dfc00217 	ldw	ra,8(sp)
 8008614:	dc400117 	ldw	r17,4(sp)
 8008618:	dc000017 	ldw	r16,0(sp)
 800861c:	dec00304 	addi	sp,sp,12
 8008620:	f800283a 	ret
 8008624:	80c00017 	ldw	r3,0(r16)
 8008628:	183ff926 	beq	r3,zero,8008610 <__alt_data_end+0xfc008610>
 800862c:	88c00015 	stw	r3,0(r17)
 8008630:	003ff706 	br	8008610 <__alt_data_end+0xfc008610>

08008634 <__sfvwrite_r>:
 8008634:	30800217 	ldw	r2,8(r6)
 8008638:	10004526 	beq	r2,zero,8008750 <__sfvwrite_r+0x11c>
 800863c:	28c0030b 	ldhu	r3,12(r5)
 8008640:	defff404 	addi	sp,sp,-48
 8008644:	dd400715 	stw	r21,28(sp)
 8008648:	dcc00515 	stw	r19,20(sp)
 800864c:	dc000215 	stw	r16,8(sp)
 8008650:	dfc00b15 	stw	ra,44(sp)
 8008654:	df000a15 	stw	fp,40(sp)
 8008658:	ddc00915 	stw	r23,36(sp)
 800865c:	dd800815 	stw	r22,32(sp)
 8008660:	dd000615 	stw	r20,24(sp)
 8008664:	dc800415 	stw	r18,16(sp)
 8008668:	dc400315 	stw	r17,12(sp)
 800866c:	1880020c 	andi	r2,r3,8
 8008670:	2821883a 	mov	r16,r5
 8008674:	202b883a 	mov	r21,r4
 8008678:	3027883a 	mov	r19,r6
 800867c:	10002526 	beq	r2,zero,8008714 <__sfvwrite_r+0xe0>
 8008680:	28800417 	ldw	r2,16(r5)
 8008684:	10002326 	beq	r2,zero,8008714 <__sfvwrite_r+0xe0>
 8008688:	1880008c 	andi	r2,r3,2
 800868c:	9c400017 	ldw	r17,0(r19)
 8008690:	10003126 	beq	r2,zero,8008758 <__sfvwrite_r+0x124>
 8008694:	0029883a 	mov	r20,zero
 8008698:	0025883a 	mov	r18,zero
 800869c:	05810004 	movi	r22,1024
 80086a0:	a00d883a 	mov	r6,r20
 80086a4:	a809883a 	mov	r4,r21
 80086a8:	90002526 	beq	r18,zero,8008740 <__sfvwrite_r+0x10c>
 80086ac:	900f883a 	mov	r7,r18
 80086b0:	81400717 	ldw	r5,28(r16)
 80086b4:	b480012e 	bgeu	r22,r18,80086bc <__sfvwrite_r+0x88>
 80086b8:	01c10004 	movi	r7,1024
 80086bc:	80800917 	ldw	r2,36(r16)
 80086c0:	103ee83a 	callr	r2
 80086c4:	0080510e 	bge	zero,r2,800880c <__sfvwrite_r+0x1d8>
 80086c8:	98c00217 	ldw	r3,8(r19)
 80086cc:	a0a9883a 	add	r20,r20,r2
 80086d0:	90a5c83a 	sub	r18,r18,r2
 80086d4:	1885c83a 	sub	r2,r3,r2
 80086d8:	98800215 	stw	r2,8(r19)
 80086dc:	103ff01e 	bne	r2,zero,80086a0 <__alt_data_end+0xfc0086a0>
 80086e0:	0005883a 	mov	r2,zero
 80086e4:	dfc00b17 	ldw	ra,44(sp)
 80086e8:	df000a17 	ldw	fp,40(sp)
 80086ec:	ddc00917 	ldw	r23,36(sp)
 80086f0:	dd800817 	ldw	r22,32(sp)
 80086f4:	dd400717 	ldw	r21,28(sp)
 80086f8:	dd000617 	ldw	r20,24(sp)
 80086fc:	dcc00517 	ldw	r19,20(sp)
 8008700:	dc800417 	ldw	r18,16(sp)
 8008704:	dc400317 	ldw	r17,12(sp)
 8008708:	dc000217 	ldw	r16,8(sp)
 800870c:	dec00c04 	addi	sp,sp,48
 8008710:	f800283a 	ret
 8008714:	a809883a 	mov	r4,r21
 8008718:	800b883a 	mov	r5,r16
 800871c:	80026c00 	call	80026c0 <__swsetup_r>
 8008720:	80c0030b 	ldhu	r3,12(r16)
 8008724:	103fd826 	beq	r2,zero,8008688 <__alt_data_end+0xfc008688>
 8008728:	18c01014 	ori	r3,r3,64
 800872c:	80c0030d 	sth	r3,12(r16)
 8008730:	00c00244 	movi	r3,9
 8008734:	00bfffc4 	movi	r2,-1
 8008738:	a8c00015 	stw	r3,0(r21)
 800873c:	003fe906 	br	80086e4 <__alt_data_end+0xfc0086e4>
 8008740:	8d000017 	ldw	r20,0(r17)
 8008744:	8c800117 	ldw	r18,4(r17)
 8008748:	8c400204 	addi	r17,r17,8
 800874c:	003fd406 	br	80086a0 <__alt_data_end+0xfc0086a0>
 8008750:	0005883a 	mov	r2,zero
 8008754:	f800283a 	ret
 8008758:	1880004c 	andi	r2,r3,1
 800875c:	1000301e 	bne	r2,zero,8008820 <__sfvwrite_r+0x1ec>
 8008760:	002f883a 	mov	r23,zero
 8008764:	0025883a 	mov	r18,zero
 8008768:	90001c26 	beq	r18,zero,80087dc <__sfvwrite_r+0x1a8>
 800876c:	1880800c 	andi	r2,r3,512
 8008770:	85000217 	ldw	r20,8(r16)
 8008774:	10006c26 	beq	r2,zero,8008928 <__sfvwrite_r+0x2f4>
 8008778:	a02d883a 	mov	r22,r20
 800877c:	95008536 	bltu	r18,r20,8008994 <__sfvwrite_r+0x360>
 8008780:	1881200c 	andi	r2,r3,1152
 8008784:	10009d1e 	bne	r2,zero,80089fc <__sfvwrite_r+0x3c8>
 8008788:	81000017 	ldw	r4,0(r16)
 800878c:	a039883a 	mov	fp,r20
 8008790:	9029883a 	mov	r20,r18
 8008794:	b80b883a 	mov	r5,r23
 8008798:	b00d883a 	mov	r6,r22
 800879c:	8008b880 	call	8008b88 <memmove>
 80087a0:	80c00217 	ldw	r3,8(r16)
 80087a4:	81000017 	ldw	r4,0(r16)
 80087a8:	9005883a 	mov	r2,r18
 80087ac:	1f39c83a 	sub	fp,r3,fp
 80087b0:	258f883a 	add	r7,r4,r22
 80087b4:	87000215 	stw	fp,8(r16)
 80087b8:	81c00015 	stw	r7,0(r16)
 80087bc:	98c00217 	ldw	r3,8(r19)
 80087c0:	b8af883a 	add	r23,r23,r2
 80087c4:	90a5c83a 	sub	r18,r18,r2
 80087c8:	1d05c83a 	sub	r2,r3,r20
 80087cc:	98800215 	stw	r2,8(r19)
 80087d0:	103fc326 	beq	r2,zero,80086e0 <__alt_data_end+0xfc0086e0>
 80087d4:	80c0030b 	ldhu	r3,12(r16)
 80087d8:	903fe41e 	bne	r18,zero,800876c <__alt_data_end+0xfc00876c>
 80087dc:	8dc00017 	ldw	r23,0(r17)
 80087e0:	8c800117 	ldw	r18,4(r17)
 80087e4:	8c400204 	addi	r17,r17,8
 80087e8:	003fdf06 	br	8008768 <__alt_data_end+0xfc008768>
 80087ec:	8008d400 	call	8008d40 <_realloc_r>
 80087f0:	102d883a 	mov	r22,r2
 80087f4:	1000a01e 	bne	r2,zero,8008a78 <__sfvwrite_r+0x444>
 80087f8:	81400417 	ldw	r5,16(r16)
 80087fc:	a809883a 	mov	r4,r21
 8008800:	80048340 	call	8004834 <_free_r>
 8008804:	00800304 	movi	r2,12
 8008808:	a8800015 	stw	r2,0(r21)
 800880c:	80c0030b 	ldhu	r3,12(r16)
 8008810:	00bfffc4 	movi	r2,-1
 8008814:	18c01014 	ori	r3,r3,64
 8008818:	80c0030d 	sth	r3,12(r16)
 800881c:	003fb106 	br	80086e4 <__alt_data_end+0xfc0086e4>
 8008820:	0029883a 	mov	r20,zero
 8008824:	0011883a 	mov	r8,zero
 8008828:	0039883a 	mov	fp,zero
 800882c:	0025883a 	mov	r18,zero
 8008830:	90001f26 	beq	r18,zero,80088b0 <__sfvwrite_r+0x27c>
 8008834:	40006826 	beq	r8,zero,80089d8 <__sfvwrite_r+0x3a4>
 8008838:	a02f883a 	mov	r23,r20
 800883c:	9500012e 	bgeu	r18,r20,8008844 <__sfvwrite_r+0x210>
 8008840:	902f883a 	mov	r23,r18
 8008844:	81000017 	ldw	r4,0(r16)
 8008848:	80800417 	ldw	r2,16(r16)
 800884c:	b82d883a 	mov	r22,r23
 8008850:	81800217 	ldw	r6,8(r16)
 8008854:	81c00517 	ldw	r7,20(r16)
 8008858:	1100022e 	bgeu	r2,r4,8008864 <__sfvwrite_r+0x230>
 800885c:	31c7883a 	add	r3,r6,r7
 8008860:	1dc01816 	blt	r3,r23,80088c4 <__sfvwrite_r+0x290>
 8008864:	b9c03f16 	blt	r23,r7,8008964 <__sfvwrite_r+0x330>
 8008868:	80800917 	ldw	r2,36(r16)
 800886c:	81400717 	ldw	r5,28(r16)
 8008870:	a809883a 	mov	r4,r21
 8008874:	da000115 	stw	r8,4(sp)
 8008878:	e00d883a 	mov	r6,fp
 800887c:	103ee83a 	callr	r2
 8008880:	102d883a 	mov	r22,r2
 8008884:	da000117 	ldw	r8,4(sp)
 8008888:	00bfe00e 	bge	zero,r2,800880c <__alt_data_end+0xfc00880c>
 800888c:	a5a9c83a 	sub	r20,r20,r22
 8008890:	a0001f26 	beq	r20,zero,8008910 <__sfvwrite_r+0x2dc>
 8008894:	98800217 	ldw	r2,8(r19)
 8008898:	e5b9883a 	add	fp,fp,r22
 800889c:	95a5c83a 	sub	r18,r18,r22
 80088a0:	15adc83a 	sub	r22,r2,r22
 80088a4:	9d800215 	stw	r22,8(r19)
 80088a8:	b03f8d26 	beq	r22,zero,80086e0 <__alt_data_end+0xfc0086e0>
 80088ac:	903fe11e 	bne	r18,zero,8008834 <__alt_data_end+0xfc008834>
 80088b0:	8f000017 	ldw	fp,0(r17)
 80088b4:	8c800117 	ldw	r18,4(r17)
 80088b8:	0011883a 	mov	r8,zero
 80088bc:	8c400204 	addi	r17,r17,8
 80088c0:	003fdb06 	br	8008830 <__alt_data_end+0xfc008830>
 80088c4:	180d883a 	mov	r6,r3
 80088c8:	e00b883a 	mov	r5,fp
 80088cc:	da000115 	stw	r8,4(sp)
 80088d0:	d8c00015 	stw	r3,0(sp)
 80088d4:	8008b880 	call	8008b88 <memmove>
 80088d8:	d8c00017 	ldw	r3,0(sp)
 80088dc:	80800017 	ldw	r2,0(r16)
 80088e0:	a809883a 	mov	r4,r21
 80088e4:	800b883a 	mov	r5,r16
 80088e8:	10c5883a 	add	r2,r2,r3
 80088ec:	80800015 	stw	r2,0(r16)
 80088f0:	d8c00015 	stw	r3,0(sp)
 80088f4:	80041180 	call	8004118 <_fflush_r>
 80088f8:	d8c00017 	ldw	r3,0(sp)
 80088fc:	da000117 	ldw	r8,4(sp)
 8008900:	103fc21e 	bne	r2,zero,800880c <__alt_data_end+0xfc00880c>
 8008904:	182d883a 	mov	r22,r3
 8008908:	a5a9c83a 	sub	r20,r20,r22
 800890c:	a03fe11e 	bne	r20,zero,8008894 <__alt_data_end+0xfc008894>
 8008910:	a809883a 	mov	r4,r21
 8008914:	800b883a 	mov	r5,r16
 8008918:	80041180 	call	8004118 <_fflush_r>
 800891c:	103fbb1e 	bne	r2,zero,800880c <__alt_data_end+0xfc00880c>
 8008920:	0011883a 	mov	r8,zero
 8008924:	003fdb06 	br	8008894 <__alt_data_end+0xfc008894>
 8008928:	81000017 	ldw	r4,0(r16)
 800892c:	80800417 	ldw	r2,16(r16)
 8008930:	1100012e 	bgeu	r2,r4,8008938 <__sfvwrite_r+0x304>
 8008934:	a4805a36 	bltu	r20,r18,8008aa0 <__sfvwrite_r+0x46c>
 8008938:	81c00517 	ldw	r7,20(r16)
 800893c:	91c01a36 	bltu	r18,r7,80089a8 <__sfvwrite_r+0x374>
 8008940:	80800917 	ldw	r2,36(r16)
 8008944:	81400717 	ldw	r5,28(r16)
 8008948:	a809883a 	mov	r4,r21
 800894c:	b80d883a 	mov	r6,r23
 8008950:	103ee83a 	callr	r2
 8008954:	1029883a 	mov	r20,r2
 8008958:	00bfac0e 	bge	zero,r2,800880c <__alt_data_end+0xfc00880c>
 800895c:	a005883a 	mov	r2,r20
 8008960:	003f9606 	br	80087bc <__alt_data_end+0xfc0087bc>
 8008964:	b80d883a 	mov	r6,r23
 8008968:	e00b883a 	mov	r5,fp
 800896c:	da000115 	stw	r8,4(sp)
 8008970:	8008b880 	call	8008b88 <memmove>
 8008974:	80800217 	ldw	r2,8(r16)
 8008978:	80c00017 	ldw	r3,0(r16)
 800897c:	da000117 	ldw	r8,4(sp)
 8008980:	15c5c83a 	sub	r2,r2,r23
 8008984:	1def883a 	add	r23,r3,r23
 8008988:	80800215 	stw	r2,8(r16)
 800898c:	85c00015 	stw	r23,0(r16)
 8008990:	003fbe06 	br	800888c <__alt_data_end+0xfc00888c>
 8008994:	81000017 	ldw	r4,0(r16)
 8008998:	9039883a 	mov	fp,r18
 800899c:	9029883a 	mov	r20,r18
 80089a0:	902d883a 	mov	r22,r18
 80089a4:	003f7b06 	br	8008794 <__alt_data_end+0xfc008794>
 80089a8:	b80b883a 	mov	r5,r23
 80089ac:	900d883a 	mov	r6,r18
 80089b0:	8008b880 	call	8008b88 <memmove>
 80089b4:	80c00217 	ldw	r3,8(r16)
 80089b8:	80800017 	ldw	r2,0(r16)
 80089bc:	9029883a 	mov	r20,r18
 80089c0:	1c87c83a 	sub	r3,r3,r18
 80089c4:	1485883a 	add	r2,r2,r18
 80089c8:	80800015 	stw	r2,0(r16)
 80089cc:	80c00215 	stw	r3,8(r16)
 80089d0:	9005883a 	mov	r2,r18
 80089d4:	003f7906 	br	80087bc <__alt_data_end+0xfc0087bc>
 80089d8:	e009883a 	mov	r4,fp
 80089dc:	01400284 	movi	r5,10
 80089e0:	900d883a 	mov	r6,r18
 80089e4:	80056d40 	call	80056d4 <memchr>
 80089e8:	10003826 	beq	r2,zero,8008acc <__sfvwrite_r+0x498>
 80089ec:	10800044 	addi	r2,r2,1
 80089f0:	1729c83a 	sub	r20,r2,fp
 80089f4:	02000044 	movi	r8,1
 80089f8:	003f8f06 	br	8008838 <__alt_data_end+0xfc008838>
 80089fc:	80800517 	ldw	r2,20(r16)
 8008a00:	81400417 	ldw	r5,16(r16)
 8008a04:	87000017 	ldw	fp,0(r16)
 8008a08:	10a9883a 	add	r20,r2,r2
 8008a0c:	a085883a 	add	r2,r20,r2
 8008a10:	1028d7fa 	srli	r20,r2,31
 8008a14:	e179c83a 	sub	fp,fp,r5
 8008a18:	e1000044 	addi	r4,fp,1
 8008a1c:	a085883a 	add	r2,r20,r2
 8008a20:	1029d07a 	srai	r20,r2,1
 8008a24:	2485883a 	add	r2,r4,r18
 8008a28:	a00d883a 	mov	r6,r20
 8008a2c:	a080022e 	bgeu	r20,r2,8008a38 <__sfvwrite_r+0x404>
 8008a30:	1029883a 	mov	r20,r2
 8008a34:	100d883a 	mov	r6,r2
 8008a38:	18c1000c 	andi	r3,r3,1024
 8008a3c:	a809883a 	mov	r4,r21
 8008a40:	183f6a26 	beq	r3,zero,80087ec <__alt_data_end+0xfc0087ec>
 8008a44:	300b883a 	mov	r5,r6
 8008a48:	8004f2c0 	call	8004f2c <_malloc_r>
 8008a4c:	102d883a 	mov	r22,r2
 8008a50:	103f6c26 	beq	r2,zero,8008804 <__alt_data_end+0xfc008804>
 8008a54:	81400417 	ldw	r5,16(r16)
 8008a58:	1009883a 	mov	r4,r2
 8008a5c:	e00d883a 	mov	r6,fp
 8008a60:	80057bc0 	call	80057bc <memcpy>
 8008a64:	8080030b 	ldhu	r2,12(r16)
 8008a68:	00fedfc4 	movi	r3,-1153
 8008a6c:	10c4703a 	and	r2,r2,r3
 8008a70:	10802014 	ori	r2,r2,128
 8008a74:	8080030d 	sth	r2,12(r16)
 8008a78:	b709883a 	add	r4,r22,fp
 8008a7c:	a707c83a 	sub	r3,r20,fp
 8008a80:	85800415 	stw	r22,16(r16)
 8008a84:	85000515 	stw	r20,20(r16)
 8008a88:	81000015 	stw	r4,0(r16)
 8008a8c:	9039883a 	mov	fp,r18
 8008a90:	80c00215 	stw	r3,8(r16)
 8008a94:	9029883a 	mov	r20,r18
 8008a98:	902d883a 	mov	r22,r18
 8008a9c:	003f3d06 	br	8008794 <__alt_data_end+0xfc008794>
 8008aa0:	b80b883a 	mov	r5,r23
 8008aa4:	a00d883a 	mov	r6,r20
 8008aa8:	8008b880 	call	8008b88 <memmove>
 8008aac:	80800017 	ldw	r2,0(r16)
 8008ab0:	a809883a 	mov	r4,r21
 8008ab4:	800b883a 	mov	r5,r16
 8008ab8:	1505883a 	add	r2,r2,r20
 8008abc:	80800015 	stw	r2,0(r16)
 8008ac0:	80041180 	call	8004118 <_fflush_r>
 8008ac4:	103fa526 	beq	r2,zero,800895c <__alt_data_end+0xfc00895c>
 8008ac8:	003f5006 	br	800880c <__alt_data_end+0xfc00880c>
 8008acc:	95000044 	addi	r20,r18,1
 8008ad0:	02000044 	movi	r8,1
 8008ad4:	003f5806 	br	8008838 <__alt_data_end+0xfc008838>

08008ad8 <_isatty_r>:
 8008ad8:	defffd04 	addi	sp,sp,-12
 8008adc:	dc000015 	stw	r16,0(sp)
 8008ae0:	04020074 	movhi	r16,2049
 8008ae4:	dc400115 	stw	r17,4(sp)
 8008ae8:	840bbe04 	addi	r16,r16,12024
 8008aec:	2023883a 	mov	r17,r4
 8008af0:	2809883a 	mov	r4,r5
 8008af4:	dfc00215 	stw	ra,8(sp)
 8008af8:	80000015 	stw	zero,0(r16)
 8008afc:	800cb680 	call	800cb68 <isatty>
 8008b00:	00ffffc4 	movi	r3,-1
 8008b04:	10c00526 	beq	r2,r3,8008b1c <_isatty_r+0x44>
 8008b08:	dfc00217 	ldw	ra,8(sp)
 8008b0c:	dc400117 	ldw	r17,4(sp)
 8008b10:	dc000017 	ldw	r16,0(sp)
 8008b14:	dec00304 	addi	sp,sp,12
 8008b18:	f800283a 	ret
 8008b1c:	80c00017 	ldw	r3,0(r16)
 8008b20:	183ff926 	beq	r3,zero,8008b08 <__alt_data_end+0xfc008b08>
 8008b24:	88c00015 	stw	r3,0(r17)
 8008b28:	003ff706 	br	8008b08 <__alt_data_end+0xfc008b08>

08008b2c <_lseek_r>:
 8008b2c:	defffd04 	addi	sp,sp,-12
 8008b30:	dc000015 	stw	r16,0(sp)
 8008b34:	04020074 	movhi	r16,2049
 8008b38:	dc400115 	stw	r17,4(sp)
 8008b3c:	840bbe04 	addi	r16,r16,12024
 8008b40:	2023883a 	mov	r17,r4
 8008b44:	2809883a 	mov	r4,r5
 8008b48:	300b883a 	mov	r5,r6
 8008b4c:	380d883a 	mov	r6,r7
 8008b50:	dfc00215 	stw	ra,8(sp)
 8008b54:	80000015 	stw	zero,0(r16)
 8008b58:	800cd400 	call	800cd40 <lseek>
 8008b5c:	00ffffc4 	movi	r3,-1
 8008b60:	10c00526 	beq	r2,r3,8008b78 <_lseek_r+0x4c>
 8008b64:	dfc00217 	ldw	ra,8(sp)
 8008b68:	dc400117 	ldw	r17,4(sp)
 8008b6c:	dc000017 	ldw	r16,0(sp)
 8008b70:	dec00304 	addi	sp,sp,12
 8008b74:	f800283a 	ret
 8008b78:	80c00017 	ldw	r3,0(r16)
 8008b7c:	183ff926 	beq	r3,zero,8008b64 <__alt_data_end+0xfc008b64>
 8008b80:	88c00015 	stw	r3,0(r17)
 8008b84:	003ff706 	br	8008b64 <__alt_data_end+0xfc008b64>

08008b88 <memmove>:
 8008b88:	2005883a 	mov	r2,r4
 8008b8c:	29000b2e 	bgeu	r5,r4,8008bbc <memmove+0x34>
 8008b90:	298f883a 	add	r7,r5,r6
 8008b94:	21c0092e 	bgeu	r4,r7,8008bbc <memmove+0x34>
 8008b98:	2187883a 	add	r3,r4,r6
 8008b9c:	198bc83a 	sub	r5,r3,r6
 8008ba0:	30004b26 	beq	r6,zero,8008cd0 <memmove+0x148>
 8008ba4:	39ffffc4 	addi	r7,r7,-1
 8008ba8:	39000003 	ldbu	r4,0(r7)
 8008bac:	18ffffc4 	addi	r3,r3,-1
 8008bb0:	19000005 	stb	r4,0(r3)
 8008bb4:	197ffb1e 	bne	r3,r5,8008ba4 <__alt_data_end+0xfc008ba4>
 8008bb8:	f800283a 	ret
 8008bbc:	00c003c4 	movi	r3,15
 8008bc0:	1980412e 	bgeu	r3,r6,8008cc8 <memmove+0x140>
 8008bc4:	1146b03a 	or	r3,r2,r5
 8008bc8:	18c000cc 	andi	r3,r3,3
 8008bcc:	1800411e 	bne	r3,zero,8008cd4 <memmove+0x14c>
 8008bd0:	33fffc04 	addi	r15,r6,-16
 8008bd4:	781ed13a 	srli	r15,r15,4
 8008bd8:	28c00104 	addi	r3,r5,4
 8008bdc:	13400104 	addi	r13,r2,4
 8008be0:	781c913a 	slli	r14,r15,4
 8008be4:	2b000204 	addi	r12,r5,8
 8008be8:	12c00204 	addi	r11,r2,8
 8008bec:	73800504 	addi	r14,r14,20
 8008bf0:	2a800304 	addi	r10,r5,12
 8008bf4:	12400304 	addi	r9,r2,12
 8008bf8:	2b9d883a 	add	r14,r5,r14
 8008bfc:	2811883a 	mov	r8,r5
 8008c00:	100f883a 	mov	r7,r2
 8008c04:	41000017 	ldw	r4,0(r8)
 8008c08:	39c00404 	addi	r7,r7,16
 8008c0c:	18c00404 	addi	r3,r3,16
 8008c10:	393ffc15 	stw	r4,-16(r7)
 8008c14:	193ffc17 	ldw	r4,-16(r3)
 8008c18:	6b400404 	addi	r13,r13,16
 8008c1c:	5ac00404 	addi	r11,r11,16
 8008c20:	693ffc15 	stw	r4,-16(r13)
 8008c24:	61000017 	ldw	r4,0(r12)
 8008c28:	4a400404 	addi	r9,r9,16
 8008c2c:	42000404 	addi	r8,r8,16
 8008c30:	593ffc15 	stw	r4,-16(r11)
 8008c34:	51000017 	ldw	r4,0(r10)
 8008c38:	63000404 	addi	r12,r12,16
 8008c3c:	52800404 	addi	r10,r10,16
 8008c40:	493ffc15 	stw	r4,-16(r9)
 8008c44:	1bbfef1e 	bne	r3,r14,8008c04 <__alt_data_end+0xfc008c04>
 8008c48:	79000044 	addi	r4,r15,1
 8008c4c:	2008913a 	slli	r4,r4,4
 8008c50:	328003cc 	andi	r10,r6,15
 8008c54:	02c000c4 	movi	r11,3
 8008c58:	1107883a 	add	r3,r2,r4
 8008c5c:	290b883a 	add	r5,r5,r4
 8008c60:	5a801e2e 	bgeu	r11,r10,8008cdc <memmove+0x154>
 8008c64:	1813883a 	mov	r9,r3
 8008c68:	2811883a 	mov	r8,r5
 8008c6c:	500f883a 	mov	r7,r10
 8008c70:	41000017 	ldw	r4,0(r8)
 8008c74:	4a400104 	addi	r9,r9,4
 8008c78:	39ffff04 	addi	r7,r7,-4
 8008c7c:	493fff15 	stw	r4,-4(r9)
 8008c80:	42000104 	addi	r8,r8,4
 8008c84:	59fffa36 	bltu	r11,r7,8008c70 <__alt_data_end+0xfc008c70>
 8008c88:	513fff04 	addi	r4,r10,-4
 8008c8c:	2008d0ba 	srli	r4,r4,2
 8008c90:	318000cc 	andi	r6,r6,3
 8008c94:	21000044 	addi	r4,r4,1
 8008c98:	2109883a 	add	r4,r4,r4
 8008c9c:	2109883a 	add	r4,r4,r4
 8008ca0:	1907883a 	add	r3,r3,r4
 8008ca4:	290b883a 	add	r5,r5,r4
 8008ca8:	30000926 	beq	r6,zero,8008cd0 <memmove+0x148>
 8008cac:	198d883a 	add	r6,r3,r6
 8008cb0:	29c00003 	ldbu	r7,0(r5)
 8008cb4:	18c00044 	addi	r3,r3,1
 8008cb8:	29400044 	addi	r5,r5,1
 8008cbc:	19ffffc5 	stb	r7,-1(r3)
 8008cc0:	19bffb1e 	bne	r3,r6,8008cb0 <__alt_data_end+0xfc008cb0>
 8008cc4:	f800283a 	ret
 8008cc8:	1007883a 	mov	r3,r2
 8008ccc:	003ff606 	br	8008ca8 <__alt_data_end+0xfc008ca8>
 8008cd0:	f800283a 	ret
 8008cd4:	1007883a 	mov	r3,r2
 8008cd8:	003ff406 	br	8008cac <__alt_data_end+0xfc008cac>
 8008cdc:	500d883a 	mov	r6,r10
 8008ce0:	003ff106 	br	8008ca8 <__alt_data_end+0xfc008ca8>

08008ce4 <_read_r>:
 8008ce4:	defffd04 	addi	sp,sp,-12
 8008ce8:	dc000015 	stw	r16,0(sp)
 8008cec:	04020074 	movhi	r16,2049
 8008cf0:	dc400115 	stw	r17,4(sp)
 8008cf4:	840bbe04 	addi	r16,r16,12024
 8008cf8:	2023883a 	mov	r17,r4
 8008cfc:	2809883a 	mov	r4,r5
 8008d00:	300b883a 	mov	r5,r6
 8008d04:	380d883a 	mov	r6,r7
 8008d08:	dfc00215 	stw	ra,8(sp)
 8008d0c:	80000015 	stw	zero,0(r16)
 8008d10:	800cf1c0 	call	800cf1c <read>
 8008d14:	00ffffc4 	movi	r3,-1
 8008d18:	10c00526 	beq	r2,r3,8008d30 <_read_r+0x4c>
 8008d1c:	dfc00217 	ldw	ra,8(sp)
 8008d20:	dc400117 	ldw	r17,4(sp)
 8008d24:	dc000017 	ldw	r16,0(sp)
 8008d28:	dec00304 	addi	sp,sp,12
 8008d2c:	f800283a 	ret
 8008d30:	80c00017 	ldw	r3,0(r16)
 8008d34:	183ff926 	beq	r3,zero,8008d1c <__alt_data_end+0xfc008d1c>
 8008d38:	88c00015 	stw	r3,0(r17)
 8008d3c:	003ff706 	br	8008d1c <__alt_data_end+0xfc008d1c>

08008d40 <_realloc_r>:
 8008d40:	defff604 	addi	sp,sp,-40
 8008d44:	dcc00315 	stw	r19,12(sp)
 8008d48:	dc400115 	stw	r17,4(sp)
 8008d4c:	dfc00915 	stw	ra,36(sp)
 8008d50:	df000815 	stw	fp,32(sp)
 8008d54:	ddc00715 	stw	r23,28(sp)
 8008d58:	dd800615 	stw	r22,24(sp)
 8008d5c:	dd400515 	stw	r21,20(sp)
 8008d60:	dd000415 	stw	r20,16(sp)
 8008d64:	dc800215 	stw	r18,8(sp)
 8008d68:	dc000015 	stw	r16,0(sp)
 8008d6c:	2827883a 	mov	r19,r5
 8008d70:	3023883a 	mov	r17,r6
 8008d74:	2800bf26 	beq	r5,zero,8009074 <_realloc_r+0x334>
 8008d78:	2025883a 	mov	r18,r4
 8008d7c:	800ce8c0 	call	800ce8c <__malloc_lock>
 8008d80:	98ffff17 	ldw	r3,-4(r19)
 8008d84:	01bfff04 	movi	r6,-4
 8008d88:	890002c4 	addi	r4,r17,11
 8008d8c:	01c00584 	movi	r7,22
 8008d90:	9d7ffe04 	addi	r21,r19,-8
 8008d94:	19a0703a 	and	r16,r3,r6
 8008d98:	39003f2e 	bgeu	r7,r4,8008e98 <_realloc_r+0x158>
 8008d9c:	053ffe04 	movi	r20,-8
 8008da0:	2528703a 	and	r20,r4,r20
 8008da4:	a00f883a 	mov	r7,r20
 8008da8:	a0008216 	blt	r20,zero,8008fb4 <_realloc_r+0x274>
 8008dac:	a4408136 	bltu	r20,r17,8008fb4 <_realloc_r+0x274>
 8008db0:	81c03c0e 	bge	r16,r7,8008ea4 <_realloc_r+0x164>
 8008db4:	07020074 	movhi	fp,2049
 8008db8:	e73f5304 	addi	fp,fp,-692
 8008dbc:	e1000217 	ldw	r4,8(fp)
 8008dc0:	ac05883a 	add	r2,r21,r16
 8008dc4:	2080bf26 	beq	r4,r2,80090c4 <_realloc_r+0x384>
 8008dc8:	11000117 	ldw	r4,4(r2)
 8008dcc:	023fff84 	movi	r8,-2
 8008dd0:	2210703a 	and	r8,r4,r8
 8008dd4:	1211883a 	add	r8,r2,r8
 8008dd8:	41400117 	ldw	r5,4(r8)
 8008ddc:	2940004c 	andi	r5,r5,1
 8008de0:	28004a1e 	bne	r5,zero,8008f0c <_realloc_r+0x1cc>
 8008de4:	017fff04 	movi	r5,-4
 8008de8:	2148703a 	and	r4,r4,r5
 8008dec:	2409883a 	add	r4,r4,r16
 8008df0:	21c0ad0e 	bge	r4,r7,80090a8 <_realloc_r+0x368>
 8008df4:	18c0004c 	andi	r3,r3,1
 8008df8:	18007f1e 	bne	r3,zero,8008ff8 <_realloc_r+0x2b8>
 8008dfc:	9dfffe17 	ldw	r23,-8(r19)
 8008e00:	adefc83a 	sub	r23,r21,r23
 8008e04:	bd800117 	ldw	r22,4(r23)
 8008e08:	b14a703a 	and	r5,r22,r5
 8008e0c:	216d883a 	add	r22,r4,r5
 8008e10:	b1c04516 	blt	r22,r7,8008f28 <_realloc_r+0x1e8>
 8008e14:	10c00317 	ldw	r3,12(r2)
 8008e18:	10800217 	ldw	r2,8(r2)
 8008e1c:	81bfff04 	addi	r6,r16,-4
 8008e20:	bc400204 	addi	r17,r23,8
 8008e24:	10c00315 	stw	r3,12(r2)
 8008e28:	18800215 	stw	r2,8(r3)
 8008e2c:	b9400217 	ldw	r5,8(r23)
 8008e30:	b8c00317 	ldw	r3,12(r23)
 8008e34:	00800904 	movi	r2,36
 8008e38:	28c00315 	stw	r3,12(r5)
 8008e3c:	19400215 	stw	r5,8(r3)
 8008e40:	1180ef36 	bltu	r2,r6,8009200 <_realloc_r+0x4c0>
 8008e44:	008004c4 	movi	r2,19
 8008e48:	1180da2e 	bgeu	r2,r6,80091b4 <_realloc_r+0x474>
 8008e4c:	98800017 	ldw	r2,0(r19)
 8008e50:	b8800215 	stw	r2,8(r23)
 8008e54:	98800117 	ldw	r2,4(r19)
 8008e58:	b8800315 	stw	r2,12(r23)
 8008e5c:	008006c4 	movi	r2,27
 8008e60:	1180fc2e 	bgeu	r2,r6,8009254 <_realloc_r+0x514>
 8008e64:	98800217 	ldw	r2,8(r19)
 8008e68:	b8800415 	stw	r2,16(r23)
 8008e6c:	98800317 	ldw	r2,12(r19)
 8008e70:	b8800515 	stw	r2,20(r23)
 8008e74:	00800904 	movi	r2,36
 8008e78:	3080421e 	bne	r6,r2,8008f84 <_realloc_r+0x244>
 8008e7c:	98800417 	ldw	r2,16(r19)
 8008e80:	9cc00604 	addi	r19,r19,24
 8008e84:	b8c00804 	addi	r3,r23,32
 8008e88:	b8800615 	stw	r2,24(r23)
 8008e8c:	98bfff17 	ldw	r2,-4(r19)
 8008e90:	b8800715 	stw	r2,28(r23)
 8008e94:	00003d06 	br	8008f8c <_realloc_r+0x24c>
 8008e98:	01c00404 	movi	r7,16
 8008e9c:	3829883a 	mov	r20,r7
 8008ea0:	003fc206 	br	8008dac <__alt_data_end+0xfc008dac>
 8008ea4:	9823883a 	mov	r17,r19
 8008ea8:	850fc83a 	sub	r7,r16,r20
 8008eac:	008003c4 	movi	r2,15
 8008eb0:	18c0004c 	andi	r3,r3,1
 8008eb4:	11c04336 	bltu	r2,r7,8008fc4 <_realloc_r+0x284>
 8008eb8:	1c06b03a 	or	r3,r3,r16
 8008ebc:	a8c00115 	stw	r3,4(r21)
 8008ec0:	ac21883a 	add	r16,r21,r16
 8008ec4:	80c00117 	ldw	r3,4(r16)
 8008ec8:	18c00054 	ori	r3,r3,1
 8008ecc:	80c00115 	stw	r3,4(r16)
 8008ed0:	9009883a 	mov	r4,r18
 8008ed4:	800ceac0 	call	800ceac <__malloc_unlock>
 8008ed8:	8805883a 	mov	r2,r17
 8008edc:	dfc00917 	ldw	ra,36(sp)
 8008ee0:	df000817 	ldw	fp,32(sp)
 8008ee4:	ddc00717 	ldw	r23,28(sp)
 8008ee8:	dd800617 	ldw	r22,24(sp)
 8008eec:	dd400517 	ldw	r21,20(sp)
 8008ef0:	dd000417 	ldw	r20,16(sp)
 8008ef4:	dcc00317 	ldw	r19,12(sp)
 8008ef8:	dc800217 	ldw	r18,8(sp)
 8008efc:	dc400117 	ldw	r17,4(sp)
 8008f00:	dc000017 	ldw	r16,0(sp)
 8008f04:	dec00a04 	addi	sp,sp,40
 8008f08:	f800283a 	ret
 8008f0c:	18c0004c 	andi	r3,r3,1
 8008f10:	1800391e 	bne	r3,zero,8008ff8 <_realloc_r+0x2b8>
 8008f14:	9dfffe17 	ldw	r23,-8(r19)
 8008f18:	00bfff04 	movi	r2,-4
 8008f1c:	adefc83a 	sub	r23,r21,r23
 8008f20:	b9400117 	ldw	r5,4(r23)
 8008f24:	288a703a 	and	r5,r5,r2
 8008f28:	2c2d883a 	add	r22,r5,r16
 8008f2c:	b1c03216 	blt	r22,r7,8008ff8 <_realloc_r+0x2b8>
 8008f30:	b8800317 	ldw	r2,12(r23)
 8008f34:	b8c00217 	ldw	r3,8(r23)
 8008f38:	81bfff04 	addi	r6,r16,-4
 8008f3c:	01000904 	movi	r4,36
 8008f40:	18800315 	stw	r2,12(r3)
 8008f44:	10c00215 	stw	r3,8(r2)
 8008f48:	bc400204 	addi	r17,r23,8
 8008f4c:	2180ac36 	bltu	r4,r6,8009200 <_realloc_r+0x4c0>
 8008f50:	008004c4 	movi	r2,19
 8008f54:	1180972e 	bgeu	r2,r6,80091b4 <_realloc_r+0x474>
 8008f58:	98800017 	ldw	r2,0(r19)
 8008f5c:	b8800215 	stw	r2,8(r23)
 8008f60:	98800117 	ldw	r2,4(r19)
 8008f64:	b8800315 	stw	r2,12(r23)
 8008f68:	008006c4 	movi	r2,27
 8008f6c:	1180b92e 	bgeu	r2,r6,8009254 <_realloc_r+0x514>
 8008f70:	98800217 	ldw	r2,8(r19)
 8008f74:	b8800415 	stw	r2,16(r23)
 8008f78:	98800317 	ldw	r2,12(r19)
 8008f7c:	b8800515 	stw	r2,20(r23)
 8008f80:	313fbe26 	beq	r6,r4,8008e7c <__alt_data_end+0xfc008e7c>
 8008f84:	b8c00604 	addi	r3,r23,24
 8008f88:	9cc00404 	addi	r19,r19,16
 8008f8c:	98800017 	ldw	r2,0(r19)
 8008f90:	b021883a 	mov	r16,r22
 8008f94:	b82b883a 	mov	r21,r23
 8008f98:	18800015 	stw	r2,0(r3)
 8008f9c:	98800117 	ldw	r2,4(r19)
 8008fa0:	18800115 	stw	r2,4(r3)
 8008fa4:	98800217 	ldw	r2,8(r19)
 8008fa8:	18800215 	stw	r2,8(r3)
 8008fac:	b8c00117 	ldw	r3,4(r23)
 8008fb0:	003fbd06 	br	8008ea8 <__alt_data_end+0xfc008ea8>
 8008fb4:	00800304 	movi	r2,12
 8008fb8:	90800015 	stw	r2,0(r18)
 8008fbc:	0005883a 	mov	r2,zero
 8008fc0:	003fc606 	br	8008edc <__alt_data_end+0xfc008edc>
 8008fc4:	1d06b03a 	or	r3,r3,r20
 8008fc8:	ad0b883a 	add	r5,r21,r20
 8008fcc:	a8c00115 	stw	r3,4(r21)
 8008fd0:	38800054 	ori	r2,r7,1
 8008fd4:	28800115 	stw	r2,4(r5)
 8008fd8:	29cf883a 	add	r7,r5,r7
 8008fdc:	38800117 	ldw	r2,4(r7)
 8008fe0:	9009883a 	mov	r4,r18
 8008fe4:	29400204 	addi	r5,r5,8
 8008fe8:	10800054 	ori	r2,r2,1
 8008fec:	38800115 	stw	r2,4(r7)
 8008ff0:	80048340 	call	8004834 <_free_r>
 8008ff4:	003fb606 	br	8008ed0 <__alt_data_end+0xfc008ed0>
 8008ff8:	880b883a 	mov	r5,r17
 8008ffc:	9009883a 	mov	r4,r18
 8009000:	8004f2c0 	call	8004f2c <_malloc_r>
 8009004:	1023883a 	mov	r17,r2
 8009008:	1000aa26 	beq	r2,zero,80092b4 <_realloc_r+0x574>
 800900c:	98ffff17 	ldw	r3,-4(r19)
 8009010:	113ffe04 	addi	r4,r2,-8
 8009014:	00bfff84 	movi	r2,-2
 8009018:	1884703a 	and	r2,r3,r2
 800901c:	a885883a 	add	r2,r21,r2
 8009020:	20808626 	beq	r4,r2,800923c <_realloc_r+0x4fc>
 8009024:	81bfff04 	addi	r6,r16,-4
 8009028:	00800904 	movi	r2,36
 800902c:	11807036 	bltu	r2,r6,80091f0 <_realloc_r+0x4b0>
 8009030:	00c004c4 	movi	r3,19
 8009034:	19805636 	bltu	r3,r6,8009190 <_realloc_r+0x450>
 8009038:	8805883a 	mov	r2,r17
 800903c:	9807883a 	mov	r3,r19
 8009040:	19000017 	ldw	r4,0(r3)
 8009044:	11000015 	stw	r4,0(r2)
 8009048:	19000117 	ldw	r4,4(r3)
 800904c:	11000115 	stw	r4,4(r2)
 8009050:	18c00217 	ldw	r3,8(r3)
 8009054:	10c00215 	stw	r3,8(r2)
 8009058:	980b883a 	mov	r5,r19
 800905c:	9009883a 	mov	r4,r18
 8009060:	80048340 	call	8004834 <_free_r>
 8009064:	9009883a 	mov	r4,r18
 8009068:	800ceac0 	call	800ceac <__malloc_unlock>
 800906c:	8805883a 	mov	r2,r17
 8009070:	003f9a06 	br	8008edc <__alt_data_end+0xfc008edc>
 8009074:	300b883a 	mov	r5,r6
 8009078:	dfc00917 	ldw	ra,36(sp)
 800907c:	df000817 	ldw	fp,32(sp)
 8009080:	ddc00717 	ldw	r23,28(sp)
 8009084:	dd800617 	ldw	r22,24(sp)
 8009088:	dd400517 	ldw	r21,20(sp)
 800908c:	dd000417 	ldw	r20,16(sp)
 8009090:	dcc00317 	ldw	r19,12(sp)
 8009094:	dc800217 	ldw	r18,8(sp)
 8009098:	dc400117 	ldw	r17,4(sp)
 800909c:	dc000017 	ldw	r16,0(sp)
 80090a0:	dec00a04 	addi	sp,sp,40
 80090a4:	8004f2c1 	jmpi	8004f2c <_malloc_r>
 80090a8:	11400317 	ldw	r5,12(r2)
 80090ac:	10800217 	ldw	r2,8(r2)
 80090b0:	9823883a 	mov	r17,r19
 80090b4:	2021883a 	mov	r16,r4
 80090b8:	11400315 	stw	r5,12(r2)
 80090bc:	28800215 	stw	r2,8(r5)
 80090c0:	003f7906 	br	8008ea8 <__alt_data_end+0xfc008ea8>
 80090c4:	21000117 	ldw	r4,4(r4)
 80090c8:	00bfff04 	movi	r2,-4
 80090cc:	a1800404 	addi	r6,r20,16
 80090d0:	2088703a 	and	r4,r4,r2
 80090d4:	2409883a 	add	r4,r4,r16
 80090d8:	2180380e 	bge	r4,r6,80091bc <_realloc_r+0x47c>
 80090dc:	18c0004c 	andi	r3,r3,1
 80090e0:	183fc51e 	bne	r3,zero,8008ff8 <__alt_data_end+0xfc008ff8>
 80090e4:	9dfffe17 	ldw	r23,-8(r19)
 80090e8:	adefc83a 	sub	r23,r21,r23
 80090ec:	b9400117 	ldw	r5,4(r23)
 80090f0:	288a703a 	and	r5,r5,r2
 80090f4:	216d883a 	add	r22,r4,r5
 80090f8:	b1bf8b16 	blt	r22,r6,8008f28 <__alt_data_end+0xfc008f28>
 80090fc:	b8800317 	ldw	r2,12(r23)
 8009100:	b8c00217 	ldw	r3,8(r23)
 8009104:	81bfff04 	addi	r6,r16,-4
 8009108:	01000904 	movi	r4,36
 800910c:	18800315 	stw	r2,12(r3)
 8009110:	10c00215 	stw	r3,8(r2)
 8009114:	bc400204 	addi	r17,r23,8
 8009118:	21805a36 	bltu	r4,r6,8009284 <_realloc_r+0x544>
 800911c:	008004c4 	movi	r2,19
 8009120:	1180562e 	bgeu	r2,r6,800927c <_realloc_r+0x53c>
 8009124:	98800017 	ldw	r2,0(r19)
 8009128:	b8800215 	stw	r2,8(r23)
 800912c:	98800117 	ldw	r2,4(r19)
 8009130:	b8800315 	stw	r2,12(r23)
 8009134:	008006c4 	movi	r2,27
 8009138:	11805636 	bltu	r2,r6,8009294 <_realloc_r+0x554>
 800913c:	b8800404 	addi	r2,r23,16
 8009140:	9cc00204 	addi	r19,r19,8
 8009144:	98c00017 	ldw	r3,0(r19)
 8009148:	10c00015 	stw	r3,0(r2)
 800914c:	98c00117 	ldw	r3,4(r19)
 8009150:	10c00115 	stw	r3,4(r2)
 8009154:	98c00217 	ldw	r3,8(r19)
 8009158:	10c00215 	stw	r3,8(r2)
 800915c:	bd07883a 	add	r3,r23,r20
 8009160:	b505c83a 	sub	r2,r22,r20
 8009164:	e0c00215 	stw	r3,8(fp)
 8009168:	10800054 	ori	r2,r2,1
 800916c:	18800115 	stw	r2,4(r3)
 8009170:	b8800117 	ldw	r2,4(r23)
 8009174:	9009883a 	mov	r4,r18
 8009178:	1080004c 	andi	r2,r2,1
 800917c:	a0a8b03a 	or	r20,r20,r2
 8009180:	bd000115 	stw	r20,4(r23)
 8009184:	800ceac0 	call	800ceac <__malloc_unlock>
 8009188:	8805883a 	mov	r2,r17
 800918c:	003f5306 	br	8008edc <__alt_data_end+0xfc008edc>
 8009190:	98c00017 	ldw	r3,0(r19)
 8009194:	88c00015 	stw	r3,0(r17)
 8009198:	98c00117 	ldw	r3,4(r19)
 800919c:	88c00115 	stw	r3,4(r17)
 80091a0:	00c006c4 	movi	r3,27
 80091a4:	19801d36 	bltu	r3,r6,800921c <_realloc_r+0x4dc>
 80091a8:	88800204 	addi	r2,r17,8
 80091ac:	98c00204 	addi	r3,r19,8
 80091b0:	003fa306 	br	8009040 <__alt_data_end+0xfc009040>
 80091b4:	8807883a 	mov	r3,r17
 80091b8:	003f7406 	br	8008f8c <__alt_data_end+0xfc008f8c>
 80091bc:	ad2b883a 	add	r21,r21,r20
 80091c0:	2505c83a 	sub	r2,r4,r20
 80091c4:	e5400215 	stw	r21,8(fp)
 80091c8:	10800054 	ori	r2,r2,1
 80091cc:	a8800115 	stw	r2,4(r21)
 80091d0:	98bfff17 	ldw	r2,-4(r19)
 80091d4:	9009883a 	mov	r4,r18
 80091d8:	1080004c 	andi	r2,r2,1
 80091dc:	a0a8b03a 	or	r20,r20,r2
 80091e0:	9d3fff15 	stw	r20,-4(r19)
 80091e4:	800ceac0 	call	800ceac <__malloc_unlock>
 80091e8:	9805883a 	mov	r2,r19
 80091ec:	003f3b06 	br	8008edc <__alt_data_end+0xfc008edc>
 80091f0:	8809883a 	mov	r4,r17
 80091f4:	980b883a 	mov	r5,r19
 80091f8:	8008b880 	call	8008b88 <memmove>
 80091fc:	003f9606 	br	8009058 <__alt_data_end+0xfc009058>
 8009200:	8809883a 	mov	r4,r17
 8009204:	980b883a 	mov	r5,r19
 8009208:	8008b880 	call	8008b88 <memmove>
 800920c:	b8c00117 	ldw	r3,4(r23)
 8009210:	b021883a 	mov	r16,r22
 8009214:	b82b883a 	mov	r21,r23
 8009218:	003f2306 	br	8008ea8 <__alt_data_end+0xfc008ea8>
 800921c:	98c00217 	ldw	r3,8(r19)
 8009220:	88c00215 	stw	r3,8(r17)
 8009224:	98c00317 	ldw	r3,12(r19)
 8009228:	88c00315 	stw	r3,12(r17)
 800922c:	30800c26 	beq	r6,r2,8009260 <_realloc_r+0x520>
 8009230:	88800404 	addi	r2,r17,16
 8009234:	98c00404 	addi	r3,r19,16
 8009238:	003f8106 	br	8009040 <__alt_data_end+0xfc009040>
 800923c:	893fff17 	ldw	r4,-4(r17)
 8009240:	00bfff04 	movi	r2,-4
 8009244:	9823883a 	mov	r17,r19
 8009248:	2084703a 	and	r2,r4,r2
 800924c:	80a1883a 	add	r16,r16,r2
 8009250:	003f1506 	br	8008ea8 <__alt_data_end+0xfc008ea8>
 8009254:	b8c00404 	addi	r3,r23,16
 8009258:	9cc00204 	addi	r19,r19,8
 800925c:	003f4b06 	br	8008f8c <__alt_data_end+0xfc008f8c>
 8009260:	99000417 	ldw	r4,16(r19)
 8009264:	88800604 	addi	r2,r17,24
 8009268:	98c00604 	addi	r3,r19,24
 800926c:	89000415 	stw	r4,16(r17)
 8009270:	99000517 	ldw	r4,20(r19)
 8009274:	89000515 	stw	r4,20(r17)
 8009278:	003f7106 	br	8009040 <__alt_data_end+0xfc009040>
 800927c:	8805883a 	mov	r2,r17
 8009280:	003fb006 	br	8009144 <__alt_data_end+0xfc009144>
 8009284:	8809883a 	mov	r4,r17
 8009288:	980b883a 	mov	r5,r19
 800928c:	8008b880 	call	8008b88 <memmove>
 8009290:	003fb206 	br	800915c <__alt_data_end+0xfc00915c>
 8009294:	98800217 	ldw	r2,8(r19)
 8009298:	b8800415 	stw	r2,16(r23)
 800929c:	98800317 	ldw	r2,12(r19)
 80092a0:	b8800515 	stw	r2,20(r23)
 80092a4:	31000726 	beq	r6,r4,80092c4 <_realloc_r+0x584>
 80092a8:	b8800604 	addi	r2,r23,24
 80092ac:	9cc00404 	addi	r19,r19,16
 80092b0:	003fa406 	br	8009144 <__alt_data_end+0xfc009144>
 80092b4:	9009883a 	mov	r4,r18
 80092b8:	800ceac0 	call	800ceac <__malloc_unlock>
 80092bc:	0005883a 	mov	r2,zero
 80092c0:	003f0606 	br	8008edc <__alt_data_end+0xfc008edc>
 80092c4:	98c00417 	ldw	r3,16(r19)
 80092c8:	9cc00604 	addi	r19,r19,24
 80092cc:	b8800804 	addi	r2,r23,32
 80092d0:	b8c00615 	stw	r3,24(r23)
 80092d4:	98ffff17 	ldw	r3,-4(r19)
 80092d8:	b8c00715 	stw	r3,28(r23)
 80092dc:	003f9906 	br	8009144 <__alt_data_end+0xfc009144>

080092e0 <__swbuf_r>:
 80092e0:	defffc04 	addi	sp,sp,-16
 80092e4:	dc800215 	stw	r18,8(sp)
 80092e8:	dc400115 	stw	r17,4(sp)
 80092ec:	dc000015 	stw	r16,0(sp)
 80092f0:	dfc00315 	stw	ra,12(sp)
 80092f4:	2025883a 	mov	r18,r4
 80092f8:	2823883a 	mov	r17,r5
 80092fc:	3021883a 	mov	r16,r6
 8009300:	20000226 	beq	r4,zero,800930c <__swbuf_r+0x2c>
 8009304:	20800e17 	ldw	r2,56(r4)
 8009308:	10004126 	beq	r2,zero,8009410 <__swbuf_r+0x130>
 800930c:	80c00617 	ldw	r3,24(r16)
 8009310:	8180030b 	ldhu	r6,12(r16)
 8009314:	80c00215 	stw	r3,8(r16)
 8009318:	30c0020c 	andi	r3,r6,8
 800931c:	18003526 	beq	r3,zero,80093f4 <__swbuf_r+0x114>
 8009320:	80c00417 	ldw	r3,16(r16)
 8009324:	18003326 	beq	r3,zero,80093f4 <__swbuf_r+0x114>
 8009328:	3088000c 	andi	r2,r6,8192
 800932c:	8c403fcc 	andi	r17,r17,255
 8009330:	10001726 	beq	r2,zero,8009390 <__swbuf_r+0xb0>
 8009334:	80800017 	ldw	r2,0(r16)
 8009338:	81000517 	ldw	r4,20(r16)
 800933c:	10c7c83a 	sub	r3,r2,r3
 8009340:	19001d0e 	bge	r3,r4,80093b8 <__swbuf_r+0xd8>
 8009344:	18c00044 	addi	r3,r3,1
 8009348:	81400217 	ldw	r5,8(r16)
 800934c:	11000044 	addi	r4,r2,1
 8009350:	81000015 	stw	r4,0(r16)
 8009354:	297fffc4 	addi	r5,r5,-1
 8009358:	81400215 	stw	r5,8(r16)
 800935c:	14400005 	stb	r17,0(r2)
 8009360:	80800517 	ldw	r2,20(r16)
 8009364:	10c01d26 	beq	r2,r3,80093dc <__swbuf_r+0xfc>
 8009368:	8080030b 	ldhu	r2,12(r16)
 800936c:	1080004c 	andi	r2,r2,1
 8009370:	1000181e 	bne	r2,zero,80093d4 <__swbuf_r+0xf4>
 8009374:	8805883a 	mov	r2,r17
 8009378:	dfc00317 	ldw	ra,12(sp)
 800937c:	dc800217 	ldw	r18,8(sp)
 8009380:	dc400117 	ldw	r17,4(sp)
 8009384:	dc000017 	ldw	r16,0(sp)
 8009388:	dec00404 	addi	sp,sp,16
 800938c:	f800283a 	ret
 8009390:	81001917 	ldw	r4,100(r16)
 8009394:	00b7ffc4 	movi	r2,-8193
 8009398:	31880014 	ori	r6,r6,8192
 800939c:	2084703a 	and	r2,r4,r2
 80093a0:	80801915 	stw	r2,100(r16)
 80093a4:	80800017 	ldw	r2,0(r16)
 80093a8:	81000517 	ldw	r4,20(r16)
 80093ac:	8180030d 	sth	r6,12(r16)
 80093b0:	10c7c83a 	sub	r3,r2,r3
 80093b4:	193fe316 	blt	r3,r4,8009344 <__alt_data_end+0xfc009344>
 80093b8:	9009883a 	mov	r4,r18
 80093bc:	800b883a 	mov	r5,r16
 80093c0:	80041180 	call	8004118 <_fflush_r>
 80093c4:	1000091e 	bne	r2,zero,80093ec <__swbuf_r+0x10c>
 80093c8:	80800017 	ldw	r2,0(r16)
 80093cc:	00c00044 	movi	r3,1
 80093d0:	003fdd06 	br	8009348 <__alt_data_end+0xfc009348>
 80093d4:	00800284 	movi	r2,10
 80093d8:	88bfe61e 	bne	r17,r2,8009374 <__alt_data_end+0xfc009374>
 80093dc:	9009883a 	mov	r4,r18
 80093e0:	800b883a 	mov	r5,r16
 80093e4:	80041180 	call	8004118 <_fflush_r>
 80093e8:	103fe226 	beq	r2,zero,8009374 <__alt_data_end+0xfc009374>
 80093ec:	00bfffc4 	movi	r2,-1
 80093f0:	003fe106 	br	8009378 <__alt_data_end+0xfc009378>
 80093f4:	9009883a 	mov	r4,r18
 80093f8:	800b883a 	mov	r5,r16
 80093fc:	80026c00 	call	80026c0 <__swsetup_r>
 8009400:	1000051e 	bne	r2,zero,8009418 <__swbuf_r+0x138>
 8009404:	8180030b 	ldhu	r6,12(r16)
 8009408:	80c00417 	ldw	r3,16(r16)
 800940c:	003fc606 	br	8009328 <__alt_data_end+0xfc009328>
 8009410:	80046c00 	call	80046c0 <__sinit>
 8009414:	003fbd06 	br	800930c <__alt_data_end+0xfc00930c>
 8009418:	80c0030b 	ldhu	r3,12(r16)
 800941c:	00bfffc4 	movi	r2,-1
 8009420:	18c01014 	ori	r3,r3,64
 8009424:	80c0030d 	sth	r3,12(r16)
 8009428:	00c00244 	movi	r3,9
 800942c:	90c00015 	stw	r3,0(r18)
 8009430:	003fd106 	br	8009378 <__alt_data_end+0xfc009378>

08009434 <__swbuf>:
 8009434:	00c20074 	movhi	r3,2049
 8009438:	18c4e304 	addi	r3,r3,5004
 800943c:	2005883a 	mov	r2,r4
 8009440:	19000017 	ldw	r4,0(r3)
 8009444:	280d883a 	mov	r6,r5
 8009448:	100b883a 	mov	r5,r2
 800944c:	80092e01 	jmpi	80092e0 <__swbuf_r>

08009450 <_wcrtomb_r>:
 8009450:	defff604 	addi	sp,sp,-40
 8009454:	00820074 	movhi	r2,2049
 8009458:	dc800815 	stw	r18,32(sp)
 800945c:	dc400715 	stw	r17,28(sp)
 8009460:	dc000615 	stw	r16,24(sp)
 8009464:	1084e704 	addi	r2,r2,5020
 8009468:	dfc00915 	stw	ra,36(sp)
 800946c:	2021883a 	mov	r16,r4
 8009470:	3823883a 	mov	r17,r7
 8009474:	14800017 	ldw	r18,0(r2)
 8009478:	28001426 	beq	r5,zero,80094cc <_wcrtomb_r+0x7c>
 800947c:	d9400415 	stw	r5,16(sp)
 8009480:	d9800515 	stw	r6,20(sp)
 8009484:	8004d100 	call	8004d10 <__locale_charset>
 8009488:	d9400417 	ldw	r5,16(sp)
 800948c:	d9800517 	ldw	r6,20(sp)
 8009490:	8009883a 	mov	r4,r16
 8009494:	dc400015 	stw	r17,0(sp)
 8009498:	100f883a 	mov	r7,r2
 800949c:	903ee83a 	callr	r18
 80094a0:	00ffffc4 	movi	r3,-1
 80094a4:	10c0031e 	bne	r2,r3,80094b4 <_wcrtomb_r+0x64>
 80094a8:	88000015 	stw	zero,0(r17)
 80094ac:	00c02284 	movi	r3,138
 80094b0:	80c00015 	stw	r3,0(r16)
 80094b4:	dfc00917 	ldw	ra,36(sp)
 80094b8:	dc800817 	ldw	r18,32(sp)
 80094bc:	dc400717 	ldw	r17,28(sp)
 80094c0:	dc000617 	ldw	r16,24(sp)
 80094c4:	dec00a04 	addi	sp,sp,40
 80094c8:	f800283a 	ret
 80094cc:	8004d100 	call	8004d10 <__locale_charset>
 80094d0:	8009883a 	mov	r4,r16
 80094d4:	dc400015 	stw	r17,0(sp)
 80094d8:	d9400104 	addi	r5,sp,4
 80094dc:	000d883a 	mov	r6,zero
 80094e0:	100f883a 	mov	r7,r2
 80094e4:	903ee83a 	callr	r18
 80094e8:	003fed06 	br	80094a0 <__alt_data_end+0xfc0094a0>

080094ec <wcrtomb>:
 80094ec:	defff504 	addi	sp,sp,-44
 80094f0:	dc400515 	stw	r17,20(sp)
 80094f4:	dc000415 	stw	r16,16(sp)
 80094f8:	dfc00a15 	stw	ra,40(sp)
 80094fc:	dd400915 	stw	r21,36(sp)
 8009500:	dd000815 	stw	r20,32(sp)
 8009504:	dcc00715 	stw	r19,28(sp)
 8009508:	dc800615 	stw	r18,24(sp)
 800950c:	2021883a 	mov	r16,r4
 8009510:	3023883a 	mov	r17,r6
 8009514:	20001d26 	beq	r4,zero,800958c <wcrtomb+0xa0>
 8009518:	04820074 	movhi	r18,2049
 800951c:	9484e304 	addi	r18,r18,5004
 8009520:	00820074 	movhi	r2,2049
 8009524:	95400017 	ldw	r21,0(r18)
 8009528:	1084e704 	addi	r2,r2,5020
 800952c:	15000017 	ldw	r20,0(r2)
 8009530:	2827883a 	mov	r19,r5
 8009534:	8004d100 	call	8004d10 <__locale_charset>
 8009538:	a809883a 	mov	r4,r21
 800953c:	dc400015 	stw	r17,0(sp)
 8009540:	800b883a 	mov	r5,r16
 8009544:	980d883a 	mov	r6,r19
 8009548:	100f883a 	mov	r7,r2
 800954c:	a03ee83a 	callr	r20
 8009550:	00ffffc4 	movi	r3,-1
 8009554:	10c0041e 	bne	r2,r3,8009568 <wcrtomb+0x7c>
 8009558:	90c00017 	ldw	r3,0(r18)
 800955c:	01002284 	movi	r4,138
 8009560:	88000015 	stw	zero,0(r17)
 8009564:	19000015 	stw	r4,0(r3)
 8009568:	dfc00a17 	ldw	ra,40(sp)
 800956c:	dd400917 	ldw	r21,36(sp)
 8009570:	dd000817 	ldw	r20,32(sp)
 8009574:	dcc00717 	ldw	r19,28(sp)
 8009578:	dc800617 	ldw	r18,24(sp)
 800957c:	dc400517 	ldw	r17,20(sp)
 8009580:	dc000417 	ldw	r16,16(sp)
 8009584:	dec00b04 	addi	sp,sp,44
 8009588:	f800283a 	ret
 800958c:	04820074 	movhi	r18,2049
 8009590:	9484e304 	addi	r18,r18,5004
 8009594:	00820074 	movhi	r2,2049
 8009598:	94c00017 	ldw	r19,0(r18)
 800959c:	1084e704 	addi	r2,r2,5020
 80095a0:	14000017 	ldw	r16,0(r2)
 80095a4:	8004d100 	call	8004d10 <__locale_charset>
 80095a8:	9809883a 	mov	r4,r19
 80095ac:	dc400015 	stw	r17,0(sp)
 80095b0:	d9400104 	addi	r5,sp,4
 80095b4:	000d883a 	mov	r6,zero
 80095b8:	100f883a 	mov	r7,r2
 80095bc:	803ee83a 	callr	r16
 80095c0:	003fe306 	br	8009550 <__alt_data_end+0xfc009550>

080095c4 <__ascii_wctomb>:
 80095c4:	28000526 	beq	r5,zero,80095dc <__ascii_wctomb+0x18>
 80095c8:	00803fc4 	movi	r2,255
 80095cc:	11800536 	bltu	r2,r6,80095e4 <__ascii_wctomb+0x20>
 80095d0:	29800005 	stb	r6,0(r5)
 80095d4:	00800044 	movi	r2,1
 80095d8:	f800283a 	ret
 80095dc:	0005883a 	mov	r2,zero
 80095e0:	f800283a 	ret
 80095e4:	00802284 	movi	r2,138
 80095e8:	20800015 	stw	r2,0(r4)
 80095ec:	00bfffc4 	movi	r2,-1
 80095f0:	f800283a 	ret

080095f4 <_wctomb_r>:
 80095f4:	00820074 	movhi	r2,2049
 80095f8:	defff904 	addi	sp,sp,-28
 80095fc:	1084e704 	addi	r2,r2,5020
 8009600:	dfc00615 	stw	ra,24(sp)
 8009604:	dc400515 	stw	r17,20(sp)
 8009608:	dc000415 	stw	r16,16(sp)
 800960c:	3823883a 	mov	r17,r7
 8009610:	14000017 	ldw	r16,0(r2)
 8009614:	d9000115 	stw	r4,4(sp)
 8009618:	d9400215 	stw	r5,8(sp)
 800961c:	d9800315 	stw	r6,12(sp)
 8009620:	8004d100 	call	8004d10 <__locale_charset>
 8009624:	d9000117 	ldw	r4,4(sp)
 8009628:	d9400217 	ldw	r5,8(sp)
 800962c:	d9800317 	ldw	r6,12(sp)
 8009630:	dc400015 	stw	r17,0(sp)
 8009634:	100f883a 	mov	r7,r2
 8009638:	803ee83a 	callr	r16
 800963c:	dfc00617 	ldw	ra,24(sp)
 8009640:	dc400517 	ldw	r17,20(sp)
 8009644:	dc000417 	ldw	r16,16(sp)
 8009648:	dec00704 	addi	sp,sp,28
 800964c:	f800283a 	ret

08009650 <__udivdi3>:
 8009650:	defff504 	addi	sp,sp,-44
 8009654:	dcc00415 	stw	r19,16(sp)
 8009658:	dc000115 	stw	r16,4(sp)
 800965c:	dfc00a15 	stw	ra,40(sp)
 8009660:	df000915 	stw	fp,36(sp)
 8009664:	ddc00815 	stw	r23,32(sp)
 8009668:	dd800715 	stw	r22,28(sp)
 800966c:	dd400615 	stw	r21,24(sp)
 8009670:	dd000515 	stw	r20,20(sp)
 8009674:	dc800315 	stw	r18,12(sp)
 8009678:	dc400215 	stw	r17,8(sp)
 800967c:	2027883a 	mov	r19,r4
 8009680:	2821883a 	mov	r16,r5
 8009684:	3800421e 	bne	r7,zero,8009790 <__udivdi3+0x140>
 8009688:	3025883a 	mov	r18,r6
 800968c:	2023883a 	mov	r17,r4
 8009690:	2980542e 	bgeu	r5,r6,80097e4 <__udivdi3+0x194>
 8009694:	00bfffd4 	movui	r2,65535
 8009698:	282d883a 	mov	r22,r5
 800969c:	1180a836 	bltu	r2,r6,8009940 <__udivdi3+0x2f0>
 80096a0:	00803fc4 	movi	r2,255
 80096a4:	1181422e 	bgeu	r2,r6,8009bb0 <__udivdi3+0x560>
 80096a8:	00800204 	movi	r2,8
 80096ac:	1007883a 	mov	r3,r2
 80096b0:	3084d83a 	srl	r2,r6,r2
 80096b4:	01020074 	movhi	r4,2049
 80096b8:	213dd904 	addi	r4,r4,-2204
 80096bc:	2085883a 	add	r2,r4,r2
 80096c0:	10800003 	ldbu	r2,0(r2)
 80096c4:	10c7883a 	add	r3,r2,r3
 80096c8:	00800804 	movi	r2,32
 80096cc:	10c5c83a 	sub	r2,r2,r3
 80096d0:	10000526 	beq	r2,zero,80096e8 <__udivdi3+0x98>
 80096d4:	80a0983a 	sll	r16,r16,r2
 80096d8:	98c6d83a 	srl	r3,r19,r3
 80096dc:	30a4983a 	sll	r18,r6,r2
 80096e0:	98a2983a 	sll	r17,r19,r2
 80096e4:	80ecb03a 	or	r22,r16,r3
 80096e8:	902ad43a 	srli	r21,r18,16
 80096ec:	b009883a 	mov	r4,r22
 80096f0:	953fffcc 	andi	r20,r18,65535
 80096f4:	a80b883a 	mov	r5,r21
 80096f8:	800a2c40 	call	800a2c4 <__umodsi3>
 80096fc:	b009883a 	mov	r4,r22
 8009700:	a80b883a 	mov	r5,r21
 8009704:	1027883a 	mov	r19,r2
 8009708:	800a2bc0 	call	800a2bc <__udivsi3>
 800970c:	1021883a 	mov	r16,r2
 8009710:	8806d43a 	srli	r3,r17,16
 8009714:	9804943a 	slli	r2,r19,16
 8009718:	8527383a 	mul	r19,r16,r20
 800971c:	10c4b03a 	or	r2,r2,r3
 8009720:	14c0052e 	bgeu	r2,r19,8009738 <__udivdi3+0xe8>
 8009724:	1485883a 	add	r2,r2,r18
 8009728:	80ffffc4 	addi	r3,r16,-1
 800972c:	14800136 	bltu	r2,r18,8009734 <__udivdi3+0xe4>
 8009730:	14c13436 	bltu	r2,r19,8009c04 <__udivdi3+0x5b4>
 8009734:	1821883a 	mov	r16,r3
 8009738:	14e7c83a 	sub	r19,r2,r19
 800973c:	9809883a 	mov	r4,r19
 8009740:	a80b883a 	mov	r5,r21
 8009744:	800a2c40 	call	800a2c4 <__umodsi3>
 8009748:	102d883a 	mov	r22,r2
 800974c:	9809883a 	mov	r4,r19
 8009750:	a80b883a 	mov	r5,r21
 8009754:	800a2bc0 	call	800a2bc <__udivsi3>
 8009758:	b02c943a 	slli	r22,r22,16
 800975c:	1529383a 	mul	r20,r2,r20
 8009760:	8c7fffcc 	andi	r17,r17,65535
 8009764:	b462b03a 	or	r17,r22,r17
 8009768:	8d00052e 	bgeu	r17,r20,8009780 <__udivdi3+0x130>
 800976c:	8ca3883a 	add	r17,r17,r18
 8009770:	10ffffc4 	addi	r3,r2,-1
 8009774:	8c80f636 	bltu	r17,r18,8009b50 <__udivdi3+0x500>
 8009778:	8d00f52e 	bgeu	r17,r20,8009b50 <__udivdi3+0x500>
 800977c:	10bfff84 	addi	r2,r2,-2
 8009780:	8020943a 	slli	r16,r16,16
 8009784:	0007883a 	mov	r3,zero
 8009788:	1404b03a 	or	r2,r2,r16
 800978c:	00005b06 	br	80098fc <__udivdi3+0x2ac>
 8009790:	29c05836 	bltu	r5,r7,80098f4 <__udivdi3+0x2a4>
 8009794:	00bfffd4 	movui	r2,65535
 8009798:	11c0642e 	bgeu	r2,r7,800992c <__udivdi3+0x2dc>
 800979c:	00804034 	movhi	r2,256
 80097a0:	10bfffc4 	addi	r2,r2,-1
 80097a4:	11c0f32e 	bgeu	r2,r7,8009b74 <__udivdi3+0x524>
 80097a8:	00c00604 	movi	r3,24
 80097ac:	180b883a 	mov	r5,r3
 80097b0:	38c6d83a 	srl	r3,r7,r3
 80097b4:	00820074 	movhi	r2,2049
 80097b8:	10bdd904 	addi	r2,r2,-2204
 80097bc:	10c7883a 	add	r3,r2,r3
 80097c0:	18c00003 	ldbu	r3,0(r3)
 80097c4:	01000804 	movi	r4,32
 80097c8:	1947883a 	add	r3,r3,r5
 80097cc:	20e5c83a 	sub	r18,r4,r3
 80097d0:	9000661e 	bne	r18,zero,800996c <__udivdi3+0x31c>
 80097d4:	3c00f936 	bltu	r7,r16,8009bbc <__udivdi3+0x56c>
 80097d8:	9985403a 	cmpgeu	r2,r19,r6
 80097dc:	0007883a 	mov	r3,zero
 80097e0:	00004606 	br	80098fc <__udivdi3+0x2ac>
 80097e4:	3000041e 	bne	r6,zero,80097f8 <__udivdi3+0x1a8>
 80097e8:	01000044 	movi	r4,1
 80097ec:	000b883a 	mov	r5,zero
 80097f0:	800a2bc0 	call	800a2bc <__udivsi3>
 80097f4:	1025883a 	mov	r18,r2
 80097f8:	00bfffd4 	movui	r2,65535
 80097fc:	1480562e 	bgeu	r2,r18,8009958 <__udivdi3+0x308>
 8009800:	00804034 	movhi	r2,256
 8009804:	10bfffc4 	addi	r2,r2,-1
 8009808:	1480e32e 	bgeu	r2,r18,8009b98 <__udivdi3+0x548>
 800980c:	00800604 	movi	r2,24
 8009810:	1007883a 	mov	r3,r2
 8009814:	9084d83a 	srl	r2,r18,r2
 8009818:	01020074 	movhi	r4,2049
 800981c:	213dd904 	addi	r4,r4,-2204
 8009820:	2085883a 	add	r2,r4,r2
 8009824:	10800003 	ldbu	r2,0(r2)
 8009828:	10c5883a 	add	r2,r2,r3
 800982c:	00c00804 	movi	r3,32
 8009830:	1887c83a 	sub	r3,r3,r2
 8009834:	1800911e 	bne	r3,zero,8009a7c <__udivdi3+0x42c>
 8009838:	9028d43a 	srli	r20,r18,16
 800983c:	84a1c83a 	sub	r16,r16,r18
 8009840:	957fffcc 	andi	r21,r18,65535
 8009844:	00c00044 	movi	r3,1
 8009848:	8009883a 	mov	r4,r16
 800984c:	a00b883a 	mov	r5,r20
 8009850:	d8c00015 	stw	r3,0(sp)
 8009854:	800a2c40 	call	800a2c4 <__umodsi3>
 8009858:	8009883a 	mov	r4,r16
 800985c:	a00b883a 	mov	r5,r20
 8009860:	1027883a 	mov	r19,r2
 8009864:	800a2bc0 	call	800a2bc <__udivsi3>
 8009868:	1021883a 	mov	r16,r2
 800986c:	880cd43a 	srli	r6,r17,16
 8009870:	9804943a 	slli	r2,r19,16
 8009874:	8567383a 	mul	r19,r16,r21
 8009878:	d8c00017 	ldw	r3,0(sp)
 800987c:	1188b03a 	or	r4,r2,r6
 8009880:	24c0052e 	bgeu	r4,r19,8009898 <__udivdi3+0x248>
 8009884:	2489883a 	add	r4,r4,r18
 8009888:	80bfffc4 	addi	r2,r16,-1
 800988c:	24800136 	bltu	r4,r18,8009894 <__udivdi3+0x244>
 8009890:	24c0d936 	bltu	r4,r19,8009bf8 <__udivdi3+0x5a8>
 8009894:	1021883a 	mov	r16,r2
 8009898:	24e7c83a 	sub	r19,r4,r19
 800989c:	9809883a 	mov	r4,r19
 80098a0:	a00b883a 	mov	r5,r20
 80098a4:	d8c00015 	stw	r3,0(sp)
 80098a8:	800a2c40 	call	800a2c4 <__umodsi3>
 80098ac:	102d883a 	mov	r22,r2
 80098b0:	9809883a 	mov	r4,r19
 80098b4:	a00b883a 	mov	r5,r20
 80098b8:	800a2bc0 	call	800a2bc <__udivsi3>
 80098bc:	b02c943a 	slli	r22,r22,16
 80098c0:	156b383a 	mul	r21,r2,r21
 80098c4:	8c7fffcc 	andi	r17,r17,65535
 80098c8:	b462b03a 	or	r17,r22,r17
 80098cc:	d8c00017 	ldw	r3,0(sp)
 80098d0:	8d40052e 	bgeu	r17,r21,80098e8 <__udivdi3+0x298>
 80098d4:	8ca3883a 	add	r17,r17,r18
 80098d8:	113fffc4 	addi	r4,r2,-1
 80098dc:	8c809a36 	bltu	r17,r18,8009b48 <__udivdi3+0x4f8>
 80098e0:	8d40992e 	bgeu	r17,r21,8009b48 <__udivdi3+0x4f8>
 80098e4:	10bfff84 	addi	r2,r2,-2
 80098e8:	8020943a 	slli	r16,r16,16
 80098ec:	1404b03a 	or	r2,r2,r16
 80098f0:	00000206 	br	80098fc <__udivdi3+0x2ac>
 80098f4:	0007883a 	mov	r3,zero
 80098f8:	0005883a 	mov	r2,zero
 80098fc:	dfc00a17 	ldw	ra,40(sp)
 8009900:	df000917 	ldw	fp,36(sp)
 8009904:	ddc00817 	ldw	r23,32(sp)
 8009908:	dd800717 	ldw	r22,28(sp)
 800990c:	dd400617 	ldw	r21,24(sp)
 8009910:	dd000517 	ldw	r20,20(sp)
 8009914:	dcc00417 	ldw	r19,16(sp)
 8009918:	dc800317 	ldw	r18,12(sp)
 800991c:	dc400217 	ldw	r17,8(sp)
 8009920:	dc000117 	ldw	r16,4(sp)
 8009924:	dec00b04 	addi	sp,sp,44
 8009928:	f800283a 	ret
 800992c:	00803fc4 	movi	r2,255
 8009930:	11c0932e 	bgeu	r2,r7,8009b80 <__udivdi3+0x530>
 8009934:	00c00204 	movi	r3,8
 8009938:	180b883a 	mov	r5,r3
 800993c:	003f9c06 	br	80097b0 <__alt_data_end+0xfc0097b0>
 8009940:	00804034 	movhi	r2,256
 8009944:	10bfffc4 	addi	r2,r2,-1
 8009948:	1180902e 	bgeu	r2,r6,8009b8c <__udivdi3+0x53c>
 800994c:	00800604 	movi	r2,24
 8009950:	1007883a 	mov	r3,r2
 8009954:	003f5606 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009958:	00803fc4 	movi	r2,255
 800995c:	1480912e 	bgeu	r2,r18,8009ba4 <__udivdi3+0x554>
 8009960:	00800204 	movi	r2,8
 8009964:	1007883a 	mov	r3,r2
 8009968:	003faa06 	br	8009814 <__alt_data_end+0xfc009814>
 800996c:	30eed83a 	srl	r23,r6,r3
 8009970:	3c8e983a 	sll	r7,r7,r18
 8009974:	80f8d83a 	srl	fp,r16,r3
 8009978:	98c6d83a 	srl	r3,r19,r3
 800997c:	3deeb03a 	or	r23,r7,r23
 8009980:	b828d43a 	srli	r20,r23,16
 8009984:	84a0983a 	sll	r16,r16,r18
 8009988:	e009883a 	mov	r4,fp
 800998c:	a00b883a 	mov	r5,r20
 8009990:	80e2b03a 	or	r17,r16,r3
 8009994:	34aa983a 	sll	r21,r6,r18
 8009998:	800a2c40 	call	800a2c4 <__umodsi3>
 800999c:	e009883a 	mov	r4,fp
 80099a0:	a00b883a 	mov	r5,r20
 80099a4:	102d883a 	mov	r22,r2
 80099a8:	800a2bc0 	call	800a2bc <__udivsi3>
 80099ac:	1021883a 	mov	r16,r2
 80099b0:	bf3fffcc 	andi	fp,r23,65535
 80099b4:	b004943a 	slli	r2,r22,16
 80099b8:	8808d43a 	srli	r4,r17,16
 80099bc:	872d383a 	mul	r22,r16,fp
 80099c0:	1104b03a 	or	r2,r2,r4
 80099c4:	1580042e 	bgeu	r2,r22,80099d8 <__udivdi3+0x388>
 80099c8:	15c5883a 	add	r2,r2,r23
 80099cc:	80ffffc4 	addi	r3,r16,-1
 80099d0:	15c0812e 	bgeu	r2,r23,8009bd8 <__udivdi3+0x588>
 80099d4:	1821883a 	mov	r16,r3
 80099d8:	15adc83a 	sub	r22,r2,r22
 80099dc:	b009883a 	mov	r4,r22
 80099e0:	a00b883a 	mov	r5,r20
 80099e4:	800a2c40 	call	800a2c4 <__umodsi3>
 80099e8:	a00b883a 	mov	r5,r20
 80099ec:	b009883a 	mov	r4,r22
 80099f0:	d8800015 	stw	r2,0(sp)
 80099f4:	800a2bc0 	call	800a2bc <__udivsi3>
 80099f8:	d8c00017 	ldw	r3,0(sp)
 80099fc:	170b383a 	mul	r5,r2,fp
 8009a00:	8c7fffcc 	andi	r17,r17,65535
 8009a04:	1806943a 	slli	r3,r3,16
 8009a08:	1c46b03a 	or	r3,r3,r17
 8009a0c:	1940042e 	bgeu	r3,r5,8009a20 <__udivdi3+0x3d0>
 8009a10:	1dc7883a 	add	r3,r3,r23
 8009a14:	113fffc4 	addi	r4,r2,-1
 8009a18:	1dc06b2e 	bgeu	r3,r23,8009bc8 <__udivdi3+0x578>
 8009a1c:	2005883a 	mov	r2,r4
 8009a20:	8020943a 	slli	r16,r16,16
 8009a24:	a9ffffcc 	andi	r7,r21,65535
 8009a28:	a82ad43a 	srli	r21,r21,16
 8009a2c:	1404b03a 	or	r2,r2,r16
 8009a30:	113fffcc 	andi	r4,r2,65535
 8009a34:	100cd43a 	srli	r6,r2,16
 8009a38:	21d3383a 	mul	r9,r4,r7
 8009a3c:	2549383a 	mul	r4,r4,r21
 8009a40:	31cf383a 	mul	r7,r6,r7
 8009a44:	4810d43a 	srli	r8,r9,16
 8009a48:	1947c83a 	sub	r3,r3,r5
 8009a4c:	3909883a 	add	r4,r7,r4
 8009a50:	2209883a 	add	r4,r4,r8
 8009a54:	354d383a 	mul	r6,r6,r21
 8009a58:	21c0022e 	bgeu	r4,r7,8009a64 <__udivdi3+0x414>
 8009a5c:	01400074 	movhi	r5,1
 8009a60:	314d883a 	add	r6,r6,r5
 8009a64:	202ad43a 	srli	r21,r4,16
 8009a68:	354d883a 	add	r6,r6,r21
 8009a6c:	19803f36 	bltu	r3,r6,8009b6c <__udivdi3+0x51c>
 8009a70:	19803926 	beq	r3,r6,8009b58 <__udivdi3+0x508>
 8009a74:	0007883a 	mov	r3,zero
 8009a78:	003fa006 	br	80098fc <__alt_data_end+0xfc0098fc>
 8009a7c:	90e4983a 	sll	r18,r18,r3
 8009a80:	80aad83a 	srl	r21,r16,r2
 8009a84:	80e0983a 	sll	r16,r16,r3
 8009a88:	9028d43a 	srli	r20,r18,16
 8009a8c:	9884d83a 	srl	r2,r19,r2
 8009a90:	a809883a 	mov	r4,r21
 8009a94:	a00b883a 	mov	r5,r20
 8009a98:	80acb03a 	or	r22,r16,r2
 8009a9c:	98e2983a 	sll	r17,r19,r3
 8009aa0:	800a2c40 	call	800a2c4 <__umodsi3>
 8009aa4:	a809883a 	mov	r4,r21
 8009aa8:	a00b883a 	mov	r5,r20
 8009aac:	1021883a 	mov	r16,r2
 8009ab0:	800a2bc0 	call	800a2bc <__udivsi3>
 8009ab4:	957fffcc 	andi	r21,r18,65535
 8009ab8:	8020943a 	slli	r16,r16,16
 8009abc:	b00ad43a 	srli	r5,r22,16
 8009ac0:	1567383a 	mul	r19,r2,r21
 8009ac4:	102f883a 	mov	r23,r2
 8009ac8:	8148b03a 	or	r4,r16,r5
 8009acc:	24c0062e 	bgeu	r4,r19,8009ae8 <__udivdi3+0x498>
 8009ad0:	2489883a 	add	r4,r4,r18
 8009ad4:	10bfffc4 	addi	r2,r2,-1
 8009ad8:	24804536 	bltu	r4,r18,8009bf0 <__udivdi3+0x5a0>
 8009adc:	24c0442e 	bgeu	r4,r19,8009bf0 <__udivdi3+0x5a0>
 8009ae0:	bdffff84 	addi	r23,r23,-2
 8009ae4:	2489883a 	add	r4,r4,r18
 8009ae8:	24e7c83a 	sub	r19,r4,r19
 8009aec:	9809883a 	mov	r4,r19
 8009af0:	a00b883a 	mov	r5,r20
 8009af4:	800a2c40 	call	800a2c4 <__umodsi3>
 8009af8:	1021883a 	mov	r16,r2
 8009afc:	9809883a 	mov	r4,r19
 8009b00:	a00b883a 	mov	r5,r20
 8009b04:	800a2bc0 	call	800a2bc <__udivsi3>
 8009b08:	8020943a 	slli	r16,r16,16
 8009b0c:	1007883a 	mov	r3,r2
 8009b10:	1545383a 	mul	r2,r2,r21
 8009b14:	b13fffcc 	andi	r4,r22,65535
 8009b18:	8108b03a 	or	r4,r16,r4
 8009b1c:	2080062e 	bgeu	r4,r2,8009b38 <__udivdi3+0x4e8>
 8009b20:	2489883a 	add	r4,r4,r18
 8009b24:	197fffc4 	addi	r5,r3,-1
 8009b28:	24802f36 	bltu	r4,r18,8009be8 <__udivdi3+0x598>
 8009b2c:	20802e2e 	bgeu	r4,r2,8009be8 <__udivdi3+0x598>
 8009b30:	18ffff84 	addi	r3,r3,-2
 8009b34:	2489883a 	add	r4,r4,r18
 8009b38:	b82e943a 	slli	r23,r23,16
 8009b3c:	20a1c83a 	sub	r16,r4,r2
 8009b40:	1dc6b03a 	or	r3,r3,r23
 8009b44:	003f4006 	br	8009848 <__alt_data_end+0xfc009848>
 8009b48:	2005883a 	mov	r2,r4
 8009b4c:	003f6606 	br	80098e8 <__alt_data_end+0xfc0098e8>
 8009b50:	1805883a 	mov	r2,r3
 8009b54:	003f0a06 	br	8009780 <__alt_data_end+0xfc009780>
 8009b58:	2006943a 	slli	r3,r4,16
 8009b5c:	9c88983a 	sll	r4,r19,r18
 8009b60:	4a7fffcc 	andi	r9,r9,65535
 8009b64:	1a47883a 	add	r3,r3,r9
 8009b68:	20ffc22e 	bgeu	r4,r3,8009a74 <__alt_data_end+0xfc009a74>
 8009b6c:	10bfffc4 	addi	r2,r2,-1
 8009b70:	003fc006 	br	8009a74 <__alt_data_end+0xfc009a74>
 8009b74:	00c00404 	movi	r3,16
 8009b78:	180b883a 	mov	r5,r3
 8009b7c:	003f0c06 	br	80097b0 <__alt_data_end+0xfc0097b0>
 8009b80:	0007883a 	mov	r3,zero
 8009b84:	000b883a 	mov	r5,zero
 8009b88:	003f0906 	br	80097b0 <__alt_data_end+0xfc0097b0>
 8009b8c:	00800404 	movi	r2,16
 8009b90:	1007883a 	mov	r3,r2
 8009b94:	003ec606 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009b98:	00800404 	movi	r2,16
 8009b9c:	1007883a 	mov	r3,r2
 8009ba0:	003f1c06 	br	8009814 <__alt_data_end+0xfc009814>
 8009ba4:	0005883a 	mov	r2,zero
 8009ba8:	0007883a 	mov	r3,zero
 8009bac:	003f1906 	br	8009814 <__alt_data_end+0xfc009814>
 8009bb0:	0005883a 	mov	r2,zero
 8009bb4:	0007883a 	mov	r3,zero
 8009bb8:	003ebd06 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009bbc:	0007883a 	mov	r3,zero
 8009bc0:	00800044 	movi	r2,1
 8009bc4:	003f4d06 	br	80098fc <__alt_data_end+0xfc0098fc>
 8009bc8:	197f942e 	bgeu	r3,r5,8009a1c <__alt_data_end+0xfc009a1c>
 8009bcc:	10bfff84 	addi	r2,r2,-2
 8009bd0:	1dc7883a 	add	r3,r3,r23
 8009bd4:	003f9206 	br	8009a20 <__alt_data_end+0xfc009a20>
 8009bd8:	15bf7e2e 	bgeu	r2,r22,80099d4 <__alt_data_end+0xfc0099d4>
 8009bdc:	843fff84 	addi	r16,r16,-2
 8009be0:	15c5883a 	add	r2,r2,r23
 8009be4:	003f7c06 	br	80099d8 <__alt_data_end+0xfc0099d8>
 8009be8:	2807883a 	mov	r3,r5
 8009bec:	003fd206 	br	8009b38 <__alt_data_end+0xfc009b38>
 8009bf0:	102f883a 	mov	r23,r2
 8009bf4:	003fbc06 	br	8009ae8 <__alt_data_end+0xfc009ae8>
 8009bf8:	843fff84 	addi	r16,r16,-2
 8009bfc:	2489883a 	add	r4,r4,r18
 8009c00:	003f2506 	br	8009898 <__alt_data_end+0xfc009898>
 8009c04:	843fff84 	addi	r16,r16,-2
 8009c08:	1485883a 	add	r2,r2,r18
 8009c0c:	003eca06 	br	8009738 <__alt_data_end+0xfc009738>

08009c10 <__umoddi3>:
 8009c10:	defff404 	addi	sp,sp,-48
 8009c14:	ddc00915 	stw	r23,36(sp)
 8009c18:	dc400315 	stw	r17,12(sp)
 8009c1c:	dc000215 	stw	r16,8(sp)
 8009c20:	dfc00b15 	stw	ra,44(sp)
 8009c24:	df000a15 	stw	fp,40(sp)
 8009c28:	dd800815 	stw	r22,32(sp)
 8009c2c:	dd400715 	stw	r21,28(sp)
 8009c30:	dd000615 	stw	r20,24(sp)
 8009c34:	dcc00515 	stw	r19,20(sp)
 8009c38:	dc800415 	stw	r18,16(sp)
 8009c3c:	2021883a 	mov	r16,r4
 8009c40:	2823883a 	mov	r17,r5
 8009c44:	282f883a 	mov	r23,r5
 8009c48:	3800381e 	bne	r7,zero,8009d2c <__umoddi3+0x11c>
 8009c4c:	3027883a 	mov	r19,r6
 8009c50:	2029883a 	mov	r20,r4
 8009c54:	29804e2e 	bgeu	r5,r6,8009d90 <__umoddi3+0x180>
 8009c58:	00bfffd4 	movui	r2,65535
 8009c5c:	11809c36 	bltu	r2,r6,8009ed0 <__umoddi3+0x2c0>
 8009c60:	00803fc4 	movi	r2,255
 8009c64:	11813b2e 	bgeu	r2,r6,800a154 <__umoddi3+0x544>
 8009c68:	01400204 	movi	r5,8
 8009c6c:	2805883a 	mov	r2,r5
 8009c70:	314ad83a 	srl	r5,r6,r5
 8009c74:	00c20074 	movhi	r3,2049
 8009c78:	18fdd904 	addi	r3,r3,-2204
 8009c7c:	194b883a 	add	r5,r3,r5
 8009c80:	29000003 	ldbu	r4,0(r5)
 8009c84:	2089883a 	add	r4,r4,r2
 8009c88:	00800804 	movi	r2,32
 8009c8c:	1105c83a 	sub	r2,r2,r4
 8009c90:	1000ec26 	beq	r2,zero,800a044 <__umoddi3+0x434>
 8009c94:	88a2983a 	sll	r17,r17,r2
 8009c98:	8108d83a 	srl	r4,r16,r4
 8009c9c:	30a6983a 	sll	r19,r6,r2
 8009ca0:	80a8983a 	sll	r20,r16,r2
 8009ca4:	1025883a 	mov	r18,r2
 8009ca8:	892eb03a 	or	r23,r17,r4
 8009cac:	982cd43a 	srli	r22,r19,16
 8009cb0:	b809883a 	mov	r4,r23
 8009cb4:	9d7fffcc 	andi	r21,r19,65535
 8009cb8:	b00b883a 	mov	r5,r22
 8009cbc:	800a2c40 	call	800a2c4 <__umodsi3>
 8009cc0:	b809883a 	mov	r4,r23
 8009cc4:	b00b883a 	mov	r5,r22
 8009cc8:	1021883a 	mov	r16,r2
 8009ccc:	800a2bc0 	call	800a2bc <__udivsi3>
 8009cd0:	8020943a 	slli	r16,r16,16
 8009cd4:	a00cd43a 	srli	r6,r20,16
 8009cd8:	1545383a 	mul	r2,r2,r21
 8009cdc:	8188b03a 	or	r4,r16,r6
 8009ce0:	2080042e 	bgeu	r4,r2,8009cf4 <__umoddi3+0xe4>
 8009ce4:	24c9883a 	add	r4,r4,r19
 8009ce8:	24c00236 	bltu	r4,r19,8009cf4 <__umoddi3+0xe4>
 8009cec:	2080012e 	bgeu	r4,r2,8009cf4 <__umoddi3+0xe4>
 8009cf0:	24c9883a 	add	r4,r4,r19
 8009cf4:	20a3c83a 	sub	r17,r4,r2
 8009cf8:	8809883a 	mov	r4,r17
 8009cfc:	b00b883a 	mov	r5,r22
 8009d00:	800a2c40 	call	800a2c4 <__umodsi3>
 8009d04:	8809883a 	mov	r4,r17
 8009d08:	b00b883a 	mov	r5,r22
 8009d0c:	1021883a 	mov	r16,r2
 8009d10:	800a2bc0 	call	800a2bc <__udivsi3>
 8009d14:	8006943a 	slli	r3,r16,16
 8009d18:	1545383a 	mul	r2,r2,r21
 8009d1c:	a13fffcc 	andi	r4,r20,65535
 8009d20:	1906b03a 	or	r3,r3,r4
 8009d24:	1880532e 	bgeu	r3,r2,8009e74 <__umoddi3+0x264>
 8009d28:	00004e06 	br	8009e64 <__umoddi3+0x254>
 8009d2c:	29c05536 	bltu	r5,r7,8009e84 <__umoddi3+0x274>
 8009d30:	00bfffd4 	movui	r2,65535
 8009d34:	11c0612e 	bgeu	r2,r7,8009ebc <__umoddi3+0x2ac>
 8009d38:	00804034 	movhi	r2,256
 8009d3c:	10bfffc4 	addi	r2,r2,-1
 8009d40:	11c0f82e 	bgeu	r2,r7,800a124 <__umoddi3+0x514>
 8009d44:	01400604 	movi	r5,24
 8009d48:	282b883a 	mov	r21,r5
 8009d4c:	394ad83a 	srl	r5,r7,r5
 8009d50:	00c20074 	movhi	r3,2049
 8009d54:	18fdd904 	addi	r3,r3,-2204
 8009d58:	194b883a 	add	r5,r3,r5
 8009d5c:	28800003 	ldbu	r2,0(r5)
 8009d60:	00c00804 	movi	r3,32
 8009d64:	156b883a 	add	r21,r2,r21
 8009d68:	1d69c83a 	sub	r20,r3,r21
 8009d6c:	a000631e 	bne	r20,zero,8009efc <__umoddi3+0x2ec>
 8009d70:	3c400136 	bltu	r7,r17,8009d78 <__umoddi3+0x168>
 8009d74:	81810436 	bltu	r16,r6,800a188 <__umoddi3+0x578>
 8009d78:	8185c83a 	sub	r2,r16,r6
 8009d7c:	89e3c83a 	sub	r17,r17,r7
 8009d80:	8087803a 	cmpltu	r3,r16,r2
 8009d84:	88efc83a 	sub	r23,r17,r3
 8009d88:	b807883a 	mov	r3,r23
 8009d8c:	00003f06 	br	8009e8c <__umoddi3+0x27c>
 8009d90:	3000041e 	bne	r6,zero,8009da4 <__umoddi3+0x194>
 8009d94:	01000044 	movi	r4,1
 8009d98:	000b883a 	mov	r5,zero
 8009d9c:	800a2bc0 	call	800a2bc <__udivsi3>
 8009da0:	1027883a 	mov	r19,r2
 8009da4:	00bfffd4 	movui	r2,65535
 8009da8:	14c04f2e 	bgeu	r2,r19,8009ee8 <__umoddi3+0x2d8>
 8009dac:	00804034 	movhi	r2,256
 8009db0:	10bfffc4 	addi	r2,r2,-1
 8009db4:	14c0e42e 	bgeu	r2,r19,800a148 <__umoddi3+0x538>
 8009db8:	00800604 	movi	r2,24
 8009dbc:	1007883a 	mov	r3,r2
 8009dc0:	9884d83a 	srl	r2,r19,r2
 8009dc4:	01020074 	movhi	r4,2049
 8009dc8:	213dd904 	addi	r4,r4,-2204
 8009dcc:	2085883a 	add	r2,r4,r2
 8009dd0:	11000003 	ldbu	r4,0(r2)
 8009dd4:	00800804 	movi	r2,32
 8009dd8:	20c7883a 	add	r3,r4,r3
 8009ddc:	10c5c83a 	sub	r2,r2,r3
 8009de0:	10009a1e 	bne	r2,zero,800a04c <__umoddi3+0x43c>
 8009de4:	982cd43a 	srli	r22,r19,16
 8009de8:	8ce3c83a 	sub	r17,r17,r19
 8009dec:	9c3fffcc 	andi	r16,r19,65535
 8009df0:	0025883a 	mov	r18,zero
 8009df4:	8809883a 	mov	r4,r17
 8009df8:	b00b883a 	mov	r5,r22
 8009dfc:	800a2c40 	call	800a2c4 <__umodsi3>
 8009e00:	8809883a 	mov	r4,r17
 8009e04:	b00b883a 	mov	r5,r22
 8009e08:	102b883a 	mov	r21,r2
 8009e0c:	800a2bc0 	call	800a2bc <__udivsi3>
 8009e10:	a806943a 	slli	r3,r21,16
 8009e14:	a008d43a 	srli	r4,r20,16
 8009e18:	1405383a 	mul	r2,r2,r16
 8009e1c:	190cb03a 	or	r6,r3,r4
 8009e20:	3080032e 	bgeu	r6,r2,8009e30 <__umoddi3+0x220>
 8009e24:	34cd883a 	add	r6,r6,r19
 8009e28:	34c00136 	bltu	r6,r19,8009e30 <__umoddi3+0x220>
 8009e2c:	3080d436 	bltu	r6,r2,800a180 <__umoddi3+0x570>
 8009e30:	30abc83a 	sub	r21,r6,r2
 8009e34:	a809883a 	mov	r4,r21
 8009e38:	b00b883a 	mov	r5,r22
 8009e3c:	800a2c40 	call	800a2c4 <__umodsi3>
 8009e40:	1023883a 	mov	r17,r2
 8009e44:	a809883a 	mov	r4,r21
 8009e48:	b00b883a 	mov	r5,r22
 8009e4c:	800a2bc0 	call	800a2bc <__udivsi3>
 8009e50:	8822943a 	slli	r17,r17,16
 8009e54:	1405383a 	mul	r2,r2,r16
 8009e58:	a13fffcc 	andi	r4,r20,65535
 8009e5c:	8906b03a 	or	r3,r17,r4
 8009e60:	1880042e 	bgeu	r3,r2,8009e74 <__umoddi3+0x264>
 8009e64:	1cc7883a 	add	r3,r3,r19
 8009e68:	1cc00236 	bltu	r3,r19,8009e74 <__umoddi3+0x264>
 8009e6c:	1880012e 	bgeu	r3,r2,8009e74 <__umoddi3+0x264>
 8009e70:	1cc7883a 	add	r3,r3,r19
 8009e74:	1887c83a 	sub	r3,r3,r2
 8009e78:	1c84d83a 	srl	r2,r3,r18
 8009e7c:	0007883a 	mov	r3,zero
 8009e80:	00000206 	br	8009e8c <__umoddi3+0x27c>
 8009e84:	2005883a 	mov	r2,r4
 8009e88:	2807883a 	mov	r3,r5
 8009e8c:	dfc00b17 	ldw	ra,44(sp)
 8009e90:	df000a17 	ldw	fp,40(sp)
 8009e94:	ddc00917 	ldw	r23,36(sp)
 8009e98:	dd800817 	ldw	r22,32(sp)
 8009e9c:	dd400717 	ldw	r21,28(sp)
 8009ea0:	dd000617 	ldw	r20,24(sp)
 8009ea4:	dcc00517 	ldw	r19,20(sp)
 8009ea8:	dc800417 	ldw	r18,16(sp)
 8009eac:	dc400317 	ldw	r17,12(sp)
 8009eb0:	dc000217 	ldw	r16,8(sp)
 8009eb4:	dec00c04 	addi	sp,sp,48
 8009eb8:	f800283a 	ret
 8009ebc:	00803fc4 	movi	r2,255
 8009ec0:	11c0952e 	bgeu	r2,r7,800a118 <__umoddi3+0x508>
 8009ec4:	01400204 	movi	r5,8
 8009ec8:	282b883a 	mov	r21,r5
 8009ecc:	003f9f06 	br	8009d4c <__alt_data_end+0xfc009d4c>
 8009ed0:	00804034 	movhi	r2,256
 8009ed4:	10bfffc4 	addi	r2,r2,-1
 8009ed8:	1180952e 	bgeu	r2,r6,800a130 <__umoddi3+0x520>
 8009edc:	01400604 	movi	r5,24
 8009ee0:	2805883a 	mov	r2,r5
 8009ee4:	003f6206 	br	8009c70 <__alt_data_end+0xfc009c70>
 8009ee8:	00803fc4 	movi	r2,255
 8009eec:	14c0932e 	bgeu	r2,r19,800a13c <__umoddi3+0x52c>
 8009ef0:	00800204 	movi	r2,8
 8009ef4:	1007883a 	mov	r3,r2
 8009ef8:	003fb106 	br	8009dc0 <__alt_data_end+0xfc009dc0>
 8009efc:	3548d83a 	srl	r4,r6,r21
 8009f00:	3d0e983a 	sll	r7,r7,r20
 8009f04:	8d10983a 	sll	r8,r17,r20
 8009f08:	8d6cd83a 	srl	r22,r17,r21
 8009f0c:	3922b03a 	or	r17,r7,r4
 8009f10:	882ed43a 	srli	r23,r17,16
 8009f14:	8564d83a 	srl	r18,r16,r21
 8009f18:	b009883a 	mov	r4,r22
 8009f1c:	b80b883a 	mov	r5,r23
 8009f20:	44a4b03a 	or	r18,r8,r18
 8009f24:	3526983a 	sll	r19,r6,r20
 8009f28:	800a2c40 	call	800a2c4 <__umodsi3>
 8009f2c:	b009883a 	mov	r4,r22
 8009f30:	b80b883a 	mov	r5,r23
 8009f34:	1039883a 	mov	fp,r2
 8009f38:	800a2bc0 	call	800a2bc <__udivsi3>
 8009f3c:	102d883a 	mov	r22,r2
 8009f40:	8a3fffcc 	andi	r8,r17,65535
 8009f44:	e004943a 	slli	r2,fp,16
 8009f48:	900cd43a 	srli	r6,r18,16
 8009f4c:	b239383a 	mul	fp,r22,r8
 8009f50:	8520983a 	sll	r16,r16,r20
 8009f54:	118ab03a 	or	r5,r2,r6
 8009f58:	2f00042e 	bgeu	r5,fp,8009f6c <__umoddi3+0x35c>
 8009f5c:	2c4b883a 	add	r5,r5,r17
 8009f60:	b0bfffc4 	addi	r2,r22,-1
 8009f64:	2c40822e 	bgeu	r5,r17,800a170 <__umoddi3+0x560>
 8009f68:	102d883a 	mov	r22,r2
 8009f6c:	2f39c83a 	sub	fp,r5,fp
 8009f70:	e009883a 	mov	r4,fp
 8009f74:	b80b883a 	mov	r5,r23
 8009f78:	da000115 	stw	r8,4(sp)
 8009f7c:	800a2c40 	call	800a2c4 <__umodsi3>
 8009f80:	e009883a 	mov	r4,fp
 8009f84:	b80b883a 	mov	r5,r23
 8009f88:	d8800015 	stw	r2,0(sp)
 8009f8c:	800a2bc0 	call	800a2bc <__udivsi3>
 8009f90:	d9800017 	ldw	r6,0(sp)
 8009f94:	da000117 	ldw	r8,4(sp)
 8009f98:	94bfffcc 	andi	r18,r18,65535
 8009f9c:	300c943a 	slli	r6,r6,16
 8009fa0:	1209383a 	mul	r4,r2,r8
 8009fa4:	3490b03a 	or	r8,r6,r18
 8009fa8:	4100042e 	bgeu	r8,r4,8009fbc <__umoddi3+0x3ac>
 8009fac:	4451883a 	add	r8,r8,r17
 8009fb0:	10ffffc4 	addi	r3,r2,-1
 8009fb4:	44406a2e 	bgeu	r8,r17,800a160 <__umoddi3+0x550>
 8009fb8:	1805883a 	mov	r2,r3
 8009fbc:	b012943a 	slli	r9,r22,16
 8009fc0:	9abfffcc 	andi	r10,r19,65535
 8009fc4:	980ed43a 	srli	r7,r19,16
 8009fc8:	124ab03a 	or	r5,r2,r9
 8009fcc:	2a7fffcc 	andi	r9,r5,65535
 8009fd0:	280ad43a 	srli	r5,r5,16
 8009fd4:	4a8d383a 	mul	r6,r9,r10
 8009fd8:	49d3383a 	mul	r9,r9,r7
 8009fdc:	2a95383a 	mul	r10,r5,r10
 8009fe0:	3004d43a 	srli	r2,r6,16
 8009fe4:	4111c83a 	sub	r8,r8,r4
 8009fe8:	5253883a 	add	r9,r10,r9
 8009fec:	4893883a 	add	r9,r9,r2
 8009ff0:	29cb383a 	mul	r5,r5,r7
 8009ff4:	4a80022e 	bgeu	r9,r10,800a000 <__umoddi3+0x3f0>
 8009ff8:	00800074 	movhi	r2,1
 8009ffc:	288b883a 	add	r5,r5,r2
 800a000:	4808d43a 	srli	r4,r9,16
 800a004:	4812943a 	slli	r9,r9,16
 800a008:	31bfffcc 	andi	r6,r6,65535
 800a00c:	290b883a 	add	r5,r5,r4
 800a010:	498d883a 	add	r6,r9,r6
 800a014:	41403a36 	bltu	r8,r5,800a100 <__umoddi3+0x4f0>
 800a018:	41405d26 	beq	r8,r5,800a190 <__umoddi3+0x580>
 800a01c:	4149c83a 	sub	r4,r8,r5
 800a020:	300f883a 	mov	r7,r6
 800a024:	81cfc83a 	sub	r7,r16,r7
 800a028:	81c7803a 	cmpltu	r3,r16,r7
 800a02c:	20c7c83a 	sub	r3,r4,r3
 800a030:	1d44983a 	sll	r2,r3,r21
 800a034:	3d0ed83a 	srl	r7,r7,r20
 800a038:	1d06d83a 	srl	r3,r3,r20
 800a03c:	11c4b03a 	or	r2,r2,r7
 800a040:	003f9206 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a044:	0025883a 	mov	r18,zero
 800a048:	003f1806 	br	8009cac <__alt_data_end+0xfc009cac>
 800a04c:	98a6983a 	sll	r19,r19,r2
 800a050:	88e8d83a 	srl	r20,r17,r3
 800a054:	80c6d83a 	srl	r3,r16,r3
 800a058:	982cd43a 	srli	r22,r19,16
 800a05c:	88a2983a 	sll	r17,r17,r2
 800a060:	a009883a 	mov	r4,r20
 800a064:	b00b883a 	mov	r5,r22
 800a068:	88eab03a 	or	r21,r17,r3
 800a06c:	1025883a 	mov	r18,r2
 800a070:	800a2c40 	call	800a2c4 <__umodsi3>
 800a074:	a009883a 	mov	r4,r20
 800a078:	b00b883a 	mov	r5,r22
 800a07c:	1023883a 	mov	r17,r2
 800a080:	800a2bc0 	call	800a2bc <__udivsi3>
 800a084:	9f3fffcc 	andi	fp,r19,65535
 800a088:	8822943a 	slli	r17,r17,16
 800a08c:	a80ad43a 	srli	r5,r21,16
 800a090:	1705383a 	mul	r2,r2,fp
 800a094:	84a8983a 	sll	r20,r16,r18
 800a098:	8948b03a 	or	r4,r17,r5
 800a09c:	2080042e 	bgeu	r4,r2,800a0b0 <__umoddi3+0x4a0>
 800a0a0:	24c9883a 	add	r4,r4,r19
 800a0a4:	24c00236 	bltu	r4,r19,800a0b0 <__umoddi3+0x4a0>
 800a0a8:	2080012e 	bgeu	r4,r2,800a0b0 <__umoddi3+0x4a0>
 800a0ac:	24c9883a 	add	r4,r4,r19
 800a0b0:	20afc83a 	sub	r23,r4,r2
 800a0b4:	b809883a 	mov	r4,r23
 800a0b8:	b00b883a 	mov	r5,r22
 800a0bc:	800a2c40 	call	800a2c4 <__umodsi3>
 800a0c0:	1023883a 	mov	r17,r2
 800a0c4:	b809883a 	mov	r4,r23
 800a0c8:	b00b883a 	mov	r5,r22
 800a0cc:	800a2bc0 	call	800a2bc <__udivsi3>
 800a0d0:	8822943a 	slli	r17,r17,16
 800a0d4:	1705383a 	mul	r2,r2,fp
 800a0d8:	a93fffcc 	andi	r4,r21,65535
 800a0dc:	8908b03a 	or	r4,r17,r4
 800a0e0:	2080042e 	bgeu	r4,r2,800a0f4 <__umoddi3+0x4e4>
 800a0e4:	24c9883a 	add	r4,r4,r19
 800a0e8:	24c00236 	bltu	r4,r19,800a0f4 <__umoddi3+0x4e4>
 800a0ec:	2080012e 	bgeu	r4,r2,800a0f4 <__umoddi3+0x4e4>
 800a0f0:	24c9883a 	add	r4,r4,r19
 800a0f4:	20a3c83a 	sub	r17,r4,r2
 800a0f8:	e021883a 	mov	r16,fp
 800a0fc:	003f3d06 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a100:	34cfc83a 	sub	r7,r6,r19
 800a104:	2c4bc83a 	sub	r5,r5,r17
 800a108:	31cd803a 	cmpltu	r6,r6,r7
 800a10c:	298dc83a 	sub	r6,r5,r6
 800a110:	4189c83a 	sub	r4,r8,r6
 800a114:	003fc306 	br	800a024 <__alt_data_end+0xfc00a024>
 800a118:	000b883a 	mov	r5,zero
 800a11c:	002b883a 	mov	r21,zero
 800a120:	003f0a06 	br	8009d4c <__alt_data_end+0xfc009d4c>
 800a124:	01400404 	movi	r5,16
 800a128:	282b883a 	mov	r21,r5
 800a12c:	003f0706 	br	8009d4c <__alt_data_end+0xfc009d4c>
 800a130:	01400404 	movi	r5,16
 800a134:	2805883a 	mov	r2,r5
 800a138:	003ecd06 	br	8009c70 <__alt_data_end+0xfc009c70>
 800a13c:	0005883a 	mov	r2,zero
 800a140:	0007883a 	mov	r3,zero
 800a144:	003f1e06 	br	8009dc0 <__alt_data_end+0xfc009dc0>
 800a148:	00800404 	movi	r2,16
 800a14c:	1007883a 	mov	r3,r2
 800a150:	003f1b06 	br	8009dc0 <__alt_data_end+0xfc009dc0>
 800a154:	000b883a 	mov	r5,zero
 800a158:	0005883a 	mov	r2,zero
 800a15c:	003ec406 	br	8009c70 <__alt_data_end+0xfc009c70>
 800a160:	413f952e 	bgeu	r8,r4,8009fb8 <__alt_data_end+0xfc009fb8>
 800a164:	10bfff84 	addi	r2,r2,-2
 800a168:	4451883a 	add	r8,r8,r17
 800a16c:	003f9306 	br	8009fbc <__alt_data_end+0xfc009fbc>
 800a170:	2f3f7d2e 	bgeu	r5,fp,8009f68 <__alt_data_end+0xfc009f68>
 800a174:	b5bfff84 	addi	r22,r22,-2
 800a178:	2c4b883a 	add	r5,r5,r17
 800a17c:	003f7b06 	br	8009f6c <__alt_data_end+0xfc009f6c>
 800a180:	34cd883a 	add	r6,r6,r19
 800a184:	003f2a06 	br	8009e30 <__alt_data_end+0xfc009e30>
 800a188:	8005883a 	mov	r2,r16
 800a18c:	003efe06 	br	8009d88 <__alt_data_end+0xfc009d88>
 800a190:	81bfdb36 	bltu	r16,r6,800a100 <__alt_data_end+0xfc00a100>
 800a194:	300f883a 	mov	r7,r6
 800a198:	0009883a 	mov	r4,zero
 800a19c:	003fa106 	br	800a024 <__alt_data_end+0xfc00a024>

0800a1a0 <udivmodsi4>:
 800a1a0:	2900182e 	bgeu	r5,r4,800a204 <udivmodsi4+0x64>
 800a1a4:	28001716 	blt	r5,zero,800a204 <udivmodsi4+0x64>
 800a1a8:	00800804 	movi	r2,32
 800a1ac:	00c00044 	movi	r3,1
 800a1b0:	00000206 	br	800a1bc <udivmodsi4+0x1c>
 800a1b4:	10001126 	beq	r2,zero,800a1fc <udivmodsi4+0x5c>
 800a1b8:	28000516 	blt	r5,zero,800a1d0 <udivmodsi4+0x30>
 800a1bc:	294b883a 	add	r5,r5,r5
 800a1c0:	10bfffc4 	addi	r2,r2,-1
 800a1c4:	18c7883a 	add	r3,r3,r3
 800a1c8:	293ffa36 	bltu	r5,r4,800a1b4 <__alt_data_end+0xfc00a1b4>
 800a1cc:	18000b26 	beq	r3,zero,800a1fc <udivmodsi4+0x5c>
 800a1d0:	0005883a 	mov	r2,zero
 800a1d4:	21400236 	bltu	r4,r5,800a1e0 <udivmodsi4+0x40>
 800a1d8:	2149c83a 	sub	r4,r4,r5
 800a1dc:	10c4b03a 	or	r2,r2,r3
 800a1e0:	1806d07a 	srli	r3,r3,1
 800a1e4:	280ad07a 	srli	r5,r5,1
 800a1e8:	183ffa1e 	bne	r3,zero,800a1d4 <__alt_data_end+0xfc00a1d4>
 800a1ec:	3000011e 	bne	r6,zero,800a1f4 <udivmodsi4+0x54>
 800a1f0:	f800283a 	ret
 800a1f4:	2005883a 	mov	r2,r4
 800a1f8:	f800283a 	ret
 800a1fc:	0005883a 	mov	r2,zero
 800a200:	003ffa06 	br	800a1ec <__alt_data_end+0xfc00a1ec>
 800a204:	00c00044 	movi	r3,1
 800a208:	003ff106 	br	800a1d0 <__alt_data_end+0xfc00a1d0>

0800a20c <__divsi3>:
 800a20c:	defffe04 	addi	sp,sp,-8
 800a210:	dfc00115 	stw	ra,4(sp)
 800a214:	dc000015 	stw	r16,0(sp)
 800a218:	20000b16 	blt	r4,zero,800a248 <__divsi3+0x3c>
 800a21c:	0021883a 	mov	r16,zero
 800a220:	28000c16 	blt	r5,zero,800a254 <__divsi3+0x48>
 800a224:	000d883a 	mov	r6,zero
 800a228:	800a1a00 	call	800a1a0 <udivmodsi4>
 800a22c:	0407c83a 	sub	r3,zero,r16
 800a230:	1884f03a 	xor	r2,r3,r2
 800a234:	1405883a 	add	r2,r2,r16
 800a238:	dfc00117 	ldw	ra,4(sp)
 800a23c:	dc000017 	ldw	r16,0(sp)
 800a240:	dec00204 	addi	sp,sp,8
 800a244:	f800283a 	ret
 800a248:	0109c83a 	sub	r4,zero,r4
 800a24c:	04000044 	movi	r16,1
 800a250:	283ff40e 	bge	r5,zero,800a224 <__alt_data_end+0xfc00a224>
 800a254:	014bc83a 	sub	r5,zero,r5
 800a258:	8400005c 	xori	r16,r16,1
 800a25c:	003ff106 	br	800a224 <__alt_data_end+0xfc00a224>

0800a260 <__modsi3>:
 800a260:	defffd04 	addi	sp,sp,-12
 800a264:	dfc00215 	stw	ra,8(sp)
 800a268:	dc400115 	stw	r17,4(sp)
 800a26c:	dc000015 	stw	r16,0(sp)
 800a270:	20000c16 	blt	r4,zero,800a2a4 <__modsi3+0x44>
 800a274:	0023883a 	mov	r17,zero
 800a278:	0021883a 	mov	r16,zero
 800a27c:	28000d16 	blt	r5,zero,800a2b4 <__modsi3+0x54>
 800a280:	01800044 	movi	r6,1
 800a284:	800a1a00 	call	800a1a0 <udivmodsi4>
 800a288:	1404f03a 	xor	r2,r2,r16
 800a28c:	8885883a 	add	r2,r17,r2
 800a290:	dfc00217 	ldw	ra,8(sp)
 800a294:	dc400117 	ldw	r17,4(sp)
 800a298:	dc000017 	ldw	r16,0(sp)
 800a29c:	dec00304 	addi	sp,sp,12
 800a2a0:	f800283a 	ret
 800a2a4:	0109c83a 	sub	r4,zero,r4
 800a2a8:	04400044 	movi	r17,1
 800a2ac:	043fffc4 	movi	r16,-1
 800a2b0:	283ff30e 	bge	r5,zero,800a280 <__alt_data_end+0xfc00a280>
 800a2b4:	014bc83a 	sub	r5,zero,r5
 800a2b8:	003ff106 	br	800a280 <__alt_data_end+0xfc00a280>

0800a2bc <__udivsi3>:
 800a2bc:	000d883a 	mov	r6,zero
 800a2c0:	800a1a01 	jmpi	800a1a0 <udivmodsi4>

0800a2c4 <__umodsi3>:
 800a2c4:	01800044 	movi	r6,1
 800a2c8:	800a1a01 	jmpi	800a1a0 <udivmodsi4>

0800a2cc <__adddf3>:
 800a2cc:	02000434 	movhi	r8,16
 800a2d0:	423fffc4 	addi	r8,r8,-1
 800a2d4:	defffb04 	addi	sp,sp,-20
 800a2d8:	2a12703a 	and	r9,r5,r8
 800a2dc:	2806d7fa 	srli	r3,r5,31
 800a2e0:	3a10703a 	and	r8,r7,r8
 800a2e4:	3804d53a 	srli	r2,r7,20
 800a2e8:	3014d77a 	srli	r10,r6,29
 800a2ec:	dc000015 	stw	r16,0(sp)
 800a2f0:	481290fa 	slli	r9,r9,3
 800a2f4:	2820d53a 	srli	r16,r5,20
 800a2f8:	401090fa 	slli	r8,r8,3
 800a2fc:	200ad77a 	srli	r5,r4,29
 800a300:	380ed7fa 	srli	r7,r7,31
 800a304:	dc800215 	stw	r18,8(sp)
 800a308:	dc400115 	stw	r17,4(sp)
 800a30c:	dfc00415 	stw	ra,16(sp)
 800a310:	dcc00315 	stw	r19,12(sp)
 800a314:	1c803fcc 	andi	r18,r3,255
 800a318:	8401ffcc 	andi	r16,r16,2047
 800a31c:	494ab03a 	or	r5,r9,r5
 800a320:	202290fa 	slli	r17,r4,3
 800a324:	1081ffcc 	andi	r2,r2,2047
 800a328:	4290b03a 	or	r8,r8,r10
 800a32c:	300c90fa 	slli	r6,r6,3
 800a330:	91c07026 	beq	r18,r7,800a4f4 <__adddf3+0x228>
 800a334:	8087c83a 	sub	r3,r16,r2
 800a338:	00c0b30e 	bge	zero,r3,800a608 <__adddf3+0x33c>
 800a33c:	10002a1e 	bne	r2,zero,800a3e8 <__adddf3+0x11c>
 800a340:	4184b03a 	or	r2,r8,r6
 800a344:	1000991e 	bne	r2,zero,800a5ac <__adddf3+0x2e0>
 800a348:	888001cc 	andi	r2,r17,7
 800a34c:	10005b26 	beq	r2,zero,800a4bc <__adddf3+0x1f0>
 800a350:	88c003cc 	andi	r3,r17,15
 800a354:	00800104 	movi	r2,4
 800a358:	18805826 	beq	r3,r2,800a4bc <__adddf3+0x1f0>
 800a35c:	89800104 	addi	r6,r17,4
 800a360:	3463803a 	cmpltu	r17,r6,r17
 800a364:	2c4b883a 	add	r5,r5,r17
 800a368:	2880202c 	andhi	r2,r5,128
 800a36c:	9007883a 	mov	r3,r18
 800a370:	3023883a 	mov	r17,r6
 800a374:	10005426 	beq	r2,zero,800a4c8 <__adddf3+0x1fc>
 800a378:	84000044 	addi	r16,r16,1
 800a37c:	0081ffc4 	movi	r2,2047
 800a380:	8080c126 	beq	r16,r2,800a688 <__adddf3+0x3bc>
 800a384:	013fe034 	movhi	r4,65408
 800a388:	213fffc4 	addi	r4,r4,-1
 800a38c:	290a703a 	and	r5,r5,r4
 800a390:	2804977a 	slli	r2,r5,29
 800a394:	280a927a 	slli	r5,r5,9
 800a398:	8822d0fa 	srli	r17,r17,3
 800a39c:	8401ffcc 	andi	r16,r16,2047
 800a3a0:	2808d33a 	srli	r4,r5,12
 800a3a4:	1444b03a 	or	r2,r2,r17
 800a3a8:	8401ffcc 	andi	r16,r16,2047
 800a3ac:	800a953a 	slli	r5,r16,20
 800a3b0:	18c03fcc 	andi	r3,r3,255
 800a3b4:	04000434 	movhi	r16,16
 800a3b8:	180697fa 	slli	r3,r3,31
 800a3bc:	843fffc4 	addi	r16,r16,-1
 800a3c0:	2420703a 	and	r16,r4,r16
 800a3c4:	8160b03a 	or	r16,r16,r5
 800a3c8:	80c6b03a 	or	r3,r16,r3
 800a3cc:	dfc00417 	ldw	ra,16(sp)
 800a3d0:	dcc00317 	ldw	r19,12(sp)
 800a3d4:	dc800217 	ldw	r18,8(sp)
 800a3d8:	dc400117 	ldw	r17,4(sp)
 800a3dc:	dc000017 	ldw	r16,0(sp)
 800a3e0:	dec00504 	addi	sp,sp,20
 800a3e4:	f800283a 	ret
 800a3e8:	0081ffc4 	movi	r2,2047
 800a3ec:	80bfd626 	beq	r16,r2,800a348 <__alt_data_end+0xfc00a348>
 800a3f0:	42002034 	orhi	r8,r8,128
 800a3f4:	00800e04 	movi	r2,56
 800a3f8:	10c0a616 	blt	r2,r3,800a694 <__adddf3+0x3c8>
 800a3fc:	008007c4 	movi	r2,31
 800a400:	10c0c916 	blt	r2,r3,800a728 <__adddf3+0x45c>
 800a404:	00800804 	movi	r2,32
 800a408:	10c5c83a 	sub	r2,r2,r3
 800a40c:	408e983a 	sll	r7,r8,r2
 800a410:	30c8d83a 	srl	r4,r6,r3
 800a414:	3084983a 	sll	r2,r6,r2
 800a418:	40c6d83a 	srl	r3,r8,r3
 800a41c:	390cb03a 	or	r6,r7,r4
 800a420:	1004c03a 	cmpne	r2,r2,zero
 800a424:	308cb03a 	or	r6,r6,r2
 800a428:	898dc83a 	sub	r6,r17,r6
 800a42c:	89a3803a 	cmpltu	r17,r17,r6
 800a430:	28cbc83a 	sub	r5,r5,r3
 800a434:	2c4bc83a 	sub	r5,r5,r17
 800a438:	3023883a 	mov	r17,r6
 800a43c:	2880202c 	andhi	r2,r5,128
 800a440:	10006d26 	beq	r2,zero,800a5f8 <__adddf3+0x32c>
 800a444:	04c02034 	movhi	r19,128
 800a448:	9cffffc4 	addi	r19,r19,-1
 800a44c:	2ce6703a 	and	r19,r5,r19
 800a450:	98007e26 	beq	r19,zero,800a64c <__adddf3+0x380>
 800a454:	9809883a 	mov	r4,r19
 800a458:	800c8680 	call	800c868 <__clzsi2>
 800a45c:	10fffe04 	addi	r3,r2,-8
 800a460:	010007c4 	movi	r4,31
 800a464:	20c07f16 	blt	r4,r3,800a664 <__adddf3+0x398>
 800a468:	01400a04 	movi	r5,40
 800a46c:	2885c83a 	sub	r2,r5,r2
 800a470:	888ad83a 	srl	r5,r17,r2
 800a474:	98e6983a 	sll	r19,r19,r3
 800a478:	88e2983a 	sll	r17,r17,r3
 800a47c:	2ce6b03a 	or	r19,r5,r19
 800a480:	1c007c16 	blt	r3,r16,800a674 <__adddf3+0x3a8>
 800a484:	1c21c83a 	sub	r16,r3,r16
 800a488:	81400044 	addi	r5,r16,1
 800a48c:	00c007c4 	movi	r3,31
 800a490:	19409816 	blt	r3,r5,800a6f4 <__adddf3+0x428>
 800a494:	1c21c83a 	sub	r16,r3,r16
 800a498:	8c08983a 	sll	r4,r17,r16
 800a49c:	8946d83a 	srl	r3,r17,r5
 800a4a0:	9c20983a 	sll	r16,r19,r16
 800a4a4:	2008c03a 	cmpne	r4,r4,zero
 800a4a8:	994ad83a 	srl	r5,r19,r5
 800a4ac:	1c06b03a 	or	r3,r3,r16
 800a4b0:	1922b03a 	or	r17,r3,r4
 800a4b4:	0021883a 	mov	r16,zero
 800a4b8:	003fa306 	br	800a348 <__alt_data_end+0xfc00a348>
 800a4bc:	2880202c 	andhi	r2,r5,128
 800a4c0:	9007883a 	mov	r3,r18
 800a4c4:	103fac1e 	bne	r2,zero,800a378 <__alt_data_end+0xfc00a378>
 800a4c8:	2804977a 	slli	r2,r5,29
 800a4cc:	8822d0fa 	srli	r17,r17,3
 800a4d0:	0101ffc4 	movi	r4,2047
 800a4d4:	280ad0fa 	srli	r5,r5,3
 800a4d8:	1444b03a 	or	r2,r2,r17
 800a4dc:	81002c26 	beq	r16,r4,800a590 <__adddf3+0x2c4>
 800a4e0:	8120703a 	and	r16,r16,r4
 800a4e4:	01000434 	movhi	r4,16
 800a4e8:	213fffc4 	addi	r4,r4,-1
 800a4ec:	2908703a 	and	r4,r5,r4
 800a4f0:	003fad06 	br	800a3a8 <__alt_data_end+0xfc00a3a8>
 800a4f4:	8089c83a 	sub	r4,r16,r2
 800a4f8:	01006a0e 	bge	zero,r4,800a6a4 <__adddf3+0x3d8>
 800a4fc:	10003326 	beq	r2,zero,800a5cc <__adddf3+0x300>
 800a500:	0081ffc4 	movi	r2,2047
 800a504:	80bf9026 	beq	r16,r2,800a348 <__alt_data_end+0xfc00a348>
 800a508:	42002034 	orhi	r8,r8,128
 800a50c:	00800e04 	movi	r2,56
 800a510:	1100b116 	blt	r2,r4,800a7d8 <__adddf3+0x50c>
 800a514:	008007c4 	movi	r2,31
 800a518:	1100e216 	blt	r2,r4,800a8a4 <__adddf3+0x5d8>
 800a51c:	00800804 	movi	r2,32
 800a520:	1105c83a 	sub	r2,r2,r4
 800a524:	4092983a 	sll	r9,r8,r2
 800a528:	310ed83a 	srl	r7,r6,r4
 800a52c:	3084983a 	sll	r2,r6,r2
 800a530:	4110d83a 	srl	r8,r8,r4
 800a534:	49ccb03a 	or	r6,r9,r7
 800a538:	1004c03a 	cmpne	r2,r2,zero
 800a53c:	308cb03a 	or	r6,r6,r2
 800a540:	344d883a 	add	r6,r6,r17
 800a544:	3463803a 	cmpltu	r17,r6,r17
 800a548:	414b883a 	add	r5,r8,r5
 800a54c:	2c4b883a 	add	r5,r5,r17
 800a550:	3023883a 	mov	r17,r6
 800a554:	2880202c 	andhi	r2,r5,128
 800a558:	10002726 	beq	r2,zero,800a5f8 <__adddf3+0x32c>
 800a55c:	84000044 	addi	r16,r16,1
 800a560:	0081ffc4 	movi	r2,2047
 800a564:	8080ae26 	beq	r16,r2,800a820 <__adddf3+0x554>
 800a568:	00bfe034 	movhi	r2,65408
 800a56c:	10bfffc4 	addi	r2,r2,-1
 800a570:	288a703a 	and	r5,r5,r2
 800a574:	880cd07a 	srli	r6,r17,1
 800a578:	280897fa 	slli	r4,r5,31
 800a57c:	88c0004c 	andi	r3,r17,1
 800a580:	30e2b03a 	or	r17,r6,r3
 800a584:	280ad07a 	srli	r5,r5,1
 800a588:	8922b03a 	or	r17,r17,r4
 800a58c:	003f6e06 	br	800a348 <__alt_data_end+0xfc00a348>
 800a590:	1148b03a 	or	r4,r2,r5
 800a594:	20003c26 	beq	r4,zero,800a688 <__adddf3+0x3bc>
 800a598:	29000234 	orhi	r4,r5,8
 800a59c:	01400434 	movhi	r5,16
 800a5a0:	297fffc4 	addi	r5,r5,-1
 800a5a4:	2148703a 	and	r4,r4,r5
 800a5a8:	003f7f06 	br	800a3a8 <__alt_data_end+0xfc00a3a8>
 800a5ac:	18ffffc4 	addi	r3,r3,-1
 800a5b0:	18004d1e 	bne	r3,zero,800a6e8 <__adddf3+0x41c>
 800a5b4:	898dc83a 	sub	r6,r17,r6
 800a5b8:	89a3803a 	cmpltu	r17,r17,r6
 800a5bc:	2a0bc83a 	sub	r5,r5,r8
 800a5c0:	2c4bc83a 	sub	r5,r5,r17
 800a5c4:	3023883a 	mov	r17,r6
 800a5c8:	003f9c06 	br	800a43c <__alt_data_end+0xfc00a43c>
 800a5cc:	4184b03a 	or	r2,r8,r6
 800a5d0:	103f5d26 	beq	r2,zero,800a348 <__alt_data_end+0xfc00a348>
 800a5d4:	213fffc4 	addi	r4,r4,-1
 800a5d8:	203fd926 	beq	r4,zero,800a540 <__alt_data_end+0xfc00a540>
 800a5dc:	0081ffc4 	movi	r2,2047
 800a5e0:	80bfca1e 	bne	r16,r2,800a50c <__alt_data_end+0xfc00a50c>
 800a5e4:	003f5806 	br	800a348 <__alt_data_end+0xfc00a348>
 800a5e8:	10c8b03a 	or	r4,r2,r3
 800a5ec:	20008b26 	beq	r4,zero,800a81c <__adddf3+0x550>
 800a5f0:	100b883a 	mov	r5,r2
 800a5f4:	1823883a 	mov	r17,r3
 800a5f8:	888001cc 	andi	r2,r17,7
 800a5fc:	103f541e 	bne	r2,zero,800a350 <__alt_data_end+0xfc00a350>
 800a600:	9007883a 	mov	r3,r18
 800a604:	003fb006 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800a608:	1800531e 	bne	r3,zero,800a758 <__adddf3+0x48c>
 800a60c:	80800044 	addi	r2,r16,1
 800a610:	1081ffcc 	andi	r2,r2,2047
 800a614:	00c00044 	movi	r3,1
 800a618:	1880990e 	bge	r3,r2,800a880 <__adddf3+0x5b4>
 800a61c:	8985c83a 	sub	r2,r17,r6
 800a620:	8887803a 	cmpltu	r3,r17,r2
 800a624:	2a27c83a 	sub	r19,r5,r8
 800a628:	98e7c83a 	sub	r19,r19,r3
 800a62c:	98c0202c 	andhi	r3,r19,128
 800a630:	18006226 	beq	r3,zero,800a7bc <__adddf3+0x4f0>
 800a634:	3463c83a 	sub	r17,r6,r17
 800a638:	4151c83a 	sub	r8,r8,r5
 800a63c:	344d803a 	cmpltu	r6,r6,r17
 800a640:	41a7c83a 	sub	r19,r8,r6
 800a644:	3825883a 	mov	r18,r7
 800a648:	983f821e 	bne	r19,zero,800a454 <__alt_data_end+0xfc00a454>
 800a64c:	8809883a 	mov	r4,r17
 800a650:	800c8680 	call	800c868 <__clzsi2>
 800a654:	10800804 	addi	r2,r2,32
 800a658:	10fffe04 	addi	r3,r2,-8
 800a65c:	010007c4 	movi	r4,31
 800a660:	20ff810e 	bge	r4,r3,800a468 <__alt_data_end+0xfc00a468>
 800a664:	14fff604 	addi	r19,r2,-40
 800a668:	8ce6983a 	sll	r19,r17,r19
 800a66c:	0023883a 	mov	r17,zero
 800a670:	1c3f840e 	bge	r3,r16,800a484 <__alt_data_end+0xfc00a484>
 800a674:	017fe034 	movhi	r5,65408
 800a678:	297fffc4 	addi	r5,r5,-1
 800a67c:	80e1c83a 	sub	r16,r16,r3
 800a680:	994a703a 	and	r5,r19,r5
 800a684:	003f3006 	br	800a348 <__alt_data_end+0xfc00a348>
 800a688:	0009883a 	mov	r4,zero
 800a68c:	0005883a 	mov	r2,zero
 800a690:	003f4506 	br	800a3a8 <__alt_data_end+0xfc00a3a8>
 800a694:	418cb03a 	or	r6,r8,r6
 800a698:	300cc03a 	cmpne	r6,r6,zero
 800a69c:	0007883a 	mov	r3,zero
 800a6a0:	003f6106 	br	800a428 <__alt_data_end+0xfc00a428>
 800a6a4:	2000921e 	bne	r4,zero,800a8f0 <__adddf3+0x624>
 800a6a8:	80800044 	addi	r2,r16,1
 800a6ac:	11c1ffcc 	andi	r7,r2,2047
 800a6b0:	01000044 	movi	r4,1
 800a6b4:	21c0610e 	bge	r4,r7,800a83c <__adddf3+0x570>
 800a6b8:	0101ffc4 	movi	r4,2047
 800a6bc:	1100a326 	beq	r2,r4,800a94c <__adddf3+0x680>
 800a6c0:	344d883a 	add	r6,r6,r17
 800a6c4:	3463803a 	cmpltu	r17,r6,r17
 800a6c8:	414b883a 	add	r5,r8,r5
 800a6cc:	2c4b883a 	add	r5,r5,r17
 800a6d0:	282297fa 	slli	r17,r5,31
 800a6d4:	300cd07a 	srli	r6,r6,1
 800a6d8:	280ad07a 	srli	r5,r5,1
 800a6dc:	1021883a 	mov	r16,r2
 800a6e0:	89a2b03a 	or	r17,r17,r6
 800a6e4:	003f1806 	br	800a348 <__alt_data_end+0xfc00a348>
 800a6e8:	0081ffc4 	movi	r2,2047
 800a6ec:	80bf411e 	bne	r16,r2,800a3f4 <__alt_data_end+0xfc00a3f4>
 800a6f0:	003f1506 	br	800a348 <__alt_data_end+0xfc00a348>
 800a6f4:	80bff844 	addi	r2,r16,-31
 800a6f8:	00c00804 	movi	r3,32
 800a6fc:	9884d83a 	srl	r2,r19,r2
 800a700:	28c04a26 	beq	r5,r3,800a82c <__adddf3+0x560>
 800a704:	00c00fc4 	movi	r3,63
 800a708:	1c21c83a 	sub	r16,r3,r16
 800a70c:	9c26983a 	sll	r19,r19,r16
 800a710:	9c62b03a 	or	r17,r19,r17
 800a714:	8822c03a 	cmpne	r17,r17,zero
 800a718:	88a2b03a 	or	r17,r17,r2
 800a71c:	000b883a 	mov	r5,zero
 800a720:	0021883a 	mov	r16,zero
 800a724:	003fb406 	br	800a5f8 <__alt_data_end+0xfc00a5f8>
 800a728:	18bff804 	addi	r2,r3,-32
 800a72c:	01000804 	movi	r4,32
 800a730:	4084d83a 	srl	r2,r8,r2
 800a734:	19003f26 	beq	r3,r4,800a834 <__adddf3+0x568>
 800a738:	01001004 	movi	r4,64
 800a73c:	20c7c83a 	sub	r3,r4,r3
 800a740:	40d0983a 	sll	r8,r8,r3
 800a744:	418cb03a 	or	r6,r8,r6
 800a748:	300cc03a 	cmpne	r6,r6,zero
 800a74c:	308cb03a 	or	r6,r6,r2
 800a750:	0007883a 	mov	r3,zero
 800a754:	003f3406 	br	800a428 <__alt_data_end+0xfc00a428>
 800a758:	80002326 	beq	r16,zero,800a7e8 <__adddf3+0x51c>
 800a75c:	0101ffc4 	movi	r4,2047
 800a760:	11005e26 	beq	r2,r4,800a8dc <__adddf3+0x610>
 800a764:	00c7c83a 	sub	r3,zero,r3
 800a768:	29402034 	orhi	r5,r5,128
 800a76c:	01000e04 	movi	r4,56
 800a770:	20c07216 	blt	r4,r3,800a93c <__adddf3+0x670>
 800a774:	010007c4 	movi	r4,31
 800a778:	20c0ce16 	blt	r4,r3,800aab4 <__adddf3+0x7e8>
 800a77c:	01000804 	movi	r4,32
 800a780:	20c9c83a 	sub	r4,r4,r3
 800a784:	2914983a 	sll	r10,r5,r4
 800a788:	88d2d83a 	srl	r9,r17,r3
 800a78c:	8908983a 	sll	r4,r17,r4
 800a790:	28c6d83a 	srl	r3,r5,r3
 800a794:	5262b03a 	or	r17,r10,r9
 800a798:	2008c03a 	cmpne	r4,r4,zero
 800a79c:	8922b03a 	or	r17,r17,r4
 800a7a0:	3463c83a 	sub	r17,r6,r17
 800a7a4:	40c7c83a 	sub	r3,r8,r3
 800a7a8:	344d803a 	cmpltu	r6,r6,r17
 800a7ac:	198bc83a 	sub	r5,r3,r6
 800a7b0:	1021883a 	mov	r16,r2
 800a7b4:	3825883a 	mov	r18,r7
 800a7b8:	003f2006 	br	800a43c <__alt_data_end+0xfc00a43c>
 800a7bc:	9886b03a 	or	r3,r19,r2
 800a7c0:	1800141e 	bne	r3,zero,800a814 <__adddf3+0x548>
 800a7c4:	0007883a 	mov	r3,zero
 800a7c8:	000b883a 	mov	r5,zero
 800a7cc:	0023883a 	mov	r17,zero
 800a7d0:	0021883a 	mov	r16,zero
 800a7d4:	003f3c06 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800a7d8:	418cb03a 	or	r6,r8,r6
 800a7dc:	300cc03a 	cmpne	r6,r6,zero
 800a7e0:	0011883a 	mov	r8,zero
 800a7e4:	003f5606 	br	800a540 <__alt_data_end+0xfc00a540>
 800a7e8:	2c48b03a 	or	r4,r5,r17
 800a7ec:	20003b26 	beq	r4,zero,800a8dc <__adddf3+0x610>
 800a7f0:	00c6303a 	nor	r3,zero,r3
 800a7f4:	1800371e 	bne	r3,zero,800a8d4 <__adddf3+0x608>
 800a7f8:	3463c83a 	sub	r17,r6,r17
 800a7fc:	414bc83a 	sub	r5,r8,r5
 800a800:	344d803a 	cmpltu	r6,r6,r17
 800a804:	298bc83a 	sub	r5,r5,r6
 800a808:	1021883a 	mov	r16,r2
 800a80c:	3825883a 	mov	r18,r7
 800a810:	003f0a06 	br	800a43c <__alt_data_end+0xfc00a43c>
 800a814:	1023883a 	mov	r17,r2
 800a818:	003f0d06 	br	800a450 <__alt_data_end+0xfc00a450>
 800a81c:	0007883a 	mov	r3,zero
 800a820:	000b883a 	mov	r5,zero
 800a824:	0023883a 	mov	r17,zero
 800a828:	003f2706 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800a82c:	0027883a 	mov	r19,zero
 800a830:	003fb706 	br	800a710 <__alt_data_end+0xfc00a710>
 800a834:	0011883a 	mov	r8,zero
 800a838:	003fc206 	br	800a744 <__alt_data_end+0xfc00a744>
 800a83c:	2c44b03a 	or	r2,r5,r17
 800a840:	8000871e 	bne	r16,zero,800aa60 <__adddf3+0x794>
 800a844:	1000b126 	beq	r2,zero,800ab0c <__adddf3+0x840>
 800a848:	4184b03a 	or	r2,r8,r6
 800a84c:	103ebe26 	beq	r2,zero,800a348 <__alt_data_end+0xfc00a348>
 800a850:	3445883a 	add	r2,r6,r17
 800a854:	1463803a 	cmpltu	r17,r2,r17
 800a858:	414b883a 	add	r5,r8,r5
 800a85c:	2c4b883a 	add	r5,r5,r17
 800a860:	28c0202c 	andhi	r3,r5,128
 800a864:	1023883a 	mov	r17,r2
 800a868:	183f6326 	beq	r3,zero,800a5f8 <__alt_data_end+0xfc00a5f8>
 800a86c:	00bfe034 	movhi	r2,65408
 800a870:	10bfffc4 	addi	r2,r2,-1
 800a874:	2021883a 	mov	r16,r4
 800a878:	288a703a 	and	r5,r5,r2
 800a87c:	003eb206 	br	800a348 <__alt_data_end+0xfc00a348>
 800a880:	2c44b03a 	or	r2,r5,r17
 800a884:	8000251e 	bne	r16,zero,800a91c <__adddf3+0x650>
 800a888:	10004b1e 	bne	r2,zero,800a9b8 <__adddf3+0x6ec>
 800a88c:	4184b03a 	or	r2,r8,r6
 800a890:	103fe226 	beq	r2,zero,800a81c <__alt_data_end+0xfc00a81c>
 800a894:	400b883a 	mov	r5,r8
 800a898:	3023883a 	mov	r17,r6
 800a89c:	3825883a 	mov	r18,r7
 800a8a0:	003ea906 	br	800a348 <__alt_data_end+0xfc00a348>
 800a8a4:	20bff804 	addi	r2,r4,-32
 800a8a8:	01c00804 	movi	r7,32
 800a8ac:	4084d83a 	srl	r2,r8,r2
 800a8b0:	21c07e26 	beq	r4,r7,800aaac <__adddf3+0x7e0>
 800a8b4:	01c01004 	movi	r7,64
 800a8b8:	3909c83a 	sub	r4,r7,r4
 800a8bc:	4110983a 	sll	r8,r8,r4
 800a8c0:	418cb03a 	or	r6,r8,r6
 800a8c4:	300cc03a 	cmpne	r6,r6,zero
 800a8c8:	308cb03a 	or	r6,r6,r2
 800a8cc:	0011883a 	mov	r8,zero
 800a8d0:	003f1b06 	br	800a540 <__alt_data_end+0xfc00a540>
 800a8d4:	0101ffc4 	movi	r4,2047
 800a8d8:	113fa41e 	bne	r2,r4,800a76c <__alt_data_end+0xfc00a76c>
 800a8dc:	400b883a 	mov	r5,r8
 800a8e0:	3023883a 	mov	r17,r6
 800a8e4:	1021883a 	mov	r16,r2
 800a8e8:	3825883a 	mov	r18,r7
 800a8ec:	003e9606 	br	800a348 <__alt_data_end+0xfc00a348>
 800a8f0:	80001a1e 	bne	r16,zero,800a95c <__adddf3+0x690>
 800a8f4:	2c4eb03a 	or	r7,r5,r17
 800a8f8:	38005526 	beq	r7,zero,800aa50 <__adddf3+0x784>
 800a8fc:	0108303a 	nor	r4,zero,r4
 800a900:	2000511e 	bne	r4,zero,800aa48 <__adddf3+0x77c>
 800a904:	89a3883a 	add	r17,r17,r6
 800a908:	414b883a 	add	r5,r8,r5
 800a90c:	898d803a 	cmpltu	r6,r17,r6
 800a910:	298b883a 	add	r5,r5,r6
 800a914:	1021883a 	mov	r16,r2
 800a918:	003f0e06 	br	800a554 <__alt_data_end+0xfc00a554>
 800a91c:	1000341e 	bne	r2,zero,800a9f0 <__adddf3+0x724>
 800a920:	4184b03a 	or	r2,r8,r6
 800a924:	10006f26 	beq	r2,zero,800aae4 <__adddf3+0x818>
 800a928:	400b883a 	mov	r5,r8
 800a92c:	3023883a 	mov	r17,r6
 800a930:	3825883a 	mov	r18,r7
 800a934:	0401ffc4 	movi	r16,2047
 800a938:	003e8306 	br	800a348 <__alt_data_end+0xfc00a348>
 800a93c:	2c62b03a 	or	r17,r5,r17
 800a940:	8822c03a 	cmpne	r17,r17,zero
 800a944:	0007883a 	mov	r3,zero
 800a948:	003f9506 	br	800a7a0 <__alt_data_end+0xfc00a7a0>
 800a94c:	1021883a 	mov	r16,r2
 800a950:	000b883a 	mov	r5,zero
 800a954:	0023883a 	mov	r17,zero
 800a958:	003edb06 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800a95c:	01c1ffc4 	movi	r7,2047
 800a960:	11c03b26 	beq	r2,r7,800aa50 <__adddf3+0x784>
 800a964:	0109c83a 	sub	r4,zero,r4
 800a968:	29402034 	orhi	r5,r5,128
 800a96c:	01c00e04 	movi	r7,56
 800a970:	39006216 	blt	r7,r4,800aafc <__adddf3+0x830>
 800a974:	01c007c4 	movi	r7,31
 800a978:	39006b16 	blt	r7,r4,800ab28 <__adddf3+0x85c>
 800a97c:	01c00804 	movi	r7,32
 800a980:	390fc83a 	sub	r7,r7,r4
 800a984:	29d4983a 	sll	r10,r5,r7
 800a988:	8912d83a 	srl	r9,r17,r4
 800a98c:	89ce983a 	sll	r7,r17,r7
 800a990:	2908d83a 	srl	r4,r5,r4
 800a994:	5262b03a 	or	r17,r10,r9
 800a998:	380ac03a 	cmpne	r5,r7,zero
 800a99c:	8962b03a 	or	r17,r17,r5
 800a9a0:	89a3883a 	add	r17,r17,r6
 800a9a4:	2211883a 	add	r8,r4,r8
 800a9a8:	898d803a 	cmpltu	r6,r17,r6
 800a9ac:	418b883a 	add	r5,r8,r6
 800a9b0:	1021883a 	mov	r16,r2
 800a9b4:	003ee706 	br	800a554 <__alt_data_end+0xfc00a554>
 800a9b8:	4184b03a 	or	r2,r8,r6
 800a9bc:	103e6226 	beq	r2,zero,800a348 <__alt_data_end+0xfc00a348>
 800a9c0:	8987c83a 	sub	r3,r17,r6
 800a9c4:	88c9803a 	cmpltu	r4,r17,r3
 800a9c8:	2a05c83a 	sub	r2,r5,r8
 800a9cc:	1105c83a 	sub	r2,r2,r4
 800a9d0:	1100202c 	andhi	r4,r2,128
 800a9d4:	203f0426 	beq	r4,zero,800a5e8 <__alt_data_end+0xfc00a5e8>
 800a9d8:	3463c83a 	sub	r17,r6,r17
 800a9dc:	414bc83a 	sub	r5,r8,r5
 800a9e0:	344d803a 	cmpltu	r6,r6,r17
 800a9e4:	298bc83a 	sub	r5,r5,r6
 800a9e8:	3825883a 	mov	r18,r7
 800a9ec:	003e5606 	br	800a348 <__alt_data_end+0xfc00a348>
 800a9f0:	4184b03a 	or	r2,r8,r6
 800a9f4:	10002b26 	beq	r2,zero,800aaa4 <__adddf3+0x7d8>
 800a9f8:	2804d0fa 	srli	r2,r5,3
 800a9fc:	8822d0fa 	srli	r17,r17,3
 800aa00:	280a977a 	slli	r5,r5,29
 800aa04:	10c0022c 	andhi	r3,r2,8
 800aa08:	2c62b03a 	or	r17,r5,r17
 800aa0c:	18000826 	beq	r3,zero,800aa30 <__adddf3+0x764>
 800aa10:	4008d0fa 	srli	r4,r8,3
 800aa14:	20c0022c 	andhi	r3,r4,8
 800aa18:	1800051e 	bne	r3,zero,800aa30 <__adddf3+0x764>
 800aa1c:	300cd0fa 	srli	r6,r6,3
 800aa20:	4010977a 	slli	r8,r8,29
 800aa24:	2005883a 	mov	r2,r4
 800aa28:	3825883a 	mov	r18,r7
 800aa2c:	41a2b03a 	or	r17,r8,r6
 800aa30:	880ad77a 	srli	r5,r17,29
 800aa34:	100490fa 	slli	r2,r2,3
 800aa38:	882290fa 	slli	r17,r17,3
 800aa3c:	0401ffc4 	movi	r16,2047
 800aa40:	288ab03a 	or	r5,r5,r2
 800aa44:	003e4006 	br	800a348 <__alt_data_end+0xfc00a348>
 800aa48:	01c1ffc4 	movi	r7,2047
 800aa4c:	11ffc71e 	bne	r2,r7,800a96c <__alt_data_end+0xfc00a96c>
 800aa50:	400b883a 	mov	r5,r8
 800aa54:	3023883a 	mov	r17,r6
 800aa58:	1021883a 	mov	r16,r2
 800aa5c:	003e3a06 	br	800a348 <__alt_data_end+0xfc00a348>
 800aa60:	10002d26 	beq	r2,zero,800ab18 <__adddf3+0x84c>
 800aa64:	4184b03a 	or	r2,r8,r6
 800aa68:	10000e26 	beq	r2,zero,800aaa4 <__adddf3+0x7d8>
 800aa6c:	2804d0fa 	srli	r2,r5,3
 800aa70:	8822d0fa 	srli	r17,r17,3
 800aa74:	280a977a 	slli	r5,r5,29
 800aa78:	10c0022c 	andhi	r3,r2,8
 800aa7c:	2c62b03a 	or	r17,r5,r17
 800aa80:	183feb26 	beq	r3,zero,800aa30 <__alt_data_end+0xfc00aa30>
 800aa84:	4008d0fa 	srli	r4,r8,3
 800aa88:	20c0022c 	andhi	r3,r4,8
 800aa8c:	183fe81e 	bne	r3,zero,800aa30 <__alt_data_end+0xfc00aa30>
 800aa90:	300cd0fa 	srli	r6,r6,3
 800aa94:	4010977a 	slli	r8,r8,29
 800aa98:	2005883a 	mov	r2,r4
 800aa9c:	41a2b03a 	or	r17,r8,r6
 800aaa0:	003fe306 	br	800aa30 <__alt_data_end+0xfc00aa30>
 800aaa4:	0401ffc4 	movi	r16,2047
 800aaa8:	003e2706 	br	800a348 <__alt_data_end+0xfc00a348>
 800aaac:	0011883a 	mov	r8,zero
 800aab0:	003f8306 	br	800a8c0 <__alt_data_end+0xfc00a8c0>
 800aab4:	193ff804 	addi	r4,r3,-32
 800aab8:	02400804 	movi	r9,32
 800aabc:	2908d83a 	srl	r4,r5,r4
 800aac0:	1a402526 	beq	r3,r9,800ab58 <__adddf3+0x88c>
 800aac4:	02401004 	movi	r9,64
 800aac8:	48c7c83a 	sub	r3,r9,r3
 800aacc:	28ca983a 	sll	r5,r5,r3
 800aad0:	2c62b03a 	or	r17,r5,r17
 800aad4:	8822c03a 	cmpne	r17,r17,zero
 800aad8:	8922b03a 	or	r17,r17,r4
 800aadc:	0007883a 	mov	r3,zero
 800aae0:	003f2f06 	br	800a7a0 <__alt_data_end+0xfc00a7a0>
 800aae4:	01402034 	movhi	r5,128
 800aae8:	0007883a 	mov	r3,zero
 800aaec:	297fffc4 	addi	r5,r5,-1
 800aaf0:	047ffe04 	movi	r17,-8
 800aaf4:	0401ffc4 	movi	r16,2047
 800aaf8:	003e7306 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800aafc:	2c62b03a 	or	r17,r5,r17
 800ab00:	8822c03a 	cmpne	r17,r17,zero
 800ab04:	0009883a 	mov	r4,zero
 800ab08:	003fa506 	br	800a9a0 <__alt_data_end+0xfc00a9a0>
 800ab0c:	400b883a 	mov	r5,r8
 800ab10:	3023883a 	mov	r17,r6
 800ab14:	003e0c06 	br	800a348 <__alt_data_end+0xfc00a348>
 800ab18:	400b883a 	mov	r5,r8
 800ab1c:	3023883a 	mov	r17,r6
 800ab20:	0401ffc4 	movi	r16,2047
 800ab24:	003e0806 	br	800a348 <__alt_data_end+0xfc00a348>
 800ab28:	21fff804 	addi	r7,r4,-32
 800ab2c:	02400804 	movi	r9,32
 800ab30:	29ced83a 	srl	r7,r5,r7
 800ab34:	22400a26 	beq	r4,r9,800ab60 <__adddf3+0x894>
 800ab38:	02401004 	movi	r9,64
 800ab3c:	4909c83a 	sub	r4,r9,r4
 800ab40:	290a983a 	sll	r5,r5,r4
 800ab44:	2c62b03a 	or	r17,r5,r17
 800ab48:	8822c03a 	cmpne	r17,r17,zero
 800ab4c:	89e2b03a 	or	r17,r17,r7
 800ab50:	0009883a 	mov	r4,zero
 800ab54:	003f9206 	br	800a9a0 <__alt_data_end+0xfc00a9a0>
 800ab58:	000b883a 	mov	r5,zero
 800ab5c:	003fdc06 	br	800aad0 <__alt_data_end+0xfc00aad0>
 800ab60:	000b883a 	mov	r5,zero
 800ab64:	003ff706 	br	800ab44 <__alt_data_end+0xfc00ab44>

0800ab68 <__divdf3>:
 800ab68:	defff204 	addi	sp,sp,-56
 800ab6c:	dd000815 	stw	r20,32(sp)
 800ab70:	2828d53a 	srli	r20,r5,20
 800ab74:	dd800a15 	stw	r22,40(sp)
 800ab78:	282cd7fa 	srli	r22,r5,31
 800ab7c:	dc000415 	stw	r16,16(sp)
 800ab80:	04000434 	movhi	r16,16
 800ab84:	df000c15 	stw	fp,48(sp)
 800ab88:	dcc00715 	stw	r19,28(sp)
 800ab8c:	dc800615 	stw	r18,24(sp)
 800ab90:	dc400515 	stw	r17,20(sp)
 800ab94:	843fffc4 	addi	r16,r16,-1
 800ab98:	dfc00d15 	stw	ra,52(sp)
 800ab9c:	ddc00b15 	stw	r23,44(sp)
 800aba0:	dd400915 	stw	r21,36(sp)
 800aba4:	a501ffcc 	andi	r20,r20,2047
 800aba8:	2025883a 	mov	r18,r4
 800abac:	2027883a 	mov	r19,r4
 800abb0:	2c22703a 	and	r17,r5,r16
 800abb4:	b7003fcc 	andi	fp,r22,255
 800abb8:	a0005e26 	beq	r20,zero,800ad34 <__divdf3+0x1cc>
 800abbc:	0081ffc4 	movi	r2,2047
 800abc0:	a0803526 	beq	r20,r2,800ac98 <__divdf3+0x130>
 800abc4:	8c000434 	orhi	r16,r17,16
 800abc8:	2004d77a 	srli	r2,r4,29
 800abcc:	802090fa 	slli	r16,r16,3
 800abd0:	202690fa 	slli	r19,r4,3
 800abd4:	a53f0044 	addi	r20,r20,-1023
 800abd8:	80a2b03a 	or	r17,r16,r2
 800abdc:	0025883a 	mov	r18,zero
 800abe0:	0011883a 	mov	r8,zero
 800abe4:	380ad53a 	srli	r5,r7,20
 800abe8:	382ed7fa 	srli	r23,r7,31
 800abec:	04000434 	movhi	r16,16
 800abf0:	843fffc4 	addi	r16,r16,-1
 800abf4:	2941ffcc 	andi	r5,r5,2047
 800abf8:	302b883a 	mov	r21,r6
 800abfc:	3c20703a 	and	r16,r7,r16
 800ac00:	ba403fcc 	andi	r9,r23,255
 800ac04:	28006726 	beq	r5,zero,800ada4 <__divdf3+0x23c>
 800ac08:	0081ffc4 	movi	r2,2047
 800ac0c:	28805f26 	beq	r5,r2,800ad8c <__divdf3+0x224>
 800ac10:	84000434 	orhi	r16,r16,16
 800ac14:	3004d77a 	srli	r2,r6,29
 800ac18:	802090fa 	slli	r16,r16,3
 800ac1c:	302a90fa 	slli	r21,r6,3
 800ac20:	297f0044 	addi	r5,r5,-1023
 800ac24:	80a0b03a 	or	r16,r16,r2
 800ac28:	000f883a 	mov	r7,zero
 800ac2c:	3c86b03a 	or	r3,r7,r18
 800ac30:	180690ba 	slli	r3,r3,2
 800ac34:	00820074 	movhi	r2,2049
 800ac38:	10ab1604 	addi	r2,r2,-21416
 800ac3c:	1887883a 	add	r3,r3,r2
 800ac40:	18c00017 	ldw	r3,0(r3)
 800ac44:	b5c8f03a 	xor	r4,r22,r23
 800ac48:	200d883a 	mov	r6,r4
 800ac4c:	24803fcc 	andi	r18,r4,255
 800ac50:	a169c83a 	sub	r20,r20,r5
 800ac54:	1800683a 	jmp	r3
 800ac58:	0800aea0 	cmpeqi	zero,at,698
 800ac5c:	0800acd0 	cmplti	zero,at,691
 800ac60:	0800ae64 	muli	zero,at,697
 800ac64:	0800acb4 	orhi	zero,at,690
 800ac68:	0800ae64 	muli	zero,at,697
 800ac6c:	0800ae38 	rdprs	zero,at,696
 800ac70:	0800ae64 	muli	zero,at,697
 800ac74:	0800acb4 	orhi	zero,at,690
 800ac78:	0800acd0 	cmplti	zero,at,691
 800ac7c:	0800acd0 	cmplti	zero,at,691
 800ac80:	0800ae38 	rdprs	zero,at,696
 800ac84:	0800acb4 	orhi	zero,at,690
 800ac88:	0800acc4 	addi	zero,at,691
 800ac8c:	0800acc4 	addi	zero,at,691
 800ac90:	0800acc4 	addi	zero,at,691
 800ac94:	0800ae74 	orhi	zero,at,697
 800ac98:	8904b03a 	or	r2,r17,r4
 800ac9c:	1000631e 	bne	r2,zero,800ae2c <__divdf3+0x2c4>
 800aca0:	04800204 	movi	r18,8
 800aca4:	0023883a 	mov	r17,zero
 800aca8:	0027883a 	mov	r19,zero
 800acac:	02000084 	movi	r8,2
 800acb0:	003fcc06 	br	800abe4 <__alt_data_end+0xfc00abe4>
 800acb4:	8023883a 	mov	r17,r16
 800acb8:	a827883a 	mov	r19,r21
 800acbc:	4839883a 	mov	fp,r9
 800acc0:	3811883a 	mov	r8,r7
 800acc4:	00800084 	movi	r2,2
 800acc8:	40812a1e 	bne	r8,r2,800b174 <__divdf3+0x60c>
 800accc:	e025883a 	mov	r18,fp
 800acd0:	9180004c 	andi	r6,r18,1
 800acd4:	0101ffc4 	movi	r4,2047
 800acd8:	000b883a 	mov	r5,zero
 800acdc:	0027883a 	mov	r19,zero
 800ace0:	2008953a 	slli	r4,r4,20
 800ace4:	30c03fcc 	andi	r3,r6,255
 800ace8:	04000434 	movhi	r16,16
 800acec:	180697fa 	slli	r3,r3,31
 800acf0:	843fffc4 	addi	r16,r16,-1
 800acf4:	2c20703a 	and	r16,r5,r16
 800acf8:	8120b03a 	or	r16,r16,r4
 800acfc:	80c6b03a 	or	r3,r16,r3
 800ad00:	9805883a 	mov	r2,r19
 800ad04:	dfc00d17 	ldw	ra,52(sp)
 800ad08:	df000c17 	ldw	fp,48(sp)
 800ad0c:	ddc00b17 	ldw	r23,44(sp)
 800ad10:	dd800a17 	ldw	r22,40(sp)
 800ad14:	dd400917 	ldw	r21,36(sp)
 800ad18:	dd000817 	ldw	r20,32(sp)
 800ad1c:	dcc00717 	ldw	r19,28(sp)
 800ad20:	dc800617 	ldw	r18,24(sp)
 800ad24:	dc400517 	ldw	r17,20(sp)
 800ad28:	dc000417 	ldw	r16,16(sp)
 800ad2c:	dec00e04 	addi	sp,sp,56
 800ad30:	f800283a 	ret
 800ad34:	8904b03a 	or	r2,r17,r4
 800ad38:	10003726 	beq	r2,zero,800ae18 <__divdf3+0x2b0>
 800ad3c:	88011c26 	beq	r17,zero,800b1b0 <__divdf3+0x648>
 800ad40:	8809883a 	mov	r4,r17
 800ad44:	d9800315 	stw	r6,12(sp)
 800ad48:	d9c00115 	stw	r7,4(sp)
 800ad4c:	800c8680 	call	800c868 <__clzsi2>
 800ad50:	d9800317 	ldw	r6,12(sp)
 800ad54:	d9c00117 	ldw	r7,4(sp)
 800ad58:	1007883a 	mov	r3,r2
 800ad5c:	01000a04 	movi	r4,40
 800ad60:	1cfffe04 	addi	r19,r3,-8
 800ad64:	20c9c83a 	sub	r4,r4,r3
 800ad68:	8cca983a 	sll	r5,r17,r19
 800ad6c:	9108d83a 	srl	r4,r18,r4
 800ad70:	94e6983a 	sll	r19,r18,r19
 800ad74:	2162b03a 	or	r17,r4,r5
 800ad78:	053f0344 	movi	r20,-1011
 800ad7c:	a0e9c83a 	sub	r20,r20,r3
 800ad80:	0025883a 	mov	r18,zero
 800ad84:	0011883a 	mov	r8,zero
 800ad88:	003f9606 	br	800abe4 <__alt_data_end+0xfc00abe4>
 800ad8c:	8184b03a 	or	r2,r16,r6
 800ad90:	10001f1e 	bne	r2,zero,800ae10 <__divdf3+0x2a8>
 800ad94:	0021883a 	mov	r16,zero
 800ad98:	002b883a 	mov	r21,zero
 800ad9c:	01c00084 	movi	r7,2
 800ada0:	003fa206 	br	800ac2c <__alt_data_end+0xfc00ac2c>
 800ada4:	8184b03a 	or	r2,r16,r6
 800ada8:	10001526 	beq	r2,zero,800ae00 <__divdf3+0x298>
 800adac:	80010c26 	beq	r16,zero,800b1e0 <__divdf3+0x678>
 800adb0:	8009883a 	mov	r4,r16
 800adb4:	d9800315 	stw	r6,12(sp)
 800adb8:	da000215 	stw	r8,8(sp)
 800adbc:	da400015 	stw	r9,0(sp)
 800adc0:	800c8680 	call	800c868 <__clzsi2>
 800adc4:	d9800317 	ldw	r6,12(sp)
 800adc8:	da000217 	ldw	r8,8(sp)
 800adcc:	da400017 	ldw	r9,0(sp)
 800add0:	1007883a 	mov	r3,r2
 800add4:	01000a04 	movi	r4,40
 800add8:	1d7ffe04 	addi	r21,r3,-8
 800addc:	20c9c83a 	sub	r4,r4,r3
 800ade0:	8560983a 	sll	r16,r16,r21
 800ade4:	3108d83a 	srl	r4,r6,r4
 800ade8:	356a983a 	sll	r21,r6,r21
 800adec:	2420b03a 	or	r16,r4,r16
 800adf0:	017f0344 	movi	r5,-1011
 800adf4:	28cbc83a 	sub	r5,r5,r3
 800adf8:	000f883a 	mov	r7,zero
 800adfc:	003f8b06 	br	800ac2c <__alt_data_end+0xfc00ac2c>
 800ae00:	0021883a 	mov	r16,zero
 800ae04:	002b883a 	mov	r21,zero
 800ae08:	01c00044 	movi	r7,1
 800ae0c:	003f8706 	br	800ac2c <__alt_data_end+0xfc00ac2c>
 800ae10:	01c000c4 	movi	r7,3
 800ae14:	003f8506 	br	800ac2c <__alt_data_end+0xfc00ac2c>
 800ae18:	04800104 	movi	r18,4
 800ae1c:	0023883a 	mov	r17,zero
 800ae20:	0027883a 	mov	r19,zero
 800ae24:	02000044 	movi	r8,1
 800ae28:	003f6e06 	br	800abe4 <__alt_data_end+0xfc00abe4>
 800ae2c:	04800304 	movi	r18,12
 800ae30:	020000c4 	movi	r8,3
 800ae34:	003f6b06 	br	800abe4 <__alt_data_end+0xfc00abe4>
 800ae38:	01400434 	movhi	r5,16
 800ae3c:	000d883a 	mov	r6,zero
 800ae40:	297fffc4 	addi	r5,r5,-1
 800ae44:	04ffffc4 	movi	r19,-1
 800ae48:	0101ffc4 	movi	r4,2047
 800ae4c:	003fa406 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae50:	043f0084 	movi	r16,-1022
 800ae54:	8521c83a 	sub	r16,r16,r20
 800ae58:	00800e04 	movi	r2,56
 800ae5c:	1401200e 	bge	r2,r16,800b2e0 <__divdf3+0x778>
 800ae60:	9180004c 	andi	r6,r18,1
 800ae64:	0009883a 	mov	r4,zero
 800ae68:	000b883a 	mov	r5,zero
 800ae6c:	0027883a 	mov	r19,zero
 800ae70:	003f9b06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae74:	8880022c 	andhi	r2,r17,8
 800ae78:	1000c726 	beq	r2,zero,800b198 <__divdf3+0x630>
 800ae7c:	8080022c 	andhi	r2,r16,8
 800ae80:	1000c51e 	bne	r2,zero,800b198 <__divdf3+0x630>
 800ae84:	00800434 	movhi	r2,16
 800ae88:	81400234 	orhi	r5,r16,8
 800ae8c:	10bfffc4 	addi	r2,r2,-1
 800ae90:	b80d883a 	mov	r6,r23
 800ae94:	288a703a 	and	r5,r5,r2
 800ae98:	a827883a 	mov	r19,r21
 800ae9c:	003fea06 	br	800ae48 <__alt_data_end+0xfc00ae48>
 800aea0:	8440ea36 	bltu	r16,r17,800b24c <__divdf3+0x6e4>
 800aea4:	8c00e826 	beq	r17,r16,800b248 <__divdf3+0x6e0>
 800aea8:	a53fffc4 	addi	r20,r20,-1
 800aeac:	882d883a 	mov	r22,r17
 800aeb0:	000d883a 	mov	r6,zero
 800aeb4:	a804d63a 	srli	r2,r21,24
 800aeb8:	8020923a 	slli	r16,r16,8
 800aebc:	b009883a 	mov	r4,r22
 800aec0:	d9800315 	stw	r6,12(sp)
 800aec4:	1420b03a 	or	r16,r2,r16
 800aec8:	802ed43a 	srli	r23,r16,16
 800aecc:	873fffcc 	andi	fp,r16,65535
 800aed0:	a82a923a 	slli	r21,r21,8
 800aed4:	b80b883a 	mov	r5,r23
 800aed8:	800a2bc0 	call	800a2bc <__udivsi3>
 800aedc:	b009883a 	mov	r4,r22
 800aee0:	b80b883a 	mov	r5,r23
 800aee4:	1023883a 	mov	r17,r2
 800aee8:	800a2c40 	call	800a2c4 <__umodsi3>
 800aeec:	1004943a 	slli	r2,r2,16
 800aef0:	9808d43a 	srli	r4,r19,16
 800aef4:	8f2d383a 	mul	r22,r17,fp
 800aef8:	d9800317 	ldw	r6,12(sp)
 800aefc:	1106b03a 	or	r3,r2,r4
 800af00:	1d80062e 	bgeu	r3,r22,800af1c <__divdf3+0x3b4>
 800af04:	1c07883a 	add	r3,r3,r16
 800af08:	88bfffc4 	addi	r2,r17,-1
 800af0c:	1c00dc36 	bltu	r3,r16,800b280 <__divdf3+0x718>
 800af10:	1d80db2e 	bgeu	r3,r22,800b280 <__divdf3+0x718>
 800af14:	8c7fff84 	addi	r17,r17,-2
 800af18:	1c07883a 	add	r3,r3,r16
 800af1c:	1dadc83a 	sub	r22,r3,r22
 800af20:	b009883a 	mov	r4,r22
 800af24:	b80b883a 	mov	r5,r23
 800af28:	d9800315 	stw	r6,12(sp)
 800af2c:	800a2bc0 	call	800a2bc <__udivsi3>
 800af30:	b009883a 	mov	r4,r22
 800af34:	b80b883a 	mov	r5,r23
 800af38:	d8800015 	stw	r2,0(sp)
 800af3c:	800a2c40 	call	800a2c4 <__umodsi3>
 800af40:	da400017 	ldw	r9,0(sp)
 800af44:	1004943a 	slli	r2,r2,16
 800af48:	9cffffcc 	andi	r19,r19,65535
 800af4c:	4f07383a 	mul	r3,r9,fp
 800af50:	14c8b03a 	or	r4,r2,r19
 800af54:	d9800317 	ldw	r6,12(sp)
 800af58:	20c0062e 	bgeu	r4,r3,800af74 <__divdf3+0x40c>
 800af5c:	2409883a 	add	r4,r4,r16
 800af60:	48bfffc4 	addi	r2,r9,-1
 800af64:	2400c436 	bltu	r4,r16,800b278 <__divdf3+0x710>
 800af68:	20c0c32e 	bgeu	r4,r3,800b278 <__divdf3+0x710>
 800af6c:	4a7fff84 	addi	r9,r9,-2
 800af70:	2409883a 	add	r4,r4,r16
 800af74:	8822943a 	slli	r17,r17,16
 800af78:	a80ed43a 	srli	r7,r21,16
 800af7c:	aa3fffcc 	andi	r8,r21,65535
 800af80:	4c62b03a 	or	r17,r9,r17
 800af84:	8816d43a 	srli	r11,r17,16
 800af88:	897fffcc 	andi	r5,r17,65535
 800af8c:	2a15383a 	mul	r10,r5,r8
 800af90:	5a19383a 	mul	r12,r11,r8
 800af94:	29cb383a 	mul	r5,r5,r7
 800af98:	5012d43a 	srli	r9,r10,16
 800af9c:	20c5c83a 	sub	r2,r4,r3
 800afa0:	614b883a 	add	r5,r12,r5
 800afa4:	2a4b883a 	add	r5,r5,r9
 800afa8:	59c7383a 	mul	r3,r11,r7
 800afac:	2b00022e 	bgeu	r5,r12,800afb8 <__divdf3+0x450>
 800afb0:	01000074 	movhi	r4,1
 800afb4:	1907883a 	add	r3,r3,r4
 800afb8:	2808d43a 	srli	r4,r5,16
 800afbc:	280a943a 	slli	r5,r5,16
 800afc0:	54ffffcc 	andi	r19,r10,65535
 800afc4:	1907883a 	add	r3,r3,r4
 800afc8:	2ccb883a 	add	r5,r5,r19
 800afcc:	10c09336 	bltu	r2,r3,800b21c <__divdf3+0x6b4>
 800afd0:	10c0ad26 	beq	r2,r3,800b288 <__divdf3+0x720>
 800afd4:	10c7c83a 	sub	r3,r2,r3
 800afd8:	3167c83a 	sub	r19,r6,r5
 800afdc:	34ed803a 	cmpltu	r22,r6,r19
 800afe0:	1dadc83a 	sub	r22,r3,r22
 800afe4:	b400b226 	beq	r22,r16,800b2b0 <__divdf3+0x748>
 800afe8:	b009883a 	mov	r4,r22
 800afec:	b80b883a 	mov	r5,r23
 800aff0:	d9c00115 	stw	r7,4(sp)
 800aff4:	da000215 	stw	r8,8(sp)
 800aff8:	800a2bc0 	call	800a2bc <__udivsi3>
 800affc:	b009883a 	mov	r4,r22
 800b000:	b80b883a 	mov	r5,r23
 800b004:	d8800315 	stw	r2,12(sp)
 800b008:	800a2c40 	call	800a2c4 <__umodsi3>
 800b00c:	d9800317 	ldw	r6,12(sp)
 800b010:	1004943a 	slli	r2,r2,16
 800b014:	9808d43a 	srli	r4,r19,16
 800b018:	372d383a 	mul	r22,r6,fp
 800b01c:	d9c00117 	ldw	r7,4(sp)
 800b020:	1106b03a 	or	r3,r2,r4
 800b024:	da000217 	ldw	r8,8(sp)
 800b028:	1d80062e 	bgeu	r3,r22,800b044 <__divdf3+0x4dc>
 800b02c:	1c07883a 	add	r3,r3,r16
 800b030:	30bfffc4 	addi	r2,r6,-1
 800b034:	1c00a036 	bltu	r3,r16,800b2b8 <__divdf3+0x750>
 800b038:	1d809f2e 	bgeu	r3,r22,800b2b8 <__divdf3+0x750>
 800b03c:	31bfff84 	addi	r6,r6,-2
 800b040:	1c07883a 	add	r3,r3,r16
 800b044:	1dadc83a 	sub	r22,r3,r22
 800b048:	b009883a 	mov	r4,r22
 800b04c:	b80b883a 	mov	r5,r23
 800b050:	d9800315 	stw	r6,12(sp)
 800b054:	d9c00115 	stw	r7,4(sp)
 800b058:	da000215 	stw	r8,8(sp)
 800b05c:	800a2bc0 	call	800a2bc <__udivsi3>
 800b060:	b009883a 	mov	r4,r22
 800b064:	b80b883a 	mov	r5,r23
 800b068:	d8800015 	stw	r2,0(sp)
 800b06c:	800a2c40 	call	800a2c4 <__umodsi3>
 800b070:	da400017 	ldw	r9,0(sp)
 800b074:	1004943a 	slli	r2,r2,16
 800b078:	993fffcc 	andi	r4,r19,65535
 800b07c:	4f39383a 	mul	fp,r9,fp
 800b080:	1106b03a 	or	r3,r2,r4
 800b084:	d9800317 	ldw	r6,12(sp)
 800b088:	d9c00117 	ldw	r7,4(sp)
 800b08c:	da000217 	ldw	r8,8(sp)
 800b090:	1f00062e 	bgeu	r3,fp,800b0ac <__divdf3+0x544>
 800b094:	1c07883a 	add	r3,r3,r16
 800b098:	48bfffc4 	addi	r2,r9,-1
 800b09c:	1c008836 	bltu	r3,r16,800b2c0 <__divdf3+0x758>
 800b0a0:	1f00872e 	bgeu	r3,fp,800b2c0 <__divdf3+0x758>
 800b0a4:	4a7fff84 	addi	r9,r9,-2
 800b0a8:	1c07883a 	add	r3,r3,r16
 800b0ac:	3008943a 	slli	r4,r6,16
 800b0b0:	1f07c83a 	sub	r3,r3,fp
 800b0b4:	4926b03a 	or	r19,r9,r4
 800b0b8:	993fffcc 	andi	r4,r19,65535
 800b0bc:	980cd43a 	srli	r6,r19,16
 800b0c0:	220b383a 	mul	r5,r4,r8
 800b0c4:	21c5383a 	mul	r2,r4,r7
 800b0c8:	3211383a 	mul	r8,r6,r8
 800b0cc:	2808d43a 	srli	r4,r5,16
 800b0d0:	31cf383a 	mul	r7,r6,r7
 800b0d4:	4085883a 	add	r2,r8,r2
 800b0d8:	1105883a 	add	r2,r2,r4
 800b0dc:	1200022e 	bgeu	r2,r8,800b0e8 <__divdf3+0x580>
 800b0e0:	01000074 	movhi	r4,1
 800b0e4:	390f883a 	add	r7,r7,r4
 800b0e8:	1008d43a 	srli	r4,r2,16
 800b0ec:	1004943a 	slli	r2,r2,16
 800b0f0:	297fffcc 	andi	r5,r5,65535
 800b0f4:	390f883a 	add	r7,r7,r4
 800b0f8:	1145883a 	add	r2,r2,r5
 800b0fc:	19c06536 	bltu	r3,r7,800b294 <__divdf3+0x72c>
 800b100:	19c09f26 	beq	r3,r7,800b380 <__divdf3+0x818>
 800b104:	9cc00054 	ori	r19,r19,1
 800b108:	a100ffc4 	addi	r4,r20,1023
 800b10c:	013f500e 	bge	zero,r4,800ae50 <__alt_data_end+0xfc00ae50>
 800b110:	988001cc 	andi	r2,r19,7
 800b114:	10000726 	beq	r2,zero,800b134 <__divdf3+0x5cc>
 800b118:	98c003cc 	andi	r3,r19,15
 800b11c:	00800104 	movi	r2,4
 800b120:	18800426 	beq	r3,r2,800b134 <__divdf3+0x5cc>
 800b124:	9885883a 	add	r2,r19,r2
 800b128:	14e1803a 	cmpltu	r16,r2,r19
 800b12c:	8c23883a 	add	r17,r17,r16
 800b130:	1027883a 	mov	r19,r2
 800b134:	8880402c 	andhi	r2,r17,256
 800b138:	10000426 	beq	r2,zero,800b14c <__divdf3+0x5e4>
 800b13c:	00bfc034 	movhi	r2,65280
 800b140:	10bfffc4 	addi	r2,r2,-1
 800b144:	a1010004 	addi	r4,r20,1024
 800b148:	88a2703a 	and	r17,r17,r2
 800b14c:	0081ff84 	movi	r2,2046
 800b150:	113edf16 	blt	r2,r4,800acd0 <__alt_data_end+0xfc00acd0>
 800b154:	9826d0fa 	srli	r19,r19,3
 800b158:	8804977a 	slli	r2,r17,29
 800b15c:	8820927a 	slli	r16,r17,9
 800b160:	2101ffcc 	andi	r4,r4,2047
 800b164:	14e6b03a 	or	r19,r2,r19
 800b168:	800ad33a 	srli	r5,r16,12
 800b16c:	9180004c 	andi	r6,r18,1
 800b170:	003edb06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b174:	008000c4 	movi	r2,3
 800b178:	4080a826 	beq	r8,r2,800b41c <__divdf3+0x8b4>
 800b17c:	00800044 	movi	r2,1
 800b180:	4080551e 	bne	r8,r2,800b2d8 <__divdf3+0x770>
 800b184:	e00d883a 	mov	r6,fp
 800b188:	0009883a 	mov	r4,zero
 800b18c:	000b883a 	mov	r5,zero
 800b190:	0027883a 	mov	r19,zero
 800b194:	003ed206 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b198:	00800434 	movhi	r2,16
 800b19c:	89400234 	orhi	r5,r17,8
 800b1a0:	10bfffc4 	addi	r2,r2,-1
 800b1a4:	b00d883a 	mov	r6,r22
 800b1a8:	288a703a 	and	r5,r5,r2
 800b1ac:	003f2606 	br	800ae48 <__alt_data_end+0xfc00ae48>
 800b1b0:	d9800315 	stw	r6,12(sp)
 800b1b4:	d9c00115 	stw	r7,4(sp)
 800b1b8:	800c8680 	call	800c868 <__clzsi2>
 800b1bc:	10c00804 	addi	r3,r2,32
 800b1c0:	010009c4 	movi	r4,39
 800b1c4:	d9800317 	ldw	r6,12(sp)
 800b1c8:	d9c00117 	ldw	r7,4(sp)
 800b1cc:	20fee30e 	bge	r4,r3,800ad5c <__alt_data_end+0xfc00ad5c>
 800b1d0:	117ffe04 	addi	r5,r2,-8
 800b1d4:	9162983a 	sll	r17,r18,r5
 800b1d8:	0027883a 	mov	r19,zero
 800b1dc:	003ee606 	br	800ad78 <__alt_data_end+0xfc00ad78>
 800b1e0:	3009883a 	mov	r4,r6
 800b1e4:	d9800315 	stw	r6,12(sp)
 800b1e8:	da000215 	stw	r8,8(sp)
 800b1ec:	da400015 	stw	r9,0(sp)
 800b1f0:	800c8680 	call	800c868 <__clzsi2>
 800b1f4:	10c00804 	addi	r3,r2,32
 800b1f8:	010009c4 	movi	r4,39
 800b1fc:	d9800317 	ldw	r6,12(sp)
 800b200:	da000217 	ldw	r8,8(sp)
 800b204:	da400017 	ldw	r9,0(sp)
 800b208:	20fef20e 	bge	r4,r3,800add4 <__alt_data_end+0xfc00add4>
 800b20c:	10bffe04 	addi	r2,r2,-8
 800b210:	a8a0983a 	sll	r16,r21,r2
 800b214:	002b883a 	mov	r21,zero
 800b218:	003ef506 	br	800adf0 <__alt_data_end+0xfc00adf0>
 800b21c:	354d883a 	add	r6,r6,r21
 800b220:	3549803a 	cmpltu	r4,r6,r21
 800b224:	2409883a 	add	r4,r4,r16
 800b228:	2089883a 	add	r4,r4,r2
 800b22c:	88bfffc4 	addi	r2,r17,-1
 800b230:	81000c2e 	bgeu	r16,r4,800b264 <__divdf3+0x6fc>
 800b234:	20c04436 	bltu	r4,r3,800b348 <__divdf3+0x7e0>
 800b238:	19006f26 	beq	r3,r4,800b3f8 <__divdf3+0x890>
 800b23c:	20c7c83a 	sub	r3,r4,r3
 800b240:	1023883a 	mov	r17,r2
 800b244:	003f6406 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b248:	9d7f1736 	bltu	r19,r21,800aea8 <__alt_data_end+0xfc00aea8>
 800b24c:	9806d07a 	srli	r3,r19,1
 800b250:	880497fa 	slli	r2,r17,31
 800b254:	980c97fa 	slli	r6,r19,31
 800b258:	882cd07a 	srli	r22,r17,1
 800b25c:	18a6b03a 	or	r19,r3,r2
 800b260:	003f1406 	br	800aeb4 <__alt_data_end+0xfc00aeb4>
 800b264:	243ff51e 	bne	r4,r16,800b23c <__alt_data_end+0xfc00b23c>
 800b268:	357ff22e 	bgeu	r6,r21,800b234 <__alt_data_end+0xfc00b234>
 800b26c:	80c7c83a 	sub	r3,r16,r3
 800b270:	1023883a 	mov	r17,r2
 800b274:	003f5806 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b278:	1013883a 	mov	r9,r2
 800b27c:	003f3d06 	br	800af74 <__alt_data_end+0xfc00af74>
 800b280:	1023883a 	mov	r17,r2
 800b284:	003f2506 	br	800af1c <__alt_data_end+0xfc00af1c>
 800b288:	317fe436 	bltu	r6,r5,800b21c <__alt_data_end+0xfc00b21c>
 800b28c:	0007883a 	mov	r3,zero
 800b290:	003f5106 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b294:	1c07883a 	add	r3,r3,r16
 800b298:	993fffc4 	addi	r4,r19,-1
 800b29c:	1c000a2e 	bgeu	r3,r16,800b2c8 <__divdf3+0x760>
 800b2a0:	2027883a 	mov	r19,r4
 800b2a4:	19ff971e 	bne	r3,r7,800b104 <__alt_data_end+0xfc00b104>
 800b2a8:	a8bf961e 	bne	r21,r2,800b104 <__alt_data_end+0xfc00b104>
 800b2ac:	003f9606 	br	800b108 <__alt_data_end+0xfc00b108>
 800b2b0:	04ffffc4 	movi	r19,-1
 800b2b4:	003f9406 	br	800b108 <__alt_data_end+0xfc00b108>
 800b2b8:	100d883a 	mov	r6,r2
 800b2bc:	003f6106 	br	800b044 <__alt_data_end+0xfc00b044>
 800b2c0:	1013883a 	mov	r9,r2
 800b2c4:	003f7906 	br	800b0ac <__alt_data_end+0xfc00b0ac>
 800b2c8:	19c02636 	bltu	r3,r7,800b364 <__divdf3+0x7fc>
 800b2cc:	38c04d26 	beq	r7,r3,800b404 <__divdf3+0x89c>
 800b2d0:	2027883a 	mov	r19,r4
 800b2d4:	003f8b06 	br	800b104 <__alt_data_end+0xfc00b104>
 800b2d8:	e025883a 	mov	r18,fp
 800b2dc:	003f8a06 	br	800b108 <__alt_data_end+0xfc00b108>
 800b2e0:	008007c4 	movi	r2,31
 800b2e4:	14002a16 	blt	r2,r16,800b390 <__divdf3+0x828>
 800b2e8:	a5010784 	addi	r20,r20,1054
 800b2ec:	8d04983a 	sll	r2,r17,r20
 800b2f0:	9c06d83a 	srl	r3,r19,r16
 800b2f4:	9d28983a 	sll	r20,r19,r20
 800b2f8:	8c20d83a 	srl	r16,r17,r16
 800b2fc:	1886b03a 	or	r3,r3,r2
 800b300:	a004c03a 	cmpne	r2,r20,zero
 800b304:	1884b03a 	or	r2,r3,r2
 800b308:	10c001cc 	andi	r3,r2,7
 800b30c:	18000726 	beq	r3,zero,800b32c <__divdf3+0x7c4>
 800b310:	110003cc 	andi	r4,r2,15
 800b314:	00c00104 	movi	r3,4
 800b318:	20c00426 	beq	r4,r3,800b32c <__divdf3+0x7c4>
 800b31c:	10c00104 	addi	r3,r2,4
 800b320:	1885803a 	cmpltu	r2,r3,r2
 800b324:	80a1883a 	add	r16,r16,r2
 800b328:	1805883a 	mov	r2,r3
 800b32c:	80c0202c 	andhi	r3,r16,128
 800b330:	18002d26 	beq	r3,zero,800b3e8 <__divdf3+0x880>
 800b334:	9180004c 	andi	r6,r18,1
 800b338:	01000044 	movi	r4,1
 800b33c:	000b883a 	mov	r5,zero
 800b340:	0027883a 	mov	r19,zero
 800b344:	003e6606 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b348:	354d883a 	add	r6,r6,r21
 800b34c:	356d803a 	cmpltu	r22,r6,r21
 800b350:	b42d883a 	add	r22,r22,r16
 800b354:	b12d883a 	add	r22,r22,r4
 800b358:	8c7fff84 	addi	r17,r17,-2
 800b35c:	b0c7c83a 	sub	r3,r22,r3
 800b360:	003f1d06 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b364:	ad4b883a 	add	r5,r21,r21
 800b368:	2d6b803a 	cmpltu	r21,r5,r21
 800b36c:	ac2b883a 	add	r21,r21,r16
 800b370:	1d47883a 	add	r3,r3,r21
 800b374:	993fff84 	addi	r4,r19,-2
 800b378:	282b883a 	mov	r21,r5
 800b37c:	003fc806 	br	800b2a0 <__alt_data_end+0xfc00b2a0>
 800b380:	103fc41e 	bne	r2,zero,800b294 <__alt_data_end+0xfc00b294>
 800b384:	002b883a 	mov	r21,zero
 800b388:	a8bf5e1e 	bne	r21,r2,800b104 <__alt_data_end+0xfc00b104>
 800b38c:	003f5e06 	br	800b108 <__alt_data_end+0xfc00b108>
 800b390:	00bef884 	movi	r2,-1054
 800b394:	1505c83a 	sub	r2,r2,r20
 800b398:	00c00804 	movi	r3,32
 800b39c:	8884d83a 	srl	r2,r17,r2
 800b3a0:	80c01c26 	beq	r16,r3,800b414 <__divdf3+0x8ac>
 800b3a4:	a0c10f84 	addi	r3,r20,1086
 800b3a8:	88c6983a 	sll	r3,r17,r3
 800b3ac:	1cc6b03a 	or	r3,r3,r19
 800b3b0:	1806c03a 	cmpne	r3,r3,zero
 800b3b4:	1884b03a 	or	r2,r3,r2
 800b3b8:	140001cc 	andi	r16,r2,7
 800b3bc:	8000061e 	bne	r16,zero,800b3d8 <__divdf3+0x870>
 800b3c0:	000b883a 	mov	r5,zero
 800b3c4:	1004d0fa 	srli	r2,r2,3
 800b3c8:	9180004c 	andi	r6,r18,1
 800b3cc:	0009883a 	mov	r4,zero
 800b3d0:	1426b03a 	or	r19,r2,r16
 800b3d4:	003e4206 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b3d8:	110003cc 	andi	r4,r2,15
 800b3dc:	00c00104 	movi	r3,4
 800b3e0:	0021883a 	mov	r16,zero
 800b3e4:	20ffcd1e 	bne	r4,r3,800b31c <__alt_data_end+0xfc00b31c>
 800b3e8:	800a927a 	slli	r5,r16,9
 800b3ec:	8020977a 	slli	r16,r16,29
 800b3f0:	280ad33a 	srli	r5,r5,12
 800b3f4:	003ff306 	br	800b3c4 <__alt_data_end+0xfc00b3c4>
 800b3f8:	317fd336 	bltu	r6,r5,800b348 <__alt_data_end+0xfc00b348>
 800b3fc:	1023883a 	mov	r17,r2
 800b400:	003fa206 	br	800b28c <__alt_data_end+0xfc00b28c>
 800b404:	a8bfd736 	bltu	r21,r2,800b364 <__alt_data_end+0xfc00b364>
 800b408:	2027883a 	mov	r19,r4
 800b40c:	a8bf3d1e 	bne	r21,r2,800b104 <__alt_data_end+0xfc00b104>
 800b410:	003f3d06 	br	800b108 <__alt_data_end+0xfc00b108>
 800b414:	0007883a 	mov	r3,zero
 800b418:	003fe406 	br	800b3ac <__alt_data_end+0xfc00b3ac>
 800b41c:	00800434 	movhi	r2,16
 800b420:	89400234 	orhi	r5,r17,8
 800b424:	10bfffc4 	addi	r2,r2,-1
 800b428:	e00d883a 	mov	r6,fp
 800b42c:	288a703a 	and	r5,r5,r2
 800b430:	003e8506 	br	800ae48 <__alt_data_end+0xfc00ae48>

0800b434 <__eqdf2>:
 800b434:	2804d53a 	srli	r2,r5,20
 800b438:	3806d53a 	srli	r3,r7,20
 800b43c:	02000434 	movhi	r8,16
 800b440:	423fffc4 	addi	r8,r8,-1
 800b444:	1081ffcc 	andi	r2,r2,2047
 800b448:	0241ffc4 	movi	r9,2047
 800b44c:	2a14703a 	and	r10,r5,r8
 800b450:	18c1ffcc 	andi	r3,r3,2047
 800b454:	3a10703a 	and	r8,r7,r8
 800b458:	280ad7fa 	srli	r5,r5,31
 800b45c:	380ed7fa 	srli	r7,r7,31
 800b460:	12400f26 	beq	r2,r9,800b4a0 <__eqdf2+0x6c>
 800b464:	0241ffc4 	movi	r9,2047
 800b468:	1a400326 	beq	r3,r9,800b478 <__eqdf2+0x44>
 800b46c:	10c00526 	beq	r2,r3,800b484 <__eqdf2+0x50>
 800b470:	00800044 	movi	r2,1
 800b474:	f800283a 	ret
 800b478:	4192b03a 	or	r9,r8,r6
 800b47c:	483ffc1e 	bne	r9,zero,800b470 <__alt_data_end+0xfc00b470>
 800b480:	10fffb1e 	bne	r2,r3,800b470 <__alt_data_end+0xfc00b470>
 800b484:	523ffa1e 	bne	r10,r8,800b470 <__alt_data_end+0xfc00b470>
 800b488:	21bff91e 	bne	r4,r6,800b470 <__alt_data_end+0xfc00b470>
 800b48c:	29c00826 	beq	r5,r7,800b4b0 <__eqdf2+0x7c>
 800b490:	103ff71e 	bne	r2,zero,800b470 <__alt_data_end+0xfc00b470>
 800b494:	5104b03a 	or	r2,r10,r4
 800b498:	1004c03a 	cmpne	r2,r2,zero
 800b49c:	f800283a 	ret
 800b4a0:	5112b03a 	or	r9,r10,r4
 800b4a4:	483fef26 	beq	r9,zero,800b464 <__alt_data_end+0xfc00b464>
 800b4a8:	00800044 	movi	r2,1
 800b4ac:	f800283a 	ret
 800b4b0:	0005883a 	mov	r2,zero
 800b4b4:	f800283a 	ret

0800b4b8 <__gedf2>:
 800b4b8:	2804d53a 	srli	r2,r5,20
 800b4bc:	3806d53a 	srli	r3,r7,20
 800b4c0:	02000434 	movhi	r8,16
 800b4c4:	423fffc4 	addi	r8,r8,-1
 800b4c8:	0241ffc4 	movi	r9,2047
 800b4cc:	1081ffcc 	andi	r2,r2,2047
 800b4d0:	2a14703a 	and	r10,r5,r8
 800b4d4:	1a46703a 	and	r3,r3,r9
 800b4d8:	3a10703a 	and	r8,r7,r8
 800b4dc:	280ad7fa 	srli	r5,r5,31
 800b4e0:	380ed7fa 	srli	r7,r7,31
 800b4e4:	12400b26 	beq	r2,r9,800b514 <__gedf2+0x5c>
 800b4e8:	1a401626 	beq	r3,r9,800b544 <__gedf2+0x8c>
 800b4ec:	10000c1e 	bne	r2,zero,800b520 <__gedf2+0x68>
 800b4f0:	5112b03a 	or	r9,r10,r4
 800b4f4:	4813003a 	cmpeq	r9,r9,zero
 800b4f8:	4817883a 	mov	r11,r9
 800b4fc:	18000c1e 	bne	r3,zero,800b530 <__gedf2+0x78>
 800b500:	4198b03a 	or	r12,r8,r6
 800b504:	60000a1e 	bne	r12,zero,800b530 <__gedf2+0x78>
 800b508:	48001326 	beq	r9,zero,800b558 <__gedf2+0xa0>
 800b50c:	0005883a 	mov	r2,zero
 800b510:	f800283a 	ret
 800b514:	5112b03a 	or	r9,r10,r4
 800b518:	4800191e 	bne	r9,zero,800b580 <__gedf2+0xc8>
 800b51c:	18800926 	beq	r3,r2,800b544 <__gedf2+0x8c>
 800b520:	18000b1e 	bne	r3,zero,800b550 <__gedf2+0x98>
 800b524:	4192b03a 	or	r9,r8,r6
 800b528:	0017883a 	mov	r11,zero
 800b52c:	48000a26 	beq	r9,zero,800b558 <__gedf2+0xa0>
 800b530:	39c03fcc 	andi	r7,r7,255
 800b534:	58000726 	beq	r11,zero,800b554 <__gedf2+0x9c>
 800b538:	3800081e 	bne	r7,zero,800b55c <__gedf2+0xa4>
 800b53c:	00bfffc4 	movi	r2,-1
 800b540:	f800283a 	ret
 800b544:	4192b03a 	or	r9,r8,r6
 800b548:	48000d1e 	bne	r9,zero,800b580 <__gedf2+0xc8>
 800b54c:	103fe826 	beq	r2,zero,800b4f0 <__alt_data_end+0xfc00b4f0>
 800b550:	39c03fcc 	andi	r7,r7,255
 800b554:	29c00326 	beq	r5,r7,800b564 <__gedf2+0xac>
 800b558:	283ff81e 	bne	r5,zero,800b53c <__alt_data_end+0xfc00b53c>
 800b55c:	00800044 	movi	r2,1
 800b560:	f800283a 	ret
 800b564:	18bffc16 	blt	r3,r2,800b558 <__alt_data_end+0xfc00b558>
 800b568:	10c00316 	blt	r2,r3,800b578 <__gedf2+0xc0>
 800b56c:	42bffa36 	bltu	r8,r10,800b558 <__alt_data_end+0xfc00b558>
 800b570:	52000526 	beq	r10,r8,800b588 <__gedf2+0xd0>
 800b574:	523fe52e 	bgeu	r10,r8,800b50c <__alt_data_end+0xfc00b50c>
 800b578:	283ff026 	beq	r5,zero,800b53c <__alt_data_end+0xfc00b53c>
 800b57c:	003ff706 	br	800b55c <__alt_data_end+0xfc00b55c>
 800b580:	00bfff84 	movi	r2,-2
 800b584:	f800283a 	ret
 800b588:	313ff336 	bltu	r6,r4,800b558 <__alt_data_end+0xfc00b558>
 800b58c:	21bfdf2e 	bgeu	r4,r6,800b50c <__alt_data_end+0xfc00b50c>
 800b590:	283fea26 	beq	r5,zero,800b53c <__alt_data_end+0xfc00b53c>
 800b594:	003ff106 	br	800b55c <__alt_data_end+0xfc00b55c>

0800b598 <__ledf2>:
 800b598:	2804d53a 	srli	r2,r5,20
 800b59c:	3810d53a 	srli	r8,r7,20
 800b5a0:	00c00434 	movhi	r3,16
 800b5a4:	18ffffc4 	addi	r3,r3,-1
 800b5a8:	0241ffc4 	movi	r9,2047
 800b5ac:	1081ffcc 	andi	r2,r2,2047
 800b5b0:	28d4703a 	and	r10,r5,r3
 800b5b4:	4250703a 	and	r8,r8,r9
 800b5b8:	38c6703a 	and	r3,r7,r3
 800b5bc:	280ad7fa 	srli	r5,r5,31
 800b5c0:	380ed7fa 	srli	r7,r7,31
 800b5c4:	12400b26 	beq	r2,r9,800b5f4 <__ledf2+0x5c>
 800b5c8:	42401926 	beq	r8,r9,800b630 <__ledf2+0x98>
 800b5cc:	10000c1e 	bne	r2,zero,800b600 <__ledf2+0x68>
 800b5d0:	5112b03a 	or	r9,r10,r4
 800b5d4:	4813003a 	cmpeq	r9,r9,zero
 800b5d8:	4817883a 	mov	r11,r9
 800b5dc:	40000f26 	beq	r8,zero,800b61c <__ledf2+0x84>
 800b5e0:	39c03fcc 	andi	r7,r7,255
 800b5e4:	58001826 	beq	r11,zero,800b648 <__ledf2+0xb0>
 800b5e8:	38000a1e 	bne	r7,zero,800b614 <__ledf2+0x7c>
 800b5ec:	00bfffc4 	movi	r2,-1
 800b5f0:	f800283a 	ret
 800b5f4:	5112b03a 	or	r9,r10,r4
 800b5f8:	48000f1e 	bne	r9,zero,800b638 <__ledf2+0xa0>
 800b5fc:	40800c26 	beq	r8,r2,800b630 <__ledf2+0x98>
 800b600:	4000101e 	bne	r8,zero,800b644 <__ledf2+0xac>
 800b604:	1992b03a 	or	r9,r3,r6
 800b608:	0017883a 	mov	r11,zero
 800b60c:	483ff41e 	bne	r9,zero,800b5e0 <__alt_data_end+0xfc00b5e0>
 800b610:	283ff61e 	bne	r5,zero,800b5ec <__alt_data_end+0xfc00b5ec>
 800b614:	00800044 	movi	r2,1
 800b618:	f800283a 	ret
 800b61c:	1998b03a 	or	r12,r3,r6
 800b620:	603fef1e 	bne	r12,zero,800b5e0 <__alt_data_end+0xfc00b5e0>
 800b624:	483ffa26 	beq	r9,zero,800b610 <__alt_data_end+0xfc00b610>
 800b628:	0005883a 	mov	r2,zero
 800b62c:	f800283a 	ret
 800b630:	1992b03a 	or	r9,r3,r6
 800b634:	48000226 	beq	r9,zero,800b640 <__ledf2+0xa8>
 800b638:	00800084 	movi	r2,2
 800b63c:	f800283a 	ret
 800b640:	103fe326 	beq	r2,zero,800b5d0 <__alt_data_end+0xfc00b5d0>
 800b644:	39c03fcc 	andi	r7,r7,255
 800b648:	29fff11e 	bne	r5,r7,800b610 <__alt_data_end+0xfc00b610>
 800b64c:	40bff016 	blt	r8,r2,800b610 <__alt_data_end+0xfc00b610>
 800b650:	12000316 	blt	r2,r8,800b660 <__ledf2+0xc8>
 800b654:	1abfee36 	bltu	r3,r10,800b610 <__alt_data_end+0xfc00b610>
 800b658:	50c00326 	beq	r10,r3,800b668 <__ledf2+0xd0>
 800b65c:	50fff22e 	bgeu	r10,r3,800b628 <__alt_data_end+0xfc00b628>
 800b660:	283fe226 	beq	r5,zero,800b5ec <__alt_data_end+0xfc00b5ec>
 800b664:	003feb06 	br	800b614 <__alt_data_end+0xfc00b614>
 800b668:	313fe936 	bltu	r6,r4,800b610 <__alt_data_end+0xfc00b610>
 800b66c:	21bfee2e 	bgeu	r4,r6,800b628 <__alt_data_end+0xfc00b628>
 800b670:	283fde26 	beq	r5,zero,800b5ec <__alt_data_end+0xfc00b5ec>
 800b674:	003fe706 	br	800b614 <__alt_data_end+0xfc00b614>

0800b678 <__muldf3>:
 800b678:	defff204 	addi	sp,sp,-56
 800b67c:	2804d53a 	srli	r2,r5,20
 800b680:	dd800a15 	stw	r22,40(sp)
 800b684:	282cd7fa 	srli	r22,r5,31
 800b688:	dc000415 	stw	r16,16(sp)
 800b68c:	04000434 	movhi	r16,16
 800b690:	df000c15 	stw	fp,48(sp)
 800b694:	dd000815 	stw	r20,32(sp)
 800b698:	dcc00715 	stw	r19,28(sp)
 800b69c:	dc800615 	stw	r18,24(sp)
 800b6a0:	dc400515 	stw	r17,20(sp)
 800b6a4:	843fffc4 	addi	r16,r16,-1
 800b6a8:	dfc00d15 	stw	ra,52(sp)
 800b6ac:	ddc00b15 	stw	r23,44(sp)
 800b6b0:	dd400915 	stw	r21,36(sp)
 800b6b4:	1501ffcc 	andi	r20,r2,2047
 800b6b8:	2023883a 	mov	r17,r4
 800b6bc:	2025883a 	mov	r18,r4
 800b6c0:	2c20703a 	and	r16,r5,r16
 800b6c4:	b027883a 	mov	r19,r22
 800b6c8:	b7003fcc 	andi	fp,r22,255
 800b6cc:	a0005926 	beq	r20,zero,800b834 <__muldf3+0x1bc>
 800b6d0:	0081ffc4 	movi	r2,2047
 800b6d4:	a0803426 	beq	r20,r2,800b7a8 <__muldf3+0x130>
 800b6d8:	84000434 	orhi	r16,r16,16
 800b6dc:	2004d77a 	srli	r2,r4,29
 800b6e0:	802090fa 	slli	r16,r16,3
 800b6e4:	202490fa 	slli	r18,r4,3
 800b6e8:	a53f0044 	addi	r20,r20,-1023
 800b6ec:	80a0b03a 	or	r16,r16,r2
 800b6f0:	002b883a 	mov	r21,zero
 800b6f4:	0015883a 	mov	r10,zero
 800b6f8:	3812d53a 	srli	r9,r7,20
 800b6fc:	3806d7fa 	srli	r3,r7,31
 800b700:	02000434 	movhi	r8,16
 800b704:	423fffc4 	addi	r8,r8,-1
 800b708:	4941ffcc 	andi	r5,r9,2047
 800b70c:	302f883a 	mov	r23,r6
 800b710:	3a22703a 	and	r17,r7,r8
 800b714:	1ac03fcc 	andi	r11,r3,255
 800b718:	28006226 	beq	r5,zero,800b8a4 <__muldf3+0x22c>
 800b71c:	0081ffc4 	movi	r2,2047
 800b720:	28805a26 	beq	r5,r2,800b88c <__muldf3+0x214>
 800b724:	8a000434 	orhi	r8,r17,16
 800b728:	3004d77a 	srli	r2,r6,29
 800b72c:	401090fa 	slli	r8,r8,3
 800b730:	302e90fa 	slli	r23,r6,3
 800b734:	297f0044 	addi	r5,r5,-1023
 800b738:	40a2b03a 	or	r17,r8,r2
 800b73c:	0013883a 	mov	r9,zero
 800b740:	4d4cb03a 	or	r6,r9,r21
 800b744:	300c90ba 	slli	r6,r6,2
 800b748:	02020074 	movhi	r8,2049
 800b74c:	422dda04 	addi	r8,r8,-18584
 800b750:	320d883a 	add	r6,r6,r8
 800b754:	31800017 	ldw	r6,0(r6)
 800b758:	a14b883a 	add	r5,r20,r5
 800b75c:	1dacf03a 	xor	r22,r3,r22
 800b760:	2b000044 	addi	r12,r5,1
 800b764:	3000683a 	jmp	r6
 800b768:	0800b9a4 	muli	zero,at,742
 800b76c:	0800b990 	cmplti	zero,at,742
 800b770:	0800b990 	cmplti	zero,at,742
 800b774:	0800b97c 	xorhi	zero,at,741
 800b778:	0800b7c4 	addi	zero,at,735
 800b77c:	0800b7c4 	addi	zero,at,735
 800b780:	0800b964 	muli	zero,at,741
 800b784:	0800b97c 	xorhi	zero,at,741
 800b788:	0800b7c4 	addi	zero,at,735
 800b78c:	0800b964 	muli	zero,at,741
 800b790:	0800b7c4 	addi	zero,at,735
 800b794:	0800b97c 	xorhi	zero,at,741
 800b798:	0800b7c8 	cmpgei	zero,at,735
 800b79c:	0800b7c8 	cmpgei	zero,at,735
 800b7a0:	0800b7c8 	cmpgei	zero,at,735
 800b7a4:	0800bba0 	cmpeqi	zero,at,750
 800b7a8:	8104b03a 	or	r2,r16,r4
 800b7ac:	10006a1e 	bne	r2,zero,800b958 <__muldf3+0x2e0>
 800b7b0:	05400204 	movi	r21,8
 800b7b4:	0021883a 	mov	r16,zero
 800b7b8:	0025883a 	mov	r18,zero
 800b7bc:	02800084 	movi	r10,2
 800b7c0:	003fcd06 	br	800b6f8 <__alt_data_end+0xfc00b6f8>
 800b7c4:	b039883a 	mov	fp,r22
 800b7c8:	00800084 	movi	r2,2
 800b7cc:	50804e1e 	bne	r10,r2,800b908 <__muldf3+0x290>
 800b7d0:	e4c0004c 	andi	r19,fp,1
 800b7d4:	0101ffc4 	movi	r4,2047
 800b7d8:	0021883a 	mov	r16,zero
 800b7dc:	0025883a 	mov	r18,zero
 800b7e0:	2008953a 	slli	r4,r4,20
 800b7e4:	98c03fcc 	andi	r3,r19,255
 800b7e8:	01400434 	movhi	r5,16
 800b7ec:	297fffc4 	addi	r5,r5,-1
 800b7f0:	180697fa 	slli	r3,r3,31
 800b7f4:	8160703a 	and	r16,r16,r5
 800b7f8:	8120b03a 	or	r16,r16,r4
 800b7fc:	80c6b03a 	or	r3,r16,r3
 800b800:	9005883a 	mov	r2,r18
 800b804:	dfc00d17 	ldw	ra,52(sp)
 800b808:	df000c17 	ldw	fp,48(sp)
 800b80c:	ddc00b17 	ldw	r23,44(sp)
 800b810:	dd800a17 	ldw	r22,40(sp)
 800b814:	dd400917 	ldw	r21,36(sp)
 800b818:	dd000817 	ldw	r20,32(sp)
 800b81c:	dcc00717 	ldw	r19,28(sp)
 800b820:	dc800617 	ldw	r18,24(sp)
 800b824:	dc400517 	ldw	r17,20(sp)
 800b828:	dc000417 	ldw	r16,16(sp)
 800b82c:	dec00e04 	addi	sp,sp,56
 800b830:	f800283a 	ret
 800b834:	8104b03a 	or	r2,r16,r4
 800b838:	10004226 	beq	r2,zero,800b944 <__muldf3+0x2cc>
 800b83c:	8000f926 	beq	r16,zero,800bc24 <__muldf3+0x5ac>
 800b840:	8009883a 	mov	r4,r16
 800b844:	d9800315 	stw	r6,12(sp)
 800b848:	d9c00015 	stw	r7,0(sp)
 800b84c:	800c8680 	call	800c868 <__clzsi2>
 800b850:	d9800317 	ldw	r6,12(sp)
 800b854:	d9c00017 	ldw	r7,0(sp)
 800b858:	1007883a 	mov	r3,r2
 800b85c:	01000a04 	movi	r4,40
 800b860:	18bffe04 	addi	r2,r3,-8
 800b864:	20c9c83a 	sub	r4,r4,r3
 800b868:	80a0983a 	sll	r16,r16,r2
 800b86c:	8908d83a 	srl	r4,r17,r4
 800b870:	88a4983a 	sll	r18,r17,r2
 800b874:	2420b03a 	or	r16,r4,r16
 800b878:	017f0344 	movi	r5,-1011
 800b87c:	28e9c83a 	sub	r20,r5,r3
 800b880:	002b883a 	mov	r21,zero
 800b884:	0015883a 	mov	r10,zero
 800b888:	003f9b06 	br	800b6f8 <__alt_data_end+0xfc00b6f8>
 800b88c:	8984b03a 	or	r2,r17,r6
 800b890:	10002a1e 	bne	r2,zero,800b93c <__muldf3+0x2c4>
 800b894:	0023883a 	mov	r17,zero
 800b898:	002f883a 	mov	r23,zero
 800b89c:	02400084 	movi	r9,2
 800b8a0:	003fa706 	br	800b740 <__alt_data_end+0xfc00b740>
 800b8a4:	8984b03a 	or	r2,r17,r6
 800b8a8:	10002026 	beq	r2,zero,800b92c <__muldf3+0x2b4>
 800b8ac:	8800cc26 	beq	r17,zero,800bbe0 <__muldf3+0x568>
 800b8b0:	8809883a 	mov	r4,r17
 800b8b4:	d8c00215 	stw	r3,8(sp)
 800b8b8:	d9800315 	stw	r6,12(sp)
 800b8bc:	da800015 	stw	r10,0(sp)
 800b8c0:	dac00115 	stw	r11,4(sp)
 800b8c4:	800c8680 	call	800c868 <__clzsi2>
 800b8c8:	d8c00217 	ldw	r3,8(sp)
 800b8cc:	d9800317 	ldw	r6,12(sp)
 800b8d0:	da800017 	ldw	r10,0(sp)
 800b8d4:	dac00117 	ldw	r11,4(sp)
 800b8d8:	1009883a 	mov	r4,r2
 800b8dc:	01400a04 	movi	r5,40
 800b8e0:	25fffe04 	addi	r23,r4,-8
 800b8e4:	290bc83a 	sub	r5,r5,r4
 800b8e8:	8dd0983a 	sll	r8,r17,r23
 800b8ec:	314ad83a 	srl	r5,r6,r5
 800b8f0:	35ee983a 	sll	r23,r6,r23
 800b8f4:	2a22b03a 	or	r17,r5,r8
 800b8f8:	017f0344 	movi	r5,-1011
 800b8fc:	290bc83a 	sub	r5,r5,r4
 800b900:	0013883a 	mov	r9,zero
 800b904:	003f8e06 	br	800b740 <__alt_data_end+0xfc00b740>
 800b908:	008000c4 	movi	r2,3
 800b90c:	50811d26 	beq	r10,r2,800bd84 <__muldf3+0x70c>
 800b910:	00800044 	movi	r2,1
 800b914:	5080e01e 	bne	r10,r2,800bc98 <__muldf3+0x620>
 800b918:	e0a6703a 	and	r19,fp,r2
 800b91c:	0009883a 	mov	r4,zero
 800b920:	0021883a 	mov	r16,zero
 800b924:	0025883a 	mov	r18,zero
 800b928:	003fad06 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800b92c:	0023883a 	mov	r17,zero
 800b930:	002f883a 	mov	r23,zero
 800b934:	02400044 	movi	r9,1
 800b938:	003f8106 	br	800b740 <__alt_data_end+0xfc00b740>
 800b93c:	024000c4 	movi	r9,3
 800b940:	003f7f06 	br	800b740 <__alt_data_end+0xfc00b740>
 800b944:	05400104 	movi	r21,4
 800b948:	0021883a 	mov	r16,zero
 800b94c:	0025883a 	mov	r18,zero
 800b950:	02800044 	movi	r10,1
 800b954:	003f6806 	br	800b6f8 <__alt_data_end+0xfc00b6f8>
 800b958:	05400304 	movi	r21,12
 800b95c:	028000c4 	movi	r10,3
 800b960:	003f6506 	br	800b6f8 <__alt_data_end+0xfc00b6f8>
 800b964:	04000434 	movhi	r16,16
 800b968:	0027883a 	mov	r19,zero
 800b96c:	843fffc4 	addi	r16,r16,-1
 800b970:	04bfffc4 	movi	r18,-1
 800b974:	0101ffc4 	movi	r4,2047
 800b978:	003f9906 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800b97c:	8821883a 	mov	r16,r17
 800b980:	b825883a 	mov	r18,r23
 800b984:	5839883a 	mov	fp,r11
 800b988:	4815883a 	mov	r10,r9
 800b98c:	003f8e06 	br	800b7c8 <__alt_data_end+0xfc00b7c8>
 800b990:	8821883a 	mov	r16,r17
 800b994:	b825883a 	mov	r18,r23
 800b998:	b039883a 	mov	fp,r22
 800b99c:	4815883a 	mov	r10,r9
 800b9a0:	003f8906 	br	800b7c8 <__alt_data_end+0xfc00b7c8>
 800b9a4:	b80cd43a 	srli	r6,r23,16
 800b9a8:	9006d43a 	srli	r3,r18,16
 800b9ac:	90bfffcc 	andi	r2,r18,65535
 800b9b0:	bdffffcc 	andi	r23,r23,65535
 800b9b4:	b891383a 	mul	r8,r23,r2
 800b9b8:	b8c9383a 	mul	r4,r23,r3
 800b9bc:	309b383a 	mul	r13,r6,r2
 800b9c0:	400ed43a 	srli	r7,r8,16
 800b9c4:	30df383a 	mul	r15,r6,r3
 800b9c8:	235b883a 	add	r13,r4,r13
 800b9cc:	69db883a 	add	r13,r13,r7
 800b9d0:	6900022e 	bgeu	r13,r4,800b9dc <__muldf3+0x364>
 800b9d4:	01000074 	movhi	r4,1
 800b9d8:	791f883a 	add	r15,r15,r4
 800b9dc:	8828d43a 	srli	r20,r17,16
 800b9e0:	8c7fffcc 	andi	r17,r17,65535
 800b9e4:	888f383a 	mul	r7,r17,r2
 800b9e8:	88d3383a 	mul	r9,r17,r3
 800b9ec:	a0a5383a 	mul	r18,r20,r2
 800b9f0:	3816d43a 	srli	r11,r7,16
 800b9f4:	6814943a 	slli	r10,r13,16
 800b9f8:	4ca5883a 	add	r18,r9,r18
 800b9fc:	423fffcc 	andi	r8,r8,65535
 800ba00:	92e5883a 	add	r18,r18,r11
 800ba04:	6808d43a 	srli	r4,r13,16
 800ba08:	5215883a 	add	r10,r10,r8
 800ba0c:	a0c7383a 	mul	r3,r20,r3
 800ba10:	9240022e 	bgeu	r18,r9,800ba1c <__muldf3+0x3a4>
 800ba14:	00800074 	movhi	r2,1
 800ba18:	1887883a 	add	r3,r3,r2
 800ba1c:	802ad43a 	srli	r21,r16,16
 800ba20:	80bfffcc 	andi	r2,r16,65535
 800ba24:	b893383a 	mul	r9,r23,r2
 800ba28:	3091383a 	mul	r8,r6,r2
 800ba2c:	bd6f383a 	mul	r23,r23,r21
 800ba30:	9026943a 	slli	r19,r18,16
 800ba34:	481ad43a 	srli	r13,r9,16
 800ba38:	9024d43a 	srli	r18,r18,16
 800ba3c:	39ffffcc 	andi	r7,r7,65535
 800ba40:	ba11883a 	add	r8,r23,r8
 800ba44:	99e7883a 	add	r19,r19,r7
 800ba48:	4351883a 	add	r8,r8,r13
 800ba4c:	1c97883a 	add	r11,r3,r18
 800ba50:	354d383a 	mul	r6,r6,r21
 800ba54:	9925883a 	add	r18,r19,r4
 800ba58:	45c0022e 	bgeu	r8,r23,800ba64 <__muldf3+0x3ec>
 800ba5c:	00c00074 	movhi	r3,1
 800ba60:	30cd883a 	add	r6,r6,r3
 800ba64:	8889383a 	mul	r4,r17,r2
 800ba68:	8d63383a 	mul	r17,r17,r21
 800ba6c:	a085383a 	mul	r2,r20,r2
 800ba70:	200ed43a 	srli	r7,r4,16
 800ba74:	401cd43a 	srli	r14,r8,16
 800ba78:	401a943a 	slli	r13,r8,16
 800ba7c:	8885883a 	add	r2,r17,r2
 800ba80:	4a3fffcc 	andi	r8,r9,65535
 800ba84:	11c5883a 	add	r2,r2,r7
 800ba88:	339d883a 	add	r14,r6,r14
 800ba8c:	6a11883a 	add	r8,r13,r8
 800ba90:	a561383a 	mul	r16,r20,r21
 800ba94:	1440022e 	bgeu	r2,r17,800baa0 <__muldf3+0x428>
 800ba98:	00c00074 	movhi	r3,1
 800ba9c:	80e1883a 	add	r16,r16,r3
 800baa0:	1006943a 	slli	r3,r2,16
 800baa4:	213fffcc 	andi	r4,r4,65535
 800baa8:	93db883a 	add	r13,r18,r15
 800baac:	1909883a 	add	r4,r3,r4
 800bab0:	22c7883a 	add	r3,r4,r11
 800bab4:	6cd3803a 	cmpltu	r9,r13,r19
 800bab8:	6a09883a 	add	r4,r13,r8
 800babc:	1a5b883a 	add	r13,r3,r9
 800bac0:	2211803a 	cmpltu	r8,r4,r8
 800bac4:	734d883a 	add	r6,r14,r13
 800bac8:	100ed43a 	srli	r7,r2,16
 800bacc:	6a53803a 	cmpltu	r9,r13,r9
 800bad0:	3205883a 	add	r2,r6,r8
 800bad4:	1ac7803a 	cmpltu	r3,r3,r11
 800bad8:	1211803a 	cmpltu	r8,r2,r8
 800badc:	48c6b03a 	or	r3,r9,r3
 800bae0:	338d803a 	cmpltu	r6,r6,r14
 800bae4:	19c7883a 	add	r3,r3,r7
 800bae8:	418cb03a 	or	r6,r8,r6
 800baec:	1987883a 	add	r3,r3,r6
 800baf0:	2024927a 	slli	r18,r4,9
 800baf4:	1c07883a 	add	r3,r3,r16
 800baf8:	1806927a 	slli	r3,r3,9
 800bafc:	1020d5fa 	srli	r16,r2,23
 800bb00:	2008d5fa 	srli	r4,r4,23
 800bb04:	9294b03a 	or	r10,r18,r10
 800bb08:	1004927a 	slli	r2,r2,9
 800bb0c:	5024c03a 	cmpne	r18,r10,zero
 800bb10:	1c20b03a 	or	r16,r3,r16
 800bb14:	9108b03a 	or	r4,r18,r4
 800bb18:	80c0402c 	andhi	r3,r16,256
 800bb1c:	20a4b03a 	or	r18,r4,r2
 800bb20:	18000726 	beq	r3,zero,800bb40 <__muldf3+0x4c8>
 800bb24:	9006d07a 	srli	r3,r18,1
 800bb28:	800897fa 	slli	r4,r16,31
 800bb2c:	9080004c 	andi	r2,r18,1
 800bb30:	8020d07a 	srli	r16,r16,1
 800bb34:	10c4b03a 	or	r2,r2,r3
 800bb38:	1124b03a 	or	r18,r2,r4
 800bb3c:	600b883a 	mov	r5,r12
 800bb40:	2900ffc4 	addi	r4,r5,1023
 800bb44:	01004b0e 	bge	zero,r4,800bc74 <__muldf3+0x5fc>
 800bb48:	908001cc 	andi	r2,r18,7
 800bb4c:	10000726 	beq	r2,zero,800bb6c <__muldf3+0x4f4>
 800bb50:	90c003cc 	andi	r3,r18,15
 800bb54:	00800104 	movi	r2,4
 800bb58:	18800426 	beq	r3,r2,800bb6c <__muldf3+0x4f4>
 800bb5c:	9087883a 	add	r3,r18,r2
 800bb60:	1c85803a 	cmpltu	r2,r3,r18
 800bb64:	80a1883a 	add	r16,r16,r2
 800bb68:	1825883a 	mov	r18,r3
 800bb6c:	8080402c 	andhi	r2,r16,256
 800bb70:	10000426 	beq	r2,zero,800bb84 <__muldf3+0x50c>
 800bb74:	00bfc034 	movhi	r2,65280
 800bb78:	10bfffc4 	addi	r2,r2,-1
 800bb7c:	29010004 	addi	r4,r5,1024
 800bb80:	80a0703a 	and	r16,r16,r2
 800bb84:	0081ff84 	movi	r2,2046
 800bb88:	1100320e 	bge	r2,r4,800bc54 <__muldf3+0x5dc>
 800bb8c:	b4c0004c 	andi	r19,r22,1
 800bb90:	0101ffc4 	movi	r4,2047
 800bb94:	0021883a 	mov	r16,zero
 800bb98:	0025883a 	mov	r18,zero
 800bb9c:	003f1006 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800bba0:	8080022c 	andhi	r2,r16,8
 800bba4:	10000926 	beq	r2,zero,800bbcc <__muldf3+0x554>
 800bba8:	8880022c 	andhi	r2,r17,8
 800bbac:	1000071e 	bne	r2,zero,800bbcc <__muldf3+0x554>
 800bbb0:	00800434 	movhi	r2,16
 800bbb4:	8c000234 	orhi	r16,r17,8
 800bbb8:	10bfffc4 	addi	r2,r2,-1
 800bbbc:	1827883a 	mov	r19,r3
 800bbc0:	80a0703a 	and	r16,r16,r2
 800bbc4:	b825883a 	mov	r18,r23
 800bbc8:	003f6a06 	br	800b974 <__alt_data_end+0xfc00b974>
 800bbcc:	00800434 	movhi	r2,16
 800bbd0:	84000234 	orhi	r16,r16,8
 800bbd4:	10bfffc4 	addi	r2,r2,-1
 800bbd8:	80a0703a 	and	r16,r16,r2
 800bbdc:	003f6506 	br	800b974 <__alt_data_end+0xfc00b974>
 800bbe0:	3009883a 	mov	r4,r6
 800bbe4:	d8c00215 	stw	r3,8(sp)
 800bbe8:	d9800315 	stw	r6,12(sp)
 800bbec:	da800015 	stw	r10,0(sp)
 800bbf0:	dac00115 	stw	r11,4(sp)
 800bbf4:	800c8680 	call	800c868 <__clzsi2>
 800bbf8:	11000804 	addi	r4,r2,32
 800bbfc:	014009c4 	movi	r5,39
 800bc00:	d8c00217 	ldw	r3,8(sp)
 800bc04:	d9800317 	ldw	r6,12(sp)
 800bc08:	da800017 	ldw	r10,0(sp)
 800bc0c:	dac00117 	ldw	r11,4(sp)
 800bc10:	293f320e 	bge	r5,r4,800b8dc <__alt_data_end+0xfc00b8dc>
 800bc14:	10bffe04 	addi	r2,r2,-8
 800bc18:	b8a2983a 	sll	r17,r23,r2
 800bc1c:	002f883a 	mov	r23,zero
 800bc20:	003f3506 	br	800b8f8 <__alt_data_end+0xfc00b8f8>
 800bc24:	d9800315 	stw	r6,12(sp)
 800bc28:	d9c00015 	stw	r7,0(sp)
 800bc2c:	800c8680 	call	800c868 <__clzsi2>
 800bc30:	10c00804 	addi	r3,r2,32
 800bc34:	010009c4 	movi	r4,39
 800bc38:	d9800317 	ldw	r6,12(sp)
 800bc3c:	d9c00017 	ldw	r7,0(sp)
 800bc40:	20ff060e 	bge	r4,r3,800b85c <__alt_data_end+0xfc00b85c>
 800bc44:	10bffe04 	addi	r2,r2,-8
 800bc48:	88a0983a 	sll	r16,r17,r2
 800bc4c:	0025883a 	mov	r18,zero
 800bc50:	003f0906 	br	800b878 <__alt_data_end+0xfc00b878>
 800bc54:	9004d0fa 	srli	r2,r18,3
 800bc58:	8024977a 	slli	r18,r16,29
 800bc5c:	8020927a 	slli	r16,r16,9
 800bc60:	2101ffcc 	andi	r4,r4,2047
 800bc64:	90a4b03a 	or	r18,r18,r2
 800bc68:	8020d33a 	srli	r16,r16,12
 800bc6c:	b4c0004c 	andi	r19,r22,1
 800bc70:	003edb06 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800bc74:	00ff0084 	movi	r3,-1022
 800bc78:	1947c83a 	sub	r3,r3,r5
 800bc7c:	00800e04 	movi	r2,56
 800bc80:	10c0080e 	bge	r2,r3,800bca4 <__muldf3+0x62c>
 800bc84:	b4c0004c 	andi	r19,r22,1
 800bc88:	0009883a 	mov	r4,zero
 800bc8c:	0021883a 	mov	r16,zero
 800bc90:	0025883a 	mov	r18,zero
 800bc94:	003ed206 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800bc98:	600b883a 	mov	r5,r12
 800bc9c:	e02d883a 	mov	r22,fp
 800bca0:	003fa706 	br	800bb40 <__alt_data_end+0xfc00bb40>
 800bca4:	008007c4 	movi	r2,31
 800bca8:	10c01816 	blt	r2,r3,800bd0c <__muldf3+0x694>
 800bcac:	29410784 	addi	r5,r5,1054
 800bcb0:	8144983a 	sll	r2,r16,r5
 800bcb4:	90c8d83a 	srl	r4,r18,r3
 800bcb8:	914a983a 	sll	r5,r18,r5
 800bcbc:	80c6d83a 	srl	r3,r16,r3
 800bcc0:	2088b03a 	or	r4,r4,r2
 800bcc4:	2804c03a 	cmpne	r2,r5,zero
 800bcc8:	2084b03a 	or	r2,r4,r2
 800bccc:	110001cc 	andi	r4,r2,7
 800bcd0:	20000726 	beq	r4,zero,800bcf0 <__muldf3+0x678>
 800bcd4:	114003cc 	andi	r5,r2,15
 800bcd8:	01000104 	movi	r4,4
 800bcdc:	29000426 	beq	r5,r4,800bcf0 <__muldf3+0x678>
 800bce0:	11000104 	addi	r4,r2,4
 800bce4:	2085803a 	cmpltu	r2,r4,r2
 800bce8:	1887883a 	add	r3,r3,r2
 800bcec:	2005883a 	mov	r2,r4
 800bcf0:	1900202c 	andhi	r4,r3,128
 800bcf4:	20001826 	beq	r4,zero,800bd58 <__muldf3+0x6e0>
 800bcf8:	b4c0004c 	andi	r19,r22,1
 800bcfc:	01000044 	movi	r4,1
 800bd00:	0021883a 	mov	r16,zero
 800bd04:	0025883a 	mov	r18,zero
 800bd08:	003eb506 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800bd0c:	00bef884 	movi	r2,-1054
 800bd10:	1145c83a 	sub	r2,r2,r5
 800bd14:	8088d83a 	srl	r4,r16,r2
 800bd18:	00800804 	movi	r2,32
 800bd1c:	18801726 	beq	r3,r2,800bd7c <__muldf3+0x704>
 800bd20:	28810f84 	addi	r2,r5,1086
 800bd24:	8084983a 	sll	r2,r16,r2
 800bd28:	1484b03a 	or	r2,r2,r18
 800bd2c:	1004c03a 	cmpne	r2,r2,zero
 800bd30:	1104b03a 	or	r2,r2,r4
 800bd34:	10c001cc 	andi	r3,r2,7
 800bd38:	18000b1e 	bne	r3,zero,800bd68 <__muldf3+0x6f0>
 800bd3c:	0021883a 	mov	r16,zero
 800bd40:	1004d0fa 	srli	r2,r2,3
 800bd44:	b4c0004c 	andi	r19,r22,1
 800bd48:	0009883a 	mov	r4,zero
 800bd4c:	10e4b03a 	or	r18,r2,r3
 800bd50:	003ea306 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800bd54:	0007883a 	mov	r3,zero
 800bd58:	1820927a 	slli	r16,r3,9
 800bd5c:	1806977a 	slli	r3,r3,29
 800bd60:	8020d33a 	srli	r16,r16,12
 800bd64:	003ff606 	br	800bd40 <__alt_data_end+0xfc00bd40>
 800bd68:	110003cc 	andi	r4,r2,15
 800bd6c:	00c00104 	movi	r3,4
 800bd70:	20fff826 	beq	r4,r3,800bd54 <__alt_data_end+0xfc00bd54>
 800bd74:	0007883a 	mov	r3,zero
 800bd78:	003fd906 	br	800bce0 <__alt_data_end+0xfc00bce0>
 800bd7c:	0005883a 	mov	r2,zero
 800bd80:	003fe906 	br	800bd28 <__alt_data_end+0xfc00bd28>
 800bd84:	00800434 	movhi	r2,16
 800bd88:	84000234 	orhi	r16,r16,8
 800bd8c:	10bfffc4 	addi	r2,r2,-1
 800bd90:	e4c0004c 	andi	r19,fp,1
 800bd94:	80a0703a 	and	r16,r16,r2
 800bd98:	003ef606 	br	800b974 <__alt_data_end+0xfc00b974>

0800bd9c <__subdf3>:
 800bd9c:	00c00434 	movhi	r3,16
 800bda0:	18ffffc4 	addi	r3,r3,-1
 800bda4:	defffb04 	addi	sp,sp,-20
 800bda8:	28d2703a 	and	r9,r5,r3
 800bdac:	3814d53a 	srli	r10,r7,20
 800bdb0:	38c6703a 	and	r3,r7,r3
 800bdb4:	3004d77a 	srli	r2,r6,29
 800bdb8:	dc800215 	stw	r18,8(sp)
 800bdbc:	dc000015 	stw	r16,0(sp)
 800bdc0:	2824d7fa 	srli	r18,r5,31
 800bdc4:	2820d53a 	srli	r16,r5,20
 800bdc8:	481290fa 	slli	r9,r9,3
 800bdcc:	200ad77a 	srli	r5,r4,29
 800bdd0:	180690fa 	slli	r3,r3,3
 800bdd4:	dc400115 	stw	r17,4(sp)
 800bdd8:	dfc00415 	stw	ra,16(sp)
 800bddc:	202290fa 	slli	r17,r4,3
 800bde0:	dcc00315 	stw	r19,12(sp)
 800bde4:	5281ffcc 	andi	r10,r10,2047
 800bde8:	0101ffc4 	movi	r4,2047
 800bdec:	9011883a 	mov	r8,r18
 800bdf0:	8401ffcc 	andi	r16,r16,2047
 800bdf4:	94803fcc 	andi	r18,r18,255
 800bdf8:	494ab03a 	or	r5,r9,r5
 800bdfc:	380ed7fa 	srli	r7,r7,31
 800be00:	1886b03a 	or	r3,r3,r2
 800be04:	300c90fa 	slli	r6,r6,3
 800be08:	51009026 	beq	r10,r4,800c04c <__subdf3+0x2b0>
 800be0c:	39c0005c 	xori	r7,r7,1
 800be10:	8285c83a 	sub	r2,r16,r10
 800be14:	91c06f26 	beq	r18,r7,800bfd4 <__subdf3+0x238>
 800be18:	0080b10e 	bge	zero,r2,800c0e0 <__subdf3+0x344>
 800be1c:	50002a1e 	bne	r10,zero,800bec8 <__subdf3+0x12c>
 800be20:	1988b03a 	or	r4,r3,r6
 800be24:	2000941e 	bne	r4,zero,800c078 <__subdf3+0x2dc>
 800be28:	888001cc 	andi	r2,r17,7
 800be2c:	10005b26 	beq	r2,zero,800bf9c <__subdf3+0x200>
 800be30:	88c003cc 	andi	r3,r17,15
 800be34:	00800104 	movi	r2,4
 800be38:	18805826 	beq	r3,r2,800bf9c <__subdf3+0x200>
 800be3c:	88c00104 	addi	r3,r17,4
 800be40:	1c63803a 	cmpltu	r17,r3,r17
 800be44:	2c4b883a 	add	r5,r5,r17
 800be48:	2880202c 	andhi	r2,r5,128
 800be4c:	9200004c 	andi	r8,r18,1
 800be50:	1823883a 	mov	r17,r3
 800be54:	10005426 	beq	r2,zero,800bfa8 <__subdf3+0x20c>
 800be58:	84000044 	addi	r16,r16,1
 800be5c:	0081ffc4 	movi	r2,2047
 800be60:	8080bf26 	beq	r16,r2,800c160 <__subdf3+0x3c4>
 800be64:	013fe034 	movhi	r4,65408
 800be68:	213fffc4 	addi	r4,r4,-1
 800be6c:	290a703a 	and	r5,r5,r4
 800be70:	2804977a 	slli	r2,r5,29
 800be74:	280a927a 	slli	r5,r5,9
 800be78:	8822d0fa 	srli	r17,r17,3
 800be7c:	8401ffcc 	andi	r16,r16,2047
 800be80:	2808d33a 	srli	r4,r5,12
 800be84:	1444b03a 	or	r2,r2,r17
 800be88:	8401ffcc 	andi	r16,r16,2047
 800be8c:	800a953a 	slli	r5,r16,20
 800be90:	40c03fcc 	andi	r3,r8,255
 800be94:	04000434 	movhi	r16,16
 800be98:	180697fa 	slli	r3,r3,31
 800be9c:	843fffc4 	addi	r16,r16,-1
 800bea0:	2420703a 	and	r16,r4,r16
 800bea4:	8160b03a 	or	r16,r16,r5
 800bea8:	80c6b03a 	or	r3,r16,r3
 800beac:	dfc00417 	ldw	ra,16(sp)
 800beb0:	dcc00317 	ldw	r19,12(sp)
 800beb4:	dc800217 	ldw	r18,8(sp)
 800beb8:	dc400117 	ldw	r17,4(sp)
 800bebc:	dc000017 	ldw	r16,0(sp)
 800bec0:	dec00504 	addi	sp,sp,20
 800bec4:	f800283a 	ret
 800bec8:	0101ffc4 	movi	r4,2047
 800becc:	813fd626 	beq	r16,r4,800be28 <__alt_data_end+0xfc00be28>
 800bed0:	18c02034 	orhi	r3,r3,128
 800bed4:	01000e04 	movi	r4,56
 800bed8:	2080a416 	blt	r4,r2,800c16c <__subdf3+0x3d0>
 800bedc:	010007c4 	movi	r4,31
 800bee0:	2080c716 	blt	r4,r2,800c200 <__subdf3+0x464>
 800bee4:	01000804 	movi	r4,32
 800bee8:	2089c83a 	sub	r4,r4,r2
 800beec:	1910983a 	sll	r8,r3,r4
 800bef0:	308ed83a 	srl	r7,r6,r2
 800bef4:	3108983a 	sll	r4,r6,r4
 800bef8:	1884d83a 	srl	r2,r3,r2
 800befc:	41ccb03a 	or	r6,r8,r7
 800bf00:	2008c03a 	cmpne	r4,r4,zero
 800bf04:	310cb03a 	or	r6,r6,r4
 800bf08:	898dc83a 	sub	r6,r17,r6
 800bf0c:	89a3803a 	cmpltu	r17,r17,r6
 800bf10:	288bc83a 	sub	r5,r5,r2
 800bf14:	2c4bc83a 	sub	r5,r5,r17
 800bf18:	3023883a 	mov	r17,r6
 800bf1c:	2880202c 	andhi	r2,r5,128
 800bf20:	10006b26 	beq	r2,zero,800c0d0 <__subdf3+0x334>
 800bf24:	04c02034 	movhi	r19,128
 800bf28:	9cffffc4 	addi	r19,r19,-1
 800bf2c:	2ce6703a 	and	r19,r5,r19
 800bf30:	98007c26 	beq	r19,zero,800c124 <__subdf3+0x388>
 800bf34:	9809883a 	mov	r4,r19
 800bf38:	800c8680 	call	800c868 <__clzsi2>
 800bf3c:	10fffe04 	addi	r3,r2,-8
 800bf40:	010007c4 	movi	r4,31
 800bf44:	20c07d16 	blt	r4,r3,800c13c <__subdf3+0x3a0>
 800bf48:	01400a04 	movi	r5,40
 800bf4c:	2885c83a 	sub	r2,r5,r2
 800bf50:	888ad83a 	srl	r5,r17,r2
 800bf54:	98e6983a 	sll	r19,r19,r3
 800bf58:	88e2983a 	sll	r17,r17,r3
 800bf5c:	2ce6b03a 	or	r19,r5,r19
 800bf60:	1c007a16 	blt	r3,r16,800c14c <__subdf3+0x3b0>
 800bf64:	1c21c83a 	sub	r16,r3,r16
 800bf68:	81400044 	addi	r5,r16,1
 800bf6c:	00c007c4 	movi	r3,31
 800bf70:	19409616 	blt	r3,r5,800c1cc <__subdf3+0x430>
 800bf74:	1c21c83a 	sub	r16,r3,r16
 800bf78:	8c08983a 	sll	r4,r17,r16
 800bf7c:	8946d83a 	srl	r3,r17,r5
 800bf80:	9c20983a 	sll	r16,r19,r16
 800bf84:	2008c03a 	cmpne	r4,r4,zero
 800bf88:	994ad83a 	srl	r5,r19,r5
 800bf8c:	1c06b03a 	or	r3,r3,r16
 800bf90:	1922b03a 	or	r17,r3,r4
 800bf94:	0021883a 	mov	r16,zero
 800bf98:	003fa306 	br	800be28 <__alt_data_end+0xfc00be28>
 800bf9c:	2880202c 	andhi	r2,r5,128
 800bfa0:	9200004c 	andi	r8,r18,1
 800bfa4:	103fac1e 	bne	r2,zero,800be58 <__alt_data_end+0xfc00be58>
 800bfa8:	2804977a 	slli	r2,r5,29
 800bfac:	8822d0fa 	srli	r17,r17,3
 800bfb0:	00c1ffc4 	movi	r3,2047
 800bfb4:	280ad0fa 	srli	r5,r5,3
 800bfb8:	1444b03a 	or	r2,r2,r17
 800bfbc:	80c02726 	beq	r16,r3,800c05c <__subdf3+0x2c0>
 800bfc0:	01000434 	movhi	r4,16
 800bfc4:	213fffc4 	addi	r4,r4,-1
 800bfc8:	80e0703a 	and	r16,r16,r3
 800bfcc:	2908703a 	and	r4,r5,r4
 800bfd0:	003fad06 	br	800be88 <__alt_data_end+0xfc00be88>
 800bfd4:	0080690e 	bge	zero,r2,800c17c <__subdf3+0x3e0>
 800bfd8:	50002f26 	beq	r10,zero,800c098 <__subdf3+0x2fc>
 800bfdc:	0101ffc4 	movi	r4,2047
 800bfe0:	813f9126 	beq	r16,r4,800be28 <__alt_data_end+0xfc00be28>
 800bfe4:	18c02034 	orhi	r3,r3,128
 800bfe8:	01000e04 	movi	r4,56
 800bfec:	2080b00e 	bge	r4,r2,800c2b0 <__subdf3+0x514>
 800bff0:	198cb03a 	or	r6,r3,r6
 800bff4:	300ec03a 	cmpne	r7,r6,zero
 800bff8:	0005883a 	mov	r2,zero
 800bffc:	3c4f883a 	add	r7,r7,r17
 800c000:	3c63803a 	cmpltu	r17,r7,r17
 800c004:	114b883a 	add	r5,r2,r5
 800c008:	2c4b883a 	add	r5,r5,r17
 800c00c:	3823883a 	mov	r17,r7
 800c010:	2880202c 	andhi	r2,r5,128
 800c014:	10002e26 	beq	r2,zero,800c0d0 <__subdf3+0x334>
 800c018:	84000044 	addi	r16,r16,1
 800c01c:	0081ffc4 	movi	r2,2047
 800c020:	8080de26 	beq	r16,r2,800c39c <__subdf3+0x600>
 800c024:	00bfe034 	movhi	r2,65408
 800c028:	10bfffc4 	addi	r2,r2,-1
 800c02c:	288a703a 	and	r5,r5,r2
 800c030:	880cd07a 	srli	r6,r17,1
 800c034:	280897fa 	slli	r4,r5,31
 800c038:	88c0004c 	andi	r3,r17,1
 800c03c:	30e2b03a 	or	r17,r6,r3
 800c040:	280ad07a 	srli	r5,r5,1
 800c044:	8922b03a 	or	r17,r17,r4
 800c048:	003f7706 	br	800be28 <__alt_data_end+0xfc00be28>
 800c04c:	1984b03a 	or	r2,r3,r6
 800c050:	103f6e26 	beq	r2,zero,800be0c <__alt_data_end+0xfc00be0c>
 800c054:	39c03fcc 	andi	r7,r7,255
 800c058:	003f6d06 	br	800be10 <__alt_data_end+0xfc00be10>
 800c05c:	1146b03a 	or	r3,r2,r5
 800c060:	18003f26 	beq	r3,zero,800c160 <__subdf3+0x3c4>
 800c064:	00c00434 	movhi	r3,16
 800c068:	29000234 	orhi	r4,r5,8
 800c06c:	18ffffc4 	addi	r3,r3,-1
 800c070:	20c8703a 	and	r4,r4,r3
 800c074:	003f8406 	br	800be88 <__alt_data_end+0xfc00be88>
 800c078:	10bfffc4 	addi	r2,r2,-1
 800c07c:	1000501e 	bne	r2,zero,800c1c0 <__subdf3+0x424>
 800c080:	898fc83a 	sub	r7,r17,r6
 800c084:	89e3803a 	cmpltu	r17,r17,r7
 800c088:	28cbc83a 	sub	r5,r5,r3
 800c08c:	2c4bc83a 	sub	r5,r5,r17
 800c090:	3823883a 	mov	r17,r7
 800c094:	003fa106 	br	800bf1c <__alt_data_end+0xfc00bf1c>
 800c098:	1988b03a 	or	r4,r3,r6
 800c09c:	203f6226 	beq	r4,zero,800be28 <__alt_data_end+0xfc00be28>
 800c0a0:	10bfffc4 	addi	r2,r2,-1
 800c0a4:	10009b1e 	bne	r2,zero,800c314 <__subdf3+0x578>
 800c0a8:	344d883a 	add	r6,r6,r17
 800c0ac:	3463803a 	cmpltu	r17,r6,r17
 800c0b0:	194b883a 	add	r5,r3,r5
 800c0b4:	2c4b883a 	add	r5,r5,r17
 800c0b8:	3023883a 	mov	r17,r6
 800c0bc:	003fd406 	br	800c010 <__alt_data_end+0xfc00c010>
 800c0c0:	1106b03a 	or	r3,r2,r4
 800c0c4:	1800b426 	beq	r3,zero,800c398 <__subdf3+0x5fc>
 800c0c8:	100b883a 	mov	r5,r2
 800c0cc:	2023883a 	mov	r17,r4
 800c0d0:	888001cc 	andi	r2,r17,7
 800c0d4:	103f561e 	bne	r2,zero,800be30 <__alt_data_end+0xfc00be30>
 800c0d8:	9200004c 	andi	r8,r18,1
 800c0dc:	003fb206 	br	800bfa8 <__alt_data_end+0xfc00bfa8>
 800c0e0:	1000531e 	bne	r2,zero,800c230 <__subdf3+0x494>
 800c0e4:	80800044 	addi	r2,r16,1
 800c0e8:	1081ffcc 	andi	r2,r2,2047
 800c0ec:	01000044 	movi	r4,1
 800c0f0:	2080a00e 	bge	r4,r2,800c374 <__subdf3+0x5d8>
 800c0f4:	8985c83a 	sub	r2,r17,r6
 800c0f8:	8889803a 	cmpltu	r4,r17,r2
 800c0fc:	28e7c83a 	sub	r19,r5,r3
 800c100:	9927c83a 	sub	r19,r19,r4
 800c104:	9900202c 	andhi	r4,r19,128
 800c108:	20006226 	beq	r4,zero,800c294 <__subdf3+0x4f8>
 800c10c:	3463c83a 	sub	r17,r6,r17
 800c110:	194bc83a 	sub	r5,r3,r5
 800c114:	344d803a 	cmpltu	r6,r6,r17
 800c118:	29a7c83a 	sub	r19,r5,r6
 800c11c:	3825883a 	mov	r18,r7
 800c120:	983f841e 	bne	r19,zero,800bf34 <__alt_data_end+0xfc00bf34>
 800c124:	8809883a 	mov	r4,r17
 800c128:	800c8680 	call	800c868 <__clzsi2>
 800c12c:	10800804 	addi	r2,r2,32
 800c130:	10fffe04 	addi	r3,r2,-8
 800c134:	010007c4 	movi	r4,31
 800c138:	20ff830e 	bge	r4,r3,800bf48 <__alt_data_end+0xfc00bf48>
 800c13c:	14fff604 	addi	r19,r2,-40
 800c140:	8ce6983a 	sll	r19,r17,r19
 800c144:	0023883a 	mov	r17,zero
 800c148:	1c3f860e 	bge	r3,r16,800bf64 <__alt_data_end+0xfc00bf64>
 800c14c:	017fe034 	movhi	r5,65408
 800c150:	297fffc4 	addi	r5,r5,-1
 800c154:	80e1c83a 	sub	r16,r16,r3
 800c158:	994a703a 	and	r5,r19,r5
 800c15c:	003f3206 	br	800be28 <__alt_data_end+0xfc00be28>
 800c160:	0009883a 	mov	r4,zero
 800c164:	0005883a 	mov	r2,zero
 800c168:	003f4706 	br	800be88 <__alt_data_end+0xfc00be88>
 800c16c:	198cb03a 	or	r6,r3,r6
 800c170:	300cc03a 	cmpne	r6,r6,zero
 800c174:	0005883a 	mov	r2,zero
 800c178:	003f6306 	br	800bf08 <__alt_data_end+0xfc00bf08>
 800c17c:	10009d1e 	bne	r2,zero,800c3f4 <__subdf3+0x658>
 800c180:	81c00044 	addi	r7,r16,1
 800c184:	3881ffcc 	andi	r2,r7,2047
 800c188:	02400044 	movi	r9,1
 800c18c:	4880680e 	bge	r9,r2,800c330 <__subdf3+0x594>
 800c190:	0081ffc4 	movi	r2,2047
 800c194:	3880ae26 	beq	r7,r2,800c450 <__subdf3+0x6b4>
 800c198:	344d883a 	add	r6,r6,r17
 800c19c:	3463803a 	cmpltu	r17,r6,r17
 800c1a0:	194b883a 	add	r5,r3,r5
 800c1a4:	2c4b883a 	add	r5,r5,r17
 800c1a8:	282297fa 	slli	r17,r5,31
 800c1ac:	300cd07a 	srli	r6,r6,1
 800c1b0:	280ad07a 	srli	r5,r5,1
 800c1b4:	3821883a 	mov	r16,r7
 800c1b8:	89a2b03a 	or	r17,r17,r6
 800c1bc:	003f1a06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c1c0:	0101ffc4 	movi	r4,2047
 800c1c4:	813f431e 	bne	r16,r4,800bed4 <__alt_data_end+0xfc00bed4>
 800c1c8:	003f1706 	br	800be28 <__alt_data_end+0xfc00be28>
 800c1cc:	80bff844 	addi	r2,r16,-31
 800c1d0:	00c00804 	movi	r3,32
 800c1d4:	9884d83a 	srl	r2,r19,r2
 800c1d8:	28c05126 	beq	r5,r3,800c320 <__subdf3+0x584>
 800c1dc:	00c00fc4 	movi	r3,63
 800c1e0:	1c21c83a 	sub	r16,r3,r16
 800c1e4:	9c26983a 	sll	r19,r19,r16
 800c1e8:	9c62b03a 	or	r17,r19,r17
 800c1ec:	8822c03a 	cmpne	r17,r17,zero
 800c1f0:	88a2b03a 	or	r17,r17,r2
 800c1f4:	000b883a 	mov	r5,zero
 800c1f8:	0021883a 	mov	r16,zero
 800c1fc:	003fb406 	br	800c0d0 <__alt_data_end+0xfc00c0d0>
 800c200:	113ff804 	addi	r4,r2,-32
 800c204:	01c00804 	movi	r7,32
 800c208:	1908d83a 	srl	r4,r3,r4
 800c20c:	11c04626 	beq	r2,r7,800c328 <__subdf3+0x58c>
 800c210:	01c01004 	movi	r7,64
 800c214:	3885c83a 	sub	r2,r7,r2
 800c218:	1884983a 	sll	r2,r3,r2
 800c21c:	118cb03a 	or	r6,r2,r6
 800c220:	300cc03a 	cmpne	r6,r6,zero
 800c224:	310cb03a 	or	r6,r6,r4
 800c228:	0005883a 	mov	r2,zero
 800c22c:	003f3606 	br	800bf08 <__alt_data_end+0xfc00bf08>
 800c230:	80002b26 	beq	r16,zero,800c2e0 <__subdf3+0x544>
 800c234:	0101ffc4 	movi	r4,2047
 800c238:	51006926 	beq	r10,r4,800c3e0 <__subdf3+0x644>
 800c23c:	0085c83a 	sub	r2,zero,r2
 800c240:	29402034 	orhi	r5,r5,128
 800c244:	01000e04 	movi	r4,56
 800c248:	20807d16 	blt	r4,r2,800c440 <__subdf3+0x6a4>
 800c24c:	010007c4 	movi	r4,31
 800c250:	2080d916 	blt	r4,r2,800c5b8 <__subdf3+0x81c>
 800c254:	01000804 	movi	r4,32
 800c258:	2089c83a 	sub	r4,r4,r2
 800c25c:	2912983a 	sll	r9,r5,r4
 800c260:	8890d83a 	srl	r8,r17,r2
 800c264:	8908983a 	sll	r4,r17,r4
 800c268:	2884d83a 	srl	r2,r5,r2
 800c26c:	4a22b03a 	or	r17,r9,r8
 800c270:	2008c03a 	cmpne	r4,r4,zero
 800c274:	8922b03a 	or	r17,r17,r4
 800c278:	3463c83a 	sub	r17,r6,r17
 800c27c:	1885c83a 	sub	r2,r3,r2
 800c280:	344d803a 	cmpltu	r6,r6,r17
 800c284:	118bc83a 	sub	r5,r2,r6
 800c288:	5021883a 	mov	r16,r10
 800c28c:	3825883a 	mov	r18,r7
 800c290:	003f2206 	br	800bf1c <__alt_data_end+0xfc00bf1c>
 800c294:	9886b03a 	or	r3,r19,r2
 800c298:	18001c1e 	bne	r3,zero,800c30c <__subdf3+0x570>
 800c29c:	0011883a 	mov	r8,zero
 800c2a0:	000b883a 	mov	r5,zero
 800c2a4:	0023883a 	mov	r17,zero
 800c2a8:	0021883a 	mov	r16,zero
 800c2ac:	003f3e06 	br	800bfa8 <__alt_data_end+0xfc00bfa8>
 800c2b0:	010007c4 	movi	r4,31
 800c2b4:	20803c16 	blt	r4,r2,800c3a8 <__subdf3+0x60c>
 800c2b8:	01000804 	movi	r4,32
 800c2bc:	2089c83a 	sub	r4,r4,r2
 800c2c0:	1912983a 	sll	r9,r3,r4
 800c2c4:	308ed83a 	srl	r7,r6,r2
 800c2c8:	3108983a 	sll	r4,r6,r4
 800c2cc:	1884d83a 	srl	r2,r3,r2
 800c2d0:	49ceb03a 	or	r7,r9,r7
 800c2d4:	2008c03a 	cmpne	r4,r4,zero
 800c2d8:	390eb03a 	or	r7,r7,r4
 800c2dc:	003f4706 	br	800bffc <__alt_data_end+0xfc00bffc>
 800c2e0:	2c48b03a 	or	r4,r5,r17
 800c2e4:	20003e26 	beq	r4,zero,800c3e0 <__subdf3+0x644>
 800c2e8:	0084303a 	nor	r2,zero,r2
 800c2ec:	10003a1e 	bne	r2,zero,800c3d8 <__subdf3+0x63c>
 800c2f0:	3463c83a 	sub	r17,r6,r17
 800c2f4:	194bc83a 	sub	r5,r3,r5
 800c2f8:	344d803a 	cmpltu	r6,r6,r17
 800c2fc:	298bc83a 	sub	r5,r5,r6
 800c300:	5021883a 	mov	r16,r10
 800c304:	3825883a 	mov	r18,r7
 800c308:	003f0406 	br	800bf1c <__alt_data_end+0xfc00bf1c>
 800c30c:	1023883a 	mov	r17,r2
 800c310:	003f0706 	br	800bf30 <__alt_data_end+0xfc00bf30>
 800c314:	0101ffc4 	movi	r4,2047
 800c318:	813f331e 	bne	r16,r4,800bfe8 <__alt_data_end+0xfc00bfe8>
 800c31c:	003ec206 	br	800be28 <__alt_data_end+0xfc00be28>
 800c320:	0027883a 	mov	r19,zero
 800c324:	003fb006 	br	800c1e8 <__alt_data_end+0xfc00c1e8>
 800c328:	0005883a 	mov	r2,zero
 800c32c:	003fbb06 	br	800c21c <__alt_data_end+0xfc00c21c>
 800c330:	2c44b03a 	or	r2,r5,r17
 800c334:	80008b1e 	bne	r16,zero,800c564 <__subdf3+0x7c8>
 800c338:	1000b526 	beq	r2,zero,800c610 <__subdf3+0x874>
 800c33c:	1984b03a 	or	r2,r3,r6
 800c340:	103eb926 	beq	r2,zero,800be28 <__alt_data_end+0xfc00be28>
 800c344:	3449883a 	add	r4,r6,r17
 800c348:	2463803a 	cmpltu	r17,r4,r17
 800c34c:	194b883a 	add	r5,r3,r5
 800c350:	2c4b883a 	add	r5,r5,r17
 800c354:	2880202c 	andhi	r2,r5,128
 800c358:	2023883a 	mov	r17,r4
 800c35c:	103f5c26 	beq	r2,zero,800c0d0 <__alt_data_end+0xfc00c0d0>
 800c360:	00bfe034 	movhi	r2,65408
 800c364:	10bfffc4 	addi	r2,r2,-1
 800c368:	4821883a 	mov	r16,r9
 800c36c:	288a703a 	and	r5,r5,r2
 800c370:	003ead06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c374:	2c44b03a 	or	r2,r5,r17
 800c378:	8000291e 	bne	r16,zero,800c420 <__subdf3+0x684>
 800c37c:	10004f1e 	bne	r2,zero,800c4bc <__subdf3+0x720>
 800c380:	1984b03a 	or	r2,r3,r6
 800c384:	10000426 	beq	r2,zero,800c398 <__subdf3+0x5fc>
 800c388:	180b883a 	mov	r5,r3
 800c38c:	3023883a 	mov	r17,r6
 800c390:	3825883a 	mov	r18,r7
 800c394:	003ea406 	br	800be28 <__alt_data_end+0xfc00be28>
 800c398:	0011883a 	mov	r8,zero
 800c39c:	000b883a 	mov	r5,zero
 800c3a0:	0023883a 	mov	r17,zero
 800c3a4:	003f0006 	br	800bfa8 <__alt_data_end+0xfc00bfa8>
 800c3a8:	11fff804 	addi	r7,r2,-32
 800c3ac:	19c8d83a 	srl	r4,r3,r7
 800c3b0:	01c00804 	movi	r7,32
 800c3b4:	11c07e26 	beq	r2,r7,800c5b0 <__subdf3+0x814>
 800c3b8:	01c01004 	movi	r7,64
 800c3bc:	3885c83a 	sub	r2,r7,r2
 800c3c0:	1884983a 	sll	r2,r3,r2
 800c3c4:	118cb03a 	or	r6,r2,r6
 800c3c8:	300ec03a 	cmpne	r7,r6,zero
 800c3cc:	390eb03a 	or	r7,r7,r4
 800c3d0:	0005883a 	mov	r2,zero
 800c3d4:	003f0906 	br	800bffc <__alt_data_end+0xfc00bffc>
 800c3d8:	0101ffc4 	movi	r4,2047
 800c3dc:	513f991e 	bne	r10,r4,800c244 <__alt_data_end+0xfc00c244>
 800c3e0:	180b883a 	mov	r5,r3
 800c3e4:	3023883a 	mov	r17,r6
 800c3e8:	5021883a 	mov	r16,r10
 800c3ec:	3825883a 	mov	r18,r7
 800c3f0:	003e8d06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c3f4:	80001a1e 	bne	r16,zero,800c460 <__subdf3+0x6c4>
 800c3f8:	2c48b03a 	or	r4,r5,r17
 800c3fc:	20005526 	beq	r4,zero,800c554 <__subdf3+0x7b8>
 800c400:	0084303a 	nor	r2,zero,r2
 800c404:	1000511e 	bne	r2,zero,800c54c <__subdf3+0x7b0>
 800c408:	89a3883a 	add	r17,r17,r6
 800c40c:	194b883a 	add	r5,r3,r5
 800c410:	898d803a 	cmpltu	r6,r17,r6
 800c414:	298b883a 	add	r5,r5,r6
 800c418:	5021883a 	mov	r16,r10
 800c41c:	003efc06 	br	800c010 <__alt_data_end+0xfc00c010>
 800c420:	1000341e 	bne	r2,zero,800c4f4 <__subdf3+0x758>
 800c424:	1984b03a 	or	r2,r3,r6
 800c428:	10006f26 	beq	r2,zero,800c5e8 <__subdf3+0x84c>
 800c42c:	180b883a 	mov	r5,r3
 800c430:	3023883a 	mov	r17,r6
 800c434:	3825883a 	mov	r18,r7
 800c438:	0401ffc4 	movi	r16,2047
 800c43c:	003e7a06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c440:	2c62b03a 	or	r17,r5,r17
 800c444:	8822c03a 	cmpne	r17,r17,zero
 800c448:	0005883a 	mov	r2,zero
 800c44c:	003f8a06 	br	800c278 <__alt_data_end+0xfc00c278>
 800c450:	3821883a 	mov	r16,r7
 800c454:	000b883a 	mov	r5,zero
 800c458:	0023883a 	mov	r17,zero
 800c45c:	003ed206 	br	800bfa8 <__alt_data_end+0xfc00bfa8>
 800c460:	0101ffc4 	movi	r4,2047
 800c464:	51003b26 	beq	r10,r4,800c554 <__subdf3+0x7b8>
 800c468:	0085c83a 	sub	r2,zero,r2
 800c46c:	29402034 	orhi	r5,r5,128
 800c470:	01000e04 	movi	r4,56
 800c474:	20806216 	blt	r4,r2,800c600 <__subdf3+0x864>
 800c478:	010007c4 	movi	r4,31
 800c47c:	20806b16 	blt	r4,r2,800c62c <__subdf3+0x890>
 800c480:	01000804 	movi	r4,32
 800c484:	2089c83a 	sub	r4,r4,r2
 800c488:	2912983a 	sll	r9,r5,r4
 800c48c:	888ed83a 	srl	r7,r17,r2
 800c490:	8908983a 	sll	r4,r17,r4
 800c494:	2884d83a 	srl	r2,r5,r2
 800c498:	49e2b03a 	or	r17,r9,r7
 800c49c:	2008c03a 	cmpne	r4,r4,zero
 800c4a0:	8922b03a 	or	r17,r17,r4
 800c4a4:	89a3883a 	add	r17,r17,r6
 800c4a8:	10c5883a 	add	r2,r2,r3
 800c4ac:	898d803a 	cmpltu	r6,r17,r6
 800c4b0:	118b883a 	add	r5,r2,r6
 800c4b4:	5021883a 	mov	r16,r10
 800c4b8:	003ed506 	br	800c010 <__alt_data_end+0xfc00c010>
 800c4bc:	1984b03a 	or	r2,r3,r6
 800c4c0:	103e5926 	beq	r2,zero,800be28 <__alt_data_end+0xfc00be28>
 800c4c4:	8989c83a 	sub	r4,r17,r6
 800c4c8:	8911803a 	cmpltu	r8,r17,r4
 800c4cc:	28c5c83a 	sub	r2,r5,r3
 800c4d0:	1205c83a 	sub	r2,r2,r8
 800c4d4:	1200202c 	andhi	r8,r2,128
 800c4d8:	403ef926 	beq	r8,zero,800c0c0 <__alt_data_end+0xfc00c0c0>
 800c4dc:	3463c83a 	sub	r17,r6,r17
 800c4e0:	194bc83a 	sub	r5,r3,r5
 800c4e4:	344d803a 	cmpltu	r6,r6,r17
 800c4e8:	298bc83a 	sub	r5,r5,r6
 800c4ec:	3825883a 	mov	r18,r7
 800c4f0:	003e4d06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c4f4:	1984b03a 	or	r2,r3,r6
 800c4f8:	10002b26 	beq	r2,zero,800c5a8 <__subdf3+0x80c>
 800c4fc:	2808d0fa 	srli	r4,r5,3
 800c500:	8822d0fa 	srli	r17,r17,3
 800c504:	280a977a 	slli	r5,r5,29
 800c508:	2080022c 	andhi	r2,r4,8
 800c50c:	2c62b03a 	or	r17,r5,r17
 800c510:	10000826 	beq	r2,zero,800c534 <__subdf3+0x798>
 800c514:	1810d0fa 	srli	r8,r3,3
 800c518:	4080022c 	andhi	r2,r8,8
 800c51c:	1000051e 	bne	r2,zero,800c534 <__subdf3+0x798>
 800c520:	300cd0fa 	srli	r6,r6,3
 800c524:	1804977a 	slli	r2,r3,29
 800c528:	4009883a 	mov	r4,r8
 800c52c:	3825883a 	mov	r18,r7
 800c530:	11a2b03a 	or	r17,r2,r6
 800c534:	880ad77a 	srli	r5,r17,29
 800c538:	200890fa 	slli	r4,r4,3
 800c53c:	882290fa 	slli	r17,r17,3
 800c540:	0401ffc4 	movi	r16,2047
 800c544:	290ab03a 	or	r5,r5,r4
 800c548:	003e3706 	br	800be28 <__alt_data_end+0xfc00be28>
 800c54c:	0101ffc4 	movi	r4,2047
 800c550:	513fc71e 	bne	r10,r4,800c470 <__alt_data_end+0xfc00c470>
 800c554:	180b883a 	mov	r5,r3
 800c558:	3023883a 	mov	r17,r6
 800c55c:	5021883a 	mov	r16,r10
 800c560:	003e3106 	br	800be28 <__alt_data_end+0xfc00be28>
 800c564:	10002d26 	beq	r2,zero,800c61c <__subdf3+0x880>
 800c568:	1984b03a 	or	r2,r3,r6
 800c56c:	10000e26 	beq	r2,zero,800c5a8 <__subdf3+0x80c>
 800c570:	2808d0fa 	srli	r4,r5,3
 800c574:	8822d0fa 	srli	r17,r17,3
 800c578:	280a977a 	slli	r5,r5,29
 800c57c:	2080022c 	andhi	r2,r4,8
 800c580:	2c62b03a 	or	r17,r5,r17
 800c584:	103feb26 	beq	r2,zero,800c534 <__alt_data_end+0xfc00c534>
 800c588:	180ed0fa 	srli	r7,r3,3
 800c58c:	3880022c 	andhi	r2,r7,8
 800c590:	103fe81e 	bne	r2,zero,800c534 <__alt_data_end+0xfc00c534>
 800c594:	300cd0fa 	srli	r6,r6,3
 800c598:	1804977a 	slli	r2,r3,29
 800c59c:	3809883a 	mov	r4,r7
 800c5a0:	11a2b03a 	or	r17,r2,r6
 800c5a4:	003fe306 	br	800c534 <__alt_data_end+0xfc00c534>
 800c5a8:	0401ffc4 	movi	r16,2047
 800c5ac:	003e1e06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c5b0:	0005883a 	mov	r2,zero
 800c5b4:	003f8306 	br	800c3c4 <__alt_data_end+0xfc00c3c4>
 800c5b8:	113ff804 	addi	r4,r2,-32
 800c5bc:	02000804 	movi	r8,32
 800c5c0:	2908d83a 	srl	r4,r5,r4
 800c5c4:	12002526 	beq	r2,r8,800c65c <__subdf3+0x8c0>
 800c5c8:	02001004 	movi	r8,64
 800c5cc:	4085c83a 	sub	r2,r8,r2
 800c5d0:	288a983a 	sll	r5,r5,r2
 800c5d4:	2c62b03a 	or	r17,r5,r17
 800c5d8:	8822c03a 	cmpne	r17,r17,zero
 800c5dc:	8922b03a 	or	r17,r17,r4
 800c5e0:	0005883a 	mov	r2,zero
 800c5e4:	003f2406 	br	800c278 <__alt_data_end+0xfc00c278>
 800c5e8:	01402034 	movhi	r5,128
 800c5ec:	0011883a 	mov	r8,zero
 800c5f0:	297fffc4 	addi	r5,r5,-1
 800c5f4:	047ffe04 	movi	r17,-8
 800c5f8:	0401ffc4 	movi	r16,2047
 800c5fc:	003e6a06 	br	800bfa8 <__alt_data_end+0xfc00bfa8>
 800c600:	2c62b03a 	or	r17,r5,r17
 800c604:	8822c03a 	cmpne	r17,r17,zero
 800c608:	0005883a 	mov	r2,zero
 800c60c:	003fa506 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c610:	180b883a 	mov	r5,r3
 800c614:	3023883a 	mov	r17,r6
 800c618:	003e0306 	br	800be28 <__alt_data_end+0xfc00be28>
 800c61c:	180b883a 	mov	r5,r3
 800c620:	3023883a 	mov	r17,r6
 800c624:	0401ffc4 	movi	r16,2047
 800c628:	003dff06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c62c:	113ff804 	addi	r4,r2,-32
 800c630:	01c00804 	movi	r7,32
 800c634:	2908d83a 	srl	r4,r5,r4
 800c638:	11c00a26 	beq	r2,r7,800c664 <__subdf3+0x8c8>
 800c63c:	01c01004 	movi	r7,64
 800c640:	3885c83a 	sub	r2,r7,r2
 800c644:	288a983a 	sll	r5,r5,r2
 800c648:	2c62b03a 	or	r17,r5,r17
 800c64c:	8822c03a 	cmpne	r17,r17,zero
 800c650:	8922b03a 	or	r17,r17,r4
 800c654:	0005883a 	mov	r2,zero
 800c658:	003f9206 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c65c:	000b883a 	mov	r5,zero
 800c660:	003fdc06 	br	800c5d4 <__alt_data_end+0xfc00c5d4>
 800c664:	000b883a 	mov	r5,zero
 800c668:	003ff706 	br	800c648 <__alt_data_end+0xfc00c648>

0800c66c <__fixdfsi>:
 800c66c:	2806d53a 	srli	r3,r5,20
 800c670:	00800434 	movhi	r2,16
 800c674:	10bfffc4 	addi	r2,r2,-1
 800c678:	18c1ffcc 	andi	r3,r3,2047
 800c67c:	0180ff84 	movi	r6,1022
 800c680:	2884703a 	and	r2,r5,r2
 800c684:	280ad7fa 	srli	r5,r5,31
 800c688:	30c0130e 	bge	r6,r3,800c6d8 <__fixdfsi+0x6c>
 800c68c:	01810744 	movi	r6,1053
 800c690:	30c00d16 	blt	r6,r3,800c6c8 <__fixdfsi+0x5c>
 800c694:	01810cc4 	movi	r6,1075
 800c698:	30cdc83a 	sub	r6,r6,r3
 800c69c:	01c007c4 	movi	r7,31
 800c6a0:	10800434 	orhi	r2,r2,16
 800c6a4:	39800e0e 	bge	r7,r6,800c6e0 <__fixdfsi+0x74>
 800c6a8:	010104c4 	movi	r4,1043
 800c6ac:	20c7c83a 	sub	r3,r4,r3
 800c6b0:	10c6d83a 	srl	r3,r2,r3
 800c6b4:	29403fcc 	andi	r5,r5,255
 800c6b8:	0145c83a 	sub	r2,zero,r5
 800c6bc:	1884f03a 	xor	r2,r3,r2
 800c6c0:	1145883a 	add	r2,r2,r5
 800c6c4:	f800283a 	ret
 800c6c8:	00a00034 	movhi	r2,32768
 800c6cc:	10bfffc4 	addi	r2,r2,-1
 800c6d0:	2885883a 	add	r2,r5,r2
 800c6d4:	f800283a 	ret
 800c6d8:	0005883a 	mov	r2,zero
 800c6dc:	f800283a 	ret
 800c6e0:	18fefb44 	addi	r3,r3,-1043
 800c6e4:	2188d83a 	srl	r4,r4,r6
 800c6e8:	10c6983a 	sll	r3,r2,r3
 800c6ec:	20c6b03a 	or	r3,r4,r3
 800c6f0:	003ff006 	br	800c6b4 <__alt_data_end+0xfc00c6b4>

0800c6f4 <__floatsidf>:
 800c6f4:	defffd04 	addi	sp,sp,-12
 800c6f8:	dc400115 	stw	r17,4(sp)
 800c6fc:	dfc00215 	stw	ra,8(sp)
 800c700:	dc000015 	stw	r16,0(sp)
 800c704:	2023883a 	mov	r17,r4
 800c708:	20001426 	beq	r4,zero,800c75c <__floatsidf+0x68>
 800c70c:	2020d7fa 	srli	r16,r4,31
 800c710:	80000126 	beq	r16,zero,800c718 <__floatsidf+0x24>
 800c714:	0123c83a 	sub	r17,zero,r4
 800c718:	8809883a 	mov	r4,r17
 800c71c:	800c8680 	call	800c868 <__clzsi2>
 800c720:	01410784 	movi	r5,1054
 800c724:	00c00284 	movi	r3,10
 800c728:	288bc83a 	sub	r5,r5,r2
 800c72c:	18801c16 	blt	r3,r2,800c7a0 <__floatsidf+0xac>
 800c730:	00c002c4 	movi	r3,11
 800c734:	1887c83a 	sub	r3,r3,r2
 800c738:	88c8d83a 	srl	r4,r17,r3
 800c73c:	00c00434 	movhi	r3,16
 800c740:	18ffffc4 	addi	r3,r3,-1
 800c744:	10800544 	addi	r2,r2,21
 800c748:	20c8703a 	and	r4,r4,r3
 800c74c:	8884983a 	sll	r2,r17,r2
 800c750:	28c1ffcc 	andi	r3,r5,2047
 800c754:	800d883a 	mov	r6,r16
 800c758:	00000406 	br	800c76c <__floatsidf+0x78>
 800c75c:	000d883a 	mov	r6,zero
 800c760:	0007883a 	mov	r3,zero
 800c764:	0009883a 	mov	r4,zero
 800c768:	0005883a 	mov	r2,zero
 800c76c:	180a953a 	slli	r5,r3,20
 800c770:	31803fcc 	andi	r6,r6,255
 800c774:	00c00434 	movhi	r3,16
 800c778:	300c97fa 	slli	r6,r6,31
 800c77c:	18ffffc4 	addi	r3,r3,-1
 800c780:	20c6703a 	and	r3,r4,r3
 800c784:	1946b03a 	or	r3,r3,r5
 800c788:	1986b03a 	or	r3,r3,r6
 800c78c:	dfc00217 	ldw	ra,8(sp)
 800c790:	dc400117 	ldw	r17,4(sp)
 800c794:	dc000017 	ldw	r16,0(sp)
 800c798:	dec00304 	addi	sp,sp,12
 800c79c:	f800283a 	ret
 800c7a0:	10fffd44 	addi	r3,r2,-11
 800c7a4:	88c8983a 	sll	r4,r17,r3
 800c7a8:	00800434 	movhi	r2,16
 800c7ac:	10bfffc4 	addi	r2,r2,-1
 800c7b0:	2088703a 	and	r4,r4,r2
 800c7b4:	28c1ffcc 	andi	r3,r5,2047
 800c7b8:	800d883a 	mov	r6,r16
 800c7bc:	0005883a 	mov	r2,zero
 800c7c0:	003fea06 	br	800c76c <__alt_data_end+0xfc00c76c>

0800c7c4 <__floatunsidf>:
 800c7c4:	defffe04 	addi	sp,sp,-8
 800c7c8:	dc000015 	stw	r16,0(sp)
 800c7cc:	dfc00115 	stw	ra,4(sp)
 800c7d0:	2021883a 	mov	r16,r4
 800c7d4:	20001026 	beq	r4,zero,800c818 <__floatunsidf+0x54>
 800c7d8:	800c8680 	call	800c868 <__clzsi2>
 800c7dc:	01410784 	movi	r5,1054
 800c7e0:	100d883a 	mov	r6,r2
 800c7e4:	288bc83a 	sub	r5,r5,r2
 800c7e8:	00800284 	movi	r2,10
 800c7ec:	11801616 	blt	r2,r6,800c848 <__floatunsidf+0x84>
 800c7f0:	008002c4 	movi	r2,11
 800c7f4:	1185c83a 	sub	r2,r2,r6
 800c7f8:	8084d83a 	srl	r2,r16,r2
 800c7fc:	00c00434 	movhi	r3,16
 800c800:	31c00544 	addi	r7,r6,21
 800c804:	18ffffc4 	addi	r3,r3,-1
 800c808:	81e0983a 	sll	r16,r16,r7
 800c80c:	10cc703a 	and	r6,r2,r3
 800c810:	2941ffcc 	andi	r5,r5,2047
 800c814:	00000206 	br	800c820 <__floatunsidf+0x5c>
 800c818:	000b883a 	mov	r5,zero
 800c81c:	000d883a 	mov	r6,zero
 800c820:	280a953a 	slli	r5,r5,20
 800c824:	00c00434 	movhi	r3,16
 800c828:	18ffffc4 	addi	r3,r3,-1
 800c82c:	30c6703a 	and	r3,r6,r3
 800c830:	8005883a 	mov	r2,r16
 800c834:	1946b03a 	or	r3,r3,r5
 800c838:	dfc00117 	ldw	ra,4(sp)
 800c83c:	dc000017 	ldw	r16,0(sp)
 800c840:	dec00204 	addi	sp,sp,8
 800c844:	f800283a 	ret
 800c848:	31bffd44 	addi	r6,r6,-11
 800c84c:	818c983a 	sll	r6,r16,r6
 800c850:	00800434 	movhi	r2,16
 800c854:	10bfffc4 	addi	r2,r2,-1
 800c858:	2941ffcc 	andi	r5,r5,2047
 800c85c:	0021883a 	mov	r16,zero
 800c860:	308c703a 	and	r6,r6,r2
 800c864:	003fee06 	br	800c820 <__alt_data_end+0xfc00c820>

0800c868 <__clzsi2>:
 800c868:	00bfffd4 	movui	r2,65535
 800c86c:	11000b36 	bltu	r2,r4,800c89c <__clzsi2+0x34>
 800c870:	00803fc4 	movi	r2,255
 800c874:	1100122e 	bgeu	r2,r4,800c8c0 <__clzsi2+0x58>
 800c878:	00c00204 	movi	r3,8
 800c87c:	01400604 	movi	r5,24
 800c880:	20c8d83a 	srl	r4,r4,r3
 800c884:	00820074 	movhi	r2,2049
 800c888:	10bdd904 	addi	r2,r2,-2204
 800c88c:	1109883a 	add	r4,r2,r4
 800c890:	20800003 	ldbu	r2,0(r4)
 800c894:	2885c83a 	sub	r2,r5,r2
 800c898:	f800283a 	ret
 800c89c:	00804034 	movhi	r2,256
 800c8a0:	10bfffc4 	addi	r2,r2,-1
 800c8a4:	11000336 	bltu	r2,r4,800c8b4 <__clzsi2+0x4c>
 800c8a8:	00c00404 	movi	r3,16
 800c8ac:	180b883a 	mov	r5,r3
 800c8b0:	003ff306 	br	800c880 <__alt_data_end+0xfc00c880>
 800c8b4:	00c00604 	movi	r3,24
 800c8b8:	01400204 	movi	r5,8
 800c8bc:	003ff006 	br	800c880 <__alt_data_end+0xfc00c880>
 800c8c0:	0007883a 	mov	r3,zero
 800c8c4:	01400804 	movi	r5,32
 800c8c8:	003fed06 	br	800c880 <__alt_data_end+0xfc00c880>

0800c8cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c8cc:	defffe04 	addi	sp,sp,-8
 800c8d0:	dfc00115 	stw	ra,4(sp)
 800c8d4:	df000015 	stw	fp,0(sp)
 800c8d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c8dc:	00820074 	movhi	r2,2049
 800c8e0:	1084ed04 	addi	r2,r2,5044
 800c8e4:	10800017 	ldw	r2,0(r2)
 800c8e8:	10000526 	beq	r2,zero,800c900 <alt_get_errno+0x34>
 800c8ec:	00820074 	movhi	r2,2049
 800c8f0:	1084ed04 	addi	r2,r2,5044
 800c8f4:	10800017 	ldw	r2,0(r2)
 800c8f8:	103ee83a 	callr	r2
 800c8fc:	00000206 	br	800c908 <alt_get_errno+0x3c>
 800c900:	00820074 	movhi	r2,2049
 800c904:	108bbe04 	addi	r2,r2,12024
}
 800c908:	e037883a 	mov	sp,fp
 800c90c:	dfc00117 	ldw	ra,4(sp)
 800c910:	df000017 	ldw	fp,0(sp)
 800c914:	dec00204 	addi	sp,sp,8
 800c918:	f800283a 	ret

0800c91c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800c91c:	defffb04 	addi	sp,sp,-20
 800c920:	dfc00415 	stw	ra,16(sp)
 800c924:	df000315 	stw	fp,12(sp)
 800c928:	df000304 	addi	fp,sp,12
 800c92c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800c930:	e0bfff17 	ldw	r2,-4(fp)
 800c934:	10000616 	blt	r2,zero,800c950 <close+0x34>
 800c938:	e0bfff17 	ldw	r2,-4(fp)
 800c93c:	10c00324 	muli	r3,r2,12
 800c940:	00820074 	movhi	r2,2049
 800c944:	10805f04 	addi	r2,r2,380
 800c948:	1885883a 	add	r2,r3,r2
 800c94c:	00000106 	br	800c954 <close+0x38>
 800c950:	0005883a 	mov	r2,zero
 800c954:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800c958:	e0bffd17 	ldw	r2,-12(fp)
 800c95c:	10001926 	beq	r2,zero,800c9c4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800c960:	e0bffd17 	ldw	r2,-12(fp)
 800c964:	10800017 	ldw	r2,0(r2)
 800c968:	10800417 	ldw	r2,16(r2)
 800c96c:	10000626 	beq	r2,zero,800c988 <close+0x6c>
 800c970:	e0bffd17 	ldw	r2,-12(fp)
 800c974:	10800017 	ldw	r2,0(r2)
 800c978:	10800417 	ldw	r2,16(r2)
 800c97c:	e13ffd17 	ldw	r4,-12(fp)
 800c980:	103ee83a 	callr	r2
 800c984:	00000106 	br	800c98c <close+0x70>
 800c988:	0005883a 	mov	r2,zero
 800c98c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800c990:	e13fff17 	ldw	r4,-4(fp)
 800c994:	800d0180 	call	800d018 <alt_release_fd>
    if (rval < 0)
 800c998:	e0bffe17 	ldw	r2,-8(fp)
 800c99c:	1000070e 	bge	r2,zero,800c9bc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800c9a0:	800c8cc0 	call	800c8cc <alt_get_errno>
 800c9a4:	1007883a 	mov	r3,r2
 800c9a8:	e0bffe17 	ldw	r2,-8(fp)
 800c9ac:	0085c83a 	sub	r2,zero,r2
 800c9b0:	18800015 	stw	r2,0(r3)
      return -1;
 800c9b4:	00bfffc4 	movi	r2,-1
 800c9b8:	00000706 	br	800c9d8 <close+0xbc>
    }
    return 0;
 800c9bc:	0005883a 	mov	r2,zero
 800c9c0:	00000506 	br	800c9d8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800c9c4:	800c8cc0 	call	800c8cc <alt_get_errno>
 800c9c8:	1007883a 	mov	r3,r2
 800c9cc:	00801444 	movi	r2,81
 800c9d0:	18800015 	stw	r2,0(r3)
    return -1;
 800c9d4:	00bfffc4 	movi	r2,-1
  }
}
 800c9d8:	e037883a 	mov	sp,fp
 800c9dc:	dfc00117 	ldw	ra,4(sp)
 800c9e0:	df000017 	ldw	fp,0(sp)
 800c9e4:	dec00204 	addi	sp,sp,8
 800c9e8:	f800283a 	ret

0800c9ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800c9ec:	defffc04 	addi	sp,sp,-16
 800c9f0:	df000315 	stw	fp,12(sp)
 800c9f4:	df000304 	addi	fp,sp,12
 800c9f8:	e13ffd15 	stw	r4,-12(fp)
 800c9fc:	e17ffe15 	stw	r5,-8(fp)
 800ca00:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ca04:	e0bfff17 	ldw	r2,-4(fp)
}
 800ca08:	e037883a 	mov	sp,fp
 800ca0c:	df000017 	ldw	fp,0(sp)
 800ca10:	dec00104 	addi	sp,sp,4
 800ca14:	f800283a 	ret

0800ca18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ca18:	defffe04 	addi	sp,sp,-8
 800ca1c:	dfc00115 	stw	ra,4(sp)
 800ca20:	df000015 	stw	fp,0(sp)
 800ca24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ca28:	00820074 	movhi	r2,2049
 800ca2c:	1084ed04 	addi	r2,r2,5044
 800ca30:	10800017 	ldw	r2,0(r2)
 800ca34:	10000526 	beq	r2,zero,800ca4c <alt_get_errno+0x34>
 800ca38:	00820074 	movhi	r2,2049
 800ca3c:	1084ed04 	addi	r2,r2,5044
 800ca40:	10800017 	ldw	r2,0(r2)
 800ca44:	103ee83a 	callr	r2
 800ca48:	00000206 	br	800ca54 <alt_get_errno+0x3c>
 800ca4c:	00820074 	movhi	r2,2049
 800ca50:	108bbe04 	addi	r2,r2,12024
}
 800ca54:	e037883a 	mov	sp,fp
 800ca58:	dfc00117 	ldw	ra,4(sp)
 800ca5c:	df000017 	ldw	fp,0(sp)
 800ca60:	dec00204 	addi	sp,sp,8
 800ca64:	f800283a 	ret

0800ca68 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ca68:	defffb04 	addi	sp,sp,-20
 800ca6c:	dfc00415 	stw	ra,16(sp)
 800ca70:	df000315 	stw	fp,12(sp)
 800ca74:	df000304 	addi	fp,sp,12
 800ca78:	e13ffe15 	stw	r4,-8(fp)
 800ca7c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ca80:	e0bffe17 	ldw	r2,-8(fp)
 800ca84:	10000616 	blt	r2,zero,800caa0 <fstat+0x38>
 800ca88:	e0bffe17 	ldw	r2,-8(fp)
 800ca8c:	10c00324 	muli	r3,r2,12
 800ca90:	00820074 	movhi	r2,2049
 800ca94:	10805f04 	addi	r2,r2,380
 800ca98:	1885883a 	add	r2,r3,r2
 800ca9c:	00000106 	br	800caa4 <fstat+0x3c>
 800caa0:	0005883a 	mov	r2,zero
 800caa4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800caa8:	e0bffd17 	ldw	r2,-12(fp)
 800caac:	10001026 	beq	r2,zero,800caf0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800cab0:	e0bffd17 	ldw	r2,-12(fp)
 800cab4:	10800017 	ldw	r2,0(r2)
 800cab8:	10800817 	ldw	r2,32(r2)
 800cabc:	10000726 	beq	r2,zero,800cadc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800cac0:	e0bffd17 	ldw	r2,-12(fp)
 800cac4:	10800017 	ldw	r2,0(r2)
 800cac8:	10800817 	ldw	r2,32(r2)
 800cacc:	e13ffd17 	ldw	r4,-12(fp)
 800cad0:	e17fff17 	ldw	r5,-4(fp)
 800cad4:	103ee83a 	callr	r2
 800cad8:	00000a06 	br	800cb04 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800cadc:	e0bfff17 	ldw	r2,-4(fp)
 800cae0:	00c80004 	movi	r3,8192
 800cae4:	10c00115 	stw	r3,4(r2)
      return 0;
 800cae8:	0005883a 	mov	r2,zero
 800caec:	00000506 	br	800cb04 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800caf0:	800ca180 	call	800ca18 <alt_get_errno>
 800caf4:	1007883a 	mov	r3,r2
 800caf8:	00801444 	movi	r2,81
 800cafc:	18800015 	stw	r2,0(r3)
    return -1;
 800cb00:	00bfffc4 	movi	r2,-1
  }
}
 800cb04:	e037883a 	mov	sp,fp
 800cb08:	dfc00117 	ldw	ra,4(sp)
 800cb0c:	df000017 	ldw	fp,0(sp)
 800cb10:	dec00204 	addi	sp,sp,8
 800cb14:	f800283a 	ret

0800cb18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cb18:	defffe04 	addi	sp,sp,-8
 800cb1c:	dfc00115 	stw	ra,4(sp)
 800cb20:	df000015 	stw	fp,0(sp)
 800cb24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cb28:	00820074 	movhi	r2,2049
 800cb2c:	1084ed04 	addi	r2,r2,5044
 800cb30:	10800017 	ldw	r2,0(r2)
 800cb34:	10000526 	beq	r2,zero,800cb4c <alt_get_errno+0x34>
 800cb38:	00820074 	movhi	r2,2049
 800cb3c:	1084ed04 	addi	r2,r2,5044
 800cb40:	10800017 	ldw	r2,0(r2)
 800cb44:	103ee83a 	callr	r2
 800cb48:	00000206 	br	800cb54 <alt_get_errno+0x3c>
 800cb4c:	00820074 	movhi	r2,2049
 800cb50:	108bbe04 	addi	r2,r2,12024
}
 800cb54:	e037883a 	mov	sp,fp
 800cb58:	dfc00117 	ldw	ra,4(sp)
 800cb5c:	df000017 	ldw	fp,0(sp)
 800cb60:	dec00204 	addi	sp,sp,8
 800cb64:	f800283a 	ret

0800cb68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800cb68:	deffed04 	addi	sp,sp,-76
 800cb6c:	dfc01215 	stw	ra,72(sp)
 800cb70:	df001115 	stw	fp,68(sp)
 800cb74:	df001104 	addi	fp,sp,68
 800cb78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cb7c:	e0bfff17 	ldw	r2,-4(fp)
 800cb80:	10000616 	blt	r2,zero,800cb9c <isatty+0x34>
 800cb84:	e0bfff17 	ldw	r2,-4(fp)
 800cb88:	10c00324 	muli	r3,r2,12
 800cb8c:	00820074 	movhi	r2,2049
 800cb90:	10805f04 	addi	r2,r2,380
 800cb94:	1885883a 	add	r2,r3,r2
 800cb98:	00000106 	br	800cba0 <isatty+0x38>
 800cb9c:	0005883a 	mov	r2,zero
 800cba0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800cba4:	e0bfef17 	ldw	r2,-68(fp)
 800cba8:	10000e26 	beq	r2,zero,800cbe4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800cbac:	e0bfef17 	ldw	r2,-68(fp)
 800cbb0:	10800017 	ldw	r2,0(r2)
 800cbb4:	10800817 	ldw	r2,32(r2)
 800cbb8:	1000021e 	bne	r2,zero,800cbc4 <isatty+0x5c>
    {
      return 1;
 800cbbc:	00800044 	movi	r2,1
 800cbc0:	00000d06 	br	800cbf8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800cbc4:	e0bff004 	addi	r2,fp,-64
 800cbc8:	e13fff17 	ldw	r4,-4(fp)
 800cbcc:	100b883a 	mov	r5,r2
 800cbd0:	800ca680 	call	800ca68 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800cbd4:	e0bff117 	ldw	r2,-60(fp)
 800cbd8:	10880020 	cmpeqi	r2,r2,8192
 800cbdc:	10803fcc 	andi	r2,r2,255
 800cbe0:	00000506 	br	800cbf8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cbe4:	800cb180 	call	800cb18 <alt_get_errno>
 800cbe8:	1007883a 	mov	r3,r2
 800cbec:	00801444 	movi	r2,81
 800cbf0:	18800015 	stw	r2,0(r3)
    return 0;
 800cbf4:	0005883a 	mov	r2,zero
  }
}
 800cbf8:	e037883a 	mov	sp,fp
 800cbfc:	dfc00117 	ldw	ra,4(sp)
 800cc00:	df000017 	ldw	fp,0(sp)
 800cc04:	dec00204 	addi	sp,sp,8
 800cc08:	f800283a 	ret

0800cc0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800cc0c:	defffc04 	addi	sp,sp,-16
 800cc10:	df000315 	stw	fp,12(sp)
 800cc14:	df000304 	addi	fp,sp,12
 800cc18:	e13ffd15 	stw	r4,-12(fp)
 800cc1c:	e17ffe15 	stw	r5,-8(fp)
 800cc20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800cc24:	e0fffe17 	ldw	r3,-8(fp)
 800cc28:	e0bffd17 	ldw	r2,-12(fp)
 800cc2c:	18800c26 	beq	r3,r2,800cc60 <alt_load_section+0x54>
  {
    while( to != end )
 800cc30:	00000806 	br	800cc54 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800cc34:	e0bffe17 	ldw	r2,-8(fp)
 800cc38:	10c00104 	addi	r3,r2,4
 800cc3c:	e0fffe15 	stw	r3,-8(fp)
 800cc40:	e0fffd17 	ldw	r3,-12(fp)
 800cc44:	19000104 	addi	r4,r3,4
 800cc48:	e13ffd15 	stw	r4,-12(fp)
 800cc4c:	18c00017 	ldw	r3,0(r3)
 800cc50:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800cc54:	e0fffe17 	ldw	r3,-8(fp)
 800cc58:	e0bfff17 	ldw	r2,-4(fp)
 800cc5c:	18bff51e 	bne	r3,r2,800cc34 <__alt_data_end+0xfc00cc34>
    {
      *to++ = *from++;
    }
  }
}
 800cc60:	e037883a 	mov	sp,fp
 800cc64:	df000017 	ldw	fp,0(sp)
 800cc68:	dec00104 	addi	sp,sp,4
 800cc6c:	f800283a 	ret

0800cc70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800cc70:	defffe04 	addi	sp,sp,-8
 800cc74:	dfc00115 	stw	ra,4(sp)
 800cc78:	df000015 	stw	fp,0(sp)
 800cc7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800cc80:	01020074 	movhi	r4,2049
 800cc84:	2104f204 	addi	r4,r4,5064
 800cc88:	01420074 	movhi	r5,2049
 800cc8c:	297e2c04 	addi	r5,r5,-1872
 800cc90:	01820074 	movhi	r6,2049
 800cc94:	3184f204 	addi	r6,r6,5064
 800cc98:	800cc0c0 	call	800cc0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800cc9c:	01020034 	movhi	r4,2048
 800cca0:	21000804 	addi	r4,r4,32
 800cca4:	01420034 	movhi	r5,2048
 800cca8:	29400804 	addi	r5,r5,32
 800ccac:	01820034 	movhi	r6,2048
 800ccb0:	31806f04 	addi	r6,r6,444
 800ccb4:	800cc0c0 	call	800cc0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ccb8:	01020074 	movhi	r4,2049
 800ccbc:	213d5904 	addi	r4,r4,-2716
 800ccc0:	01420074 	movhi	r5,2049
 800ccc4:	297d5904 	addi	r5,r5,-2716
 800ccc8:	01820074 	movhi	r6,2049
 800cccc:	31be2c04 	addi	r6,r6,-1872
 800ccd0:	800cc0c0 	call	800cc0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ccd4:	800e4ac0 	call	800e4ac <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ccd8:	800e7040 	call	800e704 <alt_icache_flush_all>
}
 800ccdc:	e037883a 	mov	sp,fp
 800cce0:	dfc00117 	ldw	ra,4(sp)
 800cce4:	df000017 	ldw	fp,0(sp)
 800cce8:	dec00204 	addi	sp,sp,8
 800ccec:	f800283a 	ret

0800ccf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ccf0:	defffe04 	addi	sp,sp,-8
 800ccf4:	dfc00115 	stw	ra,4(sp)
 800ccf8:	df000015 	stw	fp,0(sp)
 800ccfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cd00:	00820074 	movhi	r2,2049
 800cd04:	1084ed04 	addi	r2,r2,5044
 800cd08:	10800017 	ldw	r2,0(r2)
 800cd0c:	10000526 	beq	r2,zero,800cd24 <alt_get_errno+0x34>
 800cd10:	00820074 	movhi	r2,2049
 800cd14:	1084ed04 	addi	r2,r2,5044
 800cd18:	10800017 	ldw	r2,0(r2)
 800cd1c:	103ee83a 	callr	r2
 800cd20:	00000206 	br	800cd2c <alt_get_errno+0x3c>
 800cd24:	00820074 	movhi	r2,2049
 800cd28:	108bbe04 	addi	r2,r2,12024
}
 800cd2c:	e037883a 	mov	sp,fp
 800cd30:	dfc00117 	ldw	ra,4(sp)
 800cd34:	df000017 	ldw	fp,0(sp)
 800cd38:	dec00204 	addi	sp,sp,8
 800cd3c:	f800283a 	ret

0800cd40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800cd40:	defff904 	addi	sp,sp,-28
 800cd44:	dfc00615 	stw	ra,24(sp)
 800cd48:	df000515 	stw	fp,20(sp)
 800cd4c:	df000504 	addi	fp,sp,20
 800cd50:	e13ffd15 	stw	r4,-12(fp)
 800cd54:	e17ffe15 	stw	r5,-8(fp)
 800cd58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800cd5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cd60:	e0bffd17 	ldw	r2,-12(fp)
 800cd64:	10000616 	blt	r2,zero,800cd80 <lseek+0x40>
 800cd68:	e0bffd17 	ldw	r2,-12(fp)
 800cd6c:	10c00324 	muli	r3,r2,12
 800cd70:	00820074 	movhi	r2,2049
 800cd74:	10805f04 	addi	r2,r2,380
 800cd78:	1885883a 	add	r2,r3,r2
 800cd7c:	00000106 	br	800cd84 <lseek+0x44>
 800cd80:	0005883a 	mov	r2,zero
 800cd84:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800cd88:	e0bffc17 	ldw	r2,-16(fp)
 800cd8c:	10001026 	beq	r2,zero,800cdd0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800cd90:	e0bffc17 	ldw	r2,-16(fp)
 800cd94:	10800017 	ldw	r2,0(r2)
 800cd98:	10800717 	ldw	r2,28(r2)
 800cd9c:	10000926 	beq	r2,zero,800cdc4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800cda0:	e0bffc17 	ldw	r2,-16(fp)
 800cda4:	10800017 	ldw	r2,0(r2)
 800cda8:	10800717 	ldw	r2,28(r2)
 800cdac:	e13ffc17 	ldw	r4,-16(fp)
 800cdb0:	e17ffe17 	ldw	r5,-8(fp)
 800cdb4:	e1bfff17 	ldw	r6,-4(fp)
 800cdb8:	103ee83a 	callr	r2
 800cdbc:	e0bffb15 	stw	r2,-20(fp)
 800cdc0:	00000506 	br	800cdd8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800cdc4:	00bfde84 	movi	r2,-134
 800cdc8:	e0bffb15 	stw	r2,-20(fp)
 800cdcc:	00000206 	br	800cdd8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800cdd0:	00bfebc4 	movi	r2,-81
 800cdd4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800cdd8:	e0bffb17 	ldw	r2,-20(fp)
 800cddc:	1000070e 	bge	r2,zero,800cdfc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800cde0:	800ccf00 	call	800ccf0 <alt_get_errno>
 800cde4:	1007883a 	mov	r3,r2
 800cde8:	e0bffb17 	ldw	r2,-20(fp)
 800cdec:	0085c83a 	sub	r2,zero,r2
 800cdf0:	18800015 	stw	r2,0(r3)
    rc = -1;
 800cdf4:	00bfffc4 	movi	r2,-1
 800cdf8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800cdfc:	e0bffb17 	ldw	r2,-20(fp)
}
 800ce00:	e037883a 	mov	sp,fp
 800ce04:	dfc00117 	ldw	ra,4(sp)
 800ce08:	df000017 	ldw	fp,0(sp)
 800ce0c:	dec00204 	addi	sp,sp,8
 800ce10:	f800283a 	ret

0800ce14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ce14:	defffd04 	addi	sp,sp,-12
 800ce18:	dfc00215 	stw	ra,8(sp)
 800ce1c:	df000115 	stw	fp,4(sp)
 800ce20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ce24:	0009883a 	mov	r4,zero
 800ce28:	800d2a80 	call	800d2a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ce2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800ce30:	800d2dc0 	call	800d2dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ce34:	01020074 	movhi	r4,2049
 800ce38:	213e1c04 	addi	r4,r4,-1936
 800ce3c:	01420074 	movhi	r5,2049
 800ce40:	297e1c04 	addi	r5,r5,-1936
 800ce44:	01820074 	movhi	r6,2049
 800ce48:	31be1c04 	addi	r6,r6,-1936
 800ce4c:	800eac40 	call	800eac4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ce50:	800e5bc0 	call	800e5bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ce54:	01020074 	movhi	r4,2049
 800ce58:	21398604 	addi	r4,r4,-6632
 800ce5c:	800f1c00 	call	800f1c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ce60:	d126dd17 	ldw	r4,-25740(gp)
 800ce64:	d0e6de17 	ldw	r3,-25736(gp)
 800ce68:	d0a6df17 	ldw	r2,-25732(gp)
 800ce6c:	180b883a 	mov	r5,r3
 800ce70:	100d883a 	mov	r6,r2
 800ce74:	80005600 	call	8000560 <main>
 800ce78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800ce7c:	01000044 	movi	r4,1
 800ce80:	800c91c0 	call	800c91c <close>
  exit (result);
 800ce84:	e13fff17 	ldw	r4,-4(fp)
 800ce88:	800f1d40 	call	800f1d4 <exit>

0800ce8c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800ce8c:	defffe04 	addi	sp,sp,-8
 800ce90:	df000115 	stw	fp,4(sp)
 800ce94:	df000104 	addi	fp,sp,4
 800ce98:	e13fff15 	stw	r4,-4(fp)
}
 800ce9c:	e037883a 	mov	sp,fp
 800cea0:	df000017 	ldw	fp,0(sp)
 800cea4:	dec00104 	addi	sp,sp,4
 800cea8:	f800283a 	ret

0800ceac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800ceac:	defffe04 	addi	sp,sp,-8
 800ceb0:	df000115 	stw	fp,4(sp)
 800ceb4:	df000104 	addi	fp,sp,4
 800ceb8:	e13fff15 	stw	r4,-4(fp)
}
 800cebc:	e037883a 	mov	sp,fp
 800cec0:	df000017 	ldw	fp,0(sp)
 800cec4:	dec00104 	addi	sp,sp,4
 800cec8:	f800283a 	ret

0800cecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cecc:	defffe04 	addi	sp,sp,-8
 800ced0:	dfc00115 	stw	ra,4(sp)
 800ced4:	df000015 	stw	fp,0(sp)
 800ced8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cedc:	00820074 	movhi	r2,2049
 800cee0:	1084ed04 	addi	r2,r2,5044
 800cee4:	10800017 	ldw	r2,0(r2)
 800cee8:	10000526 	beq	r2,zero,800cf00 <alt_get_errno+0x34>
 800ceec:	00820074 	movhi	r2,2049
 800cef0:	1084ed04 	addi	r2,r2,5044
 800cef4:	10800017 	ldw	r2,0(r2)
 800cef8:	103ee83a 	callr	r2
 800cefc:	00000206 	br	800cf08 <alt_get_errno+0x3c>
 800cf00:	00820074 	movhi	r2,2049
 800cf04:	108bbe04 	addi	r2,r2,12024
}
 800cf08:	e037883a 	mov	sp,fp
 800cf0c:	dfc00117 	ldw	ra,4(sp)
 800cf10:	df000017 	ldw	fp,0(sp)
 800cf14:	dec00204 	addi	sp,sp,8
 800cf18:	f800283a 	ret

0800cf1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800cf1c:	defff904 	addi	sp,sp,-28
 800cf20:	dfc00615 	stw	ra,24(sp)
 800cf24:	df000515 	stw	fp,20(sp)
 800cf28:	df000504 	addi	fp,sp,20
 800cf2c:	e13ffd15 	stw	r4,-12(fp)
 800cf30:	e17ffe15 	stw	r5,-8(fp)
 800cf34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cf38:	e0bffd17 	ldw	r2,-12(fp)
 800cf3c:	10000616 	blt	r2,zero,800cf58 <read+0x3c>
 800cf40:	e0bffd17 	ldw	r2,-12(fp)
 800cf44:	10c00324 	muli	r3,r2,12
 800cf48:	00820074 	movhi	r2,2049
 800cf4c:	10805f04 	addi	r2,r2,380
 800cf50:	1885883a 	add	r2,r3,r2
 800cf54:	00000106 	br	800cf5c <read+0x40>
 800cf58:	0005883a 	mov	r2,zero
 800cf5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800cf60:	e0bffb17 	ldw	r2,-20(fp)
 800cf64:	10002226 	beq	r2,zero,800cff0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800cf68:	e0bffb17 	ldw	r2,-20(fp)
 800cf6c:	10800217 	ldw	r2,8(r2)
 800cf70:	108000cc 	andi	r2,r2,3
 800cf74:	10800060 	cmpeqi	r2,r2,1
 800cf78:	1000181e 	bne	r2,zero,800cfdc <read+0xc0>
        (fd->dev->read))
 800cf7c:	e0bffb17 	ldw	r2,-20(fp)
 800cf80:	10800017 	ldw	r2,0(r2)
 800cf84:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800cf88:	10001426 	beq	r2,zero,800cfdc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800cf8c:	e0bffb17 	ldw	r2,-20(fp)
 800cf90:	10800017 	ldw	r2,0(r2)
 800cf94:	10800517 	ldw	r2,20(r2)
 800cf98:	e0ffff17 	ldw	r3,-4(fp)
 800cf9c:	e13ffb17 	ldw	r4,-20(fp)
 800cfa0:	e17ffe17 	ldw	r5,-8(fp)
 800cfa4:	180d883a 	mov	r6,r3
 800cfa8:	103ee83a 	callr	r2
 800cfac:	e0bffc15 	stw	r2,-16(fp)
 800cfb0:	e0bffc17 	ldw	r2,-16(fp)
 800cfb4:	1000070e 	bge	r2,zero,800cfd4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800cfb8:	800cecc0 	call	800cecc <alt_get_errno>
 800cfbc:	1007883a 	mov	r3,r2
 800cfc0:	e0bffc17 	ldw	r2,-16(fp)
 800cfc4:	0085c83a 	sub	r2,zero,r2
 800cfc8:	18800015 	stw	r2,0(r3)
          return -1;
 800cfcc:	00bfffc4 	movi	r2,-1
 800cfd0:	00000c06 	br	800d004 <read+0xe8>
        }
        return rval;
 800cfd4:	e0bffc17 	ldw	r2,-16(fp)
 800cfd8:	00000a06 	br	800d004 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800cfdc:	800cecc0 	call	800cecc <alt_get_errno>
 800cfe0:	1007883a 	mov	r3,r2
 800cfe4:	00800344 	movi	r2,13
 800cfe8:	18800015 	stw	r2,0(r3)
 800cfec:	00000406 	br	800d000 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800cff0:	800cecc0 	call	800cecc <alt_get_errno>
 800cff4:	1007883a 	mov	r3,r2
 800cff8:	00801444 	movi	r2,81
 800cffc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d000:	00bfffc4 	movi	r2,-1
}
 800d004:	e037883a 	mov	sp,fp
 800d008:	dfc00117 	ldw	ra,4(sp)
 800d00c:	df000017 	ldw	fp,0(sp)
 800d010:	dec00204 	addi	sp,sp,8
 800d014:	f800283a 	ret

0800d018 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d018:	defffe04 	addi	sp,sp,-8
 800d01c:	df000115 	stw	fp,4(sp)
 800d020:	df000104 	addi	fp,sp,4
 800d024:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d028:	e0bfff17 	ldw	r2,-4(fp)
 800d02c:	108000d0 	cmplti	r2,r2,3
 800d030:	10000d1e 	bne	r2,zero,800d068 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d034:	00820074 	movhi	r2,2049
 800d038:	10805f04 	addi	r2,r2,380
 800d03c:	e0ffff17 	ldw	r3,-4(fp)
 800d040:	18c00324 	muli	r3,r3,12
 800d044:	10c5883a 	add	r2,r2,r3
 800d048:	10800204 	addi	r2,r2,8
 800d04c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d050:	00820074 	movhi	r2,2049
 800d054:	10805f04 	addi	r2,r2,380
 800d058:	e0ffff17 	ldw	r3,-4(fp)
 800d05c:	18c00324 	muli	r3,r3,12
 800d060:	10c5883a 	add	r2,r2,r3
 800d064:	10000015 	stw	zero,0(r2)
  }
}
 800d068:	e037883a 	mov	sp,fp
 800d06c:	df000017 	ldw	fp,0(sp)
 800d070:	dec00104 	addi	sp,sp,4
 800d074:	f800283a 	ret

0800d078 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d078:	defff904 	addi	sp,sp,-28
 800d07c:	df000615 	stw	fp,24(sp)
 800d080:	df000604 	addi	fp,sp,24
 800d084:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d088:	0005303a 	rdctl	r2,status
 800d08c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d090:	e0fffc17 	ldw	r3,-16(fp)
 800d094:	00bfff84 	movi	r2,-2
 800d098:	1884703a 	and	r2,r3,r2
 800d09c:	1001703a 	wrctl	status,r2
  
  return context;
 800d0a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d0a4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d0a8:	d0a00c17 	ldw	r2,-32720(gp)
 800d0ac:	10c000c4 	addi	r3,r2,3
 800d0b0:	00bfff04 	movi	r2,-4
 800d0b4:	1884703a 	and	r2,r3,r2
 800d0b8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d0bc:	d0e00c17 	ldw	r3,-32720(gp)
 800d0c0:	e0bfff17 	ldw	r2,-4(fp)
 800d0c4:	1887883a 	add	r3,r3,r2
 800d0c8:	00830034 	movhi	r2,3072
 800d0cc:	10800004 	addi	r2,r2,0
 800d0d0:	10c0062e 	bgeu	r2,r3,800d0ec <sbrk+0x74>
 800d0d4:	e0bffa17 	ldw	r2,-24(fp)
 800d0d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d0dc:	e0bffd17 	ldw	r2,-12(fp)
 800d0e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d0e4:	00bfffc4 	movi	r2,-1
 800d0e8:	00000b06 	br	800d118 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800d0ec:	d0a00c17 	ldw	r2,-32720(gp)
 800d0f0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800d0f4:	d0e00c17 	ldw	r3,-32720(gp)
 800d0f8:	e0bfff17 	ldw	r2,-4(fp)
 800d0fc:	1885883a 	add	r2,r3,r2
 800d100:	d0a00c15 	stw	r2,-32720(gp)
 800d104:	e0bffa17 	ldw	r2,-24(fp)
 800d108:	e0bffe15 	stw	r2,-8(fp)
 800d10c:	e0bffe17 	ldw	r2,-8(fp)
 800d110:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d114:	e0bffb17 	ldw	r2,-20(fp)
} 
 800d118:	e037883a 	mov	sp,fp
 800d11c:	df000017 	ldw	fp,0(sp)
 800d120:	dec00104 	addi	sp,sp,4
 800d124:	f800283a 	ret

0800d128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d128:	defffe04 	addi	sp,sp,-8
 800d12c:	dfc00115 	stw	ra,4(sp)
 800d130:	df000015 	stw	fp,0(sp)
 800d134:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d138:	00820074 	movhi	r2,2049
 800d13c:	1084ed04 	addi	r2,r2,5044
 800d140:	10800017 	ldw	r2,0(r2)
 800d144:	10000526 	beq	r2,zero,800d15c <alt_get_errno+0x34>
 800d148:	00820074 	movhi	r2,2049
 800d14c:	1084ed04 	addi	r2,r2,5044
 800d150:	10800017 	ldw	r2,0(r2)
 800d154:	103ee83a 	callr	r2
 800d158:	00000206 	br	800d164 <alt_get_errno+0x3c>
 800d15c:	00820074 	movhi	r2,2049
 800d160:	108bbe04 	addi	r2,r2,12024
}
 800d164:	e037883a 	mov	sp,fp
 800d168:	dfc00117 	ldw	ra,4(sp)
 800d16c:	df000017 	ldw	fp,0(sp)
 800d170:	dec00204 	addi	sp,sp,8
 800d174:	f800283a 	ret

0800d178 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d178:	defff904 	addi	sp,sp,-28
 800d17c:	dfc00615 	stw	ra,24(sp)
 800d180:	df000515 	stw	fp,20(sp)
 800d184:	df000504 	addi	fp,sp,20
 800d188:	e13ffd15 	stw	r4,-12(fp)
 800d18c:	e17ffe15 	stw	r5,-8(fp)
 800d190:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d194:	e0bffd17 	ldw	r2,-12(fp)
 800d198:	10000616 	blt	r2,zero,800d1b4 <write+0x3c>
 800d19c:	e0bffd17 	ldw	r2,-12(fp)
 800d1a0:	10c00324 	muli	r3,r2,12
 800d1a4:	00820074 	movhi	r2,2049
 800d1a8:	10805f04 	addi	r2,r2,380
 800d1ac:	1885883a 	add	r2,r3,r2
 800d1b0:	00000106 	br	800d1b8 <write+0x40>
 800d1b4:	0005883a 	mov	r2,zero
 800d1b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d1bc:	e0bffb17 	ldw	r2,-20(fp)
 800d1c0:	10002126 	beq	r2,zero,800d248 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d1c4:	e0bffb17 	ldw	r2,-20(fp)
 800d1c8:	10800217 	ldw	r2,8(r2)
 800d1cc:	108000cc 	andi	r2,r2,3
 800d1d0:	10001826 	beq	r2,zero,800d234 <write+0xbc>
 800d1d4:	e0bffb17 	ldw	r2,-20(fp)
 800d1d8:	10800017 	ldw	r2,0(r2)
 800d1dc:	10800617 	ldw	r2,24(r2)
 800d1e0:	10001426 	beq	r2,zero,800d234 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d1e4:	e0bffb17 	ldw	r2,-20(fp)
 800d1e8:	10800017 	ldw	r2,0(r2)
 800d1ec:	10800617 	ldw	r2,24(r2)
 800d1f0:	e0ffff17 	ldw	r3,-4(fp)
 800d1f4:	e13ffb17 	ldw	r4,-20(fp)
 800d1f8:	e17ffe17 	ldw	r5,-8(fp)
 800d1fc:	180d883a 	mov	r6,r3
 800d200:	103ee83a 	callr	r2
 800d204:	e0bffc15 	stw	r2,-16(fp)
 800d208:	e0bffc17 	ldw	r2,-16(fp)
 800d20c:	1000070e 	bge	r2,zero,800d22c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800d210:	800d1280 	call	800d128 <alt_get_errno>
 800d214:	1007883a 	mov	r3,r2
 800d218:	e0bffc17 	ldw	r2,-16(fp)
 800d21c:	0085c83a 	sub	r2,zero,r2
 800d220:	18800015 	stw	r2,0(r3)
        return -1;
 800d224:	00bfffc4 	movi	r2,-1
 800d228:	00000c06 	br	800d25c <write+0xe4>
      }
      return rval;
 800d22c:	e0bffc17 	ldw	r2,-16(fp)
 800d230:	00000a06 	br	800d25c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d234:	800d1280 	call	800d128 <alt_get_errno>
 800d238:	1007883a 	mov	r3,r2
 800d23c:	00800344 	movi	r2,13
 800d240:	18800015 	stw	r2,0(r3)
 800d244:	00000406 	br	800d258 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d248:	800d1280 	call	800d128 <alt_get_errno>
 800d24c:	1007883a 	mov	r3,r2
 800d250:	00801444 	movi	r2,81
 800d254:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d258:	00bfffc4 	movi	r2,-1
}
 800d25c:	e037883a 	mov	sp,fp
 800d260:	dfc00117 	ldw	ra,4(sp)
 800d264:	df000017 	ldw	fp,0(sp)
 800d268:	dec00204 	addi	sp,sp,8
 800d26c:	f800283a 	ret

0800d270 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800d270:	defffd04 	addi	sp,sp,-12
 800d274:	dfc00215 	stw	ra,8(sp)
 800d278:	df000115 	stw	fp,4(sp)
 800d27c:	df000104 	addi	fp,sp,4
 800d280:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800d284:	e13fff17 	ldw	r4,-4(fp)
 800d288:	01420074 	movhi	r5,2049
 800d28c:	2944ea04 	addi	r5,r5,5032
 800d290:	800e5180 	call	800e518 <alt_dev_llist_insert>
}
 800d294:	e037883a 	mov	sp,fp
 800d298:	dfc00117 	ldw	ra,4(sp)
 800d29c:	df000017 	ldw	fp,0(sp)
 800d2a0:	dec00204 	addi	sp,sp,8
 800d2a4:	f800283a 	ret

0800d2a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d2a8:	defffd04 	addi	sp,sp,-12
 800d2ac:	dfc00215 	stw	ra,8(sp)
 800d2b0:	df000115 	stw	fp,4(sp)
 800d2b4:	df000104 	addi	fp,sp,4
 800d2b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800d2bc:	800ef4c0 	call	800ef4c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d2c0:	00800044 	movi	r2,1
 800d2c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d2c8:	e037883a 	mov	sp,fp
 800d2cc:	dfc00117 	ldw	ra,4(sp)
 800d2d0:	df000017 	ldw	fp,0(sp)
 800d2d4:	dec00204 	addi	sp,sp,8
 800d2d8:	f800283a 	ret

0800d2dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d2dc:	defffe04 	addi	sp,sp,-8
 800d2e0:	dfc00115 	stw	ra,4(sp)
 800d2e4:	df000015 	stw	fp,0(sp)
 800d2e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800d2ec:	01082004 	movi	r4,8320
 800d2f0:	000b883a 	mov	r5,zero
 800d2f4:	01800104 	movi	r6,4
 800d2f8:	01c0fa04 	movi	r7,1000
 800d2fc:	800de0c0 	call	800de0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d300:	01020074 	movhi	r4,2049
 800d304:	2100c904 	addi	r4,r4,804
 800d308:	000b883a 	mov	r5,zero
 800d30c:	01800144 	movi	r6,5
 800d310:	800d4b00 	call	800d4b0 <altera_avalon_jtag_uart_init>
 800d314:	01020074 	movhi	r4,2049
 800d318:	2100bf04 	addi	r4,r4,764
 800d31c:	800d2700 	call	800d270 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800d320:	01020074 	movhi	r4,2049
 800d324:	2104d704 	addi	r4,r4,4956
 800d328:	800df440 	call	800df44 <alt_up_character_lcd_init>
 800d32c:	01020074 	movhi	r4,2049
 800d330:	2104d704 	addi	r4,r4,4956
 800d334:	800d2700 	call	800d270 <alt_dev_reg>
}
 800d338:	e037883a 	mov	sp,fp
 800d33c:	dfc00117 	ldw	ra,4(sp)
 800d340:	df000017 	ldw	fp,0(sp)
 800d344:	dec00204 	addi	sp,sp,8
 800d348:	f800283a 	ret

0800d34c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d34c:	defffa04 	addi	sp,sp,-24
 800d350:	dfc00515 	stw	ra,20(sp)
 800d354:	df000415 	stw	fp,16(sp)
 800d358:	df000404 	addi	fp,sp,16
 800d35c:	e13ffd15 	stw	r4,-12(fp)
 800d360:	e17ffe15 	stw	r5,-8(fp)
 800d364:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d368:	e0bffd17 	ldw	r2,-12(fp)
 800d36c:	10800017 	ldw	r2,0(r2)
 800d370:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800d374:	e0bffc17 	ldw	r2,-16(fp)
 800d378:	10c00a04 	addi	r3,r2,40
 800d37c:	e0bffd17 	ldw	r2,-12(fp)
 800d380:	10800217 	ldw	r2,8(r2)
 800d384:	1809883a 	mov	r4,r3
 800d388:	e17ffe17 	ldw	r5,-8(fp)
 800d38c:	e1bfff17 	ldw	r6,-4(fp)
 800d390:	100f883a 	mov	r7,r2
 800d394:	800d9740 	call	800d974 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800d398:	e037883a 	mov	sp,fp
 800d39c:	dfc00117 	ldw	ra,4(sp)
 800d3a0:	df000017 	ldw	fp,0(sp)
 800d3a4:	dec00204 	addi	sp,sp,8
 800d3a8:	f800283a 	ret

0800d3ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800d3ac:	defffa04 	addi	sp,sp,-24
 800d3b0:	dfc00515 	stw	ra,20(sp)
 800d3b4:	df000415 	stw	fp,16(sp)
 800d3b8:	df000404 	addi	fp,sp,16
 800d3bc:	e13ffd15 	stw	r4,-12(fp)
 800d3c0:	e17ffe15 	stw	r5,-8(fp)
 800d3c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d3c8:	e0bffd17 	ldw	r2,-12(fp)
 800d3cc:	10800017 	ldw	r2,0(r2)
 800d3d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800d3d4:	e0bffc17 	ldw	r2,-16(fp)
 800d3d8:	10c00a04 	addi	r3,r2,40
 800d3dc:	e0bffd17 	ldw	r2,-12(fp)
 800d3e0:	10800217 	ldw	r2,8(r2)
 800d3e4:	1809883a 	mov	r4,r3
 800d3e8:	e17ffe17 	ldw	r5,-8(fp)
 800d3ec:	e1bfff17 	ldw	r6,-4(fp)
 800d3f0:	100f883a 	mov	r7,r2
 800d3f4:	800db800 	call	800db80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800d3f8:	e037883a 	mov	sp,fp
 800d3fc:	dfc00117 	ldw	ra,4(sp)
 800d400:	df000017 	ldw	fp,0(sp)
 800d404:	dec00204 	addi	sp,sp,8
 800d408:	f800283a 	ret

0800d40c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800d40c:	defffc04 	addi	sp,sp,-16
 800d410:	dfc00315 	stw	ra,12(sp)
 800d414:	df000215 	stw	fp,8(sp)
 800d418:	df000204 	addi	fp,sp,8
 800d41c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d420:	e0bfff17 	ldw	r2,-4(fp)
 800d424:	10800017 	ldw	r2,0(r2)
 800d428:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800d42c:	e0bffe17 	ldw	r2,-8(fp)
 800d430:	10c00a04 	addi	r3,r2,40
 800d434:	e0bfff17 	ldw	r2,-4(fp)
 800d438:	10800217 	ldw	r2,8(r2)
 800d43c:	1809883a 	mov	r4,r3
 800d440:	100b883a 	mov	r5,r2
 800d444:	800d8200 	call	800d820 <altera_avalon_jtag_uart_close>
}
 800d448:	e037883a 	mov	sp,fp
 800d44c:	dfc00117 	ldw	ra,4(sp)
 800d450:	df000017 	ldw	fp,0(sp)
 800d454:	dec00204 	addi	sp,sp,8
 800d458:	f800283a 	ret

0800d45c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800d45c:	defffa04 	addi	sp,sp,-24
 800d460:	dfc00515 	stw	ra,20(sp)
 800d464:	df000415 	stw	fp,16(sp)
 800d468:	df000404 	addi	fp,sp,16
 800d46c:	e13ffd15 	stw	r4,-12(fp)
 800d470:	e17ffe15 	stw	r5,-8(fp)
 800d474:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800d478:	e0bffd17 	ldw	r2,-12(fp)
 800d47c:	10800017 	ldw	r2,0(r2)
 800d480:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800d484:	e0bffc17 	ldw	r2,-16(fp)
 800d488:	10800a04 	addi	r2,r2,40
 800d48c:	1009883a 	mov	r4,r2
 800d490:	e17ffe17 	ldw	r5,-8(fp)
 800d494:	e1bfff17 	ldw	r6,-4(fp)
 800d498:	800d8880 	call	800d888 <altera_avalon_jtag_uart_ioctl>
}
 800d49c:	e037883a 	mov	sp,fp
 800d4a0:	dfc00117 	ldw	ra,4(sp)
 800d4a4:	df000017 	ldw	fp,0(sp)
 800d4a8:	dec00204 	addi	sp,sp,8
 800d4ac:	f800283a 	ret

0800d4b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800d4b0:	defffa04 	addi	sp,sp,-24
 800d4b4:	dfc00515 	stw	ra,20(sp)
 800d4b8:	df000415 	stw	fp,16(sp)
 800d4bc:	df000404 	addi	fp,sp,16
 800d4c0:	e13ffd15 	stw	r4,-12(fp)
 800d4c4:	e17ffe15 	stw	r5,-8(fp)
 800d4c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d4cc:	e0bffd17 	ldw	r2,-12(fp)
 800d4d0:	00c00044 	movi	r3,1
 800d4d4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800d4d8:	e0bffd17 	ldw	r2,-12(fp)
 800d4dc:	10800017 	ldw	r2,0(r2)
 800d4e0:	10800104 	addi	r2,r2,4
 800d4e4:	1007883a 	mov	r3,r2
 800d4e8:	e0bffd17 	ldw	r2,-12(fp)
 800d4ec:	10800817 	ldw	r2,32(r2)
 800d4f0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800d4f4:	e0fffe17 	ldw	r3,-8(fp)
 800d4f8:	e0bfff17 	ldw	r2,-4(fp)
 800d4fc:	d8000015 	stw	zero,0(sp)
 800d500:	1809883a 	mov	r4,r3
 800d504:	100b883a 	mov	r5,r2
 800d508:	01820074 	movhi	r6,2049
 800d50c:	31b55d04 	addi	r6,r6,-10892
 800d510:	e1fffd17 	ldw	r7,-12(fp)
 800d514:	800e7340 	call	800e734 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800d518:	e0bffd17 	ldw	r2,-12(fp)
 800d51c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800d520:	e0bffd17 	ldw	r2,-12(fp)
 800d524:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800d528:	00820074 	movhi	r2,2049
 800d52c:	108bc304 	addi	r2,r2,12044
 800d530:	10800017 	ldw	r2,0(r2)
 800d534:	1809883a 	mov	r4,r3
 800d538:	100b883a 	mov	r5,r2
 800d53c:	01820074 	movhi	r6,2049
 800d540:	31b5de04 	addi	r6,r6,-10376
 800d544:	e1fffd17 	ldw	r7,-12(fp)
 800d548:	800e36c0 	call	800e36c <alt_alarm_start>
 800d54c:	1000040e 	bge	r2,zero,800d560 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800d550:	e0fffd17 	ldw	r3,-12(fp)
 800d554:	00a00034 	movhi	r2,32768
 800d558:	10bfffc4 	addi	r2,r2,-1
 800d55c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800d560:	e037883a 	mov	sp,fp
 800d564:	dfc00117 	ldw	ra,4(sp)
 800d568:	df000017 	ldw	fp,0(sp)
 800d56c:	dec00204 	addi	sp,sp,8
 800d570:	f800283a 	ret

0800d574 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800d574:	defff804 	addi	sp,sp,-32
 800d578:	df000715 	stw	fp,28(sp)
 800d57c:	df000704 	addi	fp,sp,28
 800d580:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800d584:	e0bfff17 	ldw	r2,-4(fp)
 800d588:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800d58c:	e0bffb17 	ldw	r2,-20(fp)
 800d590:	10800017 	ldw	r2,0(r2)
 800d594:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d598:	e0bffc17 	ldw	r2,-16(fp)
 800d59c:	10800104 	addi	r2,r2,4
 800d5a0:	10800037 	ldwio	r2,0(r2)
 800d5a4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800d5a8:	e0bffd17 	ldw	r2,-12(fp)
 800d5ac:	1080c00c 	andi	r2,r2,768
 800d5b0:	1000011e 	bne	r2,zero,800d5b8 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800d5b4:	00006c06 	br	800d768 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800d5b8:	e0bffd17 	ldw	r2,-12(fp)
 800d5bc:	1080400c 	andi	r2,r2,256
 800d5c0:	10003426 	beq	r2,zero,800d694 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800d5c4:	00800074 	movhi	r2,1
 800d5c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d5cc:	e0bffb17 	ldw	r2,-20(fp)
 800d5d0:	10800a17 	ldw	r2,40(r2)
 800d5d4:	10800044 	addi	r2,r2,1
 800d5d8:	1081ffcc 	andi	r2,r2,2047
 800d5dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800d5e0:	e0bffb17 	ldw	r2,-20(fp)
 800d5e4:	10c00b17 	ldw	r3,44(r2)
 800d5e8:	e0bffe17 	ldw	r2,-8(fp)
 800d5ec:	1880011e 	bne	r3,r2,800d5f4 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800d5f0:	00001606 	br	800d64c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800d5f4:	e0bffc17 	ldw	r2,-16(fp)
 800d5f8:	10800037 	ldwio	r2,0(r2)
 800d5fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800d600:	e0bff917 	ldw	r2,-28(fp)
 800d604:	10a0000c 	andi	r2,r2,32768
 800d608:	1000011e 	bne	r2,zero,800d610 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800d60c:	00000f06 	br	800d64c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800d610:	e0bffb17 	ldw	r2,-20(fp)
 800d614:	10800a17 	ldw	r2,40(r2)
 800d618:	e0fff917 	ldw	r3,-28(fp)
 800d61c:	1809883a 	mov	r4,r3
 800d620:	e0fffb17 	ldw	r3,-20(fp)
 800d624:	1885883a 	add	r2,r3,r2
 800d628:	10800e04 	addi	r2,r2,56
 800d62c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d630:	e0bffb17 	ldw	r2,-20(fp)
 800d634:	10800a17 	ldw	r2,40(r2)
 800d638:	10800044 	addi	r2,r2,1
 800d63c:	10c1ffcc 	andi	r3,r2,2047
 800d640:	e0bffb17 	ldw	r2,-20(fp)
 800d644:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800d648:	003fe006 	br	800d5cc <__alt_data_end+0xfc00d5cc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800d64c:	e0bff917 	ldw	r2,-28(fp)
 800d650:	10bfffec 	andhi	r2,r2,65535
 800d654:	10000f26 	beq	r2,zero,800d694 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d658:	e0bffb17 	ldw	r2,-20(fp)
 800d65c:	10c00817 	ldw	r3,32(r2)
 800d660:	00bfff84 	movi	r2,-2
 800d664:	1886703a 	and	r3,r3,r2
 800d668:	e0bffb17 	ldw	r2,-20(fp)
 800d66c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800d670:	e0bffc17 	ldw	r2,-16(fp)
 800d674:	10800104 	addi	r2,r2,4
 800d678:	1007883a 	mov	r3,r2
 800d67c:	e0bffb17 	ldw	r2,-20(fp)
 800d680:	10800817 	ldw	r2,32(r2)
 800d684:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d688:	e0bffc17 	ldw	r2,-16(fp)
 800d68c:	10800104 	addi	r2,r2,4
 800d690:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800d694:	e0bffd17 	ldw	r2,-12(fp)
 800d698:	1080800c 	andi	r2,r2,512
 800d69c:	10003126 	beq	r2,zero,800d764 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800d6a0:	e0bffd17 	ldw	r2,-12(fp)
 800d6a4:	1004d43a 	srli	r2,r2,16
 800d6a8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d6ac:	00001406 	br	800d700 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800d6b0:	e0bffc17 	ldw	r2,-16(fp)
 800d6b4:	e0fffb17 	ldw	r3,-20(fp)
 800d6b8:	18c00d17 	ldw	r3,52(r3)
 800d6bc:	e13ffb17 	ldw	r4,-20(fp)
 800d6c0:	20c7883a 	add	r3,r4,r3
 800d6c4:	18c20e04 	addi	r3,r3,2104
 800d6c8:	18c00003 	ldbu	r3,0(r3)
 800d6cc:	18c03fcc 	andi	r3,r3,255
 800d6d0:	18c0201c 	xori	r3,r3,128
 800d6d4:	18ffe004 	addi	r3,r3,-128
 800d6d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d6dc:	e0bffb17 	ldw	r2,-20(fp)
 800d6e0:	10800d17 	ldw	r2,52(r2)
 800d6e4:	10800044 	addi	r2,r2,1
 800d6e8:	10c1ffcc 	andi	r3,r2,2047
 800d6ec:	e0bffb17 	ldw	r2,-20(fp)
 800d6f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800d6f4:	e0bffa17 	ldw	r2,-24(fp)
 800d6f8:	10bfffc4 	addi	r2,r2,-1
 800d6fc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d700:	e0bffa17 	ldw	r2,-24(fp)
 800d704:	10000526 	beq	r2,zero,800d71c <altera_avalon_jtag_uart_irq+0x1a8>
 800d708:	e0bffb17 	ldw	r2,-20(fp)
 800d70c:	10c00d17 	ldw	r3,52(r2)
 800d710:	e0bffb17 	ldw	r2,-20(fp)
 800d714:	10800c17 	ldw	r2,48(r2)
 800d718:	18bfe51e 	bne	r3,r2,800d6b0 <__alt_data_end+0xfc00d6b0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800d71c:	e0bffa17 	ldw	r2,-24(fp)
 800d720:	10001026 	beq	r2,zero,800d764 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800d724:	e0bffb17 	ldw	r2,-20(fp)
 800d728:	10c00817 	ldw	r3,32(r2)
 800d72c:	00bfff44 	movi	r2,-3
 800d730:	1886703a 	and	r3,r3,r2
 800d734:	e0bffb17 	ldw	r2,-20(fp)
 800d738:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d73c:	e0bffb17 	ldw	r2,-20(fp)
 800d740:	10800017 	ldw	r2,0(r2)
 800d744:	10800104 	addi	r2,r2,4
 800d748:	1007883a 	mov	r3,r2
 800d74c:	e0bffb17 	ldw	r2,-20(fp)
 800d750:	10800817 	ldw	r2,32(r2)
 800d754:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d758:	e0bffc17 	ldw	r2,-16(fp)
 800d75c:	10800104 	addi	r2,r2,4
 800d760:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800d764:	003f8c06 	br	800d598 <__alt_data_end+0xfc00d598>
}
 800d768:	e037883a 	mov	sp,fp
 800d76c:	df000017 	ldw	fp,0(sp)
 800d770:	dec00104 	addi	sp,sp,4
 800d774:	f800283a 	ret

0800d778 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800d778:	defff804 	addi	sp,sp,-32
 800d77c:	df000715 	stw	fp,28(sp)
 800d780:	df000704 	addi	fp,sp,28
 800d784:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800d788:	e0bffb17 	ldw	r2,-20(fp)
 800d78c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800d790:	e0bff917 	ldw	r2,-28(fp)
 800d794:	10800017 	ldw	r2,0(r2)
 800d798:	10800104 	addi	r2,r2,4
 800d79c:	10800037 	ldwio	r2,0(r2)
 800d7a0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800d7a4:	e0bffa17 	ldw	r2,-24(fp)
 800d7a8:	1081000c 	andi	r2,r2,1024
 800d7ac:	10000b26 	beq	r2,zero,800d7dc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800d7b0:	e0bff917 	ldw	r2,-28(fp)
 800d7b4:	10800017 	ldw	r2,0(r2)
 800d7b8:	10800104 	addi	r2,r2,4
 800d7bc:	1007883a 	mov	r3,r2
 800d7c0:	e0bff917 	ldw	r2,-28(fp)
 800d7c4:	10800817 	ldw	r2,32(r2)
 800d7c8:	10810014 	ori	r2,r2,1024
 800d7cc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800d7d0:	e0bff917 	ldw	r2,-28(fp)
 800d7d4:	10000915 	stw	zero,36(r2)
 800d7d8:	00000a06 	br	800d804 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800d7dc:	e0bff917 	ldw	r2,-28(fp)
 800d7e0:	10c00917 	ldw	r3,36(r2)
 800d7e4:	00a00034 	movhi	r2,32768
 800d7e8:	10bfff04 	addi	r2,r2,-4
 800d7ec:	10c00536 	bltu	r2,r3,800d804 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800d7f0:	e0bff917 	ldw	r2,-28(fp)
 800d7f4:	10800917 	ldw	r2,36(r2)
 800d7f8:	10c00044 	addi	r3,r2,1
 800d7fc:	e0bff917 	ldw	r2,-28(fp)
 800d800:	10c00915 	stw	r3,36(r2)
 800d804:	00820074 	movhi	r2,2049
 800d808:	108bc304 	addi	r2,r2,12044
 800d80c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800d810:	e037883a 	mov	sp,fp
 800d814:	df000017 	ldw	fp,0(sp)
 800d818:	dec00104 	addi	sp,sp,4
 800d81c:	f800283a 	ret

0800d820 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800d820:	defffd04 	addi	sp,sp,-12
 800d824:	df000215 	stw	fp,8(sp)
 800d828:	df000204 	addi	fp,sp,8
 800d82c:	e13ffe15 	stw	r4,-8(fp)
 800d830:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800d834:	00000506 	br	800d84c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800d838:	e0bfff17 	ldw	r2,-4(fp)
 800d83c:	1090000c 	andi	r2,r2,16384
 800d840:	10000226 	beq	r2,zero,800d84c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800d844:	00bffd44 	movi	r2,-11
 800d848:	00000b06 	br	800d878 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800d84c:	e0bffe17 	ldw	r2,-8(fp)
 800d850:	10c00d17 	ldw	r3,52(r2)
 800d854:	e0bffe17 	ldw	r2,-8(fp)
 800d858:	10800c17 	ldw	r2,48(r2)
 800d85c:	18800526 	beq	r3,r2,800d874 <altera_avalon_jtag_uart_close+0x54>
 800d860:	e0bffe17 	ldw	r2,-8(fp)
 800d864:	10c00917 	ldw	r3,36(r2)
 800d868:	e0bffe17 	ldw	r2,-8(fp)
 800d86c:	10800117 	ldw	r2,4(r2)
 800d870:	18bff136 	bltu	r3,r2,800d838 <__alt_data_end+0xfc00d838>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800d874:	0005883a 	mov	r2,zero
}
 800d878:	e037883a 	mov	sp,fp
 800d87c:	df000017 	ldw	fp,0(sp)
 800d880:	dec00104 	addi	sp,sp,4
 800d884:	f800283a 	ret

0800d888 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800d888:	defffa04 	addi	sp,sp,-24
 800d88c:	df000515 	stw	fp,20(sp)
 800d890:	df000504 	addi	fp,sp,20
 800d894:	e13ffd15 	stw	r4,-12(fp)
 800d898:	e17ffe15 	stw	r5,-8(fp)
 800d89c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800d8a0:	00bff9c4 	movi	r2,-25
 800d8a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800d8a8:	e0bffe17 	ldw	r2,-8(fp)
 800d8ac:	10da8060 	cmpeqi	r3,r2,27137
 800d8b0:	1800031e 	bne	r3,zero,800d8c0 <altera_avalon_jtag_uart_ioctl+0x38>
 800d8b4:	109a80a0 	cmpeqi	r2,r2,27138
 800d8b8:	1000191e 	bne	r2,zero,800d920 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800d8bc:	00002806 	br	800d960 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800d8c0:	e0bffd17 	ldw	r2,-12(fp)
 800d8c4:	10c00117 	ldw	r3,4(r2)
 800d8c8:	00a00034 	movhi	r2,32768
 800d8cc:	10bfffc4 	addi	r2,r2,-1
 800d8d0:	18801226 	beq	r3,r2,800d91c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800d8d4:	e0bfff17 	ldw	r2,-4(fp)
 800d8d8:	10800017 	ldw	r2,0(r2)
 800d8dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800d8e0:	e0bffc17 	ldw	r2,-16(fp)
 800d8e4:	10800090 	cmplti	r2,r2,2
 800d8e8:	1000061e 	bne	r2,zero,800d904 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d8ec:	e0fffc17 	ldw	r3,-16(fp)
 800d8f0:	00a00034 	movhi	r2,32768
 800d8f4:	10bfffc4 	addi	r2,r2,-1
 800d8f8:	18800226 	beq	r3,r2,800d904 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d8fc:	e0bffc17 	ldw	r2,-16(fp)
 800d900:	00000206 	br	800d90c <altera_avalon_jtag_uart_ioctl+0x84>
 800d904:	00a00034 	movhi	r2,32768
 800d908:	10bfff84 	addi	r2,r2,-2
 800d90c:	e0fffd17 	ldw	r3,-12(fp)
 800d910:	18800115 	stw	r2,4(r3)
      rc = 0;
 800d914:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d918:	00001106 	br	800d960 <altera_avalon_jtag_uart_ioctl+0xd8>
 800d91c:	00001006 	br	800d960 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800d920:	e0bffd17 	ldw	r2,-12(fp)
 800d924:	10c00117 	ldw	r3,4(r2)
 800d928:	00a00034 	movhi	r2,32768
 800d92c:	10bfffc4 	addi	r2,r2,-1
 800d930:	18800a26 	beq	r3,r2,800d95c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800d934:	e0bffd17 	ldw	r2,-12(fp)
 800d938:	10c00917 	ldw	r3,36(r2)
 800d93c:	e0bffd17 	ldw	r2,-12(fp)
 800d940:	10800117 	ldw	r2,4(r2)
 800d944:	1885803a 	cmpltu	r2,r3,r2
 800d948:	10c03fcc 	andi	r3,r2,255
 800d94c:	e0bfff17 	ldw	r2,-4(fp)
 800d950:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800d954:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d958:	00000006 	br	800d95c <altera_avalon_jtag_uart_ioctl+0xd4>
 800d95c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800d960:	e0bffb17 	ldw	r2,-20(fp)
}
 800d964:	e037883a 	mov	sp,fp
 800d968:	df000017 	ldw	fp,0(sp)
 800d96c:	dec00104 	addi	sp,sp,4
 800d970:	f800283a 	ret

0800d974 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800d974:	defff304 	addi	sp,sp,-52
 800d978:	dfc00c15 	stw	ra,48(sp)
 800d97c:	df000b15 	stw	fp,44(sp)
 800d980:	df000b04 	addi	fp,sp,44
 800d984:	e13ffc15 	stw	r4,-16(fp)
 800d988:	e17ffd15 	stw	r5,-12(fp)
 800d98c:	e1bffe15 	stw	r6,-8(fp)
 800d990:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800d994:	e0bffd17 	ldw	r2,-12(fp)
 800d998:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d99c:	00004906 	br	800dac4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800d9a0:	e0bffc17 	ldw	r2,-16(fp)
 800d9a4:	10800a17 	ldw	r2,40(r2)
 800d9a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800d9ac:	e0bffc17 	ldw	r2,-16(fp)
 800d9b0:	10800b17 	ldw	r2,44(r2)
 800d9b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800d9b8:	e0fff717 	ldw	r3,-36(fp)
 800d9bc:	e0bff817 	ldw	r2,-32(fp)
 800d9c0:	18800536 	bltu	r3,r2,800d9d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800d9c4:	e0fff717 	ldw	r3,-36(fp)
 800d9c8:	e0bff817 	ldw	r2,-32(fp)
 800d9cc:	1885c83a 	sub	r2,r3,r2
 800d9d0:	e0bff615 	stw	r2,-40(fp)
 800d9d4:	00000406 	br	800d9e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800d9d8:	00c20004 	movi	r3,2048
 800d9dc:	e0bff817 	ldw	r2,-32(fp)
 800d9e0:	1885c83a 	sub	r2,r3,r2
 800d9e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800d9e8:	e0bff617 	ldw	r2,-40(fp)
 800d9ec:	1000011e 	bne	r2,zero,800d9f4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800d9f0:	00001d06 	br	800da68 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800d9f4:	e0fffe17 	ldw	r3,-8(fp)
 800d9f8:	e0bff617 	ldw	r2,-40(fp)
 800d9fc:	1880022e 	bgeu	r3,r2,800da08 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800da00:	e0bffe17 	ldw	r2,-8(fp)
 800da04:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800da08:	e0bff817 	ldw	r2,-32(fp)
 800da0c:	10800e04 	addi	r2,r2,56
 800da10:	e0fffc17 	ldw	r3,-16(fp)
 800da14:	1885883a 	add	r2,r3,r2
 800da18:	e13ff517 	ldw	r4,-44(fp)
 800da1c:	100b883a 	mov	r5,r2
 800da20:	e1bff617 	ldw	r6,-40(fp)
 800da24:	80057bc0 	call	80057bc <memcpy>
      ptr   += n;
 800da28:	e0fff517 	ldw	r3,-44(fp)
 800da2c:	e0bff617 	ldw	r2,-40(fp)
 800da30:	1885883a 	add	r2,r3,r2
 800da34:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800da38:	e0fffe17 	ldw	r3,-8(fp)
 800da3c:	e0bff617 	ldw	r2,-40(fp)
 800da40:	1885c83a 	sub	r2,r3,r2
 800da44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800da48:	e0fff817 	ldw	r3,-32(fp)
 800da4c:	e0bff617 	ldw	r2,-40(fp)
 800da50:	1885883a 	add	r2,r3,r2
 800da54:	10c1ffcc 	andi	r3,r2,2047
 800da58:	e0bffc17 	ldw	r2,-16(fp)
 800da5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800da60:	e0bffe17 	ldw	r2,-8(fp)
 800da64:	00bfce16 	blt	zero,r2,800d9a0 <__alt_data_end+0xfc00d9a0>

    /* If we read any data then return it */
    if (ptr != buffer)
 800da68:	e0fff517 	ldw	r3,-44(fp)
 800da6c:	e0bffd17 	ldw	r2,-12(fp)
 800da70:	18800126 	beq	r3,r2,800da78 <altera_avalon_jtag_uart_read+0x104>
      break;
 800da74:	00001506 	br	800dacc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800da78:	e0bfff17 	ldw	r2,-4(fp)
 800da7c:	1090000c 	andi	r2,r2,16384
 800da80:	10000126 	beq	r2,zero,800da88 <altera_avalon_jtag_uart_read+0x114>
      break;
 800da84:	00001106 	br	800dacc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800da88:	0001883a 	nop
 800da8c:	e0bffc17 	ldw	r2,-16(fp)
 800da90:	10c00a17 	ldw	r3,40(r2)
 800da94:	e0bff717 	ldw	r2,-36(fp)
 800da98:	1880051e 	bne	r3,r2,800dab0 <altera_avalon_jtag_uart_read+0x13c>
 800da9c:	e0bffc17 	ldw	r2,-16(fp)
 800daa0:	10c00917 	ldw	r3,36(r2)
 800daa4:	e0bffc17 	ldw	r2,-16(fp)
 800daa8:	10800117 	ldw	r2,4(r2)
 800daac:	18bff736 	bltu	r3,r2,800da8c <__alt_data_end+0xfc00da8c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800dab0:	e0bffc17 	ldw	r2,-16(fp)
 800dab4:	10c00a17 	ldw	r3,40(r2)
 800dab8:	e0bff717 	ldw	r2,-36(fp)
 800dabc:	1880011e 	bne	r3,r2,800dac4 <altera_avalon_jtag_uart_read+0x150>
      break;
 800dac0:	00000206 	br	800dacc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800dac4:	e0bffe17 	ldw	r2,-8(fp)
 800dac8:	00bfb516 	blt	zero,r2,800d9a0 <__alt_data_end+0xfc00d9a0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800dacc:	e0fff517 	ldw	r3,-44(fp)
 800dad0:	e0bffd17 	ldw	r2,-12(fp)
 800dad4:	18801826 	beq	r3,r2,800db38 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dad8:	0005303a 	rdctl	r2,status
 800dadc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dae0:	e0fffa17 	ldw	r3,-24(fp)
 800dae4:	00bfff84 	movi	r2,-2
 800dae8:	1884703a 	and	r2,r3,r2
 800daec:	1001703a 	wrctl	status,r2
  
  return context;
 800daf0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800daf4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800daf8:	e0bffc17 	ldw	r2,-16(fp)
 800dafc:	10800817 	ldw	r2,32(r2)
 800db00:	10c00054 	ori	r3,r2,1
 800db04:	e0bffc17 	ldw	r2,-16(fp)
 800db08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800db0c:	e0bffc17 	ldw	r2,-16(fp)
 800db10:	10800017 	ldw	r2,0(r2)
 800db14:	10800104 	addi	r2,r2,4
 800db18:	1007883a 	mov	r3,r2
 800db1c:	e0bffc17 	ldw	r2,-16(fp)
 800db20:	10800817 	ldw	r2,32(r2)
 800db24:	18800035 	stwio	r2,0(r3)
 800db28:	e0bff917 	ldw	r2,-28(fp)
 800db2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800db30:	e0bffb17 	ldw	r2,-20(fp)
 800db34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800db38:	e0fff517 	ldw	r3,-44(fp)
 800db3c:	e0bffd17 	ldw	r2,-12(fp)
 800db40:	18800426 	beq	r3,r2,800db54 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800db44:	e0fff517 	ldw	r3,-44(fp)
 800db48:	e0bffd17 	ldw	r2,-12(fp)
 800db4c:	1885c83a 	sub	r2,r3,r2
 800db50:	00000606 	br	800db6c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800db54:	e0bfff17 	ldw	r2,-4(fp)
 800db58:	1090000c 	andi	r2,r2,16384
 800db5c:	10000226 	beq	r2,zero,800db68 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800db60:	00bffd44 	movi	r2,-11
 800db64:	00000106 	br	800db6c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800db68:	00bffec4 	movi	r2,-5
}
 800db6c:	e037883a 	mov	sp,fp
 800db70:	dfc00117 	ldw	ra,4(sp)
 800db74:	df000017 	ldw	fp,0(sp)
 800db78:	dec00204 	addi	sp,sp,8
 800db7c:	f800283a 	ret

0800db80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800db80:	defff304 	addi	sp,sp,-52
 800db84:	dfc00c15 	stw	ra,48(sp)
 800db88:	df000b15 	stw	fp,44(sp)
 800db8c:	df000b04 	addi	fp,sp,44
 800db90:	e13ffc15 	stw	r4,-16(fp)
 800db94:	e17ffd15 	stw	r5,-12(fp)
 800db98:	e1bffe15 	stw	r6,-8(fp)
 800db9c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800dba0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800dba4:	e0bffd17 	ldw	r2,-12(fp)
 800dba8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800dbac:	00003806 	br	800dc90 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800dbb0:	e0bffc17 	ldw	r2,-16(fp)
 800dbb4:	10800c17 	ldw	r2,48(r2)
 800dbb8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800dbbc:	e0bffc17 	ldw	r2,-16(fp)
 800dbc0:	10800d17 	ldw	r2,52(r2)
 800dbc4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800dbc8:	e0fff817 	ldw	r3,-32(fp)
 800dbcc:	e0bff517 	ldw	r2,-44(fp)
 800dbd0:	1880062e 	bgeu	r3,r2,800dbec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800dbd4:	e0fff517 	ldw	r3,-44(fp)
 800dbd8:	e0bff817 	ldw	r2,-32(fp)
 800dbdc:	1885c83a 	sub	r2,r3,r2
 800dbe0:	10bfffc4 	addi	r2,r2,-1
 800dbe4:	e0bff615 	stw	r2,-40(fp)
 800dbe8:	00000b06 	br	800dc18 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800dbec:	e0bff517 	ldw	r2,-44(fp)
 800dbf0:	10000526 	beq	r2,zero,800dc08 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800dbf4:	00c20004 	movi	r3,2048
 800dbf8:	e0bff817 	ldw	r2,-32(fp)
 800dbfc:	1885c83a 	sub	r2,r3,r2
 800dc00:	e0bff615 	stw	r2,-40(fp)
 800dc04:	00000406 	br	800dc18 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800dc08:	00c1ffc4 	movi	r3,2047
 800dc0c:	e0bff817 	ldw	r2,-32(fp)
 800dc10:	1885c83a 	sub	r2,r3,r2
 800dc14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800dc18:	e0bff617 	ldw	r2,-40(fp)
 800dc1c:	1000011e 	bne	r2,zero,800dc24 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800dc20:	00001d06 	br	800dc98 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800dc24:	e0fffe17 	ldw	r3,-8(fp)
 800dc28:	e0bff617 	ldw	r2,-40(fp)
 800dc2c:	1880022e 	bgeu	r3,r2,800dc38 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800dc30:	e0bffe17 	ldw	r2,-8(fp)
 800dc34:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800dc38:	e0bff817 	ldw	r2,-32(fp)
 800dc3c:	10820e04 	addi	r2,r2,2104
 800dc40:	e0fffc17 	ldw	r3,-16(fp)
 800dc44:	1885883a 	add	r2,r3,r2
 800dc48:	1009883a 	mov	r4,r2
 800dc4c:	e17ffd17 	ldw	r5,-12(fp)
 800dc50:	e1bff617 	ldw	r6,-40(fp)
 800dc54:	80057bc0 	call	80057bc <memcpy>
      ptr   += n;
 800dc58:	e0fffd17 	ldw	r3,-12(fp)
 800dc5c:	e0bff617 	ldw	r2,-40(fp)
 800dc60:	1885883a 	add	r2,r3,r2
 800dc64:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800dc68:	e0fffe17 	ldw	r3,-8(fp)
 800dc6c:	e0bff617 	ldw	r2,-40(fp)
 800dc70:	1885c83a 	sub	r2,r3,r2
 800dc74:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dc78:	e0fff817 	ldw	r3,-32(fp)
 800dc7c:	e0bff617 	ldw	r2,-40(fp)
 800dc80:	1885883a 	add	r2,r3,r2
 800dc84:	10c1ffcc 	andi	r3,r2,2047
 800dc88:	e0bffc17 	ldw	r2,-16(fp)
 800dc8c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800dc90:	e0bffe17 	ldw	r2,-8(fp)
 800dc94:	00bfc616 	blt	zero,r2,800dbb0 <__alt_data_end+0xfc00dbb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dc98:	0005303a 	rdctl	r2,status
 800dc9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dca0:	e0fffa17 	ldw	r3,-24(fp)
 800dca4:	00bfff84 	movi	r2,-2
 800dca8:	1884703a 	and	r2,r3,r2
 800dcac:	1001703a 	wrctl	status,r2
  
  return context;
 800dcb0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800dcb4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800dcb8:	e0bffc17 	ldw	r2,-16(fp)
 800dcbc:	10800817 	ldw	r2,32(r2)
 800dcc0:	10c00094 	ori	r3,r2,2
 800dcc4:	e0bffc17 	ldw	r2,-16(fp)
 800dcc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800dccc:	e0bffc17 	ldw	r2,-16(fp)
 800dcd0:	10800017 	ldw	r2,0(r2)
 800dcd4:	10800104 	addi	r2,r2,4
 800dcd8:	1007883a 	mov	r3,r2
 800dcdc:	e0bffc17 	ldw	r2,-16(fp)
 800dce0:	10800817 	ldw	r2,32(r2)
 800dce4:	18800035 	stwio	r2,0(r3)
 800dce8:	e0bff917 	ldw	r2,-28(fp)
 800dcec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dcf0:	e0bffb17 	ldw	r2,-20(fp)
 800dcf4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800dcf8:	e0bffe17 	ldw	r2,-8(fp)
 800dcfc:	0080120e 	bge	zero,r2,800dd48 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800dd00:	e0bfff17 	ldw	r2,-4(fp)
 800dd04:	1090000c 	andi	r2,r2,16384
 800dd08:	10000126 	beq	r2,zero,800dd10 <altera_avalon_jtag_uart_write+0x190>
        break;
 800dd0c:	00001006 	br	800dd50 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800dd10:	0001883a 	nop
 800dd14:	e0bffc17 	ldw	r2,-16(fp)
 800dd18:	10c00d17 	ldw	r3,52(r2)
 800dd1c:	e0bff517 	ldw	r2,-44(fp)
 800dd20:	1880051e 	bne	r3,r2,800dd38 <altera_avalon_jtag_uart_write+0x1b8>
 800dd24:	e0bffc17 	ldw	r2,-16(fp)
 800dd28:	10c00917 	ldw	r3,36(r2)
 800dd2c:	e0bffc17 	ldw	r2,-16(fp)
 800dd30:	10800117 	ldw	r2,4(r2)
 800dd34:	18bff736 	bltu	r3,r2,800dd14 <__alt_data_end+0xfc00dd14>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800dd38:	e0bffc17 	ldw	r2,-16(fp)
 800dd3c:	10800917 	ldw	r2,36(r2)
 800dd40:	10000126 	beq	r2,zero,800dd48 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800dd44:	00000206 	br	800dd50 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800dd48:	e0bffe17 	ldw	r2,-8(fp)
 800dd4c:	00bf9716 	blt	zero,r2,800dbac <__alt_data_end+0xfc00dbac>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800dd50:	e0fffd17 	ldw	r3,-12(fp)
 800dd54:	e0bff717 	ldw	r2,-36(fp)
 800dd58:	18800426 	beq	r3,r2,800dd6c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800dd5c:	e0fffd17 	ldw	r3,-12(fp)
 800dd60:	e0bff717 	ldw	r2,-36(fp)
 800dd64:	1885c83a 	sub	r2,r3,r2
 800dd68:	00000606 	br	800dd84 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800dd6c:	e0bfff17 	ldw	r2,-4(fp)
 800dd70:	1090000c 	andi	r2,r2,16384
 800dd74:	10000226 	beq	r2,zero,800dd80 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800dd78:	00bffd44 	movi	r2,-11
 800dd7c:	00000106 	br	800dd84 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800dd80:	00bffec4 	movi	r2,-5
}
 800dd84:	e037883a 	mov	sp,fp
 800dd88:	dfc00117 	ldw	ra,4(sp)
 800dd8c:	df000017 	ldw	fp,0(sp)
 800dd90:	dec00204 	addi	sp,sp,8
 800dd94:	f800283a 	ret

0800dd98 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800dd98:	defffa04 	addi	sp,sp,-24
 800dd9c:	dfc00515 	stw	ra,20(sp)
 800dda0:	df000415 	stw	fp,16(sp)
 800dda4:	df000404 	addi	fp,sp,16
 800dda8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800ddac:	0007883a 	mov	r3,zero
 800ddb0:	e0bfff17 	ldw	r2,-4(fp)
 800ddb4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800ddb8:	e0bfff17 	ldw	r2,-4(fp)
 800ddbc:	10800104 	addi	r2,r2,4
 800ddc0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ddc4:	0005303a 	rdctl	r2,status
 800ddc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ddcc:	e0fffd17 	ldw	r3,-12(fp)
 800ddd0:	00bfff84 	movi	r2,-2
 800ddd4:	1884703a 	and	r2,r3,r2
 800ddd8:	1001703a 	wrctl	status,r2
  
  return context;
 800dddc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800dde0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800dde4:	800ee480 	call	800ee48 <alt_tick>
 800dde8:	e0bffc17 	ldw	r2,-16(fp)
 800ddec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ddf0:	e0bffe17 	ldw	r2,-8(fp)
 800ddf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800ddf8:	e037883a 	mov	sp,fp
 800ddfc:	dfc00117 	ldw	ra,4(sp)
 800de00:	df000017 	ldw	fp,0(sp)
 800de04:	dec00204 	addi	sp,sp,8
 800de08:	f800283a 	ret

0800de0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800de0c:	defff804 	addi	sp,sp,-32
 800de10:	dfc00715 	stw	ra,28(sp)
 800de14:	df000615 	stw	fp,24(sp)
 800de18:	df000604 	addi	fp,sp,24
 800de1c:	e13ffc15 	stw	r4,-16(fp)
 800de20:	e17ffd15 	stw	r5,-12(fp)
 800de24:	e1bffe15 	stw	r6,-8(fp)
 800de28:	e1ffff15 	stw	r7,-4(fp)
 800de2c:	e0bfff17 	ldw	r2,-4(fp)
 800de30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800de34:	00820074 	movhi	r2,2049
 800de38:	108bc304 	addi	r2,r2,12044
 800de3c:	10800017 	ldw	r2,0(r2)
 800de40:	1000041e 	bne	r2,zero,800de54 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800de44:	00820074 	movhi	r2,2049
 800de48:	108bc304 	addi	r2,r2,12044
 800de4c:	e0fffb17 	ldw	r3,-20(fp)
 800de50:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800de54:	e0bffc17 	ldw	r2,-16(fp)
 800de58:	10800104 	addi	r2,r2,4
 800de5c:	00c001c4 	movi	r3,7
 800de60:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800de64:	d8000015 	stw	zero,0(sp)
 800de68:	e13ffd17 	ldw	r4,-12(fp)
 800de6c:	e17ffe17 	ldw	r5,-8(fp)
 800de70:	01820074 	movhi	r6,2049
 800de74:	31b76604 	addi	r6,r6,-8808
 800de78:	e1fffc17 	ldw	r7,-16(fp)
 800de7c:	800e7340 	call	800e734 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800de80:	e037883a 	mov	sp,fp
 800de84:	dfc00117 	ldw	ra,4(sp)
 800de88:	df000017 	ldw	fp,0(sp)
 800de8c:	dec00204 	addi	sp,sp,8
 800de90:	f800283a 	ret

0800de94 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800de94:	defffc04 	addi	sp,sp,-16
 800de98:	df000315 	stw	fp,12(sp)
 800de9c:	df000304 	addi	fp,sp,12
 800dea0:	e13ffe15 	stw	r4,-8(fp)
 800dea4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800dea8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800deac:	e0bfff17 	ldw	r2,-4(fp)
 800deb0:	1000061e 	bne	r2,zero,800decc <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800deb4:	e0bffe17 	ldw	r2,-8(fp)
 800deb8:	1007883a 	mov	r3,r2
 800debc:	e0bffd03 	ldbu	r2,-12(fp)
 800dec0:	1884b03a 	or	r2,r3,r2
 800dec4:	e0bffd05 	stb	r2,-12(fp)
 800dec8:	00000806 	br	800deec <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800decc:	e0bffe17 	ldw	r2,-8(fp)
 800ded0:	1007883a 	mov	r3,r2
 800ded4:	e0bffd03 	ldbu	r2,-12(fp)
 800ded8:	1884b03a 	or	r2,r3,r2
 800dedc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800dee0:	e0bffd03 	ldbu	r2,-12(fp)
 800dee4:	10801014 	ori	r2,r2,64
 800dee8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800deec:	e0fffd03 	ldbu	r3,-12(fp)
 800def0:	00bfe004 	movi	r2,-128
 800def4:	1884b03a 	or	r2,r3,r2
}
 800def8:	e037883a 	mov	sp,fp
 800defc:	df000017 	ldw	fp,0(sp)
 800df00:	dec00104 	addi	sp,sp,4
 800df04:	f800283a 	ret

0800df08 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800df08:	defffd04 	addi	sp,sp,-12
 800df0c:	df000215 	stw	fp,8(sp)
 800df10:	df000204 	addi	fp,sp,8
 800df14:	e13ffe15 	stw	r4,-8(fp)
 800df18:	2805883a 	mov	r2,r5
 800df1c:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800df20:	e0bffe17 	ldw	r2,-8(fp)
 800df24:	10800a17 	ldw	r2,40(r2)
 800df28:	1007883a 	mov	r3,r2
 800df2c:	e0bfff03 	ldbu	r2,-4(fp)
 800df30:	18800025 	stbio	r2,0(r3)
}
 800df34:	e037883a 	mov	sp,fp
 800df38:	df000017 	ldw	fp,0(sp)
 800df3c:	dec00104 	addi	sp,sp,4
 800df40:	f800283a 	ret

0800df44 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800df44:	defffe04 	addi	sp,sp,-8
 800df48:	df000115 	stw	fp,4(sp)
 800df4c:	df000104 	addi	fp,sp,4
 800df50:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800df54:	e0bfff17 	ldw	r2,-4(fp)
 800df58:	10800a17 	ldw	r2,40(r2)
 800df5c:	1007883a 	mov	r3,r2
 800df60:	00800044 	movi	r2,1
 800df64:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800df68:	e037883a 	mov	sp,fp
 800df6c:	df000017 	ldw	fp,0(sp)
 800df70:	dec00104 	addi	sp,sp,4
 800df74:	f800283a 	ret

0800df78 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800df78:	defffc04 	addi	sp,sp,-16
 800df7c:	dfc00315 	stw	ra,12(sp)
 800df80:	df000215 	stw	fp,8(sp)
 800df84:	df000204 	addi	fp,sp,8
 800df88:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800df8c:	e13fff17 	ldw	r4,-4(fp)
 800df90:	01420074 	movhi	r5,2049
 800df94:	2944ea04 	addi	r5,r5,5032
 800df98:	800e6740 	call	800e674 <alt_find_dev>
 800df9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800dfa0:	e0bffe17 	ldw	r2,-8(fp)
}
 800dfa4:	e037883a 	mov	sp,fp
 800dfa8:	dfc00117 	ldw	ra,4(sp)
 800dfac:	df000017 	ldw	fp,0(sp)
 800dfb0:	dec00204 	addi	sp,sp,8
 800dfb4:	f800283a 	ret

0800dfb8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800dfb8:	defffb04 	addi	sp,sp,-20
 800dfbc:	df000415 	stw	fp,16(sp)
 800dfc0:	df000404 	addi	fp,sp,16
 800dfc4:	e13ffd15 	stw	r4,-12(fp)
 800dfc8:	e17ffe15 	stw	r5,-8(fp)
 800dfcc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800dfd0:	e03ffc15 	stw	zero,-16(fp)
 800dfd4:	00000f06 	br	800e014 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800dfd8:	e0bffd17 	ldw	r2,-12(fp)
 800dfdc:	10800a17 	ldw	r2,40(r2)
 800dfe0:	10800044 	addi	r2,r2,1
 800dfe4:	1009883a 	mov	r4,r2
 800dfe8:	e0fffe17 	ldw	r3,-8(fp)
 800dfec:	e0bffc17 	ldw	r2,-16(fp)
 800dff0:	1885883a 	add	r2,r3,r2
 800dff4:	10800003 	ldbu	r2,0(r2)
 800dff8:	10803fcc 	andi	r2,r2,255
 800dffc:	1080201c 	xori	r2,r2,128
 800e000:	10bfe004 	addi	r2,r2,-128
 800e004:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800e008:	e0bffc17 	ldw	r2,-16(fp)
 800e00c:	10800044 	addi	r2,r2,1
 800e010:	e0bffc15 	stw	r2,-16(fp)
 800e014:	e0fffc17 	ldw	r3,-16(fp)
 800e018:	e0bfff17 	ldw	r2,-4(fp)
 800e01c:	18bfee36 	bltu	r3,r2,800dfd8 <__alt_data_end+0xfc00dfd8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800e020:	e037883a 	mov	sp,fp
 800e024:	df000017 	ldw	fp,0(sp)
 800e028:	dec00104 	addi	sp,sp,4
 800e02c:	f800283a 	ret

0800e030 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800e030:	defffd04 	addi	sp,sp,-12
 800e034:	df000215 	stw	fp,8(sp)
 800e038:	df000204 	addi	fp,sp,8
 800e03c:	e13ffe15 	stw	r4,-8(fp)
 800e040:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800e044:	00000d06 	br	800e07c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800e048:	e0bffe17 	ldw	r2,-8(fp)
 800e04c:	10800a17 	ldw	r2,40(r2)
 800e050:	10800044 	addi	r2,r2,1
 800e054:	1007883a 	mov	r3,r2
 800e058:	e0bfff17 	ldw	r2,-4(fp)
 800e05c:	10800003 	ldbu	r2,0(r2)
 800e060:	10803fcc 	andi	r2,r2,255
 800e064:	1080201c 	xori	r2,r2,128
 800e068:	10bfe004 	addi	r2,r2,-128
 800e06c:	18800025 	stbio	r2,0(r3)
		++ptr;
 800e070:	e0bfff17 	ldw	r2,-4(fp)
 800e074:	10800044 	addi	r2,r2,1
 800e078:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800e07c:	e0bfff17 	ldw	r2,-4(fp)
 800e080:	10800003 	ldbu	r2,0(r2)
 800e084:	10803fcc 	andi	r2,r2,255
 800e088:	1080201c 	xori	r2,r2,128
 800e08c:	10bfe004 	addi	r2,r2,-128
 800e090:	103fed1e 	bne	r2,zero,800e048 <__alt_data_end+0xfc00e048>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800e094:	e037883a 	mov	sp,fp
 800e098:	df000017 	ldw	fp,0(sp)
 800e09c:	dec00104 	addi	sp,sp,4
 800e0a0:	f800283a 	ret

0800e0a4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800e0a4:	defffb04 	addi	sp,sp,-20
 800e0a8:	dfc00415 	stw	ra,16(sp)
 800e0ac:	df000315 	stw	fp,12(sp)
 800e0b0:	df000304 	addi	fp,sp,12
 800e0b4:	e13ffd15 	stw	r4,-12(fp)
 800e0b8:	e17ffe15 	stw	r5,-8(fp)
 800e0bc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800e0c0:	e0bffd17 	ldw	r2,-12(fp)
 800e0c4:	10c00017 	ldw	r3,0(r2)
 800e0c8:	e0bfff17 	ldw	r2,-4(fp)
 800e0cc:	1809883a 	mov	r4,r3
 800e0d0:	e17ffe17 	ldw	r5,-8(fp)
 800e0d4:	100d883a 	mov	r6,r2
 800e0d8:	800dfb80 	call	800dfb8 <alt_up_character_lcd_write>
	return 0;
 800e0dc:	0005883a 	mov	r2,zero
}
 800e0e0:	e037883a 	mov	sp,fp
 800e0e4:	dfc00117 	ldw	ra,4(sp)
 800e0e8:	df000017 	ldw	fp,0(sp)
 800e0ec:	dec00204 	addi	sp,sp,8
 800e0f0:	f800283a 	ret

0800e0f4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800e0f4:	defffa04 	addi	sp,sp,-24
 800e0f8:	dfc00515 	stw	ra,20(sp)
 800e0fc:	df000415 	stw	fp,16(sp)
 800e100:	df000404 	addi	fp,sp,16
 800e104:	e13ffd15 	stw	r4,-12(fp)
 800e108:	e17ffe15 	stw	r5,-8(fp)
 800e10c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800e110:	e0bffe17 	ldw	r2,-8(fp)
 800e114:	10800a28 	cmpgeui	r2,r2,40
 800e118:	1000031e 	bne	r2,zero,800e128 <alt_up_character_lcd_set_cursor_pos+0x34>
 800e11c:	e0bfff17 	ldw	r2,-4(fp)
 800e120:	108000b0 	cmpltui	r2,r2,2
 800e124:	1000021e 	bne	r2,zero,800e130 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800e128:	00bfffc4 	movi	r2,-1
 800e12c:	00000906 	br	800e154 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800e130:	e13ffe17 	ldw	r4,-8(fp)
 800e134:	e17fff17 	ldw	r5,-4(fp)
 800e138:	800de940 	call	800de94 <get_DDRAM_addr>
 800e13c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800e140:	e0bffc03 	ldbu	r2,-16(fp)
 800e144:	e13ffd17 	ldw	r4,-12(fp)
 800e148:	100b883a 	mov	r5,r2
 800e14c:	800df080 	call	800df08 <alt_up_character_lcd_send_cmd>
	return 0;
 800e150:	0005883a 	mov	r2,zero
}
 800e154:	e037883a 	mov	sp,fp
 800e158:	dfc00117 	ldw	ra,4(sp)
 800e15c:	df000017 	ldw	fp,0(sp)
 800e160:	dec00204 	addi	sp,sp,8
 800e164:	f800283a 	ret

0800e168 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800e168:	defffb04 	addi	sp,sp,-20
 800e16c:	dfc00415 	stw	ra,16(sp)
 800e170:	df000315 	stw	fp,12(sp)
 800e174:	df000304 	addi	fp,sp,12
 800e178:	e13ffe15 	stw	r4,-8(fp)
 800e17c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800e180:	e0bfff17 	ldw	r2,-4(fp)
 800e184:	1000011e 	bne	r2,zero,800e18c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800e188:	00001406 	br	800e1dc <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800e18c:	e0bfff17 	ldw	r2,-4(fp)
 800e190:	0080020e 	bge	zero,r2,800e19c <alt_up_character_lcd_shift_cursor+0x34>
 800e194:	00800504 	movi	r2,20
 800e198:	00000106 	br	800e1a0 <alt_up_character_lcd_shift_cursor+0x38>
 800e19c:	00800404 	movi	r2,16
 800e1a0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800e1a4:	e0bfff17 	ldw	r2,-4(fp)
 800e1a8:	1000010e 	bge	r2,zero,800e1b0 <alt_up_character_lcd_shift_cursor+0x48>
 800e1ac:	0085c83a 	sub	r2,zero,r2
 800e1b0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e1b4:	00000406 	br	800e1c8 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800e1b8:	e0bffd43 	ldbu	r2,-11(fp)
 800e1bc:	e13ffe17 	ldw	r4,-8(fp)
 800e1c0:	100b883a 	mov	r5,r2
 800e1c4:	800df080 	call	800df08 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e1c8:	e0bffd03 	ldbu	r2,-12(fp)
 800e1cc:	10ffffc4 	addi	r3,r2,-1
 800e1d0:	e0fffd05 	stb	r3,-12(fp)
 800e1d4:	10803fcc 	andi	r2,r2,255
 800e1d8:	103ff71e 	bne	r2,zero,800e1b8 <__alt_data_end+0xfc00e1b8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800e1dc:	e037883a 	mov	sp,fp
 800e1e0:	dfc00117 	ldw	ra,4(sp)
 800e1e4:	df000017 	ldw	fp,0(sp)
 800e1e8:	dec00204 	addi	sp,sp,8
 800e1ec:	f800283a 	ret

0800e1f0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800e1f0:	defffb04 	addi	sp,sp,-20
 800e1f4:	dfc00415 	stw	ra,16(sp)
 800e1f8:	df000315 	stw	fp,12(sp)
 800e1fc:	df000304 	addi	fp,sp,12
 800e200:	e13ffe15 	stw	r4,-8(fp)
 800e204:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800e208:	e0bfff17 	ldw	r2,-4(fp)
 800e20c:	1000011e 	bne	r2,zero,800e214 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800e210:	00001406 	br	800e264 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800e214:	e0bfff17 	ldw	r2,-4(fp)
 800e218:	0080020e 	bge	zero,r2,800e224 <alt_up_character_lcd_shift_display+0x34>
 800e21c:	00800704 	movi	r2,28
 800e220:	00000106 	br	800e228 <alt_up_character_lcd_shift_display+0x38>
 800e224:	00800604 	movi	r2,24
 800e228:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800e22c:	e0bfff17 	ldw	r2,-4(fp)
 800e230:	1000010e 	bge	r2,zero,800e238 <alt_up_character_lcd_shift_display+0x48>
 800e234:	0085c83a 	sub	r2,zero,r2
 800e238:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e23c:	00000406 	br	800e250 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800e240:	e0bffd43 	ldbu	r2,-11(fp)
 800e244:	e13ffe17 	ldw	r4,-8(fp)
 800e248:	100b883a 	mov	r5,r2
 800e24c:	800df080 	call	800df08 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e250:	e0bffd03 	ldbu	r2,-12(fp)
 800e254:	10ffffc4 	addi	r3,r2,-1
 800e258:	e0fffd05 	stb	r3,-12(fp)
 800e25c:	10803fcc 	andi	r2,r2,255
 800e260:	103ff71e 	bne	r2,zero,800e240 <__alt_data_end+0xfc00e240>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800e264:	e037883a 	mov	sp,fp
 800e268:	dfc00117 	ldw	ra,4(sp)
 800e26c:	df000017 	ldw	fp,0(sp)
 800e270:	dec00204 	addi	sp,sp,8
 800e274:	f800283a 	ret

0800e278 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800e278:	defffa04 	addi	sp,sp,-24
 800e27c:	dfc00515 	stw	ra,20(sp)
 800e280:	df000415 	stw	fp,16(sp)
 800e284:	df000404 	addi	fp,sp,16
 800e288:	e13ffd15 	stw	r4,-12(fp)
 800e28c:	e17ffe15 	stw	r5,-8(fp)
 800e290:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800e294:	e0bffe17 	ldw	r2,-8(fp)
 800e298:	10800a28 	cmpgeui	r2,r2,40
 800e29c:	1000031e 	bne	r2,zero,800e2ac <alt_up_character_lcd_erase_pos+0x34>
 800e2a0:	e0bfff17 	ldw	r2,-4(fp)
 800e2a4:	108000b0 	cmpltui	r2,r2,2
 800e2a8:	1000021e 	bne	r2,zero,800e2b4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800e2ac:	00bfffc4 	movi	r2,-1
 800e2b0:	00000f06 	br	800e2f0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800e2b4:	e13ffe17 	ldw	r4,-8(fp)
 800e2b8:	e17fff17 	ldw	r5,-4(fp)
 800e2bc:	800de940 	call	800de94 <get_DDRAM_addr>
 800e2c0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800e2c4:	e0bffc03 	ldbu	r2,-16(fp)
 800e2c8:	e13ffd17 	ldw	r4,-12(fp)
 800e2cc:	100b883a 	mov	r5,r2
 800e2d0:	800df080 	call	800df08 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800e2d4:	e0bffd17 	ldw	r2,-12(fp)
 800e2d8:	10800a17 	ldw	r2,40(r2)
 800e2dc:	10800044 	addi	r2,r2,1
 800e2e0:	1007883a 	mov	r3,r2
 800e2e4:	00800084 	movi	r2,2
 800e2e8:	18800025 	stbio	r2,0(r3)
	return 0;
 800e2ec:	0005883a 	mov	r2,zero
}
 800e2f0:	e037883a 	mov	sp,fp
 800e2f4:	dfc00117 	ldw	ra,4(sp)
 800e2f8:	df000017 	ldw	fp,0(sp)
 800e2fc:	dec00204 	addi	sp,sp,8
 800e300:	f800283a 	ret

0800e304 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800e304:	defffd04 	addi	sp,sp,-12
 800e308:	dfc00215 	stw	ra,8(sp)
 800e30c:	df000115 	stw	fp,4(sp)
 800e310:	df000104 	addi	fp,sp,4
 800e314:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800e318:	e13fff17 	ldw	r4,-4(fp)
 800e31c:	01400304 	movi	r5,12
 800e320:	800df080 	call	800df08 <alt_up_character_lcd_send_cmd>
}
 800e324:	e037883a 	mov	sp,fp
 800e328:	dfc00117 	ldw	ra,4(sp)
 800e32c:	df000017 	ldw	fp,0(sp)
 800e330:	dec00204 	addi	sp,sp,8
 800e334:	f800283a 	ret

0800e338 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800e338:	defffd04 	addi	sp,sp,-12
 800e33c:	dfc00215 	stw	ra,8(sp)
 800e340:	df000115 	stw	fp,4(sp)
 800e344:	df000104 	addi	fp,sp,4
 800e348:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800e34c:	e13fff17 	ldw	r4,-4(fp)
 800e350:	014003c4 	movi	r5,15
 800e354:	800df080 	call	800df08 <alt_up_character_lcd_send_cmd>
}
 800e358:	e037883a 	mov	sp,fp
 800e35c:	dfc00117 	ldw	ra,4(sp)
 800e360:	df000017 	ldw	fp,0(sp)
 800e364:	dec00204 	addi	sp,sp,8
 800e368:	f800283a 	ret

0800e36c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e36c:	defff504 	addi	sp,sp,-44
 800e370:	df000a15 	stw	fp,40(sp)
 800e374:	df000a04 	addi	fp,sp,40
 800e378:	e13ffc15 	stw	r4,-16(fp)
 800e37c:	e17ffd15 	stw	r5,-12(fp)
 800e380:	e1bffe15 	stw	r6,-8(fp)
 800e384:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e388:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e38c:	00820074 	movhi	r2,2049
 800e390:	108bc304 	addi	r2,r2,12044
 800e394:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800e398:	10003f26 	beq	r2,zero,800e498 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800e39c:	e0bffc17 	ldw	r2,-16(fp)
 800e3a0:	10003b26 	beq	r2,zero,800e490 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800e3a4:	e0bffc17 	ldw	r2,-16(fp)
 800e3a8:	e0fffe17 	ldw	r3,-8(fp)
 800e3ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800e3b0:	e0bffc17 	ldw	r2,-16(fp)
 800e3b4:	e0ffff17 	ldw	r3,-4(fp)
 800e3b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e3bc:	0005303a 	rdctl	r2,status
 800e3c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e3c4:	e0fff817 	ldw	r3,-32(fp)
 800e3c8:	00bfff84 	movi	r2,-2
 800e3cc:	1884703a 	and	r2,r3,r2
 800e3d0:	1001703a 	wrctl	status,r2
  
  return context;
 800e3d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800e3d8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e3dc:	00820074 	movhi	r2,2049
 800e3e0:	108bc404 	addi	r2,r2,12048
 800e3e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800e3e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800e3ec:	e0fffd17 	ldw	r3,-12(fp)
 800e3f0:	e0bff617 	ldw	r2,-40(fp)
 800e3f4:	1885883a 	add	r2,r3,r2
 800e3f8:	10c00044 	addi	r3,r2,1
 800e3fc:	e0bffc17 	ldw	r2,-16(fp)
 800e400:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800e404:	e0bffc17 	ldw	r2,-16(fp)
 800e408:	10c00217 	ldw	r3,8(r2)
 800e40c:	e0bff617 	ldw	r2,-40(fp)
 800e410:	1880042e 	bgeu	r3,r2,800e424 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800e414:	e0bffc17 	ldw	r2,-16(fp)
 800e418:	00c00044 	movi	r3,1
 800e41c:	10c00405 	stb	r3,16(r2)
 800e420:	00000206 	br	800e42c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800e424:	e0bffc17 	ldw	r2,-16(fp)
 800e428:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800e42c:	e0fffc17 	ldw	r3,-16(fp)
 800e430:	00820074 	movhi	r2,2049
 800e434:	1084f004 	addi	r2,r2,5056
 800e438:	e0bff915 	stw	r2,-28(fp)
 800e43c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e440:	e0bffa17 	ldw	r2,-24(fp)
 800e444:	e0fff917 	ldw	r3,-28(fp)
 800e448:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e44c:	e0bff917 	ldw	r2,-28(fp)
 800e450:	10c00017 	ldw	r3,0(r2)
 800e454:	e0bffa17 	ldw	r2,-24(fp)
 800e458:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e45c:	e0bff917 	ldw	r2,-28(fp)
 800e460:	10800017 	ldw	r2,0(r2)
 800e464:	e0fffa17 	ldw	r3,-24(fp)
 800e468:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e46c:	e0bff917 	ldw	r2,-28(fp)
 800e470:	e0fffa17 	ldw	r3,-24(fp)
 800e474:	10c00015 	stw	r3,0(r2)
 800e478:	e0bff717 	ldw	r2,-36(fp)
 800e47c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e480:	e0bffb17 	ldw	r2,-20(fp)
 800e484:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800e488:	0005883a 	mov	r2,zero
 800e48c:	00000306 	br	800e49c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800e490:	00bffa84 	movi	r2,-22
 800e494:	00000106 	br	800e49c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800e498:	00bfde84 	movi	r2,-134
  }
}
 800e49c:	e037883a 	mov	sp,fp
 800e4a0:	df000017 	ldw	fp,0(sp)
 800e4a4:	dec00104 	addi	sp,sp,4
 800e4a8:	f800283a 	ret

0800e4ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800e4ac:	deffff04 	addi	sp,sp,-4
 800e4b0:	df000015 	stw	fp,0(sp)
 800e4b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800e4b8:	e037883a 	mov	sp,fp
 800e4bc:	df000017 	ldw	fp,0(sp)
 800e4c0:	dec00104 	addi	sp,sp,4
 800e4c4:	f800283a 	ret

0800e4c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e4c8:	defffe04 	addi	sp,sp,-8
 800e4cc:	dfc00115 	stw	ra,4(sp)
 800e4d0:	df000015 	stw	fp,0(sp)
 800e4d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e4d8:	00820074 	movhi	r2,2049
 800e4dc:	1084ed04 	addi	r2,r2,5044
 800e4e0:	10800017 	ldw	r2,0(r2)
 800e4e4:	10000526 	beq	r2,zero,800e4fc <alt_get_errno+0x34>
 800e4e8:	00820074 	movhi	r2,2049
 800e4ec:	1084ed04 	addi	r2,r2,5044
 800e4f0:	10800017 	ldw	r2,0(r2)
 800e4f4:	103ee83a 	callr	r2
 800e4f8:	00000206 	br	800e504 <alt_get_errno+0x3c>
 800e4fc:	00820074 	movhi	r2,2049
 800e500:	108bbe04 	addi	r2,r2,12024
}
 800e504:	e037883a 	mov	sp,fp
 800e508:	dfc00117 	ldw	ra,4(sp)
 800e50c:	df000017 	ldw	fp,0(sp)
 800e510:	dec00204 	addi	sp,sp,8
 800e514:	f800283a 	ret

0800e518 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800e518:	defffa04 	addi	sp,sp,-24
 800e51c:	dfc00515 	stw	ra,20(sp)
 800e520:	df000415 	stw	fp,16(sp)
 800e524:	df000404 	addi	fp,sp,16
 800e528:	e13ffe15 	stw	r4,-8(fp)
 800e52c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800e530:	e0bffe17 	ldw	r2,-8(fp)
 800e534:	10000326 	beq	r2,zero,800e544 <alt_dev_llist_insert+0x2c>
 800e538:	e0bffe17 	ldw	r2,-8(fp)
 800e53c:	10800217 	ldw	r2,8(r2)
 800e540:	1000061e 	bne	r2,zero,800e55c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800e544:	800e4c80 	call	800e4c8 <alt_get_errno>
 800e548:	1007883a 	mov	r3,r2
 800e54c:	00800584 	movi	r2,22
 800e550:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800e554:	00bffa84 	movi	r2,-22
 800e558:	00001306 	br	800e5a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800e55c:	e0bffe17 	ldw	r2,-8(fp)
 800e560:	e0ffff17 	ldw	r3,-4(fp)
 800e564:	e0fffc15 	stw	r3,-16(fp)
 800e568:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e56c:	e0bffd17 	ldw	r2,-12(fp)
 800e570:	e0fffc17 	ldw	r3,-16(fp)
 800e574:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e578:	e0bffc17 	ldw	r2,-16(fp)
 800e57c:	10c00017 	ldw	r3,0(r2)
 800e580:	e0bffd17 	ldw	r2,-12(fp)
 800e584:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e588:	e0bffc17 	ldw	r2,-16(fp)
 800e58c:	10800017 	ldw	r2,0(r2)
 800e590:	e0fffd17 	ldw	r3,-12(fp)
 800e594:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e598:	e0bffc17 	ldw	r2,-16(fp)
 800e59c:	e0fffd17 	ldw	r3,-12(fp)
 800e5a0:	10c00015 	stw	r3,0(r2)

  return 0;  
 800e5a4:	0005883a 	mov	r2,zero
}
 800e5a8:	e037883a 	mov	sp,fp
 800e5ac:	dfc00117 	ldw	ra,4(sp)
 800e5b0:	df000017 	ldw	fp,0(sp)
 800e5b4:	dec00204 	addi	sp,sp,8
 800e5b8:	f800283a 	ret

0800e5bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800e5bc:	defffd04 	addi	sp,sp,-12
 800e5c0:	dfc00215 	stw	ra,8(sp)
 800e5c4:	df000115 	stw	fp,4(sp)
 800e5c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e5cc:	00820074 	movhi	r2,2049
 800e5d0:	10bd5804 	addi	r2,r2,-2720
 800e5d4:	e0bfff15 	stw	r2,-4(fp)
 800e5d8:	00000606 	br	800e5f4 <_do_ctors+0x38>
        (*ctor) (); 
 800e5dc:	e0bfff17 	ldw	r2,-4(fp)
 800e5e0:	10800017 	ldw	r2,0(r2)
 800e5e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e5e8:	e0bfff17 	ldw	r2,-4(fp)
 800e5ec:	10bfff04 	addi	r2,r2,-4
 800e5f0:	e0bfff15 	stw	r2,-4(fp)
 800e5f4:	e0ffff17 	ldw	r3,-4(fp)
 800e5f8:	00820074 	movhi	r2,2049
 800e5fc:	10bd5904 	addi	r2,r2,-2716
 800e600:	18bff62e 	bgeu	r3,r2,800e5dc <__alt_data_end+0xfc00e5dc>
        (*ctor) (); 
}
 800e604:	e037883a 	mov	sp,fp
 800e608:	dfc00117 	ldw	ra,4(sp)
 800e60c:	df000017 	ldw	fp,0(sp)
 800e610:	dec00204 	addi	sp,sp,8
 800e614:	f800283a 	ret

0800e618 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800e618:	defffd04 	addi	sp,sp,-12
 800e61c:	dfc00215 	stw	ra,8(sp)
 800e620:	df000115 	stw	fp,4(sp)
 800e624:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e628:	00820074 	movhi	r2,2049
 800e62c:	10bd5804 	addi	r2,r2,-2720
 800e630:	e0bfff15 	stw	r2,-4(fp)
 800e634:	00000606 	br	800e650 <_do_dtors+0x38>
        (*dtor) (); 
 800e638:	e0bfff17 	ldw	r2,-4(fp)
 800e63c:	10800017 	ldw	r2,0(r2)
 800e640:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e644:	e0bfff17 	ldw	r2,-4(fp)
 800e648:	10bfff04 	addi	r2,r2,-4
 800e64c:	e0bfff15 	stw	r2,-4(fp)
 800e650:	e0ffff17 	ldw	r3,-4(fp)
 800e654:	00820074 	movhi	r2,2049
 800e658:	10bd5904 	addi	r2,r2,-2716
 800e65c:	18bff62e 	bgeu	r3,r2,800e638 <__alt_data_end+0xfc00e638>
        (*dtor) (); 
}
 800e660:	e037883a 	mov	sp,fp
 800e664:	dfc00117 	ldw	ra,4(sp)
 800e668:	df000017 	ldw	fp,0(sp)
 800e66c:	dec00204 	addi	sp,sp,8
 800e670:	f800283a 	ret

0800e674 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800e674:	defffa04 	addi	sp,sp,-24
 800e678:	dfc00515 	stw	ra,20(sp)
 800e67c:	df000415 	stw	fp,16(sp)
 800e680:	df000404 	addi	fp,sp,16
 800e684:	e13ffe15 	stw	r4,-8(fp)
 800e688:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800e68c:	e0bfff17 	ldw	r2,-4(fp)
 800e690:	10800017 	ldw	r2,0(r2)
 800e694:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800e698:	e13ffe17 	ldw	r4,-8(fp)
 800e69c:	8006c4c0 	call	8006c4c <strlen>
 800e6a0:	10800044 	addi	r2,r2,1
 800e6a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e6a8:	00000d06 	br	800e6e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800e6ac:	e0bffc17 	ldw	r2,-16(fp)
 800e6b0:	10c00217 	ldw	r3,8(r2)
 800e6b4:	e0bffd17 	ldw	r2,-12(fp)
 800e6b8:	1809883a 	mov	r4,r3
 800e6bc:	e17ffe17 	ldw	r5,-8(fp)
 800e6c0:	100d883a 	mov	r6,r2
 800e6c4:	800f20c0 	call	800f20c <memcmp>
 800e6c8:	1000021e 	bne	r2,zero,800e6d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800e6cc:	e0bffc17 	ldw	r2,-16(fp)
 800e6d0:	00000706 	br	800e6f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800e6d4:	e0bffc17 	ldw	r2,-16(fp)
 800e6d8:	10800017 	ldw	r2,0(r2)
 800e6dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e6e0:	e0fffc17 	ldw	r3,-16(fp)
 800e6e4:	e0bfff17 	ldw	r2,-4(fp)
 800e6e8:	18bff01e 	bne	r3,r2,800e6ac <__alt_data_end+0xfc00e6ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800e6ec:	0005883a 	mov	r2,zero
}
 800e6f0:	e037883a 	mov	sp,fp
 800e6f4:	dfc00117 	ldw	ra,4(sp)
 800e6f8:	df000017 	ldw	fp,0(sp)
 800e6fc:	dec00204 	addi	sp,sp,8
 800e700:	f800283a 	ret

0800e704 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800e704:	defffe04 	addi	sp,sp,-8
 800e708:	dfc00115 	stw	ra,4(sp)
 800e70c:	df000015 	stw	fp,0(sp)
 800e710:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800e714:	0009883a 	mov	r4,zero
 800e718:	01440004 	movi	r5,4096
 800e71c:	800f1340 	call	800f134 <alt_icache_flush>
#endif
}
 800e720:	e037883a 	mov	sp,fp
 800e724:	dfc00117 	ldw	ra,4(sp)
 800e728:	df000017 	ldw	fp,0(sp)
 800e72c:	dec00204 	addi	sp,sp,8
 800e730:	f800283a 	ret

0800e734 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e734:	defff904 	addi	sp,sp,-28
 800e738:	dfc00615 	stw	ra,24(sp)
 800e73c:	df000515 	stw	fp,20(sp)
 800e740:	df000504 	addi	fp,sp,20
 800e744:	e13ffc15 	stw	r4,-16(fp)
 800e748:	e17ffd15 	stw	r5,-12(fp)
 800e74c:	e1bffe15 	stw	r6,-8(fp)
 800e750:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800e754:	e0800217 	ldw	r2,8(fp)
 800e758:	d8800015 	stw	r2,0(sp)
 800e75c:	e13ffc17 	ldw	r4,-16(fp)
 800e760:	e17ffd17 	ldw	r5,-12(fp)
 800e764:	e1bffe17 	ldw	r6,-8(fp)
 800e768:	e1ffff17 	ldw	r7,-4(fp)
 800e76c:	800e9140 	call	800e914 <alt_iic_isr_register>
}  
 800e770:	e037883a 	mov	sp,fp
 800e774:	dfc00117 	ldw	ra,4(sp)
 800e778:	df000017 	ldw	fp,0(sp)
 800e77c:	dec00204 	addi	sp,sp,8
 800e780:	f800283a 	ret

0800e784 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800e784:	defff904 	addi	sp,sp,-28
 800e788:	df000615 	stw	fp,24(sp)
 800e78c:	df000604 	addi	fp,sp,24
 800e790:	e13ffe15 	stw	r4,-8(fp)
 800e794:	e17fff15 	stw	r5,-4(fp)
 800e798:	e0bfff17 	ldw	r2,-4(fp)
 800e79c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e7a0:	0005303a 	rdctl	r2,status
 800e7a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e7a8:	e0fffb17 	ldw	r3,-20(fp)
 800e7ac:	00bfff84 	movi	r2,-2
 800e7b0:	1884703a 	and	r2,r3,r2
 800e7b4:	1001703a 	wrctl	status,r2
  
  return context;
 800e7b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e7bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800e7c0:	e0bffa17 	ldw	r2,-24(fp)
 800e7c4:	00c00044 	movi	r3,1
 800e7c8:	1884983a 	sll	r2,r3,r2
 800e7cc:	1007883a 	mov	r3,r2
 800e7d0:	00820074 	movhi	r2,2049
 800e7d4:	108bc204 	addi	r2,r2,12040
 800e7d8:	10800017 	ldw	r2,0(r2)
 800e7dc:	1886b03a 	or	r3,r3,r2
 800e7e0:	00820074 	movhi	r2,2049
 800e7e4:	108bc204 	addi	r2,r2,12040
 800e7e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e7ec:	00820074 	movhi	r2,2049
 800e7f0:	108bc204 	addi	r2,r2,12040
 800e7f4:	10800017 	ldw	r2,0(r2)
 800e7f8:	100170fa 	wrctl	ienable,r2
 800e7fc:	e0bffc17 	ldw	r2,-16(fp)
 800e800:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e804:	e0bffd17 	ldw	r2,-12(fp)
 800e808:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e80c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800e810:	0001883a 	nop
}
 800e814:	e037883a 	mov	sp,fp
 800e818:	df000017 	ldw	fp,0(sp)
 800e81c:	dec00104 	addi	sp,sp,4
 800e820:	f800283a 	ret

0800e824 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800e824:	defff904 	addi	sp,sp,-28
 800e828:	df000615 	stw	fp,24(sp)
 800e82c:	df000604 	addi	fp,sp,24
 800e830:	e13ffe15 	stw	r4,-8(fp)
 800e834:	e17fff15 	stw	r5,-4(fp)
 800e838:	e0bfff17 	ldw	r2,-4(fp)
 800e83c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e840:	0005303a 	rdctl	r2,status
 800e844:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e848:	e0fffb17 	ldw	r3,-20(fp)
 800e84c:	00bfff84 	movi	r2,-2
 800e850:	1884703a 	and	r2,r3,r2
 800e854:	1001703a 	wrctl	status,r2
  
  return context;
 800e858:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e85c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800e860:	e0bffa17 	ldw	r2,-24(fp)
 800e864:	00c00044 	movi	r3,1
 800e868:	1884983a 	sll	r2,r3,r2
 800e86c:	0084303a 	nor	r2,zero,r2
 800e870:	1007883a 	mov	r3,r2
 800e874:	00820074 	movhi	r2,2049
 800e878:	108bc204 	addi	r2,r2,12040
 800e87c:	10800017 	ldw	r2,0(r2)
 800e880:	1886703a 	and	r3,r3,r2
 800e884:	00820074 	movhi	r2,2049
 800e888:	108bc204 	addi	r2,r2,12040
 800e88c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e890:	00820074 	movhi	r2,2049
 800e894:	108bc204 	addi	r2,r2,12040
 800e898:	10800017 	ldw	r2,0(r2)
 800e89c:	100170fa 	wrctl	ienable,r2
 800e8a0:	e0bffc17 	ldw	r2,-16(fp)
 800e8a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e8a8:	e0bffd17 	ldw	r2,-12(fp)
 800e8ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e8b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800e8b4:	0001883a 	nop
}
 800e8b8:	e037883a 	mov	sp,fp
 800e8bc:	df000017 	ldw	fp,0(sp)
 800e8c0:	dec00104 	addi	sp,sp,4
 800e8c4:	f800283a 	ret

0800e8c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800e8c8:	defffc04 	addi	sp,sp,-16
 800e8cc:	df000315 	stw	fp,12(sp)
 800e8d0:	df000304 	addi	fp,sp,12
 800e8d4:	e13ffe15 	stw	r4,-8(fp)
 800e8d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800e8dc:	000530fa 	rdctl	r2,ienable
 800e8e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800e8e4:	e0bfff17 	ldw	r2,-4(fp)
 800e8e8:	00c00044 	movi	r3,1
 800e8ec:	1884983a 	sll	r2,r3,r2
 800e8f0:	1007883a 	mov	r3,r2
 800e8f4:	e0bffd17 	ldw	r2,-12(fp)
 800e8f8:	1884703a 	and	r2,r3,r2
 800e8fc:	1004c03a 	cmpne	r2,r2,zero
 800e900:	10803fcc 	andi	r2,r2,255
}
 800e904:	e037883a 	mov	sp,fp
 800e908:	df000017 	ldw	fp,0(sp)
 800e90c:	dec00104 	addi	sp,sp,4
 800e910:	f800283a 	ret

0800e914 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e914:	defff504 	addi	sp,sp,-44
 800e918:	dfc00a15 	stw	ra,40(sp)
 800e91c:	df000915 	stw	fp,36(sp)
 800e920:	df000904 	addi	fp,sp,36
 800e924:	e13ffc15 	stw	r4,-16(fp)
 800e928:	e17ffd15 	stw	r5,-12(fp)
 800e92c:	e1bffe15 	stw	r6,-8(fp)
 800e930:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800e934:	00bffa84 	movi	r2,-22
 800e938:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800e93c:	e0bffd17 	ldw	r2,-12(fp)
 800e940:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800e944:	e0bff817 	ldw	r2,-32(fp)
 800e948:	10800808 	cmpgei	r2,r2,32
 800e94c:	1000271e 	bne	r2,zero,800e9ec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e950:	0005303a 	rdctl	r2,status
 800e954:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e958:	e0fffa17 	ldw	r3,-24(fp)
 800e95c:	00bfff84 	movi	r2,-2
 800e960:	1884703a 	and	r2,r3,r2
 800e964:	1001703a 	wrctl	status,r2
  
  return context;
 800e968:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800e96c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800e970:	00820074 	movhi	r2,2049
 800e974:	108bcf04 	addi	r2,r2,12092
 800e978:	e0fff817 	ldw	r3,-32(fp)
 800e97c:	180690fa 	slli	r3,r3,3
 800e980:	10c5883a 	add	r2,r2,r3
 800e984:	e0fffe17 	ldw	r3,-8(fp)
 800e988:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800e98c:	00820074 	movhi	r2,2049
 800e990:	108bcf04 	addi	r2,r2,12092
 800e994:	e0fff817 	ldw	r3,-32(fp)
 800e998:	180690fa 	slli	r3,r3,3
 800e99c:	10c5883a 	add	r2,r2,r3
 800e9a0:	10800104 	addi	r2,r2,4
 800e9a4:	e0ffff17 	ldw	r3,-4(fp)
 800e9a8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800e9ac:	e0bffe17 	ldw	r2,-8(fp)
 800e9b0:	10000526 	beq	r2,zero,800e9c8 <alt_iic_isr_register+0xb4>
 800e9b4:	e0bff817 	ldw	r2,-32(fp)
 800e9b8:	e13ffc17 	ldw	r4,-16(fp)
 800e9bc:	100b883a 	mov	r5,r2
 800e9c0:	800e7840 	call	800e784 <alt_ic_irq_enable>
 800e9c4:	00000406 	br	800e9d8 <alt_iic_isr_register+0xc4>
 800e9c8:	e0bff817 	ldw	r2,-32(fp)
 800e9cc:	e13ffc17 	ldw	r4,-16(fp)
 800e9d0:	100b883a 	mov	r5,r2
 800e9d4:	800e8240 	call	800e824 <alt_ic_irq_disable>
 800e9d8:	e0bff715 	stw	r2,-36(fp)
 800e9dc:	e0bff917 	ldw	r2,-28(fp)
 800e9e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e9e4:	e0bffb17 	ldw	r2,-20(fp)
 800e9e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800e9ec:	e0bff717 	ldw	r2,-36(fp)
}
 800e9f0:	e037883a 	mov	sp,fp
 800e9f4:	dfc00117 	ldw	ra,4(sp)
 800e9f8:	df000017 	ldw	fp,0(sp)
 800e9fc:	dec00204 	addi	sp,sp,8
 800ea00:	f800283a 	ret

0800ea04 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800ea04:	defff904 	addi	sp,sp,-28
 800ea08:	dfc00615 	stw	ra,24(sp)
 800ea0c:	df000515 	stw	fp,20(sp)
 800ea10:	df000504 	addi	fp,sp,20
 800ea14:	e13ffc15 	stw	r4,-16(fp)
 800ea18:	e17ffd15 	stw	r5,-12(fp)
 800ea1c:	e1bffe15 	stw	r6,-8(fp)
 800ea20:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800ea24:	e13ffd17 	ldw	r4,-12(fp)
 800ea28:	e17ffe17 	ldw	r5,-8(fp)
 800ea2c:	e1bfff17 	ldw	r6,-4(fp)
 800ea30:	800ec580 	call	800ec58 <open>
 800ea34:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800ea38:	e0bffb17 	ldw	r2,-20(fp)
 800ea3c:	10001c16 	blt	r2,zero,800eab0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800ea40:	00820074 	movhi	r2,2049
 800ea44:	10805f04 	addi	r2,r2,380
 800ea48:	e0fffb17 	ldw	r3,-20(fp)
 800ea4c:	18c00324 	muli	r3,r3,12
 800ea50:	10c5883a 	add	r2,r2,r3
 800ea54:	10c00017 	ldw	r3,0(r2)
 800ea58:	e0bffc17 	ldw	r2,-16(fp)
 800ea5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800ea60:	00820074 	movhi	r2,2049
 800ea64:	10805f04 	addi	r2,r2,380
 800ea68:	e0fffb17 	ldw	r3,-20(fp)
 800ea6c:	18c00324 	muli	r3,r3,12
 800ea70:	10c5883a 	add	r2,r2,r3
 800ea74:	10800104 	addi	r2,r2,4
 800ea78:	10c00017 	ldw	r3,0(r2)
 800ea7c:	e0bffc17 	ldw	r2,-16(fp)
 800ea80:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800ea84:	00820074 	movhi	r2,2049
 800ea88:	10805f04 	addi	r2,r2,380
 800ea8c:	e0fffb17 	ldw	r3,-20(fp)
 800ea90:	18c00324 	muli	r3,r3,12
 800ea94:	10c5883a 	add	r2,r2,r3
 800ea98:	10800204 	addi	r2,r2,8
 800ea9c:	10c00017 	ldw	r3,0(r2)
 800eaa0:	e0bffc17 	ldw	r2,-16(fp)
 800eaa4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800eaa8:	e13ffb17 	ldw	r4,-20(fp)
 800eaac:	800d0180 	call	800d018 <alt_release_fd>
  }
} 
 800eab0:	e037883a 	mov	sp,fp
 800eab4:	dfc00117 	ldw	ra,4(sp)
 800eab8:	df000017 	ldw	fp,0(sp)
 800eabc:	dec00204 	addi	sp,sp,8
 800eac0:	f800283a 	ret

0800eac4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800eac4:	defffb04 	addi	sp,sp,-20
 800eac8:	dfc00415 	stw	ra,16(sp)
 800eacc:	df000315 	stw	fp,12(sp)
 800ead0:	df000304 	addi	fp,sp,12
 800ead4:	e13ffd15 	stw	r4,-12(fp)
 800ead8:	e17ffe15 	stw	r5,-8(fp)
 800eadc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800eae0:	01020074 	movhi	r4,2049
 800eae4:	21006204 	addi	r4,r4,392
 800eae8:	e17ffd17 	ldw	r5,-12(fp)
 800eaec:	01800044 	movi	r6,1
 800eaf0:	01c07fc4 	movi	r7,511
 800eaf4:	800ea040 	call	800ea04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800eaf8:	01020074 	movhi	r4,2049
 800eafc:	21005f04 	addi	r4,r4,380
 800eb00:	e17ffe17 	ldw	r5,-8(fp)
 800eb04:	000d883a 	mov	r6,zero
 800eb08:	01c07fc4 	movi	r7,511
 800eb0c:	800ea040 	call	800ea04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800eb10:	01020074 	movhi	r4,2049
 800eb14:	21006504 	addi	r4,r4,404
 800eb18:	e17fff17 	ldw	r5,-4(fp)
 800eb1c:	01800044 	movi	r6,1
 800eb20:	01c07fc4 	movi	r7,511
 800eb24:	800ea040 	call	800ea04 <alt_open_fd>
}  
 800eb28:	e037883a 	mov	sp,fp
 800eb2c:	dfc00117 	ldw	ra,4(sp)
 800eb30:	df000017 	ldw	fp,0(sp)
 800eb34:	dec00204 	addi	sp,sp,8
 800eb38:	f800283a 	ret

0800eb3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb3c:	defffe04 	addi	sp,sp,-8
 800eb40:	dfc00115 	stw	ra,4(sp)
 800eb44:	df000015 	stw	fp,0(sp)
 800eb48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb4c:	00820074 	movhi	r2,2049
 800eb50:	1084ed04 	addi	r2,r2,5044
 800eb54:	10800017 	ldw	r2,0(r2)
 800eb58:	10000526 	beq	r2,zero,800eb70 <alt_get_errno+0x34>
 800eb5c:	00820074 	movhi	r2,2049
 800eb60:	1084ed04 	addi	r2,r2,5044
 800eb64:	10800017 	ldw	r2,0(r2)
 800eb68:	103ee83a 	callr	r2
 800eb6c:	00000206 	br	800eb78 <alt_get_errno+0x3c>
 800eb70:	00820074 	movhi	r2,2049
 800eb74:	108bbe04 	addi	r2,r2,12024
}
 800eb78:	e037883a 	mov	sp,fp
 800eb7c:	dfc00117 	ldw	ra,4(sp)
 800eb80:	df000017 	ldw	fp,0(sp)
 800eb84:	dec00204 	addi	sp,sp,8
 800eb88:	f800283a 	ret

0800eb8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800eb8c:	defffd04 	addi	sp,sp,-12
 800eb90:	df000215 	stw	fp,8(sp)
 800eb94:	df000204 	addi	fp,sp,8
 800eb98:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800eb9c:	e0bfff17 	ldw	r2,-4(fp)
 800eba0:	10800217 	ldw	r2,8(r2)
 800eba4:	10d00034 	orhi	r3,r2,16384
 800eba8:	e0bfff17 	ldw	r2,-4(fp)
 800ebac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800ebb0:	e03ffe15 	stw	zero,-8(fp)
 800ebb4:	00001d06 	br	800ec2c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800ebb8:	00820074 	movhi	r2,2049
 800ebbc:	10805f04 	addi	r2,r2,380
 800ebc0:	e0fffe17 	ldw	r3,-8(fp)
 800ebc4:	18c00324 	muli	r3,r3,12
 800ebc8:	10c5883a 	add	r2,r2,r3
 800ebcc:	10c00017 	ldw	r3,0(r2)
 800ebd0:	e0bfff17 	ldw	r2,-4(fp)
 800ebd4:	10800017 	ldw	r2,0(r2)
 800ebd8:	1880111e 	bne	r3,r2,800ec20 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800ebdc:	00820074 	movhi	r2,2049
 800ebe0:	10805f04 	addi	r2,r2,380
 800ebe4:	e0fffe17 	ldw	r3,-8(fp)
 800ebe8:	18c00324 	muli	r3,r3,12
 800ebec:	10c5883a 	add	r2,r2,r3
 800ebf0:	10800204 	addi	r2,r2,8
 800ebf4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800ebf8:	1000090e 	bge	r2,zero,800ec20 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800ebfc:	e0bffe17 	ldw	r2,-8(fp)
 800ec00:	10c00324 	muli	r3,r2,12
 800ec04:	00820074 	movhi	r2,2049
 800ec08:	10805f04 	addi	r2,r2,380
 800ec0c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800ec10:	e0bfff17 	ldw	r2,-4(fp)
 800ec14:	18800226 	beq	r3,r2,800ec20 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800ec18:	00bffcc4 	movi	r2,-13
 800ec1c:	00000a06 	br	800ec48 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800ec20:	e0bffe17 	ldw	r2,-8(fp)
 800ec24:	10800044 	addi	r2,r2,1
 800ec28:	e0bffe15 	stw	r2,-8(fp)
 800ec2c:	00820074 	movhi	r2,2049
 800ec30:	1084ec04 	addi	r2,r2,5040
 800ec34:	10800017 	ldw	r2,0(r2)
 800ec38:	1007883a 	mov	r3,r2
 800ec3c:	e0bffe17 	ldw	r2,-8(fp)
 800ec40:	18bfdd2e 	bgeu	r3,r2,800ebb8 <__alt_data_end+0xfc00ebb8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800ec44:	0005883a 	mov	r2,zero
}
 800ec48:	e037883a 	mov	sp,fp
 800ec4c:	df000017 	ldw	fp,0(sp)
 800ec50:	dec00104 	addi	sp,sp,4
 800ec54:	f800283a 	ret

0800ec58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800ec58:	defff604 	addi	sp,sp,-40
 800ec5c:	dfc00915 	stw	ra,36(sp)
 800ec60:	df000815 	stw	fp,32(sp)
 800ec64:	df000804 	addi	fp,sp,32
 800ec68:	e13ffd15 	stw	r4,-12(fp)
 800ec6c:	e17ffe15 	stw	r5,-8(fp)
 800ec70:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800ec74:	00bfffc4 	movi	r2,-1
 800ec78:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800ec7c:	00bffb44 	movi	r2,-19
 800ec80:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800ec84:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800ec88:	e13ffd17 	ldw	r4,-12(fp)
 800ec8c:	01420074 	movhi	r5,2049
 800ec90:	2944ea04 	addi	r5,r5,5032
 800ec94:	800e6740 	call	800e674 <alt_find_dev>
 800ec98:	e0bff815 	stw	r2,-32(fp)
 800ec9c:	e0bff817 	ldw	r2,-32(fp)
 800eca0:	1000051e 	bne	r2,zero,800ecb8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800eca4:	e13ffd17 	ldw	r4,-12(fp)
 800eca8:	800ef6c0 	call	800ef6c <alt_find_file>
 800ecac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800ecb0:	00800044 	movi	r2,1
 800ecb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800ecb8:	e0bff817 	ldw	r2,-32(fp)
 800ecbc:	10002926 	beq	r2,zero,800ed64 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800ecc0:	e13ff817 	ldw	r4,-32(fp)
 800ecc4:	800f0800 	call	800f080 <alt_get_fd>
 800ecc8:	e0bff915 	stw	r2,-28(fp)
 800eccc:	e0bff917 	ldw	r2,-28(fp)
 800ecd0:	1000030e 	bge	r2,zero,800ece0 <open+0x88>
    {
      status = index;
 800ecd4:	e0bff917 	ldw	r2,-28(fp)
 800ecd8:	e0bffa15 	stw	r2,-24(fp)
 800ecdc:	00002306 	br	800ed6c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 800ece0:	e0bff917 	ldw	r2,-28(fp)
 800ece4:	10c00324 	muli	r3,r2,12
 800ece8:	00820074 	movhi	r2,2049
 800ecec:	10805f04 	addi	r2,r2,380
 800ecf0:	1885883a 	add	r2,r3,r2
 800ecf4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800ecf8:	e0fffe17 	ldw	r3,-8(fp)
 800ecfc:	00900034 	movhi	r2,16384
 800ed00:	10bfffc4 	addi	r2,r2,-1
 800ed04:	1886703a 	and	r3,r3,r2
 800ed08:	e0bffc17 	ldw	r2,-16(fp)
 800ed0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ed10:	e0bffb17 	ldw	r2,-20(fp)
 800ed14:	1000051e 	bne	r2,zero,800ed2c <open+0xd4>
 800ed18:	e13ffc17 	ldw	r4,-16(fp)
 800ed1c:	800eb8c0 	call	800eb8c <alt_file_locked>
 800ed20:	e0bffa15 	stw	r2,-24(fp)
 800ed24:	e0bffa17 	ldw	r2,-24(fp)
 800ed28:	10001016 	blt	r2,zero,800ed6c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800ed2c:	e0bff817 	ldw	r2,-32(fp)
 800ed30:	10800317 	ldw	r2,12(r2)
 800ed34:	10000826 	beq	r2,zero,800ed58 <open+0x100>
 800ed38:	e0bff817 	ldw	r2,-32(fp)
 800ed3c:	10800317 	ldw	r2,12(r2)
 800ed40:	e13ffc17 	ldw	r4,-16(fp)
 800ed44:	e17ffd17 	ldw	r5,-12(fp)
 800ed48:	e1bffe17 	ldw	r6,-8(fp)
 800ed4c:	e1ffff17 	ldw	r7,-4(fp)
 800ed50:	103ee83a 	callr	r2
 800ed54:	00000106 	br	800ed5c <open+0x104>
 800ed58:	0005883a 	mov	r2,zero
 800ed5c:	e0bffa15 	stw	r2,-24(fp)
 800ed60:	00000206 	br	800ed6c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800ed64:	00bffb44 	movi	r2,-19
 800ed68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800ed6c:	e0bffa17 	ldw	r2,-24(fp)
 800ed70:	1000090e 	bge	r2,zero,800ed98 <open+0x140>
  {
    alt_release_fd (index);  
 800ed74:	e13ff917 	ldw	r4,-28(fp)
 800ed78:	800d0180 	call	800d018 <alt_release_fd>
    ALT_ERRNO = -status;
 800ed7c:	800eb3c0 	call	800eb3c <alt_get_errno>
 800ed80:	1007883a 	mov	r3,r2
 800ed84:	e0bffa17 	ldw	r2,-24(fp)
 800ed88:	0085c83a 	sub	r2,zero,r2
 800ed8c:	18800015 	stw	r2,0(r3)
    return -1;
 800ed90:	00bfffc4 	movi	r2,-1
 800ed94:	00000106 	br	800ed9c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 800ed98:	e0bff917 	ldw	r2,-28(fp)
}
 800ed9c:	e037883a 	mov	sp,fp
 800eda0:	dfc00117 	ldw	ra,4(sp)
 800eda4:	df000017 	ldw	fp,0(sp)
 800eda8:	dec00204 	addi	sp,sp,8
 800edac:	f800283a 	ret

0800edb0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800edb0:	defffa04 	addi	sp,sp,-24
 800edb4:	df000515 	stw	fp,20(sp)
 800edb8:	df000504 	addi	fp,sp,20
 800edbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800edc0:	0005303a 	rdctl	r2,status
 800edc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800edc8:	e0fffc17 	ldw	r3,-16(fp)
 800edcc:	00bfff84 	movi	r2,-2
 800edd0:	1884703a 	and	r2,r3,r2
 800edd4:	1001703a 	wrctl	status,r2
  
  return context;
 800edd8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800eddc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800ede0:	e0bfff17 	ldw	r2,-4(fp)
 800ede4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800ede8:	e0bffd17 	ldw	r2,-12(fp)
 800edec:	10800017 	ldw	r2,0(r2)
 800edf0:	e0fffd17 	ldw	r3,-12(fp)
 800edf4:	18c00117 	ldw	r3,4(r3)
 800edf8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800edfc:	e0bffd17 	ldw	r2,-12(fp)
 800ee00:	10800117 	ldw	r2,4(r2)
 800ee04:	e0fffd17 	ldw	r3,-12(fp)
 800ee08:	18c00017 	ldw	r3,0(r3)
 800ee0c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800ee10:	e0bffd17 	ldw	r2,-12(fp)
 800ee14:	e0fffd17 	ldw	r3,-12(fp)
 800ee18:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800ee1c:	e0bffd17 	ldw	r2,-12(fp)
 800ee20:	e0fffd17 	ldw	r3,-12(fp)
 800ee24:	10c00015 	stw	r3,0(r2)
 800ee28:	e0bffb17 	ldw	r2,-20(fp)
 800ee2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ee30:	e0bffe17 	ldw	r2,-8(fp)
 800ee34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800ee38:	e037883a 	mov	sp,fp
 800ee3c:	df000017 	ldw	fp,0(sp)
 800ee40:	dec00104 	addi	sp,sp,4
 800ee44:	f800283a 	ret

0800ee48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800ee48:	defffb04 	addi	sp,sp,-20
 800ee4c:	dfc00415 	stw	ra,16(sp)
 800ee50:	df000315 	stw	fp,12(sp)
 800ee54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800ee58:	d0a00e17 	ldw	r2,-32712(gp)
 800ee5c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800ee60:	d0a6e217 	ldw	r2,-25720(gp)
 800ee64:	10800044 	addi	r2,r2,1
 800ee68:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ee6c:	00002e06 	br	800ef28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800ee70:	e0bffd17 	ldw	r2,-12(fp)
 800ee74:	10800017 	ldw	r2,0(r2)
 800ee78:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800ee7c:	e0bffd17 	ldw	r2,-12(fp)
 800ee80:	10800403 	ldbu	r2,16(r2)
 800ee84:	10803fcc 	andi	r2,r2,255
 800ee88:	10000426 	beq	r2,zero,800ee9c <alt_tick+0x54>
 800ee8c:	d0a6e217 	ldw	r2,-25720(gp)
 800ee90:	1000021e 	bne	r2,zero,800ee9c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800ee94:	e0bffd17 	ldw	r2,-12(fp)
 800ee98:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800ee9c:	e0bffd17 	ldw	r2,-12(fp)
 800eea0:	10800217 	ldw	r2,8(r2)
 800eea4:	d0e6e217 	ldw	r3,-25720(gp)
 800eea8:	18801d36 	bltu	r3,r2,800ef20 <alt_tick+0xd8>
 800eeac:	e0bffd17 	ldw	r2,-12(fp)
 800eeb0:	10800403 	ldbu	r2,16(r2)
 800eeb4:	10803fcc 	andi	r2,r2,255
 800eeb8:	1000191e 	bne	r2,zero,800ef20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800eebc:	e0bffd17 	ldw	r2,-12(fp)
 800eec0:	10800317 	ldw	r2,12(r2)
 800eec4:	e0fffd17 	ldw	r3,-12(fp)
 800eec8:	18c00517 	ldw	r3,20(r3)
 800eecc:	1809883a 	mov	r4,r3
 800eed0:	103ee83a 	callr	r2
 800eed4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800eed8:	e0bfff17 	ldw	r2,-4(fp)
 800eedc:	1000031e 	bne	r2,zero,800eeec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800eee0:	e13ffd17 	ldw	r4,-12(fp)
 800eee4:	800edb00 	call	800edb0 <alt_alarm_stop>
 800eee8:	00000d06 	br	800ef20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800eeec:	e0bffd17 	ldw	r2,-12(fp)
 800eef0:	10c00217 	ldw	r3,8(r2)
 800eef4:	e0bfff17 	ldw	r2,-4(fp)
 800eef8:	1887883a 	add	r3,r3,r2
 800eefc:	e0bffd17 	ldw	r2,-12(fp)
 800ef00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800ef04:	e0bffd17 	ldw	r2,-12(fp)
 800ef08:	10c00217 	ldw	r3,8(r2)
 800ef0c:	d0a6e217 	ldw	r2,-25720(gp)
 800ef10:	1880032e 	bgeu	r3,r2,800ef20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800ef14:	e0bffd17 	ldw	r2,-12(fp)
 800ef18:	00c00044 	movi	r3,1
 800ef1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800ef20:	e0bffe17 	ldw	r2,-8(fp)
 800ef24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ef28:	e0fffd17 	ldw	r3,-12(fp)
 800ef2c:	d0a00e04 	addi	r2,gp,-32712
 800ef30:	18bfcf1e 	bne	r3,r2,800ee70 <__alt_data_end+0xfc00ee70>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800ef34:	0001883a 	nop
}
 800ef38:	e037883a 	mov	sp,fp
 800ef3c:	dfc00117 	ldw	ra,4(sp)
 800ef40:	df000017 	ldw	fp,0(sp)
 800ef44:	dec00204 	addi	sp,sp,8
 800ef48:	f800283a 	ret

0800ef4c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800ef4c:	deffff04 	addi	sp,sp,-4
 800ef50:	df000015 	stw	fp,0(sp)
 800ef54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800ef58:	000170fa 	wrctl	ienable,zero
}
 800ef5c:	e037883a 	mov	sp,fp
 800ef60:	df000017 	ldw	fp,0(sp)
 800ef64:	dec00104 	addi	sp,sp,4
 800ef68:	f800283a 	ret

0800ef6c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800ef6c:	defffb04 	addi	sp,sp,-20
 800ef70:	dfc00415 	stw	ra,16(sp)
 800ef74:	df000315 	stw	fp,12(sp)
 800ef78:	df000304 	addi	fp,sp,12
 800ef7c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800ef80:	00820074 	movhi	r2,2049
 800ef84:	1084e804 	addi	r2,r2,5024
 800ef88:	10800017 	ldw	r2,0(r2)
 800ef8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ef90:	00003106 	br	800f058 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800ef94:	e0bffd17 	ldw	r2,-12(fp)
 800ef98:	10800217 	ldw	r2,8(r2)
 800ef9c:	1009883a 	mov	r4,r2
 800efa0:	8006c4c0 	call	8006c4c <strlen>
 800efa4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800efa8:	e0bffd17 	ldw	r2,-12(fp)
 800efac:	10c00217 	ldw	r3,8(r2)
 800efb0:	e0bffe17 	ldw	r2,-8(fp)
 800efb4:	10bfffc4 	addi	r2,r2,-1
 800efb8:	1885883a 	add	r2,r3,r2
 800efbc:	10800003 	ldbu	r2,0(r2)
 800efc0:	10803fcc 	andi	r2,r2,255
 800efc4:	1080201c 	xori	r2,r2,128
 800efc8:	10bfe004 	addi	r2,r2,-128
 800efcc:	10800bd8 	cmpnei	r2,r2,47
 800efd0:	1000031e 	bne	r2,zero,800efe0 <alt_find_file+0x74>
    {
      len -= 1;
 800efd4:	e0bffe17 	ldw	r2,-8(fp)
 800efd8:	10bfffc4 	addi	r2,r2,-1
 800efdc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800efe0:	e0bffe17 	ldw	r2,-8(fp)
 800efe4:	e0ffff17 	ldw	r3,-4(fp)
 800efe8:	1885883a 	add	r2,r3,r2
 800efec:	10800003 	ldbu	r2,0(r2)
 800eff0:	10803fcc 	andi	r2,r2,255
 800eff4:	1080201c 	xori	r2,r2,128
 800eff8:	10bfe004 	addi	r2,r2,-128
 800effc:	10800be0 	cmpeqi	r2,r2,47
 800f000:	1000081e 	bne	r2,zero,800f024 <alt_find_file+0xb8>
 800f004:	e0bffe17 	ldw	r2,-8(fp)
 800f008:	e0ffff17 	ldw	r3,-4(fp)
 800f00c:	1885883a 	add	r2,r3,r2
 800f010:	10800003 	ldbu	r2,0(r2)
 800f014:	10803fcc 	andi	r2,r2,255
 800f018:	1080201c 	xori	r2,r2,128
 800f01c:	10bfe004 	addi	r2,r2,-128
 800f020:	10000a1e 	bne	r2,zero,800f04c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800f024:	e0bffd17 	ldw	r2,-12(fp)
 800f028:	10c00217 	ldw	r3,8(r2)
 800f02c:	e0bffe17 	ldw	r2,-8(fp)
 800f030:	1809883a 	mov	r4,r3
 800f034:	e17fff17 	ldw	r5,-4(fp)
 800f038:	100d883a 	mov	r6,r2
 800f03c:	800f20c0 	call	800f20c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f040:	1000021e 	bne	r2,zero,800f04c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800f044:	e0bffd17 	ldw	r2,-12(fp)
 800f048:	00000806 	br	800f06c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800f04c:	e0bffd17 	ldw	r2,-12(fp)
 800f050:	10800017 	ldw	r2,0(r2)
 800f054:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f058:	e0fffd17 	ldw	r3,-12(fp)
 800f05c:	00820074 	movhi	r2,2049
 800f060:	1084e804 	addi	r2,r2,5024
 800f064:	18bfcb1e 	bne	r3,r2,800ef94 <__alt_data_end+0xfc00ef94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800f068:	0005883a 	mov	r2,zero
}
 800f06c:	e037883a 	mov	sp,fp
 800f070:	dfc00117 	ldw	ra,4(sp)
 800f074:	df000017 	ldw	fp,0(sp)
 800f078:	dec00204 	addi	sp,sp,8
 800f07c:	f800283a 	ret

0800f080 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800f080:	defffc04 	addi	sp,sp,-16
 800f084:	df000315 	stw	fp,12(sp)
 800f088:	df000304 	addi	fp,sp,12
 800f08c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800f090:	00bffa04 	movi	r2,-24
 800f094:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f098:	e03ffd15 	stw	zero,-12(fp)
 800f09c:	00001d06 	br	800f114 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800f0a0:	00820074 	movhi	r2,2049
 800f0a4:	10805f04 	addi	r2,r2,380
 800f0a8:	e0fffd17 	ldw	r3,-12(fp)
 800f0ac:	18c00324 	muli	r3,r3,12
 800f0b0:	10c5883a 	add	r2,r2,r3
 800f0b4:	10800017 	ldw	r2,0(r2)
 800f0b8:	1000131e 	bne	r2,zero,800f108 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800f0bc:	00820074 	movhi	r2,2049
 800f0c0:	10805f04 	addi	r2,r2,380
 800f0c4:	e0fffd17 	ldw	r3,-12(fp)
 800f0c8:	18c00324 	muli	r3,r3,12
 800f0cc:	10c5883a 	add	r2,r2,r3
 800f0d0:	e0ffff17 	ldw	r3,-4(fp)
 800f0d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800f0d8:	00820074 	movhi	r2,2049
 800f0dc:	1084ec04 	addi	r2,r2,5040
 800f0e0:	10c00017 	ldw	r3,0(r2)
 800f0e4:	e0bffd17 	ldw	r2,-12(fp)
 800f0e8:	1880040e 	bge	r3,r2,800f0fc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800f0ec:	00820074 	movhi	r2,2049
 800f0f0:	1084ec04 	addi	r2,r2,5040
 800f0f4:	e0fffd17 	ldw	r3,-12(fp)
 800f0f8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800f0fc:	e0bffd17 	ldw	r2,-12(fp)
 800f100:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800f104:	00000606 	br	800f120 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f108:	e0bffd17 	ldw	r2,-12(fp)
 800f10c:	10800044 	addi	r2,r2,1
 800f110:	e0bffd15 	stw	r2,-12(fp)
 800f114:	e0bffd17 	ldw	r2,-12(fp)
 800f118:	10800810 	cmplti	r2,r2,32
 800f11c:	103fe01e 	bne	r2,zero,800f0a0 <__alt_data_end+0xfc00f0a0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800f120:	e0bffe17 	ldw	r2,-8(fp)
}
 800f124:	e037883a 	mov	sp,fp
 800f128:	df000017 	ldw	fp,0(sp)
 800f12c:	dec00104 	addi	sp,sp,4
 800f130:	f800283a 	ret

0800f134 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800f134:	defffb04 	addi	sp,sp,-20
 800f138:	df000415 	stw	fp,16(sp)
 800f13c:	df000404 	addi	fp,sp,16
 800f140:	e13ffe15 	stw	r4,-8(fp)
 800f144:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800f148:	e0bfff17 	ldw	r2,-4(fp)
 800f14c:	10840070 	cmpltui	r2,r2,4097
 800f150:	1000021e 	bne	r2,zero,800f15c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800f154:	00840004 	movi	r2,4096
 800f158:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800f15c:	e0fffe17 	ldw	r3,-8(fp)
 800f160:	e0bfff17 	ldw	r2,-4(fp)
 800f164:	1885883a 	add	r2,r3,r2
 800f168:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800f16c:	e0bffe17 	ldw	r2,-8(fp)
 800f170:	e0bffc15 	stw	r2,-16(fp)
 800f174:	00000506 	br	800f18c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800f178:	e0bffc17 	ldw	r2,-16(fp)
 800f17c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800f180:	e0bffc17 	ldw	r2,-16(fp)
 800f184:	10800804 	addi	r2,r2,32
 800f188:	e0bffc15 	stw	r2,-16(fp)
 800f18c:	e0fffc17 	ldw	r3,-16(fp)
 800f190:	e0bffd17 	ldw	r2,-12(fp)
 800f194:	18bff836 	bltu	r3,r2,800f178 <__alt_data_end+0xfc00f178>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800f198:	e0bffe17 	ldw	r2,-8(fp)
 800f19c:	108007cc 	andi	r2,r2,31
 800f1a0:	10000226 	beq	r2,zero,800f1ac <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800f1a4:	e0bffc17 	ldw	r2,-16(fp)
 800f1a8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800f1ac:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800f1b0:	e037883a 	mov	sp,fp
 800f1b4:	df000017 	ldw	fp,0(sp)
 800f1b8:	dec00104 	addi	sp,sp,4
 800f1bc:	f800283a 	ret

0800f1c0 <atexit>:
 800f1c0:	200b883a 	mov	r5,r4
 800f1c4:	000d883a 	mov	r6,zero
 800f1c8:	0009883a 	mov	r4,zero
 800f1cc:	000f883a 	mov	r7,zero
 800f1d0:	800f2881 	jmpi	800f288 <__register_exitproc>

0800f1d4 <exit>:
 800f1d4:	defffe04 	addi	sp,sp,-8
 800f1d8:	000b883a 	mov	r5,zero
 800f1dc:	dc000015 	stw	r16,0(sp)
 800f1e0:	dfc00115 	stw	ra,4(sp)
 800f1e4:	2021883a 	mov	r16,r4
 800f1e8:	800f39c0 	call	800f39c <__call_exitprocs>
 800f1ec:	00820074 	movhi	r2,2049
 800f1f0:	1084e204 	addi	r2,r2,5000
 800f1f4:	11000017 	ldw	r4,0(r2)
 800f1f8:	20800f17 	ldw	r2,60(r4)
 800f1fc:	10000126 	beq	r2,zero,800f204 <exit+0x30>
 800f200:	103ee83a 	callr	r2
 800f204:	8009883a 	mov	r4,r16
 800f208:	800f5300 	call	800f530 <_exit>

0800f20c <memcmp>:
 800f20c:	01c000c4 	movi	r7,3
 800f210:	3980192e 	bgeu	r7,r6,800f278 <memcmp+0x6c>
 800f214:	2144b03a 	or	r2,r4,r5
 800f218:	11c4703a 	and	r2,r2,r7
 800f21c:	10000f26 	beq	r2,zero,800f25c <memcmp+0x50>
 800f220:	20800003 	ldbu	r2,0(r4)
 800f224:	28c00003 	ldbu	r3,0(r5)
 800f228:	10c0151e 	bne	r2,r3,800f280 <memcmp+0x74>
 800f22c:	31bfff84 	addi	r6,r6,-2
 800f230:	01ffffc4 	movi	r7,-1
 800f234:	00000406 	br	800f248 <memcmp+0x3c>
 800f238:	20800003 	ldbu	r2,0(r4)
 800f23c:	28c00003 	ldbu	r3,0(r5)
 800f240:	31bfffc4 	addi	r6,r6,-1
 800f244:	10c00e1e 	bne	r2,r3,800f280 <memcmp+0x74>
 800f248:	21000044 	addi	r4,r4,1
 800f24c:	29400044 	addi	r5,r5,1
 800f250:	31fff91e 	bne	r6,r7,800f238 <__alt_data_end+0xfc00f238>
 800f254:	0005883a 	mov	r2,zero
 800f258:	f800283a 	ret
 800f25c:	20c00017 	ldw	r3,0(r4)
 800f260:	28800017 	ldw	r2,0(r5)
 800f264:	1880041e 	bne	r3,r2,800f278 <memcmp+0x6c>
 800f268:	31bfff04 	addi	r6,r6,-4
 800f26c:	21000104 	addi	r4,r4,4
 800f270:	29400104 	addi	r5,r5,4
 800f274:	39bff936 	bltu	r7,r6,800f25c <__alt_data_end+0xfc00f25c>
 800f278:	303fe91e 	bne	r6,zero,800f220 <__alt_data_end+0xfc00f220>
 800f27c:	003ff506 	br	800f254 <__alt_data_end+0xfc00f254>
 800f280:	10c5c83a 	sub	r2,r2,r3
 800f284:	f800283a 	ret

0800f288 <__register_exitproc>:
 800f288:	00820074 	movhi	r2,2049
 800f28c:	defffa04 	addi	sp,sp,-24
 800f290:	1084e204 	addi	r2,r2,5000
 800f294:	dc000315 	stw	r16,12(sp)
 800f298:	14000017 	ldw	r16,0(r2)
 800f29c:	dc400415 	stw	r17,16(sp)
 800f2a0:	dfc00515 	stw	ra,20(sp)
 800f2a4:	80805217 	ldw	r2,328(r16)
 800f2a8:	2023883a 	mov	r17,r4
 800f2ac:	10003626 	beq	r2,zero,800f388 <__register_exitproc+0x100>
 800f2b0:	10c00117 	ldw	r3,4(r2)
 800f2b4:	010007c4 	movi	r4,31
 800f2b8:	20c00e16 	blt	r4,r3,800f2f4 <__register_exitproc+0x6c>
 800f2bc:	1a400044 	addi	r9,r3,1
 800f2c0:	8800211e 	bne	r17,zero,800f348 <__register_exitproc+0xc0>
 800f2c4:	18c00084 	addi	r3,r3,2
 800f2c8:	18c7883a 	add	r3,r3,r3
 800f2cc:	18c7883a 	add	r3,r3,r3
 800f2d0:	12400115 	stw	r9,4(r2)
 800f2d4:	10c7883a 	add	r3,r2,r3
 800f2d8:	19400015 	stw	r5,0(r3)
 800f2dc:	0005883a 	mov	r2,zero
 800f2e0:	dfc00517 	ldw	ra,20(sp)
 800f2e4:	dc400417 	ldw	r17,16(sp)
 800f2e8:	dc000317 	ldw	r16,12(sp)
 800f2ec:	dec00604 	addi	sp,sp,24
 800f2f0:	f800283a 	ret
 800f2f4:	00800034 	movhi	r2,0
 800f2f8:	10800004 	addi	r2,r2,0
 800f2fc:	10002526 	beq	r2,zero,800f394 <__register_exitproc+0x10c>
 800f300:	01006404 	movi	r4,400
 800f304:	d9400015 	stw	r5,0(sp)
 800f308:	d9800115 	stw	r6,4(sp)
 800f30c:	d9c00215 	stw	r7,8(sp)
 800f310:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800f314:	d9400017 	ldw	r5,0(sp)
 800f318:	d9800117 	ldw	r6,4(sp)
 800f31c:	d9c00217 	ldw	r7,8(sp)
 800f320:	10001c26 	beq	r2,zero,800f394 <__register_exitproc+0x10c>
 800f324:	80c05217 	ldw	r3,328(r16)
 800f328:	10000115 	stw	zero,4(r2)
 800f32c:	02400044 	movi	r9,1
 800f330:	10c00015 	stw	r3,0(r2)
 800f334:	80805215 	stw	r2,328(r16)
 800f338:	10006215 	stw	zero,392(r2)
 800f33c:	10006315 	stw	zero,396(r2)
 800f340:	0007883a 	mov	r3,zero
 800f344:	883fdf26 	beq	r17,zero,800f2c4 <__alt_data_end+0xfc00f2c4>
 800f348:	18d1883a 	add	r8,r3,r3
 800f34c:	4211883a 	add	r8,r8,r8
 800f350:	1211883a 	add	r8,r2,r8
 800f354:	41802215 	stw	r6,136(r8)
 800f358:	01000044 	movi	r4,1
 800f35c:	11806217 	ldw	r6,392(r2)
 800f360:	20c8983a 	sll	r4,r4,r3
 800f364:	310cb03a 	or	r6,r6,r4
 800f368:	11806215 	stw	r6,392(r2)
 800f36c:	41c04215 	stw	r7,264(r8)
 800f370:	01800084 	movi	r6,2
 800f374:	89bfd31e 	bne	r17,r6,800f2c4 <__alt_data_end+0xfc00f2c4>
 800f378:	11806317 	ldw	r6,396(r2)
 800f37c:	3108b03a 	or	r4,r6,r4
 800f380:	11006315 	stw	r4,396(r2)
 800f384:	003fcf06 	br	800f2c4 <__alt_data_end+0xfc00f2c4>
 800f388:	80805304 	addi	r2,r16,332
 800f38c:	80805215 	stw	r2,328(r16)
 800f390:	003fc706 	br	800f2b0 <__alt_data_end+0xfc00f2b0>
 800f394:	00bfffc4 	movi	r2,-1
 800f398:	003fd106 	br	800f2e0 <__alt_data_end+0xfc00f2e0>

0800f39c <__call_exitprocs>:
 800f39c:	00820074 	movhi	r2,2049
 800f3a0:	1084e204 	addi	r2,r2,5000
 800f3a4:	10800017 	ldw	r2,0(r2)
 800f3a8:	defff404 	addi	sp,sp,-48
 800f3ac:	dd800815 	stw	r22,32(sp)
 800f3b0:	d8800015 	stw	r2,0(sp)
 800f3b4:	10805204 	addi	r2,r2,328
 800f3b8:	dd000615 	stw	r20,24(sp)
 800f3bc:	dc800415 	stw	r18,16(sp)
 800f3c0:	dfc00b15 	stw	ra,44(sp)
 800f3c4:	df000a15 	stw	fp,40(sp)
 800f3c8:	ddc00915 	stw	r23,36(sp)
 800f3cc:	dd400715 	stw	r21,28(sp)
 800f3d0:	dcc00515 	stw	r19,20(sp)
 800f3d4:	dc400315 	stw	r17,12(sp)
 800f3d8:	dc000215 	stw	r16,8(sp)
 800f3dc:	2025883a 	mov	r18,r4
 800f3e0:	2829883a 	mov	r20,r5
 800f3e4:	d8800115 	stw	r2,4(sp)
 800f3e8:	05bfffc4 	movi	r22,-1
 800f3ec:	d8800017 	ldw	r2,0(sp)
 800f3f0:	14c05217 	ldw	r19,328(r2)
 800f3f4:	98001d26 	beq	r19,zero,800f46c <__call_exitprocs+0xd0>
 800f3f8:	dd400117 	ldw	r21,4(sp)
 800f3fc:	98800117 	ldw	r2,4(r19)
 800f400:	173fffc4 	addi	fp,r2,-1
 800f404:	e0000d16 	blt	fp,zero,800f43c <__call_exitprocs+0xa0>
 800f408:	14000044 	addi	r16,r2,1
 800f40c:	8421883a 	add	r16,r16,r16
 800f410:	8421883a 	add	r16,r16,r16
 800f414:	84402004 	addi	r17,r16,128
 800f418:	9c63883a 	add	r17,r19,r17
 800f41c:	9c21883a 	add	r16,r19,r16
 800f420:	a0001e26 	beq	r20,zero,800f49c <__call_exitprocs+0x100>
 800f424:	80804017 	ldw	r2,256(r16)
 800f428:	15001c26 	beq	r2,r20,800f49c <__call_exitprocs+0x100>
 800f42c:	e73fffc4 	addi	fp,fp,-1
 800f430:	843fff04 	addi	r16,r16,-4
 800f434:	8c7fff04 	addi	r17,r17,-4
 800f438:	e5bff91e 	bne	fp,r22,800f420 <__alt_data_end+0xfc00f420>
 800f43c:	00800034 	movhi	r2,0
 800f440:	10800004 	addi	r2,r2,0
 800f444:	10000926 	beq	r2,zero,800f46c <__call_exitprocs+0xd0>
 800f448:	98800117 	ldw	r2,4(r19)
 800f44c:	1000311e 	bne	r2,zero,800f514 <__call_exitprocs+0x178>
 800f450:	98800017 	ldw	r2,0(r19)
 800f454:	10003426 	beq	r2,zero,800f528 <__call_exitprocs+0x18c>
 800f458:	9809883a 	mov	r4,r19
 800f45c:	a8800015 	stw	r2,0(r21)
 800f460:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800f464:	acc00017 	ldw	r19,0(r21)
 800f468:	983fe41e 	bne	r19,zero,800f3fc <__alt_data_end+0xfc00f3fc>
 800f46c:	dfc00b17 	ldw	ra,44(sp)
 800f470:	df000a17 	ldw	fp,40(sp)
 800f474:	ddc00917 	ldw	r23,36(sp)
 800f478:	dd800817 	ldw	r22,32(sp)
 800f47c:	dd400717 	ldw	r21,28(sp)
 800f480:	dd000617 	ldw	r20,24(sp)
 800f484:	dcc00517 	ldw	r19,20(sp)
 800f488:	dc800417 	ldw	r18,16(sp)
 800f48c:	dc400317 	ldw	r17,12(sp)
 800f490:	dc000217 	ldw	r16,8(sp)
 800f494:	dec00c04 	addi	sp,sp,48
 800f498:	f800283a 	ret
 800f49c:	98800117 	ldw	r2,4(r19)
 800f4a0:	80c00017 	ldw	r3,0(r16)
 800f4a4:	10bfffc4 	addi	r2,r2,-1
 800f4a8:	17001526 	beq	r2,fp,800f500 <__call_exitprocs+0x164>
 800f4ac:	80000015 	stw	zero,0(r16)
 800f4b0:	183fde26 	beq	r3,zero,800f42c <__alt_data_end+0xfc00f42c>
 800f4b4:	00800044 	movi	r2,1
 800f4b8:	1708983a 	sll	r4,r2,fp
 800f4bc:	98806217 	ldw	r2,392(r19)
 800f4c0:	9dc00117 	ldw	r23,4(r19)
 800f4c4:	2084703a 	and	r2,r4,r2
 800f4c8:	1000061e 	bne	r2,zero,800f4e4 <__call_exitprocs+0x148>
 800f4cc:	183ee83a 	callr	r3
 800f4d0:	98800117 	ldw	r2,4(r19)
 800f4d4:	15ffc51e 	bne	r2,r23,800f3ec <__alt_data_end+0xfc00f3ec>
 800f4d8:	a8800017 	ldw	r2,0(r21)
 800f4dc:	14ffd326 	beq	r2,r19,800f42c <__alt_data_end+0xfc00f42c>
 800f4e0:	003fc206 	br	800f3ec <__alt_data_end+0xfc00f3ec>
 800f4e4:	98806317 	ldw	r2,396(r19)
 800f4e8:	2084703a 	and	r2,r4,r2
 800f4ec:	1000061e 	bne	r2,zero,800f508 <__call_exitprocs+0x16c>
 800f4f0:	89400017 	ldw	r5,0(r17)
 800f4f4:	9009883a 	mov	r4,r18
 800f4f8:	183ee83a 	callr	r3
 800f4fc:	003ff406 	br	800f4d0 <__alt_data_end+0xfc00f4d0>
 800f500:	9f000115 	stw	fp,4(r19)
 800f504:	003fea06 	br	800f4b0 <__alt_data_end+0xfc00f4b0>
 800f508:	89000017 	ldw	r4,0(r17)
 800f50c:	183ee83a 	callr	r3
 800f510:	003fef06 	br	800f4d0 <__alt_data_end+0xfc00f4d0>
 800f514:	98800017 	ldw	r2,0(r19)
 800f518:	982b883a 	mov	r21,r19
 800f51c:	1027883a 	mov	r19,r2
 800f520:	983fb61e 	bne	r19,zero,800f3fc <__alt_data_end+0xfc00f3fc>
 800f524:	003fd106 	br	800f46c <__alt_data_end+0xfc00f46c>
 800f528:	0005883a 	mov	r2,zero
 800f52c:	003ffa06 	br	800f518 <__alt_data_end+0xfc00f518>

0800f530 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800f530:	defffd04 	addi	sp,sp,-12
 800f534:	df000215 	stw	fp,8(sp)
 800f538:	df000204 	addi	fp,sp,8
 800f53c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800f540:	0001883a 	nop
 800f544:	e0bfff17 	ldw	r2,-4(fp)
 800f548:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800f54c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800f550:	10000226 	beq	r2,zero,800f55c <_exit+0x2c>
    ALT_SIM_FAIL();
 800f554:	002af070 	cmpltui	zero,zero,43969
 800f558:	00000106 	br	800f560 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800f55c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800f560:	003fff06 	br	800f560 <__alt_data_end+0xfc00f560>
